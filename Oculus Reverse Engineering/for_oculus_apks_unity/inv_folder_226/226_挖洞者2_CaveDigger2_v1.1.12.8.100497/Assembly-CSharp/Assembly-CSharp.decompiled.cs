using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using BehaviorDesigner.Runtime;
using BehaviorDesigner.Runtime.Tasks;
using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using Databox;
using DigitalRuby.LightningBolt;
using Ending1;
using Ending4;
using ExitGames.Client.Photon;
using HandGadget;
using HexabodyVR.PlayerController;
using HurricaneVR.Framework.Components;
using HurricaneVR.Framework.ControllerInput;
using HurricaneVR.Framework.Core;
using HurricaneVR.Framework.Core.Bags;
using HurricaneVR.Framework.Core.Grabbers;
using HurricaneVR.Framework.Core.Player;
using HurricaneVR.Framework.Core.Sockets;
using HurricaneVR.Framework.Core.UI;
using HurricaneVR.Framework.Shared;
using HurricaneVR.Framework.Shared.HandPoser;
using HurricaneVR.Framework.Weapons;
using I2.Loc;
using Il2CppDummyDll;
using InGameUI;
using LevelGeneration;
using LitJson;
using MEC;
using MarchingCubes.DiggingArea;
using MeshCombineStudio;
using Oculus.Platform;
using Oculus.Platform.Models;
using OculusNetworking;
using PathCreation;
using Photon.Chat;
using Photon.Pun;
using Photon.Realtime;
using Photon.Voice.PUN;
using Photon.Voice.Unity;
using Photon.Voice.Unity.UtilityScripts;
using PicoNetworking;
using PlaystationNetworking;
using QuickOutline;
using RootMotion.Demos;
using RootMotion.FinalIK;
using Sigtrap.VrTunnellingPro;
using Smooth;
using Sony.NP;
using SteamNetworking;
using Steamworks;
using Steamworks.Data;
using TMPro;
using Tutorial;
using Umbrace.Unity.PurePool;
using Unity.Burst;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Jobs;
using Unity.Mathematics;
using Unity.XR.CoreUtils;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.AddressableAssets;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Experimental.GlobalIllumination;
using UnityEngine.InputSystem;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using UnityEngine.ResourceManagement.AsyncOperations;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.SpatialTracking;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Management;
using UnrealByte.EasyJira;
using VRUiKits.Utils;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[CreateAssetMenu(fileName = "AudioClip", menuName = "ScriptableObjects/AudioClip", order = 1)]
public class AudioClipScriptableObject : ScriptableObject
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip audioClip;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MusicManager.MusicPhase musicPhase;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x1101F4C", Offset = "0x1101F4C", VA = "0x1101F4C")]
	public AudioClipScriptableObject()
	{
	}
}
[Token(Token = "0x2000003")]
public class BehaviorSelection : MonoBehaviour
{
	[Token(Token = "0x2000004")]
	private enum BehaviorSelectionType
	{
		[Token(Token = "0x4000016")]
		MoveTowards,
		[Token(Token = "0x4000017")]
		RotateTowards,
		[Token(Token = "0x4000018")]
		Seek,
		[Token(Token = "0x4000019")]
		Flee,
		[Token(Token = "0x400001A")]
		Pursue,
		[Token(Token = "0x400001B")]
		Evade,
		[Token(Token = "0x400001C")]
		Follow,
		[Token(Token = "0x400001D")]
		Patrol,
		[Token(Token = "0x400001E")]
		Cover,
		[Token(Token = "0x400001F")]
		Wander,
		[Token(Token = "0x4000020")]
		Search,
		[Token(Token = "0x4000021")]
		WithinDistance,
		[Token(Token = "0x4000022")]
		CanSeeObject,
		[Token(Token = "0x4000023")]
		CanHearObject,
		[Token(Token = "0x4000024")]
		Flock,
		[Token(Token = "0x4000025")]
		LeaderFollow,
		[Token(Token = "0x4000026")]
		Queue,
		[Token(Token = "0x4000027")]
		Last
	}

	[Token(Token = "0x2000005")]
	[CompilerGenerated]
	private sealed class <EnableBehavior>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400002A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BehaviorSelection <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600000D")]
			[Address(RVA = "0x1103F7C", Offset = "0x1103F7C", VA = "0x1103F7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600000F")]
			[Address(RVA = "0x1103FC4", Offset = "0x1103FC4", VA = "0x1103FC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600000A")]
		[Address(RVA = "0x1103DC0", Offset = "0x1103DC0", VA = "0x1103DC0")]
		[DebuggerHidden]
		public <EnableBehavior>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x600000B")]
		[Address(RVA = "0x1103E70", Offset = "0x1103E70", VA = "0x1103E70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600000C")]
		[Address(RVA = "0x1103E74", Offset = "0x1103E74", VA = "0x1103E74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600000E")]
		[Address(RVA = "0x1103F84", Offset = "0x1103F84", VA = "0x1103F84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject marker;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject mainBot;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject flockGroup;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject followGroup;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject queueGroup;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] waypoints;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] waypointsA;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GUISkin descriptionGUISkin;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3[] flockGroupPosition;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] followGroupPosition;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] queueGroupPosition;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Quaternion[] flockGroupRotation;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion[] followGroupRotation;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Quaternion[] queueGroupRotation;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Dictionary<int, BehaviorTree> behaviorTreeGroup;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Animation markerAnimation;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private BehaviorSelectionType selectionType;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private BehaviorSelectionType prevSelectionType;

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x1101F54", Offset = "0x1101F54", VA = "0x1101F54")]
	public void Start()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x1103158", Offset = "0x1103158", VA = "0x1103158")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x11036D0", Offset = "0x11036D0", VA = "0x11036D0")]
	private string Description()
	{
		return null;
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x1103598", Offset = "0x1103598", VA = "0x1103598")]
	private static string SplitCamelCase(string s)
	{
		return null;
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x110261C", Offset = "0x110261C", VA = "0x110261C")]
	private void SelectionChanged()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x11037FC", Offset = "0x11037FC", VA = "0x11037FC")]
	private void DisableAll()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x1103D4C", Offset = "0x1103D4C", VA = "0x1103D4C")]
	[IteratorStateMachine(typeof(<EnableBehavior>d__25))]
	private IEnumerator EnableBehavior()
	{
		return null;
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x1103DE8", Offset = "0x1103DE8", VA = "0x1103DE8")]
	public BehaviorSelection()
	{
	}
}
[Token(Token = "0x2000006")]
public class TextureScale
{
	[Token(Token = "0x2000007")]
	public class ThreadData
	{
		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int start;

		[Token(Token = "0x4000034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int end;

		[Token(Token = "0x6000017")]
		[Address(RVA = "0x1104424", Offset = "0x1104424", VA = "0x1104424")]
		public ThreadData(int s, int e)
		{
		}
	}

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static UnityEngine.Color[] texColors;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static UnityEngine.Color[] newColors;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int w;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static float ratioX;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static float ratioY;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static int w2;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int finishCount;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Mutex mutex;

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x1103FCC", Offset = "0x1103FCC", VA = "0x1103FCC")]
	public static void Point(Texture2D tex, int newWidth, int newHeight)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x110441C", Offset = "0x110441C", VA = "0x110441C")]
	public static void Bilinear(Texture2D tex, int newWidth, int newHeight)
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x1103FD4", Offset = "0x1103FD4", VA = "0x1103FD4")]
	private static void ThreadedScale(Texture2D tex, int newWidth, int newHeight, bool useBilinear)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x1104450", Offset = "0x1104450", VA = "0x1104450")]
	public static void BilinearScale(object obj)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x1104688", Offset = "0x1104688", VA = "0x1104688")]
	public static void PointScale(object obj)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x1104838", Offset = "0x1104838", VA = "0x1104838")]
	private static UnityEngine.Color ColorLerpUnclamped(UnityEngine.Color c1, UnityEngine.Color c2, float value)
	{
		return default(UnityEngine.Color);
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x1104870", Offset = "0x1104870", VA = "0x1104870")]
	public TextureScale()
	{
	}
}
[Token(Token = "0x2000008")]
public class FlatAvatarSetup : MonoBehaviour
{
	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform flatCameraRoot;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform head;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform Hand_R;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform flatItemHolder;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform hand_R_Ik_target;

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x1104878", Offset = "0x1104878", VA = "0x1104878")]
	public void SetUp()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x11049B0", Offset = "0x11049B0", VA = "0x11049B0")]
	public FlatAvatarSetup()
	{
	}
}
[Token(Token = "0x2000009")]
public class FlatCameraPositionUpdater : MonoBehaviour
{
	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Camera camera;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform cameraRoot;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform aimIKTarget;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform aimIKTargetHolder;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LayerMask adjustTargetLayerMask;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float DOMoveSpeed;

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x11049B8", Offset = "0x11049B8", VA = "0x11049B8")]
	private void Update()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x11049BC", Offset = "0x11049BC", VA = "0x11049BC")]
	public FlatCameraPositionUpdater()
	{
	}
}
[Token(Token = "0x200000A")]
public class FlatController : MonoBehaviour
{
	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FlatController Instance;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform followPlayerController;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform cameraTransform;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minViewAngle;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxViewAngle;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public KeyCode toggleMouseLock;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool lockMouseToView;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Vector3 oldPos;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[UnityEngine.Tooltip("Adjust the speed of the cursor movement in locked mode.")]
	public float lockedCursorMultiplier;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("Adjust player rotation speed.")]
	public float mouseSensitivity;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float originalMouseSensitivity;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("Whether the mouse movement always acts as input or requires a button press.")]
	public InputSimulator.MouseInputMode mouseMovementInput;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[UnityEngine.Tooltip("Key used to enable mouse input if a button press is required.")]
	public KeyCode mouseMovementKey;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool menuOpen;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[UnityEngine.Tooltip("Adjust player movement speed.")]
	public float playerMoveMultiplier;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("Adjust player sprint speed.")]
	public float playerSprintMultiplier;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[UnityEngine.Tooltip("Key used to sprint.")]
	public KeyCode sprint;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Key used to simulate trigger button.")]
	[Header("Controller Key Binding Settings")]
	public KeyCode triggerAlias;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[UnityEngine.Tooltip("Key used to simulate grip button.")]
	public KeyCode gripAlias;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[UnityEngine.Tooltip("Key used to simulate touchpad button.")]
	public KeyCode touchpadAlias;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[UnityEngine.Tooltip("Key used to simulate button one.")]
	public KeyCode buttonOneAlias;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[UnityEngine.Tooltip("Key used to simulate button two.")]
	public KeyCode buttonTwoAlias;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[UnityEngine.Tooltip("Key used to simulate start menu button.")]
	public KeyCode startMenuAlias;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[UnityEngine.Tooltip("Key used to switch between button touch and button press mode.")]
	public KeyCode touchModifier;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[UnityEngine.Tooltip("Key used to switch between hair touch mode.")]
	public KeyCode hairTouchModifier;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private bool lockPlayerInput;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public KeyCode jumpKey;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public KeyCode lootKey;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public KeyCode grabKey;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private KeyCode alpha1;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private KeyCode alpha2;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private KeyCode alpha3;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private KeyCode alpha4;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Transform bodyTransform;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Transform neckTransform;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[UnityEngine.Tooltip("The duration the key needs to be held in order for it to register as being held down.")]
	public float longPressReqDur;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("Input Actions")]
	public UnityAction interactAction;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public UnityAction interactHeldAction;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public UnityAction interactReleasedAction;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public UnityAction grabAction;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public UnityEvent<int> alphaEvent;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float lootKeyPressed;

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x11049C4", Offset = "0x11049C4", VA = "0x11049C4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x1104A1C", Offset = "0x1104A1C", VA = "0x1104A1C")]
	private void Start()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x1104B70", Offset = "0x1104B70", VA = "0x1104B70")]
	private void Update()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x1104E54", Offset = "0x1104E54", VA = "0x1104E54", Slot = "4")]
	protected virtual void UpdateRotation()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x1104FD8", Offset = "0x1104FD8", VA = "0x1104FD8", Slot = "5")]
	protected virtual Vector3 GetMouseDelta()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x11050B8", Offset = "0x11050B8", VA = "0x11050B8", Slot = "6")]
	protected virtual bool IsAcceptingMouseInput()
	{
		return default(bool);
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x11050E4", Offset = "0x11050E4", VA = "0x11050E4")]
	public void UpdateMouseSensitivity()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x11050F0", Offset = "0x11050F0", VA = "0x11050F0")]
	public void LockView()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x1105118", Offset = "0x1105118", VA = "0x1105118")]
	public void UnlockView()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x110513C", Offset = "0x110513C", VA = "0x110513C")]
	public bool GetIsMenuOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x1105144", Offset = "0x1105144", VA = "0x1105144")]
	public void ModifySensitivity(float howMuch)
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x1105154", Offset = "0x1105154", VA = "0x1105154")]
	public void RestoreSensitivity()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x1105160", Offset = "0x1105160", VA = "0x1105160")]
	public void LockPlayerInput(bool isLocked)
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x110516C", Offset = "0x110516C", VA = "0x110516C")]
	public Transform GetFollowPlayerController()
	{
		return null;
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x1105174", Offset = "0x1105174", VA = "0x1105174")]
	public FlatController()
	{
	}
}
[Token(Token = "0x200000B")]
public class FlatSafeDoorInteractable : MonoBehaviour, IInteractable
{
	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody rb;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CustomLockedDoor door;

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x1105278", Offset = "0x1105278", VA = "0x1105278")]
	private void Awake()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x1105308", Offset = "0x1105308", VA = "0x1105308", Slot = "4")]
	public void Interact()
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x110536C", Offset = "0x110536C", VA = "0x110536C", Slot = "5")]
	public LocalizedString GetInteractionText()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x11053A4", Offset = "0x11053A4", VA = "0x11053A4", Slot = "6")]
	public GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x11053AC", Offset = "0x11053AC", VA = "0x11053AC")]
	public FlatSafeDoorInteractable()
	{
	}
}
[Token(Token = "0x200000C")]
public class InitializeChunkPool : MonoBehaviour
{
	[Token(Token = "0x6000030")]
	[Address(RVA = "0x11053B4", Offset = "0x11053B4", VA = "0x11053B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x11053B8", Offset = "0x11053B8", VA = "0x11053B8")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x11053BC", Offset = "0x11053BC", VA = "0x11053BC")]
	public InitializeChunkPool()
	{
	}
}
[Token(Token = "0x200000D")]
public class HVRHexaBodyInputWrapper : HVRPlayerInputs
{
	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float CrouchThreshold;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float StandThreshold;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public HexaBodyPlayerInputs PlayerInputs;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool EnableDebugCalibrationButton;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool _isCrouching;

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x11053C4", Offset = "0x11053C4", VA = "0x11053C4", Slot = "5")]
	protected override void AfterInputUpdate()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x11054A0", Offset = "0x11054A0", VA = "0x11054A0", Slot = "19")]
	protected override bool GetCrouch()
	{
		return default(bool);
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x1105520", Offset = "0x1105520", VA = "0x1105520", Slot = "6")]
	protected override bool GetStand()
	{
		return default(bool);
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x110559C", Offset = "0x110559C", VA = "0x110559C", Slot = "7")]
	protected override bool GetIsJumpActivated()
	{
		return default(bool);
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x1105618", Offset = "0x1105618", VA = "0x1105618")]
	public HVRHexaBodyInputWrapper()
	{
	}
}
[Token(Token = "0x200000E")]
[RequireComponent(typeof(Rigidbody))]
public class HexaDemoElevator : MonoBehaviour
{
	[Token(Token = "0x200000F")]
	public enum HexaElevatorState
	{
		[Token(Token = "0x400007C")]
		Stationary,
		[Token(Token = "0x400007D")]
		GoingUp,
		[Token(Token = "0x400007E")]
		GoingDown
	}

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	public HexaElevatorState State;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MaxSpeed;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeToSpeed;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float SnapThreshold;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Debug")]
	public float Speed;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public HexaElevatorState PreviousState;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 LowerPosition;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 UpperPosition;

	[Token(Token = "0x17000003")]
	public Rigidbody Rigidbody
	{
		[Token(Token = "0x6000038")]
		[Address(RVA = "0x1105630", Offset = "0x1105630", VA = "0x1105630")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000039")]
		[Address(RVA = "0x1105638", Offset = "0x1105638", VA = "0x1105638")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public Vector3 Target
	{
		[Token(Token = "0x600003A")]
		[Address(RVA = "0x1105640", Offset = "0x1105640", VA = "0x1105640")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x110567C", Offset = "0x110567C", VA = "0x110567C")]
	private void Start()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x11056A0", Offset = "0x11056A0", VA = "0x11056A0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x1105A38", Offset = "0x1105A38", VA = "0x1105A38")]
	public void ToggleUp()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x1105A44", Offset = "0x1105A44", VA = "0x1105A44")]
	public void ToggleDown()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x1105A50", Offset = "0x1105A50", VA = "0x1105A50")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x1105BC4", Offset = "0x1105BC4", VA = "0x1105BC4")]
	public HexaDemoElevator()
	{
	}
}
[Token(Token = "0x2000010")]
[RequireComponent(typeof(HVRGrabbable))]
public class HexaDemoGravityCup : MonoBehaviour
{
	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform RayOrigin;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask IgnoreLayerMask;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float RayDistance;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool Activated;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ConfigurableJoint _joint;

	[Token(Token = "0x17000005")]
	public HVRGrabbable Grabbable
	{
		[Token(Token = "0x6000041")]
		[Address(RVA = "0x1105BE4", Offset = "0x1105BE4", VA = "0x1105BE4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000042")]
		[Address(RVA = "0x1105BEC", Offset = "0x1105BEC", VA = "0x1105BEC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x1105BF4", Offset = "0x1105BF4", VA = "0x1105BF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x1105CD0", Offset = "0x1105CD0", VA = "0x1105CD0")]
	private void OnReleased(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x1105D60", Offset = "0x1105D60", VA = "0x1105D60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x1105E6C", Offset = "0x1105E6C", VA = "0x1105E6C")]
	public void Activate()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x1106224", Offset = "0x1106224", VA = "0x1106224")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x11062B4", Offset = "0x11062B4", VA = "0x11062B4")]
	public HexaDemoGravityCup()
	{
	}
}
[Token(Token = "0x2000011")]
public class HexaDemoRockWall : MonoBehaviour
{
	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 TargetPosition;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool Show;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip SFX;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float SlideInTime;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float _speed;

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x11062C8", Offset = "0x11062C8", VA = "0x11062C8")]
	private void Start()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x110638C", Offset = "0x110638C", VA = "0x110638C")]
	private void Update()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x1106598", Offset = "0x1106598", VA = "0x1106598")]
	public void Move()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x1106618", Offset = "0x1106618", VA = "0x1106618")]
	public HexaDemoRockWall()
	{
	}
}
[Token(Token = "0x2000012")]
public class HexaDemoSlideManager : MonoBehaviour
{
	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableSlippery;

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x1106628", Offset = "0x1106628", VA = "0x1106628")]
	private void Start()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x110662C", Offset = "0x110662C", VA = "0x110662C")]
	private void Update()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x1106630", Offset = "0x1106630", VA = "0x1106630")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x110672C", Offset = "0x110672C", VA = "0x110672C")]
	public HexaDemoSlideManager()
	{
	}
}
[Token(Token = "0x2000013")]
public class HexaDemoUIManager : MonoBehaviour
{
	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HexaBodyPlayer3 Player;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HVRHexaBodyInputWrapper Inputs;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI SitStandText;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI ForceGrabText;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Slider TurnRateSlider;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Slider SnapTurnSlider;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI TurnRateText;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI SnapRateText;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Toggle SmoothTurnToggle;

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x1106734", Offset = "0x1106734", VA = "0x1106734")]
	private void Start()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x1106AB8", Offset = "0x1106AB8", VA = "0x1106AB8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x1106ABC", Offset = "0x1106ABC", VA = "0x1106ABC")]
	public void OnSitStandClicked()
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x1106AFC", Offset = "0x1106AFC", VA = "0x1106AFC")]
	public void OnForceGrabClicked()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x1106A24", Offset = "0x1106A24", VA = "0x1106A24")]
	private void UpdateForceGrabButton()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x1106990", Offset = "0x1106990", VA = "0x1106990")]
	private void UpdateSitStandButton()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x1106B28", Offset = "0x1106B28", VA = "0x1106B28")]
	public void OnTurnRateChanged(float rate)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x1106B6C", Offset = "0x1106B6C", VA = "0x1106B6C")]
	public void OnSnapTurnRateChanged(float rate)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x1106BB0", Offset = "0x1106BB0", VA = "0x1106BB0")]
	public void OnSmoothTurnChanged(bool smooth)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x1106BD0", Offset = "0x1106BD0", VA = "0x1106BD0")]
	public HexaDemoUIManager()
	{
	}
}
[Token(Token = "0x2000014")]
public class MadsonD9 : HVRPistol
{
	[Token(Token = "0x600005B")]
	[Address(RVA = "0x1106BD8", Offset = "0x1106BD8", VA = "0x1106BD8")]
	public MadsonD9()
	{
	}
}
[Token(Token = "0x2000015")]
public class MadsonD9Slide : HVRSlide
{
	[Token(Token = "0x600005C")]
	[Address(RVA = "0x1106BE0", Offset = "0x1106BE0", VA = "0x1106BE0")]
	public MadsonD9Slide()
	{
	}
}
[Token(Token = "0x2000016")]
public class DemoUIManager : MonoBehaviour
{
	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HVRPlayerController Player;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HVRCameraRig CameraRig;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HVRPlayerInputs Inputs;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI SitStandText;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI ForceGrabText;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Slider TurnRateSlider;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Slider SnapTurnSlider;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI TurnRateText;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI SnapRateText;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Toggle SmoothTurnToggle;

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x1106BE8", Offset = "0x1106BE8", VA = "0x1106BE8")]
	private void Start()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x1106F74", Offset = "0x1106F74", VA = "0x1106F74")]
	private void Update()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x1106F78", Offset = "0x1106F78", VA = "0x1106F78")]
	public void OnSitStandClicked()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x1106FB0", Offset = "0x1106FB0", VA = "0x1106FB0")]
	public void OnForceGrabClicked()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x1106EE0", Offset = "0x1106EE0", VA = "0x1106EE0")]
	private void UpdateForceGrabButton()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x1106E4C", Offset = "0x1106E4C", VA = "0x1106E4C")]
	private void UpdateSitStandButton()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x1106FDC", Offset = "0x1106FDC", VA = "0x1106FDC")]
	public void OnTurnRateChanged(float rate)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x1107020", Offset = "0x1107020", VA = "0x1107020")]
	public void OnSnapTurnRateChanged(float rate)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x1107064", Offset = "0x1107064", VA = "0x1107064")]
	public void OnSmoothTurnChanged(bool smooth)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x1107088", Offset = "0x1107088", VA = "0x1107088")]
	public DemoUIManager()
	{
	}
}
[Token(Token = "0x2000017")]
public class FollowTarget : MonoBehaviour
{
	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool enable;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 playerOffset;

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x1107090", Offset = "0x1107090", VA = "0x1107090")]
	private void Start()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x1107218", Offset = "0x1107218", VA = "0x1107218")]
	private void Update()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x1107288", Offset = "0x1107288", VA = "0x1107288")]
	public FollowTarget()
	{
	}
}
[Token(Token = "0x2000018")]
public class AnimatedUVs : MonoBehaviour
{
	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speedY;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speedx;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float offsety;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float offsetx;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer rend;

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x1107290", Offset = "0x1107290", VA = "0x1107290")]
	private void Start()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x11072E8", Offset = "0x11072E8", VA = "0x11072E8")]
	private void Update()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x110738C", Offset = "0x110738C", VA = "0x110738C")]
	public AnimatedUVs()
	{
	}
}
[Token(Token = "0x2000019")]
public class AnimateTiledTextureOnTrail : MonoBehaviour
{
	[Token(Token = "0x200001A")]
	public delegate void VoidEvent();

	[Token(Token = "0x200001B")]
	[CompilerGenerated]
	private sealed class <updateTiling>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimateTiledTextureOnTrail <>4__this;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <checkAgainst>5__2;

		[Token(Token = "0x17000006")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000080")]
			[Address(RVA = "0x1107E9C", Offset = "0x1107E9C", VA = "0x1107E9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000007")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000082")]
			[Address(RVA = "0x1107EE4", Offset = "0x1107EE4", VA = "0x1107EE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600007D")]
		[Address(RVA = "0x1107A4C", Offset = "0x1107A4C", VA = "0x1107A4C")]
		[DebuggerHidden]
		public <updateTiling>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x600007E")]
		[Address(RVA = "0x1107D24", Offset = "0x1107D24", VA = "0x1107D24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600007F")]
		[Address(RVA = "0x1107D28", Offset = "0x1107D28", VA = "0x1107D28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000081")]
		[Address(RVA = "0x1107EA4", Offset = "0x1107EA4", VA = "0x1107EA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int _columns;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int _rows;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 _scale;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 _offset;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 _buffer;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float _framesPerSecond;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool _playOnce;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool _disableUponCompletion;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	public bool _enableEvents;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	public bool _playOnEnable;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool _newMaterialInstance;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int _index;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector2 _textureSize;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material _materialInstance;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _hasMaterialInstance;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool _isPlaying;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<VoidEvent> _voidEventCallbackList;

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x110739C", Offset = "0x110739C", VA = "0x110739C")]
	public void RegisterCallback(VoidEvent cbFunction)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x11074A0", Offset = "0x11074A0", VA = "0x11074A0")]
	public void UnRegisterCallback(VoidEvent cbFunction)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x110754C", Offset = "0x110754C", VA = "0x110754C")]
	public void Play()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x110766C", Offset = "0x110766C", VA = "0x110766C")]
	public void ChangeMaterial(Material newMaterial, bool newInstance = false)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x1107820", Offset = "0x1107820", VA = "0x1107820")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x11078E0", Offset = "0x11078E0", VA = "0x11078E0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x1107980", Offset = "0x1107980", VA = "0x1107980")]
	private void HandleCallbacks(List<VoidEvent> cbList)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x1107A1C", Offset = "0x1107A1C", VA = "0x1107A1C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x11077FC", Offset = "0x11077FC", VA = "0x11077FC")]
	private void CalcTextureSize()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x11075F8", Offset = "0x11075F8", VA = "0x11075F8")]
	[IteratorStateMachine(typeof(<updateTiling>d__27))]
	private IEnumerator updateTiling()
	{
		return null;
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x1107A74", Offset = "0x1107A74", VA = "0x1107A74")]
	private void ApplyOffset()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x1107B8C", Offset = "0x1107B8C", VA = "0x1107B8C")]
	public AnimateTiledTextureOnTrail()
	{
	}
}
[Token(Token = "0x200001C")]
public class BillBoard : MonoBehaviour
{
	[Token(Token = "0x6000083")]
	[Address(RVA = "0x1107EEC", Offset = "0x1107EEC", VA = "0x1107EEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x1107EF0", Offset = "0x1107EF0", VA = "0x1107EF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x1107F38", Offset = "0x1107F38", VA = "0x1107F38")]
	public BillBoard()
	{
	}
}
[Token(Token = "0x200001D")]
public class button_target : MonoBehaviour
{
	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MY_target;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject temp_target;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject[] ALL_target;

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x1107F40", Offset = "0x1107F40", VA = "0x1107F40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x1108064", Offset = "0x1108064", VA = "0x1108064")]
	private void Update()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x1108068", Offset = "0x1108068", VA = "0x1108068")]
	public void ShowTarget()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x1108128", Offset = "0x1108128", VA = "0x1108128")]
	public button_target()
	{
	}
}
[Token(Token = "0x200001E")]
public class demo : MonoBehaviour
{
	[Token(Token = "0x600008A")]
	[Address(RVA = "0x1108130", Offset = "0x1108130", VA = "0x1108130")]
	private void Start()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x1108134", Offset = "0x1108134", VA = "0x1108134")]
	private void Update()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x1108138", Offset = "0x1108138", VA = "0x1108138")]
	public void GoURL_FX()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x110817C", Offset = "0x110817C", VA = "0x110817C")]
	public void GoURL_Free()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x11081C0", Offset = "0x11081C0", VA = "0x11081C0")]
	public demo()
	{
	}
}
[Token(Token = "0x200001F")]
public class tazo_UVScroller : MonoBehaviour
{
	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int targetMaterialSlot;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer myrender;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speedY;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speedX;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timeWentX;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timeWentY;

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x11081C8", Offset = "0x11081C8", VA = "0x11081C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x1108220", Offset = "0x1108220", VA = "0x1108220")]
	private void Update()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x11082C4", Offset = "0x11082C4", VA = "0x11082C4")]
	public tazo_UVScroller()
	{
	}
}
[Token(Token = "0x2000020")]
public class tazo_UVScroller_r : MonoBehaviour
{
	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int targetMaterialSlot;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer myrender;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speedY;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speedX;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timeWentX;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timeWentY;

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x11082D4", Offset = "0x11082D4", VA = "0x11082D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x110832C", Offset = "0x110832C", VA = "0x110832C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x1108408", Offset = "0x1108408", VA = "0x1108408")]
	public tazo_UVScroller_r()
	{
	}
}
[Token(Token = "0x2000021")]
public class SpawnEffect : MonoBehaviour
{
	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float spawnEffectTime;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float pause;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve fadeIn;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timer;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer _renderer;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int shaderProperty;

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x1108418", Offset = "0x1108418", VA = "0x1108418")]
	private void Start()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x1108518", Offset = "0x1108518", VA = "0x1108518")]
	private void Update()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x11085D8", Offset = "0x11085D8", VA = "0x11085D8")]
	public SpawnEffect()
	{
	}
}
[Token(Token = "0x2000022")]
public static class AppSettingsExtensions
{
	[Token(Token = "0x6000098")]
	[Address(RVA = "0x11085EC", Offset = "0x11085EC", VA = "0x11085EC")]
	public static ChatAppSettings GetChatSettings(this AppSettings appSettings)
	{
		return null;
	}
}
[Token(Token = "0x2000023")]
public class ChannelSelector : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
{
	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Channel;

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x11086DC", Offset = "0x11086DC", VA = "0x11086DC")]
	public void SetChannel(string channel)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x1108760", Offset = "0x1108760", VA = "0x1108760", Slot = "4")]
	public void OnPointerClick(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x1108A7C", Offset = "0x1108A7C", VA = "0x1108A7C")]
	public ChannelSelector()
	{
	}
}
[Token(Token = "0x2000024")]
[ExecuteInEditMode]
public class ChatAppIdCheckerUI : MonoBehaviour
{
	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Description;

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x1108A84", Offset = "0x1108A84", VA = "0x1108A84")]
	public void Update()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x1108BB4", Offset = "0x1108BB4", VA = "0x1108BB4")]
	public ChatAppIdCheckerUI()
	{
	}
}
[Token(Token = "0x2000025")]
public class ChatGui : MonoBehaviour, IChatClientListener
{
	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] ChannelsToJoinOnConnect;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] FriendsList;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int HistoryLengthToFetch;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string selectedChannelName;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ChatClient chatClient;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected internal ChatAppSettings chatAppSettings;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject missingAppIdErrorPanel;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject ConnectingLabel;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public RectTransform ChatPanel;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject UserIdFormPanel;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public InputField InputFieldChat;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text CurrentChannelText;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Toggle ChannelToggleToInstantiate;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject FriendListUiItemtoInstantiate;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private readonly Dictionary<string, Toggle> channelToggles;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private readonly Dictionary<string, FriendItem> friendListItemLUT;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool ShowState;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject Title;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Text StateText;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Text UserIdText;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string HelpText;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public int TestLength;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private byte[] testBytes;

	[Token(Token = "0x17000008")]
	public string UserName
	{
		[Token(Token = "0x600009E")]
		[Address(RVA = "0x1108BBC", Offset = "0x1108BBC", VA = "0x1108BBC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600009F")]
		[Address(RVA = "0x1108BC4", Offset = "0x1108BC4", VA = "0x1108BC4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x1108BCC", Offset = "0x1108BCC", VA = "0x1108BCC")]
	public void Start()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x1108E90", Offset = "0x1108E90", VA = "0x1108E90")]
	public void Connect()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x1109024", Offset = "0x1109024", VA = "0x1109024")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x110903C", Offset = "0x110903C", VA = "0x110903C")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x1109054", Offset = "0x1109054", VA = "0x1109054")]
	public void Update()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x1109124", Offset = "0x1109124", VA = "0x1109124")]
	public void OnEnterSend()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x1109C20", Offset = "0x1109C20", VA = "0x1109C20")]
	public void OnClickSend()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x11091B8", Offset = "0x11091B8", VA = "0x11091B8")]
	private void SendChatMessage(string inputLine)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x1109CD0", Offset = "0x1109CD0", VA = "0x1109CD0")]
	public void PostHelpToCurrentChannel()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x1109D74", Offset = "0x1109D74", VA = "0x1109D74", Slot = "4")]
	public void DebugReturn(DebugLevel level, string message)
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x1109E1C", Offset = "0x1109E1C", VA = "0x1109E1C", Slot = "6")]
	public void OnConnected()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x110A158", Offset = "0x110A158", VA = "0x110A158", Slot = "5")]
	public void OnDisconnected()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x110A178", Offset = "0x110A178", VA = "0x110A178", Slot = "7")]
	public void OnChatStateChange(ChatState state)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x110A20C", Offset = "0x110A20C", VA = "0x110A20C", Slot = "10")]
	public void OnSubscribed(string[] channels, bool[] results)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x110A55C", Offset = "0x110A55C", VA = "0x110A55C")]
	public void OnSubscribed(string channel, string[] users, Dictionary<object, object> properties)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x110A3A0", Offset = "0x110A3A0", VA = "0x110A3A0")]
	private void InstantiateChannelButton(string channelName)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x110A000", Offset = "0x110A000", VA = "0x110A000")]
	private void InstantiateFriendButton(string friendId)
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x110A744", Offset = "0x110A744", VA = "0x110A744", Slot = "11")]
	public void OnUnsubscribed(string[] channels)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x110AB88", Offset = "0x110AB88", VA = "0x110AB88", Slot = "8")]
	public void OnGetMessages(string channelName, string[] senders, object[] messages)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x110ABC8", Offset = "0x110ABC8", VA = "0x110ABC8", Slot = "9")]
	public void OnPrivateMessage(string sender, object message, string channelName)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x110ACDC", Offset = "0x110ACDC", VA = "0x110ACDC", Slot = "12")]
	public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x110B01C", Offset = "0x110B01C", VA = "0x110B01C", Slot = "13")]
	public void OnUserSubscribed(string channel, string user)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x110B138", Offset = "0x110B138", VA = "0x110B138", Slot = "14")]
	public void OnUserUnsubscribed(string channel, string user)
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x110B254", Offset = "0x110B254", VA = "0x110B254")]
	public void OnChannelPropertiesChanged(string channel, string userId, Dictionary<object, object> properties)
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x110B3DC", Offset = "0x110B3DC", VA = "0x110B3DC")]
	public void OnUserPropertiesChanged(string channel, string targetUserId, string senderUserId, Dictionary<object, object> properties)
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x110B5A4", Offset = "0x110B5A4", VA = "0x110B5A4")]
	public void OnErrorInfo(string channel, string error, object data)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x110B6F8", Offset = "0x110B6F8", VA = "0x110B6F8")]
	public void AddMessageToSelectedChannel(string msg)
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x11087D8", Offset = "0x11087D8", VA = "0x11087D8")]
	public void ShowChannel(string channelName)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x110B7E4", Offset = "0x110B7E4", VA = "0x110B7E4")]
	public void OpenDashboard()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x110B828", Offset = "0x110B828", VA = "0x110B828")]
	public ChatGui()
	{
	}
}
[Token(Token = "0x2000026")]
public class FriendItem : MonoBehaviour
{
	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text NameLabel;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text StatusLabel;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text Health;

	[Token(Token = "0x17000009")]
	[HideInInspector]
	public string FriendId
	{
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x110B9AC", Offset = "0x110B9AC", VA = "0x110B9AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x110A720", Offset = "0x110A720", VA = "0x110A720")]
		set
		{
		}
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x110B9D0", Offset = "0x110B9D0", VA = "0x110B9D0")]
	public void Awake()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x110AE9C", Offset = "0x110AE9C", VA = "0x110AE9C")]
	public void OnFriendStatusUpdate(int status, bool gotMessage, object message)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x110BA34", Offset = "0x110BA34", VA = "0x110BA34")]
	public FriendItem()
	{
	}
}
[Token(Token = "0x2000027")]
public class IgnoreUiRaycastWhenInactive : MonoBehaviour, ICanvasRaycastFilter
{
	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x110BA3C", Offset = "0x110BA3C", VA = "0x110BA3C", Slot = "4")]
	public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x110BA5C", Offset = "0x110BA5C", VA = "0x110BA5C")]
	public IgnoreUiRaycastWhenInactive()
	{
	}
}
[Token(Token = "0x2000028")]
[RequireComponent(typeof(ChatGui))]
public class NamePickGui : MonoBehaviour
{
	[Token(Token = "0x40000EE")]
	private const string UserNamePlayerPref = "NamePickUserName";

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ChatGui chatNewComponent;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputField idInput;

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x110BA64", Offset = "0x110BA64", VA = "0x110BA64")]
	public void Start()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x110BB30", Offset = "0x110BB30", VA = "0x110BB30")]
	public void EndEditOnEnter()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x110BB6C", Offset = "0x110BB6C", VA = "0x110BB6C")]
	public void StartChat()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x110BC50", Offset = "0x110BC50", VA = "0x110BC50")]
	public NamePickGui()
	{
	}
}
[Token(Token = "0x2000029")]
[RequireComponent(typeof(Renderer))]
[RequireComponent(typeof(PhotonView))]
public class ChangeColor : MonoBehaviour
{
	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView photonView;

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x110BC58", Offset = "0x110BC58", VA = "0x110BC58")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x110BDB4", Offset = "0x110BDB4", VA = "0x110BDB4")]
	[PunRPC]
	private void ChangeColorRPC(Vector3 randomColor)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x110BE5C", Offset = "0x110BE5C", VA = "0x110BE5C")]
	public ChangeColor()
	{
	}
}
[Token(Token = "0x200002A")]
[RequireComponent(typeof(PhotonView))]
public class ChangeName : MonoBehaviour
{
	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x110BE64", Offset = "0x110BE64", VA = "0x110BE64")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x110BF28", Offset = "0x110BF28", VA = "0x110BF28")]
	public ChangeName()
	{
	}
}
[Token(Token = "0x200002B")]
[RequireComponent(typeof(PhotonVoiceView))]
public class PointersController : MonoBehaviour
{
	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject pointerDown;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject pointerUp;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PhotonVoiceView photonVoiceView;

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x110BF30", Offset = "0x110BF30", VA = "0x110BF30")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x110BF88", Offset = "0x110BF88", VA = "0x110BF88")]
	private void Update()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x110BFE0", Offset = "0x110BFE0", VA = "0x110BFE0")]
	private void SetActiveSafe(GameObject go, bool active)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x110C088", Offset = "0x110C088", VA = "0x110C088")]
	public PointersController()
	{
	}
}
[Token(Token = "0x200002C")]
[RequireComponent(typeof(Collider))]
[RequireComponent(typeof(Rigidbody))]
public class ProximityVoiceTrigger : VoiceComponent
{
	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte> groupsToAdd;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<byte> groupsToRemove;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private byte[] subscribedGroups;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PhotonVoiceView photonVoiceView;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PhotonView photonView;

	[Token(Token = "0x1700000A")]
	public byte TargetInterestGroup
	{
		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x110C090", Offset = "0x110C090", VA = "0x110C090")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x110C114", Offset = "0x110C114", VA = "0x110C114", Slot = "9")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x110C1D8", Offset = "0x110C1D8", VA = "0x110C1D8")]
	private void ToggleTransmission()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x110C4BC", Offset = "0x110C4BC", VA = "0x110C4BC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x110C718", Offset = "0x110C718", VA = "0x110C718")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x110C9B4", Offset = "0x110C9B4", VA = "0x110C9B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x110CFE0", Offset = "0x110CFE0", VA = "0x110CFE0")]
	public ProximityVoiceTrigger()
	{
	}
}
[Serializable]
[Token(Token = "0x200002D")]
public class MouseLookHelper
{
	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float XSensitivity;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float YSensitivity;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool clampVerticalRotation;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumX;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumX;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool smooth;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float smoothTime;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion m_CharacterTargetRot;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Quaternion m_CameraTargetRot;

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x110D098", Offset = "0x110D098", VA = "0x110D098")]
	public void Init(Transform character, Transform camera)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x110D0E8", Offset = "0x110D0E8", VA = "0x110D0E8")]
	public void LookRotation(Transform character, Transform camera)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x110D428", Offset = "0x110D428", VA = "0x110D428")]
	private Quaternion ClampRotationAroundXAxis(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x110D48C", Offset = "0x110D48C", VA = "0x110D48C")]
	public MouseLookHelper()
	{
	}
}
[Token(Token = "0x200002E")]
public class SoundsForJoinAndLeave : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip JoinClip;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip LeaveClip;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource source;

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x110D4B8", Offset = "0x110D4B8", VA = "0x110D4B8", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x110D5B4", Offset = "0x110D5B4", VA = "0x110D5B4", Slot = "43")]
	public override void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x110D6B0", Offset = "0x110D6B0", VA = "0x110D6B0")]
	public SoundsForJoinAndLeave()
	{
	}
}
[Token(Token = "0x200002F")]
public class AlternativeSpawnpoint : MonoBehaviour
{
	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Range(1f, 4f)]
	private int spawnpointID;

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x110D6B8", Offset = "0x110D6B8", VA = "0x110D6B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x110D6BC", Offset = "0x110D6BC", VA = "0x110D6BC")]
	private void RegisterSpawnPoint()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x110D73C", Offset = "0x110D73C", VA = "0x110D73C")]
	public AlternativeSpawnpoint()
	{
	}
}
[Token(Token = "0x2000030")]
[CreateAssetMenu(fileName = "", menuName = "AmbienceClips", order = 5)]
public class AmbienceClips : ScriptableObject
{
	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] shortAmbienceClips;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip ambienceLoopNorth;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip ambienceLoopSouth;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip ambienceLoopWest;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip ambienceLoopEast;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Range(0f, 1f)]
	public float ambienceLoopVolume;

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x110D74C", Offset = "0x110D74C", VA = "0x110D74C")]
	public AmbienceClips()
	{
	}
}
[Token(Token = "0x2000031")]
public class AnimationEventReceiver : MonoBehaviour
{
	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlasmaShrimp shrimp;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DroneConstruct drone;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DuckfootNautilus nautilus;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Chameleon chameleon;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PrimalChameleon primal;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private BusinessChompy businessChompy;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Golem golem;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MinerChompy minerChompy;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private RunGenerationSlotMachine slotMachine;

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x110D75C", Offset = "0x110D75C", VA = "0x110D75C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x110D954", Offset = "0x110D954", VA = "0x110D954")]
	public void AttackStart()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x110DA1C", Offset = "0x110DA1C", VA = "0x110DA1C")]
	public void AttackEnd()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x110DAE4", Offset = "0x110DAE4", VA = "0x110DAE4")]
	public void ShootEvent()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x110DC28", Offset = "0x110DC28", VA = "0x110DC28")]
	public void ShootEventDrone()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x110DD6C", Offset = "0x110DD6C", VA = "0x110DD6C")]
	public void RangedAttackStart()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x110DD98", Offset = "0x110DD98", VA = "0x110DD98")]
	public void RangedAttackEnd()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x110DDC4", Offset = "0x110DDC4", VA = "0x110DDC4")]
	public void StartProjectile()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x110DDE8", Offset = "0x110DDE8", VA = "0x110DDE8")]
	public void StartItemGrab()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x110DE08", Offset = "0x110DE08", VA = "0x110DE08")]
	public void EndItemGrab()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x110DE28", Offset = "0x110DE28", VA = "0x110DE28")]
	public void Throw()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x110DE44", Offset = "0x110DE44", VA = "0x110DE44")]
	public void MoveItemFromTongueToHand()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x110DE68", Offset = "0x110DE68", VA = "0x110DE68")]
	public void FootHitsGroud()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x110DE84", Offset = "0x110DE84", VA = "0x110DE84")]
	public void ChompyIdle(int idleAnimation)
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x110DF94", Offset = "0x110DF94", VA = "0x110DF94")]
	public void GolemBlast()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x110DFB0", Offset = "0x110DFB0", VA = "0x110DFB0")]
	public void WaveAtPlayerEnd()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x110DFCC", Offset = "0x110DFCC", VA = "0x110DFCC")]
	public void ToggleVacuumingLoots(int vacuumingInt)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x110DFF0", Offset = "0x110DFF0", VA = "0x110DFF0")]
	public void DizzyRoutineEnd()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x110E00C", Offset = "0x110E00C", VA = "0x110E00C")]
	public void ThrowInTheAirStarted()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x110E028", Offset = "0x110E028", VA = "0x110E028")]
	public void ReleaseSmokePuff()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x110E044", Offset = "0x110E044", VA = "0x110E044")]
	public void ToggleRecieveLoot(int status)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x110E060", Offset = "0x110E060", VA = "0x110E060")]
	public void TogglePickaxeRenderer(int status)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x110E07C", Offset = "0x110E07C", VA = "0x110E07C")]
	public void BellRing()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x110E098", Offset = "0x110E098", VA = "0x110E098")]
	public AnimationEventReceiver()
	{
	}
}
[Token(Token = "0x2000032")]
public class Arena : MonoBehaviour
{
	[Token(Token = "0x2000033")]
	[CompilerGenerated]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Arena <>4__this;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BoxCollider <spawnBox>5__2;

		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__3;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Enemy <enemy>5__4;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000103")]
			[Address(RVA = "0x110E520", Offset = "0x110E520", VA = "0x110E520", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000105")]
			[Address(RVA = "0x110E568", Offset = "0x110E568", VA = "0x110E568", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000100")]
		[Address(RVA = "0x110E114", Offset = "0x110E114", VA = "0x110E114")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000101")]
		[Address(RVA = "0x110E148", Offset = "0x110E148", VA = "0x110E148", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000102")]
		[Address(RVA = "0x110E14C", Offset = "0x110E14C", VA = "0x110E14C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000104")]
		[Address(RVA = "0x110E528", Offset = "0x110E528", VA = "0x110E528", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BoxCollider[] spawnBoxes;

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x110E0A0", Offset = "0x110E0A0", VA = "0x110E0A0")]
	[IteratorStateMachine(typeof(<Start>d__1))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x110E13C", Offset = "0x110E13C", VA = "0x110E13C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x110E140", Offset = "0x110E140", VA = "0x110E140")]
	public Arena()
	{
	}
}
[Token(Token = "0x2000034")]
[CreateAssetMenu(fileName = "Atmosphere", menuName = "Create new Atmosphere", order = 0)]
public class Atmosphere : ScriptableObject
{
	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AmbienceClips audioAmbience;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material fogMaterial;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AssetReference skyboxMaterialAssetReference;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color32 ambientColor;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float start;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float end;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float farClippingDistance;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float time;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool sunEnabled;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float sunIntensity;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Color32 sunColor;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 windForce;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool caveOnly;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool snow;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	public bool windTrails;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	public bool night;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool clouds;

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x110E570", Offset = "0x110E570", VA = "0x110E570")]
	public void Preview()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x110E610", Offset = "0x110E610", VA = "0x110E610")]
	public void Apply(bool instant, bool tempOverride, bool force)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x110E6D4", Offset = "0x110E6D4", VA = "0x110E6D4")]
	public Atmosphere()
	{
	}
}
[Token(Token = "0x2000035")]
[ExecuteInEditMode]
[RequireComponent(typeof(BoxCollider))]
public class AtmosphereVolume : MonoBehaviour
{
	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Atmosphere atmosphere;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool worksDuringEvents;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool temporaryOverride;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BoxCollider _boxCollider;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _isInside;

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x110E970", Offset = "0x110E970", VA = "0x110E970")]
	private void Awake()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x110EA58", Offset = "0x110EA58", VA = "0x110EA58")]
	private void Start()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x110EAEC", Offset = "0x110EAEC", VA = "0x110EAEC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x110EAF0", Offset = "0x110EAF0", VA = "0x110EAF0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x110EB30", Offset = "0x110EB30", VA = "0x110EB30")]
	private void Update()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x110EB64", Offset = "0x110EB64", VA = "0x110EB64")]
	public Vector3 GetClosestColliderPoint(Vector3 pos)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x110EB5C", Offset = "0x110EB5C", VA = "0x110EB5C")]
	public void CheckIfCameraIsInside()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x110EDD0", Offset = "0x110EDD0", VA = "0x110EDD0")]
	public void CheckIfCameraIsInsideInstant()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x110EB80", Offset = "0x110EB80", VA = "0x110EB80")]
	public void CheckIfCameraIsInside(bool instant)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x110EDD8", Offset = "0x110EDD8", VA = "0x110EDD8")]
	public AtmosphereVolume()
	{
	}
}
[Token(Token = "0x2000036")]
public class AudioMixerFade : MonoBehaviour
{
	[Token(Token = "0x2000037")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixerFade <>4__this;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600011A")]
			[Address(RVA = "0x110F040", Offset = "0x110F040", VA = "0x110F040", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600011C")]
			[Address(RVA = "0x110F088", Offset = "0x110F088", VA = "0x110F088", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000117")]
		[Address(RVA = "0x110EE5C", Offset = "0x110EE5C", VA = "0x110EE5C")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000118")]
		[Address(RVA = "0x110EF0C", Offset = "0x110EF0C", VA = "0x110EF0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000119")]
		[Address(RVA = "0x110EF10", Offset = "0x110EF10", VA = "0x110EF10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600011B")]
		[Address(RVA = "0x110F048", Offset = "0x110F048", VA = "0x110F048", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerSnapshot defaultSnapshot;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioMixerSnapshot defaultSnapshot2;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioMixerSnapshot mutedSnapshot;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioMixerSnapshot mutedSnapshot2;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x110EDE8", Offset = "0x110EDE8", VA = "0x110EDE8")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x110EE84", Offset = "0x110EE84", VA = "0x110EE84")]
	public void OnStartFade()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x110EECC", Offset = "0x110EECC", VA = "0x110EECC")]
	public void OnUnfadeDone()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x110EF04", Offset = "0x110EF04", VA = "0x110EF04")]
	public AudioMixerFade()
	{
	}
}
[Token(Token = "0x2000038")]
public class AvatarHeadUnderWaterChecker : MonoBehaviour
{
	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Canvas myCanvas;

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x110F090", Offset = "0x110F090", VA = "0x110F090")]
	private void Awake()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x110F0E8", Offset = "0x110F0E8", VA = "0x110F0E8")]
	private void Update()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x110F1E4", Offset = "0x110F1E4", VA = "0x110F1E4")]
	public AvatarHeadUnderWaterChecker()
	{
	}
}
[Token(Token = "0x2000039")]
[DefaultExecutionOrder(-100)]
public class BackupCamera : MonoBehaviour
{
	[Token(Token = "0x200003A")]
	[CompilerGenerated]
	private sealed class <_WaitForFramesInBetweenAndEnable>d__16 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int frameAmount;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BackupCamera <>4__this;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <tempFrameAmount>5__2;

		[Token(Token = "0x17000010")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000131")]
			[Address(RVA = "0x1110788", Offset = "0x1110788", VA = "0x1110788", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000011")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000133")]
			[Address(RVA = "0x11107D0", Offset = "0x11107D0", VA = "0x11107D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600012E")]
		[Address(RVA = "0x110FBB4", Offset = "0x110FBB4", VA = "0x110FBB4")]
		[DebuggerHidden]
		public <_WaitForFramesInBetweenAndEnable>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600012F")]
		[Address(RVA = "0x1110520", Offset = "0x1110520", VA = "0x1110520", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000130")]
		[Address(RVA = "0x1110524", Offset = "0x1110524", VA = "0x1110524", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000132")]
		[Address(RVA = "0x1110790", Offset = "0x1110790", VA = "0x1110790", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200003B")]
	[CompilerGenerated]
	private sealed class <_WaitForFramesInBetweenAndDisable>d__17 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BackupCamera <>4__this;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int frameAmount;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int <tempFrameAmount>5__2;

		[Token(Token = "0x17000012")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000137")]
			[Address(RVA = "0x1110A74", Offset = "0x1110A74", VA = "0x1110A74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000013")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000139")]
			[Address(RVA = "0x1110ABC", Offset = "0x1110ABC", VA = "0x1110ABC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000134")]
		[Address(RVA = "0x110FC60", Offset = "0x110FC60", VA = "0x110FC60")]
		[DebuggerHidden]
		public <_WaitForFramesInBetweenAndDisable>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0x111082C", Offset = "0x111082C", VA = "0x111082C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000136")]
		[Address(RVA = "0x1110830", Offset = "0x1110830", VA = "0x1110830", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000138")]
		[Address(RVA = "0x1110A7C", Offset = "0x1110A7C", VA = "0x1110A7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200003E")]
	[CompilerGenerated]
	private sealed class <_AfterEnableCoroutine>d__21 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BackupCamera <>4__this;

		[Token(Token = "0x17000016")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000145")]
			[Address(RVA = "0x1110EB0", Offset = "0x1110EB0", VA = "0x1110EB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000147")]
			[Address(RVA = "0x1110EF8", Offset = "0x1110EF8", VA = "0x1110EF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000142")]
		[Address(RVA = "0x110FF98", Offset = "0x110FF98", VA = "0x110FF98")]
		[DebuggerHidden]
		public <_AfterEnableCoroutine>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000143")]
		[Address(RVA = "0x1110DF0", Offset = "0x1110DF0", VA = "0x1110DF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000144")]
		[Address(RVA = "0x1110DF4", Offset = "0x1110DF4", VA = "0x1110DF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000146")]
		[Address(RVA = "0x1110EB8", Offset = "0x1110EB8", VA = "0x1110EB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200003F")]
	[CompilerGenerated]
	private sealed class <_LerpCanvasAlpha>d__24 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BackupCamera <>4__this;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool canvasActive;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x17000018")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600014B")]
			[Address(RVA = "0x1111090", Offset = "0x1111090", VA = "0x1111090", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600014D")]
			[Address(RVA = "0x11110D8", Offset = "0x11110D8", VA = "0x11110D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000148")]
		[Address(RVA = "0x11104D0", Offset = "0x11104D0", VA = "0x11104D0")]
		[DebuggerHidden]
		public <_LerpCanvasAlpha>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000149")]
		[Address(RVA = "0x1110F54", Offset = "0x1110F54", VA = "0x1110F54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600014A")]
		[Address(RVA = "0x1110F58", Offset = "0x1110F58", VA = "0x1110F58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600014C")]
		[Address(RVA = "0x1111098", Offset = "0x1111098", VA = "0x1111098", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BackupCamera Instance;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CanvasGroup canvasGroup;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Canvas canvas;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioMixerFade audioMixerFade;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private LoadingScreenHintController loadingScreenHintController;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera backupCamera;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioListener backupListener;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PhotonView photonView;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool startEnabled;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool disableDelayedRunning;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private CoroutineHandle enableBackupCameraCoroutine;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CoroutineHandle disableBackupCameraCoroutine;

	[Token(Token = "0x1700000F")]
	public bool IsBackupCameraActive
	{
		[Token(Token = "0x6000120")]
		[Address(RVA = "0x110F1EC", Offset = "0x110F1EC", VA = "0x110F1EC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x110F208", Offset = "0x110F208", VA = "0x110F208")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x110F980", Offset = "0x110F980", VA = "0x110F980")]
	private void ToggleBackupCameras(bool enableBackup)
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x110FB30", Offset = "0x110FB30", VA = "0x110FB30")]
	[IteratorStateMachine(typeof(<_WaitForFramesInBetweenAndEnable>d__16))]
	private IEnumerator<float> _WaitForFramesInBetweenAndEnable(int frameAmount)
	{
		return null;
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x110FBDC", Offset = "0x110FBDC", VA = "0x110FBDC")]
	[IteratorStateMachine(typeof(<_WaitForFramesInBetweenAndDisable>d__17))]
	private IEnumerator<float> _WaitForFramesInBetweenAndDisable(int frameAmount)
	{
		return null;
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x110FC88", Offset = "0x110FC88", VA = "0x110FC88")]
	[PunRPC]
	public void EnableBackupCameraRPC()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x110F4E8", Offset = "0x110F4E8", VA = "0x110F4E8")]
	public void EnableBackupCamera(bool useRPC = false)
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x110FD94", Offset = "0x110FD94", VA = "0x110FD94")]
	public void DisableBackupCameraDelayed(float delay, string debugInfo)
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x110FD20", Offset = "0x110FD20", VA = "0x110FD20")]
	[IteratorStateMachine(typeof(<_AfterEnableCoroutine>d__21))]
	private IEnumerator<float> _AfterEnableCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x110FFC0", Offset = "0x110FFC0", VA = "0x110FFC0")]
	public void DisableBackupCamera(bool useRPC = false)
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x1110370", Offset = "0x1110370", VA = "0x1110370")]
	[PunRPC]
	private void DisableBackupCameraRPC()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x1110438", Offset = "0x1110438", VA = "0x1110438")]
	[IteratorStateMachine(typeof(<_LerpCanvasAlpha>d__24))]
	public IEnumerator<float> _LerpCanvasAlpha(bool canvasActive, float duration)
	{
		return null;
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x11104F8", Offset = "0x11104F8", VA = "0x11104F8")]
	public void SetAudioListener(bool value)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x1110518", Offset = "0x1110518", VA = "0x1110518")]
	public BackupCamera()
	{
	}
}
[Token(Token = "0x2000040")]
public class BiomeMaterialSwitcher : MonoBehaviour
{
	[Token(Token = "0x2000041")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BiomeMaterialSwitcher <>4__this;

		[Token(Token = "0x1700001A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000155")]
			[Address(RVA = "0x111144C", Offset = "0x111144C", VA = "0x111144C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000157")]
			[Address(RVA = "0x1111494", Offset = "0x1111494", VA = "0x1111494", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000152")]
		[Address(RVA = "0x11111A8", Offset = "0x11111A8", VA = "0x11111A8")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000153")]
		[Address(RVA = "0x11112D4", Offset = "0x11112D4", VA = "0x11112D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000154")]
		[Address(RVA = "0x11112D8", Offset = "0x11112D8", VA = "0x11112D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x1111454", Offset = "0x1111454", VA = "0x1111454", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Material[] biomeMaterials;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer[] biomeAffectedRenderers;

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x1111134", Offset = "0x1111134", VA = "0x1111134")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x11111D0", Offset = "0x11111D0", VA = "0x11111D0")]
	private void SceneChanged(Scene arg0, Scene arg1)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x11111D4", Offset = "0x11111D4", VA = "0x11111D4")]
	private void MatchMaterialsForThisBiome()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x11112CC", Offset = "0x11112CC", VA = "0x11112CC")]
	public BiomeMaterialSwitcher()
	{
	}
}
[Token(Token = "0x2000042")]
public class BiomeSpecificObject : MonoBehaviour
{
	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject biome1object;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject biome2object;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject biome3object;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject biome4object;

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x111149C", Offset = "0x111149C", VA = "0x111149C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x11114FC", Offset = "0x11114FC", VA = "0x11114FC")]
	public BiomeSpecificObject()
	{
	}
}
[Token(Token = "0x2000043")]
public class BusinessChompy : MonoBehaviourPun, IPoolable, IEventSystemHandler, IDamageable
{
	[Token(Token = "0x2000044")]
	[CompilerGenerated]
	private sealed class <SpawnCoroutine>d__34 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BusinessChompy <>4__this;

		[Token(Token = "0x1700001C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000176")]
			[Address(RVA = "0x11135D4", Offset = "0x11135D4", VA = "0x11135D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000178")]
			[Address(RVA = "0x111361C", Offset = "0x111361C", VA = "0x111361C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000173")]
		[Address(RVA = "0x1111A10", Offset = "0x1111A10", VA = "0x1111A10")]
		[DebuggerHidden]
		public <SpawnCoroutine>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0x1113294", Offset = "0x1113294", VA = "0x1113294", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000175")]
		[Address(RVA = "0x1113298", Offset = "0x1113298", VA = "0x1113298", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000177")]
		[Address(RVA = "0x11135DC", Offset = "0x11135DC", VA = "0x11135DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000045")]
	[CompilerGenerated]
	private sealed class <PukeRewardsCoroutine>d__37 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BusinessChompy <>4__this;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TotalMoneyEffect <total>5__2;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__3;

		[Token(Token = "0x1700001E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600017C")]
			[Address(RVA = "0x1113A50", Offset = "0x1113A50", VA = "0x1113A50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600017E")]
			[Address(RVA = "0x1113A98", Offset = "0x1113A98", VA = "0x1113A98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000179")]
		[Address(RVA = "0x1111B48", Offset = "0x1111B48", VA = "0x1111B48")]
		[DebuggerHidden]
		public <PukeRewardsCoroutine>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x600017A")]
		[Address(RVA = "0x1113678", Offset = "0x1113678", VA = "0x1113678", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600017B")]
		[Address(RVA = "0x111367C", Offset = "0x111367C", VA = "0x111367C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600017D")]
		[Address(RVA = "0x1113A58", Offset = "0x1113A58", VA = "0x1113A58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int moneyToPuke;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float sphereRadius;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private LayerMask blockingLayers;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem coinsFX;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem spawnFX;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ParticleSystem spawnFXAndroid;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ParticleSystem sideSmokeFX;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip spawnClip;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip deSpawnClip;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioClip cigarPoofClip;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioClip mustacheClip;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioSource pukeLoopAudioSource;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AudioSource wingFlapLoop;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AudioSource cigarLoopAudioSource;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameObject moneyEffect;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private GameObject totalMoneyEffect;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private PlayerAvatar _targetPlayer;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float _nextRandomIdle;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool _puking;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	private bool _rewardsPukeStarted;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 _velocity;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 _targetPos;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float _nextRetargetingTime;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float _giveRewardsTime;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool _spawning;

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x1111504", Offset = "0x1111504", VA = "0x1111504")]
	private void Awake()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x111157C", Offset = "0x111157C", VA = "0x111157C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x111166C", Offset = "0x111166C", VA = "0x111166C", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x1111580", Offset = "0x1111580", VA = "0x1111580")]
	private void Reset()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x1111734", Offset = "0x1111734", VA = "0x1111734", Slot = "5")]
	public void Release()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x1111738", Offset = "0x1111738", VA = "0x1111738")]
	public void Spawn()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x1111840", Offset = "0x1111840", VA = "0x1111840")]
	[PunRPC]
	private void SpawnRPC()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x1111964", Offset = "0x1111964", VA = "0x1111964")]
	public void SetPlayer(PlayerAvatar player)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x11118F0", Offset = "0x11118F0", VA = "0x11118F0")]
	[IteratorStateMachine(typeof(<SpawnCoroutine>d__34))]
	private IEnumerator<float> SpawnCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x110DE9C", Offset = "0x110DE9C", VA = "0x110DE9C")]
	public void IdleAnimationStarted(int idleAnimation)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x1111A38", Offset = "0x1111A38", VA = "0x1111A38")]
	[PunRPC]
	private void StartPukeRewardsRPC()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x1111AD4", Offset = "0x1111AD4", VA = "0x1111AD4")]
	[IteratorStateMachine(typeof(<PukeRewardsCoroutine>d__37))]
	private IEnumerator<float> PukeRewardsCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x1111B70", Offset = "0x1111B70", VA = "0x1111B70")]
	public void DespawnAnimation()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x1111670", Offset = "0x1111670", VA = "0x1111670")]
	private void SetPuking(bool value)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x1111BE0", Offset = "0x1111BE0", VA = "0x1111BE0")]
	private void SpawnMoneyEffect(int value, TotalMoneyEffect totalMoney)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x1111E84", Offset = "0x1111E84", VA = "0x1111E84")]
	private TotalMoneyEffect SpawnTotalMoneyEffect()
	{
		return null;
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x11120C0", Offset = "0x11120C0", VA = "0x11120C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x11126D4", Offset = "0x11126D4", VA = "0x11126D4")]
	private void FindTargetPosition()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x1112D14", Offset = "0x1112D14", VA = "0x1112D14")]
	private Vector3 GetPlayerFrontPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x1112E70", Offset = "0x1112E70", VA = "0x1112E70")]
	private Vector3 GetPlayerLeftPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x1112FD8", Offset = "0x1112FD8", VA = "0x1112FD8")]
	private Vector3 GetPlayerRightPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x1112CCC", Offset = "0x1112CCC", VA = "0x1112CCC")]
	private Vector3 GetPlayerLookPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x1113138", Offset = "0x1113138", VA = "0x1113138")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x1113168", Offset = "0x1113168", VA = "0x1113168", Slot = "6")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x1113284", Offset = "0x1113284", VA = "0x1113284")]
	public BusinessChompy()
	{
	}
}
[Token(Token = "0x2000046")]
public class ButtonPanel : MonoBehaviour
{
	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float moveSpeed;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool buttonToggles;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ElevatorMoving elevator;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool downButton;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool upButton;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private HVRPhysicsButton upHVRButton;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HVRPhysicsButton downHVRButton;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float progress;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RotatorObject crank;

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x1113AF4", Offset = "0x1113AF4", VA = "0x1113AF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x1113C48", Offset = "0x1113C48", VA = "0x1113C48")]
	private void RotatorReset()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x1113C50", Offset = "0x1113C50", VA = "0x1113C50")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x1113C58", Offset = "0x1113C58", VA = "0x1113C58")]
	private void Update()
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x1113E20", Offset = "0x1113E20", VA = "0x1113E20")]
	public ButtonPanel()
	{
	}
}
[Token(Token = "0x2000047")]
public class ButtonPressVoiceline : MonoBehaviour
{
	[Token(Token = "0x2000048")]
	private enum VoicelineType
	{
		[Token(Token = "0x4000198")]
		Slotmachine,
		[Token(Token = "0x4000199")]
		Mapstand
	}

	[Token(Token = "0x2000049")]
	[CompilerGenerated]
	private sealed class <SlotmachineVoiceline>d__5 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x17000020")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600018D")]
			[Address(RVA = "0x11142DC", Offset = "0x11142DC", VA = "0x11142DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600018F")]
			[Address(RVA = "0x1114324", Offset = "0x1114324", VA = "0x1114324", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0x11141AC", Offset = "0x11141AC", VA = "0x11141AC")]
		[DebuggerHidden]
		public <SlotmachineVoiceline>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600018B")]
		[Address(RVA = "0x1114204", Offset = "0x1114204", VA = "0x1114204", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0x1114208", Offset = "0x1114208", VA = "0x1114208", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0x11142E4", Offset = "0x11142E4", VA = "0x11142E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200004A")]
	[CompilerGenerated]
	private sealed class <MapstandVoiceline>d__6 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x17000022")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000193")]
			[Address(RVA = "0x1114458", Offset = "0x1114458", VA = "0x1114458", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000195")]
			[Address(RVA = "0x11144A0", Offset = "0x11144A0", VA = "0x11144A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000190")]
		[Address(RVA = "0x11141D4", Offset = "0x11141D4", VA = "0x11141D4")]
		[DebuggerHidden]
		public <MapstandVoiceline>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000191")]
		[Address(RVA = "0x1114380", Offset = "0x1114380", VA = "0x1114380", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000192")]
		[Address(RVA = "0x1114384", Offset = "0x1114384", VA = "0x1114384", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000194")]
		[Address(RVA = "0x1114460", Offset = "0x1114460", VA = "0x1114460", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Button myButton;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private VoicelineType voicelineType;

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x1113E28", Offset = "0x1113E28", VA = "0x1113E28")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x1113F04", Offset = "0x1113F04", VA = "0x1113F04")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x1113FE0", Offset = "0x1113FE0", VA = "0x1113FE0")]
	private void Purchased()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x11140EC", Offset = "0x11140EC", VA = "0x11140EC")]
	[IteratorStateMachine(typeof(<SlotmachineVoiceline>d__5))]
	private IEnumerator<float> SlotmachineVoiceline()
	{
		return null;
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x111414C", Offset = "0x111414C", VA = "0x111414C")]
	[IteratorStateMachine(typeof(<MapstandVoiceline>d__6))]
	private IEnumerator<float> MapstandVoiceline()
	{
		return null;
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x11141FC", Offset = "0x11141FC", VA = "0x11141FC")]
	public ButtonPressVoiceline()
	{
	}
}
[Token(Token = "0x200004B")]
public class Cabin : MonoBehaviour
{
	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Cabin Instance;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject CabinRubble;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform cabbinModelTransform;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem upgradeParticles;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip buyClip;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _currentTier;

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x11144FC", Offset = "0x11144FC", VA = "0x11144FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x1114554", Offset = "0x1114554", VA = "0x1114554")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x1114748", Offset = "0x1114748", VA = "0x1114748")]
	private void Start()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x1114A3C", Offset = "0x1114A3C", VA = "0x1114A3C")]
	private void Loaded()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x11148A4", Offset = "0x11148A4", VA = "0x11148A4")]
	private void SetupCabin()
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x1114D64", Offset = "0x1114D64", VA = "0x1114D64")]
	private void Upgraded(OtherUpgradePathScriptableObject.UpgradeType arg0)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x1115068", Offset = "0x1115068", VA = "0x1115068")]
	private void DisableRubble()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x1114A40", Offset = "0x1114A40", VA = "0x1114A40")]
	public void SetActive(bool status)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x1115088", Offset = "0x1115088", VA = "0x1115088")]
	public Cabin()
	{
	}
}
[Token(Token = "0x200004C")]
public class Campfire : MonoBehaviourPun, IDamageable, IFlamable
{
	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject EnableOnFire;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool onFire;

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x1115098", Offset = "0x1115098", VA = "0x1115098", Slot = "4")]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x11150F4", Offset = "0x11150F4", VA = "0x11150F4", Slot = "6")]
	public bool Flamable()
	{
		return default(bool);
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x11150FC", Offset = "0x11150FC", VA = "0x11150FC", Slot = "7")]
	public bool OnFire()
	{
		return default(bool);
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x1115104", Offset = "0x1115104", VA = "0x1115104", Slot = "5")]
	public void TrySetOnFire()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x111513C", Offset = "0x111513C", VA = "0x111513C", Slot = "8")]
	public void ExtinguishFire()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x11151BC", Offset = "0x11151BC", VA = "0x11151BC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x111532C", Offset = "0x111532C", VA = "0x111532C")]
	public Campfire()
	{
	}
}
[Token(Token = "0x200004D")]
public class CaveEntrance : MonoBehaviour
{
	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CaveEntrance Instance;

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x1115334", Offset = "0x1115334", VA = "0x1115334")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x111538C", Offset = "0x111538C", VA = "0x111538C")]
	public CaveEntrance()
	{
	}
}
[Token(Token = "0x200004E")]
public class CD2BillBoard : MonoBehaviour
{
	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x1115394", Offset = "0x1115394", VA = "0x1115394")]
	private void Update()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x1115474", Offset = "0x1115474", VA = "0x1115474")]
	public CD2BillBoard()
	{
	}
}
[Token(Token = "0x200004F")]
[RequireComponent(typeof(Rigidbody))]
public class ChangeAtmosphereTrigger : MonoBehaviour
{
	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Atmosphere changeToAtmosphere;

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x111547C", Offset = "0x111547C", VA = "0x111547C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x111555C", Offset = "0x111555C", VA = "0x111555C")]
	public ChangeAtmosphereTrigger()
	{
	}
}
[Token(Token = "0x2000050")]
public class ChangeLayerOnStart : MonoBehaviour
{
	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int newLayer;

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x1115564", Offset = "0x1115564", VA = "0x1115564")]
	private void Start()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x111558C", Offset = "0x111558C", VA = "0x111558C")]
	public ChangeLayerOnStart()
	{
	}
}
[Token(Token = "0x2000051")]
public class ChangeReflectionProbe : MonoBehaviour
{
	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x1115594", Offset = "0x1115594", VA = "0x1115594")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x1115644", Offset = "0x1115644", VA = "0x1115644")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x111574C", Offset = "0x111574C", VA = "0x111574C")]
	private void ChangeCube()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x11157FC", Offset = "0x11157FC", VA = "0x11157FC")]
	public ChangeReflectionProbe()
	{
	}
}
[Token(Token = "0x2000052")]
public class ChangeToLowQualityShaders : MonoBehaviour
{
	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Material> allMats;

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x1115894", Offset = "0x1115894", VA = "0x1115894")]
	[ContextMenu("FindAllMats")]
	private void FindAllMats()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x1115A28", Offset = "0x1115A28", VA = "0x1115A28")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x1115DF0", Offset = "0x1115DF0", VA = "0x1115DF0")]
	public ChangeToLowQualityShaders()
	{
	}
}
[Token(Token = "0x2000053")]
public class ChompyManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000054")]
	public class ChompyData
	{
		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject chompyPrefab;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ChompyType chompyType;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float[] chompySpawnChance;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool onlySpawnInSinglePlayer;

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x1117BA4", Offset = "0x1117BA4", VA = "0x1117BA4")]
		public ChompyData()
		{
		}
	}

	[Token(Token = "0x2000055")]
	public enum ChompyType
	{
		[Token(Token = "0x40001B9")]
		sisterChompy,
		[Token(Token = "0x40001BA")]
		frontierChompy,
		[Token(Token = "0x40001BB")]
		minerChompy,
		[Token(Token = "0x40001BC")]
		hellraiserChompy
	}

	[Token(Token = "0x2000056")]
	[CompilerGenerated]
	private sealed class <Start>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChompyManager <>4__this;

		[Token(Token = "0x17000024")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001D5")]
			[Address(RVA = "0x1117E88", Offset = "0x1117E88", VA = "0x1117E88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001D7")]
			[Address(RVA = "0x1117ED0", Offset = "0x1117ED0", VA = "0x1117ED0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x11160C0", Offset = "0x11160C0", VA = "0x11160C0")]
		[DebuggerHidden]
		public <Start>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x1117BAC", Offset = "0x1117BAC", VA = "0x1117BAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x1117BB0", Offset = "0x1117BB0", VA = "0x1117BB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x1117E90", Offset = "0x1117E90", VA = "0x1117E90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000057")]
	[CompilerGenerated]
	private sealed class <WaitForNavMeshGeneration>d__16 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ChompyManager <>4__this;

		[Token(Token = "0x17000026")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60001DB")]
			[Address(RVA = "0x1118070", Offset = "0x1118070", VA = "0x1118070", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000027")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001DD")]
			[Address(RVA = "0x11180B8", Offset = "0x11180B8", VA = "0x11180B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x11161C4", Offset = "0x11161C4", VA = "0x11161C4")]
		[DebuggerHidden]
		public <WaitForNavMeshGeneration>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x1117ED8", Offset = "0x1117ED8", VA = "0x1117ED8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x1117EDC", Offset = "0x1117EDC", VA = "0x1117EDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x1118078", Offset = "0x1118078", VA = "0x1118078", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000058")]
	[CompilerGenerated]
	private sealed class <PunkSpawnCoroutine>d__23 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ChompyManager <>4__this;

		[Token(Token = "0x17000028")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60001E1")]
			[Address(RVA = "0x1118334", Offset = "0x1118334", VA = "0x1118334", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000029")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001E3")]
			[Address(RVA = "0x111837C", Offset = "0x111837C", VA = "0x111837C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x1116CB8", Offset = "0x1116CB8", VA = "0x1116CB8")]
		[DebuggerHidden]
		public <PunkSpawnCoroutine>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x1118114", Offset = "0x1118114", VA = "0x1118114", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x1118118", Offset = "0x1118118", VA = "0x1118118", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x111833C", Offset = "0x111833C", VA = "0x111833C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ChompyManager Instance;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Visible for Debugging Purposes")]
	[SerializeField]
	private bool debug;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool inCave;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Chompy Prefabs")]
	[Space]
	[SerializeField]
	private GameObject nunChompyPrefab;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject frontierChompyPrefab;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject minerChompyPrefab;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject hellraiserChompyPrefab;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject punkChompyPrefab;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<ChompyData>[] chompysToSpawnOnEachLevel;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ChompyData[] chompyDatas;

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x1115E78", Offset = "0x1115E78", VA = "0x1115E78")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x1115F98", Offset = "0x1115F98", VA = "0x1115F98")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x111604C", Offset = "0x111604C", VA = "0x111604C")]
	[IteratorStateMachine(typeof(<Start>d__14))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x11160E8", Offset = "0x11160E8", VA = "0x11160E8")]
	private void SpawnChompys(GameObject obj)
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x1116150", Offset = "0x1116150", VA = "0x1116150")]
	[IteratorStateMachine(typeof(<WaitForNavMeshGeneration>d__16))]
	private IEnumerator<float> WaitForNavMeshGeneration()
	{
		return null;
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x11161EC", Offset = "0x11161EC", VA = "0x11161EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x11162F4", Offset = "0x11162F4", VA = "0x11162F4")]
	public void SpawnNunChompy()
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x11167C8", Offset = "0x11167C8", VA = "0x11167C8")]
	public void SpawnFrontierChompy()
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x1116910", Offset = "0x1116910", VA = "0x1116910")]
	public void SpawnMinerChompy()
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x1116A58", Offset = "0x1116A58", VA = "0x1116A58")]
	public void SpawnHellraiserChompy()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x1116BC4", Offset = "0x1116BC4", VA = "0x1116BC4")]
	public void SpawnPunkChompy()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x1116C44", Offset = "0x1116C44", VA = "0x1116C44")]
	[IteratorStateMachine(typeof(<PunkSpawnCoroutine>d__23))]
	private IEnumerator<float> PunkSpawnCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x111643C", Offset = "0x111643C", VA = "0x111643C")]
	private Vector3 GetChompySpawnPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x1116E20", Offset = "0x1116E20", VA = "0x1116E20")]
	private Vector3 GetPunkChompySpawnPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x1116CE0", Offset = "0x1116CE0", VA = "0x1116CE0")]
	private Vector3 GetSpawnPointNearLevelStart()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x1117204", Offset = "0x1117204", VA = "0x1117204")]
	private void LevelChanged(int level)
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x111732C", Offset = "0x111732C", VA = "0x111732C")]
	private void SpawnChompysForLevel(int level)
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x1117420", Offset = "0x1117420", VA = "0x1117420")]
	private void SpawnChompy(ChompyType chompyType)
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x1117290", Offset = "0x1117290", VA = "0x1117290")]
	private void ResetRunVariables()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x1116284", Offset = "0x1116284", VA = "0x1116284")]
	private bool InSingleplayer()
	{
		return default(bool);
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x1117458", Offset = "0x1117458", VA = "0x1117458")]
	private void GoingToCave()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x1117588", Offset = "0x1117588", VA = "0x1117588")]
	private ChompyData CheckSpawnChompy(int level)
	{
		return null;
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x1116DA0", Offset = "0x1116DA0", VA = "0x1116DA0")]
	private Vector3 GetRandomNavMeshPoint(Vector3 center, float radius)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x11176C0", Offset = "0x11176C0", VA = "0x11176C0")]
	private void MoveChompyIfNecessary(GameObject spawnedChompyObject, Vector3 pos, Vector3 levelGenOffsetPos)
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x11179EC", Offset = "0x11179EC", VA = "0x11179EC")]
	public static CoroutineHandle ChompyFoundPlayerCheck(string chompyID, Transform chompyTransform)
	{
		return default(CoroutineHandle);
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x1117B9C", Offset = "0x1117B9C", VA = "0x1117B9C")]
	public ChompyManager()
	{
	}
}
[Token(Token = "0x200005A")]
public class ChompyTeleportHandler : MonoBehaviour
{
	[Token(Token = "0x200005B")]
	[CompilerGenerated]
	private sealed class <GrowCoroutine>d__13 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ChompyTeleportHandler <>4__this;

		[Token(Token = "0x1700002A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60001F8")]
			[Address(RVA = "0x1118A30", Offset = "0x1118A30", VA = "0x1118A30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700002B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001FA")]
			[Address(RVA = "0x1118A78", Offset = "0x1118A78", VA = "0x1118A78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x11187D8", Offset = "0x11187D8", VA = "0x11187D8")]
		[DebuggerHidden]
		public <GrowCoroutine>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x1118938", Offset = "0x1118938", VA = "0x1118938", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x111893C", Offset = "0x111893C", VA = "0x111893C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x1118A38", Offset = "0x1118A38", VA = "0x1118A38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005C")]
	[CompilerGenerated]
	private sealed class <ShrinkCoroutine>d__14 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ChompyTeleportHandler <>4__this;

		[Token(Token = "0x1700002C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60001FE")]
			[Address(RVA = "0x1118BC4", Offset = "0x1118BC4", VA = "0x1118BC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000200")]
			[Address(RVA = "0x1118C0C", Offset = "0x1118C0C", VA = "0x1118C0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x1118800", Offset = "0x1118800", VA = "0x1118800")]
		[DebuggerHidden]
		public <ShrinkCoroutine>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x1118AD4", Offset = "0x1118AD4", VA = "0x1118AD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x1118AD8", Offset = "0x1118AD8", VA = "0x1118AD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x1118BCC", Offset = "0x1118BCC", VA = "0x1118BCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform GFX;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool shouldToggleModel;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool shouldDisableAgent;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NavMeshAgent agent;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BehaviorTree tree;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float originalSpeed;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 originalScale;

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x11184F8", Offset = "0x11184F8", VA = "0x11184F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x1118550", Offset = "0x1118550", VA = "0x1118550")]
	private void Update()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x1118554", Offset = "0x1118554", VA = "0x1118554")]
	private void Start()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x1118580", Offset = "0x1118580", VA = "0x1118580")]
	public void Teleport(Vector3 targetPos)
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x1118620", Offset = "0x1118620", VA = "0x1118620")]
	private void ShrinkModel()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x11186FC", Offset = "0x11186FC", VA = "0x11186FC")]
	private void GrowModel()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x1118764", Offset = "0x1118764", VA = "0x1118764")]
	[IteratorStateMachine(typeof(<GrowCoroutine>d__13))]
	private IEnumerator<float> GrowCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x1118688", Offset = "0x1118688", VA = "0x1118688")]
	[IteratorStateMachine(typeof(<ShrinkCoroutine>d__14))]
	private IEnumerator<float> ShrinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x1118828", Offset = "0x1118828", VA = "0x1118828")]
	private void ToggleModel(bool status)
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x1118868", Offset = "0x1118868", VA = "0x1118868")]
	public void ResetTeleportStuff()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x1118600", Offset = "0x1118600", VA = "0x1118600")]
	private void ToggleAgent(bool status)
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x111889C", Offset = "0x111889C", VA = "0x111889C")]
	public void PreTeleport()
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x11188F8", Offset = "0x11188F8", VA = "0x11188F8")]
	public void AfterTeleport()
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0x1118930", Offset = "0x1118930", VA = "0x1118930")]
	public ChompyTeleportHandler()
	{
	}
}
[Token(Token = "0x200005D")]
public class IncrementSharedInt : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedInt variableToIncrement;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private int howMuchToIncrement;

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x1118C68", Offset = "0x1118C68", VA = "0x1118C68", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x1118CE4", Offset = "0x1118CE4", VA = "0x1118CE4", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x1118CEC", Offset = "0x1118CEC", VA = "0x1118CEC")]
	public IncrementSharedInt()
	{
	}
}
[Token(Token = "0x200005E")]
[TaskDescription("Lerps the transform.forward towards target. Start rotation when angle is greater than startLerpAngle")]
public class LerpForwardTowardsTarget : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SharedGameObject target;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float rotationSpeed;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float startLerpAngle;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool rotateOnlyOnY;

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x1118CF4", Offset = "0x1118CF4", VA = "0x1118CF4", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x11190E0", Offset = "0x11190E0", VA = "0x11190E0")]
	public LerpForwardTowardsTarget()
	{
	}
}
[Token(Token = "0x200005F")]
public class FrontierChompy : MonoBehaviourPun, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x2000060")]
	[CompilerGenerated]
	private sealed class <SpawnCoroutine>d__39 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FrontierChompy <>4__this;

		[Token(Token = "0x1700002E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000225")]
			[Address(RVA = "0x111ACA0", Offset = "0x111ACA0", VA = "0x111ACA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700002F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000227")]
			[Address(RVA = "0x111ACE8", Offset = "0x111ACE8", VA = "0x111ACE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x111A19C", Offset = "0x111A19C", VA = "0x111A19C")]
		[DebuggerHidden]
		public <SpawnCoroutine>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0x111ABB8", Offset = "0x111ABB8", VA = "0x111ABB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x111ABBC", Offset = "0x111ABBC", VA = "0x111ABBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x111ACA8", Offset = "0x111ACA8", VA = "0x111ACA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000061")]
	[CompilerGenerated]
	private sealed class <DespawnCoroutine>d__41 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FrontierChompy <>4__this;

		[Token(Token = "0x17000030")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600022B")]
			[Address(RVA = "0x111AF54", Offset = "0x111AF54", VA = "0x111AF54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000031")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600022D")]
			[Address(RVA = "0x111AF9C", Offset = "0x111AF9C", VA = "0x111AF9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x111A2A0", Offset = "0x111A2A0", VA = "0x111A2A0")]
		[DebuggerHidden]
		public <DespawnCoroutine>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x111AD44", Offset = "0x111AD44", VA = "0x111AD44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x111AD48", Offset = "0x111AD48", VA = "0x111AD48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x111AF5C", Offset = "0x111AF5C", VA = "0x111AF5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000062")]
	[CompilerGenerated]
	private sealed class <ShootingCoroutine>d__43 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FrontierChompy <>4__this;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Enemy>.Enumerator <>7__wrap1;

		[Token(Token = "0x17000032")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000232")]
			[Address(RVA = "0x111B5EC", Offset = "0x111B5EC", VA = "0x111B5EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000033")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000234")]
			[Address(RVA = "0x111B634", Offset = "0x111B634", VA = "0x111B634", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x111A3C4", Offset = "0x111A3C4", VA = "0x111A3C4")]
		[DebuggerHidden]
		public <ShootingCoroutine>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x111AFF8", Offset = "0x111AFF8", VA = "0x111AFF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x111B014", Offset = "0x111B014", VA = "0x111B014", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x111B59C", Offset = "0x111B59C", VA = "0x111B59C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x111B5F4", Offset = "0x111B5F4", VA = "0x111B5F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000063")]
	[CompilerGenerated]
	private sealed class <LingerBeforeExit>d__44 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FrontierChompy <>4__this;

		[Token(Token = "0x17000034")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000238")]
			[Address(RVA = "0x111B8BC", Offset = "0x111B8BC", VA = "0x111B8BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000035")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600023A")]
			[Address(RVA = "0x111B904", Offset = "0x111B904", VA = "0x111B904", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x111A460", Offset = "0x111A460", VA = "0x111A460")]
		[DebuggerHidden]
		public <LingerBeforeExit>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x111B690", Offset = "0x111B690", VA = "0x111B690", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x111B694", Offset = "0x111B694", VA = "0x111B694", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x111B8C4", Offset = "0x111B8C4", VA = "0x111B8C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem shootVFX;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioSource shootSFX;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int damageB1;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private int damageB2;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int damageB3;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int damageB4;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Range(0.2f, 0.4f)]
	private float timeBetweenShots;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float sphereRadius;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private LayerMask blockingLayers;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[UnityEngine.Tooltip("For how long Chompy lingers if are enemies are dead after shooting.")]
	private float lingerTime;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("How fast Chompy rotates towards new target after shooting")]
	[SerializeField]
	private float shootingRotationSpeed;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private bool printLogs;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioSource chompySoundsSource;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioSource spawnJingleAudioSource;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioClip despawnClip;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioClip blowSmokeClip;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AudioClip laughClip;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AudioClip throwGunClip;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Range(0.1f, 1f)]
	private float chompySize;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private ParticleSystem spawnFX;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private ParticleSystem spawnFXAndroid;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int damage;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool hasTargets;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 _velocity;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 _targetPos;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool shouldFollowPlayer;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool shouldFacePlayer;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	private bool shooting;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private PlayerAvatar _targetPlayer;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Transform targetTransform;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float playerFrontPosOffset;

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x11190F4", Offset = "0x11190F4", VA = "0x11190F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x111916C", Offset = "0x111916C", VA = "0x111916C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x1119C04", Offset = "0x1119C04", VA = "0x1119C04")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x1119DEC", Offset = "0x1119DEC", VA = "0x1119DEC", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x1119C08", Offset = "0x1119C08", VA = "0x1119C08")]
	private void Reset()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x1119EAC", Offset = "0x1119EAC", VA = "0x1119EAC", Slot = "5")]
	public void Release()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x1119EB0", Offset = "0x1119EB0", VA = "0x1119EB0")]
	public void Spawn()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x1119FDC", Offset = "0x1119FDC", VA = "0x1119FDC")]
	[IteratorStateMachine(typeof(<SpawnCoroutine>d__39))]
	private IEnumerator<float> SpawnCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x111A1C4", Offset = "0x111A1C4", VA = "0x111A1C4")]
	public void Despawn()
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x111A22C", Offset = "0x111A22C", VA = "0x111A22C")]
	[IteratorStateMachine(typeof(<DespawnCoroutine>d__41))]
	private IEnumerator<float> DespawnCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x111A2C8", Offset = "0x111A2C8", VA = "0x111A2C8")]
	public void BeginShooting()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x111A350", Offset = "0x111A350", VA = "0x111A350")]
	[IteratorStateMachine(typeof(<ShootingCoroutine>d__43))]
	public IEnumerator<float> ShootingCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x111A3EC", Offset = "0x111A3EC", VA = "0x111A3EC")]
	[IteratorStateMachine(typeof(<LingerBeforeExit>d__44))]
	public IEnumerator<float> LingerBeforeExit()
	{
		return null;
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x111A488", Offset = "0x111A488", VA = "0x111A488")]
	public void SetPlayer(PlayerAvatar player)
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x111A534", Offset = "0x111A534", VA = "0x111A534")]
	public void ShootFX()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x111A564", Offset = "0x111A564", VA = "0x111A564")]
	public void CheckForEnemies()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x111A050", Offset = "0x111A050", VA = "0x111A050")]
	private void DetermineDamage()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x111A69C", Offset = "0x111A69C", VA = "0x111A69C")]
	private void ShootAtTarget(Enemy target)
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x1119E3C", Offset = "0x1119E3C", VA = "0x1119E3C")]
	private void Log(object message)
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x111A6CC", Offset = "0x111A6CC", VA = "0x111A6CC")]
	private Vector3 GetPlayerFrontPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x111A834", Offset = "0x111A834", VA = "0x111A834")]
	private Vector3 GetPlayerLeftPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x111A99C", Offset = "0x111A99C", VA = "0x111A99C")]
	private Vector3 GetPlayerRightPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x1119BBC", Offset = "0x1119BBC", VA = "0x1119BBC")]
	private Vector3 GetPlayerLookPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x11195C4", Offset = "0x11195C4", VA = "0x11195C4")]
	private void FindTargetPosition()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x111AAFC", Offset = "0x111AAFC", VA = "0x111AAFC")]
	public void LaughSFX()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x111AB30", Offset = "0x111AB30", VA = "0x111AB30")]
	public void BlowSmokeSFX()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x111AB64", Offset = "0x111AB64", VA = "0x111AB64")]
	public void ThrowGunSFX()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x111AB98", Offset = "0x111AB98", VA = "0x111AB98")]
	public FrontierChompy()
	{
	}
}
[Token(Token = "0x2000064")]
public class FrontierChompyAnimationEventReciever : MonoBehaviour
{
	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FrontierChompy frontierChompy;

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x111B960", Offset = "0x111B960", VA = "0x111B960")]
	public void ShootFX()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x111B978", Offset = "0x111B978", VA = "0x111B978")]
	public void BeginShooting()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x111B990", Offset = "0x111B990", VA = "0x111B990")]
	public void CheckForEnemies()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x111B9A8", Offset = "0x111B9A8", VA = "0x111B9A8")]
	public void LaughSFX()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x111B9C0", Offset = "0x111B9C0", VA = "0x111B9C0")]
	public void BlowSmokeSFX()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x111B9D8", Offset = "0x111B9D8", VA = "0x111B9D8")]
	public void ThrowGunSFX()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x111B9F0", Offset = "0x111B9F0", VA = "0x111B9F0")]
	public FrontierChompyAnimationEventReciever()
	{
	}
}
[Token(Token = "0x2000065")]
public class FrontierCheckIfEnemyDead : Conditional
{
	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedGameObject target;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool reverse;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool isDead;

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x111B9F8", Offset = "0x111B9F8", VA = "0x111B9F8", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x111BAFC", Offset = "0x111BAFC", VA = "0x111BAFC", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x111BB20", Offset = "0x111BB20", VA = "0x111BB20")]
	public FrontierCheckIfEnemyDead()
	{
	}
}
[Token(Token = "0x2000066")]
[TaskDescription("Finds alive enemies in a radius and returns a random, or if sort by distane gets the closest one.")]
public class FrontierChompyEnemyCheck : Conditional
{
	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedFloat radius;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private LayerMask layerMask;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private int maxCollisions;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private SharedGameObject result;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<GameObject> foundEnemies;

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x111BB28", Offset = "0x111BB28", VA = "0x111BB28", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x111BE18", Offset = "0x111BE18", VA = "0x111BE18", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x111BB44", Offset = "0x111BB44", VA = "0x111BB44")]
	private void EnemyCheck()
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x111BEB4", Offset = "0x111BEB4", VA = "0x111BEB4")]
	public FrontierChompyEnemyCheck()
	{
	}
}
[Token(Token = "0x2000067")]
public class FrontierCompanionChompy : MonoBehaviourPunCallbacks, IPoolable, IEventSystemHandler, IInRoomCallbacks, IPunInstantiateMagicCallback
{
	[Token(Token = "0x2000068")]
	[CompilerGenerated]
	private sealed class <CombatEndedCoroutine>d__52 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FrontierCompanionChompy <>4__this;

		[Token(Token = "0x17000036")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000277")]
			[Address(RVA = "0x111E610", Offset = "0x111E610", VA = "0x111E610", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000279")]
			[Address(RVA = "0x111E658", Offset = "0x111E658", VA = "0x111E658", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0x111D1D8", Offset = "0x111D1D8", VA = "0x111D1D8")]
		[DebuggerHidden]
		public <CombatEndedCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0x111E4D4", Offset = "0x111E4D4", VA = "0x111E4D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0x111E4D8", Offset = "0x111E4D8", VA = "0x111E4D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0x111E618", Offset = "0x111E618", VA = "0x111E618", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000069")]
	[CompilerGenerated]
	private sealed class <ShootRightCoroutine>d__54 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FrontierCompanionChompy <>4__this;

		[Token(Token = "0x17000038")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600027D")]
			[Address(RVA = "0x111E7B8", Offset = "0x111E7B8", VA = "0x111E7B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000039")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600027F")]
			[Address(RVA = "0x111E800", Offset = "0x111E800", VA = "0x111E800", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0x111D398", Offset = "0x111D398", VA = "0x111D398")]
		[DebuggerHidden]
		public <ShootRightCoroutine>d__54(int <>1__state)
		{
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x111E6B4", Offset = "0x111E6B4", VA = "0x111E6B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0x111E6B8", Offset = "0x111E6B8", VA = "0x111E6B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x111E7C0", Offset = "0x111E7C0", VA = "0x111E7C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006A")]
	[CompilerGenerated]
	private sealed class <ShootLeftCoroutine>d__56 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FrontierCompanionChompy <>4__this;

		[Token(Token = "0x1700003A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000283")]
			[Address(RVA = "0x111E998", Offset = "0x111E998", VA = "0x111E998", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700003B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000285")]
			[Address(RVA = "0x111E9E0", Offset = "0x111E9E0", VA = "0x111E9E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0x111D554", Offset = "0x111D554", VA = "0x111D554")]
		[DebuggerHidden]
		public <ShootLeftCoroutine>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0x111E85C", Offset = "0x111E85C", VA = "0x111E85C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0x111E860", Offset = "0x111E860", VA = "0x111E860", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0x111E9A0", Offset = "0x111E9A0", VA = "0x111E9A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006B")]
	[CompilerGenerated]
	private sealed class <TestGunCoroutine>d__69 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FrontierCompanionChompy <>4__this;

		[Token(Token = "0x1700003C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000289")]
			[Address(RVA = "0x111EBB0", Offset = "0x111EBB0", VA = "0x111EBB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700003D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600028B")]
			[Address(RVA = "0x111EBF8", Offset = "0x111EBF8", VA = "0x111EBF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0x111DA70", Offset = "0x111DA70", VA = "0x111DA70")]
		[DebuggerHidden]
		public <TestGunCoroutine>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0x111EA3C", Offset = "0x111EA3C", VA = "0x111EA3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0x111EA40", Offset = "0x111EA40", VA = "0x111EA40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0x111EBB8", Offset = "0x111EBB8", VA = "0x111EBB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006C")]
	[CompilerGenerated]
	private sealed class <YawnCoroutine>d__71 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FrontierCompanionChompy <>4__this;

		[Token(Token = "0x1700003E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600028F")]
			[Address(RVA = "0x111ED34", Offset = "0x111ED34", VA = "0x111ED34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700003F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000291")]
			[Address(RVA = "0x111ED7C", Offset = "0x111ED7C", VA = "0x111ED7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0x111DB94", Offset = "0x111DB94", VA = "0x111DB94")]
		[DebuggerHidden]
		public <YawnCoroutine>d__71(int <>1__state)
		{
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0x111EC54", Offset = "0x111EC54", VA = "0x111EC54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0x111EC58", Offset = "0x111EC58", VA = "0x111EC58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0x111ED3C", Offset = "0x111ED3C", VA = "0x111ED3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("References")]
	[SerializeField]
	private BehaviorTree behaviorTree;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private NavMeshAgent agent;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject GFX;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioSource chompyAS;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioSource revolverAS;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip flipGunClip;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip blowSmokeClip;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip hahaClip;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioClip entryClip;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioClip eatLootClip;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private ParticleSystem leftRevolverPS;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private ParticleSystem rightRevolverPS;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private bool active;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	[Header("Settings")]
	private float movementSpeed;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private int animationSpeedDivider;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	private float gunWeightLerpTime;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private int damageB1;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	private int damageB2;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private int damageB3;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	private int damageB4;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Floating Settings")]
	[SerializeField]
	private float floatingAmplitude;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[SerializeField]
	private float levitateSpeed;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private float sleepingSpeed;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	private float walkingSpeed;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private float runningSpeed;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[SerializeField]
	[Header("Behaviour Settings")]
	private float idleActionCooldown;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private float reactToEnemyCooldown;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private float reactToPOICooldown;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private float recieveLootCooldown;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private GameObject moneyEffectPrefab;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float timeSinceLastWander;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float timeSinceLastReactedToEnemy;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float timeSinceLastReactedToPOI;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Vector3 tempPos;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float currentSpeed;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float levitateStartHeight;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool lerpLeftHandWeight;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
	private bool lerpRightHandWeight;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
	private bool inCombat;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int damage;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool canRecieveLoot;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float recieveLootTimer;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float enemyCheckTime;

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x111BF3C", Offset = "0x111BF3C", VA = "0x111BF3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x111C000", Offset = "0x111C000", VA = "0x111C000")]
	private void Start()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x111C7F8", Offset = "0x111C7F8", VA = "0x111C7F8")]
	private void Update()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x111CF70", Offset = "0x111CF70", VA = "0x111CF70")]
	private new void OnDisable()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x111CFCC", Offset = "0x111CFCC", VA = "0x111CFCC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x111BF40", Offset = "0x111BF40", VA = "0x111BF40")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x111CCE8", Offset = "0x111CCE8", VA = "0x111CCE8")]
	private void CombatStarted()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x111CDD0", Offset = "0x111CDD0", VA = "0x111CDD0")]
	private void CombatEnded()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x111D164", Offset = "0x111D164", VA = "0x111D164")]
	[IteratorStateMachine(typeof(<CombatEndedCoroutine>d__52))]
	private IEnumerator<float> CombatEndedCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x111D200", Offset = "0x111D200", VA = "0x111D200")]
	public void ShootRight()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x111D324", Offset = "0x111D324", VA = "0x111D324")]
	[IteratorStateMachine(typeof(<ShootRightCoroutine>d__54))]
	private IEnumerator<float> ShootRightCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x111D3C0", Offset = "0x111D3C0", VA = "0x111D3C0")]
	public void ShootLeft()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x111D4E0", Offset = "0x111D4E0", VA = "0x111D4E0")]
	[IteratorStateMachine(typeof(<ShootLeftCoroutine>d__56))]
	private IEnumerator<float> ShootLeftCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x111D57C", Offset = "0x111D57C", VA = "0x111D57C")]
	private void SetLeftHandWeight()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x111D588", Offset = "0x111D588", VA = "0x111D588")]
	private void ResetLeftHandWeight()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x111CF24", Offset = "0x111CF24", VA = "0x111CF24")]
	private void ResetTimersIfTooLarge()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x111C73C", Offset = "0x111C73C", VA = "0x111C73C")]
	private void DetermineDamage()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x111D590", Offset = "0x111D590", VA = "0x111D590", Slot = "54")]
	public void Acquire()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x111D594", Offset = "0x111D594", VA = "0x111D594")]
	private void Reset()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0x111D82C", Offset = "0x111D82C", VA = "0x111D82C", Slot = "55")]
	public void Release()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x111D830", Offset = "0x111D830", VA = "0x111D830")]
	private void WakeUp()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x111D95C", Offset = "0x111D95C", VA = "0x111D95C")]
	private void ResetLastWanderTime()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x111D964", Offset = "0x111D964", VA = "0x111D964")]
	private void ResetLastReactedTime()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x111D96C", Offset = "0x111D96C", VA = "0x111D96C")]
	private void ResetLastPOITime()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x111D974", Offset = "0x111D974", VA = "0x111D974")]
	private void TestGun()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x111D9FC", Offset = "0x111D9FC", VA = "0x111D9FC")]
	[IteratorStateMachine(typeof(<TestGunCoroutine>d__69))]
	private IEnumerator<float> TestGunCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x111DA98", Offset = "0x111DA98", VA = "0x111DA98")]
	private void Yawn()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x111DB20", Offset = "0x111DB20", VA = "0x111DB20")]
	[IteratorStateMachine(typeof(<YawnCoroutine>d__71))]
	private IEnumerator<float> YawnCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x111CC84", Offset = "0x111CC84", VA = "0x111CC84")]
	private void HandleMovementAnimations()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x111CE78", Offset = "0x111CE78", VA = "0x111CE78")]
	private void HandleFloating()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x111DBBC", Offset = "0x111DBBC", VA = "0x111DBBC")]
	public void ShootFX(string hand)
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x111DBC0", Offset = "0x111DBC0", VA = "0x111DBC0")]
	public void BlowSmokeSFX()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x111DBF4", Offset = "0x111DBF4", VA = "0x111DBF4")]
	public void ThrowGunSFX()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x111D130", Offset = "0x111D130", VA = "0x111D130")]
	public void HahaSFX()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x111DC28", Offset = "0x111DC28", VA = "0x111DC28", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x111DCEC", Offset = "0x111DCEC", VA = "0x111DCEC")]
	private void InstantDespawn()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x111DD90", Offset = "0x111DD90", VA = "0x111DD90")]
	private void Voiceline()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x111DDF8", Offset = "0x111DDF8", VA = "0x111DDF8")]
	private void LootRecieved()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x111DE00", Offset = "0x111DE00", VA = "0x111DE00")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x111DFA0", Offset = "0x111DFA0", VA = "0x111DFA0")]
	private void DespawnLoot(Loot loot)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x111E17C", Offset = "0x111E17C", VA = "0x111E17C")]
	[PunRPC]
	private void SpawnMoneyEffect(int value)
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x111E418", Offset = "0x111E418", VA = "0x111E418", Slot = "56")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x111E4A4", Offset = "0x111E4A4", VA = "0x111E4A4")]
	public FrontierCompanionChompy()
	{
	}
}
[Token(Token = "0x200006D")]
public class TryToMakeDamageBehavior : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedInt damage;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private SharedGameObject target;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private DamageType damageType;

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x111EDD8", Offset = "0x111EDD8", VA = "0x111EDD8", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x111EF14", Offset = "0x111EF14", VA = "0x111EF14", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x111EFB0", Offset = "0x111EFB0", VA = "0x111EFB0")]
	public TryToMakeDamageBehavior()
	{
	}
}
[Token(Token = "0x200006E")]
public class AnimatorTriggerSwitcher : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string trigger;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool value;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Animator _animator;

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x111EFB8", Offset = "0x111EFB8", VA = "0x111EFB8", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x111F098", Offset = "0x111F098", VA = "0x111F098", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x111F158", Offset = "0x111F158", VA = "0x111F158")]
	private void SwitchTrigger(string trigger, bool value)
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x111F184", Offset = "0x111F184", VA = "0x111F184")]
	public AnimatorTriggerSwitcher()
	{
	}
}
[Token(Token = "0x200006F")]
public class HellraiserActivateAfterTeleport : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SharedVector3 teleportSpot;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private HellraiserChompy hc;

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x111F18C", Offset = "0x111F18C", VA = "0x111F18C", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x111F1E4", Offset = "0x111F1E4", VA = "0x111F1E4", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x111F2A0", Offset = "0x111F2A0", VA = "0x111F2A0")]
	public HellraiserActivateAfterTeleport()
	{
	}
}
[Token(Token = "0x2000070")]
public class HellraiserAfterAttack : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Animator animator;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SharedBool attacking;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private HellraiserChompy hc;

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x111F2A8", Offset = "0x111F2A8", VA = "0x111F2A8", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x111F340", Offset = "0x111F340", VA = "0x111F340", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x111F3D0", Offset = "0x111F3D0", VA = "0x111F3D0", Slot = "9")]
	public override void OnEnd()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x111F3EC", Offset = "0x111F3EC", VA = "0x111F3EC")]
	public HellraiserAfterAttack()
	{
	}
}
[Token(Token = "0x2000071")]
public class HellRaiserChargeAttack : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float chargeForce;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SharedGameObject targetPlayer;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Animator animator;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private HellraiserChompy hc;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Rigidbody rb;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float originalTurnSpeed;

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x111F3F4", Offset = "0x111F3F4", VA = "0x111F3F4", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x111F4C4", Offset = "0x111F4C4", VA = "0x111F4C4", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x111F63C", Offset = "0x111F63C", VA = "0x111F63C", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x111F644", Offset = "0x111F644", VA = "0x111F644", Slot = "8")]
	public override void OnFixedUpdate()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x111F6A0", Offset = "0x111F6A0", VA = "0x111F6A0", Slot = "9")]
	public override void OnEnd()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x111F6DC", Offset = "0x111F6DC", VA = "0x111F6DC")]
	public HellRaiserChargeAttack()
	{
	}
}
[Token(Token = "0x2000072")]
public class HellraiserChargeStopCondition : Conditional
{
	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private LayerMask chargeStopLayers;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedInt damage;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private HellraiserChompy hc;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ParticleSystem chargeHitParticles;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ParticleSystem chargeStopParticles;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool collided;

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x111F6EC", Offset = "0x111F6EC", VA = "0x111F6EC", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x111F744", Offset = "0x111F744", VA = "0x111F744", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x111F818", Offset = "0x111F818", VA = "0x111F818", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x111F82C", Offset = "0x111F82C", VA = "0x111F82C", Slot = "18")]
	public override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x11200D4", Offset = "0x11200D4", VA = "0x11200D4")]
	private void DeformTerrain(DiggingArea world, Vector3 point, float deformSpeed, float range)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x11203C4", Offset = "0x11203C4", VA = "0x11203C4")]
	public HellraiserChargeStopCondition()
	{
	}
}
[Token(Token = "0x2000073")]
public class HellraiserChompy : Enemy, IPoolable, IEventSystemHandler, IDamageable, IPunInstantiateMagicCallback
{
	[Token(Token = "0x2000074")]
	[CompilerGenerated]
	private sealed class <RaiseHell>d__52 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HellraiserChompy <>4__this;

		[Token(Token = "0x17000040")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60002E5")]
			[Address(RVA = "0x11226E0", Offset = "0x11226E0", VA = "0x11226E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000041")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002E7")]
			[Address(RVA = "0x1122728", Offset = "0x1122728", VA = "0x1122728", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x1120D64", Offset = "0x1120D64", VA = "0x1120D64")]
		[DebuggerHidden]
		public <RaiseHell>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x11223C0", Offset = "0x11223C0", VA = "0x11223C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x11223C4", Offset = "0x11223C4", VA = "0x11223C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x11226E8", Offset = "0x11226E8", VA = "0x11226E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000075")]
	[CompilerGenerated]
	private sealed class <_Stunned>d__66 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HellraiserChompy <>4__this;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <stunEndTime>5__2;

		[Token(Token = "0x17000042")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60002EB")]
			[Address(RVA = "0x11228BC", Offset = "0x11228BC", VA = "0x11228BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000043")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002ED")]
			[Address(RVA = "0x1122904", Offset = "0x1122904", VA = "0x1122904", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x11218AC", Offset = "0x11218AC", VA = "0x11218AC")]
		[DebuggerHidden]
		public <_Stunned>d__66(int <>1__state)
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x1122784", Offset = "0x1122784", VA = "0x1122784", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x1122788", Offset = "0x1122788", VA = "0x1122788", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x11228C4", Offset = "0x11228C4", VA = "0x11228C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000076")]
	[CompilerGenerated]
	private sealed class <DetectPlayerCoroutine>d__70 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HellraiserChompy <>4__this;

		[Token(Token = "0x17000044")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60002F1")]
			[Address(RVA = "0x1122A40", Offset = "0x1122A40", VA = "0x1122A40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000045")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002F3")]
			[Address(RVA = "0x1122A88", Offset = "0x1122A88", VA = "0x1122A88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x1121C2C", Offset = "0x1121C2C", VA = "0x1121C2C")]
		[DebuggerHidden]
		public <DetectPlayerCoroutine>d__70(int <>1__state)
		{
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x1122960", Offset = "0x1122960", VA = "0x1122960", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x1122964", Offset = "0x1122964", VA = "0x1122964", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x1122A48", Offset = "0x1122A48", VA = "0x1122A48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000077")]
	[CompilerGenerated]
	private sealed class <DelayedResetTrigger>d__72 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float delay;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HellraiserChompy <>4__this;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string trigger;

		[Token(Token = "0x17000046")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60002F7")]
			[Address(RVA = "0x1122BA4", Offset = "0x1122BA4", VA = "0x1122BA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000047")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002F9")]
			[Address(RVA = "0x1122BEC", Offset = "0x1122BEC", VA = "0x1122BEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x1121CF4", Offset = "0x1121CF4", VA = "0x1121CF4")]
		[DebuggerHidden]
		public <DelayedResetTrigger>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x1122AE4", Offset = "0x1122AE4", VA = "0x1122AE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x1122AE8", Offset = "0x1122AE8", VA = "0x1122AE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x1122BAC", Offset = "0x1122BAC", VA = "0x1122BAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000078")]
	[CompilerGenerated]
	private sealed class <GrowCoroutine>d__94 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HellraiserChompy <>4__this;

		[Token(Token = "0x17000048")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60002FD")]
			[Address(RVA = "0x1122D28", Offset = "0x1122D28", VA = "0x1122D28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000049")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002FF")]
			[Address(RVA = "0x1122D70", Offset = "0x1122D70", VA = "0x1122D70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x1122254", Offset = "0x1122254", VA = "0x1122254")]
		[DebuggerHidden]
		public <GrowCoroutine>d__94(int <>1__state)
		{
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x1122C48", Offset = "0x1122C48", VA = "0x1122C48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x1122C4C", Offset = "0x1122C4C", VA = "0x1122C4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x1122D30", Offset = "0x1122D30", VA = "0x1122D30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000079")]
	[CompilerGenerated]
	private sealed class <ShrinkCoroutine>d__95 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HellraiserChompy <>4__this;

		[Token(Token = "0x1700004A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000303")]
			[Address(RVA = "0x1122EB0", Offset = "0x1122EB0", VA = "0x1122EB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700004B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000305")]
			[Address(RVA = "0x1122EF8", Offset = "0x1122EF8", VA = "0x1122EF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x112227C", Offset = "0x112227C", VA = "0x112227C")]
		[DebuggerHidden]
		public <ShrinkCoroutine>d__95(int <>1__state)
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x1122DCC", Offset = "0x1122DCC", VA = "0x1122DCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x1122DD0", Offset = "0x1122DD0", VA = "0x1122DD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x1122EB8", Offset = "0x1122EB8", VA = "0x1122EB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private AudioSource chompyAudioSource;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private AudioSource ricochetAudioSource;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	private AudioSource wooshAudioSource;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	private AudioSource teleportAudioSource;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	private AudioSource musicAudioSource;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	private AudioClip bashClip;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	private AudioClip growlClip;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	private AudioClip cackleClip;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	private AudioClip spawnClip;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private AudioClip pantingClip;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private AudioClip shriekClip;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[SerializeField]
	private AudioClip slurpsClip;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[SerializeField]
	private AudioClip firstSong;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[SerializeField]
	private AudioClip secondSong;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	private GameObject targetPlayer;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	private GameObject model;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	private BehaviorTree behaviorTree;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[SerializeField]
	private float minIdleAnimTime;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	[SerializeField]
	private float maxIdleAnimTime;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[SerializeField]
	private float chargeForce;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	[SerializeField]
	private LayerMask chargeStopLayers;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	[SerializeField]
	private float turnSpeed;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	public float originalTurnSpeed;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	[SerializeField]
	private float chargeTurnSpeed;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	[SerializeField]
	protected ParticleSystem chargeStopParticles;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	[SerializeField]
	protected ParticleSystem chargeHitParticles;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	[SerializeField]
	protected ParticleSystem spawnParticles;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	[SerializeField]
	protected ParticleSystem trailParticles;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	[SerializeField]
	protected ParticleSystem batParticles;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[SerializeField]
	private SharedInt damage;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[SerializeField]
	private BoxCollider chargeCollider;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private bool wandering;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x269")]
	private bool shouldFacePlayer;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26A")]
	private bool targetInRange;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26B")]
	private bool sequenceStarted;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
	private bool stunned;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26D")]
	private bool playingAggroAnim;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private float idleAnimTimer;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
	private float nextIdleAnimTime;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[SerializeField]
	private float stunDuration;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private Rigidbody rb;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private bool attacking;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x289")]
	private bool charging;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private Collider[] _hitColliders;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	public List<Transform> _alreadyDamagedList;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private bool shrieked;

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x11203CC", Offset = "0x11203CC", VA = "0x11203CC", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x11203F4", Offset = "0x11203F4", VA = "0x11203F4", Slot = "69")]
	protected override void GetReferences()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x1120490", Offset = "0x1120490", VA = "0x1120490", Slot = "91")]
	public override void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x1120664", Offset = "0x1120664", VA = "0x1120664", Slot = "86")]
	public override void Release()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x112066C", Offset = "0x112066C", VA = "0x112066C", Slot = "87")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x1120900", Offset = "0x1120900", VA = "0x1120900")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x11205F0", Offset = "0x11205F0", VA = "0x11205F0")]
	[IteratorStateMachine(typeof(<RaiseHell>d__52))]
	private IEnumerator<float> RaiseHell()
	{
		return null;
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x1120D8C", Offset = "0x1120D8C", VA = "0x1120D8C", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x1120F54", Offset = "0x1120F54", VA = "0x1120F54")]
	public void DetectPlayer()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x1121030", Offset = "0x1121030", VA = "0x1121030")]
	public void CanSeePlayer()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x1121040", Offset = "0x1121040", VA = "0x1121040", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x1121620", Offset = "0x1121620", VA = "0x1121620", Slot = "83")]
	protected override void DeAggro()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x11216D8", Offset = "0x11216D8", VA = "0x11216D8", Slot = "71")]
	protected override void EnableAI()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x1121718", Offset = "0x1121718", VA = "0x1121718", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x1121720", Offset = "0x1121720", VA = "0x1121720", Slot = "30")]
	public override void OnConnected()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x1121728", Offset = "0x1121728", VA = "0x1121728", Slot = "32")]
	public override void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x1121730", Offset = "0x1121730", VA = "0x1121730", Slot = "72")]
	protected override void CheckIfMasterAndToggleAI()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x1121738", Offset = "0x1121738", VA = "0x1121738", Slot = "82")]
	public override void ForceAggroPlayer()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x1121740", Offset = "0x1121740", VA = "0x1121740", Slot = "73")]
	[PunRPC]
	public override void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x11217D0", Offset = "0x11217D0", VA = "0x11217D0")]
	private void Stunned()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x1121838", Offset = "0x1121838", VA = "0x1121838")]
	[IteratorStateMachine(typeof(<_Stunned>d__66))]
	private IEnumerator<float> _Stunned()
	{
		return null;
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x11218D4", Offset = "0x11218D4", VA = "0x11218D4", Slot = "77")]
	public override void Aggro()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x1121C24", Offset = "0x1121C24", VA = "0x1121C24", Slot = "78")]
	[PunRPC]
	protected override void AggroRPC()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x112198C", Offset = "0x112198C", VA = "0x112198C")]
	protected void ForceTargetClosestPlayer(float maxRange = 20f)
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x1120FBC", Offset = "0x1120FBC", VA = "0x1120FBC")]
	[IteratorStateMachine(typeof(<DetectPlayerCoroutine>d__70))]
	private IEnumerator<float> DetectPlayerCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x1120E48", Offset = "0x1120E48", VA = "0x1120E48")]
	private void GetNextIdleAnimTime()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x1121C54", Offset = "0x1121C54", VA = "0x1121C54")]
	[IteratorStateMachine(typeof(<DelayedResetTrigger>d__72))]
	private IEnumerator<float> DelayedResetTrigger(string trigger, float delay)
	{
		return null;
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x1121D1C", Offset = "0x1121D1C", VA = "0x1121D1C")]
	public void GrowlSFX()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x1121DB4", Offset = "0x1121DB4", VA = "0x1121DB4")]
	public void Cackle()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x1121E4C", Offset = "0x1121E4C", VA = "0x1121E4C")]
	public void Slurps()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x112032C", Offset = "0x112032C", VA = "0x112032C")]
	public void BashSFX()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x1121EE4", Offset = "0x1121EE4", VA = "0x1121EE4")]
	public void PantingSFX()
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x111F7AC", Offset = "0x111F7AC", VA = "0x111F7AC")]
	public void WindWooshSFXToggle(bool status)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x111F61C", Offset = "0x111F61C", VA = "0x111F61C")]
	public void ToggleChargeColliders(bool status)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x1121F7C", Offset = "0x1121F7C", VA = "0x1121F7C")]
	public void SetTurnSpeed(float newSpeed)
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x1121F84", Offset = "0x1121F84", VA = "0x1121F84")]
	public float GetTurnSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x1121F8C", Offset = "0x1121F8C", VA = "0x1121F8C")]
	public void SetChargingStatus(bool status)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x1121F98", Offset = "0x1121F98", VA = "0x1121F98")]
	public ParticleSystem GetHitParticles()
	{
		return null;
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x1121FA0", Offset = "0x1121FA0", VA = "0x1121FA0")]
	public ParticleSystem GetStopParticles()
	{
		return null;
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x1121FA8", Offset = "0x1121FA8", VA = "0x1121FA8")]
	public void AfterAttackAnim()
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x111F240", Offset = "0x111F240", VA = "0x111F240")]
	public void ToggleNavMeshAgent(bool status)
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x1122018", Offset = "0x1122018", VA = "0x1122018")]
	public void PlaySpawnParticles()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x1122048", Offset = "0x1122048", VA = "0x1122048")]
	private void StopTrailParticles()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x1122064", Offset = "0x1122064", VA = "0x1122064")]
	private void PlayTrailParticles()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x1122080", Offset = "0x1122080", VA = "0x1122080")]
	private void PlayBatParticles()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x111F220", Offset = "0x111F220", VA = "0x111F220")]
	public void ToggleModel(bool status)
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x112209C", Offset = "0x112209C", VA = "0x112209C")]
	public void ShrinkModel()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x1122178", Offset = "0x1122178", VA = "0x1122178")]
	public void GrowModel()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x11221E0", Offset = "0x11221E0", VA = "0x11221E0")]
	[IteratorStateMachine(typeof(<GrowCoroutine>d__94))]
	public IEnumerator<float> GrowCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x1122104", Offset = "0x1122104", VA = "0x1122104")]
	[IteratorStateMachine(typeof(<ShrinkCoroutine>d__95))]
	public IEnumerator<float> ShrinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x11222A4", Offset = "0x11222A4", VA = "0x11222A4")]
	public void WarpAgent(Vector3 targetPos)
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x1120C70", Offset = "0x1120C70", VA = "0x1120C70")]
	private void DetermineDamage()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x11222C0", Offset = "0x11222C0", VA = "0x11222C0")]
	private void Voiceline()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x1122328", Offset = "0x1122328", VA = "0x1122328")]
	public HellraiserChompy()
	{
	}
}
[Token(Token = "0x200007A")]
public class HellraiserDetectPlayer : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Animator _animator;

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x1122F54", Offset = "0x1122F54", VA = "0x1122F54", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x1122FB4", Offset = "0x1122FB4", VA = "0x1122FB4", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x1123008", Offset = "0x1123008", VA = "0x1123008")]
	public HellraiserDetectPlayer()
	{
	}
}
[Token(Token = "0x200007B")]
public class HellraiserFacePlayer : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SharedGameObject targetPlayer;

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x1123010", Offset = "0x1123010", VA = "0x1123010", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x11231BC", Offset = "0x11231BC", VA = "0x11231BC")]
	public HellraiserFacePlayer()
	{
	}
}
[Token(Token = "0x200007C")]
public class HellraiserGetTeleportSpot : Conditional
{
	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SharedVector3 TeleportSpot;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SharedGameObject targetPlayer;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool foundSpot;

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x11231C4", Offset = "0x11231C4", VA = "0x11231C4", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x11232E4", Offset = "0x11232E4", VA = "0x11232E4", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x11232F8", Offset = "0x11232F8", VA = "0x11232F8")]
	public HellraiserGetTeleportSpot()
	{
	}
}
[Token(Token = "0x200007D")]
public class HellraiserGrowModel : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private HellraiserChompy hc;

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x1123300", Offset = "0x1123300", VA = "0x1123300", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x1123358", Offset = "0x1123358", VA = "0x1123358", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x1123370", Offset = "0x1123370", VA = "0x1123370")]
	public HellraiserGrowModel()
	{
	}
}
[Token(Token = "0x200007E")]
public class HellraiserPreAttack : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Animator animator;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SharedBool attacking;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private HellraiserChompy hc;

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x1123378", Offset = "0x1123378", VA = "0x1123378", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x1123410", Offset = "0x1123410", VA = "0x1123410", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x11234A8", Offset = "0x11234A8", VA = "0x11234A8")]
	public HellraiserPreAttack()
	{
	}
}
[Token(Token = "0x200007F")]
public class HellraiserReturnToNavMesh : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private NavMeshAgent agent;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 spot;

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x11234B0", Offset = "0x11234B0", VA = "0x11234B0", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x1123508", Offset = "0x1123508", VA = "0x1123508", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x112358C", Offset = "0x112358C", VA = "0x112358C", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x1123594", Offset = "0x1123594", VA = "0x1123594", Slot = "8")]
	public override void OnFixedUpdate()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x1123668", Offset = "0x1123668", VA = "0x1123668")]
	public HellraiserReturnToNavMesh()
	{
	}
}
[Token(Token = "0x2000080")]
public class HellraiserShrinkModel : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private HellraiserChompy hc;

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x1123670", Offset = "0x1123670", VA = "0x1123670", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x11236C8", Offset = "0x11236C8", VA = "0x11236C8", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x11236E0", Offset = "0x11236E0", VA = "0x11236E0")]
	public HellraiserShrinkModel()
	{
	}
}
[Token(Token = "0x2000081")]
public class HellraiserTeleportToPlayer : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SharedGameObject targetPlayer;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SharedVector3 TeleportSpot;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool teleported;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private HellraiserChompy hc;

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x11236E8", Offset = "0x11236E8", VA = "0x11236E8", Slot = "4")]
	public override void OnAwake()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x1123748", Offset = "0x1123748", VA = "0x1123748", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x1123834", Offset = "0x1123834", VA = "0x1123834", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x1123848", Offset = "0x1123848", VA = "0x1123848")]
	public HellraiserTeleportToPlayer()
	{
	}
}
[Token(Token = "0x2000082")]
[TaskDescription("Returns true if object is currently grabbed.")]
public class CheckIfGameobjectIsInHand : Conditional
{
	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedGameObject grabbableGameObject;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool success;

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x1123850", Offset = "0x1123850", VA = "0x1123850", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x1123980", Offset = "0x1123980", VA = "0x1123980", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x1123854", Offset = "0x1123854", VA = "0x1123854")]
	private void CheckIfLootHeld()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x1123994", Offset = "0x1123994", VA = "0x1123994")]
	public CheckIfGameobjectIsInHand()
	{
	}
}
[Token(Token = "0x2000083")]
[TaskDescription("Finds a loot currently being held an returns it as a Shared GameObject.")]
public class ChompyDetectHeldLoot : Conditional
{
	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private int maxCollisions;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float radius;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private LayerMask layerMask;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private SharedGameObject playerHeldLoot;

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x112399C", Offset = "0x112399C", VA = "0x112399C", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x1123C54", Offset = "0x1123C54", VA = "0x1123C54", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x11239A0", Offset = "0x11239A0", VA = "0x11239A0")]
	private void FindLoot()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x1123CF0", Offset = "0x1123CF0", VA = "0x1123CF0")]
	public ChompyDetectHeldLoot()
	{
	}
}
[Token(Token = "0x2000084")]
public class MinerChompy : MonoBehaviourPunCallbacks, IPoolable, IEventSystemHandler, IDamageable, IInRoomCallbacks, IPunInstantiateMagicCallback
{
	[Token(Token = "0x2000085")]
	[CompilerGenerated]
	private sealed class <_DiggingCoroutine>d__83 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MinerChompy <>4__this;

		[Token(Token = "0x1700004C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000354")]
			[Address(RVA = "0x1126A08", Offset = "0x1126A08", VA = "0x1126A08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700004D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000356")]
			[Address(RVA = "0x1126A50", Offset = "0x1126A50", VA = "0x1126A50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x1125688", Offset = "0x1125688", VA = "0x1125688")]
		[DebuggerHidden]
		public <_DiggingCoroutine>d__83(int <>1__state)
		{
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0x1126928", Offset = "0x1126928", VA = "0x1126928", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x112692C", Offset = "0x112692C", VA = "0x112692C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x1126A10", Offset = "0x1126A10", VA = "0x1126A10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000086")]
	[CompilerGenerated]
	private sealed class <_SmokeBreak>d__91 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MinerChompy <>4__this;

		[Token(Token = "0x1700004E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600035A")]
			[Address(RVA = "0x1126B98", Offset = "0x1126B98", VA = "0x1126B98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700004F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600035C")]
			[Address(RVA = "0x1126BE0", Offset = "0x1126BE0", VA = "0x1126BE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x1125D64", Offset = "0x1125D64", VA = "0x1125D64")]
		[DebuggerHidden]
		public <_SmokeBreak>d__91(int <>1__state)
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x1126AAC", Offset = "0x1126AAC", VA = "0x1126AAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x1126AB0", Offset = "0x1126AB0", VA = "0x1126AB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x1126BA0", Offset = "0x1126BA0", VA = "0x1126BA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000087")]
	[CompilerGenerated]
	private sealed class <_VacuumLoots>d__95 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MinerChompy <>4__this;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool far;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <time>5__2;

		[Token(Token = "0x17000050")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000360")]
			[Address(RVA = "0x11275E8", Offset = "0x11275E8", VA = "0x11275E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000051")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000362")]
			[Address(RVA = "0x1127630", Offset = "0x1127630", VA = "0x1127630", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x1125E20", Offset = "0x1125E20", VA = "0x1125E20")]
		[DebuggerHidden]
		public <_VacuumLoots>d__95(int <>1__state)
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x1126C3C", Offset = "0x1126C3C", VA = "0x1126C3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x1126C40", Offset = "0x1126C40", VA = "0x1126C40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x11275F0", Offset = "0x11275F0", VA = "0x11275F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DamageType takeDamageType;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float movementSpeed;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float lootFlySpeed;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float specialMoveTimeBetween;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float lootPullingFarRadius;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float lootPullingNearRadius;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int multipleLootVacuumThreshold;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform vacuumEndTransform;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject raycastOrigin;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject singleLootSphereCastPosition;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject moneyEffectPrefab;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject dizzyEffects;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject vacuumParticleEffect;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject sobParticleEffect;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioSource diggingLoopAudioSource;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private SkinnedMeshRenderer pickaxeRenderer;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AudioClip dizzyAudioClip;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private AudioClip lootVacuumingNearAudioClip;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private AudioClip lootVacuumingFarAudioClip;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private AudioClip playerWaveAudioClip;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private AudioClip smokePipeAudioClip;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private AudioClip diggingThrowInAirAudioClip;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private AudioClip eatLootClip;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private ParticleSystem smokePuffFX;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool vacuumingLoots;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool vacuumLootsCoroutineRunning;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	private bool currentlyDigging;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCB")]
	private bool btVariablesGetted;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<Loot> pullingLoots;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private RaycastHit[] results;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private LayerMask hitLayers;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private NavMeshAgent agent;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private CoroutineHandle diggingCoroutine;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float lastSpecialMoveTime;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private BehaviorTree behaviourTree;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Animator chompyAnimator;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private MinerChompyPickaxe chompyPickaxe;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Vector3 chompyAnimatorOriginalPosition;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private float lastTimeDizzy;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float dizzyCooldown;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private bool playerInExitElevator;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private SharedFloat lootPullingFarRadiusShared;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private SharedFloat lootPullingNearRadiusShared;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private SharedFloat movementSpeedShared;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private SharedFloat diggedAmountTimer;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private SharedVector3 raycastOffset;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private SharedInt foundLootsCount;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private SharedInt multipleLootVacuumThresholdShared;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private SharedGameObjectList foundLootsNearList;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private SharedGameObjectList foundLootsFarList;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private SharedGameObject followPlayerObjectShared;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float smokeBreakTimeMin;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private float smokeBreakTimeMax;

	[Token(Token = "0x40002F1")]
	private const string diggingAnimationBoolName = "Digging";

	[Token(Token = "0x40002F2")]
	private const string diggingFranticallyAnimationTriggerName = "DiggingFrantically";

	[Token(Token = "0x40002F3")]
	private const string diggingThowInAirAnimationTriggerName = "DiggingThrowInTheAir";

	[Token(Token = "0x40002F4")]
	private const string waveAtPlayerAnimationTriggerName = "WaveAtPlayer";

	[Token(Token = "0x40002F5")]
	private const string singleLootVacuumAnimationTriggerName = "SingleLootVacuum";

	[Token(Token = "0x40002F6")]
	private const string multipleLootVacuumAnimationTriggerName = "MultipleLootVacuum";

	[Token(Token = "0x40002F7")]
	private const string smokeBreakAnimationTriggerName = "Smoke";

	[Token(Token = "0x40002F8")]
	private const string dizzyAnimationTriggerName = "Dizzy";

	[Token(Token = "0x40002F9")]
	private const string playerInExitElevatorAnimationBoolName = "PlayerInExitElevator";

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[SerializeField]
	private float recieveLootCooldown;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float recieveLootTimer;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool canRecieveLoot;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float smokeBreakTimer;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private float nextSmokeBreak;

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x1123CF8", Offset = "0x1123CF8", VA = "0x1123CF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x1123E60", Offset = "0x1123E60", VA = "0x1123E60")]
	private void Start()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x1124944", Offset = "0x1124944", VA = "0x1124944", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x112496C", Offset = "0x112496C", VA = "0x112496C", Slot = "30")]
	public override void OnConnected()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x1124994", Offset = "0x1124994", VA = "0x1124994", Slot = "32")]
	public override void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x11249BC", Offset = "0x11249BC", VA = "0x11249BC", Slot = "58")]
	protected virtual void CheckIfMasterAndToggleAI()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x1124AE8", Offset = "0x1124AE8", VA = "0x1124AE8", Slot = "57")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x1124E60", Offset = "0x1124E60", VA = "0x1124E60", Slot = "54")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x1124E64", Offset = "0x1124E64", VA = "0x1124E64", Slot = "55")]
	public void Release()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x1123D20", Offset = "0x1123D20", VA = "0x1123D20")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x1123EE8", Offset = "0x1123EE8", VA = "0x1123EE8")]
	private void GetBehaviourTreeVariables()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x1124E68", Offset = "0x1124E68", VA = "0x1124E68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x1124D50", Offset = "0x1124D50", VA = "0x1124D50")]
	private void PlayerInExitElevator(bool inElevator)
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x112490C", Offset = "0x112490C", VA = "0x112490C")]
	private void DisableAI()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x1124A58", Offset = "0x1124A58", VA = "0x1124A58")]
	private void EnableAI()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x11254DC", Offset = "0x11254DC", VA = "0x11254DC")]
	private void StartDigging()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x1125614", Offset = "0x1125614", VA = "0x1125614")]
	[IteratorStateMachine(typeof(<_DiggingCoroutine>d__83))]
	private IEnumerator<float> _DiggingCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x11256B0", Offset = "0x11256B0", VA = "0x11256B0")]
	private void StopDigging()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x1125764", Offset = "0x1125764", VA = "0x1125764")]
	private void FoundPlayer()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x1125918", Offset = "0x1125918", VA = "0x1125918")]
	public void WaveAtPlayerEnd()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x1125980", Offset = "0x1125980", VA = "0x1125980")]
	public void ReleaseSmokePuff()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x112599C", Offset = "0x112599C", VA = "0x112599C")]
	public void ThrowInTheAirAnimationStarted()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x1125A40", Offset = "0x1125A40", VA = "0x1125A40")]
	private void FoundLoots()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x112535C", Offset = "0x112535C", VA = "0x112535C")]
	private void SmokeBreak()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x1125CF0", Offset = "0x1125CF0", VA = "0x1125CF0")]
	[IteratorStateMachine(typeof(<_SmokeBreak>d__91))]
	private IEnumerator<float> _SmokeBreak()
	{
		return null;
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x1125C24", Offset = "0x1125C24", VA = "0x1125C24")]
	private void StartVacuumingNear()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x1125B1C", Offset = "0x1125B1C", VA = "0x1125B1C")]
	private void StartVacuumingFar()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x1125E14", Offset = "0x1125E14", VA = "0x1125E14")]
	public void SetVacuumingLoots(bool vacuuming)
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x1125D8C", Offset = "0x1125D8C", VA = "0x1125D8C")]
	[IteratorStateMachine(typeof(<_VacuumLoots>d__95))]
	private IEnumerator<float> _VacuumLoots(bool far)
	{
		return null;
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x1125E48", Offset = "0x1125E48", VA = "0x1125E48")]
	private void DespawnLoot(Loot loot)
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x1126024", Offset = "0x1126024", VA = "0x1126024")]
	[PunRPC]
	private void SpawnMoneyEffect(int value)
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x11262C0", Offset = "0x11262C0", VA = "0x11262C0")]
	private void DoDizzyRoutine()
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x1126400", Offset = "0x1126400", VA = "0x1126400")]
	public void DizzyRoutineEnd()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x1126428", Offset = "0x1126428", VA = "0x1126428")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x11265C8", Offset = "0x11265C8", VA = "0x11265C8", Slot = "56")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x1126650", Offset = "0x1126650", VA = "0x1126650", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x1126714", Offset = "0x1126714", VA = "0x1126714")]
	private void InstantDespawn()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x11267B8", Offset = "0x11267B8", VA = "0x11267B8")]
	public void ToggleRecieveLoot(int status)
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x11267D8", Offset = "0x11267D8", VA = "0x11267D8")]
	public void TogglePickaxeRenderer(int status)
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x112681C", Offset = "0x112681C", VA = "0x112681C")]
	private void LootRecieved()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x1126824", Offset = "0x1126824", VA = "0x1126824")]
	public MinerChompy()
	{
	}
}
[Token(Token = "0x2000088")]
public class MinerChompyPickaxe : MonoBehaviour
{
	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem hitFX;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] hitClips;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform pickaxeTopPart;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float spherecastSize;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool digging;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LayerMask hitLayers;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 pickaxeTopPartLastPosition;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RaycastHit[] results;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float deformSpeed;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float deformRange;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float sphereCastDistance;

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x112768C", Offset = "0x112768C", VA = "0x112768C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x1125608", Offset = "0x1125608", VA = "0x1125608")]
	public void StartDigging()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x112575C", Offset = "0x112575C", VA = "0x112575C")]
	public void StopDigging()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x11276D4", Offset = "0x11276D4", VA = "0x11276D4")]
	private void RaycastToTerrain()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x1127998", Offset = "0x1127998", VA = "0x1127998")]
	private void EditTerrain(DiggingArea world, Vector3 point, float deformSpeed, float range)
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x1127BF0", Offset = "0x1127BF0", VA = "0x1127BF0")]
	public void PlayHitEffects(float speed)
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x1127CEC", Offset = "0x1127CEC", VA = "0x1127CEC")]
	public MinerChompyPickaxe()
	{
	}
}
[Token(Token = "0x2000089")]
public class HasPlayerTakenDamage : Conditional
{
	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool hasTakenDamage;

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x1127D80", Offset = "0x1127D80", VA = "0x1127D80", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x1127E10", Offset = "0x1127E10", VA = "0x1127E10", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x1127D9C", Offset = "0x1127D9C", VA = "0x1127D9C")]
	private void CheckPlayerHealth()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x1127E24", Offset = "0x1127E24", VA = "0x1127E24")]
	public HasPlayerTakenDamage()
	{
	}
}
[Token(Token = "0x200008A")]
public class NunCheckIfTorchLit : Conditional
{
	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedGameObject torchGO;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool reverse;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool isLit;

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x1127E2C", Offset = "0x1127E2C", VA = "0x1127E2C", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x1127F2C", Offset = "0x1127F2C", VA = "0x1127F2C", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x1127E48", Offset = "0x1127E48", VA = "0x1127E48")]
	private void LitCheck()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x1127F50", Offset = "0x1127F50", VA = "0x1127F50")]
	public NunCheckIfTorchLit()
	{
	}
}
[Token(Token = "0x200008B")]
public class NunCheckPlayerHealth : Conditional
{
	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool oneHeartLeft;

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x1127F58", Offset = "0x1127F58", VA = "0x1127F58", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x1127FE8", Offset = "0x1127FE8", VA = "0x1127FE8", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x1127F74", Offset = "0x1127F74", VA = "0x1127F74")]
	private void CheckPlayerHealth()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x1127FFC", Offset = "0x1127FFC", VA = "0x1127FFC")]
	public NunCheckPlayerHealth()
	{
	}
}
[Token(Token = "0x200008C")]
public class NunChompy : MonoBehaviourPun, IDamageable, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x200008D")]
	[CompilerGenerated]
	private sealed class <DespawnCoroutine>d__40 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NunChompy <>4__this;

		[Token(Token = "0x17000052")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000393")]
			[Address(RVA = "0x1214A14", Offset = "0x1214A14", VA = "0x1214A14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000053")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000395")]
			[Address(RVA = "0x1214A5C", Offset = "0x1214A5C", VA = "0x1214A5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x1214800", Offset = "0x1214800", VA = "0x1214800")]
		[DebuggerHidden]
		public <DespawnCoroutine>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x1214828", Offset = "0x1214828", VA = "0x1214828", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x121482C", Offset = "0x121482C", VA = "0x121482C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x1214A1C", Offset = "0x1214A1C", VA = "0x1214A1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200008E")]
	[CompilerGenerated]
	private sealed class <AppearanceCoroutine>d__43 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NunChompy <>4__this;

		[Token(Token = "0x17000054")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000399")]
			[Address(RVA = "0x1214D48", Offset = "0x1214D48", VA = "0x1214D48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000055")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600039B")]
			[Address(RVA = "0x1214D90", Offset = "0x1214D90", VA = "0x1214D90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x1214AB8", Offset = "0x1214AB8", VA = "0x1214AB8")]
		[DebuggerHidden]
		public <AppearanceCoroutine>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x1214AE0", Offset = "0x1214AE0", VA = "0x1214AE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x1214AE4", Offset = "0x1214AE4", VA = "0x1214AE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x1214D50", Offset = "0x1214D50", VA = "0x1214D50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PlayerAvatar _targetPlayer;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem spawnFX;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem spawnFXAndroid;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem despawnFX;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip ahaClip;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip bottleClip;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip spawnClip;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioClip despawnClip;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioClip kissClip;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioClip sadClip;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private GameObject healthPotionPrefab;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private SkinnedMeshRenderer fakePotionMR;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Transform potionSpawnPos;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private float sphereRadius;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	private LayerMask blockingLayers;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private MeshRenderer realPotionMR;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private HVRGrabbable potionGrabbable;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 _velocity;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 _targetPos;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool shouldFollowPlayer;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool shouldFacePlayer;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	private bool leaving;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCB")]
	private bool potionSpawned;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private bool invincible;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Rigidbody potionRB;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private GameObject spawnedPotion;

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x1128004", Offset = "0x1128004", VA = "0x1128004")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x112807C", Offset = "0x112807C", VA = "0x112807C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x11289C0", Offset = "0x11289C0", VA = "0x11289C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x1128A78", Offset = "0x1128A78", VA = "0x1128A78", Slot = "5")]
	public void Acquire()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x11289C4", Offset = "0x11289C4", VA = "0x11289C4")]
	private void Reset()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x1128A7C", Offset = "0x1128A7C", VA = "0x1128A7C", Slot = "6")]
	public void Release()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x1128A80", Offset = "0x1128A80", VA = "0x1128A80")]
	public void Spawn()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x1128BF0", Offset = "0x1128BF0", VA = "0x1128BF0")]
	public void SetPlayer(PlayerAvatar player)
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x1128C9C", Offset = "0x1128C9C", VA = "0x1128C9C")]
	public void SpawnPotion(bool alsoDrop)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x1128F40", Offset = "0x1128F40", VA = "0x1128F40")]
	private void LetGoOfPotion2(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x1129110", Offset = "0x1129110", VA = "0x1129110")]
	public void EnableBottleRenderer()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x1129158", Offset = "0x1129158", VA = "0x1129158")]
	[PunRPC]
	public void DespawnRPC()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x11291C0", Offset = "0x11291C0", VA = "0x11291C0")]
	[IteratorStateMachine(typeof(<DespawnCoroutine>d__40))]
	private IEnumerator<float> DespawnCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x1128B88", Offset = "0x1128B88", VA = "0x1128B88")]
	[PunRPC]
	private void SpawnRPC()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x11292A8", Offset = "0x11292A8", VA = "0x11292A8", Slot = "4")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x1129234", Offset = "0x1129234", VA = "0x1129234")]
	[IteratorStateMachine(typeof(<AppearanceCoroutine>d__43))]
	private IEnumerator<float> AppearanceCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x1129304", Offset = "0x1129304", VA = "0x1129304")]
	private Vector3 GetPlayerFrontPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x1129460", Offset = "0x1129460", VA = "0x1129460")]
	private Vector3 GetPlayerLeftPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x11295C8", Offset = "0x11295C8", VA = "0x11295C8")]
	private Vector3 GetPlayerRightPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x1128978", Offset = "0x1128978", VA = "0x1128978")]
	private Vector3 GetPlayerLookPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x1128380", Offset = "0x1128380", VA = "0x1128380")]
	private void FindTargetPosition()
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x1129728", Offset = "0x1129728", VA = "0x1129728")]
	public void KissSFX()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x112975C", Offset = "0x112975C", VA = "0x112975C")]
	public void SadSFX()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x1129790", Offset = "0x1129790", VA = "0x1129790")]
	public void AhaSFX()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x11297C4", Offset = "0x11297C4", VA = "0x11297C4")]
	public void DespawnSFX()
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x11297F8", Offset = "0x11297F8", VA = "0x11297F8")]
	public NunChompy()
	{
	}
}
[Token(Token = "0x200008F")]
public class NunChompyAnimationEventReciever : MonoBehaviour
{
	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private NunChompy nunChompy;

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x1214DEC", Offset = "0x1214DEC", VA = "0x1214DEC")]
	private void Start()
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x1214DF0", Offset = "0x1214DF0", VA = "0x1214DF0")]
	private void Update()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x1214DF4", Offset = "0x1214DF4", VA = "0x1214DF4")]
	public void SpawnPotion()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x1214E14", Offset = "0x1214E14", VA = "0x1214E14")]
	public void EnableBottleRenderer()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x1214E30", Offset = "0x1214E30", VA = "0x1214E30")]
	public void KissSFX()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x1214E4C", Offset = "0x1214E4C", VA = "0x1214E4C")]
	public void SadSFX()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x1214E68", Offset = "0x1214E68", VA = "0x1214E68")]
	public void AhaSFX()
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x1214E84", Offset = "0x1214E84", VA = "0x1214E84")]
	public void DespawnSFX()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x1214EA0", Offset = "0x1214EA0", VA = "0x1214EA0")]
	public NunChompyAnimationEventReciever()
	{
	}
}
[Token(Token = "0x2000090")]
public class NunChompyCompanion : MonoBehaviourPunCallbacks, IPoolable, IEventSystemHandler, IInRoomCallbacks, IPunInstantiateMagicCallback
{
	[Token(Token = "0x2000091")]
	[CompilerGenerated]
	private sealed class <_Despawn>d__44 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NunChompyCompanion <>4__this;

		[Token(Token = "0x17000056")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60003CA")]
			[Address(RVA = "0x1216C2C", Offset = "0x1216C2C", VA = "0x1216C2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000057")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003CC")]
			[Address(RVA = "0x1216C74", Offset = "0x1216C74", VA = "0x1216C74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x1215B08", Offset = "0x1215B08", VA = "0x1215B08")]
		[DebuggerHidden]
		public <_Despawn>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x1216A1C", Offset = "0x1216A1C", VA = "0x1216A1C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x1216A20", Offset = "0x1216A20", VA = "0x1216A20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x1216C34", Offset = "0x1216C34", VA = "0x1216C34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Potion Stuff")]
	private GameObject healthPotionPrefab;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SkinnedMeshRenderer fakePotionMR;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform potionSpawnPos;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool offerPotionOnCooldown;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float offerPotionCooldown;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float timer;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Header("Settings")]
	private float enemyFearDuration;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ParticleSystem spawnFX;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ParticleSystem spawnFXAndroid;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ParticleSystem despawnFX;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ParticleSystem torchLightFX;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioSource chompyAS;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioClip ahaClip;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioClip bottleClip;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AudioClip hallelujaClip;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AudioClip despawnClip;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private AudioClip kissClip;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private AudioClip sadClip;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private AudioClip eatLootClip;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private GameObject moneyEffectPrefab;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private BehaviorTree behaviorTree;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private NavMeshAgent agent;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Animator animator;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private new PhotonView photonView;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Rigidbody potionRB;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private GameObject spawnedPotion;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool potionSpawned;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private MeshRenderer realPotionMR;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private HVRGrabbable potionGrabbable;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int playerTotalDamageTaken;

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x1214EA8", Offset = "0x1214EA8", VA = "0x1214EA8", Slot = "54")]
	public void Acquire()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x1215004", Offset = "0x1215004", VA = "0x1215004", Slot = "55")]
	public void Release()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x1214F0C", Offset = "0x1214F0C", VA = "0x1214F0C")]
	private void Reset()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x1215008", Offset = "0x1215008", VA = "0x1215008")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x1215100", Offset = "0x1215100", VA = "0x1215100")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x121541C", Offset = "0x121541C", VA = "0x121541C")]
	private new void OnEnable()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x1215474", Offset = "0x1215474", VA = "0x1215474")]
	private new void OnDisable()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x1215528", Offset = "0x1215528", VA = "0x1215528")]
	private void Update()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x12155F0", Offset = "0x12155F0", VA = "0x12155F0")]
	private void CombatStarted()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x1215680", Offset = "0x1215680", VA = "0x1215680")]
	private void CombatEnded()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x121570C", Offset = "0x121570C", VA = "0x121570C")]
	private void LetGoOfPotion(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x1215954", Offset = "0x1215954", VA = "0x1215954")]
	public void SetPlayerDownStatus(bool isDown)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x12159FC", Offset = "0x12159FC", VA = "0x12159FC")]
	public void DropPotion()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x1215A0C", Offset = "0x1215A0C", VA = "0x1215A0C")]
	private void Despawn()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x1215A94", Offset = "0x1215A94", VA = "0x1215A94")]
	[IteratorStateMachine(typeof(<_Despawn>d__44))]
	private IEnumerator<float> _Despawn()
	{
		return null;
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x1215B30", Offset = "0x1215B30", VA = "0x1215B30")]
	public void SpawnPotion()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x1215DC4", Offset = "0x1215DC4", VA = "0x1215DC4")]
	public void EnableBottleRenderer()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x1215E0C", Offset = "0x1215E0C", VA = "0x1215E0C")]
	public void KissSFX()
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x1215E40", Offset = "0x1215E40", VA = "0x1215E40")]
	public void SadSFX()
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x1215E74", Offset = "0x1215E74", VA = "0x1215E74")]
	public void AhaSFX()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x1215EA8", Offset = "0x1215EA8", VA = "0x1215EA8")]
	public void DespawnSFX()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x1215EDC", Offset = "0x1215EDC", VA = "0x1215EDC")]
	private void TorchLightFX()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x1215F60", Offset = "0x1215F60", VA = "0x1215F60")]
	public void HallelujaFX()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x1215FA4", Offset = "0x1215FA4", VA = "0x1215FA4")]
	private int GetTotalDamageTaken()
	{
		return default(int);
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x12158C0", Offset = "0x12158C0", VA = "0x12158C0")]
	private void PutPotionOnCD()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x1216008", Offset = "0x1216008", VA = "0x1216008", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x12160CC", Offset = "0x12160CC", VA = "0x12160CC")]
	private void InstantDespawn()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x1216168", Offset = "0x1216168", VA = "0x1216168")]
	private void PlayerFound()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x12161D0", Offset = "0x12161D0", VA = "0x12161D0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x1216358", Offset = "0x1216358", VA = "0x1216358")]
	private void DespawnLoot(Loot loot)
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x1216524", Offset = "0x1216524", VA = "0x1216524")]
	[PunRPC]
	private void SpawnMoneyEffect(int value)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x12167C0", Offset = "0x12167C0", VA = "0x12167C0")]
	public bool HasFoundPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x1216884", Offset = "0x1216884", VA = "0x1216884", Slot = "56")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x1216A14", Offset = "0x1216A14", VA = "0x1216A14")]
	public NunChompyCompanion()
	{
	}
}
[Token(Token = "0x2000092")]
public class NunDetectTorch : Conditional
{
	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float radius;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private LayerMask layerMask;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private SharedGameObject result;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private int maxCollisions;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private bool torchShouldBeLit;

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x1216CD0", Offset = "0x1216CD0", VA = "0x1216CD0", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x1216F50", Offset = "0x1216F50", VA = "0x1216F50", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x1216CEC", Offset = "0x1216CEC", VA = "0x1216CEC")]
	private void TorchCheck()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x1216FEC", Offset = "0x1216FEC", VA = "0x1216FEC")]
	public NunDetectTorch()
	{
	}
}
[Token(Token = "0x2000093")]
public class NunResurrectPlayer : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x1216FF4", Offset = "0x1216FF4", VA = "0x1216FF4", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x121706C", Offset = "0x121706C", VA = "0x121706C", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x1217008", Offset = "0x1217008", VA = "0x1217008")]
	private void ResurrectPlayer()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x1217074", Offset = "0x1217074", VA = "0x1217074")]
	public NunResurrectPlayer()
	{
	}
}
[Token(Token = "0x2000094")]
public class NunScareEnemies : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedFloat enemyFearDuration;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private SharedFloat radius;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private LayerMask layerMask;

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0x121707C", Offset = "0x121707C", VA = "0x121707C", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x12172F4", Offset = "0x12172F4", VA = "0x12172F4", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x1217098", Offset = "0x1217098", VA = "0x1217098")]
	private void ScareEnemies()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x12172FC", Offset = "0x12172FC", VA = "0x12172FC")]
	public NunScareEnemies()
	{
	}
}
[Token(Token = "0x2000095")]
public class ToggleTorchFire : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedGameObject torchGO;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool isLit;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Torch torch;

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x1217304", Offset = "0x1217304", VA = "0x1217304", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x12173AC", Offset = "0x12173AC", VA = "0x12173AC", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x1217308", Offset = "0x1217308", VA = "0x1217308")]
	private void ToggleTorch()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x12173B4", Offset = "0x12173B4", VA = "0x12173B4")]
	public ToggleTorchFire()
	{
	}
}
[Token(Token = "0x2000096")]
[TaskDescription("Returns success if path to target is valid, otherwise returns failure.")]
public class CalculatePath : Conditional
{
	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedGameObject target;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool printLogs;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private NavMeshAgent agent;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private NavMeshPath path;

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x12173BC", Offset = "0x12173BC", VA = "0x12173BC", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x1217414", Offset = "0x1217414", VA = "0x1217414", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x1217430", Offset = "0x1217430", VA = "0x1217430")]
	private bool DoWeHavePath()
	{
		return default(bool);
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x121757C", Offset = "0x121757C", VA = "0x121757C")]
	private void Log(object message)
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x121762C", Offset = "0x121762C", VA = "0x121762C")]
	public CalculatePath()
	{
	}
}
[Token(Token = "0x2000097")]
public class GetRandomFromList : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedGameObjectList lootList;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private SharedGameObject result;

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x1217634", Offset = "0x1217634", VA = "0x1217634", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x1217724", Offset = "0x1217724", VA = "0x1217724")]
	public new BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x1217638", Offset = "0x1217638", VA = "0x1217638")]
	private void GetRandom()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x12177C0", Offset = "0x12177C0", VA = "0x12177C0")]
	public GetRandomFromList()
	{
	}
}
[Token(Token = "0x2000098")]
public class Molotov : MonoBehaviourPunCallbacks, IPoolable, IEventSystemHandler, IInRoomCallbacks
{
	[Token(Token = "0x2000099")]
	[CompilerGenerated]
	private sealed class <_DelayedDespawn>d__29 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Molotov <>4__this;

		[Token(Token = "0x17000058")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60003FA")]
			[Address(RVA = "0x1218264", Offset = "0x1218264", VA = "0x1218264", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000059")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003FC")]
			[Address(RVA = "0x12182AC", Offset = "0x12182AC", VA = "0x12182AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x1217ED4", Offset = "0x1217ED4", VA = "0x1217ED4")]
		[DebuggerHidden]
		public <_DelayedDespawn>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x1218164", Offset = "0x1218164", VA = "0x1218164", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x1218168", Offset = "0x1218168", VA = "0x1218168", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x121826C", Offset = "0x121826C", VA = "0x121826C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem ignitedEffect;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem blowUpParticleEffect;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem androidBlowUpParticleEffect;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioClip[] explosionAudioClips;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private MeshRenderer mr;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private MeshCollider mc;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float despawnDelay;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private LayerMask explodeOnCollisionWith;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DamageType damageType;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int damage;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Rigidbody rb;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private MolotovBlast molotovBlast;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float currentVelocity;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float gracePeriod;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float timer;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool exploded;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	private bool onGracePeriod;

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x12177C8", Offset = "0x12177C8", VA = "0x12177C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x1217858", Offset = "0x1217858", VA = "0x1217858")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x1217918", Offset = "0x1217918", VA = "0x1217918")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x121791C", Offset = "0x121791C", VA = "0x121791C")]
	private new void OnEnable()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x1217998", Offset = "0x1217998", VA = "0x1217998")]
	private new void OnDisable()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x12179F0", Offset = "0x12179F0", VA = "0x12179F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x1217D00", Offset = "0x1217D00", VA = "0x1217D00")]
	public Rigidbody GetRigidbody()
	{
		return null;
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x1217D08", Offset = "0x1217D08", VA = "0x1217D08", Slot = "54")]
	public void Acquire()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x1217D0C", Offset = "0x1217D0C", VA = "0x1217D0C")]
	private void Reset()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x1217E58", Offset = "0x1217E58", VA = "0x1217E58", Slot = "55")]
	public void Release()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x1217AE8", Offset = "0x1217AE8", VA = "0x1217AE8")]
	private void Explode()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x1217E60", Offset = "0x1217E60", VA = "0x1217E60")]
	[IteratorStateMachine(typeof(<_DelayedDespawn>d__29))]
	private IEnumerator<float> _DelayedDespawn()
	{
		return null;
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x1217EFC", Offset = "0x1217EFC", VA = "0x1217EFC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x1217F98", Offset = "0x1217F98", VA = "0x1217F98")]
	public void SetDamage(int value)
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x1217FA0", Offset = "0x1217FA0", VA = "0x1217FA0", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x12180A8", Offset = "0x12180A8", VA = "0x12180A8")]
	private void InstantDespawn()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x121814C", Offset = "0x121814C", VA = "0x121814C")]
	public Molotov()
	{
	}
}
[Token(Token = "0x200009A")]
[RequireComponent(typeof(Molotov))]
public class MolotovBlast : MonoBehaviour
{
	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LayerMask hitLayers;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	public float blastRadius;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Amount of force that will be applyed to surrounding objects")]
	[SerializeField]
	private float blastForce;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int damage;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Molotov molotovScript;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Collider[] _explosiveColliders;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Transform> _alreadyDamagedList;

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x1218308", Offset = "0x1218308", VA = "0x1218308")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x1217E5C", Offset = "0x1217E5C", VA = "0x1217E5C")]
	public void Explode()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x1218370", Offset = "0x1218370", VA = "0x1218370")]
	private void Blast()
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x1218C1C", Offset = "0x1218C1C", VA = "0x1218C1C")]
	private void EditTerrain(DiggingArea world, Vector3 point, float deformSpeed, float range)
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x1218E08", Offset = "0x1218E08", VA = "0x1218E08")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x1218BA8", Offset = "0x1218BA8", VA = "0x1218BA8")]
	private void ClearAlreadyDamagedList()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x1218E54", Offset = "0x1218E54", VA = "0x1218E54")]
	public void SetDamage(int value)
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x1218E5C", Offset = "0x1218E5C", VA = "0x1218E5C")]
	public MolotovBlast()
	{
	}
}
[Token(Token = "0x200009B")]
public class PunkChompy : MonoBehaviourPunCallbacks, IPoolable, IEventSystemHandler, IInRoomCallbacks, IPunInstantiateMagicCallback
{
	[Token(Token = "0x200009C")]
	[CompilerGenerated]
	private sealed class <CollectLootCoroutine>d__82 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PunkChompy <>4__this;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SharedGameObject <targetLoot>5__2;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody <lootRb>5__3;

		[Token(Token = "0x1700005A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000431")]
			[Address(RVA = "0x121B02C", Offset = "0x121B02C", VA = "0x121B02C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700005B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000433")]
			[Address(RVA = "0x121B074", Offset = "0x121B074", VA = "0x121B074", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x121A90C", Offset = "0x121A90C", VA = "0x121A90C")]
		[DebuggerHidden]
		public <CollectLootCoroutine>d__82(int <>1__state)
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x121ACD4", Offset = "0x121ACD4", VA = "0x121ACD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x121ACD8", Offset = "0x121ACD8", VA = "0x121ACD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x121B034", Offset = "0x121B034", VA = "0x121B034", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200009D")]
	[CompilerGenerated]
	private sealed class <DespawnCoroutine>d__86 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PunkChompy <>4__this;

		[Token(Token = "0x1700005C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000437")]
			[Address(RVA = "0x121B298", Offset = "0x121B298", VA = "0x121B298", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700005D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000439")]
			[Address(RVA = "0x121B2E0", Offset = "0x121B2E0", VA = "0x121B2E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x121AB44", Offset = "0x121AB44", VA = "0x121AB44")]
		[DebuggerHidden]
		public <DespawnCoroutine>d__86(int <>1__state)
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x121B0D0", Offset = "0x121B0D0", VA = "0x121B0D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x121B0D4", Offset = "0x121B0D4", VA = "0x121B0D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x121B2A0", Offset = "0x121B2A0", VA = "0x121B2A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("References")]
	private NavMeshAgent agent;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BehaviorTree tree;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator animator;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private new PhotonView photonView;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioSource chompyAS;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioClip blowOut;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip despawn;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip laugh;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip spawn;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioClip throwMolotov;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioClip grabLootClip;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioClip eatLootClip;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AudioClip wineDrinkingA;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AudioClip wineDrinkingB;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private AudioClip windeDrinkingC;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private AudioClip laughClip;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private AudioClip despawnClip;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private SkinnedMeshRenderer signSMR;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private SkinnedMeshRenderer molotovSMR;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private SkinnedMeshRenderer wineRenderer;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private GameObject GFX;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private GameObject molotovPrefab;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private Transform molotovSpawnPos;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private ParticleSystem winePassiveParticles;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private ParticleSystem wineActiveParticles;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private int totalBombs;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[SerializeField]
	private float molotovThrowUpwardsModifier;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float currentSpeed;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[SerializeField]
	[Header("Floating Settings")]
	private float floatingAmplitude;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private float levitateSpeed;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	[SerializeField]
	private float sleepingSpeed;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private float walkingSpeed;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[SerializeField]
	private float runningSpeed;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private int animationSpeedDivider;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private Transform LootTarget;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private Transform mouth;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private float lootEatDuration;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private bool active;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Vector3 tempPos;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private float levitateStartHeight;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private GameObject spawnedMolotov;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private GameObject target;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private int totalDrinks;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private bool pickingUpLoot;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Loot loot;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private bool flyLoot;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private int damage;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private bool onABreak;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
	private bool torchOnCD;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float torchCooldown;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private float torchTimer;

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x1218EF0", Offset = "0x1218EF0", VA = "0x1218EF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x1218EF4", Offset = "0x1218EF4", VA = "0x1218EF4")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x1218FEC", Offset = "0x1218FEC", VA = "0x1218FEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x1219468", Offset = "0x1219468", VA = "0x1219468")]
	private void Update()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x1219860", Offset = "0x1219860", VA = "0x1219860", Slot = "56")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x1219CF8", Offset = "0x1219CF8", VA = "0x1219CF8", Slot = "54")]
	public void Acquire()
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x1219AE8", Offset = "0x1219AE8", VA = "0x1219AE8")]
	private void Reset()
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x1219D40", Offset = "0x1219D40", VA = "0x1219D40", Slot = "55")]
	public void Release()
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x1219D44", Offset = "0x1219D44", VA = "0x1219D44")]
	public void OpenAndDrinkSFX()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0x1219DDC", Offset = "0x1219DDC", VA = "0x1219DDC")]
	public void BurpSFX()
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x1219E74", Offset = "0x1219E74", VA = "0x1219E74")]
	public void DrinkSFX()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0x1219F0C", Offset = "0x1219F0C", VA = "0x1219F0C")]
	public void GrabLootSFX()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x1219FA4", Offset = "0x1219FA4", VA = "0x1219FA4")]
	public void EatLootSFX()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x121A03C", Offset = "0x121A03C", VA = "0x121A03C")]
	public void ShowSignSFX()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x121A0D4", Offset = "0x121A0D4", VA = "0x121A0D4")]
	public void LaughSFX()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0x121A190", Offset = "0x121A190", VA = "0x121A190")]
	public void ToggleMolotovRenderer(int status)
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0x1219CFC", Offset = "0x1219CFC", VA = "0x1219CFC")]
	public void ToggleSignRenderer(int status)
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0x121A1D4", Offset = "0x121A1D4", VA = "0x121A1D4")]
	public void EnableBottleRenderer()
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0x121A1F4", Offset = "0x121A1F4", VA = "0x121A1F4")]
	public void SpawnMolotov()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x121A3EC", Offset = "0x121A3EC", VA = "0x121A3EC")]
	public void EnableWineRenderer()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0x121A420", Offset = "0x121A420", VA = "0x121A420")]
	public void DisableWineRenderer()
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x121A454", Offset = "0x121A454", VA = "0x121A454")]
	public void ToggleWindeDrinking(int shouldPlay)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x121A524", Offset = "0x121A524", VA = "0x121A524")]
	public void ThrowSFX()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0x121A5BC", Offset = "0x121A5BC", VA = "0x121A5BC")]
	public void BlowOutSFX()
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0x121974C", Offset = "0x121974C", VA = "0x121974C")]
	private void HandleMovementAnimations()
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0x12197B0", Offset = "0x12197B0", VA = "0x12197B0")]
	private void HandleFloating()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0x121A654", Offset = "0x121A654", VA = "0x121A654")]
	private void SetTarget()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0x121A71C", Offset = "0x121A71C", VA = "0x121A71C")]
	private void TakeABreak()
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0x121A728", Offset = "0x121A728", VA = "0x121A728")]
	private void ExtinguishedTorch()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0x121A738", Offset = "0x121A738", VA = "0x121A738")]
	private void TakeADrink()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x121A7FC", Offset = "0x121A7FC", VA = "0x121A7FC")]
	private void CollectLoot()
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x121A898", Offset = "0x121A898", VA = "0x121A898")]
	[IteratorStateMachine(typeof(<CollectLootCoroutine>d__82))]
	private IEnumerator<float> CollectLootCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x121A934", Offset = "0x121A934", VA = "0x121A934")]
	private void DespawnLoot(Loot loot)
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x121A9CC", Offset = "0x121A9CC", VA = "0x121A9CC")]
	private void Despawn()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x121AAA8", Offset = "0x121AAA8", VA = "0x121AAA8")]
	private void InstantDespawn()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x121AA34", Offset = "0x121AA34", VA = "0x121AA34")]
	[IteratorStateMachine(typeof(<DespawnCoroutine>d__86))]
	private IEnumerator<float> DespawnCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x12193E0", Offset = "0x12193E0", VA = "0x12193E0")]
	private void DetermineDamage()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x121AB6C", Offset = "0x121AB6C", VA = "0x121AB6C")]
	private void ActivateNavLinks()
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x121AB8C", Offset = "0x121AB8C", VA = "0x121AB8C", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x121AC50", Offset = "0x121AC50", VA = "0x121AC50")]
	private void PlayerFound()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x121ACB8", Offset = "0x121ACB8", VA = "0x121ACB8")]
	public PunkChompy()
	{
	}
}
[Token(Token = "0x200009E")]
public class PunkDetectTarget : Conditional
{
	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int maxCollisions;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float radius;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public LayerMask layerMask;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private SharedGameObject result;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<GameObject> foundColliders;

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x121B33C", Offset = "0x121B33C", VA = "0x121B33C", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x121B684", Offset = "0x121B684", VA = "0x121B684", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x121B340", Offset = "0x121B340", VA = "0x121B340")]
	private void FindDamageable()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x121B720", Offset = "0x121B720", VA = "0x121B720")]
	public PunkDetectTarget()
	{
	}
}
[Token(Token = "0x200009F")]
[TaskDescription("Returns a non kinematic, active loot, fails if no loot found. If set to sort by distance, gets nearest one, otherwise returns a random.")]
public class PunkLootDetect : Conditional
{
	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private int maxCollisions;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float radius;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private LayerMask layerMask;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool sortByDistance;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private SharedGameObject result;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<GameObject> foundColliders;

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x121B7A8", Offset = "0x121B7A8", VA = "0x121B7A8", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x121BCE8", Offset = "0x121BCE8", VA = "0x121BCE8", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x121B7AC", Offset = "0x121B7AC", VA = "0x121B7AC")]
	private void FindLoot()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x121BD84", Offset = "0x121BD84", VA = "0x121BD84")]
	public PunkLootDetect()
	{
	}
}
[Token(Token = "0x20000A0")]
public class PunkThrowMolotov : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x6000442")]
	[Address(RVA = "0x121BE0C", Offset = "0x121BE0C", VA = "0x121BE0C", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x121BE14", Offset = "0x121BE14", VA = "0x121BE14", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x121BE10", Offset = "0x121BE10", VA = "0x121BE10")]
	private void ThrowMolotov()
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x121BE1C", Offset = "0x121BE1C", VA = "0x121BE1C")]
	public PunkThrowMolotov()
	{
	}
}
[Token(Token = "0x20000A1")]
public class TeleportChompyToPlayer : Conditional
{
	[Token(Token = "0x20000A2")]
	[CompilerGenerated]
	private sealed class <TeleportCoroutine>d__9 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TeleportChompyToPlayer <>4__this;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 <destination>5__2;

		[Token(Token = "0x1700005E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600044F")]
			[Address(RVA = "0x121C2C4", Offset = "0x121C2C4", VA = "0x121C2C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700005F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000451")]
			[Address(RVA = "0x121C30C", Offset = "0x121C30C", VA = "0x121C30C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x121BF84", Offset = "0x121BF84", VA = "0x121BF84")]
		[DebuggerHidden]
		public <TeleportCoroutine>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x121C0E8", Offset = "0x121C0E8", VA = "0x121C0E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x121C0EC", Offset = "0x121C0EC", VA = "0x121C0EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x121C2CC", Offset = "0x121C2CC", VA = "0x121C2CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SharedGameObject player;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float howCloseToTeleport;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ChompyTeleportHandler handler;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool foundSpot;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool failed;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private bool teleporting;

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x121BE24", Offset = "0x121BE24", VA = "0x121BE24", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x121BF08", Offset = "0x121BF08", VA = "0x121BF08", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x121BE8C", Offset = "0x121BE8C", VA = "0x121BE8C")]
	private void Teleport()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x121BF10", Offset = "0x121BF10", VA = "0x121BF10")]
	[IteratorStateMachine(typeof(<TeleportCoroutine>d__9))]
	private IEnumerator<float> TeleportCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x121BFAC", Offset = "0x121BFAC", VA = "0x121BFAC")]
	private Vector3 GetTeleportSpot()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x121C0E0", Offset = "0x121C0E0", VA = "0x121C0E0")]
	public TeleportChompyToPlayer()
	{
	}
}
[Token(Token = "0x20000A3")]
public class ClamLootTrigger : MonoBehaviour
{
	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject loot;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GiantClam giantClam;

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x121C368", Offset = "0x121C368", VA = "0x121C368")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x121C458", Offset = "0x121C458", VA = "0x121C458")]
	public ClamLootTrigger()
	{
	}
}
[Token(Token = "0x20000A4")]
public class CollisionRedirector : MonoBehaviour
{
	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Enemy _thisEnemy;

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x121C460", Offset = "0x121C460", VA = "0x121C460")]
	private void Start()
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x121C4B8", Offset = "0x121C4B8", VA = "0x121C4B8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x121C554", Offset = "0x121C554", VA = "0x121C554")]
	public CollisionRedirector()
	{
	}
}
[Token(Token = "0x20000A5")]
public class ComicProp : Prop
{
	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	private int myComicID;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	[SerializeField]
	private bool manualID;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	private Sprite[] pages;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private int comicAmount;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private SpriteRenderer pageImage;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private bool grabbedAlready;

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x121C55C", Offset = "0x121C55C", VA = "0x121C55C", Slot = "23")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x121C634", Offset = "0x121C634", VA = "0x121C634", Slot = "20")]
	public override void onLooted()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x121C7BC", Offset = "0x121C7BC", VA = "0x121C7BC", Slot = "19")]
	protected override void onGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x121C888", Offset = "0x121C888", VA = "0x121C888")]
	private void UnlockComic()
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x121C5F4", Offset = "0x121C5F4", VA = "0x121C5F4")]
	private void UpdateSprite()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x121CA38", Offset = "0x121CA38", VA = "0x121CA38")]
	private void ComicVoiceline()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x121CAF8", Offset = "0x121CAF8", VA = "0x121CAF8")]
	public ComicProp()
	{
	}
}
[Token(Token = "0x20000A6")]
public class CommonCollision : MonoBehaviour, ICollisionDamageDealer
{
	[Token(Token = "0x20000A7")]
	[CompilerGenerated]
	private sealed class <ChangeDamageTypeToEnemyForTimeCoroutine>d__22 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CommonCollision <>4__this;

		[Token(Token = "0x17000060")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600046D")]
			[Address(RVA = "0x121DC20", Offset = "0x121DC20", VA = "0x121DC20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000061")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600046F")]
			[Address(RVA = "0x121DC68", Offset = "0x121DC68", VA = "0x121DC68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0x121DB0C", Offset = "0x121DB0C", VA = "0x121DB0C")]
		[DebuggerHidden]
		public <ChangeDamageTypeToEnemyForTimeCoroutine>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0x121DB54", Offset = "0x121DB54", VA = "0x121DB54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x121DB58", Offset = "0x121DB58", VA = "0x121DB58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x121DC28", Offset = "0x121DC28", VA = "0x121DC28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MaterialType materialType;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool selfDamage;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool ignoreRootChildren;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool playSelfClips;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public bool isGlove;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float damageCooldownTime;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PhotonView photonView;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private HVRGrabbable myHVRGrabbable;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody myRB;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float disableUntilTime;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private DamageType myDamageType;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int myOnHitDamage;

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x121CB58", Offset = "0x121CB58", VA = "0x121CB58")]
	private void Start()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x121CE5C", Offset = "0x121CE5C", VA = "0x121CE5C")]
	private void DisableForTime(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x121CE80", Offset = "0x121CE80", VA = "0x121CE80")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x121CF34", Offset = "0x121CF34", VA = "0x121CF34")]
	public void Toggle(bool status)
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x121CF74", Offset = "0x121CF74", VA = "0x121CF74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x121D000", Offset = "0x121D000", VA = "0x121D000")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x121D078", Offset = "0x121D078", VA = "0x121D078", Slot = "4")]
	protected virtual void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x121D900", Offset = "0x121D900", VA = "0x121D900")]
	public void PlaySelfClip(Vector3 position, float collisionImpactForce, float collisionVolume)
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x121D924", Offset = "0x121D924", VA = "0x121D924")]
	public void ChangeToEnemyDamage()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x121DA30", Offset = "0x121DA30", VA = "0x121DA30")]
	[PunRPC]
	private void ChangeToEnemyDamageRPC()
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x121DA98", Offset = "0x121DA98", VA = "0x121DA98")]
	[IteratorStateMachine(typeof(<ChangeDamageTypeToEnemyForTimeCoroutine>d__22))]
	private IEnumerator<float> ChangeDamageTypeToEnemyForTimeCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x121DB34", Offset = "0x121DB34", VA = "0x121DB34")]
	public CommonCollision()
	{
	}
}
[Token(Token = "0x20000A8")]
public class CoolerSpawner : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x20000A9")]
	[CompilerGenerated]
	private sealed class <DelayedSpawn>d__6 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CoolerSpawner <>4__this;

		[Token(Token = "0x17000062")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000479")]
			[Address(RVA = "0x121E330", Offset = "0x121E330", VA = "0x121E330", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000063")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600047B")]
			[Address(RVA = "0x121E378", Offset = "0x121E378", VA = "0x121E378", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x121E118", Offset = "0x121E118", VA = "0x121E118")]
		[DebuggerHidden]
		public <DelayedSpawn>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x121E148", Offset = "0x121E148", VA = "0x121E148", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x121E14C", Offset = "0x121E14C", VA = "0x121E14C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x121E338", Offset = "0x121E338", VA = "0x121E338", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject coolerPrefab;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool _hasSpawned;

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x121DCC4", Offset = "0x121DCC4", VA = "0x121DCC4", Slot = "35")]
	public override void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0x121DDC8", Offset = "0x121DDC8", VA = "0x121DDC8")]
	public void Start()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x121E010", Offset = "0x121E010", VA = "0x121E010")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x121DF88", Offset = "0x121DF88", VA = "0x121DF88")]
	private void SpawnCooler()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x121DD54", Offset = "0x121DD54", VA = "0x121DD54")]
	[IteratorStateMachine(typeof(<DelayedSpawn>d__6))]
	private IEnumerator<float> DelayedSpawn()
	{
		return null;
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x121E140", Offset = "0x121E140", VA = "0x121E140")]
	public CoolerSpawner()
	{
	}
}
[Token(Token = "0x20000AA")]
public class CosmeticController : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x20000AB")]
	public enum CosmeticType
	{
		[Token(Token = "0x4000429")]
		hat,
		[Token(Token = "0x400042A")]
		hair,
		[Token(Token = "0x400042B")]
		head,
		[Token(Token = "0x400042C")]
		body
	}

	[Token(Token = "0x20000AC")]
	[CompilerGenerated]
	private sealed class <_WaitAndLoadSelectedCosmeticType>d__73 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CosmeticType cosmeticType;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CosmeticController <>4__this;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int selectedIndex;

		[Token(Token = "0x17000068")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60004AC")]
			[Address(RVA = "0x1222950", Offset = "0x1222950", VA = "0x1222950", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000069")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004AE")]
			[Address(RVA = "0x1222998", Offset = "0x1222998", VA = "0x1222998", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x12207B0", Offset = "0x12207B0", VA = "0x12207B0")]
		[DebuggerHidden]
		public <_WaitAndLoadSelectedCosmeticType>d__73(int <>1__state)
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x12227C4", Offset = "0x12227C4", VA = "0x12227C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x12227C8", Offset = "0x12227C8", VA = "0x12227C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x1222958", Offset = "0x1222958", VA = "0x1222958", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000AD")]
	[CompilerGenerated]
	private sealed class <LoadCostumeAsync>d__79 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CosmeticController <>4__this;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CosmeticType cosmeticType;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int index;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<CustomAssetReferenceSO> assetList;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool synced;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AsyncOperationHandle<GameObject> <tempMeshOperationHandle>5__2;

		[Token(Token = "0x1700006A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004B2")]
			[Address(RVA = "0x12233B8", Offset = "0x12233B8", VA = "0x12233B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004B4")]
			[Address(RVA = "0x1223400", Offset = "0x1223400", VA = "0x1223400", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x12217A0", Offset = "0x12217A0", VA = "0x12217A0")]
		[DebuggerHidden]
		public <LoadCostumeAsync>d__79(int <>1__state)
		{
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x12229F4", Offset = "0x12229F4", VA = "0x12229F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x12229F8", Offset = "0x12229F8", VA = "0x12229F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x12233C0", Offset = "0x12233C0", VA = "0x12233C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000AE")]
	[CompilerGenerated]
	private sealed class <SwitchMeshAndMaterial>d__85 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CosmeticType cosmeticType;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CosmeticController <>4__this;

		[Token(Token = "0x1700006C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004B8")]
			[Address(RVA = "0x12234E4", Offset = "0x12234E4", VA = "0x12234E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004BA")]
			[Address(RVA = "0x122352C", Offset = "0x122352C", VA = "0x122352C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x1222230", Offset = "0x1222230", VA = "0x1222230")]
		[DebuggerHidden]
		public <SwitchMeshAndMaterial>d__85(int <>1__state)
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x1223408", Offset = "0x1223408", VA = "0x1223408", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x122340C", Offset = "0x122340C", VA = "0x122340C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x12234EC", Offset = "0x12234EC", VA = "0x12234EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000AF")]
	[CompilerGenerated]
	private sealed class <DelayedSync>d__90 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CosmeticController <>4__this;

		[Token(Token = "0x1700006E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004BE")]
			[Address(RVA = "0x122360C", Offset = "0x122360C", VA = "0x122360C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004C0")]
			[Address(RVA = "0x1223654", Offset = "0x1223654", VA = "0x1223654", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x1222348", Offset = "0x1222348", VA = "0x1222348")]
		[DebuggerHidden]
		public <DelayedSync>d__90(int <>1__state)
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x1223534", Offset = "0x1223534", VA = "0x1223534", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x1223538", Offset = "0x1223538", VA = "0x1223538", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x1223614", Offset = "0x1223614", VA = "0x1223614", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CosmeticController Instance;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform playerModel;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool showShadows;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject[] additionalChangeLayerObjects;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Header("Workers glove upgrades")]
	private GameObject workersGloveBase;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject workersGloveLvl1;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject workersGloveLvl2;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject workersGloveLvl3;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject workersGloveLvl4;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject workersGloveLvl5;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject workersGloveLvl6;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private SkinnedMeshRenderer genericBodyRef;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private SkinnedMeshRenderer genericHairRef;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private SkinnedMeshRenderer genericHatRef;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private SkinnedMeshRenderer genericHeadRef;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private List<CustomAssetReferenceSO> allBodyAddressableRefs;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private List<CustomAssetReferenceSO> allHairAddressableRefs;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private List<CustomAssetReferenceSO> allHatAddressableRefs;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private List<CustomAssetReferenceSO> allHeadAddressableRefs;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private List<CustomAssetReferenceSO> unlockedBodiesAddressableRefs;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<CustomAssetReferenceSO> unlockedHairAddressableRefs;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<CustomAssetReferenceSO> unlockedHatAddressableRefs;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<CustomAssetReferenceSO> unlockedHeadAddressableRefs;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Material workersGloveMaterial;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Dictionary<string, GameObject> headEyeIrises;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Dictionary<string, GameObject> headEyeLids;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private List<SkinnedMeshRenderer> hiddenRenderers;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public int currentHat;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public int currentHair;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public int currentHead;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public int currentBody;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool loadedHair;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	private bool loadedHead;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
	private bool loadedBody;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x103")]
	private bool loadedHat;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private bool initialized;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
	private bool populatedFields;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private PhotonView myPhotonView;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int avatarRenderlayer;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public UnityEvent OnCosmeticStoreUpdate;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static List<AsyncOperationHandle<GameObject>> bodyAssetReferences;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static List<AsyncOperationHandle<GameObject>> headAssetReferences;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static List<AsyncOperationHandle<GameObject>> hairAssetReferences;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static List<AsyncOperationHandle<GameObject>> hatAssetReferences;

	[Token(Token = "0x17000064")]
	public AsyncOperationHandle<GameObject> _currentBodyMeshOperationHandle
	{
		[Token(Token = "0x600047C")]
		[Address(RVA = "0x121E3D4", Offset = "0x121E3D4", VA = "0x121E3D4")]
		[CompilerGenerated]
		get
		{
			return default(AsyncOperationHandle<GameObject>);
		}
		[Token(Token = "0x600047D")]
		[Address(RVA = "0x121E3E0", Offset = "0x121E3E0", VA = "0x121E3E0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000065")]
	public AsyncOperationHandle<GameObject> _currentHairMeshOperationHandle
	{
		[Token(Token = "0x600047E")]
		[Address(RVA = "0x121E3F8", Offset = "0x121E3F8", VA = "0x121E3F8")]
		[CompilerGenerated]
		get
		{
			return default(AsyncOperationHandle<GameObject>);
		}
		[Token(Token = "0x600047F")]
		[Address(RVA = "0x121E404", Offset = "0x121E404", VA = "0x121E404")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000066")]
	public AsyncOperationHandle<GameObject> _currentHatMeshOperationHandle
	{
		[Token(Token = "0x6000480")]
		[Address(RVA = "0x121E41C", Offset = "0x121E41C", VA = "0x121E41C")]
		[CompilerGenerated]
		get
		{
			return default(AsyncOperationHandle<GameObject>);
		}
		[Token(Token = "0x6000481")]
		[Address(RVA = "0x121E428", Offset = "0x121E428", VA = "0x121E428")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000067")]
	public AsyncOperationHandle<GameObject> _currentHeadMeshOperationHandle
	{
		[Token(Token = "0x6000482")]
		[Address(RVA = "0x121E440", Offset = "0x121E440", VA = "0x121E440")]
		[CompilerGenerated]
		get
		{
			return default(AsyncOperationHandle<GameObject>);
		}
		[Token(Token = "0x6000483")]
		[Address(RVA = "0x121E44C", Offset = "0x121E44C", VA = "0x121E44C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x121E464", Offset = "0x121E464", VA = "0x121E464")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0x121E94C", Offset = "0x121E94C", VA = "0x121E94C")]
	public void Setup(bool local, bool claytonAvatar = false)
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0x121E810", Offset = "0x121E810", VA = "0x121E810")]
	private void DisableRenderers()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x121F9B8", Offset = "0x121F9B8", VA = "0x121F9B8")]
	private void SetupEyeLayers()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x121FC00", Offset = "0x121FC00", VA = "0x121FC00")]
	private void DataReady()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x121E5A4", Offset = "0x121E5A4", VA = "0x121E5A4")]
	private void PopulateFields()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x121FD40", Offset = "0x121FD40", VA = "0x121FD40")]
	private void SetRendererSettings(Transform child, bool addToHidden)
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x121FE54", Offset = "0x121FE54", VA = "0x121FE54")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x121F648", Offset = "0x121F648", VA = "0x121F648")]
	public void SetCosmeticHidingType(bool shadowsOnly)
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x121FF20", Offset = "0x121FF20", VA = "0x121FF20")]
	public void ScrollCosmetic(CosmeticType cosmeticType, bool next)
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x1220500", Offset = "0x1220500", VA = "0x1220500")]
	public void SyncCosmetic(CosmeticType cosmeticType, int selectedIndex)
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x12206A4", Offset = "0x12206A4", VA = "0x12206A4")]
	[PunRPC]
	public void SelectedCosmeticRPC(CosmeticType cosmeticType, int selectedIndex)
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x1220724", Offset = "0x1220724", VA = "0x1220724")]
	[IteratorStateMachine(typeof(<_WaitAndLoadSelectedCosmeticType>d__73))]
	private IEnumerator<float> _WaitAndLoadSelectedCosmeticType(CosmeticType cosmeticType, int selectedIndex)
	{
		return null;
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x122023C", Offset = "0x122023C", VA = "0x122023C")]
	private void SaveCosmetic(CosmeticType type, ref List<CustomAssetReferenceSO> array, ref int current)
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x12207D8", Offset = "0x12207D8", VA = "0x12207D8")]
	private void CheckIfEyeLidSupported(string headName)
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x1220110", Offset = "0x1220110", VA = "0x1220110")]
	private void ToggleCostumeInArray(bool next, CosmeticType cosmeticType, List<CustomAssetReferenceSO> array, int current, bool allowNone)
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x1220DC4", Offset = "0x1220DC4", VA = "0x1220DC4")]
	private bool AssetAlreadyLoaded(out AsyncOperationHandle<GameObject> asyncHandle, CustomAssetReferenceSO customAssetReference)
	{
		return default(bool);
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x12212D4", Offset = "0x12212D4", VA = "0x12212D4")]
	private int AssetLoadedCount(AsyncOperationHandle<GameObject> currentOperationHandle)
	{
		return default(int);
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x1220D14", Offset = "0x1220D14", VA = "0x1220D14")]
	[IteratorStateMachine(typeof(<LoadCostumeAsync>d__79))]
	private IEnumerator LoadCostumeAsync(List<CustomAssetReferenceSO> assetList, CosmeticType cosmeticType, int index, bool synced = false)
	{
		return null;
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x1220B1C", Offset = "0x1220B1C", VA = "0x1220B1C")]
	private void SetMeshAndMaterial(CosmeticType cosmeticType, SkinnedMeshRenderer skinnedMeshRenderer)
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x12217C8", Offset = "0x12217C8", VA = "0x12217C8")]
	private void ToggleSelectedInArray(ref List<CustomAssetReferenceSO> array, CosmeticType cosmeticType, bool allowNone, int selected)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x1221BB0", Offset = "0x1221BB0", VA = "0x1221BB0")]
	public void SelectByString(CosmeticType cosmeticType, string cosmeticName)
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x121EC78", Offset = "0x121EC78", VA = "0x121EC78")]
	public void RefreshUnlockedItems()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0x1221F84", Offset = "0x1221F84", VA = "0x1221F84")]
	private bool SelectByString(ref List<CustomAssetReferenceSO> array, CosmeticType cosmeticType, ref int current, string cosmeticName)
	{
		return default(bool);
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0x12221AC", Offset = "0x12221AC", VA = "0x12221AC")]
	[IteratorStateMachine(typeof(<SwitchMeshAndMaterial>d__85))]
	private IEnumerator SwitchMeshAndMaterial(CosmeticType cosmeticType, CustomAssetReferenceSO assetReference)
	{
		return null;
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x121F8CC", Offset = "0x121F8CC", VA = "0x121F8CC")]
	private void SetupWorkersGloveLayers()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x121F748", Offset = "0x121F748", VA = "0x121F748")]
	public void SetWorkersGloveLevel(int level)
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x1222258", Offset = "0x1222258", VA = "0x1222258")]
	public void ToggleWorkersGloveEmission(bool active)
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x12222C0", Offset = "0x12222C0", VA = "0x12222C0")]
	public void UpdateCosmeticStore()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x12222D4", Offset = "0x12222D4", VA = "0x12222D4")]
	[IteratorStateMachine(typeof(<DelayedSync>d__90))]
	private IEnumerator DelayedSync()
	{
		return null;
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x1222370", Offset = "0x1222370", VA = "0x1222370")]
	[PunRPC]
	private void RequestSyncRPC()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x1220368", Offset = "0x1220368", VA = "0x1220368")]
	public int FindFullListIndex(CosmeticType cosmeticType)
	{
		return default(int);
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x12223BC", Offset = "0x12223BC", VA = "0x12223BC")]
	private unsafe ref List<CustomAssetReferenceSO> GetFullList(CosmeticType cosmeticType)
	{
		return ref *(List<CustomAssetReferenceSO>*)null;
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x1222400", Offset = "0x1222400", VA = "0x1222400")]
	private unsafe ref List<CustomAssetReferenceSO> GetUnlockedList(CosmeticType cosmeticType)
	{
		return ref *(List<CustomAssetReferenceSO>*)null;
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x1222444", Offset = "0x1222444", VA = "0x1222444")]
	private int GetUnlockedIndex(CosmeticType cosmeticType)
	{
		return default(int);
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x1222490", Offset = "0x1222490", VA = "0x1222490")]
	public CosmeticController()
	{
	}
}
[Token(Token = "0x20000B0")]
public class CosmeticSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioClip pressedClip;

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0x122365C", Offset = "0x122365C", VA = "0x122365C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0x1223698", Offset = "0x1223698", VA = "0x1223698")]
	public void NextHat()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x1223800", Offset = "0x1223800", VA = "0x1223800")]
	public void NextHair()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0x1223874", Offset = "0x1223874", VA = "0x1223874")]
	public void NextHead()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x12238E8", Offset = "0x12238E8", VA = "0x12238E8")]
	public void NextBody()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x122395C", Offset = "0x122395C", VA = "0x122395C")]
	public void PrevHat()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x12239D0", Offset = "0x12239D0", VA = "0x12239D0")]
	public void PrevHair()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x1223A44", Offset = "0x1223A44", VA = "0x1223A44")]
	public void PrevHead()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x1223AB8", Offset = "0x1223AB8", VA = "0x1223AB8")]
	public void PrevBody()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x122370C", Offset = "0x122370C", VA = "0x122370C")]
	private void RandomVoiceChance()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x1223B2C", Offset = "0x1223B2C", VA = "0x1223B2C")]
	public CosmeticSwitcher()
	{
	}
}
[Token(Token = "0x20000B1")]
public class FlatLockPlayerMovementAndEnableMouse : MonoBehaviour, IInteractable
{
	[Token(Token = "0x20000B2")]
	[CompilerGenerated]
	private sealed class <_LerpRotations>d__13 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FlatLockPlayerMovementAndEnableMouse <>4__this;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <maxTime>5__2;

		[Token(Token = "0x17000070")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60004D6")]
			[Address(RVA = "0x1224174", Offset = "0x1224174", VA = "0x1224174", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000071")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004D8")]
			[Address(RVA = "0x12241BC", Offset = "0x12241BC", VA = "0x12241BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x1223F3C", Offset = "0x1223F3C", VA = "0x1223F3C")]
		[DebuggerHidden]
		public <_LerpRotations>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x1223F6C", Offset = "0x1223F6C", VA = "0x1223F6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x1223F70", Offset = "0x1223F70", VA = "0x1223F70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x122417C", Offset = "0x122417C", VA = "0x122417C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform playerUsePos;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LocalizedString interactionText;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LocalizedString stopInteractingText;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform TransformToLookAt;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float bodyRotationSpeed;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float duration;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion lookRotation;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool inUse;

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x1223B34", Offset = "0x1223B34", VA = "0x1223B34")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x1223B38", Offset = "0x1223B38", VA = "0x1223B38")]
	private void Update()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x1223B8C", Offset = "0x1223B8C", VA = "0x1223B8C", Slot = "4")]
	public void Interact()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x1223F0C", Offset = "0x1223F0C", VA = "0x1223F0C", Slot = "5")]
	public LocalizedString GetInteractionText()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x1223F34", Offset = "0x1223F34", VA = "0x1223F34", Slot = "6")]
	public GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x1223E98", Offset = "0x1223E98", VA = "0x1223E98")]
	[IteratorStateMachine(typeof(<_LerpRotations>d__13))]
	private IEnumerator<float> _LerpRotations()
	{
		return null;
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x1223F64", Offset = "0x1223F64", VA = "0x1223F64")]
	public FlatLockPlayerMovementAndEnableMouse()
	{
	}
}
[Token(Token = "0x20000B3")]
[CreateAssetMenu(fileName = "NewCosmeticStoreItem", menuName = "ScriptableObjects/CosmeticStoreItem", order = 3)]
public class BuyableCosmeticItemScriptableObject : OtherUpgradePathScriptableObject
{
	[Token(Token = "0x20000B4")]
	public enum CosmeticItem
	{
		[Token(Token = "0x4000450")]
		UnlockedByDefaultItem,
		[Token(Token = "0x4000451")]
		BearpunkSetMale,
		[Token(Token = "0x4000452")]
		BearpunkSetFemale,
		[Token(Token = "0x4000453")]
		FoxypunkSet,
		[Token(Token = "0x4000454")]
		CastawaySetMale,
		[Token(Token = "0x4000455")]
		CastawaySetFemale,
		[Token(Token = "0x4000456")]
		BeachcomberSet,
		[Token(Token = "0x4000457")]
		ScarletDamselSet,
		[Token(Token = "0x4000458")]
		DapperDandySet,
		[Token(Token = "0x4000459")]
		EvilKnutSet,
		[Token(Token = "0x400045A")]
		FortunatePhilSet,
		[Token(Token = "0x400045B")]
		FrontierRangerSet,
		[Token(Token = "0x400045C")]
		FrontierSentinelSet,
		[Token(Token = "0x400045D")]
		MTCConsultantSet,
		[Token(Token = "0x400045E")]
		HazmatSet,
		[Token(Token = "0x400045F")]
		MTCRNDSet,
		[Token(Token = "0x4000460")]
		AssassinsTweedSet,
		[Token(Token = "0x4000461")]
		SoundOfMindSet,
		[Token(Token = "0x4000462")]
		SkinnedLizardSet,
		[Token(Token = "0x4000463")]
		CoffinShakerSet,
		[Token(Token = "0x4000464")]
		WastelandOutriderSet,
		[Token(Token = "0x4000465")]
		WastelandSamuraiSet,
		[Token(Token = "0x4000466")]
		TheExorcistSet,
		[Token(Token = "0x4000467")]
		HoboChichSet,
		[Token(Token = "0x4000468")]
		DocMondaySet,
		[Token(Token = "0x4000469")]
		TheDeserterSet,
		[Token(Token = "0x400046A")]
		ClaytonsHat,
		[Token(Token = "0x400046B")]
		MeowwImACatHat,
		[Token(Token = "0x400046C")]
		ChompyFanHat,
		[Token(Token = "0x400046D")]
		OrdinaryGreenCap,
		[Token(Token = "0x400046E")]
		FunnyHat,
		[Token(Token = "0x400046F")]
		RoyalCrown,
		[Token(Token = "0x4000470")]
		MiningHelmet,
		[Token(Token = "0x4000471")]
		DoctorsMask,
		[Token(Token = "0x4000472")]
		TheEngineerHat,
		[Token(Token = "0x4000473")]
		SleepyAndHollowHat,
		[Token(Token = "0x4000474")]
		TheDiverHat,
		[Token(Token = "0x4000475")]
		TheMarksmanHat,
		[Token(Token = "0x4000476")]
		YerAWizardHat,
		[Token(Token = "0x4000477")]
		Furhat,
		[Token(Token = "0x4000478")]
		FurJacket,
		[Token(Token = "0x4000479")]
		LongHair,
		[Token(Token = "0x400047A")]
		ClaytonsPoncho,
		[Token(Token = "0x400047B")]
		HeadOfClayton,
		[Token(Token = "0x400047C")]
		ThriftyTopCoat,
		[Token(Token = "0x400047D")]
		TheHexed,
		[Token(Token = "0x400047E")]
		GunslingerMKIV,
		[Token(Token = "0x400047F")]
		BrainInACan,
		[Token(Token = "0x4000480")]
		UNKNOWNITEM,
		[Token(Token = "0x4000481")]
		ClaytonsHair,
		[Token(Token = "0x4000482")]
		SkeletonCrew,
		[Token(Token = "0x4000483")]
		MTCHealthAndSafety,
		[Token(Token = "0x4000484")]
		DugHardest,
		[Token(Token = "0x4000485")]
		CheekyClean,
		[Token(Token = "0x4000486")]
		MaxAfBrawn,
		[Token(Token = "0x4000487")]
		TheFarOutMan,
		[Token(Token = "0x4000488")]
		BigBrainTime,
		[Token(Token = "0x4000489")]
		TheHiddenMaster,
		[Token(Token = "0x400048A")]
		LilStitchy,
		[Token(Token = "0x400048B")]
		MillionDollarTshirt
	}

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CosmeticItem cosmeticItem;

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x1224218", Offset = "0x1224218", VA = "0x1224218")]
	public BuyableCosmeticItemScriptableObject()
	{
	}
}
[Token(Token = "0x20000B5")]
public class CosmeticUnlockEventListener : MonoBehaviour
{
	[Token(Token = "0x20000B6")]
	[CompilerGenerated]
	private sealed class <Start>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CosmeticUnlockEventListener <>4__this;

		[Token(Token = "0x17000072")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004E8")]
			[Address(RVA = "0x1225E50", Offset = "0x1225E50", VA = "0x1225E50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004EA")]
			[Address(RVA = "0x1225E98", Offset = "0x1225E98", VA = "0x1225E98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x1224294", Offset = "0x1224294", VA = "0x1224294")]
		[DebuggerHidden]
		public <Start>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x1225B04", Offset = "0x1225B04", VA = "0x1225B04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x1225B08", Offset = "0x1225B08", VA = "0x1225B08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x1225E58", Offset = "0x1225E58", VA = "0x1225E58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Space]
	[Header("Looting related cosmetic unlocks")]
	public LootCosmeticUnlock[] cosmeticsUnlockedByLooting;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Cosmetic unlocks for completing a run in a specific biome")]
	[Space]
	public BuyableCosmeticItemScriptableObject.CosmeticItem[] rewardsForB1Run;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BuyableCosmeticItemScriptableObject.CosmeticItem[] rewardsForB2Run;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public BuyableCosmeticItemScriptableObject.CosmeticItem[] rewardsForB3Run;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public BuyableCosmeticItemScriptableObject.CosmeticItem[] rewardsForB4Run;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Seasonal cosmetic unlocks")]
	[Space]
	public BuyableCosmeticItemScriptableObject.CosmeticItem[] halloweenRewards;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public BuyableCosmeticItemScriptableObject.CosmeticItem[] christmasRewards;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isHalloween;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool isChristmas;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Space]
	[Header("Miscellaneous unlocks")]
	public BuyableCosmeticItemScriptableObject.CosmeticItem[] miscRewards;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Space]
	[Header("Tools to consider for all tools unlocked rewards")]
	[SerializeField]
	private ToolUpgradePathScriptableObject[] tools;

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x1224220", Offset = "0x1224220", VA = "0x1224220")]
	[IteratorStateMachine(typeof(<Start>d__11))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x12242BC", Offset = "0x12242BC", VA = "0x12242BC")]
	private void CheckPlayerDeaths()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x12244B0", Offset = "0x12244B0", VA = "0x12244B0")]
	private void ToolUpgraded(Tool.ToolType toolType)
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x12244E0", Offset = "0x12244E0", VA = "0x12244E0")]
	private void HasMaxedTools()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x1224784", Offset = "0x1224784", VA = "0x1224784")]
	private void LootedSomething(Loot loot)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x1224978", Offset = "0x1224978", VA = "0x1224978")]
	private void ReturningToTop()
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x1224EE4", Offset = "0x1224EE4", VA = "0x1224EE4")]
	private void OnQuestFinished()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x1224420", Offset = "0x1224420", VA = "0x1224420")]
	private void TextPopup()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x1225004", Offset = "0x1225004", VA = "0x1225004")]
	private void GrantFestiveRewards()
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x12252C0", Offset = "0x12252C0", VA = "0x12252C0")]
	public void UnlockAllCosmetic()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x1225AFC", Offset = "0x1225AFC", VA = "0x1225AFC")]
	public CosmeticUnlockEventListener()
	{
	}
}
[Token(Token = "0x20000B7")]
[CreateAssetMenu(fileName = "CosmeticUnlockedByLooting", menuName = "ScriptableObjects/Cosmetic Loot Unlock Rule", order = 4)]
public class LootCosmeticUnlock : ScriptableObject
{
	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LootSpawnAndDespawnManager.LootType itemToLoot;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public BuyableCosmeticItemScriptableObject.CosmeticItem itemToUnlock;

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x1225EA0", Offset = "0x1225EA0", VA = "0x1225EA0")]
	public LootCosmeticUnlock()
	{
	}
}
[Token(Token = "0x20000B8")]
public class CrankPoster : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MeshRenderer graphics;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private new PhotonView photonView;

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x1225EA8", Offset = "0x1225EA8", VA = "0x1225EA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x1225F18", Offset = "0x1225F18", VA = "0x1225F18", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x1225FDC", Offset = "0x1225FDC", VA = "0x1225FDC")]
	private bool CheckIfHosting()
	{
		return default(bool);
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x12260B4", Offset = "0x12260B4", VA = "0x12260B4")]
	[PunRPC]
	private void ActivatePoster()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x12260D4", Offset = "0x12260D4", VA = "0x12260D4")]
	public CrankPoster()
	{
	}
}
[Token(Token = "0x20000B9")]
public class CrankSparks : MonoBehaviour
{
	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(10f, 300f)]
	[UnityEngine.Tooltip("How much to turn the wheel for there to be a spark")]
	[SerializeField]
	private float requiredTurnAmount;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem sparksParticleSystem;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RotatorObject rotatorObject;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastRotatorValue;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool goingDown;

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x12260DC", Offset = "0x12260DC", VA = "0x12260DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x1226134", Offset = "0x1226134", VA = "0x1226134")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x12262A4", Offset = "0x12262A4", VA = "0x12262A4")]
	private void SpawnSparks(float rotatorValue)
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x1226384", Offset = "0x1226384", VA = "0x1226384")]
	public CrankSparks()
	{
	}
}
[Token(Token = "0x20000BA")]
[ExecuteInEditMode]
[DisallowMultipleComponent]
public class GuidComponent : MonoBehaviour, ISerializationCallbackReceiver
{
	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Guid guid;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private byte[] serializedGuid;

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x122638C", Offset = "0x122638C", VA = "0x122638C")]
	public bool IsGuidAssigned()
	{
		return default(bool);
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x12263E0", Offset = "0x12263E0", VA = "0x12263E0")]
	private void CreateGuid()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x12265AC", Offset = "0x12265AC", VA = "0x12265AC", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x1226634", Offset = "0x1226634", VA = "0x1226634", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x1226678", Offset = "0x1226678", VA = "0x1226678")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x122667C", Offset = "0x122667C", VA = "0x122667C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x1226680", Offset = "0x1226680", VA = "0x1226680")]
	public Guid GetGuid()
	{
		return default(Guid);
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x122671C", Offset = "0x122671C", VA = "0x122671C")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x12267D0", Offset = "0x12267D0", VA = "0x12267D0")]
	public GuidComponent()
	{
	}
}
[Token(Token = "0x20000BB")]
public class GuidManager
{
	[Token(Token = "0x20000BC")]
	private struct GuidInfo
	{
		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject go;

		[Token(Token = "0x14000001")]
		public event Action<GameObject> OnAdd
		{
			[Token(Token = "0x6000507")]
			[Address(RVA = "0x1227104", Offset = "0x1227104", VA = "0x1227104")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000508")]
			[Address(RVA = "0x1227250", Offset = "0x1227250", VA = "0x1227250")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000002")]
		public event System.Action OnRemove
		{
			[Token(Token = "0x6000509")]
			[Address(RVA = "0x12271B4", Offset = "0x12271B4", VA = "0x12271B4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600050A")]
			[Address(RVA = "0x1227300", Offset = "0x1227300", VA = "0x1227300")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x1227078", Offset = "0x1227078", VA = "0x1227078")]
		public GuidInfo(GuidComponent comp)
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x12270C8", Offset = "0x12270C8", VA = "0x12270C8")]
		public void HandleAddCallback()
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x12270E8", Offset = "0x12270E8", VA = "0x12270E8")]
		public void HandleRemoveCallback()
		{
		}
	}

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GuidManager Instance;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<Guid, GuidInfo> guidToObjectMap;

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x1226514", Offset = "0x1226514", VA = "0x1226514")]
	public static bool Add(GuidComponent guidComponent)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x1226728", Offset = "0x1226728", VA = "0x1226728")]
	public static void Remove(Guid guid)
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x1226CD4", Offset = "0x1226CD4", VA = "0x1226CD4")]
	public static GameObject ResolveGuid(Guid guid, Action<GameObject> onAddCallback, System.Action onRemoveCallback)
	{
		return null;
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x1226F14", Offset = "0x1226F14", VA = "0x1226F14")]
	public static GameObject ResolveGuid(Guid guid, System.Action onDestroyCallback)
	{
		return null;
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x1226FC8", Offset = "0x1226FC8", VA = "0x1226FC8")]
	public static GameObject ResolveGuid(Guid guid)
	{
		return null;
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x1226828", Offset = "0x1226828", VA = "0x1226828")]
	private GuidManager()
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x12268B0", Offset = "0x12268B0", VA = "0x12268B0")]
	private bool InternalAdd(GuidComponent guidComponent)
	{
		return default(bool);
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x1226C0C", Offset = "0x1226C0C", VA = "0x1226C0C")]
	private void InternalRemove(Guid guid)
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x1226D94", Offset = "0x1226D94", VA = "0x1226D94")]
	private GameObject ResolveGuidInternal(Guid guid, Action<GameObject> onAddCallback, System.Action onRemoveCallback)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x20000BD")]
public class GuidReference : ISerializationCallbackReceiver
{
	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject cachedReference;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isCacheSet;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private byte[] serializedGuid;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Guid guid;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Action<GameObject> addDelegate;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private System.Action removeDelegate;

	[Token(Token = "0x17000074")]
	public GameObject gameObject
	{
		[Token(Token = "0x6000512")]
		[Address(RVA = "0x1227634", Offset = "0x1227634", VA = "0x1227634")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000513")]
		[Address(RVA = "0x122767C", Offset = "0x122767C", VA = "0x122767C")]
		private set
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action<GameObject> OnGuidAdded
	{
		[Token(Token = "0x600050E")]
		[Address(RVA = "0x122739C", Offset = "0x122739C", VA = "0x122739C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600050F")]
		[Address(RVA = "0x122744C", Offset = "0x122744C", VA = "0x122744C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event System.Action OnGuidRemoved
	{
		[Token(Token = "0x6000510")]
		[Address(RVA = "0x12274FC", Offset = "0x12274FC", VA = "0x12274FC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000511")]
		[Address(RVA = "0x1227598", Offset = "0x1227598", VA = "0x1227598")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0x1227680", Offset = "0x1227680", VA = "0x1227680")]
	public GuidReference()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0x1227820", Offset = "0x1227820", VA = "0x1227820")]
	public GuidReference(GuidComponent target)
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0x12279D8", Offset = "0x12279D8", VA = "0x12279D8")]
	private void GuidAdded(GameObject go)
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0x1227A1C", Offset = "0x1227A1C", VA = "0x1227A1C")]
	private void GuidRemoved()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0x1227A58", Offset = "0x1227A58", VA = "0x1227A58", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0x1227A80", Offset = "0x1227A80", VA = "0x1227A80", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}
}
[Token(Token = "0x20000BF")]
public class LoadScenes : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000C0")]
	public struct SceneInfo
	{
		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool shouldLoad;
	}

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<SceneInfo> scenes;

	[Token(Token = "0x6000520")]
	[Address(RVA = "0x1227C68", Offset = "0x1227C68", VA = "0x1227C68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0x1227E60", Offset = "0x1227E60", VA = "0x1227E60")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x1228054", Offset = "0x1228054", VA = "0x1228054")]
	public LoadScenes()
	{
	}
}
[Token(Token = "0x20000C1")]
public class TestCrossScene : MonoBehaviour
{
	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GuidReference crossSceneReference;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer cachedRenderer;

	[Token(Token = "0x6000523")]
	[Address(RVA = "0x12280DC", Offset = "0x12280DC", VA = "0x12280DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0x1228164", Offset = "0x1228164", VA = "0x1228164")]
	private void Update()
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0x1228318", Offset = "0x1228318", VA = "0x1228318")]
	private void ClearCache()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0x1228324", Offset = "0x1228324", VA = "0x1228324")]
	private void TestPerformance()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0x1228358", Offset = "0x1228358", VA = "0x1228358")]
	public TestCrossScene()
	{
	}
}
[Token(Token = "0x20000C2")]
[CreateAssetMenu(fileName = "CustomAssetReference", menuName = "ScriptableObjects/CustomAssetReference", order = 1)]
public class CustomAssetReferenceSO : ScriptableObject
{
	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public AssetReference assetReference;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string assetName;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BuyableCosmeticItemScriptableObject.CosmeticItem cosmeticItem;

	[Token(Token = "0x6000528")]
	[Address(RVA = "0x1222134", Offset = "0x1222134", VA = "0x1222134")]
	public bool IsUnlockedByDefault()
	{
		return default(bool);
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0x1222144", Offset = "0x1222144", VA = "0x1222144")]
	public string GetNameAsString()
	{
		return null;
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0x12283C8", Offset = "0x12283C8", VA = "0x12283C8")]
	public CustomAssetReferenceSO()
	{
	}
}
[Token(Token = "0x20000C3")]
[RequireComponent(typeof(HVRHandAnimator))]
public class CustomHVRFingerCurlSyncing : MonoBehaviour, IPunObservable
{
	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HVRHandAnimator handAnimator;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private byte[] tempValuesToSend;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private byte[] tempValuesToReceive;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float[] tempValuesToReceiveFloat;

	[Token(Token = "0x600052B")]
	[Address(RVA = "0x12283D0", Offset = "0x12283D0", VA = "0x12283D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0x1228438", Offset = "0x1228438", VA = "0x1228438", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0x1228628", Offset = "0x1228628", VA = "0x1228628")]
	public CustomHVRFingerCurlSyncing()
	{
	}
}
[Token(Token = "0x20000C4")]
[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(HingeJoint))]
public class CustomLockedDoor : MonoBehaviour
{
	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HingeJoint _hinge;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MinAngle;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float MaxAngle;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool LockOnStart;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 originalLocalPosition;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool locked;

	[Token(Token = "0x600052E")]
	[Address(RVA = "0x12286E0", Offset = "0x12286E0", VA = "0x12286E0")]
	private void Start()
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0x122883C", Offset = "0x122883C", VA = "0x122883C")]
	public void Lock()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0x1228B10", Offset = "0x1228B10", VA = "0x1228B10")]
	public void Unlock()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x1228CB8", Offset = "0x1228CB8", VA = "0x1228CB8")]
	public bool IsLocked()
	{
		return default(bool);
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x1228CC0", Offset = "0x1228CC0", VA = "0x1228CC0")]
	public CustomLockedDoor()
	{
	}
}
[Token(Token = "0x20000C5")]
public class CustomVoicelineTrigger : MonoBehaviour
{
	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private VoiceLinesScriptable.Preset lineType;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool requiresATool;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Tool.ToolType requiredToolType;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ShovelSpade shovelSpade;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool triggered;

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x1228D24", Offset = "0x1228D24", VA = "0x1228D24")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x122900C", Offset = "0x122900C", VA = "0x122900C")]
	public CustomVoicelineTrigger()
	{
	}
}
[Token(Token = "0x20000C6")]
public class DefaultSpawnPositionController : MonoBehaviour
{
	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform player1DefaultSpawnPosition;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform player2DefaultSpawnPosition;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform player3DefaultSpawnPosition;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform player4DefaultSpawnPosition;

	[Token(Token = "0x6000535")]
	[Address(RVA = "0x1229014", Offset = "0x1229014", VA = "0x1229014")]
	public Transform GetDefaultSpawnTransform()
	{
		return null;
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0x1229114", Offset = "0x1229114", VA = "0x1229114")]
	public DefaultSpawnPositionController()
	{
	}
}
[Token(Token = "0x20000C7")]
public class DisableChildrenWhenPlayerIsInCave : MonoBehaviour
{
	[Token(Token = "0x20000C8")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DisableChildrenWhenPlayerIsInCave <>4__this;

		[Token(Token = "0x17000075")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000543")]
			[Address(RVA = "0x1229BBC", Offset = "0x1229BBC", VA = "0x1229BBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000545")]
			[Address(RVA = "0x1229C04", Offset = "0x1229C04", VA = "0x1229C04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x1229310", Offset = "0x1229310", VA = "0x1229310")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x1229920", Offset = "0x1229920", VA = "0x1229920", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x1229924", Offset = "0x1229924", VA = "0x1229924", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x1229BC4", Offset = "0x1229BC4", VA = "0x1229BC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool alsoDisableNavMesh;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NavMeshSurface _navMesh;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer[] _renderers;

	[Token(Token = "0x6000537")]
	[Address(RVA = "0x122911C", Offset = "0x122911C", VA = "0x122911C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0x122929C", Offset = "0x122929C", VA = "0x122929C")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x1229338", Offset = "0x1229338", VA = "0x1229338")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0x122948C", Offset = "0x122948C", VA = "0x122948C")]
	private void LevelChanged(int level)
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0x1229498", Offset = "0x1229498", VA = "0x1229498")]
	public void SetChildrenActive(bool status)
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0x1229838", Offset = "0x1229838", VA = "0x1229838")]
	public void SetRenderersActive(bool status)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0x1229908", Offset = "0x1229908", VA = "0x1229908")]
	public DisableChildrenWhenPlayerIsInCave()
	{
	}
}
[Token(Token = "0x20000C9")]
public class DisableGameobjectIfPlatform : MonoBehaviour
{
	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool disableIfAndroid;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool disableIfPC;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool disableIfPS4;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool disableIfPS5;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool disableIfPico;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool disableIfReleaseBuild;

	[Token(Token = "0x6000546")]
	[Address(RVA = "0x1229C0C", Offset = "0x1229C0C", VA = "0x1229C0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0x1229CBC", Offset = "0x1229CBC", VA = "0x1229CBC")]
	public DisableGameobjectIfPlatform()
	{
	}
}
[Token(Token = "0x20000CA")]
public class DisableGITrigger : MonoBehaviour
{
	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject giObject;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool enable;

	[Token(Token = "0x6000548")]
	[Address(RVA = "0x1229CC4", Offset = "0x1229CC4", VA = "0x1229CC4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0x1229CE8", Offset = "0x1229CE8", VA = "0x1229CE8")]
	public DisableGITrigger()
	{
	}
}
[Token(Token = "0x20000CB")]
public class DOTSCombineMeshes : MonoBehaviour
{
	[Token(Token = "0x20000CC")]
	[BurstCompile]
	private struct ProcessMeshDataJob : IJobParallelFor
	{
		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Unity.Collections.ReadOnly]
		public Mesh.MeshDataArray meshData;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh.MeshData outputMesh;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Unity.Collections.ReadOnly]
		public NativeArray<int> vertexStart;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Unity.Collections.ReadOnly]
		public NativeArray<int> indexStart;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Unity.Collections.ReadOnly]
		public NativeArray<float4x4> xform;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public NativeArray<float3x2> bounds;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[NativeDisableContainerSafetyRestriction]
		private NativeArray<float3> tempVertices;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[NativeDisableContainerSafetyRestriction]
		private NativeArray<float3> tempNormals;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[NativeDisableContainerSafetyRestriction]
		private NativeArray<Color32> tempColors;

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x1229E1C", Offset = "0x1229E1C", VA = "0x1229E1C")]
		public void CreateInputArrays(int meshCount)
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x1229F30", Offset = "0x1229F30", VA = "0x1229F30", Slot = "4")]
		public void Execute(int index)
		{
		}
	}

	[Token(Token = "0x20000CD")]
	private struct VertexKeyJobified : IEquatable<VertexKeyJobified>
	{
		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly long _x;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly long _y;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly long _z;

		[Token(Token = "0x40004ED")]
		private const int Tolerance = 100000;

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x1310B78", Offset = "0x1310B78", VA = "0x1310B78")]
		public VertexKeyJobified(float3 position)
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x1310E04", Offset = "0x1310E04", VA = "0x1310E04", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x1310E48", Offset = "0x1310E48", VA = "0x1310E48", Slot = "4")]
		public bool Equals(VertexKeyJobified other)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20000CE")]
	private struct VertexEntryJobified
	{
		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FixedList128Bytes<int> TriangleIndex;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FixedList128Bytes<int> VertexIndex;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private int _count;

		[Token(Token = "0x17000077")]
		public int Count
		{
			[Token(Token = "0x6000552")]
			[Address(RVA = "0x1310E84", Offset = "0x1310E84", VA = "0x1310E84")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x1310E8C", Offset = "0x1310E8C", VA = "0x1310E8C")]
		public void Add(int vertIndex, int triIndex)
		{
		}
	}

	[Token(Token = "0x20000CF")]
	[CompilerGenerated]
	private sealed class <CreateMesh_MeshDataApi>d__0 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Mesh> inputMeshes;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<float4x4> matrixes;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Mesh combinedMesh;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<Mesh> meshCallback;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProcessMeshDataJob <jobs>5__2;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int <meshCount>5__3;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Mesh.MeshDataArray <outputMeshData>5__4;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private JobHandle <handle>5__5;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SubMeshDescriptor <sm>5__6;

		[Token(Token = "0x17000078")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000557")]
			[Address(RVA = "0x13119A4", Offset = "0x13119A4", VA = "0x13119A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000079")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000559")]
			[Address(RVA = "0x13119EC", Offset = "0x13119EC", VA = "0x13119EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x1310F04", Offset = "0x1310F04", VA = "0x1310F04")]
		[DebuggerHidden]
		public <CreateMesh_MeshDataApi>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x1310F2C", Offset = "0x1310F2C", VA = "0x1310F2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x1310F30", Offset = "0x1310F30", VA = "0x1310F30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x13119AC", Offset = "0x13119AC", VA = "0x13119AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0x1229CF0", Offset = "0x1229CF0", VA = "0x1229CF0")]
	[IteratorStateMachine(typeof(<CreateMesh_MeshDataApi>d__0))]
	public static IEnumerator<float> CreateMesh_MeshDataApi(List<Mesh> inputMeshes, List<float4x4> matrixes, Action<Mesh> meshCallback, Mesh combinedMesh)
	{
		return null;
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0x1229DB0", Offset = "0x1229DB0", VA = "0x1229DB0")]
	private static float magnitude(float3 value)
	{
		return default(float);
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0x1229E14", Offset = "0x1229E14", VA = "0x1229E14")]
	public DOTSCombineMeshes()
	{
	}
}
[Token(Token = "0x20000D0")]
[ExecuteInEditMode]
public class EditorFogHelper : MonoBehaviour
{
	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fogStart;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fogEnd;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture cubemap;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material skyboxMat;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool updateInPlayMode;

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x1311A48", Offset = "0x1311A48", VA = "0x1311A48")]
	private void Update()
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0x1311B88", Offset = "0x1311B88", VA = "0x1311B88")]
	public EditorFogHelper()
	{
	}
}
[Token(Token = "0x20000D1")]
[RequireComponent(typeof(Light))]
public class BlinkLight : MonoBehaviour
{
	[Token(Token = "0x20000D2")]
	[CompilerGenerated]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlinkLight <>4__this;

		[Token(Token = "0x1700007A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000569")]
			[Address(RVA = "0x1312508", Offset = "0x1312508", VA = "0x1312508", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600056B")]
			[Address(RVA = "0x1312550", Offset = "0x1312550", VA = "0x1312550", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x1311CA8", Offset = "0x1311CA8", VA = "0x1311CA8")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x1312380", Offset = "0x1312380", VA = "0x1312380", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x1312384", Offset = "0x1312384", VA = "0x1312384", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x1312510", Offset = "0x1312510", VA = "0x1312510", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D3")]
	[CompilerGenerated]
	private sealed class <_BlinkLight>d__11 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BlinkLight <>4__this;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Color fromColor;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Color toColor;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float duration;

		[Token(Token = "0x1700007C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600056F")]
			[Address(RVA = "0x1312648", Offset = "0x1312648", VA = "0x1312648", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700007D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000571")]
			[Address(RVA = "0x1312690", Offset = "0x1312690", VA = "0x1312690", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x1312328", Offset = "0x1312328", VA = "0x1312328")]
		[DebuggerHidden]
		public <_BlinkLight>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x1312558", Offset = "0x1312558", VA = "0x1312558", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x131255C", Offset = "0x131255C", VA = "0x131255C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x1312650", Offset = "0x1312650", VA = "0x1312650", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D4")]
	[CompilerGenerated]
	private sealed class <Ding>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BlinkLight <>4__this;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x1700007E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000575")]
			[Address(RVA = "0x1312804", Offset = "0x1312804", VA = "0x1312804", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700007F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000577")]
			[Address(RVA = "0x131284C", Offset = "0x131284C", VA = "0x131284C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x1312350", Offset = "0x1312350", VA = "0x1312350")]
		[DebuggerHidden]
		public <Ding>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x13126EC", Offset = "0x13126EC", VA = "0x13126EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x13126F0", Offset = "0x13126F0", VA = "0x13126F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x131280C", Offset = "0x131280C", VA = "0x131280C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Color originalColor;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Light myLight;

	[Token(Token = "0x4000503")]
	private const string lightBlinkCoroutineName = "LightBlinkCoroutine";

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip elevatorDing;

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x1311B9C", Offset = "0x1311B9C", VA = "0x1311B9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x1311C34", Offset = "0x1311C34", VA = "0x1311C34")]
	[IteratorStateMachine(typeof(<Start>d__5))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x1311CD0", Offset = "0x1311CD0", VA = "0x1311CD0")]
	private void LevelChanged(int level)
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x1311CF4", Offset = "0x1311CF4", VA = "0x1311CF4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x1311E48", Offset = "0x1311E48", VA = "0x1311E48")]
	public void StartLightBlink(UnityEngine.Color fromColor, UnityEngine.Color toColor, float blinkDuration)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x131210C", Offset = "0x131210C", VA = "0x131210C")]
	public void StartLightBlink(UnityEngine.Color toColor, float blinkDuration)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x1312254", Offset = "0x1312254", VA = "0x1312254")]
	public void StopLightBlink(bool resetToOriginal = true)
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x1311FB0", Offset = "0x1311FB0", VA = "0x1311FB0")]
	[IteratorStateMachine(typeof(<_BlinkLight>d__11))]
	private IEnumerator<float> _BlinkLight(UnityEngine.Color fromColor, UnityEngine.Color toColor, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x1312088", Offset = "0x1312088", VA = "0x1312088")]
	[IteratorStateMachine(typeof(<Ding>d__12))]
	private IEnumerator<float> Ding(float duration)
	{
		return null;
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0x1312378", Offset = "0x1312378", VA = "0x1312378")]
	public BlinkLight()
	{
	}
}
[Token(Token = "0x20000D5")]
[RequireComponent(typeof(ElevatorMoving))]
public class Elevator : MonoBehaviourPun
{
	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform toolMoveSpot;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private BlinkLight blinkElevatorLight;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public ElevatorMoving elevatorMoving;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Tool[] allTools;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool lightBlinking;

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x13128A8", Offset = "0x13128A8", VA = "0x13128A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x1312AA0", Offset = "0x1312AA0", VA = "0x1312AA0")]
	public void ElevatorStartedMoving()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x1312B7C", Offset = "0x1312B7C", VA = "0x1312B7C")]
	[PunRPC]
	private void ElevatorStartedMovingRPC()
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x1312BB8", Offset = "0x1312BB8", VA = "0x1312BB8")]
	private void MoveTool(GameObject toolToMove)
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x1312C6C", Offset = "0x1312C6C", VA = "0x1312C6C")]
	public void StopLightBlink()
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x1312D48", Offset = "0x1312D48", VA = "0x1312D48")]
	[PunRPC]
	private void StopLightBlinkRPC()
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x1312D70", Offset = "0x1312D70", VA = "0x1312D70")]
	public Elevator()
	{
	}
}
[Token(Token = "0x20000D6")]
public class ElevatorFloorLightActive : MonoBehaviour
{
	[Token(Token = "0x20000D7")]
	[CompilerGenerated]
	private sealed class <Start>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ElevatorFloorLightActive <>4__this;

		[Token(Token = "0x17000081")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000590")]
			[Address(RVA = "0x1313B80", Offset = "0x1313B80", VA = "0x1313B80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000592")]
			[Address(RVA = "0x1313BC8", Offset = "0x1313BC8", VA = "0x1313BC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x1312E6C", Offset = "0x1312E6C", VA = "0x1312E6C")]
		[DebuggerHidden]
		public <Start>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x13137FC", Offset = "0x13137FC", VA = "0x13137FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x1313800", Offset = "0x1313800", VA = "0x1313800", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x1313B88", Offset = "0x1313B88", VA = "0x1313B88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ElevatorMoving elevatorMoving;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject levelLight;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentLevel;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int myFloor;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 levelLightOriginalPosition;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform DepthTracker;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform DepthTrackerMax;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform DepthTracker1;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform DepthTracker2;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform DepthTrackerMin;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private ElevatorUpDownCanvas UpDownCanvas;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject F0Block;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject F1Block;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private GameObject F2Block;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private GameObject F3Block;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private RotatorObject rotatorObject;

	[Token(Token = "0x17000080")]
	private Transform DepthTrackerTarget
	{
		[Token(Token = "0x600057F")]
		[Address(RVA = "0x1312D78", Offset = "0x1312D78", VA = "0x1312D78")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x1312DC0", Offset = "0x1312DC0", VA = "0x1312DC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x1312DF8", Offset = "0x1312DF8", VA = "0x1312DF8")]
	[IteratorStateMachine(typeof(<Start>d__19))]
	public IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x1312E94", Offset = "0x1312E94", VA = "0x1312E94")]
	public void OnRotatorReset()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x1313080", Offset = "0x1313080", VA = "0x1313080")]
	private void BlockOffInvalidLevels()
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x1313114", Offset = "0x1313114", VA = "0x1313114")]
	private void BlockAllLevels()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x1312F0C", Offset = "0x1312F0C", VA = "0x1312F0C")]
	private void UpdateDepthIndicator(float rotatorValue)
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x1313174", Offset = "0x1313174", VA = "0x1313174")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0x1313288", Offset = "0x1313288", VA = "0x1313288")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0x13135B0", Offset = "0x13135B0", VA = "0x13135B0")]
	private void LevelChanged(int newLevel)
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x13135C4", Offset = "0x13135C4", VA = "0x13135C4")]
	private void LevelLightOn()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0x1313710", Offset = "0x1313710", VA = "0x1313710")]
	private void CheckCurrentLevel()
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x1313630", Offset = "0x1313630", VA = "0x1313630")]
	private void SetLightPosition()
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x13137F4", Offset = "0x13137F4", VA = "0x13137F4")]
	public ElevatorFloorLightActive()
	{
	}
}
[Token(Token = "0x20000D8")]
public class ElevatorMoving : MonoBehaviourPunCallbacks, IPunObservable
{
	[Token(Token = "0x20000D9")]
	[CompilerGenerated]
	private sealed class <_WaitForABitAndSendElevatorPosition>d__61 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ElevatorMoving <>4__this;

		[Token(Token = "0x17000083")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60005C4")]
			[Address(RVA = "0x1317E64", Offset = "0x1317E64", VA = "0x1317E64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000084")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005C6")]
			[Address(RVA = "0x1317EAC", Offset = "0x1317EAC", VA = "0x1317EAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x1314E58", Offset = "0x1314E58", VA = "0x1314E58")]
		[DebuggerHidden]
		public <_WaitForABitAndSendElevatorPosition>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x1317D9C", Offset = "0x1317D9C", VA = "0x1317D9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x1317DA0", Offset = "0x1317DA0", VA = "0x1317DA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x1317E6C", Offset = "0x1317E6C", VA = "0x1317E6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000DA")]
	[CompilerGenerated]
	private sealed class <_GoingUp>d__72 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ElevatorMoving <>4__this;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <floor>5__2;

		[Token(Token = "0x17000085")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60005CA")]
			[Address(RVA = "0x131845C", Offset = "0x131845C", VA = "0x131845C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000086")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005CC")]
			[Address(RVA = "0x13184A4", Offset = "0x13184A4", VA = "0x13184A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x13160CC", Offset = "0x13160CC", VA = "0x13160CC")]
		[DebuggerHidden]
		public <_GoingUp>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x1317F08", Offset = "0x1317F08", VA = "0x1317F08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x1317F0C", Offset = "0x1317F0C", VA = "0x1317F0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x1318464", Offset = "0x1318464", VA = "0x1318464", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000DB")]
	[CompilerGenerated]
	private sealed class <_TeleportPlayer>d__85 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ElevatorMoving <>4__this;

		[Token(Token = "0x17000087")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60005D0")]
			[Address(RVA = "0x13185FC", Offset = "0x13185FC", VA = "0x13185FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000088")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005D2")]
			[Address(RVA = "0x1318644", Offset = "0x1318644", VA = "0x1318644", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x13172B0", Offset = "0x13172B0", VA = "0x13172B0")]
		[DebuggerHidden]
		public <_TeleportPlayer>d__85(int <>1__state)
		{
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x1318500", Offset = "0x1318500", VA = "0x1318500", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x1318504", Offset = "0x1318504", VA = "0x1318504", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x1318604", Offset = "0x1318604", VA = "0x1318604", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnElevatorIsUp;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnElevatorIsMiddle;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnElevatorIsDown;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioSource moveLoop;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioSource engineLoop;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioClip elevatorStopClip;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float stopMoveLoopTime;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float stopEngineLoopTime;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool audioPaused;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[HideInInspector]
	public bool elevatorOnTopWorld;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	[UnityEngine.Tooltip("Amount of movement to trigger level generation, currently tied to position, so could need some rework")]
	private float generateTheshold;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[UnityEngine.Tooltip("Amount of movement to trigger player teleporting to elevator, currently tied to position, so could need some rework")]
	[SerializeField]
	private float playerTeleportThreshold;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private BoxCollider myBoxTrigger;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ElevatorUpDownCanvas upDownCanvas;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Light greenLight;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ParticleSystem landingEffect;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Light[] shaftLights;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Renderer[] shaftLampRenderer;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEngine.Color shaftEntryColor;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEngine.Color shaftExitColor;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[HideInInspector]
	public bool elevatorMoving;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	private bool levelGenerated;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	private bool levelDestroyed;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBB")]
	private bool alreadyOnElevator;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool lastElevator;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	private bool playersTeleported;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 originalPosition;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 targetPosMin;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 targetPosMax;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Transform playerSpawnPoint;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Elevator elevatorScript;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private ElevatorRoom myElevatorRoom;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private RotatorObject rotatorObject;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private List<PlayerAvatar> avatarsInElevator;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private float lastStopClipUsedTime;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private float timeWhenGrabbed;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Vector3 lastElevatorLocalPos;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public ElevatorMovingEvent OnElevatorMovingEvent;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public RotatorResetEvent OnRotatorResetE;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[Header("Upgrades")]
	public GameObject[] ElevatorModel;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject RubbleModel;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public MeshRenderer[] Crank;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Collider[] CrankColl;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject ManualButtonPanel;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject ToggleButtonPanel;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public ParticleSystem upgradeParticles;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public AudioClip buyClip;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private int _currentTier;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private float _savedRotatorValue;

	[NonSerialized]
	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool disablePS4ElevatorWarpingToEnd;

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x1313BD0", Offset = "0x1313BD0", VA = "0x1313BD0", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x1314018", Offset = "0x1314018", VA = "0x1314018")]
	private void OnRotatorResetObject()
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x13140E0", Offset = "0x13140E0", VA = "0x13140E0", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x1314378", Offset = "0x1314378", VA = "0x1314378")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x13144AC", Offset = "0x13144AC", VA = "0x13144AC")]
	private void OnSceneChange(Scene arg0, Scene arg1)
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x13144B4", Offset = "0x13144B4", VA = "0x13144B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x1314688", Offset = "0x1314688", VA = "0x1314688")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x13149C0", Offset = "0x13149C0", VA = "0x13149C0")]
	private void CheckClientElevatorMoving()
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x1314A74", Offset = "0x1314A74", VA = "0x1314A74")]
	private void RotatorObjectGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0x1314B2C", Offset = "0x1314B2C", VA = "0x1314B2C")]
	private void RotatorObjectReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0x1314B6C", Offset = "0x1314B6C", VA = "0x1314B6C", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0x1314DE4", Offset = "0x1314DE4", VA = "0x1314DE4")]
	[IteratorStateMachine(typeof(<_WaitForABitAndSendElevatorPosition>d__61))]
	private IEnumerator<float> _WaitForABitAndSendElevatorPosition()
	{
		return null;
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0x1314E80", Offset = "0x1314E80", VA = "0x1314E80")]
	public void SetElevatorPos(Transform newPos)
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0x1314F48", Offset = "0x1314F48", VA = "0x1314F48")]
	public void SetElevatorTargetPosMin(Transform target)
	{
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0x1314FB0", Offset = "0x1314FB0", VA = "0x1314FB0")]
	public void SetElevatorTargetPosMax(Transform target)
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x1315018", Offset = "0x1315018", VA = "0x1315018")]
	public void ResetElevator()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x1315124", Offset = "0x1315124", VA = "0x1315124")]
	public void MoveElevator(float rotatorValue)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x131512C", Offset = "0x131512C", VA = "0x131512C")]
	public void MoveElevator(float rotatorValue, bool divideByMaxLimit)
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x1315C94", Offset = "0x1315C94", VA = "0x1315C94")]
	[PunRPC]
	private void OnElevatorMovingRPC(float rotatorValue)
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x1315D00", Offset = "0x1315D00", VA = "0x1315D00")]
	[PunRPC]
	private void OnRotatorReset()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x1315A64", Offset = "0x1315A64", VA = "0x1315A64")]
	private void GenerateLevel()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x1315FF0", Offset = "0x1315FF0", VA = "0x1315FF0")]
	[PunRPC]
	private void GoingUpRPC()
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x1316058", Offset = "0x1316058", VA = "0x1316058")]
	[IteratorStateMachine(typeof(<_GoingUp>d__72))]
	private IEnumerator<float> _GoingUp()
	{
		return null;
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x1315950", Offset = "0x1315950", VA = "0x1315950")]
	public void ElevatorIsUp()
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x1315D14", Offset = "0x1315D14", VA = "0x1315D14")]
	public void Generate()
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x1316180", Offset = "0x1316180", VA = "0x1316180")]
	[PunRPC]
	private void BlockElevatorExitsRPC(int currentLevel)
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x1314800", Offset = "0x1314800", VA = "0x1314800")]
	private void ToggleCCs(bool value)
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x1314A98", Offset = "0x1314A98", VA = "0x1314A98")]
	private void ToggleUpDownCanvas(bool forceFalse = false)
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x1316224", Offset = "0x1316224", VA = "0x1316224")]
	public RotatorObject GetMyRotator()
	{
		return null;
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0x131622C", Offset = "0x131622C", VA = "0x131622C")]
	public bool IsLastElevator()
	{
		return default(bool);
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x1316234", Offset = "0x1316234", VA = "0x1316234")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x13168F4", Offset = "0x13168F4", VA = "0x13168F4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x13166EC", Offset = "0x13166EC", VA = "0x13166EC")]
	private void PlayerParentChangedOffline(bool parentPlayer, GameObject avatarView)
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x1316DF4", Offset = "0x1316DF4", VA = "0x1316DF4")]
	[PunRPC]
	private void PlayerParentChangedRPC(bool parentPlayer, int avatarID)
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x1317070", Offset = "0x1317070", VA = "0x1317070")]
	[PunRPC]
	public void TeleportPlayersToElevatorRPC(bool force = false)
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0x131723C", Offset = "0x131723C", VA = "0x131723C")]
	[IteratorStateMachine(typeof(<_TeleportPlayer>d__85))]
	private IEnumerator<float> _TeleportPlayer()
	{
		return null;
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x13172D8", Offset = "0x13172D8", VA = "0x13172D8")]
	public void ResetAlreadyOnElevator()
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x1315A74", Offset = "0x1315A74", VA = "0x1315A74")]
	public void SetShaftLightColor(bool isEntry)
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x13172E0", Offset = "0x13172E0", VA = "0x13172E0", Slot = "54")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x13173D4", Offset = "0x13173D4", VA = "0x13173D4")]
	private void OnElevatorUpgrade(OtherUpgradePathScriptableObject.UpgradeType arg0)
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x1313F58", Offset = "0x1313F58", VA = "0x1313F58")]
	public void ApplyUpgrade(bool load)
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x13173EC", Offset = "0x13173EC", VA = "0x13173EC")]
	public void ApplyUpgrade(Scene _scene, bool load)
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x1317890", Offset = "0x1317890", VA = "0x1317890")]
	private void SetModelsActive()
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x13179A8", Offset = "0x13179A8", VA = "0x13179A8")]
	private void TweenElevatorPurchase()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0x1317988", Offset = "0x1317988", VA = "0x1317988")]
	private void DisableRubble()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0x1317BCC", Offset = "0x1317BCC", VA = "0x1317BCC")]
	public ElevatorMoving()
	{
	}
}
[Token(Token = "0x20000DC")]
public class ElevatorMovingEvent : UnityEvent<float>
{
	[Token(Token = "0x60005D3")]
	[Address(RVA = "0x1313FC8", Offset = "0x1313FC8", VA = "0x1313FC8")]
	public ElevatorMovingEvent()
	{
	}
}
[Token(Token = "0x20000DD")]
public class RotatorResetEvent : UnityEvent
{
	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x1314010", Offset = "0x1314010", VA = "0x1314010")]
	public RotatorResetEvent()
	{
	}
}
[Token(Token = "0x20000DE")]
public class ElevatorUpDownCanvas : MonoBehaviour
{
	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject upStuff;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject downStuff;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public bool showUp;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[HideInInspector]
	public bool showDown;

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0x13186A0", Offset = "0x13186A0", VA = "0x13186A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0x13160F4", Offset = "0x13160F4", VA = "0x13160F4")]
	public void Toggle(bool forceFalse = false)
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0x13186F0", Offset = "0x13186F0", VA = "0x13186F0")]
	public ElevatorUpDownCanvas()
	{
	}
}
[Token(Token = "0x20000DF")]
public class ColdColdNorthAltar : MonoBehaviour
{
	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject myAltar;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light myLight;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem coolderDisappearFXPrefab;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ColorUsage(true, true)]
	private UnityEngine.Color _emissionColor;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ColdColdNorthCooler _myCooler;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _activated;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool _rotate;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer[] _renderers;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 _originalPosition;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion _originalRotation;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform _originalParent;

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0x1318700", Offset = "0x1318700", VA = "0x1318700")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0x1318894", Offset = "0x1318894", VA = "0x1318894")]
	private void Start()
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0x1318A8C", Offset = "0x1318A8C", VA = "0x1318A8C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0x131894C", Offset = "0x131894C", VA = "0x131894C")]
	private void Reset()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0x131920C", Offset = "0x131920C", VA = "0x131920C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0x13192D8", Offset = "0x13192D8", VA = "0x13192D8")]
	private void TweenEmissionStart()
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0x1319390", Offset = "0x1319390", VA = "0x1319390")]
	public ColdColdNorthAltar()
	{
	}
}
[Token(Token = "0x20000E1")]
public class ColdColdNorthAltarPlayerTrigger : MonoBehaviour
{
	[Token(Token = "0x60005E3")]
	[Address(RVA = "0x13195FC", Offset = "0x13195FC", VA = "0x13195FC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x1319724", Offset = "0x1319724", VA = "0x1319724")]
	public ColdColdNorthAltarPlayerTrigger()
	{
	}
}
[Token(Token = "0x20000E2")]
public class ColdColdNorthCooler : MonoBehaviour
{
	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Collider myCollider;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 _originalPosition;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion _originalRotation;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform _originalParent;

	[Token(Token = "0x17000089")]
	public Collider GetCollider
	{
		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x131972C", Offset = "0x131972C", VA = "0x131972C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0x1319734", Offset = "0x1319734", VA = "0x1319734")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x13197A8", Offset = "0x13197A8", VA = "0x13197A8")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0x13198BC", Offset = "0x13198BC", VA = "0x13198BC")]
	private void SetKinematic()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0x1319918", Offset = "0x1319918", VA = "0x1319918")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0x1319968", Offset = "0x1319968", VA = "0x1319968")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0x1319A58", Offset = "0x1319A58", VA = "0x1319A58")]
	private void Reset()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0x1319B10", Offset = "0x1319B10", VA = "0x1319B10")]
	public ColdColdNorthCooler()
	{
	}
}
[Token(Token = "0x20000E3")]
public class ColdColdNorthManager : MonoBehaviourPun
{
	[Token(Token = "0x20000E4")]
	[CompilerGenerated]
	private sealed class <EndingSequenceCoroutine>d__23 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColdColdNorthManager <>4__this;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CustomHVRCanvasFade <fader>5__2;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <playerPoint>5__3;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TweenerCore<Vector3, Vector3, VectorOptions> <playerTween>5__4;

		[Token(Token = "0x1700008A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60005FC")]
			[Address(RVA = "0x131B61C", Offset = "0x131B61C", VA = "0x131B61C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700008B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005FE")]
			[Address(RVA = "0x131B664", Offset = "0x131B664", VA = "0x131B664", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x131A5F0", Offset = "0x131A5F0", VA = "0x131A5F0")]
		[DebuggerHidden]
		public <EndingSequenceCoroutine>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x131A6A8", Offset = "0x131A6A8", VA = "0x131A6A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x131A6AC", Offset = "0x131A6AC", VA = "0x131A6AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x131B624", Offset = "0x131B624", VA = "0x131B624", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ColdColdNorthManager Instance;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] altarClaytonClips;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LocalizedString[] altarClaytonClipSubtitles;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] otherClaytonClips;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LocalizedString[] otherClaytonClipSubtitles;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform fogParticles;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject fogPlane;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Atmosphere blackHoleAtmo;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject blackHole;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform playerTeleportLocation;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public CreditsController creditsController;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int _altarsActivated;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool _endingActive;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float _tipCooldownTime;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 _originalFogsPos;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 _originalFogsScale;

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0x1319B18", Offset = "0x1319B18", VA = "0x1319B18")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0x1319BA8", Offset = "0x1319BA8", VA = "0x1319BA8")]
	private void Start()
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0x1319C60", Offset = "0x1319C60", VA = "0x1319C60")]
	private void Reset()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x131A024", Offset = "0x131A024", VA = "0x131A024")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x13190C8", Offset = "0x13190C8", VA = "0x13190C8")]
	public void AltarActivated()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0x131A0A4", Offset = "0x131A0A4", VA = "0x131A0A4")]
	private void StartEnding()
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x131A584", Offset = "0x131A584", VA = "0x131A584")]
	[PunRPC]
	private void StartEndingOthersRPC()
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x131A4B0", Offset = "0x131A4B0", VA = "0x131A4B0")]
	[IteratorStateMachine(typeof(<EndingSequenceCoroutine>d__23))]
	private IEnumerator<float> EndingSequenceCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x131A428", Offset = "0x131A428", VA = "0x131A428")]
	public void PlayClayAltarClip(int clip, bool highPriority)
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x131A618", Offset = "0x131A618", VA = "0x131A618")]
	public void PlayClayOtherClip(int clip, bool highPriority)
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x1319680", Offset = "0x1319680", VA = "0x1319680")]
	public void FirstAltarTip()
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x131A6A0", Offset = "0x131A6A0", VA = "0x131A6A0")]
	public ColdColdNorthManager()
	{
	}
}
[Token(Token = "0x20000E5")]
public class CreditsController : MonoBehaviour
{
	[Token(Token = "0x20000E6")]
	[CompilerGenerated]
	private sealed class <_RollCredits>d__18 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CreditsController <>4__this;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool playMusicOnSeparateAudioSource;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float songDelay;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float creditsDelay;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float duration;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource <separateEndingAudioSource>5__2;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <time>5__3;

		[Token(Token = "0x1700008E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600060D")]
			[Address(RVA = "0x131C150", Offset = "0x131C150", VA = "0x131C150", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700008F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600060F")]
			[Address(RVA = "0x131C198", Offset = "0x131C198", VA = "0x131C198", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x131BA04", Offset = "0x131BA04", VA = "0x131BA04")]
		[DebuggerHidden]
		public <_RollCredits>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x131BBD0", Offset = "0x131BBD0", VA = "0x131BBD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x131BBD4", Offset = "0x131BBD4", VA = "0x131BBD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x131C158", Offset = "0x131C158", VA = "0x131C158", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ScrollRect creditsScrollRect;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Campfire topworldCampFire;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject creditsObject;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioSource creditsSongAudioSource;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool restoreAudioVolume;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float originalSFXVolume;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float originalVoiceLineVolume;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private CoroutineHandle _creditsCoroutine;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CreditsController previousCredits;

	[Token(Token = "0x1700008C")]
	public float GetMusicLength
	{
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x131B6C0", Offset = "0x131B6C0", VA = "0x131B6C0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700008D")]
	public float GetRemainingMusicTime
	{
		[Token(Token = "0x6000600")]
		[Address(RVA = "0x131B4E0", Offset = "0x131B4E0", VA = "0x131B4E0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0x131B6E8", Offset = "0x131B6E8", VA = "0x131B6E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0x131B708", Offset = "0x131B708", VA = "0x131B708")]
	public void SetOriginalVolume(float originalSFXVolume, float originalVoiceLineVolume)
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0x131B530", Offset = "0x131B530", VA = "0x131B530")]
	public void StartCreditsRoll(float rollDelay, float songDelay, bool playMusicOnSeparateAudioSource = false)
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0x131B718", Offset = "0x131B718", VA = "0x131B718")]
	public static void StopPreviousCredits()
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0x131B944", Offset = "0x131B944", VA = "0x131B944")]
	public void ResetCreditsPosition()
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0x131B7B8", Offset = "0x131B7B8", VA = "0x131B7B8")]
	[IteratorStateMachine(typeof(<_RollCredits>d__18))]
	private IEnumerator<float> _RollCredits(float duration, float creditsDelay, float songDelay, bool playMusicOnSeparateAudioSource)
	{
		return null;
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0x131BA2C", Offset = "0x131BA2C", VA = "0x131BA2C")]
	private void EndOfCredits(GameObject separateEndingAudioSourceObject)
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0x131B864", Offset = "0x131B864", VA = "0x131B864")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0x131BBC8", Offset = "0x131BBC8", VA = "0x131BBC8")]
	public CreditsController()
	{
	}
}
[Token(Token = "0x20000E7")]
public class CreditsTitleChanger : MonoBehaviour
{
	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI creditsText;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int thisCreditsNumber;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string[] allEndingTitles;

	[Token(Token = "0x6000610")]
	[Address(RVA = "0x131C1F4", Offset = "0x131C1F4", VA = "0x131C1F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0x131C2E4", Offset = "0x131C2E4", VA = "0x131C2E4")]
	public CreditsTitleChanger()
	{
	}
}
[Token(Token = "0x20000E8")]
public class DisableEnviromentOnEnable : MonoBehaviour
{
	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FirstEndingController firstEndingController;

	[Token(Token = "0x6000612")]
	[Address(RVA = "0x131C2EC", Offset = "0x131C2EC", VA = "0x131C2EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0x131C30C", Offset = "0x131C30C", VA = "0x131C30C")]
	public DisableEnviromentOnEnable()
	{
	}
}
[Token(Token = "0x20000E9")]
public class ShakeTransform : MonoBehaviour
{
	[Token(Token = "0x20000EA")]
	[CompilerGenerated]
	private sealed class <Shake>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShakeTransform <>4__this;

		[Token(Token = "0x17000090")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600061D")]
			[Address(RVA = "0x131C598", Offset = "0x131C598", VA = "0x131C598", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000091")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600061F")]
			[Address(RVA = "0x131C5E0", Offset = "0x131C5E0", VA = "0x131C5E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x131C404", Offset = "0x131C404", VA = "0x131C404")]
		[DebuggerHidden]
		public <Shake>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x131C440", Offset = "0x131C440", VA = "0x131C440", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x131C444", Offset = "0x131C444", VA = "0x131C444", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x131C5A0", Offset = "0x131C5A0", VA = "0x131C5A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Info")]
	private Vector3 _startPos;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float _timer;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 _randomPos;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Settings")]
	[Range(0f, 2f)]
	public float _time;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 2f)]
	public float _distance;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0f, 0.1f)]
	public float _delayBetweenShakes;

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x131C314", Offset = "0x131C314", VA = "0x131C314")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x131C344", Offset = "0x131C344", VA = "0x131C344")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0x131C35C", Offset = "0x131C35C", VA = "0x131C35C")]
	public void Begin()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0x131C3FC", Offset = "0x131C3FC", VA = "0x131C3FC")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0x131C388", Offset = "0x131C388", VA = "0x131C388")]
	[IteratorStateMachine(typeof(<Shake>d__10))]
	private IEnumerator Shake()
	{
		return null;
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0x131C42C", Offset = "0x131C42C", VA = "0x131C42C")]
	public ShakeTransform()
	{
	}
}
[Token(Token = "0x20000EB")]
public class SecondEndingController : MonoBehaviour
{
	[Token(Token = "0x20000EC")]
	[CompilerGenerated]
	private sealed class <EndingCoroutine>d__19 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SecondEndingController <>4__this;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CustomHVRCanvasFade <fader>5__2;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <creditsOffset>5__3;

		[Token(Token = "0x17000092")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600062E")]
			[Address(RVA = "0x131E270", Offset = "0x131E270", VA = "0x131E270", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000093")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000630")]
			[Address(RVA = "0x131E2B8", Offset = "0x131E2B8", VA = "0x131E2B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x131C780", Offset = "0x131C780", VA = "0x131C780")]
		[DebuggerHidden]
		public <EndingCoroutine>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x131D1EC", Offset = "0x131D1EC", VA = "0x131D1EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x131D1F0", Offset = "0x131D1F0", VA = "0x131D1F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x131E278", Offset = "0x131E278", VA = "0x131E278", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000ED")]
	[CompilerGenerated]
	private sealed class <EnableMusicCoroutine>d__20 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timer;

		[Token(Token = "0x17000094")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000634")]
			[Address(RVA = "0x131E3E8", Offset = "0x131E3E8", VA = "0x131E3E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000095")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000636")]
			[Address(RVA = "0x131E430", Offset = "0x131E430", VA = "0x131E430", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x131C818", Offset = "0x131C818", VA = "0x131C818")]
		[DebuggerHidden]
		public <EnableMusicCoroutine>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x131E314", Offset = "0x131E314", VA = "0x131E314", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x131E318", Offset = "0x131E318", VA = "0x131E318", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x131E3F0", Offset = "0x131E3F0", VA = "0x131E3F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EE")]
	[CompilerGenerated]
	private sealed class <CreditsFollowCoroutine>d__21 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timer;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SecondEndingController <>4__this;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x17000096")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600063A")]
			[Address(RVA = "0x131E550", Offset = "0x131E550", VA = "0x131E550", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000097")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600063C")]
			[Address(RVA = "0x131E598", Offset = "0x131E598", VA = "0x131E598", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x131C8E0", Offset = "0x131C8E0", VA = "0x131C8E0")]
		[DebuggerHidden]
		public <CreditsFollowCoroutine>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x131E48C", Offset = "0x131E48C", VA = "0x131E48C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x131E490", Offset = "0x131E490", VA = "0x131E490", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x131E558", Offset = "0x131E558", VA = "0x131E558", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EF")]
	[CompilerGenerated]
	private sealed class <PlayerMoveCoroutine>d__22 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SecondEndingController <>4__this;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform <rig>5__2;

		[Token(Token = "0x17000098")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000640")]
			[Address(RVA = "0x131E70C", Offset = "0x131E70C", VA = "0x131E70C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000099")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000642")]
			[Address(RVA = "0x131E754", Offset = "0x131E754", VA = "0x131E754", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x131C97C", Offset = "0x131C97C", VA = "0x131C97C")]
		[DebuggerHidden]
		public <PlayerMoveCoroutine>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x131E5F4", Offset = "0x131E5F4", VA = "0x131E5F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x131E5F8", Offset = "0x131E5F8", VA = "0x131E5F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x131E714", Offset = "0x131E714", VA = "0x131E714", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000F0")]
	[CompilerGenerated]
	private sealed class <CloudsMoveCoroutine>d__23 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SecondEndingController <>4__this;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 direction;

		[Token(Token = "0x1700009A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000646")]
			[Address(RVA = "0x131E8C4", Offset = "0x131E8C4", VA = "0x131E8C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700009B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000648")]
			[Address(RVA = "0x131E90C", Offset = "0x131E90C", VA = "0x131E90C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x131CA3C", Offset = "0x131CA3C", VA = "0x131CA3C")]
		[DebuggerHidden]
		public <CloudsMoveCoroutine>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x131E7B0", Offset = "0x131E7B0", VA = "0x131E7B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x131E7B4", Offset = "0x131E7B4", VA = "0x131E7B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x131E8CC", Offset = "0x131E8CC", VA = "0x131E8CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LootBalloon lootBalloon;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform lootGrinderTransform;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Atmosphere spaceAtmosphere;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private CreditsController creditsController;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject clouds;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform moon;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioClip clayton1;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip clayton2;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip clayton3;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip clayton4;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioClip splatClip;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private LocalizedString[] subtitles;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private UnityEngine.Color colorOfPain;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform _ogBalloonParent;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool _sinePlayer;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 _ogRigLocalPosition;

	[Token(Token = "0x6000620")]
	[Address(RVA = "0x131C5E8", Offset = "0x131C5E8", VA = "0x131C5E8")]
	public void PlayLine1()
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0x131C644", Offset = "0x131C644", VA = "0x131C644")]
	public void PlayLine2()
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0x131C6A4", Offset = "0x131C6A4", VA = "0x131C6A4")]
	public void Begin()
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x131C70C", Offset = "0x131C70C", VA = "0x131C70C")]
	[IteratorStateMachine(typeof(<EndingCoroutine>d__19))]
	private IEnumerator<float> EndingCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0x131C7A8", Offset = "0x131C7A8", VA = "0x131C7A8")]
	[IteratorStateMachine(typeof(<EnableMusicCoroutine>d__20))]
	private IEnumerator<float> EnableMusicCoroutine(float timer)
	{
		return null;
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0x131C840", Offset = "0x131C840", VA = "0x131C840")]
	[IteratorStateMachine(typeof(<CreditsFollowCoroutine>d__21))]
	private IEnumerator<float> CreditsFollowCoroutine(float timer, Vector3 offset)
	{
		return null;
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x131C908", Offset = "0x131C908", VA = "0x131C908")]
	[IteratorStateMachine(typeof(<PlayerMoveCoroutine>d__22))]
	private IEnumerator<float> PlayerMoveCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0x131C9A4", Offset = "0x131C9A4", VA = "0x131C9A4")]
	[IteratorStateMachine(typeof(<CloudsMoveCoroutine>d__23))]
	private IEnumerator<float> CloudsMoveCoroutine(Vector3 direction)
	{
		return null;
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0x131CA64", Offset = "0x131CA64", VA = "0x131CA64")]
	private void FreezeAndRotatePlayer()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0x131CE40", Offset = "0x131CE40", VA = "0x131CE40")]
	private void Reset(CustomHVRCanvasFade fader)
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0x131D1E4", Offset = "0x131D1E4", VA = "0x131D1E4")]
	public SecondEndingController()
	{
	}
}
[Token(Token = "0x20000F1")]
public class EndingFrog : MonoBehaviourPun, IKillable, IDamageable, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x20000F2")]
	[CompilerGenerated]
	private sealed class <JumpAnimationCoroutine>d__36 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EndingFrog <>4__this;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x1700009F")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000662")]
			[Address(RVA = "0x132017C", Offset = "0x132017C", VA = "0x132017C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000664")]
			[Address(RVA = "0x13201C4", Offset = "0x13201C4", VA = "0x13201C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x131FBA0", Offset = "0x131FBA0", VA = "0x131FBA0")]
		[DebuggerHidden]
		public <JumpAnimationCoroutine>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x1320000", Offset = "0x1320000", VA = "0x1320000", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x1320004", Offset = "0x1320004", VA = "0x1320004", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x1320184", Offset = "0x1320184", VA = "0x1320184", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DamageType takeDamageType;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip takeDamageClip;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int maxHealth;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private HVRGrabbable grabbable;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioSource croackingSource;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioSource jumpAudioSource;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Rigidbody rigidbody;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private LayerMask groundLayers;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioClip squeekClip;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioClip eatenClip;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Collider eatTrigger;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Renderer basicRenderer;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Renderer headlessRenderer;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float _timeUntilNextJump;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool _eaten;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	private bool _isDead;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int _totalDamageTaken;

	[Token(Token = "0x1700009C")]
	public Action<GameObject> deathAction
	{
		[Token(Token = "0x6000649")]
		[Address(RVA = "0x131E968", Offset = "0x131E968", VA = "0x131E968", Slot = "5")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600064A")]
		[Address(RVA = "0x131E970", Offset = "0x131E970", VA = "0x131E970", Slot = "6")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700009D")]
	public GameObject GetGameObject
	{
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x131E978", Offset = "0x131E978", VA = "0x131E978", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700009E")]
	public bool IsDead
	{
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x131E980", Offset = "0x131E980", VA = "0x131E980", Slot = "8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0x131E988", Offset = "0x131E988", VA = "0x131E988")]
	private void Start()
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0x131EAE0", Offset = "0x131EAE0", VA = "0x131EAE0")]
	private void SetHeadless(bool headless)
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x131EB3C", Offset = "0x131EB3C", VA = "0x131EB3C")]
	private void Activated(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x131EBC4", Offset = "0x131EBC4", VA = "0x131EBC4")]
	private void Released(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0x131EDB0", Offset = "0x131EDB0", VA = "0x131EDB0")]
	private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0x131EE58", Offset = "0x131EE58", VA = "0x131EE58")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0x131F0C8", Offset = "0x131F0C8", VA = "0x131F0C8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0x131EF20", Offset = "0x131EF20", VA = "0x131EF20")]
	private void GetEaten()
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0x131F424", Offset = "0x131F424", VA = "0x131F424")]
	private void Update()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x131F530", Offset = "0x131F530", VA = "0x131F530")]
	private void Jump()
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x131FB1C", Offset = "0x131FB1C", VA = "0x131FB1C")]
	[IteratorStateMachine(typeof(<JumpAnimationCoroutine>d__36))]
	private IEnumerator<float> JumpAnimationCoroutine(float time)
	{
		return null;
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x131EC68", Offset = "0x131EC68", VA = "0x131EC68")]
	private void CheckIfUnderWater()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x131FBC8", Offset = "0x131FBC8", VA = "0x131FBC8", Slot = "9")]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x131FD68", Offset = "0x131FD68", VA = "0x131FD68", Slot = "4")]
	[PunRPC]
	public void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x131FEC8", Offset = "0x131FEC8", VA = "0x131FEC8", Slot = "10")]
	public void Acquire()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0x131FFF4", Offset = "0x131FFF4", VA = "0x131FFF4", Slot = "11")]
	public void Release()
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0x131FECC", Offset = "0x131FECC", VA = "0x131FECC")]
	private void Reset()
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0x131FFF8", Offset = "0x131FFF8", VA = "0x131FFF8")]
	public EndingFrog()
	{
	}
}
[Token(Token = "0x20000F3")]
public class EndingFrogSpawner : MonoBehaviour
{
	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject frogPrefab;

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x1320220", Offset = "0x1320220", VA = "0x1320220")]
	public void Spawn()
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x1320314", Offset = "0x1320314", VA = "0x1320314")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x1320364", Offset = "0x1320364", VA = "0x1320364")]
	public EndingFrogSpawner()
	{
	}
}
[Token(Token = "0x20000F4")]
public class EndingFrontierChompy : MonoBehaviour
{
	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Animator _animator;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource eatingAudioSource;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _timer;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _totalTime;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 _startPos;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Quaternion _targetRot;

	[Token(Token = "0x170000A1")]
	public Animator GetAnimator
	{
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x132036C", Offset = "0x132036C", VA = "0x132036C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x1320374", Offset = "0x1320374", VA = "0x1320374")]
	public void SetTimer(float totalTime, Vector3 startPos, Quaternion targetRot)
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x13203F0", Offset = "0x13203F0", VA = "0x13203F0")]
	private void Update()
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x13205E4", Offset = "0x13205E4", VA = "0x13205E4")]
	public void EatingSounds()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x1320600", Offset = "0x1320600", VA = "0x1320600")]
	public EndingFrontierChompy()
	{
	}
}
[Token(Token = "0x20000F5")]
public class ThirdEndingController : MonoBehaviour
{
	[Token(Token = "0x20000F6")]
	[CompilerGenerated]
	private sealed class <EndingCoroutine>d__17 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ThirdEndingController <>4__this;

		[Token(Token = "0x170000A2")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600067B")]
			[Address(RVA = "0x1321A78", Offset = "0x1321A78", VA = "0x1321A78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600067D")]
			[Address(RVA = "0x1321AC0", Offset = "0x1321AC0", VA = "0x1321AC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x13207B4", Offset = "0x13207B4", VA = "0x13207B4")]
		[DebuggerHidden]
		public <EndingCoroutine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x1321284", Offset = "0x1321284", VA = "0x1321284", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x1321288", Offset = "0x1321288", VA = "0x1321288", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0x1321A80", Offset = "0x1321A80", VA = "0x1321A80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000F7")]
	[CompilerGenerated]
	private sealed class <EnableMusicCoroutine>d__23 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timer;

		[Token(Token = "0x170000A4")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000681")]
			[Address(RVA = "0x1321BF0", Offset = "0x1321BF0", VA = "0x1321BF0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000683")]
			[Address(RVA = "0x1321C38", Offset = "0x1321C38", VA = "0x1321C38", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x1321254", Offset = "0x1321254", VA = "0x1321254")]
		[DebuggerHidden]
		public <EnableMusicCoroutine>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x1321B1C", Offset = "0x1321B1C", VA = "0x1321B1C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x1321B20", Offset = "0x1321B20", VA = "0x1321B20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x1321BF8", Offset = "0x1321BF8", VA = "0x1321BF8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ThirdEndingController Instance;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject endingChompyPrefab;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip endingChompyClip;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip tripChangeClip;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform playerPoint;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Atmosphere chompyAtmosphere;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Atmosphere nightAtmosphere;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private CreditsController creditsController;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip[] claytonLines;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private LocalizedString[] subtitles;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioSource incomingChompyAudioSource;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int _frogsEaten;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private EndingFrontierChompy _endingFrontierChompy;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool _endingActive;

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x1320608", Offset = "0x1320608", VA = "0x1320608")]
	private void Awake()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x132068C", Offset = "0x132068C", VA = "0x132068C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x131F1A8", Offset = "0x131F1A8", VA = "0x131F1A8")]
	public void FrogEaten()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0x1320740", Offset = "0x1320740", VA = "0x1320740")]
	[IteratorStateMachine(typeof(<EndingCoroutine>d__17))]
	private IEnumerator<float> EndingCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x13207DC", Offset = "0x13207DC", VA = "0x13207DC")]
	private void RollCredits(float delay)
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x13208E8", Offset = "0x13208E8", VA = "0x13208E8")]
	private void FreezeAndRotatePlayer()
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x1320C34", Offset = "0x1320C34", VA = "0x1320C34")]
	private void ResetAfterEnding()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x131A524", Offset = "0x131A524", VA = "0x131A524")]
	public static void ResetTripEffects()
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x1321008", Offset = "0x1321008", VA = "0x1321008")]
	private void SpawnEndingChompy()
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x1320878", Offset = "0x1320878", VA = "0x1320878")]
	[IteratorStateMachine(typeof(<EnableMusicCoroutine>d__23))]
	private IEnumerator<float> EnableMusicCoroutine(float timer)
	{
		return null;
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x132127C", Offset = "0x132127C", VA = "0x132127C")]
	public ThirdEndingController()
	{
	}
}
[Token(Token = "0x20000F8")]
public class RecordTransformHierarchy : MonoBehaviour
{
	[Token(Token = "0x6000684")]
	[Address(RVA = "0x1321C94", Offset = "0x1321C94", VA = "0x1321C94")]
	public RecordTransformHierarchy()
	{
	}
}
[Token(Token = "0x20000F9")]
public class EndingClue : Prop
{
	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	private Sprite[] ending1Images;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private int myEndingIndex;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private int myEndinPartIndex;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private SpriteRenderer mySpriteRenderer;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private bool grabbedAlready;

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x1321C9C", Offset = "0x1321C9C", VA = "0x1321C9C")]
	public void SelectImage(int endingIndex, int endingPartIndex)
	{
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x1321D84", Offset = "0x1321D84", VA = "0x1321D84", Slot = "20")]
	public override void onLooted()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x1321F0C", Offset = "0x1321F0C", VA = "0x1321F0C", Slot = "19")]
	protected override void onGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x1321F40", Offset = "0x1321F40", VA = "0x1321F40")]
	public void UnlockEndingClue()
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x1321D68", Offset = "0x1321D68", VA = "0x1321D68")]
	private void SetImage(Sprite image)
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x132225C", Offset = "0x132225C", VA = "0x132225C")]
	public EndingClue()
	{
	}
}
[Token(Token = "0x20000FA")]
public class EndingsManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000FB")]
	public class EndingClueData
	{
		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int endingIndex;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int endingPartIndex;

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x13229F8", Offset = "0x13229F8", VA = "0x13229F8")]
		public EndingClueData()
		{
		}
	}

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EndingsManager Instance;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EndingClueData> endingCluesFound;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip meteorReminder;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private LocalizedString meteorReminderSubtitle;

	[Token(Token = "0x600068B")]
	[Address(RVA = "0x13222B4", Offset = "0x13222B4", VA = "0x13222B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0x132230C", Offset = "0x132230C", VA = "0x132230C")]
	private void Start()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0x1322580", Offset = "0x1322580", VA = "0x1322580")]
	private void InitCurrentMeteorState()
	{
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0x1322478", Offset = "0x1322478", VA = "0x1322478")]
	private void AddMeteorListenerCallback()
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0x13225E0", Offset = "0x13225E0", VA = "0x13225E0")]
	public void MeteorReminder()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0x1322844", Offset = "0x1322844", VA = "0x1322844")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0x1322130", Offset = "0x1322130", VA = "0x1322130")]
	public void AddClue(int endingIndex, int endingPartIndex)
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0x1322A00", Offset = "0x1322A00", VA = "0x1322A00")]
	public bool HasEndingPartBeenFound(int endingIndex, int endingPartIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0x1322AD0", Offset = "0x1322AD0", VA = "0x1322AD0")]
	public bool AnyEndingPartFound(int endingIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0x1322B78", Offset = "0x1322B78", VA = "0x1322B78")]
	public EndingsManager()
	{
	}
}
[Token(Token = "0x20000FC")]
public class MeteorCircleTrigger : MonoBehaviour
{
	[Token(Token = "0x6000697")]
	[Address(RVA = "0x1322C44", Offset = "0x1322C44", VA = "0x1322C44")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0x1322F58", Offset = "0x1322F58", VA = "0x1322F58")]
	private void OnBottleBreaking(GameObject bottle)
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0x13231AC", Offset = "0x13231AC", VA = "0x13231AC")]
	public MeteorCircleTrigger()
	{
	}
}
[Token(Token = "0x20000FD")]
public class MeteorController : MonoBehaviour
{
	[Token(Token = "0x20000FE")]
	[CompilerGenerated]
	private sealed class <SequenceCoroutine>d__11 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeteorController <>4__this;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CustomHVRCanvasFade <fader>5__2;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CreditsController <creditsController>5__3;

		[Token(Token = "0x170000A6")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60006A4")]
			[Address(RVA = "0x1323D90", Offset = "0x1323D90", VA = "0x1323D90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006A6")]
			[Address(RVA = "0x1323DD8", Offset = "0x1323DD8", VA = "0x1323DD8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x13236DC", Offset = "0x13236DC", VA = "0x13236DC")]
		[DebuggerHidden]
		public <SequenceCoroutine>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x13237C8", Offset = "0x13237C8", VA = "0x13237C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x13237CC", Offset = "0x13237CC", VA = "0x13237CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x1323D98", Offset = "0x1323D98", VA = "0x1323D98", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 _originalPosition;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 _originalMeteorScale;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion _originalMeteorRotation;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 _originalMeteorPosition;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform _originalParent;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Atmosphere endingAtmosphere;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform meteor;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private UnityEngine.Color finalAmbient;

	[Token(Token = "0x600069A")]
	[Address(RVA = "0x13231B4", Offset = "0x13231B4", VA = "0x13231B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0x1323260", Offset = "0x1323260", VA = "0x1323260")]
	public void ActivateEnding()
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0x132347C", Offset = "0x132347C", VA = "0x132347C")]
	public void ResetEnding()
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0x1323408", Offset = "0x1323408", VA = "0x1323408")]
	[IteratorStateMachine(typeof(<SequenceCoroutine>d__11))]
	private IEnumerator<float> SequenceCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0x1323704", Offset = "0x1323704", VA = "0x1323704")]
	private void Update()
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0x1323748", Offset = "0x1323748", VA = "0x1323748")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0x13237C0", Offset = "0x13237C0", VA = "0x13237C0")]
	public MeteorController()
	{
	}
}
[Token(Token = "0x20000FF")]
public class MeteorEndingManager : MonoBehaviourPun
{
	[Token(Token = "0x2000100")]
	[CompilerGenerated]
	private sealed class <EnableParticlesOverTime>d__29 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeteorEndingManager <>4__this;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Transform>.Enumerator <>7__wrap1;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform <item>5__3;

		[Token(Token = "0x170000A8")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60006CA")]
			[Address(RVA = "0x134D664", Offset = "0x134D664", VA = "0x134D664", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006CC")]
			[Address(RVA = "0x134D6AC", Offset = "0x134D6AC", VA = "0x134D6AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x134B8AC", Offset = "0x134B8AC", VA = "0x134B8AC")]
		[DebuggerHidden]
		public <EnableParticlesOverTime>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x134D3A4", Offset = "0x134D3A4", VA = "0x134D3A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x134D3C0", Offset = "0x134D3C0", VA = "0x134D3C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x134D614", Offset = "0x134D614", VA = "0x134D614")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x134D66C", Offset = "0x134D66C", VA = "0x134D66C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MeteorEndingManager Instance;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int currentMeteorState;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static bool phase1ObjectiveStatus;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public static bool phase2ObjectiveStatus;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	public static bool phase3ObjectiveStatus;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] claytonClips;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LocalizedString[] claytonClipSubtitles;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CreditsController creditsController;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Torch[] migoAreaTorches;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] migoAreaPropsStage2;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] migoAreaPropsStage3;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] migoAreaPlants;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Renderer[] migoGlowing;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public MultiNode[] forceSpawnEnemyNodes;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action<int> onMeteorStateChanged;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform[] crystals;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Renderer[] _crystalRenderers;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject particleRoot;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<Transform> _fireParticles;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int _torchesLit;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public System.Action onLitTorchStatusChanged;

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x134A6F4", Offset = "0x134A6F4", VA = "0x134A6F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x134AD58", Offset = "0x134AD58", VA = "0x134AD58")]
	public void PlayClaytonClip(int clip, bool highPriority)
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x134ADE0", Offset = "0x134ADE0", VA = "0x134ADE0")]
	public static void IncrementMeteorState()
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x134AE2C", Offset = "0x134AE2C", VA = "0x134AE2C")]
	public static void SetMeteorState(int state)
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x134B5A0", Offset = "0x134B5A0", VA = "0x134B5A0")]
	[PunRPC]
	private void SetMeteorStateRPCOthers(int state)
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0x134B37C", Offset = "0x134B37C", VA = "0x134B37C")]
	private static void SaveMeteorState(int state)
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0x134B60C", Offset = "0x134B60C", VA = "0x134B60C")]
	private void Start()
	{
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0x134ABF4", Offset = "0x134ABF4", VA = "0x134ABF4")]
	public void ClearParticles()
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0x134B838", Offset = "0x134B838", VA = "0x134B838")]
	[IteratorStateMachine(typeof(<EnableParticlesOverTime>d__29))]
	public IEnumerator<float> EnableParticlesOverTime()
	{
		return null;
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0x134B8D4", Offset = "0x134B8D4", VA = "0x134B8D4")]
	private void SpawnShrimps()
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0x134B710", Offset = "0x134B710", VA = "0x134B710")]
	private void InitCurrentMeteorState()
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0x134B16C", Offset = "0x134B16C", VA = "0x134B16C")]
	public void SetActiveTorches(int amount)
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0x134C88C", Offset = "0x134C88C", VA = "0x134C88C")]
	private void PreLightTorches(int amount)
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0x134C76C", Offset = "0x134C76C", VA = "0x134C76C")]
	private void SetTorchListenEvent(int torchIndex)
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0x134C704", Offset = "0x134C704", VA = "0x134C704")]
	private void ClearTorchLitCallbacks()
	{
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0x134C904", Offset = "0x134C904", VA = "0x134C904")]
	private void MigoTorchLit()
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0x134CAE8", Offset = "0x134CAE8", VA = "0x134CAE8")]
	public void CheckForPhase1Status()
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0x134B9C0", Offset = "0x134B9C0", VA = "0x134B9C0")]
	public void Phase1Activated(bool playVoice = true)
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x134BD9C", Offset = "0x134BD9C", VA = "0x134BD9C")]
	private void AfterPhase1()
	{
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x134CC3C", Offset = "0x134CC3C", VA = "0x134CC3C")]
	public void CheckForPhase2Status()
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x134C108", Offset = "0x134C108", VA = "0x134C108")]
	public void Phase2Activated(bool playVoice = true)
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x134C350", Offset = "0x134C350", VA = "0x134C350")]
	private void AfterPhase2()
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x134CD90", Offset = "0x134CD90", VA = "0x134CD90")]
	public void CheckForPhase3Status()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x134CEDC", Offset = "0x134CEDC", VA = "0x134CEDC")]
	public void Phase3Activated()
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x134CF4C", Offset = "0x134CF4C", VA = "0x134CF4C")]
	public void ResetAll()
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0x134D084", Offset = "0x134D084", VA = "0x134D084")]
	public MeteorEndingManager()
	{
	}
}
[Token(Token = "0x2000101")]
public abstract class Chameleon : Enemy
{
	[Token(Token = "0x2000102")]
	[CompilerGenerated]
	private sealed class <LookAtTargetForTime>d__55 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Chameleon <>4__this;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform target;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform <oldTarget>5__2;

		[Token(Token = "0x170000AA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60006F7")]
			[Address(RVA = "0x13508B8", Offset = "0x13508B8", VA = "0x13508B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006F9")]
			[Address(RVA = "0x1350900", Offset = "0x1350900", VA = "0x1350900", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x134F964", Offset = "0x134F964", VA = "0x134F964")]
		[DebuggerHidden]
		public <LookAtTargetForTime>d__55(int <>1__state)
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x1350730", Offset = "0x1350730", VA = "0x1350730", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x1350734", Offset = "0x1350734", VA = "0x1350734", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x13508C0", Offset = "0x13508C0", VA = "0x13508C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000103")]
	[CompilerGenerated]
	private sealed class <Climbing>d__63 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Chameleon <>4__this;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 <startPos>5__2;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <endPos>5__3;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <targetRotY>5__4;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <lerpTimer>5__5;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion <startRot>5__6;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion <targetRot>5__7;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float <duration>5__8;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float <detachDistance>5__9;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float <rayDistance>5__10;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float <normalizedTime>5__11;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private NavMeshHit <navMeshHit>5__12;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool <nearestPointOnNavMesh>5__13;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float <distanceToNavMesh>5__14;

		[Token(Token = "0x170000AC")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60006FD")]
			[Address(RVA = "0x13518BC", Offset = "0x13518BC", VA = "0x13518BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006FF")]
			[Address(RVA = "0x1351904", Offset = "0x1351904", VA = "0x1351904", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x1350490", Offset = "0x1350490", VA = "0x1350490")]
		[DebuggerHidden]
		public <Climbing>d__63(int <>1__state)
		{
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x135095C", Offset = "0x135095C", VA = "0x135095C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x1350960", Offset = "0x1350960", VA = "0x1350960", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x13518C4", Offset = "0x13518C4", VA = "0x13518C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000104")]
	[CompilerGenerated]
	private sealed class <JumpDown>d__64 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Chameleon <>4__this;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 <startPos>5__2;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <jumpOverPos>5__3;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <endPos>5__4;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion <targetRot>5__5;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <lerpTimer>5__6;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <normalizedTime>5__7;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <speed>5__8;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float <distance>5__9;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private NavMeshHit <navMeshHit>5__10;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool <nearestPointOnNavMesh>5__11;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float <distanceToNavMesh>5__12;

		[Token(Token = "0x170000AE")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000703")]
			[Address(RVA = "0x1352370", Offset = "0x1352370", VA = "0x1352370", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000705")]
			[Address(RVA = "0x13523B8", Offset = "0x13523B8", VA = "0x13523B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x13504B8", Offset = "0x13504B8", VA = "0x13504B8")]
		[DebuggerHidden]
		public <JumpDown>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x1351960", Offset = "0x1351960", VA = "0x1351960", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x1351964", Offset = "0x1351964", VA = "0x1351964", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x1352378", Offset = "0x1352378", VA = "0x1352378", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000105")]
	[CompilerGenerated]
	private sealed class <DespawnCoroutine>d__66 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Chameleon <>4__this;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject <fx>5__2;

		[Token(Token = "0x170000B0")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000709")]
			[Address(RVA = "0x1352780", Offset = "0x1352780", VA = "0x1352780", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600070B")]
			[Address(RVA = "0x13527C8", Offset = "0x13527C8", VA = "0x13527C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x13505F8", Offset = "0x13505F8", VA = "0x13505F8")]
		[DebuggerHidden]
		public <DespawnCoroutine>d__66(int <>1__state)
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x1352414", Offset = "0x1352414", VA = "0x1352414", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x1352418", Offset = "0x1352418", VA = "0x1352418", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x1352788", Offset = "0x1352788", VA = "0x1352788", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private AimIK aimIK;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	protected Transform itemParent;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	protected Transform handPoint;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	protected Transform tonguePoint;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	protected GameObject[] tongueGrabTriggers;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	protected LayerMask pickUpLayers;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	[SerializeField]
	protected bool onlyGrabIfEmptyHand;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B5")]
	[SerializeField]
	protected bool useAlertAnimation;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	protected AudioSource idleAudioSource;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	protected AudioClip[] walkingStepAudioClips;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	protected bool _lookForGroundLoots;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	protected Collider[] myColliders;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public bool onlyPickUpLoot;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	protected HVRGrabbable _grabbedItem;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	protected bool _itemInTongue;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	protected CoroutineHandle _lookAtToolHandle;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	protected List<HVRGrabbable> _grabbablesNearby;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	protected Collider[] _physicsCollidersNearby;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	protected SharedGameObject _pickUpItem;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	protected SharedBool _startPickUp;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	protected float _nextGrabbaleCheck;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	protected System.Action _onStartedPickUp;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	protected Action<GameObject> _onMovedItemToHand;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	protected BetterVelocityEstimator _velocityEstimator;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private int _speedHash;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
	private bool _onOfflink;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private Vector3 _originalAnimatorLocalPosition;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
	private Vector3 _climbAnimatorTargetPosition;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private GameObject _previousPickUp;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private float _smoothSpeed;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
	private float _lastHurtTime;

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x134D708", Offset = "0x134D708", VA = "0x134D708")]
	[ContextMenu("AddCollidersToMyColliders")]
	private void AddCollidersToMyColliders()
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x134D760", Offset = "0x134D760", VA = "0x134D760", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x134D820", Offset = "0x134D820", VA = "0x134D820", Slot = "69")]
	protected override void GetReferences()
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x134D9B8", Offset = "0x134D9B8", VA = "0x134D9B8", Slot = "87")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x134DD64", Offset = "0x134DD64", VA = "0x134DD64")]
	public void FootHitsGround()
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0x134DE44", Offset = "0x134DE44", VA = "0x134DE44", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0x134DE4C", Offset = "0x134DE4C", VA = "0x134DE4C", Slot = "91")]
	public override void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0x134DFF4", Offset = "0x134DFF4", VA = "0x134DFF4", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0x134DFFC", Offset = "0x134DFFC", VA = "0x134DFFC", Slot = "86")]
	public override void Release()
	{
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x134E16C", Offset = "0x134E16C", VA = "0x134E16C", Slot = "77")]
	public override void Aggro()
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0x134E174", Offset = "0x134E174", VA = "0x134E174", Slot = "78")]
	[PunRPC]
	protected override void AggroRPC()
	{
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0x134E1F0", Offset = "0x134E1F0", VA = "0x134E1F0", Slot = "92")]
	protected virtual void StartTongueGrabAnimation()
	{
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0x134E958", Offset = "0x134E958", VA = "0x134E958", Slot = "93")]
	[PunRPC]
	protected virtual void TongueGrabRPC()
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x134E9AC", Offset = "0x134E9AC", VA = "0x134E9AC")]
	protected void StartAimIKAtPlayer()
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x134EC68", Offset = "0x134EC68", VA = "0x134EC68", Slot = "94")]
	[PunRPC]
	protected virtual void StartLookingAtViewIdRPC(int viewId, bool temporary)
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x134F000", Offset = "0x134F000", VA = "0x134F000", Slot = "95")]
	[PunRPC]
	protected virtual void StartLookingAtProp(int propId, bool temporary, int roomPropControllerViewId)
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x134F190", Offset = "0x134F190", VA = "0x134F190", Slot = "96")]
	protected virtual void StartLookingAtPropOffline(Prop prop, bool temporary)
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x134F29C", Offset = "0x134F29C", VA = "0x134F29C")]
	protected void StopAimIK()
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x134F3B0", Offset = "0x134F3B0", VA = "0x134F3B0", Slot = "97")]
	[PunRPC]
	protected virtual void StopLookingRPC()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x134DC80", Offset = "0x134DC80", VA = "0x134DC80")]
	protected void ReleaseAndResetGrabbedItem()
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x134F3B4", Offset = "0x134F3B4", VA = "0x134F3B4")]
	private void SetToolSocketActive(bool value)
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x134DBA8", Offset = "0x134DBA8", VA = "0x134DBA8")]
	public void SetGrabTriggers(bool value)
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x134F534", Offset = "0x134F534", VA = "0x134F534")]
	[PunRPC]
	public void GrabItemRPC(int viewID)
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x134F6CC", Offset = "0x134F6CC", VA = "0x134F6CC")]
	public void GrabItem(HVRGrabbable item)
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x134EDF4", Offset = "0x134EDF4", VA = "0x134EDF4")]
	[IteratorStateMachine(typeof(<LookAtTargetForTime>d__55))]
	protected IEnumerator<float> LookAtTargetForTime(Transform target, float time)
	{
		return null;
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x134EE94", Offset = "0x134EE94", VA = "0x134EE94")]
	protected void SetLookTarget(Transform target)
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x134DB64", Offset = "0x134DB64", VA = "0x134DB64")]
	protected void ClearLookAt()
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x134F98C", Offset = "0x134F98C", VA = "0x134F98C", Slot = "74")]
	protected override void HurtAnimation()
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0x134FA3C", Offset = "0x134FA3C", VA = "0x134FA3C", Slot = "98")]
	public virtual void MoveItemFromTongueToHand()
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0x134FC74", Offset = "0x134FC74", VA = "0x134FC74", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x134FB74", Offset = "0x134FB74", VA = "0x134FB74")]
	private void TargetRandomGrabbableForPickUp()
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x134E8DC", Offset = "0x134E8DC", VA = "0x134E8DC")]
	private void ResetPickUp()
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0x135041C", Offset = "0x135041C", VA = "0x135041C")]
	[IteratorStateMachine(typeof(<Climbing>d__63))]
	private IEnumerator<float> Climbing()
	{
		return null;
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x13503A8", Offset = "0x13503A8", VA = "0x13503A8")]
	[IteratorStateMachine(typeof(<JumpDown>d__64))]
	private IEnumerator<float> JumpDown()
	{
		return null;
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x13504E0", Offset = "0x13504E0", VA = "0x13504E0", Slot = "75")]
	[PunRPC]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0x1350584", Offset = "0x1350584", VA = "0x1350584")]
	[IteratorStateMachine(typeof(<DespawnCoroutine>d__66))]
	public IEnumerator<float> DespawnCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0x1350620", Offset = "0x1350620", VA = "0x1350620")]
	protected Chameleon()
	{
	}
}
[Token(Token = "0x2000106")]
public class ChameleonGrabTrigger : MonoBehaviour
{
	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _grabbing;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Chameleon chameleon;

	[Token(Token = "0x600070C")]
	[Address(RVA = "0x1352824", Offset = "0x1352824", VA = "0x1352824")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x13528DC", Offset = "0x13528DC", VA = "0x13528DC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0x1352BF4", Offset = "0x1352BF4", VA = "0x1352BF4")]
	public ChameleonGrabTrigger()
	{
	}
}
[Token(Token = "0x2000107")]
public class Alert : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SharedBool checkLOS;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("The distance that the agent can see")]
	public SharedFloat viewDistance;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("The object that is found")]
	public SharedGameObject returnedObject;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Collider[] overlapColliders;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("The LayerMask of the objects that we are searching for")]
	public LayerMask objectLayerMask;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("The LayerMask of the objects to ignore when performing the line of sight check")]
	public LayerMask ignoreLayerMask;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("Specifies the maximum number of colliders that the physics cast can collide with")]
	public int maxCollisionCount;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("The target raycast offset relative to the pivot position")]
	public SharedVector3 targetOffset;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public bool searchHands;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private HumanBodyBones targetBone;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private IKillable targetIKillable;

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x1352C04", Offset = "0x1352C04", VA = "0x1352C04", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x1352F28", Offset = "0x1352F28", VA = "0x1352F28")]
	public GameObject WithinSight(Transform transform, Vector3 positionOffset, float fieldOfViewAngle, float viewDistance, Collider[] overlapColliders, LayerMask objectLayerMask, Vector3 targetOffset, LayerMask ignoreLayerMask, bool useTargetBone, HumanBodyBones targetBone, bool drawDebugRay)
	{
		return null;
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0x1353228", Offset = "0x1353228", VA = "0x1353228")]
	public Alert()
	{
	}
}
[Token(Token = "0x2000108")]
[TaskDescription("Returns Success if animator bool is bool2")]
public class BetterAnimatorBoolComparison : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("The Object to use")]
	public SharedBehaviour specifiedObject;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("The name of the parameter")]
	public SharedString paramaterName;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("The second bool")]
	public SharedBool bool2;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Animator animator;

	[Token(Token = "0x6000712")]
	[Address(RVA = "0x13532B4", Offset = "0x13532B4", VA = "0x13532B4", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x1353394", Offset = "0x1353394", VA = "0x1353394", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x135343C", Offset = "0x135343C", VA = "0x135343C", Slot = "16")]
	public override void OnReset()
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x1353470", Offset = "0x1353470", VA = "0x1353470")]
	public BetterAnimatorBoolComparison()
	{
	}
}
[Token(Token = "0x2000109")]
[TaskDescription("Returns Success if in shadows and away from lights (and player)")]
public class IsInShadows : BehaviorDesigner.Runtime.Tasks.Action
{
	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[BehaviorDesigner.Runtime.Tasks.Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
	public SharedGameObject targetGameObject;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SharedBehaviour navmeshAgentBehaviour;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private NavMeshAgent navMeshAgent;

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x1353478", Offset = "0x1353478", VA = "0x1353478", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x135356C", Offset = "0x135356C", VA = "0x135356C", Slot = "6")]
	public override BehaviorDesigner.Runtime.Tasks.TaskStatus OnUpdate()
	{
		return default(BehaviorDesigner.Runtime.Tasks.TaskStatus);
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x13536C4", Offset = "0x13536C4", VA = "0x13536C4", Slot = "16")]
	public override void OnReset()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x13536D0", Offset = "0x13536D0", VA = "0x13536D0")]
	public IsInShadows()
	{
	}
}
[Token(Token = "0x200010A")]
[RequireComponent(typeof(ParticleSystem))]
public class DestroyOnParticleSystemDeath : MonoBehaviour, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x200010B")]
	[CompilerGenerated]
	private sealed class <_CheckParticleSystem>d__4 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DestroyOnParticleSystemDeath <>4__this;

		[Token(Token = "0x170000B2")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000722")]
			[Address(RVA = "0x1353938", Offset = "0x1353938", VA = "0x1353938", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000724")]
			[Address(RVA = "0x1353980", Offset = "0x1353980", VA = "0x1353980", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x1353844", Offset = "0x1353844", VA = "0x1353844")]
		[DebuggerHidden]
		public <_CheckParticleSystem>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x1353874", Offset = "0x1353874", VA = "0x1353874", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x1353878", Offset = "0x1353878", VA = "0x1353878", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x1353940", Offset = "0x1353940", VA = "0x1353940", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem particles;

	[Token(Token = "0x600071A")]
	[Address(RVA = "0x13536D8", Offset = "0x13536D8", VA = "0x13536D8", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0x13537E8", Offset = "0x13537E8", VA = "0x13537E8", Slot = "5")]
	public void Release()
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0x13537EC", Offset = "0x13537EC", VA = "0x13537EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0x1353774", Offset = "0x1353774", VA = "0x1353774")]
	[IteratorStateMachine(typeof(<_CheckParticleSystem>d__4))]
	private IEnumerator<float> _CheckParticleSystem()
	{
		return null;
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0x135386C", Offset = "0x135386C", VA = "0x135386C")]
	public DestroyOnParticleSystemDeath()
	{
	}
}
[Token(Token = "0x200010C")]
public class DistanceBasedColliderSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] highQualityColliders;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] lowQualityColliders;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool _lowQualityMode;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool _disabled;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float nextCheckTime;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lowQualityDistance;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float cullDistance;

	[Token(Token = "0x6000725")]
	[Address(RVA = "0x13539DC", Offset = "0x13539DC", VA = "0x13539DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0x1353B3C", Offset = "0x1353B3C", VA = "0x1353B3C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0x1353B44", Offset = "0x1353B44", VA = "0x1353B44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0x13539E4", Offset = "0x13539E4", VA = "0x13539E4")]
	private void SetLowQualityColliders(bool isLowQuality)
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0x1353DAC", Offset = "0x1353DAC", VA = "0x1353DAC")]
	private void DisableBoth()
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0x1353EEC", Offset = "0x1353EEC", VA = "0x1353EEC")]
	public DistanceBasedColliderSwitcher()
	{
	}
}
[Token(Token = "0x200010D")]
[SelectionBase]
public class DroneConstruct : Enemy, IRangedAttacker, IAttacker, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x200010E")]
	[CompilerGenerated]
	private sealed class <_FireProjectilesCoroutine>d__82 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DroneConstruct <>4__this;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 <attackEulerAngles>5__2;

		[Token(Token = "0x170000B9")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0x1358498", Offset = "0x1358498", VA = "0x1358498", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000BA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000763")]
			[Address(RVA = "0x13584E0", Offset = "0x13584E0", VA = "0x13584E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x1355C10", Offset = "0x1355C10", VA = "0x1355C10")]
		[DebuggerHidden]
		public <_FireProjectilesCoroutine>d__82(int <>1__state)
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x1358238", Offset = "0x1358238", VA = "0x1358238", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x135823C", Offset = "0x135823C", VA = "0x135823C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x13584A0", Offset = "0x13584A0", VA = "0x13584A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000110")]
	[CompilerGenerated]
	private sealed class <_DelayedExplosion>d__86 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DroneConstruct <>4__this;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource <implosion>5__2;

		[Token(Token = "0x170000BB")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000769")]
			[Address(RVA = "0x1358C70", Offset = "0x1358C70", VA = "0x1358C70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000BC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600076B")]
			[Address(RVA = "0x1358CB8", Offset = "0x1358CB8", VA = "0x1358CB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x135656C", Offset = "0x135656C", VA = "0x135656C")]
		[DebuggerHidden]
		public <_DelayedExplosion>d__86(int <>1__state)
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0x13585C4", Offset = "0x13585C4", VA = "0x13585C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x13585C8", Offset = "0x13585C8", VA = "0x13585C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x1358C78", Offset = "0x1358C78", VA = "0x1358C78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000111")]
	[CompilerGenerated]
	private sealed class <CloakCoroutine>d__106 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DroneConstruct <>4__this;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x170000BD")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600076F")]
			[Address(RVA = "0x1358F00", Offset = "0x1358F00", VA = "0x1358F00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000771")]
			[Address(RVA = "0x1358F48", Offset = "0x1358F48", VA = "0x1358F48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x1357EB4", Offset = "0x1357EB4", VA = "0x1357EB4")]
		[DebuggerHidden]
		public <CloakCoroutine>d__106(int <>1__state)
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x1358D14", Offset = "0x1358D14", VA = "0x1358D14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x1358D18", Offset = "0x1358D18", VA = "0x1358D18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x1358F08", Offset = "0x1358F08", VA = "0x1358F08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000112")]
	[CompilerGenerated]
	private sealed class <DecloakCoroutine>d__107 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DroneConstruct <>4__this;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x170000BF")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000775")]
			[Address(RVA = "0x13591D4", Offset = "0x13591D4", VA = "0x13591D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000777")]
			[Address(RVA = "0x135921C", Offset = "0x135921C", VA = "0x135921C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x1357EDC", Offset = "0x1357EDC", VA = "0x1357EDC")]
		[DebuggerHidden]
		public <DecloakCoroutine>d__107(int <>1__state)
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x1358FA4", Offset = "0x1358FA4", VA = "0x1358FA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x1358FA8", Offset = "0x1358FA8", VA = "0x1358FA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x13591DC", Offset = "0x13591DC", VA = "0x13591DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000113")]
	[CompilerGenerated]
	private sealed class <StopHidingAfterTime>d__111 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DroneConstruct <>4__this;

		[Token(Token = "0x170000C1")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600077B")]
			[Address(RVA = "0x13593B8", Offset = "0x13593B8", VA = "0x13593B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0x1359400", Offset = "0x1359400", VA = "0x1359400", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x13580BC", Offset = "0x13580BC", VA = "0x13580BC")]
		[DebuggerHidden]
		public <StopHidingAfterTime>d__111(int <>1__state)
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x1359278", Offset = "0x1359278", VA = "0x1359278", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x135927C", Offset = "0x135927C", VA = "0x135927C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x13593C0", Offset = "0x13593C0", VA = "0x13593C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000114")]
	[CompilerGenerated]
	private sealed class <StartHidingAfterTime>d__112 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DroneConstruct <>4__this;

		[Token(Token = "0x170000C3")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000781")]
			[Address(RVA = "0x135959C", Offset = "0x135959C", VA = "0x135959C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000783")]
			[Address(RVA = "0x13595E4", Offset = "0x13595E4", VA = "0x13595E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x13580E4", Offset = "0x13580E4", VA = "0x13580E4")]
		[DebuggerHidden]
		public <StartHidingAfterTime>d__112(int <>1__state)
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x135945C", Offset = "0x135945C", VA = "0x135945C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x1359460", Offset = "0x1359460", VA = "0x1359460", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x13595A4", Offset = "0x13595A4", VA = "0x13595A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	protected GameObject modelParent;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	protected Transform droneHead;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	protected float pursueSpeed;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	[SerializeField]
	protected float evadeSpeed;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GameObject projectilePrefab;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public float projectileSpeed;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	public int projectileDamage;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public AudioClip attackClip;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public AudioClip preAttackClip;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public GameObject plasmaBallSpawnPos;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public GameObject armature;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private AudioSource idleAudioSource;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private AudioSource movingAudioSource;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public bool dynamicBuzzPitch;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public float maxFlyHeight;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public bool canAttack;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	public float visionRange;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public float blastRadius;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
	public float blastPhysicsForce;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public LayerMask blastHitLayers;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	public DamageType blastDamageType;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public AudioClip blastClip;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private Renderer[] _myRenderers;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private float _startOffset;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	private float _targetOffset;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private float _randomOffset;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	private Vector3 _attackTarget;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	public LayerMask flyheightLayerMask;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
	public LayerMask flyAboveLayers;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private SharedFloat _flyOffset;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private float _nextJumpTime;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private Rigidbody[] _ragdollRigidbodies;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private Collider[] _ragdollColliders;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private bool _spawnedLoot;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private Transform _bulletsIgnoredPlayer;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[SerializeField]
	private UnityEngine.Color _originalEmission;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[SerializeField]
	private ParticleSystem _implosionParticle;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[SerializeField]
	private AudioClip _implosionSFX;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	private bool showBlastRadiusGizmo;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	private ParticleSystem dieParticleSystemPrefabAndroid;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	[SerializeField]
	private Renderer[] bodyRenderers;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	[SerializeField]
	private Material cloakMaterial;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[SerializeField]
	private Material basicMaterial;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	[SerializeField]
	private AudioClip cloackAudioClip;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[SerializeField]
	private AudioClip deCloackAudioClip;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private float _originalBaseCloakAlphaMax;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
	private bool _cloaked;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	private int _alphaMax;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
	private int _alphaMin;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	private CoroutineHandle _coroutineHandle;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	private float _flyLevel;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private float _originalMaxFly;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	private Collider[] _blastResults;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	private List<Transform> _alreadyHitTransforms;

	[Token(Token = "0x40006D5")]
	private const int MaxPlayerAmmo = 3;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	private int _siblingIndex;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
	private float _maxLocalY;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	private SharedBool _hiding;

	[Token(Token = "0x170000B4")]
	public int GetAttackDamage
	{
		[Token(Token = "0x600072B")]
		[Address(RVA = "0x1353F00", Offset = "0x1353F00", VA = "0x1353F00", Slot = "95")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000B5")]
	public DamageType GetDamageType
	{
		[Token(Token = "0x600072C")]
		[Address(RVA = "0x1353F08", Offset = "0x1353F08", VA = "0x1353F08", Slot = "94")]
		get
		{
			return default(DamageType);
		}
	}

	[Token(Token = "0x170000B6")]
	public Transform GetTransform
	{
		[Token(Token = "0x600072D")]
		[Address(RVA = "0x1353F10", Offset = "0x1353F10", VA = "0x1353F10", Slot = "96")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B7")]
	private List<Transform> IAttacker.GetAlreadyHitTransforms
	{
		[Token(Token = "0x600072E")]
		[Address(RVA = "0x1353F18", Offset = "0x1353F18", VA = "0x1353F18", Slot = "97")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B8")]
	public float GetPushForce
	{
		[Token(Token = "0x600072F")]
		[Address(RVA = "0x1353F20", Offset = "0x1353F20", VA = "0x1353F20", Slot = "98")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0x1353FAC", Offset = "0x1353FAC", VA = "0x1353FAC", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0x1353FE8", Offset = "0x1353FE8", VA = "0x1353FE8", Slot = "69")]
	protected override void GetReferences()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x135421C", Offset = "0x135421C", VA = "0x135421C", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x1354224", Offset = "0x1354224", VA = "0x1354224", Slot = "91")]
	public override void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x1354554", Offset = "0x1354554", VA = "0x1354554", Slot = "85")]
	public override void Acquire()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0x135455C", Offset = "0x135455C", VA = "0x135455C", Slot = "86")]
	public override void Release()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0x1354564", Offset = "0x1354564", VA = "0x1354564")]
	private void HVRRelease(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0x1354630", Offset = "0x1354630", VA = "0x1354630")]
	protected void SetRagdollKinematic(bool value)
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0x1354700", Offset = "0x1354700", VA = "0x1354700")]
	private void ZeroRagdollVelocity()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0x1354800", Offset = "0x1354800", VA = "0x1354800")]
	private void Start()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0x1354844", Offset = "0x1354844", VA = "0x1354844", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x1355800", Offset = "0x1355800", VA = "0x1355800", Slot = "99")]
	public virtual void PlayAttackAnimation(Vector3 target)
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x13559AC", Offset = "0x13559AC", VA = "0x13559AC", Slot = "100")]
	[PunRPC]
	protected virtual void PlayAttackAnimationRPC(Vector3 target)
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0x1355A9C", Offset = "0x1355A9C", VA = "0x1355A9C", Slot = "101")]
	[PunRPC]
	public virtual void FireProjectileRPC()
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0x1355B20", Offset = "0x1355B20", VA = "0x1355B20")]
	[IteratorStateMachine(typeof(<_FireProjectilesCoroutine>d__82))]
	private IEnumerator<float> _FireProjectilesCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0x1355C38", Offset = "0x1355C38", VA = "0x1355C38", Slot = "102")]
	public virtual void FireProjectile(Vector3 attackEulerAngles)
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0x13560C4", Offset = "0x13560C4", VA = "0x13560C4", Slot = "73")]
	[PunRPC]
	public override void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0x1356174", Offset = "0x1356174", VA = "0x1356174", Slot = "75")]
	[PunRPC]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0x135649C", Offset = "0x135649C", VA = "0x135649C")]
	[IteratorStateMachine(typeof(<_DelayedExplosion>d__86))]
	public IEnumerator<float> _DelayedExplosion()
	{
		return null;
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0x1356594", Offset = "0x1356594", VA = "0x1356594")]
	private void SpawnLoot()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0x1356608", Offset = "0x1356608", VA = "0x1356608", Slot = "79")]
	protected override AudioSource PlayClip(AudioClip clip, float variation = 0.1f, bool cooldown = false)
	{
		return null;
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0x1356750", Offset = "0x1356750", VA = "0x1356750")]
	private void ToggleEmission(bool value)
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0x1356880", Offset = "0x1356880", VA = "0x1356880")]
	private void EnableGrabbableRagdoll()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0x1356910", Offset = "0x1356910", VA = "0x1356910")]
	private void Explode()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0x1356F88", Offset = "0x1356F88", VA = "0x1356F88")]
	private void EditTerrain(DiggingArea world, Vector3 point, float deformSpeed, float range)
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0x1357174", Offset = "0x1357174", VA = "0x1357174")]
	protected void ToggleRagdollColliders(bool value)
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0x13571DC", Offset = "0x13571DC", VA = "0x13571DC")]
	protected void ToggleRagdollGravity(bool value)
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x13572AC", Offset = "0x13572AC", VA = "0x13572AC")]
	private void IgnoreInterCollisions()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x1357358", Offset = "0x1357358", VA = "0x1357358", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x1357360", Offset = "0x1357360", VA = "0x1357360", Slot = "80")]
	protected override void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x13574A8", Offset = "0x13574A8", VA = "0x13574A8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x13575E0", Offset = "0x13575E0", VA = "0x13575E0", Slot = "78")]
	[PunRPC]
	protected override void AggroRPC()
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x13577D0", Offset = "0x13577D0", VA = "0x13577D0", Slot = "84")]
	public override void AddPushForce(Vector3 force)
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x1357828", Offset = "0x1357828", VA = "0x1357828", Slot = "87")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x1357C5C", Offset = "0x1357C5C", VA = "0x1357C5C", Slot = "89")]
	public override Vector3 GetLootSpawnPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x1357CE4", Offset = "0x1357CE4", VA = "0x1357CE4", Slot = "103")]
	public virtual void IgnorePlayerCollision(bool ignore, PlayerAvatar player)
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x13560F8", Offset = "0x13560F8", VA = "0x13560F8")]
	private void Cloak()
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x1355B94", Offset = "0x1355B94", VA = "0x1355B94")]
	private void Decloak()
	{
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x1357DAC", Offset = "0x1357DAC", VA = "0x1357DAC")]
	[IteratorStateMachine(typeof(<CloakCoroutine>d__106))]
	private IEnumerator<float> CloakCoroutine(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x1357E30", Offset = "0x1357E30", VA = "0x1357E30")]
	[IteratorStateMachine(typeof(<DecloakCoroutine>d__107))]
	private IEnumerator<float> DecloakCoroutine(float time)
	{
		return null;
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x13544C8", Offset = "0x13544C8", VA = "0x13544C8")]
	[PunRPC]
	private void InstantCloackSyncRPC(bool cloacked)
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0x1356510", Offset = "0x1356510", VA = "0x1356510")]
	private void KillPreviousCloakCoroutine()
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0x1357F04", Offset = "0x1357F04", VA = "0x1357F04")]
	[PunRPC]
	public void SetHidingRPC(bool value)
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0x1358038", Offset = "0x1358038", VA = "0x1358038")]
	[IteratorStateMachine(typeof(<StopHidingAfterTime>d__111))]
	private IEnumerator<float> StopHidingAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x135774C", Offset = "0x135774C", VA = "0x135774C")]
	[IteratorStateMachine(typeof(<StartHidingAfterTime>d__112))]
	private IEnumerator<float> StartHidingAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0x135810C", Offset = "0x135810C", VA = "0x135810C")]
	public DroneConstruct()
	{
	}
}
[Token(Token = "0x2000115")]
[SelectionBase]
public class DuckfootNautilus : Enemy, IMeleeAttacker, IAttacker
{
	[Token(Token = "0x2000116")]
	public enum AttackType
	{
		[Token(Token = "0x4000715")]
		melee,
		[Token(Token = "0x4000716")]
		ranged
	}

	[Token(Token = "0x2000117")]
	[CompilerGenerated]
	private sealed class <StopWanderMEC>d__56 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DuckfootNautilus <>4__this;

		[Token(Token = "0x170000CA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60007B5")]
			[Address(RVA = "0x135C648", Offset = "0x135C648", VA = "0x135C648", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000CB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007B7")]
			[Address(RVA = "0x135C690", Offset = "0x135C690", VA = "0x135C690", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x135AB34", Offset = "0x135AB34", VA = "0x135AB34")]
		[DebuggerHidden]
		public <StopWanderMEC>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x135C5A4", Offset = "0x135C5A4", VA = "0x135C5A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x135C5A8", Offset = "0x135C5A8", VA = "0x135C5A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x135C650", Offset = "0x135C650", VA = "0x135C650", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000118")]
	[CompilerGenerated]
	private sealed class <DelayedSetGeode>d__57 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DuckfootNautilus <>4__this;

		[Token(Token = "0x170000CC")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60007BB")]
			[Address(RVA = "0x135C90C", Offset = "0x135C90C", VA = "0x135C90C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000CD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007BD")]
			[Address(RVA = "0x135C954", Offset = "0x135C954", VA = "0x135C954", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x135AB5C", Offset = "0x135AB5C", VA = "0x135AB5C")]
		[DebuggerHidden]
		public <DelayedSetGeode>d__57(int <>1__state)
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x135C6EC", Offset = "0x135C6EC", VA = "0x135C6EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x135C6F0", Offset = "0x135C6F0", VA = "0x135C6F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x135C914", Offset = "0x135C914", VA = "0x135C914", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000119")]
	[CompilerGenerated]
	private sealed class <DelayedAlert>d__66 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DuckfootNautilus <>4__this;

		[Token(Token = "0x170000CE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007C1")]
			[Address(RVA = "0x135CA60", Offset = "0x135CA60", VA = "0x135CA60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007C3")]
			[Address(RVA = "0x135CAA8", Offset = "0x135CAA8", VA = "0x135CAA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x135B428", Offset = "0x135B428", VA = "0x135B428")]
		[DebuggerHidden]
		public <DelayedAlert>d__66(int <>1__state)
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x135C9B0", Offset = "0x135C9B0", VA = "0x135C9B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x135C9B4", Offset = "0x135C9B4", VA = "0x135C9B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x135CA68", Offset = "0x135CA68", VA = "0x135CA68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200011A")]
	[CompilerGenerated]
	private sealed class <DelayedTurnIntoGeode>d__69 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DuckfootNautilus <>4__this;

		[Token(Token = "0x170000D0")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60007C7")]
			[Address(RVA = "0x135CD9C", Offset = "0x135CD9C", VA = "0x135CD9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000D1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007C9")]
			[Address(RVA = "0x135CDE4", Offset = "0x135CDE4", VA = "0x135CDE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x135B7D4", Offset = "0x135B7D4", VA = "0x135B7D4")]
		[DebuggerHidden]
		public <DelayedTurnIntoGeode>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x135CAB0", Offset = "0x135CAB0", VA = "0x135CAB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x135CAB4", Offset = "0x135CAB4", VA = "0x135CAB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x135CDA4", Offset = "0x135CDA4", VA = "0x135CDA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200011B")]
	[CompilerGenerated]
	private sealed class <ChargeAttackCoroutine>d__75 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DuckfootNautilus <>4__this;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <maxWaitForAnim>5__2;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <time>5__3;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <stunned>5__4;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool <pitted>5__5;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timeForImpact>5__6;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <timeForPit>5__7;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timeLeft>5__8;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <distanceTraveled>5__9;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <timeStuck>5__10;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <droppingTimeLeft>5__11;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <speed>5__12;

		[Token(Token = "0x170000D2")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60007CD")]
			[Address(RVA = "0x135DBF4", Offset = "0x135DBF4", VA = "0x135DBF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000D3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007CF")]
			[Address(RVA = "0x135DC3C", Offset = "0x135DC3C", VA = "0x135DC3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x135BD40", Offset = "0x135BD40", VA = "0x135BD40")]
		[DebuggerHidden]
		public <ChargeAttackCoroutine>d__75(int <>1__state)
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x135CE40", Offset = "0x135CE40", VA = "0x135CE40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x135CE44", Offset = "0x135CE44", VA = "0x135CE44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x135DBFC", Offset = "0x135DBFC", VA = "0x135DBFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public Transform lootSpawnPointTransform;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public BetterVelocityEstimator velocityEstimator;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public int meleeDamage;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	public float moveAnimationSpeedMultiplier;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public DamageType meleeDamageType;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public AudioClip attackClip;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public AudioClip preAttackClip;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public AudioClip snoreClip;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	protected bool wanderWhenNotAggroed;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	protected GameObject geode;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	protected GameObject monster;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	protected GameObject monsterColliders;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[SerializeField]
	protected GameObject meleeColliders;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[SerializeField]
	protected GameObject rangedColliders;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[SerializeField]
	protected GameObject geodePrefab;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	protected float _originalOffset;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	private CoroutineHandle _stopWanderAfterHandle;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	protected float _standingStillWanderTimer;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
	protected int _blendID;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	protected float _nextSnore;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private SharedBool _sleeping;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private float _smoothSpeed;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	private float _invulnerabilityTime;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private List<Transform> _alreadyHitTransforms;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	protected bool _charging;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
	private CoroutineHandle _chargeHandle;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	protected SharedFloat _chargeCooldownUntil;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	protected Collider[] _overlapBoxHits;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	[SerializeField]
	protected LayerMask _chargeCrashLayers;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	[SerializeField]
	protected ParticleSystem _chargeHitParticlePrefab;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public AudioClip startChargeClip;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	public AudioClip chargeImpactClip;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private bool _breakCharge;

	[Token(Token = "0x170000C5")]
	public int GetAttackDamage
	{
		[Token(Token = "0x6000784")]
		[Address(RVA = "0x1359640", Offset = "0x1359640", VA = "0x1359640", Slot = "94")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000C6")]
	public DamageType GetDamageType
	{
		[Token(Token = "0x6000785")]
		[Address(RVA = "0x1359648", Offset = "0x1359648", VA = "0x1359648", Slot = "93")]
		get
		{
			return default(DamageType);
		}
	}

	[Token(Token = "0x170000C7")]
	public Transform GetTransform
	{
		[Token(Token = "0x6000786")]
		[Address(RVA = "0x1359650", Offset = "0x1359650", VA = "0x1359650", Slot = "95")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C8")]
	private List<Transform> IAttacker.GetAlreadyHitTransforms
	{
		[Token(Token = "0x6000787")]
		[Address(RVA = "0x1359658", Offset = "0x1359658", VA = "0x1359658", Slot = "96")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C9")]
	public float GetPushForce
	{
		[Token(Token = "0x6000788")]
		[Address(RVA = "0x1359660", Offset = "0x1359660", VA = "0x1359660", Slot = "97")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x13596F0", Offset = "0x13596F0", VA = "0x13596F0", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0x13596F8", Offset = "0x13596F8", VA = "0x13596F8", Slot = "69")]
	protected override void GetReferences()
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0x13598CC", Offset = "0x13598CC", VA = "0x13598CC", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0x135A008", Offset = "0x135A008", VA = "0x135A008")]
	[PunRPC]
	protected void SnoreRPC()
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0x135A0A4", Offset = "0x135A0A4", VA = "0x135A0A4", Slot = "98")]
	[PunRPC]
	protected virtual void AttackRPC()
	{
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0x135A168", Offset = "0x135A168", VA = "0x135A168", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0x135A170", Offset = "0x135A170", VA = "0x135A170", Slot = "86")]
	public override void Release()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0x135A344", Offset = "0x135A344", VA = "0x135A344", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0x135A34C", Offset = "0x135A34C", VA = "0x135A34C", Slot = "91")]
	public override void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0x135A708", Offset = "0x135A708", VA = "0x135A708", Slot = "92")]
	public void MeleeAttack()
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0x135A8A0", Offset = "0x135A8A0", VA = "0x135A8A0")]
	public void StartSneak()
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0x135A654", Offset = "0x135A654", VA = "0x135A654")]
	public void EndSneak()
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0x135AA4C", Offset = "0x135AA4C", VA = "0x135AA4C")]
	[IteratorStateMachine(typeof(<StopWanderMEC>d__56))]
	private IEnumerator<float> StopWanderMEC()
	{
		return null;
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0x135AAC0", Offset = "0x135AAC0", VA = "0x135AAC0")]
	[IteratorStateMachine(typeof(<DelayedSetGeode>d__57))]
	private IEnumerator<float> DelayedSetGeode()
	{
		return null;
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0x135AB84", Offset = "0x135AB84", VA = "0x135AB84", Slot = "99")]
	[PunRPC]
	public virtual void ToggleGeodeRPC(bool status)
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0x135AC5C", Offset = "0x135AC5C", VA = "0x135AC5C", Slot = "72")]
	protected override void CheckIfMasterAndToggleAI()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0x135AD38", Offset = "0x135AD38", VA = "0x135AD38", Slot = "78")]
	[PunRPC]
	protected override void AggroRPC()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0x135ADFC", Offset = "0x135ADFC", VA = "0x135ADFC")]
	protected void ForceTargetClosestPlayer(float maxRange = 20f)
	{
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0x1359E48", Offset = "0x1359E48", VA = "0x1359E48")]
	protected void SetSleeping(bool value)
	{
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0x135B09C", Offset = "0x135B09C", VA = "0x135B09C", Slot = "100")]
	public virtual void ToggleAttackTrigger(bool status, AttackType attackType)
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0x135B208", Offset = "0x135B208", VA = "0x135B208", Slot = "101")]
	public virtual void StartProjectile()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0x135B20C", Offset = "0x135B20C", VA = "0x135B20C", Slot = "73")]
	[PunRPC]
	public override void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0x135B3B4", Offset = "0x135B3B4", VA = "0x135B3B4")]
	[IteratorStateMachine(typeof(<DelayedAlert>d__66))]
	protected IEnumerator DelayedAlert()
	{
		return null;
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0x135B450", Offset = "0x135B450", VA = "0x135B450", Slot = "81")]
	public override bool GetIsActive()
	{
		return default(bool);
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0x135B4D4", Offset = "0x135B4D4", VA = "0x135B4D4", Slot = "75")]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0x135B760", Offset = "0x135B760", VA = "0x135B760")]
	[IteratorStateMachine(typeof(<DelayedTurnIntoGeode>d__69))]
	private IEnumerator<float> DelayedTurnIntoGeode()
	{
		return null;
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0x135B7FC", Offset = "0x135B7FC", VA = "0x135B7FC", Slot = "83")]
	protected override void DeAggro()
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0x135B81C", Offset = "0x135B81C", VA = "0x135B81C", Slot = "77")]
	public override void Aggro()
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0x135B974", Offset = "0x135B974", VA = "0x135B974")]
	private static void PlayVoiceLine()
	{
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0x135BB60", Offset = "0x135BB60", VA = "0x135BB60", Slot = "89")]
	public override Vector3 GetLootSpawnPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0x135BBE8", Offset = "0x135BBE8", VA = "0x135BBE8")]
	public void ChargeAttack()
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0x135BCCC", Offset = "0x135BCCC", VA = "0x135BCCC")]
	[IteratorStateMachine(typeof(<ChargeAttackCoroutine>d__75))]
	private IEnumerator<float> ChargeAttackCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0x135BD68", Offset = "0x135BD68", VA = "0x135BD68")]
	public void BreakChargeEarly()
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0x135BD74", Offset = "0x135BD74", VA = "0x135BD74", Slot = "90")]
	public override void PlayResetAnimationTrigger()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x135BDD4", Offset = "0x135BDD4", VA = "0x135BDD4")]
	[PunRPC]
	public void ChargeStartRPC()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x135BDB4", Offset = "0x135BDB4", VA = "0x135BDB4")]
	[PunRPC]
	public void ToggleMeleeCollidersRPC(bool status)
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x135BF0C", Offset = "0x135BF0C", VA = "0x135BF0C")]
	private bool CheckForPit()
	{
		return default(bool);
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0x135C214", Offset = "0x135C214", VA = "0x135C214")]
	private bool CheckForWallImpact()
	{
		return default(bool);
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0x135C36C", Offset = "0x135C36C", VA = "0x135C36C", Slot = "80")]
	protected override void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x135C438", Offset = "0x135C438", VA = "0x135C438")]
	public DuckfootNautilus()
	{
	}
}
[Token(Token = "0x200011C")]
public class EnemyDamagerCollider : MonoBehaviour
{
	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DamageType damageType;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int damage;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform parent;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IAttacker parentAttacker;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool sludgePlayer;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float sludgeDuration;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool lineOfSightCheck;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Vector3[] lineOfSightPoints;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private LayerMask lineOfSightBlockingLayers;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private bool pushPlayer;

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0x135DC98", Offset = "0x135DC98", VA = "0x135DC98")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0x135DED4", Offset = "0x135DED4", VA = "0x135DED4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0x135DFFC", Offset = "0x135DFFC", VA = "0x135DFFC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0x135E690", Offset = "0x135E690", VA = "0x135E690")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0x135E150", Offset = "0x135E150", VA = "0x135E150")]
	private void TryToMakeDamage(Collider other)
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0x135E808", Offset = "0x135E808", VA = "0x135E808")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x135E938", Offset = "0x135E938", VA = "0x135E938")]
	public EnemyDamagerCollider()
	{
	}
}
[Token(Token = "0x200011D")]
public class FungiShrimp : PlasmaShrimp
{
	[Token(Token = "0x200011E")]
	[CompilerGenerated]
	private sealed class <AttachToHandCoroutine>d__25 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FungiShrimp <>4__this;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CustomHVRHandGrabber hand;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerAvatar closestPlayer;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform <attachPoint>5__2;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion <rotationOffset>5__3;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 <positionOffset>5__4;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 <startPos>5__5;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion <startRot>5__6;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float <seconds>5__7;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float <timer>5__8;

		[Token(Token = "0x170000D4")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60007ED")]
			[Address(RVA = "0x1361A7C", Offset = "0x1361A7C", VA = "0x1361A7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007EF")]
			[Address(RVA = "0x1361AC4", Offset = "0x1361AC4", VA = "0x1361AC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x1360EB0", Offset = "0x1360EB0", VA = "0x1360EB0")]
		[DebuggerHidden]
		public <AttachToHandCoroutine>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x1360ED8", Offset = "0x1360ED8", VA = "0x1360ED8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x1360EDC", Offset = "0x1360EDC", VA = "0x1360EDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x1361A84", Offset = "0x1361A84", VA = "0x1361A84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	[SerializeField]
	private AudioSource bloodSuckingAudioSource;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	[SerializeField]
	private ParticleSystem infestParticleSystem;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private bool _attached;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	private CustomHVRHandGrabber _attachedHand;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	private PlayerAvatar _attachedPlayer;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	private CoroutineHandle _attachCoroutineHandle;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
	private float _nextDamageTick;

	[Token(Token = "0x4000742")]
	private const float DamageCooldown = 3f;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	private float _nextAttachPossible;

	[Token(Token = "0x4000744")]
	private const float AttachCooldown = 2f;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
	private float _nextCollisionDamageTime;

	[Token(Token = "0x4000746")]
	private const float TakeCollisionDamageCooldown = 0.5f;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	private Rigidbody _modelRigidbody;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	private PhotonView _modelPhotonView;

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0x135E948", Offset = "0x135E948", VA = "0x135E948", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x135E950", Offset = "0x135E950", VA = "0x135E950", Slot = "69")]
	protected override void GetReferences()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x135E9F0", Offset = "0x135E9F0", VA = "0x135E9F0", Slot = "87")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x135EA34", Offset = "0x135EA34", VA = "0x135EA34")]
	[PunRPC]
	private void ClearHandAttachmentRPC()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0x135EDC8", Offset = "0x135EDC8", VA = "0x135EDC8", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0x135EFD8", Offset = "0x135EFD8", VA = "0x135EFD8")]
	private void AttachedDeath(GameObject obj)
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0x135F0A0", Offset = "0x135F0A0", VA = "0x135F0A0", Slot = "75")]
	[PunRPC]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0x135F0E0", Offset = "0x135F0E0", VA = "0x135F0E0", Slot = "73")]
	[PunRPC]
	public override void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0x135F394", Offset = "0x135F394", VA = "0x135F394", Slot = "101")]
	[PunRPC]
	public override void FireProjectileRPC()
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x135F3AC", Offset = "0x135F3AC", VA = "0x135F3AC")]
	private void TryAttachToHand()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0x135F72C", Offset = "0x135F72C", VA = "0x135F72C")]
	[PunRPC]
	private void TryAttachToHandRPC(int playerViewId)
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0x135F844", Offset = "0x135F844", VA = "0x135F844")]
	[IteratorStateMachine(typeof(<AttachToHandCoroutine>d__25))]
	private IEnumerator<float> AttachToHandCoroutine(PlayerAvatar closestPlayer, CustomHVRHandGrabber hand)
	{
		return null;
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0x135F8E8", Offset = "0x135F8E8", VA = "0x135F8E8", Slot = "88")]
	public override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0x135FB24", Offset = "0x135FB24", VA = "0x135FB24", Slot = "82")]
	public override void ForceAggroPlayer()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0x135FD44", Offset = "0x135FD44", VA = "0x135FD44", Slot = "77")]
	public override void Aggro()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0x135FD4C", Offset = "0x135FD4C", VA = "0x135FD4C", Slot = "100")]
	protected override void PlayAttackAnimationRPC(Vector3 target)
	{
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0x135FD50", Offset = "0x135FD50", VA = "0x135FD50", Slot = "99")]
	public override void PlayAttackAnimation(Vector3 target)
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0x135FD54", Offset = "0x135FD54", VA = "0x135FD54")]
	protected void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0x135FEA8", Offset = "0x135FEA8", VA = "0x135FEA8")]
	public FungiShrimp()
	{
	}
}
[Token(Token = "0x200011F")]
public class Golem : Enemy, IMeleeAttacker, IAttacker, IRangedAttacker
{
	[Token(Token = "0x2000120")]
	[CompilerGenerated]
	private sealed class <BreakIntoPiecesCoroutine>d__66 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float delay;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Golem <>4__this;

		[Token(Token = "0x170000DB")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600081D")]
			[Address(RVA = "0x136563C", Offset = "0x136563C", VA = "0x136563C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000DC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600081F")]
			[Address(RVA = "0x1365684", Offset = "0x1365684", VA = "0x1365684", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x136334C", Offset = "0x136334C", VA = "0x136334C")]
		[DebuggerHidden]
		public <BreakIntoPiecesCoroutine>d__66(int <>1__state)
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x1365204", Offset = "0x1365204", VA = "0x1365204", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x1365208", Offset = "0x1365208", VA = "0x1365208", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x1365644", Offset = "0x1365644", VA = "0x1365644", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000121")]
	[CompilerGenerated]
	private sealed class <SpawnLootCoroutine>d__67 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Golem <>4__this;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <i>5__2;

		[Token(Token = "0x170000DD")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000823")]
			[Address(RVA = "0x13659FC", Offset = "0x13659FC", VA = "0x13659FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000DE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000825")]
			[Address(RVA = "0x1365A44", Offset = "0x1365A44", VA = "0x1365A44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x13633E8", Offset = "0x13633E8", VA = "0x13633E8")]
		[DebuggerHidden]
		public <SpawnLootCoroutine>d__67(int <>1__state)
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x13656E0", Offset = "0x13656E0", VA = "0x13656E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x13656E4", Offset = "0x13656E4", VA = "0x13656E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x1365A04", Offset = "0x1365A04", VA = "0x1365A04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000122")]
	[CompilerGenerated]
	private sealed class <ReconstructCoroutine>d__71 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Golem <>4__this;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float lerpingTime;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <timer>5__2;

		[Token(Token = "0x170000DF")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000829")]
			[Address(RVA = "0x1365DE0", Offset = "0x1365DE0", VA = "0x1365DE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600082B")]
			[Address(RVA = "0x1365E28", Offset = "0x1365E28", VA = "0x1365E28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x13637C8", Offset = "0x13637C8", VA = "0x13637C8")]
		[DebuggerHidden]
		public <ReconstructCoroutine>d__71(int <>1__state)
		{
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x1365AA0", Offset = "0x1365AA0", VA = "0x1365AA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x1365AA4", Offset = "0x1365AA4", VA = "0x1365AA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x1365DE8", Offset = "0x1365DE8", VA = "0x1365DE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	[Range(0f, 1f)]
	[SerializeField]
	private float inactiveSpawnChance;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private DamageType attackDamageType;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	[SerializeField]
	private int punchDamage;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private int blastDamage;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	private AudioClip punchAnimationClip;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	private AudioClip blastAttackClip;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	private AudioClip reconstructClip;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	private AudioClip hoverClip;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	private AudioClip moveClip;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	private AudioSource passiveSoundsAudioSource;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	private AudioSource assembleAudioSource;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private GolemPart[] parts;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private GolemWeakSpot[] weakSpots;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[SerializeField]
	private ParticleSystem blastBodyFX;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[SerializeField]
	private GameObject areaIndicatorPrefab;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[SerializeField]
	private GameObject blastParticlePrefab;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	private float projectileSpeed;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	private Transform blastStartPosition;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	private Transform modelTransform;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[SerializeField]
	private ParticleSystem deathExplosionFX;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[SerializeField]
	private ParticleSystem deathExplosionFXAndroid;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	[SerializeField]
	private LayerMask explosionHitLayers;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	[SerializeField]
	private float roomDetectorCooldown;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	[SerializeField]
	private float _roomCheckInterval;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
	[SerializeField]
	private int eyeHatchSpeed;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	[SerializeField]
	private Transform lootSpawnPos;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	[SerializeField]
	private int lootsToSpawn;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	[SerializeField]
	private EnemyDamagerCollider[] armColliders;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public DamageType aggroDamageTypes;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	private bool _broken;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private int _speedHash;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	private float _smoothSpeed;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	protected BetterVelocityEstimator _velocityEstimator;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private SharedInt _combatMode;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private float _changeCombatModeTime;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
	private int _weakSpotsAlive;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private Vector3 _originalModelLocalPosition;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
	private float _targetModelLocalYPosition;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private bool playerInDifferentRoom;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x281")]
	private bool eyeHatchesShouldOpen;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private SmoothSyncPUN2 _smoothSync;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private List<Transform> _alreadyHitTransforms;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private Collider[] _explosiveColliders;

	[Token(Token = "0x170000D6")]
	public DamageType GetDamageType
	{
		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x1361B20", Offset = "0x1361B20", VA = "0x1361B20", Slot = "93")]
		get
		{
			return default(DamageType);
		}
	}

	[Token(Token = "0x170000D7")]
	public int GetAttackDamage
	{
		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x1361B28", Offset = "0x1361B28", VA = "0x1361B28", Slot = "94")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000D8")]
	public Transform GetTransform
	{
		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x1361B30", Offset = "0x1361B30", VA = "0x1361B30", Slot = "95")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D9")]
	public List<Transform> GetAlreadyHitTransforms
	{
		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x1361B38", Offset = "0x1361B38", VA = "0x1361B38", Slot = "96")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000DA")]
	public float GetPushForce
	{
		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x1361B40", Offset = "0x1361B40", VA = "0x1361B40", Slot = "97")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0x1361B48", Offset = "0x1361B48", VA = "0x1361B48", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0x1361CE0", Offset = "0x1361CE0", VA = "0x1361CE0", Slot = "85")]
	public override void Acquire()
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0x1361CE8", Offset = "0x1361CE8", VA = "0x1361CE8", Slot = "87")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0x1361F98", Offset = "0x1361F98", VA = "0x1361F98", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x13620A0", Offset = "0x13620A0", VA = "0x13620A0", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x13620A8", Offset = "0x13620A8", VA = "0x13620A8", Slot = "86")]
	public override void Release()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x13621B4", Offset = "0x13621B4", VA = "0x13621B4", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x1362C48", Offset = "0x1362C48", VA = "0x1362C48")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0x1362E0C", Offset = "0x1362E0C", VA = "0x1362E0C")]
	[PunRPC]
	private void PunchModeRPC()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x1362EE4", Offset = "0x1362EE4", VA = "0x1362EE4")]
	[PunRPC]
	private void BlastModeRPC()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x1362FC4", Offset = "0x1362FC4", VA = "0x1362FC4", Slot = "78")]
	[PunRPC]
	protected override void AggroRPC()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x1363178", Offset = "0x1363178", VA = "0x1363178", Slot = "71")]
	protected override void EnableAI()
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0x13631C8", Offset = "0x13631C8", VA = "0x13631C8")]
	[PunRPC]
	private void BreakIntoPiecesRPC()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x13632C8", Offset = "0x13632C8", VA = "0x13632C8")]
	[IteratorStateMachine(typeof(<BreakIntoPiecesCoroutine>d__66))]
	private IEnumerator<float> BreakIntoPiecesCoroutine(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x1363374", Offset = "0x1363374", VA = "0x1363374")]
	[IteratorStateMachine(typeof(<SpawnLootCoroutine>d__67))]
	private IEnumerator<float> SpawnLootCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x1363410", Offset = "0x1363410", VA = "0x1363410")]
	public void WeakSpotKilled(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x1363438", Offset = "0x1363438", VA = "0x1363438", Slot = "75")]
	[PunRPC]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0x1362FF0", Offset = "0x1362FF0", VA = "0x1362FF0")]
	private void Reconstruct()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x1363744", Offset = "0x1363744", VA = "0x1363744")]
	[IteratorStateMachine(typeof(<ReconstructCoroutine>d__71))]
	private IEnumerator<float> ReconstructCoroutine(float lerpingTime)
	{
		return null;
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x13637F0", Offset = "0x13637F0", VA = "0x13637F0")]
	private void DeathExplosion(Vector3 hitPoint)
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x1363EA4", Offset = "0x1363EA4", VA = "0x1363EA4", Slot = "92")]
	public void MeleeAttack()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x1363FA8", Offset = "0x1363FA8", VA = "0x1363FA8")]
	[PunRPC]
	public void MeleeAttackRPC()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x1364064", Offset = "0x1364064", VA = "0x1364064", Slot = "98")]
	public void PlayAttackAnimation(Vector3 target)
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0x1364068", Offset = "0x1364068", VA = "0x1364068")]
	private void AIRangedAttack()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0x136416C", Offset = "0x136416C", VA = "0x136416C", Slot = "99")]
	[PunRPC]
	public void FireProjectileRPC()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x1361E60", Offset = "0x1361E60", VA = "0x1361E60")]
	public void ToggleWeakSpotGlow(bool status)
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x13641C0", Offset = "0x13641C0", VA = "0x13641C0")]
	public void BlastAttack()
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x13643BC", Offset = "0x13643BC", VA = "0x13643BC", Slot = "73")]
	[PunRPC]
	public override void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0x1364550", Offset = "0x1364550", VA = "0x1364550")]
	[PunRPC]
	private void SpawnProjectileRPC(Vector3 attackTargetPosition)
	{
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0x1364B84", Offset = "0x1364B84", VA = "0x1364B84", Slot = "91")]
	public override void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0x1364F54", Offset = "0x1364F54", VA = "0x1364F54", Slot = "90")]
	public override void PlayResetAnimationTrigger()
	{
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0x1364F5C", Offset = "0x1364F5C", VA = "0x1364F5C", Slot = "83")]
	protected override void DeAggro()
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0x1364F60", Offset = "0x1364F60", VA = "0x1364F60")]
	[PunRPC]
	private void ToggleEyeHatches(bool open)
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0x1364F88", Offset = "0x1364F88", VA = "0x1364F88")]
	private void Flee()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0x1365074", Offset = "0x1365074", VA = "0x1365074")]
	private void Chase()
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0x1361EEC", Offset = "0x1361EEC", VA = "0x1361EEC")]
	private void ToggleArmColliders(bool enabled)
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0x1365134", Offset = "0x1365134", VA = "0x1365134")]
	public Golem()
	{
	}
}
[Token(Token = "0x2000123")]
public class GolemPart : MonoBehaviour, IDamageable
{
	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Rigidbody rigidbody;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 originalLocalPosition;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Quaternion originalLocalRotation;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private EnemyDamagerCollider _damagerCollider;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 _ragdollLocalPosition;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Quaternion _ragdollLocalRotation;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Golem _golem;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem _ps;

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x1365E84", Offset = "0x1365E84", VA = "0x1365E84")]
	private void Awake()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x1362004", Offset = "0x1362004", VA = "0x1362004")]
	public void SetPhysicsMode(bool value)
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x136559C", Offset = "0x136559C", VA = "0x136559C")]
	public void SetParticles(bool value)
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x1365F14", Offset = "0x1365F14", VA = "0x1365F14")]
	[ContextMenu("SaveOriginalPlace")]
	public void SaveOriginalPlace()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x1365CDC", Offset = "0x1365CDC", VA = "0x1365CDC")]
	public void SaveRagdollPlace()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x1365D2C", Offset = "0x1365D2C", VA = "0x1365D2C")]
	public void LerpToOriginal(float t)
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x1365F64", Offset = "0x1365F64", VA = "0x1365F64", Slot = "4")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x1365F9C", Offset = "0x1365F9C", VA = "0x1365F9C")]
	public GolemPart()
	{
	}
}
[Token(Token = "0x2000124")]
public class GolemProjectile : MonoBehaviour, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x2000125")]
	[CompilerGenerated]
	private sealed class <DelayedExplosion>d__40 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GolemProjectile <>4__this;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 hitPoint;

		[Token(Token = "0x170000E1")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000844")]
			[Address(RVA = "0x13684C0", Offset = "0x13684C0", VA = "0x13684C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000846")]
			[Address(RVA = "0x1368508", Offset = "0x1368508", VA = "0x1368508", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x13679D8", Offset = "0x13679D8", VA = "0x13679D8")]
		[DebuggerHidden]
		public <DelayedExplosion>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x1367C48", Offset = "0x1367C48", VA = "0x1367C48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x1367C4C", Offset = "0x1367C4C", VA = "0x1367C4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x13684C8", Offset = "0x13684C8", VA = "0x13684C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000126")]
	[CompilerGenerated]
	private sealed class <DelayedDeactivateCoroutine>d__42 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GolemProjectile <>4__this;

		[Token(Token = "0x170000E3")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600084A")]
			[Address(RVA = "0x136860C", Offset = "0x136860C", VA = "0x136860C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600084C")]
			[Address(RVA = "0x1368654", Offset = "0x1368654", VA = "0x1368654", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x1367A74", Offset = "0x1367A74", VA = "0x1367A74")]
		[DebuggerHidden]
		public <DelayedDeactivateCoroutine>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x1368564", Offset = "0x1368564", VA = "0x1368564", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x1368568", Offset = "0x1368568", VA = "0x1368568", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x1368614", Offset = "0x1368614", VA = "0x1368614", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask bulletHitLayers;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isMine;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Transform> ignoredSpawnerTransforms;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int damage;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 projectileTarget;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool deactivateImmediatelyAfterHit;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float sphereCastSize;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float explosionSize;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float hitForceMultiplier;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ParticleSystem impactParticleSystem;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip impactAudioClip;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip deflectAudioClip;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private DamageType damageType;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private bool rotateDuringLifetime;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[SerializeField]
	private bool knockToolsFromHand;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	[SerializeField]
	private bool onlyDamageIfHitPhotonviewIsMine;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private ParticleSystem explosiveFXPrefab;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Rigidbody _myRB;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private AudioSource _myAS;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<Transform> _alreadyDamagedList;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 _previousPosition;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private TrailRenderer _trailRenderer;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool _active;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 _originalMeshSize;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float _originalTrailSize;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float _increasedSize;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 _startpos;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private bool _delayedDeactivating;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private RaycastHit[] _hitResults;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Collider[] _explosiveColliders;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float _targetProgress;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 _startPosition;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float _timer;

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x1365FA4", Offset = "0x1365FA4", VA = "0x1365FA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x13660C4", Offset = "0x13660C4", VA = "0x13660C4", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x1364914", Offset = "0x1364914", VA = "0x1364914")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x13660C8", Offset = "0x13660C8", VA = "0x13660C8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x136679C", Offset = "0x136679C", VA = "0x136679C")]
	private bool CheckHit(Transform hitTransform, Vector3 hitPoint, Vector3 hitNormal, Collider hitCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x13664A8", Offset = "0x13664A8", VA = "0x13664A8")]
	private void Deactivate()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x136670C", Offset = "0x136670C", VA = "0x136670C")]
	private void TryExplode(Vector3 hitPoint)
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x1367940", Offset = "0x1367940", VA = "0x1367940")]
	[IteratorStateMachine(typeof(<DelayedExplosion>d__40))]
	private IEnumerator<float> DelayedExplosion(Vector3 hitPoint)
	{
		return null;
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x1366668", Offset = "0x1366668", VA = "0x1366668")]
	private void DelayedDeactivate()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x1367A00", Offset = "0x1367A00", VA = "0x1367A00")]
	[IteratorStateMachine(typeof(<DelayedDeactivateCoroutine>d__42))]
	private IEnumerator<float> DelayedDeactivateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x1367A9C", Offset = "0x1367A9C", VA = "0x1367A9C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x1367B28", Offset = "0x1367B28", VA = "0x1367B28", Slot = "5")]
	private void Umbrace.Unity.PurePool.IPoolable.Release()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x1367B2C", Offset = "0x1367B2C", VA = "0x1367B2C")]
	public GolemProjectile()
	{
	}
}
[Token(Token = "0x2000127")]
public class GolemWeakSpot : MonoBehaviour, IDamageable, IKillable
{
	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioClip _hitClip;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer _renderer;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem _particleSystem;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem _hitParticleSystem;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem _killedParticleSystem;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Color32 _aliveColor;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private Color32 _deadColor;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject[] _eyeLidColliders;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Golem _golem;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int _emissiveHash;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int _colorHash;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int _totalDamageTaken;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int _maxHealth;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool _dead;

	[Token(Token = "0x170000E5")]
	public Action<GameObject> deathAction
	{
		[Token(Token = "0x600084D")]
		[Address(RVA = "0x13686B0", Offset = "0x13686B0", VA = "0x13686B0", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600084E")]
		[Address(RVA = "0x13686B8", Offset = "0x13686B8", VA = "0x13686B8", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000E6")]
	public GameObject GetGameObject
	{
		[Token(Token = "0x600084F")]
		[Address(RVA = "0x13686C0", Offset = "0x13686C0", VA = "0x13686C0", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E7")]
	public bool IsDead
	{
		[Token(Token = "0x6000850")]
		[Address(RVA = "0x13686C8", Offset = "0x13686C8", VA = "0x13686C8", Slot = "9")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x13686E4", Offset = "0x13686E4", VA = "0x13686E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0x1361EC4", Offset = "0x1361EC4", VA = "0x1361EC4")]
	public void Reset(int maxHealth)
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0x1363514", Offset = "0x1363514", VA = "0x1363514")]
	public void SetActive(bool status)
	{
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0x13687F4", Offset = "0x13687F4", VA = "0x13687F4")]
	private void Flash()
	{
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0x1363664", Offset = "0x1363664", VA = "0x1363664")]
	public void HighlightMode(bool status)
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0x13689E0", Offset = "0x13689E0", VA = "0x13689E0", Slot = "4")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0x1368BBC", Offset = "0x1368BBC", VA = "0x1368BBC", Slot = "5")]
	[PunRPC]
	public void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0x1368C4C", Offset = "0x1368C4C", VA = "0x1368C4C")]
	public GolemWeakSpot()
	{
	}
}
[Token(Token = "0x2000128")]
public class IgnoreDamageTypes : MonoBehaviour
{
	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DamageType ignoredDamageTypes;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent hitEvent;

	[Token(Token = "0x6000859")]
	[Address(RVA = "0x1368C54", Offset = "0x1368C54", VA = "0x1368C54")]
	private void Start()
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x1368CB0", Offset = "0x1368CB0", VA = "0x1368CB0")]
	public void PlayEvent()
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x1368CC4", Offset = "0x1368CC4", VA = "0x1368CC4")]
	public IgnoreDamageTypes()
	{
	}
}
[Token(Token = "0x2000129")]
public class MamaNautiloid : SeaNautiloid
{
	[Token(Token = "0x200012A")]
	[CompilerGenerated]
	private sealed class <DelayedWaterOverlap>d__11 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MamaNautiloid <>4__this;

		[Token(Token = "0x170000E8")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000870")]
			[Address(RVA = "0x1369F98", Offset = "0x1369F98", VA = "0x1369F98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000872")]
			[Address(RVA = "0x1369FE0", Offset = "0x1369FE0", VA = "0x1369FE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x1369240", Offset = "0x1369240", VA = "0x1369240")]
		[DebuggerHidden]
		public <DelayedWaterOverlap>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x1369D78", Offset = "0x1369D78", VA = "0x1369D78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x1369D7C", Offset = "0x1369D7C", VA = "0x1369D7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x1369FA0", Offset = "0x1369FA0", VA = "0x1369FA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012B")]
	[CompilerGenerated]
	private sealed class <DeathCoroutine>d__14 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MamaNautiloid <>4__this;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <lootsToSpawn>5__2;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <sinkTime>5__3;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__4;

		[Token(Token = "0x170000EA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000876")]
			[Address(RVA = "0x136A6D0", Offset = "0x136A6D0", VA = "0x136A6D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000EB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000878")]
			[Address(RVA = "0x136A718", Offset = "0x136A718", VA = "0x136A718", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x136946C", Offset = "0x136946C", VA = "0x136946C")]
		[DebuggerHidden]
		public <DeathCoroutine>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x136A03C", Offset = "0x136A03C", VA = "0x136A03C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x136A040", Offset = "0x136A040", VA = "0x136A040", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x136A6D8", Offset = "0x136A6D8", VA = "0x136A6D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012C")]
	[CompilerGenerated]
	private sealed class <RiseCoroutine>d__15 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MamaNautiloid <>4__this;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <riseTime>5__2;

		[Token(Token = "0x170000EC")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600087C")]
			[Address(RVA = "0x136AA18", Offset = "0x136AA18", VA = "0x136AA18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000ED")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600087E")]
			[Address(RVA = "0x136AA60", Offset = "0x136AA60", VA = "0x136AA60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x1369508", Offset = "0x1369508", VA = "0x1369508")]
		[DebuggerHidden]
		public <RiseCoroutine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x136A774", Offset = "0x136A774", VA = "0x136A774", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x136A778", Offset = "0x136A778", VA = "0x136A778", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x136AA20", Offset = "0x136AA20", VA = "0x136AA20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
	[SerializeField]
	private float sinkSpeed;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	private AudioSource snoreLoopAudioSource;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	private ParticleSystem miniGoopForLootSpawn;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	[SerializeField]
	private Light spoopyLight;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private Vector3 _originalAnimatorLocalPosition;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
	private float _originalSpoopyIntensity;

	[Token(Token = "0x600085C")]
	[Address(RVA = "0x1368CCC", Offset = "0x1368CCC", VA = "0x1368CCC", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0x1368DA4", Offset = "0x1368DA4", VA = "0x1368DA4", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x1368F18", Offset = "0x1368F18", VA = "0x1368F18", Slot = "87")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x1369130", Offset = "0x1369130", VA = "0x1369130", Slot = "101")]
	public override void StartProjectile()
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0x1369158", Offset = "0x1369158", VA = "0x1369158", Slot = "85")]
	public override void Acquire()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x13691CC", Offset = "0x13691CC", VA = "0x13691CC")]
	[IteratorStateMachine(typeof(<DelayedWaterOverlap>d__11))]
	private IEnumerator<float> DelayedWaterOverlap()
	{
		return null;
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x1369268", Offset = "0x1369268", VA = "0x1369268")]
	private void WaterDisturbed()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x13693F4", Offset = "0x13693F4", VA = "0x13693F4", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0x13693F8", Offset = "0x13693F8", VA = "0x13693F8")]
	[IteratorStateMachine(typeof(<DeathCoroutine>d__14))]
	private IEnumerator<float> DeathCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0x1369494", Offset = "0x1369494", VA = "0x1369494")]
	[IteratorStateMachine(typeof(<RiseCoroutine>d__15))]
	private IEnumerator<float> RiseCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x1369530", Offset = "0x1369530", VA = "0x1369530", Slot = "78")]
	[PunRPC]
	protected override void AggroRPC()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0x13696B0", Offset = "0x13696B0", VA = "0x13696B0")]
	private void AfterRiseAggro()
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0x13698B0", Offset = "0x13698B0", VA = "0x13698B0", Slot = "73")]
	[PunRPC]
	public override void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x1369A10", Offset = "0x1369A10", VA = "0x1369A10", Slot = "99")]
	[PunRPC]
	public override void ToggleGeodeRPC(bool status)
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x1369AB0", Offset = "0x1369AB0", VA = "0x1369AB0", Slot = "71")]
	protected override void EnableAI()
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x1369AE0", Offset = "0x1369AE0", VA = "0x1369AE0", Slot = "75")]
	[PunRPC]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0x1369D00", Offset = "0x1369D00", VA = "0x1369D00")]
	public MamaNautiloid()
	{
	}
}
[Token(Token = "0x200012D")]
[SelectionBase]
public class PlasmaShrimp : Enemy, IRangedAttacker, IAttacker, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x200012F")]
	[CompilerGenerated]
	private sealed class <_DelayedExplosion>d__81 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlasmaShrimp <>4__this;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource <implosion>5__2;

		[Token(Token = "0x170000F3")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60008B0")]
			[Address(RVA = "0x136F4EC", Offset = "0x136F4EC", VA = "0x136F4EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000F4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008B2")]
			[Address(RVA = "0x136F534", Offset = "0x136F534", VA = "0x136F534", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x136D3F4", Offset = "0x136D3F4", VA = "0x136D3F4")]
		[DebuggerHidden]
		public <_DelayedExplosion>d__81(int <>1__state)
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x136ECC4", Offset = "0x136ECC4", VA = "0x136ECC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x136ECC8", Offset = "0x136ECC8", VA = "0x136ECC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x136F4F4", Offset = "0x136F4F4", VA = "0x136F4F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	[SerializeField]
	protected float pursueSpeed;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	protected float evadeSpeed;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public GameObject plasmaShrimpProjectilePrefab;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public float projectileSpeed;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	public int projectileDamage;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public AudioClip attackClip;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public GameObject modelParent;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public GameObject plasmaBallSpawnPos;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public GameObject armature;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public GameObject idleBuzzAudioSource;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private AudioSource idleBuzzAudioSourceAS;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public bool dynamicBuzzPitch;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	public float maxFlyHeight;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public bool canAttack;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	public float visionRange;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public float blastRadius;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public float blastPhysicsForce;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public LayerMask blastHitLayers;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	public DamageType blastDamageType;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public AudioClip blastClip;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private Renderer[] _myRenderers;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private PhotonView modelParentPhotonView;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private float _startOffset;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
	private float _targetOffset;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private float _randomOffset;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	private Vector3 _attackTarget;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	public LayerMask flyheightLayerMask;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	public LayerMask flyAboveLayers;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private SharedFloat _flyOffset;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private float _nextJumpTime;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private Rigidbody[] _ragdollRigidbodies;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public Rigidbody modelParentRigidbody;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public Collider modelParentImplosionCollider;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private Collider[] _ragdollColliders;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[SerializeField]
	private bool canBeGrabbedAlive;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x259")]
	[SerializeField]
	private bool canPlayerShoot;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25A")]
	private bool _spawnedLoot;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private Transform _bulletsIgnoredPlayer;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[SerializeField]
	private UnityEngine.Color _originalEmission;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[SerializeField]
	private ParticleSystem _implosionParticle;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	private AudioClip _implosionSFX;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	private bool showBlastRadiusGizmo;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
	private int _playerAmmoLeft;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private float _playerShootShrimpCooldown;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
	private float _flyLevel;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private Collider[] _blastResults;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private List<Transform> _alreadyHitTransforms;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private HVRGrabbable _modelParentGrabbable;

	[Token(Token = "0x4000811")]
	private const int MaxPlayerAmmo = 3;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private int _siblingIndex;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	[SerializeField]
	private ParticleSystem dieParticleSystemPrefabAndroid;

	[Token(Token = "0x170000EE")]
	public int GetAttackDamage
	{
		[Token(Token = "0x600087F")]
		[Address(RVA = "0x136AABC", Offset = "0x136AABC", VA = "0x136AABC", Slot = "95")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000EF")]
	public DamageType GetDamageType
	{
		[Token(Token = "0x6000880")]
		[Address(RVA = "0x136AAC4", Offset = "0x136AAC4", VA = "0x136AAC4", Slot = "94")]
		get
		{
			return default(DamageType);
		}
	}

	[Token(Token = "0x170000F0")]
	public Transform GetTransform
	{
		[Token(Token = "0x6000881")]
		[Address(RVA = "0x136AACC", Offset = "0x136AACC", VA = "0x136AACC", Slot = "96")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F1")]
	private List<Transform> IAttacker.GetAlreadyHitTransforms
	{
		[Token(Token = "0x6000882")]
		[Address(RVA = "0x136AAD4", Offset = "0x136AAD4", VA = "0x136AAD4", Slot = "97")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F2")]
	public float GetPushForce
	{
		[Token(Token = "0x6000883")]
		[Address(RVA = "0x136AADC", Offset = "0x136AADC", VA = "0x136AADC", Slot = "98")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0x136AB68", Offset = "0x136AB68", VA = "0x136AB68", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x136AB70", Offset = "0x136AB70", VA = "0x136AB70", Slot = "69")]
	protected override void GetReferences()
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0x136ADE4", Offset = "0x136ADE4", VA = "0x136ADE4", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0x136ADEC", Offset = "0x136ADEC", VA = "0x136ADEC", Slot = "91")]
	public override void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0x136AF18", Offset = "0x136AF18", VA = "0x136AF18", Slot = "85")]
	public override void Acquire()
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x136AF48", Offset = "0x136AF48", VA = "0x136AF48", Slot = "86")]
	public override void Release()
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x136AF50", Offset = "0x136AF50", VA = "0x136AF50")]
	private void HVRGrabbed(HVRHandGrabber arg0, HVRGrabbable grabbabble)
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0x136B058", Offset = "0x136B058", VA = "0x136B058")]
	[PunRPC]
	private void LiveShrimpGrabbedRPC()
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0x136B378", Offset = "0x136B378", VA = "0x136B378")]
	private void HVRActivated(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0x136B548", Offset = "0x136B548", VA = "0x136B548")]
	private void PlayerShootShrimpCooldown()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0x136B56C", Offset = "0x136B56C", VA = "0x136B56C")]
	[PunRPC]
	private void PlayerShootsRPC()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0x136B804", Offset = "0x136B804", VA = "0x136B804")]
	private void HVRRelease(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0x1361874", Offset = "0x1361874", VA = "0x1361874")]
	protected void SetRagdollKinematic(bool value)
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0x136B8D0", Offset = "0x136B8D0", VA = "0x136B8D0")]
	private void ZeroRagdollVelocity()
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0x136B9D0", Offset = "0x136B9D0", VA = "0x136B9D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0x136BAD0", Offset = "0x136BAD0", VA = "0x136BAD0", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0x136C980", Offset = "0x136C980", VA = "0x136C980", Slot = "99")]
	public virtual void PlayAttackAnimation(Vector3 target)
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0x136CB2C", Offset = "0x136CB2C", VA = "0x136CB2C", Slot = "100")]
	[PunRPC]
	protected virtual void PlayAttackAnimationRPC(Vector3 target)
	{
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0x136CBA8", Offset = "0x136CBA8", VA = "0x136CBA8", Slot = "101")]
	[PunRPC]
	public virtual void FireProjectileRPC()
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0x136D090", Offset = "0x136D090", VA = "0x136D090", Slot = "75")]
	[PunRPC]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0x136D380", Offset = "0x136D380", VA = "0x136D380")]
	[IteratorStateMachine(typeof(<_DelayedExplosion>d__81))]
	public IEnumerator<float> _DelayedExplosion()
	{
		return null;
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0x136D41C", Offset = "0x136D41C", VA = "0x136D41C")]
	private void SpawnLoot()
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0x136D490", Offset = "0x136D490", VA = "0x136D490", Slot = "79")]
	protected override AudioSource PlayClip(AudioClip clip, float variation = 0.1f, bool cooldown = false)
	{
		return null;
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0x136D5D4", Offset = "0x136D5D4", VA = "0x136D5D4")]
	private void ToggleEmission(bool value)
	{
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0x136B254", Offset = "0x136B254", VA = "0x136B254")]
	private void EnableGrabbableRagdoll()
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0x136D704", Offset = "0x136D704", VA = "0x136D704")]
	private void Explode()
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0x136DD7C", Offset = "0x136DD7C", VA = "0x136DD7C")]
	private void EditTerrain(DiggingArea world, Vector3 point, float deformSpeed, float range)
	{
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0x1361944", Offset = "0x1361944", VA = "0x1361944")]
	protected void ToggleRagdollColliders(bool value)
	{
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0x13619AC", Offset = "0x13619AC", VA = "0x13619AC")]
	protected void ToggleRagdollGravity(bool value)
	{
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0x136DF68", Offset = "0x136DF68", VA = "0x136DF68")]
	private void IgnoreInterCollisions()
	{
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0x136E014", Offset = "0x136E014", VA = "0x136E014", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0x136E01C", Offset = "0x136E01C", VA = "0x136E01C", Slot = "80")]
	protected override void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0x136E164", Offset = "0x136E164", VA = "0x136E164")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0x136E29C", Offset = "0x136E29C", VA = "0x136E29C", Slot = "77")]
	public override void Aggro()
	{
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0x136E3A8", Offset = "0x136E3A8", VA = "0x136E3A8", Slot = "84")]
	public override void AddPushForce(Vector3 force)
	{
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0x136E400", Offset = "0x136E400", VA = "0x136E400", Slot = "87")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0x136E9F4", Offset = "0x136E9F4", VA = "0x136E9F4", Slot = "89")]
	public override Vector3 GetLootSpawnPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0x136EA7C", Offset = "0x136EA7C", VA = "0x136EA7C", Slot = "102")]
	public virtual void IgnorePlayerCollision(bool ignore, PlayerAvatar player)
	{
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0x136EB58", Offset = "0x136EB58", VA = "0x136EB58")]
	public PlasmaShrimp()
	{
	}
}
[Token(Token = "0x2000130")]
public class PrimalChameleon : Chameleon, IMeleeAttacker, IAttacker, IRangedAttacker
{
	[Token(Token = "0x2000131")]
	[CompilerGenerated]
	private sealed class <CheckIfTailAttackHasStopPlaying>d__38 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PrimalChameleon <>4__this;

		[Token(Token = "0x170000FA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60008D8")]
			[Address(RVA = "0x1371724", Offset = "0x1371724", VA = "0x1371724", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000FB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008DA")]
			[Address(RVA = "0x137176C", Offset = "0x137176C", VA = "0x137176C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x137093C", Offset = "0x137093C", VA = "0x137093C")]
		[DebuggerHidden]
		public <CheckIfTailAttackHasStopPlaying>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x1371660", Offset = "0x1371660", VA = "0x1371660", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x1371664", Offset = "0x1371664", VA = "0x1371664", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x137172C", Offset = "0x137172C", VA = "0x137172C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000132")]
	[CompilerGenerated]
	private sealed class <RotateTowardsPlayerForTime>d__43 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PrimalChameleon <>4__this;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x170000FC")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60008DE")]
			[Address(RVA = "0x1371A9C", Offset = "0x1371A9C", VA = "0x1371A9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000FD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008E0")]
			[Address(RVA = "0x1371AE4", Offset = "0x1371AE4", VA = "0x1371AE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x1371360", Offset = "0x1371360", VA = "0x1371360")]
		[DebuggerHidden]
		public <RotateTowardsPlayerForTime>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x13717C8", Offset = "0x13717C8", VA = "0x13717C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x13717CC", Offset = "0x13717CC", VA = "0x13717CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x1371AA4", Offset = "0x1371AA4", VA = "0x1371AA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000133")]
	[CompilerGenerated]
	private sealed class <IgnoreCollidersForTime>d__49 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRGrabbable item;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PrimalChameleon <>4__this;

		[Token(Token = "0x170000FE")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60008E4")]
			[Address(RVA = "0x1371EE0", Offset = "0x1371EE0", VA = "0x1371EE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000FF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008E6")]
			[Address(RVA = "0x1371F28", Offset = "0x1371F28", VA = "0x1371F28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x1371584", Offset = "0x1371584", VA = "0x1371584")]
		[DebuggerHidden]
		public <IgnoreCollidersForTime>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x1371B40", Offset = "0x1371B40", VA = "0x1371B40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x1371B44", Offset = "0x1371B44", VA = "0x1371B44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x1371EE8", Offset = "0x1371EE8", VA = "0x1371EE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[SerializeField]
	private DamageType attackDamageType;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	[SerializeField]
	private int meleeDamage;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[SerializeField]
	private AudioClip preAttackClip;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[SerializeField]
	private GameObject tailAttackTrigger;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[SerializeField]
	private AudioClip tongueGrabAudioClip;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	private AudioClip wakingUpAudioClip;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	private AudioClip tailAttackClip;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	[SerializeField]
	private AudioClip throwAudioClip;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	[SerializeField]
	private AudioSource snoringAudioSource;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private SharedBool _throwAtPlayer;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private SharedBool _sleeping;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private List<Transform> _alreadyHitTransforms;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private AudioSource tailAttackAudioSourceTemp;

	[Token(Token = "0x170000F5")]
	public DamageType GetDamageType
	{
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x136F590", Offset = "0x136F590", VA = "0x136F590", Slot = "100")]
		get
		{
			return default(DamageType);
		}
	}

	[Token(Token = "0x170000F6")]
	public int GetAttackDamage
	{
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x136F598", Offset = "0x136F598", VA = "0x136F598", Slot = "101")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000F7")]
	public Transform GetTransform
	{
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x136F5A0", Offset = "0x136F5A0", VA = "0x136F5A0", Slot = "102")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F8")]
	private List<Transform> IAttacker.GetAlreadyHitTransforms
	{
		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x136F5A8", Offset = "0x136F5A8", VA = "0x136F5A8", Slot = "103")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F9")]
	public float GetPushForce
	{
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x136F5B0", Offset = "0x136F5B0", VA = "0x136F5B0", Slot = "104")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0x136F63C", Offset = "0x136F63C", VA = "0x136F63C", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0x136F71C", Offset = "0x136F71C", VA = "0x136F71C")]
	private void StartedPickup()
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0x136F770", Offset = "0x136F770", VA = "0x136F770", Slot = "69")]
	protected override void GetReferences()
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0x136F8F4", Offset = "0x136F8F4", VA = "0x136F8F4", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x136F8FC", Offset = "0x136F8FC", VA = "0x136F8FC", Slot = "91")]
	public override void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x136FA80", Offset = "0x136FA80", VA = "0x136FA80", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0x136FA88", Offset = "0x136FA88", VA = "0x136FA88")]
	private void SetSleeping(bool value)
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0x136FB88", Offset = "0x136FB88", VA = "0x136FB88", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0x136FB90", Offset = "0x136FB90", VA = "0x136FB90", Slot = "87")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x136FBF8", Offset = "0x136FBF8", VA = "0x136FBF8", Slot = "73")]
	[PunRPC]
	public override void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x136FD2C", Offset = "0x136FD2C", VA = "0x136FD2C", Slot = "86")]
	public override void Release()
	{
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x136FE9C", Offset = "0x136FE9C", VA = "0x136FE9C", Slot = "78")]
	[PunRPC]
	protected override void AggroRPC()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x136FF6C", Offset = "0x136FF6C", VA = "0x136FF6C", Slot = "106")]
	[PunRPC]
	public void FireProjectileRPC()
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0x1370540", Offset = "0x1370540", VA = "0x1370540", Slot = "99")]
	public void MeleeAttack()
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0x13706A8", Offset = "0x13706A8", VA = "0x13706A8")]
	[PunRPC]
	private void MeleeAttackRPC()
	{
	}

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0x13708C8", Offset = "0x13708C8", VA = "0x13708C8")]
	[IteratorStateMachine(typeof(<CheckIfTailAttackHasStopPlaying>d__38))]
	private IEnumerator<float> CheckIfTailAttackHasStopPlaying()
	{
		return null;
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0x1370964", Offset = "0x1370964", VA = "0x1370964", Slot = "105")]
	public void PlayAttackAnimation(Vector3 target)
	{
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0x1370A94", Offset = "0x1370A94", VA = "0x1370A94")]
	public void StartThrowAnimation()
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0x1370CD0", Offset = "0x1370CD0", VA = "0x1370CD0")]
	[PunRPC]
	private void StartThrowAnimationRPC()
	{
	}

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0x1370D74", Offset = "0x1370D74", VA = "0x1370D74")]
	public void FinishThrow()
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0x1370854", Offset = "0x1370854", VA = "0x1370854")]
	[IteratorStateMachine(typeof(<RotateTowardsPlayerForTime>d__43))]
	private IEnumerator<float> RotateTowardsPlayerForTime()
	{
		return null;
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0x1371388", Offset = "0x1371388", VA = "0x1371388", Slot = "93")]
	[PunRPC]
	protected override void TongueGrabRPC()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0x1371424", Offset = "0x1371424", VA = "0x1371424", Slot = "94")]
	[PunRPC]
	protected override void StartLookingAtViewIdRPC(int viewId, bool temporary)
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0x1371430", Offset = "0x1371430", VA = "0x1371430", Slot = "97")]
	[PunRPC]
	protected override void StopLookingRPC()
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0x1371438", Offset = "0x1371438", VA = "0x1371438", Slot = "75")]
	[PunRPC]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0x136FBD8", Offset = "0x136FBD8", VA = "0x136FBD8")]
	public void SetAttackTrigger(bool status)
	{
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0x13712D0", Offset = "0x13712D0", VA = "0x13712D0")]
	[IteratorStateMachine(typeof(<IgnoreCollidersForTime>d__49))]
	private IEnumerator<float> IgnoreCollidersForTime(HVRGrabbable item)
	{
		return null;
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0x13715AC", Offset = "0x13715AC", VA = "0x13715AC", Slot = "90")]
	public override void PlayResetAnimationTrigger()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0x13715D8", Offset = "0x13715D8", VA = "0x13715D8")]
	public PrimalChameleon()
	{
	}
}
[Token(Token = "0x2000134")]
public class SeaNautiloid : DuckfootNautilus, IRangedAttacker, IAttacker
{
	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	public ParticleSystem vomitFX;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	public ParticleSystem prepukeFX;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	public int maxVomits;

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x1371F84", Offset = "0x1371F84", VA = "0x1371F84", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0x1372020", Offset = "0x1372020", VA = "0x1372020", Slot = "103")]
	[PunRPC]
	public void FireProjectileRPC()
	{
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0x1372110", Offset = "0x1372110", VA = "0x1372110", Slot = "104")]
	public virtual void PlayAttackAnimation(Vector3 target)
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0x1372240", Offset = "0x1372240", VA = "0x1372240", Slot = "100")]
	public override void ToggleAttackTrigger(bool status, AttackType attackType)
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0x1369D68", Offset = "0x1369D68", VA = "0x1369D68")]
	public SeaNautiloid()
	{
	}
}
[Token(Token = "0x2000135")]
public class ThievingChameleon : Chameleon
{
	[Token(Token = "0x2000136")]
	[CompilerGenerated]
	private sealed class <CloakCoroutine>d__38 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ThievingChameleon <>4__this;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float superInvisTime;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fadeTime;

		[Token(Token = "0x17000100")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000909")]
			[Address(RVA = "0x13750B4", Offset = "0x13750B4", VA = "0x13750B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000101")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600090B")]
			[Address(RVA = "0x13750FC", Offset = "0x13750FC", VA = "0x13750FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x13739A0", Offset = "0x13739A0", VA = "0x13739A0")]
		[DebuggerHidden]
		public <CloakCoroutine>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x1374D68", Offset = "0x1374D68", VA = "0x1374D68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x1374D6C", Offset = "0x1374D6C", VA = "0x1374D6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x13750BC", Offset = "0x13750BC", VA = "0x13750BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000137")]
	[CompilerGenerated]
	private sealed class <DecloakCoroutine>d__39 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ThievingChameleon <>4__this;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x17000102")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600090F")]
			[Address(RVA = "0x1375388", Offset = "0x1375388", VA = "0x1375388", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000103")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000911")]
			[Address(RVA = "0x13753D0", Offset = "0x13753D0", VA = "0x13753D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x13739C8", Offset = "0x13739C8", VA = "0x13739C8")]
		[DebuggerHidden]
		public <DecloakCoroutine>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x1375158", Offset = "0x1375158", VA = "0x1375158", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x137515C", Offset = "0x137515C", VA = "0x137515C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x1375390", Offset = "0x1375390", VA = "0x1375390", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[SerializeField]
	protected Transform itemParentLeft;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[SerializeField]
	private Renderer[] bodyRenderers;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[SerializeField]
	private Material cloakMaterial;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[SerializeField]
	private Material basicMaterial;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	private AudioClip cloackAudioClip;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	private AudioClip deCloackAudioClip;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	[SerializeField]
	private AudioClip lootingAudioClip;

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	[SerializeField]
	private AudioClip tongueGrabClip;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[SerializeField]
	private AudioSource escapeScreamAudioSource;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private float _originalBaseCloakAlphaMax;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
	private bool _cloaked;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private int _alphaMax;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
	private int _alphaMin;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private float _escapeNextLOSCheckTime;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
	private int _timeSpentOutOfLos;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	private Loot[] _lootsInHand;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	private float _lastTimeCheckedForLoot;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	private float _lastTimeCheckedForPlayerView;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private SharedBool _freeze;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	private SharedBool _stealing;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	private SharedBool _superInvisible;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	private SharedBool _fleeing;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	protected HVRGrabbable _grabbedItem2;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	private CoroutineHandle _coroutineHandle;

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0x13722A8", Offset = "0x13722A8", VA = "0x13722A8", Slot = "68")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x13722DC", Offset = "0x13722DC", VA = "0x13722DC", Slot = "69")]
	protected override void GetReferences()
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x1372590", Offset = "0x1372590", VA = "0x1372590", Slot = "85")]
	public override void Acquire()
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x13725BC", Offset = "0x13725BC", VA = "0x13725BC", Slot = "74")]
	protected override void HurtAnimation()
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x137262C", Offset = "0x137262C", VA = "0x137262C", Slot = "78")]
	[PunRPC]
	protected override void AggroRPC()
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x13727F4", Offset = "0x13727F4", VA = "0x13727F4")]
	private void KillPreviousCloackCoroutine()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0x13728D8", Offset = "0x13728D8", VA = "0x13728D8")]
	private void SetBackpackAsPickUpItem()
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0x13729F8", Offset = "0x13729F8", VA = "0x13729F8", Slot = "70")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0x1372F64", Offset = "0x1372F64", VA = "0x1372F64")]
	private void Freeze()
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0x1373008", Offset = "0x1373008", VA = "0x1373008")]
	private void Unfreeze()
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0x13730AC", Offset = "0x13730AC", VA = "0x13730AC")]
	[PunRPC]
	private void SyncCloackRPC(bool cloacked)
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0x13731C4", Offset = "0x13731C4", VA = "0x13731C4", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0x1373320", Offset = "0x1373320", VA = "0x1373320", Slot = "92")]
	protected override void StartTongueGrabAnimation()
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0x1373708", Offset = "0x1373708", VA = "0x1373708", Slot = "87")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0x1372850", Offset = "0x1372850", VA = "0x1372850")]
	[IteratorStateMachine(typeof(<CloakCoroutine>d__38))]
	private IEnumerator<float> CloakCoroutine(float superInvisTime, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0x1373140", Offset = "0x1373140", VA = "0x1373140")]
	[IteratorStateMachine(typeof(<DecloakCoroutine>d__39))]
	private IEnumerator<float> DecloakCoroutine(float time)
	{
		return null;
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0x13739F0", Offset = "0x13739F0", VA = "0x13739F0", Slot = "73")]
	[PunRPC]
	public override void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0x1373D4C", Offset = "0x1373D4C", VA = "0x1373D4C", Slot = "94")]
	[PunRPC]
	protected override void StartLookingAtViewIdRPC(int viewId, bool temporary)
	{
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0x1373ED4", Offset = "0x1373ED4", VA = "0x1373ED4", Slot = "97")]
	[PunRPC]
	protected override void StopLookingRPC()
	{
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0x1373EDC", Offset = "0x1373EDC", VA = "0x1373EDC", Slot = "75")]
	[PunRPC]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0x137408C", Offset = "0x137408C", VA = "0x137408C")]
	[PunRPC]
	public void BackpackGrabRPC(int viewID)
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0x1374224", Offset = "0x1374224", VA = "0x1374224")]
	public void BackpackGrab(BackPack backpack)
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0x1374794", Offset = "0x1374794", VA = "0x1374794")]
	[PunRPC]
	private void DisableHandLootsPhysicsRPC(int[] lootViewIds)
	{
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0x1373B10", Offset = "0x1373B10", VA = "0x1373B10")]
	private void DropCarriedLoots()
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0x13749A4", Offset = "0x13749A4", VA = "0x13749A4", Slot = "98")]
	public override void MoveItemFromTongueToHand()
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0x1374CB4", Offset = "0x1374CB4", VA = "0x1374CB4")]
	public ThievingChameleon()
	{
	}
}
[Token(Token = "0x2000138")]
public class ThievingChameleonGrabTrigger : MonoBehaviour
{
	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _grabbing;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ThievingChameleon chameleon;

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x137542C", Offset = "0x137542C", VA = "0x137542C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x13754E4", Offset = "0x13754E4", VA = "0x13754E4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0x137575C", Offset = "0x137575C", VA = "0x137575C")]
	public ThievingChameleonGrabTrigger()
	{
	}
}
[Token(Token = "0x2000139")]
public class Geysir : MonoBehaviourPunCallbacks, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x200013A")]
	private enum GeysirType
	{
		[Token(Token = "0x4000872")]
		Slow,
		[Token(Token = "0x4000873")]
		Fast
	}

	[Token(Token = "0x200013B")]
	[CompilerGenerated]
	private sealed class <DelayedReset>d__31 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Geysir <>4__this;

		[Token(Token = "0x17000104")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600092B")]
			[Address(RVA = "0x1378174", Offset = "0x1378174", VA = "0x1378174", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000105")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600092D")]
			[Address(RVA = "0x13781BC", Offset = "0x13781BC", VA = "0x13781BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x1378038", Offset = "0x1378038", VA = "0x1378038")]
		[DebuggerHidden]
		public <DelayedReset>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x1378060", Offset = "0x1378060", VA = "0x1378060", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x1378064", Offset = "0x1378064", VA = "0x1378064", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x137817C", Offset = "0x137817C", VA = "0x137817C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Minimum time between bursts")]
	[SerializeField]
	private float minBurstTime;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[UnityEngine.Tooltip("Maximum time between bursts")]
	private float maxBurstTime;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int playerDamage;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int enemyDamage;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool applyForceToObjectsHit;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private int force;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem burstParticles;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem steamParticles;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private LayerMask hitLayers;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float explosionRange;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GeysirType geysirType;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject voicelineTrigger;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float timer;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float activationTimer;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float activationTime;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float nextBurstTime;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool active;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool sleep;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	private bool blastActive;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float blastTimer;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float blastDuration;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float propertiesRoll;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Collider[] _explosiveColliders;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<Transform> _alreadyDamagedList;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private new PhotonView photonView;

	[Token(Token = "0x6000915")]
	[Address(RVA = "0x137576C", Offset = "0x137576C", VA = "0x137576C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0x13757C4", Offset = "0x13757C4", VA = "0x13757C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x1376128", Offset = "0x1376128", VA = "0x1376128")]
	private new void OnEnable()
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0x137617C", Offset = "0x137617C", VA = "0x137617C")]
	private new void OnDisable()
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x1376180", Offset = "0x1376180", VA = "0x1376180")]
	private void Reset()
	{
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x13761E8", Offset = "0x13761E8", VA = "0x13761E8")]
	[IteratorStateMachine(typeof(<DelayedReset>d__31))]
	private IEnumerator<float> DelayedReset()
	{
		return null;
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x137584C", Offset = "0x137584C", VA = "0x137584C")]
	private void RunTimer()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x137625C", Offset = "0x137625C", VA = "0x137625C")]
	[PunRPC]
	private void ActivateBlast()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x13762A8", Offset = "0x13762A8", VA = "0x13762A8")]
	[PunRPC]
	private void DeactivateBlast()
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x13762D8", Offset = "0x13762D8", VA = "0x13762D8")]
	[PunRPC]
	private void ExplosionRPC()
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x13768B4", Offset = "0x13768B4", VA = "0x13768B4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x13769DC", Offset = "0x13769DC", VA = "0x13769DC")]
	private void RollGeysirProperties()
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x1376C58", Offset = "0x1376C58", VA = "0x1376C58")]
	[PunRPC]
	private void SetGeysirPropertiesRPC(float roll)
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x1376D58", Offset = "0x1376D58", VA = "0x1376D58")]
	private void GetRandomActivationTime()
	{
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0x1376F0C", Offset = "0x1376F0C", VA = "0x1376F0C")]
	[PunRPC]
	private void SetActivationTimeRPC(float time)
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0x1376F14", Offset = "0x1376F14", VA = "0x1376F14")]
	private void ClearAlreadyDamagedList()
	{
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0x1376F88", Offset = "0x1376F88", VA = "0x1376F88", Slot = "54")]
	private void Umbrace.Unity.PurePool.IPoolable.Acquire()
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0x1376F8C", Offset = "0x1376F8C", VA = "0x1376F8C", Slot = "55")]
	private void Umbrace.Unity.PurePool.IPoolable.Release()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0x1376F90", Offset = "0x1376F90", VA = "0x1376F90")]
	public Geysir()
	{
	}
}
[Token(Token = "0x200013C")]
public class PoisonBurster : MonoBehaviourPunCallbacks, IDamageable, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x200013D")]
	[CompilerGenerated]
	private sealed class <BurstCoroutine>d__42 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PoisonBurster <>4__this;

		[Token(Token = "0x17000106")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000948")]
			[Address(RVA = "0x1379D24", Offset = "0x1379D24", VA = "0x1379D24", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000107")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600094A")]
			[Address(RVA = "0x1379D6C", Offset = "0x1379D6C", VA = "0x1379D6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x1378F3C", Offset = "0x1378F3C", VA = "0x1378F3C")]
		[DebuggerHidden]
		public <BurstCoroutine>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x1379B58", Offset = "0x1379B58", VA = "0x1379B58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x1379B5C", Offset = "0x1379B5C", VA = "0x1379B5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x1379D2C", Offset = "0x1379D2C", VA = "0x1379D2C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200013E")]
	[CompilerGenerated]
	private sealed class <DieCoroutine>d__45 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PoisonBurster <>4__this;

		[Token(Token = "0x17000108")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600094E")]
			[Address(RVA = "0x1379FD0", Offset = "0x1379FD0", VA = "0x1379FD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000109")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000950")]
			[Address(RVA = "0x137A018", Offset = "0x137A018", VA = "0x137A018", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x1379218", Offset = "0x1379218", VA = "0x1379218")]
		[DebuggerHidden]
		public <DieCoroutine>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x1379DC8", Offset = "0x1379DC8", VA = "0x1379DC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x1379DCC", Offset = "0x1379DCC", VA = "0x1379DCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x1379FD8", Offset = "0x1379FD8", VA = "0x1379FD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem burstParticles;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem deathParticles;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject voicelineTrigger;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float burstInterval;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float cloudLifetime;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float deactivationDuration;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private int maxHealth;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private LayerMask hitLayers;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float poisonCloudRange;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float deathCloudPulseTime;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float originalDeactivationDuration;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int currentHealth;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private int damage;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool currentlyBursting;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool deactivated;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private bool dead;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	private bool poisonCloudActive;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool deathCloudActive;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float timer;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float deactivationTimer;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float offsetTimer;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[HideInInspector]
	public float maxRadius;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool lerpCloudRadius;

	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float colliderLerpSpeed;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Collider[] _explosiveColliders;

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<Transform> _alreadyDamagedList;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<Transform> _insideDeathCloudList;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private new PhotonView photonView;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private CapsuleCollider collider;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private SphereCollider poisonCloudCollider;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float deathCloudTimer;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool deathPulse;

	[Token(Token = "0x600092E")]
	[Address(RVA = "0x1378218", Offset = "0x1378218", VA = "0x1378218")]
	private void Awake()
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0x13782F8", Offset = "0x13782F8", VA = "0x13782F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0x1378578", Offset = "0x1378578", VA = "0x1378578")]
	private void Update()
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0x13788E4", Offset = "0x13788E4", VA = "0x13788E4", Slot = "55")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x13788E8", Offset = "0x13788E8", VA = "0x13788E8", Slot = "56")]
	public void Release()
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x13782FC", Offset = "0x13782FC", VA = "0x13782FC")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x1378654", Offset = "0x1378654", VA = "0x1378654")]
	private void RunTimer()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x1378DC8", Offset = "0x1378DC8", VA = "0x1378DC8")]
	[PunRPC]
	private void BurstRPC()
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x1378EE4", Offset = "0x1378EE4", VA = "0x1378EE4")]
	[PunRPC]
	private void ReActivateRPC()
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0x1378E70", Offset = "0x1378E70", VA = "0x1378E70")]
	[IteratorStateMachine(typeof(<BurstCoroutine>d__42))]
	private IEnumerator<float> BurstCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x1378F64", Offset = "0x1378F64", VA = "0x1378F64", Slot = "54")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x137911C", Offset = "0x137911C", VA = "0x137911C")]
	[PunRPC]
	private void DieRPC()
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0x13791A4", Offset = "0x13791A4", VA = "0x13791A4")]
	[IteratorStateMachine(typeof(<DieCoroutine>d__45))]
	private IEnumerator<float> DieCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0x1378968", Offset = "0x1378968", VA = "0x1378968")]
	private void ClearAlreadyDamagedList()
	{
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0x1379240", Offset = "0x1379240", VA = "0x1379240")]
	[PunRPC]
	private void ClearAlreadyDamagedListRPC()
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0x13792B0", Offset = "0x13792B0", VA = "0x13792B0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0x1378AA8", Offset = "0x1378AA8", VA = "0x1378AA8")]
	private void DeathCloudPulse()
	{
	}

	[Token(Token = "0x600093F")]
	[Address(RVA = "0x1379510", Offset = "0x1379510", VA = "0x1379510")]
	[PunRPC]
	private void DeathCloudRPC()
	{
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0x1379830", Offset = "0x1379830", VA = "0x1379830")]
	public void SetPoisonCloudRadius(float radius)
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0x13799E0", Offset = "0x13799E0", VA = "0x13799E0")]
	public void SetBurstInterval(float interval)
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0x13799E8", Offset = "0x13799E8", VA = "0x13799E8")]
	[PunRPC]
	public void SetPoisonCloudRadiusRPC(float radius)
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0x1379A68", Offset = "0x1379A68", VA = "0x1379A68", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0x1379A6C", Offset = "0x1379A6C", VA = "0x1379A6C")]
	public PoisonBurster()
	{
	}
}
[Token(Token = "0x200013F")]
[RequireComponent(typeof(PhotonView))]
public class EnvironmentPropController : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EnvironmentPropController Instance;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<PhotonView> childPhotonviews;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool _syncReceived;

	[Token(Token = "0x1700010A")]
	public bool GetSyncReceived
	{
		[Token(Token = "0x6000951")]
		[Address(RVA = "0x137A074", Offset = "0x137A074", VA = "0x137A074")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0x137A07C", Offset = "0x137A07C", VA = "0x137A07C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x137A184", Offset = "0x137A184", VA = "0x137A184")]
	private void Start()
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0x137A34C", Offset = "0x137A34C", VA = "0x137A34C", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0x137A188", Offset = "0x137A188", VA = "0x137A188")]
	private void CacheChildPhotonviews()
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0x137A368", Offset = "0x137A368", VA = "0x137A368")]
	public int[] GetChildPhotonViewIds()
	{
		return null;
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0x137A4C4", Offset = "0x137A4C4", VA = "0x137A4C4")]
	public void SyncChildPhotonViewIds(int[] newChildIds)
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0x137A69C", Offset = "0x137A69C", VA = "0x137A69C")]
	public void ResetChildViewIds()
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0x137A734", Offset = "0x137A734", VA = "0x137A734")]
	public EnvironmentPropController()
	{
	}
}
[Token(Token = "0x2000141")]
public class ExplosiveBarrel : Prop, IKillable
{
	[Token(Token = "0x2000142")]
	[CompilerGenerated]
	private sealed class <_BlinkLight>d__30 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExplosiveBarrel <>4__this;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x1700010B")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600096C")]
			[Address(RVA = "0x137B5E0", Offset = "0x137B5E0", VA = "0x137B5E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700010C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600096E")]
			[Address(RVA = "0x137B628", Offset = "0x137B628", VA = "0x137B628", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x137AD64", Offset = "0x137AD64", VA = "0x137AD64")]
		[DebuggerHidden]
		public <_BlinkLight>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x137B2DC", Offset = "0x137B2DC", VA = "0x137B2DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x137B2E0", Offset = "0x137B2E0", VA = "0x137B2E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x137B5E8", Offset = "0x137B5E8", VA = "0x137B5E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000143")]
	[CompilerGenerated]
	private sealed class <DelayedExplosion>d__32 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExplosiveBarrel <>4__this;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x1700010D")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000972")]
			[Address(RVA = "0x137C750", Offset = "0x137C750", VA = "0x137C750", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700010E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000974")]
			[Address(RVA = "0x137C798", Offset = "0x137C798", VA = "0x137C798", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x137AE0C", Offset = "0x137AE0C", VA = "0x137AE0C")]
		[DebuggerHidden]
		public <DelayedExplosion>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x137B684", Offset = "0x137B684", VA = "0x137B684", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x137B688", Offset = "0x137B688", VA = "0x137B688", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x137C758", Offset = "0x137C758", VA = "0x137C758", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[Space]
	[Header("Explosive barrel specific stuff")]
	[SerializeField]
	private float explodeDelay;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	[SerializeField]
	private int damageAmount;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	private DamageType makeDamageType;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	[SerializeField]
	private LayerMask hitLayers;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private float explosionSize;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private AudioClip explosionBuildupAudioClip;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[SerializeField]
	private ParticleSystem[] aboutToExplodeParticleSystems;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[Header("Proximity explosive related")]
	[SerializeField]
	private Transform trackPlayerFromPosition;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[SerializeField]
	private bool proximityBased;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
	[SerializeField]
	private float proximityDetectionDistance;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	private float explodeDistance;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	private AudioClip blinkAudioClip;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	[UnityEngine.Tooltip("Makes light blinking/SFX faster and slower. Lower means slower.")]
	private float explosiveVisualMultiplier;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[Header("Proximity explosive barrel related")]
	[SerializeField]
	private GenericLightBlink lightBlink;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[SerializeField]
	[Header("Proximity Explosive frog bomb related")]
	private FrogBombProximityVisual frogBombProximityVisual;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	[SerializeField]
	private bool UsesB4Effects;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private ParticleSystem particle;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private Collider[] _explosiveColliders;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private List<Transform> _alreadyDamagedList;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private bool delayedExplosionRunning;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
	private float normalizedPlayerDistance;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private bool isBlinking;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	private CoroutineHandle blinkingLightCoroutineHandle;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private float distanceToNearestPlayer;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	private int damageAmountForEnemies;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private PhotonView cachedPhotonView;

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x137A800", Offset = "0x137A800", VA = "0x137A800", Slot = "18")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0x137A874", Offset = "0x137A874", VA = "0x137A874", Slot = "23")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0x137A948", Offset = "0x137A948", VA = "0x137A948")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0x137A960", Offset = "0x137A960", VA = "0x137A960")]
	private void TrackProximity()
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0x137ABC4", Offset = "0x137ABC4", VA = "0x137ABC4")]
	[IteratorStateMachine(typeof(<_BlinkLight>d__30))]
	private IEnumerator<float> _BlinkLight()
	{
		return null;
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0x137AD8C", Offset = "0x137AD8C", VA = "0x137AD8C", Slot = "26")]
	[PunRPC]
	public override void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0x137AC38", Offset = "0x137AC38", VA = "0x137AC38")]
	[IteratorStateMachine(typeof(<DelayedExplosion>d__32))]
	private IEnumerator<float> DelayedExplosion(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0x137AE34", Offset = "0x137AE34", VA = "0x137AE34")]
	private void ToggleAboutToExplodeParticleSystems(bool active)
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0x137AEA4", Offset = "0x137AEA4", VA = "0x137AEA4", Slot = "21")]
	public override void ResetProp()
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0x137AEC0", Offset = "0x137AEC0", VA = "0x137AEC0", Slot = "24")]
	[PunRPC]
	public override void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0x137A8A4", Offset = "0x137A8A4", VA = "0x137A8A4")]
	public void DetermineDamage()
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0x137B1EC", Offset = "0x137B1EC", VA = "0x137B1EC")]
	public ExplosiveBarrel()
	{
	}
}
[Token(Token = "0x2000144")]
public static class ExtensionMethods
{
	[Token(Token = "0x6000975")]
	[Address(RVA = "0x137C7F4", Offset = "0x137C7F4", VA = "0x137C7F4")]
	public static float Remap(this float value, float oldMin, float oldMax, float newMin, float newMax)
	{
		return default(float);
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0x137C810", Offset = "0x137C810", VA = "0x137C810")]
	public static void Align(Transform target, Transform targetChild, Transform source)
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0x137CAAC", Offset = "0x137CAAC", VA = "0x137CAAC")]
	public static bool IsInside(this Vector3 p_Point, BoxCollider p_Box)
	{
		return default(bool);
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0x137CBBC", Offset = "0x137CBBC", VA = "0x137CBBC")]
	public static Vector3 GetRandomPointInside(this BoxCollider box)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000979")]
	public static void Move<T>(this List<T> list, int oldIndex, int newIndex)
	{
	}

	[Token(Token = "0x600097A")]
	public static void Move<T>(this List<T> list, T item, int newIndex)
	{
	}

	[Token(Token = "0x600097B")]
	public static void Swap<T>(this List<T> list, int index1, int index2)
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0x137CC80", Offset = "0x137CC80", VA = "0x137CC80")]
	public static Transform SetLossyScale(this Transform transform, [Optional] float? x, [Optional] float? y, [Optional] float? z)
	{
		return null;
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0x137CD7C", Offset = "0x137CD7C", VA = "0x137CD7C")]
	public static Vector3 Change3(this Vector3 vector, [Optional] float? x, [Optional] float? y, [Optional] float? z)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0x137CE50", Offset = "0x137CE50", VA = "0x137CE50")]
	public static Dictionary<LootSpawnAndDespawnManager.LootType, int> OnlyBiggestLoot(this Dictionary<LootSpawnAndDespawnManager.LootType, int> dic)
	{
		return null;
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0x137D128", Offset = "0x137D128", VA = "0x137D128")]
	public static Dictionary<LootSpawnAndDespawnManager.LootType, int> OnlySmallestLoot(this Dictionary<LootSpawnAndDespawnManager.LootType, int> dic)
	{
		return null;
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0x137D0C4", Offset = "0x137D0C4", VA = "0x137D0C4")]
	public static int GetLootTypeValue(this LootSpawnAndDespawnManager.LootType lootType)
	{
		return default(int);
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0x137D354", Offset = "0x137D354", VA = "0x137D354")]
	public static Loot GetLootPrefab(this LootSpawnAndDespawnManager.LootType lootType)
	{
		return null;
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0x137D3B8", Offset = "0x137D3B8", VA = "0x137D3B8")]
	public static Enemy GetEnemyPrefab(this EnemySpawnAndDespawnManager.EnemyType enemyType)
	{
		return null;
	}

	[Token(Token = "0x6000983")]
	public static string ListValuesToString<T>(this List<T> list)
	{
		return null;
	}

	[Token(Token = "0x6000984")]
	public static string DicValuesToString<TKey, TValue>(this Dictionary<TKey, TValue> dic)
	{
		return null;
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0x137D41C", Offset = "0x137D41C", VA = "0x137D41C")]
	public static Transform GetClosestFromList(this List<GameObject> list, Vector3 origin)
	{
		return null;
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0x137D5A0", Offset = "0x137D5A0", VA = "0x137D5A0")]
	public static bool IsInLayerMask(this int layer, LayerMask layerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0x137D5EC", Offset = "0x137D5EC", VA = "0x137D5EC")]
	public static void SetLayerRecursively(this Transform parent, int layer)
	{
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0x137D670", Offset = "0x137D670", VA = "0x137D670")]
	public static void InitRenderers(this GameObject gameObject, out Renderer[] renderers)
	{
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0x137D7BC", Offset = "0x137D7BC", VA = "0x137D7BC")]
	public static void SetRenderers(this Renderer[] renderers, bool status)
	{
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0x137D888", Offset = "0x137D888", VA = "0x137D888")]
	public static float Map(float OldMin, float OldMax, float NewMin, float NewMax, float OldValue)
	{
		return default(float);
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0x137D8A4", Offset = "0x137D8A4", VA = "0x137D8A4")]
	public static void CD2RPC(this PhotonView photonView, System.Action myRPCMethod, Player player, bool onlyMaster = false)
	{
	}

	[Token(Token = "0x600098C")]
	public static void CD2RPC<T>(this PhotonView photonView, Action<T> myRPCMethod, Player player, T value, bool onlyMaster = false)
	{
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0x137DA10", Offset = "0x137DA10", VA = "0x137DA10")]
	public static void CD2RPC(this PhotonView photonView, System.Action myRPCMethod, RpcTarget rpcTarget, bool onlyMaster = false)
	{
	}

	[Token(Token = "0x600098E")]
	public static void CD2RPC<T>(this PhotonView photonView, Action<T> myRPCMethod, RpcTarget rpcTarget, T value, bool onlyMaster = false)
	{
	}
}
[Serializable]
[Token(Token = "0x2000145")]
public class SingleUnityLayer
{
	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private int m_LayerIndex;

	[Token(Token = "0x1700010F")]
	public int LayerIndex
	{
		[Token(Token = "0x600098F")]
		[Address(RVA = "0x137DB7C", Offset = "0x137DB7C", VA = "0x137DB7C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000110")]
	public int Mask
	{
		[Token(Token = "0x6000991")]
		[Address(RVA = "0x137DB98", Offset = "0x137DB98", VA = "0x137DB98")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000990")]
	[Address(RVA = "0x137DB84", Offset = "0x137DB84", VA = "0x137DB84")]
	public void Set(int _layerIndex)
	{
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0x137DBA8", Offset = "0x137DBA8", VA = "0x137DBA8")]
	public SingleUnityLayer()
	{
	}
}
[Token(Token = "0x2000146")]
public class WaitForJobCompleted : CustomYieldInstruction
{
	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly bool _isUsingTempJobAllocator;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private readonly int _forceJobCompletionFrameCount;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private JobHandle _jobHandle;

	[Token(Token = "0x17000111")]
	public override bool keepWaiting
	{
		[Token(Token = "0x6000993")]
		[Address(RVA = "0x137DBB0", Offset = "0x137DBB0", VA = "0x137DBB0", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0x137DBFC", Offset = "0x137DBFC", VA = "0x137DBFC")]
	public WaitForJobCompleted(JobHandle jobHandle, bool isUsingTempJobAllocator = true)
	{
	}
}
[Token(Token = "0x2000147")]
public class FireFlicker : MonoBehaviour
{
	[Token(Token = "0x2000148")]
	[CompilerGenerated]
	private sealed class <Flicker>d__13 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FireFlicker <>4__this;

		[Token(Token = "0x17000112")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600099F")]
			[Address(RVA = "0x137E084", Offset = "0x137E084", VA = "0x137E084", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000113")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009A1")]
			[Address(RVA = "0x137E0CC", Offset = "0x137E0CC", VA = "0x137E0CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x137DEE0", Offset = "0x137DEE0", VA = "0x137DEE0")]
		[DebuggerHidden]
		public <Flicker>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x137DF20", Offset = "0x137DF20", VA = "0x137DF20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x137DF24", Offset = "0x137DF24", VA = "0x137DF24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x137E08C", Offset = "0x137E08C", VA = "0x137E08C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float flickerAmount;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool positionFlicker;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip onEnableClip;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Light light;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float originalIntensity;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 originalLocalPosition;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CoroutineHandle coroutine;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float originalFlickerAmount;

	[Token(Token = "0x6000995")]
	[Address(RVA = "0x137DC48", Offset = "0x137DC48", VA = "0x137DC48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0x137DCE8", Offset = "0x137DCE8", VA = "0x137DCE8")]
	public void SetFlickerAmount(float newFlickerAmount)
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0x137DD04", Offset = "0x137DD04", VA = "0x137DD04")]
	public void ResetFlickerAmount()
	{
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0x137DD28", Offset = "0x137DD28", VA = "0x137DD28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0x137DE84", Offset = "0x137DE84", VA = "0x137DE84")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0x137DE10", Offset = "0x137DE10", VA = "0x137DE10")]
	[IteratorStateMachine(typeof(<Flicker>d__13))]
	private IEnumerator<float> Flicker()
	{
		return null;
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0x137DF08", Offset = "0x137DF08", VA = "0x137DF08")]
	public FireFlicker()
	{
	}
}
[Token(Token = "0x2000149")]
public class FireFXSpawner : MonoBehaviour
{
	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem realFireFXPrefab;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem realFireFXPrefabAndroid;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject _myFire;

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x137E128", Offset = "0x137E128", VA = "0x137E128")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0x137E314", Offset = "0x137E314", VA = "0x137E314")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0x137E460", Offset = "0x137E460", VA = "0x137E460")]
	public FireFXSpawner()
	{
	}
}
[Token(Token = "0x200014A")]
public class FireSourceSimple : MonoBehaviour
{
	[Token(Token = "0x60009A5")]
	[Address(RVA = "0x137E468", Offset = "0x137E468", VA = "0x137E468")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0x137E5A0", Offset = "0x137E5A0", VA = "0x137E5A0")]
	public FireSourceSimple()
	{
	}
}
[Token(Token = "0x200014B")]
public class FirstVisitToBiomeController : MonoBehaviour
{
	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FirstVisitToBiomeController Instance;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool printLogs;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Dont set these manually.")]
	public Transform rotateSpawnpointsTarget;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform player1AlternativeSpawnpoint;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform player2AlternativeSpawnpoint;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform player3AlternativeSpawnpoint;

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform player4AlternativeSpawnpoint;

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0x137E5A8", Offset = "0x137E5A8", VA = "0x137E5A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0x137E600", Offset = "0x137E600", VA = "0x137E600")]
	public bool CheckIfFirstTimeHere()
	{
		return default(bool);
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0x137E820", Offset = "0x137E820", VA = "0x137E820")]
	private void FirstVisitSequence()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x137E824", Offset = "0x137E824", VA = "0x137E824")]
	public Transform GetAlternativeSpawnTransform()
	{
		return null;
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0x137E924", Offset = "0x137E924", VA = "0x137E924")]
	public void RegisterSpawnpoint(int spawnpointID, Transform spawnpointTransform)
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0x137E7B0", Offset = "0x137E7B0", VA = "0x137E7B0")]
	private void Log(object message)
	{
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x137EA54", Offset = "0x137EA54", VA = "0x137EA54")]
	public FirstVisitToBiomeController()
	{
	}
}
[Token(Token = "0x200014C")]
public class AddInteractableChildOnRuntime : MonoBehaviour
{
	[Token(Token = "0x60009AE")]
	[Address(RVA = "0x137EA5C", Offset = "0x137EA5C", VA = "0x137EA5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0x137EA60", Offset = "0x137EA60", VA = "0x137EA60")]
	private void Start()
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0x137EA64", Offset = "0x137EA64", VA = "0x137EA64")]
	private void Update()
	{
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0x137EA68", Offset = "0x137EA68", VA = "0x137EA68")]
	public AddInteractableChildOnRuntime()
	{
	}
}
[Token(Token = "0x200014D")]
public class InteractableChild : MonoBehaviour, IInteractable
{
	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocalizedString useText;

	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject interactableParentGameObject;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IInteractable interactableParent;

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0x137EA70", Offset = "0x137EA70", VA = "0x137EA70")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0x137EBB8", Offset = "0x137EBB8", VA = "0x137EBB8", Slot = "6")]
	public GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0x137EBC0", Offset = "0x137EBC0", VA = "0x137EBC0", Slot = "5")]
	public LocalizedString GetInteractionText()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0x137ED04", Offset = "0x137ED04", VA = "0x137ED04", Slot = "4")]
	public void Interact()
	{
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0x137EE04", Offset = "0x137EE04", VA = "0x137EE04")]
	public void SetInteractableParent(GameObject interactableGO)
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0x137EE78", Offset = "0x137EE78", VA = "0x137EE78")]
	public InteractableChild()
	{
	}
}
[Token(Token = "0x200014E")]
public class FloatAndRotate : MonoBehaviour
{
	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float levitateSpeed;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float floatingAmplitude;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float rotateSpeed;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool stopWhenGrabbed;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float levitateStartHeight;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 tempPos;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private HVRGrabbable grabbable;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool shouldMove;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody rb;

	[Token(Token = "0x60009B8")]
	[Address(RVA = "0x137EE80", Offset = "0x137EE80", VA = "0x137EE80")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0x137EFD8", Offset = "0x137EFD8", VA = "0x137EFD8")]
	private void Start()
	{
	}

	[Token(Token = "0x60009BA")]
	[Address(RVA = "0x137F004", Offset = "0x137F004", VA = "0x137F004")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0x137F104", Offset = "0x137F104", VA = "0x137F104")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0x137F1F4", Offset = "0x137F1F4", VA = "0x137F1F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0x137F21C", Offset = "0x137F21C", VA = "0x137F21C")]
	private void HandleFloating()
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0x137F29C", Offset = "0x137F29C", VA = "0x137F29C")]
	private void HandleRotation()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0x137F33C", Offset = "0x137F33C", VA = "0x137F33C")]
	private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0x137F364", Offset = "0x137F364", VA = "0x137F364")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0x137F430", Offset = "0x137F430", VA = "0x137F430")]
	public FloatAndRotate()
	{
	}
}
[Token(Token = "0x200014F")]
public class FollowHDM : MonoBehaviour
{
	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FollowHDM Instance;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotationSpeed;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool disableInReleaseBuilds;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform cachedCameraTransform;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera _camera;

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0x137F454", Offset = "0x137F454", VA = "0x137F454")]
	private void Start()
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0x137F558", Offset = "0x137F558", VA = "0x137F558")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0x137F800", Offset = "0x137F800", VA = "0x137F800")]
	public void SetActive(bool status)
	{
	}

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0x137F9E4", Offset = "0x137F9E4", VA = "0x137F9E4")]
	public Camera GetCamera()
	{
		return null;
	}

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0x137F9EC", Offset = "0x137F9EC", VA = "0x137F9EC")]
	public FollowHDM()
	{
	}
}
[Token(Token = "0x2000150")]
public class FPSCounter : MonoBehaviour
{
	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool startEnabled;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int maxFPS;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string _FPStext;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int _currentFPS;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string[] _fpsStrings;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float _previousFlushTime;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _previousFrameCount;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Text _fpsText;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Canvas _canvas;

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0x137F9FC", Offset = "0x137F9FC", VA = "0x137F9FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0x137FBF0", Offset = "0x137FBF0", VA = "0x137FBF0")]
	private void Update()
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0x137FBA4", Offset = "0x137FBA4", VA = "0x137FBA4")]
	private void SetActive(bool status)
	{
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0x137FE00", Offset = "0x137FE00", VA = "0x137FE00")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0x137FEB8", Offset = "0x137FEB8", VA = "0x137FEB8")]
	public FPSCounter()
	{
	}
}
[Token(Token = "0x2000151")]
public class FrogBombProximityVisual : MonoBehaviour
{
	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject frogBagSphere;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float minFrogBagScale;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float maxFrogBagScale;

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 originalFrogBagScale;

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0x137FEC8", Offset = "0x137FEC8", VA = "0x137FEC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0x137B4A0", Offset = "0x137B4A0", VA = "0x137B4A0")]
	public void SetProximityLevel(float playerDistance)
	{
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0x137AD24", Offset = "0x137AD24", VA = "0x137AD24")]
	public void ToggleFrogVisual(bool active)
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0x137ACBC", Offset = "0x137ACBC", VA = "0x137ACBC")]
	public bool FrogVisualActive()
	{
		return default(bool);
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0x137FF00", Offset = "0x137FF00", VA = "0x137FF00")]
	public FrogBombProximityVisual()
	{
	}
}
[Token(Token = "0x2000152")]
public class BackPack : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x2000153")]
	[CompilerGenerated]
	private sealed class <_VibrateControllerCoroutine>d__36 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRController controllerToVibrate;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float amplitude;

		[Token(Token = "0x17000114")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0x138388C", Offset = "0x138388C", VA = "0x138388C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000115")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0x13838D4", Offset = "0x13838D4", VA = "0x13838D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x1382608", Offset = "0x1382608", VA = "0x1382608")]
		[DebuggerHidden]
		public <_VibrateControllerCoroutine>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x13837D8", Offset = "0x13837D8", VA = "0x13837D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x13837DC", Offset = "0x13837DC", VA = "0x13837DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x1383894", Offset = "0x1383894", VA = "0x1383894", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000154")]
	[CompilerGenerated]
	private sealed class <_PukeLoots>d__48 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BackPack <>4__this;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int amountToRemove;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <removedAmount>5__2;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Loot> <pukedLoots>5__3;

		[Token(Token = "0x17000116")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0x1383EA0", Offset = "0x1383EA0", VA = "0x1383EA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000117")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0x1383EE8", Offset = "0x1383EE8", VA = "0x1383EE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x13834BC", Offset = "0x13834BC", VA = "0x13834BC")]
		[DebuggerHidden]
		public <_PukeLoots>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x1383930", Offset = "0x1383930", VA = "0x1383930", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x1383934", Offset = "0x1383934", VA = "0x1383934", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x1383EA8", Offset = "0x1383EA8", VA = "0x1383EA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000155")]
	[CompilerGenerated]
	private sealed class <_SimulatorForceLoot>d__50 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Loot loot;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BackPack <>4__this;

		[Token(Token = "0x17000118")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0x1383FD0", Offset = "0x1383FD0", VA = "0x1383FD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000119")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A02")]
			[Address(RVA = "0x1384018", Offset = "0x1384018", VA = "0x1384018", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x1383624", Offset = "0x1383624", VA = "0x1383624")]
		[DebuggerHidden]
		public <_SimulatorForceLoot>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x1383F44", Offset = "0x1383F44", VA = "0x1383F44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x1383F48", Offset = "0x1383F48", VA = "0x1383F48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x1383FD8", Offset = "0x1383FD8", VA = "0x1383FD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float shakeDetectionThreshold;

	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform dropLootPosition;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform automaticDropLootPosition;

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[UnityEngine.Tooltip("Audio clip to play when loot is added")]
	private AudioClip lootClip;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Audio clip to play when loot is declined")]
	private AudioClip lootRemovedClip;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("Change that loot will drop when shaking")]
	[Range(0f, 100f)]
	[SerializeField]
	private int dropChance;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[UnityEngine.Tooltip("How many loot objects can the backpack hold")]
	[SerializeField]
	private float backPackMaxAmount;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Multiplayer stuff")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, only the owner of this photonview can grab it")]
	private bool allowGrabOnlyOnOwner;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Collider backPackCollider;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform deathPukePosition;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private BetterVelocityEstimator velocityEstimator;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string[] lootTags;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Loot targetLoot;

	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Prop targetProp;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<LootSpawnAndDespawnManager.LootType> currentLootsInBackPack;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<Loot> currentLootsInTriggerArea;

	[Token(Token = "0x400090C")]
	private const string vibrateControllerCoroutineName = "VibrateControllerCoroutine";

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float timeWhenEnabled;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private bool backpackChanged;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private byte[] currentLootsInBackpackSendData;

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0x137FF6C", Offset = "0x137FF6C", VA = "0x137FF6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x13800D0", Offset = "0x13800D0", VA = "0x13800D0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x13801B8", Offset = "0x13801B8", VA = "0x13801B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0x13805BC", Offset = "0x13805BC", VA = "0x13805BC")]
	private void SceneChangeStarted()
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0x1380768", Offset = "0x1380768", VA = "0x1380768")]
	private void SceneChangeFinished()
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x1380914", Offset = "0x1380914", VA = "0x1380914")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0x1380424", Offset = "0x1380424", VA = "0x1380424")]
	private void OtherUpgraded(OtherUpgradePathScriptableObject.UpgradeType arg0)
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0x1380BA8", Offset = "0x1380BA8", VA = "0x1380BA8")]
	[PunRPC]
	public void SetupBackPackRPC()
	{
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0x137FF8C", Offset = "0x137FF8C", VA = "0x137FF8C")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x60009DA")]
	[Address(RVA = "0x1380D10", Offset = "0x1380D10", VA = "0x1380D10")]
	private void Update()
	{
	}

	[Token(Token = "0x60009DB")]
	[Address(RVA = "0x1381144", Offset = "0x1381144", VA = "0x1381144")]
	public List<LootSpawnAndDespawnManager.LootType> GetBackPackLoots()
	{
		return null;
	}

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0x138114C", Offset = "0x138114C", VA = "0x138114C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0x1381B80", Offset = "0x1381B80", VA = "0x1381B80")]
	private void PosterReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0x1381E04", Offset = "0x1381E04", VA = "0x1381E04")]
	private void PropReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0x1382104", Offset = "0x1382104", VA = "0x1382104")]
	private void LootReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0x13819DC", Offset = "0x13819DC", VA = "0x13819DC")]
	public void AddLoot(Loot loot)
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0x1382090", Offset = "0x1382090", VA = "0x1382090")]
	public void AddProp(Prop prop)
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0x1381958", Offset = "0x1381958", VA = "0x1381958")]
	[IteratorStateMachine(typeof(<_VibrateControllerCoroutine>d__36))]
	private IEnumerator<float> _VibrateControllerCoroutine(HVRController controllerToVibrate, float amplitude)
	{
		return null;
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0x1382630", Offset = "0x1382630", VA = "0x1382630")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0x138230C", Offset = "0x138230C", VA = "0x138230C")]
	private void AddAndDestroyLoot(Loot loot)
	{
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0x1380E3C", Offset = "0x1380E3C", VA = "0x1380E3C")]
	public void AddLoot(LootSpawnAndDespawnManager.LootType lootType, bool playSound = true)
	{
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0x1382CF4", Offset = "0x1382CF4", VA = "0x1382CF4")]
	public void OnLoadAddLoot(LootSpawnAndDespawnManager.LootType lootType)
	{
	}

	[Token(Token = "0x60009E7")]
	[Address(RVA = "0x1382AD4", Offset = "0x1382AD4", VA = "0x1382AD4")]
	public Loot DropLoot(LootSpawnAndDespawnManager.LootType lootType)
	{
		return null;
	}

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0x1382EDC", Offset = "0x1382EDC", VA = "0x1382EDC")]
	private void DropLoot()
	{
	}

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0x1382D98", Offset = "0x1382D98", VA = "0x1382D98")]
	[PunRPC]
	public void RemoveLootFromBackPackRPC(LootSpawnAndDespawnManager.LootType lootType)
	{
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0x138310C", Offset = "0x138310C", VA = "0x138310C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0x1383408", Offset = "0x1383408", VA = "0x1383408")]
	public int GetBackpackCapacity()
	{
		return default(int);
	}

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0x1380FE0", Offset = "0x1380FE0", VA = "0x1380FE0")]
	public void RemoveLootsOnDeath()
	{
	}

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0x1383428", Offset = "0x1383428", VA = "0x1383428")]
	[IteratorStateMachine(typeof(<_PukeLoots>d__48))]
	private IEnumerator<float> _PukeLoots(float duration, int amountToRemove)
	{
		return null;
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0x13834E4", Offset = "0x13834E4", VA = "0x13834E4")]
	private void SimulatorHandGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0x1383594", Offset = "0x1383594", VA = "0x1383594")]
	[IteratorStateMachine(typeof(<_SimulatorForceLoot>d__50))]
	private IEnumerator<float> _SimulatorForceLoot(Loot loot)
	{
		return null;
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0x138364C", Offset = "0x138364C", VA = "0x138364C")]
	public BackPack()
	{
	}
}
[Token(Token = "0x2000156")]
[AddComponentMenu("BetterVelocityEstimator")]
public class BetterVelocityEstimator : MonoBehaviour
{
	[Token(Token = "0x2000157")]
	[CompilerGenerated]
	private sealed class <EstimateVelocity>d__9 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BetterVelocityEstimator <>4__this;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 <previousPosition>5__2;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion <previousRotation>5__3;

		[Token(Token = "0x1700011A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000A10")]
			[Address(RVA = "0x1384A18", Offset = "0x1384A18", VA = "0x1384A18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700011B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A12")]
			[Address(RVA = "0x1384A60", Offset = "0x1384A60", VA = "0x1384A60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x13840E8", Offset = "0x13840E8", VA = "0x13840E8")]
		[DebuggerHidden]
		public <EstimateVelocity>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x1384590", Offset = "0x1384590", VA = "0x1384590", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x1384594", Offset = "0x1384594", VA = "0x1384594", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x1384A20", Offset = "0x1384A20", VA = "0x1384A20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Use global values instead of local")]
	[SerializeField]
	private bool useGlobal;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[UnityEngine.Tooltip("Begin the sampling routine when the script is enabled.")]
	public bool autoStartSampling;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("The number of frames to average when calculating velocity.")]
	public int velocityAverageFrames;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("The number of frames to average when calculating angular velocity.")]
	public int angularVelocityAverageFrames;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Segment calculationSegment;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected Vector3[] velocitySamples;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Vector3[] angularVelocitySamples;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected int currentSampleCount;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected CoroutineHandle calculateSamplesRoutine;

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0x1384074", Offset = "0x1384074", VA = "0x1384074")]
	[IteratorStateMachine(typeof(<EstimateVelocity>d__9))]
	protected IEnumerator<float> EstimateVelocity()
	{
		return null;
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0x1384110", Offset = "0x1384110", VA = "0x1384110", Slot = "4")]
	public virtual void StartEstimation()
	{
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0x1384198", Offset = "0x1384198", VA = "0x1384198", Slot = "5")]
	public virtual void EndEstimation()
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0x13841F4", Offset = "0x13841F4", VA = "0x13841F4", Slot = "6")]
	public virtual Vector3 GetVelocityEstimate()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0x13842BC", Offset = "0x13842BC", VA = "0x13842BC", Slot = "7")]
	public virtual Vector3 GetAngularVelocityEstimate()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0x1384384", Offset = "0x1384384", VA = "0x1384384", Slot = "8")]
	public virtual Vector3 GetAccelerationEstimate()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0x13844B8", Offset = "0x13844B8", VA = "0x13844B8", Slot = "9")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0x13844F0", Offset = "0x13844F0", VA = "0x13844F0", Slot = "10")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0x13844FC", Offset = "0x13844FC", VA = "0x13844FC", Slot = "11")]
	protected virtual void InitArrays()
	{
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0x1384570", Offset = "0x1384570", VA = "0x1384570")]
	public BetterVelocityEstimator()
	{
	}
}
[Token(Token = "0x2000158")]
public class BoilerRoom : MonoBehaviourPun
{
	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BoilerRoom Instance;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float differenceInYAxis;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject overWorldObject;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject cabinObject;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private BoilerRoomTrigger topWorldTrigger;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private BoilerRoomTrigger cabinTrigger;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private EndingFourValleyManager endingFourValleyManager;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool inTopWorld;

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<BoilerRoomTrigger> playerTriggerAreas;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AvatarSpawnManager avatarSpawnManager;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent OnCabinEnter;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent OnCabinExit;

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0x1384ABC", Offset = "0x1384ABC", VA = "0x1384ABC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0x1384C3C", Offset = "0x1384C3C", VA = "0x1384C3C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0x1384CF0", Offset = "0x1384CF0", VA = "0x1384CF0")]
	public void MoveToTopWorld(bool movePlayer = true)
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0x138511C", Offset = "0x138511C", VA = "0x138511C")]
	public void MoveToCabin(bool movePlayer = true)
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0x138548C", Offset = "0x138548C", VA = "0x138548C")]
	public BoilerRoomTrigger GetTopWorldTrigger()
	{
		return null;
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0x1385494", Offset = "0x1385494", VA = "0x1385494")]
	public BoilerRoomTrigger GetCabinTrigger()
	{
		return null;
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0x138549C", Offset = "0x138549C", VA = "0x138549C")]
	public bool PlayerIsOnTriggerArea()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0x13854EC", Offset = "0x13854EC", VA = "0x13854EC")]
	public void PlayerEnteredTriggerArea(BoilerRoomTrigger triggerArea)
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0x138559C", Offset = "0x138559C", VA = "0x138559C")]
	public void PlayerExitedTriggerArea(BoilerRoomTrigger triggerArea)
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0x1385678", Offset = "0x1385678", VA = "0x1385678")]
	[PunRPC]
	public void PlayerParentChangedRPC(bool parentPlayer, int avatarID)
	{
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0x1385880", Offset = "0x1385880", VA = "0x1385880")]
	public BoilerRoom()
	{
	}
}
[Token(Token = "0x2000159")]
[RequireComponent(typeof(BoxCollider))]
public class BoilerRoomTrigger : MonoBehaviour
{
	[Token(Token = "0x200015A")]
	public enum TriggerType
	{
		[Token(Token = "0x400093E")]
		General,
		[Token(Token = "0x400093F")]
		MakeSureTopWorld,
		[Token(Token = "0x4000940")]
		MakeSureCabin
	}

	[Token(Token = "0x200015B")]
	[CompilerGenerated]
	private sealed class <_PlayerEnteredTrigger>d__7 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BoilerRoomTrigger <>4__this;

		[Token(Token = "0x1700011C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000A29")]
			[Address(RVA = "0x13860AC", Offset = "0x13860AC", VA = "0x13860AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700011D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0x13860F4", Offset = "0x13860F4", VA = "0x13860F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x1385C5C", Offset = "0x1385C5C", VA = "0x1385C5C")]
		[DebuggerHidden]
		public <_PlayerEnteredTrigger>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x1385F9C", Offset = "0x1385F9C", VA = "0x1385F9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x1385FA0", Offset = "0x1385FA0", VA = "0x1385FA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x13860B4", Offset = "0x13860B4", VA = "0x13860B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200015C")]
	[CompilerGenerated]
	private sealed class <_PlayerExitedTrigger>d__9 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BoilerRoomTrigger <>4__this;

		[Token(Token = "0x1700011E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0x1386200", Offset = "0x1386200", VA = "0x1386200", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700011F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A31")]
			[Address(RVA = "0x1386248", Offset = "0x1386248", VA = "0x1386248", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x1385EC8", Offset = "0x1385EC8", VA = "0x1385EC8")]
		[DebuggerHidden]
		public <_PlayerExitedTrigger>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x1386150", Offset = "0x1386150", VA = "0x1386150", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x1386154", Offset = "0x1386154", VA = "0x1386154", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x1386208", Offset = "0x1386208", VA = "0x1386208", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200015D")]
	[CompilerGenerated]
	private sealed class <_CheckViewAndChangePosition>d__11 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BoilerRoomTrigger <>4__this;

		[Token(Token = "0x17000120")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000A35")]
			[Address(RVA = "0x13863E8", Offset = "0x13863E8", VA = "0x13863E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000121")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A37")]
			[Address(RVA = "0x1386430", Offset = "0x1386430", VA = "0x1386430", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x1385F6C", Offset = "0x1385F6C", VA = "0x1385F6C")]
		[DebuggerHidden]
		public <_CheckViewAndChangePosition>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x13862A4", Offset = "0x13862A4", VA = "0x13862A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x13862A8", Offset = "0x13862A8", VA = "0x13862A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x13863F0", Offset = "0x13863F0", VA = "0x13863F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TriggerType triggerType;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private BoilerRoom boilerRoom;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BoxCollider myBoxCollider;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CoroutineHandle coroutineHandle;

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0x1385974", Offset = "0x1385974", VA = "0x1385974")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0x1385A18", Offset = "0x1385A18", VA = "0x1385A18")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0x1385BE8", Offset = "0x1385BE8", VA = "0x1385BE8")]
	[IteratorStateMachine(typeof(<_PlayerEnteredTrigger>d__7))]
	private IEnumerator<float> _PlayerEnteredTrigger(int avatarID)
	{
		return null;
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0x1385C84", Offset = "0x1385C84", VA = "0x1385C84")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0x1385E54", Offset = "0x1385E54", VA = "0x1385E54")]
	[IteratorStateMachine(typeof(<_PlayerExitedTrigger>d__9))]
	private IEnumerator<float> _PlayerExitedTrigger(int avatarID)
	{
		return null;
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0x1385EF0", Offset = "0x1385EF0", VA = "0x1385EF0")]
	public BoxCollider GetMyBoxCollider()
	{
		return null;
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0x1385EF8", Offset = "0x1385EF8", VA = "0x1385EF8")]
	[IteratorStateMachine(typeof(<_CheckViewAndChangePosition>d__11))]
	private IEnumerator<float> _CheckViewAndChangePosition()
	{
		return null;
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0x1385F94", Offset = "0x1385F94", VA = "0x1385F94")]
	public BoilerRoomTrigger()
	{
	}
}
[Token(Token = "0x200015E")]
public class DetectorManager : MonoBehaviour
{
	[Token(Token = "0x200015F")]
	public enum PointType
	{
		[Token(Token = "0x400094E")]
		other,
		[Token(Token = "0x400094F")]
		enemy,
		[Token(Token = "0x4000950")]
		lootNode,
		[Token(Token = "0x4000951")]
		hotspot
	}

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DetectorManager Instance;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HashSet<GameObject> trackedEnemies;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HashSet<GameObject> trackedLootNodes;

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0x138648C", Offset = "0x138648C", VA = "0x138648C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0x13864E4", Offset = "0x13864E4", VA = "0x13864E4")]
	public void RemoveTrackedTreasure(GameObject treasure)
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0x138663C", Offset = "0x138663C", VA = "0x138663C")]
	public void ResetAll()
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0x138669C", Offset = "0x138669C", VA = "0x138669C")]
	public void AddPointType(GameObject point, PointType pointType)
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0x1386728", Offset = "0x1386728", VA = "0x1386728")]
	public void TierBasedPointToggle(int tier)
	{
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0x1386790", Offset = "0x1386790", VA = "0x1386790")]
	private void ToggleListItems(ref HashSet<GameObject> list, bool status)
	{
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0x1386920", Offset = "0x1386920", VA = "0x1386920")]
	public DetectorManager()
	{
	}
}
[Token(Token = "0x2000160")]
[RequireComponent(typeof(NavMeshAgent))]
public class Enemy : MonoBehaviourPunCallbacks, IKillable, IDamageable, IPunObservable, IPoolable, IEventSystemHandler, IFlamable, IPunInstantiateMagicCallback
{
	[Token(Token = "0x2000161")]
	[CompilerGenerated]
	private sealed class <GibCoroutine>d__84 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Enemy <>4__this;

		[Token(Token = "0x17000127")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000A85")]
			[Address(RVA = "0x138B250", Offset = "0x138B250", VA = "0x138B250", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000128")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A87")]
			[Address(RVA = "0x138B298", Offset = "0x138B298", VA = "0x138B298", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x1388174", Offset = "0x1388174", VA = "0x1388174")]
		[DebuggerHidden]
		public <GibCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x138B128", Offset = "0x138B128", VA = "0x138B128", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x138B12C", Offset = "0x138B12C", VA = "0x138B12C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x138B258", Offset = "0x138B258", VA = "0x138B258", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000162")]
	[CompilerGenerated]
	private sealed class <AfterDeathCoroutine>d__85 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Enemy <>4__this;

		[Token(Token = "0x17000129")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0x138B424", Offset = "0x138B424", VA = "0x138B424", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0x138B46C", Offset = "0x138B46C", VA = "0x138B46C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x1388210", Offset = "0x1388210", VA = "0x1388210")]
		[DebuggerHidden]
		public <AfterDeathCoroutine>d__85(int <>1__state)
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x138B2F4", Offset = "0x138B2F4", VA = "0x138B2F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x138B2F8", Offset = "0x138B2F8", VA = "0x138B2F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x138B42C", Offset = "0x138B42C", VA = "0x138B42C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000163")]
	[CompilerGenerated]
	private sealed class <FireLoopCoroutine>d__105 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Enemy <>4__this;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <timeOnFire>5__2;

		[Token(Token = "0x1700012B")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0x138B5B4", Offset = "0x138B5B4", VA = "0x138B5B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700012C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A93")]
			[Address(RVA = "0x138B5FC", Offset = "0x138B5FC", VA = "0x138B5FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x1389FCC", Offset = "0x1389FCC", VA = "0x1389FCC")]
		[DebuggerHidden]
		public <FireLoopCoroutine>d__105(int <>1__state)
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x138B474", Offset = "0x138B474", VA = "0x138B474", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x138B478", Offset = "0x138B478", VA = "0x138B478", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x138B5BC", Offset = "0x138B5BC", VA = "0x138B5BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000164")]
	[CompilerGenerated]
	private sealed class <PeriodicallyCheckForNewTarget>d__119 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Enemy <>4__this;

		[Token(Token = "0x1700012D")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000A97")]
			[Address(RVA = "0x138B734", Offset = "0x138B734", VA = "0x138B734", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700012E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A99")]
			[Address(RVA = "0x138B77C", Offset = "0x138B77C", VA = "0x138B77C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x138A7F4", Offset = "0x138A7F4", VA = "0x138A7F4")]
		[DebuggerHidden]
		public <PeriodicallyCheckForNewTarget>d__119(int <>1__state)
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x138B658", Offset = "0x138B658", VA = "0x138B658", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x138B65C", Offset = "0x138B65C", VA = "0x138B65C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x138B73C", Offset = "0x138B73C", VA = "0x138B73C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000165")]
	[CompilerGenerated]
	private sealed class <FleeCoroutine>d__123 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Enemy <>4__this;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject fleeFrom;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x1700012F")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000A9D")]
			[Address(RVA = "0x138BA68", Offset = "0x138BA68", VA = "0x138BA68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000130")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A9F")]
			[Address(RVA = "0x138BAB0", Offset = "0x138BAB0", VA = "0x138BAB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x138ADF0", Offset = "0x138ADF0", VA = "0x138ADF0")]
		[DebuggerHidden]
		public <FleeCoroutine>d__123(int <>1__state)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x138B7D8", Offset = "0x138B7D8", VA = "0x138B7D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x138B7DC", Offset = "0x138B7DC", VA = "0x138B7DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x138BA70", Offset = "0x138BA70", VA = "0x138BA70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool moveToNavmeshOnSpawn;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LocalizedString codexTitle;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocalizedString codexDescription;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Sprite codexImage;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DamageType takeDamageType;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected int totalDamageTaken;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected bool aggroFromSounds;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	protected int maxHealth;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int defaultMaxHealth;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Range(0f, 1f)]
	[SerializeField]
	protected float sfxVolume;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Range(0.1f, 2f)]
	[SerializeField]
	protected float audioPitch;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	protected AudioClip enemyHitClip;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	protected AudioClip enemyDieClip;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	protected AudioClip aggroClip;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	protected ParticleSystem hitParticleSystemPrefab;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	protected ParticleSystem dieParticleSystemPrefab;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	protected ParticleSystem gibbeningParticleSystemPrefab;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public EnemySpawnAndDespawnManager.EnemyType myEnemyType;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	protected Animator animator;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Range(0f, 1f)]
	public float lootDropChance;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	protected NavMeshAgent navMeshAgent;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	protected bool harmlessCritter;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	[SerializeField]
	private bool setKinematicFalseOnDeath;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	protected Transform[] lineOfSightTransforms;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected BehaviorTree behaviourTree;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected Rigidbody rigidbody;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected float nextTimeToCheckPosition;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected SharedGameObject targetSharedGameObject;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	protected bool isDead;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	[SerializeField]
	[UnityEngine.Tooltip("Uses gib particles and shrinks if damaged enough when dead?")]
	protected bool gibs;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[SerializeField]
	protected float gibAnimationLength;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	protected bool aggroed;

	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Coroutine afterDeathCoroutine;

	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Vector3 debugSpawnPos;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	protected float audioCooldownTime;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	protected List<GameObject> aggroTargets;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<Enemy> enemySpawnLoot;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private bool flamable;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x139")]
	[SerializeField]
	private bool onFire;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private CoroutineHandle fireLoopHandle;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private bool attackSetsOnFire;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private GameObject fireParticle;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	private float audioClipDistance;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	[SerializeField]
	private float deAggroDistance;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private bool deAggroIfOutOfLOS;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x159")]
	private bool _hasSavedSpawnPoint;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private Vector3 _savedSpawnPoint;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	protected float _distaceToClosestPlayer;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	protected DistanceBasedColliderSwitcher _distanceBasedColliderSwitcher;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private bool gibbed;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x179")]
	private bool _initialized;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private CoroutineHandle _checkForTargetsHandle;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private bool fleeing;

	[Token(Token = "0x17000122")]
	public Rigidbody GetRigidbody
	{
		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x13869D8", Offset = "0x13869D8", VA = "0x13869D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000123")]
	public Action<GameObject> deathAction
	{
		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x13869E0", Offset = "0x13869E0", VA = "0x13869E0", Slot = "55")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x13869E8", Offset = "0x13869E8", VA = "0x13869E8", Slot = "56")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000124")]
	public GameObject GetGameObject
	{
		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x13869F8", Offset = "0x13869F8", VA = "0x13869F8", Slot = "57")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000125")]
	public int MaxHealth
	{
		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x1386A00", Offset = "0x1386A00", VA = "0x1386A00")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000126")]
	public bool IsDead
	{
		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x1386A08", Offset = "0x1386A08", VA = "0x1386A08", Slot = "58")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0x1386A10", Offset = "0x1386A10", VA = "0x1386A10", Slot = "68")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0x1386A2C", Offset = "0x1386A2C", VA = "0x1386A2C", Slot = "69")]
	protected virtual void GetReferences()
	{
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0x1386CA8", Offset = "0x1386CA8", VA = "0x1386CA8", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000A48")]
	[Address(RVA = "0x1386CB0", Offset = "0x1386CB0", VA = "0x1386CB0")]
	private void MoveToNearestNavMeshPoint()
	{
	}

	[Token(Token = "0x6000A49")]
	[Address(RVA = "0x1386EF8", Offset = "0x1386EF8", VA = "0x1386EF8", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0x1386F00", Offset = "0x1386F00", VA = "0x1386F00")]
	public void SetMaxHealth(float i)
	{
	}

	[Token(Token = "0x6000A4B")]
	[Address(RVA = "0x138709C", Offset = "0x138709C", VA = "0x138709C", Slot = "70")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000A4C")]
	[Address(RVA = "0x13875F8", Offset = "0x13875F8", VA = "0x13875F8")]
	protected void TeleportAI(Vector3 pos)
	{
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0x138764C", Offset = "0x138764C", VA = "0x138764C", Slot = "71")]
	protected virtual void EnableAI()
	{
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0x1387614", Offset = "0x1387614", VA = "0x1387614")]
	protected void DisableAI()
	{
	}

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0x138784C", Offset = "0x138784C", VA = "0x138784C", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0x1387874", Offset = "0x1387874", VA = "0x1387874", Slot = "30")]
	public override void OnConnected()
	{
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0x138789C", Offset = "0x138789C", VA = "0x138789C", Slot = "32")]
	public override void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0x13878C4", Offset = "0x13878C4", VA = "0x13878C4", Slot = "72")]
	protected virtual void CheckIfMasterAndToggleAI()
	{
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0x138796C", Offset = "0x138796C", VA = "0x138796C", Slot = "73")]
	[PunRPC]
	public virtual void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0x1387BCC", Offset = "0x1387BCC", VA = "0x1387BCC")]
	[PunRPC]
	public void HitParticleEffectsRPC(Vector3 hitPoint)
	{
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0x1387C30", Offset = "0x1387C30", VA = "0x1387C30", Slot = "74")]
	protected virtual void HurtAnimation()
	{
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0x1387C84", Offset = "0x1387C84", VA = "0x1387C84", Slot = "75")]
	[PunRPC]
	public virtual void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0x1388054", Offset = "0x1388054", VA = "0x1388054", Slot = "76")]
	[PunRPC]
	public virtual void GibRPC()
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0x1388100", Offset = "0x1388100", VA = "0x1388100")]
	[IteratorStateMachine(typeof(<GibCoroutine>d__84))]
	private IEnumerator<float> GibCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0x138819C", Offset = "0x138819C", VA = "0x138819C")]
	[IteratorStateMachine(typeof(<AfterDeathCoroutine>d__85))]
	private IEnumerator AfterDeathCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0x1388238", Offset = "0x1388238", VA = "0x1388238", Slot = "77")]
	public virtual void Aggro()
	{
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0x13883A0", Offset = "0x13883A0", VA = "0x13883A0", Slot = "78")]
	[PunRPC]
	protected virtual void AggroRPC()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0x138896C", Offset = "0x138896C", VA = "0x138896C", Slot = "79")]
	protected virtual AudioSource PlayClip(AudioClip clip, float variation = 0.1f, bool cooldown = false)
	{
		return null;
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0x1388AAC", Offset = "0x1388AAC", VA = "0x1388AAC", Slot = "80")]
	protected virtual void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0x1388C74", Offset = "0x1388C74", VA = "0x1388C74")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0x1388CC4", Offset = "0x1388CC4", VA = "0x1388CC4")]
	public bool GetIsDead()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0x1388CCC", Offset = "0x1388CCC", VA = "0x1388CCC", Slot = "81")]
	public virtual bool GetIsActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0x1388CDC", Offset = "0x1388CDC", VA = "0x1388CDC", Slot = "82")]
	public virtual void ForceAggroPlayer()
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0x1388660", Offset = "0x1388660", VA = "0x1388660")]
	public void AddAggroTarget(GameObject target)
	{
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0x1388ED0", Offset = "0x1388ED0", VA = "0x1388ED0")]
	private void AggroTargetDown(GameObject diedTarget)
	{
	}

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0x1389274", Offset = "0x1389274", VA = "0x1389274", Slot = "83")]
	protected virtual void DeAggro()
	{
	}

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0x13894B8", Offset = "0x13894B8", VA = "0x13894B8", Slot = "60")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0x13895B0", Offset = "0x13895B0", VA = "0x13895B0")]
	public bool IsHarmless()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0x13895B8", Offset = "0x13895B8", VA = "0x13895B8", Slot = "84")]
	public virtual void AddPushForce(Vector3 force)
	{
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0x13896C8", Offset = "0x13896C8", VA = "0x13896C8", Slot = "85")]
	public virtual void Acquire()
	{
	}

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0x138975C", Offset = "0x138975C", VA = "0x138975C")]
	private void RepositionToSpawnPoint()
	{
	}

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0x1389910", Offset = "0x1389910", VA = "0x1389910", Slot = "86")]
	public virtual void Release()
	{
	}

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0x1389AA4", Offset = "0x1389AA4", VA = "0x1389AA4", Slot = "87")]
	protected virtual void Reset()
	{
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0x1389DF4", Offset = "0x1389DF4", VA = "0x1389DF4", Slot = "63")]
	public void TrySetOnFire()
	{
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0x1389F58", Offset = "0x1389F58", VA = "0x1389F58")]
	[IteratorStateMachine(typeof(<FireLoopCoroutine>d__105))]
	private IEnumerator<float> FireLoopCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0x1389FF4", Offset = "0x1389FF4", VA = "0x1389FF4", Slot = "64")]
	public bool Flamable()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0x1389FFC", Offset = "0x1389FFC", VA = "0x1389FFC", Slot = "65")]
	public bool OnFire()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0x138A004", Offset = "0x138A004", VA = "0x138A004", Slot = "66")]
	public void ExtinguishFire()
	{
	}

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0x138A0B4", Offset = "0x138A0B4", VA = "0x138A0B4", Slot = "88")]
	public virtual void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000A72")]
	[Address(RVA = "0x138A0B8", Offset = "0x138A0B8", VA = "0x138A0B8")]
	public void SpreadFire(Collision collision)
	{
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0x138A1DC", Offset = "0x138A1DC", VA = "0x138A1DC")]
	public bool IsAggroed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0x138A1E4", Offset = "0x138A1E4", VA = "0x138A1E4", Slot = "89")]
	public virtual Vector3 GetLootSpawnPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0x138A2A0", Offset = "0x138A2A0", VA = "0x138A2A0")]
	internal void ForceSleep()
	{
	}

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0x138A308", Offset = "0x138A308", VA = "0x138A308")]
	public bool IsInLineOfSightOfPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0x138A780", Offset = "0x138A780", VA = "0x138A780")]
	public void SetToSavePoint(Vector3 point)
	{
	}

	[Token(Token = "0x6000A78")]
	[Address(RVA = "0x137C364", Offset = "0x137C364", VA = "0x137C364")]
	public static void AggroEnemiesAroundArea(Vector3 position, float maxDistance, bool forceAll)
	{
	}

	[Token(Token = "0x6000A79")]
	[Address(RVA = "0x138A798", Offset = "0x138A798", VA = "0x138A798", Slot = "90")]
	public virtual void PlayResetAnimationTrigger()
	{
	}

	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0x138A7EC", Offset = "0x138A7EC", VA = "0x138A7EC")]
	public ParticleSystem GetHitParticleEffects()
	{
		return null;
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0x13888F8", Offset = "0x13888F8", VA = "0x13888F8")]
	[IteratorStateMachine(typeof(<PeriodicallyCheckForNewTarget>d__119))]
	private IEnumerator<float> PeriodicallyCheckForNewTarget()
	{
		return null;
	}

	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0x138A81C", Offset = "0x138A81C", VA = "0x138A81C")]
	public void CheckForCloserTarget()
	{
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0x138A9E8", Offset = "0x138A9E8", VA = "0x138A9E8", Slot = "91")]
	public virtual void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0x138AC98", Offset = "0x138AC98", VA = "0x138AC98")]
	public void FleeForDuration(float duration, GameObject fleeFrom)
	{
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0x138AD50", Offset = "0x138AD50", VA = "0x138AD50")]
	[IteratorStateMachine(typeof(<FleeCoroutine>d__123))]
	private IEnumerator<float> FleeCoroutine(float duration, GameObject fleeFrom)
	{
		return null;
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0x138AE18", Offset = "0x138AE18", VA = "0x138AE18", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000A81")]
	[Address(RVA = "0x138B074", Offset = "0x138B074", VA = "0x138B074")]
	public Enemy()
	{
	}
}
[Token(Token = "0x2000166")]
public class EnemySpawner : MonoBehaviour
{
	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EnemySpawner Instance;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject enemyPrefab;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentEnemyCount;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Enemy> currentEnemies;

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0x138BB0C", Offset = "0x138BB0C", VA = "0x138BB0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AA1")]
	[Address(RVA = "0x138BB64", Offset = "0x138BB64", VA = "0x138BB64")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000AA2")]
	[Address(RVA = "0x138BC18", Offset = "0x138BC18", VA = "0x138BC18")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0x138BC1C", Offset = "0x138BC1C", VA = "0x138BC1C")]
	public void EnemyKilled(Enemy enemyKilled)
	{
	}

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0x138BCD8", Offset = "0x138BCD8", VA = "0x138BCD8")]
	public void SpawnEnemy(Vector3 enemyPosition)
	{
	}

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0x138BF8C", Offset = "0x138BF8C", VA = "0x138BF8C")]
	public EnemySpawner()
	{
	}
}
[Token(Token = "0x2000167")]
public class HandMeterHandler : MonoBehaviourPun
{
	[Token(Token = "0x2000168")]
	[CompilerGenerated]
	private sealed class <LerpMoneyTumblerSequence>d__25 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandMeterHandler <>4__this;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int tumbler;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Quaternion targetRotation;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion <startRot>5__2;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <duration>5__3;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <_timer>5__4;

		[Token(Token = "0x17000131")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000AB3")]
			[Address(RVA = "0x138C970", Offset = "0x138C970", VA = "0x138C970", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000132")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AB5")]
			[Address(RVA = "0x138C9B8", Offset = "0x138C9B8", VA = "0x138C9B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x138C458", Offset = "0x138C458", VA = "0x138C458")]
		[DebuggerHidden]
		public <LerpMoneyTumblerSequence>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x138C790", Offset = "0x138C790", VA = "0x138C790", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x138C794", Offset = "0x138C794", VA = "0x138C794", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x138C978", Offset = "0x138C978", VA = "0x138C978", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000169")]
	[CompilerGenerated]
	private sealed class <LerpFloorTumblerSequence>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandMeterHandler <>4__this;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion targetRotation;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion <startRot>5__2;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <duration>5__3;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <_timer>5__4;

		[Token(Token = "0x17000133")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AB9")]
			[Address(RVA = "0x138CB8C", Offset = "0x138CB8C", VA = "0x138CB8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000134")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ABB")]
			[Address(RVA = "0x138CBD4", Offset = "0x138CBD4", VA = "0x138CBD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x138C648", Offset = "0x138C648", VA = "0x138C648")]
		[DebuggerHidden]
		public <LerpFloorTumblerSequence>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x138CA14", Offset = "0x138CA14", VA = "0x138CA14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x138CA18", Offset = "0x138CA18", VA = "0x138CA18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x138CB94", Offset = "0x138CB94", VA = "0x138CB94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HandMeterHandler singleton;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform level;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform timer;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] moneyTumblers;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3[] moneyTumbler0Euler;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3[] moneyTumbler9Euler;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource[] tumblerAudioSources;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource levelAudioSource;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip tumblerLock;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CoroutineHandle[] _moneyCouroutine;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector3 levelTumbler0euler;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Vector3 levelTumbler9euler;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Coroutine _levelCoroutine;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float minTimer;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float maxTimer;

	[Token(Token = "0x40009AD")]
	private const float _tumblerSpeed = 0.01f;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public ParticleSystem alarmParticle;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Light alarmLight;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float currentAmount;

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0x138C014", Offset = "0x138C014", VA = "0x138C014")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0x138C06C", Offset = "0x138C06C", VA = "0x138C06C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0x138C070", Offset = "0x138C070", VA = "0x138C070")]
	public void AddBackPackAmount(float t, float backPackMaxAmount)
	{
	}

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0x138C0E4", Offset = "0x138C0E4", VA = "0x138C0E4")]
	public void SetMoneyTumblers(int money)
	{
	}

	[Token(Token = "0x6000AAA")]
	[Address(RVA = "0x138C184", Offset = "0x138C184", VA = "0x138C184")]
	public int Nthdigit(int x, int n)
	{
		return default(int);
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0x138C1D8", Offset = "0x138C1D8", VA = "0x138C1D8")]
	private void SetMoneyTumbler(int tumbler, int value)
	{
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0x138C3AC", Offset = "0x138C3AC", VA = "0x138C3AC")]
	[IteratorStateMachine(typeof(<LerpMoneyTumblerSequence>d__25))]
	private IEnumerator<float> LerpMoneyTumblerSequence(int tumbler, Quaternion targetRotation)
	{
		return null;
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0x138C480", Offset = "0x138C480", VA = "0x138C480")]
	public void SetFloor(int floor)
	{
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0x138C5AC", Offset = "0x138C5AC", VA = "0x138C5AC")]
	[IteratorStateMachine(typeof(<LerpFloorTumblerSequence>d__27))]
	private IEnumerator LerpFloorTumblerSequence(Quaternion targetRotation)
	{
		return null;
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x138C670", Offset = "0x138C670", VA = "0x138C670")]
	public HandMeterHandler()
	{
	}
}
[Token(Token = "0x200016A")]
[RequireComponent(typeof(HVRGrabbable))]
[RequireComponent(typeof(Rigidbody))]
public class Loot : MonoBehaviourPun, IPoolable, IEventSystemHandler, ICullable, IPunInstantiateMagicCallback
{
	[Token(Token = "0x200016B")]
	public enum LootVariety
	{
		[Token(Token = "0x40009D5")]
		Ore,
		[Token(Token = "0x40009D6")]
		Gem,
		[Token(Token = "0x40009D7")]
		Relic
	}

	[Token(Token = "0x200016C")]
	public enum LootSource
	{
		[Token(Token = "0x40009D9")]
		Grinder,
		[Token(Token = "0x40009DA")]
		Geode,
		[Token(Token = "0x40009DB")]
		Wall,
		[Token(Token = "0x40009DC")]
		DiggingArea,
		[Token(Token = "0x40009DD")]
		DiggingSpot,
		[Token(Token = "0x40009DE")]
		GoldPan,
		[Token(Token = "0x40009DF")]
		MamaNautiloid,
		[Token(Token = "0x40009E0")]
		SeaNautiloid,
		[Token(Token = "0x40009E1")]
		Nautiloid,
		[Token(Token = "0x40009E2")]
		AdultShrimp,
		[Token(Token = "0x40009E3")]
		BabyShrimp,
		[Token(Token = "0x40009E4")]
		FungiShrimp,
		[Token(Token = "0x40009E5")]
		Backpack,
		[Token(Token = "0x40009E6")]
		Dev,
		[Token(Token = "0x40009E7")]
		Safe,
		[Token(Token = "0x40009E8")]
		Multinode,
		[Token(Token = "0x40009E9")]
		BuriedNode,
		[Token(Token = "0x40009EA")]
		UnknownEnemy,
		[Token(Token = "0x40009EB")]
		PrimalChameleon,
		[Token(Token = "0x40009EC")]
		ThievingChameleon,
		[Token(Token = "0x40009ED")]
		Prop,
		[Token(Token = "0x40009EE")]
		B1PrimalChameleon,
		[Token(Token = "0x40009EF")]
		B2PrimalChameleon,
		[Token(Token = "0x40009F0")]
		Golem,
		[Token(Token = "0x40009F1")]
		DroneConstruct
	}

	[Token(Token = "0x200016D")]
	[CompilerGenerated]
	private sealed class <DelayedRelicSparkleEnable>d__27 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Loot <>4__this;

		[Token(Token = "0x17000137")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0x138F930", Offset = "0x138F930", VA = "0x138F930", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000138")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0x138F978", Offset = "0x138F978", VA = "0x138F978", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x138F5CC", Offset = "0x138F5CC", VA = "0x138F5CC")]
		[DebuggerHidden]
		public <DelayedRelicSparkleEnable>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x138F5F4", Offset = "0x138F5F4", VA = "0x138F5F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x138F5F8", Offset = "0x138F5F8", VA = "0x138F5F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x138F938", Offset = "0x138F938", VA = "0x138F938", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016E")]
	[CompilerGenerated]
	private sealed class <DisableCollisionForTime>d__47 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Loot <>4__this;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x17000139")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0x138FACC", Offset = "0x138FACC", VA = "0x138FACC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700013A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0x138FB14", Offset = "0x138FB14", VA = "0x138FB14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x138F9D4", Offset = "0x138F9D4", VA = "0x138F9D4")]
		[DebuggerHidden]
		public <DisableCollisionForTime>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x138F9FC", Offset = "0x138F9FC", VA = "0x138F9FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x138FA00", Offset = "0x138FA00", VA = "0x138FA00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x138FAD4", Offset = "0x138FAD4", VA = "0x138FAD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int value;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LootSpawnAndDespawnManager.LootType myLootType;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LootVariety myLootVariety;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool canBeAddedToBackPack;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool smallLoot;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LocalizedString codexTitle;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocalizedString codexDescription;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Sprite codexImage;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private HVRGrabbable lootGrabbable;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private PrimitiveColliderSwitcher primitiveColliderSwitcher;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Rigidbody myRB;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private HVRController lastController;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public LootSource lootSource;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<Loot> ActiveLoots;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Renderer[] _renderers;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private SmoothSyncPUN2 smoothSync;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ParticleSystem _mySparkles;

	[NonSerialized]
	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool isInGoldpan;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	private bool _massInitialized;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float _originalMass;

	[Token(Token = "0x17000135")]
	public Rigidbody GetRigidbody
	{
		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x138CBDC", Offset = "0x138CBDC", VA = "0x138CBDC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000136")]
	public bool destroyed
	{
		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x138CBE4", Offset = "0x138CBE4", VA = "0x138CBE4", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0x138CC40", Offset = "0x138CC40", VA = "0x138CC40", Slot = "8")]
	public void SetRenderers(bool status)
	{
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0x138CC84", Offset = "0x138CC84", VA = "0x138CC84", Slot = "9")]
	public bool IsVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0x138CCF4", Offset = "0x138CCF4", VA = "0x138CCF4")]
	[IteratorStateMachine(typeof(<DelayedRelicSparkleEnable>d__27))]
	private IEnumerator<float> DelayedRelicSparkleEnable()
	{
		return null;
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0x138CD68", Offset = "0x138CD68", VA = "0x138CD68")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0x138CF64", Offset = "0x138CF64", VA = "0x138CF64")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0x138D068", Offset = "0x138D068", VA = "0x138D068")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0x138D2AC", Offset = "0x138D2AC", VA = "0x138D2AC", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0x138D698", Offset = "0x138D698", VA = "0x138D698")]
	public void ResetRigidBody()
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0x138D6E0", Offset = "0x138D6E0", VA = "0x138D6E0", Slot = "5")]
	public void Release()
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0x138D6E4", Offset = "0x138D6E4", VA = "0x138D6E4")]
	private void Ungrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0x138D864", Offset = "0x138D864", VA = "0x138D864")]
	private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0x1381930", Offset = "0x1381930", VA = "0x1381930")]
	public bool IsGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0x1383FB4", Offset = "0x1383FB4", VA = "0x1383FB4")]
	public void ForceUngrab()
	{
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0x138DA70", Offset = "0x138DA70", VA = "0x138DA70")]
	public HVRController GetLastController()
	{
		return null;
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0x1382C8C", Offset = "0x1382C8C", VA = "0x1382C8C")]
	public void Destroy()
	{
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0x138D37C", Offset = "0x138D37C", VA = "0x138D37C")]
	public void SwitchColliderAndOwner(bool isPrimitive)
	{
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0x138DA78", Offset = "0x138DA78", VA = "0x138DA78")]
	public HVRGrabbable GetHVRGrabbable()
	{
		return null;
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0x138DA80", Offset = "0x138DA80", VA = "0x138DA80")]
	[PunRPC]
	public void DestroyLootRPC()
	{
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0x138DAE4", Offset = "0x138DAE4", VA = "0x138DAE4")]
	[PunRPC]
	public void FreezeLootRPC(bool hideMesh)
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0x138D428", Offset = "0x138D428", VA = "0x138D428")]
	[PunRPC]
	public void UnFreezeLootRPC()
	{
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0x138DC1C", Offset = "0x138DC1C", VA = "0x138DC1C")]
	[PunRPC]
	public void UnFreezeAndPushTowardsClosestPlayerRPC()
	{
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0x138E004", Offset = "0x138E004", VA = "0x138E004")]
	[PunRPC]
	public void UnFreezeAndPushTowardsClosestPlayerUnlimitedForceRPC()
	{
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0x138DF80", Offset = "0x138DF80", VA = "0x138DF80")]
	[IteratorStateMachine(typeof(<DisableCollisionForTime>d__47))]
	private IEnumerator<float> DisableCollisionForTime(float time)
	{
		return null;
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0x138D09C", Offset = "0x138D09C", VA = "0x138D09C")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0x138E2F0", Offset = "0x138E2F0", VA = "0x138E2F0")]
	public static List<LootSpawnAndDespawnManager.LootType> GetOreType(LootSpawnAndDespawnManager.LootType lootType)
	{
		return null;
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0x138E53C", Offset = "0x138E53C", VA = "0x138E53C")]
	public void StartGravitateToGrinder()
	{
	}

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0x138E694", Offset = "0x138E694", VA = "0x138E694")]
	[PunRPC]
	private void GravitateToGrinderRPC()
	{
	}

	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0x138E918", Offset = "0x138E918", VA = "0x138E918")]
	public bool IsRelic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0x138E928", Offset = "0x138E928", VA = "0x138E928")]
	public void AddToActiveLoots()
	{
	}

	[Token(Token = "0x6000ADB")]
	[Address(RVA = "0x138E824", Offset = "0x138E824", VA = "0x138E824")]
	public void ToggleSync(bool syncing)
	{
	}

	[Token(Token = "0x6000ADC")]
	[Address(RVA = "0x138EA64", Offset = "0x138EA64", VA = "0x138EA64")]
	public static Loot GetClosestActiveLoot(Vector3 position, bool removeFromList = true)
	{
		return null;
	}

	[Token(Token = "0x6000ADD")]
	[Address(RVA = "0x138ED48", Offset = "0x138ED48", VA = "0x138ED48")]
	public static void ClearStatic()
	{
	}

	[Token(Token = "0x6000ADE")]
	[Address(RVA = "0x138EDE0", Offset = "0x138EDE0", VA = "0x138EDE0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000ADF")]
	[Address(RVA = "0x138EE7C", Offset = "0x138EE7C", VA = "0x138EE7C", Slot = "10")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000AE0")]
	[Address(RVA = "0x138F50C", Offset = "0x138F50C", VA = "0x138F50C")]
	public Loot()
	{
	}

	[SpecialName]
	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0x138F5C4", Offset = "0x138F5C4", VA = "0x138F5C4", Slot = "7")]
	private Transform ICullable.get_transform()
	{
		return null;
	}
}
[Token(Token = "0x200016F")]
public class LootWell : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text lootAmountText;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int lootAmount;

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0x138FB70", Offset = "0x138FB70", VA = "0x138FB70")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0x138FE4C", Offset = "0x138FE4C", VA = "0x138FE4C")]
	[PunRPC]
	private void SetMoneyTumblersRPC(int amount)
	{
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0x138FF60", Offset = "0x138FF60", VA = "0x138FF60", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0x13900C8", Offset = "0x13900C8", VA = "0x13900C8")]
	public LootWell()
	{
	}
}
[Token(Token = "0x2000170")]
public class LWRPScreenFade : MonoBehaviour
{
	[Token(Token = "0x2000171")]
	[CompilerGenerated]
	private sealed class <ResetBlink>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LWRPScreenFade <>4__this;

		[Token(Token = "0x17000142")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B11")]
			[Address(RVA = "0x1390B4C", Offset = "0x1390B4C", VA = "0x1390B4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000143")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B13")]
			[Address(RVA = "0x1390B94", Offset = "0x1390B94", VA = "0x1390B94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x13904DC", Offset = "0x13904DC", VA = "0x13904DC")]
		[DebuggerHidden]
		public <ResetBlink>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x1390A6C", Offset = "0x1390A6C", VA = "0x1390A6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x1390A70", Offset = "0x1390A70", VA = "0x1390A70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x1390B54", Offset = "0x1390B54", VA = "0x1390B54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.Color _OverlayColor;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material _OverlayMaterial;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float _AddDuration;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float _RemoveDuration;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float _AppliedDuration;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected float targetDuration;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Material workingMaterial;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected UnityEngine.Color targetColor;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected UnityEngine.Color currentColor;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected UnityEngine.Color deltaColor;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Coroutine blinkRoutine;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private MeshRenderer fadeRenderer;

	[Token(Token = "0x1700013B")]
	public UnityEngine.Color OverlayColor
	{
		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x13900D0", Offset = "0x13900D0", VA = "0x13900D0")]
		get
		{
			return default(UnityEngine.Color);
		}
		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x13900DC", Offset = "0x13900DC", VA = "0x13900DC")]
		set
		{
		}
	}

	[Token(Token = "0x1700013C")]
	public Material OverlayMaterial
	{
		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x13900E8", Offset = "0x13900E8", VA = "0x13900E8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x13900F0", Offset = "0x13900F0", VA = "0x13900F0")]
		set
		{
		}
	}

	[Token(Token = "0x1700013D")]
	public float AddDuration
	{
		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x13900F8", Offset = "0x13900F8", VA = "0x13900F8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x1390100", Offset = "0x1390100", VA = "0x1390100")]
		set
		{
		}
	}

	[Token(Token = "0x1700013E")]
	public float RemoveDuration
	{
		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x1390108", Offset = "0x1390108", VA = "0x1390108")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x1390110", Offset = "0x1390110", VA = "0x1390110")]
		set
		{
		}
	}

	[Token(Token = "0x1700013F")]
	public float AppliedDuration
	{
		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x1390118", Offset = "0x1390118", VA = "0x1390118")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x1390120", Offset = "0x1390120", VA = "0x1390120")]
		set
		{
		}
	}

	[Token(Token = "0x17000140")]
	public bool IsAddTransitioning
	{
		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x1390128", Offset = "0x1390128", VA = "0x1390128")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x1390130", Offset = "0x1390130", VA = "0x1390130")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x17000141")]
	public bool IsRemoveTransitioning
	{
		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x139013C", Offset = "0x139013C", VA = "0x139013C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x1390144", Offset = "0x1390144", VA = "0x1390144")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0x1390150", Offset = "0x1390150", VA = "0x1390150")]
	public void AddColorOverlay(UnityEngine.Color overlayColor, float addDuration)
	{
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0x1390168", Offset = "0x1390168", VA = "0x1390168")]
	public void AddColorOverlay()
	{
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0x1390180", Offset = "0x1390180", VA = "0x1390180")]
	public void RemoveColorOverlay()
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0x13901A0", Offset = "0x13901A0", VA = "0x13901A0")]
	public void Blink()
	{
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0x13901F4", Offset = "0x13901F4", VA = "0x13901F4", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0x13902FC", Offset = "0x13902FC", VA = "0x13902FC", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000B07")]
	[Address(RVA = "0x1390308", Offset = "0x1390308", VA = "0x1390308", Slot = "6")]
	protected virtual void ApplyColorOverlay(UnityEngine.Color newColor, float duration)
	{
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0x1390468", Offset = "0x1390468", VA = "0x1390468", Slot = "7")]
	[IteratorStateMachine(typeof(<ResetBlink>d__42))]
	protected virtual IEnumerator ResetBlink()
	{
		return null;
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0x1390504", Offset = "0x1390504", VA = "0x1390504", Slot = "8")]
	protected virtual void CancelBlinkRoutine()
	{
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0x1390518", Offset = "0x1390518", VA = "0x1390518")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0x1390880", Offset = "0x1390880", VA = "0x1390880")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0x13901F8", Offset = "0x13901F8", VA = "0x13901F8")]
	protected void CopyMaterialOverlayToWorking()
	{
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0x1390A44", Offset = "0x1390A44", VA = "0x1390A44")]
	public LWRPScreenFade()
	{
	}
}
[Token(Token = "0x2000172")]
public class PhotonViewLink : MonoBehaviour
{
	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PhotonView linkedView;

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0x1390B9C", Offset = "0x1390B9C", VA = "0x1390B9C")]
	public PhotonViewLink()
	{
	}
}
[Token(Token = "0x2000173")]
public abstract class PlayerPropNames : MonoBehaviour
{
	[Token(Token = "0x4000A0D")]
	public const string PLAYER_NR = "player_nr";

	[Token(Token = "0x6000B15")]
	[Address(RVA = "0x1390BA4", Offset = "0x1390BA4", VA = "0x1390BA4")]
	protected PlayerPropNames()
	{
	}
}
[Token(Token = "0x2000174")]
public class PlayerUtilitySyncAction : MonoBehaviourPun
{
	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject playerName;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform headColliderFollow;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject backPackHolder;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform backPackTransformToFollow;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject leftHandSnapDropHolder;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject rightHandSnapDropHolder;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform leftWristTransformToFollow;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform rightWristTransformToFollow;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject[] DisableOnOthers;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private WorkersGlove workersGlove;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Quaternion originalBackPackRotationOffset;

	[Token(Token = "0x6000B16")]
	[Address(RVA = "0x1390BAC", Offset = "0x1390BAC", VA = "0x1390BAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B17")]
	[Address(RVA = "0x1390CA4", Offset = "0x1390CA4", VA = "0x1390CA4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000B18")]
	[Address(RVA = "0x1390CB0", Offset = "0x1390CB0", VA = "0x1390CB0", Slot = "4")]
	protected virtual void Action()
	{
	}

	[Token(Token = "0x6000B19")]
	[Address(RVA = "0x1390C08", Offset = "0x1390C08", VA = "0x1390C08")]
	public void OnToggleNames(bool isHidden)
	{
	}

	[Token(Token = "0x6000B1A")]
	[Address(RVA = "0x1391038", Offset = "0x1391038", VA = "0x1391038")]
	private void BackPackFollow()
	{
	}

	[Token(Token = "0x6000B1B")]
	[Address(RVA = "0x1390E18", Offset = "0x1390E18", VA = "0x1390E18")]
	private void SnapDropZonesFollow()
	{
	}

	[Token(Token = "0x6000B1C")]
	[Address(RVA = "0x1390F10", Offset = "0x1390F10", VA = "0x1390F10")]
	private void PlayerNameFollow()
	{
	}

	[Token(Token = "0x6000B1D")]
	[Address(RVA = "0x13911D4", Offset = "0x13911D4", VA = "0x13911D4")]
	public PlayerUtilitySyncAction()
	{
	}
}
[Token(Token = "0x2000175")]
public class SetupPlayerAvatar : MonoBehaviourPunCallbacks, IPunInstantiateMagicCallback, IPunOwnershipCallbacks
{
	[Token(Token = "0x2000176")]
	[CompilerGenerated]
	private sealed class <_ChangePhotonViewOwnerships>d__28 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Player localPlayer;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SetupPlayerAvatar <>4__this;

		[Token(Token = "0x17000145")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000B35")]
			[Address(RVA = "0x1392BF4", Offset = "0x1392BF4", VA = "0x1392BF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000146")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B37")]
			[Address(RVA = "0x1392C3C", Offset = "0x1392C3C", VA = "0x1392C3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x1391AD8", Offset = "0x1391AD8", VA = "0x1391AD8")]
		[DebuggerHidden]
		public <_ChangePhotonViewOwnerships>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x1392AA0", Offset = "0x1392AA0", VA = "0x1392AA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x1392AA4", Offset = "0x1392AA4", VA = "0x1392AA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x1392BFC", Offset = "0x1392BFC", VA = "0x1392BFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PhotonView[] allChildPhotonViews;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private BackPack backPack;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CosmeticController cosmeticController;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PlayerSludge sludgeScript;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PlayerFriendInvitePopup friendInvitePopup;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public NewGenericTextPopup newGenericTextPopup;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public PlayerWhiteFlash playerWhiteFlash;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public PlayerDamageEffect playerDamageEffect;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SubtitleHolder subtitleHolder;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PlayerSpeakingUI playerSpeakingUI;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private TextMeshProUGUI playerNameText1;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private TextMeshProUGUI playerNameText2;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Localize nameText1Loc;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Localize nameText2Loc;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameObject[] disableIfClient;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool settedUp;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ElevatorMoving[] elevators;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private PropSyncCullingGroup propSyncCullingGroup;

	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private PlayerAvatar playerAvatar;

	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool inittingLocalPlayer;

	[Token(Token = "0x17000144")]
	public BackPack GetBackPack
	{
		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x139122C", Offset = "0x139122C", VA = "0x139122C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0x1391234", Offset = "0x1391234", VA = "0x1391234")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0x1391474", Offset = "0x1391474", VA = "0x1391474")]
	private void AddPlayerTransforms()
	{
	}

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0x1391510", Offset = "0x1391510", VA = "0x1391510", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0x1391518", Offset = "0x1391518", VA = "0x1391518", Slot = "54")]
	private void Photon.Pun.IPunInstantiateMagicCallback.OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000B23")]
	[Address(RVA = "0x1391594", Offset = "0x1391594", VA = "0x1391594")]
	public void InitPlayer(string name, Player photonPlayer)
	{
	}

	[Token(Token = "0x6000B24")]
	[Address(RVA = "0x13919D0", Offset = "0x13919D0", VA = "0x13919D0")]
	public void ChangePhotonViewOwnerships(Player localPlayer)
	{
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0x1391A48", Offset = "0x1391A48", VA = "0x1391A48")]
	[IteratorStateMachine(typeof(<_ChangePhotonViewOwnerships>d__28))]
	private IEnumerator<float> _ChangePhotonViewOwnerships(Player localPlayer)
	{
		return null;
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0x1391B00", Offset = "0x1391B00", VA = "0x1391B00")]
	[PunRPC]
	private void SetNameTextFont(string langCode)
	{
	}

	[Token(Token = "0x6000B27")]
	[Address(RVA = "0x1391B74", Offset = "0x1391B74", VA = "0x1391B74")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B28")]
	[Address(RVA = "0x1391D88", Offset = "0x1391D88", VA = "0x1391D88", Slot = "55")]
	public void OnOwnershipRequest(PhotonView targetView, Player requestingPlayer)
	{
	}

	[Token(Token = "0x6000B29")]
	[Address(RVA = "0x1391D8C", Offset = "0x1391D8C", VA = "0x1391D8C", Slot = "31")]
	public override void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000B2A")]
	[Address(RVA = "0x1391E44", Offset = "0x1391E44", VA = "0x1391E44")]
	public void InitOfflinePlayer()
	{
	}

	[Token(Token = "0x6000B2B")]
	[Address(RVA = "0x13922F0", Offset = "0x13922F0", VA = "0x13922F0", Slot = "56")]
	public void OnOwnershipTransfered(PhotonView targetView, Player previousOwner)
	{
	}

	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0x13921C8", Offset = "0x13921C8", VA = "0x13921C8")]
	public void SetupGrabberBags(bool local)
	{
	}

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0x139229C", Offset = "0x139229C", VA = "0x139229C")]
	private void SetupAvatarPos()
	{
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0x13929C0", Offset = "0x13929C0", VA = "0x13929C0")]
	public void OnOwnershipTransferFailed(PhotonView targetView, Player senderOfFailedRequest)
	{
	}

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0x13929C4", Offset = "0x13929C4", VA = "0x13929C4")]
	public bool IsInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0x13929CC", Offset = "0x13929CC", VA = "0x13929CC", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0x1392A98", Offset = "0x1392A98", VA = "0x1392A98")]
	public SetupPlayerAvatar()
	{
	}
}
[Token(Token = "0x2000177")]
public class OculusSettings : MonoBehaviour
{
	[Token(Token = "0x2000178")]
	[CompilerGenerated]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OculusSettings <>4__this;

		[Token(Token = "0x17000147")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0x139354C", Offset = "0x139354C", VA = "0x139354C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000148")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0x1393594", Offset = "0x1393594", VA = "0x1393594", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x1392D0C", Offset = "0x1392D0C", VA = "0x1392D0C")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x1392EDC", Offset = "0x1392EDC", VA = "0x1392EDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x1392EE0", Offset = "0x1392EE0", VA = "0x1392EE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x1393554", Offset = "0x1393554", VA = "0x1393554", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000179")]
	[CompilerGenerated]
	private sealed class <FixSpaceWarp>d__4 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x17000149")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000B46")]
			[Address(RVA = "0x13936F4", Offset = "0x13936F4", VA = "0x13936F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700014A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0x139373C", Offset = "0x139373C", VA = "0x139373C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x1392EA4", Offset = "0x1392EA4", VA = "0x1392EA4")]
		[DebuggerHidden]
		public <FixSpaceWarp>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x139359C", Offset = "0x139359C", VA = "0x139359C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x13935A0", Offset = "0x13935A0", VA = "0x13935A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x13936FC", Offset = "0x13936FC", VA = "0x13936FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float maxHz;

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0x1392C98", Offset = "0x1392C98", VA = "0x1392C98")]
	[IteratorStateMachine(typeof(<Start>d__1))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0x1392D34", Offset = "0x1392D34", VA = "0x1392D34")]
	public static void ApplyFFRSettings()
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0x1392DE4", Offset = "0x1392DE4", VA = "0x1392DE4")]
	public static void FixOculusSpaceWarp()
	{
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0x1392E44", Offset = "0x1392E44", VA = "0x1392E44")]
	[IteratorStateMachine(typeof(<FixSpaceWarp>d__4))]
	private static IEnumerator<float> FixSpaceWarp()
	{
		return null;
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0x1392ECC", Offset = "0x1392ECC", VA = "0x1392ECC")]
	public OculusSettings()
	{
	}
}
[Token(Token = "0x200017A")]
public class PanningNodeSpot : MonoBehaviour
{
	[Token(Token = "0x4000A37")]
	private const int BaseLootToSpawn = 3;

	[Token(Token = "0x4000A38")]
	private const float SpawnLootsTime = 3f;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int lootSpawnAmount;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HVRGrabbable[] spawnedEndLoots;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float minVelocityToSpawnLoot;

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float maxVelocityToSpawnLoot;

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip[] panningClips;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip[] panningVibrationClips;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool goldpanInTrigger;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool lootAmountDetermined;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Goldpan currentGoldpan;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float cancelPanningTime;

	[Token(Token = "0x4000A43")]
	private const float cancelDelay = 4f;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float mudPanningTimer;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshPro debugText;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AudioSource lastAudioSource;

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0x1393798", Offset = "0x1393798", VA = "0x1393798")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0x13938C8", Offset = "0x13938C8", VA = "0x13938C8")]
	private void DetermineLootAmount()
	{
	}

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0x1393958", Offset = "0x1393958", VA = "0x1393958")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0x1393FE0", Offset = "0x1393FE0", VA = "0x1393FE0")]
	private void PanningCanceled()
	{
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0x1394004", Offset = "0x1394004", VA = "0x1394004")]
	private void DespawnLoots()
	{
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0x13940C4", Offset = "0x13940C4", VA = "0x13940C4")]
	private void DespawnLoot(HVRGrabbable lootIO)
	{
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0x1393CC8", Offset = "0x1393CC8", VA = "0x1393CC8")]
	private bool HasGoldpanMoved()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0x1393D84", Offset = "0x1393D84", VA = "0x1393D84")]
	private void PanningUpdate()
	{
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0x1394168", Offset = "0x1394168", VA = "0x1394168")]
	private void ReleaseLoot(HVRGrabbable hvr)
	{
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0x1394698", Offset = "0x1394698", VA = "0x1394698")]
	private void PanningFinished()
	{
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0x1394738", Offset = "0x1394738", VA = "0x1394738")]
	private void DespawnNode()
	{
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0x1394334", Offset = "0x1394334", VA = "0x1394334")]
	private HVRGrabbable SpawnLoot()
	{
		return null;
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0x13947F4", Offset = "0x13947F4", VA = "0x13947F4")]
	private void OnLootGrabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000B56")]
	[Address(RVA = "0x13948A8", Offset = "0x13948A8", VA = "0x13948A8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0x13949B0", Offset = "0x13949B0", VA = "0x13949B0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0x1394ACC", Offset = "0x1394ACC", VA = "0x1394ACC")]
	public PanningNodeSpot()
	{
	}
}
[Token(Token = "0x200017B")]
public class RespawnWithButton : MonoBehaviour
{
	[Token(Token = "0x6000B59")]
	[Address(RVA = "0x1394B3C", Offset = "0x1394B3C", VA = "0x1394B3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0x1394DA8", Offset = "0x1394DA8", VA = "0x1394DA8")]
	private void SceneChangeStarted()
	{
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0x1394E6C", Offset = "0x1394E6C", VA = "0x1394E6C")]
	private void SceneChangeFinished()
	{
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0x1394F30", Offset = "0x1394F30", VA = "0x1394F30")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0x13951A0", Offset = "0x13951A0", VA = "0x13951A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0x1395248", Offset = "0x1395248", VA = "0x1395248")]
	private void ResetPosition()
	{
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0x139529C", Offset = "0x139529C", VA = "0x139529C")]
	public RespawnWithButton()
	{
	}
}
[Token(Token = "0x200017C")]
public class RockInstantiator : MonoBehaviour
{
	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject rockPrefab;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshCombiner meshCombiner;

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0x13952A4", Offset = "0x13952A4", VA = "0x13952A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B61")]
	[Address(RVA = "0x139540C", Offset = "0x139540C", VA = "0x139540C")]
	public RockInstantiator()
	{
	}
}
[Token(Token = "0x200017D")]
public class ShovelDiggingSpot : MonoBehaviourPun, IPoolable, IEventSystemHandler, ICullable, IPunInstantiateMagicCallback
{
	[Token(Token = "0x200017E")]
	[CompilerGenerated]
	private sealed class <DelayedDespawn>d__41 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShovelDiggingSpot <>4__this;

		[Token(Token = "0x1700014C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000B7D")]
			[Address(RVA = "0x1396F8C", Offset = "0x1396F8C", VA = "0x1396F8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700014D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0x1396FD4", Offset = "0x1396FD4", VA = "0x1396FD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x139632C", Offset = "0x139632C", VA = "0x139632C")]
		[DebuggerHidden]
		public <DelayedDespawn>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x1396D10", Offset = "0x1396D10", VA = "0x1396D10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x1396D14", Offset = "0x1396D14", VA = "0x1396D14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x1396F94", Offset = "0x1396F94", VA = "0x1396F94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem hitFX;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool showGizmo;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Collider meshCollider;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip[] shovelEnterClip;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioClip[] shovelExitClip;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioClip[] shovelEnterVibrationClips;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip destroyClip;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float cooldown;

	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ShovelSpade shovelSpade;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int minLootsToSpawn;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int maxLootsToSpawn;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 treasureToSpawnOriginalLocalPosition;

	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float currentDigAmount;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float cooldownTime;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int _wrongToolTries;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _lootSpawned;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	[SerializeField]
	private bool halloweenMode;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Rigidbody halloweenGraveStone;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private ParticleSystem destroyParticles;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Transform destroyPointTransform;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private GameObject stage0;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private GameObject stage1;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private GameObject stage2;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private GameObject stageEmpty;

	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private float stage1Threshold;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private float stage2Threshold;

	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 originalGraveStonePosition;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Quaternion originalGraveStoneRotation;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Renderer[] _renderers;

	[Token(Token = "0x1700014B")]
	public bool destroyed
	{
		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x13954FC", Offset = "0x13954FC", VA = "0x13954FC", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000B62")]
	[Address(RVA = "0x1395414", Offset = "0x1395414", VA = "0x1395414")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B64")]
	[Address(RVA = "0x1395558", Offset = "0x1395558", VA = "0x1395558", Slot = "8")]
	public void SetRenderers(bool status)
	{
	}

	[Token(Token = "0x6000B65")]
	[Address(RVA = "0x13955A4", Offset = "0x13955A4", VA = "0x13955A4", Slot = "9")]
	public bool IsVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B66")]
	[Address(RVA = "0x1395614", Offset = "0x1395614", VA = "0x1395614", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6000B67")]
	[Address(RVA = "0x1395684", Offset = "0x1395684", VA = "0x1395684")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B68")]
	[Address(RVA = "0x13957B4", Offset = "0x13957B4", VA = "0x13957B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0x1395618", Offset = "0x1395618", VA = "0x1395618")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0x1395864", Offset = "0x1395864", VA = "0x1395864", Slot = "5")]
	public void Release()
	{
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0x1395998", Offset = "0x1395998", VA = "0x1395998")]
	private void DigUpTreasure(Vector3 digPosition)
	{
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0x1395B70", Offset = "0x1395B70", VA = "0x1395B70")]
	private void SpawnLoots(Vector3 position)
	{
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0x13962B8", Offset = "0x13962B8", VA = "0x13962B8")]
	[IteratorStateMachine(typeof(<DelayedDespawn>d__41))]
	private IEnumerator<float> DelayedDespawn()
	{
		return null;
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0x1396354", Offset = "0x1396354", VA = "0x1396354")]
	[PunRPC]
	private void TellMasterToDespawnDiggingSpotRPC()
	{
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0x1396410", Offset = "0x1396410", VA = "0x1396410")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0x1396588", Offset = "0x1396588", VA = "0x1396588")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0x1396880", Offset = "0x1396880", VA = "0x1396880")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0x1396414", Offset = "0x1396414", VA = "0x1396414")]
	private void PhysicsIgnoreSpadeCollider(Collider other)
	{
	}

	[Token(Token = "0x6000B73")]
	[Address(RVA = "0x13968AC", Offset = "0x13968AC", VA = "0x13968AC")]
	private bool OnCooldown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0x139658C", Offset = "0x139658C", VA = "0x139658C")]
	private void CheckForSpadeCollision(Collider other)
	{
	}

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0x13968F0", Offset = "0x13968F0", VA = "0x13968F0")]
	public void DynamiteDig()
	{
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0x1396A54", Offset = "0x1396A54", VA = "0x1396A54")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0x1396B1C", Offset = "0x1396B1C", VA = "0x1396B1C", Slot = "10")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0x1396C8C", Offset = "0x1396C8C", VA = "0x1396C8C")]
	public ShovelDiggingSpot()
	{
	}

	[SpecialName]
	[Token(Token = "0x6000B79")]
	[Address(RVA = "0x1396D08", Offset = "0x1396D08", VA = "0x1396D08", Slot = "7")]
	private Transform ICullable.get_transform()
	{
		return null;
	}
}
[Token(Token = "0x200017F")]
public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
{
	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly object Lock;

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<Type, Singleton<T>> _instances;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private bool thisInstanceIsInTheDictionary;

	[Token(Token = "0x1700014E")]
	protected static bool Quitting
	{
		[Token(Token = "0x6000B80")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B81")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700014F")]
	public static T Instance
	{
		[Token(Token = "0x6000B82")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B83")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000B84")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000B85")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000B86")]
	protected Singleton()
	{
	}
}
[Token(Token = "0x2000180")]
public class BuildNumber : MonoBehaviour
{
	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshProUGUI buildNumberText;

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0x1397030", Offset = "0x1397030", VA = "0x1397030")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0x13970E4", Offset = "0x13970E4", VA = "0x13970E4")]
	public BuildNumber()
	{
	}
}
[Token(Token = "0x2000181")]
public class Geode : MonoBehaviourPun, IPoolable, IEventSystemHandler, IDamageable, ICullable, IPunInstantiateMagicCallback
{
	[Token(Token = "0x2000182")]
	private struct Piece
	{
		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 localPos;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion localRot;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody rb;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform transform;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshCollider collider;
	}

	[Token(Token = "0x2000183")]
	[CompilerGenerated]
	private sealed class <DelayedDespawn>d__33 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Geode <>4__this;

		[Token(Token = "0x17000151")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0x139906C", Offset = "0x139906C", VA = "0x139906C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000152")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0x13990B4", Offset = "0x13990B4", VA = "0x13990B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x139889C", Offset = "0x139889C", VA = "0x139889C")]
		[DebuggerHidden]
		public <DelayedDespawn>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x1398DB0", Offset = "0x1398DB0", VA = "0x1398DB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x1398DB4", Offset = "0x1398DB4", VA = "0x1398DB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x1399074", Offset = "0x1399074", VA = "0x1399074", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DamageType receiveDamageType;

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip geodeBlinkAudioClip;

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip geodeOpenAudioClip;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int pickaxeHitsToOpen;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private int sledgehammerHitsToOpen;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject destructionFXPrefab;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject solidGeode;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject piecesParent;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<Piece> pieces;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int minLootsToSpawn;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int maxLootsToSpawn;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int pickaxeHitsTaken;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int sledgeHitsTaken;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int _wrongToolTries;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool _open;

	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private PhotonTransformView _photonTransform;

	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Rigidbody _rb;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Renderer[] _renderers;

	[Token(Token = "0x17000150")]
	public bool destroyed
	{
		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x13970EC", Offset = "0x13970EC", VA = "0x13970EC", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0x1397148", Offset = "0x1397148", VA = "0x1397148", Slot = "9")]
	public void SetRenderers(bool status)
	{
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0x1397194", Offset = "0x1397194", VA = "0x1397194", Slot = "10")]
	public bool IsVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0x1397204", Offset = "0x1397204", VA = "0x1397204")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0x139729C", Offset = "0x139729C", VA = "0x139729C")]
	private void InitPieces()
	{
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0x1397784", Offset = "0x1397784", VA = "0x1397784", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0x13978E8", Offset = "0x13978E8", VA = "0x13978E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0x1397A18", Offset = "0x1397A18", VA = "0x1397A18")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0x1397788", Offset = "0x1397788", VA = "0x1397788")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0x1397D44", Offset = "0x1397D44", VA = "0x1397D44", Slot = "5")]
	public void Release()
	{
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0x1397E0C", Offset = "0x1397E0C", VA = "0x1397E0C")]
	private void PickaxeHit()
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0x13984B4", Offset = "0x13984B4", VA = "0x13984B4")]
	private void SledgehammerOrDynamiteHit()
	{
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0x1397FE0", Offset = "0x1397FE0", VA = "0x1397FE0")]
	[PunRPC]
	private void OpenGeodeRPC()
	{
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0x1398818", Offset = "0x1398818", VA = "0x1398818")]
	[IteratorStateMachine(typeof(<DelayedDespawn>d__33))]
	private IEnumerator<float> DelayedDespawn(float time)
	{
		return null;
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0x13988C4", Offset = "0x13988C4", VA = "0x13988C4")]
	private void GeodeUnableToOpenSound(bool playWrongToolClip)
	{
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0x13989B8", Offset = "0x13989B8", VA = "0x13989B8", Slot = "6")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0x1397B60", Offset = "0x1397B60", VA = "0x1397B60")]
	private void ResetPieces()
	{
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0x1398688", Offset = "0x1398688", VA = "0x1398688")]
	private void BreakInPieces()
	{
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0x1398A98", Offset = "0x1398A98", VA = "0x1398A98")]
	public void TurnOnSyncAndRigidbody()
	{
	}

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0x1398B60", Offset = "0x1398B60", VA = "0x1398B60")]
	[PunRPC]
	private void TurnOnSyncAndRigidbodyRPC()
	{
	}

	[Token(Token = "0x6000B9E")]
	[Address(RVA = "0x1398B98", Offset = "0x1398B98", VA = "0x1398B98", Slot = "11")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0x1398D08", Offset = "0x1398D08", VA = "0x1398D08")]
	public Geode()
	{
	}

	[SpecialName]
	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0x1398DA8", Offset = "0x1398DA8", VA = "0x1398DA8", Slot = "8")]
	private Transform ICullable.get_transform()
	{
		return null;
	}
}
[Token(Token = "0x2000184")]
[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(HVRGrabbable))]
public class TopworldSpecialLoot : MonoBehaviour
{
	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Currently used and programmed only for special topworld things")]
	public bool startKinematicAndGrabbable;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HVRGrabbable myGrabbable;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody myRB;

	[Token(Token = "0x6000BA7")]
	[Address(RVA = "0x1399110", Offset = "0x1399110", VA = "0x1399110")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BA8")]
	[Address(RVA = "0x13992CC", Offset = "0x13992CC", VA = "0x13992CC")]
	private void Ungrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000BA9")]
	[Address(RVA = "0x13992FC", Offset = "0x13992FC", VA = "0x13992FC")]
	private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000BAA")]
	[Address(RVA = "0x139932C", Offset = "0x139932C", VA = "0x139932C")]
	public TopworldSpecialLoot()
	{
	}
}
[Token(Token = "0x2000185")]
public class GenericLightBlink : MonoBehaviour
{
	[Token(Token = "0x2000186")]
	[CompilerGenerated]
	private sealed class <_BlinkLightOnce>d__13 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GenericLightBlink <>4__this;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float intensity;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x17000153")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0x1399ADC", Offset = "0x1399ADC", VA = "0x1399ADC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000154")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BB9")]
			[Address(RVA = "0x1399B24", Offset = "0x1399B24", VA = "0x1399B24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x13998A0", Offset = "0x13998A0", VA = "0x13998A0")]
		[DebuggerHidden]
		public <_BlinkLightOnce>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x1399900", Offset = "0x1399900", VA = "0x1399900", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x1399904", Offset = "0x1399904", VA = "0x1399904", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x1399AE4", Offset = "0x1399AE4", VA = "0x1399AE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000187")]
	[CompilerGenerated]
	private sealed class <_BlinkLightContinuously>d__14 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GenericLightBlink <>4__this;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float oneBlinkDuration;

		[Token(Token = "0x17000155")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0x1399C44", Offset = "0x1399C44", VA = "0x1399C44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000156")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0x1399C8C", Offset = "0x1399C8C", VA = "0x1399C8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x13998C8", Offset = "0x13998C8", VA = "0x13998C8")]
		[DebuggerHidden]
		public <_BlinkLightContinuously>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x1399B80", Offset = "0x1399B80", VA = "0x1399B80", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x1399B84", Offset = "0x1399B84", VA = "0x1399B84", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x1399C4C", Offset = "0x1399C4C", VA = "0x1399C4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Override light component")]
	[SerializeField]
	private Light overrideLight;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer warningRenderer;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Color origEmission;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Color fullEmission;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Light myLight;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float originalIntensity;

	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private CoroutineHandle blinkLightCoroutine;

	[Token(Token = "0x6000BAB")]
	[Address(RVA = "0x1399334", Offset = "0x1399334", VA = "0x1399334")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0x1399564", Offset = "0x1399564", VA = "0x1399564")]
	public void ToggleLight(bool active)
	{
	}

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0x1399584", Offset = "0x1399584", VA = "0x1399584")]
	public void BlinkLight(float duration, float intensity)
	{
	}

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0x13996A4", Offset = "0x13996A4", VA = "0x13996A4")]
	public void BlinkLight(float duration)
	{
	}

	[Token(Token = "0x6000BAF")]
	[Address(RVA = "0x13996E4", Offset = "0x13996E4", VA = "0x13996E4")]
	public void ToggleBlink(bool active, float oneBlinkDuration)
	{
	}

	[Token(Token = "0x6000BB0")]
	[Address(RVA = "0x1399734", Offset = "0x1399734", VA = "0x1399734")]
	public void ToggleBlink(bool active, float oneBlinkDuration, float intensity)
	{
	}

	[Token(Token = "0x6000BB1")]
	[Address(RVA = "0x139961C", Offset = "0x139961C", VA = "0x139961C")]
	[IteratorStateMachine(typeof(<_BlinkLightOnce>d__13))]
	private IEnumerator<float> _BlinkLightOnce(float duration, float intensity)
	{
		return null;
	}

	[Token(Token = "0x6000BB2")]
	[Address(RVA = "0x1399818", Offset = "0x1399818", VA = "0x1399818")]
	[IteratorStateMachine(typeof(<_BlinkLightContinuously>d__14))]
	private IEnumerator<float> _BlinkLightContinuously(float oneBlinkDuration, float intensity)
	{
		return null;
	}

	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0x13998F0", Offset = "0x13998F0", VA = "0x13998F0")]
	public GenericLightBlink()
	{
	}
}
[Token(Token = "0x2000188")]
[ExecuteInEditMode]
public class GetSkyboxForShader : MonoBehaviour
{
	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Renderer renderer;

	[Token(Token = "0x6000BC0")]
	[Address(RVA = "0x1399CE8", Offset = "0x1399CE8", VA = "0x1399CE8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BC1")]
	[Address(RVA = "0x1399E24", Offset = "0x1399E24", VA = "0x1399E24")]
	[ContextMenu("ChangeMaterial")]
	private void ChangeMaterial()
	{
	}

	[Token(Token = "0x6000BC2")]
	[Address(RVA = "0x139A09C", Offset = "0x139A09C", VA = "0x139A09C")]
	private void SkyboxChanged()
	{
	}

	[Token(Token = "0x6000BC3")]
	[Address(RVA = "0x139A0A0", Offset = "0x139A0A0", VA = "0x139A0A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0x139A1D4", Offset = "0x139A1D4", VA = "0x139A1D4")]
	public GetSkyboxForShader()
	{
	}
}
[Token(Token = "0x2000189")]
public class GiantClam : MonoBehaviour
{
	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Opening and closing settings")]
	[SerializeField]
	private Transform upperJaw;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private Vector3 openRot;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Vector3 closedRot;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Loot settings")]
	[SerializeField]
	private LootSpawnAndDespawnManager.LootType[] possibleLoot;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ClamLootTrigger clamLootTrigger;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject loot;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform lootSpawnPos;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private HVRGrabbable lootGrabbable;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Loot foundLootComponent;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool open;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float timer;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool shouldCount;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float openTime;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float closeTime;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private PhotonView photonView;

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool shouldOpen;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool playerInRange;

	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0x139A1DC", Offset = "0x139A1DC", VA = "0x139A1DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0x139A278", Offset = "0x139A278", VA = "0x139A278")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0x139A380", Offset = "0x139A380", VA = "0x139A380")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0x139A488", Offset = "0x139A488", VA = "0x139A488")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0x139A734", Offset = "0x139A734", VA = "0x139A734")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0x139A840", Offset = "0x139A840", VA = "0x139A840")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0x139A96C", Offset = "0x139A96C", VA = "0x139A96C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0x139A4F4", Offset = "0x139A4F4", VA = "0x139A4F4")]
	private void RunTimer()
	{
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0x139AAE0", Offset = "0x139AAE0", VA = "0x139AAE0")]
	private float RandomOpenTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0x139A250", Offset = "0x139A250", VA = "0x139A250")]
	private float RandomCloseTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000BCF")]
	[Address(RVA = "0x139AB08", Offset = "0x139AB08", VA = "0x139AB08")]
	private LootSpawnAndDespawnManager.LootType GetRandomLoot()
	{
		return default(LootSpawnAndDespawnManager.LootType);
	}

	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0x139AB78", Offset = "0x139AB78", VA = "0x139AB78")]
	private void SpawnTheLoot()
	{
	}

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0x139AE50", Offset = "0x139AE50", VA = "0x139AE50")]
	public void LootExited()
	{
	}

	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0x139AECC", Offset = "0x139AECC", VA = "0x139AECC")]
	[PunRPC]
	private void ToggleJawStatus(bool status)
	{
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0x139AED8", Offset = "0x139AED8", VA = "0x139AED8")]
	public GiantClam()
	{
	}
}
[Token(Token = "0x200018A")]
public class GloveLight : MonoBehaviourPun
{
	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DamageType damageType;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform rigIndexTip;

	[Token(Token = "0x4000AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform flame;

	[Token(Token = "0x4000AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioSource snapSFX;

	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string[] collisionTags;

	[Token(Token = "0x4000AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float activeTime;

	[Token(Token = "0x4000AB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private FireFlicker fireFlicker;

	[Token(Token = "0x4000AB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _isActive;

	[Token(Token = "0x4000AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool _isPartiallyActive;

	[Token(Token = "0x4000ABA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Collider lightCollider;

	[Token(Token = "0x4000ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private PlayerAvatar playerAvatar;

	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool _inputStatus;

	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool _partialInput;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float _lightCooldown;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool _allowed;

	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float extingquishTime;

	[Token(Token = "0x17000157")]
	public bool GetIsActive
	{
		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x139AF10", Offset = "0x139AF10", VA = "0x139AF10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0x139AF18", Offset = "0x139AF18", VA = "0x139AF18")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0x139AFBC", Offset = "0x139AFBC", VA = "0x139AFBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0x139B2D8", Offset = "0x139B2D8", VA = "0x139B2D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BD8")]
	[Address(RVA = "0x139B078", Offset = "0x139B078", VA = "0x139B078")]
	public void SetActive(bool value, bool force = false)
	{
	}

	[Token(Token = "0x6000BD9")]
	[Address(RVA = "0x139B3FC", Offset = "0x139B3FC", VA = "0x139B3FC")]
	public void SetPartiallyActive(bool value, bool force = false)
	{
	}

	[Token(Token = "0x6000BDA")]
	[Address(RVA = "0x139B60C", Offset = "0x139B60C", VA = "0x139B60C")]
	public void SetCanActivate(bool status)
	{
	}

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0x139B640", Offset = "0x139B640", VA = "0x139B640")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0x139B7B0", Offset = "0x139B7B0", VA = "0x139B7B0")]
	[PunRPC]
	private void ToggleGloveLightRPC(bool value)
	{
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0x139B7F0", Offset = "0x139B7F0", VA = "0x139B7F0")]
	public GloveLight()
	{
	}
}
[Token(Token = "0x200018B")]
public class HandJointPositioning : MonoBehaviour
{
	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ConfigurableJoint joint;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Quaternion startRotation;

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0x139B8D8", Offset = "0x139B8D8", VA = "0x139B8D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0x139B908", Offset = "0x139B908", VA = "0x139B908")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0x139B9C0", Offset = "0x139B9C0", VA = "0x139B9C0")]
	private void SetRotation(ConfigurableJoint joint, Quaternion targetRotation, Quaternion startRotation)
	{
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0x139BDC8", Offset = "0x139BDC8", VA = "0x139BDC8")]
	public HandJointPositioning()
	{
	}
}
[Token(Token = "0x200018C")]
public class Healthpotion : MonoBehaviourPun, IPunInstantiateMagicCallback, IPoolable, IEventSystemHandler, IInteractable
{
	[Token(Token = "0x200018D")]
	[CompilerGenerated]
	private sealed class <Drink>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Healthpotion <>4__this;

		[Token(Token = "0x17000158")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0x139CC0C", Offset = "0x139CC0C", VA = "0x139CC0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000159")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0x139CC54", Offset = "0x139CC54", VA = "0x139CC54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x139C3EC", Offset = "0x139C3EC", VA = "0x139C3EC")]
		[DebuggerHidden]
		public <Drink>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x139CA14", Offset = "0x139CA14", VA = "0x139CA14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x139CA18", Offset = "0x139CA18", VA = "0x139CA18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x139CC14", Offset = "0x139CC14", VA = "0x139CC14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200018E")]
	[CompilerGenerated]
	private sealed class <DespawnAfterTimeCoroutine>d__32 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Healthpotion <>4__this;

		[Token(Token = "0x1700015A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000C01")]
			[Address(RVA = "0x139CDCC", Offset = "0x139CDCC", VA = "0x139CDCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700015B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C03")]
			[Address(RVA = "0x139CE14", Offset = "0x139CE14", VA = "0x139CE14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x139C724", Offset = "0x139C724", VA = "0x139C724")]
		[DebuggerHidden]
		public <DespawnAfterTimeCoroutine>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x139CC5C", Offset = "0x139CC5C", VA = "0x139CC5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x139CC60", Offset = "0x139CC60", VA = "0x139CC60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x139CDD4", Offset = "0x139CDD4", VA = "0x139CDD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200018F")]
	[CompilerGenerated]
	private sealed class <FlatDrink>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Healthpotion <>4__this;

		[Token(Token = "0x1700015C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C07")]
			[Address(RVA = "0x139D070", Offset = "0x139D070", VA = "0x139D070", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0x139D0B8", Offset = "0x139D0B8", VA = "0x139D0B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x139C97C", Offset = "0x139C97C", VA = "0x139C97C")]
		[DebuggerHidden]
		public <FlatDrink>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x139CE70", Offset = "0x139CE70", VA = "0x139CE70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x139CE74", Offset = "0x139CE74", VA = "0x139CE74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x139D078", Offset = "0x139D078", VA = "0x139D078", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int heartsToHeal;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float timeToDrink;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float requiredTiltAngle;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip drinkingSound;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem particleSystem;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource audioSource;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool inHand;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool correctAngle;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool inPosition;

	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	private bool currentlyDrinking;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 ogScale;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private new PhotonView photonView;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool used;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private HVRGrabbable grabbable;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem[] allParticles;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private LocalizedString interactionText;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Rigidbody myRb;

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0x139BDD0", Offset = "0x139BDD0", VA = "0x139BDD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0x139BF18", Offset = "0x139BF18", VA = "0x139BF18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0x139C01C", Offset = "0x139C01C", VA = "0x139C01C", Slot = "5")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0x139C020", Offset = "0x139C020", VA = "0x139C020")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0x139C068", Offset = "0x139C068", VA = "0x139C068", Slot = "6")]
	public void Release()
	{
	}

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0x139C06C", Offset = "0x139C06C", VA = "0x139C06C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0x139C1A4", Offset = "0x139C1A4", VA = "0x139C1A4")]
	public void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0x139C1B0", Offset = "0x139C1B0", VA = "0x139C1B0")]
	public void Released(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0x139C1BC", Offset = "0x139C1BC", VA = "0x139C1BC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0x139C250", Offset = "0x139C250", VA = "0x139C250")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0x139C378", Offset = "0x139C378", VA = "0x139C378")]
	[IteratorStateMachine(typeof(<Drink>d__27))]
	private IEnumerator Drink()
	{
		return null;
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0x139C414", Offset = "0x139C414", VA = "0x139C414")]
	[PunRPC]
	private void DrinkingFX()
	{
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0x139C44C", Offset = "0x139C44C", VA = "0x139C44C")]
	[PunRPC]
	private void FlatDrinkingFX()
	{
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0x139C474", Offset = "0x139C474", VA = "0x139C474")]
	[PunRPC]
	private void StopDrinking(bool drinkFinished)
	{
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0x139C5C0", Offset = "0x139C5C0", VA = "0x139C5C0")]
	private void ReleasedAfterDrink(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0x139C6B0", Offset = "0x139C6B0", VA = "0x139C6B0")]
	[IteratorStateMachine(typeof(<DespawnAfterTimeCoroutine>d__32))]
	private IEnumerator<float> DespawnAfterTimeCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0x139C74C", Offset = "0x139C74C", VA = "0x139C74C", Slot = "4")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000BF3")]
	[Address(RVA = "0x139C8A0", Offset = "0x139C8A0", VA = "0x139C8A0", Slot = "7")]
	public void Interact()
	{
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0x139C908", Offset = "0x139C908", VA = "0x139C908")]
	[IteratorStateMachine(typeof(<FlatDrink>d__35))]
	private IEnumerator FlatDrink()
	{
		return null;
	}

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0x139C9A4", Offset = "0x139C9A4", VA = "0x139C9A4", Slot = "8")]
	public LocalizedString GetInteractionText()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0x139C9F8", Offset = "0x139C9F8", VA = "0x139C9F8", Slot = "9")]
	public GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0x139CA00", Offset = "0x139CA00", VA = "0x139CA00")]
	public Healthpotion()
	{
	}
}
[Token(Token = "0x2000190")]
public class HideIfNotDefine : MonoBehaviour
{
	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool hideIfNotZamer;

	[Token(Token = "0x6000C0A")]
	[Address(RVA = "0x139D0C0", Offset = "0x139D0C0", VA = "0x139D0C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C0B")]
	[Address(RVA = "0x139D0F4", Offset = "0x139D0F4", VA = "0x139D0F4")]
	public HideIfNotDefine()
	{
	}
}
[Token(Token = "0x2000191")]
public class Highlight : MonoBehaviour
{
	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Color highlightColor;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.Color disabledColor;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Color defaultColor;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer rend;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool disabled;

	[Token(Token = "0x6000C0C")]
	[Address(RVA = "0x139D0FC", Offset = "0x139D0FC", VA = "0x139D0FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C0D")]
	[Address(RVA = "0x139D19C", Offset = "0x139D19C", VA = "0x139D19C")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000C0E")]
	[Address(RVA = "0x139D280", Offset = "0x139D280", VA = "0x139D280")]
	internal void EnableHighlight()
	{
	}

	[Token(Token = "0x6000C0F")]
	[Address(RVA = "0x139D364", Offset = "0x139D364", VA = "0x139D364")]
	public void DisableHighlight()
	{
	}

	[Token(Token = "0x6000C10")]
	[Address(RVA = "0x139D44C", Offset = "0x139D44C", VA = "0x139D44C")]
	public void OnHover()
	{
	}

	[Token(Token = "0x6000C11")]
	[Address(RVA = "0x139D538", Offset = "0x139D538", VA = "0x139D538")]
	public void OnUnhover()
	{
	}

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0x139D624", Offset = "0x139D624", VA = "0x139D624")]
	public Highlight()
	{
	}
}
[Token(Token = "0x2000192")]
public class CustomHVRHandGrabber : HVRHandGrabber
{
	[NonSerialized]
	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
	public bool enemyAttachSlotAvailable;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x381")]
	private bool isBeingDestroyed;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x382")]
	private bool isMine;

	[Token(Token = "0x6000C13")]
	[Address(RVA = "0x139D640", Offset = "0x139D640", VA = "0x139D640")]
	public void Setup(bool isMine)
	{
	}

	[Token(Token = "0x6000C14")]
	[Address(RVA = "0x139D64C", Offset = "0x139D64C", VA = "0x139D64C", Slot = "24")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000C15")]
	[Address(RVA = "0x139D67C", Offset = "0x139D67C", VA = "0x139D67C", Slot = "27")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000C16")]
	[Address(RVA = "0x139DF8C", Offset = "0x139DF8C", VA = "0x139DF8C", Slot = "48")]
	protected override void OnReleased(HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x6000C17")]
	[Address(RVA = "0x139E024", Offset = "0x139E024", VA = "0x139E024")]
	private void IgnoreLocalPlayerCollision(HVRGrabbable grabbable, bool ignore)
	{
	}

	[Token(Token = "0x6000C18")]
	[Address(RVA = "0x139E134", Offset = "0x139E134", VA = "0x139E134", Slot = "68")]
	protected override void ResetHand(Transform hand, bool maintainPose = false)
	{
	}

	[Token(Token = "0x6000C19")]
	[Address(RVA = "0x139D6B4", Offset = "0x139D6B4", VA = "0x139D6B4")]
	private void CheckPullingGrabbable()
	{
	}

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0x139E1E0", Offset = "0x139E1E0", VA = "0x139E1E0", Slot = "39")]
	protected override void OnGrabbed(HVRGrabArgs args)
	{
	}

	[Token(Token = "0x6000C1B")]
	[Address(RVA = "0x139E26C", Offset = "0x139E26C", VA = "0x139E26C")]
	public CustomHVRHandGrabber()
	{
	}
}
[Token(Token = "0x2000193")]
public class CustomHVRInputModule : HVRInputModule
{
	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public new static CustomHVRInputModule Instance;

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0x139E2CC", Offset = "0x139E2CC", VA = "0x139E2CC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0x139E324", Offset = "0x139E324", VA = "0x139E324", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0x139E338", Offset = "0x139E338", VA = "0x139E338")]
	public CustomHVRInputModule()
	{
	}
}
[Token(Token = "0x2000194")]
public class CustomHVRManager : HVRManager
{
	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<HVRGrabberBase> registeredGrabbers;

	[Token(Token = "0x1700015E")]
	public static CustomHVRManager CustomInstance
	{
		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x139E340", Offset = "0x139E340", VA = "0x139E340")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x139E388", Offset = "0x139E388", VA = "0x139E388")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x1700015F")]
	public HVRScreenFade InGameUIScreenFader
	{
		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x139E3E0", Offset = "0x139E3E0", VA = "0x139E3E0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x139E3E8", Offset = "0x139E3E8", VA = "0x139E3E8")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0x139E3F0", Offset = "0x139E3F0", VA = "0x139E3F0", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0x139E678", Offset = "0x139E678", VA = "0x139E678")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0x139E89C", Offset = "0x139E89C", VA = "0x139E89C")]
	private void HDMMounted()
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0x139E930", Offset = "0x139E930", VA = "0x139E930")]
	private void AfterLocalPlayerSetup()
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0x139E9F0", Offset = "0x139E9F0", VA = "0x139E9F0")]
	public void InitScreenFade()
	{
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0x139EB3C", Offset = "0x139EB3C", VA = "0x139EB3C")]
	public void InitInGameUIFade()
	{
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0x139EC88", Offset = "0x139EC88", VA = "0x139EC88")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0x139EEF8", Offset = "0x139EEF8", VA = "0x139EEF8", Slot = "5")]
	public override void RegisterGrabber(HVRGrabberBase grabber)
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0x139F00C", Offset = "0x139F00C", VA = "0x139F00C", Slot = "6")]
	public override void UnregisterGrabber(HVRGrabberBase grabber)
	{
	}

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0x139F0C4", Offset = "0x139F0C4", VA = "0x139F0C4")]
	private void SceneChangeStarted()
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0x139F0C8", Offset = "0x139F0C8", VA = "0x139F0C8")]
	private void SceneChangeFinished()
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0x139E53C", Offset = "0x139E53C", VA = "0x139E53C")]
	private void GetGrabberManager()
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0x139F0E0", Offset = "0x139F0E0", VA = "0x139F0E0")]
	private void RegisterOldGrabbers()
	{
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0x139F180", Offset = "0x139F180", VA = "0x139F180")]
	public CustomHVRManager()
	{
	}
}
[Token(Token = "0x2000195")]
public class CustomHVRUIPointer : HVRUIPointer
{
	[Token(Token = "0x6000C31")]
	[Address(RVA = "0x139F208", Offset = "0x139F208", VA = "0x139F208")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0x139F328", Offset = "0x139F328", VA = "0x139F328", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0x139F390", Offset = "0x139F390", VA = "0x139F390")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0x139F4F0", Offset = "0x139F4F0", VA = "0x139F4F0")]
	private void NewSceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0x139F5C0", Offset = "0x139F5C0", VA = "0x139F5C0")]
	public CustomHVRUIPointer()
	{
	}
}
[Token(Token = "0x2000196")]
public class CustomItemSocketable : HVREnumFlagsSocketable<CustomItems>
{
	[Token(Token = "0x6000C36")]
	[Address(RVA = "0x139F5C8", Offset = "0x139F5C8", VA = "0x139F5C8")]
	public CustomItemSocketable()
	{
	}
}
[Token(Token = "0x2000197")]
[Flags]
public enum CustomItems
{
	[Token(Token = "0x4000AEC")]
	None = 0,
	[Token(Token = "0x4000AED")]
	BackPack = 1,
	[Token(Token = "0x4000AEE")]
	MyTool = 2,
	[Token(Token = "0x4000AEF")]
	All = -1
}
[Token(Token = "0x2000198")]
public class CustomItemSocketFilter : HVREnumFlagsSocketFilter<CustomItems>
{
	[Token(Token = "0x4000AF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject onlyPossibleSocketableObject;

	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ToolSocket myToolSocket;

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0x139F610", Offset = "0x139F610", VA = "0x139F610")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0x139F678", Offset = "0x139F678", VA = "0x139F678", Slot = "4")]
	public override bool IsValid(HVRSocketable filter)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0x139F7E0", Offset = "0x139F7E0", VA = "0x139F7E0")]
	public CustomItemSocketFilter()
	{
	}
}
[Token(Token = "0x2000199")]
public class FlatInputController : HVRController
{
	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0x139F828", Offset = "0x139F828", VA = "0x139F828", Slot = "8")]
	protected override void UpdateInput()
	{
	}

	[Token(Token = "0x6000C3B")]
	[Address(RVA = "0x139F8C4", Offset = "0x139F8C4", VA = "0x139F8C4")]
	private void UpdateInputPC()
	{
	}

	[Token(Token = "0x6000C3C")]
	[Address(RVA = "0x139F9C4", Offset = "0x139F9C4", VA = "0x139F9C4", Slot = "9")]
	protected override void CheckButtonState(HVRButtons button, ref HVRButtonState buttonState)
	{
	}

	[Token(Token = "0x6000C3D")]
	[Address(RVA = "0x139FB24", Offset = "0x139FB24", VA = "0x139FB24")]
	public FlatInputController()
	{
	}
}
[Token(Token = "0x200019A")]
public class HVRLoadingScreenTriggerer : MonoBehaviour
{
	[Token(Token = "0x200019B")]
	[CompilerGenerated]
	private sealed class <StopLoadingScreenDelayedCoroutine>d__7 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRLoadingScreenTriggerer <>4__this;

		[Token(Token = "0x17000160")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0x13A05D0", Offset = "0x13A05D0", VA = "0x13A05D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000161")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0x13A0618", Offset = "0x13A0618", VA = "0x13A0618", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x13A0108", Offset = "0x13A0108", VA = "0x13A0108")]
		[DebuggerHidden]
		public <StopLoadingScreenDelayedCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x13A044C", Offset = "0x13A044C", VA = "0x13A044C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x13A0450", Offset = "0x13A0450", VA = "0x13A0450", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x13A05D8", Offset = "0x13A05D8", VA = "0x13A05D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200019C")]
	[CompilerGenerated]
	private sealed class <_StartLoadingScreenInstant>d__8 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x17000162")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000C51")]
			[Address(RVA = "0x13A0848", Offset = "0x13A0848", VA = "0x13A0848", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000163")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0x13A0890", Offset = "0x13A0890", VA = "0x13A0890", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x13A0190", Offset = "0x13A0190", VA = "0x13A0190")]
		[DebuggerHidden]
		public <_StartLoadingScreenInstant>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x13A0674", Offset = "0x13A0674", VA = "0x13A0674", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x13A0678", Offset = "0x13A0678", VA = "0x13A0678", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x13A0850", Offset = "0x13A0850", VA = "0x13A0850", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HVRLoadingScreenTriggerer Instance;

	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool Loading;

	[Token(Token = "0x6000C3E")]
	[Address(RVA = "0x139FB7C", Offset = "0x139FB7C", VA = "0x139FB7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C3F")]
	[Address(RVA = "0x139FBD4", Offset = "0x139FBD4", VA = "0x139FBD4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0x139FD04", Offset = "0x139FD04", VA = "0x139FD04")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C41")]
	[Address(RVA = "0x139FEFC", Offset = "0x139FEFC", VA = "0x139FEFC")]
	public void StartLoadingScreen()
	{
	}

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0x13A000C", Offset = "0x13A000C", VA = "0x13A000C")]
	public void StopLoadingScreenDelayed()
	{
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0x13A0094", Offset = "0x13A0094", VA = "0x13A0094")]
	[IteratorStateMachine(typeof(<StopLoadingScreenDelayedCoroutine>d__7))]
	private IEnumerator<float> StopLoadingScreenDelayedCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0x13A0130", Offset = "0x13A0130", VA = "0x13A0130")]
	[IteratorStateMachine(typeof(<_StartLoadingScreenInstant>d__8))]
	public IEnumerator<float> _StartLoadingScreenInstant()
	{
		return null;
	}

	[Token(Token = "0x6000C45")]
	[Address(RVA = "0x13A01B8", Offset = "0x13A01B8", VA = "0x13A01B8")]
	public void StopLoadingScreenInstant()
	{
	}

	[Token(Token = "0x6000C46")]
	[Address(RVA = "0x13A041C", Offset = "0x13A041C", VA = "0x13A041C")]
	public HVRLoadingScreenTriggerer()
	{
	}
}
[Token(Token = "0x200019E")]
public class HVRPlatformRigActivator : MonoBehaviour
{
	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public HexaBodyPlayer3 hexaBodyPlayer3;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject hexaWrapper;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform cameraTransform;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform leftController;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform rightController;

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Simulator")]
	private GameObject Simulator;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform Sim_leftController;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform Sim_rightController;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private InputSimulator inputSimulator;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private HexaCameraRig hexaCameraRig;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Flat")]
	[SerializeField]
	private GameObject FlatStuff;

	[Token(Token = "0x4000B06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000B07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private FlatController flatController;

	[Token(Token = "0x4000B08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private FlatAvatarSetup setup;

	[Token(Token = "0x4000B09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Transform flat_leftController;

	[Token(Token = "0x4000B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Transform flat_rightController;

	[Token(Token = "0x4000B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private KJHexaBodyTeleporterModified teleporter;

	[Token(Token = "0x4000B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private GameObject flatCamera;

	[Token(Token = "0x4000B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private GameObject hexaLeftHand;

	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private GameObject hexaRightHand;

	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private GameObject extraChestCollider;

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0x13A0BC0", Offset = "0x13A0BC0", VA = "0x13A0BC0")]
	public void Setup()
	{
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0x13A11A8", Offset = "0x13A11A8", VA = "0x13A11A8")]
	public HVRPlatformRigActivator()
	{
	}
}
[Token(Token = "0x200019F")]
public class ToolSocket : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x20001A0")]
	[CompilerGenerated]
	private sealed class <_ReparentOldTool>d__11 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRGrabbable tool;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRCustomSocket socket;

		[Token(Token = "0x17000166")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0x13A1FA8", Offset = "0x13A1FA8", VA = "0x13A1FA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000167")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0x13A1FF0", Offset = "0x13A1FF0", VA = "0x13A1FF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x13A1EE0", Offset = "0x13A1EE0", VA = "0x13A1EE0")]
		[DebuggerHidden]
		public <_ReparentOldTool>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x13A1F2C", Offset = "0x13A1F2C", VA = "0x13A1F2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x13A1F30", Offset = "0x13A1F30", VA = "0x13A1F30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x13A1FB0", Offset = "0x13A1FB0", VA = "0x13A1FB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HVRCustomSocket hvrCustomSocket;

	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Tool.ToolType lastSocketedToolType;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CustomItemSocketFilter customItemSocketFilter;

	[Token(Token = "0x4000B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool onToolShedArea;

	[Token(Token = "0x4000B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[HideInInspector]
	public bool updateSaveData;

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0x13A11B0", Offset = "0x13A11B0", VA = "0x13A11B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0x13A144C", Offset = "0x13A144C", VA = "0x13A144C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0x13A14F0", Offset = "0x13A14F0", VA = "0x13A14F0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0x13A15F4", Offset = "0x13A15F4", VA = "0x13A15F4", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000C60")]
	[Address(RVA = "0x13A16E4", Offset = "0x13A16E4", VA = "0x13A16E4")]
	private void Released(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0x13A16E8", Offset = "0x13A16E8", VA = "0x13A16E8")]
	private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000C62")]
	[Address(RVA = "0x13A1E50", Offset = "0x13A1E50", VA = "0x13A1E50")]
	[IteratorStateMachine(typeof(<_ReparentOldTool>d__11))]
	private IEnumerator<float> _ReparentOldTool(HVRGrabbable tool, HVRCustomSocket socket)
	{
		return null;
	}

	[Token(Token = "0x6000C63")]
	[Address(RVA = "0x13A1F08", Offset = "0x13A1F08", VA = "0x13A1F08")]
	public void SetIsOnToolShedArea(bool newValue)
	{
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0x13A1F14", Offset = "0x13A1F14", VA = "0x13A1F14")]
	public Tool.ToolType GetLastSocketedToolType()
	{
		return default(Tool.ToolType);
	}

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0x13A1E2C", Offset = "0x13A1E2C", VA = "0x13A1E2C")]
	public void ResetLastSocketedToolType()
	{
	}

	[Token(Token = "0x6000C66")]
	[Address(RVA = "0x13A1F1C", Offset = "0x13A1F1C", VA = "0x13A1F1C")]
	public ToolSocket()
	{
	}
}
[Token(Token = "0x20001A1")]
public class HVR_VRIK_Setup : MonoBehaviour
{
	[Token(Token = "0x20001A2")]
	[CompilerGenerated]
	private sealed class <DelayedSetup>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVR_VRIK_Setup <>4__this;

		[Token(Token = "0x17000168")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0x13A2C50", Offset = "0x13A2C50", VA = "0x13A2C50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0x13A2C98", Offset = "0x13A2C98", VA = "0x13A2C98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x13A2198", Offset = "0x13A2198", VA = "0x13A2198")]
		[DebuggerHidden]
		public <DelayedSetup>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x13A2840", Offset = "0x13A2840", VA = "0x13A2840", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x13A2844", Offset = "0x13A2844", VA = "0x13A2844", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x13A2C58", Offset = "0x13A2C58", VA = "0x13A2C58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftHand;

	[Token(Token = "0x4000B1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightHand;

	[Token(Token = "0x4000B1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRIK_PUN_Player VRIK_PUN_Player;

	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject hvrRigs;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HVRPlatformRigActivator platformRigActivator;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] disableGameObjectIfNotMine;

	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MonoBehaviour[] disableScriptIfNotMine;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool debugAlwaysSetup;

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0x13A204C", Offset = "0x13A204C", VA = "0x13A204C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0x13A20F0", Offset = "0x13A20F0", VA = "0x13A20F0")]
	private void NewSceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0x13A20F4", Offset = "0x13A20F4", VA = "0x13A20F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0x13921A8", Offset = "0x13921A8", VA = "0x13921A8")]
	public void Setup()
	{
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0x13A2124", Offset = "0x13A2124", VA = "0x13A2124")]
	[IteratorStateMachine(typeof(<DelayedSetup>d__12))]
	private IEnumerator DelayedSetup()
	{
		return null;
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0x13A21C0", Offset = "0x13A21C0", VA = "0x13A21C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0x13A2264", Offset = "0x13A2264", VA = "0x13A2264")]
	public void RemoveMultiplayerComponents()
	{
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0x13A2838", Offset = "0x13A2838", VA = "0x13A2838")]
	public HVR_VRIK_Setup()
	{
	}
}
[Token(Token = "0x20001A3")]
public interface IFlamable
{
	[Token(Token = "0x6000C7B")]
	void TrySetOnFire();

	[Token(Token = "0x6000C7C")]
	bool Flamable();

	[Token(Token = "0x6000C7D")]
	bool OnFire();

	[Token(Token = "0x6000C7E")]
	void ExtinguishFire();
}
[Token(Token = "0x20001A4")]
public class IgnoredCollider : MonoBehaviour
{
	[Token(Token = "0x6000C7F")]
	[Address(RVA = "0x13A2CA0", Offset = "0x13A2CA0", VA = "0x13A2CA0")]
	public IgnoredCollider()
	{
	}
}
[Token(Token = "0x20001A5")]
public class IgnoreRotation : MonoBehaviour
{
	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion originalRotaion;

	[Token(Token = "0x6000C80")]
	[Address(RVA = "0x13A2CA8", Offset = "0x13A2CA8", VA = "0x13A2CA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C81")]
	[Address(RVA = "0x13A2CE4", Offset = "0x13A2CE4", VA = "0x13A2CE4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000C82")]
	[Address(RVA = "0x13A2D1C", Offset = "0x13A2D1C", VA = "0x13A2D1C")]
	public IgnoreRotation()
	{
	}
}
[Token(Token = "0x20001A6")]
public class InGameUIScreenFadeFinder : MonoBehaviour
{
	[Token(Token = "0x6000C83")]
	[Address(RVA = "0x13A2D74", Offset = "0x13A2D74", VA = "0x13A2D74")]
	public InGameUIScreenFadeFinder()
	{
	}
}
[Token(Token = "0x20001A7")]
public class ControllerSimulator : MonoBehaviour
{
	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool selected;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected BetterVelocityEstimator cachedVelocityEstimator;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected float magnitude;

	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected Vector3 axis;

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0x13A2D7C", Offset = "0x13A2D7C", VA = "0x13A2D7C")]
	public Vector3 GetVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0x13A2DAC", Offset = "0x13A2DAC", VA = "0x13A2DAC")]
	public Vector3 GetAngularVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0x13A2DDC", Offset = "0x13A2DDC", VA = "0x13A2DDC", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0x13A2DE8", Offset = "0x13A2DE8", VA = "0x13A2DE8", Slot = "5")]
	protected virtual void SetCaches()
	{
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0x13A2F04", Offset = "0x13A2F04", VA = "0x13A2F04")]
	public ControllerSimulator()
	{
	}
}
[Token(Token = "0x20001A8")]
public class InputSimulator : MonoBehaviour
{
	[Token(Token = "0x20001A9")]
	public enum MouseInputMode
	{
		[Token(Token = "0x4000B64")]
		Always,
		[Token(Token = "0x4000B65")]
		RequiresButtonPress
	}

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static InputSimulator Instance;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("General Settings")]
	[Range(0f, 200f)]
	public int fpsLimit;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("Show control information in the upper left corner of the screen.")]
	public bool showControlHints;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[UnityEngine.Tooltip("Hide hands when disabling them.")]
	public bool hideHandsAtSwitch;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[UnityEngine.Tooltip("Reset hand position and rotation when enabling them.")]
	public bool resetHandsAtSwitch;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[UnityEngine.Tooltip("Displays an axis helper to show which axis the hands will be moved through.")]
	public bool showHandAxisHelpers;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Mouse Cursor Lock Settings")]
	[UnityEngine.Tooltip("Lock the mouse cursor to the game window.")]
	public bool lockMouseToView;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("Whether the mouse movement always acts as input or requires a button press.")]
	public MouseInputMode mouseMovementInput;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Manual Adjustment Settings")]
	[UnityEngine.Tooltip("Adjust hand movement speed.")]
	public float handMoveMultiplier;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("Adjust hand rotation speed.")]
	public float handRotationMultiplier;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("Adjust player movement speed.")]
	public float playerMoveMultiplier;

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[UnityEngine.Tooltip("Adjust player rotation speed.")]
	public float playerRotationMultiplier;

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("Adjust player sprint speed.")]
	public float playerSprintMultiplier;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[UnityEngine.Tooltip("Adjust the speed of the cursor movement in locked mode.")]
	public float lockedCursorMultiplier;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("The Colour of the GameObject representing the left hand.")]
	public UnityEngine.Color leftHandColor;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("The Colour of the GameObject representing the right hand.")]
	public UnityEngine.Color rightHandColor;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Operation Key Binding Settings")]
	[UnityEngine.Tooltip("Key used to enable mouse input if a button press is required.")]
	public KeyCode mouseMovementKey;

	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[UnityEngine.Tooltip("Key used to toggle control hints on/off.")]
	public KeyCode toggleControlHints;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("Key used to toggle control hints on/off.")]
	public KeyCode toggleMouseLock;

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[UnityEngine.Tooltip("Key used to switch between left and righ hand.")]
	public KeyCode changeHands;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Key used to switch hands On/Off.")]
	public KeyCode handsOnOff;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[UnityEngine.Tooltip("Key used to switch between positional and rotational movement.")]
	public KeyCode rotationPosition;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[UnityEngine.Tooltip("Key used to switch between X/Y and X/Z axis.")]
	public KeyCode changeAxis;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[UnityEngine.Tooltip("Key used to distance pickup with left hand.")]
	public KeyCode distancePickupLeft;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[UnityEngine.Tooltip("Key used to distance pickup with right hand.")]
	public KeyCode distancePickupRight;

	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[UnityEngine.Tooltip("Key used to enable distance pickup.")]
	public KeyCode distancePickupModifier;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[UnityEngine.Tooltip("Key used to spin.")]
	public KeyCode swingControllerKey;

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Header("Movement Key Binding Settings")]
	[UnityEngine.Tooltip("Key used to sprint.")]
	public KeyCode sprint;

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Controller Key Binding Settings")]
	[UnityEngine.Tooltip("Key used to simulate trigger button.")]
	public KeyCode triggerAlias;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[UnityEngine.Tooltip("Key used to simulate grip button.")]
	public KeyCode gripAlias;

	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[UnityEngine.Tooltip("Key used to simulate touchpad button.")]
	public KeyCode touchpadAlias;

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[UnityEngine.Tooltip("Key used to simulate button one.")]
	public KeyCode buttonOneAlias;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[UnityEngine.Tooltip("Key used to simulate button two.")]
	public KeyCode buttonTwoAlias;

	[Token(Token = "0x4000B4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[UnityEngine.Tooltip("Key used to simulate start menu button.")]
	public KeyCode startMenuAlias;

	[Token(Token = "0x4000B4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[UnityEngine.Tooltip("Key used to switch between button touch and button press mode.")]
	public KeyCode touchModifier;

	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[UnityEngine.Tooltip("Key used to switch between hair touch mode.")]
	public KeyCode hairTouchModifier;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected bool isHand;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject hintCanvas;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected Text hintText;

	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Transform rightHand;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Transform leftHand;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected Transform currentHand;

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected Vector3 oldPos;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public HVRHandSide hvrHandSide;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Transform neck;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public ControllerSimulator rightController;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public ControllerSimulator leftController;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static GameObject cachedCameraRig;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected static bool destroyed;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	protected float sprintMultiplier;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject crossHairPanel;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	protected Transform leftHandHorizontalAxisGuide;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	protected Transform leftHandVerticalAxisGuide;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	protected Transform rightHandHorizontalAxisGuide;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	protected Transform rightHandVerticalAxisGuide;

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	protected Camera cachedCamera;

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Transform bodyTransform;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Vector3 defaultHandPosition;

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0x13A2F0C", Offset = "0x13A2F0C", VA = "0x13A2F0C", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000C8A")]
	[Address(RVA = "0x13A3180", Offset = "0x13A3180", VA = "0x13A3180", Slot = "5")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000C8B")]
	[Address(RVA = "0x13A31CC", Offset = "0x13A31CC", VA = "0x13A31CC", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000C8C")]
	[Address(RVA = "0x13A358C", Offset = "0x13A358C", VA = "0x13A358C")]
	private void SwingControllerInput()
	{
	}

	[Token(Token = "0x6000C8D")]
	[Address(RVA = "0x13A3728", Offset = "0x13A3728", VA = "0x13A3728", Slot = "7")]
	protected virtual void TryPickup(bool rightHand)
	{
	}

	[Token(Token = "0x6000C8E")]
	[Address(RVA = "0x13A3980", Offset = "0x13A3980", VA = "0x13A3980", Slot = "8")]
	protected virtual void UpdateHands()
	{
	}

	[Token(Token = "0x6000C8F")]
	[Address(RVA = "0x13A3C2C", Offset = "0x13A3C2C", VA = "0x13A3C2C", Slot = "9")]
	protected virtual void UpdateRotation()
	{
	}

	[Token(Token = "0x6000C90")]
	[Address(RVA = "0x13A3DC8", Offset = "0x13A3DC8", VA = "0x13A3DC8", Slot = "10")]
	protected virtual void SetHand()
	{
	}

	[Token(Token = "0x6000C91")]
	[Address(RVA = "0x13A3F78", Offset = "0x13A3F78", VA = "0x13A3F78", Slot = "11")]
	protected virtual void SetMove()
	{
	}

	[Token(Token = "0x6000C92")]
	[Address(RVA = "0x13A3FE8", Offset = "0x13A3FE8", VA = "0x13A3FE8", Slot = "12")]
	protected virtual void UpdateHints()
	{
	}

	[Token(Token = "0x6000C93")]
	[Address(RVA = "0x13A58B8", Offset = "0x13A58B8", VA = "0x13A58B8", Slot = "13")]
	protected virtual bool IsAcceptingMouseInput()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C94")]
	[Address(RVA = "0x13A58D4", Offset = "0x13A58D4", VA = "0x13A58D4", Slot = "14")]
	protected virtual Vector3 GetMouseDelta()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C95")]
	[Address(RVA = "0x13A59B4", Offset = "0x13A59B4", VA = "0x13A59B4", Slot = "15")]
	protected virtual void ToggleGuidePlanes(bool horizontalState, bool verticalState)
	{
	}

	[Token(Token = "0x6000C96")]
	[Address(RVA = "0x13A5B54", Offset = "0x13A5B54", VA = "0x13A5B54")]
	public InputSimulator()
	{
	}
}
[Token(Token = "0x20001AB")]
[AttributeUsage(AttributeTargets.Field, Inherited = true)]
public class HelpAttribute : PropertyAttribute
{
	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string text;

	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly MessageType type;

	[Token(Token = "0x6000C9A")]
	[Address(RVA = "0x13A6D38", Offset = "0x13A6D38", VA = "0x13A6D38")]
	public HelpAttribute(string text, MessageType type = MessageType.Info)
	{
	}
}
[Token(Token = "0x20001AC")]
public enum MessageType
{
	[Token(Token = "0x4000B6B")]
	None,
	[Token(Token = "0x4000B6C")]
	Info,
	[Token(Token = "0x4000B6D")]
	Warning,
	[Token(Token = "0x4000B6E")]
	Error
}
[Token(Token = "0x20001AD")]
public interface IKillable
{
	[Token(Token = "0x1700016A")]
	Action<GameObject> deathAction
	{
		[Token(Token = "0x6000C9C")]
		get;
		[Token(Token = "0x6000C9D")]
		set;
	}

	[Token(Token = "0x1700016B")]
	GameObject GetGameObject
	{
		[Token(Token = "0x6000C9E")]
		get;
	}

	[Token(Token = "0x1700016C")]
	bool IsDead
	{
		[Token(Token = "0x6000C9F")]
		get;
	}

	[Token(Token = "0x6000C9B")]
	[PunRPC]
	void KillRPC(DamageType killedByDamageType);
}
[Token(Token = "0x20001AE")]
public interface IDamageable
{
	[Token(Token = "0x6000CA0")]
	[PunRPC]
	void DamageRPC(int damageTaken, DamageType damageType);
}
[Token(Token = "0x20001AF")]
[Flags]
public enum DamageType
{
	[Token(Token = "0x4000B70")]
	None = 0,
	[Token(Token = "0x4000B71")]
	EnemyIgnitesFire = 1,
	[Token(Token = "0x4000B72")]
	PlayerBullet = 2,
	[Token(Token = "0x4000B73")]
	HandLight = 4,
	[Token(Token = "0x4000B74")]
	Torch = 8,
	[Token(Token = "0x4000B75")]
	Pickaxe = 0x10,
	[Token(Token = "0x4000B76")]
	Sledgehammer = 0x20,
	[Token(Token = "0x4000B77")]
	Shovel = 0x40,
	[Token(Token = "0x4000B78")]
	Dynamite = 0x80,
	[Token(Token = "0x4000B79")]
	GoldPan = 0x100,
	[Token(Token = "0x4000B7A")]
	CommonCollision = 0x200,
	[Token(Token = "0x4000B7B")]
	EnemyBasic = 0x400,
	[Token(Token = "0x4000B7C")]
	Falling = 0x800,
	[Token(Token = "0x4000B7D")]
	All = -1
}
[Token(Token = "0x20001B0")]
public enum MaterialType
{
	[Token(Token = "0x4000B7F")]
	Ground,
	[Token(Token = "0x4000B80")]
	Metal,
	[Token(Token = "0x4000B81")]
	Wood,
	[Token(Token = "0x4000B82")]
	Snow,
	[Token(Token = "0x4000B83")]
	Water,
	[Token(Token = "0x4000B84")]
	Bone,
	[Token(Token = "0x4000B85")]
	Gem,
	[Token(Token = "0x4000B86")]
	Glass,
	[Token(Token = "0x4000B87")]
	Rock,
	[Token(Token = "0x4000B88")]
	Plant,
	[Token(Token = "0x4000B89")]
	Meat,
	[Token(Token = "0x4000B8A")]
	Leather
}
[Token(Token = "0x20001B1")]
public interface IMeleeAttacker : IAttacker
{
	[Token(Token = "0x6000CA1")]
	void MeleeAttack();
}
[Token(Token = "0x20001B2")]
public interface IRangedAttacker : IAttacker
{
	[Token(Token = "0x6000CA2")]
	void PlayAttackAnimation(Vector3 target);

	[Token(Token = "0x6000CA3")]
	void FireProjectileRPC();
}
[Token(Token = "0x20001B3")]
public interface IAttacker
{
	[Token(Token = "0x1700016D")]
	DamageType GetDamageType
	{
		[Token(Token = "0x6000CA4")]
		get;
	}

	[Token(Token = "0x1700016E")]
	int GetAttackDamage
	{
		[Token(Token = "0x6000CA5")]
		get;
	}

	[Token(Token = "0x1700016F")]
	Transform GetTransform
	{
		[Token(Token = "0x6000CA6")]
		get;
	}

	[Token(Token = "0x17000170")]
	List<Transform> GetAlreadyHitTransforms
	{
		[Token(Token = "0x6000CA7")]
		get;
	}

	[Token(Token = "0x17000171")]
	float GetPushForce
	{
		[Token(Token = "0x6000CA8")]
		get;
	}
}
[Token(Token = "0x20001B4")]
public interface ICullable
{
	[Token(Token = "0x17000172")]
	bool destroyed
	{
		[Token(Token = "0x6000CA9")]
		get;
	}

	[Token(Token = "0x17000173")]
	Transform transform
	{
		[Token(Token = "0x6000CAA")]
		get;
	}

	[Token(Token = "0x6000CAB")]
	void SetRenderers(bool status);

	[Token(Token = "0x6000CAC")]
	bool IsVisible();
}
[Token(Token = "0x20001B5")]
public interface IOption
{
	[Token(Token = "0x6000CAD")]
	void Init();
}
[Token(Token = "0x20001B6")]
public interface ICollisionDamageDealer
{
}
[Token(Token = "0x20001B7")]
public interface IInteractable
{
	[Token(Token = "0x6000CAE")]
	void Interact();

	[Token(Token = "0x6000CAF")]
	LocalizedString GetInteractionText();

	[Token(Token = "0x6000CB0")]
	GameObject GetGameObject();
}
[Token(Token = "0x20001B8")]
public class KinematicUntilGrabbed : MonoBehaviour
{
	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("If used in a case where something breaks off, play audio clip")]
	[SerializeField]
	private AudioClip grabbedAudioClip;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody myRB;

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HVRGrabbable myGrabbable;

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0x13A6D74", Offset = "0x13A6D74", VA = "0x13A6D74")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CB2")]
	[Address(RVA = "0x13A6E18", Offset = "0x13A6E18", VA = "0x13A6E18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CB3")]
	[Address(RVA = "0x13A6F34", Offset = "0x13A6F34", VA = "0x13A6F34")]
	private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000CB4")]
	[Address(RVA = "0x13A7020", Offset = "0x13A7020", VA = "0x13A7020")]
	private void Released(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000CB5")]
	[Address(RVA = "0x13A70E8", Offset = "0x13A70E8", VA = "0x13A70E8")]
	public KinematicUntilGrabbed()
	{
	}
}
[Token(Token = "0x20001B9")]
public class B4RoomTransitionTransformCustimisations : MonoBehaviour
{
	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Overrides basic migo power coupling search mechanic for B4 elevator shaft")]
	public MigoPowerCoupling overridePowerCoupling;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Dont allow migo door")]
	public bool allowMigoDoor;

	[Token(Token = "0x6000CB6")]
	[Address(RVA = "0x13A70F0", Offset = "0x13A70F0", VA = "0x13A70F0")]
	public B4RoomTransitionTransformCustimisations()
	{
	}
}
[Token(Token = "0x20001BA")]
public class ElevatorRoom : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x20001BB")]
	[CompilerGenerated]
	private sealed class <_RepositionElevatorToTopworld>d__32 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ElevatorRoom <>4__this;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 newElevatorPos;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion newElevatorRot;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool teleportLocalPlayer;

		[Token(Token = "0x17000176")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0x13A937C", Offset = "0x13A937C", VA = "0x13A937C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000177")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0x13A93C4", Offset = "0x13A93C4", VA = "0x13A93C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x13A8910", Offset = "0x13A8910", VA = "0x13A8910")]
		[DebuggerHidden]
		public <_RepositionElevatorToTopworld>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x13A9260", Offset = "0x13A9260", VA = "0x13A9260", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x13A9264", Offset = "0x13A9264", VA = "0x13A9264", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x13A9384", Offset = "0x13A9384", VA = "0x13A9384", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001BC")]
	[CompilerGenerated]
	private sealed class <DelayedAllowAvatar>d__42 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x17000178")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0x13A94EC", Offset = "0x13A94EC", VA = "0x13A94EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000179")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0x13A9534", Offset = "0x13A9534", VA = "0x13A9534", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x13A9220", Offset = "0x13A9220", VA = "0x13A9220")]
		[DebuggerHidden]
		public <DelayedAllowAvatar>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x13A9420", Offset = "0x13A9420", VA = "0x13A9420", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x13A9424", Offset = "0x13A9424", VA = "0x13A9424", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x13A94F4", Offset = "0x13A94F4", VA = "0x13A94F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool elevatorIsOnTopWorld;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool _inUse;

	[Token(Token = "0x4000B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform levelTopWorld;

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform levelMiddle;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform levelDown;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform newLevelGenerationStartPos;

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RotatorObject rotatorObject;

	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ElevatorUpDownCanvas upDownCanvas;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private RoomTransitionTransform middleTransitionTransform;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private RoomTransitionTransform bottomTransitionTransform;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ElevatorMoving elevatorMoving;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject MiddleFloor;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private MeshCollider[] shaftMeshCollidersForNavMeshGen;

	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private GameObject deco;

	[Token(Token = "0x4000B9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Room room;

	[Token(Token = "0x4000B9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ElevatorShaftRoomDecoVariation decoVariation;

	[Token(Token = "0x17000174")]
	public bool InUse
	{
		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x13A7100", Offset = "0x13A7100", VA = "0x13A7100")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x13A7108", Offset = "0x13A7108", VA = "0x13A7108")]
		set
		{
		}
	}

	[Token(Token = "0x17000175")]
	public RotatorObject RotatorObject
	{
		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x13A738C", Offset = "0x13A738C", VA = "0x13A738C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000CBA")]
	[Address(RVA = "0x13A7394", Offset = "0x13A7394", VA = "0x13A7394")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CBB")]
	[Address(RVA = "0x13A7524", Offset = "0x13A7524", VA = "0x13A7524")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0x13A75BC", Offset = "0x13A75BC", VA = "0x13A75BC")]
	public void ResetElevator()
	{
	}

	[Token(Token = "0x6000CBD")]
	[Address(RVA = "0x13A7880", Offset = "0x13A7880", VA = "0x13A7880")]
	[PunRPC]
	public void MiddleFloorSetState(bool newState)
	{
	}

	[Token(Token = "0x6000CBE")]
	[Address(RVA = "0x13A7884", Offset = "0x13A7884", VA = "0x13A7884")]
	public void SetupElevator()
	{
	}

	[Token(Token = "0x6000CBF")]
	[Address(RVA = "0x13A7B48", Offset = "0x13A7B48", VA = "0x13A7B48")]
	public void SetRandomDeco(bool first = false, bool exitElevator = false)
	{
	}

	[Token(Token = "0x6000CC0")]
	[Address(RVA = "0x13A77EC", Offset = "0x13A77EC", VA = "0x13A77EC")]
	public void SetDecoActive(bool value)
	{
	}

	[Token(Token = "0x6000CC1")]
	[Address(RVA = "0x13A7F54", Offset = "0x13A7F54", VA = "0x13A7F54")]
	public void AddExitTransforms(bool bottom)
	{
	}

	[Token(Token = "0x6000CC2")]
	[Address(RVA = "0x13A8104", Offset = "0x13A8104", VA = "0x13A8104")]
	public void CheckExitTransforms()
	{
	}

	[Token(Token = "0x6000CC3")]
	[Address(RVA = "0x13A84B8", Offset = "0x13A84B8", VA = "0x13A84B8")]
	public void RepositionToTopWorld(bool teleportLocalPlayer = true)
	{
	}

	[Token(Token = "0x6000CC4")]
	[Address(RVA = "0x13A874C", Offset = "0x13A874C", VA = "0x13A874C")]
	[PunRPC]
	private void RepositionToTopWorldRPC(bool teleportLocalPlayer, Vector3 newElevatorPos, Quaternion newElevatorRot)
	{
	}

	[Token(Token = "0x6000CC5")]
	[Address(RVA = "0x13A883C", Offset = "0x13A883C", VA = "0x13A883C")]
	[IteratorStateMachine(typeof(<_RepositionElevatorToTopworld>d__32))]
	private IEnumerator<float> _RepositionElevatorToTopworld(Vector3 newElevatorPos, Quaternion newElevatorRot, bool teleportLocalPlayer = true)
	{
		return null;
	}

	[Token(Token = "0x6000CC6")]
	[Address(RVA = "0x13A8938", Offset = "0x13A8938", VA = "0x13A8938")]
	public ElevatorMoving GetMyElevator()
	{
		return null;
	}

	[Token(Token = "0x6000CC7")]
	[Address(RVA = "0x13A8940", Offset = "0x13A8940", VA = "0x13A8940")]
	public void CheckCanRotate()
	{
	}

	[Token(Token = "0x6000CC8")]
	[Address(RVA = "0x13A895C", Offset = "0x13A895C", VA = "0x13A895C")]
	public RoomTransitionTransform GetMiddleTransitionTransform()
	{
		return null;
	}

	[Token(Token = "0x6000CC9")]
	[Address(RVA = "0x13A8964", Offset = "0x13A8964", VA = "0x13A8964")]
	public RoomTransitionTransform GetBottomTransitionTransform()
	{
		return null;
	}

	[Token(Token = "0x6000CCA")]
	[Address(RVA = "0x13A7114", Offset = "0x13A7114", VA = "0x13A7114")]
	public void SyncToOthersRPC()
	{
	}

	[Token(Token = "0x6000CCB")]
	[Address(RVA = "0x13A896C", Offset = "0x13A896C", VA = "0x13A896C")]
	[PunRPC]
	public void SyncRPC(Vector3 pos, Vector3 euler, bool inUse, bool topWorld)
	{
	}

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0x13A8AC0", Offset = "0x13A8AC0", VA = "0x13A8AC0")]
	[PunRPC]
	private void SyncDecoRPC(byte bottomDeco, byte middleDeco)
	{
	}

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0x13A8D50", Offset = "0x13A8D50", VA = "0x13A8D50", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0x13A9150", Offset = "0x13A9150", VA = "0x13A9150", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000CCF")]
	[Address(RVA = "0x13A91C0", Offset = "0x13A91C0", VA = "0x13A91C0")]
	[IteratorStateMachine(typeof(<DelayedAllowAvatar>d__42))]
	private IEnumerator<float> DelayedAllowAvatar()
	{
		return null;
	}

	[Token(Token = "0x6000CD0")]
	[Address(RVA = "0x13A9248", Offset = "0x13A9248", VA = "0x13A9248")]
	public MeshCollider[] GetShaftMeshColliders()
	{
		return null;
	}

	[Token(Token = "0x6000CD1")]
	[Address(RVA = "0x13A9250", Offset = "0x13A9250", VA = "0x13A9250")]
	public Room GetRoom()
	{
		return null;
	}

	[Token(Token = "0x6000CD2")]
	[Address(RVA = "0x13A9258", Offset = "0x13A9258", VA = "0x13A9258")]
	public ElevatorRoom()
	{
	}
}
[Token(Token = "0x20001BD")]
public class ElevatorShaftMiddleTransitionTransform : MonoBehaviour
{
	[Token(Token = "0x6000CDF")]
	[Address(RVA = "0x13A9590", Offset = "0x13A9590", VA = "0x13A9590")]
	public ElevatorShaftMiddleTransitionTransform()
	{
	}
}
[Token(Token = "0x20001BE")]
public class ElevatorShaftRoomDecoVariation : MonoBehaviourPun
{
	[Serializable]
	[Token(Token = "0x20001BF")]
	public class DecoVariation
	{
		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject[] objectsToToggle;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Specifies the transition transform this decoration is tied to")]
		public RoomTransitionTransform connectedRoomTransitionTransform;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Use override blocker mesh, since we want to toggle on/off RoomTransitionTransforms for code logic purposes")]
		public GameObject overrideRoomTransitionTransformBlocker;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("This decoration's room data. Only the spawn amounts matter.")]
		public RoomDatas.RoomData customDecoRoomData;

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x13AA094", Offset = "0x13AA094", VA = "0x13AA094")]
		public DecoVariation()
		{
		}
	}

	[Token(Token = "0x20001C0")]
	[CompilerGenerated]
	private sealed class <_EnableRoomObjectsCoroutine>d__27 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bottom;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ElevatorShaftRoomDecoVariation <>4__this;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public byte selectedDeco;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__2;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <k>5__3;

		[Token(Token = "0x1700017C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000CF7")]
			[Address(RVA = "0x13AA470", Offset = "0x13AA470", VA = "0x13AA470", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700017D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0x13AA4B8", Offset = "0x13AA4B8", VA = "0x13AA4B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x13AA064", Offset = "0x13AA064", VA = "0x13AA064")]
		[DebuggerHidden]
		public <_EnableRoomObjectsCoroutine>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x13AA09C", Offset = "0x13AA09C", VA = "0x13AA09C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x13AA0A0", Offset = "0x13AA0A0", VA = "0x13AA0A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x13AA478", Offset = "0x13AA478", VA = "0x13AA478", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DecoVariation[] middleLevelDecosToToggle;

	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DecoVariation[] bottomLevelDecosToToggle;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RoomTransitionTransform bottomSelectedRoomTransitionTransform;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RoomTransitionTransform middleSelectedRoomTransitionTransform;

	[Token(Token = "0x4000BAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Room room;

	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool enableDecoOnLevelGen;

	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private byte decoToEnable;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool bottomToEnable;

	[Token(Token = "0x1700017A")]
	public byte selectedBottomDeco
	{
		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x13A9598", Offset = "0x13A9598", VA = "0x13A9598")]
		[CompilerGenerated]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x13A95A0", Offset = "0x13A95A0", VA = "0x13A95A0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700017B")]
	public byte selectedMiddleDeco
	{
		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x13A95A8", Offset = "0x13A95A8", VA = "0x13A95A8")]
		[CompilerGenerated]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x13A95B0", Offset = "0x13A95B0", VA = "0x13A95B0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000CE4")]
	[Address(RVA = "0x13A95B8", Offset = "0x13A95B8", VA = "0x13A95B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CE5")]
	[Address(RVA = "0x13A9620", Offset = "0x13A9620", VA = "0x13A9620")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CE6")]
	[Address(RVA = "0x13A9784", Offset = "0x13A9784", VA = "0x13A9784")]
	private void ResetOnLevelGen()
	{
	}

	[Token(Token = "0x6000CE7")]
	[Address(RVA = "0x13A9824", Offset = "0x13A9824", VA = "0x13A9824")]
	[PunRPC]
	private void ResetOnLevelGenRPC()
	{
	}

	[Token(Token = "0x6000CE8")]
	[Address(RVA = "0x13A997C", Offset = "0x13A997C", VA = "0x13A997C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0x13A9B34", Offset = "0x13A9B34", VA = "0x13A9B34")]
	private void LevelGenStarted()
	{
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0x13A7E54", Offset = "0x13A7E54", VA = "0x13A7E54")]
	public byte SetRandomDeco(bool bottom, byte? excludeDeco, bool enableRoomObjects)
	{
		return default(byte);
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0x13A8B08", Offset = "0x13A8B08", VA = "0x13A8B08")]
	public void SetDeco(byte deco, bool bottom, bool enableRoomObjects)
	{
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0x13A7B30", Offset = "0x13A7B30", VA = "0x13A7B30")]
	public RoomTransitionTransform GetSelectedRoomTransitionTransform(bool bottom)
	{
		return null;
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0x13A9C54", Offset = "0x13A9C54", VA = "0x13A9C54")]
	[PunRPC]
	private void ToggleDeco(byte selectedDeco, bool bottom, bool enableRoomObjects)
	{
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0x13A9DA4", Offset = "0x13A9DA4", VA = "0x13A9DA4")]
	private void EnableRoomTransitionAndData(byte selectedDeco, bool bottom)
	{
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0x13A9BC4", Offset = "0x13A9BC4", VA = "0x13A9BC4")]
	[IteratorStateMachine(typeof(<_EnableRoomObjectsCoroutine>d__27))]
	private IEnumerator<float> _EnableRoomObjectsCoroutine(byte selectedDeco, bool bottom)
	{
		return null;
	}

	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0x13A769C", Offset = "0x13A769C", VA = "0x13A769C")]
	public void DisableDecos()
	{
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0x13A982C", Offset = "0x13A982C", VA = "0x13A982C")]
	public void DisableDecoObjectsOnly()
	{
	}

	[Token(Token = "0x6000CF2")]
	[Address(RVA = "0x13AA08C", Offset = "0x13AA08C", VA = "0x13AA08C")]
	public ElevatorShaftRoomDecoVariation()
	{
	}
}
[Token(Token = "0x20001C1")]
public class OverlapBox : MonoBehaviour
{
	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask m_LayerMask;

	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool showEditorGizmos;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Collider myCollider;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider[] hitColliders;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Room> hitRooms;

	[Token(Token = "0x6000CFA")]
	[Address(RVA = "0x13AA514", Offset = "0x13AA514", VA = "0x13AA514")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CFB")]
	[Address(RVA = "0x13AA590", Offset = "0x13AA590", VA = "0x13AA590")]
	public void ResetCollider()
	{
	}

	[Token(Token = "0x6000CFC")]
	[Address(RVA = "0x13AA5B0", Offset = "0x13AA5B0", VA = "0x13AA5B0")]
	public List<Room> MyCollidedRooms()
	{
		return null;
	}

	[Token(Token = "0x6000CFD")]
	[Address(RVA = "0x13AA860", Offset = "0x13AA860", VA = "0x13AA860")]
	public void EnableCollision()
	{
	}

	[Token(Token = "0x6000CFE")]
	[Address(RVA = "0x13AA880", Offset = "0x13AA880", VA = "0x13AA880")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000CFF")]
	[Address(RVA = "0x13AA994", Offset = "0x13AA994", VA = "0x13AA994")]
	public OverlapBox()
	{
	}
}
[Token(Token = "0x20001C2")]
public class Room : MonoBehaviourPun
{
	[Token(Token = "0x20001C4")]
	[CompilerGenerated]
	private sealed class <_TryFitRoom>d__23 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Room <>4__this;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool exitElevator;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RoomTransitionTransform <currentRoomGeneratingTransform>5__2;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<RoomTransitionTransform> <allRoomTransitionTransforms>5__3;

		[Token(Token = "0x1700017F")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0x13AD9C0", Offset = "0x13AD9C0", VA = "0x13AD9C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000180")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0x13ADA08", Offset = "0x13ADA08", VA = "0x13ADA08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x13ABA50", Offset = "0x13ABA50", VA = "0x13ABA50")]
		[DebuggerHidden]
		public <_TryFitRoom>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x13AD084", Offset = "0x13AD084", VA = "0x13AD084", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x13AD088", Offset = "0x13AD088", VA = "0x13AD088", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x13AD9C8", Offset = "0x13AD9C8", VA = "0x13AD9C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C5")]
	[CompilerGenerated]
	private sealed class <BlockExitsOverTime>d__30 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<RoomTransitionTransform> exitsToBlock;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Room <>4__this;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000181")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0x13ADC18", Offset = "0x13ADC18", VA = "0x13ADC18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000182")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0x13ADC60", Offset = "0x13ADC60", VA = "0x13ADC60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x13AC314", Offset = "0x13AC314", VA = "0x13AC314")]
		[DebuggerHidden]
		public <BlockExitsOverTime>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x13ADA64", Offset = "0x13ADA64", VA = "0x13ADA64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x13ADA68", Offset = "0x13ADA68", VA = "0x13ADA68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x13ADC20", Offset = "0x13ADC20", VA = "0x13ADC20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Automatically getted from CSV and displayed on the inspector only for debugging purposes")]
	public RoomDatas.RoomData roomData;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RoomTransitionTransform[] roomTransitionTransforms;

	[Token(Token = "0x4000BC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LevelGenerationManager generationManager;

	[Token(Token = "0x4000BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OverlapBox[] myOverlapBoxes;

	[Token(Token = "0x4000BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public List<Room> collidedRooms;

	[Token(Token = "0x4000BC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RoomContentSpawner roomContentSpawner;

	[Token(Token = "0x4000BC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RoomPropController roomPropController;

	[Token(Token = "0x4000BC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<MultiNode> myMultiNodes;

	[Token(Token = "0x4000BCA")]
	private const string tryFitRoomCoroutineName = "TryFitRoomCoroutine";

	[Token(Token = "0x4000BCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<PhotonView> childPhotonviews;

	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int roomIndex;

	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool topworld;

	[Token(Token = "0x4000BCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<RoomTransitionTransform> blockedExits;

	[Token(Token = "0x1700017E")]
	public List<DiggingArea> DiggingAreas
	{
		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x13AAA54", Offset = "0x13AAA54", VA = "0x13AAA54")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x13AAA5C", Offset = "0x13AAA5C", VA = "0x13AAA5C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000D02")]
	[Address(RVA = "0x13AAA64", Offset = "0x13AAA64", VA = "0x13AAA64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0x13AAEE0", Offset = "0x13AAEE0", VA = "0x13AAEE0")]
	public int GetIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000D04")]
	[Address(RVA = "0x13AAEE8", Offset = "0x13AAEE8", VA = "0x13AAEE8")]
	public void SetupRoom(LevelGenerationManager generationManager, int index, bool exitElevator = false)
	{
	}

	[Token(Token = "0x6000D05")]
	[Address(RVA = "0x13AB57C", Offset = "0x13AB57C", VA = "0x13AB57C")]
	[PunRPC]
	private void ResetTransitionTransformsRPC()
	{
	}

	[Token(Token = "0x6000D06")]
	[Address(RVA = "0x13AB60C", Offset = "0x13AB60C", VA = "0x13AB60C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D07")]
	[Address(RVA = "0x13AB744", Offset = "0x13AB744", VA = "0x13AB744")]
	private void CacheChildPhotonviews()
	{
	}

	[Token(Token = "0x6000D08")]
	[Address(RVA = "0x13AB344", Offset = "0x13AB344", VA = "0x13AB344")]
	private void PositionRoom(bool exitElevator = false)
	{
	}

	[Token(Token = "0x6000D09")]
	[Address(RVA = "0x13AB9C8", Offset = "0x13AB9C8", VA = "0x13AB9C8")]
	[IteratorStateMachine(typeof(<_TryFitRoom>d__23))]
	private IEnumerator<float> _TryFitRoom(bool exitElevator = false)
	{
		return null;
	}

	[Token(Token = "0x6000D0A")]
	[Address(RVA = "0x13AB908", Offset = "0x13AB908", VA = "0x13AB908")]
	private void RoomFinished()
	{
	}

	[Token(Token = "0x6000D0B")]
	[Address(RVA = "0x13ABA78", Offset = "0x13ABA78", VA = "0x13ABA78")]
	public void SyncRoom([Optional] Player playerToSync)
	{
	}

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0x13ABF24", Offset = "0x13ABF24", VA = "0x13ABF24")]
	[PunRPC]
	private void RoomFinishedRPC(Vector3 roomPosition, Quaternion roomRotation)
	{
	}

	[Token(Token = "0x6000D0D")]
	[Address(RVA = "0x13AC024", Offset = "0x13AC024", VA = "0x13AC024")]
	private RoomTransitionTransform GetRandomTransitionTransform(List<RoomTransitionTransform> roomTransitionTransforms)
	{
		return null;
	}

	[Token(Token = "0x6000D0E")]
	[Address(RVA = "0x13AC0A8", Offset = "0x13AC0A8", VA = "0x13AC0A8")]
	public void BlockUnusedExits()
	{
	}

	[Token(Token = "0x6000D0F")]
	[Address(RVA = "0x13AC284", Offset = "0x13AC284", VA = "0x13AC284")]
	[IteratorStateMachine(typeof(<BlockExitsOverTime>d__30))]
	private IEnumerator<float> BlockExitsOverTime(List<RoomTransitionTransform> exitsToBlock)
	{
		return null;
	}

	[Token(Token = "0x6000D10")]
	[Address(RVA = "0x13AC228", Offset = "0x13AC228", VA = "0x13AC228")]
	private void DisableOverlapColliders()
	{
	}

	[Token(Token = "0x6000D11")]
	[Address(RVA = "0x13AC33C", Offset = "0x13AC33C", VA = "0x13AC33C")]
	public void GenerateContent([Optional] Player playerToSync)
	{
	}

	[Token(Token = "0x6000D12")]
	[Address(RVA = "0x13AC48C", Offset = "0x13AC48C", VA = "0x13AC48C")]
	[PunRPC]
	private void GenerateContentRPC()
	{
	}

	[Token(Token = "0x6000D13")]
	[Address(RVA = "0x13AC698", Offset = "0x13AC698", VA = "0x13AC698")]
	public bool IsRoomContentGenerated()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D14")]
	[Address(RVA = "0x13AC780", Offset = "0x13AC780", VA = "0x13AC780")]
	public List<RoomTransitionTransform> GetUnusedRoomTransitionTransforms()
	{
		return null;
	}

	[Token(Token = "0x6000D15")]
	[Address(RVA = "0x13AC8AC", Offset = "0x13AC8AC", VA = "0x13AC8AC")]
	public void DeactivateRoom()
	{
	}

	[Token(Token = "0x6000D16")]
	[Address(RVA = "0x13AC9D8", Offset = "0x13AC9D8", VA = "0x13AC9D8")]
	public RoomContentSpawner GetContentSpawner()
	{
		return null;
	}

	[Token(Token = "0x6000D17")]
	[Address(RVA = "0x13AC9E0", Offset = "0x13AC9E0", VA = "0x13AC9E0")]
	public List<MultiNode> GetMultiNodes()
	{
		return null;
	}

	[Token(Token = "0x6000D18")]
	[Address(RVA = "0x13AAB08", Offset = "0x13AAB08", VA = "0x13AAB08")]
	public void GetReferences()
	{
	}

	[Token(Token = "0x6000D19")]
	[Address(RVA = "0x13ACB0C", Offset = "0x13ACB0C", VA = "0x13ACB0C")]
	public int[] GetChildPhotonViewIds()
	{
		return null;
	}

	[Token(Token = "0x6000D1A")]
	[Address(RVA = "0x13ACC60", Offset = "0x13ACC60", VA = "0x13ACC60")]
	public void SyncChildPhotonViewIds(int[] newChildIds, int[] destroyedPropIDsArray)
	{
	}

	[Token(Token = "0x6000D1B")]
	[Address(RVA = "0x13ACD38", Offset = "0x13ACD38", VA = "0x13ACD38")]
	public void ResetChildViewIds()
	{
	}

	[Token(Token = "0x6000D1C")]
	[Address(RVA = "0x13ACE24", Offset = "0x13ACE24", VA = "0x13ACE24")]
	public void ToggleOverlapBoxCollision(bool enable)
	{
	}

	[Token(Token = "0x6000D1D")]
	[Address(RVA = "0x13ACE90", Offset = "0x13ACE90", VA = "0x13ACE90")]
	public RoomPropController GetRoomPropController()
	{
		return null;
	}

	[Token(Token = "0x6000D1E")]
	[Address(RVA = "0x13ACE98", Offset = "0x13ACE98", VA = "0x13ACE98")]
	public Room()
	{
	}
}
[Token(Token = "0x20001C6")]
public class RoomContentSpawner : MonoBehaviour
{
	[Token(Token = "0x20001C7")]
	[CompilerGenerated]
	private sealed class <_WaitForCorrectLevel>d__5 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RoomContentSpawner <>4__this;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Room cachedRoom;

		[Token(Token = "0x17000183")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0x13ADF58", Offset = "0x13ADF58", VA = "0x13ADF58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000184")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0x13ADFA0", Offset = "0x13ADFA0", VA = "0x13ADFA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x13ADE60", Offset = "0x13ADE60", VA = "0x13ADE60")]
		[DebuggerHidden]
		public <_WaitForCorrectLevel>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x13ADEC0", Offset = "0x13ADEC0", VA = "0x13ADEC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x13ADEC4", Offset = "0x13ADEC4", VA = "0x13ADEC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x13ADF60", Offset = "0x13ADF60", VA = "0x13ADF60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C8")]
	[CompilerGenerated]
	private sealed class <_GenerateFreeminingAreas>d__6 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RoomContentSpawner <>4__this;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool askMasterForDiggingAreaUpdates;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int <i>5__2;

		[Token(Token = "0x17000185")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0x13AE300", Offset = "0x13AE300", VA = "0x13AE300", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000186")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D40")]
			[Address(RVA = "0x13AE348", Offset = "0x13AE348", VA = "0x13AE348", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x13ADE88", Offset = "0x13ADE88", VA = "0x13ADE88")]
		[DebuggerHidden]
		public <_GenerateFreeminingAreas>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x13ADFFC", Offset = "0x13ADFFC", VA = "0x13ADFFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x13AE000", Offset = "0x13AE000", VA = "0x13AE000", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x13AE308", Offset = "0x13AE308", VA = "0x13AE308", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DiggingArea[] freeminingAreas;

	[Token(Token = "0x4000BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Room myRoom;

	[Token(Token = "0x4000BDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool contentGenerated;

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0x13ADCBC", Offset = "0x13ADCBC", VA = "0x13ADCBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D2F")]
	[Address(RVA = "0x13AC578", Offset = "0x13AC578", VA = "0x13AC578")]
	public void GenerateContent(Room room, bool askMasterForDiggingAreaUpdates = false)
	{
	}

	[Token(Token = "0x6000D30")]
	[Address(RVA = "0x13ADD48", Offset = "0x13ADD48", VA = "0x13ADD48")]
	[IteratorStateMachine(typeof(<_WaitForCorrectLevel>d__5))]
	private IEnumerator<float> _WaitForCorrectLevel(Room cachedRoom)
	{
		return null;
	}

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0x13ADDD8", Offset = "0x13ADDD8", VA = "0x13ADDD8")]
	[IteratorStateMachine(typeof(<_GenerateFreeminingAreas>d__6))]
	private IEnumerator<float> _GenerateFreeminingAreas(bool askMasterForDiggingAreaUpdates = false)
	{
		return null;
	}

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0x13ADCC0", Offset = "0x13ADCC0", VA = "0x13ADCC0")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0x13ADEB0", Offset = "0x13ADEB0", VA = "0x13ADEB0")]
	public bool IsContentGenerated()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0x13ADEB8", Offset = "0x13ADEB8", VA = "0x13ADEB8")]
	public RoomContentSpawner()
	{
	}
}
[Token(Token = "0x20001C9")]
public class RoomTransitionTransform : MonoBehaviourPun
{
	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[Help("NOTICE! \n If you want to toggle off the blocking walls, toggle off the BlockExitObject Object. DO NOT TOGGLE OFF THIS OBJECT. If they are disabled, it does not matter.", MessageType.Info)]
	public bool inUse;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject biome1BlockWall;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject biome2BlockWall;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject biome3BlockWall;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject biome4BlockWall;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Help("Forces this transition transform to be always the first to generate, DO NOT TOGGLE ON if you dont know what you are doing", MessageType.Info)]
	public bool forceStart;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[Help("Forces elevator to this transition transform. DO NOT TOGGLE ON if you dont know what you are doing.There should only be 1 possible force elevator exit on one level, so use only on setpieces", MessageType.Info)]
	public bool forceElevatorExit;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion originalLocalRotation;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Room myRoom;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<RoomTransitionTransform> ThisLevelExitTransforms;

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0x13AE3A4", Offset = "0x13AE3A4", VA = "0x13AE3A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D42")]
	[Address(RVA = "0x13AE66C", Offset = "0x13AE66C", VA = "0x13AE66C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0x13AE7B8", Offset = "0x13AE7B8", VA = "0x13AE7B8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0x13AE7BC", Offset = "0x13AE7BC", VA = "0x13AE7BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0x13AB188", Offset = "0x13AB188", VA = "0x13AB188")]
	public void ResetTransform()
	{
	}

	[Token(Token = "0x6000D46")]
	[Address(RVA = "0x13ABDCC", Offset = "0x13ABDCC", VA = "0x13ABDCC")]
	public void BlockExit(bool sync = true, [Optional] Player playerToSync)
	{
	}

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0x13AEC50", Offset = "0x13AEC50", VA = "0x13AEC50")]
	[PunRPC]
	private void BlockExitRPC()
	{
	}

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0x13AE7C0", Offset = "0x13AE7C0", VA = "0x13AE7C0")]
	private void DestroyOtherWalls()
	{
	}

	[Token(Token = "0x6000D49")]
	[Address(RVA = "0x13AEF7C", Offset = "0x13AEF7C", VA = "0x13AEF7C")]
	public Room GetMyRoom()
	{
		return null;
	}

	[Token(Token = "0x6000D4A")]
	[Address(RVA = "0x13A8314", Offset = "0x13A8314", VA = "0x13A8314")]
	public void SetMigoDoorCoupling(bool active)
	{
	}

	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0x13AEF84", Offset = "0x13AEF84", VA = "0x13AEF84")]
	public bool HasMigoDoorCoupling()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0x13AF0C4", Offset = "0x13AF0C4", VA = "0x13AF0C4")]
	public RoomTransitionTransform()
	{
	}
}
[Token(Token = "0x20001CA")]
public class RunGenerationSlotMachine : MonoBehaviourPunCallbacks
{
	[Serializable]
	[Token(Token = "0x20001CB")]
	public class Modifier
	{
		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int priority;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ModifierType modifierType;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sprite modifierSprite;

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x13B1758", Offset = "0x13B1758", VA = "0x13B1758")]
		public Modifier()
		{
		}
	}

	[Token(Token = "0x20001CC")]
	public enum ModifierType
	{
		[Token(Token = "0x4000C0E")]
		Maze,
		[Token(Token = "0x4000C0F")]
		DiggingSpots,
		[Token(Token = "0x4000C10")]
		WaterPools,
		[Token(Token = "0x4000C11")]
		GoldRush,
		[Token(Token = "0x4000C12")]
		MonsterRush,
		[Token(Token = "0x4000C13")]
		Danger,
		[Token(Token = "0x4000C14")]
		SafeCaves,
		[Token(Token = "0x4000C15")]
		FastRun,
		[Token(Token = "0x4000C16")]
		Chompy,
		[Token(Token = "0x4000C17")]
		SlimPickings,
		[Token(Token = "0x4000C18")]
		NewMine,
		[Token(Token = "0x4000C19")]
		Geodes
	}

	[Token(Token = "0x20001CD")]
	public class ModifierComparer : IComparer<Modifier>
	{
		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RunGenerationData runGenData;

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x13B1084", Offset = "0x13B1084", VA = "0x13B1084")]
		public ModifierComparer(RunGenerationData runGenData)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x13B1760", Offset = "0x13B1760", VA = "0x13B1760", Slot = "4")]
		public int Compare(Modifier x, Modifier y)
		{
			return default(int);
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x13B10B4", Offset = "0x13B10B4", VA = "0x13B10B4")]
		public bool CheckConditions(Modifier modifier, RunGenerationData runGenerationData)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20001CE")]
	[CompilerGenerated]
	private sealed class <Start>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RunGenerationSlotMachine <>4__this;

		[Token(Token = "0x17000187")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0x13B1E1C", Offset = "0x13B1E1C", VA = "0x13B1E1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000188")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0x13B1E64", Offset = "0x13B1E64", VA = "0x13B1E64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x13AF1D8", Offset = "0x13AF1D8", VA = "0x13AF1D8")]
		[DebuggerHidden]
		public <Start>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x13B17DC", Offset = "0x13B17DC", VA = "0x13B17DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x13B17E0", Offset = "0x13B17E0", VA = "0x13B17E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x13B1E24", Offset = "0x13B1E24", VA = "0x13B1E24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001CF")]
	[CompilerGenerated]
	private sealed class <_MakeLeverKinematicWhenOnStartRotation>d__36 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RunGenerationSlotMachine <>4__this;

		[Token(Token = "0x17000189")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0x13B1F1C", Offset = "0x13B1F1C", VA = "0x13B1F1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700018A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x13B1F64", Offset = "0x13B1F64", VA = "0x13B1F64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x13B07D0", Offset = "0x13B07D0", VA = "0x13B07D0")]
		[DebuggerHidden]
		public <_MakeLeverKinematicWhenOnStartRotation>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x13B1E6C", Offset = "0x13B1E6C", VA = "0x13B1E6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x13B1E70", Offset = "0x13B1E70", VA = "0x13B1E70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x13B1F24", Offset = "0x13B1F24", VA = "0x13B1F24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D0")]
	[CompilerGenerated]
	private sealed class <_StartRollingSlotImages>d__41 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RunGenerationSlotMachine <>4__this;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ModifierType modifier1;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ModifierType modifier2;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ModifierType modifier3;

		[Token(Token = "0x1700018B")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x13B2310", Offset = "0x13B2310", VA = "0x13B2310", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700018C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0x13B2358", Offset = "0x13B2358", VA = "0x13B2358", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x13B0FB4", Offset = "0x13B0FB4", VA = "0x13B0FB4")]
		[DebuggerHidden]
		public <_StartRollingSlotImages>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x13B1FC0", Offset = "0x13B1FC0", VA = "0x13B1FC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x13B1FC4", Offset = "0x13B1FC4", VA = "0x13B1FC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x13B2318", Offset = "0x13B2318", VA = "0x13B2318", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Modifier[] modifiers;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RunGenerationSlotMachineUI slotMachineUI;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Animator slotMachineAnimator;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HVRGrabbable leverGrabbable;

	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private HVRRotationTracker leverRotation;

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioClip leverPullAudioClip;

	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip leverPullDeclinedAudioClip;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip bellRingAudioClip;

	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject[] disableObjectsIfNotBought;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private OtherUpgradePathScriptableObject.UpgradeType myUpgradeType;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private OtherUpgradePathScriptableObject.UpgradeType myElevatorUpgradeType;

	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject purchaseSign;

	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioClip buyClip;

	[Token(Token = "0x4000C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private int costToReroll;

	[Token(Token = "0x4000C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private GameObject moneyEffectPrefab;

	[Token(Token = "0x4000C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private TextMeshProUGUI costToRollText;

	[Token(Token = "0x4000C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private RunGenerationData runGenData;

	[Token(Token = "0x4000C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<Modifier> tempModifiersList;

	[Token(Token = "0x4000C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Modifier> randomizedOrderModifierList;

	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool leverActivated;

	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int currentTier;

	[Token(Token = "0x4000C08")]
	private const string startedSpinningTriggerName = "SlotsStartedSpinning";

	[Token(Token = "0x4000C09")]
	private const string stoppedSpinningTriggerName = "SlotsStoppedSpinning";

	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0x13AF164", Offset = "0x13AF164", VA = "0x13AF164")]
	[IteratorStateMachine(typeof(<Start>d__25))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000D4F")]
	[Address(RVA = "0x13AF200", Offset = "0x13AF200", VA = "0x13AF200")]
	private void Loaded()
	{
	}

	[Token(Token = "0x6000D50")]
	[Address(RVA = "0x13AF40C", Offset = "0x13AF40C", VA = "0x13AF40C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0x13AF204", Offset = "0x13AF204", VA = "0x13AF204")]
	private void SetupSlotMachine()
	{
	}

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0x13AFE6C", Offset = "0x13AFE6C", VA = "0x13AFE6C")]
	private void Upgraded(OtherUpgradePathScriptableObject.UpgradeType arg0)
	{
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0x13AF718", Offset = "0x13AF718", VA = "0x13AF718")]
	private void ToggleObjects(bool active)
	{
	}

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0x13B0024", Offset = "0x13B0024", VA = "0x13B0024")]
	private void ReturnToTop()
	{
	}

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0x13B0090", Offset = "0x13B0090", VA = "0x13B0090")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0x13B02C0", Offset = "0x13B02C0", VA = "0x13B02C0")]
	private void SpawnMoneyEffect(int amount)
	{
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0x13B05A4", Offset = "0x13B05A4", VA = "0x13B05A4")]
	private void LeverGrabbed(HVRGrabberBase grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x6000D58")]
	[Address(RVA = "0x13B06F4", Offset = "0x13B06F4", VA = "0x13B06F4")]
	private void LeverReleased(HVRGrabberBase grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x6000D59")]
	[Address(RVA = "0x13B075C", Offset = "0x13B075C", VA = "0x13B075C")]
	[IteratorStateMachine(typeof(<_MakeLeverKinematicWhenOnStartRotation>d__36))]
	private IEnumerator<float> _MakeLeverKinematicWhenOnStartRotation()
	{
		return null;
	}

	[Token(Token = "0x6000D5A")]
	[Address(RVA = "0x13AFFDC", Offset = "0x13AFFDC", VA = "0x13AFFDC")]
	private void GenerateNewData()
	{
	}

	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0x13AF780", Offset = "0x13AF780", VA = "0x13AF780")]
	private void GenerateDataAndGetModifiers(bool forceSlotImages)
	{
	}

	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0x13B0A8C", Offset = "0x13B0A8C", VA = "0x13B0A8C")]
	[PunRPC]
	private void ScrollImagesRPC(bool forceSlotImages, ModifierType modifier1, ModifierType modifier2, ModifierType modifier3)
	{
	}

	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0x13B0CDC", Offset = "0x13B0CDC", VA = "0x13B0CDC", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0x13B0C44", Offset = "0x13B0C44", VA = "0x13B0C44")]
	[IteratorStateMachine(typeof(<_StartRollingSlotImages>d__41))]
	private IEnumerator<float> _StartRollingSlotImages(ModifierType modifier1, ModifierType modifier2, ModifierType modifier3)
	{
		return null;
	}

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0x13B0FDC", Offset = "0x13B0FDC", VA = "0x13B0FDC")]
	private void ToggleCranks(bool active)
	{
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0x13B07F8", Offset = "0x13B07F8", VA = "0x13B07F8")]
	private void GetRunModifiers(RunGenerationData runGenerationData)
	{
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0x13B122C", Offset = "0x13B122C", VA = "0x13B122C")]
	public void BellRing()
	{
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0x13B1510", Offset = "0x13B1510", VA = "0x13B1510")]
	public RunGenerationData GetRunGenData()
	{
		return null;
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0x13B12D4", Offset = "0x13B12D4", VA = "0x13B12D4")]
	private void PlayModifierVoiceline()
	{
	}

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0x13B1518", Offset = "0x13B1518", VA = "0x13B1518")]
	public void Interact()
	{
	}

	[Token(Token = "0x6000D65")]
	[Address(RVA = "0x13B16D0", Offset = "0x13B16D0", VA = "0x13B16D0")]
	public RunGenerationSlotMachine()
	{
	}
}
[Token(Token = "0x20001D2")]
public class RunGenerationSlotMachineUI : MonoBehaviour
{
	[Token(Token = "0x20001D3")]
	[CompilerGenerated]
	private sealed class <_RollImages>d__32 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int slot;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RunGenerationSlotMachineUI <>4__this;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <time>5__2;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <slotEndPos>5__3;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <distance>5__4;

		[Token(Token = "0x17000190")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0x13B2C08", Offset = "0x13B2C08", VA = "0x13B2C08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000191")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x13B2C50", Offset = "0x13B2C50", VA = "0x13B2C50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x13B25E0", Offset = "0x13B25E0", VA = "0x13B25E0")]
		[DebuggerHidden]
		public <_RollImages>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x13B29D0", Offset = "0x13B29D0", VA = "0x13B29D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x13B29D4", Offset = "0x13B29D4", VA = "0x13B29D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x13B2C10", Offset = "0x13B2C10", VA = "0x13B2C10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject rollImagePrefab;

	[Token(Token = "0x4000C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ScrollRect roll1Scroll;

	[Token(Token = "0x4000C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ScrollRect roll2Scroll;

	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ScrollRect roll3Scroll;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AnimationCurve slotUIChangeSlowdown;

	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioClip slotStopAudioClip;

	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float duration;

	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float slot1NormalizedPos;

	[Token(Token = "0x4000C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float slot2NormalizedPos;

	[Token(Token = "0x4000C32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float slot3NormalizedPos;

	[Token(Token = "0x4000C33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float slot1EndPos;

	[Token(Token = "0x4000C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float slot2EndPos;

	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float slot3EndPos;

	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private RunGenerationSlotMachine.Modifier[] allModifiers;

	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private AudioSource slotsRunningAudioSource;

	[Token(Token = "0x1700018D")]
	public bool slot1Running
	{
		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x13B2434", Offset = "0x13B2434", VA = "0x13B2434")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x13B243C", Offset = "0x13B243C", VA = "0x13B243C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700018E")]
	public bool slot2Running
	{
		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x13B2448", Offset = "0x13B2448", VA = "0x13B2448")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x13B2450", Offset = "0x13B2450", VA = "0x13B2450")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700018F")]
	public bool slot3Running
	{
		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x13B245C", Offset = "0x13B245C", VA = "0x13B245C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x13B2464", Offset = "0x13B2464", VA = "0x13B2464")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000D85")]
	[Address(RVA = "0x13B2470", Offset = "0x13B2470", VA = "0x13B2470")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D86")]
	[Address(RVA = "0x13B1B30", Offset = "0x13B1B30", VA = "0x13B1B30")]
	public void GenerateImages(RunGenerationSlotMachine.Modifier[] modifiers)
	{
	}

	[Token(Token = "0x6000D87")]
	[Address(RVA = "0x13B22E4", Offset = "0x13B22E4", VA = "0x13B22E4")]
	public void ToggleSlotsRunningAudio(bool play)
	{
	}

	[Token(Token = "0x6000D88")]
	[Address(RVA = "0x13B0B74", Offset = "0x13B0B74", VA = "0x13B0B74")]
	public void SnapRollImage(int slot, RunGenerationSlotMachine.ModifierType modifierType)
	{
	}

	[Token(Token = "0x6000D89")]
	[Address(RVA = "0x13B2140", Offset = "0x13B2140", VA = "0x13B2140")]
	public void RollImages(RunGenerationSlotMachine.ModifierType modifier1, RunGenerationSlotMachine.ModifierType modifier2, RunGenerationSlotMachine.ModifierType modifier3)
	{
	}

	[Token(Token = "0x6000D8A")]
	[Address(RVA = "0x13B254C", Offset = "0x13B254C", VA = "0x13B254C")]
	[IteratorStateMachine(typeof(<_RollImages>d__32))]
	private IEnumerator<float> _RollImages(float duration, int slot)
	{
		return null;
	}

	[Token(Token = "0x6000D8B")]
	[Address(RVA = "0x13B2608", Offset = "0x13B2608", VA = "0x13B2608")]
	private float GetSlotNormalizedPos(int slot)
	{
		return default(float);
	}

	[Token(Token = "0x6000D8C")]
	[Address(RVA = "0x13B263C", Offset = "0x13B263C", VA = "0x13B263C")]
	private void ChooseNearest(int slot)
	{
	}

	[Token(Token = "0x6000D8D")]
	[Address(RVA = "0x13B2950", Offset = "0x13B2950", VA = "0x13B2950")]
	private void ScrollWheels(int slot, float amount)
	{
	}

	[Token(Token = "0x6000D8E")]
	[Address(RVA = "0x13B24D8", Offset = "0x13B24D8", VA = "0x13B24D8")]
	private void SetScrollWheelPos(int slot)
	{
	}

	[Token(Token = "0x6000D8F")]
	[Address(RVA = "0x13B29C0", Offset = "0x13B29C0", VA = "0x13B29C0")]
	public RunGenerationSlotMachineUI()
	{
	}
}
[Token(Token = "0x20001D4")]
public class LoadingScreenPlaystationCheckInvite : MonoBehaviour
{
	[Token(Token = "0x20001D5")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000192")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0x13B3054", Offset = "0x13B3054", VA = "0x13B3054", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000193")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x13B309C", Offset = "0x13B309C", VA = "0x13B309C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x13B2D0C", Offset = "0x13B2D0C", VA = "0x13B2D0C")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x13B2FB8", Offset = "0x13B2FB8", VA = "0x13B2FB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x13B2FBC", Offset = "0x13B2FBC", VA = "0x13B2FBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x13B305C", Offset = "0x13B305C", VA = "0x13B305C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inviteReceived;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool foundEvent;

	[Token(Token = "0x6000D96")]
	[Address(RVA = "0x13B2CAC", Offset = "0x13B2CAC", VA = "0x13B2CAC")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0x13B2D34", Offset = "0x13B2D34", VA = "0x13B2D34")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D98")]
	[Address(RVA = "0x13B2D38", Offset = "0x13B2D38", VA = "0x13B2D38")]
	private void Main_OnAsyncEvent(NpCallbackEvent callbackEvent)
	{
	}

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0x13B2D3C", Offset = "0x13B2D3C", VA = "0x13B2D3C")]
	private void HandleAsyncEvent(NpCallbackEvent callbackEvent)
	{
	}

	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0x13B2FAC", Offset = "0x13B2FAC", VA = "0x13B2FAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0x13B2FA8", Offset = "0x13B2FA8", VA = "0x13B2FA8")]
	private void JoinedSessionEvent(Matching.SessionInvitationEventResponse sessionInvitationEvent)
	{
	}

	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0x13B2FB0", Offset = "0x13B2FB0", VA = "0x13B2FB0")]
	public LoadingScreenPlaystationCheckInvite()
	{
	}
}
[Token(Token = "0x20001D6")]
public class PSInviteDDOLHolder : MonoBehaviour
{
	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Matching.SessionInvitationEventResponse storedSessionInvitationEvent;

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0x13B30A4", Offset = "0x13B30A4", VA = "0x13B30A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0x13B3110", Offset = "0x13B3110", VA = "0x13B3110")]
	public void SetSessionResponse(Matching.SessionInvitationEventResponse sessionInvitationEvent)
	{
	}

	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0x13B3118", Offset = "0x13B3118", VA = "0x13B3118")]
	public Matching.SessionInvitationEventResponse GetStoredSessionInvitationEvent()
	{
		return null;
	}

	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0x13B3120", Offset = "0x13B3120", VA = "0x13B3120")]
	public PSInviteDDOLHolder()
	{
	}
}
[Token(Token = "0x20001D7")]
public class LoadingScreenHintController : MonoBehaviour
{
	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LoadingScreenHint[] availableHints;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Check this if the target text component is not a textmeshprougui but rather a textmeshpro")]
	public bool textMeshProNotUGUI;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TextMeshProUGUI textmesh;

	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TextMeshPro textmeshNotUGUI;

	[Token(Token = "0x4000C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string translatedHint;

	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LoadingScreenHint hint;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LocalizedString hintText;

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0x13B3194", Offset = "0x13B3194", VA = "0x13B3194")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0x13B3224", Offset = "0x13B3224", VA = "0x13B3224")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DA9")]
	[Address(RVA = "0x13B335C", Offset = "0x13B335C", VA = "0x13B335C")]
	public void RandomHint()
	{
	}

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0x13B35F4", Offset = "0x13B35F4", VA = "0x13B35F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0x13B35F8", Offset = "0x13B35F8", VA = "0x13B35F8")]
	private void SceneChangeStarted()
	{
	}

	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0x13B35FC", Offset = "0x13B35FC", VA = "0x13B35FC")]
	public LoadingScreenHintController()
	{
	}
}
[Token(Token = "0x20001D8")]
public class LoadingScreenIndicator : MonoBehaviour
{
	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float rotationSpeed;

	[Token(Token = "0x6000DAD")]
	[Address(RVA = "0x13B3604", Offset = "0x13B3604", VA = "0x13B3604")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DAE")]
	[Address(RVA = "0x13B36B8", Offset = "0x13B36B8", VA = "0x13B36B8")]
	public LoadingScreenIndicator()
	{
	}
}
[Token(Token = "0x20001D9")]
public class LanguageSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new bool enabled;

	[Token(Token = "0x6000DAF")]
	[Address(RVA = "0x13B36C8", Offset = "0x13B36C8", VA = "0x13B36C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DB0")]
	[Address(RVA = "0x13B36CC", Offset = "0x13B36CC", VA = "0x13B36CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DB1")]
	[Address(RVA = "0x13B3A10", Offset = "0x13B3A10", VA = "0x13B3A10")]
	public LanguageSwitcher()
	{
	}
}
[Token(Token = "0x20001DA")]
public class LogPunVoids : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x6000DB2")]
	[Address(RVA = "0x13B3A18", Offset = "0x13B3A18", VA = "0x13B3A18", Slot = "30")]
	public override void OnConnected()
	{
	}

	[Token(Token = "0x6000DB3")]
	[Address(RVA = "0x13B3AE4", Offset = "0x13B3AE4", VA = "0x13B3AE4", Slot = "45")]
	public override void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x6000DB4")]
	[Address(RVA = "0x13B3B24", Offset = "0x13B3B24", VA = "0x13B3B24", Slot = "35")]
	public override void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000DB5")]
	[Address(RVA = "0x13B3B64", Offset = "0x13B3B64", VA = "0x13B3B64", Slot = "33")]
	public override void OnCreateRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000DB6")]
	[Address(RVA = "0x13B3BA4", Offset = "0x13B3BA4", VA = "0x13B3BA4", Slot = "50")]
	public override void OnCustomAuthenticationFailed(string debugMessage)
	{
	}

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0x13B3BE4", Offset = "0x13B3BE4", VA = "0x13B3BE4", Slot = "49")]
	public override void OnCustomAuthenticationResponse(Dictionary<string, object> data)
	{
	}

	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0x13B3C24", Offset = "0x13B3C24", VA = "0x13B3C24", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0x13B3C64", Offset = "0x13B3C64", VA = "0x13B3C64", Slot = "38")]
	public override void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0x13B3CA4", Offset = "0x13B3CA4", VA = "0x13B3CA4", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0x13B3CE4", Offset = "0x13B3CE4", VA = "0x13B3CE4", Slot = "53")]
	public override void OnErrorInfo(ErrorInfo errorInfo)
	{
	}

	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0x13B3D24", Offset = "0x13B3D24", VA = "0x13B3D24", Slot = "48")]
	public override void OnFriendListUpdate(List<Photon.Realtime.FriendInfo> friendList)
	{
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0x13B3D64", Offset = "0x13B3D64", VA = "0x13B3D64", Slot = "36")]
	public override void OnJoinedLobby()
	{
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0x13B3DA4", Offset = "0x13B3DA4", VA = "0x13B3DA4", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0x13B3DE4", Offset = "0x13B3DE4", VA = "0x13B3DE4", Slot = "44")]
	public override void OnJoinRandomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000DC0")]
	[Address(RVA = "0x13B3E24", Offset = "0x13B3E24", VA = "0x13B3E24", Slot = "34")]
	public override void OnJoinRoomFailed(short returnCode, string message)
	{
	}

	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0x13B3E64", Offset = "0x13B3E64", VA = "0x13B3E64", Slot = "37")]
	public override void OnLeftLobby()
	{
	}

	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0x13B3EA4", Offset = "0x13B3EA4", VA = "0x13B3EA4", Slot = "31")]
	public override void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0x13B3EE4", Offset = "0x13B3EE4", VA = "0x13B3EE4", Slot = "52")]
	public override void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
	{
	}

	[Token(Token = "0x6000DC4")]
	[Address(RVA = "0x13B3F24", Offset = "0x13B3F24", VA = "0x13B3F24", Slot = "32")]
	public override void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000DC5")]
	[Address(RVA = "0x13B3F64", Offset = "0x13B3F64", VA = "0x13B3F64", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000DC6")]
	[Address(RVA = "0x13B3FA4", Offset = "0x13B3FA4", VA = "0x13B3FA4", Slot = "43")]
	public override void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x6000DC7")]
	[Address(RVA = "0x13B3FE4", Offset = "0x13B3FE4", VA = "0x13B3FE4", Slot = "47")]
	public override void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0x13B4024", Offset = "0x13B4024", VA = "0x13B4024", Slot = "39")]
	public override void OnRegionListReceived(RegionHandler regionHandler)
	{
	}

	[Token(Token = "0x6000DC9")]
	[Address(RVA = "0x13B4064", Offset = "0x13B4064", VA = "0x13B4064", Slot = "40")]
	public override void OnRoomListUpdate(List<RoomInfo> roomList)
	{
	}

	[Token(Token = "0x6000DCA")]
	[Address(RVA = "0x13B40A4", Offset = "0x13B40A4", VA = "0x13B40A4", Slot = "46")]
	public override void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000DCB")]
	[Address(RVA = "0x13B40E4", Offset = "0x13B40E4", VA = "0x13B40E4", Slot = "51")]
	public override void OnWebRpcResponse(OperationResponse response)
	{
	}

	[Token(Token = "0x6000DCC")]
	[Address(RVA = "0x13B3A58", Offset = "0x13B3A58", VA = "0x13B3A58")]
	private void Log(string text)
	{
	}

	[Token(Token = "0x6000DCD")]
	[Address(RVA = "0x13B4124", Offset = "0x13B4124", VA = "0x13B4124")]
	public LogPunVoids()
	{
	}
}
[Token(Token = "0x20001DB")]
public class LookTriggerActivator : MonoBehaviour
{
	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int triggerLayer;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LayerMask raycastMask;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PhotonView photonView;

	[Token(Token = "0x6000DCE")]
	[Address(RVA = "0x13B412C", Offset = "0x13B412C", VA = "0x13B412C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DCF")]
	[Address(RVA = "0x13B4184", Offset = "0x13B4184", VA = "0x13B4184")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0x13B4374", Offset = "0x13B4374", VA = "0x13B4374")]
	public LookTriggerActivator()
	{
	}
}
[Token(Token = "0x20001DC")]
public class ColliderSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LootGrinderBlades lootGrinderBlades;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int lootLayer;

	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0x13B43C8", Offset = "0x13B43C8", VA = "0x13B43C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0x13B43F4", Offset = "0x13B43F4", VA = "0x13B43F4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0x13B4534", Offset = "0x13B4534", VA = "0x13B4534")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0x13B4674", Offset = "0x13B4674", VA = "0x13B4674")]
	public ColliderSwitcher()
	{
	}
}
[Token(Token = "0x20001DD")]
[RequireComponent(typeof(Rigidbody))]
public class GravitateToLootGrinder : MonoBehaviour
{
	[Token(Token = "0x20001DE")]
	[CompilerGenerated]
	private sealed class <_GravitateToGrinder>d__11 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GravitateToLootGrinder <>4__this;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <flyDuration>5__2;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <timer>5__3;

		[Token(Token = "0x17000194")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x13B4C9C", Offset = "0x13B4C9C", VA = "0x13B4C9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000195")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0x13B4CE4", Offset = "0x13B4CE4", VA = "0x13B4CE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x13B4988", Offset = "0x13B4988", VA = "0x13B4988")]
		[DebuggerHidden]
		public <_GravitateToGrinder>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x13B49C0", Offset = "0x13B49C0", VA = "0x13B49C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x13B49C4", Offset = "0x13B49C4", VA = "0x13B49C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x13B4CA4", Offset = "0x13B4CA4", VA = "0x13B4CA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody ioRigidbody;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 grinderPosition;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float randomYOffset;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float maxVelocity;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 targetPos;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 startPos;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 firstPos;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 secondPos;

	[Token(Token = "0x4000C5E")]
	private const string gravitateToGrinderCoroutineName = "GravitateToGrinderCoroutine";

	[Token(Token = "0x6000DD6")]
	[Address(RVA = "0x13B467C", Offset = "0x13B467C", VA = "0x13B467C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DD7")]
	[Address(RVA = "0x13B46E4", Offset = "0x13B46E4", VA = "0x13B46E4")]
	public void GravitateToGrinder(Transform grinderTransform)
	{
	}

	[Token(Token = "0x6000DD8")]
	[Address(RVA = "0x13B4914", Offset = "0x13B4914", VA = "0x13B4914")]
	[IteratorStateMachine(typeof(<_GravitateToGrinder>d__11))]
	private IEnumerator<float> _GravitateToGrinder()
	{
		return null;
	}

	[Token(Token = "0x6000DD9")]
	[Address(RVA = "0x13B49B0", Offset = "0x13B49B0", VA = "0x13B49B0")]
	public GravitateToLootGrinder()
	{
	}
}
[Token(Token = "0x20001DF")]
public class LootBalloon : MonoBehaviour
{
	[Token(Token = "0x20001E0")]
	[CompilerGenerated]
	private sealed class <_FlyBalloonAway>d__31 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LootBalloon <>4__this;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 <startPos>5__3;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <targetPos>5__4;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <tempSpeed>5__5;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <durationBetween>5__6;

		[Token(Token = "0x17000199")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x13B5EA8", Offset = "0x13B5EA8", VA = "0x13B5EA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700019A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0x13B5EF0", Offset = "0x13B5EF0", VA = "0x13B5EF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x13B56B4", Offset = "0x13B56B4", VA = "0x13B56B4")]
		[DebuggerHidden]
		public <_FlyBalloonAway>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x13B5820", Offset = "0x13B5820", VA = "0x13B5820", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x13B5824", Offset = "0x13B5824", VA = "0x13B5824", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x13B5EB0", Offset = "0x13B5EB0", VA = "0x13B5EB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E1")]
	[CompilerGenerated]
	private sealed class <_ResetBalloon>d__32 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LootBalloon <>4__this;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <time>5__2;

		[Token(Token = "0x1700019B")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0x13B6158", Offset = "0x13B6158", VA = "0x13B6158", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700019C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0x13B61A0", Offset = "0x13B61A0", VA = "0x13B61A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x13B56DC", Offset = "0x13B56DC", VA = "0x13B56DC")]
		[DebuggerHidden]
		public <_ResetBalloon>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x13B5F4C", Offset = "0x13B5F4C", VA = "0x13B5F4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x13B5F50", Offset = "0x13B5F50", VA = "0x13B5F50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x13B6160", Offset = "0x13B6160", VA = "0x13B6160", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform joint;

	[Token(Token = "0x4000C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform[] balloonPathWayPoints;

	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject cloud;

	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float speedMultiplier;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 originalPosition;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 originalScale;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion originalRotation;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private HVRGrabbable balloonGrabbable;

	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private SecondEndingController secondEndingController;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioSource secondEndingBalloonAudioSource;

	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int index;

	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool newBalloonAtItsPlace;

	[Token(Token = "0x4000C71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	private bool flying;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
	private bool ending2Triggered;

	[Token(Token = "0x4000C73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Joint jointjoint;

	[Token(Token = "0x4000C74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool firstLinePlayed;

	[Token(Token = "0x4000C75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	private bool secondLinePlayed;

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Rigidbody myRB;

	[Token(Token = "0x17000196")]
	public GameObject GetCloud
	{
		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x13B4D40", Offset = "0x13B4D40", VA = "0x13B4D40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000197")]
	public HVRGrabbable GetGrabbable
	{
		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x13B4D48", Offset = "0x13B4D48", VA = "0x13B4D48")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000198")]
	public Joint GetJointJoint
	{
		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x13B4D50", Offset = "0x13B4D50", VA = "0x13B4D50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000DE3")]
	[Address(RVA = "0x13B4D58", Offset = "0x13B4D58", VA = "0x13B4D58")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DE4")]
	[Address(RVA = "0x13B5080", Offset = "0x13B5080", VA = "0x13B5080")]
	private void Released(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000DE5")]
	[Address(RVA = "0x13B50BC", Offset = "0x13B50BC", VA = "0x13B50BC")]
	private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6000DE6")]
	[Address(RVA = "0x13B51C8", Offset = "0x13B51C8", VA = "0x13B51C8")]
	public void FlyAway()
	{
	}

	[Token(Token = "0x6000DE7")]
	[Address(RVA = "0x13B5364", Offset = "0x13B5364", VA = "0x13B5364")]
	public void StopBalloonAudio()
	{
	}

	[Token(Token = "0x6000DE8")]
	[Address(RVA = "0x13B53E8", Offset = "0x13B53E8", VA = "0x13B53E8")]
	public void ResetBalloon()
	{
	}

	[Token(Token = "0x6000DE9")]
	[Address(RVA = "0x13B52F0", Offset = "0x13B52F0", VA = "0x13B52F0")]
	[IteratorStateMachine(typeof(<_FlyBalloonAway>d__31))]
	private IEnumerator<float> _FlyBalloonAway()
	{
		return null;
	}

	[Token(Token = "0x6000DEA")]
	[Address(RVA = "0x13B5630", Offset = "0x13B5630", VA = "0x13B5630")]
	[IteratorStateMachine(typeof(<_ResetBalloon>d__32))]
	private IEnumerator<float> _ResetBalloon(float duration)
	{
		return null;
	}

	[Token(Token = "0x6000DEB")]
	[Address(RVA = "0x13B5704", Offset = "0x13B5704", VA = "0x13B5704")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000DEC")]
	[Address(RVA = "0x13B57FC", Offset = "0x13B57FC", VA = "0x13B57FC")]
	public bool IsBalloonReady()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DED")]
	[Address(RVA = "0x13B5804", Offset = "0x13B5804", VA = "0x13B5804")]
	public LootBalloon()
	{
	}
}
[Token(Token = "0x20001E2")]
[RequireComponent(typeof(AudioSource))]
public class LootGrinder : MonoBehaviourPun
{
	[Token(Token = "0x20001E3")]
	[CompilerGenerated]
	private sealed class <_AutomaticallyPullLoot>d__32 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LootGrinder <>4__this;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <totalRemainingLootCount>5__2;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<BackPack> <backPacks>5__3;

		[Token(Token = "0x1700019D")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0x13B7A50", Offset = "0x13B7A50", VA = "0x13B7A50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700019E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0x13B7A98", Offset = "0x13B7A98", VA = "0x13B7A98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x13B6A4C", Offset = "0x13B6A4C", VA = "0x13B6A4C")]
		[DebuggerHidden]
		public <_AutomaticallyPullLoot>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x13B7454", Offset = "0x13B7454", VA = "0x13B7454", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x13B7458", Offset = "0x13B7458", VA = "0x13B7458", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x13B7A58", Offset = "0x13B7A58", VA = "0x13B7A58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E4")]
	[CompilerGenerated]
	private sealed class <_GrinderFallback>d__33 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LootGrinder <>4__this;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <i>5__2;

		[Token(Token = "0x1700019F")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0x13B7D54", Offset = "0x13B7D54", VA = "0x13B7D54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E15")]
			[Address(RVA = "0x13B7D9C", Offset = "0x13B7D9C", VA = "0x13B7D9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x13B6AE8", Offset = "0x13B6AE8", VA = "0x13B6AE8")]
		[DebuggerHidden]
		public <_GrinderFallback>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x13B7AF4", Offset = "0x13B7AF4", VA = "0x13B7AF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x13B7AF8", Offset = "0x13B7AF8", VA = "0x13B7AF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x13B7D5C", Offset = "0x13B7D5C", VA = "0x13B7D5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LootGrinder Instance;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator lootGrinderAnimator;

	[Token(Token = "0x4000C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject moneyEffect;

	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TotalMoneyEffect mainMoneyEffect;

	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform lootGravitatePos;

	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform canvasTransform;

	[Token(Token = "0x4000C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ParticleSystem sparksSystem;

	[Token(Token = "0x4000C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioSource crunchAS;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource engineAS;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Loot> lootsToBeGrinded;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AudioSource audioSource;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private RotatorObject rotatorObject;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private LootBalloon lootBalloon;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private LootGrinderBlades lootGrinderBlades;

	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float lastRotationValue;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool grinderRunning;

	[Token(Token = "0x4000C94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float[] lastFiveRotatorValues;

	[Token(Token = "0x4000C95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int currentIndex;

	[Token(Token = "0x4000C96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float averageOfLastFive;

	[Token(Token = "0x4000C97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float lastUseTime;

	[Token(Token = "0x4000C98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private bool needToUseBalloon;

	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
	private bool animationRunning;

	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
	private bool automaticallyPullingLoot;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA7")]
	private bool backPacksEmpty;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private CoroutineHandle automaticallyPullLootCoroutine;

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private CoroutineHandle grinderFallbackCoroutine;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float lastTimeGrinded;

	[Token(Token = "0x6000DFA")]
	[Address(RVA = "0x13B61FC", Offset = "0x13B61FC", VA = "0x13B61FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DFB")]
	[Address(RVA = "0x13B6348", Offset = "0x13B6348", VA = "0x13B6348")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DFC")]
	[Address(RVA = "0x13B63F0", Offset = "0x13B63F0", VA = "0x13B63F0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000DFD")]
	[Address(RVA = "0x13B64A4", Offset = "0x13B64A4", VA = "0x13B64A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DFE")]
	[Address(RVA = "0x13B6600", Offset = "0x13B6600", VA = "0x13B6600")]
	private void RotatorMoved(float arg0)
	{
	}

	[Token(Token = "0x6000DFF")]
	[Address(RVA = "0x13B69D8", Offset = "0x13B69D8", VA = "0x13B69D8")]
	[IteratorStateMachine(typeof(<_AutomaticallyPullLoot>d__32))]
	private IEnumerator<float> _AutomaticallyPullLoot()
	{
		return null;
	}

	[Token(Token = "0x6000E00")]
	[Address(RVA = "0x13B6A74", Offset = "0x13B6A74", VA = "0x13B6A74")]
	[IteratorStateMachine(typeof(<_GrinderFallback>d__33))]
	private IEnumerator<float> _GrinderFallback()
	{
		return null;
	}

	[Token(Token = "0x6000E01")]
	[Address(RVA = "0x13B6B10", Offset = "0x13B6B10", VA = "0x13B6B10")]
	private void BackPacksEmpty()
	{
	}

	[Token(Token = "0x6000E02")]
	[Address(RVA = "0x13B6B1C", Offset = "0x13B6B1C", VA = "0x13B6B1C")]
	public void LootGrinded(Loot loot)
	{
	}

	[Token(Token = "0x6000E03")]
	[Address(RVA = "0x13B6EBC", Offset = "0x13B6EBC", VA = "0x13B6EBC")]
	private void CheckOwnership()
	{
	}

	[Token(Token = "0x6000E04")]
	[Address(RVA = "0x13B702C", Offset = "0x13B702C", VA = "0x13B702C")]
	[PunRPC]
	private void SpawnMoneyEffectRPC(Vector3 position, int value)
	{
	}

	[Token(Token = "0x6000E05")]
	[Address(RVA = "0x13B72A8", Offset = "0x13B72A8", VA = "0x13B72A8")]
	public bool IsGrinderRunning()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E06")]
	[Address(RVA = "0x13B72B0", Offset = "0x13B72B0", VA = "0x13B72B0")]
	public Transform GetGravitatePosTransform()
	{
		return null;
	}

	[Token(Token = "0x6000E07")]
	[Address(RVA = "0x13B72B8", Offset = "0x13B72B8", VA = "0x13B72B8")]
	public void CheckCanRotate()
	{
	}

	[Token(Token = "0x6000E08")]
	[Address(RVA = "0x13B72D4", Offset = "0x13B72D4", VA = "0x13B72D4")]
	public void SetCloudActive(bool status)
	{
	}

	[Token(Token = "0x6000E09")]
	[Address(RVA = "0x13B739C", Offset = "0x13B739C", VA = "0x13B739C")]
	public LootGrinder()
	{
	}
}
[Token(Token = "0x20001E5")]
public class LootGrinderBlade : MonoBehaviour
{
	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LootGrinderBlades lootGrinderBlades;

	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int grindableLayer;

	[Token(Token = "0x6000E16")]
	[Address(RVA = "0x13B7DF8", Offset = "0x13B7DF8", VA = "0x13B7DF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E17")]
	[Address(RVA = "0x13B7E80", Offset = "0x13B7E80", VA = "0x13B7E80")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000E18")]
	[Address(RVA = "0x13B80E0", Offset = "0x13B80E0", VA = "0x13B80E0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000E19")]
	[Address(RVA = "0x13B82AC", Offset = "0x13B82AC", VA = "0x13B82AC")]
	public LootGrinderBlade()
	{
	}
}
[Token(Token = "0x20001E6")]
public class LootGrinderBlades : MonoBehaviour
{
	[Token(Token = "0x20001E7")]
	[CompilerGenerated]
	private sealed class <_BladeRotation>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LootGrinderBlades <>4__this;

		[Token(Token = "0x170001A1")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0x13B8654", Offset = "0x13B8654", VA = "0x13B8654", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0x13B869C", Offset = "0x13B869C", VA = "0x13B869C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x13B8478", Offset = "0x13B8478", VA = "0x13B8478")]
		[DebuggerHidden]
		public <_BladeRotation>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x13B8530", Offset = "0x13B8530", VA = "0x13B8530", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x13B8534", Offset = "0x13B8534", VA = "0x13B8534", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x13B865C", Offset = "0x13B865C", VA = "0x13B865C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject rotatorBlade1;

	[Token(Token = "0x4000CAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject rotatorBlade2;

	[Token(Token = "0x4000CAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float bladeSpeed;

	[Token(Token = "0x4000CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string grindableLayerName;

	[Token(Token = "0x4000CAE")]
	private const string bladeRotationcoroutineName = "BladeRotationCoroutine";

	[Token(Token = "0x4000CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<GameObject> currentlyTriggeredLoots;

	[Token(Token = "0x4000CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public bool grinderRunning;

	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LootGrinder lootGrinder;

	[Token(Token = "0x6000E1A")]
	[Address(RVA = "0x13B82B4", Offset = "0x13B82B4", VA = "0x13B82B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E1B")]
	[Address(RVA = "0x13B68C0", Offset = "0x13B68C0", VA = "0x13B68C0")]
	public void RotateBlades(float angle)
	{
	}

	[Token(Token = "0x6000E1C")]
	[Address(RVA = "0x13B831C", Offset = "0x13B831C", VA = "0x13B831C")]
	public void StartContinuousBladeRotation()
	{
	}

	[Token(Token = "0x6000E1D")]
	[Address(RVA = "0x13B8410", Offset = "0x13B8410", VA = "0x13B8410")]
	public void StopContinuousBladeRotation()
	{
	}

	[Token(Token = "0x6000E1E")]
	[Address(RVA = "0x13B839C", Offset = "0x13B839C", VA = "0x13B839C")]
	[IteratorStateMachine(typeof(<_BladeRotation>d__12))]
	private IEnumerator<float> _BladeRotation()
	{
		return null;
	}

	[Token(Token = "0x6000E1F")]
	[Address(RVA = "0x13B7FBC", Offset = "0x13B7FBC", VA = "0x13B7FBC")]
	public void BladeTriggered(LootGrinderBlade bladeThatTriggered, GameObject lootThatIsTriggered)
	{
	}

	[Token(Token = "0x6000E20")]
	[Address(RVA = "0x13B821C", Offset = "0x13B821C", VA = "0x13B821C")]
	public void BladeUnTriggered(LootGrinderBlade bladeThatTriggered, GameObject lootThatIsTriggered)
	{
	}

	[Token(Token = "0x6000E21")]
	[Address(RVA = "0x13B84A0", Offset = "0x13B84A0", VA = "0x13B84A0")]
	public LootGrinderBlades()
	{
	}
}
[Token(Token = "0x20001E8")]
public class MoneyEffect : MonoBehaviour, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x20001E9")]
	[CompilerGenerated]
	private sealed class <_FloatAndScale>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MoneyEffect <>4__this;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <time>5__2;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <originalPosition>5__3;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <targetPosition>5__4;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <newPosition>5__5;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform <cam>5__6;

		[Token(Token = "0x170001A3")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000E32")]
			[Address(RVA = "0x13B92F4", Offset = "0x13B92F4", VA = "0x13B92F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E34")]
			[Address(RVA = "0x13B933C", Offset = "0x13B933C", VA = "0x13B933C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x13B89E4", Offset = "0x13B89E4", VA = "0x13B89E4")]
		[DebuggerHidden]
		public <_FloatAndScale>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x13B8A14", Offset = "0x13B8A14", VA = "0x13B8A14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x13B8A18", Offset = "0x13B8A18", VA = "0x13B8A18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x13B92FC", Offset = "0x13B92FC", VA = "0x13B92FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float minScale;

	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float maxScale;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem particleSystem;

	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NumberSystem numberSystem;

	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float randomValue;

	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int myValue;

	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TotalMoneyEffect totalMoneyEffect;

	[Token(Token = "0x6000E28")]
	[Address(RVA = "0x13B86F8", Offset = "0x13B86F8", VA = "0x13B86F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E29")]
	[Address(RVA = "0x13B8760", Offset = "0x13B8760", VA = "0x13B8760", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6000E2A")]
	[Address(RVA = "0x13B71EC", Offset = "0x13B71EC", VA = "0x13B71EC")]
	public void SetValue(TotalMoneyEffect totalMoneyEffect, int newValue)
	{
	}

	[Token(Token = "0x6000E2B")]
	[Address(RVA = "0x13B04EC", Offset = "0x13B04EC", VA = "0x13B04EC")]
	public void SetValue(int newValue)
	{
	}

	[Token(Token = "0x6000E2C")]
	[Address(RVA = "0x13B89E0", Offset = "0x13B89E0", VA = "0x13B89E0", Slot = "5")]
	public void Release()
	{
	}

	[Token(Token = "0x6000E2D")]
	[Address(RVA = "0x13B8858", Offset = "0x13B8858", VA = "0x13B8858")]
	[IteratorStateMachine(typeof(<_FloatAndScale>d__12))]
	private IEnumerator<float> _FloatAndScale(float duration)
	{
		return null;
	}

	[Token(Token = "0x6000E2E")]
	[Address(RVA = "0x13B8A0C", Offset = "0x13B8A0C", VA = "0x13B8A0C")]
	public MoneyEffect()
	{
	}
}
[Token(Token = "0x20001EA")]
public class Number : MonoBehaviour
{
	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] numbers;

	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject dollarSign;

	[Token(Token = "0x6000E35")]
	[Address(RVA = "0x13B9398", Offset = "0x13B9398", VA = "0x13B9398")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E36")]
	[Address(RVA = "0x13B9410", Offset = "0x13B9410", VA = "0x13B9410")]
	public void DisplayNumber(int number)
	{
	}

	[Token(Token = "0x6000E37")]
	[Address(RVA = "0x13B944C", Offset = "0x13B944C", VA = "0x13B944C")]
	public void DisplayDollarSign()
	{
	}

	[Token(Token = "0x6000E38")]
	[Address(RVA = "0x13B939C", Offset = "0x13B939C", VA = "0x13B939C")]
	public void DeaActivateEverything()
	{
	}

	[Token(Token = "0x6000E39")]
	[Address(RVA = "0x13B9474", Offset = "0x13B9474", VA = "0x13B9474")]
	public Number()
	{
	}
}
[Token(Token = "0x20001EB")]
public class NumberSystem : MonoBehaviour
{
	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI tmp;

	[Token(Token = "0x6000E3A")]
	[Address(RVA = "0x13B947C", Offset = "0x13B947C", VA = "0x13B947C")]
	[ContextMenu("Test Display number")]
	private void TestInEditor()
	{
	}

	[Token(Token = "0x6000E3B")]
	[Address(RVA = "0x13B9484", Offset = "0x13B9484", VA = "0x13B9484")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0x13B88DC", Offset = "0x13B88DC", VA = "0x13B88DC")]
	public void DisplayNumber(int numberToDisplay)
	{
	}

	[Token(Token = "0x6000E3D")]
	[Address(RVA = "0x13B94B4", Offset = "0x13B94B4", VA = "0x13B94B4")]
	public NumberSystem()
	{
	}
}
[Token(Token = "0x20001EC")]
public class TotalMoneyEffect : MonoBehaviour
{
	[Token(Token = "0x20001ED")]
	[CompilerGenerated]
	private sealed class <_ScaleUpNumber>d__21 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TotalMoneyEffect <>4__this;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <time>5__2;

		[Token(Token = "0x170001A5")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000E48")]
			[Address(RVA = "0x13B9AF4", Offset = "0x13B9AF4", VA = "0x13B9AF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0x13B9B3C", Offset = "0x13B9B3C", VA = "0x13B9B3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x13B9930", Offset = "0x13B9930", VA = "0x13B9930")]
		[DebuggerHidden]
		public <_ScaleUpNumber>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x13B9998", Offset = "0x13B9998", VA = "0x13B9998", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x13B999C", Offset = "0x13B999C", VA = "0x13B999C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x13B9AFC", Offset = "0x13B9AFC", VA = "0x13B9AFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EE")]
	[CompilerGenerated]
	private sealed class <_TimeToExplode>d__22 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TotalMoneyEffect <>4__this;

		[Token(Token = "0x170001A7")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0x13B9E14", Offset = "0x13B9E14", VA = "0x13B9E14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E50")]
			[Address(RVA = "0x13B9E5C", Offset = "0x13B9E5C", VA = "0x13B9E5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x13B9958", Offset = "0x13B9958", VA = "0x13B9958")]
		[DebuggerHidden]
		public <_TimeToExplode>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x13B9B98", Offset = "0x13B9B98", VA = "0x13B9B98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x13B9B9C", Offset = "0x13B9B9C", VA = "0x13B9B9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x13B9E1C", Offset = "0x13B9E1C", VA = "0x13B9E1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float scaleAmount;

	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float tempScaleAmount;

	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float maxScale;

	[Token(Token = "0x4000CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem particleSystem;

	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip buildupClip;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem smokeFX;

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float timeToExplode;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool despawnAfter;

	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float countdownTimeToExplode;

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private NumberSystem numberSystem;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int myValue;

	[Token(Token = "0x4000CD3")]
	private const string scaleUpCoroutineName = "ScaleUpCorotuine";

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 currentScale;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 originalScale;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 targetScale;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool explodeTimerRunning;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private AudioSource lastSFX;

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0x13B94BC", Offset = "0x13B94BC", VA = "0x13B94BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E3F")]
	[Address(RVA = "0x13B8FCC", Offset = "0x13B8FCC", VA = "0x13B8FCC")]
	public void AddValue(int newValue, bool addMoney = true)
	{
	}

	[Token(Token = "0x6000E40")]
	[Address(RVA = "0x13B9738", Offset = "0x13B9738", VA = "0x13B9738")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E41")]
	[Address(RVA = "0x13B95A4", Offset = "0x13B95A4", VA = "0x13B95A4")]
	private void KillCoroutine()
	{
	}

	[Token(Token = "0x6000E42")]
	[Address(RVA = "0x13B9640", Offset = "0x13B9640", VA = "0x13B9640")]
	[IteratorStateMachine(typeof(<_ScaleUpNumber>d__21))]
	private IEnumerator<float> _ScaleUpNumber(float duration)
	{
		return null;
	}

	[Token(Token = "0x6000E43")]
	[Address(RVA = "0x13B96C4", Offset = "0x13B96C4", VA = "0x13B96C4")]
	[IteratorStateMachine(typeof(<_TimeToExplode>d__22))]
	private IEnumerator<float> _TimeToExplode()
	{
		return null;
	}

	[Token(Token = "0x6000E44")]
	[Address(RVA = "0x13B9980", Offset = "0x13B9980", VA = "0x13B9980")]
	public TotalMoneyEffect()
	{
	}
}
[Token(Token = "0x20001EF")]
[CreateAssetMenu(fileName = "", menuName = "Enemy Group", order = 0)]
public class EnemyGroup : ScriptableObject
{
	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WeightedEnemy[] weightedEnemies_L1;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public WeightedEnemy[] weightedEnemies_L2;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public WeightedEnemy[] weightedEnemies_L3;

	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Help("Determines the precentage of this group being selected for a run", MessageType.Info)]
	public int possibility;

	[Token(Token = "0x6000E51")]
	[Address(RVA = "0x13B9EB8", Offset = "0x13B9EB8", VA = "0x13B9EB8")]
	public Dictionary<EnemySpawnAndDespawnManager.EnemyType, int> GetWeightDictionary(int floor)
	{
		return null;
	}

	[Token(Token = "0x6000E52")]
	[Address(RVA = "0x13BA00C", Offset = "0x13BA00C", VA = "0x13BA00C")]
	public Dictionary<EnemySpawnAndDespawnManager.EnemyType, int> GetWeightDictionary(List<EnemySpawnAndDespawnManager.EnemyType> filterByLootType, int floor)
	{
		return null;
	}

	[Token(Token = "0x6000E53")]
	[Address(RVA = "0x13BA294", Offset = "0x13BA294", VA = "0x13BA294")]
	public EnemyGroup()
	{
	}
}
[Serializable]
[Token(Token = "0x20001F0")]
public class WeightedEnemy
{
	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public EnemySpawnAndDespawnManager.EnemyType enemyType;

	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int weight;

	[Token(Token = "0x6000E54")]
	[Address(RVA = "0x13BA29C", Offset = "0x13BA29C", VA = "0x13BA29C")]
	public WeightedEnemy()
	{
	}
}
[Serializable]
[Token(Token = "0x20001F1")]
[CreateAssetMenu(fileName = "", menuName = "Level Node Settings", order = 0)]
public class LevelNodeSettings : ScriptableObject
{
	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NodeSettings buriedNode;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NodeSettingsWithPrefab wallNode;

	[Token(Token = "0x4000CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NodeSettingsWithPrefab geode;

	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public NodeSettingsWithPrefab waterNode;

	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public NodeSettingsWithPrefab relicNode;

	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public NodeSettingsWithPrefab shovelDiggingSpot;

	[Token(Token = "0x4000CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public NodeSettingsWithPrefab safe;

	[Token(Token = "0x4000CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public NodeSettingsWithPrefab healthpotion;

	[Token(Token = "0x4000CEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public NodeSettingsWithPrefab geysir;

	[Token(Token = "0x4000CF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public NodeSettingsWithPrefab poisonPlant;

	[Token(Token = "0x4000CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public NodeSettingsWithEnemyGroup monsterNode;

	[Token(Token = "0x4000CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("DiggingArea floor base loot weights:")]
	public LootGroup[] diggingAreaFloorLoots;

	[Token(Token = "0x4000CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public LayerMask groundLayers;

	[Token(Token = "0x6000E55")]
	[Address(RVA = "0x13BA2A4", Offset = "0x13BA2A4", VA = "0x13BA2A4")]
	public LevelNodeSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x20001F2")]
public class NodeSettings
{
	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("Assign Loot PrefabGroups for the 3 floors")]
	public LootGroup[] floorLootGroups;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dictionary<LootSpawnAndDespawnManager.LootType, int> cachedDictionary;

	[NonSerialized]
	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int _lastFloor;

	[NonSerialized]
	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool _hasBeenCached;

	[Token(Token = "0x6000E56")]
	[Address(RVA = "0x13BA2AC", Offset = "0x13BA2AC", VA = "0x13BA2AC")]
	private void CacheLootWeightDictionary(int floor)
	{
	}

	[Token(Token = "0x6000E57")]
	[Address(RVA = "0x13BA428", Offset = "0x13BA428", VA = "0x13BA428")]
	public LootSpawnAndDespawnManager.LootType GetWeightedPrefabFromFloor(int floor)
	{
		return default(LootSpawnAndDespawnManager.LootType);
	}

	[Token(Token = "0x6000E58")]
	[Address(RVA = "0x13BA4C0", Offset = "0x13BA4C0", VA = "0x13BA4C0")]
	public LootSpawnAndDespawnManager.LootType GetWeightedPrefabFromFloor()
	{
		return default(LootSpawnAndDespawnManager.LootType);
	}

	[Token(Token = "0x6000E59")]
	[Address(RVA = "0x13BA57C", Offset = "0x13BA57C", VA = "0x13BA57C")]
	public NodeSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x20001F3")]
public class NodeSettingsWithPrefab : NodeSettings
{
	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PrefabGroup nodePrefabGroups;

	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0x13BA584", Offset = "0x13BA584", VA = "0x13BA584")]
	public NodeSettingsWithPrefab()
	{
	}
}
[Serializable]
[Token(Token = "0x20001F4")]
public class NodeSettingsWithEnemyGroup : NodeSettings
{
	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnemyGroup[] enemyGroup;

	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<EnemyGroup, int> cachedEnemyGroups;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<EnemySpawnAndDespawnManager.EnemyType, int> cachedEnemyDictionary;

	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private EnemyGroup selectedEnemyGroup;

	[NonSerialized]
	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int _lastEnemyFloor;

	[NonSerialized]
	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool _enemyHasBeenCached;

	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0x13BA58C", Offset = "0x13BA58C", VA = "0x13BA58C")]
	public void SelectEnemyGroup()
	{
	}

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0x13BA708", Offset = "0x13BA708", VA = "0x13BA708")]
	public EnemySpawnAndDespawnManager.EnemyType GetWeightedEnemy()
	{
		return default(EnemySpawnAndDespawnManager.EnemyType);
	}

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0x13BA7C4", Offset = "0x13BA7C4", VA = "0x13BA7C4")]
	private void CacheEnemyWeightDictionary(int floor)
	{
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0x13BA618", Offset = "0x13BA618", VA = "0x13BA618")]
	public void CacheEnemyGroups()
	{
	}

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0x13BA980", Offset = "0x13BA980", VA = "0x13BA980")]
	public NodeSettingsWithEnemyGroup()
	{
	}
}
[Token(Token = "0x20001F5")]
[CreateAssetMenu(fileName = "", menuName = "Loot Group", order = 0)]
public class LootGroup : ScriptableObject
{
	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WeightedLoot[] weightedLoots;

	[Token(Token = "0x6000E60")]
	[Address(RVA = "0x13BA988", Offset = "0x13BA988", VA = "0x13BA988")]
	public Dictionary<LootSpawnAndDespawnManager.LootType, int> GetWeightDictionary()
	{
		return null;
	}

	[Token(Token = "0x6000E61")]
	[Address(RVA = "0x13BAA70", Offset = "0x13BAA70", VA = "0x13BAA70")]
	public Dictionary<LootSpawnAndDespawnManager.LootType, int> GetWeightDictionary(List<LootSpawnAndDespawnManager.LootType> filterByLootType)
	{
		return null;
	}

	[Token(Token = "0x6000E62")]
	[Address(RVA = "0x13BAC88", Offset = "0x13BAC88", VA = "0x13BAC88")]
	public LootGroup()
	{
	}
}
[Serializable]
[Token(Token = "0x20001F6")]
public class WeightedLoot
{
	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LootSpawnAndDespawnManager.LootType lootType;

	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int weight;

	[Token(Token = "0x6000E63")]
	[Address(RVA = "0x13BAC90", Offset = "0x13BAC90", VA = "0x13BAC90")]
	public WeightedLoot()
	{
	}
}
[Token(Token = "0x20001F7")]
[ExecuteInEditMode]
public class MultiNode : MonoBehaviour
{
	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool geode;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool waterNode;

	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool diggingSpot;

	[Token(Token = "0x4000D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool safe;

	[Token(Token = "0x4000D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool healthpotion;

	[Token(Token = "0x4000D07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool geysir;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool poisonPlant;

	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[Header("Wallnode stuff")]
	public bool wallNode;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hideWallNodeMesh;

	[Token(Token = "0x4000D0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool forceWallNodeLootType;

	[Token(Token = "0x4000D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LootSpawnAndDespawnManager.LootType forcedWallNodeLootType;

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Monster node stuff")]
	public bool monster;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool forceMonsterType;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public EnemySpawnAndDespawnManager.EnemyType forcedMonsterType;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float MonsterHealthModifier;

	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float MonsterSizeModifier;

	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool forceMonsterSleep;

	[Token(Token = "0x4000D13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[Header("Relic node stuff")]
	public bool relicNode;

	[Token(Token = "0x4000D14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool forceRelicType;

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LootSpawnAndDespawnManager.LootType forcedRelicNodeLootType;

	[Token(Token = "0x4000D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Enviro Hazard node stuff")]
	public float poisonPlantCloudRadius;

	[Token(Token = "0x4000D17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Range(6f, 20f)]
	public float burstInterval;

	[Token(Token = "0x6000E64")]
	[Address(RVA = "0x13BAC98", Offset = "0x13BAC98", VA = "0x13BAC98")]
	public int SelectedNodesAmount()
	{
		return default(int);
	}

	[Token(Token = "0x6000E65")]
	[Address(RVA = "0x13BACE8", Offset = "0x13BACE8", VA = "0x13BACE8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000E66")]
	[Address(RVA = "0x13BAD38", Offset = "0x13BAD38", VA = "0x13BAD38")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000E67")]
	[Address(RVA = "0x13BB1E8", Offset = "0x13BB1E8", VA = "0x13BB1E8")]
	public MultiNode()
	{
	}
}
[Token(Token = "0x20001F8")]
public enum NodeTypes
{
	[Token(Token = "0x4000D19")]
	BuriedNode,
	[Token(Token = "0x4000D1A")]
	WallNode,
	[Token(Token = "0x4000D1B")]
	Geode,
	[Token(Token = "0x4000D1C")]
	MonsterNode,
	[Token(Token = "0x4000D1D")]
	WaterNode,
	[Token(Token = "0x4000D1E")]
	RelicNode,
	[Token(Token = "0x4000D1F")]
	DiggingSpot,
	[Token(Token = "0x4000D20")]
	Safe,
	[Token(Token = "0x4000D21")]
	Healthpotion,
	[Token(Token = "0x4000D22")]
	Geysir,
	[Token(Token = "0x4000D23")]
	PoisonPlant
}
[Token(Token = "0x20001F9")]
[CreateAssetMenu(fileName = "", menuName = "Prefab Group", order = 0)]
public class PrefabGroup : ScriptableObject
{
	[Token(Token = "0x4000D24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] prefabs;

	[Token(Token = "0x6000E68")]
	[Address(RVA = "0x13BB204", Offset = "0x13BB204", VA = "0x13BB204")]
	public GameObject GetRandomPrefab()
	{
		return null;
	}

	[Token(Token = "0x6000E69")]
	[Address(RVA = "0x13BB244", Offset = "0x13BB244", VA = "0x13BB244")]
	public PrefabGroup()
	{
	}
}
[Token(Token = "0x20001FA")]
public class RelicNodeValue : MonoBehaviour
{
	[Token(Token = "0x4000D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int relicValue;

	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0x13BB24C", Offset = "0x13BB24C", VA = "0x13BB24C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0x13BB250", Offset = "0x13BB250", VA = "0x13BB250")]
	private void GetRelicValue()
	{
	}

	[Token(Token = "0x6000E6C")]
	[Address(RVA = "0x13BB3A8", Offset = "0x13BB3A8", VA = "0x13BB3A8")]
	public RelicNodeValue()
	{
	}
}
[Token(Token = "0x20001FB")]
public class LootPullParticles : MonoBehaviour
{
	[Token(Token = "0x4000D26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem _particleSystem;

	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0x13BB3B8", Offset = "0x13BB3B8", VA = "0x13BB3B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0x13BB410", Offset = "0x13BB410", VA = "0x13BB410")]
	public void CreateParticle(Transform lootTransform, Vector3 targetPoint, float velocityMagnitude, bool reverse = false)
	{
	}

	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0x13BB71C", Offset = "0x13BB71C", VA = "0x13BB71C")]
	public LootPullParticles()
	{
	}
}
[Token(Token = "0x20001FC")]
public class AchievementManager : MonoBehaviour
{
	[Token(Token = "0x20001FD")]
	[CompilerGenerated]
	private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AchievementManager <>4__this;

		[Token(Token = "0x170001A9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E86")]
			[Address(RVA = "0x13BD150", Offset = "0x13BD150", VA = "0x13BD150", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0x13BD198", Offset = "0x13BD198", VA = "0x13BD198", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x13BB8C0", Offset = "0x13BB8C0", VA = "0x13BB8C0")]
		[DebuggerHidden]
		public <Start>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x13BD000", Offset = "0x13BD000", VA = "0x13BD000", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x13BD004", Offset = "0x13BD004", VA = "0x13BD004", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x13BD158", Offset = "0x13BD158", VA = "0x13BD158", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AchievementManager Instance;

	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Queue<KeyValuePair<string, int>> _oculusSetStatQueue;

	[Token(Token = "0x4000D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float _nextSetStatTime;

	[Token(Token = "0x4000D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Index numbers must match the numbers in trophy.trp!")]
	public List<string> PS4TrophyIds;

	[Token(Token = "0x4000D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<string> achievementNamesEnglish;

	[Token(Token = "0x6000E70")]
	[Address(RVA = "0x13BB724", Offset = "0x13BB724", VA = "0x13BB724")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E71")]
	[Address(RVA = "0x13BB84C", Offset = "0x13BB84C", VA = "0x13BB84C")]
	[IteratorStateMachine(typeof(<Start>d__6))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000E72")]
	[Address(RVA = "0x13BB8E8", Offset = "0x13BB8E8", VA = "0x13BB8E8")]
	private void TriggerAllSavedAchievements()
	{
	}

	[Token(Token = "0x6000E73")]
	[Address(RVA = "0x13BBC70", Offset = "0x13BBC70", VA = "0x13BBC70")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E74")]
	[Address(RVA = "0x13BBA3C", Offset = "0x13BBA3C", VA = "0x13BBA3C")]
	public void TriggerAchievement(string achievementId, bool checkAlreadyTriggered = true, bool showPopUp = true)
	{
	}

	[Token(Token = "0x6000E75")]
	[Address(RVA = "0x13BBC7C", Offset = "0x13BBC7C", VA = "0x13BBC7C")]
	public void AddOculusBitField(string oculusStatId, string field)
	{
	}

	[Token(Token = "0x6000E76")]
	[Address(RVA = "0x13BBDB4", Offset = "0x13BBDB4", VA = "0x13BBDB4")]
	public void SetStat(string statId, string oculusStatId, int value)
	{
	}

	[Token(Token = "0x6000E77")]
	[Address(RVA = "0x13BBE6C", Offset = "0x13BBE6C", VA = "0x13BBE6C")]
	private void SetStat(string statId, int value)
	{
	}

	[Token(Token = "0x6000E78")]
	[Address(RVA = "0x13BBFC0", Offset = "0x13BBFC0", VA = "0x13BBFC0")]
	public void IncrementStat(string statId, string oculusStatId, string oculusStatId2, int value)
	{
	}

	[Token(Token = "0x6000E79")]
	[Address(RVA = "0x13BC288", Offset = "0x13BC288", VA = "0x13BC288")]
	public void IncrementStat(string statId, string oculusStatId, int value)
	{
	}

	[Token(Token = "0x6000E7A")]
	[Address(RVA = "0x13BC09C", Offset = "0x13BC09C", VA = "0x13BC09C")]
	private void IncrementStat(string statId, int amount = 1, string msg = "")
	{
	}

	[Token(Token = "0x6000E7B")]
	[Address(RVA = "0x13BC34C", Offset = "0x13BC34C", VA = "0x13BC34C")]
	private void UpdateCompletionistProgress()
	{
	}

	[Token(Token = "0x6000E7C")]
	[Address(RVA = "0x13BC4C0", Offset = "0x13BC4C0", VA = "0x13BC4C0")]
	public void CalculateElevatorBuilt()
	{
	}

	[Token(Token = "0x6000E7D")]
	[Address(RVA = "0x13BC5D0", Offset = "0x13BC5D0", VA = "0x13BC5D0")]
	public void DebugAllProgress()
	{
	}

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0x13BC6E4", Offset = "0x13BC6E4", VA = "0x13BC6E4")]
	private void DebugStat(string statId)
	{
	}

	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0x13BC6E8", Offset = "0x13BC6E8", VA = "0x13BC6E8")]
	private static void CheckStatProgress(string statId)
	{
	}

	[Token(Token = "0x6000E80")]
	[Address(RVA = "0x13BCC08", Offset = "0x13BCC08", VA = "0x13BCC08")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E81")]
	[Address(RVA = "0x13BCE94", Offset = "0x13BCE94", VA = "0x13BCE94")]
	public AchievementManager()
	{
	}
}
[Token(Token = "0x2000203")]
public class AmbienceManager : MonoBehaviour
{
	[Token(Token = "0x4000D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerGroup audioMixerGroup;

	[Token(Token = "0x4000D3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioMixerGroup audioMixerGroupPS4;

	[Token(Token = "0x4000D3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _nextAmbientClipTime;

	[Token(Token = "0x4000D3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<AudioSource> _currentLongClips;

	[Token(Token = "0x4000D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform _ambienceLoopsParent;

	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource _northAmbience;

	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource _southAmbience;

	[Token(Token = "0x4000D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AudioSource _westAmbience;

	[Token(Token = "0x4000D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource _eastAmbience;

	[Token(Token = "0x170001AB")]
	public AudioMixerGroup GetMusicMasterGroup
	{
		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x13BE2EC", Offset = "0x13BE2EC", VA = "0x13BE2EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E95")]
	[Address(RVA = "0x13BE2F4", Offset = "0x13BE2F4", VA = "0x13BE2F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E96")]
	[Address(RVA = "0x13BE648", Offset = "0x13BE648", VA = "0x13BE648")]
	private void AtmosphereChanged()
	{
	}

	[Token(Token = "0x6000E97")]
	[Address(RVA = "0x13BE514", Offset = "0x13BE514", VA = "0x13BE514")]
	private AudioSource CreateAmbienceSource(string name, Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x6000E98")]
	[Address(RVA = "0x13BEA18", Offset = "0x13BEA18", VA = "0x13BEA18")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E99")]
	[Address(RVA = "0x13BEBA0", Offset = "0x13BEBA0", VA = "0x13BEBA0")]
	private void ShortClipsUpdate(Vector3 playerPos)
	{
	}

	[Token(Token = "0x6000E9A")]
	[Address(RVA = "0x13BE64C", Offset = "0x13BE64C", VA = "0x13BE64C")]
	private void ChangeAmbienceLoops()
	{
	}

	[Token(Token = "0x6000E9B")]
	[Address(RVA = "0x13BEF4C", Offset = "0x13BEF4C", VA = "0x13BEF4C")]
	public AmbienceManager()
	{
	}
}
[Token(Token = "0x2000204")]
public class AnalyticsManager : MonoBehaviour
{
	[Token(Token = "0x2000205")]
	public class RunLootEvent : UnityEvent<int>
	{
		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x13C36B4", Offset = "0x13C36B4", VA = "0x13C36B4")]
		public RunLootEvent()
		{
		}
	}

	[StructLayout(3)]
	[Token(Token = "0x2000206")]
	[CompilerGenerated]
	private struct <Start>d__33 : IAsyncStateMachine
	{
		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnalyticsManager <>4__this;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter <>u__1;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TaskAwaiter<List<string>> <>u__2;

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x13C3748", Offset = "0x13C3748", VA = "0x13C3748", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x13C3F60", Offset = "0x13C3F60", VA = "0x13C3F60", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x4000D43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AnalyticsManager Instance;

	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Run Stats")]
	public float runStartTime;

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> runRooms;

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Dictionary<string, int> runLootTable1;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Dictionary<string, int> runLootTable2;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Dictionary<string, int> runLootTable3;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<string> runLevels;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int runLootValue;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<string> runToolsUsed;

	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<string> runToolsSlotted;

	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool runSuccess;

	[Token(Token = "0x4000D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Dictionary<int, int> runDeaths;

	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int lowestPoint;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public RunGenerationData runGenData1;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public RunGenerationData runGenData2;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public RunGenerationData runGenData3;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Session Stats")]
	public float sessionStartMoney;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float sessionEarnedMoney;

	[Token(Token = "0x4000D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float sessionCurrentMoney;

	[Token(Token = "0x4000D56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public List<int> RunMoneys;

	[Token(Token = "0x4000D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Dictionary<string, int> ItemsBought;

	[Token(Token = "0x4000D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public int runsCompletedInSession;

	[Token(Token = "0x4000D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool IsSurface;

	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[Header("Total Stats")]
	public float Playtime;

	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public int TotalRuns;

	[Token(Token = "0x4000D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public RunLootEvent OnRunEnded;

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool couldNotConsent;

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool AnalyticsEnabled;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	[SerializeField]
	private bool AnalyticsInEditor;

	[Token(Token = "0x170001AC")]
	public static AnalyticsManager instance
	{
		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x13BEFDC", Offset = "0x13BEFDC", VA = "0x13BEFDC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E9D")]
	[Address(RVA = "0x13BF034", Offset = "0x13BF034", VA = "0x13BF034")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E9E")]
	[Address(RVA = "0x13BF09C", Offset = "0x13BF09C", VA = "0x13BF09C")]
	[AsyncStateMachine(typeof(<Start>d__33))]
	private void Start()
	{
	}

	[Token(Token = "0x6000E9F")]
	[Address(RVA = "0x13BF150", Offset = "0x13BF150", VA = "0x13BF150")]
	private void OnEndRun()
	{
	}

	[Token(Token = "0x6000EA0")]
	[Address(RVA = "0x13C0F38", Offset = "0x13C0F38", VA = "0x13C0F38")]
	private static void OnEndSession()
	{
	}

	[Token(Token = "0x6000EA1")]
	[Address(RVA = "0x13C18D4", Offset = "0x13C18D4", VA = "0x13C18D4")]
	public static void CompleteStage(string stageName)
	{
	}

	[Token(Token = "0x6000EA2")]
	[Address(RVA = "0x13C1C48", Offset = "0x13C1C48", VA = "0x13C1C48")]
	public static void OnPurchase(string name)
	{
	}

	[Token(Token = "0x6000EA3")]
	[Address(RVA = "0x13C2050", Offset = "0x13C2050", VA = "0x13C2050")]
	private void OnMoneyChanged(int newMoney)
	{
	}

	[Token(Token = "0x6000EA4")]
	[Address(RVA = "0x13C2068", Offset = "0x13C2068", VA = "0x13C2068")]
	public static void EndRun()
	{
	}

	[Token(Token = "0x6000EA5")]
	[Address(RVA = "0x13C0AD4", Offset = "0x13C0AD4", VA = "0x13C0AD4")]
	public static void StartRun()
	{
	}

	[Token(Token = "0x6000EA6")]
	[Address(RVA = "0x13C21DC", Offset = "0x13C21DC", VA = "0x13C21DC")]
	public static void AddLoot(string name, string src, int value, int level)
	{
	}

	[Token(Token = "0x6000EA7")]
	[Address(RVA = "0x13C2308", Offset = "0x13C2308", VA = "0x13C2308")]
	private static Dictionary<string, int> AddLootToDic(string name, string src, Dictionary<string, int> dic)
	{
		return null;
	}

	[Token(Token = "0x6000EA8")]
	[Address(RVA = "0x13C0048", Offset = "0x13C0048", VA = "0x13C0048")]
	private static string MakeString(List<string> list)
	{
		return null;
	}

	[Token(Token = "0x6000EA9")]
	[Address(RVA = "0x13C172C", Offset = "0x13C172C", VA = "0x13C172C")]
	private static string MakeString(List<int> list)
	{
		return null;
	}

	[Token(Token = "0x6000EAA")]
	[Address(RVA = "0x13BFAE0", Offset = "0x13BFAE0", VA = "0x13BFAE0")]
	private static string MakeString(Dictionary<string, int> dict)
	{
		return null;
	}

	[Token(Token = "0x6000EAB")]
	[Address(RVA = "0x13C24D4", Offset = "0x13C24D4", VA = "0x13C24D4")]
	private static string MakeString(Dictionary<int, string> dict)
	{
		return null;
	}

	[Token(Token = "0x6000EAC")]
	[Address(RVA = "0x13C2884", Offset = "0x13C2884", VA = "0x13C2884")]
	public static void AddRoom(string name)
	{
	}

	[Token(Token = "0x6000EAD")]
	[Address(RVA = "0x13C2964", Offset = "0x13C2964", VA = "0x13C2964")]
	public static void AddTool(string name)
	{
	}

	[Token(Token = "0x6000EAE")]
	[Address(RVA = "0x13C2A9C", Offset = "0x13C2A9C", VA = "0x13C2A9C")]
	public static void AddDeath()
	{
	}

	[Token(Token = "0x6000EAF")]
	[Address(RVA = "0x13BFE8C", Offset = "0x13BFE8C", VA = "0x13BFE8C")]
	private string LootTableSerialize(string t1, string t2, string t3)
	{
		return null;
	}

	[Token(Token = "0x6000EB0")]
	[Address(RVA = "0x13C09C8", Offset = "0x13C09C8", VA = "0x13C09C8")]
	private string GetRunGenRoomAmount()
	{
		return null;
	}

	[Token(Token = "0x6000EB1")]
	[Address(RVA = "0x13C05B4", Offset = "0x13C05B4", VA = "0x13C05B4")]
	private string GetRunGenTags()
	{
		return null;
	}

	[Token(Token = "0x6000EB2")]
	[Address(RVA = "0x13C2C7C", Offset = "0x13C2C7C", VA = "0x13C2C7C")]
	private object MakeString(List<RunGenerationData.GameplayTags> gameplayTags)
	{
		return null;
	}

	[Token(Token = "0x6000EB3")]
	[Address(RVA = "0x13C01C0", Offset = "0x13C01C0", VA = "0x13C01C0")]
	private object MakeString(Dictionary<int, int> runDeaths)
	{
		return null;
	}

	[Token(Token = "0x6000EB4")]
	[Address(RVA = "0x13C2E34", Offset = "0x13C2E34", VA = "0x13C2E34")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EB5")]
	[Address(RVA = "0x13C2F00", Offset = "0x13C2F00", VA = "0x13C2F00")]
	public static void AddLevel(int level, List<Room> thirdLevelRooms)
	{
	}

	[Token(Token = "0x6000EB6")]
	[Address(RVA = "0x13C31F0", Offset = "0x13C31F0", VA = "0x13C31F0")]
	internal static void RunGenerated(RunGenerationData runGenerationData)
	{
	}

	[Token(Token = "0x6000EB7")]
	[Address(RVA = "0x13C32FC", Offset = "0x13C32FC", VA = "0x13C32FC")]
	public void ToggleAnalytics(bool isOn)
	{
	}

	[Token(Token = "0x6000EB8")]
	[Address(RVA = "0x13C33D8", Offset = "0x13C33D8", VA = "0x13C33D8")]
	public void DisableAnalyticsCompletely()
	{
	}

	[Token(Token = "0x6000EB9")]
	[Address(RVA = "0x13C33CC", Offset = "0x13C33CC", VA = "0x13C33CC")]
	public void EnableAnonymizingData()
	{
	}

	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0x13C3404", Offset = "0x13C3404", VA = "0x13C3404")]
	public AnalyticsManager()
	{
	}
}
[Token(Token = "0x2000207")]
[ExecuteInEditMode]
public class AtmosphereManager : MonoBehaviourPunCallbacks, IOnEventCallback
{
	[Token(Token = "0x2000208")]
	[CompilerGenerated]
	private sealed class <WaitForGeneralEventsManager>d__51 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x170001B0")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0x13C7BC8", Offset = "0x13C7BC8", VA = "0x13C7BC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0x13C7C10", Offset = "0x13C7C10", VA = "0x13C7C10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x13C42E4", Offset = "0x13C42E4", VA = "0x13C42E4")]
		[DebuggerHidden]
		public <WaitForGeneralEventsManager>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x13C7B18", Offset = "0x13C7B18", VA = "0x13C7B18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x13C7B1C", Offset = "0x13C7B1C", VA = "0x13C7B1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x13C7BD0", Offset = "0x13C7BD0", VA = "0x13C7BD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000209")]
	[CompilerGenerated]
	private sealed class <FadeFogValuesSequence>d__66 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AtmosphereManager <>4__this;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float end;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float start;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <initialStart>5__3;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <initialEnd>5__4;

		[Token(Token = "0x170001B2")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000EF9")]
			[Address(RVA = "0x13C7F10", Offset = "0x13C7F10", VA = "0x13C7F10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0x13C7F58", Offset = "0x13C7F58", VA = "0x13C7F58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x13C6FD4", Offset = "0x13C6FD4", VA = "0x13C6FD4")]
		[DebuggerHidden]
		public <FadeFogValuesSequence>d__66(int <>1__state)
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x13C7C6C", Offset = "0x13C7C6C", VA = "0x13C7C6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x13C7C70", Offset = "0x13C7C70", VA = "0x13C7C70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x13C7F18", Offset = "0x13C7F18", VA = "0x13C7F18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200020A")]
	[CompilerGenerated]
	private sealed class <LoadNewSkyboxAsync>d__74 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AssetReference skyboxReference;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AtmosphereManager <>4__this;

		[Token(Token = "0x170001B4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0x13C81D8", Offset = "0x13C81D8", VA = "0x13C81D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0x13C8220", Offset = "0x13C8220", VA = "0x13C8220", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x13C7198", Offset = "0x13C7198", VA = "0x13C7198")]
		[DebuggerHidden]
		public <LoadNewSkyboxAsync>d__74(int <>1__state)
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x13C7FB4", Offset = "0x13C7FB4", VA = "0x13C7FB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x13C7FB8", Offset = "0x13C7FB8", VA = "0x13C7FB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x13C81E0", Offset = "0x13C81E0", VA = "0x13C81E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200020B")]
	[CompilerGenerated]
	private sealed class <ChangeFogCubeSequence>d__75 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material newFogcube;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AtmosphereManager <>4__this;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float newEnd;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AssetReference skyboxRef;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float newStart;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <halfTime>5__2;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__3;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <initialStart>5__4;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <initialEnd>5__5;

		[Token(Token = "0x170001B6")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000F05")]
			[Address(RVA = "0x13C8788", Offset = "0x13C8788", VA = "0x13C8788", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F07")]
			[Address(RVA = "0x13C87D0", Offset = "0x13C87D0", VA = "0x13C87D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x13C71C0", Offset = "0x13C71C0", VA = "0x13C71C0")]
		[DebuggerHidden]
		public <ChangeFogCubeSequence>d__75(int <>1__state)
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x13C8228", Offset = "0x13C8228", VA = "0x13C8228", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x13C822C", Offset = "0x13C822C", VA = "0x13C822C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x13C8790", Offset = "0x13C8790", VA = "0x13C8790", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200020C")]
	[CompilerGenerated]
	private sealed class <TemporaryOverrideCubeSequence>d__77 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material newFogcube;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AtmosphereManager <>4__this;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float farClippingDistance;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AssetReference skyboxRef;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float newEnd;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float newStart;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <halfTime>5__2;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <timer>5__3;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <initialStart>5__4;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <initialEnd>5__5;

		[Token(Token = "0x170001B8")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0x13C8CC4", Offset = "0x13C8CC4", VA = "0x13C8CC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0x13C8D0C", Offset = "0x13C8D0C", VA = "0x13C8D0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x13C72B4", Offset = "0x13C72B4", VA = "0x13C72B4")]
		[DebuggerHidden]
		public <TemporaryOverrideCubeSequence>d__77(int <>1__state)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x13C882C", Offset = "0x13C882C", VA = "0x13C882C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x13C8830", Offset = "0x13C8830", VA = "0x13C8830", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x13C8CCC", Offset = "0x13C8CCC", VA = "0x13C8CCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200020D")]
	[CompilerGenerated]
	private sealed class <FadeAmbientColorSequence>d__80 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Color color;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private UnityEngine.Color <startSkyColor>5__2;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Color <startEquatorColor>5__3;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private UnityEngine.Color <targetEquatorColor>5__4;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <timer>5__5;

		[Token(Token = "0x170001BA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000F11")]
			[Address(RVA = "0x13C8F68", Offset = "0x13C8F68", VA = "0x13C8F68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F13")]
			[Address(RVA = "0x13C8FB0", Offset = "0x13C8FB0", VA = "0x13C8FB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x13C741C", Offset = "0x13C741C", VA = "0x13C741C")]
		[DebuggerHidden]
		public <FadeAmbientColorSequence>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x13C8D68", Offset = "0x13C8D68", VA = "0x13C8D68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x13C8D6C", Offset = "0x13C8D6C", VA = "0x13C8D6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x13C8F70", Offset = "0x13C8F70", VA = "0x13C8F70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200020E")]
	[CompilerGenerated]
	private sealed class <FadeSunValuesSequence>d__82 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Color color;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Color <startColor>5__2;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <startIntensity>5__3;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <timer>5__4;

		[Token(Token = "0x170001BC")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000F17")]
			[Address(RVA = "0x13C91A0", Offset = "0x13C91A0", VA = "0x13C91A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F19")]
			[Address(RVA = "0x13C91E8", Offset = "0x13C91E8", VA = "0x13C91E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x13C74E0", Offset = "0x13C74E0", VA = "0x13C74E0")]
		[DebuggerHidden]
		public <FadeSunValuesSequence>d__82(int <>1__state)
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x13C900C", Offset = "0x13C900C", VA = "0x13C900C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x13C9010", Offset = "0x13C9010", VA = "0x13C9010", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x13C91A8", Offset = "0x13C91A8", VA = "0x13C91A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AtmosphereManager instance;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public System.Action OnSkyboxChanged;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public WeatherEffects weatherEffects;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AtmosphereVolume closestVolume;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AtmosphereVolume previousFogChangeTrigger;

	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Atmosphere[] topAtmospheresDay;

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Atmosphere[] topAtmospheresNight;

	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Atmosphere[] caveAtmospheres;

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject[] topDayReflectionProbes;

	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject campFire;

	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject[] dayOnlyGameobjects;

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject[] nightOnlyGameobjects;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Camera currentCamera;

	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Action<bool> isNightStatusChangedEvent;

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public static int startID;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public static int endID;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public static int fogCubeID;

	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Texture2D noiseTexture;

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Texture2D tripLUT;

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private float LUTContribution;

	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool _tripping;

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private GameObject[] cloudPrefabs;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<GameObject> currentClouds;

	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<AtmosphereVolume> _volumes;

	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Material _currentFogCubemap;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Material _currentSkybox;

	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Material _tempOverrideFogCubemap;

	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float _currentFogStart;

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float _currentFogEnd;

	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private CoroutineHandle _existingFade;

	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private CoroutineHandle _existingAmbienceFade;

	[Token(Token = "0x4000D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private CoroutineHandle _existingSunFade;

	[Token(Token = "0x4000D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private bool _closestChanged;

	[Token(Token = "0x4000D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float _nextUpdateTime;

	[Token(Token = "0x4000D87")]
	private const float farClipExtra = 5f;

	[Token(Token = "0x4000D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool _fadingFog;

	[Token(Token = "0x4000D89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float _lastDayChangeTime;

	[Token(Token = "0x4000D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool _isNight;

	[Token(Token = "0x4000D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
	private bool _boostAmbient;

	[Token(Token = "0x4000D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private UnityEngine.Color _currentAmbientColor;

	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private int _currentAtmosphereIndex;

	[Token(Token = "0x4000D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private AssetReference currentLoadedSkybox;

	[Token(Token = "0x170001AD")]
	public static AtmosphereManager Instance
	{
		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x13BEDCC", Offset = "0x13BEDCC", VA = "0x13BEDCC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001AE")]
	public Atmosphere currentAtmosphere
	{
		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x13C3F6C", Offset = "0x13C3F6C", VA = "0x13C3F6C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x13C3F74", Offset = "0x13C3F74", VA = "0x13C3F74")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001AF")]
	public AsyncOperationHandle<Material> _currentSkyboxMaterialOperationHandle
	{
		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x13C70E4", Offset = "0x13C70E4", VA = "0x13C70E4")]
		[CompilerGenerated]
		get
		{
			return default(AsyncOperationHandle<Material>);
		}
		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x13C70F0", Offset = "0x13C70F0", VA = "0x13C70F0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000EC2")]
	[Address(RVA = "0x13C3F84", Offset = "0x13C3F84", VA = "0x13C3F84")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EC3")]
	[Address(RVA = "0x13C4094", Offset = "0x13C4094", VA = "0x13C4094")]
	[ContextMenu("SetLUT")]
	private void SetLUT()
	{
	}

	[Token(Token = "0x6000EC4")]
	[Address(RVA = "0x13C4148", Offset = "0x13C4148", VA = "0x13C4148")]
	public void SetLUTContribution(float value, bool applyImmediate)
	{
	}

	[Token(Token = "0x6000EC5")]
	[Address(RVA = "0x13C4164", Offset = "0x13C4164", VA = "0x13C4164", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000EC6")]
	[Address(RVA = "0x13C4284", Offset = "0x13C4284", VA = "0x13C4284")]
	[IteratorStateMachine(typeof(<WaitForGeneralEventsManager>d__51))]
	private IEnumerator<float> WaitForGeneralEventsManager()
	{
		return null;
	}

	[Token(Token = "0x6000EC7")]
	[Address(RVA = "0x13C430C", Offset = "0x13C430C", VA = "0x13C430C", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6000EC8")]
	[Address(RVA = "0x13C4408", Offset = "0x13C4408", VA = "0x13C4408")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EC9")]
	[Address(RVA = "0x13C44C0", Offset = "0x13C44C0", VA = "0x13C44C0")]
	private void OnSelectionChange()
	{
	}

	[Token(Token = "0x6000ECA")]
	[Address(RVA = "0x13C44C4", Offset = "0x13C44C4", VA = "0x13C44C4")]
	public float CurrentFogDistance()
	{
		return default(float);
	}

	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0x13C4524", Offset = "0x13C4524", VA = "0x13C4524")]
	public float GetTargetFogDistance()
	{
		return default(float);
	}

	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0x13C452C", Offset = "0x13C452C", VA = "0x13C452C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0x13C52C0", Offset = "0x13C52C0", VA = "0x13C52C0")]
	public void ActivateCaveAtmosphere(int caveLevel)
	{
	}

	[Token(Token = "0x6000ECE")]
	[Address(RVA = "0x13C53DC", Offset = "0x13C53DC", VA = "0x13C53DC")]
	public void FadeAtmosphere(Atmosphere atmosphere, bool instant = false, bool temporaryOverride = false, bool forceApply = false)
	{
	}

	[Token(Token = "0x6000ECF")]
	[Address(RVA = "0x13C4F1C", Offset = "0x13C4F1C", VA = "0x13C4F1C")]
	public static bool CheckCameraRef()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ED0")]
	[Address(RVA = "0x13C656C", Offset = "0x13C656C", VA = "0x13C656C")]
	public void SetFarClip(float value)
	{
	}

	[Token(Token = "0x6000ED1")]
	[Address(RVA = "0x13C6CA4", Offset = "0x13C6CA4", VA = "0x13C6CA4")]
	public void CheckIfInsideAllTriggers()
	{
	}

	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0x13C6E38", Offset = "0x13C6E38", VA = "0x13C6E38")]
	public void AddFogTrigger(AtmosphereVolume newTrigger)
	{
	}

	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0x13C633C", Offset = "0x13C633C", VA = "0x13C633C")]
	private void FadeFogValues(float start, float end, float time, bool force = false)
	{
	}

	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0x13C6F20", Offset = "0x13C6F20", VA = "0x13C6F20")]
	public static bool FogChangeNotAllowed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0x13C6F3C", Offset = "0x13C6F3C", VA = "0x13C6F3C")]
	[IteratorStateMachine(typeof(<FadeFogValuesSequence>d__66))]
	private IEnumerator<float> FadeFogValuesSequence(float start, float end, float time)
	{
		return null;
	}

	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0x13C5F70", Offset = "0x13C5F70", VA = "0x13C5F70")]
	private void FadeFogCubemap(Material newFogcube, AssetReference skyboxReference, float time, float newStart, float newEnd, bool force = false)
	{
	}

	[Token(Token = "0x6000ED9")]
	[Address(RVA = "0x13C6FFC", Offset = "0x13C6FFC", VA = "0x13C6FFC")]
	private void ChangeSkyboxAddressable(AssetReference newSkyboxRef)
	{
	}

	[Token(Token = "0x6000EDA")]
	[Address(RVA = "0x13C7108", Offset = "0x13C7108", VA = "0x13C7108")]
	[ExecuteInEditMode]
	[IteratorStateMachine(typeof(<LoadNewSkyboxAsync>d__74))]
	private IEnumerator LoadNewSkyboxAsync(AssetReference skyboxReference)
	{
		return null;
	}

	[Token(Token = "0x6000EDB")]
	[Address(RVA = "0x13C701C", Offset = "0x13C701C", VA = "0x13C701C")]
	[IteratorStateMachine(typeof(<ChangeFogCubeSequence>d__75))]
	private IEnumerator<float> ChangeFogCubeSequence(Material newFogcube, AssetReference skyboxRef, float time, float newStart, float newEnd)
	{
		return null;
	}

	[Token(Token = "0x6000EDC")]
	[Address(RVA = "0x13C5C3C", Offset = "0x13C5C3C", VA = "0x13C5C3C")]
	private void TempororaryOverrideFadeCubemap(Material newFogcube, AssetReference skyboxRef, float time, float newStart, float newEnd, bool force, float farClippingDistance)
	{
	}

	[Token(Token = "0x6000EDD")]
	[Address(RVA = "0x13C71E8", Offset = "0x13C71E8", VA = "0x13C71E8")]
	[IteratorStateMachine(typeof(<TemporaryOverrideCubeSequence>d__77))]
	private IEnumerator<float> TemporaryOverrideCubeSequence(Material newFogcube, AssetReference skyboxRef, float time, float newStart, float newEnd, float farClippingDistance)
	{
		return null;
	}

	[Token(Token = "0x6000EDE")]
	[Address(RVA = "0x13C72DC", Offset = "0x13C72DC", VA = "0x13C72DC")]
	public void StopAtmosphereOverride(bool instant = false)
	{
	}

	[Token(Token = "0x6000EDF")]
	[Address(RVA = "0x13C6854", Offset = "0x13C6854", VA = "0x13C6854")]
	public void FadeAmbientColor(UnityEngine.Color color, float time, bool force = false)
	{
	}

	[Token(Token = "0x6000EE0")]
	[Address(RVA = "0x13C7384", Offset = "0x13C7384", VA = "0x13C7384")]
	[IteratorStateMachine(typeof(<FadeAmbientColorSequence>d__80))]
	private IEnumerator<float> FadeAmbientColorSequence(UnityEngine.Color color, float time)
	{
		return null;
	}

	[Token(Token = "0x6000EE1")]
	[Address(RVA = "0x13C6A98", Offset = "0x13C6A98", VA = "0x13C6A98")]
	public void FadeSunValues(UnityEngine.Color color, float intensity, float time, bool force = false)
	{
	}

	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0x13C7444", Offset = "0x13C7444", VA = "0x13C7444")]
	[IteratorStateMachine(typeof(<FadeSunValuesSequence>d__82))]
	private IEnumerator<float> FadeSunValuesSequence(UnityEngine.Color color, float intensity, float time)
	{
		return null;
	}

	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0x13C522C", Offset = "0x13C522C", VA = "0x13C522C")]
	public void ResetTopAtmosphere(bool instant = true)
	{
	}

	[Token(Token = "0x6000EE4")]
	[Address(RVA = "0x13C4DC0", Offset = "0x13C4DC0", VA = "0x13C4DC0")]
	public void ActivateRandomTopWorldNightAtmosphere(bool instant)
	{
	}

	[Token(Token = "0x6000EE5")]
	[Address(RVA = "0x13C4CE4", Offset = "0x13C4CE4", VA = "0x13C4CE4")]
	public void ActivateRandomTopWorldDayAtmosphere(bool instant)
	{
	}

	[Token(Token = "0x6000EE6")]
	[Address(RVA = "0x13C7508", Offset = "0x13C7508", VA = "0x13C7508")]
	private void SyncAtmosphere(int index, bool night)
	{
	}

	[Token(Token = "0x6000EE7")]
	[Address(RVA = "0x13C76E0", Offset = "0x13C76E0", VA = "0x13C76E0", Slot = "54")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000EE8")]
	[Address(RVA = "0x13C7858", Offset = "0x13C7858", VA = "0x13C7858", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000EE9")]
	[Address(RVA = "0x13C7860", Offset = "0x13C7860", VA = "0x13C7860", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000EEA")]
	[Address(RVA = "0x13C7960", Offset = "0x13C7960", VA = "0x13C7960")]
	public bool IsNight()
	{
		return default(bool);
	}

	[Token(Token = "0x6000EEB")]
	[Address(RVA = "0x13C7968", Offset = "0x13C7968", VA = "0x13C7968")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0x13C7980", Offset = "0x13C7980", VA = "0x13C7980")]
	public void SetBoostAmbient(bool boost)
	{
	}

	[Token(Token = "0x6000EED")]
	[Address(RVA = "0x13C79B0", Offset = "0x13C79B0", VA = "0x13C79B0")]
	public void ResetCurrentAtmosphere()
	{
	}

	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0x13C7A34", Offset = "0x13C7A34", VA = "0x13C7A34")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0x13C7A38", Offset = "0x13C7A38", VA = "0x13C7A38")]
	public AtmosphereManager()
	{
	}
}
[Token(Token = "0x200020F")]
public class AvatarSpawnManager : MonoBehaviourPunCallbacks, IMatchmakingCallbacks
{
	[Token(Token = "0x2000210")]
	[CompilerGenerated]
	private sealed class <_SpawnAvatar>d__25 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AvatarSpawnManager <>4__this;

		[Token(Token = "0x170001BF")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000F32")]
			[Address(RVA = "0x13CAB64", Offset = "0x13CAB64", VA = "0x13CAB64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F34")]
			[Address(RVA = "0x13CABAC", Offset = "0x13CABAC", VA = "0x13CABAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x13CA46C", Offset = "0x13CA46C", VA = "0x13CA46C")]
		[DebuggerHidden]
		public <_SpawnAvatar>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x13CA5CC", Offset = "0x13CA5CC", VA = "0x13CA5CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x13CA5D0", Offset = "0x13CA5D0", VA = "0x13CA5D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x13CAB6C", Offset = "0x13CAB6C", VA = "0x13CAB6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AvatarSpawnManager Instance;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Reference to the player avatar prefab")]
	private GameObject playerAvatar;

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject PSVRPlayerAvatar;

	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool sceneLoaded;

	[Token(Token = "0x4000DCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<Transform> playerTransforms;

	[Token(Token = "0x4000DCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<PlayerAvatar> playerAvatars;

	[Token(Token = "0x4000DCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool quitting;

	[Token(Token = "0x4000DD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[HideInInspector]
	public bool allowAvatarSpawn;

	[Token(Token = "0x170001BE")]
	public GameObject GetPlayerAvatar
	{
		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x13C9244", Offset = "0x13C9244", VA = "0x13C9244")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000F1B")]
	[Address(RVA = "0x13C924C", Offset = "0x13C924C", VA = "0x13C924C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F1C")]
	[Address(RVA = "0x13C9394", Offset = "0x13C9394", VA = "0x13C9394")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000F1D")]
	[Address(RVA = "0x13C9448", Offset = "0x13C9448", VA = "0x13C9448")]
	public PlayerAvatar GetMasterClientAvatar()
	{
		return null;
	}

	[Token(Token = "0x6000F1E")]
	[Address(RVA = "0x13C967C", Offset = "0x13C967C", VA = "0x13C967C")]
	public void TeleportLocalClientToMaster()
	{
	}

	[Token(Token = "0x6000F1F")]
	[Address(RVA = "0x13C98B8", Offset = "0x13C98B8", VA = "0x13C98B8")]
	public void AddPlayerTransform(Transform playerTransform)
	{
	}

	[Token(Token = "0x6000F20")]
	[Address(RVA = "0x13C9C60", Offset = "0x13C9C60", VA = "0x13C9C60")]
	public void RemovePlayerTransform(Transform playerTransform)
	{
	}

	[Token(Token = "0x6000F21")]
	[Address(RVA = "0x13C9A58", Offset = "0x13C9A58", VA = "0x13C9A58")]
	private void RemoveMissingFromPlayerLists()
	{
	}

	[Token(Token = "0x6000F22")]
	[Address(RVA = "0x13C9D5C", Offset = "0x13C9D5C", VA = "0x13C9D5C", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6000F23")]
	[Address(RVA = "0x13C9E0C", Offset = "0x13C9E0C", VA = "0x13C9E0C", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6000F24")]
	[Address(RVA = "0x13C9EBC", Offset = "0x13C9EBC", VA = "0x13C9EBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F25")]
	[Address(RVA = "0x13C9EC0", Offset = "0x13C9EC0", VA = "0x13C9EC0", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000F26")]
	[Address(RVA = "0x13CA1FC", Offset = "0x13CA1FC", VA = "0x13CA1FC")]
	private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6000F27")]
	[Address(RVA = "0x13CA32C", Offset = "0x13CA32C", VA = "0x13CA32C", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000F28")]
	[Address(RVA = "0x13C9FA8", Offset = "0x13C9FA8", VA = "0x13C9FA8")]
	private void InitPlayer(Player newPlayer)
	{
	}

	[Token(Token = "0x6000F29")]
	[Address(RVA = "0x13CA390", Offset = "0x13CA390", VA = "0x13CA390")]
	[PunRPC]
	private void SpawnAvatarRPC()
	{
	}

	[Token(Token = "0x6000F2A")]
	[Address(RVA = "0x13CA3F8", Offset = "0x13CA3F8", VA = "0x13CA3F8")]
	[IteratorStateMachine(typeof(<_SpawnAvatar>d__25))]
	private IEnumerator<float> _SpawnAvatar()
	{
		return null;
	}

	[Token(Token = "0x6000F2B")]
	[Address(RVA = "0x13CA494", Offset = "0x13CA494", VA = "0x13CA494")]
	private string playerName(Player ply)
	{
		return null;
	}

	[Token(Token = "0x6000F2C")]
	[Address(RVA = "0x13CA330", Offset = "0x13CA330", VA = "0x13CA330")]
	private int playerNr(Player ply)
	{
		return default(int);
	}

	[Token(Token = "0x6000F2D")]
	[Address(RVA = "0x13CA4E8", Offset = "0x13CA4E8", VA = "0x13CA4E8")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000F2E")]
	[Address(RVA = "0x13CA4F4", Offset = "0x13CA4F4", VA = "0x13CA4F4")]
	public AvatarSpawnManager()
	{
	}
}
[Token(Token = "0x2000211")]
public class BackPackManager : Singleton<BackPackManager>
{
	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<BackPack> allBackPacks;

	[Token(Token = "0x4000DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BackPack localPlayerBackpack;

	[Token(Token = "0x6000F35")]
	[Address(RVA = "0x13CAC08", Offset = "0x13CAC08", VA = "0x13CAC08")]
	public void AddBackPack(BackPack backPack)
	{
	}

	[Token(Token = "0x6000F36")]
	[Address(RVA = "0x13CACB8", Offset = "0x13CACB8", VA = "0x13CACB8")]
	public void RemoveBackPack(BackPack backPack)
	{
	}

	[Token(Token = "0x6000F37")]
	[Address(RVA = "0x13CAD10", Offset = "0x13CAD10", VA = "0x13CAD10")]
	public List<BackPack> GetAllBackPacks()
	{
		return null;
	}

	[Token(Token = "0x6000F38")]
	[Address(RVA = "0x13CAD18", Offset = "0x13CAD18", VA = "0x13CAD18")]
	public BackPackManager()
	{
	}
}
[Token(Token = "0x2000212")]
public class ColliderToggleManager : MonoBehaviour
{
	[Token(Token = "0x4000DD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ColliderToggleManager Instance;

	[Token(Token = "0x4000DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Only add colliders that obstruct playing when in the cave (eg. mountain backdrop)")]
	[SerializeField]
	private GameObject[] surfaceColliders;

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] caveColliders;

	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider[] cachedSurfaceColliders;

	[Token(Token = "0x6000F39")]
	[Address(RVA = "0x13CADE0", Offset = "0x13CADE0", VA = "0x13CADE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F3A")]
	[Address(RVA = "0x13CAE38", Offset = "0x13CAE38", VA = "0x13CAE38")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000F3B")]
	[Address(RVA = "0x13CAEEC", Offset = "0x13CAEEC", VA = "0x13CAEEC")]
	public void ToggleCaveOrSurface(bool isSurface)
	{
	}

	[Token(Token = "0x6000F3C")]
	[Address(RVA = "0x13CAEF0", Offset = "0x13CAEF0", VA = "0x13CAEF0")]
	public ColliderToggleManager()
	{
	}
}
[Token(Token = "0x2000213")]
public class CommonParticleManager : MonoBehaviour
{
	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CommonParticleManager Instance;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Local instances")]
	public ParticleSystem chunkDestroyedParticle;

	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LootPullParticles workersGloveVauumParticle;

	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Prefabs")]
	public ParticleSystem lootSparklePrefab;

	[Token(Token = "0x4000DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem waterSplashPrefab;

	[Token(Token = "0x4000DDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ParticleSystem waterSplashAndroidPrefab;

	[Token(Token = "0x4000DE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject fireFXSpawner;

	[Token(Token = "0x4000DE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ParticleSystem fireFXPrefab;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ParticleSystem fireFXAndroidPrefab;

	[Token(Token = "0x4000DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ParticleSystem explosiveFXPrefab;

	[Token(Token = "0x4000DE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ParticleSystem explosiveFXAndroidPrefab;

	[Token(Token = "0x4000DE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ParticleSystem genericDestructionFXPrefab;

	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ParticleSystem B4ExplosiveCrate;

	[Token(Token = "0x170001C1")]
	public ParticleSystemRenderer ChunkDestroyedParticleRenderer
	{
		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x13CAEF8", Offset = "0x13CAEF8", VA = "0x13CAEF8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x13CAF00", Offset = "0x13CAF00", VA = "0x13CAF00")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000F3F")]
	[Address(RVA = "0x13CAF08", Offset = "0x13CAF08", VA = "0x13CAF08")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F40")]
	[Address(RVA = "0x13CB05C", Offset = "0x13CB05C", VA = "0x13CB05C")]
	private void Pool(GameObject prefab)
	{
	}

	[Token(Token = "0x6000F41")]
	[Address(RVA = "0x13CB1E0", Offset = "0x13CB1E0", VA = "0x13CB1E0")]
	public CommonParticleManager()
	{
	}
}
[Token(Token = "0x2000214")]
public class CullingGroupManager : Singleton<CullingGroupManager>
{
	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Prop> allDynamicProps;

	[Token(Token = "0x4000DE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Dictionary<ICullable, int> cullables;

	[Token(Token = "0x4000DEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public System.Action cullablesChanged;

	[Token(Token = "0x6000F42")]
	[Address(RVA = "0x13CB1E8", Offset = "0x13CB1E8", VA = "0x13CB1E8")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000F43")]
	[Address(RVA = "0x13CB3E4", Offset = "0x13CB3E4", VA = "0x13CB3E4")]
	private void SceneManager_activeSceneChanged(Scene arg0, Scene arg1)
	{
	}

	[Token(Token = "0x6000F44")]
	[Address(RVA = "0x13CB320", Offset = "0x13CB320", VA = "0x13CB320")]
	private void AddTopWorldProps()
	{
	}

	[Token(Token = "0x6000F45")]
	[Address(RVA = "0x13CB57C", Offset = "0x13CB57C", VA = "0x13CB57C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000F46")]
	[Address(RVA = "0x13CB474", Offset = "0x13CB474", VA = "0x13CB474")]
	public void AddDynamicProps(Prop[] allProps)
	{
	}

	[Token(Token = "0x6000F47")]
	[Address(RVA = "0x13CB64C", Offset = "0x13CB64C", VA = "0x13CB64C")]
	public void RemoveDynamicProps(Prop[] dynamicProps)
	{
	}

	[Token(Token = "0x6000F48")]
	[Address(RVA = "0x13CB6E8", Offset = "0x13CB6E8", VA = "0x13CB6E8")]
	public Prop[] GetAllDynamicProps()
	{
		return null;
	}

	[Token(Token = "0x6000F49")]
	[Address(RVA = "0x13CB738", Offset = "0x13CB738", VA = "0x13CB738")]
	public ICullable[] GetAllCullables()
	{
		return null;
	}

	[Token(Token = "0x6000F4A")]
	[Address(RVA = "0x13CB7A4", Offset = "0x13CB7A4", VA = "0x13CB7A4")]
	public int[] GetAllRendererAmounts()
	{
		return null;
	}

	[Token(Token = "0x6000F4B")]
	[Address(RVA = "0x13CB810", Offset = "0x13CB810", VA = "0x13CB810")]
	public void AddCullable(ICullable cullable, int renderers)
	{
	}

	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0x13CB8CC", Offset = "0x13CB8CC", VA = "0x13CB8CC")]
	public void RemoveCullable(ICullable cullable)
	{
	}

	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0x13CB948", Offset = "0x13CB948", VA = "0x13CB948")]
	public CullingGroupManager()
	{
	}
}
[Token(Token = "0x2000215")]
public class ElevatorManager : MonoBehaviour
{
	[Token(Token = "0x4000DEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ElevatorManager Instance;

	[Token(Token = "0x4000DEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ElevatorRoom[] elevatorRooms;

	[Token(Token = "0x4000DED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 topWorldElevatorShaftPosition;

	[Token(Token = "0x4000DEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion topWorldElevatorShaftRotation;

	[Token(Token = "0x4000DEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private byte currentInUseDecoVariation;

	[Token(Token = "0x6000F4E")]
	[Address(RVA = "0x13CBA64", Offset = "0x13CBA64", VA = "0x13CBA64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0x13CBB74", Offset = "0x13CBB74", VA = "0x13CBB74")]
	public void SetRandomDecoToTopworldElevator()
	{
	}

	[Token(Token = "0x6000F50")]
	[Address(RVA = "0x13CBBE4", Offset = "0x13CBBE4", VA = "0x13CBBE4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000F51")]
	[Address(RVA = "0x13CBC98", Offset = "0x13CBC98", VA = "0x13CBC98")]
	public Room GetNotUsedElevatorShaftRoom()
	{
		return null;
	}

	[Token(Token = "0x6000F52")]
	[Address(RVA = "0x13CBD34", Offset = "0x13CBD34", VA = "0x13CBD34")]
	public void ResetAllElevatorInUses()
	{
	}

	[Token(Token = "0x6000F53")]
	[Address(RVA = "0x13CBD98", Offset = "0x13CBD98", VA = "0x13CBD98")]
	public Vector3 GetElevatorShaftTopWorldPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F54")]
	[Address(RVA = "0x13CBE9C", Offset = "0x13CBE9C", VA = "0x13CBE9C")]
	public void MoveUnusedElevatorSomewhereElse()
	{
	}

	[Token(Token = "0x6000F55")]
	[Address(RVA = "0x13CBF3C", Offset = "0x13CBF3C", VA = "0x13CBF3C")]
	public void AddExitTransforms()
	{
	}

	[Token(Token = "0x6000F56")]
	[Address(RVA = "0x13CBFE8", Offset = "0x13CBFE8", VA = "0x13CBFE8")]
	public void CheckExitTransforms()
	{
	}

	[Token(Token = "0x6000F57")]
	[Address(RVA = "0x13CC048", Offset = "0x13CC048", VA = "0x13CC048")]
	public Quaternion GetElevatorShaftTopWorldRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0x13CC054", Offset = "0x13CC054", VA = "0x13CC054")]
	public ElevatorRoom GetCurrentInUseElevator()
	{
		return null;
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0x13CC130", Offset = "0x13CC130", VA = "0x13CC130")]
	public ElevatorRoom GetCurrentNotInUseElevator()
	{
		return null;
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0x13CC210", Offset = "0x13CC210", VA = "0x13CC210")]
	public void ResetElevators()
	{
	}

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0x13CC270", Offset = "0x13CC270", VA = "0x13CC270")]
	public void ResetPrimaryIfPlayersDied()
	{
	}

	[Token(Token = "0x6000F5C")]
	[Address(RVA = "0x13CC398", Offset = "0x13CC398", VA = "0x13CC398")]
	public void ResetAlreadyOnElevators()
	{
	}

	[Token(Token = "0x6000F5D")]
	[Address(RVA = "0x13CC40C", Offset = "0x13CC40C", VA = "0x13CC40C")]
	public void NewPlayerJoined()
	{
	}

	[Token(Token = "0x6000F5E")]
	[Address(RVA = "0x13CC438", Offset = "0x13CC438", VA = "0x13CC438")]
	public void ToggleElevatorOverlapBoxes(bool enable)
	{
	}

	[Token(Token = "0x6000F5F")]
	[Address(RVA = "0x13CC4A8", Offset = "0x13CC4A8", VA = "0x13CC4A8")]
	public void SetCurrentInUseDecoVariation(byte currentDeco)
	{
	}

	[Token(Token = "0x6000F60")]
	[Address(RVA = "0x13CC4B0", Offset = "0x13CC4B0", VA = "0x13CC4B0")]
	public byte GetCurrentInUseDecoVariation()
	{
		return default(byte);
	}

	[Token(Token = "0x6000F61")]
	[Address(RVA = "0x13CC4B8", Offset = "0x13CC4B8", VA = "0x13CC4B8")]
	public ElevatorManager()
	{
	}
}
[Token(Token = "0x2000216")]
public class FallingManager : Singleton<FallingManager>
{
	[Token(Token = "0x4000DF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Rigidbody> rigidbodies;

	[Token(Token = "0x4000DF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int _currentIndex;

	[Token(Token = "0x4000DF2")]
	public const float RESPAWN_Y = -350f;

	[Token(Token = "0x4000DF3")]
	private const int MAX_TO_CHECK = 20;

	[Token(Token = "0x6000F62")]
	[Address(RVA = "0x13CC550", Offset = "0x13CC550", VA = "0x13CC550")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000F63")]
	[Address(RVA = "0x13CD678", Offset = "0x13CD678", VA = "0x13CD678")]
	public void ResetIndex()
	{
	}

	[Token(Token = "0x6000F64")]
	[Address(RVA = "0x13CC988", Offset = "0x13CC988", VA = "0x13CC988")]
	public void DealWithOutOfBounds(Rigidbody rb)
	{
	}

	[Token(Token = "0x6000F65")]
	[Address(RVA = "0x13CD680", Offset = "0x13CD680", VA = "0x13CD680", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000F66")]
	[Address(RVA = "0x13CD710", Offset = "0x13CD710", VA = "0x13CD710")]
	public FallingManager()
	{
	}
}
[Token(Token = "0x2000217")]
public static class FallingManagerExtension
{
	[Token(Token = "0x6000F67")]
	[Address(RVA = "0x13CD7DC", Offset = "0x13CD7DC", VA = "0x13CD7DC")]
	public static void TrackFalling(this Rigidbody rb)
	{
	}

	[Token(Token = "0x6000F68")]
	[Address(RVA = "0x13CD984", Offset = "0x13CD984", VA = "0x13CD984")]
	public static void RemoveFalling(this Rigidbody rb)
	{
	}

	[Token(Token = "0x6000F69")]
	[Address(RVA = "0x13CC8C8", Offset = "0x13CC8C8", VA = "0x13CC8C8")]
	public static bool IsOutOfBounds(this float yPosition)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000218")]
public class GameManager : MonoBehaviourPunCallbacks, IPunObservable
{
	[Token(Token = "0x2000219")]
	public enum RenderingMode
	{
		[Token(Token = "0x4000E14")]
		Normal,
		[Token(Token = "0x4000E15")]
		UI
	}

	[Token(Token = "0x200021A")]
	[CompilerGenerated]
	private sealed class <_DisableEnemyAggro>d__39 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float duration;

		[Token(Token = "0x170001C2")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0x13D13A0", Offset = "0x13D13A0", VA = "0x13D13A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F98")]
			[Address(RVA = "0x13D13E8", Offset = "0x13D13E8", VA = "0x13D13E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x13CE8F0", Offset = "0x13CE8F0", VA = "0x13CE8F0")]
		[DebuggerHidden]
		public <_DisableEnemyAggro>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x13D12C0", Offset = "0x13D12C0", VA = "0x13D12C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x13D12C4", Offset = "0x13D12C4", VA = "0x13D12C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x13D13A8", Offset = "0x13D13A8", VA = "0x13D13A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameManager Instance;

	[Token(Token = "0x4000DF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float timeStepPC;

	[Token(Token = "0x4000DF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float timeStepAndroid;

	[Token(Token = "0x4000DF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeStepPS4;

	[Token(Token = "0x4000DF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float timeStepPS5;

	[Token(Token = "0x4000DF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LayerMask lineOfSightLayers;

	[Token(Token = "0x4000DFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public LayerMask damageReceiveLayers;

	[Token(Token = "0x4000DFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LootSpawnAndDespawnManager lootSpawnAndDespawnManager;

	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public EnemySpawnAndDespawnManager enemySpawnAndDespawnManager;

	[Token(Token = "0x4000DFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MiscSpawnAndDespawnManager miscSpawnAndDespawnManager;

	[Token(Token = "0x4000DFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ToolSpawnAndDespawnManager toolSpawnAndDespawnManager;

	[Token(Token = "0x4000DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FirstVisitToBiomeController firstVisitToBiomeController;

	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DefaultSpawnPositionController defaultSpawnPositionController;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool autoJoinMekiwi;

	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private RunGenerationManager runGenerationManager;

	[Token(Token = "0x4000E03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private RunGenerationSlotMachine runGenerationSlotMachine;

	[Token(Token = "0x4000E04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Atmosphere caveAtmosphere;

	[Token(Token = "0x4000E05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[HideInInspector]
	public PlayerAvatar myPlayerAvatar;

	[Token(Token = "0x4000E06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[HideInInspector]
	public bool godMode;

	[Token(Token = "0x4000E07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	[HideInInspector]
	public bool isOnSurface;

	[Token(Token = "0x4000E08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private GameObject postProcessPrefab;

	[Token(Token = "0x4000E09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private NetworkConnectManager networkConnectManager;

	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private new PhotonView photonView;

	[Token(Token = "0x4000E0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 currentSpawnPos;

	[Token(Token = "0x4000E0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Dictionary<Transform, PlayerAvatar> playerHeads;

	[Token(Token = "0x4000E0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private int playersLeftAlive;

	[Token(Token = "0x4000E0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool globalDisableAggro;

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private UniversalAdditionalCameraData mainCameraCachedAdditionalCameraData;

	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private UniversalAdditionalCameraData streamCameraCachedAdditionalCameraData;

	[Token(Token = "0x4000E11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool _disableRespawn;

	[NonSerialized]
	[Token(Token = "0x4000E12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	public bool endingIsActive;

	[Token(Token = "0x6000F6A")]
	[Address(RVA = "0x13CDA8C", Offset = "0x13CDA8C", VA = "0x13CDA8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F6B")]
	[Address(RVA = "0x13CE35C", Offset = "0x13CE35C", VA = "0x13CE35C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000F6C")]
	[Address(RVA = "0x13CE56C", Offset = "0x13CE56C", VA = "0x13CE56C")]
	private void OnLowMemory()
	{
	}

	[Token(Token = "0x6000F6D")]
	[Address(RVA = "0x13CE5DC", Offset = "0x13CE5DC", VA = "0x13CE5DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F6E")]
	[Address(RVA = "0x13CE68C", Offset = "0x13CE68C", VA = "0x13CE68C", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6000F6F")]
	[Address(RVA = "0x13CE818", Offset = "0x13CE818", VA = "0x13CE818")]
	private void NewSceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x6000F70")]
	[Address(RVA = "0x13CE81C", Offset = "0x13CE81C", VA = "0x13CE81C")]
	private void DisableEnemyAggro()
	{
	}

	[Token(Token = "0x6000F71")]
	[Address(RVA = "0x13CE880", Offset = "0x13CE880", VA = "0x13CE880")]
	[IteratorStateMachine(typeof(<_DisableEnemyAggro>d__39))]
	private IEnumerator<float> _DisableEnemyAggro(float duration)
	{
		return null;
	}

	[Token(Token = "0x6000F72")]
	[Address(RVA = "0x13CDCD4", Offset = "0x13CDCD4", VA = "0x13CDCD4")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6000F73")]
	[Address(RVA = "0x13CDEB0", Offset = "0x13CDEB0", VA = "0x13CDEB0")]
	private void CheckReferences()
	{
	}

	[Token(Token = "0x6000F74")]
	[Address(RVA = "0x13CE918", Offset = "0x13CE918", VA = "0x13CE918")]
	public Vector3 GetPlayerSpawnPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F75")]
	[Address(RVA = "0x13CEB8C", Offset = "0x13CEB8C", VA = "0x13CEB8C")]
	public void ToggleRenderersAndColliders(bool isSurface)
	{
	}

	[Token(Token = "0x6000F76")]
	[Address(RVA = "0x13CECF0", Offset = "0x13CECF0", VA = "0x13CECF0", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6000F77")]
	[Address(RVA = "0x13CEF5C", Offset = "0x13CEF5C", VA = "0x13CEF5C", Slot = "32")]
	public override void OnMasterClientSwitched(Player newMasterClient)
	{
	}

	[Token(Token = "0x6000F78")]
	[Address(RVA = "0x13CF04C", Offset = "0x13CF04C", VA = "0x13CF04C", Slot = "43")]
	public override void OnPlayerLeftRoom(Player otherPlayer)
	{
	}

	[Token(Token = "0x6000F79")]
	[Address(RVA = "0x13CF17C", Offset = "0x13CF17C", VA = "0x13CF17C", Slot = "30")]
	public override void OnConnected()
	{
	}

	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0x13CF278", Offset = "0x13CF278", VA = "0x13CF278", Slot = "45")]
	public override void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0x13CF374", Offset = "0x13CF374", VA = "0x13CF374", Slot = "35")]
	public override void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0x13CF460", Offset = "0x13CF460", VA = "0x13CF460", Slot = "38")]
	public override void OnDisconnected(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000F7D")]
	[Address(RVA = "0x13CF5A0", Offset = "0x13CF5A0", VA = "0x13CF5A0", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000F7E")]
	[Address(RVA = "0x13CF69C", Offset = "0x13CF69C", VA = "0x13CF69C")]
	[PunRPC]
	public void ToggleRenderersAndCollidersRPC(bool isSurface)
	{
	}

	[Token(Token = "0x6000F7F")]
	[Address(RVA = "0x13CD09C", Offset = "0x13CD09C", VA = "0x13CD09C")]
	public void TeleportLocalPlayerToSpawnPosition()
	{
	}

	[Token(Token = "0x6000F80")]
	[Address(RVA = "0x13CF7D0", Offset = "0x13CF7D0", VA = "0x13CF7D0")]
	public RunGenerationManager GetRunGenerationManager()
	{
		return null;
	}

	[Token(Token = "0x6000F81")]
	[Address(RVA = "0x13CF844", Offset = "0x13CF844", VA = "0x13CF844")]
	public void RespawnAllPlayersToTopworld()
	{
	}

	[Token(Token = "0x6000F82")]
	[Address(RVA = "0x13CF8F4", Offset = "0x13CF8F4", VA = "0x13CF8F4")]
	[PunRPC]
	public void RespawnAllPlayersToTopworldRPC()
	{
	}

	[Token(Token = "0x6000F83")]
	[Address(RVA = "0x13CFEAC", Offset = "0x13CFEAC", VA = "0x13CFEAC", Slot = "54")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000F84")]
	[Address(RVA = "0x13CFF78", Offset = "0x13CFF78", VA = "0x13CFF78")]
	public void ResetForJoiningNewGame()
	{
	}

	[Token(Token = "0x6000F85")]
	[Address(RVA = "0x13CFFCC", Offset = "0x13CFFCC", VA = "0x13CFFCC")]
	public void ResetForNewGame()
	{
	}

	[Token(Token = "0x6000F86")]
	[Address(RVA = "0x13D03D4", Offset = "0x13D03D4", VA = "0x13D03D4")]
	public void HostDisconnected()
	{
	}

	[Token(Token = "0x6000F87")]
	[Address(RVA = "0x13CFD7C", Offset = "0x13CFD7C", VA = "0x13CFD7C")]
	public void ReturningToTop()
	{
	}

	[Token(Token = "0x6000F88")]
	[Address(RVA = "0x13D07B8", Offset = "0x13D07B8", VA = "0x13D07B8")]
	[PunRPC]
	private void ReturningToTopRPC()
	{
	}

	[Token(Token = "0x6000F89")]
	[Address(RVA = "0x13D0808", Offset = "0x13D0808", VA = "0x13D0808")]
	public void PlayerJoinedRoom()
	{
	}

	[Token(Token = "0x6000F8A")]
	[Address(RVA = "0x13D08AC", Offset = "0x13D08AC", VA = "0x13D08AC")]
	public NetworkConnectManager GetNetworkConnectManager()
	{
		return null;
	}

	[Token(Token = "0x6000F8B")]
	[Address(RVA = "0x13D09C0", Offset = "0x13D09C0", VA = "0x13D09C0")]
	public PlayerAvatar GetPlayerAvatarFromChildTransform(Transform playerChild)
	{
		return null;
	}

	[Token(Token = "0x6000F8C")]
	[Address(RVA = "0x13D0B5C", Offset = "0x13D0B5C", VA = "0x13D0B5C")]
	public void SetRenderingMode(RenderingMode renderingMode)
	{
	}

	[Token(Token = "0x6000F8D")]
	[Address(RVA = "0x13D0E60", Offset = "0x13D0E60", VA = "0x13D0E60")]
	public void AskMasterClientToDestroy(PhotonView destroyView)
	{
	}

	[Token(Token = "0x6000F8E")]
	[Address(RVA = "0x13D0F68", Offset = "0x13D0F68", VA = "0x13D0F68")]
	public void AskOwnerToDestroy(PhotonView destroyView, Player player)
	{
	}

	[Token(Token = "0x6000F8F")]
	[Address(RVA = "0x13D107C", Offset = "0x13D107C", VA = "0x13D107C")]
	[PunRPC]
	private void AskClientToDestroyViewIDRPC(int viewID)
	{
	}

	[Token(Token = "0x6000F90")]
	[Address(RVA = "0x13D11B8", Offset = "0x13D11B8", VA = "0x13D11B8")]
	public void SetDisableRespawn(bool value)
	{
	}

	[Token(Token = "0x6000F91")]
	[Address(RVA = "0x13D11C4", Offset = "0x13D11C4", VA = "0x13D11C4")]
	public void RunGenDecideRunRooms()
	{
	}

	[Token(Token = "0x6000F92")]
	[Address(RVA = "0x13D11EC", Offset = "0x13D11EC", VA = "0x13D11EC")]
	public GameManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200021B")]
public class MyToolGrabbedEvent : UnityEvent<Tool.ToolType>
{
	[Token(Token = "0x6000F99")]
	[Address(RVA = "0x13D1444", Offset = "0x13D1444", VA = "0x13D1444")]
	public MyToolGrabbedEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x200021C")]
public class MyToolSocketUpdatedEvent : UnityEvent<Tool.ToolType, int>
{
	[Token(Token = "0x6000F9A")]
	[Address(RVA = "0x13D148C", Offset = "0x13D148C", VA = "0x13D148C")]
	public MyToolSocketUpdatedEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x200021D")]
public class InGameUIToggledEvent : UnityEvent<bool>
{
	[Token(Token = "0x6000F9B")]
	[Address(RVA = "0x13D14D4", Offset = "0x13D14D4", VA = "0x13D14D4")]
	public InGameUIToggledEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x200021E")]
public class LootEvent : UnityEvent<Loot>
{
	[Token(Token = "0x6000F9C")]
	[Address(RVA = "0x13D151C", Offset = "0x13D151C", VA = "0x13D151C")]
	public LootEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x200021F")]
public class PropEvent : UnityEvent<Prop>
{
	[Token(Token = "0x6000F9D")]
	[Address(RVA = "0x13D1564", Offset = "0x13D1564", VA = "0x13D1564")]
	public PropEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x2000220")]
public class EnemyEvent : UnityEvent<Enemy, DamageType>
{
	[Token(Token = "0x6000F9E")]
	[Address(RVA = "0x13D15AC", Offset = "0x13D15AC", VA = "0x13D15AC")]
	public EnemyEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x2000221")]
public class PlayerAmountChangedEvent : UnityEvent<int>
{
	[Token(Token = "0x6000F9F")]
	[Address(RVA = "0x13D15F4", Offset = "0x13D15F4", VA = "0x13D15F4")]
	public PlayerAmountChangedEvent()
	{
	}
}
[Token(Token = "0x2000222")]
public class GeneralEventsManager : MonoBehaviour, IOnEventCallback
{
	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GeneralEventsManager Instance;

	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnLocalPlayerInitialized;

	[Token(Token = "0x4000E1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnLocalPlayerSettedUp;

	[Token(Token = "0x4000E1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnRemotePlayerSettedUp;

	[Token(Token = "0x4000E1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnNewLevelGeneratingStarted;

	[Token(Token = "0x4000E1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnNewLevelGeneratingFinished;

	[Token(Token = "0x4000E1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnLevelLootGeneratingFinished;

	[Token(Token = "0x4000E20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PlayerAmountChangedEvent OnPlayerAmountChanged;

	[Token(Token = "0x4000E21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent OnCombatStarted;

	[Token(Token = "0x4000E22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent OnCombatEnded;

	[Token(Token = "0x4000E23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public EnemyEvent OnEnemyDied;

	[Token(Token = "0x4000E24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent OnReturnToTop;

	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent OnGoingToCave;

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEvent OnAtmosphereChanged;

	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public InGameUIToggledEvent OnInGameUIToggled;

	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public MyToolGrabbedEvent OnToolShedToolGrabbed;

	[Token(Token = "0x4000E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public MyToolGrabbedEvent OnToolHandGrabbed;

	[Token(Token = "0x4000E2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public MyToolGrabbedEvent OnToolHandReleased;

	[Token(Token = "0x4000E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public MyToolSocketUpdatedEvent OnUpdatedToolSlot;

	[Token(Token = "0x4000E2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public LootEvent OnPlacedLootToBackpack;

	[Token(Token = "0x4000E2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public PropEvent OnPlacedPropToBackpack;

	[Token(Token = "0x4000E2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public PropEvent OnPropDestroyed;

	[Token(Token = "0x4000E2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public UnityEvent OnNewQuestAvailable;

	[Token(Token = "0x4000E30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public UnityEvent OnQuestAccepted;

	[Token(Token = "0x4000E31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public UnityEvent OnQuestFinished;

	[Token(Token = "0x4000E32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public UnityEvent OnGeodeDestroyed;

	[Token(Token = "0x4000E33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public UnityEvent OnWallNodeDestroyed;

	[Token(Token = "0x4000E34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public UnityEvent OnPanningSpotActivated;

	[Token(Token = "0x4000E35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public UnityEvent OnDiggingSpotActivated;

	[Token(Token = "0x4000E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public UnityEvent OnLocalPlayerEnterElevator;

	[Token(Token = "0x4000E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public UnityEvent OnLocalPlayerExitElevator;

	[Token(Token = "0x4000E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public UnityEvent OnHotspotScanned;

	[Token(Token = "0x4000E39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public UnityEvent OnEnemyAggroed;

	[Token(Token = "0x4000E3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private HashSet<Enemy> _enemiesAggroed;

	[Token(Token = "0x4000E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public UnityEvent OnCheatsUnlockAllCostumes;

	[Token(Token = "0x4000E3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public UnityEvent OnNunChompyLeft;

	[Token(Token = "0x6000FA0")]
	[Address(RVA = "0x13D163C", Offset = "0x13D163C", VA = "0x13D163C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FA1")]
	[Address(RVA = "0x13D1694", Offset = "0x13D1694", VA = "0x13D1694")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FA2")]
	[Address(RVA = "0x13D1734", Offset = "0x13D1734", VA = "0x13D1734")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000FA3")]
	[Address(RVA = "0x13D1810", Offset = "0x13D1810", VA = "0x13D1810")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000FA4")]
	[Address(RVA = "0x13D18EC", Offset = "0x13D18EC", VA = "0x13D18EC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000FA5")]
	[Address(RVA = "0x13D19A0", Offset = "0x13D19A0", VA = "0x13D19A0", Slot = "4")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000FA6")]
	[Address(RVA = "0x13D1A34", Offset = "0x13D1A34", VA = "0x13D1A34")]
	public void LocalPlayerInitialized()
	{
	}

	[Token(Token = "0x6000FA7")]
	[Address(RVA = "0x13D1A48", Offset = "0x13D1A48", VA = "0x13D1A48")]
	public void LocalPlayerSettedUp()
	{
	}

	[Token(Token = "0x6000FA8")]
	[Address(RVA = "0x13D1A5C", Offset = "0x13D1A5C", VA = "0x13D1A5C")]
	public void RemotePlayerSettedUp()
	{
	}

	[Token(Token = "0x6000FA9")]
	[Address(RVA = "0x13D1A70", Offset = "0x13D1A70", VA = "0x13D1A70")]
	public void NewLevelGeneratingStarted()
	{
	}

	[Token(Token = "0x6000FAA")]
	[Address(RVA = "0x13D19F8", Offset = "0x13D19F8", VA = "0x13D19F8")]
	public void NewLevelGeneratingStartedEvent()
	{
	}

	[Token(Token = "0x6000FAB")]
	[Address(RVA = "0x13D1B80", Offset = "0x13D1B80", VA = "0x13D1B80")]
	public void InGameUIPanelToggled(bool menuActive)
	{
	}

	[Token(Token = "0x6000FAC")]
	[Address(RVA = "0x13D1BE0", Offset = "0x13D1BE0", VA = "0x13D1BE0")]
	public void NewLevelGeneratingFinished()
	{
	}

	[Token(Token = "0x6000FAD")]
	[Address(RVA = "0x13D1A0C", Offset = "0x13D1A0C", VA = "0x13D1A0C")]
	public void NewLevelGeneratingFinishedEvent()
	{
	}

	[Token(Token = "0x6000FAE")]
	[Address(RVA = "0x13D1CF0", Offset = "0x13D1CF0", VA = "0x13D1CF0")]
	public void LevelLootGeneratingFinished()
	{
	}

	[Token(Token = "0x6000FAF")]
	[Address(RVA = "0x13D1A20", Offset = "0x13D1A20", VA = "0x13D1A20")]
	public void LevelLootGeneratingFinishedEvent()
	{
	}

	[Token(Token = "0x6000FB0")]
	[Address(RVA = "0x13C9C00", Offset = "0x13C9C00", VA = "0x13C9C00")]
	public void PlayerAmountChanged(int newPlayerAmount)
	{
	}

	[Token(Token = "0x6000FB1")]
	[Address(RVA = "0x13D1E00", Offset = "0x13D1E00", VA = "0x13D1E00")]
	public void EnemyDied(Enemy enemy, DamageType killedByType)
	{
	}

	[Token(Token = "0x6000FB2")]
	[Address(RVA = "0x13D0730", Offset = "0x13D0730", VA = "0x13D0730")]
	public void ReturningToTop()
	{
	}

	[Token(Token = "0x6000FB3")]
	[Address(RVA = "0x13D1E74", Offset = "0x13D1E74", VA = "0x13D1E74")]
	public void GoingToCave()
	{
	}

	[Token(Token = "0x6000FB4")]
	[Address(RVA = "0x13C6C90", Offset = "0x13C6C90", VA = "0x13C6C90")]
	public void AtmosphereChanged()
	{
	}

	[Token(Token = "0x6000FB5")]
	[Address(RVA = "0x13D1E88", Offset = "0x13D1E88", VA = "0x13D1E88")]
	public void ToolShedToolGrabbed(Tool.ToolType toolType)
	{
	}

	[Token(Token = "0x6000FB6")]
	[Address(RVA = "0x13D1EE8", Offset = "0x13D1EE8", VA = "0x13D1EE8")]
	public void ToolHandGrabbed(Tool.ToolType toolType)
	{
	}

	[Token(Token = "0x6000FB7")]
	[Address(RVA = "0x13D1F48", Offset = "0x13D1F48", VA = "0x13D1F48")]
	public void ToolHandReleased(Tool.ToolType toolType)
	{
	}

	[Token(Token = "0x6000FB8")]
	[Address(RVA = "0x13D1FA8", Offset = "0x13D1FA8", VA = "0x13D1FA8")]
	public void UpdateToolSocketPosition(Tool.ToolType toolType, int position)
	{
	}

	[Token(Token = "0x6000FB9")]
	[Address(RVA = "0x13D201C", Offset = "0x13D201C", VA = "0x13D201C")]
	private void NewSceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x6000FBA")]
	[Address(RVA = "0x13D206C", Offset = "0x13D206C", VA = "0x13D206C")]
	private void FightEndedInEnemyDeath(Enemy enemy, DamageType killedByType)
	{
	}

	[Token(Token = "0x6000FBB")]
	[Address(RVA = "0x13D21B8", Offset = "0x13D21B8", VA = "0x13D21B8")]
	public void AddEnemyAggroed(Enemy enemy)
	{
	}

	[Token(Token = "0x6000FBC")]
	[Address(RVA = "0x13D225C", Offset = "0x13D225C", VA = "0x13D225C")]
	public void RemoveEnemyAggroed(Enemy enemy)
	{
	}

	[Token(Token = "0x6000FBD")]
	[Address(RVA = "0x13D22FC", Offset = "0x13D22FC", VA = "0x13D22FC")]
	public bool IsInCombat()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FBE")]
	[Address(RVA = "0x13D234C", Offset = "0x13D234C", VA = "0x13D234C")]
	public void PlacedLootToBackpack(Loot loot)
	{
	}

	[Token(Token = "0x6000FBF")]
	[Address(RVA = "0x13D23AC", Offset = "0x13D23AC", VA = "0x13D23AC")]
	public void PlacedPropToBackpack(Prop prop)
	{
	}

	[Token(Token = "0x6000FC0")]
	[Address(RVA = "0x13D240C", Offset = "0x13D240C", VA = "0x13D240C")]
	public void PropDestroyed(Prop prop)
	{
	}

	[Token(Token = "0x6000FC1")]
	[Address(RVA = "0x13D246C", Offset = "0x13D246C", VA = "0x13D246C")]
	public void NewQuestAvailable()
	{
	}

	[Token(Token = "0x6000FC2")]
	[Address(RVA = "0x13D2480", Offset = "0x13D2480", VA = "0x13D2480")]
	public void QuestAccepted()
	{
	}

	[Token(Token = "0x6000FC3")]
	[Address(RVA = "0x13D2494", Offset = "0x13D2494", VA = "0x13D2494")]
	public void QuestFinished()
	{
	}

	[Token(Token = "0x6000FC4")]
	[Address(RVA = "0x13D2580", Offset = "0x13D2580", VA = "0x13D2580")]
	public void GeodeDestroyed()
	{
	}

	[Token(Token = "0x6000FC5")]
	[Address(RVA = "0x13D2594", Offset = "0x13D2594", VA = "0x13D2594")]
	public void WallNodeDestroyed()
	{
	}

	[Token(Token = "0x6000FC6")]
	[Address(RVA = "0x13D25A8", Offset = "0x13D25A8", VA = "0x13D25A8")]
	public void PanningSpotActivated()
	{
	}

	[Token(Token = "0x6000FC7")]
	[Address(RVA = "0x13D25BC", Offset = "0x13D25BC", VA = "0x13D25BC")]
	public void DiggingSpotActivated()
	{
	}

	[Token(Token = "0x6000FC8")]
	[Address(RVA = "0x13D25D0", Offset = "0x13D25D0", VA = "0x13D25D0")]
	public void LocalPlayerEnterElevator()
	{
	}

	[Token(Token = "0x6000FC9")]
	[Address(RVA = "0x13D25E4", Offset = "0x13D25E4", VA = "0x13D25E4")]
	public void LocalPlayerExitElevator()
	{
	}

	[Token(Token = "0x6000FCA")]
	[Address(RVA = "0x13D25F8", Offset = "0x13D25F8", VA = "0x13D25F8")]
	public void HotspotScanned()
	{
	}

	[Token(Token = "0x6000FCB")]
	[Address(RVA = "0x13D260C", Offset = "0x13D260C", VA = "0x13D260C")]
	public HashSet<Enemy> GetAggroedEnemies()
	{
		return null;
	}

	[Token(Token = "0x6000FCC")]
	[Address(RVA = "0x13D2614", Offset = "0x13D2614", VA = "0x13D2614")]
	public void CheatUnlockAllCostumes()
	{
	}

	[Token(Token = "0x6000FCD")]
	[Address(RVA = "0x13D2628", Offset = "0x13D2628", VA = "0x13D2628")]
	public void NunChompyLeft()
	{
	}

	[Token(Token = "0x6000FCE")]
	[Address(RVA = "0x13D263C", Offset = "0x13D263C", VA = "0x13D263C")]
	public GeneralEventsManager()
	{
	}
}
[Token(Token = "0x2000223")]
public class LightsManager : MonoBehaviour
{
	[Token(Token = "0x4000E3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LightsManager Instance;

	[Token(Token = "0x4000E3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Light> lights;

	[Token(Token = "0x6000FCF")]
	[Address(RVA = "0x13D2C94", Offset = "0x13D2C94", VA = "0x13D2C94")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FD0")]
	[Address(RVA = "0x13D2CEC", Offset = "0x13D2CEC", VA = "0x13D2CEC")]
	public void AddLight(Light light)
	{
	}

	[Token(Token = "0x6000FD1")]
	[Address(RVA = "0x13D2D9C", Offset = "0x13D2D9C", VA = "0x13D2D9C")]
	public void RemoveLight(Light light)
	{
	}

	[Token(Token = "0x6000FD2")]
	[Address(RVA = "0x13D2DF4", Offset = "0x13D2DF4", VA = "0x13D2DF4")]
	public bool CheckIfNearLight(float positionX, float positionZ)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FD3")]
	[Address(RVA = "0x13D2FF0", Offset = "0x13D2FF0", VA = "0x13D2FF0")]
	public LightsManager()
	{
	}
}
[Token(Token = "0x2000224")]
public class MoneyManager : Singleton<MoneyManager>
{
	[Serializable]
	[Token(Token = "0x2000225")]
	public class MoneyAmountChanged : UnityEvent<int>
	{
		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x112A800", Offset = "0x112A800", VA = "0x112A800")]
		public MoneyAmountChanged()
		{
		}
	}

	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MoneyAmountChanged OnMoneyAmountChanged;

	[Token(Token = "0x4000E40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentMoneyAmount;

	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0x13D307C", Offset = "0x13D307C", VA = "0x13D307C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0x13D31A4", Offset = "0x13D31A4", VA = "0x13D31A4")]
	public void SetCurrentMoneyAmount(int newMoneyAmount)
	{
	}

	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0x13D3208", Offset = "0x13D3208", VA = "0x13D3208")]
	public void AddOrReduceMoney(int moneyAmount)
	{
	}

	[Token(Token = "0x6000FD7")]
	[Address(RVA = "0x13D3350", Offset = "0x13D3350", VA = "0x13D3350")]
	public int GetCurrentMoneyAmount()
	{
		return default(int);
	}

	[Token(Token = "0x6000FD8")]
	[Address(RVA = "0x13D3358", Offset = "0x13D3358", VA = "0x13D3358")]
	public MoneyManager()
	{
	}
}
[Token(Token = "0x2000226")]
public class MusicManager : MonoBehaviour
{
	[Token(Token = "0x2000227")]
	public enum MusicPhase
	{
		[Token(Token = "0x4000E55")]
		Nothing,
		[Token(Token = "0x4000E56")]
		Idle,
		[Token(Token = "0x4000E57")]
		Action,
		[Token(Token = "0x4000E58")]
		Combat,
		[Token(Token = "0x4000E59")]
		TopWorld
	}

	[Serializable]
	[Token(Token = "0x2000228")]
	private class MusicTrigger
	{
		[Token(Token = "0x2000229")]
		[CompilerGenerated]
		private sealed class <_DurationAdded>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4000E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MusicTrigger <>4__this;

			[Token(Token = "0x170001C7")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6000FF4")]
				[Address(RVA = "0x112C0AC", Offset = "0x112C0AC", VA = "0x112C0AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001C8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FF6")]
				[Address(RVA = "0x112C0F4", Offset = "0x112C0F4", VA = "0x112C0F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FF1")]
			[Address(RVA = "0x112BFD4", Offset = "0x112BFD4", VA = "0x112BFD4")]
			[DebuggerHidden]
			public <_DurationAdded>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0x112BFFC", Offset = "0x112BFFC", VA = "0x112BFFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0x112C000", Offset = "0x112C000", VA = "0x112C000", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FF5")]
			[Address(RVA = "0x112C0B4", Offset = "0x112C0B4", VA = "0x112C0B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MusicPhase musicPhase;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float duration;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool coroutineRunning;

		[Token(Token = "0x170001C6")]
		public float Duration
		{
			[Token(Token = "0x6000FED")]
			[Address(RVA = "0x112BF58", Offset = "0x112BF58", VA = "0x112BF58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0x112AED0", Offset = "0x112AED0", VA = "0x112AED0")]
			set
			{
			}
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x112BF60", Offset = "0x112BF60", VA = "0x112BF60")]
		[IteratorStateMachine(typeof(<_DurationAdded>d__6))]
		private IEnumerator<float> _DurationAdded()
		{
			return null;
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x112AEC8", Offset = "0x112AEC8", VA = "0x112AEC8")]
		public MusicTrigger()
		{
		}
	}

	[Token(Token = "0x200022A")]
	[CompilerGenerated]
	private sealed class <_CrossFade>d__35 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MusicPhase from;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MusicManager <>4__this;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MusicPhase to;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float duration;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource <changeToAS>5__2;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource <changeFromAS>5__3;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <time>5__4;

		[Token(Token = "0x170001C9")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000FFA")]
			[Address(RVA = "0x112C4A0", Offset = "0x112C4A0", VA = "0x112C4A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FFC")]
			[Address(RVA = "0x112C4E8", Offset = "0x112C4E8", VA = "0x112C4E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x112BE44", Offset = "0x112BE44", VA = "0x112BE44")]
		[DebuggerHidden]
		public <_CrossFade>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x112C150", Offset = "0x112C150", VA = "0x112C150", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x112C154", Offset = "0x112C154", VA = "0x112C154", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x112C4A8", Offset = "0x112C4A8", VA = "0x112C4A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MusicManager Instance;

	[Token(Token = "0x4000E42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioMixerGroup musicMixerMasterGroup;

	[Token(Token = "0x4000E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioMixerGroup musicMixerMasterGroupPS4;

	[Token(Token = "0x4000E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClipScriptableObject[] audioSOs;

	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int idleChance;

	[Token(Token = "0x4000E46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private int actionChance;

	[Token(Token = "0x4000E47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int combatChance;

	[Token(Token = "0x4000E48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private int topWorldChance;

	[Token(Token = "0x4000E49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MusicPhase currentMusicPhase;

	[Token(Token = "0x4000E4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource idleAudioSource;

	[Token(Token = "0x4000E4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AudioSource actionAudioSource;

	[Token(Token = "0x4000E4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource combatAudioSource;

	[Token(Token = "0x4000E4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AudioSource topWorldAudioSource;

	[Token(Token = "0x4000E4E")]
	private const string startAudioAgainCoroutineName = "StartAudioAgainCoroutine";

	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<MusicTrigger> musicTriggers;

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float nothingHasPlayedAmount;

	[Token(Token = "0x4000E51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool timedPause;

	[Token(Token = "0x4000E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float musicUnpauseTime;

	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool paused;

	[Token(Token = "0x170001C4")]
	public AudioMixerGroup GetMusicMasterGroup
	{
		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x112A848", Offset = "0x112A848", VA = "0x112A848")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C5")]
	public bool IsPaused
	{
		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x112A850", Offset = "0x112A850", VA = "0x112A850")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000FDC")]
	[Address(RVA = "0x112A858", Offset = "0x112A858", VA = "0x112A858")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FDD")]
	[Address(RVA = "0x112B1B0", Offset = "0x112B1B0", VA = "0x112B1B0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000FDE")]
	[Address(RVA = "0x112ABE8", Offset = "0x112ABE8", VA = "0x112ABE8")]
	private void SetupAudioSources()
	{
	}

	[Token(Token = "0x6000FDF")]
	[Address(RVA = "0x112B304", Offset = "0x112B304", VA = "0x112B304")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FE0")]
	[Address(RVA = "0x112B738", Offset = "0x112B738", VA = "0x112B738")]
	private void NightChanged(bool isNight)
	{
	}

	[Token(Token = "0x6000FE1")]
	[Address(RVA = "0x112B900", Offset = "0x112B900", VA = "0x112B900")]
	private void LevelChanged(int level)
	{
	}

	[Token(Token = "0x6000FE2")]
	[Address(RVA = "0x112B910", Offset = "0x112B910", VA = "0x112B910")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FE3")]
	[Address(RVA = "0x112B4F4", Offset = "0x112B4F4", VA = "0x112B4F4")]
	public void AddNewMusicPhaseToBePlayed(MusicPhase newMusicPhase, float time, bool force = false)
	{
	}

	[Token(Token = "0x6000FE4")]
	[Address(RVA = "0x112B7A0", Offset = "0x112B7A0", VA = "0x112B7A0")]
	public void ResetDuration(MusicPhase newMusicPhase)
	{
	}

	[Token(Token = "0x6000FE5")]
	[Address(RVA = "0x112BCFC", Offset = "0x112BCFC", VA = "0x112BCFC")]
	private void VolumeFade(MusicPhase changeTo)
	{
	}

	[Token(Token = "0x6000FE6")]
	[Address(RVA = "0x112BDA8", Offset = "0x112BDA8", VA = "0x112BDA8")]
	[IteratorStateMachine(typeof(<_CrossFade>d__35))]
	private IEnumerator<float> _CrossFade(MusicPhase from, MusicPhase to, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000FE7")]
	[Address(RVA = "0x112B264", Offset = "0x112B264", VA = "0x112B264")]
	private void ResetAllVolumes()
	{
	}

	[Token(Token = "0x6000FE8")]
	[Address(RVA = "0x112B034", Offset = "0x112B034", VA = "0x112B034")]
	public void ToggleBGMusic(bool musicOn)
	{
	}

	[Token(Token = "0x6000FE9")]
	[Address(RVA = "0x112BC6C", Offset = "0x112BC6C", VA = "0x112BC6C")]
	public void PauseBGMusic(bool pause)
	{
	}

	[Token(Token = "0x6000FEA")]
	[Address(RVA = "0x112BE6C", Offset = "0x112BE6C", VA = "0x112BE6C")]
	public void PauseMusicForTime(float time)
	{
	}

	[Token(Token = "0x6000FEB")]
	[Address(RVA = "0x112BEB4", Offset = "0x112BEB4", VA = "0x112BEB4")]
	public void ResetMusicPauseTime()
	{
	}

	[Token(Token = "0x6000FEC")]
	[Address(RVA = "0x112BED0", Offset = "0x112BED0", VA = "0x112BED0")]
	public MusicManager()
	{
	}
}
[Token(Token = "0x200022B")]
public class QuestManager : Singleton<QuestManager>
{
	[Serializable]
	[Token(Token = "0x200022C")]
	public class NicerPropCategoryString
	{
		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Prop.PropType propType;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x112C7C8", Offset = "0x112C7C8", VA = "0x112C7C8")]
		public NicerPropCategoryString()
		{
		}
	}

	[Token(Token = "0x200022D")]
	[CompilerGenerated]
	private sealed class <DelayedWantedBoardLoad>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170001CC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001018")]
			[Address(RVA = "0x112EDF8", Offset = "0x112EDF8", VA = "0x112EDF8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600101A")]
			[Address(RVA = "0x112EE40", Offset = "0x112EE40", VA = "0x112EE40", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x112CB14", Offset = "0x112CB14", VA = "0x112CB14")]
		[DebuggerHidden]
		public <DelayedWantedBoardLoad>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x112ED08", Offset = "0x112ED08", VA = "0x112ED08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x112ED0C", Offset = "0x112ED0C", VA = "0x112ED0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x112EE00", Offset = "0x112EE00", VA = "0x112EE00", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200022E")]
	[CompilerGenerated]
	private sealed class <WaitUntilMidnightAndRefreshQuest>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public QuestManager <>4__this;

		[Token(Token = "0x170001CE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600101E")]
			[Address(RVA = "0x112F01C", Offset = "0x112F01C", VA = "0x112F01C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001020")]
			[Address(RVA = "0x112F064", Offset = "0x112F064", VA = "0x112F064", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x112DE58", Offset = "0x112DE58", VA = "0x112DE58")]
		[DebuggerHidden]
		public <WaitUntilMidnightAndRefreshQuest>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x112EE48", Offset = "0x112EE48", VA = "0x112EE48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x112EE4C", Offset = "0x112EE4C", VA = "0x112EE4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x112F024", Offset = "0x112F024", VA = "0x112F024", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E69")]
	public const int MaxQuests = 3;

	[Token(Token = "0x4000E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isHalloween;

	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private QuestBase[] gatherQuests;

	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private QuestBase[] huntQuests;

	[Token(Token = "0x4000E6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private QuestBase[] miscQuests;

	[Token(Token = "0x4000E6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private QuestBase[] halloweenQuests;

	[Token(Token = "0x4000E6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Sprite gatherTexture;

	[Token(Token = "0x4000E70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Sprite huntTexture;

	[Token(Token = "0x4000E71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Sprite miscTexture;

	[Token(Token = "0x4000E72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Sprite halloweenTexture;

	[Token(Token = "0x4000E73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject businessChompyPrefab;

	[Token(Token = "0x4000E74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private NicerPropCategoryString[] nicerPropCategoryStrings;

	[Token(Token = "0x4000E75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Dictionary<Prop.PropType, string> nicerPropCategory;

	[Token(Token = "0x4000E76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public DateTime lastAddedQuestTime;

	[Token(Token = "0x4000E77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Audio")]
	public AudioClip questAcceptedClip;

	[Token(Token = "0x4000E78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioClip questFinishedClip;

	[Token(Token = "0x4000E79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private QuestBase[] _playerAcceptedQuests;

	[Token(Token = "0x4000E7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private QuestBase[] _currentWantedBoardQuests;

	[Token(Token = "0x4000E7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private QuestBase.QuestType _lastErrandType;

	[Token(Token = "0x4000E7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private bool _initialized;

	[Token(Token = "0x170001CB")]
	public bool IsInitiliazed
	{
		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x112C544", Offset = "0x112C544", VA = "0x112C544")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000FFE")]
	[Address(RVA = "0x112C54C", Offset = "0x112C54C", VA = "0x112C54C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000FFF")]
	[Address(RVA = "0x112C7D0", Offset = "0x112C7D0", VA = "0x112C7D0")]
	protected void Start()
	{
	}

	[Token(Token = "0x6001000")]
	[Address(RVA = "0x112C998", Offset = "0x112C998", VA = "0x112C998")]
	public void SceneChanged()
	{
	}

	[Token(Token = "0x6001001")]
	[Address(RVA = "0x112CAB4", Offset = "0x112CAB4", VA = "0x112CAB4")]
	[IteratorStateMachine(typeof(<DelayedWantedBoardLoad>d__26))]
	private IEnumerator DelayedWantedBoardLoad()
	{
		return null;
	}

	[Token(Token = "0x6001002")]
	[Address(RVA = "0x112CB3C", Offset = "0x112CB3C", VA = "0x112CB3C")]
	private void Initiliaze()
	{
	}

	[Token(Token = "0x6001003")]
	[Address(RVA = "0x112DDE4", Offset = "0x112DDE4", VA = "0x112DDE4")]
	[IteratorStateMachine(typeof(<WaitUntilMidnightAndRefreshQuest>d__28))]
	private IEnumerator WaitUntilMidnightAndRefreshQuest()
	{
		return null;
	}

	[Token(Token = "0x6001004")]
	[Address(RVA = "0x112D648", Offset = "0x112D648", VA = "0x112D648")]
	public void CreateNewQuests(int questsToCreate)
	{
	}

	[Token(Token = "0x6001005")]
	[Address(RVA = "0x112DE80", Offset = "0x112DE80", VA = "0x112DE80")]
	private void AddNormalQuests(List<QuestBase> questPool)
	{
	}

	[Token(Token = "0x6001006")]
	[Address(RVA = "0x112E354", Offset = "0x112E354", VA = "0x112E354")]
	public Sprite GetSpriteByType(QuestBase.QuestType type)
	{
		return null;
	}

	[Token(Token = "0x6001007")]
	[Address(RVA = "0x112E3A4", Offset = "0x112E3A4", VA = "0x112E3A4")]
	public void CollectReward(QuestBase quest)
	{
	}

	[Token(Token = "0x6001008")]
	[Address(RVA = "0x112E4B8", Offset = "0x112E4B8", VA = "0x112E4B8")]
	public void SpawnBusinessChompy(int value)
	{
	}

	[Token(Token = "0x6001009")]
	[Address(RVA = "0x112E6DC", Offset = "0x112E6DC", VA = "0x112E6DC")]
	public int AddAcceptedGetSaveslot(QuestBase quest)
	{
		return default(int);
	}

	[Token(Token = "0x600100A")]
	[Address(RVA = "0x112E834", Offset = "0x112E834", VA = "0x112E834")]
	public void AddAcceptedForceSlot(QuestBase quest, int forcedSlot)
	{
	}

	[Token(Token = "0x600100B")]
	[Address(RVA = "0x112E89C", Offset = "0x112E89C", VA = "0x112E89C")]
	public void RemoveAccepted(QuestBase quest)
	{
	}

	[Token(Token = "0x600100C")]
	[Address(RVA = "0x112E940", Offset = "0x112E940", VA = "0x112E940")]
	public void RemoveAccepted(int index)
	{
	}

	[Token(Token = "0x600100D")]
	[Address(RVA = "0x112E974", Offset = "0x112E974", VA = "0x112E974")]
	public void AddWantedBoardQuest(QuestBase quest)
	{
	}

	[Token(Token = "0x600100E")]
	[Address(RVA = "0x112E124", Offset = "0x112E124", VA = "0x112E124")]
	public void RemoveWantedBoardQuest(QuestBase quest)
	{
	}

	[Token(Token = "0x600100F")]
	[Address(RVA = "0x112EA84", Offset = "0x112EA84", VA = "0x112EA84")]
	public bool HasEmptyQuestSlots()
	{
		return default(bool);
	}

	[Token(Token = "0x6001010")]
	[Address(RVA = "0x112DF48", Offset = "0x112DF48", VA = "0x112DF48")]
	public int GetEmptySpots(QuestBase[] array)
	{
		return default(int);
	}

	[Token(Token = "0x6001011")]
	[Address(RVA = "0x112DFF8", Offset = "0x112DFF8", VA = "0x112DFF8")]
	public QuestBase GetOldestWantedBoardQuest()
	{
		return null;
	}

	[Token(Token = "0x6001012")]
	[Address(RVA = "0x112EB30", Offset = "0x112EB30", VA = "0x112EB30")]
	public void DebugCompleteAllQuests()
	{
	}

	[Token(Token = "0x6001013")]
	[Address(RVA = "0x112EBF4", Offset = "0x112EBF4", VA = "0x112EBF4")]
	public QuestManager()
	{
	}
}
[Token(Token = "0x200022F")]
public class RendererToggleManager : MonoBehaviour
{
	[Token(Token = "0x4000E84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static RendererToggleManager Instance;

	[Token(Token = "0x4000E85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] surfaceRenderers;

	[Token(Token = "0x4000E86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] caveRenderers;

	[Token(Token = "0x4000E87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject[] cabinRenderers;

	[Token(Token = "0x4000E88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Renderer> _cachedSurfaceRenderers;

	[Token(Token = "0x4000E89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Renderer> _cachedCaveRenderers;

	[Token(Token = "0x4000E8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Renderer> _cachedCabinRenderers;

	[Token(Token = "0x6001021")]
	[Address(RVA = "0x112F06C", Offset = "0x112F06C", VA = "0x112F06C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001022")]
	[Address(RVA = "0x112F0C4", Offset = "0x112F0C4", VA = "0x112F0C4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001023")]
	[Address(RVA = "0x112F22C", Offset = "0x112F22C", VA = "0x112F22C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001024")]
	[Address(RVA = "0x112F38C", Offset = "0x112F38C", VA = "0x112F38C")]
	private void RemoveDisabledRenderersFromList(List<Renderer> list)
	{
	}

	[Token(Token = "0x6001025")]
	[Address(RVA = "0x112F280", Offset = "0x112F280", VA = "0x112F280")]
	private void CacheRenderers(List<Renderer> cacheList, GameObject[] objectGroup)
	{
	}

	[Token(Token = "0x6001026")]
	[Address(RVA = "0x112F440", Offset = "0x112F440", VA = "0x112F440")]
	public void ToggleCabinRenderers(bool status)
	{
	}

	[Token(Token = "0x6001027")]
	[Address(RVA = "0x112F4E0", Offset = "0x112F4E0", VA = "0x112F4E0")]
	public void ToggleSurfaceRenderers(bool enabled)
	{
	}

	[Token(Token = "0x6001028")]
	[Address(RVA = "0x112F5DC", Offset = "0x112F5DC", VA = "0x112F5DC")]
	public void ToggleCaveRenderers(bool enabled)
	{
	}

	[Token(Token = "0x6001029")]
	[Address(RVA = "0x112F6D8", Offset = "0x112F6D8", VA = "0x112F6D8")]
	public RendererToggleManager()
	{
	}
}
[Token(Token = "0x2000230")]
public class SaveDataManager : Singleton<SaveDataManager>
{
	[Token(Token = "0x2000231")]
	[CompilerGenerated]
	private sealed class <Start>d__54 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SaveDataManager <>4__this;

		[Token(Token = "0x170001D2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001087")]
			[Address(RVA = "0x113B5D8", Offset = "0x113B5D8", VA = "0x113B5D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001089")]
			[Address(RVA = "0x113B620", Offset = "0x113B620", VA = "0x113B620", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x113019C", Offset = "0x113019C", VA = "0x113019C")]
		[DebuggerHidden]
		public <Start>d__54(int <>1__state)
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x113B4C0", Offset = "0x113B4C0", VA = "0x113B4C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x113B4C4", Offset = "0x113B4C4", VA = "0x113B4C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x113B5E0", Offset = "0x113B5E0", VA = "0x113B5E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000232")]
	[CompilerGenerated]
	private sealed class <LoadDatabase>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SaveDataManager <>4__this;

		[Token(Token = "0x170001D4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600108D")]
			[Address(RVA = "0x113B87C", Offset = "0x113B87C", VA = "0x113B87C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600108F")]
			[Address(RVA = "0x113B8C4", Offset = "0x113B8C4", VA = "0x113B8C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x1130408", Offset = "0x1130408", VA = "0x1130408")]
		[DebuggerHidden]
		public <LoadDatabase>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x113B628", Offset = "0x113B628", VA = "0x113B628", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x113B62C", Offset = "0x113B62C", VA = "0x113B62C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x113B884", Offset = "0x113B884", VA = "0x113B884", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000233")]
	[CompilerGenerated]
	private sealed class <_WaitForCosmeticControllerAndSetCostume>d__72 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CosmeticController.CosmeticType parsedEnum;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string loadedCosmeticName;

		[Token(Token = "0x170001D6")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001093")]
			[Address(RVA = "0x113B9C0", Offset = "0x113B9C0", VA = "0x113B9C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001095")]
			[Address(RVA = "0x113BA08", Offset = "0x113BA08", VA = "0x113BA08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x1134FA0", Offset = "0x1134FA0", VA = "0x1134FA0")]
		[DebuggerHidden]
		public <_WaitForCosmeticControllerAndSetCostume>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x113B8CC", Offset = "0x113B8CC", VA = "0x113B8CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x113B8D0", Offset = "0x113B8D0", VA = "0x113B8D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x113B9C8", Offset = "0x113B9C8", VA = "0x113B9C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000234")]
	[CompilerGenerated]
	private sealed class <DelayedLoadTools>d__90 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SaveDataManager <>4__this;

		[Token(Token = "0x170001D8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001099")]
			[Address(RVA = "0x113BBB0", Offset = "0x113BBB0", VA = "0x113BBB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600109B")]
			[Address(RVA = "0x113BBF8", Offset = "0x113BBF8", VA = "0x113BBF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x11364BC", Offset = "0x11364BC", VA = "0x11364BC")]
		[DebuggerHidden]
		public <DelayedLoadTools>d__90(int <>1__state)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x113BA64", Offset = "0x113BA64", VA = "0x113BA64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x113BA68", Offset = "0x113BA68", VA = "0x113BA68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x113BBB8", Offset = "0x113BBB8", VA = "0x113BBB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E8B")]
	public const int SAVE_DATA_VERSION = 1;

	[Token(Token = "0x4000E8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool initialized;

	[Token(Token = "0x4000E8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DataboxObject runtimeDataNormal;

	[Token(Token = "0x4000E8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DataboxObject runtimeDataPS4;

	[Token(Token = "0x4000E8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DataboxObject runtimeDataClone;

	[Token(Token = "0x4000E90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useCloneData;

	[Token(Token = "0x4000E91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly string saveName;

	[Token(Token = "0x4000E92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly string tableId;

	[Token(Token = "0x4000E93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly string toolTierId;

	[Token(Token = "0x4000E94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private readonly string otherTierId;

	[Token(Token = "0x4000E95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly string moneyId;

	[Token(Token = "0x4000E96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly string cosmeticId;

	[Token(Token = "0x4000E97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly string saveInfoEntryId;

	[Token(Token = "0x4000E98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly string gameVersionId;

	[Token(Token = "0x4000E99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly string saveVersionId;

	[Token(Token = "0x4000E9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly string toolSocketPositionId;

	[Token(Token = "0x4000E9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private readonly string backpackLootsId;

	[Token(Token = "0x4000E9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private readonly string tutorialStateId;

	[Token(Token = "0x4000E9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private readonly string codexLootEntriesId;

	[Token(Token = "0x4000E9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private readonly string codexMonsterEntriesId;

	[Token(Token = "0x4000E9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private readonly string playedVoiceLinesId;

	[Token(Token = "0x4000EA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private readonly string biomeRunsStartedId;

	[Token(Token = "0x4000EA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private readonly string ownedSectorsId;

	[Token(Token = "0x4000EA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private readonly string settingsId;

	[Token(Token = "0x4000EA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private readonly string comicsId;

	[Token(Token = "0x4000EA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private readonly string questAcceptedId;

	[Token(Token = "0x4000EA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private readonly string questWantedBoardId;

	[Token(Token = "0x4000EA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private readonly string questSaveSlotId;

	[Token(Token = "0x4000EA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private readonly string questSaveTimeId;

	[Token(Token = "0x4000EA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private readonly string endingClueId;

	[Token(Token = "0x4000EA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private readonly string topworldsVisitedId;

	[Token(Token = "0x4000EAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private readonly string gameplayStatsId;

	[Token(Token = "0x4000EAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private readonly string achievementsTriggeredId;

	[Token(Token = "0x4000EAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private readonly string ownedCosmetics;

	[Token(Token = "0x4000EAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private readonly string unlockedCosmetics;

	[Token(Token = "0x4000EAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private readonly string endingFourArtifactFoundId;

	[Token(Token = "0x4000EAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private readonly string playerRecords;

	[Token(Token = "0x4000EB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private readonly string runLootvalueRecord;

	[Token(Token = "0x4000EB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private readonly string meteorState;

	[Token(Token = "0x4000EB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private readonly string foundChompysId;

	[Token(Token = "0x4000EB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float nextSaveTime;

	[Token(Token = "0x4000EB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private readonly float savePeriod;

	[Token(Token = "0x4000EB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public UnityEvent OnDataLoaded;

	[Token(Token = "0x4000EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public List<string> OwnedSectors;

	[Token(Token = "0x4000EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public GameSettings gameSettings;

	[Token(Token = "0x4000EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public int foundComics;

	[Token(Token = "0x4000EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	internal Action<LootSpawnAndDespawnManager.LootType, int> codexLootDataUpdated;

	[Token(Token = "0x4000EBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	internal Action<LootSpawnAndDespawnManager.LootType> newLootCodexEntry;

	[Token(Token = "0x4000EBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	internal Action<EnemySpawnAndDespawnManager.EnemyType, int> codexEnemyDataUpdated;

	[Token(Token = "0x4000EBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	internal Action<EnemySpawnAndDespawnManager.EnemyType> newEnemyCodexEntry;

	[Token(Token = "0x4000EBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	internal Action<string> newChompyCodexEntry;

	[Token(Token = "0x4000EBF")]
	private const string endingFourArtifactFound = "EndingFourArtifactFound";

	[Token(Token = "0x4000EC0")]
	private const string endingFourCompleted = "EndingFourCompleted";

	[Token(Token = "0x4000EC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private MicAmplifier micAmplifier;

	[Token(Token = "0x4000EC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private float micAmplifierOriginalVolume;

	[Token(Token = "0x4000EC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private Recorder recorder;

	[Token(Token = "0x170001D0")]
	public DataboxObject runtimeData
	{
		[Token(Token = "0x600102A")]
		[Address(RVA = "0x112F7B8", Offset = "0x112F7B8", VA = "0x112F7B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001D1")]
	public bool dataReady
	{
		[Token(Token = "0x600102B")]
		[Address(RVA = "0x112F7D4", Offset = "0x112F7D4", VA = "0x112F7D4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600102C")]
		[Address(RVA = "0x112F7DC", Offset = "0x112F7DC", VA = "0x112F7DC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600102D")]
	[Address(RVA = "0x112F7E8", Offset = "0x112F7E8", VA = "0x112F7E8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0x112FC9C", Offset = "0x112FC9C", VA = "0x112FC9C", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600102F")]
	[Address(RVA = "0x112FE18", Offset = "0x112FE18", VA = "0x112FE18")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001030")]
	[Address(RVA = "0x1130128", Offset = "0x1130128", VA = "0x1130128")]
	[IteratorStateMachine(typeof(<Start>d__54))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6001031")]
	[Address(RVA = "0x11301C4", Offset = "0x11301C4", VA = "0x11301C4")]
	private void OnIsEntitledCallback(Message message)
	{
	}

	[Token(Token = "0x6001032")]
	[Address(RVA = "0x1130394", Offset = "0x1130394", VA = "0x1130394")]
	[IteratorStateMachine(typeof(<LoadDatabase>d__56))]
	private IEnumerator LoadDatabase()
	{
		return null;
	}

	[Token(Token = "0x6001033")]
	[Address(RVA = "0x1130430", Offset = "0x1130430", VA = "0x1130430")]
	private void AddDefaultValuesIfMissing()
	{
	}

	[Token(Token = "0x6001034")]
	[Address(RVA = "0x1131A80", Offset = "0x1131A80", VA = "0x1131A80")]
	private void Update()
	{
	}

	[Token(Token = "0x6001035")]
	[Address(RVA = "0x113003C", Offset = "0x113003C", VA = "0x113003C")]
	public void Save()
	{
	}

	[Token(Token = "0x6001036")]
	[Address(RVA = "0x1131C64", Offset = "0x1131C64", VA = "0x1131C64")]
	public void SetNextSaveTime(float waitTime)
	{
	}

	[Token(Token = "0x6001037")]
	[Address(RVA = "0x1131C90", Offset = "0x1131C90", VA = "0x1131C90")]
	private void GetOculusCloudStoragePathFromMessage(Message msg)
	{
	}

	[Token(Token = "0x6001038")]
	[Address(RVA = "0x1132148", Offset = "0x1132148", VA = "0x1132148")]
	private void Saved()
	{
	}

	[Token(Token = "0x6001039")]
	[Address(RVA = "0x113214C", Offset = "0x113214C", VA = "0x113214C")]
	private void DataReady()
	{
	}

	[Token(Token = "0x600103A")]
	[Address(RVA = "0x11347B0", Offset = "0x11347B0", VA = "0x11347B0")]
	public void ReloadSaveData()
	{
	}

	[Token(Token = "0x600103B")]
	[Address(RVA = "0x11341A8", Offset = "0x11341A8", VA = "0x11341A8")]
	private void LoadSettings()
	{
	}

	[Token(Token = "0x600103C")]
	[Address(RVA = "0x1134444", Offset = "0x1134444", VA = "0x1134444")]
	private void SetCallbacks()
	{
	}

	[Token(Token = "0x600103D")]
	[Address(RVA = "0x11321F4", Offset = "0x11321F4", VA = "0x11321F4")]
	private void CheckVersion()
	{
	}

	[Token(Token = "0x600103E")]
	[Address(RVA = "0x1132384", Offset = "0x1132384", VA = "0x1132384")]
	public void LoadToolTiers()
	{
	}

	[Token(Token = "0x600103F")]
	[Address(RVA = "0x1132B1C", Offset = "0x1132B1C", VA = "0x1132B1C")]
	public void LoadOtherTiers()
	{
	}

	[Token(Token = "0x6001040")]
	[Address(RVA = "0x11338EC", Offset = "0x11338EC", VA = "0x11338EC")]
	public void LoadMoney()
	{
	}

	[Token(Token = "0x6001041")]
	[Address(RVA = "0x1134B60", Offset = "0x1134B60", VA = "0x1134B60")]
	public void LoadCosmetics()
	{
	}

	[Token(Token = "0x6001042")]
	[Address(RVA = "0x1134F1C", Offset = "0x1134F1C", VA = "0x1134F1C")]
	[IteratorStateMachine(typeof(<_WaitForCosmeticControllerAndSetCostume>d__72))]
	private IEnumerator<float> _WaitForCosmeticControllerAndSetCostume(CosmeticController.CosmeticType parsedEnum, string loadedCosmeticName)
	{
		return null;
	}

	[Token(Token = "0x6001043")]
	[Address(RVA = "0x1134FC8", Offset = "0x1134FC8", VA = "0x1134FC8")]
	public bool CheckIfCosmeticOwned(string cosmetic)
	{
		return default(bool);
	}

	[Token(Token = "0x6001044")]
	[Address(RVA = "0x11350E4", Offset = "0x11350E4", VA = "0x11350E4")]
	public void BuyCosmetic(string cosmetic)
	{
	}

	[Token(Token = "0x6001045")]
	[Address(RVA = "0x113528C", Offset = "0x113528C", VA = "0x113528C")]
	public void UnlockCosmeticForPurchase(string cosmetic)
	{
	}

	[Token(Token = "0x6001046")]
	[Address(RVA = "0x1135434", Offset = "0x1135434", VA = "0x1135434")]
	public bool CheckIfCosmeticAvailableForPurchase(string cosmetic)
	{
		return default(bool);
	}

	[Token(Token = "0x6001047")]
	[Address(RVA = "0x1133A60", Offset = "0x1133A60", VA = "0x1133A60")]
	public void LoadSectors()
	{
	}

	[Token(Token = "0x6001048")]
	[Address(RVA = "0x1133DF8", Offset = "0x1133DF8", VA = "0x1133DF8")]
	public void LoadTutorialStates()
	{
	}

	[Token(Token = "0x6001049")]
	[Address(RVA = "0x1133544", Offset = "0x1133544", VA = "0x1133544")]
	private void LoadComic()
	{
	}

	[Token(Token = "0x600104A")]
	[Address(RVA = "0x11354F4", Offset = "0x11354F4", VA = "0x11354F4")]
	public void AddComic(int comicID)
	{
	}

	[Token(Token = "0x600104B")]
	[Address(RVA = "0x1133600", Offset = "0x1133600", VA = "0x1133600")]
	private void LoadEndingClues()
	{
	}

	[Token(Token = "0x600104C")]
	[Address(RVA = "0x11356A4", Offset = "0x11356A4", VA = "0x11356A4")]
	public void AddEndingClue(int endingID, int endingPartID)
	{
	}

	[Token(Token = "0x600104D")]
	[Address(RVA = "0x1135868", Offset = "0x1135868", VA = "0x1135868")]
	public void LoadToolSocketItems()
	{
	}

	[Token(Token = "0x600104E")]
	[Address(RVA = "0x1136448", Offset = "0x1136448", VA = "0x1136448")]
	[IteratorStateMachine(typeof(<DelayedLoadTools>d__90))]
	private IEnumerator DelayedLoadTools()
	{
		return null;
	}

	[Token(Token = "0x600104F")]
	[Address(RVA = "0x11364E4", Offset = "0x11364E4", VA = "0x11364E4")]
	public void LoadBackpackLoots()
	{
	}

	[Token(Token = "0x6001050")]
	[Address(RVA = "0x11367FC", Offset = "0x11367FC", VA = "0x11367FC")]
	public List<Loot> LoadCodexLootEntries()
	{
		return null;
	}

	[Token(Token = "0x6001051")]
	[Address(RVA = "0x1136B74", Offset = "0x1136B74", VA = "0x1136B74")]
	public List<Enemy> LoadCodexMonsterEntries()
	{
		return null;
	}

	[Token(Token = "0x6001052")]
	[Address(RVA = "0x1136F2C", Offset = "0x1136F2C", VA = "0x1136F2C")]
	public int GetCodexLootedAmount(LootSpawnAndDespawnManager.LootType lootType)
	{
		return default(int);
	}

	[Token(Token = "0x6001053")]
	[Address(RVA = "0x1137044", Offset = "0x1137044", VA = "0x1137044")]
	public int GetCodexEnemyKilledAmount(EnemySpawnAndDespawnManager.EnemyType enemyType)
	{
		return default(int);
	}

	[Token(Token = "0x6001054")]
	[Address(RVA = "0x113715C", Offset = "0x113715C", VA = "0x113715C")]
	public bool LoadEndingFourArtifactFound()
	{
		return default(bool);
	}

	[Token(Token = "0x6001055")]
	[Address(RVA = "0x1137248", Offset = "0x1137248", VA = "0x1137248")]
	public void UpdateEndingFourArtifactFound(bool artifactFound)
	{
	}

	[Token(Token = "0x6001056")]
	[Address(RVA = "0x1137370", Offset = "0x1137370", VA = "0x1137370")]
	public bool LoadEndingFourCompleted()
	{
		return default(bool);
	}

	[Token(Token = "0x6001057")]
	[Address(RVA = "0x113745C", Offset = "0x113745C", VA = "0x113745C")]
	public void UpdateEndingFourCompleted(bool completed)
	{
	}

	[Token(Token = "0x6001058")]
	[Address(RVA = "0x1137584", Offset = "0x1137584", VA = "0x1137584")]
	public void UpdateMoney(int newMoney)
	{
	}

	[Token(Token = "0x6001059")]
	[Address(RVA = "0x113140C", Offset = "0x113140C", VA = "0x113140C")]
	public void UpdateToolTier(Tool.ToolType tooltype)
	{
	}

	[Token(Token = "0x600105A")]
	[Address(RVA = "0x1137678", Offset = "0x1137678", VA = "0x1137678")]
	public void SetToolTier(Tool.ToolType tooltype, int tierLevel)
	{
	}

	[Token(Token = "0x600105B")]
	[Address(RVA = "0x113162C", Offset = "0x113162C", VA = "0x113162C")]
	public void UpdateOtherTier(OtherUpgradePathScriptableObject.UpgradeType otherType)
	{
	}

	[Token(Token = "0x600105C")]
	[Address(RVA = "0x1130C68", Offset = "0x1130C68", VA = "0x1130C68")]
	public void UpdateCosmetic(CosmeticController.CosmeticType cosmeticType, string cosmeticName)
	{
	}

	[Token(Token = "0x600105D")]
	[Address(RVA = "0x1131AB0", Offset = "0x1131AB0", VA = "0x1131AB0")]
	private void UpdateVersion()
	{
	}

	[Token(Token = "0x600105E")]
	[Address(RVA = "0x1130F80", Offset = "0x1130F80", VA = "0x1130F80")]
	public void UpdateToolSocketPosition(Tool.ToolType toolType, int slotPosition)
	{
	}

	[Token(Token = "0x600105F")]
	[Address(RVA = "0x1137848", Offset = "0x1137848", VA = "0x1137848")]
	public bool IsToolTypeSocketed(Tool.ToolType toolType)
	{
		return default(bool);
	}

	[Token(Token = "0x6001060")]
	[Address(RVA = "0x1130DF4", Offset = "0x1130DF4", VA = "0x1130DF4")]
	public void UpdateTutorialState(ValleyTutorialManager.TutorialName tutorialState, bool passed)
	{
	}

	[Token(Token = "0x6001061")]
	[Address(RVA = "0x1137B70", Offset = "0x1137B70", VA = "0x1137B70")]
	public void UpdateSectorsData(string newSector)
	{
	}

	[Token(Token = "0x6001062")]
	[Address(RVA = "0x1137CF8", Offset = "0x1137CF8", VA = "0x1137CF8")]
	public void UpdateAchievementsTriggered(string achievementName)
	{
	}

	[Token(Token = "0x6001063")]
	[Address(RVA = "0x1137E04", Offset = "0x1137E04", VA = "0x1137E04")]
	public bool GetHasAchievementTriggered(string achievementName)
	{
		return default(bool);
	}

	[Token(Token = "0x6001064")]
	[Address(RVA = "0x1137E90", Offset = "0x1137E90", VA = "0x1137E90")]
	public int GetAmountOfCompletedAchievements()
	{
		return default(int);
	}

	[Token(Token = "0x6001065")]
	[Address(RVA = "0x1138074", Offset = "0x1138074", VA = "0x1138074")]
	public string[] GetAllCompletedAchievements()
	{
		return null;
	}

	[Token(Token = "0x6001066")]
	[Address(RVA = "0x113845C", Offset = "0x113845C", VA = "0x113845C")]
	public void UpdateTopworldVisitedData()
	{
	}

	[Token(Token = "0x6001067")]
	[Address(RVA = "0x1138940", Offset = "0x1138940", VA = "0x1138940")]
	public int HasPlayerVisitedTopworld(string scene)
	{
		return default(int);
	}

	[Token(Token = "0x6001068")]
	[Address(RVA = "0x1138A4C", Offset = "0x1138A4C", VA = "0x1138A4C")]
	public int GetPlayerRunLootRecordValue()
	{
		return default(int);
	}

	[Token(Token = "0x6001069")]
	[Address(RVA = "0x1138B10", Offset = "0x1138B10", VA = "0x1138B10")]
	public void SetPlayerRunLootRecordValue(int newValue)
	{
	}

	[Token(Token = "0x600106A")]
	[Address(RVA = "0x1138C04", Offset = "0x1138C04", VA = "0x1138C04")]
	public void SetMeteorStateValue(int newValue)
	{
	}

	[Token(Token = "0x600106B")]
	[Address(RVA = "0x1134728", Offset = "0x1134728", VA = "0x1134728")]
	public int GetMeteorState()
	{
		return default(int);
	}

	[Token(Token = "0x600106C")]
	[Address(RVA = "0x1138D00", Offset = "0x1138D00", VA = "0x1138D00")]
	public void UpdateGameplayStats(string statName, int value, bool increment)
	{
	}

	[Token(Token = "0x600106D")]
	[Address(RVA = "0x1138E10", Offset = "0x1138E10", VA = "0x1138E10")]
	public int GetGameplayStat(string statName)
	{
		return default(int);
	}

	[Token(Token = "0x600106E")]
	[Address(RVA = "0x1138F0C", Offset = "0x1138F0C", VA = "0x1138F0C")]
	public void CheckStatForAchievement(string statName, string achiementId, int tresholdForAchievement)
	{
	}

	[Token(Token = "0x600106F")]
	[Address(RVA = "0x11391EC", Offset = "0x11391EC", VA = "0x11391EC")]
	public void AddBackPackLoot(LootSpawnAndDespawnManager.LootType loot)
	{
	}

	[Token(Token = "0x6001070")]
	[Address(RVA = "0x1139364", Offset = "0x1139364", VA = "0x1139364")]
	public void RemoveBackPackLoot(LootSpawnAndDespawnManager.LootType loot)
	{
	}

	[Token(Token = "0x6001071")]
	[Address(RVA = "0x11394E0", Offset = "0x11394E0", VA = "0x11394E0")]
	public void UpdateSetting(GameSettings.SettingsTypes type, int value)
	{
	}

	[Token(Token = "0x6001072")]
	[Address(RVA = "0x1139658", Offset = "0x1139658", VA = "0x1139658")]
	public void AddCodexLootEntry(LootSpawnAndDespawnManager.LootType loot, bool increment)
	{
	}

	[Token(Token = "0x6001073")]
	[Address(RVA = "0x1139C20", Offset = "0x1139C20", VA = "0x1139C20")]
	public void AddCodexMonsterEntry(EnemySpawnAndDespawnManager.EnemyType enemyType)
	{
	}

	[Token(Token = "0x6001074")]
	[Address(RVA = "0x1139FA4", Offset = "0x1139FA4", VA = "0x1139FA4")]
	public bool CheckVoiceClipPlayed(AudioClip clip, bool addAsPlayed)
	{
		return default(bool);
	}

	[Token(Token = "0x6001075")]
	[Address(RVA = "0x113A160", Offset = "0x113A160", VA = "0x113A160")]
	public void IncrementBiomeRunsStarted(int biomeIndex)
	{
	}

	[Token(Token = "0x6001076")]
	[Address(RVA = "0x113A294", Offset = "0x113A294", VA = "0x113A294")]
	public int GetBiomeRunsStarted(int biomeIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6001077")]
	[Address(RVA = "0x113A338", Offset = "0x113A338", VA = "0x113A338")]
	private string GetEntryWantedBoardOrAccepted(bool isWantedBoard)
	{
		return null;
	}

	[Token(Token = "0x6001078")]
	[Address(RVA = "0x112D060", Offset = "0x112D060", VA = "0x112D060")]
	public void LoadQuests(bool isWantedBoard)
	{
	}

	[Token(Token = "0x6001079")]
	[Address(RVA = "0x113A350", Offset = "0x113A350", VA = "0x113A350")]
	public void SaveQuest(QuestBase quest, bool isWantedBoard)
	{
	}

	[Token(Token = "0x600107A")]
	[Address(RVA = "0x113A4DC", Offset = "0x113A4DC", VA = "0x113A4DC")]
	public void RemoveQuest(QuestBase quest, bool isWantedBoard)
	{
	}

	[Token(Token = "0x600107B")]
	[Address(RVA = "0x112E1C8", Offset = "0x112E1C8", VA = "0x112E1C8")]
	public void SavePreviousQuestRefreshTime()
	{
	}

	[Token(Token = "0x600107C")]
	[Address(RVA = "0x112D47C", Offset = "0x112D47C", VA = "0x112D47C")]
	public bool HasPreviousQuestRefreshTime()
	{
		return default(bool);
	}

	[Token(Token = "0x600107D")]
	[Address(RVA = "0x112D4BC", Offset = "0x112D4BC", VA = "0x112D4BC")]
	public DateTime LoadPreviousQuestRefreshTime()
	{
		return default(DateTime);
	}

	[Token(Token = "0x600107E")]
	[Address(RVA = "0x113A7D4", Offset = "0x113A7D4", VA = "0x113A7D4")]
	public List<string> LoadCodexChompyEntries()
	{
		return null;
	}

	[Token(Token = "0x600107F")]
	[Address(RVA = "0x113AAC0", Offset = "0x113AAC0", VA = "0x113AAC0")]
	public void AddCodexChompyEntry(string chompy)
	{
	}

	[Token(Token = "0x6001080")]
	[Address(RVA = "0x112FB7C", Offset = "0x112FB7C", VA = "0x112FB7C")]
	private void GetVoiceComponents()
	{
	}

	[Token(Token = "0x6001081")]
	[Address(RVA = "0x113AC90", Offset = "0x113AC90", VA = "0x113AC90")]
	public void SetMuteMicrophone(bool muteMicrophone)
	{
	}

	[Token(Token = "0x6001082")]
	[Address(RVA = "0x113AEE0", Offset = "0x113AEE0", VA = "0x113AEE0")]
	public SaveDataManager()
	{
	}
}
[Serializable]
[Token(Token = "0x2000235")]
public class GameSettings
{
	[Token(Token = "0x2000236")]
	public delegate void OnDataLoaded();

	[Token(Token = "0x2000237")]
	public enum SettingsTypes
	{
		[Token(Token = "0x4000EFA")]
		MuteBackgroundMusic,
		[Token(Token = "0x4000EFB")]
		MuteMicrophone,
		[Token(Token = "0x4000EFC")]
		HQMonitorView,
		[Token(Token = "0x4000EFD")]
		SmoothTurning,
		[Token(Token = "0x4000EFE")]
		SittingMode,
		[Token(Token = "0x4000EFF")]
		HideUsernames,
		[Token(Token = "0x4000F00")]
		HideRoomCodes,
		[Token(Token = "0x4000F01")]
		MasterVolume,
		[Token(Token = "0x4000F02")]
		SFXVolume,
		[Token(Token = "0x4000F03")]
		MusicVolume,
		[Token(Token = "0x4000F04")]
		AmbienceVolume,
		[Token(Token = "0x4000F05")]
		ClaytonsVolume,
		[Token(Token = "0x4000F06")]
		DisableHaptics,
		[Token(Token = "0x4000F07")]
		ToggleGrab,
		[Token(Token = "0x4000F08")]
		AmbientBoost,
		[Token(Token = "0x4000F09")]
		AlwaysRun,
		[Token(Token = "0x4000F0A")]
		RenderScale,
		[Token(Token = "0x4000F0B")]
		BloomScale,
		[Token(Token = "0x4000F0C")]
		HandOffsetValue,
		[Token(Token = "0x4000F0D")]
		SubtitlesOn,
		[Token(Token = "0x4000F0E")]
		OptOutOfAnalytics,
		[Token(Token = "0x4000F0F")]
		SmoothTurningSpeed,
		[Token(Token = "0x4000F10")]
		HipSlotPosition,
		[Token(Token = "0x4000F11")]
		PlayerHeightOffset,
		[Token(Token = "0x4000F12")]
		UseBlinders,
		[Token(Token = "0x4000F13")]
		BlinderStrength,
		[Token(Token = "0x4000F14")]
		DisableFreemove,
		[Token(Token = "0x4000F15")]
		SubtitleScale,
		[Token(Token = "0x4000F16")]
		SubtitleTransparency,
		[Token(Token = "0x4000F17")]
		AutoHost
	}

	[Token(Token = "0x4000ED1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameSettings instance;

	[Token(Token = "0x4000ED2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("Settings")]
	public bool MuteBackgroundMusic;

	[Token(Token = "0x4000ED3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool muteMicrophone;

	[Token(Token = "0x4000ED4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool HighQualityMonitorView;

	[Token(Token = "0x4000ED5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool SmoothTurning;

	[Token(Token = "0x4000ED6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool SittingMode;

	[Token(Token = "0x4000ED7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool HideUsernames;

	[Token(Token = "0x4000ED8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool HideRoomCodes;

	[Token(Token = "0x4000ED9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool AmbientBoost;

	[Token(Token = "0x4000EDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool SubtitlesOn;

	[Token(Token = "0x4000EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool AlwaysRun;

	[Token(Token = "0x4000EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool UseBlinders;

	[Token(Token = "0x4000EDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RenderScale;

	[Token(Token = "0x4000EDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float BloomScale;

	[Token(Token = "0x4000EDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float HandOffsetValue;

	[Token(Token = "0x4000EE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float SmoothTurnSpeed;

	[Token(Token = "0x4000EE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float HipSlotPosition;

	[Token(Token = "0x4000EE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float BlinderStrength;

	[Token(Token = "0x4000EE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float PlayerHeightOffset;

	[Token(Token = "0x4000EE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool disableFreeMove;

	[Token(Token = "0x4000EE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float SubtitleScale;

	[Token(Token = "0x4000EE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float SubtitleTransparency;

	[Token(Token = "0x4000EE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool autoHostMultiplayer;

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool SendAnalytics;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	private bool disableHaptics;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	private bool toggleGrab;

	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _masterVolume;

	[Token(Token = "0x4000EEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _musicVolume;

	[Token(Token = "0x4000EED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float _sfxVolume;

	[Token(Token = "0x4000EEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float _ambienceVolume;

	[Token(Token = "0x4000EEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _claytonsVolume;

	[Token(Token = "0x4000EF0")]
	private const string volumeParameter1 = "MasterVolume";

	[Token(Token = "0x4000EF1")]
	private const string volumeParameter2 = "MusicVolume";

	[Token(Token = "0x4000EF2")]
	private const string volumeParameter3 = "SFXVolume";

	[Token(Token = "0x4000EF3")]
	private const string volumeParameter4 = "AmbienceVolume";

	[Token(Token = "0x4000EF4")]
	private const string volumeParameter5 = "VoiceLines";

	[Token(Token = "0x4000EF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float multiplier;

	[Token(Token = "0x4000EF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AudioMixer _mixer;

	[Token(Token = "0x4000EF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AudioMixer _mixerPS4;

	[Token(Token = "0x4000EF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public OnDataLoaded onDataLoaded;

	[Token(Token = "0x170001DA")]
	public static GameSettings Instance
	{
		[Token(Token = "0x600109C")]
		[Address(RVA = "0x112AF60", Offset = "0x112AF60", VA = "0x112AF60")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001DB")]
	public bool MuteMicrophone
	{
		[Token(Token = "0x600109D")]
		[Address(RVA = "0x113BC4C", Offset = "0x113BC4C", VA = "0x113BC4C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600109E")]
		[Address(RVA = "0x113BC54", Offset = "0x113BC54", VA = "0x113BC54")]
		set
		{
		}
	}

	[Token(Token = "0x170001DC")]
	public bool AutoHostMultiplayer
	{
		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x113BE24", Offset = "0x113BE24", VA = "0x113BE24")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x113BE2C", Offset = "0x113BE2C", VA = "0x113BE2C")]
		set
		{
		}
	}

	[Token(Token = "0x170001DD")]
	public bool DisableHaptics
	{
		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x113BE38", Offset = "0x113BE38", VA = "0x113BE38")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x113BE40", Offset = "0x113BE40", VA = "0x113BE40")]
		set
		{
		}
	}

	[Token(Token = "0x170001DE")]
	public bool ToggleGrab
	{
		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x113BEAC", Offset = "0x113BEAC", VA = "0x113BEAC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x113BEB4", Offset = "0x113BEB4", VA = "0x113BEB4")]
		set
		{
		}
	}

	[Token(Token = "0x170001DF")]
	public float MasterVolume
	{
		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x113BF20", Offset = "0x113BF20", VA = "0x113BF20")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x113BF28", Offset = "0x113BF28", VA = "0x113BF28")]
		set
		{
		}
	}

	[Token(Token = "0x170001E0")]
	public float MusicVolume
	{
		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x113C054", Offset = "0x113C054", VA = "0x113C054")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x113C05C", Offset = "0x113C05C", VA = "0x113C05C")]
		set
		{
		}
	}

	[Token(Token = "0x170001E1")]
	public float SFXVolume
	{
		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x113C0B8", Offset = "0x113C0B8", VA = "0x113C0B8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x113C0C0", Offset = "0x113C0C0", VA = "0x113C0C0")]
		set
		{
		}
	}

	[Token(Token = "0x170001E2")]
	public float AmbienceVolume
	{
		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x113C11C", Offset = "0x113C11C", VA = "0x113C11C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x113C124", Offset = "0x113C124", VA = "0x113C124")]
		set
		{
		}
	}

	[Token(Token = "0x170001E3")]
	public float ClaytonsVolume
	{
		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x113C180", Offset = "0x113C180", VA = "0x113C180")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x113C188", Offset = "0x113C188", VA = "0x113C188")]
		set
		{
		}
	}

	[Token(Token = "0x600109F")]
	[Address(RVA = "0x113BD3C", Offset = "0x113BD3C", VA = "0x113BD3C")]
	public void UpdateMicrophone()
	{
	}

	[Token(Token = "0x60010B0")]
	[Address(RVA = "0x113BF84", Offset = "0x113BF84", VA = "0x113BF84")]
	public void SwitchMixerVolume(string volumeParameter, float newValue)
	{
	}

	[Token(Token = "0x60010B1")]
	[Address(RVA = "0x113C1E4", Offset = "0x113C1E4", VA = "0x113C1E4")]
	private void GetMixers()
	{
	}

	[Token(Token = "0x60010B2")]
	[Address(RVA = "0x1134B2C", Offset = "0x1134B2C", VA = "0x1134B2C")]
	public static void Apply()
	{
	}

	[Token(Token = "0x60010B3")]
	[Address(RVA = "0x113C264", Offset = "0x113C264", VA = "0x113C264")]
	private void apply()
	{
	}

	[Token(Token = "0x60010B4")]
	[Address(RVA = "0x113C280", Offset = "0x113C280", VA = "0x113C280")]
	public void Save()
	{
	}

	[Token(Token = "0x60010B5")]
	[Address(RVA = "0x11347E8", Offset = "0x11347E8", VA = "0x11347E8")]
	internal void LoadSetting(SettingsTypes settingType, int intSetting)
	{
	}

	[Token(Token = "0x60010B6")]
	[Address(RVA = "0x113BC00", Offset = "0x113BC00", VA = "0x113BC00")]
	public GameSettings()
	{
	}
}
[Token(Token = "0x2000238")]
public class SceneChangerManager : Singleton<SceneChangerManager>, IOnEventCallback
{
	[Token(Token = "0x2000239")]
	public enum Scenes
	{
		[Token(Token = "0x4000F23")]
		Valley,
		[Token(Token = "0x4000F24")]
		Coral,
		[Token(Token = "0x4000F25")]
		Geode,
		[Token(Token = "0x4000F26")]
		Temple
	}

	[Token(Token = "0x200023A")]
	[CompilerGenerated]
	private sealed class <DelayedPlayerInitializedCoroutine>d__18 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SceneChangerManager <>4__this;

		[Token(Token = "0x170001E6")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60010D0")]
			[Address(RVA = "0x113EB50", Offset = "0x113EB50", VA = "0x113EB50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010D2")]
			[Address(RVA = "0x113EB98", Offset = "0x113EB98", VA = "0x113EB98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x113DD38", Offset = "0x113DD38", VA = "0x113DD38")]
		[DebuggerHidden]
		public <DelayedPlayerInitializedCoroutine>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x113EA04", Offset = "0x113EA04", VA = "0x113EA04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x113EA08", Offset = "0x113EA08", VA = "0x113EA08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x113EB58", Offset = "0x113EB58", VA = "0x113EB58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200023B")]
	[CompilerGenerated]
	private sealed class <changeSceneCoroutine>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneChangerManager <>4__this;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Scenes newScene;

		[Token(Token = "0x170001E8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010D6")]
			[Address(RVA = "0x113F188", Offset = "0x113F188", VA = "0x113F188", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0x113F1D0", Offset = "0x113F1D0", VA = "0x113F1D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x113E138", Offset = "0x113E138", VA = "0x113E138")]
		[DebuggerHidden]
		public <changeSceneCoroutine>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x113EBF4", Offset = "0x113EBF4", VA = "0x113EBF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x113EBF8", Offset = "0x113EBF8", VA = "0x113EBF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x113F190", Offset = "0x113F190", VA = "0x113F190", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200023C")]
	[CompilerGenerated]
	private sealed class <_CheckLevelLoadingProgress>d__27 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SceneChangerManager <>4__this;

		[Token(Token = "0x170001EA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60010DC")]
			[Address(RVA = "0x113F2BC", Offset = "0x113F2BC", VA = "0x113F2BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001EB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010DE")]
			[Address(RVA = "0x113F304", Offset = "0x113F304", VA = "0x113F304", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x113E7A0", Offset = "0x113E7A0", VA = "0x113E7A0")]
		[DebuggerHidden]
		public <_CheckLevelLoadingProgress>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x113F1D8", Offset = "0x113F1D8", VA = "0x113F1D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x113F1DC", Offset = "0x113F1DC", VA = "0x113F1DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x113F2C4", Offset = "0x113F2C4", VA = "0x113F2C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent sceneChangeStarted;

	[Token(Token = "0x4000F19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent sceneChangeFinished;

	[Token(Token = "0x4000F1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Scenes currentScene;

	[Token(Token = "0x4000F1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float lastLevelLoadingProgress;

	[Token(Token = "0x4000F1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool SceneChangeActive;

	[Token(Token = "0x4000F1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool masterClientIsLoaded;

	[Token(Token = "0x4000F1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int originalSlice;

	[Token(Token = "0x4000F1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int originalBuffer;

	[Token(Token = "0x4000F20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int originalCullingMask;

	[Token(Token = "0x4000F21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float currentLevelLoadingProgress;

	[Token(Token = "0x170001E4")]
	public bool IsChangingScene
	{
		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x113D33C", Offset = "0x113D33C", VA = "0x113D33C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E5")]
	public static bool IsTutorialScene
	{
		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x113D344", Offset = "0x113D344", VA = "0x113D344")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60010BD")]
	[Address(RVA = "0x113D3D0", Offset = "0x113D3D0", VA = "0x113D3D0", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60010BE")]
	[Address(RVA = "0x113D5AC", Offset = "0x113D5AC", VA = "0x113D5AC", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60010BF")]
	[Address(RVA = "0x113D798", Offset = "0x113D798", VA = "0x113D798")]
	protected void Start()
	{
	}

	[Token(Token = "0x60010C0")]
	[Address(RVA = "0x113DC5C", Offset = "0x113DC5C", VA = "0x113DC5C")]
	private void PlayerInitialized()
	{
	}

	[Token(Token = "0x60010C1")]
	[Address(RVA = "0x113DCC4", Offset = "0x113DCC4", VA = "0x113DCC4")]
	[IteratorStateMachine(typeof(<DelayedPlayerInitializedCoroutine>d__18))]
	private IEnumerator<float> DelayedPlayerInitializedCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60010C2")]
	[Address(RVA = "0x113DD60", Offset = "0x113DD60", VA = "0x113DD60")]
	private void NewSceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x60010C3")]
	[Address(RVA = "0x113DA58", Offset = "0x113DA58", VA = "0x113DA58")]
	private void RestoreSettings()
	{
	}

	[Token(Token = "0x60010C4")]
	[Address(RVA = "0x113E0B4", Offset = "0x113E0B4", VA = "0x113E0B4")]
	[IteratorStateMachine(typeof(<changeSceneCoroutine>d__21))]
	private IEnumerator changeSceneCoroutine(Scenes newScene)
	{
		return null;
	}

	[Token(Token = "0x60010C5")]
	[Address(RVA = "0x113E160", Offset = "0x113E160", VA = "0x113E160")]
	private static void PrepareForSceneChange()
	{
	}

	[Token(Token = "0x60010C6")]
	[Address(RVA = "0x113E5B0", Offset = "0x113E5B0", VA = "0x113E5B0")]
	public void ChangeScene(Scenes newScene)
	{
	}

	[Token(Token = "0x60010C7")]
	[Address(RVA = "0x113E71C", Offset = "0x113E71C", VA = "0x113E71C")]
	public Scenes GetCurrentScene()
	{
		return default(Scenes);
	}

	[Token(Token = "0x60010C8")]
	[Address(RVA = "0x113E724", Offset = "0x113E724", VA = "0x113E724")]
	public bool IsMasterClientLoaded()
	{
		return default(bool);
	}

	[Token(Token = "0x60010C9")]
	[Address(RVA = "0x113E72C", Offset = "0x113E72C", VA = "0x113E72C")]
	[IteratorStateMachine(typeof(<_CheckLevelLoadingProgress>d__27))]
	private IEnumerator<float> _CheckLevelLoadingProgress()
	{
		return null;
	}

	[Token(Token = "0x60010CA")]
	[Address(RVA = "0x113E7C8", Offset = "0x113E7C8", VA = "0x113E7C8", Slot = "6")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x60010CB")]
	[Address(RVA = "0x113E87C", Offset = "0x113E87C", VA = "0x113E87C")]
	private void PlaySceneVoicelines()
	{
	}

	[Token(Token = "0x60010CC")]
	[Address(RVA = "0x113E990", Offset = "0x113E990", VA = "0x113E990")]
	public SceneChangerManager()
	{
	}
}
[Token(Token = "0x200023D")]
public class ScriptToggleManager : MonoBehaviour
{
	[Token(Token = "0x4000F31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ScriptToggleManager Instance;

	[Token(Token = "0x4000F32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<CommonCollision> commonCollisions;

	[Token(Token = "0x4000F33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _ccStatus;

	[Token(Token = "0x60010DF")]
	[Address(RVA = "0x113F360", Offset = "0x113F360", VA = "0x113F360")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010E0")]
	[Address(RVA = "0x113F3B8", Offset = "0x113F3B8", VA = "0x113F3B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60010E1")]
	[Address(RVA = "0x113F46C", Offset = "0x113F46C", VA = "0x113F46C")]
	public void AddCC(CommonCollision cc)
	{
	}

	[Token(Token = "0x60010E2")]
	[Address(RVA = "0x113F540", Offset = "0x113F540", VA = "0x113F540")]
	public void RemoveCC(CommonCollision cc)
	{
	}

	[Token(Token = "0x60010E3")]
	[Address(RVA = "0x113F598", Offset = "0x113F598", VA = "0x113F598")]
	public void ToggleAllCC(bool status)
	{
	}

	[Token(Token = "0x60010E4")]
	[Address(RVA = "0x113F6A0", Offset = "0x113F6A0", VA = "0x113F6A0")]
	public ScriptToggleManager()
	{
	}
}
[Token(Token = "0x200023E")]
public class SFXManager : MonoBehaviour
{
	[Token(Token = "0x200023F")]
	private struct VoiceClipData
	{
		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AudioClip voiceClip;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool playEvenIfAlreadyPlayed;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool interrupt;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public bool queue;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
		public bool syncToOtherPlayers;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LocalizedString subtitle;

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x1141914", Offset = "0x1141914", VA = "0x1141914")]
		public VoiceClipData(AudioClip voiceClip, bool playEvenIfAlreadyPlayed, bool interrupt, bool queue, bool syncToOtherPlayers, LocalizedString subtitle)
		{
		}
	}

	[Token(Token = "0x2000240")]
	public class AudioUnit
	{
		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform myTransform;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource audioSource;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float pitch;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ONSPAudioSource onsp;

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x113F91C", Offset = "0x113F91C", VA = "0x113F91C")]
		public AudioUnit()
		{
		}
	}

	[Token(Token = "0x2000241")]
	[CompilerGenerated]
	private sealed class <StartVoiceClipCoroutine>d__45 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SFXManager <>4__this;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedString subtitle;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip clip;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool playEvenIfAlreadyPlayed;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <ogVolume>5__2;

		[Token(Token = "0x170001F0")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0x1142280", Offset = "0x1142280", VA = "0x1142280", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001F1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0x11422C8", Offset = "0x11422C8", VA = "0x11422C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x1141B0C", Offset = "0x1141B0C", VA = "0x1141B0C")]
		[DebuggerHidden]
		public <StartVoiceClipCoroutine>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x1141FB8", Offset = "0x1141FB8", VA = "0x1141FB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x1141FBC", Offset = "0x1141FBC", VA = "0x1141FBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x1142288", Offset = "0x1142288", VA = "0x1142288", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000242")]
	[CompilerGenerated]
	private sealed class <_VoiceLineAfter>d__46 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SFXManager <>4__this;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x170001F2")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600110B")]
			[Address(RVA = "0x11424D8", Offset = "0x11424D8", VA = "0x11424D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600110D")]
			[Address(RVA = "0x1142520", Offset = "0x1142520", VA = "0x1142520", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x1142324", Offset = "0x1142324", VA = "0x1142324")]
		[DebuggerHidden]
		public <_VoiceLineAfter>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x114234C", Offset = "0x114234C", VA = "0x114234C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x1142350", Offset = "0x1142350", VA = "0x1142350", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x11424E0", Offset = "0x11424E0", VA = "0x11424E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SFXManager Instance;

	[Token(Token = "0x4000F35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixer audioMixer;

	[Token(Token = "0x4000F36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioMixer audioMixerPS4;

	[Token(Token = "0x4000F37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioMixerGroup sfxGroup;

	[Token(Token = "0x4000F38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioMixerGroup voiceLineGroup;

	[Token(Token = "0x4000F39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioMixerGroup sfxGroupPS4;

	[Token(Token = "0x4000F3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioMixerGroup voiceLineGroupPS4;

	[Token(Token = "0x4000F3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool temporarilyDisableSubtitles;

	[Token(Token = "0x4000F3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<AudioUnit> _audioUnits;

	[Token(Token = "0x4000F3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private SoundMaterialScriptableObject[] audioSOs;

	[Token(Token = "0x4000F3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip[] lootRelease;

	[NonSerialized]
	[Token(Token = "0x4000F3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool disableClaytonReactions;

	[Token(Token = "0x4000F40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public VoiceLinesScriptable voiceLinesScriptable;

	[Token(Token = "0x4000F41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Queue<VoiceClipData> _voiceLineQueue;

	[Token(Token = "0x4000F42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private AudioSource _currentVoiceAudioSource;

	[Token(Token = "0x4000F44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private CoroutineHandle _voiceCoroutineHandle;

	[Token(Token = "0x4000F45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool firstRunsetPieceLinePlayed;

	[Token(Token = "0x170001EC")]
	public AudioMixer GetAudioMixer
	{
		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x113F734", Offset = "0x113F734", VA = "0x113F734")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001ED")]
	public AudioMixerGroup GetSFXGroup
	{
		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x113F73C", Offset = "0x113F73C", VA = "0x113F73C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001EE")]
	public AudioMixerGroup GetVoiceLineGroup
	{
		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x113F744", Offset = "0x113F744", VA = "0x113F744")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001EF")]
	public bool voiceIsPlaying
	{
		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x113F74C", Offset = "0x113F74C", VA = "0x113F74C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x113F754", Offset = "0x113F754", VA = "0x113F754")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60010EA")]
	[Address(RVA = "0x113F760", Offset = "0x113F760", VA = "0x113F760")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60010EB")]
	[Address(RVA = "0x113F804", Offset = "0x113F804", VA = "0x113F804")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010EC")]
	[Address(RVA = "0x113FB98", Offset = "0x113FB98", VA = "0x113FB98")]
	public AudioClip GetCollisionClip(MaterialType materialType, float impactForce = 1f)
	{
		return null;
	}

	[Token(Token = "0x60010ED")]
	[Address(RVA = "0x113FD90", Offset = "0x113FD90", VA = "0x113FD90")]
	public AudioClip GetCollisionClip(PhysicMaterial physicMaterialType, float impactForce = 1f)
	{
		return null;
	}

	[Token(Token = "0x60010EE")]
	[Address(RVA = "0x1140014", Offset = "0x1140014", VA = "0x1140014")]
	public AudioClip GetBreakingClip(MaterialType materialType)
	{
		return null;
	}

	[Token(Token = "0x60010EF")]
	[Address(RVA = "0x11401A8", Offset = "0x11401A8", VA = "0x11401A8")]
	public void Reset(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x60010F0")]
	[Address(RVA = "0x1140304", Offset = "0x1140304", VA = "0x1140304")]
	public AudioSource PlayFixedPitch(AudioClip clip, Vector3 position, float pitch, float volume = 1f, [Optional] AudioMixerGroup group, bool twoDimension = false, bool virtualize = true, float maxDistance = 20f, float virtualizeGain = 0f, float volumetricRadius = 0f)
	{
		return null;
	}

	[Token(Token = "0x60010F1")]
	[Address(RVA = "0x11407F0", Offset = "0x11407F0", VA = "0x11407F0")]
	private static void SetActive(AudioUnit _unit)
	{
	}

	[Token(Token = "0x60010F2")]
	[Address(RVA = "0x1140874", Offset = "0x1140874", VA = "0x1140874")]
	public AudioSource Play(AudioClip clip, Vector3 position, float pitchVariation = 0f, float volume = 1f, [Optional] AudioMixerGroup group, bool twoDimension = false, float maxDistance = 20f, [Optional] Transform parent, bool virtualize = true)
	{
		return null;
	}

	[Token(Token = "0x60010F3")]
	[Address(RVA = "0x1140D0C", Offset = "0x1140D0C", VA = "0x1140D0C")]
	public AudioSource Play2D(AudioClip clip, float pitchVariation, bool ignorePause = false, [Optional] AudioMixerGroup group, bool highPriority = false, [Optional] string subtitle)
	{
		return null;
	}

	[Token(Token = "0x60010F4")]
	[Address(RVA = "0x1141130", Offset = "0x1141130", VA = "0x1141130")]
	public void SetAllAudioSpeed(float pitch)
	{
	}

	[Token(Token = "0x60010F5")]
	[Address(RVA = "0x11411EC", Offset = "0x11411EC", VA = "0x11411EC")]
	public void ResetAllAudioSpeed()
	{
	}

	[Token(Token = "0x60010F6")]
	[Address(RVA = "0x11412AC", Offset = "0x11412AC", VA = "0x11412AC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60010F7")]
	[Address(RVA = "0x1141350", Offset = "0x1141350", VA = "0x1141350")]
	public void PlayLootReleaseHere(Vector3 position)
	{
	}

	[Token(Token = "0x60010F8")]
	[Address(RVA = "0x114143C", Offset = "0x114143C", VA = "0x114143C")]
	public void PlayVoiceLine(AudioClip clip, bool playEvenIfAlreadyPlayed, bool interrupt, bool queue, bool syncToOtherPlayers, LocalizedString subtitle)
	{
	}

	[Token(Token = "0x60010F9")]
	[Address(RVA = "0x1141980", Offset = "0x1141980", VA = "0x1141980")]
	private void StartVoiceClip(AudioClip clip, bool playEvenIfAlreadyPlayed, LocalizedString subtitle)
	{
	}

	[Token(Token = "0x60010FA")]
	[Address(RVA = "0x1141A48", Offset = "0x1141A48", VA = "0x1141A48")]
	[IteratorStateMachine(typeof(<StartVoiceClipCoroutine>d__45))]
	private IEnumerator<float> StartVoiceClipCoroutine(AudioClip clip, bool playEvenIfAlreadyPlayed, LocalizedString subtitle)
	{
		return null;
	}

	[Token(Token = "0x60010FB")]
	[Address(RVA = "0x1141B34", Offset = "0x1141B34", VA = "0x1141B34")]
	[IteratorStateMachine(typeof(<_VoiceLineAfter>d__46))]
	private IEnumerator<float> _VoiceLineAfter(float duration)
	{
		return null;
	}

	[Token(Token = "0x60010FC")]
	[Address(RVA = "0x1141BB8", Offset = "0x1141BB8", VA = "0x1141BB8")]
	public void PlayPreset(VoiceLinesScriptable.Preset preset)
	{
	}

	[Token(Token = "0x60010FD")]
	[Address(RVA = "0x1141E14", Offset = "0x1141E14", VA = "0x1141E14")]
	private static void GetAvailableRelicVoiceline()
	{
	}

	[Token(Token = "0x60010FE")]
	[Address(RVA = "0x1141ED4", Offset = "0x1141ED4", VA = "0x1141ED4")]
	public void TemporarilyDisableSubtitles(bool status)
	{
	}

	[Token(Token = "0x60010FF")]
	[Address(RVA = "0x1141EE0", Offset = "0x1141EE0", VA = "0x1141EE0")]
	public SFXManager()
	{
	}
}
[Token(Token = "0x2000243")]
public static class SFXManagerStaticExtension
{
	[Token(Token = "0x600110E")]
	[Address(RVA = "0x114257C", Offset = "0x114257C", VA = "0x114257C")]
	public static void PlayClip(this AudioClip clip, Vector3 position, float pitchVariation = 0f, float volume = 1f)
	{
	}

	[Token(Token = "0x600110F")]
	[Address(RVA = "0x1142690", Offset = "0x1142690", VA = "0x1142690")]
	public static void PlayClip2D(this AudioClip clip, float pitchVariation = 0f)
	{
	}

	[Token(Token = "0x6001110")]
	[Address(RVA = "0x1142768", Offset = "0x1142768", VA = "0x1142768")]
	public static void PlayCollisionClipHere(this Vector3 position, MaterialType materialType, float pitchVariation = 0f, float volume = 1f, float impactForce = 1f)
	{
	}

	[Token(Token = "0x6001111")]
	[Address(RVA = "0x1142898", Offset = "0x1142898", VA = "0x1142898")]
	public static void PlayCollisionClipHere(this Vector3 position, PhysicMaterial physicsType, float pitchVariation = 0f, float volume = 1f, float impactForce = 1f)
	{
	}

	[Token(Token = "0x6001112")]
	[Address(RVA = "0x11429C8", Offset = "0x11429C8", VA = "0x11429C8")]
	public static void PlayBreakingClipHere(this Vector3 position, MaterialType materialType, float pitchVariation = 0f, float volume = 1f)
	{
	}

	[Token(Token = "0x6001113")]
	[Address(RVA = "0x1142AF0", Offset = "0x1142AF0", VA = "0x1142AF0")]
	public static void PlayVoiceLine(this AudioClip clip, bool playEvenIfAlreadyPlayed, bool interrupt, bool queue, bool syncToOtherPlayers, LocalizedString subtitle)
	{
	}

	[Token(Token = "0x6001114")]
	[Address(RVA = "0x1142BF8", Offset = "0x1142BF8", VA = "0x1142BF8")]
	public static void PlayRandomVoiceLineFromArray(this AudioClip[] clipArray, bool playEvenIfAlreadyPlayed, bool interrupt, bool queue, bool syncToOtherPlayers, LocalizedString[] subtitles)
	{
	}
}
[Token(Token = "0x2000244")]
public class EnemySpawnAndDespawnManager : SpawnAndDespawnManager
{
	[Token(Token = "0x2000245")]
	public enum EnemyType
	{
		[Token(Token = "0x4000F5F")]
		BabyPlasmaShrimp,
		[Token(Token = "0x4000F60")]
		AdultPlasmaShrimp,
		[Token(Token = "0x4000F61")]
		LandNautiloid,
		[Token(Token = "0x4000F62")]
		SeaNautiloid,
		[Token(Token = "0x4000F63")]
		MamaNautiloid,
		[Token(Token = "0x4000F64")]
		FungiShrimp,
		[Token(Token = "0x4000F65")]
		PrimalChameleon,
		[Token(Token = "0x4000F66")]
		ThievingChameleon,
		[Token(Token = "0x4000F67")]
		NestNautiloid,
		[Token(Token = "0x4000F68")]
		RuinsNautiloid,
		[Token(Token = "0x4000F69")]
		Golem,
		[Token(Token = "0x4000F6A")]
		B1PrimalChameleon,
		[Token(Token = "0x4000F6B")]
		B2PrimalChameleon,
		[Token(Token = "0x4000F6C")]
		DroneConstruct
	}

	[Token(Token = "0x4000F5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Enemy[] enemyPrefabs;

	[Token(Token = "0x4000F5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Enemy> _spawnedEnemies;

	[Token(Token = "0x4000F5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<EnemyType, Enemy> enemyTypePrefabDictionary;

	[Token(Token = "0x170001F4")]
	public List<Enemy> GetSpawnedEnemies
	{
		[Token(Token = "0x6001115")]
		[Address(RVA = "0x11430DC", Offset = "0x11430DC", VA = "0x11430DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001116")]
	[Address(RVA = "0x11430E4", Offset = "0x11430E4", VA = "0x11430E4", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001117")]
	[Address(RVA = "0x1143580", Offset = "0x1143580", VA = "0x1143580")]
	public Enemy SpawnEnemy(GameObject enemy, Vector3 position, Quaternion rotation, bool roomObject = false, [Optional] object[] customData)
	{
		return null;
	}

	[Token(Token = "0x6001118")]
	[Address(RVA = "0x1143740", Offset = "0x1143740", VA = "0x1143740")]
	public Enemy SpawnEnemy(EnemyType enemyType, Vector3 position, Quaternion rotation, bool roomObject = false, [Optional] object[] customData)
	{
		return null;
	}

	[Token(Token = "0x6001119")]
	[Address(RVA = "0x1143B00", Offset = "0x1143B00", VA = "0x1143B00")]
	public void AddEnemyToSpawnedEnemiesList(Enemy spawnedEnemy)
	{
	}

	[Token(Token = "0x600111A")]
	[Address(RVA = "0x1143BB0", Offset = "0x1143BB0", VA = "0x1143BB0")]
	public void RemoveEnemyFromSpawnedEnemiesList(Enemy enemy)
	{
	}

	[Token(Token = "0x600111B")]
	[Address(RVA = "0x1143C40", Offset = "0x1143C40", VA = "0x1143C40")]
	public void DespawnEnemy(Enemy enemyToDespawn)
	{
	}

	[Token(Token = "0x600111C")]
	[Address(RVA = "0x1143C74", Offset = "0x1143C74", VA = "0x1143C74")]
	public bool GetIfDropsLoot(EnemyType enemyType)
	{
		return default(bool);
	}

	[Token(Token = "0x600111D")]
	[Address(RVA = "0x1143DBC", Offset = "0x1143DBC", VA = "0x1143DBC")]
	public void DespawnAllEnemies(bool logging = false)
	{
	}

	[Token(Token = "0x600111E")]
	[Address(RVA = "0x1143EDC", Offset = "0x1143EDC", VA = "0x1143EDC")]
	public Enemy GetEnemyPrefab(EnemyType enemyType)
	{
		return null;
	}

	[Token(Token = "0x600111F")]
	[Address(RVA = "0x1143F70", Offset = "0x1143F70", VA = "0x1143F70")]
	public EnemySpawnAndDespawnManager()
	{
	}
}
[Token(Token = "0x2000246")]
public class LootSpawnAndDespawnManager : SpawnAndDespawnManager
{
	[Token(Token = "0x2000247")]
	public enum LootType
	{
		[Token(Token = "0x4000F79")]
		GoldNuggetSmall,
		[Token(Token = "0x4000F7A")]
		GoldNuggetLarge,
		[Token(Token = "0x4000F7B")]
		BrinestoneSmall,
		[Token(Token = "0x4000F7C")]
		BrinestoneLarge,
		[Token(Token = "0x4000F7D")]
		BoombastiumSmall,
		[Token(Token = "0x4000F7E")]
		BoombastiumLarge,
		[Token(Token = "0x4000F7F")]
		Bloomstone,
		[Token(Token = "0x4000F80")]
		Feathersteen,
		[Token(Token = "0x4000F81")]
		Glacierite,
		[Token(Token = "0x4000F82")]
		Honeyite,
		[Token(Token = "0x4000F83")]
		Dodecahedronium,
		[Token(Token = "0x4000F84")]
		Larvalium,
		[Token(Token = "0x4000F85")]
		Malcontentite,
		[Token(Token = "0x4000F86")]
		Sangobrium,
		[Token(Token = "0x4000F87")]
		Scepterite,
		[Token(Token = "0x4000F88")]
		Discoballium,
		[Token(Token = "0x4000F89")]
		BlackLotus,
		[Token(Token = "0x4000F8A")]
		CaveDiggerCartridge,
		[Token(Token = "0x4000F8B")]
		TheEverythingVaccine,
		[Token(Token = "0x4000F8C")]
		JollyHorseshoe,
		[Token(Token = "0x4000F8D")]
		PyramidOfThePulse,
		[Token(Token = "0x4000F8E")]
		PolybiusCartridge,
		[Token(Token = "0x4000F8F")]
		WheelOfTheNautilus,
		[Token(Token = "0x4000F90")]
		ShrimpPizza,
		[Token(Token = "0x4000F91")]
		StolenSweetroll,
		[Token(Token = "0x4000F92")]
		TheQuadPower,
		[Token(Token = "0x4000F93")]
		TheExplosiveIdol,
		[Token(Token = "0x4000F94")]
		MagicWand,
		[Token(Token = "0x4000F95")]
		StrongKongThinkingJuice,
		[Token(Token = "0x4000F96")]
		BagOfShinyClickClacks,
		[Token(Token = "0x4000F97")]
		RetroController,
		[Token(Token = "0x4000F98")]
		ShrimpyCoin,
		[Token(Token = "0x4000F99")]
		TheObsidianPidgeon,
		[Token(Token = "0x4000F9A")]
		TheYellowSubmarine,
		[Token(Token = "0x4000F9B")]
		InfinityGoggles,
		[Token(Token = "0x4000F9C")]
		AncientKharanHead,
		[Token(Token = "0x4000F9D")]
		TheHolyGrail,
		[Token(Token = "0x4000F9E")]
		ThreeHeadedMonkeyStatue,
		[Token(Token = "0x4000F9F")]
		TheDiaryOfEdwardCarnby,
		[Token(Token = "0x4000FA0")]
		ColorOutOfSpace,
		[Token(Token = "0x4000FA1")]
		TheNecrocomicon,
		[Token(Token = "0x4000FA2")]
		AMysteryMachine,
		[Token(Token = "0x4000FA3")]
		BareChestsAndBigBooty,
		[Token(Token = "0x4000FA4")]
		TheBonesOfStJakobs,
		[Token(Token = "0x4000FA5")]
		MarcopoloniumSmall,
		[Token(Token = "0x4000FA6")]
		MarcopoloniumLarge,
		[Token(Token = "0x4000FA7")]
		EnigmiumSmall,
		[Token(Token = "0x4000FA8")]
		EnigmiumLarge,
		[Token(Token = "0x4000FA9")]
		Odinium,
		[Token(Token = "0x4000FAA")]
		Cubicovite,
		[Token(Token = "0x4000FAB")]
		Squamolite,
		[Token(Token = "0x4000FAC")]
		Blueberryite,
		[Token(Token = "0x4000FAD")]
		Cerebrite,
		[Token(Token = "0x4000FAE")]
		Cubonium,
		[Token(Token = "0x4000FAF")]
		Arcosine,
		[Token(Token = "0x4000FB0")]
		Flowsteen,
		[Token(Token = "0x4000FB1")]
		Prismolite,
		[Token(Token = "0x4000FB2")]
		SpaceOpal,
		[Token(Token = "0x4000FB3")]
		Gravidite,
		[Token(Token = "0x4000FB4")]
		MeKiwiMug,
		[Token(Token = "0x4000FB5")]
		ClaytonHat,
		[Token(Token = "0x4000FB6")]
		ShelleyEye,
		[Token(Token = "0x4000FB7")]
		TintinRocket,
		[Token(Token = "0x4000FB8")]
		BloodBowlBall,
		[Token(Token = "0x4000FB9")]
		LizardHorn,
		[Token(Token = "0x4000FBA")]
		FossilCard,
		[Token(Token = "0x4000FBB")]
		NukeBossCider,
		[Token(Token = "0x4000FBC")]
		Enterprise,
		[Token(Token = "0x4000FBD")]
		ChompyMiniature,
		[Token(Token = "0x4000FBE")]
		AsterixHelmet,
		[Token(Token = "0x4000FBF")]
		MarioShroom,
		[Token(Token = "0x4000FC0")]
		ChineseHeadset,
		[Token(Token = "0x4000FC1")]
		DeepRockMiner,
		[Token(Token = "0x4000FC2")]
		GoldenDisc
	}

	[Token(Token = "0x4000F6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Loot[] lootPrefabs;

	[Token(Token = "0x4000F6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Loot[] relicPrefabs;

	[Token(Token = "0x4000F6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LootSpawnAndDespawnManager instance;

	[Token(Token = "0x4000F70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool initialized;

	[Token(Token = "0x4000F71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<LootType, Loot> lootTypePrefabDictionary;

	[Token(Token = "0x4000F72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<LootType, Loot> relicTypePrefabDictionary;

	[Token(Token = "0x4000F73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly List<LootType> golds;

	[Token(Token = "0x4000F74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly List<LootType> brineStones;

	[Token(Token = "0x4000F75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly List<LootType> boombastiums;

	[Token(Token = "0x4000F76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly List<LootType> marcoPoloniums;

	[Token(Token = "0x4000F77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly List<LootType> enigmiums;

	[Token(Token = "0x170001F5")]
	public Loot[] RelicPrefabs
	{
		[Token(Token = "0x6001120")]
		[Address(RVA = "0x11440CC", Offset = "0x11440CC", VA = "0x11440CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F6")]
	public Loot[] LootPrefabs
	{
		[Token(Token = "0x6001121")]
		[Address(RVA = "0x11440D4", Offset = "0x11440D4", VA = "0x11440D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F7")]
	public static LootSpawnAndDespawnManager Instance
	{
		[Token(Token = "0x6001122")]
		[Address(RVA = "0x11440DC", Offset = "0x11440DC", VA = "0x11440DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001123")]
	[Address(RVA = "0x11441E8", Offset = "0x11441E8", VA = "0x11441E8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001124")]
	[Address(RVA = "0x1144300", Offset = "0x1144300", VA = "0x1144300", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001125")]
	[Address(RVA = "0x1144318", Offset = "0x1144318", VA = "0x1144318")]
	private void TryInitialize()
	{
	}

	[Token(Token = "0x6001126")]
	[Address(RVA = "0x1144B74", Offset = "0x1144B74", VA = "0x1144B74")]
	public Loot SpawnLoot(GameObject loot, Vector3 position, Quaternion rotation, Loot.LootSource lootSource, bool roomObject = false, [Optional] object[] customData)
	{
		return null;
	}

	[Token(Token = "0x6001127")]
	[Address(RVA = "0x1144D3C", Offset = "0x1144D3C", VA = "0x1144D3C")]
	public Loot SpawnLoot(LootType lootType, Vector3 position, Quaternion rotation, Loot.LootSource lootSource, bool roomObject = false, [Optional] object[] customData)
	{
		return null;
	}

	[Token(Token = "0x6001128")]
	[Address(RVA = "0x1145278", Offset = "0x1145278", VA = "0x1145278")]
	public void DeSpawnLoot(Loot lootToDespawn)
	{
	}

	[Token(Token = "0x6001129")]
	[Address(RVA = "0x11452AC", Offset = "0x11452AC", VA = "0x11452AC")]
	public void DeSpawnLoot(GameObject lootToDespawn)
	{
	}

	[Token(Token = "0x600112A")]
	[Address(RVA = "0x11452B8", Offset = "0x11452B8", VA = "0x11452B8")]
	public int GetLootTypeValue(LootType lootType)
	{
		return default(int);
	}

	[Token(Token = "0x600112B")]
	[Address(RVA = "0x1145410", Offset = "0x1145410", VA = "0x1145410")]
	public LootType RandomRelic()
	{
		return default(LootType);
	}

	[Token(Token = "0x600112C")]
	[Address(RVA = "0x11454A8", Offset = "0x11454A8", VA = "0x11454A8")]
	public Loot GetLootPrefab(LootType lootType)
	{
		return null;
	}

	[Token(Token = "0x600112D")]
	[Address(RVA = "0x11455F8", Offset = "0x11455F8", VA = "0x11455F8")]
	public LootType GetBigOre(LootType smallOre)
	{
		return default(LootType);
	}

	[Token(Token = "0x600112E")]
	[Address(RVA = "0x114586C", Offset = "0x114586C", VA = "0x114586C")]
	public LootSpawnAndDespawnManager()
	{
	}
}
[Token(Token = "0x2000248")]
public class MiscSpawnAndDespawnManager : SpawnAndDespawnManager
{
	[Token(Token = "0x4000FC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] prePooledObjects;

	[Token(Token = "0x4000FC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject smallHitFX;

	[Token(Token = "0x4000FC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject mediumHitFX;

	[Token(Token = "0x4000FC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject largeHitFX;

	[Token(Token = "0x4000FC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject bloodHitFX;

	[Token(Token = "0x4000FC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<GameObject> _spawnedMisc;

	[Token(Token = "0x4000FC9")]
	private const float otherParticleCullingDistance = 50f;

	[Token(Token = "0x4000FCA")]
	private const float Q2ParticleCullingDistance = 20f;

	[Token(Token = "0x4000FCB")]
	private const float Q1ParticleCullingDistance = 10f;

	[Token(Token = "0x6001130")]
	[Address(RVA = "0x1145E4C", Offset = "0x1145E4C", VA = "0x1145E4C", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001131")]
	[Address(RVA = "0x114602C", Offset = "0x114602C", VA = "0x114602C")]
	private void PoolHitFX()
	{
	}

	[Token(Token = "0x6001132")]
	[Address(RVA = "0x1146320", Offset = "0x1146320", VA = "0x1146320")]
	public GameObject Spawn(GameObject objectToSpawn, Vector3 position, Quaternion rotation, bool roomObject = false, bool useNetworking = true, int poolSizeIfCreating = 2, [Optional] object[] customData)
	{
		return null;
	}

	[Token(Token = "0x6001133")]
	[Address(RVA = "0x11467DC", Offset = "0x11467DC", VA = "0x11467DC")]
	public void DespawnObject(GameObject objectToDespawn, bool useNetworking = true, float despawnTime = 0f)
	{
	}

	[Token(Token = "0x6001134")]
	[Address(RVA = "0x11468A0", Offset = "0x11468A0", VA = "0x11468A0")]
	public void PlayHitFX(Vector3 point, float impactForce, Vector3 normal)
	{
	}

	[Token(Token = "0x6001135")]
	[Address(RVA = "0x1146BD8", Offset = "0x1146BD8", VA = "0x1146BD8")]
	private static bool CheckIfTooFar(Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x6001136")]
	[Address(RVA = "0x1146D80", Offset = "0x1146D80", VA = "0x1146D80")]
	public void PlayBloodHitFX(Vector3 point)
	{
	}

	[Token(Token = "0x6001137")]
	[Address(RVA = "0x1146E74", Offset = "0x1146E74", VA = "0x1146E74")]
	public void DespawnAllMisc(bool logging = false)
	{
	}

	[Token(Token = "0x6001138")]
	[Address(RVA = "0x1146F9C", Offset = "0x1146F9C", VA = "0x1146F9C")]
	public MiscSpawnAndDespawnManager()
	{
	}
}
[Token(Token = "0x2000249")]
public class SpawnAndDespawnManager : MonoBehaviour
{
	[Token(Token = "0x4000FCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected GameObjectPoolManager gameObjectPoolManager;

	[Token(Token = "0x4000FCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GameObject> _spawnedPhotonObjects;

	[Token(Token = "0x4000FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LogLevel logLevel;

	[Token(Token = "0x6001139")]
	[Address(RVA = "0x11434B8", Offset = "0x11434B8", VA = "0x11434B8", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600113A")]
	[Address(RVA = "0x1147020", Offset = "0x1147020", VA = "0x1147020", Slot = "5")]
	protected virtual GameObject Spawn(GameObject objectToSpawn, string path, Vector3 position, Quaternion rotation, bool roomObject = false, bool addToSpawnedPhotonObjects = true, [Optional] object[] customData)
	{
		return null;
	}

	[Token(Token = "0x600113B")]
	[Address(RVA = "0x1147324", Offset = "0x1147324", VA = "0x1147324", Slot = "6")]
	protected virtual void Despawn(GameObject objectToDeSpawn)
	{
	}

	[Token(Token = "0x600113C")]
	[Address(RVA = "0x11476A8", Offset = "0x11476A8", VA = "0x11476A8")]
	public void Pool(GameObject objectToPool, int poolSize, int maxSize)
	{
	}

	[Token(Token = "0x600113D")]
	[Address(RVA = "0x1147848", Offset = "0x1147848", VA = "0x1147848")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600113E")]
	[Address(RVA = "0x114784C", Offset = "0x114784C", VA = "0x114784C")]
	public void DestroySpawnedPhotonObjects()
	{
	}

	[Token(Token = "0x600113F")]
	[Address(RVA = "0x1147A54", Offset = "0x1147A54", VA = "0x1147A54")]
	public void ReleaseAllInPool()
	{
	}

	[Token(Token = "0x6001140")]
	[Address(RVA = "0x1147CF0", Offset = "0x1147CF0", VA = "0x1147CF0")]
	public void ClearPools()
	{
	}

	[Token(Token = "0x6001141")]
	[Address(RVA = "0x1144044", Offset = "0x1144044", VA = "0x1144044")]
	public SpawnAndDespawnManager()
	{
	}
}
[Token(Token = "0x200024A")]
public class ToolSpawnAndDespawnManager : SpawnAndDespawnManager
{
	[Token(Token = "0x6001142")]
	[Address(RVA = "0x1147DA4", Offset = "0x1147DA4", VA = "0x1147DA4")]
	public GameObject Spawn(GameObject objectToSpawn, Vector3 position, Quaternion rotation, bool roomObject = false, bool useNetworking = true, [Optional] object[] customData)
	{
		return null;
	}

	[Token(Token = "0x6001143")]
	[Address(RVA = "0x1147FE8", Offset = "0x1147FE8", VA = "0x1147FE8")]
	public void DespawnObject(GameObject objectToDespawn, bool useNetworking = true, float despawnTime = 0f)
	{
	}

	[Token(Token = "0x6001144")]
	[Address(RVA = "0x11480AC", Offset = "0x11480AC", VA = "0x11480AC")]
	public ToolSpawnAndDespawnManager()
	{
	}
}
[Token(Token = "0x200024B")]
public class TierManager : Singleton<TierManager>
{
	[Serializable]
	[Token(Token = "0x200024C")]
	public class MyToolUpgradedEvent : UnityEvent<Tool.ToolType>
	{
		[Token(Token = "0x6001159")]
		[Address(RVA = "0x11489F8", Offset = "0x11489F8", VA = "0x11489F8")]
		public MyToolUpgradedEvent()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200024D")]
	public class MyOtherUpgradedEvent : UnityEvent<OtherUpgradePathScriptableObject.UpgradeType>
	{
		[Token(Token = "0x600115A")]
		[Address(RVA = "0x1148A40", Offset = "0x1148A40", VA = "0x1148A40")]
		public MyOtherUpgradedEvent()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200024E")]
	public class ToolTierHolder
	{
		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Tool.ToolType toolType;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int currentTier;

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x1148A88", Offset = "0x1148A88", VA = "0x1148A88")]
		public ToolTierHolder()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200024F")]
	public class OtherTierHolder
	{
		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OtherUpgradePathScriptableObject.UpgradeType otherType;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int currentTier;

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x1148A90", Offset = "0x1148A90", VA = "0x1148A90")]
		public OtherTierHolder()
		{
		}
	}

	[Token(Token = "0x2000250")]
	[CompilerGenerated]
	private sealed class <_ChangeHandAndSocketTool>d__30 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TierManager <>4__this;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Tool.ToolType toolType;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int newToolTier;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Tool> <specificTools>5__2;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__3;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<HVRGrabberBase> <grabbers>5__4;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HVRSocket <oldSocket>5__5;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool <oldGhostModelActive>5__6;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HVRSocket <oldGhostModelSocket>5__7;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 <oldGhostModelScale>5__8;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject <spawnedTool>5__9;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private HVRGrabbable <spawnedToolGrabbable>5__10;

		[Token(Token = "0x170001F8")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001160")]
			[Address(RVA = "0x114AC00", Offset = "0x114AC00", VA = "0x114AC00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001F9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001162")]
			[Address(RVA = "0x114AC48", Offset = "0x114AC48", VA = "0x114AC48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x1149B14", Offset = "0x1149B14", VA = "0x1149B14")]
		[DebuggerHidden]
		public <_ChangeHandAndSocketTool>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x114A0DC", Offset = "0x114A0DC", VA = "0x114A0DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x114A0E0", Offset = "0x114A0E0", VA = "0x114A0E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x114AC08", Offset = "0x114AC08", VA = "0x114AC08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000FCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MyToolUpgradedEvent OnToolUpgraded;

	[Token(Token = "0x4000FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MyOtherUpgradedEvent OnOtherUpgraded;

	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<ToolUpgradePathScriptableObject> toolUpgradePathScriptableObjects;

	[Token(Token = "0x4000FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<OtherUpgradePathScriptableObject> otherUpgradePathScriptableObjects;

	[Token(Token = "0x4000FD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<OtherUpgradePathScriptableObject> environmentUpgradePathScriptableObjects;

	[Token(Token = "0x4000FD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<ToolTierHolder> toolTierHolders;

	[Token(Token = "0x4000FD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<OtherTierHolder> otherTierHolders;

	[Token(Token = "0x4000FD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TierManagerPhotonView tierManagerPhotonView;

	[Token(Token = "0x4000FD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip toolUpgradeClip;

	[Token(Token = "0x4000FD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public bool toolTiersLoaded;

	[Token(Token = "0x4000FD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Tool> allTools;

	[Token(Token = "0x6001145")]
	[Address(RVA = "0x11480B0", Offset = "0x11480B0", VA = "0x11480B0", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001146")]
	[Address(RVA = "0x1148A98", Offset = "0x1148A98", VA = "0x1148A98")]
	private void Start()
	{
	}

	[Token(Token = "0x6001147")]
	[Address(RVA = "0x1148BF4", Offset = "0x1148BF4", VA = "0x1148BF4")]
	public void Reset()
	{
	}

	[Token(Token = "0x6001148")]
	[Address(RVA = "0x1148CE0", Offset = "0x1148CE0", VA = "0x1148CE0")]
	private void NewSceneLoaded()
	{
	}

	[Token(Token = "0x6001149")]
	[Address(RVA = "0x1148DD0", Offset = "0x1148DD0", VA = "0x1148DD0", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600114A")]
	[Address(RVA = "0x1148F8C", Offset = "0x1148F8C", VA = "0x1148F8C")]
	public TierManagerPhotonView GetTierManagerPhotonView()
	{
		return null;
	}

	[Token(Token = "0x600114B")]
	[Address(RVA = "0x1148F94", Offset = "0x1148F94", VA = "0x1148F94")]
	public void UpdateToolTier(Tool.ToolType toolType, int newTier, bool playSound = true)
	{
	}

	[Token(Token = "0x600114C")]
	[Address(RVA = "0x11493B8", Offset = "0x11493B8", VA = "0x11493B8")]
	public void UpdateOtherTier(OtherUpgradePathScriptableObject.UpgradeType upgradeType, int newTier, bool playSound = true)
	{
	}

	[Token(Token = "0x600114D")]
	[Address(RVA = "0x11496C0", Offset = "0x11496C0", VA = "0x11496C0")]
	public int GetCurrentToolTier(Tool.ToolType toolType)
	{
		return default(int);
	}

	[Token(Token = "0x600114E")]
	[Address(RVA = "0x1149784", Offset = "0x1149784", VA = "0x1149784")]
	public int GetCurrentOtherTier(OtherUpgradePathScriptableObject.UpgradeType upgradeType)
	{
		return default(int);
	}

	[Token(Token = "0x600114F")]
	[Address(RVA = "0x1149848", Offset = "0x1149848", VA = "0x1149848")]
	public void UpdateAllUpgradeablesEvent()
	{
	}

	[Token(Token = "0x6001150")]
	[Address(RVA = "0x114998C", Offset = "0x114998C", VA = "0x114998C")]
	public List<ToolTierHolder> GetToolTierHolders()
	{
		return null;
	}

	[Token(Token = "0x6001151")]
	[Address(RVA = "0x1149994", Offset = "0x1149994", VA = "0x1149994")]
	public List<OtherTierHolder> GetOtherTierHolders()
	{
		return null;
	}

	[Token(Token = "0x6001152")]
	[Address(RVA = "0x114999C", Offset = "0x114999C", VA = "0x114999C")]
	public void AddToolToList(Tool toolToAdd)
	{
	}

	[Token(Token = "0x6001153")]
	[Address(RVA = "0x1149A84", Offset = "0x1149A84", VA = "0x1149A84")]
	public void RemoveToolFromList(Tool toolToRemove)
	{
	}

	[Token(Token = "0x6001154")]
	[Address(RVA = "0x1149330", Offset = "0x1149330", VA = "0x1149330")]
	[IteratorStateMachine(typeof(<_ChangeHandAndSocketTool>d__30))]
	public IEnumerator<float> _ChangeHandAndSocketTool(Tool.ToolType toolType, int newToolTier)
	{
		return null;
	}

	[Token(Token = "0x6001155")]
	[Address(RVA = "0x1149B3C", Offset = "0x1149B3C", VA = "0x1149B3C")]
	public GameObject GetGameObjectFromTypeAndTier(Tool.ToolType toolType, int tier)
	{
		return null;
	}

	[Token(Token = "0x6001156")]
	[Address(RVA = "0x1149D6C", Offset = "0x1149D6C", VA = "0x1149D6C")]
	public GameObject GetCurrentHighestTierTool(Tool.ToolType toolType)
	{
		return null;
	}

	[Token(Token = "0x6001157")]
	[Address(RVA = "0x1149D98", Offset = "0x1149D98", VA = "0x1149D98")]
	public GameObject GetRandomHighestTierToolExludingDynamite()
	{
		return null;
	}

	[Token(Token = "0x6001158")]
	[Address(RVA = "0x1149EAC", Offset = "0x1149EAC", VA = "0x1149EAC")]
	public TierManager()
	{
	}
}
[Token(Token = "0x2000251")]
public class ToolSocketManager : Singleton<ToolSocketManager>
{
	[Token(Token = "0x4000FEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<HVRSocket, int> socketIdDictionary;

	[Token(Token = "0x4000FED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, HVRSocket> idSocketDictionary;

	[Token(Token = "0x4000FEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ToolSocket> localPlayerToolSockets;

	[Token(Token = "0x4000FEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<Tool, int> toolIDDictionary;

	[Token(Token = "0x6001163")]
	[Address(RVA = "0x114ACA4", Offset = "0x114ACA4", VA = "0x114ACA4")]
	protected void Start()
	{
	}

	[Token(Token = "0x6001164")]
	[Address(RVA = "0x114AE00", Offset = "0x114AE00", VA = "0x114AE00")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001165")]
	[Address(RVA = "0x114AE74", Offset = "0x114AE74", VA = "0x114AE74")]
	public void Register(HVRSocket toolSocket, int id)
	{
	}

	[Token(Token = "0x6001166")]
	[Address(RVA = "0x114AFC4", Offset = "0x114AFC4", VA = "0x114AFC4")]
	public void RegisterTool(Tool tool, int id)
	{
	}

	[Token(Token = "0x6001167")]
	[Address(RVA = "0x114B0A8", Offset = "0x114B0A8", VA = "0x114B0A8")]
	public void UnRegisterTool(Tool tool)
	{
	}

	[Token(Token = "0x6001168")]
	[Address(RVA = "0x114B138", Offset = "0x114B138", VA = "0x114B138")]
	public void AddLocalToolSocket(ToolSocket socket)
	{
	}

	[Token(Token = "0x6001169")]
	[Address(RVA = "0x114B220", Offset = "0x114B220", VA = "0x114B220")]
	public int GetIdBySocket(HVRSocket socket)
	{
		return default(int);
	}

	[Token(Token = "0x600116A")]
	[Address(RVA = "0x114B2F8", Offset = "0x114B2F8", VA = "0x114B2F8")]
	public HVRSocket GetSocketById(int id)
	{
		return null;
	}

	[Token(Token = "0x600116B")]
	[Address(RVA = "0x114B3F8", Offset = "0x114B3F8", VA = "0x114B3F8")]
	public void DeparentAllToolsAndGhostTools()
	{
	}

	[Token(Token = "0x600116C")]
	[Address(RVA = "0x114B5E4", Offset = "0x114B5E4", VA = "0x114B5E4")]
	public List<ToolSocket> GetAllLocalToolSockets()
	{
		return null;
	}

	[Token(Token = "0x600116D")]
	[Address(RVA = "0x114B6DC", Offset = "0x114B6DC", VA = "0x114B6DC")]
	public Dictionary<Tool, int> GetPlayerTools()
	{
		return null;
	}

	[Token(Token = "0x600116E")]
	[Address(RVA = "0x114B6E4", Offset = "0x114B6E4", VA = "0x114B6E4")]
	public bool HasToolSlotted(Tool.ToolType toolType)
	{
		return default(bool);
	}

	[Token(Token = "0x600116F")]
	[Address(RVA = "0x114B868", Offset = "0x114B868", VA = "0x114B868")]
	public ToolSocketManager()
	{
	}
}
[Token(Token = "0x2000252")]
public class UpdateManager : MonoBehaviour
{
	[Token(Token = "0x4000FF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UpdateManager Instance;

	[NonSerialized]
	[Token(Token = "0x4000FF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<RigidBodyFloat> rigidbodyFloats;

	[NonSerialized]
	[Token(Token = "0x4000FF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<WallNode> floatingLoots;

	[Token(Token = "0x6001170")]
	[Address(RVA = "0x114BA20", Offset = "0x114BA20", VA = "0x114BA20")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001171")]
	[Address(RVA = "0x114BB50", Offset = "0x114BB50", VA = "0x114BB50")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001172")]
	[Address(RVA = "0x114BBC0", Offset = "0x114BBC0", VA = "0x114BBC0")]
	public UpdateManager()
	{
	}
}
[Token(Token = "0x2000253")]
public class Matchstick : MonoBehaviour
{
	[Token(Token = "0x6001173")]
	[Address(RVA = "0x114BCA0", Offset = "0x114BCA0", VA = "0x114BCA0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001174")]
	[Address(RVA = "0x114BE70", Offset = "0x114BE70", VA = "0x114BE70")]
	public Matchstick()
	{
	}
}
[Token(Token = "0x2000254")]
public class MenuManager : MonoBehaviour
{
	[Token(Token = "0x4000FF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Panel currentPanel;

	[Token(Token = "0x4000FF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Panel> panelHistory;

	[Token(Token = "0x6001175")]
	[Address(RVA = "0x114BE78", Offset = "0x114BE78", VA = "0x114BE78")]
	private void Start()
	{
	}

	[Token(Token = "0x6001176")]
	[Address(RVA = "0x114BE7C", Offset = "0x114BE7C", VA = "0x114BE7C")]
	private void SetupPanels()
	{
	}

	[Token(Token = "0x6001177")]
	[Address(RVA = "0x114BF70", Offset = "0x114BF70", VA = "0x114BF70")]
	private void Update()
	{
	}

	[Token(Token = "0x6001178")]
	[Address(RVA = "0x114BFE4", Offset = "0x114BFE4", VA = "0x114BFE4")]
	public void GoToPrevious()
	{
	}

	[Token(Token = "0x6001179")]
	[Address(RVA = "0x114C0FC", Offset = "0x114C0FC", VA = "0x114C0FC")]
	public void SetCurrentWithHistory(Panel newPanel)
	{
	}

	[Token(Token = "0x600117A")]
	[Address(RVA = "0x114C0B8", Offset = "0x114C0B8", VA = "0x114C0B8")]
	private void SetCurrent(Panel newPanel)
	{
	}

	[Token(Token = "0x600117B")]
	[Address(RVA = "0x114C1D0", Offset = "0x114C1D0", VA = "0x114C1D0")]
	public MenuManager()
	{
	}
}
[Token(Token = "0x2000255")]
public class Panel : MonoBehaviour
{
	[Token(Token = "0x4000FF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Canvas canvas;

	[Token(Token = "0x4000FF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MenuManager menuManager;

	[Token(Token = "0x600117C")]
	[Address(RVA = "0x114C258", Offset = "0x114C258", VA = "0x114C258")]
	private void Awake()
	{
	}

	[Token(Token = "0x600117D")]
	[Address(RVA = "0x114BF34", Offset = "0x114BF34", VA = "0x114BF34")]
	public void Setup(MenuManager menuManager)
	{
	}

	[Token(Token = "0x600117E")]
	[Address(RVA = "0x114BF50", Offset = "0x114BF50", VA = "0x114BF50")]
	public void Show()
	{
	}

	[Token(Token = "0x600117F")]
	[Address(RVA = "0x114C1B0", Offset = "0x114C1B0", VA = "0x114C1B0")]
	public void Hide()
	{
	}

	[Token(Token = "0x6001180")]
	[Address(RVA = "0x114C2B0", Offset = "0x114C2B0", VA = "0x114C2B0")]
	public Panel()
	{
	}
}
[Token(Token = "0x2000256")]
public class MicPermissionRequest : MonoBehaviour
{
	[Token(Token = "0x6001181")]
	[Address(RVA = "0x114C2B8", Offset = "0x114C2B8", VA = "0x114C2B8")]
	public MicPermissionRequest()
	{
	}
}
[Token(Token = "0x2000257")]
public class MigoPowerCoupling : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x2000258")]
	public class MigoPowerCouplingDoorRiddle
	{
		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string answer;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int beamAmount;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string[] possibleLetters;

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x114D5F8", Offset = "0x114D5F8", VA = "0x114D5F8")]
		public void GenerateRiddle()
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x114D468", Offset = "0x114D468", VA = "0x114D468")]
		public MigoPowerCouplingDoorRiddle()
		{
		}
	}

	[Token(Token = "0x2000259")]
	[CompilerGenerated]
	private sealed class <_DamagePlayer>d__22 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MigoPowerCoupling <>4__this;

		[Token(Token = "0x170001FA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001196")]
			[Address(RVA = "0x114E3E0", Offset = "0x114E3E0", VA = "0x114E3E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001198")]
			[Address(RVA = "0x114E428", Offset = "0x114E428", VA = "0x114E428", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x114C8A4", Offset = "0x114C8A4", VA = "0x114C8A4")]
		[DebuggerHidden]
		public <_DamagePlayer>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x114DE78", Offset = "0x114DE78", VA = "0x114DE78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x114DE7C", Offset = "0x114DE7C", VA = "0x114DE7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x114E3E8", Offset = "0x114E3E8", VA = "0x114E3E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200025A")]
	[CompilerGenerated]
	private sealed class <_WaitAndSyncStatus>d__29 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MigoPowerCoupling <>4__this;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player newPlayer;

		[Token(Token = "0x170001FC")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600119C")]
			[Address(RVA = "0x114E880", Offset = "0x114E880", VA = "0x114E880", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600119E")]
			[Address(RVA = "0x114E8C8", Offset = "0x114E8C8", VA = "0x114E8C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x114DD08", Offset = "0x114DD08", VA = "0x114DD08")]
		[DebuggerHidden]
		public <_WaitAndSyncStatus>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x114E484", Offset = "0x114E484", VA = "0x114E484", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x114E488", Offset = "0x114E488", VA = "0x114E488", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x114E888", Offset = "0x114E888", VA = "0x114E888", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000FF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Light specific stuff")]
	private bool triggerLight;

	[Token(Token = "0x4000FF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[Header("Door specific stuff")]
	[SerializeField]
	private bool triggerDoor;

	[Token(Token = "0x4000FF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject migoDoorPrefab;

	[Token(Token = "0x4000FFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip warningBeep;

	[Token(Token = "0x4000FFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip explosion;

	[Token(Token = "0x4000FFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem explosionParticleSystem;

	[Token(Token = "0x4000FFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private LayerMask hitLayers;

	[Token(Token = "0x4000FFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private int damageAmount;

	[Token(Token = "0x4000FFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MigoPowerCouplingDoor migoPowerCouplingDoor;

	[Token(Token = "0x4001000")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MigoPowerCouplingBeam migoPowerCouplingBeam;

	[Token(Token = "0x4001001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private MigoTorch migoTorch;

	[Token(Token = "0x4001002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Room myRoom;

	[Token(Token = "0x4001003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private RoomTransitionTransform myTransitionTransform;

	[Token(Token = "0x4001004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private MigoPowerCouplingUIHandler migoPowerCouplingUIHandler;

	[Token(Token = "0x4001005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private MigoPowerCouplingDoorRiddle currentRiddle;

	[Token(Token = "0x4001006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Collider[] _explosiveColliders;

	[Token(Token = "0x4001007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool doDamage;

	[Token(Token = "0x4001008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<Transform> _alreadyDamagedList;

	[Token(Token = "0x6001182")]
	[Address(RVA = "0x114C2C0", Offset = "0x114C2C0", VA = "0x114C2C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001183")]
	[Address(RVA = "0x114C490", Offset = "0x114C490", VA = "0x114C490", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6001184")]
	[Address(RVA = "0x114C4F4", Offset = "0x114C4F4", VA = "0x114C4F4", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6001185")]
	[Address(RVA = "0x114C558", Offset = "0x114C558", VA = "0x114C558")]
	public void PowerCouplingActivated(string currentAnswer)
	{
	}

	[Token(Token = "0x6001186")]
	[Address(RVA = "0x114C830", Offset = "0x114C830", VA = "0x114C830")]
	[IteratorStateMachine(typeof(<_DamagePlayer>d__22))]
	private IEnumerator<float> _DamagePlayer()
	{
		return null;
	}

	[Token(Token = "0x6001187")]
	[Address(RVA = "0x114C8CC", Offset = "0x114C8CC", VA = "0x114C8CC")]
	private void WarningCount(int count)
	{
	}

	[Token(Token = "0x6001188")]
	[Address(RVA = "0x114C9D4", Offset = "0x114C9D4", VA = "0x114C9D4")]
	private void Explosion()
	{
	}

	[Token(Token = "0x6001189")]
	[Address(RVA = "0x114CE3C", Offset = "0x114CE3C", VA = "0x114CE3C")]
	public void SetConnectedTransitionTransform(RoomTransitionTransform roomTransitionTransform, bool active, bool elevatorTransitionTransform = false)
	{
	}

	[Token(Token = "0x600118A")]
	[Address(RVA = "0x114D954", Offset = "0x114D954", VA = "0x114D954")]
	[PunRPC]
	private void SetConnectedTransitionTransformRPC(Vector3 newPosition, Quaternion newRotation, string answerText, int beamAmount, bool elevatorTransitionTransform)
	{
	}

	[Token(Token = "0x600118B")]
	[Address(RVA = "0x114DB8C", Offset = "0x114DB8C", VA = "0x114DB8C")]
	[PunRPC]
	private void DisablePowerCouplingObjectRPC()
	{
	}

	[Token(Token = "0x600118C")]
	[Address(RVA = "0x114DBB0", Offset = "0x114DBB0", VA = "0x114DBB0", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x600118D")]
	[Address(RVA = "0x114DC78", Offset = "0x114DC78", VA = "0x114DC78")]
	[IteratorStateMachine(typeof(<_WaitAndSyncStatus>d__29))]
	private IEnumerator<float> _WaitAndSyncStatus(Player newPlayer)
	{
		return null;
	}

	[Token(Token = "0x600118E")]
	[Address(RVA = "0x114DD30", Offset = "0x114DD30", VA = "0x114DD30")]
	public void UpdateCurrentAnswer(string currentAnswer)
	{
	}

	[Token(Token = "0x600118F")]
	[Address(RVA = "0x114DDE0", Offset = "0x114DDE0", VA = "0x114DDE0")]
	public bool IsDoorCoupling()
	{
		return default(bool);
	}

	[Token(Token = "0x6001190")]
	[Address(RVA = "0x114DDE8", Offset = "0x114DDE8", VA = "0x114DDE8")]
	public MigoPowerCoupling()
	{
	}
}
[Token(Token = "0x200025B")]
public class MigoPowerCouplingBeam : MonoBehaviour
{
	[Token(Token = "0x200025C")]
	public class LightningBolt
	{
		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LightningBoltScript lightningBoltScript;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LineRenderer lightningBoltRenderer;

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x114EDBC", Offset = "0x114EDBC", VA = "0x114EDBC")]
		public LightningBolt()
		{
		}
	}

	[Token(Token = "0x200025D")]
	[CompilerGenerated]
	private sealed class <_TrackHandAndMoveBeam>d__27 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MigoPowerCouplingBeam <>4__this;

		[Token(Token = "0x170001FE")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60011B1")]
			[Address(RVA = "0x114FBD0", Offset = "0x114FBD0", VA = "0x114FBD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011B3")]
			[Address(RVA = "0x114FC18", Offset = "0x114FC18", VA = "0x114FC18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x114F538", Offset = "0x114F538", VA = "0x114F538")]
		[DebuggerHidden]
		public <_TrackHandAndMoveBeam>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x114F840", Offset = "0x114F840", VA = "0x114F840", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x114F844", Offset = "0x114F844", VA = "0x114F844", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x114FBD8", Offset = "0x114FBD8", VA = "0x114FBD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float maxDistanceFromStartingPoint;

	[Token(Token = "0x4001014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private int minConnectedAmount;

	[Token(Token = "0x4001015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource beamConnectedAudioSource;

	[Token(Token = "0x4001016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<MigoPowerCouplingBeamPoint> startingPoints;

	[Token(Token = "0x4001017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<MigoPowerCouplingBeamPoint> endPoints;

	[Token(Token = "0x4001018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MigoPowerCoupling migoPowerCoupling;

	[Token(Token = "0x4001019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool startingPointActive;

	[Token(Token = "0x400101A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool beamReady;

	[Token(Token = "0x400101B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	private bool cutBeam;

	[Token(Token = "0x400101C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MigoPowerCouplingBeamPoint currentBeamStartingPoint;

	[Token(Token = "0x400101D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MigoPowerCouplingBeamPoint currentBeamEndPoint;

	[Token(Token = "0x400101E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float currentHandDistance;

	[Token(Token = "0x400101F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private CoroutineHandle trackAndMoveBeamCoroutine;

	[Token(Token = "0x4001020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LightningBolt[] lightningBolts;

	[Token(Token = "0x4001021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private LightningBolt currentInUseLightninBolt;

	[Token(Token = "0x4001022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int connectedBeams;

	[Token(Token = "0x4001023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string currentAnswer;

	[Token(Token = "0x4001024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private PlayerAvatar currentPlayerWhoIgnitedBeam;

	[Token(Token = "0x600119F")]
	[Address(RVA = "0x114E924", Offset = "0x114E924", VA = "0x114E924")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011A0")]
	[Address(RVA = "0x114E940", Offset = "0x114E940", VA = "0x114E940")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x60011A1")]
	[Address(RVA = "0x114EDC4", Offset = "0x114EDC4", VA = "0x114EDC4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60011A2")]
	[Address(RVA = "0x114EF1C", Offset = "0x114EF1C", VA = "0x114EF1C")]
	public void BeamIgnited(bool start, MigoPowerCouplingBeamPoint beamPoint)
	{
	}

	[Token(Token = "0x60011A3")]
	[Address(RVA = "0x114E124", Offset = "0x114E124", VA = "0x114E124")]
	public void SetDangerColor(bool danger)
	{
	}

	[Token(Token = "0x60011A4")]
	[Address(RVA = "0x114F4BC", Offset = "0x114F4BC", VA = "0x114F4BC")]
	public void SetMinConnectedAmount(int beamAmount)
	{
	}

	[Token(Token = "0x60011A5")]
	[Address(RVA = "0x114E2DC", Offset = "0x114E2DC", VA = "0x114E2DC")]
	public void ResetBeams()
	{
	}

	[Token(Token = "0x60011A6")]
	[Address(RVA = "0x114F228", Offset = "0x114F228", VA = "0x114F228")]
	private void PowerCouplingDone()
	{
	}

	[Token(Token = "0x60011A7")]
	[Address(RVA = "0x114F1B8", Offset = "0x114F1B8", VA = "0x114F1B8")]
	private void StartTrackingHand()
	{
	}

	[Token(Token = "0x60011A8")]
	[Address(RVA = "0x114F4C4", Offset = "0x114F4C4", VA = "0x114F4C4")]
	[IteratorStateMachine(typeof(<_TrackHandAndMoveBeam>d__27))]
	private IEnumerator<float> _TrackHandAndMoveBeam()
	{
		return null;
	}

	[Token(Token = "0x60011A9")]
	[Address(RVA = "0x114F560", Offset = "0x114F560", VA = "0x114F560")]
	private void CheckHandDistance()
	{
	}

	[Token(Token = "0x60011AA")]
	[Address(RVA = "0x114EDCC", Offset = "0x114EDCC", VA = "0x114EDCC")]
	private void CutBeam(bool onlyCurrentlyDragged = false)
	{
	}

	[Token(Token = "0x60011AB")]
	[Address(RVA = "0x114EC1C", Offset = "0x114EC1C", VA = "0x114EC1C")]
	private void DisableLightning(bool onlyCurrentlyDragged = false)
	{
	}

	[Token(Token = "0x60011AC")]
	[Address(RVA = "0x114F77C", Offset = "0x114F77C", VA = "0x114F77C")]
	public MigoPowerCouplingBeam()
	{
	}
}
[Token(Token = "0x200025E")]
public class MigoPowerCouplingBeamPoint : MonoBehaviour, IDamageable
{
	[Token(Token = "0x400102A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private DamageType takeDamageTypes;

	[Token(Token = "0x400102B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool start;

	[Token(Token = "0x400102C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string myLetter;

	[Token(Token = "0x400102D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem gasFX;

	[Token(Token = "0x400102E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource beamAudioSource;

	[Token(Token = "0x400102F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MigoPowerCouplingBeam migoPowerCouplingBeam;

	[Token(Token = "0x4001030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inUse;

	[Token(Token = "0x4001031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool originalFXColorSetted;

	[Token(Token = "0x4001032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem.MinMaxGradient originalGasFXColor;

	[Token(Token = "0x60011B4")]
	[Address(RVA = "0x114FC74", Offset = "0x114FC74", VA = "0x114FC74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60011B5")]
	[Address(RVA = "0x114FC7C", Offset = "0x114FC7C", VA = "0x114FC7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011B6")]
	[Address(RVA = "0x114FD20", Offset = "0x114FD20", VA = "0x114FD20", Slot = "4")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x60011B7")]
	[Address(RVA = "0x114FDB8", Offset = "0x114FDB8", VA = "0x114FDB8")]
	public bool IsStart()
	{
		return default(bool);
	}

	[Token(Token = "0x60011B8")]
	[Address(RVA = "0x114F11C", Offset = "0x114F11C", VA = "0x114F11C")]
	public void SetInUse(bool inUse)
	{
	}

	[Token(Token = "0x60011B9")]
	[Address(RVA = "0x114FDC0", Offset = "0x114FDC0", VA = "0x114FDC0")]
	public bool InUse()
	{
		return default(bool);
	}

	[Token(Token = "0x60011BA")]
	[Address(RVA = "0x114FDC8", Offset = "0x114FDC8", VA = "0x114FDC8")]
	public string GetMyLetter()
	{
		return null;
	}

	[Token(Token = "0x60011BB")]
	[Address(RVA = "0x114F35C", Offset = "0x114F35C", VA = "0x114F35C")]
	public void ChangeGasFXColor(bool danger)
	{
	}

	[Token(Token = "0x60011BC")]
	[Address(RVA = "0x114FDD0", Offset = "0x114FDD0", VA = "0x114FDD0")]
	public MigoPowerCouplingBeamPoint()
	{
	}
}
[Token(Token = "0x200025F")]
public class MigoPowerCouplingDoor : MonoBehaviour
{
	[Token(Token = "0x2000260")]
	[CompilerGenerated]
	private sealed class <_OpenDoor>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MigoPowerCouplingDoor <>4__this;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <time>5__2;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <newPosition>5__3;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <originalPosition>5__4;

		[Token(Token = "0x17000201")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60011C7")]
			[Address(RVA = "0x1150220", Offset = "0x1150220", VA = "0x1150220", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000202")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011C9")]
			[Address(RVA = "0x1150268", Offset = "0x1150268", VA = "0x1150268", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x114FEE0", Offset = "0x114FEE0", VA = "0x114FEE0")]
		[DebuggerHidden]
		public <_OpenDoor>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x114FF70", Offset = "0x114FF70", VA = "0x114FF70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x114FF74", Offset = "0x114FF74", VA = "0x114FF74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x1150228", Offset = "0x1150228", VA = "0x1150228", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject doorMovePoint;

	[Token(Token = "0x4001034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float moveAmount;

	[Token(Token = "0x4001035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshPro answerText;

	[Token(Token = "0x4001036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip doorOpeningAudioClip;

	[Token(Token = "0x4001037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 originalDoorMovepointLocalPosition;

	[Token(Token = "0x4001038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ParticleSystem openingParticles;

	[Token(Token = "0x17000200")]
	public bool isOpen
	{
		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x114FE48", Offset = "0x114FE48", VA = "0x114FE48")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x114FE50", Offset = "0x114FE50", VA = "0x114FE50")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60011BF")]
	[Address(RVA = "0x114C7C4", Offset = "0x114C7C4", VA = "0x114C7C4")]
	public void Open()
	{
	}

	[Token(Token = "0x60011C0")]
	[Address(RVA = "0x114D3F8", Offset = "0x114D3F8", VA = "0x114D3F8")]
	public void ResetDoorMovePointPosition()
	{
	}

	[Token(Token = "0x60011C1")]
	[Address(RVA = "0x114FE5C", Offset = "0x114FE5C", VA = "0x114FE5C")]
	[IteratorStateMachine(typeof(<_OpenDoor>d__12))]
	private IEnumerator<float> _OpenDoor(float duration)
	{
		return null;
	}

	[Token(Token = "0x60011C2")]
	[Address(RVA = "0x114D930", Offset = "0x114D930", VA = "0x114D930")]
	public void UpdateAnswerText(string answer)
	{
	}

	[Token(Token = "0x60011C3")]
	[Address(RVA = "0x114FF08", Offset = "0x114FF08", VA = "0x114FF08")]
	public MigoPowerCouplingDoor()
	{
	}
}
[Token(Token = "0x2000261")]
public class MigoPowerCouplingUIHandler : MonoBehaviour
{
	[Token(Token = "0x4001041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI doorClueText;

	[Token(Token = "0x60011CA")]
	[Address(RVA = "0x114C9B0", Offset = "0x114C9B0", VA = "0x114C9B0")]
	public void SetDoorClueText(string answer)
	{
	}

	[Token(Token = "0x60011CB")]
	[Address(RVA = "0x114E2B8", Offset = "0x114E2B8", VA = "0x114E2B8")]
	public void SetDoorClueTextColor(UnityEngine.Color color)
	{
	}

	[Token(Token = "0x60011CC")]
	[Address(RVA = "0x11502C4", Offset = "0x11502C4", VA = "0x11502C4")]
	public MigoPowerCouplingUIHandler()
	{
	}
}
[Token(Token = "0x2000262")]
public class MigoTorch : Torch
{
	[Token(Token = "0x2000263")]
	[CompilerGenerated]
	private sealed class <BlinkingLightEnable>d__7 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MigoTorch <>4__this;

		[Token(Token = "0x17000203")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60011D7")]
			[Address(RVA = "0x1151270", Offset = "0x1151270", VA = "0x1151270", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000204")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011D9")]
			[Address(RVA = "0x11512B8", Offset = "0x11512B8", VA = "0x11512B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x1150DFC", Offset = "0x1150DFC", VA = "0x1150DFC")]
		[DebuggerHidden]
		public <BlinkingLightEnable>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x1150F5C", Offset = "0x1150F5C", VA = "0x1150F5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x1150F60", Offset = "0x1150F60", VA = "0x1150F60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x1151278", Offset = "0x1151278", VA = "0x1151278", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Room myParentRoom;

	[Token(Token = "0x4001043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private MeshRenderer[] roomMeshRenderes;

	[Token(Token = "0x4001044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Dictionary<Material, List<MeshRenderer>> emissiveMeshRenderersDic;

	[Token(Token = "0x4001045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private List<Material> generatedEmissiveMaterials;

	[Token(Token = "0x4001046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private AudioSource lightsOnAudioSource;

	[Token(Token = "0x60011CD")]
	[Address(RVA = "0x11502CC", Offset = "0x11502CC", VA = "0x11502CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011CE")]
	[Address(RVA = "0x11509C8", Offset = "0x11509C8", VA = "0x11509C8", Slot = "59")]
	public override void ToggleFire(bool value, bool force = false)
	{
	}

	[Token(Token = "0x60011CF")]
	[Address(RVA = "0x114C750", Offset = "0x114C750", VA = "0x114C750")]
	[IteratorStateMachine(typeof(<BlinkingLightEnable>d__7))]
	public IEnumerator<float> BlinkingLightEnable()
	{
		return null;
	}

	[Token(Token = "0x60011D0")]
	[Address(RVA = "0x1150E24", Offset = "0x1150E24", VA = "0x1150E24", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60011D1")]
	[Address(RVA = "0x1150A08", Offset = "0x1150A08", VA = "0x1150A08")]
	private void ToggleEmission(bool isOn)
	{
	}

	[Token(Token = "0x60011D2")]
	[Address(RVA = "0x1150E54", Offset = "0x1150E54", VA = "0x1150E54", Slot = "58")]
	[PunRPC]
	protected override void ToggleFireRPC(bool value)
	{
	}

	[Token(Token = "0x60011D3")]
	[Address(RVA = "0x1150E60", Offset = "0x1150E60", VA = "0x1150E60")]
	public MigoTorch()
	{
	}
}
[Token(Token = "0x2000264")]
public class MoveBetweenTwoPoints : MonoBehaviour
{
	[Token(Token = "0x400104A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 startPoint;

	[Token(Token = "0x400104B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 endPoint;

	[Token(Token = "0x400104C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x60011DA")]
	[Address(RVA = "0x1151314", Offset = "0x1151314", VA = "0x1151314")]
	private void Start()
	{
	}

	[Token(Token = "0x60011DB")]
	[Address(RVA = "0x1151370", Offset = "0x1151370", VA = "0x1151370")]
	private void Update()
	{
	}

	[Token(Token = "0x60011DC")]
	[Address(RVA = "0x1151424", Offset = "0x1151424", VA = "0x1151424")]
	public MoveBetweenTwoPoints()
	{
	}
}
[Token(Token = "0x2000265")]
public class MoveChompyLid : MonoBehaviour
{
	[Token(Token = "0x400104D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x60011DD")]
	[Address(RVA = "0x1151434", Offset = "0x1151434", VA = "0x1151434")]
	private void Update()
	{
	}

	[Token(Token = "0x60011DE")]
	[Address(RVA = "0x11514E0", Offset = "0x11514E0", VA = "0x11514E0")]
	public MoveChompyLid()
	{
	}
}
[Token(Token = "0x2000266")]
public class MyClue : MonoBehaviourPun
{
	[Token(Token = "0x2000267")]
	[CompilerGenerated]
	private sealed class <DelayedFix>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MyClue <>4__this;

		[Token(Token = "0x17000205")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011EC")]
			[Address(RVA = "0x1151BA0", Offset = "0x1151BA0", VA = "0x1151BA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011EE")]
			[Address(RVA = "0x1151BE8", Offset = "0x1151BE8", VA = "0x1151BE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x11516F4", Offset = "0x11516F4", VA = "0x11516F4")]
		[DebuggerHidden]
		public <DelayedFix>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x1151B10", Offset = "0x1151B10", VA = "0x1151B10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x1151B14", Offset = "0x1151B14", VA = "0x1151B14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x1151BA8", Offset = "0x1151BA8", VA = "0x1151BA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400104E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text ClueText;

	[Token(Token = "0x400104F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SafeRiddle safeRiddle;

	[Token(Token = "0x4001050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 originalLocalPosition;

	[Token(Token = "0x4001051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Quaternion originalLocalRotation;

	[Token(Token = "0x4001052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform originalParent;

	[Token(Token = "0x4001053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Rigidbody myRB;

	[Token(Token = "0x4001054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SmoothSyncPUN2 smoothSync;

	[Token(Token = "0x60011DF")]
	[Address(RVA = "0x11514F0", Offset = "0x11514F0", VA = "0x11514F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011E0")]
	[Address(RVA = "0x115159C", Offset = "0x115159C", VA = "0x115159C")]
	private void Start()
	{
	}

	[Token(Token = "0x60011E1")]
	[Address(RVA = "0x1151638", Offset = "0x1151638", VA = "0x1151638")]
	public void SetSafeRiddle(SafeRiddle safeRiddle)
	{
	}

	[Token(Token = "0x60011E2")]
	[Address(RVA = "0x1151640", Offset = "0x1151640", VA = "0x1151640")]
	private void SetText(string txt)
	{
	}

	[Token(Token = "0x60011E3")]
	[Address(RVA = "0x1151680", Offset = "0x1151680", VA = "0x1151680")]
	[IteratorStateMachine(typeof(<DelayedFix>d__11))]
	private IEnumerator DelayedFix()
	{
		return null;
	}

	[Token(Token = "0x60011E4")]
	[Address(RVA = "0x115171C", Offset = "0x115171C", VA = "0x115171C")]
	public void SetupClueServer(string clueText)
	{
	}

	[Token(Token = "0x60011E5")]
	[Address(RVA = "0x1151848", Offset = "0x1151848", VA = "0x1151848")]
	[PunRPC]
	private void SetupClue(string clueText)
	{
	}

	[Token(Token = "0x60011E6")]
	[Address(RVA = "0x1151A60", Offset = "0x1151A60", VA = "0x1151A60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60011E7")]
	[Address(RVA = "0x1151A6C", Offset = "0x1151A6C", VA = "0x1151A6C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60011E8")]
	[Address(RVA = "0x1151A78", Offset = "0x1151A78", VA = "0x1151A78")]
	public MyClue()
	{
	}
}
[Token(Token = "0x2000268")]
[RequireComponent(typeof(NavMeshLink))]
public class NavMeshLinkFixer : MonoBehaviour
{
	[Token(Token = "0x4001058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NavMeshLink navMeshLink;

	[Token(Token = "0x4001059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sampleRange;

	[Token(Token = "0x400105A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool onlyIfVertical;

	[Token(Token = "0x400105B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool moveToSideWithOpenSpace;

	[Token(Token = "0x400105C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float moveToSideBottomSampleRange;

	[Token(Token = "0x400105D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rayExtendMultiplier;

	[Token(Token = "0x60011EF")]
	[Address(RVA = "0x1151BF0", Offset = "0x1151BF0", VA = "0x1151BF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011F0")]
	[Address(RVA = "0x1151C48", Offset = "0x1151C48", VA = "0x1151C48")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60011F1")]
	[Address(RVA = "0x1151D50", Offset = "0x1151D50", VA = "0x1151D50")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60011F2")]
	[Address(RVA = "0x1151E58", Offset = "0x1151E58", VA = "0x1151E58")]
	[ContextMenu("Fix")]
	public void Fix()
	{
	}

	[Token(Token = "0x60011F3")]
	[Address(RVA = "0x1152A48", Offset = "0x1152A48", VA = "0x1152A48")]
	private static Matrix4x4 UnscaledLocalToWorldMatrix(Transform t)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x60011F4")]
	[Address(RVA = "0x1152B3C", Offset = "0x1152B3C", VA = "0x1152B3C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60011F5")]
	[Address(RVA = "0x1152CD8", Offset = "0x1152CD8", VA = "0x1152CD8")]
	public NavMeshLinkFixer()
	{
	}
}
[Token(Token = "0x2000269")]
public class NewGenericTextPopup : MonoBehaviour
{
	[Token(Token = "0x200026A")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass25_0
	{
		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public System.Action buttonAction;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NewGenericTextPopup <>4__this;

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x1153768", Offset = "0x1153768", VA = "0x1153768")]
		public <>c__DisplayClass25_0()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x1153770", Offset = "0x1153770", VA = "0x1153770")]
		internal void <_PopupWaitForSetup>b__0()
		{
		}
	}

	[Token(Token = "0x200026B")]
	[CompilerGenerated]
	private sealed class <_PopupWaitForSetup>d__25 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public System.Action buttonAction;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NewGenericTextPopup <>4__this;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool showButton;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string buttonText;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private <>c__DisplayClass25_0 <>8__1;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool codexEntry;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string textToDisplay;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool textIsTerm;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float overrideDuration;

		[Token(Token = "0x17000207")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001208")]
			[Address(RVA = "0x1153D6C", Offset = "0x1153D6C", VA = "0x1153D6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000208")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600120A")]
			[Address(RVA = "0x1153DB4", Offset = "0x1153DB4", VA = "0x1153DB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x1153544", Offset = "0x1153544", VA = "0x1153544")]
		[DebuggerHidden]
		public <_PopupWaitForSetup>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x11537AC", Offset = "0x11537AC", VA = "0x11537AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x11537B0", Offset = "0x11537B0", VA = "0x11537B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x1153D74", Offset = "0x1153D74", VA = "0x1153D74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200026C")]
	[CompilerGenerated]
	private sealed class <DelayedSetup>d__26 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NewGenericTextPopup <>4__this;

		[Token(Token = "0x17000209")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600120E")]
			[Address(RVA = "0x1153F14", Offset = "0x1153F14", VA = "0x1153F14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700020A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001210")]
			[Address(RVA = "0x1153F5C", Offset = "0x1153F5C", VA = "0x1153F5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x115356C", Offset = "0x115356C", VA = "0x115356C")]
		[DebuggerHidden]
		public <DelayedSetup>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x1153E10", Offset = "0x1153E10", VA = "0x1153E10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x1153E14", Offset = "0x1153E14", VA = "0x1153E14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x1153F1C", Offset = "0x1153F1C", VA = "0x1153F1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200026D")]
	[CompilerGenerated]
	private sealed class <_PopUpFade>d__27 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NewGenericTextPopup <>4__this;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool active;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x1700020B")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001214")]
			[Address(RVA = "0x11540B0", Offset = "0x11540B0", VA = "0x11540B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700020C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001216")]
			[Address(RVA = "0x11540F8", Offset = "0x11540F8", VA = "0x11540F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x1153594", Offset = "0x1153594", VA = "0x1153594")]
		[DebuggerHidden]
		public <_PopUpFade>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x1153FB8", Offset = "0x1153FB8", VA = "0x1153FB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x1153FBC", Offset = "0x1153FBC", VA = "0x1153FBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x11540B8", Offset = "0x11540B8", VA = "0x11540B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400105E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI popupText;

	[Token(Token = "0x400105F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float rotateTime;

	[Token(Token = "0x4001060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float popupDuration;

	[Token(Token = "0x4001061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip popupClip;

	[Token(Token = "0x4001062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Button genericButton;

	[Token(Token = "0x4001063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshProUGUI genericButtonText;

	[Token(Token = "0x4001064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UnityEngine.UI.Image bgImage;

	[Token(Token = "0x4001065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Canvas myCanvas;

	[Token(Token = "0x4001066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GraphicRaycaster graphicRaycaster;

	[Token(Token = "0x4001067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CanvasGroup canvasGroup;

	[Token(Token = "0x4001068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float velocity;

	[Token(Token = "0x4001069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool popupEnabled;

	[Token(Token = "0x400106A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float disableAfterTime;

	[Token(Token = "0x400106B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool fading;

	[Token(Token = "0x400106C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CoroutineHandle fadeHandle;

	[Token(Token = "0x400106D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Localize localize;

	[Token(Token = "0x400106E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool settedUp;

	[Token(Token = "0x400106F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 originalCanvasScale;

	[Token(Token = "0x60011F6")]
	[Address(RVA = "0x1152CF8", Offset = "0x1152CF8", VA = "0x1152CF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011F7")]
	[Address(RVA = "0x1152EF4", Offset = "0x1152EF4", VA = "0x1152EF4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60011F8")]
	[Address(RVA = "0x1152F98", Offset = "0x1152F98", VA = "0x1152F98")]
	private void Update()
	{
	}

	[Token(Token = "0x60011F9")]
	[Address(RVA = "0x115307C", Offset = "0x115307C", VA = "0x115307C")]
	public void Setup(bool local)
	{
	}

	[Token(Token = "0x60011FA")]
	[Address(RVA = "0x1152FDC", Offset = "0x1152FDC", VA = "0x1152FDC")]
	public void Disable(float fadeTime)
	{
	}

	[Token(Token = "0x60011FB")]
	[Address(RVA = "0x11532EC", Offset = "0x11532EC", VA = "0x11532EC")]
	public void ActivatePopup(string textToDisplay, bool codexEntry = false, float overrideDuration = 0f, bool textIsTerm = false)
	{
	}

	[Token(Token = "0x60011FC")]
	[Address(RVA = "0x1153488", Offset = "0x1153488", VA = "0x1153488")]
	public void ActivatePopup(string textToDisplay, bool showButton, System.Action buttonAction, string buttonText, bool codexEntry = false, float overrideDuration = 0f)
	{
	}

	[Token(Token = "0x60011FD")]
	[Address(RVA = "0x115338C", Offset = "0x115338C", VA = "0x115338C")]
	[IteratorStateMachine(typeof(<_PopupWaitForSetup>d__25))]
	private IEnumerator<float> _PopupWaitForSetup(string textToDisplay, bool codexEntry = false, bool showButton = false, [Optional] System.Action buttonAction, [Optional] string buttonText, float overrideDuration = 0f, bool textIsTerm = false)
	{
		return null;
	}

	[Token(Token = "0x60011FE")]
	[Address(RVA = "0x11531E0", Offset = "0x11531E0", VA = "0x11531E0")]
	[IteratorStateMachine(typeof(<DelayedSetup>d__26))]
	private IEnumerator<float> DelayedSetup()
	{
		return null;
	}

	[Token(Token = "0x60011FF")]
	[Address(RVA = "0x1153254", Offset = "0x1153254", VA = "0x1153254")]
	[IteratorStateMachine(typeof(<_PopUpFade>d__27))]
	private IEnumerator<float> _PopUpFade(bool active, float duration)
	{
		return null;
	}

	[Token(Token = "0x6001200")]
	[Address(RVA = "0x11535BC", Offset = "0x11535BC", VA = "0x11535BC")]
	public void SetScale(float scale)
	{
	}

	[Token(Token = "0x6001201")]
	[Address(RVA = "0x11536C4", Offset = "0x11536C4", VA = "0x11536C4")]
	public void SetTransparency(float transparency)
	{
	}

	[Token(Token = "0x6001202")]
	[Address(RVA = "0x1153754", Offset = "0x1153754", VA = "0x1153754")]
	public NewGenericTextPopup()
	{
	}
}
[Token(Token = "0x200026E")]
public abstract class ObjectFollow : MonoBehaviour
{
	[Token(Token = "0x4001086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Object Settings")]
	[UnityEngine.Tooltip("The game object to follow. The followed property values will be taken from this one.")]
	public GameObject gameObjectToFollow;

	[Token(Token = "0x4001087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("The game object to change the property values of. If left empty the game object this script is attached to will be changed.")]
	public GameObject gameObjectToChange;

	[Token(Token = "0x4001088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Position Settings")]
	[UnityEngine.Tooltip("Whether to follow the position of the given game object.")]
	public bool followsPosition;

	[Token(Token = "0x4001089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[UnityEngine.Tooltip("Whether to smooth the position when following `gameObjectToFollow`.")]
	public bool smoothsPosition;

	[Token(Token = "0x400108A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("The maximum allowed distance between the unsmoothed source and the smoothed target per frame to use for smoothing.")]
	public float maxAllowedPerFrameDistanceDifference;

	[Token(Token = "0x400108C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[UnityEngine.Tooltip("Whether to follow the rotation of the given game object.")]
	[Header("Rotation Settings")]
	public bool followsRotation;

	[Token(Token = "0x400108D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[UnityEngine.Tooltip("Whether to smooth the rotation when following `gameObjectToFollow`.")]
	public bool smoothsRotation;

	[Token(Token = "0x400108E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("The maximum allowed angle between the unsmoothed source and the smoothed target per frame to use for smoothing.")]
	public float maxAllowedPerFrameAngleDifference;

	[Token(Token = "0x4001090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Header("Scale Settings")]
	[UnityEngine.Tooltip("Whether to follow the scale of the given game object.")]
	public bool followsScale;

	[Token(Token = "0x4001091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	[UnityEngine.Tooltip("Whether to smooth the scale when following `gameObjectToFollow`.")]
	public bool smoothsScale;

	[Token(Token = "0x4001092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("The maximum allowed size between the unsmoothed source and the smoothed target per frame to use for smoothing.")]
	public float maxAllowedPerFrameSizeDifference;

	[Token(Token = "0x1700020D")]
	public Vector3 targetPosition
	{
		[Token(Token = "0x6001217")]
		[Address(RVA = "0x1154154", Offset = "0x1154154", VA = "0x1154154")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6001218")]
		[Address(RVA = "0x1154160", Offset = "0x1154160", VA = "0x1154160")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700020E")]
	public Quaternion targetRotation
	{
		[Token(Token = "0x6001219")]
		[Address(RVA = "0x115416C", Offset = "0x115416C", VA = "0x115416C")]
		[CompilerGenerated]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x600121A")]
		[Address(RVA = "0x1154178", Offset = "0x1154178", VA = "0x1154178")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700020F")]
	public Vector3 targetScale
	{
		[Token(Token = "0x600121B")]
		[Address(RVA = "0x1154184", Offset = "0x1154184", VA = "0x1154184")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600121C")]
		[Address(RVA = "0x1154190", Offset = "0x1154190", VA = "0x1154190")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600121D")]
	[Address(RVA = "0x115419C", Offset = "0x115419C", VA = "0x115419C", Slot = "4")]
	public virtual void Follow()
	{
	}

	[Token(Token = "0x600121E")]
	[Address(RVA = "0x1154260", Offset = "0x1154260", VA = "0x1154260", Slot = "5")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600121F")]
	[Address(RVA = "0x11542F4", Offset = "0x11542F4", VA = "0x11542F4", Slot = "6")]
	protected virtual void OnValidate()
	{
	}

	[Token(Token = "0x6001220")]
	protected abstract Vector3 GetPositionToFollow();

	[Token(Token = "0x6001221")]
	protected abstract void SetPositionOnGameObject(Vector3 newPosition);

	[Token(Token = "0x6001222")]
	protected abstract Quaternion GetRotationToFollow();

	[Token(Token = "0x6001223")]
	protected abstract void SetRotationOnGameObject(Quaternion newRotation);

	[Token(Token = "0x6001224")]
	[Address(RVA = "0x1154324", Offset = "0x1154324", VA = "0x1154324", Slot = "11")]
	protected virtual Vector3 GetScaleToFollow()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001225")]
	[Address(RVA = "0x115434C", Offset = "0x115434C", VA = "0x115434C", Slot = "12")]
	protected virtual void SetScaleOnGameObject(Vector3 newScale)
	{
	}

	[Token(Token = "0x6001226")]
	[Address(RVA = "0x115439C", Offset = "0x115439C", VA = "0x115439C", Slot = "13")]
	protected virtual void FollowPosition()
	{
	}

	[Token(Token = "0x6001227")]
	[Address(RVA = "0x11544D0", Offset = "0x11544D0", VA = "0x11544D0", Slot = "14")]
	protected virtual void FollowRotation()
	{
	}

	[Token(Token = "0x6001228")]
	[Address(RVA = "0x1154604", Offset = "0x1154604", VA = "0x1154604", Slot = "15")]
	protected virtual void FollowScale()
	{
	}

	[Token(Token = "0x6001229")]
	[Address(RVA = "0x1154738", Offset = "0x1154738", VA = "0x1154738")]
	protected ObjectFollow()
	{
	}
}
[Token(Token = "0x200026F")]
public class OverlapBoxExample : MonoBehaviour
{
	[Token(Token = "0x4001094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_Started;

	[Token(Token = "0x4001095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LayerMask m_LayerMask;

	[Token(Token = "0x600122A")]
	[Address(RVA = "0x1154768", Offset = "0x1154768", VA = "0x1154768")]
	private void Start()
	{
	}

	[Token(Token = "0x600122B")]
	[Address(RVA = "0x1154774", Offset = "0x1154774", VA = "0x1154774")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600122C")]
	[Address(RVA = "0x1154778", Offset = "0x1154778", VA = "0x1154778")]
	private void MyCollisions()
	{
	}

	[Token(Token = "0x600122D")]
	[Address(RVA = "0x1154970", Offset = "0x1154970", VA = "0x1154970")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600122E")]
	[Address(RVA = "0x1154A1C", Offset = "0x1154A1C", VA = "0x1154A1C")]
	public OverlapBoxExample()
	{
	}
}
[Token(Token = "0x2000270")]
public class ParentSiblingsToThis : MonoBehaviour
{
	[Token(Token = "0x600122F")]
	[Address(RVA = "0x1154A24", Offset = "0x1154A24", VA = "0x1154A24")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001230")]
	[Address(RVA = "0x1154D20", Offset = "0x1154D20", VA = "0x1154D20")]
	public ParentSiblingsToThis()
	{
	}
}
[Token(Token = "0x2000271")]
public class PhysicsButton : HVRPhysicsButton
{
	[Token(Token = "0x2000272")]
	[CompilerGenerated]
	private sealed class <WaitUntilButtonDeactivated>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicsButton <>4__this;

		[Token(Token = "0x17000210")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001239")]
			[Address(RVA = "0x11550BC", Offset = "0x11550BC", VA = "0x11550BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000211")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600123B")]
			[Address(RVA = "0x1155104", Offset = "0x1155104", VA = "0x1155104", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x1154FD0", Offset = "0x1154FD0", VA = "0x1154FD0")]
		[DebuggerHidden]
		public <WaitUntilButtonDeactivated>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x1155000", Offset = "0x1155000", VA = "0x1155000", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x1155004", Offset = "0x1155004", VA = "0x1155004", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x11550C4", Offset = "0x11550C4", VA = "0x11550C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("Our settings")]
	public bool HostOnly;

	[Token(Token = "0x6001231")]
	[Address(RVA = "0x1154D28", Offset = "0x1154D28", VA = "0x1154D28")]
	private void Start()
	{
	}

	[Token(Token = "0x6001232")]
	[Address(RVA = "0x1154D58", Offset = "0x1154D58", VA = "0x1154D58")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001233")]
	[Address(RVA = "0x1154ED8", Offset = "0x1154ED8", VA = "0x1154ED8")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x6001234")]
	[Address(RVA = "0x1154E64", Offset = "0x1154E64", VA = "0x1154E64")]
	[IteratorStateMachine(typeof(<WaitUntilButtonDeactivated>d__4))]
	private IEnumerator WaitUntilButtonDeactivated()
	{
		return null;
	}

	[Token(Token = "0x6001235")]
	[Address(RVA = "0x1154FF8", Offset = "0x1154FF8", VA = "0x1154FF8")]
	public PhysicsButton()
	{
	}
}
[Token(Token = "0x2000273")]
public class PimaxCameraFixer : MonoBehaviour
{
	[Token(Token = "0x600123C")]
	[Address(RVA = "0x115510C", Offset = "0x115510C", VA = "0x115510C")]
	private void Start()
	{
	}

	[Token(Token = "0x600123D")]
	[Address(RVA = "0x1155218", Offset = "0x1155218", VA = "0x1155218")]
	private void CheckForPimax()
	{
	}

	[Token(Token = "0x600123E")]
	[Address(RVA = "0x1155354", Offset = "0x1155354", VA = "0x1155354")]
	public PimaxCameraFixer()
	{
	}
}
[Token(Token = "0x2000274")]
public class PitKiller : MonoBehaviour
{
	[Token(Token = "0x600123F")]
	[Address(RVA = "0x115535C", Offset = "0x115535C", VA = "0x115535C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001240")]
	[Address(RVA = "0x1155380", Offset = "0x1155380", VA = "0x1155380")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001241")]
	[Address(RVA = "0x11554BC", Offset = "0x11554BC", VA = "0x11554BC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001242")]
	[Address(RVA = "0x11555C0", Offset = "0x11555C0", VA = "0x11555C0")]
	public PitKiller()
	{
	}
}
[Token(Token = "0x2000275")]
public class CustomHexaBodyPlayer3 : HexaBodyPlayer3
{
	[Token(Token = "0x2000276")]
	[CompilerGenerated]
	private sealed class <RotateTowardsCoroutine>d__34 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CustomHexaBodyPlayer3 <>4__this;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion targetRotation;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <elapsed>5__2;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <time>5__3;

		[Token(Token = "0x17000215")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600126C")]
			[Address(RVA = "0x1159400", Offset = "0x1159400", VA = "0x1159400", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000216")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600126E")]
			[Address(RVA = "0x1159448", Offset = "0x1159448", VA = "0x1159448", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x11591D8", Offset = "0x11591D8", VA = "0x11591D8")]
		[DebuggerHidden]
		public <RotateTowardsCoroutine>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x1159200", Offset = "0x1159200", VA = "0x1159200", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x1159204", Offset = "0x1159204", VA = "0x1159204", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x1159408", Offset = "0x1159408", VA = "0x1159408", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400109A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
	[SerializeField]
	private MonoBehaviour[] _disableWhileTeleportScripts;

	[Token(Token = "0x400109B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
	[SerializeField]
	private GameObject[] _disableWhileTeleportGameobjects;

	[Token(Token = "0x400109C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
	[SerializeField]
	private bool originalApplyCameraOffsets;

	[Token(Token = "0x400109D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
	[SerializeField]
	private CrouchLevel maxCrouchLevel;

	[Token(Token = "0x400109E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
	private bool _flyingMode;

	[Token(Token = "0x400109F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x361")]
	private bool _alwaysRun;

	[Token(Token = "0x40010A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x362")]
	private bool _disableFreeMove;

	[Token(Token = "0x40010A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x363")]
	private bool _overrideCalibrate;

	[Token(Token = "0x40010A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x364")]
	private Vector3 _overridePosition;

	[Token(Token = "0x40010A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
	private Quaternion _overrideRotation;

	[Token(Token = "0x40010A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
	private bool _overrideWithHeadPosition;

	[Token(Token = "0x40010A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x381")]
	private bool _overrideResetPosition;

	[Token(Token = "0x40010A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
	public UnityEvent OnCalibrate;

	[Token(Token = "0x40010A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
	private float minDiffAmount;

	[Token(Token = "0x40010A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x394")]
	private float stepOffset;

	[Token(Token = "0x40010A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
	private bool isAirborne;

	[Token(Token = "0x40010AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
	private float targetSpeed;

	[Token(Token = "0x40010AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
	private Vector2 movement;

	[Token(Token = "0x40010AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
	[SerializeField]
	private AudioClip jumpAudioClip;

	[Token(Token = "0x40010AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
	private Vector3 defaultOffsetHead;

	[Token(Token = "0x40010AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
	private Vector3 defaultOffsetTorso;

	[Token(Token = "0x40010AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
	private Vector3 defaultOffsetKnee;

	[Token(Token = "0x40010B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D4")]
	private Vector3 defaultOffsetLeft;

	[Token(Token = "0x40010B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
	private Vector3 defaultOffsetRight;

	[Token(Token = "0x17000212")]
	public bool IsOverrideCalibrate
	{
		[Token(Token = "0x6001243")]
		[Address(RVA = "0x11555C8", Offset = "0x11555C8", VA = "0x11555C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000213")]
	public bool IsFlying
	{
		[Token(Token = "0x6001244")]
		[Address(RVA = "0x11555D0", Offset = "0x11555D0", VA = "0x11555D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000214")]
	public bool IsMoving
	{
		[Token(Token = "0x6001245")]
		[Address(RVA = "0x11555D8", Offset = "0x11555D8", VA = "0x11555D8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001246")]
	[Address(RVA = "0x1155610", Offset = "0x1155610", VA = "0x1155610")]
	public void SetOverrideCalibrate(Vector3 position, Quaternion rotation, bool offsetByCameraPosition, bool resetPosition = true)
	{
	}

	[Token(Token = "0x6001247")]
	[Address(RVA = "0x1155648", Offset = "0x1155648", VA = "0x1155648", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001248")]
	[Address(RVA = "0x1155784", Offset = "0x1155784", VA = "0x1155784")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001249")]
	[Address(RVA = "0x1155924", Offset = "0x1155924", VA = "0x1155924")]
	public void RotateTowards(Vector3 lookTargetPoint, bool instant)
	{
	}

	[Token(Token = "0x600124A")]
	[Address(RVA = "0x1155A44", Offset = "0x1155A44", VA = "0x1155A44")]
	[IteratorStateMachine(typeof(<RotateTowardsCoroutine>d__34))]
	private IEnumerator<float> RotateTowardsCoroutine(Quaternion targetRotation)
	{
		return null;
	}

	[Token(Token = "0x600124B")]
	[Address(RVA = "0x1155AE0", Offset = "0x1155AE0", VA = "0x1155AE0")]
	public void OffsetPosition(Vector3 offset, bool stop = true)
	{
	}

	[Token(Token = "0x600124C")]
	[Address(RVA = "0x1155F60", Offset = "0x1155F60", VA = "0x1155F60")]
	public void OffsetMoveRigidbody(Vector3 offset)
	{
	}

	[Token(Token = "0x600124D")]
	[Address(RVA = "0x1156200", Offset = "0x1156200", VA = "0x1156200")]
	public void RigidbodyMovePosition(Vector3 locoBallBottom)
	{
	}

	[Token(Token = "0x600124E")]
	[Address(RVA = "0x11564A4", Offset = "0x11564A4", VA = "0x11564A4")]
	public void ClearVelocityY()
	{
	}

	[Token(Token = "0x600124F")]
	[Address(RVA = "0x11564D8", Offset = "0x11564D8", VA = "0x11564D8")]
	public void AddForce(Vector3 force)
	{
	}

	[Token(Token = "0x6001250")]
	[Address(RVA = "0x1156578", Offset = "0x1156578", VA = "0x1156578")]
	public void AddExplosionForce(float force, Vector3 position, float radius, float upModifier)
	{
	}

	[Token(Token = "0x6001251")]
	[Address(RVA = "0x1156650", Offset = "0x1156650", VA = "0x1156650", Slot = "15")]
	public override void MoveToPosition(Vector3 locoBallBottom)
	{
	}

	[Token(Token = "0x6001252")]
	[Address(RVA = "0x1156660", Offset = "0x1156660", VA = "0x1156660")]
	public void MoveToPosition(Vector3 locoBallBottom, bool stop)
	{
	}

	[Token(Token = "0x6001253")]
	[Address(RVA = "0x1156670", Offset = "0x1156670", VA = "0x1156670")]
	public void MoveToPosition(Vector3 locoBallBottom, bool stop, bool moveRB, bool moveTransform)
	{
	}

	[Token(Token = "0x6001254")]
	[Address(RVA = "0x1156FB4", Offset = "0x1156FB4", VA = "0x1156FB4")]
	public void SetCollidersEnabled(bool status)
	{
	}

	[Token(Token = "0x6001255")]
	[Address(RVA = "0x1157054", Offset = "0x1157054", VA = "0x1157054")]
	public void SetRigidBodiesKinematic(bool status)
	{
	}

	[Token(Token = "0x6001256")]
	[Address(RVA = "0x115717C", Offset = "0x115717C", VA = "0x115717C")]
	public void SetHandsRigidbodyKinematic(bool value)
	{
	}

	[Token(Token = "0x6001257")]
	[Address(RVA = "0x115720C", Offset = "0x115720C", VA = "0x115720C")]
	public void OnBeforeTeleport()
	{
	}

	[Token(Token = "0x6001258")]
	[Address(RVA = "0x115734C", Offset = "0x115734C", VA = "0x115734C")]
	public void OnAfterTeleport()
	{
	}

	[Token(Token = "0x6001259")]
	[Address(RVA = "0x115748C", Offset = "0x115748C", VA = "0x115748C", Slot = "9")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x600125A")]
	[Address(RVA = "0x11574B0", Offset = "0x11574B0", VA = "0x11574B0")]
	private void StepOffset()
	{
	}

	[Token(Token = "0x600125B")]
	[Address(RVA = "0x1157F44", Offset = "0x1157F44", VA = "0x1157F44")]
	public void DisableFreeMovement(bool isDisabled)
	{
	}

	[Token(Token = "0x600125C")]
	[Address(RVA = "0x1158010", Offset = "0x1158010", VA = "0x1158010", Slot = "12")]
	protected override void Move()
	{
	}

	[Token(Token = "0x600125D")]
	[Address(RVA = "0x11587F0", Offset = "0x11587F0", VA = "0x11587F0", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600125E")]
	[Address(RVA = "0x1158840", Offset = "0x1158840", VA = "0x1158840")]
	public void SetFlyingMode(bool value)
	{
	}

	[Token(Token = "0x600125F")]
	[Address(RVA = "0x115896C", Offset = "0x115896C", VA = "0x115896C")]
	public void SetAlwaysRunMode(bool value)
	{
	}

	[Token(Token = "0x6001260")]
	[Address(RVA = "0x1158978", Offset = "0x1158978", VA = "0x1158978")]
	public void DisableOverrideCalibrate()
	{
	}

	[Token(Token = "0x6001261")]
	[Address(RVA = "0x1158980", Offset = "0x1158980", VA = "0x1158980", Slot = "5")]
	public override void CalibrateHeight(float height)
	{
	}

	[Token(Token = "0x6001262")]
	[Address(RVA = "0x1158A80", Offset = "0x1158A80", VA = "0x1158A80", Slot = "8")]
	public override void ApplyCameraOffsets()
	{
	}

	[Token(Token = "0x6001263")]
	[Address(RVA = "0x1158B78", Offset = "0x1158B78", VA = "0x1158B78", Slot = "7")]
	protected override void UpdateCrouch()
	{
	}

	[Token(Token = "0x6001264")]
	[Address(RVA = "0x1157DEC", Offset = "0x1157DEC", VA = "0x1157DEC")]
	private void LedgeMantling()
	{
	}

	[Token(Token = "0x6001265")]
	[Address(RVA = "0x1158E88", Offset = "0x1158E88", VA = "0x1158E88")]
	private void AdjustHeight()
	{
	}

	[Token(Token = "0x6001266")]
	[Address(RVA = "0x1158E94", Offset = "0x1158E94", VA = "0x1158E94", Slot = "11")]
	protected override void Jump()
	{
	}

	[Token(Token = "0x6001267")]
	[Address(RVA = "0x1158FAC", Offset = "0x1158FAC", VA = "0x1158FAC", Slot = "14")]
	public override void Calibrate()
	{
	}

	[Token(Token = "0x6001268")]
	[Address(RVA = "0x1159110", Offset = "0x1159110", VA = "0x1159110")]
	public CustomHexaBodyPlayer3()
	{
	}
}
[Token(Token = "0x2000277")]
public class CustomHVRHexaBodyInputWrapper : HVRPlayerInputs
{
	[Token(Token = "0x40010B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public HexaBodyPlayerInputs PlayerInputs;

	[Token(Token = "0x40010B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public HexaBodyPlayer3 HexaBodyPlayer3;

	[Token(Token = "0x40010BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool holdToCrouch;

	[Token(Token = "0x40010BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	public bool disableControl;

	[Token(Token = "0x40010BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
	private bool _lastPressWasCrouch;

	[Token(Token = "0x600126F")]
	[Address(RVA = "0x11594A4", Offset = "0x11594A4", VA = "0x11594A4", Slot = "5")]
	protected override void AfterInputUpdate()
	{
	}

	[Token(Token = "0x6001270")]
	[Address(RVA = "0x1159788", Offset = "0x1159788", VA = "0x1159788", Slot = "20")]
	protected virtual bool GetCrouchStayActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6001271")]
	[Address(RVA = "0x11597F8", Offset = "0x11597F8", VA = "0x11597F8", Slot = "19")]
	protected override bool GetCrouch()
	{
		return default(bool);
	}

	[Token(Token = "0x6001272")]
	[Address(RVA = "0x1159868", Offset = "0x1159868", VA = "0x1159868", Slot = "7")]
	protected override bool GetIsJumpActivated()
	{
		return default(bool);
	}

	[Token(Token = "0x6001273")]
	[Address(RVA = "0x11598E4", Offset = "0x11598E4", VA = "0x11598E4")]
	public void ResetStates()
	{
	}

	[Token(Token = "0x6001274")]
	[Address(RVA = "0x115998C", Offset = "0x115998C", VA = "0x115998C")]
	public CustomHVRHexaBodyInputWrapper()
	{
	}
}
[Token(Token = "0x2000278")]
public class KJHexaBodyTeleporterModified : MonoBehaviour
{
	[Token(Token = "0x2000279")]
	[CompilerGenerated]
	private sealed class <DashTeleport>d__67 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KJHexaBodyTeleporterModified <>4__this;

		[Token(Token = "0x1700021B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001292")]
			[Address(RVA = "0x115B9F8", Offset = "0x115B9F8", VA = "0x115B9F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001294")]
			[Address(RVA = "0x115BA40", Offset = "0x115BA40", VA = "0x115BA40", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x1159FE4", Offset = "0x1159FE4", VA = "0x1159FE4")]
		[DebuggerHidden]
		public <DashTeleport>d__67(int <>1__state)
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x115B670", Offset = "0x115B670", VA = "0x115B670", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x115B68C", Offset = "0x115B68C", VA = "0x115B68C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0x115B9C0", Offset = "0x115B9C0", VA = "0x115B9C0")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x115BA00", Offset = "0x115BA00", VA = "0x115BA00", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200027A")]
	[CompilerGenerated]
	private sealed class <Teleport>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KJHexaBodyTeleporterModified <>4__this;

		[Token(Token = "0x1700021D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001299")]
			[Address(RVA = "0x115BBD4", Offset = "0x115BBD4", VA = "0x115BBD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600129B")]
			[Address(RVA = "0x115BC1C", Offset = "0x115BC1C", VA = "0x115BC1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x115A00C", Offset = "0x115A00C", VA = "0x115A00C")]
		[DebuggerHidden]
		public <Teleport>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x115BA48", Offset = "0x115BA48", VA = "0x115BA48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x115BA64", Offset = "0x115BA64", VA = "0x115BA64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x115BB8C", Offset = "0x115BB8C", VA = "0x115BB8C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x115BBDC", Offset = "0x115BBDC", VA = "0x115BBDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200027B")]
	[CompilerGenerated]
	private sealed class <_RaycastUpdate>d__69 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KJHexaBodyTeleporterModified <>4__this;

		[Token(Token = "0x1700021F")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600129F")]
			[Address(RVA = "0x115BCC0", Offset = "0x115BCC0", VA = "0x115BCC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000220")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012A1")]
			[Address(RVA = "0x115BD08", Offset = "0x115BD08", VA = "0x115BD08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0x115A034", Offset = "0x115A034", VA = "0x115A034")]
		[DebuggerHidden]
		public <_RaycastUpdate>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x115BC24", Offset = "0x115BC24", VA = "0x115BC24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x115BC28", Offset = "0x115BC28", VA = "0x115BC28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x115BCC8", Offset = "0x115BCC8", VA = "0x115BCC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40010BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CapsuleCollider hitDummy;

	[Token(Token = "0x40010BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.Color validColor;

	[Token(Token = "0x40010BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.Color wrongColor;

	[Token(Token = "0x40010C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LineRenderer LineRenderer;

	[Token(Token = "0x40010C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LineRenderer DownRenderer;

	[Token(Token = "0x40010C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float LineSegmentScale;

	[Token(Token = "0x40010C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float Strength;

	[Token(Token = "0x40010C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float StartingAngle;

	[Token(Token = "0x40010C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public LayerMask LayerMask;

	[Token(Token = "0x40010C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public LayerMask BlockingLayerMask;

	[Token(Token = "0x40010C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float FloorOffset;

	[Token(Token = "0x40010C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool Dash;

	[Token(Token = "0x40010C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float DashSpeed;

	[Token(Token = "0x40010CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform TeleportLineSourceLeft;

	[Token(Token = "0x40010CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform TeleportLineSourceRight;

	[Token(Token = "0x40010CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject TeleportMarker;

	[Token(Token = "0x40010CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Collider _hitObject;

	[Token(Token = "0x40010CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3[] _points;

	[Token(Token = "0x40010CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int _lineSegments;

	[Token(Token = "0x40010D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float _maxYDistance;

	[Token(Token = "0x40010D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool _isTeleportValid;

	[Token(Token = "0x40010D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 _teleportDestination;

	[Token(Token = "0x40010D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool _canTeleport;

	[Token(Token = "0x40010D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private CoroutineHandle raycastUpdateHandle;

	[Token(Token = "0x40010D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool _isTeleporting;

	[Token(Token = "0x40010D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Collider[] _dummy;

	[Token(Token = "0x40010D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float _lastTeleportTime;

	[Token(Token = "0x40010D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float storedTurnSpeed;

	[Token(Token = "0x40010D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float storedTurnSnapSpeed;

	[Token(Token = "0x40010DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public CustomHexaBodyPlayer3 hexaBody;

	[Token(Token = "0x40010DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public UnityEvent BeforeTeleport;

	[Token(Token = "0x40010DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public UnityEvent AfterTeleport;

	[Token(Token = "0x40010DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public HVRHandGrabber LeftHand;

	[Token(Token = "0x40010E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public HVRHandGrabber RightHand;

	[Token(Token = "0x40010E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public HVRHexaBodyHands LeftJointHand;

	[Token(Token = "0x40010E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public HVRHexaBodyHands RightJointHand;

	[Token(Token = "0x40010E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Transform _leftParent;

	[Token(Token = "0x40010E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Transform _rightParent;

	[Token(Token = "0x40010E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Transform _leftGrabbableParent;

	[Token(Token = "0x40010E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Transform _rightGrabbableParent;

	[Token(Token = "0x40010E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private HVRGrabbable _leftTeleportGrabbable;

	[Token(Token = "0x40010E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private HVRGrabbable _rightTeleportGrabbable;

	[Token(Token = "0x40010E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool turnDisabled;

	[Token(Token = "0x17000217")]
	public Transform TeleportLineSource
	{
		[Token(Token = "0x6001275")]
		[Address(RVA = "0x11599A0", Offset = "0x11599A0", VA = "0x11599A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000218")]
	public Collider hitObject
	{
		[Token(Token = "0x6001276")]
		[Address(RVA = "0x11599D0", Offset = "0x11599D0", VA = "0x11599D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000219")]
	public bool IsAiming
	{
		[Token(Token = "0x6001277")]
		[Address(RVA = "0x11599D8", Offset = "0x11599D8", VA = "0x11599D8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001278")]
		[Address(RVA = "0x11599E0", Offset = "0x11599E0", VA = "0x11599E0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700021A")]
	public HVRPlayerInputs PlayerInputs
	{
		[Token(Token = "0x6001279")]
		[Address(RVA = "0x11599EC", Offset = "0x11599EC", VA = "0x11599EC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600127A")]
		[Address(RVA = "0x11599F4", Offset = "0x11599F4", VA = "0x11599F4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600127B")]
	[Address(RVA = "0x11599FC", Offset = "0x11599FC", VA = "0x11599FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600127C")]
	[Address(RVA = "0x1159AE8", Offset = "0x1159AE8", VA = "0x1159AE8")]
	private void Update()
	{
	}

	[Token(Token = "0x600127D")]
	[Address(RVA = "0x1159BB8", Offset = "0x1159BB8", VA = "0x1159BB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600127E")]
	[Address(RVA = "0x1159CC0", Offset = "0x1159CC0", VA = "0x1159CC0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600127F")]
	[Address(RVA = "0x1159D1C", Offset = "0x1159D1C", VA = "0x1159D1C")]
	public void Enable()
	{
	}

	[Token(Token = "0x6001280")]
	[Address(RVA = "0x1159D28", Offset = "0x1159D28", VA = "0x1159D28")]
	public void Disable()
	{
	}

	[Token(Token = "0x6001281")]
	[Address(RVA = "0x1159E58", Offset = "0x1159E58", VA = "0x1159E58")]
	public void SetTurnSpeedOff()
	{
	}

	[Token(Token = "0x6001282")]
	[Address(RVA = "0x1159E98", Offset = "0x1159E98", VA = "0x1159E98")]
	public void SetTurnSpeedOn()
	{
	}

	[Token(Token = "0x6001283")]
	[Address(RVA = "0x1159D98", Offset = "0x1159D98", VA = "0x1159D98")]
	private void ToggleGraphics(bool toggle)
	{
	}

	[Token(Token = "0x6001284")]
	[Address(RVA = "0x1159AEC", Offset = "0x1159AEC", VA = "0x1159AEC")]
	private void CheckTeleport()
	{
	}

	[Token(Token = "0x6001285")]
	[Address(RVA = "0x1159FAC", Offset = "0x1159FAC", VA = "0x1159FAC", Slot = "4")]
	protected virtual bool IsTeleportDeactivated()
	{
		return default(bool);
	}

	[Token(Token = "0x6001286")]
	[Address(RVA = "0x1159FC8", Offset = "0x1159FC8", VA = "0x1159FC8", Slot = "5")]
	protected virtual bool IsTeleportActivated()
	{
		return default(bool);
	}

	[Token(Token = "0x6001287")]
	[Address(RVA = "0x1159EC4", Offset = "0x1159EC4", VA = "0x1159EC4")]
	[IteratorStateMachine(typeof(<DashTeleport>d__67))]
	private IEnumerator DashTeleport()
	{
		return null;
	}

	[Token(Token = "0x6001288")]
	[Address(RVA = "0x1159F38", Offset = "0x1159F38", VA = "0x1159F38")]
	[IteratorStateMachine(typeof(<Teleport>d__68))]
	private IEnumerator Teleport()
	{
		return null;
	}

	[Token(Token = "0x6001289")]
	[Address(RVA = "0x1159C4C", Offset = "0x1159C4C", VA = "0x1159C4C")]
	[IteratorStateMachine(typeof(<_RaycastUpdate>d__69))]
	private IEnumerator<float> _RaycastUpdate()
	{
		return null;
	}

	[Token(Token = "0x600128A")]
	[Address(RVA = "0x115A05C", Offset = "0x115A05C", VA = "0x115A05C")]
	private void CalculateTrajectory(float deltaTime)
	{
	}

	[Token(Token = "0x600128B")]
	[Address(RVA = "0x115AD2C", Offset = "0x115AD2C", VA = "0x115AD2C")]
	public void OnAfterTeleport()
	{
	}

	[Token(Token = "0x600128C")]
	[Address(RVA = "0x115B220", Offset = "0x115B220", VA = "0x115B220")]
	public void OnBeforeTeleport()
	{
	}

	[Token(Token = "0x600128D")]
	[Address(RVA = "0x115B55C", Offset = "0x115B55C", VA = "0x115B55C")]
	public KJHexaBodyTeleporterModified()
	{
	}
}
[Token(Token = "0x200027C")]
public class EyeLid : MonoBehaviourPunCallbacks, IPunObservable
{
	[Token(Token = "0x200027D")]
	[CompilerGenerated]
	private sealed class <CoroutineUpdate>d__13 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EyeLid <>4__this;

		[Token(Token = "0x17000221")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60012B0")]
			[Address(RVA = "0x115C968", Offset = "0x115C968", VA = "0x115C968", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000222")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012B2")]
			[Address(RVA = "0x115C9B0", Offset = "0x115C9B0", VA = "0x115C9B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x115C56C", Offset = "0x115C56C", VA = "0x115C56C")]
		[DebuggerHidden]
		public <CoroutineUpdate>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0x115C7A8", Offset = "0x115C7A8", VA = "0x115C7A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x115C7AC", Offset = "0x115C7AC", VA = "0x115C7AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x115C970", Offset = "0x115C970", VA = "0x115C970", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200027E")]
	[CompilerGenerated]
	private sealed class <CloseEyes>d__15 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EyeLid <>4__this;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <i>5__2;

		[Token(Token = "0x17000223")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60012B6")]
			[Address(RVA = "0x115CB70", Offset = "0x115CB70", VA = "0x115CB70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000224")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012B8")]
			[Address(RVA = "0x115CBB8", Offset = "0x115CBB8", VA = "0x115CBB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x115C640", Offset = "0x115C640", VA = "0x115C640")]
		[DebuggerHidden]
		public <CloseEyes>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x115CA0C", Offset = "0x115CA0C", VA = "0x115CA0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x115CA10", Offset = "0x115CA10", VA = "0x115CA10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x115CB78", Offset = "0x115CB78", VA = "0x115CB78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200027F")]
	[CompilerGenerated]
	private sealed class <OpenEyes>d__16 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EyeLid <>4__this;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <i>5__2;

		[Token(Token = "0x17000225")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60012BC")]
			[Address(RVA = "0x115CDF4", Offset = "0x115CDF4", VA = "0x115CDF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000226")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012BE")]
			[Address(RVA = "0x115CE3C", Offset = "0x115CE3C", VA = "0x115CE3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x115C668", Offset = "0x115C668", VA = "0x115C668")]
		[DebuggerHidden]
		public <OpenEyes>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x115CC14", Offset = "0x115CC14", VA = "0x115CC14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x115CC18", Offset = "0x115CC18", VA = "0x115CC18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x115CDFC", Offset = "0x115CDFC", VA = "0x115CDFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40010F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture[] eyeLidTextures;

	[Token(Token = "0x40010F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeBetweenFrames;

	[Token(Token = "0x40010F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float timeBetweenBlinks;

	[Token(Token = "0x40010F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer _lidRenderer;

	[Token(Token = "0x40010F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _textureId;

	[Token(Token = "0x40010F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Texture[] sortedEyeLidTextures;

	[Token(Token = "0x40010F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool eyesClosed;

	[Token(Token = "0x40010FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private CoroutineHandle handle;

	[Token(Token = "0x60012A2")]
	[Address(RVA = "0x115BD64", Offset = "0x115BD64", VA = "0x115BD64")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012A3")]
	[Address(RVA = "0x115C174", Offset = "0x115C174", VA = "0x115C174", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x60012A4")]
	[Address(RVA = "0x115C4E0", Offset = "0x115C4E0", VA = "0x115C4E0", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x60012A5")]
	[Address(RVA = "0x115C2AC", Offset = "0x115C2AC", VA = "0x115C2AC")]
	private void AddObserved()
	{
	}

	[Token(Token = "0x60012A6")]
	[Address(RVA = "0x115C4FC", Offset = "0x115C4FC", VA = "0x115C4FC", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60012A7")]
	[Address(RVA = "0x115C46C", Offset = "0x115C46C", VA = "0x115C46C")]
	[IteratorStateMachine(typeof(<CoroutineUpdate>d__13))]
	private IEnumerator<float> CoroutineUpdate()
	{
		return null;
	}

	[Token(Token = "0x60012A8")]
	[Address(RVA = "0x115C594", Offset = "0x115C594", VA = "0x115C594")]
	private bool CheckBlink(InputFeatureUsage<bool> isBlinkingUsage, UnityEngine.XR.InputDevice device)
	{
		return default(bool);
	}

	[Token(Token = "0x60012A9")]
	[Address(RVA = "0x115C5CC", Offset = "0x115C5CC", VA = "0x115C5CC")]
	[IteratorStateMachine(typeof(<CloseEyes>d__15))]
	private IEnumerator<float> CloseEyes()
	{
		return null;
	}

	[Token(Token = "0x60012AA")]
	[Address(RVA = "0x115C3F8", Offset = "0x115C3F8", VA = "0x115C3F8")]
	[IteratorStateMachine(typeof(<OpenEyes>d__16))]
	private IEnumerator<float> OpenEyes()
	{
		return null;
	}

	[Token(Token = "0x60012AB")]
	[Address(RVA = "0x115C690", Offset = "0x115C690", VA = "0x115C690", Slot = "54")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60012AC")]
	[Address(RVA = "0x115C794", Offset = "0x115C794", VA = "0x115C794")]
	public EyeLid()
	{
	}
}
[Token(Token = "0x2000280")]
public class EyeMovement : MonoBehaviourPunCallbacks, IPunObservable
{
	[Token(Token = "0x2000281")]
	[CompilerGenerated]
	private sealed class <RandomIrismove>d__13 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EyeMovement <>4__this;

		[Token(Token = "0x17000227")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60012CC")]
			[Address(RVA = "0x115D6B4", Offset = "0x115D6B4", VA = "0x115D6B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000228")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012CE")]
			[Address(RVA = "0x115D6FC", Offset = "0x115D6FC", VA = "0x115D6FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x115D39C", Offset = "0x115D39C", VA = "0x115D39C")]
		[DebuggerHidden]
		public <RandomIrismove>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x115D54C", Offset = "0x115D54C", VA = "0x115D54C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x115D550", Offset = "0x115D550", VA = "0x115D550", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x115D6BC", Offset = "0x115D6BC", VA = "0x115D6BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float timeBetweenEyeMoves;

	[Token(Token = "0x4001107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture replaceEyeTextureOptional;

	[Token(Token = "0x4001108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 _maxOffset;

	[Token(Token = "0x4001109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer _eyeRenderer;

	[Token(Token = "0x400110A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float _nextIrisMove;

	[Token(Token = "0x400110B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEngine.XR.InputDevice m_HmdDevice;

	[Token(Token = "0x60012BF")]
	[Address(RVA = "0x115CE98", Offset = "0x115CE98", VA = "0x115CE98")]
	private void Start()
	{
	}

	[Token(Token = "0x60012C0")]
	[Address(RVA = "0x115CFC4", Offset = "0x115CFC4", VA = "0x115CFC4", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x60012C1")]
	[Address(RVA = "0x115D114", Offset = "0x115D114", VA = "0x115D114", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60012C2")]
	[Address(RVA = "0x115D1CC", Offset = "0x115D1CC", VA = "0x115D1CC", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x60012C3")]
	[Address(RVA = "0x115CFC8", Offset = "0x115CFC8", VA = "0x115CFC8")]
	private void AddObserved()
	{
	}

	[Token(Token = "0x60012C4")]
	[Address(RVA = "0x115D1E8", Offset = "0x115D1E8", VA = "0x115D1E8")]
	private void Update()
	{
	}

	[Token(Token = "0x60012C5")]
	[Address(RVA = "0x115D274", Offset = "0x115D274", VA = "0x115D274")]
	private void UntrackedEyeStuff()
	{
	}

	[Token(Token = "0x60012C6")]
	[Address(RVA = "0x115D328", Offset = "0x115D328", VA = "0x115D328")]
	[IteratorStateMachine(typeof(<RandomIrismove>d__13))]
	private IEnumerator<float> RandomIrismove()
	{
		return null;
	}

	[Token(Token = "0x60012C7")]
	[Address(RVA = "0x115D3C4", Offset = "0x115D3C4", VA = "0x115D3C4", Slot = "54")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60012C8")]
	[Address(RVA = "0x115D530", Offset = "0x115D530", VA = "0x115D530")]
	public EyeMovement()
	{
	}
}
[Token(Token = "0x2000282")]
public class AddForcesInteractable : MonoBehaviour, IInteractable
{
	[Token(Token = "0x2000283")]
	private enum ForceType
	{
		[Token(Token = "0x4001119")]
		Force,
		[Token(Token = "0x400111A")]
		Torque
	}

	[Token(Token = "0x2000284")]
	[CompilerGenerated]
	private sealed class <_Applyforces>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AddForcesInteractable <>4__this;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool <wasKinematic>5__2;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <actionDuration>5__3;

		[Token(Token = "0x17000229")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60012D7")]
			[Address(RVA = "0x115DC44", Offset = "0x115DC44", VA = "0x115DC44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700022A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012D9")]
			[Address(RVA = "0x115DC8C", Offset = "0x115DC8C", VA = "0x115DC8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x115D908", Offset = "0x115D908", VA = "0x115D908")]
		[DebuggerHidden]
		public <_Applyforces>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x115D9A4", Offset = "0x115D9A4", VA = "0x115D9A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x115D9A8", Offset = "0x115D9A8", VA = "0x115D9A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x115DC4C", Offset = "0x115DC4C", VA = "0x115DC4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400110F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Rigidbody targetRB;

	[Token(Token = "0x4001110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LocalizedString useText;

	[Token(Token = "0x4001111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ForceType forceType;

	[Token(Token = "0x4001112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private Vector3 direction;

	[Token(Token = "0x4001113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float power;

	[Token(Token = "0x4001114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[UnityEngine.Tooltip("How long until we can do this again.")]
	[SerializeField]
	private float cooldDown;

	[Token(Token = "0x4001115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("If >0, use continuous force for this duration, else use impulse.")]
	[SerializeField]
	private float forceDuration;

	[Token(Token = "0x4001116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UnityEvent onInteract;

	[Token(Token = "0x4001117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool inProgress;

	[Token(Token = "0x60012CF")]
	[Address(RVA = "0x115D758", Offset = "0x115D758", VA = "0x115D758", Slot = "6")]
	public GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x60012D0")]
	[Address(RVA = "0x115D760", Offset = "0x115D760", VA = "0x115D760", Slot = "5")]
	public LocalizedString GetInteractionText()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x60012D1")]
	[Address(RVA = "0x115D774", Offset = "0x115D774", VA = "0x115D774", Slot = "4")]
	public void Interact()
	{
	}

	[Token(Token = "0x60012D2")]
	[Address(RVA = "0x115D894", Offset = "0x115D894", VA = "0x115D894")]
	[IteratorStateMachine(typeof(<_Applyforces>d__12))]
	private IEnumerator<float> _Applyforces()
	{
		return null;
	}

	[Token(Token = "0x60012D3")]
	[Address(RVA = "0x115D930", Offset = "0x115D930", VA = "0x115D930")]
	public AddForcesInteractable()
	{
	}
}
[Token(Token = "0x2000285")]
public class AimIKTarget : MonoBehaviour
{
	[Token(Token = "0x4001120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float amplitudeX;

	[Token(Token = "0x4001121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float amplitudeY;

	[Token(Token = "0x4001122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float frequencyX;

	[Token(Token = "0x4001123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float frequencyY;

	[Token(Token = "0x4001124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float recoilAmount;

	[Token(Token = "0x4001125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float recoilRecoverySpeed;

	[Token(Token = "0x4001126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float randomMovementAmount;

	[Token(Token = "0x4001127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float randomMovementFrequency;

	[Token(Token = "0x4001128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool shouldSway;

	[Token(Token = "0x4001129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 startPos;

	[Token(Token = "0x400112A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float currentRecoil;

	[Token(Token = "0x400112B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float randomMovement;

	[Token(Token = "0x400112C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float randomMovementTimer;

	[Token(Token = "0x60012DA")]
	[Address(RVA = "0x115DCE8", Offset = "0x115DCE8", VA = "0x115DCE8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012DB")]
	[Address(RVA = "0x115DD18", Offset = "0x115DD18", VA = "0x115DD18")]
	private void Update()
	{
	}

	[Token(Token = "0x60012DC")]
	[Address(RVA = "0x115DEB4", Offset = "0x115DEB4", VA = "0x115DEB4")]
	public void Recoil()
	{
	}

	[Token(Token = "0x60012DD")]
	[Address(RVA = "0x115DEEC", Offset = "0x115DEEC", VA = "0x115DEEC")]
	public AimIKTarget()
	{
	}
}
[Token(Token = "0x2000286")]
public class DisableGameObjectIfNotFlat : MonoBehaviour
{
	[Token(Token = "0x400112D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool reverse;

	[Token(Token = "0x60012DE")]
	[Address(RVA = "0x115DF0C", Offset = "0x115DF0C", VA = "0x115DF0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012DF")]
	[Address(RVA = "0x115DF40", Offset = "0x115DF40", VA = "0x115DF40")]
	public DisableGameObjectIfNotFlat()
	{
	}
}
[Token(Token = "0x2000287")]
public class FlatGrabber : HVRGrabberBase
{
	[Token(Token = "0x60012E0")]
	[Address(RVA = "0x115DF48", Offset = "0x115DF48", VA = "0x115DF48")]
	public FlatGrabber()
	{
	}
}
[Token(Token = "0x2000288")]
public class FlatItemHolder : MonoBehaviour
{
	[Token(Token = "0x400112E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform revolverHolder;

	[Token(Token = "0x400112F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform pickaxeHolder;

	[Token(Token = "0x4001130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform sledgeHolder;

	[Token(Token = "0x4001131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform shovelHolder;

	[Token(Token = "0x4001132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform panHolder;

	[Token(Token = "0x4001133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform dynamiteHolder;

	[Token(Token = "0x4001134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform armatureRoot;

	[Token(Token = "0x4001135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform detectorHolder;

	[Token(Token = "0x60012E1")]
	[Address(RVA = "0x115DF50", Offset = "0x115DF50", VA = "0x115DF50")]
	private void Start()
	{
	}

	[Token(Token = "0x60012E2")]
	[Address(RVA = "0x115DF54", Offset = "0x115DF54", VA = "0x115DF54")]
	private void Update()
	{
	}

	[Token(Token = "0x60012E3")]
	[Address(RVA = "0x115DF58", Offset = "0x115DF58", VA = "0x115DF58")]
	public FlatItemHolder()
	{
	}
}
[Token(Token = "0x2000289")]
public class FlatSafeDialInteractable : MonoBehaviour, IInteractable
{
	[Token(Token = "0x4001136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SafeLockDial safeLockDial;

	[Token(Token = "0x4001137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LocalizedString interactionText;

	[Token(Token = "0x4001138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody dialRB;

	[Token(Token = "0x60012E4")]
	[Address(RVA = "0x115DF60", Offset = "0x115DF60", VA = "0x115DF60")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012E5")]
	[Address(RVA = "0x115DFC0", Offset = "0x115DFC0", VA = "0x115DFC0", Slot = "4")]
	public void Interact()
	{
	}

	[Token(Token = "0x60012E6")]
	[Address(RVA = "0x115E00C", Offset = "0x115E00C", VA = "0x115E00C", Slot = "5")]
	public LocalizedString GetInteractionText()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x60012E7")]
	[Address(RVA = "0x115E020", Offset = "0x115E020", VA = "0x115E020", Slot = "6")]
	public GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x60012E8")]
	[Address(RVA = "0x115E028", Offset = "0x115E028", VA = "0x115E028")]
	public FlatSafeDialInteractable()
	{
	}
}
[Token(Token = "0x200028A")]
public class HVRCustomSocket : HVRSocket
{
	[Token(Token = "0x200028C")]
	[CompilerGenerated]
	private sealed class <DelayedIgnoreCollision>d__21 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRCustomSocket <>4__this;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HVRGrabbable grabbable;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ignore;

		[Token(Token = "0x1700022B")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001303")]
			[Address(RVA = "0x115FA58", Offset = "0x115FA58", VA = "0x115FA58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700022C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001305")]
			[Address(RVA = "0x115FAA0", Offset = "0x115FAA0", VA = "0x115FAA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x115F934", Offset = "0x115F934", VA = "0x115F934")]
		[DebuggerHidden]
		public <DelayedIgnoreCollision>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x115F9A0", Offset = "0x115F9A0", VA = "0x115F9A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x115F9A4", Offset = "0x115F9A4", VA = "0x115F9A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x115FA60", Offset = "0x115FA60", VA = "0x115FA60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	public int AmountLeft;

	[Token(Token = "0x400113A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public TextMeshPro CounterText;

	[Token(Token = "0x60012E9")]
	[Address(RVA = "0x115E030", Offset = "0x115E030", VA = "0x115E030", Slot = "22")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60012EA")]
	[Address(RVA = "0x115E04C", Offset = "0x115E04C", VA = "0x115E04C")]
	private void RegisterCallbacks()
	{
	}

	[Token(Token = "0x60012EB")]
	[Address(RVA = "0x115E1AC", Offset = "0x115E1AC", VA = "0x115E1AC", Slot = "23")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60012EC")]
	[Address(RVA = "0x115E2C4", Offset = "0x115E2C4", VA = "0x115E2C4", Slot = "25")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60012ED")]
	[Address(RVA = "0x115E4D0", Offset = "0x115E4D0", VA = "0x115E4D0", Slot = "47")]
	public override bool CanHover(HVRGrabbable grabbable)
	{
		return default(bool);
	}

	[Token(Token = "0x60012EE")]
	[Address(RVA = "0x115E72C", Offset = "0x115E72C", VA = "0x115E72C", Slot = "49")]
	protected override void OnHoverEnter(HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x60012EF")]
	[Address(RVA = "0x115E9E4", Offset = "0x115E9E4", VA = "0x115E9E4", Slot = "46")]
	public override bool CanGrab(HVRGrabbable grabbable)
	{
		return default(bool);
	}

	[Token(Token = "0x60012F0")]
	[Address(RVA = "0x115EAC8", Offset = "0x115EAC8", VA = "0x115EAC8", Slot = "48")]
	protected override void OnReleased(HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x60012F1")]
	[Address(RVA = "0x115EE44", Offset = "0x115EE44", VA = "0x115EE44", Slot = "41")]
	protected override void OnAfterGrabbed(HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x60012F2")]
	[Address(RVA = "0x115F18C", Offset = "0x115F18C", VA = "0x115F18C")]
	public string CurrentToolName()
	{
		return null;
	}

	[Token(Token = "0x60012F3")]
	[Address(RVA = "0x115EF30", Offset = "0x115EF30", VA = "0x115EF30")]
	public void FillSocket()
	{
	}

	[Token(Token = "0x60012F4")]
	[Address(RVA = "0x115F140", Offset = "0x115F140", VA = "0x115F140")]
	public bool TryAcquireItem()
	{
		return default(bool);
	}

	[Token(Token = "0x60012F5")]
	[Address(RVA = "0x115F4D4", Offset = "0x115F4D4", VA = "0x115F4D4")]
	public void ReduceAmountLeft()
	{
	}

	[Token(Token = "0x60012F6")]
	[Address(RVA = "0x115F5E8", Offset = "0x115F5E8", VA = "0x115F5E8")]
	public void IncreaseAmountLeft(int max)
	{
	}

	[Token(Token = "0x60012F7")]
	[Address(RVA = "0x115E3EC", Offset = "0x115E3EC", VA = "0x115E3EC")]
	public void UpdateCounter()
	{
	}

	[Token(Token = "0x60012F8")]
	[Address(RVA = "0x115F680", Offset = "0x115F680", VA = "0x115F680")]
	internal void ResetSocket()
	{
	}

	[Token(Token = "0x60012F9")]
	[Address(RVA = "0x115F318", Offset = "0x115F318", VA = "0x115F318")]
	public void SetCanInteract()
	{
	}

	[Token(Token = "0x60012FA")]
	[Address(RVA = "0x115F698", Offset = "0x115F698", VA = "0x115F698", Slot = "62")]
	protected override void HandleRigidBodyGrab(HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x60012FB")]
	[Address(RVA = "0x115EC84", Offset = "0x115EC84", VA = "0x115EC84")]
	public void IgnoreCollisionWithPlayer(HVRGrabbable grabbable, bool ignore = true)
	{
	}

	[Token(Token = "0x60012FC")]
	[Address(RVA = "0x115F888", Offset = "0x115F888", VA = "0x115F888")]
	[IteratorStateMachine(typeof(<DelayedIgnoreCollision>d__21))]
	public IEnumerator<float> DelayedIgnoreCollision(float time, HVRGrabbable grabbable, bool ignore)
	{
		return null;
	}

	[Token(Token = "0x60012FD")]
	[Address(RVA = "0x115F95C", Offset = "0x115F95C", VA = "0x115F95C")]
	public HVRCustomSocket()
	{
	}
}
[Token(Token = "0x200028D")]
public class MicFocusCheck : MonoBehaviour
{
	[Token(Token = "0x200028E")]
	[CompilerGenerated]
	private sealed class <DelayedCheckMic>d__7 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x1700022D")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001311")]
			[Address(RVA = "0x115FD9C", Offset = "0x115FD9C", VA = "0x115FD9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700022E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001313")]
			[Address(RVA = "0x115FDE4", Offset = "0x115FDE4", VA = "0x115FDE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x115FBE0", Offset = "0x115FBE0", VA = "0x115FBE0")]
		[DebuggerHidden]
		public <DelayedCheckMic>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x115FC10", Offset = "0x115FC10", VA = "0x115FC10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x115FC14", Offset = "0x115FC14", VA = "0x115FC14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x115FDA4", Offset = "0x115FDA4", VA = "0x115FDA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView photonView;

	[Token(Token = "0x6001306")]
	[Address(RVA = "0x115FAFC", Offset = "0x115FAFC", VA = "0x115FAFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001307")]
	[Address(RVA = "0x115FB54", Offset = "0x115FB54", VA = "0x115FB54")]
	private void Start()
	{
	}

	[Token(Token = "0x6001308")]
	[Address(RVA = "0x115FB58", Offset = "0x115FB58", VA = "0x115FB58")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001309")]
	[Address(RVA = "0x115FB5C", Offset = "0x115FB5C", VA = "0x115FB5C")]
	private void Update()
	{
	}

	[Token(Token = "0x600130A")]
	[Address(RVA = "0x115FB78", Offset = "0x115FB78", VA = "0x115FB78")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x600130B")]
	[Address(RVA = "0x115FB7C", Offset = "0x115FB7C", VA = "0x115FB7C")]
	private void CheckMic()
	{
	}

	[Token(Token = "0x600130C")]
	[Address(RVA = "0x115FB80", Offset = "0x115FB80", VA = "0x115FB80")]
	[IteratorStateMachine(typeof(<DelayedCheckMic>d__7))]
	private IEnumerator<float> DelayedCheckMic()
	{
		return null;
	}

	[Token(Token = "0x600130D")]
	[Address(RVA = "0x115FC08", Offset = "0x115FC08", VA = "0x115FC08")]
	public MicFocusCheck()
	{
	}
}
[Token(Token = "0x200028F")]
public class PlayerAvatar : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x2000290")]
	[CompilerGenerated]
	private sealed class <DelayedTP>d__52 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x17000231")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600133C")]
			[Address(RVA = "0x1162418", Offset = "0x1162418", VA = "0x1162418", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000232")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600133E")]
			[Address(RVA = "0x1162460", Offset = "0x1162460", VA = "0x1162460", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x11613C0", Offset = "0x11613C0", VA = "0x11613C0")]
		[DebuggerHidden]
		public <DelayedTP>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x116238C", Offset = "0x116238C", VA = "0x116238C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x1162390", Offset = "0x1162390", VA = "0x1162390", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x1162420", Offset = "0x1162420", VA = "0x1162420", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerAvatar LocalInstance;

	[Token(Token = "0x4001147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HandGadgetController handGadgetController;

	[Token(Token = "0x4001148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private FlatUIController flatUIController;

	[Token(Token = "0x4001149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject headCollider;

	[Token(Token = "0x400114A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public SetupPlayerAvatar setupPlayerAvatar;

	[Token(Token = "0x400114B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] playerVisuals;

	[Token(Token = "0x400114D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VRIK playerVRIK;

	[Token(Token = "0x400114E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject playerSlapCollider;

	[Token(Token = "0x400114F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Renderer> _disabledRenders;

	[Token(Token = "0x4001150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Collider[] _playerColliders;

	[Token(Token = "0x4001151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public bool isMe;

	[Token(Token = "0x4001152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	[HideInInspector]
	public bool toolsLoaded;

	[Token(Token = "0x4001153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public CustomHexaBodyPlayer3 hexabody;

	[Token(Token = "0x4001154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private KJHexaBodyTeleporterModified teleporter;

	[Token(Token = "0x4001155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private HexaCameraRig cameraRig;

	[Token(Token = "0x4001156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private CustomHVRHexaBodyInputWrapper playerInput;

	[Token(Token = "0x4001157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public CustomHVRHandGrabber leftHand;

	[Token(Token = "0x4001158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public CustomHVRHandGrabber rightHand;

	[Token(Token = "0x4001159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Canvas genericPlayerWorldCanvas;

	[Token(Token = "0x400115A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GloveLight gloveLight;

	[Token(Token = "0x400115B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public CustomHexaBodyPlayer3 customHexabody;

	[Token(Token = "0x400115C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public PlayerHipSlotPositionHelper playerHipSlotPositionHelper;

	[Token(Token = "0x400115D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public TunnellingMobile tunnelingProMobile;

	[NonSerialized]
	[Token(Token = "0x400115E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public bool forceKinematic;

	[Token(Token = "0x400115F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private AudioSource voiceSpeaker;

	[Token(Token = "0x4001160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private bool setKinematicOnAwake;

	[Token(Token = "0x4001161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[HideInInspector]
	public Player punPlayerRef;

	[Token(Token = "0x4001162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private ParticleSystem playerPuke;

	[Token(Token = "0x4001163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private SpriteRenderer saveIconSprite;

	[Token(Token = "0x4001164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private CoroutineHandle _saveIconHandle;

	[Token(Token = "0x1700022F")]
	public PlayerHealthSystem PlayerHealthSystem
	{
		[Token(Token = "0x6001314")]
		[Address(RVA = "0x115FE40", Offset = "0x115FE40", VA = "0x115FE40")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001315")]
		[Address(RVA = "0x115FE48", Offset = "0x115FE48", VA = "0x115FE48")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000230")]
	public Collider[] GetAllColliders
	{
		[Token(Token = "0x6001316")]
		[Address(RVA = "0x115FE50", Offset = "0x115FE50", VA = "0x115FE50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001317")]
	[Address(RVA = "0x115FE58", Offset = "0x115FE58", VA = "0x115FE58")]
	public void TeleportPlayer(Vector3 worldPos)
	{
	}

	[Token(Token = "0x6001318")]
	[Address(RVA = "0x115FEC0", Offset = "0x115FEC0", VA = "0x115FEC0")]
	public void TeleportPlayerByHeadPosition(Vector3 headWorldPos)
	{
	}

	[Token(Token = "0x6001319")]
	[Address(RVA = "0x115FFE4", Offset = "0x115FFE4", VA = "0x115FFE4")]
	public void SetSmartCameraRotation(Quaternion rotation, bool allowFullRotation)
	{
	}

	[Token(Token = "0x600131A")]
	[Address(RVA = "0x1160390", Offset = "0x1160390", VA = "0x1160390")]
	public void ResetCameraRotation()
	{
	}

	[Token(Token = "0x600131B")]
	[Address(RVA = "0x1160560", Offset = "0x1160560", VA = "0x1160560")]
	public void ToggleLocomotion(bool updateGrabbing, bool updateMovement, bool updateTurning, bool updateTeleport)
	{
	}

	[Token(Token = "0x600131C")]
	[Address(RVA = "0x1160628", Offset = "0x1160628", VA = "0x1160628")]
	public static CustomHexaBodyPlayer3 GetHexabody()
	{
		return null;
	}

	[Token(Token = "0x600131D")]
	[Address(RVA = "0x11602B0", Offset = "0x11602B0", VA = "0x11602B0")]
	public static HexaCameraRig GetCameraRig()
	{
		return null;
	}

	[Token(Token = "0x600131E")]
	[Address(RVA = "0x1160708", Offset = "0x1160708", VA = "0x1160708")]
	public static KJHexaBodyTeleporterModified GetTeleporter()
	{
		return null;
	}

	[Token(Token = "0x600131F")]
	[Address(RVA = "0x11607E8", Offset = "0x11607E8", VA = "0x11607E8")]
	public static CustomHVRHexaBodyInputWrapper GetPlayerInput()
	{
		return null;
	}

	[Token(Token = "0x6001320")]
	[Address(RVA = "0x115FFB4", Offset = "0x115FFB4", VA = "0x115FFB4")]
	public static Vector3 GetCameraPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001321")]
	[Address(RVA = "0x11608C8", Offset = "0x11608C8", VA = "0x11608C8")]
	public static Vector3 GetLocoBallPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001322")]
	[Address(RVA = "0x1160940", Offset = "0x1160940", VA = "0x1160940")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001323")]
	[Address(RVA = "0x1160D84", Offset = "0x1160D84", VA = "0x1160D84")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001324")]
	[Address(RVA = "0x1161000", Offset = "0x1161000", VA = "0x1161000")]
	private void SceneChangeStarted()
	{
	}

	[Token(Token = "0x6001325")]
	[Address(RVA = "0x1161008", Offset = "0x1161008", VA = "0x1161008")]
	private void NewSceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x6001326")]
	[Address(RVA = "0x11611A8", Offset = "0x11611A8", VA = "0x11611A8")]
	private void SceneChangeFinished()
	{
	}

	[Token(Token = "0x6001327")]
	[Address(RVA = "0x1161360", Offset = "0x1161360", VA = "0x1161360")]
	[IteratorStateMachine(typeof(<DelayedTP>d__52))]
	private IEnumerator<float> DelayedTP()
	{
		return null;
	}

	[Token(Token = "0x6001328")]
	[Address(RVA = "0x11613E8", Offset = "0x11613E8", VA = "0x11613E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001329")]
	[Address(RVA = "0x1161520", Offset = "0x1161520", VA = "0x1161520")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600132A")]
	[Address(RVA = "0x1161010", Offset = "0x1161010", VA = "0x1161010")]
	public void Setup(bool local)
	{
	}

	[Token(Token = "0x600132B")]
	[Address(RVA = "0x1161604", Offset = "0x1161604", VA = "0x1161604")]
	public HandGadgetController GetPlayerHandGagdetController()
	{
		return null;
	}

	[Token(Token = "0x600132C")]
	[Address(RVA = "0x1161664", Offset = "0x1161664", VA = "0x1161664")]
	[PunRPC]
	private void UpdateMyRootPositionRPC(Vector3 newPosition, Quaternion newRotation)
	{
	}

	[Token(Token = "0x600132D")]
	[Address(RVA = "0x1161710", Offset = "0x1161710", VA = "0x1161710")]
	public void TogglePlayerVisibilityAndCollider(bool status)
	{
	}

	[Token(Token = "0x600132E")]
	[Address(RVA = "0x1160D30", Offset = "0x1160D30", VA = "0x1160D30")]
	public void SetHexaKinematic(bool status)
	{
	}

	[Token(Token = "0x600132F")]
	[Address(RVA = "0x1160D64", Offset = "0x1160D64", VA = "0x1160D64")]
	public void SetHandsKinematic(bool status)
	{
	}

	[Token(Token = "0x6001330")]
	[Address(RVA = "0x1161C00", Offset = "0x1161C00", VA = "0x1161C00")]
	public void MutePlayer(bool mute)
	{
	}

	[Token(Token = "0x6001331")]
	[Address(RVA = "0x1161C50", Offset = "0x1161C50", VA = "0x1161C50")]
	public bool IsInElevator()
	{
		return default(bool);
	}

	[Token(Token = "0x6001332")]
	[Address(RVA = "0x1161D40", Offset = "0x1161D40", VA = "0x1161D40", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001333")]
	[Address(RVA = "0x1161F14", Offset = "0x1161F14", VA = "0x1161F14")]
	public CustomHVRHandGrabber GetClosestHand(Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x6001334")]
	[Address(RVA = "0x1162070", Offset = "0x1162070", VA = "0x1162070")]
	public void SetPuking(bool status)
	{
	}

	[Token(Token = "0x6001335")]
	[Address(RVA = "0x11620BC", Offset = "0x11620BC", VA = "0x11620BC")]
	public void ShowSaveIcon()
	{
	}

	[Token(Token = "0x6001336")]
	[Address(RVA = "0x1162260", Offset = "0x1162260", VA = "0x1162260")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001337")]
	[Address(RVA = "0x11622D4", Offset = "0x11622D4", VA = "0x11622D4")]
	public PlayerAvatar()
	{
	}
}
[Token(Token = "0x2000292")]
[RequireComponent(typeof(PlayerAvatar))]
public class PlayerHealthSystem : MonoBehaviourPun, IKillable, IDamageable
{
	[Token(Token = "0x2000293")]
	[CompilerGenerated]
	private sealed class <PlayerDeathCoroutine>d__38 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerHealthSystem <>4__this;

		[Token(Token = "0x17000238")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001367")]
			[Address(RVA = "0x1165094", Offset = "0x1165094", VA = "0x1165094", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000239")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001369")]
			[Address(RVA = "0x11650DC", Offset = "0x11650DC", VA = "0x11650DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x1163F9C", Offset = "0x1163F9C", VA = "0x1163F9C")]
		[DebuggerHidden]
		public <PlayerDeathCoroutine>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x1164638", Offset = "0x1164638", VA = "0x1164638", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0x116463C", Offset = "0x116463C", VA = "0x116463C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0x116509C", Offset = "0x116509C", VA = "0x116509C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000294")]
	[CompilerGenerated]
	private sealed class <PeriodicallyCheckIfAllPlayersDied>d__43 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerHealthSystem <>4__this;

		[Token(Token = "0x1700023A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600136D")]
			[Address(RVA = "0x1165374", Offset = "0x1165374", VA = "0x1165374", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700023B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600136F")]
			[Address(RVA = "0x11653BC", Offset = "0x11653BC", VA = "0x11653BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x11642EC", Offset = "0x11642EC", VA = "0x11642EC")]
		[DebuggerHidden]
		public <PeriodicallyCheckIfAllPlayersDied>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x1165138", Offset = "0x1165138", VA = "0x1165138", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0x116513C", Offset = "0x116513C", VA = "0x116513C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x116537C", Offset = "0x116537C", VA = "0x116537C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400116B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DamageType takeDamageType;

	[Token(Token = "0x400116C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PlayerAvatar _player;

	[Token(Token = "0x400116D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip[] damageTakenClips;

	[Token(Token = "0x400116E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip deathClip;

	[Token(Token = "0x400116F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioClip resurrectClip;

	[Token(Token = "0x4001170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int maxHealth;

	[Token(Token = "0x4001171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int totalDamageTaken;

	[Token(Token = "0x4001173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PlayerResurrectionObject playerResurrectionObject;

	[Token(Token = "0x4001174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Atmosphere deathAtmosphere;

	[Token(Token = "0x4001175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Atmosphere deathAtmosphereTopWorld;

	[Token(Token = "0x4001176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private PlayerDamageEffect _damageEffect;

	[Token(Token = "0x4001177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool _dying;

	[Token(Token = "0x4001178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<PlayerHealthSystem> remainingPlayersAlive;

	[Token(Token = "0x4001179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject _myResurrectionObject;

	[Token(Token = "0x400117A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool nunChompyPresent;

	[Token(Token = "0x400117B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private NunChompyCompanion nun;

	[Token(Token = "0x400117C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AudioClip takeDamageVibrationClip;

	[Token(Token = "0x400117D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioClip takeExplosionDamageVibrationClip;

	[Token(Token = "0x17000235")]
	public Action<GameObject> deathAction
	{
		[Token(Token = "0x6001345")]
		[Address(RVA = "0x1162638", Offset = "0x1162638", VA = "0x1162638", Slot = "5")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001346")]
		[Address(RVA = "0x1162640", Offset = "0x1162640", VA = "0x1162640", Slot = "6")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000236")]
	public GameObject GetGameObject
	{
		[Token(Token = "0x6001347")]
		[Address(RVA = "0x1162648", Offset = "0x1162648", VA = "0x1162648", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000237")]
	public bool IsDead
	{
		[Token(Token = "0x6001348")]
		[Address(RVA = "0x1162650", Offset = "0x1162650", VA = "0x1162650", Slot = "8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001349")]
	[Address(RVA = "0x1162658", Offset = "0x1162658", VA = "0x1162658")]
	private void Start()
	{
	}

	[Token(Token = "0x600134A")]
	[Address(RVA = "0x1162A34", Offset = "0x1162A34", VA = "0x1162A34")]
	private void SceneChangeStarted()
	{
	}

	[Token(Token = "0x600134B")]
	[Address(RVA = "0x1162B18", Offset = "0x1162B18", VA = "0x1162B18")]
	private void SceneChangeFinished()
	{
	}

	[Token(Token = "0x600134C")]
	[Address(RVA = "0x1162BFC", Offset = "0x1162BFC", VA = "0x1162BFC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600134D")]
	[Address(RVA = "0x1163034", Offset = "0x1163034", VA = "0x1163034")]
	private void LevelChanged(int level)
	{
	}

	[Token(Token = "0x600134E")]
	[Address(RVA = "0x1163550", Offset = "0x1163550", VA = "0x1163550")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600134F")]
	[Address(RVA = "0x11635E8", Offset = "0x11635E8", VA = "0x11635E8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001350")]
	[Address(RVA = "0x1162994", Offset = "0x1162994", VA = "0x1162994")]
	private void MaxHealthUpgraded(OtherUpgradePathScriptableObject.UpgradeType arg0)
	{
	}

	[Token(Token = "0x6001351")]
	[Address(RVA = "0x1163668", Offset = "0x1163668", VA = "0x1163668")]
	private void SetMaxHealth(int newMaxHealth)
	{
	}

	[Token(Token = "0x6001352")]
	[Address(RVA = "0x1163704", Offset = "0x1163704", VA = "0x1163704")]
	public void Heal(int amount)
	{
	}

	[Token(Token = "0x6001353")]
	[Address(RVA = "0x11637C0", Offset = "0x11637C0", VA = "0x11637C0", Slot = "9")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6001354")]
	[Address(RVA = "0x1163B94", Offset = "0x1163B94", VA = "0x1163B94", Slot = "4")]
	[PunRPC]
	public void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6001355")]
	[Address(RVA = "0x1163F28", Offset = "0x1163F28", VA = "0x1163F28")]
	[IteratorStateMachine(typeof(<PlayerDeathCoroutine>d__38))]
	private IEnumerator<float> PlayerDeathCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001356")]
	[Address(RVA = "0x1163044", Offset = "0x1163044", VA = "0x1163044")]
	public void ResetHealth()
	{
	}

	[Token(Token = "0x6001357")]
	[Address(RVA = "0x1163FC4", Offset = "0x1163FC4", VA = "0x1163FC4")]
	[PunRPC]
	public void ResetHealthRPC()
	{
	}

	[Token(Token = "0x6001358")]
	[Address(RVA = "0x1163FC8", Offset = "0x1163FC8", VA = "0x1163FC8")]
	[PunRPC]
	private void HalfPlayersLootsRPC()
	{
	}

	[Token(Token = "0x6001359")]
	[Address(RVA = "0x1164044", Offset = "0x1164044", VA = "0x1164044")]
	public void Resurrect()
	{
	}

	[Token(Token = "0x600135A")]
	[Address(RVA = "0x1164278", Offset = "0x1164278", VA = "0x1164278")]
	[IteratorStateMachine(typeof(<PeriodicallyCheckIfAllPlayersDied>d__43))]
	private IEnumerator<float> PeriodicallyCheckIfAllPlayersDied()
	{
		return null;
	}

	[Token(Token = "0x600135B")]
	[Address(RVA = "0x1164314", Offset = "0x1164314", VA = "0x1164314")]
	public int GetRemainingPlayersAlive()
	{
		return default(int);
	}

	[Token(Token = "0x600135C")]
	[Address(RVA = "0x1164384", Offset = "0x1164384", VA = "0x1164384")]
	public bool IsAlive()
	{
		return default(bool);
	}

	[Token(Token = "0x600135D")]
	[Address(RVA = "0x1164394", Offset = "0x1164394", VA = "0x1164394")]
	public bool GetOneHeartLeft()
	{
		return default(bool);
	}

	[Token(Token = "0x600135E")]
	[Address(RVA = "0x1164180", Offset = "0x1164180", VA = "0x1164180")]
	public void SetNunChompyPresent(bool _present, NunChompyCompanion _nun)
	{
	}

	[Token(Token = "0x600135F")]
	[Address(RVA = "0x11643A8", Offset = "0x11643A8", VA = "0x11643A8")]
	public int GetTotalDamageTaken()
	{
		return default(int);
	}

	[Token(Token = "0x6001360")]
	[Address(RVA = "0x11643B0", Offset = "0x11643B0", VA = "0x11643B0")]
	private void NotifyOthersOfDeath()
	{
	}

	[Token(Token = "0x6001361")]
	[Address(RVA = "0x1164528", Offset = "0x1164528", VA = "0x1164528")]
	[PunRPC]
	private void NotifyOthersOfDeathRPC()
	{
	}

	[Token(Token = "0x6001362")]
	[Address(RVA = "0x1164590", Offset = "0x1164590", VA = "0x1164590")]
	public PlayerHealthSystem()
	{
	}
}
[Token(Token = "0x2000295")]
public class PlayerResurrectionObject : MonoBehaviourPun, IPunInstantiateMagicCallback
{
	[Token(Token = "0x2000296")]
	[CompilerGenerated]
	private sealed class <WaitCoroutine>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerResurrectionObject <>4__this;

		[Token(Token = "0x1700023C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600137D")]
			[Address(RVA = "0x1165DC8", Offset = "0x1165DC8", VA = "0x1165DC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700023D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600137F")]
			[Address(RVA = "0x1165E10", Offset = "0x1165E10", VA = "0x1165E10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x1165794", Offset = "0x1165794", VA = "0x1165794")]
		[DebuggerHidden]
		public <WaitCoroutine>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x1165C34", Offset = "0x1165C34", VA = "0x1165C34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x1165C38", Offset = "0x1165C38", VA = "0x1165C38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x1165DD0", Offset = "0x1165DD0", VA = "0x1165DD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayerHealthSystem myPlayerHealthSystem;

	[Token(Token = "0x4001185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HVRGrabbable grabbable;

	[Token(Token = "0x4001186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float timeToHold;

	[Token(Token = "0x4001187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip heartbeat;

	[Token(Token = "0x4001188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool _activated;

	[Token(Token = "0x4001189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private CoroutineHandle _coroutineHandle;

	[Token(Token = "0x400118A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _timeToWait;

	[Token(Token = "0x400118B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _timeToHeartbeat;

	[Token(Token = "0x6001370")]
	[Address(RVA = "0x1165418", Offset = "0x1165418", VA = "0x1165418")]
	private void Start()
	{
	}

	[Token(Token = "0x6001371")]
	[Address(RVA = "0x1165558", Offset = "0x1165558", VA = "0x1165558")]
	public void Init(PlayerHealthSystem playerHealthSystem, Vector3 pos, Quaternion rot)
	{
	}

	[Token(Token = "0x6001372")]
	[Address(RVA = "0x11655F8", Offset = "0x11655F8", VA = "0x11655F8")]
	private void UnGrabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001373")]
	[Address(RVA = "0x1165654", Offset = "0x1165654", VA = "0x1165654")]
	private void Grabbed(HVRHandGrabber grabber, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001374")]
	[Address(RVA = "0x1165720", Offset = "0x1165720", VA = "0x1165720")]
	[IteratorStateMachine(typeof(<WaitCoroutine>d__12))]
	private IEnumerator<float> WaitCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001375")]
	[Address(RVA = "0x11657BC", Offset = "0x11657BC", VA = "0x11657BC")]
	[PunRPC]
	private void DespawnRPC()
	{
	}

	[Token(Token = "0x6001376")]
	[Address(RVA = "0x116585C", Offset = "0x116585C", VA = "0x116585C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001377")]
	[Address(RVA = "0x1165AE0", Offset = "0x1165AE0", VA = "0x1165AE0")]
	[PunRPC]
	private void HeartbeatRPC(float pitch)
	{
	}

	[Token(Token = "0x6001378")]
	[Address(RVA = "0x1165B88", Offset = "0x1165B88", VA = "0x1165B88", Slot = "4")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001379")]
	[Address(RVA = "0x1165C24", Offset = "0x1165C24", VA = "0x1165C24")]
	public PlayerResurrectionObject()
	{
	}
}
[Token(Token = "0x2000297")]
public class PlayerToolSocketController : MonoBehaviourPun
{
	[Token(Token = "0x400118F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HVRSocket leftHipToolSocket;

	[Token(Token = "0x4001190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HVRSocket rightHipToolSocket;

	[Token(Token = "0x4001191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private HVRSocket leftHandToolSocket;

	[Token(Token = "0x4001192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HVRSocket rightHandToolSocket;

	[Token(Token = "0x4001193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CustomItemSocketFilter leftHipToolSocketFilter;

	[Token(Token = "0x4001194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CustomItemSocketFilter rightHipToolSocketFilter;

	[Token(Token = "0x4001195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CustomItemSocketFilter leftHandToolSocketFilter;

	[Token(Token = "0x4001196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CustomItemSocketFilter rightHandToolSocketFilter;

	[Token(Token = "0x4001197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerToolSocketController localPlayer;

	[Token(Token = "0x4001198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool toolSocketItemsLoaded;

	[Token(Token = "0x1700023E")]
	public HVRSocket[] playerSockets
	{
		[Token(Token = "0x6001380")]
		[Address(RVA = "0x1165E6C", Offset = "0x1165E6C", VA = "0x1165E6C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700023F")]
	public static PlayerToolSocketController LocalPlayer
	{
		[Token(Token = "0x6001381")]
		[Address(RVA = "0x1165FB4", Offset = "0x1165FB4", VA = "0x1165FB4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001382")]
	[Address(RVA = "0x1166084", Offset = "0x1166084", VA = "0x1166084")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001383")]
	[Address(RVA = "0x11661F8", Offset = "0x11661F8", VA = "0x11661F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001384")]
	[Address(RVA = "0x11662E0", Offset = "0x11662E0", VA = "0x11662E0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001385")]
	[Address(RVA = "0x1166494", Offset = "0x1166494", VA = "0x1166494")]
	public void Setup()
	{
	}

	[Token(Token = "0x6001386")]
	[Address(RVA = "0x11666C8", Offset = "0x11666C8", VA = "0x11666C8")]
	public void LoadToolSocketItems()
	{
	}

	[Token(Token = "0x6001387")]
	[Address(RVA = "0x11662DC", Offset = "0x11662DC", VA = "0x11662DC")]
	private void ToolBeltUpgraded(OtherUpgradePathScriptableObject.UpgradeType arg0)
	{
	}

	[Token(Token = "0x6001388")]
	[Address(RVA = "0x116679C", Offset = "0x116679C", VA = "0x116679C")]
	public PlayerToolSocketController()
	{
	}
}
[Token(Token = "0x2000298")]
[RequireComponent(typeof(AudioSource))]
public class PlayerWindLoop : MonoBehaviour
{
	[Token(Token = "0x2000299")]
	[CompilerGenerated]
	private sealed class <_SetWindLoopVolume>d__13 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerWindLoop <>4__this;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <lerpTime>5__2;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <originalLerpTime>5__3;

		[Token(Token = "0x17000240")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001393")]
			[Address(RVA = "0x1166E70", Offset = "0x1166E70", VA = "0x1166E70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000241")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001395")]
			[Address(RVA = "0x1166EB8", Offset = "0x1166EB8", VA = "0x1166EB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x1166C48", Offset = "0x1166C48", VA = "0x1166C48")]
		[DebuggerHidden]
		public <_SetWindLoopVolume>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x1166CA0", Offset = "0x1166CA0", VA = "0x1166CA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x1166CA4", Offset = "0x1166CA4", VA = "0x1166CA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x1166E78", Offset = "0x1166E78", VA = "0x1166E78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200029A")]
	[CompilerGenerated]
	private sealed class <_StopWindLoop>d__14 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerWindLoop <>4__this;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <originalVolume>5__3;

		[Token(Token = "0x17000242")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001399")]
			[Address(RVA = "0x1167004", Offset = "0x1167004", VA = "0x1167004", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000243")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600139B")]
			[Address(RVA = "0x116704C", Offset = "0x116704C", VA = "0x116704C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x1166C70", Offset = "0x1166C70", VA = "0x1166C70")]
		[DebuggerHidden]
		public <_StopWindLoop>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x1166F14", Offset = "0x1166F14", VA = "0x1166F14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x1166F18", Offset = "0x1166F18", VA = "0x1166F18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x116700C", Offset = "0x116700C", VA = "0x116700C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float minPlayerVelocity;

	[Token(Token = "0x400119A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float maxPlayerVelocity;

	[Token(Token = "0x400119B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource windLoopAudioSource;

	[Token(Token = "0x400119C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CustomHexaBodyPlayer3 hexaBody;

	[Token(Token = "0x400119D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float playerCurrentVelocityMagnitude;

	[Token(Token = "0x400119E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool windVolumeLoopCoroutineRunning;

	[Token(Token = "0x400119F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool stopWindLoopCoroutineRunning;

	[Token(Token = "0x40011A0")]
	private const string windLoopVolumeCoroutineName = "PlayerWindLoopVolumeCoroutine";

	[Token(Token = "0x40011A1")]
	private const string stopWindLoopCoroutineName = "PlayerWindLoopStopWindLoopCoroutine";

	[Token(Token = "0x6001389")]
	[Address(RVA = "0x11667A4", Offset = "0x11667A4", VA = "0x11667A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600138A")]
	[Address(RVA = "0x116680C", Offset = "0x116680C", VA = "0x116680C")]
	private void Update()
	{
	}

	[Token(Token = "0x600138B")]
	[Address(RVA = "0x116697C", Offset = "0x116697C", VA = "0x116697C")]
	private void StartWindCoroutine()
	{
	}

	[Token(Token = "0x600138C")]
	[Address(RVA = "0x1166A70", Offset = "0x1166A70", VA = "0x1166A70")]
	private void StopWindLoop()
	{
	}

	[Token(Token = "0x600138D")]
	[Address(RVA = "0x1166B60", Offset = "0x1166B60", VA = "0x1166B60")]
	[IteratorStateMachine(typeof(<_SetWindLoopVolume>d__13))]
	private IEnumerator<float> _SetWindLoopVolume()
	{
		return null;
	}

	[Token(Token = "0x600138E")]
	[Address(RVA = "0x1166BD4", Offset = "0x1166BD4", VA = "0x1166BD4")]
	[IteratorStateMachine(typeof(<_StopWindLoop>d__14))]
	private IEnumerator<float> _StopWindLoop()
	{
		return null;
	}

	[Token(Token = "0x600138F")]
	[Address(RVA = "0x1166C98", Offset = "0x1166C98", VA = "0x1166C98")]
	public PlayerWindLoop()
	{
	}
}
[Token(Token = "0x200029B")]
public class PS5ForceGrabberVibrate : MonoBehaviour
{
	[Token(Token = "0x40011AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool userRegularGrabberInstead;

	[Token(Token = "0x40011AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip vibrationClip;

	[Token(Token = "0x40011AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private VibrationTargetChannel targetChannel;

	[Token(Token = "0x40011AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private HVRForceGrabber forceGrabber;

	[Token(Token = "0x40011B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CustomHVRHandGrabber grabber;

	[Token(Token = "0x600139C")]
	[Address(RVA = "0x11670A8", Offset = "0x11670A8", VA = "0x11670A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600139D")]
	[Address(RVA = "0x11670AC", Offset = "0x11670AC", VA = "0x11670AC")]
	private void Start()
	{
	}

	[Token(Token = "0x600139E")]
	[Address(RVA = "0x11670B0", Offset = "0x11670B0", VA = "0x11670B0")]
	private void OnGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600139F")]
	[Address(RVA = "0x11670B4", Offset = "0x11670B4", VA = "0x11670B4")]
	public PS5ForceGrabberVibrate()
	{
	}
}
[Token(Token = "0x200029C")]
public class PS5PlayerVibrationController : MonoBehaviour
{
	[Token(Token = "0x40011B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource primaryAudioSource;

	[Token(Token = "0x40011B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource secondaryAudioSource;

	[Token(Token = "0x40011B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Velocity Sensitivity Settings")]
	private int velocityDivider;

	[Token(Token = "0x40011B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float clampMin;

	[Token(Token = "0x60013A0")]
	[Address(RVA = "0x11670BC", Offset = "0x11670BC", VA = "0x11670BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013A1")]
	[Address(RVA = "0x1167130", Offset = "0x1167130", VA = "0x1167130")]
	public void PlayVibrationOneShot(AudioClip clip, VibrationTargetChannel channel, bool important)
	{
	}

	[Token(Token = "0x60013A2")]
	[Address(RVA = "0x1167134", Offset = "0x1167134", VA = "0x1167134")]
	public void PanVibration(VibrationTargetChannel channel, int audioSource = 0)
	{
	}

	[Token(Token = "0x60013A3")]
	[Address(RVA = "0x1167138", Offset = "0x1167138", VA = "0x1167138")]
	public void StopVibration()
	{
	}

	[Token(Token = "0x60013A4")]
	[Address(RVA = "0x1167140", Offset = "0x1167140", VA = "0x1167140")]
	public void PlayVelocitySensitiveVibration(AudioClip clip, VibrationTargetChannel channel, float velocity, bool important)
	{
	}

	[Token(Token = "0x60013A5")]
	[Address(RVA = "0x1167148", Offset = "0x1167148", VA = "0x1167148")]
	public PS5PlayerVibrationController()
	{
	}
}
[Token(Token = "0x200029D")]
public enum VibrationTargetChannel
{
	[Token(Token = "0x40011B6")]
	Both,
	[Token(Token = "0x40011B7")]
	Left,
	[Token(Token = "0x40011B8")]
	Right
}
[Token(Token = "0x200029E")]
public class PS5ToolVibrate : MonoBehaviour
{
	[Token(Token = "0x60013A6")]
	[Address(RVA = "0x1167158", Offset = "0x1167158", VA = "0x1167158")]
	private void Start()
	{
	}

	[Token(Token = "0x60013A7")]
	[Address(RVA = "0x116715C", Offset = "0x116715C", VA = "0x116715C")]
	private void Update()
	{
	}

	[Token(Token = "0x60013A8")]
	[Address(RVA = "0x1167160", Offset = "0x1167160", VA = "0x1167160")]
	public PS5ToolVibrate()
	{
	}
}
[Token(Token = "0x200029F")]
public class PlayerAvatarDontDestroy : MonoBehaviourPun
{
	[Token(Token = "0x60013A9")]
	[Address(RVA = "0x1167168", Offset = "0x1167168", VA = "0x1167168")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013AA")]
	[Address(RVA = "0x116716C", Offset = "0x116716C", VA = "0x116716C")]
	[PunRPC]
	public void AddToDontDestroyRPC()
	{
	}

	[Token(Token = "0x60013AB")]
	[Address(RVA = "0x1167204", Offset = "0x1167204", VA = "0x1167204")]
	public PlayerAvatarDontDestroy()
	{
	}
}
[Token(Token = "0x20002A0")]
public class PlayerDamageEffect : MonoBehaviour
{
	[Token(Token = "0x20002A1")]
	[CompilerGenerated]
	private sealed class <DelayedSetup>d__17 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerDamageEffect <>4__this;

		[Token(Token = "0x17000244")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60013B9")]
			[Address(RVA = "0x1167878", Offset = "0x1167878", VA = "0x1167878", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000245")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013BB")]
			[Address(RVA = "0x11678C0", Offset = "0x11678C0", VA = "0x11678C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x11675C8", Offset = "0x11675C8", VA = "0x11675C8")]
		[DebuggerHidden]
		public <DelayedSetup>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x11676D0", Offset = "0x11676D0", VA = "0x11676D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x11676D4", Offset = "0x11676D4", VA = "0x11676D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x1167880", Offset = "0x1167880", VA = "0x1167880", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A2")]
	[CompilerGenerated]
	private sealed class <SludgeCoroutine>d__20 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerDamageEffect <>4__this;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.Color <sludgeColor>5__2;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Color <splurgColor>5__3;

		[Token(Token = "0x17000246")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60013BF")]
			[Address(RVA = "0x1167B0C", Offset = "0x1167B0C", VA = "0x1167B0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000247")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013C1")]
			[Address(RVA = "0x1167B54", Offset = "0x1167B54", VA = "0x1167B54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x11676A0", Offset = "0x11676A0", VA = "0x11676A0")]
		[DebuggerHidden]
		public <SludgeCoroutine>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x116791C", Offset = "0x116791C", VA = "0x116791C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x1167920", Offset = "0x1167920", VA = "0x1167920", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x1167B14", Offset = "0x1167B14", VA = "0x1167B14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40011B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpriteRenderer sludge;

	[Token(Token = "0x40011BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpriteRenderer splurg;

	[Token(Token = "0x40011BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float remainingSludgeTime;

	[Token(Token = "0x40011BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float unmodifiedRemainingSludgeTime;

	[Token(Token = "0x40011BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform sludgeParent;

	[Token(Token = "0x40011BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float splurginess;

	[Token(Token = "0x40011BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 originalSplurgePos;

	[Token(Token = "0x40011C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEngine.Color origColor;

	[Token(Token = "0x40011C1")]
	private const float sludgeAlphaDivider = 3f;

	[Token(Token = "0x40011C2")]
	private const float sludgeMinus = 0.2f;

	[Token(Token = "0x40011C3")]
	private const float splurgAlphaDivider = 2f;

	[Token(Token = "0x40011C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool followHVRCamera;

	[Token(Token = "0x60013AC")]
	[Address(RVA = "0x116720C", Offset = "0x116720C", VA = "0x116720C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013AD")]
	[Address(RVA = "0x1167238", Offset = "0x1167238", VA = "0x1167238")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60013AE")]
	[Address(RVA = "0x1167400", Offset = "0x1167400", VA = "0x1167400")]
	public void Setup(bool local)
	{
	}

	[Token(Token = "0x60013AF")]
	[Address(RVA = "0x11674C8", Offset = "0x11674C8", VA = "0x11674C8")]
	private void Disable()
	{
	}

	[Token(Token = "0x60013B0")]
	[Address(RVA = "0x116757C", Offset = "0x116757C", VA = "0x116757C")]
	private void Enable()
	{
	}

	[Token(Token = "0x60013B1")]
	[Address(RVA = "0x1167508", Offset = "0x1167508", VA = "0x1167508")]
	[IteratorStateMachine(typeof(<DelayedSetup>d__17))]
	private IEnumerator<float> DelayedSetup()
	{
		return null;
	}

	[Token(Token = "0x60013B2")]
	[Address(RVA = "0x1163E74", Offset = "0x1163E74", VA = "0x1163E74")]
	public void DamageEffect(float time)
	{
	}

	[Token(Token = "0x60013B3")]
	[Address(RVA = "0x11675F0", Offset = "0x11675F0", VA = "0x11675F0")]
	private void ResetSplurg()
	{
	}

	[Token(Token = "0x60013B4")]
	[Address(RVA = "0x116762C", Offset = "0x116762C", VA = "0x116762C")]
	[IteratorStateMachine(typeof(<SludgeCoroutine>d__20))]
	private IEnumerator<float> SludgeCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60013B5")]
	[Address(RVA = "0x11676C8", Offset = "0x11676C8", VA = "0x11676C8")]
	public PlayerDamageEffect()
	{
	}
}
[Token(Token = "0x20002A3")]
public class PlayerFriendInvitePopup : MonoBehaviour
{
	[Token(Token = "0x20002A4")]
	public class FriendInviteData
	{
		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string senderName;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string roomID;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string region;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong roomIDOculus;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool sameVersion;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string gameVersion;

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0x1168F3C", Offset = "0x1168F3C", VA = "0x1168F3C")]
		public FriendInviteData()
		{
		}
	}

	[Token(Token = "0x20002A5")]
	[CompilerGenerated]
	private sealed class <_SmoothFollow>d__25 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerFriendInvitePopup <>4__this;

		[Token(Token = "0x17000248")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60013D6")]
			[Address(RVA = "0x1169224", Offset = "0x1169224", VA = "0x1169224", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000249")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013D8")]
			[Address(RVA = "0x116926C", Offset = "0x116926C", VA = "0x116926C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0x1168D40", Offset = "0x1168D40", VA = "0x1168D40")]
		[DebuggerHidden]
		public <_SmoothFollow>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x1168F44", Offset = "0x1168F44", VA = "0x1168F44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x1168F48", Offset = "0x1168F48", VA = "0x1168F48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x116922C", Offset = "0x116922C", VA = "0x116922C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A6")]
	[CompilerGenerated]
	private sealed class <DelayedSetup>d__26 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerFriendInvitePopup <>4__this;

		[Token(Token = "0x1700024A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60013DC")]
			[Address(RVA = "0x11694AC", Offset = "0x11694AC", VA = "0x11694AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700024B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013DE")]
			[Address(RVA = "0x11694F4", Offset = "0x11694F4", VA = "0x11694F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x1168D68", Offset = "0x1168D68", VA = "0x1168D68")]
		[DebuggerHidden]
		public <DelayedSetup>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x11692C8", Offset = "0x11692C8", VA = "0x11692C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x11692CC", Offset = "0x11692CC", VA = "0x11692CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x11694B4", Offset = "0x11694B4", VA = "0x11694B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A7")]
	[CompilerGenerated]
	private sealed class <_PopUp>d__27 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerFriendInvitePopup <>4__this;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool active;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x1700024C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60013E2")]
			[Address(RVA = "0x1169738", Offset = "0x1169738", VA = "0x1169738", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700024D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013E4")]
			[Address(RVA = "0x1169780", Offset = "0x1169780", VA = "0x1169780", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x1168D90", Offset = "0x1168D90", VA = "0x1168D90")]
		[DebuggerHidden]
		public <_PopUp>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x1169550", Offset = "0x1169550", VA = "0x1169550", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x1169554", Offset = "0x1169554", VA = "0x1169554", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x1169740", Offset = "0x1169740", VA = "0x1169740", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40011CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Button acceptButton;

	[Token(Token = "0x40011CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Button rejectButton;

	[Token(Token = "0x40011CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI inviteText;

	[Token(Token = "0x40011D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float rotateTime;

	[Token(Token = "0x40011D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UnityEngine.UI.Image bgImage;

	[Token(Token = "0x40011D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Canvas myCanvas;

	[Token(Token = "0x40011D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GraphicRaycaster graphicRaycaster;

	[Token(Token = "0x40011D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CanvasGroup canvasGroup;

	[Token(Token = "0x40011D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<FriendInviteData> friendInviteDatas;

	[Token(Token = "0x40011D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float velocity;

	[Token(Token = "0x40011D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CustomHVRInputModule customHVRInputModule;

	[Token(Token = "0x40011D8")]
	private const string smoothFollowCoroutineName = "FriendInviteSmoothFollowCoroutine";

	[Token(Token = "0x40011D9")]
	private const string sentYouAnInviteText = " Sent you an invite.";

	[Token(Token = "0x40011DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 originalCanvasScale;

	[Token(Token = "0x60013C2")]
	[Address(RVA = "0x1167BB0", Offset = "0x1167BB0", VA = "0x1167BB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013C3")]
	[Address(RVA = "0x1167BEC", Offset = "0x1167BEC", VA = "0x1167BEC")]
	private void GetRefs()
	{
	}

	[Token(Token = "0x60013C4")]
	[Address(RVA = "0x1167D58", Offset = "0x1167D58", VA = "0x1167D58")]
	private void Start()
	{
	}

	[Token(Token = "0x60013C5")]
	[Address(RVA = "0x1167E94", Offset = "0x1167E94", VA = "0x1167E94")]
	private void SceneChangeFinished()
	{
	}

	[Token(Token = "0x60013C6")]
	[Address(RVA = "0x1167FCC", Offset = "0x1167FCC", VA = "0x1167FCC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60013C7")]
	[Address(RVA = "0x1168160", Offset = "0x1168160", VA = "0x1168160")]
	private void AcceptInvite()
	{
	}

	[Token(Token = "0x60013C8")]
	[Address(RVA = "0x1168490", Offset = "0x1168490", VA = "0x1168490")]
	private void RejectInvite()
	{
	}

	[Token(Token = "0x60013C9")]
	[Address(RVA = "0x11684EC", Offset = "0x11684EC", VA = "0x11684EC")]
	public void Setup(bool local)
	{
	}

	[Token(Token = "0x60013CA")]
	[Address(RVA = "0x116840C", Offset = "0x116840C", VA = "0x116840C")]
	private void Disable()
	{
	}

	[Token(Token = "0x60013CB")]
	[Address(RVA = "0x1168690", Offset = "0x1168690", VA = "0x1168690")]
	public void FriendInviteReceived(FriendInviteData friendInviteData)
	{
	}

	[Token(Token = "0x60013CC")]
	[Address(RVA = "0x1168CCC", Offset = "0x1168CCC", VA = "0x1168CCC")]
	[IteratorStateMachine(typeof(<_SmoothFollow>d__25))]
	private IEnumerator<float> _SmoothFollow()
	{
		return null;
	}

	[Token(Token = "0x60013CD")]
	[Address(RVA = "0x1168584", Offset = "0x1168584", VA = "0x1168584")]
	[IteratorStateMachine(typeof(<DelayedSetup>d__26))]
	private IEnumerator<float> DelayedSetup()
	{
		return null;
	}

	[Token(Token = "0x60013CE")]
	[Address(RVA = "0x11685F8", Offset = "0x11685F8", VA = "0x11685F8")]
	[IteratorStateMachine(typeof(<_PopUp>d__27))]
	private IEnumerator<float> _PopUp(bool active, float duration)
	{
		return null;
	}

	[Token(Token = "0x60013CF")]
	[Address(RVA = "0x1168DB8", Offset = "0x1168DB8", VA = "0x1168DB8")]
	public void SetScale(float scale)
	{
	}

	[Token(Token = "0x60013D0")]
	[Address(RVA = "0x1168E18", Offset = "0x1168E18", VA = "0x1168E18")]
	public void SetTransparency(float transparency)
	{
	}

	[Token(Token = "0x60013D1")]
	[Address(RVA = "0x1168EA8", Offset = "0x1168EA8", VA = "0x1168EA8")]
	public PlayerFriendInvitePopup()
	{
	}
}
[Token(Token = "0x20002A8")]
public class PlayerHipSlotPositionHelper : MonoBehaviour
{
	[Token(Token = "0x40011ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform hipslotR;

	[Token(Token = "0x40011EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform hipslotL;

	[Token(Token = "0x40011EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform position1R;

	[Token(Token = "0x40011F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform position1L;

	[Token(Token = "0x40011F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform position2R;

	[Token(Token = "0x40011F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform position2L;

	[Token(Token = "0x60013E5")]
	[Address(RVA = "0x11697DC", Offset = "0x11697DC", VA = "0x11697DC")]
	public void SetHipSlotPosition(float value)
	{
	}

	[Token(Token = "0x60013E6")]
	[Address(RVA = "0x11698EC", Offset = "0x11698EC", VA = "0x11698EC")]
	public PlayerHipSlotPositionHelper()
	{
	}
}
[Token(Token = "0x20002A9")]
public class PlayerSafeAreaController : MonoBehaviour
{
	[Token(Token = "0x20002AA")]
	[CompilerGenerated]
	private sealed class <Start>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerSafeAreaController <>4__this;

		[Token(Token = "0x1700024E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013F4")]
			[Address(RVA = "0x116A7F8", Offset = "0x116A7F8", VA = "0x116A7F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013F6")]
			[Address(RVA = "0x116A840", Offset = "0x116A840", VA = "0x116A840", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x1169968", Offset = "0x1169968", VA = "0x1169968")]
		[DebuggerHidden]
		public <Start>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x116A5AC", Offset = "0x116A5AC", VA = "0x116A5AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x116A5B0", Offset = "0x116A5B0", VA = "0x116A5B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x116A800", Offset = "0x116A800", VA = "0x116A800", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002AB")]
	[CompilerGenerated]
	private sealed class <ResetToSafePositionCoroutine>d__27 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerSafeAreaController <>4__this;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool takeDamage;

		[Token(Token = "0x17000250")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60013FA")]
			[Address(RVA = "0x116ADB8", Offset = "0x116ADB8", VA = "0x116ADB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000251")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013FC")]
			[Address(RVA = "0x116AE00", Offset = "0x116AE00", VA = "0x116AE00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x116A490", Offset = "0x116A490", VA = "0x116A490")]
		[DebuggerHidden]
		public <ResetToSafePositionCoroutine>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x116A848", Offset = "0x116A848", VA = "0x116A848", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x116A84C", Offset = "0x116A84C", VA = "0x116A84C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x116ADC0", Offset = "0x116ADC0", VA = "0x116ADC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40011F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerSafeAreaController Instance;

	[Token(Token = "0x40011F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HexaBodyPlayer3 _hexabodyPlayer;

	[Token(Token = "0x40011F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PhotonView _photonView;

	[Token(Token = "0x40011F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool _autoResetIfFalling;

	[Token(Token = "0x40011F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _autoResetVelocityThreshold;

	[Token(Token = "0x40011F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _autoResetTimeThreshold;

	[Token(Token = "0x40011F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private LayerMask _safeSpotBlockerLayers;

	[Token(Token = "0x40011FA")]
	private const float SafeSpaceCheckPeriod = 1f;

	[Token(Token = "0x40011FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float _timeSinceLastCheck;

	[Token(Token = "0x40011FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float _airTime;

	[Token(Token = "0x40011FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 _lastGroundedPosition;

	[Token(Token = "0x40011FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform _lastGroundedTransform;

	[Token(Token = "0x40011FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _initialized;

	[Token(Token = "0x4001200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private LayerMask _walkableLayers;

	[Token(Token = "0x4001201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform _originalParent;

	[Token(Token = "0x4001202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float _lastResetTime;

	[Token(Token = "0x4001203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool _resetting;

	[Token(Token = "0x4001204")]
	private const float ResetCooldown = 0.1f;

	[Token(Token = "0x4001205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Collider[] _castResults;

	[Token(Token = "0x4001206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float _disabledUntilTime;

	[Token(Token = "0x4001207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool _highPriorityDisabled;

	[Token(Token = "0x60013E7")]
	[Address(RVA = "0x11698F4", Offset = "0x11698F4", VA = "0x11698F4")]
	[IteratorStateMachine(typeof(<Start>d__21))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60013E8")]
	[Address(RVA = "0x1169990", Offset = "0x1169990", VA = "0x1169990")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60013E9")]
	[Address(RVA = "0x1169A44", Offset = "0x1169A44", VA = "0x1169A44")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60013EA")]
	[Address(RVA = "0x1169B44", Offset = "0x1169B44", VA = "0x1169B44")]
	private void Update()
	{
	}

	[Token(Token = "0x60013EB")]
	[Address(RVA = "0x116A388", Offset = "0x116A388", VA = "0x116A388")]
	public void SetResetPositionToCurrent()
	{
	}

	[Token(Token = "0x60013EC")]
	[Address(RVA = "0x116A224", Offset = "0x116A224", VA = "0x116A224")]
	public void ResetToSafePosition(bool takeDamage = true)
	{
	}

	[Token(Token = "0x60013ED")]
	[Address(RVA = "0x116A408", Offset = "0x116A408", VA = "0x116A408")]
	[IteratorStateMachine(typeof(<ResetToSafePositionCoroutine>d__27))]
	private IEnumerator<float> ResetToSafePositionCoroutine(bool takeDamage = true)
	{
		return null;
	}

	[Token(Token = "0x60013EE")]
	[Address(RVA = "0x116A4B8", Offset = "0x116A4B8", VA = "0x116A4B8")]
	public void DisableAutoFallingResetForDuration(float time)
	{
	}

	[Token(Token = "0x60013EF")]
	[Address(RVA = "0x116A4EC", Offset = "0x116A4EC", VA = "0x116A4EC")]
	public void DisableAutoFallingResetToggle(bool disable, bool highPriority = false)
	{
	}

	[Token(Token = "0x60013F0")]
	[Address(RVA = "0x116A53C", Offset = "0x116A53C", VA = "0x116A53C")]
	public PlayerSafeAreaController()
	{
	}
}
[Token(Token = "0x20002AC")]
public class PlayerSludge : MonoBehaviour
{
	[Token(Token = "0x20002AD")]
	[CompilerGenerated]
	private sealed class <DelayedSetup>d__14 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerSludge <>4__this;

		[Token(Token = "0x17000252")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001409")]
			[Address(RVA = "0x116B510", Offset = "0x116B510", VA = "0x116B510", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000253")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600140B")]
			[Address(RVA = "0x116B558", Offset = "0x116B558", VA = "0x116B558", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x116B1AC", Offset = "0x116B1AC", VA = "0x116B1AC")]
		[DebuggerHidden]
		public <DelayedSetup>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x116B368", Offset = "0x116B368", VA = "0x116B368", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x116B36C", Offset = "0x116B36C", VA = "0x116B36C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0x116B518", Offset = "0x116B518", VA = "0x116B518", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002AE")]
	[CompilerGenerated]
	private sealed class <SludgeCoroutine>d__17 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerSludge <>4__this;

		[Token(Token = "0x17000254")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600140F")]
			[Address(RVA = "0x116B7F0", Offset = "0x116B7F0", VA = "0x116B7F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000255")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001411")]
			[Address(RVA = "0x116B838", Offset = "0x116B838", VA = "0x116B838", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x116B338", Offset = "0x116B338", VA = "0x116B338")]
		[DebuggerHidden]
		public <SludgeCoroutine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x116B5B4", Offset = "0x116B5B4", VA = "0x116B5B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0x116B5B8", Offset = "0x116B5B8", VA = "0x116B5B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x116B7F8", Offset = "0x116B7F8", VA = "0x116B7F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400120F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpriteRenderer sludge;

	[Token(Token = "0x4001210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpriteRenderer splurg;

	[Token(Token = "0x4001211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float remainingSludgeTime;

	[Token(Token = "0x4001212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform sludgeParent;

	[Token(Token = "0x4001213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float splurginess;

	[Token(Token = "0x4001214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 originalSplurgePos;

	[Token(Token = "0x4001215")]
	private const float sludgeAlphaDivider = 5f;

	[Token(Token = "0x4001216")]
	private const float sludgeMinus = 1f;

	[Token(Token = "0x4001217")]
	private const float splurgAlphaDivider = 3f;

	[Token(Token = "0x4001218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool followHVRCamera;

	[Token(Token = "0x60013FD")]
	[Address(RVA = "0x116AE5C", Offset = "0x116AE5C", VA = "0x116AE5C")]
	public void Setup(bool local)
	{
	}

	[Token(Token = "0x60013FE")]
	[Address(RVA = "0x116AFD8", Offset = "0x116AFD8", VA = "0x116AFD8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60013FF")]
	[Address(RVA = "0x116AF24", Offset = "0x116AF24", VA = "0x116AF24")]
	private void Disable()
	{
	}

	[Token(Token = "0x6001400")]
	[Address(RVA = "0x116B160", Offset = "0x116B160", VA = "0x116B160")]
	private void Enable()
	{
	}

	[Token(Token = "0x6001401")]
	[Address(RVA = "0x116AF64", Offset = "0x116AF64", VA = "0x116AF64")]
	[IteratorStateMachine(typeof(<DelayedSetup>d__14))]
	private IEnumerator<float> DelayedSetup()
	{
		return null;
	}

	[Token(Token = "0x6001402")]
	[Address(RVA = "0x116B1D4", Offset = "0x116B1D4", VA = "0x116B1D4")]
	public void Sludge(float time)
	{
	}

	[Token(Token = "0x6001403")]
	[Address(RVA = "0x116B288", Offset = "0x116B288", VA = "0x116B288")]
	private void ResetSplurg()
	{
	}

	[Token(Token = "0x6001404")]
	[Address(RVA = "0x116B2C4", Offset = "0x116B2C4", VA = "0x116B2C4")]
	[IteratorStateMachine(typeof(<SludgeCoroutine>d__17))]
	private IEnumerator<float> SludgeCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001405")]
	[Address(RVA = "0x116B360", Offset = "0x116B360", VA = "0x116B360")]
	public PlayerSludge()
	{
	}
}
[Token(Token = "0x20002AF")]
public class PlayerSpeakingUI : MonoBehaviour
{
	[Token(Token = "0x400121F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.UI.Image remoteIsTalking;

	[Token(Token = "0x4001220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Speaker speaker;

	[Token(Token = "0x4001221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Player thisPlayer;

	[Token(Token = "0x4001222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool previouslyEnabled;

	[Token(Token = "0x4001223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool canShow;

	[Token(Token = "0x6001412")]
	[Address(RVA = "0x116B894", Offset = "0x116B894", VA = "0x116B894")]
	public void Setup(Player player)
	{
	}

	[Token(Token = "0x6001413")]
	[Address(RVA = "0x116B8B8", Offset = "0x116B8B8", VA = "0x116B8B8")]
	public void CanShow(bool canShow)
	{
	}

	[Token(Token = "0x6001414")]
	[Address(RVA = "0x116B8C4", Offset = "0x116B8C4", VA = "0x116B8C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001415")]
	[Address(RVA = "0x116BA84", Offset = "0x116BA84", VA = "0x116BA84")]
	public PlayerSpeakingUI()
	{
	}
}
[Token(Token = "0x20002B0")]
public class PlayerWhiteFlash : MonoBehaviour
{
	[Token(Token = "0x20002B1")]
	[CompilerGenerated]
	private sealed class <DelayedSetup>d__7 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerWhiteFlash <>4__this;

		[Token(Token = "0x17000256")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001421")]
			[Address(RVA = "0x116C0B8", Offset = "0x116C0B8", VA = "0x116C0B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000257")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001423")]
			[Address(RVA = "0x116C100", Offset = "0x116C100", VA = "0x116C100", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0x116BD88", Offset = "0x116BD88", VA = "0x116BD88")]
		[DebuggerHidden]
		public <DelayedSetup>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0x116BF0C", Offset = "0x116BF0C", VA = "0x116BF0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x116BF10", Offset = "0x116BF10", VA = "0x116BF10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x116C0C0", Offset = "0x116C0C0", VA = "0x116C0C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002B2")]
	[CompilerGenerated]
	private sealed class <_LerpSpriteAlpha>d__9 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerWhiteFlash <>4__this;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool toWhite;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float timeToLerp;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private UnityEngine.Color <currentColor>5__3;

		[Token(Token = "0x17000258")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001427")]
			[Address(RVA = "0x116C2B4", Offset = "0x116C2B4", VA = "0x116C2B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000259")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001429")]
			[Address(RVA = "0x116C2FC", Offset = "0x116C2FC", VA = "0x116C2FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0x116BEDC", Offset = "0x116BEDC", VA = "0x116BEDC")]
		[DebuggerHidden]
		public <_LerpSpriteAlpha>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0x116C15C", Offset = "0x116C15C", VA = "0x116C15C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0x116C160", Offset = "0x116C160", VA = "0x116C160", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x116C2BC", Offset = "0x116C2BC", VA = "0x116C2BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SpriteRenderer whiteFlashSprite;

	[Token(Token = "0x4001225")]
	private const string lerpSpriteAlphaCoroutineName = "LerpSpriteAlphaCoroutine";

	[Token(Token = "0x4001226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool followHVRCamera;

	[Token(Token = "0x6001416")]
	[Address(RVA = "0x116BA8C", Offset = "0x116BA8C", VA = "0x116BA8C")]
	public void Setup(bool local)
	{
	}

	[Token(Token = "0x6001417")]
	[Address(RVA = "0x116BBCC", Offset = "0x116BBCC", VA = "0x116BBCC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001418")]
	[Address(RVA = "0x116BB30", Offset = "0x116BB30", VA = "0x116BB30")]
	private void Disable()
	{
	}

	[Token(Token = "0x6001419")]
	[Address(RVA = "0x116BD5C", Offset = "0x116BD5C", VA = "0x116BD5C")]
	private void Enable()
	{
	}

	[Token(Token = "0x600141A")]
	[Address(RVA = "0x116BB58", Offset = "0x116BB58", VA = "0x116BB58")]
	[IteratorStateMachine(typeof(<DelayedSetup>d__7))]
	private IEnumerator<float> DelayedSetup()
	{
		return null;
	}

	[Token(Token = "0x600141B")]
	[Address(RVA = "0x116BDB0", Offset = "0x116BDB0", VA = "0x116BDB0")]
	public void ToggleWhiteFlash(bool enabled)
	{
	}

	[Token(Token = "0x600141C")]
	[Address(RVA = "0x116BE44", Offset = "0x116BE44", VA = "0x116BE44")]
	[IteratorStateMachine(typeof(<_LerpSpriteAlpha>d__9))]
	private IEnumerator<float> _LerpSpriteAlpha(float timeToLerp, bool toWhite)
	{
		return null;
	}

	[Token(Token = "0x600141D")]
	[Address(RVA = "0x116BF04", Offset = "0x116BF04", VA = "0x116BF04")]
	public PlayerWhiteFlash()
	{
	}
}
[Token(Token = "0x20002B3")]
[RequireComponent(typeof(HVRGrabbable))]
public class PlayVoiceAfterHolding : MonoBehaviour
{
	[Token(Token = "0x20002B4")]
	[CompilerGenerated]
	private sealed class <WaitCoroutine>d__8 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayVoiceAfterHolding <>4__this;

		[Token(Token = "0x1700025A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001432")]
			[Address(RVA = "0x116C754", Offset = "0x116C754", VA = "0x116C754", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700025B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001434")]
			[Address(RVA = "0x116C79C", Offset = "0x116C79C", VA = "0x116C79C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x116C634", Offset = "0x116C634", VA = "0x116C634")]
		[DebuggerHidden]
		public <WaitCoroutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x116C66C", Offset = "0x116C66C", VA = "0x116C66C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x116C670", Offset = "0x116C670", VA = "0x116C670", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x116C75C", Offset = "0x116C75C", VA = "0x116C75C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VoiceLinesScriptable.Preset lineType;

	[Token(Token = "0x4001232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HVRGrabbable grabbable;

	[Token(Token = "0x4001233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeToHold;

	[Token(Token = "0x4001234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool _activated;

	[Token(Token = "0x4001235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CoroutineHandle _coroutineHandle;

	[Token(Token = "0x600142A")]
	[Address(RVA = "0x116C358", Offset = "0x116C358", VA = "0x116C358")]
	private void Start()
	{
	}

	[Token(Token = "0x600142B")]
	[Address(RVA = "0x116C498", Offset = "0x116C498", VA = "0x116C498")]
	private void UnGrabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600142C")]
	[Address(RVA = "0x116C4F4", Offset = "0x116C4F4", VA = "0x116C4F4")]
	private void Grabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600142D")]
	[Address(RVA = "0x116C5C0", Offset = "0x116C5C0", VA = "0x116C5C0")]
	[IteratorStateMachine(typeof(<WaitCoroutine>d__8))]
	private IEnumerator<float> WaitCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600142E")]
	[Address(RVA = "0x116C65C", Offset = "0x116C65C", VA = "0x116C65C")]
	public PlayVoiceAfterHolding()
	{
	}
}
[Token(Token = "0x20002B5")]
public class PoolingTest : MonoBehaviour
{
	[Token(Token = "0x4001239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject gemPrefab;

	[Token(Token = "0x6001435")]
	[Address(RVA = "0x116C7F8", Offset = "0x116C7F8", VA = "0x116C7F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001436")]
	[Address(RVA = "0x116C824", Offset = "0x116C824", VA = "0x116C824")]
	private void SpawnLoot()
	{
	}

	[Token(Token = "0x6001437")]
	[Address(RVA = "0x116CA3C", Offset = "0x116CA3C", VA = "0x116CA3C")]
	public PoolingTest()
	{
	}
}
[Token(Token = "0x20002B6")]
[RequireComponent(typeof(Collider))]
public class PrimitiveColliderSwitcher : MonoBehaviour
{
	[Token(Token = "0x400123A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Collider> allColliders;

	[Token(Token = "0x400123B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Collider myCollider;

	[Token(Token = "0x6001438")]
	[Address(RVA = "0x116CA44", Offset = "0x116CA44", VA = "0x116CA44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001439")]
	[Address(RVA = "0x116CBEC", Offset = "0x116CBEC", VA = "0x116CBEC")]
	private void Start()
	{
	}

	[Token(Token = "0x600143A")]
	[Address(RVA = "0x116CBF4", Offset = "0x116CBF4", VA = "0x116CBF4")]
	public void SwitchCollider(bool toPrimitive)
	{
	}

	[Token(Token = "0x600143B")]
	[Address(RVA = "0x116CA48", Offset = "0x116CA48", VA = "0x116CA48")]
	private void GetColliders()
	{
	}

	[Token(Token = "0x600143C")]
	[Address(RVA = "0x116CCD4", Offset = "0x116CCD4", VA = "0x116CCD4")]
	public PrimitiveColliderSwitcher()
	{
	}
}
[Token(Token = "0x20002B7")]
public class ProjectileDeflectingCollider : MonoBehaviour
{
	[Token(Token = "0x400123C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool deflectTowardsEnemies;

	[Token(Token = "0x600143D")]
	[Address(RVA = "0x116CCDC", Offset = "0x116CCDC", VA = "0x116CCDC")]
	public ProjectileDeflectingCollider()
	{
	}
}
[Token(Token = "0x20002B8")]
[SelectionBase]
public class Prop : MonoBehaviour, IDamageable, IKillable, IFlamable, ICullable, ICollisionDamageDealer
{
	[Token(Token = "0x20002B9")]
	public enum PropType
	{
		[Token(Token = "0x4001279")]
		None,
		[Token(Token = "0x400127A")]
		Can,
		[Token(Token = "0x400127B")]
		Bone,
		[Token(Token = "0x400127C")]
		Bottle,
		[Token(Token = "0x400127D")]
		RustyTool,
		[Token(Token = "0x400127E")]
		Shell,
		[Token(Token = "0x400127F")]
		Crate,
		[Token(Token = "0x4001280")]
		Barrel,
		[Token(Token = "0x4001281")]
		Plant,
		[Token(Token = "0x4001282")]
		SugarBrick,
		[Token(Token = "0x4001283")]
		MRE,
		[Token(Token = "0x4001284")]
		Chocolate,
		[Token(Token = "0x4001285")]
		Moonshine
	}

	[Token(Token = "0x20002BA")]
	[CompilerGenerated]
	private sealed class <SetOnFireCoroutine>d__83 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Prop <>4__this;

		[Token(Token = "0x17000263")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600147C")]
			[Address(RVA = "0x1170EB4", Offset = "0x1170EB4", VA = "0x1170EB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000264")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600147E")]
			[Address(RVA = "0x1170EFC", Offset = "0x1170EFC", VA = "0x1170EFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0x1170B94", Offset = "0x1170B94", VA = "0x1170B94")]
		[DebuggerHidden]
		public <SetOnFireCoroutine>d__83(int <>1__state)
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0x1170BBC", Offset = "0x1170BBC", VA = "0x1170BBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0x1170BC0", Offset = "0x1170BC0", VA = "0x1170BC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0x1170EBC", Offset = "0x1170EBC", VA = "0x1170EBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BB")]
	[CompilerGenerated]
	private sealed class <FireLoopCoroutine>d__87 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Prop <>4__this;

		[Token(Token = "0x17000265")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001482")]
			[Address(RVA = "0x1171074", Offset = "0x1171074", VA = "0x1171074", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000266")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001484")]
			[Address(RVA = "0x11710BC", Offset = "0x11710BC", VA = "0x11710BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0x1170F58", Offset = "0x1170F58", VA = "0x1170F58")]
		[DebuggerHidden]
		public <FireLoopCoroutine>d__87(int <>1__state)
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0x1170F80", Offset = "0x1170F80", VA = "0x1170F80", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0x1170F84", Offset = "0x1170F84", VA = "0x1170F84", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0x117107C", Offset = "0x117107C", VA = "0x117107C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BC")]
	[CompilerGenerated]
	private sealed class <StartFireCoroutine>d__88 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Prop <>4__this;

		[Token(Token = "0x17000267")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001488")]
			[Address(RVA = "0x1171360", Offset = "0x1171360", VA = "0x1171360", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000268")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600148A")]
			[Address(RVA = "0x11713A8", Offset = "0x11713A8", VA = "0x11713A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0x1171118", Offset = "0x1171118", VA = "0x1171118")]
		[DebuggerHidden]
		public <StartFireCoroutine>d__88(int <>1__state)
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0x1171140", Offset = "0x1171140", VA = "0x1171140", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0x1171144", Offset = "0x1171144", VA = "0x1171144", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0x1171368", Offset = "0x1171368", VA = "0x1171368", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BD")]
	[CompilerGenerated]
	private sealed class <SetNearbyPropsUnkinematic>d__102 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Prop <>4__this;

		[Token(Token = "0x17000269")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600148E")]
			[Address(RVA = "0x11715DC", Offset = "0x11715DC", VA = "0x11715DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700026A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001490")]
			[Address(RVA = "0x1171624", Offset = "0x1171624", VA = "0x1171624", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x1171404", Offset = "0x1171404", VA = "0x1171404")]
		[DebuggerHidden]
		public <SetNearbyPropsUnkinematic>d__102(int <>1__state)
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x117142C", Offset = "0x117142C", VA = "0x117142C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x1171430", Offset = "0x1171430", VA = "0x1171430", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0x11715E4", Offset = "0x11715E4", VA = "0x11715E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BE")]
	[CompilerGenerated]
	private sealed class <ShrinkAndDisable>d__105 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Prop <>4__this;

		[Token(Token = "0x1700026B")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001494")]
			[Address(RVA = "0x1171830", Offset = "0x1171830", VA = "0x1171830", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700026C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001496")]
			[Address(RVA = "0x1171878", Offset = "0x1171878", VA = "0x1171878", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0x1171680", Offset = "0x1171680", VA = "0x1171680")]
		[DebuggerHidden]
		public <ShrinkAndDisable>d__105(int <>1__state)
		{
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0x11716A8", Offset = "0x11716A8", VA = "0x11716A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0x11716AC", Offset = "0x11716AC", VA = "0x11716AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0x1171838", Offset = "0x1171838", VA = "0x1171838", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400123D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PropType myPropType;

	[Token(Token = "0x400123E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool breakable;

	[Token(Token = "0x400123F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxHealth;

	[Token(Token = "0x4001240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public DamageType takeDamageType;

	[Token(Token = "0x4001241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MaterialType materialType;

	[Token(Token = "0x4001242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject breakingEffectPrefab;

	[Token(Token = "0x4001243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool multiplyPropHealthByScale;

	[Token(Token = "0x4001244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CommonCollision commonCollision;

	[Token(Token = "0x4001245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool lootable;

	[Token(Token = "0x4001246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public HVRController lastController;

	[Token(Token = "0x4001247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool disableCulling;

	[Token(Token = "0x4001248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool nonImportant;

	[Token(Token = "0x4001249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected int totalDamageTaken;

	[Token(Token = "0x400124A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected bool isDead;

	[Token(Token = "0x400124B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform originalParent;

	[Token(Token = "0x400124C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 originalPosition;

	[Token(Token = "0x400124D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Quaternion originalRotation;

	[Token(Token = "0x400124E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool savedOriginal;

	[Token(Token = "0x400124F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	protected bool syncProp;

	[Token(Token = "0x4001250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Renderer[] _renderers;

	[Token(Token = "0x4001251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Vector3 previousPosition;

	[Token(Token = "0x4001252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private bool _dynamicProp;

	[Token(Token = "0x4001253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
	private bool _dynamicPropStatusInitialized;

	[Token(Token = "0x4001254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private RoomPropController roomPropController;

	[Token(Token = "0x4001255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool networkSyncProp;

	[Token(Token = "0x4001256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int propID;

	[Token(Token = "0x4001258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected HVRGrabbable hvrGrabbable;

	[Token(Token = "0x4001259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<PropType, List<Prop>> StaticAllPropsOfType;

	[Token(Token = "0x400125A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 latestPos;

	[Token(Token = "0x400125B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Quaternion latestRot;

	[Token(Token = "0x400125C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float currentTime;

	[Token(Token = "0x400125D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private double currentPacketTime;

	[Token(Token = "0x400125E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private double lastPacketTime;

	[Token(Token = "0x400125F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Vector3 positionAtLastPacket;

	[Token(Token = "0x4001260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Quaternion rotationAtLastPacket;

	[Token(Token = "0x4001261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private List<IFlamable> flamablesColliding;

	[Token(Token = "0x4001262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	protected bool onFire;

	[Token(Token = "0x4001263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private CoroutineHandle fireLoopHandle;

	[Token(Token = "0x4001264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private float fireScale;

	[Token(Token = "0x4001265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private GameObject fireParticle;

	[Token(Token = "0x4001266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private bool spawnsObjects;

	[Token(Token = "0x4001267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private PrefabGroup junkObjectsPrefabGroup;

	[Token(Token = "0x4001268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Rigidbody myRB;

	[Token(Token = "0x400126A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private bool kinematicUntilCollision;

	[Token(Token = "0x400126B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float stayKinematicUntilTime;

	[Token(Token = "0x400126C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Vector3 originalScale;

	[Token(Token = "0x400126D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public Vector3 networkPosition;

	[Token(Token = "0x400126E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public Quaternion networkRotation;

	[Token(Token = "0x400126F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public float lastNetworkPositionPackageTime;

	[Token(Token = "0x4001270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	public float distance;

	[Token(Token = "0x4001271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public float angle;

	[Token(Token = "0x4001272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	[HideInInspector]
	public bool localDestroyIfFallsOutOfBounds;

	[Token(Token = "0x4001273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private SmoothSyncPUN2 cachedSmoothSync;

	[Token(Token = "0x4001274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool canBePulledByWorkersGlove;

	[Token(Token = "0x4001275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Collider[] nearbyPropResults;

	[Token(Token = "0x4001276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private bool beingFlatCarried;

	[Token(Token = "0x4001277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public UnityAction BreakAction;

	[Token(Token = "0x1700025C")]
	public RoomPropController GetRoomPropController
	{
		[Token(Token = "0x600143E")]
		[Address(RVA = "0x116CCEC", Offset = "0x116CCEC", VA = "0x116CCEC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700025D")]
	public Action<GameObject> deathAction
	{
		[Token(Token = "0x600143F")]
		[Address(RVA = "0x116CCF4", Offset = "0x116CCF4", VA = "0x116CCF4", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001440")]
		[Address(RVA = "0x116CCFC", Offset = "0x116CCFC", VA = "0x116CCFC", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700025E")]
	public GameObject GetGameObject
	{
		[Token(Token = "0x6001441")]
		[Address(RVA = "0x116CD04", Offset = "0x116CD04", VA = "0x116CD04", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700025F")]
	public bool IsDead
	{
		[Token(Token = "0x6001442")]
		[Address(RVA = "0x116CD0C", Offset = "0x116CD0C", VA = "0x116CD0C", Slot = "9")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000260")]
	public Transform cachedTransform
	{
		[Token(Token = "0x6001443")]
		[Address(RVA = "0x116CD14", Offset = "0x116CD14", VA = "0x116CD14")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001444")]
		[Address(RVA = "0x116CD1C", Offset = "0x116CD1C", VA = "0x116CD1C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000261")]
	public Rigidbody GetRigidbody
	{
		[Token(Token = "0x6001445")]
		[Address(RVA = "0x116CD2C", Offset = "0x116CD2C", VA = "0x116CD2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000262")]
	public bool destroyed
	{
		[Token(Token = "0x6001468")]
		[Address(RVA = "0x11701DC", Offset = "0x11701DC", VA = "0x11701DC", Slot = "14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001446")]
	[Address(RVA = "0x116CD34", Offset = "0x116CD34", VA = "0x116CD34", Slot = "18")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001447")]
	[Address(RVA = "0x116D2C8", Offset = "0x116D2C8", VA = "0x116D2C8")]
	private void DynamicPropStatusInitialize()
	{
	}

	[Token(Token = "0x6001448")]
	[Address(RVA = "0x116D570", Offset = "0x116D570", VA = "0x116D570")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001449")]
	[Address(RVA = "0x116D680", Offset = "0x116D680", VA = "0x116D680")]
	public void SetTelekinesisActive(bool status)
	{
	}

	[Token(Token = "0x600144A")]
	[Address(RVA = "0x116D3D0", Offset = "0x116D3D0", VA = "0x116D3D0")]
	private void SaveOriginalPlacement()
	{
	}

	[Token(Token = "0x600144B")]
	[Address(RVA = "0x116D704", Offset = "0x116D704", VA = "0x116D704", Slot = "19")]
	protected virtual void onGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600144C")]
	[Address(RVA = "0x116D8E8", Offset = "0x116D8E8", VA = "0x116D8E8", Slot = "20")]
	public virtual void onLooted()
	{
	}

	[Token(Token = "0x600144D")]
	[Address(RVA = "0x116DB2C", Offset = "0x116DB2C", VA = "0x116DB2C", Slot = "21")]
	public virtual void ResetProp()
	{
	}

	[Token(Token = "0x600144E")]
	[Address(RVA = "0x116DC94", Offset = "0x116DC94", VA = "0x116DC94", Slot = "10")]
	public void TrySetOnFire()
	{
	}

	[Token(Token = "0x600144F")]
	[Address(RVA = "0x116DD50", Offset = "0x116DD50", VA = "0x116DD50")]
	[IteratorStateMachine(typeof(<SetOnFireCoroutine>d__83))]
	private IEnumerator<float> SetOnFireCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001450")]
	[Address(RVA = "0x116DDC4", Offset = "0x116DDC4", VA = "0x116DDC4", Slot = "13")]
	public void ExtinguishFire()
	{
	}

	[Token(Token = "0x6001451")]
	[Address(RVA = "0x116DE74", Offset = "0x116DE74", VA = "0x116DE74", Slot = "11")]
	public bool Flamable()
	{
		return default(bool);
	}

	[Token(Token = "0x6001452")]
	[Address(RVA = "0x116DE9C", Offset = "0x116DE9C", VA = "0x116DE9C", Slot = "12")]
	public bool OnFire()
	{
		return default(bool);
	}

	[Token(Token = "0x6001453")]
	[Address(RVA = "0x116DEA4", Offset = "0x116DEA4", VA = "0x116DEA4")]
	[IteratorStateMachine(typeof(<FireLoopCoroutine>d__87))]
	private IEnumerator<float> FireLoopCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001454")]
	[Address(RVA = "0x116DF18", Offset = "0x116DF18", VA = "0x116DF18")]
	[IteratorStateMachine(typeof(<StartFireCoroutine>d__88))]
	private IEnumerator<float> StartFireCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001455")]
	[Address(RVA = "0x116DF8C", Offset = "0x116DF8C", VA = "0x116DF8C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001456")]
	[Address(RVA = "0x116E348", Offset = "0x116E348", VA = "0x116E348", Slot = "22")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001457")]
	[Address(RVA = "0x116E460", Offset = "0x116E460", VA = "0x116E460")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x6001458")]
	[Address(RVA = "0x116E57C", Offset = "0x116E57C", VA = "0x116E57C", Slot = "23")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6001459")]
	[Address(RVA = "0x116E880", Offset = "0x116E880", VA = "0x116E880")]
	public void AssignPropController(RoomPropController roomPropController)
	{
	}

	[Token(Token = "0x600145A")]
	[Address(RVA = "0x116E888", Offset = "0x116E888", VA = "0x116E888")]
	public RoomPropController GetPropController()
	{
		return null;
	}

	[Token(Token = "0x600145B")]
	[Address(RVA = "0x116E890", Offset = "0x116E890", VA = "0x116E890")]
	public bool IsOnlyDestroyable()
	{
		return default(bool);
	}

	[Token(Token = "0x600145C")]
	[Address(RVA = "0x116E90C", Offset = "0x116E90C", VA = "0x116E90C")]
	public bool IsDynamicProp()
	{
		return default(bool);
	}

	[Token(Token = "0x600145D")]
	[Address(RVA = "0x116E930", Offset = "0x116E930", VA = "0x116E930")]
	public void AssignPropID(int propID)
	{
	}

	[Token(Token = "0x600145E")]
	[Address(RVA = "0x116E938", Offset = "0x116E938", VA = "0x116E938")]
	public int GetPropID()
	{
		return default(int);
	}

	[Token(Token = "0x600145F")]
	[Address(RVA = "0x116E940", Offset = "0x116E940", VA = "0x116E940", Slot = "24")]
	public virtual void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6001460")]
	[Address(RVA = "0x116EBF4", Offset = "0x116EBF4", VA = "0x116EBF4", Slot = "25")]
	public virtual void DamageRPCSynced(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6001461")]
	[Address(RVA = "0x116F000", Offset = "0x116F000", VA = "0x116F000", Slot = "26")]
	[PunRPC]
	public virtual void KillRPC(DamageType killedByDamageType)
	{
	}

	[Token(Token = "0x6001462")]
	[Address(RVA = "0x11700D0", Offset = "0x11700D0", VA = "0x11700D0")]
	[IteratorStateMachine(typeof(<SetNearbyPropsUnkinematic>d__102))]
	private IEnumerator<float> SetNearbyPropsUnkinematic()
	{
		return null;
	}

	[Token(Token = "0x6001463")]
	[Address(RVA = "0x116F72C", Offset = "0x116F72C", VA = "0x116F72C")]
	public void SpawnObjects(int seed)
	{
	}

	[Token(Token = "0x6001464")]
	[Address(RVA = "0x116F698", Offset = "0x116F698", VA = "0x116F698")]
	public void DisableProp()
	{
	}

	[Token(Token = "0x6001465")]
	[Address(RVA = "0x1170144", Offset = "0x1170144", VA = "0x1170144")]
	[IteratorStateMachine(typeof(<ShrinkAndDisable>d__105))]
	public IEnumerator<float> ShrinkAndDisable()
	{
		return null;
	}

	[Token(Token = "0x6001466")]
	[Address(RVA = "0x11701B8", Offset = "0x11701B8", VA = "0x11701B8")]
	public void EnableProp()
	{
	}

	[Token(Token = "0x6001467")]
	[Address(RVA = "0x116D458", Offset = "0x116D458", VA = "0x116D458")]
	public void SetNetworkingLevel(int level, bool localPlayer)
	{
	}

	[Token(Token = "0x6001469")]
	[Address(RVA = "0x1170238", Offset = "0x1170238", VA = "0x1170238", Slot = "16")]
	public void SetRenderers(bool status)
	{
	}

	[Token(Token = "0x600146A")]
	[Address(RVA = "0x116D840", Offset = "0x116D840", VA = "0x116D840")]
	public void SetKinematic(bool status)
	{
	}

	[Token(Token = "0x600146B")]
	[Address(RVA = "0x1170284", Offset = "0x1170284", VA = "0x1170284", Slot = "17")]
	public bool IsVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x600146C")]
	[Address(RVA = "0x11702F4", Offset = "0x11702F4", VA = "0x11702F4")]
	public void CustomFixedUpdate()
	{
	}

	[Token(Token = "0x600146D")]
	[Address(RVA = "0x11705F4", Offset = "0x11705F4", VA = "0x11705F4")]
	public HVRGrabbable GetMyGrabbable()
	{
		return null;
	}

	[Token(Token = "0x600146E")]
	[Address(RVA = "0x11705FC", Offset = "0x11705FC", VA = "0x11705FC")]
	public bool IsDestroyed()
	{
		return default(bool);
	}

	[Token(Token = "0x600146F")]
	[Address(RVA = "0x1170604", Offset = "0x1170604", VA = "0x1170604")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001470")]
	[Address(RVA = "0x11706C0", Offset = "0x11706C0", VA = "0x11706C0")]
	public void AddToCullingGroupManager()
	{
	}

	[Token(Token = "0x6001471")]
	[Address(RVA = "0x1170894", Offset = "0x1170894", VA = "0x1170894")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001472")]
	[Address(RVA = "0x1170984", Offset = "0x1170984", VA = "0x1170984")]
	public void SetCanbePulledByWorkersGlove(bool canBePulled)
	{
	}

	[Token(Token = "0x6001473")]
	[Address(RVA = "0x1170990", Offset = "0x1170990", VA = "0x1170990")]
	public bool CanBePulledByWorkersGlove()
	{
		return default(bool);
	}

	[Token(Token = "0x6001474")]
	[Address(RVA = "0x1170830", Offset = "0x1170830", VA = "0x1170830")]
	public void SetKinematicUntilTimeAndCollision(float cooldown)
	{
	}

	[Token(Token = "0x6001475")]
	[Address(RVA = "0x1170998", Offset = "0x1170998", VA = "0x1170998")]
	public void SetBeingFlatCarried(bool isFlatCarried)
	{
	}

	[Token(Token = "0x6001476")]
	[Address(RVA = "0x11709A4", Offset = "0x11709A4", VA = "0x11709A4")]
	public Prop()
	{
	}

	[SpecialName]
	[Token(Token = "0x6001478")]
	[Address(RVA = "0x1170B8C", Offset = "0x1170B8C", VA = "0x1170B8C", Slot = "15")]
	private Transform ICullable.get_transform()
	{
		return null;
	}
}
[Token(Token = "0x20002BF")]
[RequireComponent(typeof(PlayerAvatar))]
public class PropSyncCullingGroup : MonoBehaviour, IPunObservable
{
	[Token(Token = "0x20002C0")]
	[CompilerGenerated]
	private sealed class <DelayedSetup>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PropSyncCullingGroup <>4__this;

		[Token(Token = "0x1700026D")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60014A9")]
			[Address(RVA = "0x1173870", Offset = "0x1173870", VA = "0x1173870", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700026E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014AB")]
			[Address(RVA = "0x11738B8", Offset = "0x11738B8", VA = "0x11738B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x1171B6C", Offset = "0x1171B6C", VA = "0x1171B6C")]
		[DebuggerHidden]
		public <DelayedSetup>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x1173588", Offset = "0x1173588", VA = "0x1173588", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x117358C", Offset = "0x117358C", VA = "0x117358C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0x1173878", Offset = "0x1173878", VA = "0x1173878", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C1")]
	[CompilerGenerated]
	private sealed class <_WaitAndSetupCullableProps>d__15 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float waitTime;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PropSyncCullingGroup <>4__this;

		[Token(Token = "0x1700026F")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60014AF")]
			[Address(RVA = "0x11739C4", Offset = "0x11739C4", VA = "0x11739C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000270")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014B1")]
			[Address(RVA = "0x1173A0C", Offset = "0x1173A0C", VA = "0x1173A0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x1171F74", Offset = "0x1171F74", VA = "0x1171F74")]
		[DebuggerHidden]
		public <_WaitAndSetupCullableProps>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0x1173914", Offset = "0x1173914", VA = "0x1173914", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x1173918", Offset = "0x1173918", VA = "0x1173918", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x11739CC", Offset = "0x11739CC", VA = "0x11739CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C2")]
	[CompilerGenerated]
	private sealed class <_SlowUpdate>d__16 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PropSyncCullingGroup <>4__this;

		[Token(Token = "0x17000271")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60014B5")]
			[Address(RVA = "0x1173B30", Offset = "0x1173B30", VA = "0x1173B30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000272")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014B7")]
			[Address(RVA = "0x1173B78", Offset = "0x1173B78", VA = "0x1173B78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x1171F9C", Offset = "0x1171F9C", VA = "0x1171F9C")]
		[DebuggerHidden]
		public <_SlowUpdate>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x1173A68", Offset = "0x1173A68", VA = "0x1173A68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x1173A6C", Offset = "0x1173A6C", VA = "0x1173A6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x1173B38", Offset = "0x1173B38", VA = "0x1173B38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("How many objects to sync that are nearest to player")]
	[SerializeField]
	private int syncAmount;

	[Token(Token = "0x4001296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PlayerAvatar playerAvatar;

	[Token(Token = "0x4001297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform distanceReferencePoint;

	[Token(Token = "0x4001298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Prop[] allProps;

	[Token(Token = "0x4001299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float[] distances;

	[Token(Token = "0x400129A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CullingGroup cullingGroup;

	[Token(Token = "0x400129B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private BoundingSphere[] spheres;

	[Token(Token = "0x400129C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canDispose;

	[Token(Token = "0x400129D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<Prop> currentlySyncedProps;

	[Token(Token = "0x400129E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool isMine;

	[Token(Token = "0x6001497")]
	[Address(RVA = "0x11718D4", Offset = "0x11718D4", VA = "0x11718D4")]
	public void Setup(bool isMine)
	{
	}

	[Token(Token = "0x6001498")]
	[Address(RVA = "0x1171A6C", Offset = "0x1171A6C", VA = "0x1171A6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001499")]
	[Address(RVA = "0x11719F8", Offset = "0x11719F8", VA = "0x11719F8")]
	[IteratorStateMachine(typeof(<DelayedSetup>d__12))]
	private IEnumerator<float> DelayedSetup()
	{
		return null;
	}

	[Token(Token = "0x600149A")]
	[Address(RVA = "0x1171B94", Offset = "0x1171B94", VA = "0x1171B94")]
	private void SceneChangeStarted()
	{
	}

	[Token(Token = "0x600149B")]
	[Address(RVA = "0x1171D98", Offset = "0x1171D98", VA = "0x1171D98")]
	private void SceneChangeFinished()
	{
	}

	[Token(Token = "0x600149C")]
	[Address(RVA = "0x1171EF0", Offset = "0x1171EF0", VA = "0x1171EF0")]
	[IteratorStateMachine(typeof(<_WaitAndSetupCullableProps>d__15))]
	private IEnumerator<float> _WaitAndSetupCullableProps(float waitTime)
	{
		return null;
	}

	[Token(Token = "0x600149D")]
	[Address(RVA = "0x1171AF8", Offset = "0x1171AF8", VA = "0x1171AF8")]
	[IteratorStateMachine(typeof(<_SlowUpdate>d__16))]
	private IEnumerator<float> _SlowUpdate()
	{
		return null;
	}

	[Token(Token = "0x600149E")]
	[Address(RVA = "0x1171FC4", Offset = "0x1171FC4", VA = "0x1171FC4")]
	public void SetupCullableProps()
	{
	}

	[Token(Token = "0x600149F")]
	[Address(RVA = "0x117230C", Offset = "0x117230C", VA = "0x117230C")]
	public void RemoveCullableProps()
	{
	}

	[Token(Token = "0x60014A0")]
	[Address(RVA = "0x1172310", Offset = "0x1172310", VA = "0x1172310")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60014A1")]
	[Address(RVA = "0x1171D4C", Offset = "0x1171D4C", VA = "0x1171D4C")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60014A2")]
	[Address(RVA = "0x1172314", Offset = "0x1172314", VA = "0x1172314")]
	private void CullingGroupStateChangedMethod(CullingGroupEvent sphere)
	{
	}

	[Token(Token = "0x60014A3")]
	[Address(RVA = "0x1172908", Offset = "0x1172908", VA = "0x1172908")]
	private void SetKinematic(CullingGroupEvent sphere, Prop prop)
	{
	}

	[Token(Token = "0x60014A4")]
	[Address(RVA = "0x1172A34", Offset = "0x1172A34", VA = "0x1172A34", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60014A5")]
	[Address(RVA = "0x11734F0", Offset = "0x11734F0", VA = "0x11734F0")]
	public PropSyncCullingGroup()
	{
	}
}
[Token(Token = "0x20002C3")]
public class DisableOnPS : MonoBehaviour
{
	[Token(Token = "0x60014B8")]
	[Address(RVA = "0x1173BD4", Offset = "0x1173BD4", VA = "0x1173BD4")]
	public DisableOnPS()
	{
	}
}
[Token(Token = "0x20002C4")]
public class PlaystationDeviceTracker : MonoBehaviour
{
	[Token(Token = "0x20002C5")]
	public enum TrackedDevicesType
	{
		[Token(Token = "0x40012BC")]
		DualShock4 = 1,
		[Token(Token = "0x40012BD")]
		Aim = 2,
		[Token(Token = "0x40012BE")]
		Move = 4
	}

	[Serializable]
	[Token(Token = "0x20002C6")]
	public class TrackedDevice
	{
		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int handle;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform transform;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 position;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion orientation;

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x1173F2C", Offset = "0x1173F2C", VA = "0x1173F2C")]
		public TrackedDevice()
		{
		}
	}

	[Token(Token = "0x20002C7")]
	[CompilerGenerated]
	private sealed class <ShutdownVR>d__23 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlaystationDeviceTracker <>4__this;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool restart;

		[Token(Token = "0x17000273")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60014CC")]
			[Address(RVA = "0x1174138", Offset = "0x1174138", VA = "0x1174138", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000274")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014CE")]
			[Address(RVA = "0x1174180", Offset = "0x1174180", VA = "0x1174180", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x1173CE4", Offset = "0x1173CE4", VA = "0x1173CE4")]
		[DebuggerHidden]
		public <ShutdownVR>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0x1173FCC", Offset = "0x1173FCC", VA = "0x1173FCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0x1173FD0", Offset = "0x1173FD0", VA = "0x1173FD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x1174140", Offset = "0x1174140", VA = "0x1174140", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C8")]
	[CompilerGenerated]
	private sealed class <RegisterLeftMove>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000275")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014D2")]
			[Address(RVA = "0x1174230", Offset = "0x1174230", VA = "0x1174230", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000276")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014D4")]
			[Address(RVA = "0x1174278", Offset = "0x1174278", VA = "0x1174278", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x1173E14", Offset = "0x1173E14", VA = "0x1173E14")]
		[DebuggerHidden]
		public <RegisterLeftMove>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x11741DC", Offset = "0x11741DC", VA = "0x11741DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x11741E0", Offset = "0x11741E0", VA = "0x11741E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x1174238", Offset = "0x1174238", VA = "0x1174238", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C9")]
	[CompilerGenerated]
	private sealed class <RegisterRightMove>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000277")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014D8")]
			[Address(RVA = "0x11742D4", Offset = "0x11742D4", VA = "0x11742D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000278")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014DA")]
			[Address(RVA = "0x117431C", Offset = "0x117431C", VA = "0x117431C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x1173E3C", Offset = "0x1173E3C", VA = "0x1173E3C")]
		[DebuggerHidden]
		public <RegisterRightMove>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0x1174280", Offset = "0x1174280", VA = "0x1174280", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0x1174284", Offset = "0x1174284", VA = "0x1174284", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x11742DC", Offset = "0x11742DC", VA = "0x11742DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlaystationDeviceTracker Instance;

	[Token(Token = "0x40012AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrackedDevice deviceMovePrimary;

	[Token(Token = "0x40012AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TrackedDevice deviceMoveSecondary;

	[Token(Token = "0x40012AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 _positionOffset;

	[Token(Token = "0x40012AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 _rotationOffset;

	[Token(Token = "0x40012AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 _defaultHandPositionPrimary;

	[Token(Token = "0x40012AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 _defaultHandPositionSecondary;

	[Token(Token = "0x40012B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _initialized;

	[Token(Token = "0x40012B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool _hasHDMBeenMounted;

	[Token(Token = "0x40012B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 _originalLocoBallPosition;

	[Token(Token = "0x40012B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool _moveControllersRegistered;

	[Token(Token = "0x40012B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Camera _camera;

	[Token(Token = "0x40012B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private TrackedPoseDriver _cameraTPD;

	[Token(Token = "0x40012B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool _firstMoveRegister;

	[Token(Token = "0x40012B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool _secondMoveRegister;

	[Token(Token = "0x40012B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEvent OnHMDMounted;

	[Token(Token = "0x40012B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UnityEvent OnStatusChanged;

	[NonSerialized]
	[Token(Token = "0x40012BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool hdmSetupWasOk;

	[Token(Token = "0x60014B9")]
	[Address(RVA = "0x1173BDC", Offset = "0x1173BDC", VA = "0x1173BDC")]
	public static void SetMinColor()
	{
	}

	[Token(Token = "0x60014BA")]
	[Address(RVA = "0x1173BE0", Offset = "0x1173BE0", VA = "0x1173BE0")]
	public void SetupHmdDevice()
	{
	}

	[Token(Token = "0x60014BB")]
	[Address(RVA = "0x1173BE4", Offset = "0x1173BE4", VA = "0x1173BE4")]
	private void BeginShutdownVR(bool restart = true)
	{
	}

	[Token(Token = "0x60014BC")]
	[Address(RVA = "0x1173C5C", Offset = "0x1173C5C", VA = "0x1173C5C")]
	[IteratorStateMachine(typeof(<ShutdownVR>d__23))]
	private IEnumerator<float> ShutdownVR(bool restart)
	{
		return null;
	}

	[Token(Token = "0x60014BD")]
	[Address(RVA = "0x1173D0C", Offset = "0x1173D0C", VA = "0x1173D0C")]
	private void Update()
	{
	}

	[Token(Token = "0x60014BE")]
	[Address(RVA = "0x1173D10", Offset = "0x1173D10", VA = "0x1173D10")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60014BF")]
	[Address(RVA = "0x1173D18", Offset = "0x1173D18", VA = "0x1173D18")]
	public void ResetDeviceTracking()
	{
	}

	[Token(Token = "0x60014C0")]
	[Address(RVA = "0x1173D50", Offset = "0x1173D50", VA = "0x1173D50")]
	private void UpdateMoveTransforms()
	{
	}

	[Token(Token = "0x60014C1")]
	[Address(RVA = "0x1173D1C", Offset = "0x1173D1C", VA = "0x1173D1C")]
	public void TryRegisterDevices()
	{
	}

	[Token(Token = "0x60014C2")]
	[Address(RVA = "0x1173D54", Offset = "0x1173D54", VA = "0x1173D54")]
	[IteratorStateMachine(typeof(<RegisterLeftMove>d__29))]
	private IEnumerator RegisterLeftMove()
	{
		return null;
	}

	[Token(Token = "0x60014C3")]
	[Address(RVA = "0x1173DB4", Offset = "0x1173DB4", VA = "0x1173DB4")]
	[IteratorStateMachine(typeof(<RegisterRightMove>d__30))]
	private IEnumerator RegisterRightMove()
	{
		return null;
	}

	[Token(Token = "0x60014C4")]
	[Address(RVA = "0x1173D14", Offset = "0x1173D14", VA = "0x1173D14")]
	public void UnregisterDevices()
	{
	}

	[Token(Token = "0x60014C5")]
	[Address(RVA = "0x1173E64", Offset = "0x1173E64", VA = "0x1173E64")]
	private void UnregisterMoveControllers()
	{
	}

	[Token(Token = "0x60014C6")]
	[Address(RVA = "0x1173E68", Offset = "0x1173E68", VA = "0x1173E68")]
	public void SetupEvents()
	{
	}

	[Token(Token = "0x60014C7")]
	[Address(RVA = "0x1173E6C", Offset = "0x1173E6C", VA = "0x1173E6C")]
	public PlaystationDeviceTracker()
	{
	}
}
[Token(Token = "0x20002CA")]
public class PSVRStartup : MonoBehaviour
{
	[Token(Token = "0x60014DB")]
	[Address(RVA = "0x1174324", Offset = "0x1174324", VA = "0x1174324")]
	public PSVRStartup()
	{
	}
}
[Token(Token = "0x20002CB")]
public class PS5MiscManager : MonoBehaviour
{
	[Token(Token = "0x60014DC")]
	[Address(RVA = "0x117432C", Offset = "0x117432C", VA = "0x117432C")]
	private void ResetVRPosition()
	{
	}

	[Token(Token = "0x60014DD")]
	[Address(RVA = "0x11747C4", Offset = "0x11747C4", VA = "0x11747C4")]
	public void ChangeReprojection(bool active)
	{
	}

	[Token(Token = "0x60014DE")]
	[Address(RVA = "0x11747C8", Offset = "0x11747C8", VA = "0x11747C8")]
	public PS5MiscManager()
	{
	}
}
[Token(Token = "0x20002CC")]
public class MyNPToolkitCustomWrapper : MonoBehaviour
{
	[Token(Token = "0x40012CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MyNPToolkitCustomWrapper Instance;

	[Token(Token = "0x40012CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x17000279")]
	public bool isInitialized
	{
		[Token(Token = "0x60014DF")]
		[Address(RVA = "0x11747D0", Offset = "0x11747D0", VA = "0x11747D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60014E0")]
	[Address(RVA = "0x11747D8", Offset = "0x11747D8", VA = "0x11747D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60014E1")]
	[Address(RVA = "0x11747EC", Offset = "0x11747EC", VA = "0x11747EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60014E2")]
	[Address(RVA = "0x11747F0", Offset = "0x11747F0", VA = "0x11747F0")]
	public MyNPToolkitCustomWrapper()
	{
	}
}
[Token(Token = "0x20002CD")]
public class PS5LogHelper
{
	[Token(Token = "0x60014E3")]
	[Address(RVA = "0x11747F8", Offset = "0x11747F8", VA = "0x11747F8")]
	public static void LogTaggedMessage(string message)
	{
	}

	[Token(Token = "0x60014E4")]
	[Address(RVA = "0x1174884", Offset = "0x1174884", VA = "0x1174884")]
	public PS5LogHelper()
	{
	}
}
[Token(Token = "0x20002CE")]
public class PS5TrophyManager
{
	[Token(Token = "0x60014E5")]
	[Address(RVA = "0x117488C", Offset = "0x117488C", VA = "0x117488C")]
	public PS5TrophyManager()
	{
	}
}
[Token(Token = "0x20002CF")]
public class PS5UDSManager
{
	[Token(Token = "0x60014E6")]
	[Address(RVA = "0x1174894", Offset = "0x1174894", VA = "0x1174894")]
	public PS5UDSManager()
	{
	}
}
[Token(Token = "0x20002D0")]
public class PunCustomEventCodes
{
	[Token(Token = "0x40012CD")]
	public const byte newLevelGeneratingStartedEventCode = 1;

	[Token(Token = "0x40012CE")]
	public const byte newLevelGeneratingFinishedEventCode = 2;

	[Token(Token = "0x40012CF")]
	public const byte atmosphereSyncEventCode = 3;

	[Token(Token = "0x40012D0")]
	public const byte levelLootGeneratingFinishedEventCode = 5;

	[Token(Token = "0x40012D1")]
	public const byte manualRoomIdSyncEventCode = 42;

	[Token(Token = "0x40012D2")]
	public const byte requestRoomIdSyncEventCode = 43;

	[Token(Token = "0x40012D3")]
	public const byte masterClientLoadedEventCode = 44;

	[Token(Token = "0x40012D4")]
	public const byte sceneChangeStarted = 45;

	[Token(Token = "0x60014E7")]
	[Address(RVA = "0x117489C", Offset = "0x117489C", VA = "0x117489C")]
	public PunCustomEventCodes()
	{
	}
}
[Token(Token = "0x20002D1")]
public class PUNSetOfflineMode : MonoBehaviour
{
	[Token(Token = "0x40012D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool startOfflineMode;

	[Token(Token = "0x60014E8")]
	[Address(RVA = "0x11748A4", Offset = "0x11748A4", VA = "0x11748A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014E9")]
	[Address(RVA = "0x1174904", Offset = "0x1174904", VA = "0x1174904")]
	public PUNSetOfflineMode()
	{
	}
}
[Token(Token = "0x20002D2")]
public class PurchaseSign : MonoBehaviour
{
	[Token(Token = "0x20002D3")]
	[CompilerGenerated]
	private sealed class <Start>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PurchaseSign <>4__this;

		[Token(Token = "0x1700027A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014F3")]
			[Address(RVA = "0x1175540", Offset = "0x1175540", VA = "0x1175540", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014F5")]
			[Address(RVA = "0x1175588", Offset = "0x1175588", VA = "0x1175588", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x1174988", Offset = "0x1174988", VA = "0x1174988")]
		[DebuggerHidden]
		public <Start>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0x1175378", Offset = "0x1175378", VA = "0x1175378", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x117537C", Offset = "0x117537C", VA = "0x117537C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x1175548", Offset = "0x1175548", VA = "0x1175548", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Button puchaseButton;

	[Token(Token = "0x40012D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Get price from this scriptableobject")]
	private OtherUpgradePathScriptableObject elevatorUpgradePath;

	[Token(Token = "0x40012D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OtherUpgradePathScriptableObject.UpgradeType upgradeType;

	[Token(Token = "0x40012D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int cost;

	[Token(Token = "0x40012DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI costText;

	[Token(Token = "0x40012DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip purchaseClip;

	[Token(Token = "0x40012DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Canvas myCanvas;

	[Token(Token = "0x40012DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Localize buttonTextLocalization;

	[Token(Token = "0x40012DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Sprite enabledSprite;

	[Token(Token = "0x40012DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Sprite disabledSprite;

	[Token(Token = "0x40012E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool listeningToEvent;

	[Token(Token = "0x40012E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool _purchased;

	[Token(Token = "0x60014EA")]
	[Address(RVA = "0x1174914", Offset = "0x1174914", VA = "0x1174914")]
	[IteratorStateMachine(typeof(<Start>d__12))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60014EB")]
	[Address(RVA = "0x11749B0", Offset = "0x11749B0", VA = "0x11749B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60014EC")]
	[Address(RVA = "0x1174DA8", Offset = "0x1174DA8", VA = "0x1174DA8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60014ED")]
	[Address(RVA = "0x1174CC4", Offset = "0x1174CC4", VA = "0x1174CC4")]
	private void MoneyAmountChanged(int arg0)
	{
	}

	[Token(Token = "0x60014EE")]
	[Address(RVA = "0x1174FD0", Offset = "0x1174FD0", VA = "0x1174FD0")]
	private void OnButtonDown()
	{
	}

	[Token(Token = "0x60014EF")]
	[Address(RVA = "0x1175370", Offset = "0x1175370", VA = "0x1175370")]
	public PurchaseSign()
	{
	}
}
[Token(Token = "0x20002D4")]
public class HotspotManager : MonoBehaviour
{
	[Token(Token = "0x20002D5")]
	[CompilerGenerated]
	private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HotspotManager <>4__this;

		[Token(Token = "0x1700027C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001506")]
			[Address(RVA = "0x11762C4", Offset = "0x11762C4", VA = "0x11762C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001508")]
			[Address(RVA = "0x117630C", Offset = "0x117630C", VA = "0x117630C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0x11756E0", Offset = "0x11756E0", VA = "0x11756E0")]
		[DebuggerHidden]
		public <Start>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0x1176208", Offset = "0x1176208", VA = "0x1176208", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0x117620C", Offset = "0x117620C", VA = "0x117620C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0x11762CC", Offset = "0x11762CC", VA = "0x11762CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D6")]
	[CompilerGenerated]
	private sealed class <DelayedDisable>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HotspotManager <>4__this;

		[Token(Token = "0x1700027E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600150C")]
			[Address(RVA = "0x11763BC", Offset = "0x11763BC", VA = "0x11763BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700027F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600150E")]
			[Address(RVA = "0x1176404", Offset = "0x1176404", VA = "0x1176404", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x1175E98", Offset = "0x1175E98", VA = "0x1175E98")]
		[DebuggerHidden]
		public <DelayedDisable>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x1176314", Offset = "0x1176314", VA = "0x1176314", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0x1176318", Offset = "0x1176318", VA = "0x1176318", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0x11763C4", Offset = "0x11763C4", VA = "0x11763C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HotspotManager Instance;

	[Token(Token = "0x40012E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameObject> hotspots;

	[Token(Token = "0x40012E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private List<GameObject> tempHotspots;

	[Token(Token = "0x40012E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[HideInInspector]
	private List<GameObject> chosenHotspots;

	[Token(Token = "0x40012E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnHotspotsRegistered;

	[Token(Token = "0x60014F6")]
	[Address(RVA = "0x1175590", Offset = "0x1175590", VA = "0x1175590")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014F7")]
	[Address(RVA = "0x117566C", Offset = "0x117566C", VA = "0x117566C")]
	[IteratorStateMachine(typeof(<Start>d__6))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60014F8")]
	[Address(RVA = "0x1175708", Offset = "0x1175708", VA = "0x1175708")]
	public void ActivateRandomHotspots(int amount)
	{
	}

	[Token(Token = "0x60014F9")]
	[Address(RVA = "0x1175CF8", Offset = "0x1175CF8", VA = "0x1175CF8")]
	public void RegisterHotspot(GameObject hotspotGO)
	{
	}

	[Token(Token = "0x60014FA")]
	[Address(RVA = "0x1175DA8", Offset = "0x1175DA8", VA = "0x1175DA8")]
	public void RemoveHotspotFromChosenHotspots(GameObject hotspotGO)
	{
	}

	[Token(Token = "0x60014FB")]
	[Address(RVA = "0x1175B74", Offset = "0x1175B74", VA = "0x1175B74")]
	private void MakeTempHotspotsList()
	{
	}

	[Token(Token = "0x60014FC")]
	[Address(RVA = "0x11759FC", Offset = "0x11759FC", VA = "0x11759FC")]
	public void DisablePreviousHotspots(bool useDelay = false)
	{
	}

	[Token(Token = "0x60014FD")]
	[Address(RVA = "0x1175E00", Offset = "0x1175E00", VA = "0x1175E00")]
	[IteratorStateMachine(typeof(<DelayedDisable>d__12))]
	private IEnumerator<float> DelayedDisable()
	{
		return null;
	}

	[Token(Token = "0x60014FE")]
	[Address(RVA = "0x1175EC0", Offset = "0x1175EC0", VA = "0x1175EC0")]
	private void ChangedActiveScene(Scene current, Scene next)
	{
	}

	[Token(Token = "0x60014FF")]
	[Address(RVA = "0x11759A8", Offset = "0x11759A8", VA = "0x11759A8")]
	public bool CheckForActiveHotspots()
	{
		return default(bool);
	}

	[Token(Token = "0x6001500")]
	[Address(RVA = "0x1175F30", Offset = "0x1175F30", VA = "0x1175F30")]
	public Transform GetClosestHotspot(Transform yourPos)
	{
		return null;
	}

	[Token(Token = "0x6001501")]
	[Address(RVA = "0x1176180", Offset = "0x1176180", VA = "0x1176180")]
	public void HotspotsRegistered()
	{
	}

	[Token(Token = "0x6001502")]
	[Address(RVA = "0x1176194", Offset = "0x1176194", VA = "0x1176194")]
	public HotspotManager()
	{
	}
}
[Token(Token = "0x20002D7")]
public class MenuQuest : MonoBehaviour
{
	[Token(Token = "0x20002D8")]
	[CompilerGenerated]
	private sealed class <DelayedCheckIfFinishedCoroutine>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MenuQuest <>4__this;

		[Token(Token = "0x17000280")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600151E")]
			[Address(RVA = "0x117718C", Offset = "0x117718C", VA = "0x117718C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000281")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001520")]
			[Address(RVA = "0x11771D4", Offset = "0x11771D4", VA = "0x11771D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0x1176F24", Offset = "0x1176F24", VA = "0x1176F24")]
		[DebuggerHidden]
		public <DelayedCheckIfFinishedCoroutine>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0x11770B8", Offset = "0x11770B8", VA = "0x11770B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0x11770BC", Offset = "0x11770BC", VA = "0x11770BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0x1177194", Offset = "0x1177194", VA = "0x1177194", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public QuestBase myQuest;

	[Token(Token = "0x40012F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI title;

	[Token(Token = "0x40012F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI progress;

	[Token(Token = "0x40012F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI flavour;

	[Token(Token = "0x40012F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshProUGUI reward;

	[Token(Token = "0x40012F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UnityEngine.UI.Image background;

	[Token(Token = "0x40012F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Button collectRewardButton;

	[Token(Token = "0x40012F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Button abandonQuestButton;

	[Token(Token = "0x600150F")]
	[Address(RVA = "0x1176460", Offset = "0x1176460", VA = "0x1176460")]
	private void Start()
	{
	}

	[Token(Token = "0x6001510")]
	[Address(RVA = "0x1176464", Offset = "0x1176464", VA = "0x1176464")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001511")]
	[Address(RVA = "0x117670C", Offset = "0x117670C", VA = "0x117670C")]
	public void SetUIQuest(QuestBase quest)
	{
	}

	[Token(Token = "0x6001512")]
	[Address(RVA = "0x1176E44", Offset = "0x1176E44", VA = "0x1176E44")]
	public void UpdateTextsForLoc()
	{
	}

	[Token(Token = "0x6001513")]
	[Address(RVA = "0x1176DD0", Offset = "0x1176DD0", VA = "0x1176DD0")]
	[IteratorStateMachine(typeof(<DelayedCheckIfFinishedCoroutine>d__12))]
	public IEnumerator<float> DelayedCheckIfFinishedCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001514")]
	[Address(RVA = "0x1176F4C", Offset = "0x1176F4C", VA = "0x1176F4C")]
	private void QuestFinished()
	{
	}

	[Token(Token = "0x6001515")]
	[Address(RVA = "0x1176CB0", Offset = "0x1176CB0", VA = "0x1176CB0")]
	private void ToggleButtonOrProgress(bool showButton)
	{
	}

	[Token(Token = "0x6001516")]
	[Address(RVA = "0x1176F54", Offset = "0x1176F54", VA = "0x1176F54")]
	private void UpdateProgressText()
	{
	}

	[Token(Token = "0x6001517")]
	[Address(RVA = "0x1176F98", Offset = "0x1176F98", VA = "0x1176F98")]
	private void DisableCollect()
	{
	}

	[Token(Token = "0x6001518")]
	[Address(RVA = "0x1176FB8", Offset = "0x1176FB8", VA = "0x1176FB8")]
	private void EnableCollect()
	{
	}

	[Token(Token = "0x6001519")]
	[Address(RVA = "0x1176FD8", Offset = "0x1176FD8", VA = "0x1176FD8")]
	private void GetNewQuest()
	{
	}

	[Token(Token = "0x600151A")]
	[Address(RVA = "0x11770B0", Offset = "0x11770B0", VA = "0x11770B0")]
	public MenuQuest()
	{
	}
}
[Token(Token = "0x20002D9")]
public class MenuQuestController : MonoBehaviour
{
	[Token(Token = "0x40012FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MenuQuestController Instance;

	[Token(Token = "0x40012FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MenuQuest[] UIQuests;

	[Token(Token = "0x40012FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Canvas myCanvas;

	[Token(Token = "0x6001521")]
	[Address(RVA = "0x1177230", Offset = "0x1177230", VA = "0x1177230")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001522")]
	[Address(RVA = "0x11772EC", Offset = "0x11772EC", VA = "0x11772EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001523")]
	[Address(RVA = "0x11774C4", Offset = "0x11774C4", VA = "0x11774C4")]
	private void SceneChanged()
	{
	}

	[Token(Token = "0x6001524")]
	[Address(RVA = "0x117751C", Offset = "0x117751C", VA = "0x117751C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001525")]
	[Address(RVA = "0x1177290", Offset = "0x1177290", VA = "0x1177290")]
	private void Clear()
	{
	}

	[Token(Token = "0x6001526")]
	[Address(RVA = "0x117764C", Offset = "0x117764C", VA = "0x117764C")]
	public void AddQuestUI(QuestBase quest)
	{
	}

	[Token(Token = "0x6001527")]
	[Address(RVA = "0x1177728", Offset = "0x1177728", VA = "0x1177728")]
	public void RemoveQuestUI(QuestBase quest)
	{
	}

	[Token(Token = "0x6001528")]
	[Address(RVA = "0x1177984", Offset = "0x1177984", VA = "0x1177984")]
	public void RemoveQuestUI(int index)
	{
	}

	[Token(Token = "0x6001529")]
	[Address(RVA = "0x11779B8", Offset = "0x11779B8", VA = "0x11779B8")]
	public MenuQuestController()
	{
	}
}
[Token(Token = "0x20002DA")]
public abstract class QuestBase : ScriptableObject
{
	[Token(Token = "0x20002DB")]
	public enum QuestType
	{
		[Token(Token = "0x400130E")]
		none,
		[Token(Token = "0x400130F")]
		gather,
		[Token(Token = "0x4001310")]
		hunt,
		[Token(Token = "0x4001311")]
		misc,
		[Token(Token = "0x4001312")]
		halloween
	}

	[Token(Token = "0x40012FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public QuestType questType;

	[Token(Token = "0x40012FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string uniqueQuestId;

	[Token(Token = "0x4001300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected LocalizedString titleFlavour;

	[Token(Token = "0x4001301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private LocalizedString contentFlavour;

	[Token(Token = "0x4001302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private int RewardB1;

	[Token(Token = "0x4001303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private int RewardB2;

	[Token(Token = "0x4001304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private int RewardB3;

	[Token(Token = "0x4001305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private int RewardB4;

	[Token(Token = "0x4001306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public System.Action onProgressUpdated;

	[Token(Token = "0x4001307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public System.Action onQuestFinished;

	[NonSerialized]
	[Token(Token = "0x4001308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool _accepted;

	[NonSerialized]
	[Token(Token = "0x4001309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool _finished;

	[NonSerialized]
	[Token(Token = "0x400130A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	protected int _chosenReward;

	[NonSerialized]
	[Token(Token = "0x400130B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int _saveSlot;

	[NonSerialized]
	[Token(Token = "0x400130C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private DateTime _generatedTime;

	[Token(Token = "0x17000282")]
	public string GetUniqueId
	{
		[Token(Token = "0x6001533")]
		[Address(RVA = "0x11779C4", Offset = "0x11779C4", VA = "0x11779C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600152A")]
	protected abstract void ChildInitiliaze();

	[Token(Token = "0x600152B")]
	protected abstract void SubscribeEvents();

	[Token(Token = "0x600152C")]
	protected abstract void UnsubscribeEvents();

	[Token(Token = "0x600152D")]
	protected abstract void ResetStatus();

	[Token(Token = "0x600152E")]
	public abstract string GetProgressText();

	[Token(Token = "0x600152F")]
	public abstract string GetTitleText();

	[Token(Token = "0x6001530")]
	public abstract QuestSaveData GetSaveProgress();

	[Token(Token = "0x6001531")]
	[Address(RVA = "0x11779C0", Offset = "0x11779C0", VA = "0x11779C0", Slot = "11")]
	public virtual void SceneChanged()
	{
	}

	[Token(Token = "0x6001532")]
	public abstract void LoadSaveProgress(QuestSaveData saveData);

	[Token(Token = "0x6001534")]
	[Address(RVA = "0x11779CC", Offset = "0x11779CC", VA = "0x11779CC", Slot = "13")]
	public virtual string GetContentDescriptionText()
	{
		return null;
	}

	[Token(Token = "0x6001535")]
	[Address(RVA = "0x11779D8", Offset = "0x11779D8", VA = "0x11779D8", Slot = "14")]
	protected virtual void OnValidate()
	{
	}

	[Token(Token = "0x6001536")]
	[Address(RVA = "0x1177A38", Offset = "0x1177A38", VA = "0x1177A38")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6001537")]
	[Address(RVA = "0x1177898", Offset = "0x1177898", VA = "0x1177898")]
	public static bool Compare(QuestBase obj1, QuestBase obj2)
	{
		return default(bool);
	}

	[Token(Token = "0x6001538")]
	[Address(RVA = "0x1177C20", Offset = "0x1177C20", VA = "0x1177C20")]
	public void ResetQuest()
	{
	}

	[Token(Token = "0x6001539")]
	[Address(RVA = "0x1177C5C", Offset = "0x1177C5C", VA = "0x1177C5C", Slot = "15")]
	public virtual void AcceptQuest(int forceSlot = -1, bool notify = true)
	{
	}

	[Token(Token = "0x600153A")]
	[Address(RVA = "0x11780D4", Offset = "0x11780D4", VA = "0x11780D4", Slot = "16")]
	public virtual void RemoveQuest()
	{
	}

	[Token(Token = "0x600153B")]
	public abstract void CheckIfFinished();

	[Token(Token = "0x600153C")]
	[Address(RVA = "0x1178338", Offset = "0x1178338", VA = "0x1178338", Slot = "18")]
	public virtual void QuestFinished()
	{
	}

	[Token(Token = "0x600153D")]
	[Address(RVA = "0x1178648", Offset = "0x1178648", VA = "0x1178648")]
	public int GetRewardAmount()
	{
		return default(int);
	}

	[Token(Token = "0x600153E")]
	[Address(RVA = "0x1177A60", Offset = "0x1177A60", VA = "0x1177A60")]
	private int ChooseRewardAmount()
	{
		return default(int);
	}

	[Token(Token = "0x600153F")]
	[Address(RVA = "0x1178650", Offset = "0x1178650", VA = "0x1178650")]
	public void CollectRewards()
	{
	}

	[Token(Token = "0x6001540")]
	[Address(RVA = "0x1178814", Offset = "0x1178814", VA = "0x1178814")]
	protected void OnProgressUpdated()
	{
	}

	[Token(Token = "0x6001541")]
	[Address(RVA = "0x11788AC", Offset = "0x11788AC", VA = "0x11788AC")]
	public int GetSaveslot()
	{
		return default(int);
	}

	[Token(Token = "0x6001542")]
	[Address(RVA = "0x11788B4", Offset = "0x11788B4", VA = "0x11788B4")]
	public void SetSaveslot(int slot)
	{
	}

	[Token(Token = "0x6001543")]
	[Address(RVA = "0x11788BC", Offset = "0x11788BC", VA = "0x11788BC")]
	public void SetGeneratedTime(DateTime time)
	{
	}

	[Token(Token = "0x6001544")]
	[Address(RVA = "0x11788C4", Offset = "0x11788C4", VA = "0x11788C4")]
	public DateTime GetGeneratedTime()
	{
		return default(DateTime);
	}

	[Token(Token = "0x6001545")]
	[Address(RVA = "0x11788CC", Offset = "0x11788CC", VA = "0x11788CC", Slot = "19")]
	public virtual bool IsQuestPossible()
	{
		return default(bool);
	}

	[Token(Token = "0x6001546")]
	[Address(RVA = "0x11788D4", Offset = "0x11788D4", VA = "0x11788D4", Slot = "20")]
	public virtual LocalizedString GetTitleFlavour()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x6001547")]
	[Address(RVA = "0x11788E8", Offset = "0x11788E8", VA = "0x11788E8", Slot = "21")]
	public virtual LocalizedString GetContentFlavour()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x6001548")]
	[Address(RVA = "0x11788FC", Offset = "0x11788FC", VA = "0x11788FC")]
	protected QuestBase()
	{
	}
}
[Serializable]
[Token(Token = "0x20002DC")]
public class QuestSaveData : DataboxType
{
	[Token(Token = "0x4001313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private QuestBase _quest;

	[Token(Token = "0x4001314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int _progress;

	[Token(Token = "0x4001315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int _reward;

	[Token(Token = "0x4001316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int _collectAmount;

	[Token(Token = "0x4001317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private object _selectedObject;

	[Token(Token = "0x4001318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private long _saveTime;

	[Token(Token = "0x4001319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int _saveSlot;

	[Token(Token = "0x400131A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private bool _accepted;

	[Token(Token = "0x400131B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private string _acceptedScene;

	[Token(Token = "0x400131C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool _isBiomeSelected;

	[Token(Token = "0x17000283")]
	public QuestBase quest
	{
		[Token(Token = "0x6001549")]
		[Address(RVA = "0x1178910", Offset = "0x1178910", VA = "0x1178910")]
		get
		{
			return null;
		}
		[Token(Token = "0x600154A")]
		[Address(RVA = "0x1178918", Offset = "0x1178918", VA = "0x1178918")]
		set
		{
		}
	}

	[Token(Token = "0x17000284")]
	public int progress
	{
		[Token(Token = "0x600154B")]
		[Address(RVA = "0x11789C8", Offset = "0x11789C8", VA = "0x11789C8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600154C")]
		[Address(RVA = "0x11789D0", Offset = "0x11789D0", VA = "0x11789D0")]
		set
		{
		}
	}

	[Token(Token = "0x17000285")]
	public int reward
	{
		[Token(Token = "0x600154D")]
		[Address(RVA = "0x1178A04", Offset = "0x1178A04", VA = "0x1178A04")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600154E")]
		[Address(RVA = "0x1178A0C", Offset = "0x1178A0C", VA = "0x1178A0C")]
		set
		{
		}
	}

	[Token(Token = "0x17000286")]
	public int collectAmount
	{
		[Token(Token = "0x600154F")]
		[Address(RVA = "0x1178A40", Offset = "0x1178A40", VA = "0x1178A40")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001550")]
		[Address(RVA = "0x1178A48", Offset = "0x1178A48", VA = "0x1178A48")]
		set
		{
		}
	}

	[Token(Token = "0x17000287")]
	public object selectedObject
	{
		[Token(Token = "0x6001551")]
		[Address(RVA = "0x1178A7C", Offset = "0x1178A7C", VA = "0x1178A7C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001552")]
		[Address(RVA = "0x1178A84", Offset = "0x1178A84", VA = "0x1178A84")]
		set
		{
		}
	}

	[Token(Token = "0x17000288")]
	public long saveTime
	{
		[Token(Token = "0x6001553")]
		[Address(RVA = "0x1178AC8", Offset = "0x1178AC8", VA = "0x1178AC8")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6001554")]
		[Address(RVA = "0x1178AD0", Offset = "0x1178AD0", VA = "0x1178AD0")]
		set
		{
		}
	}

	[Token(Token = "0x17000289")]
	public int saveSlot
	{
		[Token(Token = "0x6001555")]
		[Address(RVA = "0x1178B04", Offset = "0x1178B04", VA = "0x1178B04")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001556")]
		[Address(RVA = "0x1178B0C", Offset = "0x1178B0C", VA = "0x1178B0C")]
		set
		{
		}
	}

	[Token(Token = "0x1700028A")]
	public bool accepted
	{
		[Token(Token = "0x6001557")]
		[Address(RVA = "0x1178B40", Offset = "0x1178B40", VA = "0x1178B40")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001558")]
		[Address(RVA = "0x1178B48", Offset = "0x1178B48", VA = "0x1178B48")]
		set
		{
		}
	}

	[Token(Token = "0x1700028B")]
	public string acceptedScene
	{
		[Token(Token = "0x6001559")]
		[Address(RVA = "0x1178B80", Offset = "0x1178B80", VA = "0x1178B80")]
		get
		{
			return null;
		}
		[Token(Token = "0x600155A")]
		[Address(RVA = "0x1178B88", Offset = "0x1178B88", VA = "0x1178B88")]
		set
		{
		}
	}

	[Token(Token = "0x1700028C")]
	public bool isBiomeSelected
	{
		[Token(Token = "0x600155B")]
		[Address(RVA = "0x1178BF4", Offset = "0x1178BF4", VA = "0x1178BF4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600155C")]
		[Address(RVA = "0x1178BFC", Offset = "0x1178BFC", VA = "0x1178BFC")]
		set
		{
		}
	}

	[Token(Token = "0x600155D")]
	[Address(RVA = "0x1178C34", Offset = "0x1178C34", VA = "0x1178C34", Slot = "5")]
	public override void DrawEditor()
	{
	}

	[Token(Token = "0x600155E")]
	[Address(RVA = "0x117907C", Offset = "0x117907C", VA = "0x117907C")]
	public QuestSaveData()
	{
	}
}
[Token(Token = "0x20002DD")]
[CreateAssetMenu(menuName = "Quests/HotspotScan")]
public class HotspotScan : QuestBase
{
	[Token(Token = "0x400131D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private int[] hotspotCountOptions;

	[NonSerialized]
	[Token(Token = "0x400131E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int _selectedHotspotCount;

	[NonSerialized]
	[Token(Token = "0x400131F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int _currentProgress;

	[NonSerialized]
	[Token(Token = "0x4001320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private string _selectedBiome;

	[NonSerialized]
	[Token(Token = "0x4001321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool _isBiomeSelected;

	[NonSerialized]
	[Token(Token = "0x4001322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	private bool _accepted;

	[Token(Token = "0x600155F")]
	[Address(RVA = "0x1179084", Offset = "0x1179084", VA = "0x1179084", Slot = "4")]
	protected override void ChildInitiliaze()
	{
	}

	[Token(Token = "0x6001560")]
	[Address(RVA = "0x11792F8", Offset = "0x11792F8", VA = "0x11792F8", Slot = "15")]
	public override void AcceptQuest(int forceSlot = -1, bool notify = true)
	{
	}

	[Token(Token = "0x6001561")]
	[Address(RVA = "0x1179410", Offset = "0x1179410", VA = "0x1179410", Slot = "16")]
	public override void RemoveQuest()
	{
	}

	[Token(Token = "0x6001562")]
	[Address(RVA = "0x1179470", Offset = "0x1179470", VA = "0x1179470", Slot = "18")]
	public override void QuestFinished()
	{
	}

	[Token(Token = "0x6001563")]
	[Address(RVA = "0x11794D0", Offset = "0x11794D0", VA = "0x11794D0", Slot = "8")]
	public override string GetProgressText()
	{
		return null;
	}

	[Token(Token = "0x6001564")]
	[Address(RVA = "0x11795EC", Offset = "0x11795EC", VA = "0x11795EC", Slot = "7")]
	protected override void ResetStatus()
	{
	}

	[Token(Token = "0x6001565")]
	[Address(RVA = "0x11795F4", Offset = "0x11795F4", VA = "0x11795F4", Slot = "5")]
	protected override void SubscribeEvents()
	{
	}

	[Token(Token = "0x6001566")]
	[Address(RVA = "0x117971C", Offset = "0x117971C", VA = "0x117971C", Slot = "6")]
	protected override void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x6001567")]
	[Address(RVA = "0x1179844", Offset = "0x1179844", VA = "0x1179844", Slot = "17")]
	public override void CheckIfFinished()
	{
	}

	[Token(Token = "0x6001568")]
	[Address(RVA = "0x1179864", Offset = "0x1179864", VA = "0x1179864", Slot = "9")]
	public override string GetTitleText()
	{
		return null;
	}

	[Token(Token = "0x6001569")]
	[Address(RVA = "0x1179978", Offset = "0x1179978", VA = "0x1179978", Slot = "10")]
	public override QuestSaveData GetSaveProgress()
	{
		return null;
	}

	[Token(Token = "0x600156A")]
	[Address(RVA = "0x1179B84", Offset = "0x1179B84", VA = "0x1179B84", Slot = "12")]
	public override void LoadSaveProgress(QuestSaveData saveData)
	{
	}

	[Token(Token = "0x600156B")]
	[Address(RVA = "0x1179C5C", Offset = "0x1179C5C", VA = "0x1179C5C")]
	public void HotspotScanned()
	{
	}

	[Token(Token = "0x600156C")]
	[Address(RVA = "0x1179230", Offset = "0x1179230", VA = "0x1179230")]
	private void SelectBiome()
	{
	}

	[Token(Token = "0x600156D")]
	[Address(RVA = "0x117931C", Offset = "0x117931C", VA = "0x117931C")]
	private void LoadHotspots()
	{
	}

	[Token(Token = "0x600156E")]
	[Address(RVA = "0x1179D70", Offset = "0x1179D70", VA = "0x1179D70")]
	public HotspotScan()
	{
	}
}
[Token(Token = "0x20002DE")]
[CreateAssetMenu(menuName = "Quests/JunkCollection")]
public class JunkCollection : QuestBase
{
	[Token(Token = "0x4001323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Prop.PropType[] B1PropPrefabs;

	[Token(Token = "0x4001324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Prop.PropType[] B2PropPrefabs;

	[Token(Token = "0x4001325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Prop.PropType[] B3PropPrefabs;

	[Token(Token = "0x4001326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Prop.PropType[] B4PropPrefabs;

	[Token(Token = "0x4001327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private int[] collectAmountOptions;

	[NonSerialized]
	[Token(Token = "0x4001328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Prop.PropType _selectedPropType;

	[NonSerialized]
	[Token(Token = "0x4001329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int _selectedCollectAmount;

	[NonSerialized]
	[Token(Token = "0x400132A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int _currentProgress;

	[Token(Token = "0x600156F")]
	[Address(RVA = "0x1179E14", Offset = "0x1179E14", VA = "0x1179E14", Slot = "8")]
	public override string GetProgressText()
	{
		return null;
	}

	[Token(Token = "0x6001570")]
	[Address(RVA = "0x1179F30", Offset = "0x1179F30", VA = "0x1179F30", Slot = "7")]
	protected override void ResetStatus()
	{
	}

	[Token(Token = "0x6001571")]
	[Address(RVA = "0x1179F38", Offset = "0x1179F38", VA = "0x1179F38", Slot = "4")]
	protected override void ChildInitiliaze()
	{
	}

	[Token(Token = "0x6001572")]
	[Address(RVA = "0x117A2B8", Offset = "0x117A2B8", VA = "0x117A2B8")]
	private void TogglePropsForQuest(bool status, Prop.PropType propType)
	{
	}

	[Token(Token = "0x6001573")]
	[Address(RVA = "0x117A4AC", Offset = "0x117A4AC", VA = "0x117A4AC", Slot = "11")]
	public override void SceneChanged()
	{
	}

	[Token(Token = "0x6001574")]
	[Address(RVA = "0x117A4B8", Offset = "0x117A4B8", VA = "0x117A4B8", Slot = "15")]
	public override void AcceptQuest(int forceSlot = -1, bool notify = true)
	{
	}

	[Token(Token = "0x6001575")]
	[Address(RVA = "0x117A4DC", Offset = "0x117A4DC", VA = "0x117A4DC", Slot = "16")]
	public override void RemoveQuest()
	{
	}

	[Token(Token = "0x6001576")]
	[Address(RVA = "0x117A4FC", Offset = "0x117A4FC", VA = "0x117A4FC", Slot = "18")]
	public override void QuestFinished()
	{
	}

	[Token(Token = "0x6001577")]
	[Address(RVA = "0x117A51C", Offset = "0x117A51C", VA = "0x117A51C", Slot = "5")]
	protected override void SubscribeEvents()
	{
	}

	[Token(Token = "0x6001578")]
	[Address(RVA = "0x117A5E0", Offset = "0x117A5E0", VA = "0x117A5E0", Slot = "6")]
	protected override void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x6001579")]
	[Address(RVA = "0x1179FB4", Offset = "0x1179FB4", VA = "0x1179FB4")]
	private void SelectRandomPropFromBiome()
	{
	}

	[Token(Token = "0x600157A")]
	[Address(RVA = "0x117A6A4", Offset = "0x117A6A4", VA = "0x117A6A4")]
	private void LootedSomething(Prop prop)
	{
	}

	[Token(Token = "0x600157B")]
	[Address(RVA = "0x117A808", Offset = "0x117A808", VA = "0x117A808", Slot = "17")]
	public override void CheckIfFinished()
	{
	}

	[Token(Token = "0x600157C")]
	[Address(RVA = "0x117A828", Offset = "0x117A828", VA = "0x117A828", Slot = "9")]
	public override string GetTitleText()
	{
		return null;
	}

	[Token(Token = "0x600157D")]
	[Address(RVA = "0x117A9F8", Offset = "0x117A9F8", VA = "0x117A9F8")]
	private string GetNicePropString(Prop.PropType propType)
	{
		return null;
	}

	[Token(Token = "0x600157E")]
	[Address(RVA = "0x117AB64", Offset = "0x117AB64", VA = "0x117AB64", Slot = "10")]
	public override QuestSaveData GetSaveProgress()
	{
		return null;
	}

	[Token(Token = "0x600157F")]
	[Address(RVA = "0x117AD40", Offset = "0x117AD40", VA = "0x117AD40", Slot = "12")]
	public override void LoadSaveProgress(QuestSaveData saveData)
	{
	}

	[Token(Token = "0x6001580")]
	[Address(RVA = "0x117B000", Offset = "0x117B000", VA = "0x117B000")]
	public JunkCollection()
	{
	}
}
[Token(Token = "0x20002DF")]
[CreateAssetMenu(menuName = "Quests/LootCollection")]
public class LootCollection : QuestBase
{
	[Token(Token = "0x400132B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private int[] collectAmountOptions;

	[Token(Token = "0x400132C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private string[] departments;

	[NonSerialized]
	[Token(Token = "0x400132D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private LootSpawnAndDespawnManager.LootType _selectedLootType;

	[NonSerialized]
	[Token(Token = "0x400132E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int _selectedCollectAmount;

	[NonSerialized]
	[Token(Token = "0x400132F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int _currentProgress;

	[Token(Token = "0x6001581")]
	[Address(RVA = "0x117B0A4", Offset = "0x117B0A4", VA = "0x117B0A4", Slot = "8")]
	public override string GetProgressText()
	{
		return null;
	}

	[Token(Token = "0x6001582")]
	[Address(RVA = "0x117B1C0", Offset = "0x117B1C0", VA = "0x117B1C0", Slot = "7")]
	protected override void ResetStatus()
	{
	}

	[Token(Token = "0x6001583")]
	[Address(RVA = "0x117B1C8", Offset = "0x117B1C8", VA = "0x117B1C8", Slot = "4")]
	protected override void ChildInitiliaze()
	{
	}

	[Token(Token = "0x6001584")]
	[Address(RVA = "0x117B520", Offset = "0x117B520", VA = "0x117B520", Slot = "5")]
	protected override void SubscribeEvents()
	{
	}

	[Token(Token = "0x6001585")]
	[Address(RVA = "0x117B5E4", Offset = "0x117B5E4", VA = "0x117B5E4", Slot = "6")]
	protected override void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x6001586")]
	[Address(RVA = "0x117B244", Offset = "0x117B244", VA = "0x117B244")]
	private void SelectRandomLootFromCodex()
	{
	}

	[Token(Token = "0x6001587")]
	[Address(RVA = "0x117B6A8", Offset = "0x117B6A8", VA = "0x117B6A8")]
	private void LootedSomething(Loot loot)
	{
	}

	[Token(Token = "0x6001588")]
	[Address(RVA = "0x117B820", Offset = "0x117B820", VA = "0x117B820", Slot = "17")]
	public override void CheckIfFinished()
	{
	}

	[Token(Token = "0x6001589")]
	[Address(RVA = "0x117B840", Offset = "0x117B840", VA = "0x117B840", Slot = "9")]
	public override string GetTitleText()
	{
		return null;
	}

	[Token(Token = "0x600158A")]
	[Address(RVA = "0x117B9B4", Offset = "0x117B9B4", VA = "0x117B9B4", Slot = "13")]
	public override string GetContentDescriptionText()
	{
		return null;
	}

	[Token(Token = "0x600158B")]
	[Address(RVA = "0x117BAAC", Offset = "0x117BAAC", VA = "0x117BAAC", Slot = "10")]
	public override QuestSaveData GetSaveProgress()
	{
		return null;
	}

	[Token(Token = "0x600158C")]
	[Address(RVA = "0x117BC88", Offset = "0x117BC88", VA = "0x117BC88", Slot = "12")]
	public override void LoadSaveProgress(QuestSaveData saveData)
	{
	}

	[Token(Token = "0x600158D")]
	[Address(RVA = "0x117BF48", Offset = "0x117BF48", VA = "0x117BF48")]
	public LootCollection()
	{
	}
}
[Token(Token = "0x20002E0")]
[CreateAssetMenu(menuName = "Quests/LootNodeHunt")]
public class LootNodeHunt : QuestBase
{
	[Token(Token = "0x20002E1")]
	public enum SourceNodeType
	{
		[Token(Token = "0x4001336")]
		none,
		[Token(Token = "0x4001337")]
		water,
		[Token(Token = "0x4001338")]
		wallNode,
		[Token(Token = "0x4001339")]
		geode,
		[Token(Token = "0x400133A")]
		diggingSpot
	}

	[Serializable]
	[Token(Token = "0x20002E2")]
	public class NodeHuntType
	{
		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SourceNodeType nodeType;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString titleName;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LocalizedString descriptionName;

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x117D048", Offset = "0x117D048", VA = "0x117D048")]
		public NodeHuntType()
		{
		}
	}

	[Token(Token = "0x4001330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private NodeHuntType[] nodeHuntTypeOptions;

	[Token(Token = "0x4001331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private int[] collectAmountOptions;

	[NonSerialized]
	[Token(Token = "0x4001332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private NodeHuntType _selectedNodeType;

	[NonSerialized]
	[Token(Token = "0x4001333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int _selectedCollectAmount;

	[NonSerialized]
	[Token(Token = "0x4001334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int _currentProgress;

	[Token(Token = "0x600158E")]
	[Address(RVA = "0x117BFEC", Offset = "0x117BFEC", VA = "0x117BFEC", Slot = "8")]
	public override string GetProgressText()
	{
		return null;
	}

	[Token(Token = "0x600158F")]
	[Address(RVA = "0x117C108", Offset = "0x117C108", VA = "0x117C108", Slot = "7")]
	protected override void ResetStatus()
	{
	}

	[Token(Token = "0x6001590")]
	[Address(RVA = "0x117C110", Offset = "0x117C110", VA = "0x117C110", Slot = "4")]
	protected override void ChildInitiliaze()
	{
	}

	[Token(Token = "0x6001591")]
	[Address(RVA = "0x117C4C8", Offset = "0x117C4C8", VA = "0x117C4C8", Slot = "5")]
	protected override void SubscribeEvents()
	{
	}

	[Token(Token = "0x6001592")]
	[Address(RVA = "0x117C664", Offset = "0x117C664", VA = "0x117C664", Slot = "6")]
	protected override void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x6001593")]
	[Address(RVA = "0x117C18C", Offset = "0x117C18C", VA = "0x117C18C")]
	private void SelectRandomNodeType()
	{
	}

	[Token(Token = "0x6001594")]
	[Address(RVA = "0x117C7E8", Offset = "0x117C7E8", VA = "0x117C7E8", Slot = "19")]
	public override bool IsQuestPossible()
	{
		return default(bool);
	}

	[Token(Token = "0x6001595")]
	[Address(RVA = "0x117CA00", Offset = "0x117CA00", VA = "0x117CA00")]
	private void NodeHuntQuestProgress()
	{
	}

	[Token(Token = "0x6001596")]
	[Address(RVA = "0x117CB14", Offset = "0x117CB14", VA = "0x117CB14", Slot = "17")]
	public override void CheckIfFinished()
	{
	}

	[Token(Token = "0x6001597")]
	[Address(RVA = "0x117CB34", Offset = "0x117CB34", VA = "0x117CB34", Slot = "9")]
	public override string GetTitleText()
	{
		return null;
	}

	[Token(Token = "0x6001598")]
	[Address(RVA = "0x117CC18", Offset = "0x117CC18", VA = "0x117CC18", Slot = "13")]
	public override string GetContentDescriptionText()
	{
		return null;
	}

	[Token(Token = "0x6001599")]
	[Address(RVA = "0x117CCB0", Offset = "0x117CCB0", VA = "0x117CCB0", Slot = "10")]
	public override QuestSaveData GetSaveProgress()
	{
		return null;
	}

	[Token(Token = "0x600159A")]
	[Address(RVA = "0x117CE5C", Offset = "0x117CE5C", VA = "0x117CE5C", Slot = "12")]
	public override void LoadSaveProgress(QuestSaveData saveData)
	{
	}

	[Token(Token = "0x600159B")]
	[Address(RVA = "0x117CF74", Offset = "0x117CF74", VA = "0x117CF74")]
	public LootNodeHunt()
	{
	}
}
[Token(Token = "0x20002E3")]
[CreateAssetMenu(menuName = "Quests/MonsterHunt")]
public class MonsterHunt : QuestBase
{
	[Token(Token = "0x400133E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private int[] collectAmountOptions;

	[Token(Token = "0x400133F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private bool forceEnemyType;

	[Token(Token = "0x4001340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	private EnemySpawnAndDespawnManager.EnemyType _forcedEnemyType;

	[NonSerialized]
	[Token(Token = "0x4001341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private EnemySpawnAndDespawnManager.EnemyType _selectedEnemyType;

	[NonSerialized]
	[Token(Token = "0x4001342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int _selectedHuntAmount;

	[NonSerialized]
	[Token(Token = "0x4001343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int _currentProgress;

	[Token(Token = "0x600159D")]
	[Address(RVA = "0x117D050", Offset = "0x117D050", VA = "0x117D050", Slot = "8")]
	public override string GetProgressText()
	{
		return null;
	}

	[Token(Token = "0x600159E")]
	[Address(RVA = "0x117D16C", Offset = "0x117D16C", VA = "0x117D16C", Slot = "7")]
	protected override void ResetStatus()
	{
	}

	[Token(Token = "0x600159F")]
	[Address(RVA = "0x117D174", Offset = "0x117D174", VA = "0x117D174", Slot = "4")]
	protected override void ChildInitiliaze()
	{
	}

	[Token(Token = "0x60015A0")]
	[Address(RVA = "0x117D3CC", Offset = "0x117D3CC", VA = "0x117D3CC", Slot = "5")]
	protected override void SubscribeEvents()
	{
	}

	[Token(Token = "0x60015A1")]
	[Address(RVA = "0x117D490", Offset = "0x117D490", VA = "0x117D490", Slot = "6")]
	protected override void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x60015A2")]
	[Address(RVA = "0x117D1F0", Offset = "0x117D1F0", VA = "0x117D1F0")]
	private void SelectRandomMonster()
	{
	}

	[Token(Token = "0x60015A3")]
	[Address(RVA = "0x117D554", Offset = "0x117D554", VA = "0x117D554")]
	private void KilledSomething(Enemy enemy, DamageType killedByType)
	{
	}

	[Token(Token = "0x60015A4")]
	[Address(RVA = "0x117D6B8", Offset = "0x117D6B8", VA = "0x117D6B8", Slot = "17")]
	public override void CheckIfFinished()
	{
	}

	[Token(Token = "0x60015A5")]
	[Address(RVA = "0x117D6D8", Offset = "0x117D6D8", VA = "0x117D6D8", Slot = "9")]
	public override string GetTitleText()
	{
		return null;
	}

	[Token(Token = "0x60015A6")]
	[Address(RVA = "0x117D85C", Offset = "0x117D85C", VA = "0x117D85C", Slot = "10")]
	public override QuestSaveData GetSaveProgress()
	{
		return null;
	}

	[Token(Token = "0x60015A7")]
	[Address(RVA = "0x117DA38", Offset = "0x117DA38", VA = "0x117DA38", Slot = "12")]
	public override void LoadSaveProgress(QuestSaveData saveData)
	{
	}

	[Token(Token = "0x60015A8")]
	[Address(RVA = "0x117DB0C", Offset = "0x117DB0C", VA = "0x117DB0C")]
	public MonsterHunt()
	{
	}
}
[Token(Token = "0x20002E4")]
[CreateAssetMenu(menuName = "Quests/PropDestroy")]
public class PropDestroy : QuestBase
{
	[Token(Token = "0x4001344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Prop.PropType[] B1PropPrefabs;

	[Token(Token = "0x4001345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Prop.PropType[] B2PropPrefabs;

	[Token(Token = "0x4001346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Prop.PropType[] B3PropPrefabs;

	[Token(Token = "0x4001347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Prop.PropType[] B4PropPrefabs;

	[Token(Token = "0x4001348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private int[] destroyAmountOptions;

	[NonSerialized]
	[Token(Token = "0x4001349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Prop.PropType _selectedPropType;

	[NonSerialized]
	[Token(Token = "0x400134A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int _selectedDestroyAmount;

	[NonSerialized]
	[Token(Token = "0x400134B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int _currentProgress;

	[Token(Token = "0x60015A9")]
	[Address(RVA = "0x117DBB0", Offset = "0x117DBB0", VA = "0x117DBB0", Slot = "8")]
	public override string GetProgressText()
	{
		return null;
	}

	[Token(Token = "0x60015AA")]
	[Address(RVA = "0x117DCCC", Offset = "0x117DCCC", VA = "0x117DCCC", Slot = "7")]
	protected override void ResetStatus()
	{
	}

	[Token(Token = "0x60015AB")]
	[Address(RVA = "0x117DCD4", Offset = "0x117DCD4", VA = "0x117DCD4", Slot = "4")]
	protected override void ChildInitiliaze()
	{
	}

	[Token(Token = "0x60015AC")]
	[Address(RVA = "0x117DFCC", Offset = "0x117DFCC", VA = "0x117DFCC", Slot = "18")]
	public override void QuestFinished()
	{
	}

	[Token(Token = "0x60015AD")]
	[Address(RVA = "0x117DFD0", Offset = "0x117DFD0", VA = "0x117DFD0", Slot = "5")]
	protected override void SubscribeEvents()
	{
	}

	[Token(Token = "0x60015AE")]
	[Address(RVA = "0x117E094", Offset = "0x117E094", VA = "0x117E094", Slot = "6")]
	protected override void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x60015AF")]
	[Address(RVA = "0x117DD50", Offset = "0x117DD50", VA = "0x117DD50")]
	private void SelectRandomPropFromBiome()
	{
	}

	[Token(Token = "0x60015B0")]
	[Address(RVA = "0x117E158", Offset = "0x117E158", VA = "0x117E158")]
	private void DestroyedSomething(Prop prop)
	{
	}

	[Token(Token = "0x60015B1")]
	[Address(RVA = "0x117E2BC", Offset = "0x117E2BC", VA = "0x117E2BC", Slot = "17")]
	public override void CheckIfFinished()
	{
	}

	[Token(Token = "0x60015B2")]
	[Address(RVA = "0x117E2DC", Offset = "0x117E2DC", VA = "0x117E2DC", Slot = "9")]
	public override string GetTitleText()
	{
		return null;
	}

	[Token(Token = "0x60015B3")]
	[Address(RVA = "0x117E42C", Offset = "0x117E42C", VA = "0x117E42C", Slot = "10")]
	public override QuestSaveData GetSaveProgress()
	{
		return null;
	}

	[Token(Token = "0x60015B4")]
	[Address(RVA = "0x117E608", Offset = "0x117E608", VA = "0x117E608", Slot = "12")]
	public override void LoadSaveProgress(QuestSaveData saveData)
	{
	}

	[Token(Token = "0x60015B5")]
	[Address(RVA = "0x117E6DC", Offset = "0x117E6DC", VA = "0x117E6DC")]
	public PropDestroy()
	{
	}
}
[Token(Token = "0x20002E5")]
[CreateAssetMenu(menuName = "Quests/RelicCollection")]
public class RelicCollection : QuestBase
{
	[Token(Token = "0x400134C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private int[] collectAmountOptions;

	[NonSerialized]
	[Token(Token = "0x400134D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int _selectedCollectAmount;

	[NonSerialized]
	[Token(Token = "0x400134E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int _currentProgress;

	[Token(Token = "0x60015B6")]
	[Address(RVA = "0x117E780", Offset = "0x117E780", VA = "0x117E780", Slot = "8")]
	public override string GetProgressText()
	{
		return null;
	}

	[Token(Token = "0x60015B7")]
	[Address(RVA = "0x117E89C", Offset = "0x117E89C", VA = "0x117E89C", Slot = "7")]
	protected override void ResetStatus()
	{
	}

	[Token(Token = "0x60015B8")]
	[Address(RVA = "0x117E8A4", Offset = "0x117E8A4", VA = "0x117E8A4", Slot = "4")]
	protected override void ChildInitiliaze()
	{
	}

	[Token(Token = "0x60015B9")]
	[Address(RVA = "0x117E91C", Offset = "0x117E91C", VA = "0x117E91C", Slot = "5")]
	protected override void SubscribeEvents()
	{
	}

	[Token(Token = "0x60015BA")]
	[Address(RVA = "0x117E9E0", Offset = "0x117E9E0", VA = "0x117E9E0", Slot = "6")]
	protected override void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x60015BB")]
	[Address(RVA = "0x117EAA4", Offset = "0x117EAA4", VA = "0x117EAA4", Slot = "17")]
	public override void CheckIfFinished()
	{
	}

	[Token(Token = "0x60015BC")]
	[Address(RVA = "0x117EAC4", Offset = "0x117EAC4", VA = "0x117EAC4", Slot = "9")]
	public override string GetTitleText()
	{
		return null;
	}

	[Token(Token = "0x60015BD")]
	[Address(RVA = "0x117EB38", Offset = "0x117EB38", VA = "0x117EB38", Slot = "13")]
	public override string GetContentDescriptionText()
	{
		return null;
	}

	[Token(Token = "0x60015BE")]
	[Address(RVA = "0x117EB44", Offset = "0x117EB44", VA = "0x117EB44")]
	private void LootedSomething(Loot loot)
	{
	}

	[Token(Token = "0x60015BF")]
	[Address(RVA = "0x117EC70", Offset = "0x117EC70", VA = "0x117EC70", Slot = "10")]
	public override QuestSaveData GetSaveProgress()
	{
		return null;
	}

	[Token(Token = "0x60015C0")]
	[Address(RVA = "0x117EE10", Offset = "0x117EE10", VA = "0x117EE10", Slot = "12")]
	public override void LoadSaveProgress(QuestSaveData saveData)
	{
	}

	[Token(Token = "0x60015C1")]
	[Address(RVA = "0x117EF78", Offset = "0x117EF78", VA = "0x117EF78")]
	public RelicCollection()
	{
	}
}
[Token(Token = "0x20002E6")]
[CreateAssetMenu(menuName = "Quests/TopworldJunkCollection")]
public class TopworldJunkCollection : QuestBase
{
	[Token(Token = "0x400134F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Prop.PropType[] B1PropPrefabs;

	[Token(Token = "0x4001350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Prop.PropType[] B2PropPrefabs;

	[Token(Token = "0x4001351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Prop.PropType[] B3PropPrefabs;

	[Token(Token = "0x4001352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Prop.PropType[] B4PropPrefabs;

	[Token(Token = "0x4001353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private int[] collectAmountOptions;

	[NonSerialized]
	[Token(Token = "0x4001354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Prop.PropType _selectedPropType;

	[NonSerialized]
	[Token(Token = "0x4001355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int _selectedCollectAmount;

	[NonSerialized]
	[Token(Token = "0x4001356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int _currentProgress;

	[NonSerialized]
	[Token(Token = "0x4001357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private string _selectedBiome;

	[NonSerialized]
	[Token(Token = "0x4001358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool _isBiomeSelected;

	[NonSerialized]
	[Token(Token = "0x4001359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	private bool _accepted;

	[Token(Token = "0x60015C2")]
	[Address(RVA = "0x117F01C", Offset = "0x117F01C", VA = "0x117F01C", Slot = "8")]
	public override string GetProgressText()
	{
		return null;
	}

	[Token(Token = "0x60015C3")]
	[Address(RVA = "0x117F138", Offset = "0x117F138", VA = "0x117F138", Slot = "7")]
	protected override void ResetStatus()
	{
	}

	[Token(Token = "0x60015C4")]
	[Address(RVA = "0x117F140", Offset = "0x117F140", VA = "0x117F140", Slot = "4")]
	protected override void ChildInitiliaze()
	{
	}

	[Token(Token = "0x60015C5")]
	[Address(RVA = "0x117F7C4", Offset = "0x117F7C4", VA = "0x117F7C4", Slot = "11")]
	public override void SceneChanged()
	{
	}

	[Token(Token = "0x60015C6")]
	[Address(RVA = "0x117F7C8", Offset = "0x117F7C8", VA = "0x117F7C8", Slot = "15")]
	public override void AcceptQuest(int forceSlot = -1, bool notify = true)
	{
	}

	[Token(Token = "0x60015C7")]
	[Address(RVA = "0x117F800", Offset = "0x117F800", VA = "0x117F800", Slot = "16")]
	public override void RemoveQuest()
	{
	}

	[Token(Token = "0x60015C8")]
	[Address(RVA = "0x117F9A4", Offset = "0x117F9A4", VA = "0x117F9A4", Slot = "18")]
	public override void QuestFinished()
	{
	}

	[Token(Token = "0x60015C9")]
	[Address(RVA = "0x117FA00", Offset = "0x117FA00", VA = "0x117FA00", Slot = "5")]
	protected override void SubscribeEvents()
	{
	}

	[Token(Token = "0x60015CA")]
	[Address(RVA = "0x117FB50", Offset = "0x117FB50", VA = "0x117FB50", Slot = "6")]
	protected override void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x60015CB")]
	[Address(RVA = "0x117F280", Offset = "0x117F280", VA = "0x117F280")]
	private void SelectRandomPropFromBiome()
	{
	}

	[Token(Token = "0x60015CC")]
	[Address(RVA = "0x117FCA0", Offset = "0x117FCA0", VA = "0x117FCA0")]
	private void LootedSomething(Prop prop)
	{
	}

	[Token(Token = "0x60015CD")]
	[Address(RVA = "0x117FE04", Offset = "0x117FE04", VA = "0x117FE04", Slot = "17")]
	public override void CheckIfFinished()
	{
	}

	[Token(Token = "0x60015CE")]
	[Address(RVA = "0x117FE24", Offset = "0x117FE24", VA = "0x117FE24", Slot = "9")]
	public override string GetTitleText()
	{
		return null;
	}

	[Token(Token = "0x60015CF")]
	[Address(RVA = "0x117FFD0", Offset = "0x117FFD0", VA = "0x117FFD0")]
	private string GetNicePropString(Prop.PropType propType)
	{
		return null;
	}

	[Token(Token = "0x60015D0")]
	[Address(RVA = "0x118013C", Offset = "0x118013C", VA = "0x118013C", Slot = "10")]
	public override QuestSaveData GetSaveProgress()
	{
		return null;
	}

	[Token(Token = "0x60015D1")]
	[Address(RVA = "0x118037C", Offset = "0x118037C", VA = "0x118037C", Slot = "12")]
	public override void LoadSaveProgress(QuestSaveData saveData)
	{
	}

	[Token(Token = "0x60015D2")]
	[Address(RVA = "0x117F68C", Offset = "0x117F68C", VA = "0x117F68C")]
	public void SpawnJunkItems()
	{
	}

	[Token(Token = "0x60015D3")]
	[Address(RVA = "0x11806F0", Offset = "0x11806F0", VA = "0x11806F0")]
	public TopworldJunkCollection()
	{
	}
}
[Token(Token = "0x20002E7")]
[CreateAssetMenu(menuName = "Quests/TopworldMonsterHunt")]
public class TopworldMonsterHunt : QuestBase
{
	[Token(Token = "0x400135A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private int[] collectAmountOptions;

	[NonSerialized]
	[Token(Token = "0x400135B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int _selectedHuntAmount;

	[NonSerialized]
	[Token(Token = "0x400135C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int _currentProgress;

	[NonSerialized]
	[Token(Token = "0x400135D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private string _selectedBiome;

	[NonSerialized]
	[Token(Token = "0x400135E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool _isBiomeSelected;

	[NonSerialized]
	[Token(Token = "0x400135F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	private bool _accepted;

	[Token(Token = "0x60015D4")]
	[Address(RVA = "0x1180794", Offset = "0x1180794", VA = "0x1180794", Slot = "8")]
	public override string GetProgressText()
	{
		return null;
	}

	[Token(Token = "0x60015D5")]
	[Address(RVA = "0x11808B0", Offset = "0x11808B0", VA = "0x11808B0", Slot = "7")]
	protected override void ResetStatus()
	{
	}

	[Token(Token = "0x60015D6")]
	[Address(RVA = "0x11808B8", Offset = "0x11808B8", VA = "0x11808B8", Slot = "4")]
	protected override void ChildInitiliaze()
	{
	}

	[Token(Token = "0x60015D7")]
	[Address(RVA = "0x1180B18", Offset = "0x1180B18", VA = "0x1180B18", Slot = "15")]
	public override void AcceptQuest(int forceSlot = -1, bool notify = true)
	{
	}

	[Token(Token = "0x60015D8")]
	[Address(RVA = "0x1180C10", Offset = "0x1180C10", VA = "0x1180C10", Slot = "5")]
	protected override void SubscribeEvents()
	{
	}

	[Token(Token = "0x60015D9")]
	[Address(RVA = "0x1180CD4", Offset = "0x1180CD4", VA = "0x1180CD4", Slot = "6")]
	protected override void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x60015DA")]
	[Address(RVA = "0x1180D98", Offset = "0x1180D98", VA = "0x1180D98")]
	private void KilledSomething(Enemy enemy, DamageType killedByType)
	{
	}

	[Token(Token = "0x60015DB")]
	[Address(RVA = "0x1180FB0", Offset = "0x1180FB0", VA = "0x1180FB0", Slot = "17")]
	public override void CheckIfFinished()
	{
	}

	[Token(Token = "0x60015DC")]
	[Address(RVA = "0x1180FD0", Offset = "0x1180FD0", VA = "0x1180FD0", Slot = "9")]
	public override string GetTitleText()
	{
		return null;
	}

	[Token(Token = "0x60015DD")]
	[Address(RVA = "0x1181088", Offset = "0x1181088", VA = "0x1181088", Slot = "10")]
	public override QuestSaveData GetSaveProgress()
	{
		return null;
	}

	[Token(Token = "0x60015DE")]
	[Address(RVA = "0x1181294", Offset = "0x1181294", VA = "0x1181294", Slot = "12")]
	public override void LoadSaveProgress(QuestSaveData saveData)
	{
	}

	[Token(Token = "0x60015DF")]
	[Address(RVA = "0x11809F8", Offset = "0x11809F8", VA = "0x11809F8")]
	private void SelectBiome()
	{
	}

	[Token(Token = "0x60015E0")]
	[Address(RVA = "0x1180AC0", Offset = "0x1180AC0", VA = "0x1180AC0")]
	private void SpawnEnemies()
	{
	}

	[Token(Token = "0x60015E1")]
	[Address(RVA = "0x11813E8", Offset = "0x11813E8", VA = "0x11813E8", Slot = "11")]
	public override void SceneChanged()
	{
	}

	[Token(Token = "0x60015E2")]
	[Address(RVA = "0x11814C0", Offset = "0x11814C0", VA = "0x11814C0")]
	public TopworldMonsterHunt()
	{
	}
}
[Token(Token = "0x20002E8")]
public class ScannerHotSpot : MonoBehaviour
{
	[Token(Token = "0x20002E9")]
	[CompilerGenerated]
	private sealed class <Beebing>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScannerHotSpot <>4__this;

		[Token(Token = "0x1700028D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015F5")]
			[Address(RVA = "0x1181EC8", Offset = "0x1181EC8", VA = "0x1181EC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015F7")]
			[Address(RVA = "0x1181F10", Offset = "0x1181F10", VA = "0x1181F10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0x1181C44", Offset = "0x1181C44", VA = "0x1181C44")]
		[DebuggerHidden]
		public <Beebing>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0x1181DC0", Offset = "0x1181DC0", VA = "0x1181DC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0x1181DC4", Offset = "0x1181DC4", VA = "0x1181DC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0x1181ED0", Offset = "0x1181ED0", VA = "0x1181ED0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float requiredTimeToScan;

	[Token(Token = "0x4001361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float radius;

	[Token(Token = "0x4001362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource progressSoundSource;

	[Token(Token = "0x4001363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioSource completeSoundSource;

	[Token(Token = "0x4001364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioSource machinerySoundSource;

	[Token(Token = "0x4001365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4001366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem despawnParticles;

	[Token(Token = "0x4001367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float originalPitch;

	[Token(Token = "0x4001368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool detectorInsideHotspot;

	[Token(Token = "0x4001369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool triggerIsSearching;

	[Token(Token = "0x400136A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float timeBetweenBeeps;

	[Token(Token = "0x400136B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int audioIterations;

	[Token(Token = "0x400136C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool hotspotScanned;

	[Token(Token = "0x400136D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Detector detector;

	[Token(Token = "0x400136E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SphereCollider sphereCollider;

	[Token(Token = "0x400136F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float originalSize;

	[Token(Token = "0x60015E3")]
	[Address(RVA = "0x1181564", Offset = "0x1181564", VA = "0x1181564")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015E4")]
	[Address(RVA = "0x1181604", Offset = "0x1181604", VA = "0x1181604")]
	private void Start()
	{
	}

	[Token(Token = "0x60015E5")]
	[Address(RVA = "0x1181678", Offset = "0x1181678", VA = "0x1181678")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60015E6")]
	[Address(RVA = "0x1181814", Offset = "0x1181814", VA = "0x1181814")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60015E7")]
	[Address(RVA = "0x1181958", Offset = "0x1181958", VA = "0x1181958")]
	public void HotspotScanned()
	{
	}

	[Token(Token = "0x60015E8")]
	[Address(RVA = "0x1175BF8", Offset = "0x1175BF8", VA = "0x1175BF8")]
	public void ActivateHotspot()
	{
	}

	[Token(Token = "0x60015E9")]
	[Address(RVA = "0x1181BC8", Offset = "0x1181BC8", VA = "0x1181BC8")]
	private void ShrinkHotspot()
	{
	}

	[Token(Token = "0x60015EA")]
	[Address(RVA = "0x1175E74", Offset = "0x1175E74", VA = "0x1175E74")]
	public void DisabledHotspot()
	{
	}

	[Token(Token = "0x60015EB")]
	[Address(RVA = "0x1181B1C", Offset = "0x1181B1C", VA = "0x1181B1C")]
	public void ResetHotspot()
	{
	}

	[Token(Token = "0x60015EC")]
	[Address(RVA = "0x1181568", Offset = "0x1181568", VA = "0x1181568")]
	public void SetUpHotSpot()
	{
	}

	[Token(Token = "0x60015ED")]
	[Address(RVA = "0x11817A0", Offset = "0x11817A0", VA = "0x11817A0")]
	[IteratorStateMachine(typeof(<Beebing>d__26))]
	private IEnumerator Beebing()
	{
		return null;
	}

	[Token(Token = "0x60015EE")]
	[Address(RVA = "0x1181C6C", Offset = "0x1181C6C", VA = "0x1181C6C")]
	public void IterateBeepPitches()
	{
	}

	[Token(Token = "0x60015EF")]
	[Address(RVA = "0x1181608", Offset = "0x1181608", VA = "0x1181608")]
	private void RegisterHotspot()
	{
	}

	[Token(Token = "0x60015F0")]
	[Address(RVA = "0x1181D0C", Offset = "0x1181D0C", VA = "0x1181D0C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60015F1")]
	[Address(RVA = "0x1181D9C", Offset = "0x1181D9C", VA = "0x1181D9C")]
	public ScannerHotSpot()
	{
	}
}
[Token(Token = "0x20002EA")]
public class TopworldJunkCollectionManager : MonoBehaviour
{
	[Token(Token = "0x20002EB")]
	[CompilerGenerated]
	private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TopworldJunkCollectionManager <>4__this;

		[Token(Token = "0x1700028F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001604")]
			[Address(RVA = "0x11823E8", Offset = "0x11823E8", VA = "0x11823E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000290")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001606")]
			[Address(RVA = "0x1182430", Offset = "0x1182430", VA = "0x1182430", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0x1181FE4", Offset = "0x1181FE4", VA = "0x1181FE4")]
		[DebuggerHidden]
		public <Start>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0x118231C", Offset = "0x118231C", VA = "0x118231C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0x1182320", Offset = "0x1182320", VA = "0x1182320", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0x11823F0", Offset = "0x11823F0", VA = "0x11823F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002EC")]
	[CompilerGenerated]
	private sealed class <DelayedSpawnProps>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TopworldJunkCollectionManager <>4__this;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int amount;

		[Token(Token = "0x17000291")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600160A")]
			[Address(RVA = "0x11828B4", Offset = "0x11828B4", VA = "0x11828B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000292")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600160C")]
			[Address(RVA = "0x11828FC", Offset = "0x11828FC", VA = "0x11828FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0x11821C4", Offset = "0x11821C4", VA = "0x11821C4")]
		[DebuggerHidden]
		public <DelayedSpawnProps>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0x1182438", Offset = "0x1182438", VA = "0x1182438", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0x118243C", Offset = "0x118243C", VA = "0x118243C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0x11828BC", Offset = "0x11828BC", VA = "0x11828BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TopworldJunkCollectionManager Instance;

	[Token(Token = "0x4001374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnAllNodesRegistered;

	[Token(Token = "0x4001375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<TopworldJunkCollectionNode> nodesList;

	[Token(Token = "0x4001376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<TopworldJunkCollectionNode> tempNodesList;

	[Token(Token = "0x4001377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float waitForNewNodesTime;

	[Token(Token = "0x60015F8")]
	[Address(RVA = "0x1181F18", Offset = "0x1181F18", VA = "0x1181F18")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015F9")]
	[Address(RVA = "0x1181F70", Offset = "0x1181F70", VA = "0x1181F70")]
	[IteratorStateMachine(typeof(<Start>d__6))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60015FA")]
	[Address(RVA = "0x118200C", Offset = "0x118200C", VA = "0x118200C")]
	public void RegisterNode(TopworldJunkCollectionNode node)
	{
	}

	[Token(Token = "0x60015FB")]
	[Address(RVA = "0x11820BC", Offset = "0x11820BC", VA = "0x11820BC")]
	private void ClearNodeList()
	{
	}

	[Token(Token = "0x60015FC")]
	[Address(RVA = "0x118212C", Offset = "0x118212C", VA = "0x118212C")]
	public void AllNodesRegistered()
	{
	}

	[Token(Token = "0x60015FD")]
	[Address(RVA = "0x1180660", Offset = "0x1180660", VA = "0x1180660")]
	public void SpawnProps(int amount)
	{
	}

	[Token(Token = "0x60015FE")]
	[Address(RVA = "0x1182140", Offset = "0x1182140", VA = "0x1182140")]
	[IteratorStateMachine(typeof(<DelayedSpawnProps>d__11))]
	private IEnumerator DelayedSpawnProps(int amount)
	{
		return null;
	}

	[Token(Token = "0x60015FF")]
	[Address(RVA = "0x117F85C", Offset = "0x117F85C", VA = "0x117F85C")]
	public void DestroyAllProps()
	{
	}

	[Token(Token = "0x6001600")]
	[Address(RVA = "0x11822A0", Offset = "0x11822A0", VA = "0x11822A0")]
	public TopworldJunkCollectionManager()
	{
	}
}
[Token(Token = "0x20002ED")]
public class TopworldJunkCollectionNode : MonoBehaviour
{
	[Token(Token = "0x400137F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("DONT MODIFY THESE")]
	[HideInInspector]
	public GameObject topworldJunkProp;

	[Token(Token = "0x4001380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject selectedPrefab;

	[Token(Token = "0x4001381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject B1Prefab;

	[Token(Token = "0x4001382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject B2Prefab;

	[Token(Token = "0x4001383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject B3Prefab;

	[Token(Token = "0x4001384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject B4Prefab;

	[Token(Token = "0x4001385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Range(0.1f, 0.5f)]
	[UnityEngine.Tooltip("How high above this gameobject should the prop spawn. Letting the prop fall for 2 units may result in it going through the floor.")]
	[SerializeField]
	private float spawnHeight;

	[Token(Token = "0x600160D")]
	[Address(RVA = "0x1182904", Offset = "0x1182904", VA = "0x1182904")]
	private void Start()
	{
	}

	[Token(Token = "0x600160E")]
	[Address(RVA = "0x1182908", Offset = "0x1182908", VA = "0x1182908")]
	private void CheckBiome()
	{
	}

	[Token(Token = "0x600160F")]
	[Address(RVA = "0x118269C", Offset = "0x118269C", VA = "0x118269C")]
	public void SpawnProp()
	{
	}

	[Token(Token = "0x6001610")]
	[Address(RVA = "0x11821EC", Offset = "0x11821EC", VA = "0x11821EC")]
	public void DeleteProp()
	{
	}

	[Token(Token = "0x6001611")]
	[Address(RVA = "0x1182A50", Offset = "0x1182A50", VA = "0x1182A50")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001612")]
	[Address(RVA = "0x1182BE0", Offset = "0x1182BE0", VA = "0x1182BE0")]
	public TopworldJunkCollectionNode()
	{
	}
}
[Token(Token = "0x20002EE")]
public class TopworldJunkCollectionSpawner : MonoBehaviour
{
	[Token(Token = "0x6001613")]
	[Address(RVA = "0x1182BF0", Offset = "0x1182BF0", VA = "0x1182BF0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001614")]
	[Address(RVA = "0x1182BF4", Offset = "0x1182BF4", VA = "0x1182BF4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001615")]
	[Address(RVA = "0x1182BF8", Offset = "0x1182BF8", VA = "0x1182BF8")]
	public TopworldJunkCollectionSpawner()
	{
	}
}
[Token(Token = "0x20002EF")]
public class TopworldMonsterHuntManager : MonoBehaviour
{
	[Token(Token = "0x20002F0")]
	[CompilerGenerated]
	private sealed class <DelayedSpawnErrandMonsters>d__6 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TopworldMonsterHuntManager <>4__this;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int amount;

		[Token(Token = "0x17000293")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600161F")]
			[Address(RVA = "0x1183024", Offset = "0x1183024", VA = "0x1183024", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000294")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001621")]
			[Address(RVA = "0x118306C", Offset = "0x118306C", VA = "0x118306C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0x1182D90", Offset = "0x1182D90", VA = "0x1182D90")]
		[DebuggerHidden]
		public <DelayedSpawnErrandMonsters>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0x1182DC0", Offset = "0x1182DC0", VA = "0x1182DC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0x1182DC4", Offset = "0x1182DC4", VA = "0x1182DC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0x118302C", Offset = "0x118302C", VA = "0x118302C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TopworldMonsterHuntManager Instance;

	[Token(Token = "0x4001387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<TopworldMonsterNode> nodeList;

	[Token(Token = "0x6001616")]
	[Address(RVA = "0x1182C00", Offset = "0x1182C00", VA = "0x1182C00")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001617")]
	[Address(RVA = "0x1182C58", Offset = "0x1182C58", VA = "0x1182C58")]
	private void Start()
	{
	}

	[Token(Token = "0x6001618")]
	[Address(RVA = "0x1182C5C", Offset = "0x1182C5C", VA = "0x1182C5C")]
	public void RegisterNewMonsterNode(TopworldMonsterNode node)
	{
	}

	[Token(Token = "0x6001619")]
	[Address(RVA = "0x1181350", Offset = "0x1181350", VA = "0x1181350")]
	public void SpawnErrandMonsters(int amount)
	{
	}

	[Token(Token = "0x600161A")]
	[Address(RVA = "0x1182D0C", Offset = "0x1182D0C", VA = "0x1182D0C")]
	[IteratorStateMachine(typeof(<DelayedSpawnErrandMonsters>d__6))]
	private IEnumerator<float> DelayedSpawnErrandMonsters(int amount)
	{
		return null;
	}

	[Token(Token = "0x600161B")]
	[Address(RVA = "0x1182DB8", Offset = "0x1182DB8", VA = "0x1182DB8")]
	public TopworldMonsterHuntManager()
	{
	}
}
[Token(Token = "0x20002F1")]
[CreateAssetMenu(menuName = "Quests/TopworldMonsterHuntPools/NewMonsterHuntPool")]
public class TopworldMonsterHuntPool : ScriptableObject
{
	[Token(Token = "0x400138C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] enemyPrefabs;

	[Token(Token = "0x6001622")]
	[Address(RVA = "0x11830C8", Offset = "0x11830C8", VA = "0x11830C8")]
	public TopworldMonsterHuntPool()
	{
	}
}
[Token(Token = "0x20002F2")]
public class TopworldMonsterNode : MonoBehaviour
{
	[Token(Token = "0x400138D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private TopworldMonsterHuntPool selectedPool;

	[Token(Token = "0x400138E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TopworldMonsterHuntPool B1Pool;

	[Token(Token = "0x400138F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TopworldMonsterHuntPool B2Pool;

	[Token(Token = "0x4001390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TopworldMonsterHuntPool B3Pool;

	[Token(Token = "0x4001391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TopworldMonsterHuntPool B4Pool;

	[Token(Token = "0x6001623")]
	[Address(RVA = "0x11830D0", Offset = "0x11830D0", VA = "0x11830D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001624")]
	[Address(RVA = "0x1182EE0", Offset = "0x1182EE0", VA = "0x1182EE0")]
	public void SpawnRandomEnemy()
	{
	}

	[Token(Token = "0x6001625")]
	[Address(RVA = "0x11830D4", Offset = "0x11830D4", VA = "0x11830D4")]
	private void SelectPool()
	{
	}

	[Token(Token = "0x6001626")]
	[Address(RVA = "0x118321C", Offset = "0x118321C", VA = "0x118321C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001627")]
	[Address(RVA = "0x118326C", Offset = "0x118326C", VA = "0x118326C")]
	public TopworldMonsterNode()
	{
	}
}
[Token(Token = "0x20002F3")]
public class WantedBoardController : MonoBehaviour
{
	[Token(Token = "0x4001392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static WantedBoardController Instance;

	[Token(Token = "0x4001393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WantedBoardPoster[] posters;

	[Token(Token = "0x4001394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lootHintText;

	[Token(Token = "0x4001395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool _hasPlayerEverAccepted;

	[Token(Token = "0x6001628")]
	[Address(RVA = "0x1183274", Offset = "0x1183274", VA = "0x1183274")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001629")]
	[Address(RVA = "0x1183400", Offset = "0x1183400", VA = "0x1183400")]
	private void Start()
	{
	}

	[Token(Token = "0x600162A")]
	[Address(RVA = "0x11834B0", Offset = "0x11834B0", VA = "0x11834B0")]
	private void QuestWasAccepted()
	{
	}

	[Token(Token = "0x600162B")]
	[Address(RVA = "0x11834DC", Offset = "0x11834DC", VA = "0x11834DC")]
	public void AddQuestToBoard(QuestBase quest, int slot = -1)
	{
	}

	[Token(Token = "0x600162C")]
	[Address(RVA = "0x11836A4", Offset = "0x11836A4", VA = "0x11836A4")]
	private void InstantiateQuestToPosterSlot(QuestBase quest, int i)
	{
	}

	[Token(Token = "0x600162D")]
	[Address(RVA = "0x1183B0C", Offset = "0x1183B0C", VA = "0x1183B0C")]
	public WantedBoardController()
	{
	}
}
[Token(Token = "0x20002F4")]
public class WantedBoardPoster : MonoBehaviour
{
	[Token(Token = "0x20002F5")]
	[CompilerGenerated]
	private sealed class <LerpHome>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WantedBoardPoster <>4__this;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 <oldPos>5__2;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion <oldRot>5__3;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <duration>5__4;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__5;

		[Token(Token = "0x17000295")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600163A")]
			[Address(RVA = "0x118426C", Offset = "0x118426C", VA = "0x118426C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000296")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600163C")]
			[Address(RVA = "0x11842B4", Offset = "0x11842B4", VA = "0x11842B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0x1183D40", Offset = "0x1183D40", VA = "0x1183D40")]
		[DebuggerHidden]
		public <LerpHome>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0x11840C8", Offset = "0x11840C8", VA = "0x11840C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0x11840CC", Offset = "0x11840CC", VA = "0x11840CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0x1184274", Offset = "0x1184274", VA = "0x1184274", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public QuestBase myQuest;

	[Token(Token = "0x4001397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Canvas canvas;

	[Token(Token = "0x4001398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject meshGameObject;

	[Token(Token = "0x4001399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Renderer meshRenderer;

	[Token(Token = "0x400139A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text title;

	[Token(Token = "0x400139B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Text flavour;

	[Token(Token = "0x400139C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Text reward;

	[Token(Token = "0x400139D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public HVRGrabbable grabbable;

	[Token(Token = "0x400139E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 _originalPos;

	[Token(Token = "0x400139F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion _originalRot;

	[Token(Token = "0x600162E")]
	[Address(RVA = "0x1183310", Offset = "0x1183310", VA = "0x1183310")]
	public void Initialize()
	{
	}

	[Token(Token = "0x600162F")]
	[Address(RVA = "0x1183C1C", Offset = "0x1183C1C", VA = "0x1183C1C")]
	private void Released(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001630")]
	[Address(RVA = "0x1183CCC", Offset = "0x1183CCC", VA = "0x1183CCC")]
	[IteratorStateMachine(typeof(<LerpHome>d__12))]
	private IEnumerator<float> LerpHome()
	{
		return null;
	}

	[Token(Token = "0x6001631")]
	[Address(RVA = "0x1183888", Offset = "0x1183888", VA = "0x1183888")]
	public void SetPosterQuest(QuestBase quest)
	{
	}

	[Token(Token = "0x6001632")]
	[Address(RVA = "0x1183DB4", Offset = "0x1183DB4", VA = "0x1183DB4")]
	public void AcceptQuest()
	{
	}

	[Token(Token = "0x6001633")]
	[Address(RVA = "0x1183D68", Offset = "0x1183D68", VA = "0x1183D68")]
	private void ToggleVisibility(bool status)
	{
	}

	[Token(Token = "0x6001634")]
	[Address(RVA = "0x1183B14", Offset = "0x1183B14", VA = "0x1183B14")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001635")]
	[Address(RVA = "0x1183FE0", Offset = "0x1183FE0", VA = "0x1183FE0")]
	public void UpdateTextsForLoc()
	{
	}

	[Token(Token = "0x6001636")]
	[Address(RVA = "0x11840C0", Offset = "0x11840C0", VA = "0x11840C0")]
	public WantedBoardPoster()
	{
	}
}
[Token(Token = "0x20002F6")]
public class RectTransformScaleFollow : MonoBehaviour
{
	[Token(Token = "0x40013A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform rectTransform;

	[Token(Token = "0x600163D")]
	[Address(RVA = "0x1184310", Offset = "0x1184310", VA = "0x1184310")]
	private void Update()
	{
	}

	[Token(Token = "0x600163E")]
	[Address(RVA = "0x11843EC", Offset = "0x11843EC", VA = "0x11843EC")]
	public RectTransformScaleFollow()
	{
	}
}
[Token(Token = "0x20002F7")]
public class RespawnCollider : MonoBehaviour
{
	[Token(Token = "0x600163F")]
	[Address(RVA = "0x11843F4", Offset = "0x11843F4", VA = "0x11843F4")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001640")]
	[Address(RVA = "0x118467C", Offset = "0x118467C", VA = "0x118467C")]
	public RespawnCollider()
	{
	}
}
[Token(Token = "0x20002F8")]
[CreateAssetMenu(fileName = "NewRiddle", menuName = "ScriptableObjects/Riddle")]
public class RiddleScriptable : ScriptableObject
{
	[Token(Token = "0x40013A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea(4, 10)]
	public string RiddleText;

	[Token(Token = "0x40013A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Pass;

	[Token(Token = "0x40013AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public char[] CharsSlot1;

	[Token(Token = "0x40013AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public char[] CharsSlot2;

	[Token(Token = "0x40013AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public char[] CharsSlot3;

	[Token(Token = "0x40013AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public char[] CharsSlot4;

	[Token(Token = "0x40013AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public char[] CharsSlot5;

	[Token(Token = "0x40013AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public char[] CharsSlot6;

	[Token(Token = "0x6001641")]
	[Address(RVA = "0x1184684", Offset = "0x1184684", VA = "0x1184684")]
	public char[] Slot(int slotID)
	{
		return null;
	}

	[Token(Token = "0x6001642")]
	[Address(RVA = "0x11846DC", Offset = "0x11846DC", VA = "0x11846DC")]
	public RiddleScriptable()
	{
	}
}
[Token(Token = "0x20002F9")]
public class RigidBodyFloat : MonoBehaviour
{
	[Token(Token = "0x40013B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody rb;

	[Token(Token = "0x40013B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float yOffset;

	[Token(Token = "0x40013B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	public float amplitude;

	[Token(Token = "0x40013B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public float frequency;

	[Token(Token = "0x40013B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool changeLayer;

	[Token(Token = "0x40013B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float xPos;

	[Token(Token = "0x40013B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float yPos;

	[Token(Token = "0x40013B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float zPos;

	[Token(Token = "0x6001643")]
	[Address(RVA = "0x11846E4", Offset = "0x11846E4", VA = "0x11846E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001644")]
	[Address(RVA = "0x1184784", Offset = "0x1184784", VA = "0x1184784")]
	private void Start()
	{
	}

	[Token(Token = "0x6001645")]
	[Address(RVA = "0x1184808", Offset = "0x1184808", VA = "0x1184808")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001646")]
	[Address(RVA = "0x1184938", Offset = "0x1184938", VA = "0x1184938")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001647")]
	[Address(RVA = "0x11846F4", Offset = "0x11846F4", VA = "0x11846F4")]
	private void ChangeLayer()
	{
	}

	[Token(Token = "0x6001648")]
	[Address(RVA = "0x1184954", Offset = "0x1184954", VA = "0x1184954")]
	public void MyUpdate()
	{
	}

	[Token(Token = "0x6001649")]
	[Address(RVA = "0x11849DC", Offset = "0x11849DC", VA = "0x11849DC")]
	public RigidBodyFloat()
	{
	}
}
[Token(Token = "0x20002FA")]
public class RollNumber : MonoBehaviour
{
	[Token(Token = "0x40013B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SafeRoll safeRoll;

	[Token(Token = "0x600164A")]
	[Address(RVA = "0x1184A00", Offset = "0x1184A00", VA = "0x1184A00")]
	private void Awake()
	{
	}

	[Token(Token = "0x600164B")]
	[Address(RVA = "0x1184A58", Offset = "0x1184A58", VA = "0x1184A58")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600164C")]
	[Address(RVA = "0x1184B0C", Offset = "0x1184B0C", VA = "0x1184B0C")]
	public RollNumber()
	{
	}
}
[Token(Token = "0x20002FB")]
public class RoomPropController : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x20002FC")]
	[CompilerGenerated]
	private sealed class <_SetStatusOfProps>d__16 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RoomPropController <>4__this;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public short[] propIDs;

		[Token(Token = "0x17000297")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001667")]
			[Address(RVA = "0x118608C", Offset = "0x118608C", VA = "0x118608C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000298")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001669")]
			[Address(RVA = "0x11860D4", Offset = "0x11860D4", VA = "0x11860D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0x11855A4", Offset = "0x11855A4", VA = "0x11855A4")]
		[DebuggerHidden]
		public <_SetStatusOfProps>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0x1185EE0", Offset = "0x1185EE0", VA = "0x1185EE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0x1185EE4", Offset = "0x1185EE4", VA = "0x1185EE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0x1186094", Offset = "0x1186094", VA = "0x1186094", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002FD")]
	[CompilerGenerated]
	private sealed class <_WaitAndAllowResetProp>d__22 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float duration;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RoomPropController <>4__this;

		[Token(Token = "0x17000299")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600166D")]
			[Address(RVA = "0x11861EC", Offset = "0x11861EC", VA = "0x11861EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700029A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600166F")]
			[Address(RVA = "0x1186234", Offset = "0x1186234", VA = "0x1186234", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0x1185910", Offset = "0x1185910", VA = "0x1185910")]
		[DebuggerHidden]
		public <_WaitAndAllowResetProp>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0x1186130", Offset = "0x1186130", VA = "0x1186130", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0x1186134", Offset = "0x1186134", VA = "0x1186134", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0x11861F4", Offset = "0x11861F4", VA = "0x11861F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40013B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Prop[] allProps;

	[Token(Token = "0x40013BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Prop[] allDynamicProps;

	[Token(Token = "0x40013BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Prop> propsToSync;

	[Token(Token = "0x40013BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Prop> nonImportantProps;

	[Token(Token = "0x40013BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<int> destroyedPropIDs;

	[Token(Token = "0x40013BE")]
	private const int AndroidAllowedNonImportantProps = 60;

	[Token(Token = "0x40013BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private short runningIndex;

	[Token(Token = "0x40013C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private short[] idsToDisable;

	[Token(Token = "0x40013C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool allowResetProps;

	[Token(Token = "0x600164D")]
	[Address(RVA = "0x1184B14", Offset = "0x1184B14", VA = "0x1184B14")]
	private void Awake()
	{
	}

	[Token(Token = "0x600164E")]
	[Address(RVA = "0x118500C", Offset = "0x118500C", VA = "0x118500C", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x600164F")]
	[Address(RVA = "0x11853E4", Offset = "0x11853E4", VA = "0x11853E4", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6001650")]
	[Address(RVA = "0x11854DC", Offset = "0x11854DC", VA = "0x11854DC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001651")]
	[Address(RVA = "0x1184E08", Offset = "0x1184E08", VA = "0x1184E08")]
	private void GetIDsToDisable()
	{
	}

	[Token(Token = "0x6001652")]
	[Address(RVA = "0x1184DE4", Offset = "0x1184DE4", VA = "0x1184DE4")]
	public void CheckProp(Prop prop)
	{
	}

	[Token(Token = "0x6001653")]
	[Address(RVA = "0x118536C", Offset = "0x118536C", VA = "0x118536C")]
	[PunRPC]
	public void SetStatusOfPropsRPC(short[] propIDs)
	{
	}

	[Token(Token = "0x6001654")]
	[Address(RVA = "0x1185514", Offset = "0x1185514", VA = "0x1185514")]
	[IteratorStateMachine(typeof(<_SetStatusOfProps>d__16))]
	private IEnumerator<float> _SetStatusOfProps(short[] propIDs)
	{
		return null;
	}

	[Token(Token = "0x6001655")]
	[Address(RVA = "0x11855CC", Offset = "0x11855CC", VA = "0x11855CC")]
	[PunRPC]
	public void DestroyObjectRPC(int propID, DamageType damageType)
	{
	}

	[Token(Token = "0x6001656")]
	[Address(RVA = "0x1185640", Offset = "0x1185640", VA = "0x1185640", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6001657")]
	[Address(RVA = "0x11856B0", Offset = "0x11856B0", VA = "0x11856B0", Slot = "35")]
	public override void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6001658")]
	[Address(RVA = "0x1185870", Offset = "0x1185870", VA = "0x1185870", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6001659")]
	[Address(RVA = "0x11856CC", Offset = "0x11856CC", VA = "0x11856CC")]
	private void ResetProps()
	{
	}

	[Token(Token = "0x600165A")]
	[Address(RVA = "0x118588C", Offset = "0x118588C", VA = "0x118588C")]
	[IteratorStateMachine(typeof(<_WaitAndAllowResetProp>d__22))]
	private IEnumerator<float> _WaitAndAllowResetProp(float duration)
	{
		return null;
	}

	[Token(Token = "0x600165B")]
	[Address(RVA = "0x1185938", Offset = "0x1185938", VA = "0x1185938")]
	public void DestroyDisableProps(int[] propIDs)
	{
	}

	[Token(Token = "0x600165C")]
	[Address(RVA = "0x1185A80", Offset = "0x1185A80", VA = "0x1185A80")]
	[PunRPC]
	public void SyncedPropDamageRPC(int propID, int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x600165D")]
	[Address(RVA = "0x1185C34", Offset = "0x1185C34", VA = "0x1185C34")]
	[PunRPC]
	public void SpawnObjectsFromProp(int propID, int seed)
	{
	}

	[Token(Token = "0x600165E")]
	[Address(RVA = "0x1185C58", Offset = "0x1185C58", VA = "0x1185C58")]
	public void AddPropToBeSynced(Prop prop)
	{
	}

	[Token(Token = "0x600165F")]
	[Address(RVA = "0x1185D40", Offset = "0x1185D40", VA = "0x1185D40")]
	public void RemovePropToBeSynced(Prop prop)
	{
	}

	[Token(Token = "0x6001660")]
	[Address(RVA = "0x1173358", Offset = "0x1173358", VA = "0x1173358")]
	public Prop SyncProp(int ID, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6001661")]
	[Address(RVA = "0x1185B7C", Offset = "0x1185B7C", VA = "0x1185B7C")]
	public Prop GetDynamicPropWithID(int ID)
	{
		return null;
	}

	[Token(Token = "0x6001662")]
	[Address(RVA = "0x1185BD8", Offset = "0x1185BD8", VA = "0x1185BD8")]
	public Prop GetPropWithIDFromAllProps(int ID)
	{
		return null;
	}

	[Token(Token = "0x6001663")]
	[Address(RVA = "0x1185DD0", Offset = "0x1185DD0", VA = "0x1185DD0")]
	public RoomPropController()
	{
	}
}
[Token(Token = "0x20002FE")]
public class RopeCannon : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x40013CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform cannonHoleExit;

	[Token(Token = "0x40013CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform spinnyThing;

	[Token(Token = "0x40013CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform harpoon;

	[Token(Token = "0x40013CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HVRRotationTracker leverRotation;

	[Token(Token = "0x40013CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform harpoonRope;

	[Token(Token = "0x40013CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float ropeDistance;

	[Token(Token = "0x40013D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ParticleSystem firingParticles;

	[Token(Token = "0x40013D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float RequiredLeverAngle;

	[Token(Token = "0x40013D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip firingClip;

	[Token(Token = "0x40013D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private HVRGrabbable levelGrabbable;

	[Token(Token = "0x40013D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private MonoBehaviour[] ownerOnlyScipts;

	[Token(Token = "0x40013D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform lineGrabStart;

	[Token(Token = "0x40013D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform lineGrabEnd;

	[Token(Token = "0x40013D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private HVRGrabbable ropeGrabbable;

	[Token(Token = "0x40013D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private HVRGrabbable invisGrabber;

	[Token(Token = "0x40013D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private float startSpeedMultiplier;

	[Token(Token = "0x40013DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private bool _activated;

	[Token(Token = "0x40013DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<HVRGrabbable> invisGrabberInstances;

	[Token(Token = "0x40013DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float _holdSpeed;

	[Token(Token = "0x6001670")]
	[Address(RVA = "0x1186290", Offset = "0x1186290", VA = "0x1186290")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001671")]
	[Address(RVA = "0x11863D8", Offset = "0x11863D8", VA = "0x11863D8", Slot = "41")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6001672")]
	[Address(RVA = "0x11864A4", Offset = "0x11864A4", VA = "0x11864A4", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x6001673")]
	[Address(RVA = "0x11865C4", Offset = "0x11865C4", VA = "0x11865C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001674")]
	[Address(RVA = "0x11867E0", Offset = "0x11867E0", VA = "0x11867E0")]
	private void InvisReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001675")]
	[Address(RVA = "0x1186880", Offset = "0x1186880", VA = "0x1186880")]
	private void RopeGrabbed(HVRGrabberBase hand, HVRGrabbable rope)
	{
	}

	[Token(Token = "0x6001676")]
	[Address(RVA = "0x1186C30", Offset = "0x1186C30", VA = "0x1186C30")]
	private Vector3 GetClosestPointOnFiniteLine(Vector3 point, Vector3 line_start, Vector3 line_end)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001677")]
	[Address(RVA = "0x1186DB4", Offset = "0x1186DB4", VA = "0x1186DB4")]
	private void LeverReleased(HVRGrabberBase hand, HVRGrabbable lever)
	{
	}

	[Token(Token = "0x6001678")]
	[Address(RVA = "0x1186E18", Offset = "0x1186E18", VA = "0x1186E18")]
	private void LeverGrabbed(HVRGrabberBase grabber, HVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x6001679")]
	[Address(RVA = "0x11863F4", Offset = "0x11863F4", VA = "0x11863F4")]
	private void SetLeverScripts()
	{
	}

	[Token(Token = "0x600167A")]
	[Address(RVA = "0x1186F48", Offset = "0x1186F48", VA = "0x1186F48")]
	private void Joined()
	{
	}

	[Token(Token = "0x600167B")]
	[Address(RVA = "0x1187030", Offset = "0x1187030", VA = "0x1187030")]
	private void Update()
	{
	}

	[Token(Token = "0x600167C")]
	[Address(RVA = "0x1187154", Offset = "0x1187154", VA = "0x1187154")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600167D")]
	[Address(RVA = "0x11874F4", Offset = "0x11874F4", VA = "0x11874F4")]
	[PunRPC]
	[ContextMenu("ActivateRope")]
	public void ActivateRopeRPC()
	{
	}

	[Token(Token = "0x600167E")]
	[Address(RVA = "0x11877A0", Offset = "0x11877A0", VA = "0x11877A0")]
	public RopeCannon()
	{
	}
}
[Token(Token = "0x20002FF")]
public class RotateConstantSpeed : MonoBehaviour
{
	[Token(Token = "0x2000300")]
	public enum Axis
	{
		[Token(Token = "0x40013E0")]
		X,
		[Token(Token = "0x40013E1")]
		Y,
		[Token(Token = "0x40013E2")]
		Z
	}

	[Token(Token = "0x40013DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Axis rotateAroundAxis;

	[Token(Token = "0x40013DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x600167F")]
	[Address(RVA = "0x1187838", Offset = "0x1187838", VA = "0x1187838")]
	private void Update()
	{
	}

	[Token(Token = "0x6001680")]
	[Address(RVA = "0x11879A4", Offset = "0x11879A4", VA = "0x11879A4")]
	public RotateConstantSpeed()
	{
	}
}
[Token(Token = "0x2000301")]
public class RotatorObject : MonoBehaviour, IInteractable
{
	[Token(Token = "0x2000302")]
	public delegate void OnRotatorReset();

	[Token(Token = "0x2000303")]
	public class RotatorMovingEvent : UnityEvent<float>
	{
		[Token(Token = "0x60016A4")]
		[Address(RVA = "0x118910C", Offset = "0x118910C", VA = "0x118910C")]
		public RotatorMovingEvent()
		{
		}
	}

	[Token(Token = "0x2000304")]
	public enum RotateAround
	{
		[Token(Token = "0x4001400")]
		X,
		[Token(Token = "0x4001401")]
		Y,
		[Token(Token = "0x4001402")]
		Z
	}

	[Token(Token = "0x2000305")]
	[CompilerGenerated]
	private sealed class <_WaitForPlayerController>d__40 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RotatorObject <>4__this;

		[Token(Token = "0x1700029D")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x1189288", Offset = "0x1189288", VA = "0x1189288", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700029E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016AA")]
			[Address(RVA = "0x11892D0", Offset = "0x11892D0", VA = "0x11892D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0x1189154", Offset = "0x1189154", VA = "0x1189154")]
		[DebuggerHidden]
		public <_WaitForPlayerController>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0x118917C", Offset = "0x118917C", VA = "0x118917C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0x1189180", Offset = "0x1189180", VA = "0x1189180", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0x1189290", Offset = "0x1189290", VA = "0x1189290", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000306")]
	[CompilerGenerated]
	private sealed class <_ReleaseObject>d__42 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RotatorObject <>4__this;

		[Token(Token = "0x1700029F")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x11893B8", Offset = "0x11893B8", VA = "0x11893B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016B0")]
			[Address(RVA = "0x1189400", Offset = "0x1189400", VA = "0x1189400", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0x118932C", Offset = "0x118932C", VA = "0x118932C")]
		[DebuggerHidden]
		public <_ReleaseObject>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0x1189354", Offset = "0x1189354", VA = "0x1189354", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0x1189358", Offset = "0x1189358", VA = "0x1189358", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0x11893C0", Offset = "0x11893C0", VA = "0x11893C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40013E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource crankLoop;

	[Token(Token = "0x40013E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource vibrationAS;

	[Token(Token = "0x40013E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RotateAround rotateAround;

	[Token(Token = "0x40013E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float resistTorgue;

	[Token(Token = "0x40013E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[UnityEngine.Tooltip("Minimum rotation in degrees that the rotator can turn. Use -Infinity to make rotating endless, 0 locks out at start")]
	private float minRotationAmount;

	[Token(Token = "0x40013E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[UnityEngine.Tooltip("Maximum rotation in degrees that the rotator can turn. Use Infinity to make rotating endless, 0 locks out at start")]
	[SerializeField]
	private float maxRotationAmount;

	[Token(Token = "0x40013E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float curAngle;

	[Token(Token = "0x40013EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private bool persistRotation;

	[Token(Token = "0x40013EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("SlowdownMultiplier, 1 does not slow down at all. 0 is instant")]
	private float persistentRotationSlowdownMultiplier;

	[Token(Token = "0x40013EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3[] lastEulerAngleVelocities;

	[Token(Token = "0x40013ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int currentIndex;

	[Token(Token = "0x40013EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float originalMaxRotationAmount;

	[Token(Token = "0x40013EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float originalMinRotationAmount;

	[Token(Token = "0x40013F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 lastFwd;

	[Token(Token = "0x40013F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private HVRGrabbable hvrGrabbable;

	[Token(Token = "0x40013F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Rigidbody interactableRigidbody;

	[Token(Token = "0x40013F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion originalLocalRotation;

	[Token(Token = "0x40013F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 originalLocalPosition;

	[Token(Token = "0x40013F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool allowGrabbing;

	[Token(Token = "0x40013F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public RotatorMovingEvent OnRotatorMovingUnityEvent;

	[Token(Token = "0x40013F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public RotatorMovingEvent OnAnotherUserRotatorMovingUnityEvent;

	[Token(Token = "0x40013F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public OnRotatorReset onRotatorReset;

	[Token(Token = "0x40013F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float crankLoopUseTime;

	[Token(Token = "0x40013FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool allowForceUngrab;

	[Token(Token = "0x40013FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
	private bool isFlatGrabbed;

	[Token(Token = "0x40013FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB6")]
	private bool inUse;

	[Token(Token = "0x40013FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private LocalizedString interactionText;

	[Token(Token = "0x40013FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private LocalizedString stopInteractingText;

	[Token(Token = "0x1700029B")]
	public float GetMinRotation
	{
		[Token(Token = "0x6001681")]
		[Address(RVA = "0x11879AC", Offset = "0x11879AC", VA = "0x11879AC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700029C")]
	public float GetMaxRotation
	{
		[Token(Token = "0x6001682")]
		[Address(RVA = "0x11879B4", Offset = "0x11879B4", VA = "0x11879B4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001683")]
	[Address(RVA = "0x11879BC", Offset = "0x11879BC", VA = "0x11879BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001684")]
	[Address(RVA = "0x1187CA4", Offset = "0x1187CA4", VA = "0x1187CA4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001685")]
	[Address(RVA = "0x1187D4C", Offset = "0x1187D4C", VA = "0x1187D4C")]
	private void RotatorGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001686")]
	[Address(RVA = "0x1187E38", Offset = "0x1187E38", VA = "0x1187E38")]
	public void RotatorFlatGrabbed()
	{
	}

	[Token(Token = "0x6001687")]
	[Address(RVA = "0x1187ED8", Offset = "0x1187ED8", VA = "0x1187ED8")]
	public void RotatorFlatReleased()
	{
	}

	[Token(Token = "0x6001688")]
	[Address(RVA = "0x1187C30", Offset = "0x1187C30", VA = "0x1187C30")]
	[IteratorStateMachine(typeof(<_WaitForPlayerController>d__40))]
	private IEnumerator<float> _WaitForPlayerController()
	{
		return null;
	}

	[Token(Token = "0x6001689")]
	[Address(RVA = "0x1187F74", Offset = "0x1187F74", VA = "0x1187F74")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x600168A")]
	[Address(RVA = "0x1187FDC", Offset = "0x1187FDC", VA = "0x1187FDC")]
	[IteratorStateMachine(typeof(<_ReleaseObject>d__42))]
	private IEnumerator<float> _ReleaseObject()
	{
		return null;
	}

	[Token(Token = "0x600168B")]
	[Address(RVA = "0x1188050", Offset = "0x1188050", VA = "0x1188050")]
	private void Start()
	{
	}

	[Token(Token = "0x600168C")]
	[Address(RVA = "0x1187BC8", Offset = "0x1187BC8", VA = "0x1187BC8")]
	public void GetLastFwd()
	{
	}

	[Token(Token = "0x600168D")]
	[Address(RVA = "0x1188070", Offset = "0x1188070", VA = "0x1188070")]
	public void ResetRotator()
	{
	}

	[Token(Token = "0x600168E")]
	[Address(RVA = "0x11880D4", Offset = "0x11880D4", VA = "0x11880D4")]
	public void SetRotatorToMax()
	{
	}

	[Token(Token = "0x600168F")]
	[Address(RVA = "0x11880E0", Offset = "0x11880E0", VA = "0x11880E0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001690")]
	[Address(RVA = "0x118881C", Offset = "0x118881C", VA = "0x118881C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001691")]
	[Address(RVA = "0x1188904", Offset = "0x1188904", VA = "0x1188904")]
	private void CalculateTotalRot()
	{
	}

	[Token(Token = "0x6001692")]
	[Address(RVA = "0x1188DBC", Offset = "0x1188DBC", VA = "0x1188DBC")]
	public void SetMinLimit(float newMin)
	{
	}

	[Token(Token = "0x6001693")]
	[Address(RVA = "0x1188DC4", Offset = "0x1188DC4", VA = "0x1188DC4")]
	public void SetMaxLimit(float newMax)
	{
	}

	[Token(Token = "0x6001694")]
	[Address(RVA = "0x1188DCC", Offset = "0x1188DCC", VA = "0x1188DCC")]
	public void ResetMaxLimit()
	{
	}

	[Token(Token = "0x6001695")]
	[Address(RVA = "0x1188DD8", Offset = "0x1188DD8", VA = "0x1188DD8")]
	public void ResetMinLimit()
	{
	}

	[Token(Token = "0x6001696")]
	[Address(RVA = "0x1188DE4", Offset = "0x1188DE4", VA = "0x1188DE4")]
	public float GetOriginalMaxLimit()
	{
		return default(float);
	}

	[Token(Token = "0x6001697")]
	[Address(RVA = "0x1188DEC", Offset = "0x1188DEC", VA = "0x1188DEC")]
	public float GetOriginalMinLimit()
	{
		return default(float);
	}

	[Token(Token = "0x6001698")]
	[Address(RVA = "0x1188DF4", Offset = "0x1188DF4", VA = "0x1188DF4")]
	public HVRGrabbable GetMyGrabbable()
	{
		return null;
	}

	[Token(Token = "0x6001699")]
	[Address(RVA = "0x1188DFC", Offset = "0x1188DFC", VA = "0x1188DFC")]
	public void CheckCanRotate()
	{
	}

	[Token(Token = "0x600169A")]
	[Address(RVA = "0x1188E8C", Offset = "0x1188E8C", VA = "0x1188E8C")]
	public void ForceUngrab()
	{
	}

	[Token(Token = "0x600169B")]
	[Address(RVA = "0x1188EBC", Offset = "0x1188EBC", VA = "0x1188EBC")]
	public void SetAllowForceUngrab(bool allowForceUngrab)
	{
	}

	[Token(Token = "0x600169C")]
	[Address(RVA = "0x1188EC8", Offset = "0x1188EC8", VA = "0x1188EC8", Slot = "4")]
	public void Interact()
	{
	}

	[Token(Token = "0x600169D")]
	[Address(RVA = "0x1188ECC", Offset = "0x1188ECC", VA = "0x1188ECC", Slot = "5")]
	public LocalizedString GetInteractionText()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x600169E")]
	[Address(RVA = "0x1188EF4", Offset = "0x1188EF4", VA = "0x1188EF4", Slot = "6")]
	public GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x600169F")]
	[Address(RVA = "0x1188EFC", Offset = "0x1188EFC", VA = "0x1188EFC")]
	public RotatorObject()
	{
	}
}
[Token(Token = "0x2000307")]
public class SafeDial : MonoBehaviour
{
	[Token(Token = "0x4001409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DialSteppedEvent DialStepChanged;

	[Token(Token = "0x400140A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DialTurnedEvent DialTurned;

	[Token(Token = "0x400140B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform RotationTarget;

	[Token(Token = "0x400140C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int Steps;

	[Token(Token = "0x400140D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool SnapTarget;

	[Token(Token = "0x400140E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool ClampMaxAngle;

	[Token(Token = "0x400140F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float MaximumAngle;

	[Token(Token = "0x4001410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip AudioClip;

	[Token(Token = "0x4001411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float Deadzone;

	[Token(Token = "0x4001412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 LocalRotationAxis;

	[Token(Token = "0x4001413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 LocalAxisStart;

	[Token(Token = "0x4001414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool DiscardAngle;

	[Token(Token = "0x4001415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float StepSize;

	[Token(Token = "0x4001416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float _previousAngle;

	[Token(Token = "0x4001417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 _originalVector;

	[Token(Token = "0x4001418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Rigidbody _rigidBody;

	[Token(Token = "0x4001419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Rigidbody _targetRigidBody;

	[Token(Token = "0x400141A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float _previousAngleFromStart;

	[Token(Token = "0x170002A1")]
	public int Step
	{
		[Token(Token = "0x60016B1")]
		[Address(RVA = "0x118945C", Offset = "0x118945C", VA = "0x118945C")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60016B2")]
		[Address(RVA = "0x1189464", Offset = "0x1189464", VA = "0x1189464")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x170002A2")]
	public HVRGrabbable Grabbable
	{
		[Token(Token = "0x60016B3")]
		[Address(RVA = "0x118946C", Offset = "0x118946C", VA = "0x118946C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60016B4")]
		[Address(RVA = "0x1189474", Offset = "0x1189474", VA = "0x1189474")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002A3")]
	public HVRHandGrabber PrimaryGrabber
	{
		[Token(Token = "0x60016B5")]
		[Address(RVA = "0x118947C", Offset = "0x118947C", VA = "0x118947C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60016B6")]
		[Address(RVA = "0x1189484", Offset = "0x1189484", VA = "0x1189484")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60016B7")]
	[Address(RVA = "0x118948C", Offset = "0x118948C", VA = "0x118948C")]
	private void Start()
	{
	}

	[Token(Token = "0x60016B8")]
	[Address(RVA = "0x118986C", Offset = "0x118986C", VA = "0x118986C")]
	protected void OnGrabbed(HVRGrabberBase grabber, HVRGrabbable hvrGrabbable)
	{
	}

	[Token(Token = "0x60016B9")]
	[Address(RVA = "0x11899A4", Offset = "0x11899A4", VA = "0x11899A4")]
	protected void OnReleased(HVRGrabberBase grabber, HVRGrabbable hvrGrabbable)
	{
	}

	[Token(Token = "0x60016BA")]
	[Address(RVA = "0x1189A90", Offset = "0x1189A90", VA = "0x1189A90")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60016BB")]
	[Address(RVA = "0x1189A98", Offset = "0x1189A98", VA = "0x1189A98")]
	private void CheckForRotation(bool force = false)
	{
	}

	[Token(Token = "0x60016BC")]
	[Address(RVA = "0x1189AF4", Offset = "0x1189AF4", VA = "0x1189AF4", Slot = "4")]
	protected virtual void OnStepChanged(int step, bool raiseEvents)
	{
	}

	[Token(Token = "0x60016BD")]
	[Address(RVA = "0x1189C18", Offset = "0x1189C18", VA = "0x1189C18", Slot = "5")]
	protected virtual void OnAngleChanged(float angle, float delta, float percent, bool raiseEvents)
	{
	}

	[Token(Token = "0x60016BE")]
	[Address(RVA = "0x1189CAC", Offset = "0x1189CAC", VA = "0x1189CAC")]
	public SafeDial()
	{
	}
}
[Token(Token = "0x2000308")]
[RequireComponent(typeof(SafeRoll))]
public class SafeLockDial : MonoBehaviour
{
	[Token(Token = "0x2000309")]
	[CompilerGenerated]
	private sealed class <Setup>d__13 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SafeLockDial <>4__this;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SafeRiddle safe;

		[Token(Token = "0x170002A4")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60016C9")]
			[Address(RVA = "0x118ADAC", Offset = "0x118ADAC", VA = "0x118ADAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016CB")]
			[Address(RVA = "0x118ADF4", Offset = "0x118ADF4", VA = "0x118ADF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x1189F64", Offset = "0x1189F64", VA = "0x1189F64")]
		[DebuggerHidden]
		public <Setup>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x118A640", Offset = "0x118A640", VA = "0x118A640", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0x118A644", Offset = "0x118A644", VA = "0x118A644", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0x118ADB4", Offset = "0x118ADB4", VA = "0x118ADB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400141E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text[] dialLetters;

	[Token(Token = "0x400141F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int dialID;

	[Token(Token = "0x4001420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int frontLetterID;

	[Token(Token = "0x4001421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SafeRiddle safe;

	[Token(Token = "0x4001422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource correctLetterAudioSource;

	[Token(Token = "0x4001423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SafeRoll mySafeRoll;

	[Token(Token = "0x4001424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 originalLocalPosition;

	[Token(Token = "0x4001425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 originalConnectedAnchor;

	[Token(Token = "0x4001426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Quaternion originalLocalRotation;

	[Token(Token = "0x4001427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private HingeJoint myHingeJoint;

	[Token(Token = "0x4001428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool updateOthers;

	[Token(Token = "0x4001429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject selectorCollider;

	[Token(Token = "0x60016BF")]
	[Address(RVA = "0x1189D74", Offset = "0x1189D74", VA = "0x1189D74")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016C0")]
	[Address(RVA = "0x1189ED4", Offset = "0x1189ED4", VA = "0x1189ED4")]
	[IteratorStateMachine(typeof(<Setup>d__13))]
	public IEnumerator<float> Setup(SafeRiddle safe)
	{
		return null;
	}

	[Token(Token = "0x60016C1")]
	[Address(RVA = "0x1189F8C", Offset = "0x1189F8C", VA = "0x1189F8C")]
	public void OnDialRotated(int Face)
	{
	}

	[Token(Token = "0x60016C2")]
	[Address(RVA = "0x118A31C", Offset = "0x118A31C", VA = "0x118A31C")]
	private void Update()
	{
	}

	[Token(Token = "0x60016C3")]
	[Address(RVA = "0x118A348", Offset = "0x118A348", VA = "0x118A348")]
	public void ForceRotateDial(int frontFace)
	{
	}

	[Token(Token = "0x60016C4")]
	[Address(RVA = "0x118A584", Offset = "0x118A584", VA = "0x118A584")]
	public int GetFrontLetterID()
	{
		return default(int);
	}

	[Token(Token = "0x60016C5")]
	[Address(RVA = "0x118A58C", Offset = "0x118A58C", VA = "0x118A58C")]
	public SafeLockDial()
	{
	}
}
[Token(Token = "0x200030A")]
public class SafeRiddle : MonoBehaviourPunCallbacks, IPoolable, IEventSystemHandler, IDamageable, IPunInstantiateMagicCallback
{
	[Token(Token = "0x200030B")]
	[CompilerGenerated]
	private sealed class <_RandomizeRiddle>d__53 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SafeRiddle <>4__this;

		[Token(Token = "0x170002A8")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60016EE")]
			[Address(RVA = "0x118D1A4", Offset = "0x118D1A4", VA = "0x118D1A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016F0")]
			[Address(RVA = "0x118D1EC", Offset = "0x118D1EC", VA = "0x118D1EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0x118AFF4", Offset = "0x118AFF4", VA = "0x118AFF4")]
		[DebuggerHidden]
		public <_RandomizeRiddle>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0x118CF4C", Offset = "0x118CF4C", VA = "0x118CF4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x118CF50", Offset = "0x118CF50", VA = "0x118CF50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0x118D1AC", Offset = "0x118D1AC", VA = "0x118D1AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200030C")]
	[CompilerGenerated]
	private sealed class <SpawnLootsCoroutine>d__67 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SafeRiddle <>4__this;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <newLootsToSpawn>5__2;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int <i>5__3;

		[Token(Token = "0x170002AA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60016F4")]
			[Address(RVA = "0x118DDD8", Offset = "0x118DDD8", VA = "0x118DDD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016F6")]
			[Address(RVA = "0x118DE20", Offset = "0x118DE20", VA = "0x118DE20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0x118C394", Offset = "0x118C394", VA = "0x118C394")]
		[DebuggerHidden]
		public <SpawnLootsCoroutine>d__67(int <>1__state)
		{
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x118D248", Offset = "0x118D248", VA = "0x118D248", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0x118D24C", Offset = "0x118D24C", VA = "0x118D24C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0x118DDE0", Offset = "0x118DDE0", VA = "0x118DDE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200030D")]
	[CompilerGenerated]
	private sealed class <OpeningEffects>d__69 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SafeRiddle <>4__this;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <targetIntensity>5__2;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <duration>5__3;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timeSpent>5__4;

		[Token(Token = "0x170002AC")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60016FA")]
			[Address(RVA = "0x118E1DC", Offset = "0x118E1DC", VA = "0x118E1DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016FC")]
			[Address(RVA = "0x118E224", Offset = "0x118E224", VA = "0x118E224", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0x118C740", Offset = "0x118C740", VA = "0x118C740")]
		[DebuggerHidden]
		public <OpeningEffects>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x118DE7C", Offset = "0x118DE7C", VA = "0x118DE7C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0x118DE80", Offset = "0x118DE80", VA = "0x118DE80", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x118E1E4", Offset = "0x118E1E4", VA = "0x118E1E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200030E")]
	[CompilerGenerated]
	private sealed class <PushLoot>d__70 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody lootRb;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SafeRiddle <>4__this;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <remainingTime>5__2;

		[Token(Token = "0x170002AE")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001700")]
			[Address(RVA = "0x118E388", Offset = "0x118E388", VA = "0x118E388", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001702")]
			[Address(RVA = "0x118E3D0", Offset = "0x118E3D0", VA = "0x118E3D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0x118C7F8", Offset = "0x118C7F8", VA = "0x118C7F8")]
		[DebuggerHidden]
		public <PushLoot>d__70(int <>1__state)
		{
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0x118E280", Offset = "0x118E280", VA = "0x118E280", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0x118E284", Offset = "0x118E284", VA = "0x118E284", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0x118E390", Offset = "0x118E390", VA = "0x118E390", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400142E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public System.Random seededRandom;

	[Token(Token = "0x400142F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool spawnRelics;

	[Token(Token = "0x4001430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip[] relicBreakingSounds;

	[Token(Token = "0x4001431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform[] lootSpawnPoints;

	[Token(Token = "0x4001432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Animator safeAnimator;

	[Token(Token = "0x4001433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RiddleScriptable[] Riddles;

	[Token(Token = "0x4001434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SafeLockDial[] Dials;

	[Token(Token = "0x4001435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private LootSpawnAndDespawnManager.LootType[] gemLoots;

	[Token(Token = "0x4001436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform ForcePosition;

	[Token(Token = "0x4001437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private ParticleSystem dustFX;

	[Token(Token = "0x4001438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Light[] openingLights;

	[Token(Token = "0x4001439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private int goldTrashLootAmount;

	[Token(Token = "0x400143A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private float goldPushSpeed;

	[Token(Token = "0x400143B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AudioClip openingClip;

	[Token(Token = "0x400143C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private MyClue myClue;

	[Token(Token = "0x400143D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameObject comicPrefab;

	[Token(Token = "0x400143E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Material regularBodyMaterial;

	[Token(Token = "0x400143F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Material goldBodyMaterial;

	[Token(Token = "0x4001440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Material regularDoorMaterial;

	[Token(Token = "0x4001441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Material goldDoorMaterial;

	[Token(Token = "0x4001442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Renderer[] bodyRenderers;

	[Token(Token = "0x4001443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Renderer[] doorRenderers;

	[Token(Token = "0x4001444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private ParticleSystem goldSparkles;

	[Token(Token = "0x4001445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private GameObject lightCone;

	[Token(Token = "0x4001446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public bool motherlodeSafe;

	[Token(Token = "0x4001447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private int randomSeed;

	[Token(Token = "0x4001448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private CustomLockedDoor lockedDoor;

	[Token(Token = "0x4001449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HVRGrabbable doorGrabbable;

	[Token(Token = "0x400144A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private string currentPass;

	[Token(Token = "0x400144B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int chosenRiddle;

	[Token(Token = "0x400144C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private bool allowOpening;

	[Token(Token = "0x400144D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
	private bool isOpen;

	[Token(Token = "0x400144E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int[] currentNumbers;

	[Token(Token = "0x400144F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private int minLootsToSpawn;

	[Token(Token = "0x4001450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private int maxLootsToSpawn;

	[Token(Token = "0x4001451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private char[] CharsSlot1;

	[Token(Token = "0x4001452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private char[] CharsSlot2;

	[Token(Token = "0x4001453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private char[] CharsSlot3;

	[Token(Token = "0x4001454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private char[] CharsSlot4;

	[Token(Token = "0x4001455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private char[] CharsSlot5;

	[Token(Token = "0x4001456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private char[] CharsSlot6;

	[Token(Token = "0x4001457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	[Space]
	[Header("Override spawn stuff")]
	private bool overrideSpawnValues;

	[Token(Token = "0x4001458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private GameObject[] overriddenSpawnObjets;

	[Token(Token = "0x4001459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[Space]
	[Header("Ending specific variables, used for spawning ending clues")]
	[SerializeField]
	private bool isEndingSafe;

	[Token(Token = "0x400145A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	[SerializeField]
	private int endingIndex;

	[Token(Token = "0x400145B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private int endingPartIndex;

	[Token(Token = "0x400145C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	private GameObject endingCluePrefab;

	[Token(Token = "0x170002A6")]
	public RiddleScriptable CurrentRiddle
	{
		[Token(Token = "0x60016CC")]
		[Address(RVA = "0x118AE50", Offset = "0x118AE50", VA = "0x118AE50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002A7")]
	private string passKey
	{
		[Token(Token = "0x60016CD")]
		[Address(RVA = "0x118AE84", Offset = "0x118AE84", VA = "0x118AE84")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60016CE")]
	[Address(RVA = "0x118AC9C", Offset = "0x118AC9C", VA = "0x118AC9C")]
	public char[] Slot(int slotID)
	{
		return null;
	}

	[Token(Token = "0x60016CF")]
	[Address(RVA = "0x118AEC0", Offset = "0x118AEC0", VA = "0x118AEC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016D0")]
	[Address(RVA = "0x118AF80", Offset = "0x118AF80", VA = "0x118AF80")]
	[IteratorStateMachine(typeof(<_RandomizeRiddle>d__53))]
	private IEnumerator<float> _RandomizeRiddle()
	{
		return null;
	}

	[Token(Token = "0x60016D1")]
	[Address(RVA = "0x118B01C", Offset = "0x118B01C", VA = "0x118B01C", Slot = "54")]
	public void Acquire()
	{
	}

	[Token(Token = "0x60016D2")]
	[Address(RVA = "0x118B100", Offset = "0x118B100", VA = "0x118B100")]
	public void ManualSetup(int manuallyChosenRiddle)
	{
	}

	[Token(Token = "0x60016D3")]
	[Address(RVA = "0x118B2D4", Offset = "0x118B2D4", VA = "0x118B2D4")]
	private void SpawnClue()
	{
	}

	[Token(Token = "0x60016D4")]
	[Address(RVA = "0x118B39C", Offset = "0x118B39C", VA = "0x118B39C", Slot = "55")]
	public void Release()
	{
	}

	[Token(Token = "0x60016D5")]
	[Address(RVA = "0x118B398", Offset = "0x118B398", VA = "0x118B398")]
	[PunRPC]
	private void SetRiddle(int number, int seed)
	{
	}

	[Token(Token = "0x60016D6")]
	[Address(RVA = "0x118B9A8", Offset = "0x118B9A8", VA = "0x118B9A8")]
	private void SetupRiddle(int number, int seed)
	{
	}

	[Token(Token = "0x60016D7")]
	[Address(RVA = "0x118BE08", Offset = "0x118BE08", VA = "0x118BE08")]
	private void RebuildText()
	{
	}

	[Token(Token = "0x60016D8")]
	[Address(RVA = "0x118A134", Offset = "0x118A134", VA = "0x118A134")]
	public void OnDialRotated(int discID, int frontFace, bool updateOthers)
	{
	}

	[Token(Token = "0x60016D9")]
	[Address(RVA = "0x118C090", Offset = "0x118C090", VA = "0x118C090")]
	[PunRPC]
	private void RotateDialRPC(int discID, int frontFace)
	{
	}

	[Token(Token = "0x60016DA")]
	[Address(RVA = "0x118C0C8", Offset = "0x118C0C8", VA = "0x118C0C8")]
	public void DiscPressed(int discId)
	{
	}

	[Token(Token = "0x60016DB")]
	[Address(RVA = "0x118C038", Offset = "0x118C038", VA = "0x118C038")]
	private void CheckPassKey()
	{
	}

	[Token(Token = "0x60016DC")]
	[Address(RVA = "0x118C114", Offset = "0x118C114", VA = "0x118C114")]
	public void TryOpen()
	{
	}

	[Token(Token = "0x60016DD")]
	[Address(RVA = "0x118C238", Offset = "0x118C238", VA = "0x118C238")]
	[PunRPC]
	private void SpawnLootsRPC()
	{
	}

	[Token(Token = "0x60016DE")]
	[Address(RVA = "0x118C320", Offset = "0x118C320", VA = "0x118C320")]
	[IteratorStateMachine(typeof(<SpawnLootsCoroutine>d__67))]
	private IEnumerator<float> SpawnLootsCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60016DF")]
	[Address(RVA = "0x118C3BC", Offset = "0x118C3BC", VA = "0x118C3BC")]
	private void SpawnMotherlodeSafeProp()
	{
	}

	[Token(Token = "0x60016E0")]
	[Address(RVA = "0x118C6CC", Offset = "0x118C6CC", VA = "0x118C6CC")]
	[IteratorStateMachine(typeof(<OpeningEffects>d__69))]
	private IEnumerator<float> OpeningEffects()
	{
		return null;
	}

	[Token(Token = "0x60016E1")]
	[Address(RVA = "0x118C768", Offset = "0x118C768", VA = "0x118C768")]
	[IteratorStateMachine(typeof(<PushLoot>d__70))]
	private IEnumerator<float> PushLoot(Rigidbody lootRb)
	{
		return null;
	}

	[Token(Token = "0x60016E2")]
	[Address(RVA = "0x118C820", Offset = "0x118C820", VA = "0x118C820")]
	private void SwingDoorOpen()
	{
	}

	[Token(Token = "0x60016E3")]
	[Address(RVA = "0x118A130", Offset = "0x118A130", VA = "0x118A130")]
	public string GetCorrectPass()
	{
		return null;
	}

	[Token(Token = "0x60016E4")]
	[Address(RVA = "0x118C8FC", Offset = "0x118C8FC", VA = "0x118C8FC", Slot = "56")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x60016E5")]
	[Address(RVA = "0x118C93C", Offset = "0x118C93C", VA = "0x118C93C")]
	public void SetMotherlode(bool status)
	{
	}

	[Token(Token = "0x60016E6")]
	[Address(RVA = "0x118B55C", Offset = "0x118B55C", VA = "0x118B55C")]
	[PunRPC]
	private void SetGoldMaterialsRPC(bool status)
	{
	}

	[Token(Token = "0x60016E7")]
	[Address(RVA = "0x118CAA8", Offset = "0x118CAA8", VA = "0x118CAA8", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60016E8")]
	[Address(RVA = "0x118CC60", Offset = "0x118CC60", VA = "0x118CC60", Slot = "57")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60016E9")]
	[Address(RVA = "0x118CDD0", Offset = "0x118CDD0", VA = "0x118CDD0")]
	private void Update()
	{
	}

	[Token(Token = "0x60016EA")]
	[Address(RVA = "0x118CEC8", Offset = "0x118CEC8", VA = "0x118CEC8")]
	public SafeRiddle()
	{
	}
}
[Token(Token = "0x200030F")]
internal static class RandomExtensions
{
	[Token(Token = "0x6001703")]
	public static void Shuffle<T>(this System.Random rng, T[] array)
	{
	}
}
[Token(Token = "0x2000310")]
public class SafeRoll : MonoBehaviour
{
	[Token(Token = "0x4001470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DialSteppedEvent DialStepChanged;

	[Token(Token = "0x4001471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip AudioClip;

	[Token(Token = "0x4001472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MinimumSpeed;

	[Token(Token = "0x4001473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody _rigidBody;

	[Token(Token = "0x6001704")]
	[Address(RVA = "0x118E42C", Offset = "0x118E42C", VA = "0x118E42C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001705")]
	[Address(RVA = "0x118ABE4", Offset = "0x118ABE4", VA = "0x118ABE4")]
	internal void Disable()
	{
	}

	[Token(Token = "0x6001706")]
	[Address(RVA = "0x118E4D4", Offset = "0x118E4D4", VA = "0x118E4D4", Slot = "4")]
	public virtual void OnStepChanged(int step, bool raiseEvents)
	{
	}

	[Token(Token = "0x6001707")]
	[Address(RVA = "0x118ACF4", Offset = "0x118ACF4", VA = "0x118ACF4")]
	internal void Enable()
	{
	}

	[Token(Token = "0x6001708")]
	[Address(RVA = "0x118E73C", Offset = "0x118E73C", VA = "0x118E73C")]
	public SafeRoll()
	{
	}
}
[Token(Token = "0x2000311")]
[CreateAssetMenu(fileName = "AudioClip", menuName = "ScriptableObjects/SoundMaterial", order = 2)]
public class SoundMaterialScriptableObject : ScriptableObject
{
	[Token(Token = "0x4001474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] collisionClips;

	[Token(Token = "0x4001475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] bigCollisionClips;

	[Token(Token = "0x4001476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] breakingClips;

	[Token(Token = "0x4001477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MaterialType materialType;

	[Token(Token = "0x4001478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PhysicMaterial physicMaterial;

	[Token(Token = "0x6001709")]
	[Address(RVA = "0x118E7BC", Offset = "0x118E7BC", VA = "0x118E7BC")]
	public SoundMaterialScriptableObject()
	{
	}
}
[Token(Token = "0x2000312")]
public class StandingRadio : MonoBehaviourPun
{
	[Token(Token = "0x2000313")]
	[CompilerGenerated]
	private sealed class <WindUp>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StandingRadio <>4__this;

		[Token(Token = "0x170002B0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001721")]
			[Address(RVA = "0x118F7A8", Offset = "0x118F7A8", VA = "0x118F7A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001723")]
			[Address(RVA = "0x118F7F0", Offset = "0x118F7F0", VA = "0x118F7F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0x118EEDC", Offset = "0x118EEDC", VA = "0x118EEDC")]
		[DebuggerHidden]
		public <WindUp>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0x118F674", Offset = "0x118F674", VA = "0x118F674", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0x118F678", Offset = "0x118F678", VA = "0x118F678", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0x118F7B0", Offset = "0x118F7B0", VA = "0x118F7B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000314")]
	[CompilerGenerated]
	private sealed class <SongCoroutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StandingRadio <>4__this;

		[Token(Token = "0x170002B2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001727")]
			[Address(RVA = "0x118F978", Offset = "0x118F978", VA = "0x118F978", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001729")]
			[Address(RVA = "0x118F9C0", Offset = "0x118F9C0", VA = "0x118F9C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0x118F014", Offset = "0x118F014", VA = "0x118F014")]
		[DebuggerHidden]
		public <SongCoroutine>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0x118F7F8", Offset = "0x118F7F8", VA = "0x118F7F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x118F7FC", Offset = "0x118F7FC", VA = "0x118F7FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0x118F980", Offset = "0x118F980", VA = "0x118F980", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Catalog")]
	[SerializeField]
	private AudioClip[] availableSongs;

	[Token(Token = "0x400147A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Jukebox Settings")]
	[UnityEngine.Tooltip("What happens when a players uses an elevator?")]
	[SerializeField]
	private JukeboxElevatorAction onElevatorUsage;

	[Token(Token = "0x400147B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("How much to turn the crank to start")]
	[Range(100f, 600f)]
	[SerializeField]
	private float requiredTurnAmount;

	[Token(Token = "0x400147C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("How hard to hit to stop the music")]
	[Range(5f, 10f)]
	[SerializeField]
	private float tiltForceAmount;

	[Token(Token = "0x400147D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Header("Light Settings")]
	private Light light;

	[Token(Token = "0x400147E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float minLightIntensity;

	[Token(Token = "0x400147F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float maxLightIntensity;

	[Token(Token = "0x4001480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float lightFrequency;

	[Token(Token = "0x4001481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float lightMagnitude;

	[Token(Token = "0x4001482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("References")]
	[SerializeField]
	private RotatorObject crank;

	[Token(Token = "0x4001483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource crankAudioS;

	[Token(Token = "0x4001484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioSource speakers;

	[Token(Token = "0x4001485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioSource mechanicalSoundSource;

	[Token(Token = "0x4001486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4001487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private new PhotonView photonView;

	[Token(Token = "0x4001488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float originalLightFrequency;

	[Token(Token = "0x4001489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float value;

	[Token(Token = "0x400148A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool windingUp;

	[Token(Token = "0x400148B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	private bool playing;

	[Token(Token = "0x400148C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int lastSong;

	[Token(Token = "0x400148D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float velocity;

	[Token(Token = "0x600170A")]
	[Address(RVA = "0x118E7C4", Offset = "0x118E7C4", VA = "0x118E7C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600170B")]
	[Address(RVA = "0x118E81C", Offset = "0x118E81C", VA = "0x118E81C")]
	private void Start()
	{
	}

	[Token(Token = "0x600170C")]
	[Address(RVA = "0x118E9F8", Offset = "0x118E9F8", VA = "0x118E9F8")]
	private void Update()
	{
	}

	[Token(Token = "0x600170D")]
	[Address(RVA = "0x118EA5C", Offset = "0x118EA5C", VA = "0x118EA5C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600170E")]
	[Address(RVA = "0x118ECF0", Offset = "0x118ECF0", VA = "0x118ECF0")]
	private void CrankTurning(float rotatorValue)
	{
	}

	[Token(Token = "0x600170F")]
	[Address(RVA = "0x118EE00", Offset = "0x118EE00", VA = "0x118EE00")]
	private void LockCrank()
	{
	}

	[Token(Token = "0x6001710")]
	[Address(RVA = "0x118EE34", Offset = "0x118EE34", VA = "0x118EE34")]
	private void UnlockCrank()
	{
	}

	[Token(Token = "0x6001711")]
	[Address(RVA = "0x118EE68", Offset = "0x118EE68", VA = "0x118EE68")]
	[IteratorStateMachine(typeof(<WindUp>d__28))]
	private IEnumerator WindUp()
	{
		return null;
	}

	[Token(Token = "0x6001712")]
	[Address(RVA = "0x118EF04", Offset = "0x118EF04", VA = "0x118EF04")]
	private void PlaySong()
	{
	}

	[Token(Token = "0x6001713")]
	[Address(RVA = "0x118EFA0", Offset = "0x118EFA0", VA = "0x118EFA0")]
	[IteratorStateMachine(typeof(<SongCoroutine>d__30))]
	private IEnumerator SongCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001714")]
	[Address(RVA = "0x118F03C", Offset = "0x118F03C", VA = "0x118F03C")]
	private AudioClip RandomSong()
	{
		return null;
	}

	[Token(Token = "0x6001715")]
	[Address(RVA = "0x118EBE8", Offset = "0x118EBE8", VA = "0x118EBE8")]
	private void SongFinished()
	{
	}

	[Token(Token = "0x6001716")]
	[Address(RVA = "0x118F19C", Offset = "0x118F19C", VA = "0x118F19C")]
	private void StopSong()
	{
	}

	[Token(Token = "0x6001717")]
	[Address(RVA = "0x118EF84", Offset = "0x118EF84", VA = "0x118EF84")]
	private void ChangeLightColor(UnityEngine.Color color)
	{
	}

	[Token(Token = "0x6001718")]
	[Address(RVA = "0x118F234", Offset = "0x118F234", VA = "0x118F234")]
	private void StopMusicAndDestroy()
	{
	}

	[Token(Token = "0x6001719")]
	[Address(RVA = "0x118F3B4", Offset = "0x118F3B4", VA = "0x118F3B4")]
	private void ElevatorOnElevatorUsage()
	{
	}

	[Token(Token = "0x600171A")]
	[Address(RVA = "0x118F414", Offset = "0x118F414", VA = "0x118F414")]
	[PunRPC]
	private void PlaySongRPC(int songIndex)
	{
	}

	[Token(Token = "0x600171B")]
	[Address(RVA = "0x118F538", Offset = "0x118F538", VA = "0x118F538")]
	[PunRPC]
	private void StopRPC()
	{
	}

	[Token(Token = "0x600171C")]
	[Address(RVA = "0x118F5BC", Offset = "0x118F5BC", VA = "0x118F5BC")]
	[PunRPC]
	private void LockCrankRPC()
	{
	}

	[Token(Token = "0x600171D")]
	[Address(RVA = "0x118F660", Offset = "0x118F660", VA = "0x118F660")]
	public StandingRadio()
	{
	}
}
[Token(Token = "0x2000315")]
public enum JukeboxElevatorAction
{
	[Token(Token = "0x4001495")]
	Destroy,
	[Token(Token = "0x4001496")]
	StopMusic
}
[Token(Token = "0x2000316")]
public class SubtitleHolder : MonoBehaviour
{
	[Token(Token = "0x2000317")]
	[CompilerGenerated]
	private sealed class <DelayedSetup>d__36 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SubtitleHolder <>4__this;

		[Token(Token = "0x170002B4")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600173F")]
			[Address(RVA = "0x1190CD0", Offset = "0x1190CD0", VA = "0x1190CD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001741")]
			[Address(RVA = "0x1190D18", Offset = "0x1190D18", VA = "0x1190D18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0x1190814", Offset = "0x1190814", VA = "0x1190814")]
		[DebuggerHidden]
		public <DelayedSetup>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0x1190BE0", Offset = "0x1190BE0", VA = "0x1190BE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0x1190BE4", Offset = "0x1190BE4", VA = "0x1190BE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x1190CD8", Offset = "0x1190CD8", VA = "0x1190CD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float rotationOffset;

	[Token(Token = "0x4001498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float castDistance;

	[Token(Token = "0x4001499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float minimumDistance;

	[Token(Token = "0x400149A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEngine.UI.Image backgroundImage;

	[Token(Token = "0x400149B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Canvas canvas;

	[Token(Token = "0x400149C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public SubtitleLine subtitleLine1;

	[Token(Token = "0x400149D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public SubtitleLine subtitleLine2;

	[Token(Token = "0x400149E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform scalerTransform;

	[Token(Token = "0x400149F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform moverTransform;

	[Token(Token = "0x40014A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform subtitleTransform;

	[Token(Token = "0x40014A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private LayerMask castLayers;

	[Token(Token = "0x40014A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private TransformFollow subtitleASWFixer;

	[Token(Token = "0x40014A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float velocity;

	[Token(Token = "0x40014A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float rotateTime;

	[Token(Token = "0x40014A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool settedUp;

	[Token(Token = "0x40014A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool subtitleActivated;

	[Token(Token = "0x40014A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	private bool line1HasReset;

	[Token(Token = "0x40014A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
	private bool line2HasReset;

	[Token(Token = "0x40014A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 originalCanvasScale;

	[Token(Token = "0x40014AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 modifiedCanvasScale;

	[Token(Token = "0x40014AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float targetDistance;

	[Token(Token = "0x40014AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float activeDistance;

	[Token(Token = "0x40014AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float smoothVel;

	[Token(Token = "0x40014AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform[] childTFs;

	[Token(Token = "0x40014AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool onTopLayer;

	[Token(Token = "0x40014B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	private bool castForward2;

	[Token(Token = "0x600172A")]
	[Address(RVA = "0x118F9C8", Offset = "0x118F9C8", VA = "0x118F9C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600172B")]
	[Address(RVA = "0x118FAD8", Offset = "0x118FAD8", VA = "0x118FAD8")]
	private void Start()
	{
	}

	[Token(Token = "0x600172C")]
	[Address(RVA = "0x118FC70", Offset = "0x118FC70", VA = "0x118FC70")]
	private void SetLayerOnTop()
	{
	}

	[Token(Token = "0x600172D")]
	[Address(RVA = "0x118FCEC", Offset = "0x118FCEC", VA = "0x118FCEC")]
	private void SetLayerToUI()
	{
	}

	[Token(Token = "0x600172E")]
	[Address(RVA = "0x118FD64", Offset = "0x118FD64", VA = "0x118FD64")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600172F")]
	[Address(RVA = "0x118FD68", Offset = "0x118FD68", VA = "0x118FD68")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001730")]
	[Address(RVA = "0x1190534", Offset = "0x1190534", VA = "0x1190534")]
	public void SetCastForward(bool newCastForward)
	{
	}

	[Token(Token = "0x6001731")]
	[Address(RVA = "0x1190540", Offset = "0x1190540", VA = "0x1190540")]
	public void ActivateSubtitleHolder()
	{
	}

	[Token(Token = "0x6001732")]
	[Address(RVA = "0x11905F0", Offset = "0x11905F0", VA = "0x11905F0")]
	public void HideSubtitleHolder()
	{
	}

	[Token(Token = "0x6001733")]
	[Address(RVA = "0x11906A0", Offset = "0x11906A0", VA = "0x11906A0")]
	public void Setup(bool local)
	{
	}

	[Token(Token = "0x6001734")]
	[Address(RVA = "0x11907A0", Offset = "0x11907A0", VA = "0x11907A0")]
	[IteratorStateMachine(typeof(<DelayedSetup>d__36))]
	private IEnumerator<float> DelayedSetup()
	{
		return null;
	}

	[Token(Token = "0x6001735")]
	[Address(RVA = "0x119083C", Offset = "0x119083C", VA = "0x119083C")]
	private void Subtitleline1ResetCheck()
	{
	}

	[Token(Token = "0x6001736")]
	[Address(RVA = "0x1190A74", Offset = "0x1190A74", VA = "0x1190A74")]
	private void Subtitleline2ResetCheck()
	{
	}

	[Token(Token = "0x6001737")]
	[Address(RVA = "0x1190A8C", Offset = "0x1190A8C", VA = "0x1190A8C")]
	private void Subtitleline1Reset()
	{
	}

	[Token(Token = "0x6001738")]
	[Address(RVA = "0x1190A94", Offset = "0x1190A94", VA = "0x1190A94")]
	private void Subtitleline2Reset()
	{
	}

	[Token(Token = "0x6001739")]
	[Address(RVA = "0x1190A9C", Offset = "0x1190A9C", VA = "0x1190A9C")]
	public void SetTransparency(float transparency)
	{
	}

	[Token(Token = "0x600173A")]
	[Address(RVA = "0x1190B2C", Offset = "0x1190B2C", VA = "0x1190B2C")]
	public void SetScale(float scale)
	{
	}

	[Token(Token = "0x600173B")]
	[Address(RVA = "0x1190BA4", Offset = "0x1190BA4", VA = "0x1190BA4")]
	public SubtitleHolder()
	{
	}
}
[Token(Token = "0x2000318")]
public class SubtitleLine : MonoBehaviour
{
	[Token(Token = "0x40014B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float lifeTime;

	[Token(Token = "0x40014B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool isPopulated;

	[Token(Token = "0x40014B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMeshProUGUI textField;

	[Token(Token = "0x40014B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnSubtitleLineReset;

	[Token(Token = "0x40014B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnSubtitleLineSet;

	[Token(Token = "0x6001742")]
	[Address(RVA = "0x1190D74", Offset = "0x1190D74", VA = "0x1190D74")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001743")]
	[Address(RVA = "0x1190DEC", Offset = "0x1190DEC", VA = "0x1190DEC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001744")]
	[Address(RVA = "0x1190E38", Offset = "0x1190E38", VA = "0x1190E38")]
	public bool IsEmpty()
	{
		return default(bool);
	}

	[Token(Token = "0x6001745")]
	[Address(RVA = "0x11908EC", Offset = "0x11908EC", VA = "0x11908EC")]
	public string GetText()
	{
		return null;
	}

	[Token(Token = "0x6001746")]
	[Address(RVA = "0x1190E48", Offset = "0x1190E48", VA = "0x1190E48")]
	public float GetLifeTime()
	{
		return default(float);
	}

	[Token(Token = "0x6001747")]
	[Address(RVA = "0x1190A30", Offset = "0x1190A30", VA = "0x1190A30")]
	public void ResetSubtitleLine()
	{
	}

	[Token(Token = "0x6001748")]
	[Address(RVA = "0x1190E50", Offset = "0x1190E50", VA = "0x1190E50")]
	public void SetSubtitleLine(string p_subtitle, float p_lifeTime)
	{
	}

	[Token(Token = "0x6001749")]
	[Address(RVA = "0x1190EAC", Offset = "0x1190EAC", VA = "0x1190EAC")]
	public SubtitleLine()
	{
	}
}
[Token(Token = "0x2000319")]
public class SubtitleManager : MonoBehaviour
{
	[Token(Token = "0x40014B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SubtitleManager Instance;

	[Token(Token = "0x40014BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float subtitleLingerTime;

	[Token(Token = "0x40014BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool subtitlesEnabled;

	[Token(Token = "0x40014BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SubtitleLine subtitleLine1;

	[Token(Token = "0x40014BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SubtitleLine subtitleLine2;

	[Token(Token = "0x40014BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SubtitleHolder subtitleHolder;

	[Token(Token = "0x600174A")]
	[Address(RVA = "0x1190F48", Offset = "0x1190F48", VA = "0x1190F48")]
	private void Awake()
	{
	}

	[Token(Token = "0x600174B")]
	[Address(RVA = "0x1190FA0", Offset = "0x1190FA0", VA = "0x1190FA0")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x600174C")]
	[Address(RVA = "0x11912F0", Offset = "0x11912F0", VA = "0x11912F0")]
	public void NewSubtitle(string p_text, float p_lifeTime)
	{
	}

	[Token(Token = "0x600174D")]
	[Address(RVA = "0x1190910", Offset = "0x1190910", VA = "0x1190910")]
	public void PushSubtitleLineDown()
	{
	}

	[Token(Token = "0x600174E")]
	[Address(RVA = "0x1191480", Offset = "0x1191480", VA = "0x1191480")]
	public void ToggleSubtitles(bool isOn)
	{
	}

	[Token(Token = "0x600174F")]
	[Address(RVA = "0x119148C", Offset = "0x119148C", VA = "0x119148C")]
	public void SetTransparency(float transparency)
	{
	}

	[Token(Token = "0x6001750")]
	[Address(RVA = "0x1191518", Offset = "0x1191518", VA = "0x1191518")]
	public void SetScale(float scale)
	{
	}

	[Token(Token = "0x6001751")]
	[Address(RVA = "0x11915A4", Offset = "0x11915A4", VA = "0x11915A4")]
	public SubtitleHolder GetSubtitleHolder()
	{
		return null;
	}

	[Token(Token = "0x6001752")]
	[Address(RVA = "0x11915AC", Offset = "0x11915AC", VA = "0x11915AC")]
	public SubtitleManager()
	{
	}
}
[Token(Token = "0x200031A")]
public class TelekinesisParticles : MonoBehaviour
{
	[Token(Token = "0x40014BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isLeft;

	[Token(Token = "0x40014C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem telekinesisParticles;

	[Token(Token = "0x40014C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _particleCooldown;

	[Token(Token = "0x40014C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private HVRHandGrabber HandGrabber;

	[Token(Token = "0x40014C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PhotonView photonView;

	[Token(Token = "0x6001753")]
	[Address(RVA = "0x11915BC", Offset = "0x11915BC", VA = "0x11915BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001754")]
	[Address(RVA = "0x1191614", Offset = "0x1191614", VA = "0x1191614")]
	private void Update()
	{
	}

	[Token(Token = "0x6001755")]
	[Address(RVA = "0x1191D88", Offset = "0x1191D88", VA = "0x1191D88")]
	public TelekinesisParticles()
	{
	}
}
[Token(Token = "0x200031B")]
public class Temp : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x200031C")]
	private class RoomCount
	{
		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string roomName;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int count;

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x1191F08", Offset = "0x1191F08", VA = "0x1191F08")]
		public RoomCount()
		{
		}
	}

	[StructLayout(3)]
	[Token(Token = "0x200031D")]
	[CompilerGenerated]
	private struct <>c__DisplayClass3_0
	{
		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<RoomCount> roomCounts;
	}

	[Token(Token = "0x200031F")]
	[CompilerGenerated]
	private sealed class <_TestRunGenManager>d__3 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Temp <>4__this;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private <>c__DisplayClass3_0 <>8__1;

		[Token(Token = "0x170002B6")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001760")]
			[Address(RVA = "0x11927C8", Offset = "0x11927C8", VA = "0x11927C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001762")]
			[Address(RVA = "0x1192810", Offset = "0x1192810", VA = "0x1192810", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x1191E04", Offset = "0x1191E04", VA = "0x1191E04")]
		[DebuggerHidden]
		public <_TestRunGenManager>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0x1191FA0", Offset = "0x1191FA0", VA = "0x1191FA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0x1191FA4", Offset = "0x1191FA4", VA = "0x1191FA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x11927D0", Offset = "0x11927D0", VA = "0x11927D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int totalRooms;

	[Token(Token = "0x40014C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int generationAmount;

	[Token(Token = "0x40014C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int amount;

	[Token(Token = "0x6001756")]
	[Address(RVA = "0x1191D90", Offset = "0x1191D90", VA = "0x1191D90")]
	[IteratorStateMachine(typeof(<_TestRunGenManager>d__3))]
	private IEnumerator<float> _TestRunGenManager()
	{
		return null;
	}

	[Token(Token = "0x6001757")]
	[Address(RVA = "0x1191E2C", Offset = "0x1191E2C", VA = "0x1191E2C")]
	public Temp()
	{
	}
}
[Token(Token = "0x2000320")]
public class ToggleChildRenderers : MonoBehaviour
{
	[Token(Token = "0x6001763")]
	[Address(RVA = "0x119286C", Offset = "0x119286C", VA = "0x119286C")]
	[ContextMenu("DisableChildRenderers")]
	public void DisableChildRenderers()
	{
	}

	[Token(Token = "0x6001764")]
	[Address(RVA = "0x1192908", Offset = "0x1192908", VA = "0x1192908")]
	[ContextMenu("EnableChildRenderers")]
	public void EnableChildRenderers()
	{
	}

	[Token(Token = "0x6001765")]
	[Address(RVA = "0x11929A4", Offset = "0x11929A4", VA = "0x11929A4")]
	public ToggleChildRenderers()
	{
	}
}
[Token(Token = "0x2000321")]
public class Bullet : MonoBehaviour, IPoolable, IEventSystemHandler
{
	[Token(Token = "0x2000322")]
	[CompilerGenerated]
	private sealed class <FadeCone>d__45 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bullet <>4__this;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <t>5__3;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Color <color>5__4;

		[Token(Token = "0x170002B8")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001778")]
			[Address(RVA = "0x1195220", Offset = "0x1195220", VA = "0x1195220", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600177A")]
			[Address(RVA = "0x1195268", Offset = "0x1195268", VA = "0x1195268", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x11930A4", Offset = "0x11930A4", VA = "0x11930A4")]
		[DebuggerHidden]
		public <FadeCone>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x1195088", Offset = "0x1195088", VA = "0x1195088", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0x119508C", Offset = "0x119508C", VA = "0x119508C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0x1195228", Offset = "0x1195228", VA = "0x1195228", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000323")]
	[CompilerGenerated]
	private sealed class <DelayedExplosion>d__51 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bullet <>4__this;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 hitPoint;

		[Token(Token = "0x170002BA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600177E")]
			[Address(RVA = "0x1195A98", Offset = "0x1195A98", VA = "0x1195A98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001780")]
			[Address(RVA = "0x1195AE0", Offset = "0x1195AE0", VA = "0x1195AE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0x1194E24", Offset = "0x1194E24", VA = "0x1194E24")]
		[DebuggerHidden]
		public <DelayedExplosion>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0x11952C4", Offset = "0x11952C4", VA = "0x11952C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0x11952C8", Offset = "0x11952C8", VA = "0x11952C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0x1195AA0", Offset = "0x1195AA0", VA = "0x1195AA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000324")]
	[CompilerGenerated]
	private sealed class <DelayedDeactivateCoroutine>d__53 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bullet <>4__this;

		[Token(Token = "0x170002BC")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001784")]
			[Address(RVA = "0x1195BE4", Offset = "0x1195BE4", VA = "0x1195BE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001786")]
			[Address(RVA = "0x1195C2C", Offset = "0x1195C2C", VA = "0x1195C2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0x1194EC0", Offset = "0x1194EC0", VA = "0x1194EC0")]
		[DebuggerHidden]
		public <DelayedDeactivateCoroutine>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x1195B3C", Offset = "0x1195B3C", VA = "0x1195B3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0x1195B40", Offset = "0x1195B40", VA = "0x1195B40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0x1195BEC", Offset = "0x1195BEC", VA = "0x1195BEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask bulletHitLayers;

	[Token(Token = "0x40014D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isMine;

	[Token(Token = "0x40014D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[SerializeField]
	private bool deactivateImmediatelyAfterHit;

	[Token(Token = "0x40014D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[SerializeField]
	private bool increaseSizeOverTime;

	[Token(Token = "0x40014D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float sphereCastSize;

	[Token(Token = "0x40014D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float timeToDestroy;

	[Token(Token = "0x40014D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float hitForceMultiplier;

	[Token(Token = "0x40014D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem travelParticleSystem;

	[Token(Token = "0x40014D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem impactParticleSystem;

	[Token(Token = "0x40014D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject impactEffectPrefab;

	[Token(Token = "0x40014DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioClip impactAudioClip;

	[Token(Token = "0x40014DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip deflectAudioClip;

	[Token(Token = "0x40014DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private DamageType damageType;

	[Token(Token = "0x40014DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject mesh;

	[Token(Token = "0x40014DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform cone;

	[Token(Token = "0x40014DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private bool rotateDuringLifetime;

	[Token(Token = "0x40014E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	[SerializeField]
	private bool knockToolsFromHand;

	[Token(Token = "0x40014E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	[SerializeField]
	private bool onlyDamageIfHitPhotonviewIsMine;

	[Token(Token = "0x40014E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
	public bool explosiveBullet;

	[Token(Token = "0x40014E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private ParticleSystem explosiveFXPrefab;

	[Token(Token = "0x40014E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private ParticleSystem explosiveFXPrefabAndroid;

	[Token(Token = "0x40014E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<Transform> ignoredSpawnerTransforms;

	[Token(Token = "0x40014E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int damage;

	[Token(Token = "0x40014E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Rigidbody _myRB;

	[Token(Token = "0x40014E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private AudioSource _myAS;

	[Token(Token = "0x40014E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Transform> _alreadyDamagedList;

	[Token(Token = "0x40014EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 _previousPosition;

	[Token(Token = "0x40014EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private TrailRenderer _trailRenderer;

	[Token(Token = "0x40014EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool _active;

	[Token(Token = "0x40014ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 _originalMeshSize;

	[Token(Token = "0x40014EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float _originalTrailSize;

	[Token(Token = "0x40014EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float _increasedSize;

	[Token(Token = "0x40014F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float _ignoreHitTime;

	[Token(Token = "0x40014F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Vector3 _startpos;

	[Token(Token = "0x40014F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Material _coneMaterial;

	[Token(Token = "0x40014F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool _delayedDeactivating;

	[Token(Token = "0x40014F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private UnityEngine.Color _originalConeColor;

	[Token(Token = "0x40014F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private RaycastHit[] _hitResults;

	[Token(Token = "0x40014F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Collider[] _explosiveColliders;

	[Token(Token = "0x40014F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[HideInInspector]
	public bool doDamage;

	[Token(Token = "0x40014F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public float explosionSize;

	[Token(Token = "0x6001766")]
	[Address(RVA = "0x11929AC", Offset = "0x11929AC", VA = "0x11929AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001767")]
	[Address(RVA = "0x1192BB4", Offset = "0x1192BB4", VA = "0x1192BB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001768")]
	[Address(RVA = "0x1192BB8", Offset = "0x1192BB8", VA = "0x1192BB8", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6001769")]
	[Address(RVA = "0x1192C34", Offset = "0x1192C34", VA = "0x1192C34")]
	public void Reset()
	{
	}

	[Token(Token = "0x600176A")]
	[Address(RVA = "0x1193030", Offset = "0x1193030", VA = "0x1193030")]
	[IteratorStateMachine(typeof(<FadeCone>d__45))]
	private IEnumerator<float> FadeCone()
	{
		return null;
	}

	[Token(Token = "0x600176B")]
	[Address(RVA = "0x11930CC", Offset = "0x11930CC", VA = "0x11930CC", Slot = "5")]
	public void Release()
	{
	}

	[Token(Token = "0x600176C")]
	[Address(RVA = "0x11930D0", Offset = "0x11930D0", VA = "0x11930D0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600176D")]
	[Address(RVA = "0x11935E0", Offset = "0x11935E0", VA = "0x11935E0")]
	private bool CheckHit(Transform hitTransform, Vector3 hitPoint, Vector3 hitNormal, Collider hitCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x600176E")]
	[Address(RVA = "0x1194A44", Offset = "0x1194A44", VA = "0x1194A44")]
	private void Deactivate()
	{
	}

	[Token(Token = "0x600176F")]
	[Address(RVA = "0x1194CE0", Offset = "0x1194CE0", VA = "0x1194CE0")]
	private void TryExplode(Vector3 hitPoint)
	{
	}

	[Token(Token = "0x6001770")]
	[Address(RVA = "0x1194D8C", Offset = "0x1194D8C", VA = "0x1194D8C")]
	[IteratorStateMachine(typeof(<DelayedExplosion>d__51))]
	private IEnumerator<float> DelayedExplosion(Vector3 hitPoint)
	{
		return null;
	}

	[Token(Token = "0x6001771")]
	[Address(RVA = "0x1194C3C", Offset = "0x1194C3C", VA = "0x1194C3C")]
	private void DelayedDeactivate()
	{
	}

	[Token(Token = "0x6001772")]
	[Address(RVA = "0x1194E4C", Offset = "0x1194E4C", VA = "0x1194E4C")]
	[IteratorStateMachine(typeof(<DelayedDeactivateCoroutine>d__53))]
	private IEnumerator<float> DelayedDeactivateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001773")]
	[Address(RVA = "0x1194EE8", Offset = "0x1194EE8", VA = "0x1194EE8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001774")]
	[Address(RVA = "0x1194F64", Offset = "0x1194F64", VA = "0x1194F64")]
	public Bullet()
	{
	}
}
[Token(Token = "0x2000325")]
public class Detector : Tool
{
	[Token(Token = "0x2000326")]
	[CompilerGenerated]
	private sealed class <_UpdateDetectorScreen>d__17 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Detector <>4__this;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private UnityEngine.Color <originalColor>5__3;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Color <endColor>5__4;

		[Token(Token = "0x170002BE")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001795")]
			[Address(RVA = "0x1196C40", Offset = "0x1196C40", VA = "0x1196C40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002BF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001797")]
			[Address(RVA = "0x1196C88", Offset = "0x1196C88", VA = "0x1196C88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0x119665C", Offset = "0x119665C", VA = "0x119665C")]
		[DebuggerHidden]
		public <_UpdateDetectorScreen>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0x1196888", Offset = "0x1196888", VA = "0x1196888", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0x119688C", Offset = "0x119688C", VA = "0x119688C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0x1196C48", Offset = "0x1196C48", VA = "0x1196C48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private AudioClip beepClip;

	[Token(Token = "0x4001507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private UnityEngine.Color screenColor;

	[Token(Token = "0x4001508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private float maxDistance;

	[Token(Token = "0x4001509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private Camera detectorCamera;

	[Token(Token = "0x400150A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private AudioSource screenNoise;

	[Token(Token = "0x400150B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private MeshRenderer detectorScreenMeshRenderer;

	[Token(Token = "0x400150C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private float updateTime;

	[Token(Token = "0x400150D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private RenderTexture detectorScreenRenderTexture;

	[Token(Token = "0x400150E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private GameObject elevatorArrowRotatingPoint;

	[Token(Token = "0x400150F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private Transform forwardHelper;

	[Token(Token = "0x4001510")]
	private const string updateDetectorScreenCoroutineName = "UpdateDetectorScreenCoroutine";

	[Token(Token = "0x6001787")]
	[Address(RVA = "0x1195C88", Offset = "0x1195C88", VA = "0x1195C88", Slot = "62")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001788")]
	[Address(RVA = "0x1195E18", Offset = "0x1195E18", VA = "0x1195E18", Slot = "60")]
	protected override void HandGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001789")]
	[Address(RVA = "0x1195FD4", Offset = "0x1195FD4", VA = "0x1195FD4", Slot = "61")]
	protected override void HandReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600178A")]
	[Address(RVA = "0x11960C0", Offset = "0x11960C0", VA = "0x11960C0")]
	private void UpdateDetectorCameraPosAndRot()
	{
	}

	[Token(Token = "0x600178B")]
	[Address(RVA = "0x11961A4", Offset = "0x11961A4", VA = "0x11961A4")]
	private void UpdateDetectorExitElevatorArrow()
	{
	}

	[Token(Token = "0x600178C")]
	[Address(RVA = "0x11964E0", Offset = "0x11964E0", VA = "0x11964E0")]
	private Transform DetermineDetectorTarget()
	{
		return null;
	}

	[Token(Token = "0x600178D")]
	[Address(RVA = "0x1195F60", Offset = "0x1195F60", VA = "0x1195F60")]
	[IteratorStateMachine(typeof(<_UpdateDetectorScreen>d__17))]
	private IEnumerator<float> _UpdateDetectorScreen()
	{
		return null;
	}

	[Token(Token = "0x600178E")]
	[Address(RVA = "0x1196684", Offset = "0x1196684", VA = "0x1196684")]
	public Transform GetForwardHelper()
	{
		return null;
	}

	[Token(Token = "0x600178F")]
	[Address(RVA = "0x119668C", Offset = "0x119668C", VA = "0x119668C")]
	public void InFlatUse(PlayerAvatar player)
	{
	}

	[Token(Token = "0x6001790")]
	[Address(RVA = "0x11967A8", Offset = "0x11967A8", VA = "0x11967A8")]
	public void FlatUnequip()
	{
	}

	[Token(Token = "0x6001791")]
	[Address(RVA = "0x1196870", Offset = "0x1196870", VA = "0x1196870")]
	public Detector()
	{
	}
}
[Token(Token = "0x2000327")]
public class MinimapPoint : MonoBehaviour
{
	[Token(Token = "0x2000328")]
	[CompilerGenerated]
	private sealed class <EnableRoutine>d__5 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MinimapPoint <>4__this;

		[Token(Token = "0x170002C0")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60017A0")]
			[Address(RVA = "0x1197620", Offset = "0x1197620", VA = "0x1197620", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002C1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017A2")]
			[Address(RVA = "0x1197668", Offset = "0x1197668", VA = "0x1197668", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0x1196E34", Offset = "0x1196E34", VA = "0x1196E34")]
		[DebuggerHidden]
		public <EnableRoutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0x1196F24", Offset = "0x1196F24", VA = "0x1196F24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0x1196F28", Offset = "0x1196F28", VA = "0x1196F28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x1197628", Offset = "0x1197628", VA = "0x1197628", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DetectorManager.PointType pointType;

	[Token(Token = "0x4001518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Mesh myMesh;

	[Token(Token = "0x4001519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float miniMapPointSize;

	[Token(Token = "0x6001798")]
	[Address(RVA = "0x1196CE4", Offset = "0x1196CE4", VA = "0x1196CE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001799")]
	[Address(RVA = "0x1196D58", Offset = "0x1196D58", VA = "0x1196D58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600179A")]
	[Address(RVA = "0x1196DC0", Offset = "0x1196DC0", VA = "0x1196DC0")]
	[IteratorStateMachine(typeof(<EnableRoutine>d__5))]
	private IEnumerator<float> EnableRoutine()
	{
		return null;
	}

	[Token(Token = "0x600179B")]
	[Address(RVA = "0x1196E5C", Offset = "0x1196E5C", VA = "0x1196E5C")]
	private void ChangeColor(Color32 newColor)
	{
	}

	[Token(Token = "0x600179C")]
	[Address(RVA = "0x1196F14", Offset = "0x1196F14", VA = "0x1196F14")]
	public MinimapPoint()
	{
	}
}
[Token(Token = "0x2000329")]
[RequireComponent(typeof(HVRGrabbable))]
public class Dynamite : Tool, IDamageable
{
	[Token(Token = "0x200032A")]
	[CompilerGenerated]
	private sealed class <_GoBackToSocket>d__59 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dynamite <>4__this;

		[Token(Token = "0x170002C4")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60017C5")]
			[Address(RVA = "0x119A584", Offset = "0x119A584", VA = "0x119A584", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002C5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017C7")]
			[Address(RVA = "0x119A5CC", Offset = "0x119A5CC", VA = "0x119A5CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x1199E04", Offset = "0x1199E04", VA = "0x1199E04")]
		[DebuggerHidden]
		public <_GoBackToSocket>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x119A224", Offset = "0x119A224", VA = "0x119A224", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x119A228", Offset = "0x119A228", VA = "0x119A228", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x119A58C", Offset = "0x119A58C", VA = "0x119A58C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200032B")]
	[CompilerGenerated]
	private sealed class <_IgnitionStarted>d__61 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dynamite <>4__this;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x170002C6")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60017CB")]
			[Address(RVA = "0x119AA68", Offset = "0x119AA68", VA = "0x119AA68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002C7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017CD")]
			[Address(RVA = "0x119AAB0", Offset = "0x119AAB0", VA = "0x119AAB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0x1199EA0", Offset = "0x1199EA0", VA = "0x1199EA0")]
		[DebuggerHidden]
		public <_IgnitionStarted>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x119A628", Offset = "0x119A628", VA = "0x119A628", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x119A62C", Offset = "0x119A62C", VA = "0x119A62C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x119AA70", Offset = "0x119AA70", VA = "0x119AA70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200032C")]
	[CompilerGenerated]
	private sealed class <_WaitForEffectFinishAndReset>d__62 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dynamite <>4__this;

		[Token(Token = "0x170002C8")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60017D1")]
			[Address(RVA = "0x119AB80", Offset = "0x119AB80", VA = "0x119AB80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002C9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017D3")]
			[Address(RVA = "0x119ABC8", Offset = "0x119ABC8", VA = "0x119ABC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x1199EC8", Offset = "0x1199EC8", VA = "0x1199EC8")]
		[DebuggerHidden]
		public <_WaitForEffectFinishAndReset>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x119AB0C", Offset = "0x119AB0C", VA = "0x119AB0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x119AB10", Offset = "0x119AB10", VA = "0x119AB10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0x119AB88", Offset = "0x119AB88", VA = "0x119AB88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400151D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[Header("Dynamite Settings")]
	public DamageType takeDamageType;

	[Token(Token = "0x400151E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private ParticleSystem fuzeIgnitedParticleEffect;

	[Token(Token = "0x400151F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private ParticleSystem fuzeIgnitedParticleEffect2;

	[Token(Token = "0x4001520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private ParticleSystem fuzeIgnitedParticleEffect3;

	[Token(Token = "0x4001521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private ParticleSystem blowUpParticleEffect;

	[Token(Token = "0x4001522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ParticleSystem androidBlowUpParticleEffect;

	[Token(Token = "0x4001523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private float blowOffTime;

	[Token(Token = "0x4001524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private AudioClip fuzeAudioClip;

	[Token(Token = "0x4001525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private AudioClip[] explosionAudioClips;

	[Token(Token = "0x4001526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private bool stickyBomb;

	[Token(Token = "0x4001527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	[SerializeField]
	private LayerMask stickyLayers;

	[Token(Token = "0x4001528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private List<Collider> stickyColliders;

	[Token(Token = "0x4001529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private Transform[] fusePath;

	[Token(Token = "0x400152A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Vector3[] fusePathVectors;

	[Token(Token = "0x400152B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private Transform[] fusePath2;

	[Token(Token = "0x400152C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	private Transform[] fusePath3;

	[Token(Token = "0x400152D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private GameObject meshObject;

	[Token(Token = "0x400152E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Vector3[] fusePathVectors2;

	[Token(Token = "0x400152F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Vector3[] fusePathVectors3;

	[Token(Token = "0x4001530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private int _timeIgnitedInLeftHand;

	[Token(Token = "0x4001531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float _igniteCooldown;

	[Token(Token = "0x4001532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private ConfigurableJoint _configJoint;

	[Token(Token = "0x4001533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private float _lastTimeStickied;

	[Token(Token = "0x4001534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private Rigidbody _stickyTargetRB;

	[Token(Token = "0x4001535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private GameObject _stickyTargetObject;

	[Token(Token = "0x4001536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> fuze1Tween;

	[Token(Token = "0x4001537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> fuze2Tween;

	[Token(Token = "0x4001538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> fuze3Tween;

	[Token(Token = "0x4001539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private bool dynamiteIgnited;

	[Token(Token = "0x400153A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B1")]
	private bool canIgnite;

	[Token(Token = "0x400153B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B2")]
	private bool despawnAfterExplosion;

	[Token(Token = "0x400153C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private DynamiteBlast dynamiteBlast;

	[Token(Token = "0x400153D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private AudioSource myAudioSource;

	[Token(Token = "0x400153E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private HVRGrabbable hvrGrabbable;

	[Token(Token = "0x400153F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private CoroutineHandle ignitionCoroutine;

	[Token(Token = "0x170002C2")]
	public bool IsDynamiteIgnited
	{
		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x11976C4", Offset = "0x11976C4", VA = "0x11976C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002C3")]
	public override bool CanBeSlotted
	{
		[Token(Token = "0x60017A4")]
		[Address(RVA = "0x11976CC", Offset = "0x11976CC", VA = "0x11976CC", Slot = "55")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60017A5")]
	[Address(RVA = "0x11976DC", Offset = "0x11976DC", VA = "0x11976DC", Slot = "56")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60017A6")]
	[Address(RVA = "0x1197F78", Offset = "0x1197F78", VA = "0x1197F78")]
	private void HVRGrabbableReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60017A7")]
	[Address(RVA = "0x1198018", Offset = "0x1198018", VA = "0x1198018", Slot = "63")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60017A8")]
	[Address(RVA = "0x1198CE8", Offset = "0x1198CE8", VA = "0x1198CE8")]
	[PunRPC]
	private void MakeJointToStickyTargetRPC(Vector3 anchorPoint, Vector3 objectPosition, Quaternion objectRotation, Vector3 connectedObjectPosition, Quaternion connectedObjectRotation)
	{
	}

	[Token(Token = "0x60017A9")]
	[Address(RVA = "0x1198DC8", Offset = "0x1198DC8", VA = "0x1198DC8")]
	[PunRPC]
	private void MakeJointToRBRPC(int connectedBodyPhotonviewID, Vector3 anchorPoint, Vector3 objectPosition, Quaternion objectRotation, Vector3 connectedObjectPosition, Quaternion connectedObjectRotation)
	{
	}

	[Token(Token = "0x60017AA")]
	[Address(RVA = "0x1198AC4", Offset = "0x1198AC4", VA = "0x1198AC4")]
	private void MakeJointToRB(Vector3 anchorPoint, Rigidbody connectedBody)
	{
	}

	[Token(Token = "0x60017AB")]
	[Address(RVA = "0x119902C", Offset = "0x119902C", VA = "0x119902C")]
	private void HVRHandGrabbableReleased(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60017AC")]
	[Address(RVA = "0x1199328", Offset = "0x1199328", VA = "0x1199328")]
	private void HVRGrabbableGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60017AD")]
	[Address(RVA = "0x119974C", Offset = "0x119974C", VA = "0x119974C", Slot = "57")]
	protected override void Socketed(HVRSocket arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60017AE")]
	[Address(RVA = "0x11997EC", Offset = "0x11997EC", VA = "0x11997EC")]
	[PunRPC]
	private void KillJointRPC()
	{
	}

	[Token(Token = "0x60017AF")]
	[Address(RVA = "0x1198A1C", Offset = "0x1198A1C", VA = "0x1198A1C")]
	private void KillJoint()
	{
	}

	[Token(Token = "0x60017B0")]
	[Address(RVA = "0x11997F0", Offset = "0x11997F0", VA = "0x11997F0")]
	private void KillStickyTarget()
	{
	}

	[Token(Token = "0x60017B1")]
	[Address(RVA = "0x1198BD8", Offset = "0x1198BD8", VA = "0x1198BD8")]
	private void MakeStickyTarget(Vector3 stickyTargetPosition)
	{
	}

	[Token(Token = "0x60017B2")]
	[Address(RVA = "0x11995D4", Offset = "0x11995D4", VA = "0x11995D4")]
	private void ResetDynamite()
	{
	}

	[Token(Token = "0x60017B3")]
	[Address(RVA = "0x1197C10", Offset = "0x1197C10", VA = "0x1197C10")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x60017B4")]
	[Address(RVA = "0x11998A4", Offset = "0x11998A4", VA = "0x11998A4", Slot = "59")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60017B5")]
	[Address(RVA = "0x11991B8", Offset = "0x11991B8", VA = "0x11991B8")]
	public void DynamiteIgnited(bool despawnAfterExplosion = false)
	{
	}

	[Token(Token = "0x60017B6")]
	[Address(RVA = "0x119942C", Offset = "0x119942C", VA = "0x119942C")]
	private void DynamiteExtinguish()
	{
	}

	[Token(Token = "0x60017B7")]
	[Address(RVA = "0x119990C", Offset = "0x119990C", VA = "0x119990C")]
	[PunRPC]
	private void IgniteDynamiteRPC()
	{
	}

	[Token(Token = "0x60017B8")]
	[Address(RVA = "0x1199A10", Offset = "0x1199A10", VA = "0x1199A10")]
	private void Explode()
	{
	}

	[Token(Token = "0x60017B9")]
	[Address(RVA = "0x1199D90", Offset = "0x1199D90", VA = "0x1199D90")]
	[IteratorStateMachine(typeof(<_GoBackToSocket>d__59))]
	private IEnumerator<float> _GoBackToSocket()
	{
		return null;
	}

	[Token(Token = "0x60017BA")]
	[Address(RVA = "0x1199E2C", Offset = "0x1199E2C", VA = "0x1199E2C")]
	private void HideMesh()
	{
	}

	[Token(Token = "0x60017BB")]
	[Address(RVA = "0x119999C", Offset = "0x119999C", VA = "0x119999C")]
	[IteratorStateMachine(typeof(<_IgnitionStarted>d__61))]
	private IEnumerator<float> _IgnitionStarted()
	{
		return null;
	}

	[Token(Token = "0x60017BC")]
	[Address(RVA = "0x1199D18", Offset = "0x1199D18", VA = "0x1199D18")]
	[IteratorStateMachine(typeof(<_WaitForEffectFinishAndReset>d__62))]
	private IEnumerator<float> _WaitForEffectFinishAndReset()
	{
		return null;
	}

	[Token(Token = "0x60017BD")]
	[Address(RVA = "0x1199EF0", Offset = "0x1199EF0", VA = "0x1199EF0", Slot = "67")]
	public virtual void DestroyObject()
	{
	}

	[Token(Token = "0x60017BE")]
	[Address(RVA = "0x1199FDC", Offset = "0x1199FDC", VA = "0x1199FDC", Slot = "66")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x60017BF")]
	[Address(RVA = "0x119A180", Offset = "0x119A180", VA = "0x119A180")]
	public float GetFuseTime()
	{
		return default(float);
	}

	[Token(Token = "0x60017C0")]
	[Address(RVA = "0x119A188", Offset = "0x119A188", VA = "0x119A188")]
	public void Extinguish()
	{
	}

	[Token(Token = "0x60017C1")]
	[Address(RVA = "0x119A18C", Offset = "0x119A18C", VA = "0x119A18C")]
	public Dynamite()
	{
	}
}
[Token(Token = "0x200032D")]
[RequireComponent(typeof(Dynamite))]
public class DynamiteBlast : MonoBehaviour
{
	[Token(Token = "0x400154A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LayerMask hitLayers;

	[Token(Token = "0x400154B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	public float blastRadius;

	[Token(Token = "0x400154C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Amount of force that will be applyed to surrounding objects")]
	private float blastForce;

	[Token(Token = "0x400154D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dynamite dynamiteScript;

	[Token(Token = "0x400154E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Transform> alreadyHit;

	[Token(Token = "0x400154F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Rigidbody> alreadyHitRigidbodies;

	[Token(Token = "0x4001550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Collider[] blastResults;

	[Token(Token = "0x60017D4")]
	[Address(RVA = "0x119AC24", Offset = "0x119AC24", VA = "0x119AC24")]
	private void Awake()
	{
	}

	[Token(Token = "0x60017D5")]
	[Address(RVA = "0x1199D8C", Offset = "0x1199D8C", VA = "0x1199D8C")]
	public void Explode()
	{
	}

	[Token(Token = "0x60017D6")]
	[Address(RVA = "0x119AC8C", Offset = "0x119AC8C", VA = "0x119AC8C")]
	private void Blast()
	{
	}

	[Token(Token = "0x60017D7")]
	[Address(RVA = "0x119B50C", Offset = "0x119B50C", VA = "0x119B50C")]
	private void EditTerrain(DiggingArea world, Vector3 point, float deformSpeed, float range)
	{
	}

	[Token(Token = "0x60017D8")]
	[Address(RVA = "0x119B6F8", Offset = "0x119B6F8", VA = "0x119B6F8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60017D9")]
	[Address(RVA = "0x119B744", Offset = "0x119B744", VA = "0x119B744")]
	public DynamiteBlast()
	{
	}
}
[Token(Token = "0x200032E")]
public class Goldpan : Tool
{
	[Token(Token = "0x200032F")]
	[CompilerGenerated]
	private sealed class <Start>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170002CA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017F8")]
			[Address(RVA = "0x119DF1C", Offset = "0x119DF1C", VA = "0x119DF1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017FA")]
			[Address(RVA = "0x119DF64", Offset = "0x119DF64", VA = "0x119DF64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x119DE58", Offset = "0x119DE58", VA = "0x119DE58")]
		[DebuggerHidden]
		public <Start>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x119DE80", Offset = "0x119DE80", VA = "0x119DE80", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x119DE84", Offset = "0x119DE84", VA = "0x119DE84", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x119DF24", Offset = "0x119DF24", VA = "0x119DF24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000330")]
	[CompilerGenerated]
	private sealed class <DelayedCheckIfNeedHoming>d__34 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Goldpan <>4__this;

		[Token(Token = "0x170002CC")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60017FE")]
			[Address(RVA = "0x119E234", Offset = "0x119E234", VA = "0x119E234", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002CD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001800")]
			[Address(RVA = "0x119E27C", Offset = "0x119E27C", VA = "0x119E27C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x119DF6C", Offset = "0x119DF6C", VA = "0x119DF6C")]
		[DebuggerHidden]
		public <DelayedCheckIfNeedHoming>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x119DF94", Offset = "0x119DF94", VA = "0x119DF94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x119DF98", Offset = "0x119DF98", VA = "0x119DF98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x119E23C", Offset = "0x119E23C", VA = "0x119E23C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000331")]
	[CompilerGenerated]
	private sealed class <ShortDisableCollidersCoroutine>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Goldpan <>4__this;

		[Token(Token = "0x170002CE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001804")]
			[Address(RVA = "0x119E3D4", Offset = "0x119E3D4", VA = "0x119E3D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001806")]
			[Address(RVA = "0x119E41C", Offset = "0x119E41C", VA = "0x119E41C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x119E2D8", Offset = "0x119E2D8", VA = "0x119E2D8")]
		[DebuggerHidden]
		public <ShortDisableCollidersCoroutine>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x119E300", Offset = "0x119E300", VA = "0x119E300", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x119E304", Offset = "0x119E304", VA = "0x119E304", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x119E3DC", Offset = "0x119E3DC", VA = "0x119E3DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private Transform mudPan;

	[Token(Token = "0x4001552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private Transform mudPanMin;

	[Token(Token = "0x4001553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private Transform mudPanMax;

	[Token(Token = "0x4001554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private ParticleSystem mudPanFX;

	[Token(Token = "0x4001555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private Transform[] lootspawnSpots;

	[Token(Token = "0x4001556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Min(0f)]
	public int bonusLoot;

	[Token(Token = "0x4001557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[Min(0f)]
	public float reducedTimer;

	[Token(Token = "0x4001558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private List<Transform> availableSpawnSpots;

	[Token(Token = "0x4001559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private BetterVelocityEstimator myVelocityEstimator;

	[Token(Token = "0x400155A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float _currentPanTime;

	[Token(Token = "0x400155B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private float _targetPanTime;

	[Token(Token = "0x400155C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	[Header("Homing")]
	private bool isHomingPan;

	[Token(Token = "0x400155D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[SerializeField]
	[Min(0f)]
	private int homingBounces;

	[Token(Token = "0x400155E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private LayerMask homingTargetLayer;

	[Token(Token = "0x400155F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	[Min(0f)]
	[SerializeField]
	private float minimumVelocityToStartHoming;

	[Token(Token = "0x4001560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private int _currentBounce;

	[Token(Token = "0x4001561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Transform _homingTarget;

	[Token(Token = "0x4001562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private List<Transform> _homingBlacklist;

	[Token(Token = "0x4001563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private List<Collider> _ignoredColliders;

	[Token(Token = "0x4001564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float _hasBeenSlowDuration;

	[Token(Token = "0x4001565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float _hasBeenCloseToTargetDuration;

	[Token(Token = "0x4001566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private LineRenderer _debugLine;

	[Token(Token = "0x4001567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private bool _debugging;

	[Token(Token = "0x4001568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float _targetSpeed;

	[Token(Token = "0x60017DB")]
	[Address(RVA = "0x119B924", Offset = "0x119B924", VA = "0x119B924", Slot = "56")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60017DC")]
	[Address(RVA = "0x119BD38", Offset = "0x119BD38", VA = "0x119BD38")]
	[IteratorStateMachine(typeof(<Start>d__25))]
	private new IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60017DD")]
	[Address(RVA = "0x119BD98", Offset = "0x119BD98", VA = "0x119BD98")]
	private void UnSocketed()
	{
	}

	[Token(Token = "0x60017DE")]
	[Address(RVA = "0x119BE10", Offset = "0x119BE10", VA = "0x119BE10")]
	private void Socketed()
	{
	}

	[Token(Token = "0x60017DF")]
	[Address(RVA = "0x119BBC4", Offset = "0x119BBC4", VA = "0x119BBC4")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x60017E0")]
	[Address(RVA = "0x119BE88", Offset = "0x119BE88", VA = "0x119BE88")]
	public Vector3 GetMyVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60017E1")]
	[Address(RVA = "0x119BFD0", Offset = "0x119BFD0", VA = "0x119BFD0")]
	public void SetMudAmount(float amount)
	{
	}

	[Token(Token = "0x60017E2")]
	[Address(RVA = "0x119BFD8", Offset = "0x119BFD8", VA = "0x119BFD8")]
	private void Update()
	{
	}

	[Token(Token = "0x60017E3")]
	[Address(RVA = "0x119C1A0", Offset = "0x119C1A0", VA = "0x119C1A0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60017E4")]
	[Address(RVA = "0x119C7B4", Offset = "0x119C7B4", VA = "0x119C7B4")]
	public void CheckIfNeedHoming()
	{
	}

	[Token(Token = "0x60017E5")]
	[Address(RVA = "0x119C848", Offset = "0x119C848", VA = "0x119C848")]
	[IteratorStateMachine(typeof(<DelayedCheckIfNeedHoming>d__34))]
	private IEnumerator<float> DelayedCheckIfNeedHoming()
	{
		return null;
	}

	[Token(Token = "0x60017E6")]
	[Address(RVA = "0x119C72C", Offset = "0x119C72C", VA = "0x119C72C")]
	public void ClearHomingTarget()
	{
	}

	[Token(Token = "0x60017E7")]
	[Address(RVA = "0x119C9EC", Offset = "0x119C9EC", VA = "0x119C9EC")]
	private void CheckForBounce()
	{
	}

	[Token(Token = "0x60017E8")]
	[Address(RVA = "0x119D43C", Offset = "0x119D43C", VA = "0x119D43C")]
	private Transform DetectHomingTarget(Vector3 direction)
	{
		return null;
	}

	[Token(Token = "0x60017E9")]
	[Address(RVA = "0x119DB80", Offset = "0x119DB80", VA = "0x119DB80")]
	private void DebuggingLine(Transform closestHit)
	{
	}

	[Token(Token = "0x60017EA")]
	[Address(RVA = "0x119D814", Offset = "0x119D814", VA = "0x119D814")]
	private Transform GetClosestHit(RaycastHit[] targets)
	{
		return null;
	}

	[Token(Token = "0x60017EB")]
	[Address(RVA = "0x119CCF0", Offset = "0x119CCF0", VA = "0x119CCF0")]
	private Transform DetectBounceTarget()
	{
		return null;
	}

	[Token(Token = "0x60017EC")]
	[Address(RVA = "0x119DB84", Offset = "0x119DB84", VA = "0x119DB84")]
	[IteratorStateMachine(typeof(<ShortDisableCollidersCoroutine>d__41))]
	private IEnumerator ShortDisableCollidersCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60017ED")]
	[Address(RVA = "0x119C8BC", Offset = "0x119C8BC", VA = "0x119C8BC")]
	private void ResetIgnoreColliders()
	{
	}

	[Token(Token = "0x60017EE")]
	[Address(RVA = "0x119DBF8", Offset = "0x119DBF8", VA = "0x119DBF8")]
	public Vector3 GetRandomSpawnPoint(float offset)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60017EF")]
	[Address(RVA = "0x119DD34", Offset = "0x119DD34", VA = "0x119DD34")]
	private void Interact()
	{
	}

	[Token(Token = "0x60017F0")]
	[Address(RVA = "0x119DD38", Offset = "0x119DD38", VA = "0x119DD38")]
	public Goldpan()
	{
	}
}
[Token(Token = "0x2000332")]
public class Pickaxe : Tool
{
	[Token(Token = "0x4001571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public ToolDeformer frontDeformer;

	[Token(Token = "0x4001572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public ToolDeformer backDeformer;

	[Token(Token = "0x4001573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public string ropeTag;

	[Token(Token = "0x4001574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject ropeHangingColliders;

	[Token(Token = "0x4001575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public List<Collider> pickHeadColliders;

	[Token(Token = "0x4001576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private float _collidedWithRopeTime;

	[Token(Token = "0x4001577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private float _lastClaytonTime;

	[Token(Token = "0x4001578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ContactPoint[] _contactPoints;

	[Token(Token = "0x6001807")]
	[Address(RVA = "0x119E424", Offset = "0x119E424", VA = "0x119E424", Slot = "62")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001808")]
	[Address(RVA = "0x119E538", Offset = "0x119E538", VA = "0x119E538")]
	[PunRPC]
	public void EffectsRPC(bool front)
	{
	}

	[Token(Token = "0x6001809")]
	[Address(RVA = "0x119E560", Offset = "0x119E560", VA = "0x119E560", Slot = "64")]
	protected override void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x600180A")]
	[Address(RVA = "0x119E940", Offset = "0x119E940", VA = "0x119E940")]
	private void Update()
	{
	}

	[Token(Token = "0x600180B")]
	[Address(RVA = "0x119E9F4", Offset = "0x119E9F4", VA = "0x119E9F4")]
	public Pickaxe()
	{
	}
}
[Token(Token = "0x2000333")]
public class PneumoSaw : Tool
{
	[Token(Token = "0x600180C")]
	[Address(RVA = "0x119EB5C", Offset = "0x119EB5C", VA = "0x119EB5C")]
	public PneumoSaw()
	{
	}
}
[Token(Token = "0x2000334")]
public class Revolver : Tool
{
	[Token(Token = "0x4001579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public UnityEvent OnRevolverShot;

	[Token(Token = "0x400157A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public UnityEvent OnRevolverEmpty;

	[Token(Token = "0x400157B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public UnityEvent OnRevolverLoaded;

	[Token(Token = "0x400157C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[UnityEngine.Tooltip("Amount of power that the bullet prefab will be shot at")]
	[SerializeField]
	private float shootingPower;

	[Token(Token = "0x400157D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[SerializeField]
	private int bulletDamage;

	[Token(Token = "0x400157E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private int BulletsMax;

	[Token(Token = "0x400157F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private GameObject bulletPrefab;

	[Token(Token = "0x4001580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private AudioClip bulletFireAudioClip;

	[Token(Token = "0x4001581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private AudioClip bulletFireVibrationClip;

	[Token(Token = "0x4001582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private AudioClip emptyFireAudioClip;

	[Token(Token = "0x4001583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private AudioClip emptyFireVibrationClip;

	[Token(Token = "0x4001584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private AudioClip reloadFinishedAudioClip;

	[Token(Token = "0x4001585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private AudioClip reloadStartedAudioClip;

	[Token(Token = "0x4001586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private AudioClip reloadStartedVibrationClip;

	[Token(Token = "0x4001587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	private AudioClip afterSizzle;

	[Token(Token = "0x4001588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private AudioSource chargingSource;

	[Token(Token = "0x4001589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	private ParticleSystem coilParticleSystem;

	[Token(Token = "0x400158A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	private ParticleSystem chamberParticleSystem;

	[Token(Token = "0x400158B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[SerializeField]
	private ParticleSystem muzzleFlashParticleSystem;

	[Token(Token = "0x400158C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SerializeField]
	private Transform bulletSpawnPoint;

	[Token(Token = "0x400158D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private AudioSource audioSource;

	[Token(Token = "0x400158E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private Transform revolverHammer;

	[Token(Token = "0x400158F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private Vector3 cockedHammerEuler;

	[Token(Token = "0x4001590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	private Transform revolverCoil;

	[Token(Token = "0x4001591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	private Transform revolverChamber;

	[Token(Token = "0x4001592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	private Transform revolverTrigger;

	[Token(Token = "0x4001593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	[UnityEngine.Tooltip("Recoil settings component")]
	private HVRRecoil recoilComponent;

	[Token(Token = "0x4001594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	private TextMeshPro debugTMP;

	[Token(Token = "0x4001595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	private float reloadVelocityThreshold;

	[Token(Token = "0x4001596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	[SerializeField]
	private float reloadAngularThreshold;

	[Token(Token = "0x4001597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private float reloadRotation;

	[Token(Token = "0x4001598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	[SerializeField]
	[Header("Revolver_L3+ only")]
	private bool hasLaser;

	[Token(Token = "0x4001599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private Transform laserObject;

	[Token(Token = "0x400159A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[Header("Revolver_L4+ only")]
	[SerializeField]
	private bool explodingBullet;

	[Token(Token = "0x400159B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
	[SerializeField]
	[Header("Revolver_L5+ only")]
	private bool autoReload;

	[Token(Token = "0x400159C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	[SerializeField]
	private int ADSZoomLevel;

	[Token(Token = "0x400159D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private bool _explodingBulletActive;

	[Token(Token = "0x400159E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	private int bulletsLeft;

	[Token(Token = "0x400159F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private float triggerLerpValue;

	[Token(Token = "0x40015A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
	private Quaternion originalTriggerRotation;

	[Token(Token = "0x40015A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
	private Quaternion pulledTriggerRotation;

	[Token(Token = "0x40015A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	private float hammerLerpValue;

	[Token(Token = "0x40015A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private Quaternion originalHammerRotation;

	[Token(Token = "0x40015A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private Quaternion cockedHammerRotation;

	[Token(Token = "0x40015A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private float chamberLerpValue;

	[Token(Token = "0x40015A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
	private Quaternion originalChamberRotation;

	[Token(Token = "0x40015A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	private Quaternion currentChamberRotation;

	[Token(Token = "0x40015A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
	private Quaternion nextChamberRotation;

	[Token(Token = "0x40015A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
	private int chamberRotateIndex;

	[Token(Token = "0x40015AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private bool hasBeenInNeutralPosition;

	[Token(Token = "0x40015AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x271")]
	private bool releasedTrigger;

	[Token(Token = "0x40015AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
	private float lastShootTime;

	[Token(Token = "0x40015AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private Transform chamberRotationHelper;

	[Token(Token = "0x40015AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private float lastReloadTime;

	[Token(Token = "0x40015AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
	private float _reloadTimer;

	[Token(Token = "0x40015B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private Quaternion notReloadingRotation;

	[Token(Token = "0x40015B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private Quaternion reloadingRotation;

	[Token(Token = "0x40015B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private bool reloadStarted;

	[Token(Token = "0x40015B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
	private float _reloadDuration;

	[Token(Token = "0x40015B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private Transform reloadHelper;

	[Token(Token = "0x40015B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private float _reloadCooldownTime;

	[Token(Token = "0x40015B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	private Queue<float> _reloadVelocitySamples;

	[Token(Token = "0x40015B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	private Queue<float> _reloadAngularSamples;

	[Token(Token = "0x40015B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private AimIKTarget targetObjectScript;

	[Token(Token = "0x600180D")]
	[Address(RVA = "0x119EB60", Offset = "0x119EB60", VA = "0x119EB60", Slot = "56")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600180E")]
	[Address(RVA = "0x119F42C", Offset = "0x119F42C", VA = "0x119F42C", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x600180F")]
	[Address(RVA = "0x119F710", Offset = "0x119F710", VA = "0x119F710", Slot = "57")]
	protected override void Socketed(HVRSocket arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001810")]
	[Address(RVA = "0x119F830", Offset = "0x119F830", VA = "0x119F830", Slot = "58")]
	protected override void UnSocketed(HVRSocket arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001811")]
	[Address(RVA = "0x119FA7C", Offset = "0x119FA7C", VA = "0x119FA7C")]
	private void CheckIfTriggerAxisChanged()
	{
	}

	[Token(Token = "0x6001812")]
	[Address(RVA = "0x119F448", Offset = "0x119F448", VA = "0x119F448")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6001813")]
	[Address(RVA = "0x11A004C", Offset = "0x11A004C", VA = "0x11A004C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001814")]
	[Address(RVA = "0x11A0A78", Offset = "0x11A0A78", VA = "0x11A0A78")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001815")]
	[Address(RVA = "0x11A15B4", Offset = "0x11A15B4", VA = "0x11A15B4")]
	private void ReloadStart()
	{
	}

	[Token(Token = "0x6001816")]
	[Address(RVA = "0x11A177C", Offset = "0x11A177C", VA = "0x11A177C")]
	private void ReloadFinish()
	{
	}

	[Token(Token = "0x6001817")]
	[Address(RVA = "0x119FCE0", Offset = "0x119FCE0", VA = "0x119FCE0")]
	private void Shoot()
	{
	}

	[Token(Token = "0x6001818")]
	[Address(RVA = "0x11A191C", Offset = "0x11A191C", VA = "0x11A191C")]
	[PunRPC]
	private void ShootRPC(Vector3 shootBulletPosition, Quaternion shootBulletRotation, bool explosive)
	{
	}

	[Token(Token = "0x6001819")]
	[Address(RVA = "0x119F304", Offset = "0x119F304", VA = "0x119F304")]
	private void SetNextChamberRotations()
	{
	}

	[Token(Token = "0x600181A")]
	[Address(RVA = "0x11A1EC8", Offset = "0x11A1EC8", VA = "0x11A1EC8", Slot = "66")]
	protected virtual void Recoil()
	{
	}

	[Token(Token = "0x600181B")]
	[Address(RVA = "0x11A1F48", Offset = "0x11A1F48", VA = "0x11A1F48", Slot = "67")]
	protected virtual void RecoilFlat()
	{
	}

	[Token(Token = "0x600181C")]
	[Address(RVA = "0x11A1FCC", Offset = "0x11A1FCC", VA = "0x11A1FCC")]
	public void SetExplodingBullet(bool status)
	{
	}

	[Token(Token = "0x600181D")]
	[Address(RVA = "0x11A1FD8", Offset = "0x11A1FD8", VA = "0x11A1FD8", Slot = "68")]
	protected virtual void OnHandReleased(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600181E")]
	[Address(RVA = "0x119FC10", Offset = "0x119FC10", VA = "0x119FC10")]
	public bool IsMine()
	{
		return default(bool);
	}

	[Token(Token = "0x600181F")]
	[Address(RVA = "0x11A205C", Offset = "0x11A205C", VA = "0x11A205C", Slot = "69")]
	protected virtual void OnHandGrabbed(HVRHandGrabber hand, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001820")]
	[Address(RVA = "0x11A1918", Offset = "0x11A1918", VA = "0x11A1918")]
	private void SetPSVR2ControllerTrigger(HVRController controller, bool active)
	{
	}

	[Token(Token = "0x6001821")]
	[Address(RVA = "0x11A2090", Offset = "0x11A2090", VA = "0x11A2090")]
	public Transform GetBulletSpawnPoint()
	{
		return null;
	}

	[Token(Token = "0x6001822")]
	[Address(RVA = "0x11A2098", Offset = "0x11A2098", VA = "0x11A2098")]
	public void ShootPublic()
	{
	}

	[Token(Token = "0x6001823")]
	[Address(RVA = "0x11A209C", Offset = "0x11A209C", VA = "0x11A209C")]
	public void ReloadPublic()
	{
	}

	[Token(Token = "0x6001824")]
	[Address(RVA = "0x11A20A0", Offset = "0x11A20A0", VA = "0x11A20A0")]
	public void SetAimIKTarget(AimIKTarget target)
	{
	}

	[Token(Token = "0x6001825")]
	[Address(RVA = "0x11A20B0", Offset = "0x11A20B0", VA = "0x11A20B0")]
	public int GetADSZoomLevel()
	{
		return default(int);
	}

	[Token(Token = "0x6001826")]
	[Address(RVA = "0x11A20B8", Offset = "0x11A20B8", VA = "0x11A20B8")]
	public Revolver()
	{
	}
}
[Token(Token = "0x2000335")]
[RequireComponent(typeof(AudioSource))]
public class RevolverFuseThing : MonoBehaviour, IDamageable
{
	[Token(Token = "0x40015B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Revolver revolver;

	[Token(Token = "0x40015BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject fireFX;

	[Token(Token = "0x40015BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private DamageType takeDamageType;

	[Token(Token = "0x40015BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource flintBurningAudioSource;

	[Token(Token = "0x6001827")]
	[Address(RVA = "0x11A2240", Offset = "0x11A2240", VA = "0x11A2240")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001828")]
	[Address(RVA = "0x11A22A8", Offset = "0x11A22A8", VA = "0x11A22A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001829")]
	[Address(RVA = "0x11A233C", Offset = "0x11A233C", VA = "0x11A233C")]
	private void DisableAfterShot()
	{
	}

	[Token(Token = "0x600182A")]
	[Address(RVA = "0x11A23A8", Offset = "0x11A23A8", VA = "0x11A23A8", Slot = "4")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x600182B")]
	[Address(RVA = "0x11A2344", Offset = "0x11A2344", VA = "0x11A2344")]
	private void ToggleFire(bool value)
	{
	}

	[Token(Token = "0x600182C")]
	[Address(RVA = "0x11A2434", Offset = "0x11A2434", VA = "0x11A2434")]
	public RevolverFuseThing()
	{
	}
}
[Token(Token = "0x2000336")]
public class Shovel : Tool
{
	[Token(Token = "0x2000337")]
	[CompilerGenerated]
	private sealed class <DelayedCheckIfNeedHoming>d__51 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shovel <>4__this;

		[Token(Token = "0x170002D0")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001856")]
			[Address(RVA = "0x11A612C", Offset = "0x11A612C", VA = "0x11A612C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001858")]
			[Address(RVA = "0x11A6174", Offset = "0x11A6174", VA = "0x11A6174", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x11A3B3C", Offset = "0x11A3B3C", VA = "0x11A3B3C")]
		[DebuggerHidden]
		public <DelayedCheckIfNeedHoming>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0x11A5D60", Offset = "0x11A5D60", VA = "0x11A5D60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0x11A5D64", Offset = "0x11A5D64", VA = "0x11A5D64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x11A6134", Offset = "0x11A6134", VA = "0x11A6134", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000338")]
	[CompilerGenerated]
	private sealed class <LerpToTarget>d__52 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shovel <>4__this;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform target;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 velocity;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <timeSpent>5__2;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <startPos>5__3;

		[Token(Token = "0x170002D2")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600185C")]
			[Address(RVA = "0x11A66E4", Offset = "0x11A66E4", VA = "0x11A66E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600185E")]
			[Address(RVA = "0x11A672C", Offset = "0x11A672C", VA = "0x11A672C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x11A3C20", Offset = "0x11A3C20", VA = "0x11A3C20")]
		[DebuggerHidden]
		public <LerpToTarget>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x11A61D0", Offset = "0x11A61D0", VA = "0x11A61D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x11A61D4", Offset = "0x11A61D4", VA = "0x11A61D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x11A66EC", Offset = "0x11A66EC", VA = "0x11A66EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000339")]
	[CompilerGenerated]
	private sealed class <_PollIfPropGetsDestroyed>d__65 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Prop prop;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shovel <>4__this;

		[Token(Token = "0x170002D4")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001862")]
			[Address(RVA = "0x11A67E8", Offset = "0x11A67E8", VA = "0x11A67E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001864")]
			[Address(RVA = "0x11A6830", Offset = "0x11A6830", VA = "0x11A6830", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x11A5A5C", Offset = "0x11A5A5C", VA = "0x11A5A5C")]
		[DebuggerHidden]
		public <_PollIfPropGetsDestroyed>d__65(int <>1__state)
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x11A6788", Offset = "0x11A6788", VA = "0x11A6788", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x11A678C", Offset = "0x11A678C", VA = "0x11A678C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x11A67F0", Offset = "0x11A67F0", VA = "0x11A67F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200033A")]
	[CompilerGenerated]
	private sealed class <_MoveHookToPosition>d__71 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shovel <>4__this;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool raycastHitted;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public RaycastHit raycastHit;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool client;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <time>5__2;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 <originalPosition>5__3;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 <endPosition>5__4;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float <duration>5__5;

		[Token(Token = "0x170002D6")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001868")]
			[Address(RVA = "0x11A6C40", Offset = "0x11A6C40", VA = "0x11A6C40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600186A")]
			[Address(RVA = "0x11A6C88", Offset = "0x11A6C88", VA = "0x11A6C88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0x11A5B74", Offset = "0x11A5B74", VA = "0x11A5B74")]
		[DebuggerHidden]
		public <_MoveHookToPosition>d__71(int <>1__state)
		{
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0x11A688C", Offset = "0x11A688C", VA = "0x11A688C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x11A6890", Offset = "0x11A6890", VA = "0x11A6890", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0x11A6C48", Offset = "0x11A6C48", VA = "0x11A6C48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200033B")]
	[CompilerGenerated]
	private sealed class <_ReturnHook>d__73 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shovel <>4__this;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 <originalPosition>5__2;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <endPosition>5__3;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <time>5__4;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <duration>5__5;

		[Token(Token = "0x170002D8")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600186E")]
			[Address(RVA = "0x11A705C", Offset = "0x11A705C", VA = "0x11A705C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001870")]
			[Address(RVA = "0x11A70A4", Offset = "0x11A70A4", VA = "0x11A70A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0x11A5C04", Offset = "0x11A5C04", VA = "0x11A5C04")]
		[DebuggerHidden]
		public <_ReturnHook>d__73(int <>1__state)
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x11A6CE4", Offset = "0x11A6CE4", VA = "0x11A6CE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x11A6CE8", Offset = "0x11A6CE8", VA = "0x11A6CE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x11A7064", Offset = "0x11A7064", VA = "0x11A7064", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40015BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public int timesToDig;

	[Token(Token = "0x40015BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public int bonusLoot;

	[Token(Token = "0x40015BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[SerializeField]
	[Header("Homing")]
	private bool isHomingShovel;

	[Token(Token = "0x40015C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private LayerMask homingTargetLayer;

	[Token(Token = "0x40015C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[Min(0f)]
	[SerializeField]
	private float minimumVelocityToStartHoming;

	[Token(Token = "0x40015C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private Transform forwardDirectionHelper;

	[Token(Token = "0x40015C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private float homingSpeedMultiplier;

	[Token(Token = "0x40015C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[Header("Hook")]
	[SerializeField]
	private bool canShootHook;

	[Token(Token = "0x40015C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private GameObject hookObject;

	[Token(Token = "0x40015C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private float shootRange;

	[Token(Token = "0x40015C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[SerializeField]
	private float hookSpringForce;

	[Token(Token = "0x40015C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private float hookSpringDamper;

	[Token(Token = "0x40015C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	[SerializeField]
	private float hookSpringMaxForce;

	[Token(Token = "0x40015CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private float hookSpeed;

	[Token(Token = "0x40015CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[SerializeField]
	private float hookSightScaleDivider;

	[Token(Token = "0x40015CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private GameObject hookSightObject;

	[Token(Token = "0x40015CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private Transform hookLineRendererStartPosition;

	[Token(Token = "0x40015CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private Transform hookRaycastStartPosition;

	[Token(Token = "0x40015CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private AudioSource hookAudioSource;

	[Token(Token = "0x40015D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private AudioClip hookShootClip;

	[Token(Token = "0x40015D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	private AudioClip hookReelClip;

	[Token(Token = "0x40015D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private AudioClip hookShootVibrationClip;

	[Token(Token = "0x40015D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	private AudioClip hookReelVibrationClip;

	[Token(Token = "0x40015D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Transform _homingTarget;

	[Token(Token = "0x40015D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private List<Transform> _homingBlacklist;

	[Token(Token = "0x40015D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private List<Collider> _ignoredColliders;

	[Token(Token = "0x40015D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private LineRenderer _debugLine;

	[Token(Token = "0x40015D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool _debugging;

	[Token(Token = "0x40015D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private CoroutineHandle _coroutineHandle;

	[Token(Token = "0x40015DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Quaternion hookObjectOriginalLocalRotation;

	[Token(Token = "0x40015DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private ConfigurableJoint configJoint;

	[Token(Token = "0x40015DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private FixedJoint fixedJoint;

	[Token(Token = "0x40015DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Vector3 hookObjectOriginalLocalPosition;

	[Token(Token = "0x40015DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private Rigidbody hookObjectRB;

	[Token(Token = "0x40015DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private LineRenderer hookLineRenderer;

	[Token(Token = "0x40015E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private CoroutineHandle moveHookCoroutine;

	[Token(Token = "0x40015E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private CoroutineHandle pollPropDestructionCoroutine;

	[Token(Token = "0x40015E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private bool shovelSpadeConnectedToSomething;

	[Token(Token = "0x40015E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
	private bool hookReturning;

	[Token(Token = "0x40015E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DA")]
	private bool hookShooting;

	[Token(Token = "0x40015E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DB")]
	private bool updateChainLineRenderer;

	[Token(Token = "0x40015E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	private bool updateSight;

	[Token(Token = "0x40015E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DD")]
	private bool waitUntilTriggerIsReleasedToShoot;

	[Token(Token = "0x40015E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DE")]
	private bool flatTriggerPressed;

	[Token(Token = "0x600182D")]
	[Address(RVA = "0x11A243C", Offset = "0x11A243C", VA = "0x11A243C", Slot = "56")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600182E")]
	[Address(RVA = "0x11A24B0", Offset = "0x11A24B0", VA = "0x11A24B0", Slot = "62")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600182F")]
	[Address(RVA = "0x11A2778", Offset = "0x11A2778", VA = "0x11A2778", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6001830")]
	[Address(RVA = "0x11A2874", Offset = "0x11A2874", VA = "0x11A2874", Slot = "61")]
	protected override void HandReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001831")]
	[Address(RVA = "0x11A2DE0", Offset = "0x11A2DE0", VA = "0x11A2DE0", Slot = "60")]
	protected override void HandGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001832")]
	[Address(RVA = "0x11A31B8", Offset = "0x11A31B8", VA = "0x11A31B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001833")]
	[Address(RVA = "0x11A3A14", Offset = "0x11A3A14", VA = "0x11A3A14")]
	public void CheckIfNeedHoming()
	{
	}

	[Token(Token = "0x6001834")]
	[Address(RVA = "0x11A3AC8", Offset = "0x11A3AC8", VA = "0x11A3AC8")]
	[IteratorStateMachine(typeof(<DelayedCheckIfNeedHoming>d__51))]
	private IEnumerator<float> DelayedCheckIfNeedHoming()
	{
		return null;
	}

	[Token(Token = "0x6001835")]
	[Address(RVA = "0x11A3B64", Offset = "0x11A3B64", VA = "0x11A3B64")]
	[IteratorStateMachine(typeof(<LerpToTarget>d__52))]
	private IEnumerator<float> LerpToTarget(Transform target, float time, Vector3 velocity)
	{
		return null;
	}

	[Token(Token = "0x6001836")]
	[Address(RVA = "0x11A2794", Offset = "0x11A2794", VA = "0x11A2794")]
	public void ClearHomingTarget()
	{
	}

	[Token(Token = "0x6001837")]
	[Address(RVA = "0x11A3C48", Offset = "0x11A3C48", VA = "0x11A3C48")]
	private Transform DetectHomingTarget(Vector3 direction)
	{
		return null;
	}

	[Token(Token = "0x6001838")]
	[Address(RVA = "0x11A4280", Offset = "0x11A4280", VA = "0x11A4280")]
	private void DebuggingLine(Transform closestHit)
	{
	}

	[Token(Token = "0x6001839")]
	[Address(RVA = "0x11A3F14", Offset = "0x11A3F14", VA = "0x11A3F14")]
	private Transform GetClosestHit(RaycastHit[] targets)
	{
		return null;
	}

	[Token(Token = "0x600183A")]
	[Address(RVA = "0x11A4284", Offset = "0x11A4284", VA = "0x11A4284", Slot = "63")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600183B")]
	[Address(RVA = "0x11A3760", Offset = "0x11A3760", VA = "0x11A3760")]
	private void UpdateSight()
	{
	}

	[Token(Token = "0x600183C")]
	[Address(RVA = "0x11A33DC", Offset = "0x11A33DC", VA = "0x11A33DC")]
	private void CheckIfTriggerAxisChanged()
	{
	}

	[Token(Token = "0x600183D")]
	[Address(RVA = "0x11A5000", Offset = "0x11A5000", VA = "0x11A5000")]
	private void ReturnHook()
	{
	}

	[Token(Token = "0x600183E")]
	[Address(RVA = "0x11A4C10", Offset = "0x11A4C10", VA = "0x11A4C10")]
	private void Shoot(bool client = false)
	{
	}

	[Token(Token = "0x600183F")]
	[Address(RVA = "0x11A539C", Offset = "0x11A539C", VA = "0x11A539C")]
	[PunRPC]
	private void ShootRPC(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x6001840")]
	[Address(RVA = "0x11A5478", Offset = "0x11A5478", VA = "0x11A5478")]
	private void AttachHook(RaycastHit hit, bool client)
	{
	}

	[Token(Token = "0x6001841")]
	[Address(RVA = "0x11A5574", Offset = "0x11A5574", VA = "0x11A5574")]
	private bool AttachSwingObject(RaycastHit hit, bool client)
	{
		return default(bool);
	}

	[Token(Token = "0x6001842")]
	[Address(RVA = "0x11A59CC", Offset = "0x11A59CC", VA = "0x11A59CC")]
	[IteratorStateMachine(typeof(<_PollIfPropGetsDestroyed>d__65))]
	private IEnumerator<float> _PollIfPropGetsDestroyed(Prop prop)
	{
		return null;
	}

	[Token(Token = "0x6001843")]
	[Address(RVA = "0x11A513C", Offset = "0x11A513C", VA = "0x11A513C")]
	private void RemoveSwingObjectFixedJoint()
	{
	}

	[Token(Token = "0x6001844")]
	[Address(RVA = "0x11A51D8", Offset = "0x11A51D8", VA = "0x11A51D8")]
	private void DestroyJoint()
	{
	}

	[Token(Token = "0x6001845")]
	[Address(RVA = "0x11A26D0", Offset = "0x11A26D0", VA = "0x11A26D0")]
	private void UpdateHookLineRenderer(Vector3 point1, Vector3 point2)
	{
	}

	[Token(Token = "0x6001846")]
	[Address(RVA = "0x11A5828", Offset = "0x11A5828", VA = "0x11A5828")]
	private void MakeNewJoint(Vector3 point)
	{
	}

	[Token(Token = "0x6001847")]
	[Address(RVA = "0x11A2D54", Offset = "0x11A2D54", VA = "0x11A2D54")]
	private void ForceHookBack()
	{
	}

	[Token(Token = "0x6001848")]
	[Address(RVA = "0x11A52E0", Offset = "0x11A52E0", VA = "0x11A52E0")]
	[IteratorStateMachine(typeof(<_MoveHookToPosition>d__71))]
	private IEnumerator<float> _MoveHookToPosition(RaycastHit raycastHit, bool raycastHitted, bool client)
	{
		return null;
	}

	[Token(Token = "0x6001849")]
	[Address(RVA = "0x11A5B9C", Offset = "0x11A5B9C", VA = "0x11A5B9C")]
	[PunRPC]
	private void ReturnHookRPC()
	{
	}

	[Token(Token = "0x600184A")]
	[Address(RVA = "0x11A5268", Offset = "0x11A5268", VA = "0x11A5268")]
	[IteratorStateMachine(typeof(<_ReturnHook>d__73))]
	private IEnumerator<float> _ReturnHook()
	{
		return null;
	}

	[Token(Token = "0x600184B")]
	[Address(RVA = "0x11A5A84", Offset = "0x11A5A84", VA = "0x11A5A84")]
	private void AttachHookBackToShovel()
	{
	}

	[Token(Token = "0x600184C")]
	[Address(RVA = "0x11A2DDC", Offset = "0x11A2DDC", VA = "0x11A2DDC")]
	private void SetPSVR2ControllerTrigger(HVRController controller, bool active)
	{
	}

	[Token(Token = "0x600184D")]
	[Address(RVA = "0x11A52DC", Offset = "0x11A52DC", VA = "0x11A52DC")]
	private void SetPSVRControllersTriggerForGrabbers(bool active)
	{
	}

	[Token(Token = "0x600184E")]
	[Address(RVA = "0x11A5C2C", Offset = "0x11A5C2C", VA = "0x11A5C2C")]
	public Transform GetForwardHelper()
	{
		return null;
	}

	[Token(Token = "0x600184F")]
	[Address(RVA = "0x11A5C34", Offset = "0x11A5C34", VA = "0x11A5C34")]
	public void TriggerPress(bool pressed)
	{
	}

	[Token(Token = "0x6001850")]
	[Address(RVA = "0x11A5C40", Offset = "0x11A5C40", VA = "0x11A5C40")]
	public Shovel()
	{
	}
}
[Token(Token = "0x200033C")]
public class ShovelSpade : MonoBehaviour
{
	[Token(Token = "0x4001609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Shovel shovel;

	[Token(Token = "0x6001871")]
	[Address(RVA = "0x11A7100", Offset = "0x11A7100", VA = "0x11A7100")]
	private void Start()
	{
	}

	[Token(Token = "0x6001872")]
	[Address(RVA = "0x11A71AC", Offset = "0x11A71AC", VA = "0x11A71AC")]
	public ShovelSpade()
	{
	}
}
[Token(Token = "0x200033D")]
public class Sledgehammer : Tool
{
	[Token(Token = "0x200033E")]
	[CompilerGenerated]
	private sealed class <RocketingCoroutine>d__23 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sledgehammer <>4__this;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x170002DA")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001888")]
			[Address(RVA = "0x11A8760", Offset = "0x11A8760", VA = "0x11A8760", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002DB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600188A")]
			[Address(RVA = "0x11A87A8", Offset = "0x11A87A8", VA = "0x11A87A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x11A7944", Offset = "0x11A7944", VA = "0x11A7944")]
		[DebuggerHidden]
		public <RocketingCoroutine>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0x11A818C", Offset = "0x11A818C", VA = "0x11A818C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x11A8190", Offset = "0x11A8190", VA = "0x11A8190", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0x11A8768", Offset = "0x11A8768", VA = "0x11A8768", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400160A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	[SerializeField]
	private bool rocketSledge;

	[Token(Token = "0x400160B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[SerializeField]
	private float rocketForce;

	[Token(Token = "0x400160C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private float rocketForceWhileGrabbed;

	[Token(Token = "0x400160D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[SerializeField]
	private float rocketDuration;

	[Token(Token = "0x400160E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private ParticleSystem rocketParticle;

	[Token(Token = "0x400160F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private AudioSource rocketAudioSource;

	[Token(Token = "0x4001610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private AudioClip rocketVibrationClip;

	[Token(Token = "0x4001611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private bool shockwaveDealsDamage;

	[Token(Token = "0x4001612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public ToolDeformer toolDeformer;

	[Token(Token = "0x4001613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Collider[] hammerheadColliders;

	[Token(Token = "0x4001614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public LayerMask impactPhysicsPushLayers;

	[Token(Token = "0x4001615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public ParticleSystem impactParticle;

	[Token(Token = "0x4001616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public AudioClip impactClip;

	[Token(Token = "0x4001617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Collider[] _impactColliders;

	[Token(Token = "0x4001618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float _lastRocketTime;

	[Token(Token = "0x6001873")]
	[Address(RVA = "0x11A71B4", Offset = "0x11A71B4", VA = "0x11A71B4", Slot = "56")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001874")]
	[Address(RVA = "0x11A71B8", Offset = "0x11A71B8", VA = "0x11A71B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001875")]
	[Address(RVA = "0x11A7260", Offset = "0x11A7260", VA = "0x11A7260", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6001876")]
	[Address(RVA = "0x11A7314", Offset = "0x11A7314", VA = "0x11A7314", Slot = "60")]
	protected override void HandGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001877")]
	[Address(RVA = "0x11A733C", Offset = "0x11A733C", VA = "0x11A733C", Slot = "61")]
	protected override void HandReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001878")]
	[Address(RVA = "0x11A7694", Offset = "0x11A7694", VA = "0x11A7694", Slot = "66")]
	protected virtual void CheckTriggerPull()
	{
	}

	[Token(Token = "0x6001879")]
	[Address(RVA = "0x11A7838", Offset = "0x11A7838", VA = "0x11A7838")]
	private void TriggerPulled()
	{
	}

	[Token(Token = "0x600187A")]
	[Address(RVA = "0x11A721C", Offset = "0x11A721C", VA = "0x11A721C")]
	private bool CheckCanUseRocket()
	{
		return default(bool);
	}

	[Token(Token = "0x600187B")]
	[Address(RVA = "0x11A78D0", Offset = "0x11A78D0", VA = "0x11A78D0")]
	[IteratorStateMachine(typeof(<RocketingCoroutine>d__23))]
	private IEnumerator<float> RocketingCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600187C")]
	[Address(RVA = "0x11A796C", Offset = "0x11A796C", VA = "0x11A796C")]
	private void RepanVibration(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600187D")]
	[Address(RVA = "0x11A7A14", Offset = "0x11A7A14", VA = "0x11A7A14")]
	private void DisableSlippery(HVRHandGrabber arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x600187E")]
	[Address(RVA = "0x11A7AF0", Offset = "0x11A7AF0", VA = "0x11A7AF0")]
	[PunRPC]
	public void RockeEffectsRPC(bool play)
	{
	}

	[Token(Token = "0x600187F")]
	[Address(RVA = "0x11A7B30", Offset = "0x11A7B30", VA = "0x11A7B30")]
	[PunRPC]
	public void EffectsRPC(bool front)
	{
	}

	[Token(Token = "0x6001880")]
	[Address(RVA = "0x11A7B4C", Offset = "0x11A7B4C", VA = "0x11A7B4C", Slot = "65")]
	protected override void ImpactHitEffects(float volume, float collisionImpactForce, Collision collision)
	{
	}

	[Token(Token = "0x6001881")]
	[Address(RVA = "0x11A8050", Offset = "0x11A8050", VA = "0x11A8050")]
	private bool MatchToHead(Collider thisCollider)
	{
		return default(bool);
	}

	[Token(Token = "0x6001882")]
	[Address(RVA = "0x11A7690", Offset = "0x11A7690", VA = "0x11A7690")]
	private void SetPSVR2ControllerTrigger(HVRController controller, bool active)
	{
	}

	[Token(Token = "0x6001883")]
	[Address(RVA = "0x11A725C", Offset = "0x11A725C", VA = "0x11A725C")]
	private void SetPSVRControllersTriggerForGrabbers(bool active)
	{
	}

	[Token(Token = "0x6001884")]
	[Address(RVA = "0x11A8118", Offset = "0x11A8118", VA = "0x11A8118")]
	public Sledgehammer()
	{
	}
}
[Token(Token = "0x200033F")]
public class Tool : MonoBehaviourPunCallbacks, IOnPhotonViewControllerChange, IPhotonViewCallback, ICollisionDamageDealer
{
	[Token(Token = "0x2000340")]
	public enum ToolType
	{
		[Token(Token = "0x4001642")]
		None,
		[Token(Token = "0x4001643")]
		Pickaxe,
		[Token(Token = "0x4001644")]
		Dynamite,
		[Token(Token = "0x4001645")]
		Detector,
		[Token(Token = "0x4001646")]
		GoldPan,
		[Token(Token = "0x4001647")]
		Revolver,
		[Token(Token = "0x4001648")]
		Shovel,
		[Token(Token = "0x4001649")]
		SledgeHammer
	}

	[Token(Token = "0x2000341")]
	[CompilerGenerated]
	private sealed class <_PSPollForManualRelease>d__52 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRGrabberBase arg0;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Tool <>4__this;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HVRController <controller>5__2;

		[Token(Token = "0x170002E0")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60018AF")]
			[Address(RVA = "0x11A9AF0", Offset = "0x11A9AF0", VA = "0x11A9AF0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018B1")]
			[Address(RVA = "0x11A9B38", Offset = "0x11A9B38", VA = "0x11A9B38", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0x11A9244", Offset = "0x11A9244", VA = "0x11A9244")]
		[DebuggerHidden]
		public <_PSPollForManualRelease>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x11A9914", Offset = "0x11A9914", VA = "0x11A9914", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x11A9918", Offset = "0x11A9918", VA = "0x11A9918", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x11A9AF8", Offset = "0x11A9AF8", VA = "0x11A9AF8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000342")]
	[CompilerGenerated]
	private sealed class <_WaitForOwnerShipAndDestroy>d__66 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Tool <>4__this;

		[Token(Token = "0x170002E2")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60018B5")]
			[Address(RVA = "0x11A9EA8", Offset = "0x11A9EA8", VA = "0x11A9EA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018B7")]
			[Address(RVA = "0x11A9EF0", Offset = "0x11A9EF0", VA = "0x11A9EF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x11A97D4", Offset = "0x11A97D4", VA = "0x11A97D4")]
		[DebuggerHidden]
		public <_WaitForOwnerShipAndDestroy>d__66(int <>1__state)
		{
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x11A9B94", Offset = "0x11A9B94", VA = "0x11A9B94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x11A9B98", Offset = "0x11A9B98", VA = "0x11A9B98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x11A9EB0", Offset = "0x11A9EB0", VA = "0x11A9EB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400161D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ToolType myToolType;

	[Token(Token = "0x400161E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("Upgrade tier/level of the tool")]
	[Min(1f)]
	public int toolTier;

	[Token(Token = "0x400161F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Min(1f)]
	[UnityEngine.Tooltip("Damage in points to make to enemy")]
	public int damage;

	[Token(Token = "0x4001620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minVelocityToMakeDamage;

	[Token(Token = "0x4001621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minAngularVelocityToMakeDamage;

	[Token(Token = "0x4001622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public DamageType damageType;

	[Token(Token = "0x4001623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool canBeKnockedByProjectile;

	[Token(Token = "0x4001624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioClip[] impactClips;

	[Token(Token = "0x4001625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool throwingDoesHalfDamage;

	[Token(Token = "0x4001626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[SerializeField]
	private bool meleeDamageIs1;

	[Token(Token = "0x4001627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystem[] _particlesSystems;

	[Token(Token = "0x4001628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float[] aimIKBoneWeights;

	[Token(Token = "0x4001629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform leftHandIKTarget;

	[Token(Token = "0x400162A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public bool toolShedTool;

	[Token(Token = "0x400162B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool _speciallyGenerated;

	[Token(Token = "0x400162C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected SmoothSyncPUN2 smoothSync;

	[Token(Token = "0x400162D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected BetterVelocityEstimator velocityEstimator;

	[Token(Token = "0x400162E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 spawnPosition;

	[Token(Token = "0x400162F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected float damageCooldownTime;

	[Token(Token = "0x4001630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected HVRGrabbable myHVRGrabbable;

	[Token(Token = "0x4001631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected Rigidbody myRB;

	[Token(Token = "0x4001632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected new PhotonView photonView;

	[Token(Token = "0x4001633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected System.Action damageImpactAction;

	[Token(Token = "0x4001634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ToolSocketHelper myToolSocketHelper;

	[Token(Token = "0x4001635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected bool isSocketed;

	[Token(Token = "0x4001636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float lastCollisionTime;

	[Token(Token = "0x4001637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool alwaysShowGhostInSocket;

	[Token(Token = "0x4001638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	public bool inHand;

	[Token(Token = "0x4001639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	[UnityEngine.Tooltip("How many items on socket. -1 = Infinite, else it is limited and shows counter on socket.")]
	private int maxSocketAmount;

	[Token(Token = "0x400163A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public bool Used;

	[Token(Token = "0x400163B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private CoroutineHandle leftHandPollCoroutine;

	[Token(Token = "0x400163C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private CoroutineHandle rightHandPollCoroutine;

	[Token(Token = "0x400163D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	protected bool leftHandCoroutineRunning;

	[Token(Token = "0x400163E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	protected bool rightHandCoroutineRunning;

	[Token(Token = "0x400163F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected HVRController lastController;

	[Token(Token = "0x4001640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected bool canBeUsed;

	[Token(Token = "0x170002DC")]
	[HideInInspector]
	public bool SpeciallyGenerated
	{
		[Token(Token = "0x600188B")]
		[Address(RVA = "0x11A8804", Offset = "0x11A8804", VA = "0x11A8804")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600188C")]
		[Address(RVA = "0x11A880C", Offset = "0x11A880C", VA = "0x11A880C")]
		set
		{
		}
	}

	[Token(Token = "0x170002DD")]
	public bool IsSocketed
	{
		[Token(Token = "0x600188D")]
		[Address(RVA = "0x11A8960", Offset = "0x11A8960", VA = "0x11A8960")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002DE")]
	public int MaxSocketAmount
	{
		[Token(Token = "0x600188E")]
		[Address(RVA = "0x11A8968", Offset = "0x11A8968", VA = "0x11A8968")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002DF")]
	public virtual bool CanBeSlotted
	{
		[Token(Token = "0x600188F")]
		[Address(RVA = "0x11A8970", Offset = "0x11A8970", VA = "0x11A8970", Slot = "55")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001890")]
	[Address(RVA = "0x119EF8C", Offset = "0x119EF8C", VA = "0x119EF8C", Slot = "56")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001891")]
	[Address(RVA = "0x119F7A8", Offset = "0x119F7A8", VA = "0x119F7A8", Slot = "57")]
	protected virtual void Socketed(HVRSocket arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001892")]
	[Address(RVA = "0x119F8C8", Offset = "0x119F8C8", VA = "0x119F8C8", Slot = "58")]
	protected virtual void UnSocketed(HVRSocket arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001893")]
	[Address(RVA = "0x11A8F5C", Offset = "0x11A8F5C", VA = "0x11A8F5C", Slot = "59")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6001894")]
	[Address(RVA = "0x11A2E94", Offset = "0x11A2E94", VA = "0x11A2E94", Slot = "60")]
	protected virtual void HandGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001895")]
	[Address(RVA = "0x11A2CA0", Offset = "0x11A2CA0", VA = "0x11A2CA0", Slot = "61")]
	protected virtual void HandReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x6001896")]
	[Address(RVA = "0x11A91B4", Offset = "0x11A91B4", VA = "0x11A91B4")]
	[IteratorStateMachine(typeof(<_PSPollForManualRelease>d__52))]
	private IEnumerator<float> _PSPollForManualRelease(HVRGrabberBase arg0)
	{
		return null;
	}

	[Token(Token = "0x6001897")]
	[Address(RVA = "0x119E4B0", Offset = "0x119E4B0", VA = "0x119E4B0", Slot = "62")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6001898")]
	[Address(RVA = "0x11A926C", Offset = "0x11A926C", VA = "0x11A926C")]
	public void RestartPosition()
	{
	}

	[Token(Token = "0x6001899")]
	[Address(RVA = "0x11A43B8", Offset = "0x11A43B8", VA = "0x11A43B8", Slot = "63")]
	protected virtual void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600189A")]
	[Address(RVA = "0x119E7C4", Offset = "0x119E7C4", VA = "0x119E7C4", Slot = "64")]
	protected virtual void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x600189B")]
	[Address(RVA = "0x11A7F38", Offset = "0x11A7F38", VA = "0x11A7F38", Slot = "65")]
	protected virtual void ImpactHitEffects(float volume, float collisionImpactForce, Collision collision)
	{
	}

	[Token(Token = "0x600189C")]
	[Address(RVA = "0x11A8978", Offset = "0x11A8978", VA = "0x11A8978")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x600189D")]
	[Address(RVA = "0x11A8E4C", Offset = "0x11A8E4C", VA = "0x11A8E4C")]
	public void SetParticleSystemsActive(bool status)
	{
	}

	[Token(Token = "0x600189E")]
	[Address(RVA = "0x11A92A4", Offset = "0x11A92A4", VA = "0x11A92A4")]
	public Vector3 GetCurrentVelocityEstimation()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600189F")]
	[Address(RVA = "0x11A92C4", Offset = "0x11A92C4", VA = "0x11A92C4")]
	public HVRGrabbable GetHVRGrabbable()
	{
		return null;
	}

	[Token(Token = "0x60018A0")]
	[Address(RVA = "0x11A92CC", Offset = "0x11A92CC", VA = "0x11A92CC")]
	public ToolSocketHelper GetMyToolSocketHelper()
	{
		return null;
	}

	[Token(Token = "0x60018A1")]
	[Address(RVA = "0x11A93E4", Offset = "0x11A93E4", VA = "0x11A93E4")]
	[PunRPC]
	public void SyncSpeciallyGeneratedRPC(bool status)
	{
	}

	[Token(Token = "0x60018A2")]
	[Address(RVA = "0x11A93F0", Offset = "0x11A93F0", VA = "0x11A93F0")]
	public Rigidbody GetMyRB()
	{
		return null;
	}

	[Token(Token = "0x60018A3")]
	[Address(RVA = "0x11A94E8", Offset = "0x11A94E8", VA = "0x11A94E8")]
	public void DeparentAndDestroy()
	{
	}

	[Token(Token = "0x60018A4")]
	[Address(RVA = "0x11A9760", Offset = "0x11A9760", VA = "0x11A9760")]
	[IteratorStateMachine(typeof(<_WaitForOwnerShipAndDestroy>d__66))]
	private IEnumerator<float> _WaitForOwnerShipAndDestroy()
	{
		return null;
	}

	[Token(Token = "0x60018A5")]
	[Address(RVA = "0x11A97FC", Offset = "0x11A97FC", VA = "0x11A97FC")]
	[PunRPC]
	protected void ReleaseAndTransferOwnerShipToRPC(int newOwner)
	{
	}

	[Token(Token = "0x60018A6")]
	[Address(RVA = "0x11A8F28", Offset = "0x11A8F28", VA = "0x11A8F28")]
	[PunRPC]
	public void SetKinematicRPC(bool status)
	{
	}

	[Token(Token = "0x60018A7")]
	[Address(RVA = "0x11A983C", Offset = "0x11A983C", VA = "0x11A983C", Slot = "54")]
	public void OnControllerChange(Player newController, Player previousController)
	{
	}

	[Token(Token = "0x60018A8")]
	[Address(RVA = "0x11A9840", Offset = "0x11A9840", VA = "0x11A9840")]
	private void MakeKinematicForOthers(Player newController)
	{
	}

	[Token(Token = "0x60018A9")]
	[Address(RVA = "0x11A9904", Offset = "0x11A9904", VA = "0x11A9904")]
	public float[] GetBoneWeights()
	{
		return null;
	}

	[Token(Token = "0x60018AA")]
	[Address(RVA = "0x11A990C", Offset = "0x11A990C", VA = "0x11A990C")]
	public Transform GetLeftHandIKTarget()
	{
		return null;
	}

	[Token(Token = "0x60018AB")]
	[Address(RVA = "0x119EAD4", Offset = "0x119EAD4", VA = "0x119EAD4")]
	public Tool()
	{
	}
}
[Token(Token = "0x2000343")]
[RequireComponent(typeof(HVRGrabbable))]
public class ToolGhostModel : MonoBehaviour
{
	[Token(Token = "0x2000344")]
	[CompilerGenerated]
	private sealed class <_Grabbed>d__17 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolGhostModel <>4__this;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRGrabberBase arg0;

		[Token(Token = "0x170002E5")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60018CE")]
			[Address(RVA = "0x11AB2B8", Offset = "0x11AB2B8", VA = "0x11AB2B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018D0")]
			[Address(RVA = "0x11AB300", Offset = "0x11AB300", VA = "0x11AB300", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x11AA9CC", Offset = "0x11AA9CC", VA = "0x11AA9CC")]
		[DebuggerHidden]
		public <_Grabbed>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x11AAE94", Offset = "0x11AAE94", VA = "0x11AAE94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x11AAE98", Offset = "0x11AAE98", VA = "0x11AAE98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x11AB2C0", Offset = "0x11AB2C0", VA = "0x11AB2C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject myRenderer;

	[Token(Token = "0x4001653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] extraRenderers;

	[Token(Token = "0x4001654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject myGrabbingCollider;

	[Token(Token = "0x4001655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabbingColliderSize;

	[Token(Token = "0x4001656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private HVRGrabbable parentObjectHVRGrabbable;

	[Token(Token = "0x4001657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private HVRGrabbable myHVRGrabbable;

	[Token(Token = "0x4001658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private HVRSocket previousSocket;

	[Token(Token = "0x4001659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Tool myParentTool;

	[Token(Token = "0x400165A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool ghostModelActive;

	[Token(Token = "0x400165B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int myParentMaxSocketAmount;

	[Token(Token = "0x170002E4")]
	public HVRSocket GetSocket
	{
		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x11A9F4C", Offset = "0x11A9F4C", VA = "0x11A9F4C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60018B9")]
	[Address(RVA = "0x11A9F54", Offset = "0x11A9F54", VA = "0x11A9F54")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018BA")]
	[Address(RVA = "0x11AA3D0", Offset = "0x11AA3D0", VA = "0x11AA3D0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60018BB")]
	[Address(RVA = "0x11AA5E4", Offset = "0x11AA5E4", VA = "0x11AA5E4")]
	private void ParentGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60018BC")]
	[Address(RVA = "0x11AA768", Offset = "0x11AA768", VA = "0x11AA768")]
	private void Start()
	{
	}

	[Token(Token = "0x60018BD")]
	[Address(RVA = "0x11AA79C", Offset = "0x11AA79C", VA = "0x11AA79C")]
	private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60018BE")]
	[Address(RVA = "0x11AA93C", Offset = "0x11AA93C", VA = "0x11AA93C")]
	[IteratorStateMachine(typeof(<_Grabbed>d__17))]
	private IEnumerator<float> _Grabbed(HVRGrabberBase arg0)
	{
		return null;
	}

	[Token(Token = "0x60018BF")]
	[Address(RVA = "0x11AA9F4", Offset = "0x11AA9F4", VA = "0x11AA9F4")]
	public void ParentSocketed(HVRSocket arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60018C0")]
	[Address(RVA = "0x11AAD04", Offset = "0x11AAD04", VA = "0x11AAD04")]
	private bool ShouldGhostModelBeDisabled()
	{
		return default(bool);
	}

	[Token(Token = "0x60018C1")]
	[Address(RVA = "0x11AADC4", Offset = "0x11AADC4", VA = "0x11AADC4")]
	public void ParentUnSocketed(HVRSocket arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60018C2")]
	[Address(RVA = "0x11AADFC", Offset = "0x11AADFC", VA = "0x11AADFC")]
	public void SetScale(Vector3 newLocalScale)
	{
	}

	[Token(Token = "0x60018C3")]
	[Address(RVA = "0x11AA688", Offset = "0x11AA688", VA = "0x11AA688")]
	public void ToggleGhost(bool active)
	{
	}

	[Token(Token = "0x60018C4")]
	[Address(RVA = "0x11AAE50", Offset = "0x11AAE50", VA = "0x11AAE50")]
	public HVRGrabbable GetMyParentHVRGrabbable()
	{
		return null;
	}

	[Token(Token = "0x60018C5")]
	[Address(RVA = "0x11A9D04", Offset = "0x11A9D04", VA = "0x11A9D04")]
	public void ReparentToOriginalAndToggleOff()
	{
	}

	[Token(Token = "0x60018C6")]
	[Address(RVA = "0x11AAE58", Offset = "0x11AAE58", VA = "0x11AAE58")]
	public bool IsGhostModelActive()
	{
		return default(bool);
	}

	[Token(Token = "0x60018C7")]
	[Address(RVA = "0x11AAE60", Offset = "0x11AAE60", VA = "0x11AAE60")]
	public HVRSocket GetPreviousParentSocket()
	{
		return null;
	}

	[Token(Token = "0x60018C8")]
	[Address(RVA = "0x11AAE68", Offset = "0x11AAE68", VA = "0x11AAE68")]
	public Tool GetGhostModelParentTool()
	{
		return null;
	}

	[Token(Token = "0x60018C9")]
	[Address(RVA = "0x11AAE70", Offset = "0x11AAE70", VA = "0x11AAE70")]
	public HVRGrabbable GetMyHVRGrabbable()
	{
		return null;
	}

	[Token(Token = "0x60018CA")]
	[Address(RVA = "0x11AAE78", Offset = "0x11AAE78", VA = "0x11AAE78")]
	public ToolGhostModel()
	{
	}
}
[Token(Token = "0x2000345")]
[RequireComponent(typeof(Tool))]
[RequireComponent(typeof(HVRGrabbable))]
public class ToolSocketHelper : MonoBehaviour
{
	[Token(Token = "0x2000346")]
	[CompilerGenerated]
	private sealed class <_CheckObjectDestroy>d__11 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolSocketHelper <>4__this;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x170002E7")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60018DE")]
			[Address(RVA = "0x11ABBC4", Offset = "0x11ABBC4", VA = "0x11ABBC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0x11ABC0C", Offset = "0x11ABC0C", VA = "0x11ABC0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x11AB930", Offset = "0x11AB930", VA = "0x11AB930")]
		[DebuggerHidden]
		public <_CheckObjectDestroy>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0x11ABA14", Offset = "0x11ABA14", VA = "0x11ABA14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0x11ABA18", Offset = "0x11ABA18", VA = "0x11ABA18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0x11ABBCC", Offset = "0x11ABBCC", VA = "0x11ABBCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000347")]
	[CompilerGenerated]
	private sealed class <_FlybackToToolShedPosition>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolSocketHelper <>4__this;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float flyTime;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <time>5__2;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <newPosition>5__3;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion <newRotation>5__4;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <oldPosition>5__5;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion <oldRotation>5__6;

		[Token(Token = "0x170002E9")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60018E4")]
			[Address(RVA = "0x11ABF1C", Offset = "0x11ABF1C", VA = "0x11ABF1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002EA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0x11ABF64", Offset = "0x11ABF64", VA = "0x11ABF64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0x11AB9DC", Offset = "0x11AB9DC", VA = "0x11AB9DC")]
		[DebuggerHidden]
		public <_FlybackToToolShedPosition>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0x11ABC68", Offset = "0x11ABC68", VA = "0x11ABC68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x11ABC6C", Offset = "0x11ABC6C", VA = "0x11ABC6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0x11ABF24", Offset = "0x11ABF24", VA = "0x11ABF24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ToolGhostModel myToolGhostModel;

	[Token(Token = "0x4001661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HVRGrabbable myHVRGrabbable;

	[Token(Token = "0x4001662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Tool myTool;

	[Token(Token = "0x4001663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CustomItemSocketable customItemSocketable;

	[Token(Token = "0x4001664")]
	private const string checkDestroyCoroutine = "CheckDestroyCoroutine";

	[Token(Token = "0x60018D1")]
	[Address(RVA = "0x11AB35C", Offset = "0x11AB35C", VA = "0x11AB35C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018D2")]
	[Address(RVA = "0x11AB4D0", Offset = "0x11AB4D0", VA = "0x11AB4D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60018D3")]
	[Address(RVA = "0x11AB638", Offset = "0x11AB638", VA = "0x11AB638")]
	public bool IsMyTool()
	{
		return default(bool);
	}

	[Token(Token = "0x60018D4")]
	[Address(RVA = "0x11AB65C", Offset = "0x11AB65C", VA = "0x11AB65C")]
	private void ObjectReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60018D5")]
	[Address(RVA = "0x11AB854", Offset = "0x11AB854", VA = "0x11AB854")]
	private void ObjectGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
	{
	}

	[Token(Token = "0x60018D6")]
	[Address(RVA = "0x11AB708", Offset = "0x11AB708", VA = "0x11AB708")]
	public void CheckObjectDestroyCoroutineCaller()
	{
	}

	[Token(Token = "0x60018D7")]
	[Address(RVA = "0x11AB8BC", Offset = "0x11AB8BC", VA = "0x11AB8BC")]
	[IteratorStateMachine(typeof(<_CheckObjectDestroy>d__11))]
	private IEnumerator<float> _CheckObjectDestroy()
	{
		return null;
	}

	[Token(Token = "0x60018D8")]
	[Address(RVA = "0x11AB958", Offset = "0x11AB958", VA = "0x11AB958")]
	[IteratorStateMachine(typeof(<_FlybackToToolShedPosition>d__12))]
	private IEnumerator<float> _FlybackToToolShedPosition(float flyTime = 0.5f)
	{
		return null;
	}

	[Token(Token = "0x60018D9")]
	[Address(RVA = "0x11ABA04", Offset = "0x11ABA04", VA = "0x11ABA04")]
	public ToolGhostModel GetMyGhostModelObject()
	{
		return null;
	}

	[Token(Token = "0x60018DA")]
	[Address(RVA = "0x11ABA0C", Offset = "0x11ABA0C", VA = "0x11ABA0C")]
	public ToolSocketHelper()
	{
	}
}
[Token(Token = "0x2000348")]
public class TopWorldLootSpawner : MonoBehaviourPunCallbacks
{
	[Token(Token = "0x2000349")]
	[CompilerGenerated]
	private sealed class <DelayedSpawn>d__6 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TopWorldLootSpawner <>4__this;

		[Token(Token = "0x170002EB")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60018F2")]
			[Address(RVA = "0x11AC830", Offset = "0x11AC830", VA = "0x11AC830", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002EC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018F4")]
			[Address(RVA = "0x11AC878", Offset = "0x11AC878", VA = "0x11AC878", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0x11AC414", Offset = "0x11AC414", VA = "0x11AC414")]
		[DebuggerHidden]
		public <DelayedSpawn>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x11AC578", Offset = "0x11AC578", VA = "0x11AC578", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x11AC57C", Offset = "0x11AC57C", VA = "0x11AC57C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x11AC838", Offset = "0x11AC838", VA = "0x11AC838", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EndingFrogSpawner[] frogSpawners;

	[Token(Token = "0x4001673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool _hasSpawnedFrogs;

	[Token(Token = "0x60018E7")]
	[Address(RVA = "0x11ABFC0", Offset = "0x11ABFC0", VA = "0x11ABFC0", Slot = "35")]
	public override void OnCreatedRoom()
	{
	}

	[Token(Token = "0x60018E8")]
	[Address(RVA = "0x11AC0C4", Offset = "0x11AC0C4", VA = "0x11AC0C4")]
	public void Start()
	{
	}

	[Token(Token = "0x60018E9")]
	[Address(RVA = "0x11AC30C", Offset = "0x11AC30C", VA = "0x11AC30C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60018EA")]
	[Address(RVA = "0x11AC284", Offset = "0x11AC284", VA = "0x11AC284")]
	private void SpawnTopNodes()
	{
	}

	[Token(Token = "0x60018EB")]
	[Address(RVA = "0x11AC050", Offset = "0x11AC050", VA = "0x11AC050")]
	[IteratorStateMachine(typeof(<DelayedSpawn>d__6))]
	private IEnumerator<float> DelayedSpawn()
	{
		return null;
	}

	[Token(Token = "0x60018EC")]
	[Address(RVA = "0x11AC43C", Offset = "0x11AC43C", VA = "0x11AC43C")]
	private void LevelLootGeneratingFinished()
	{
	}

	[Token(Token = "0x60018ED")]
	[Address(RVA = "0x11AC518", Offset = "0x11AC518", VA = "0x11AC518")]
	[ContextMenu("GetAllChildFrogSpawners")]
	private void GetAllChildFrogSpawners()
	{
	}

	[Token(Token = "0x60018EE")]
	[Address(RVA = "0x11AC570", Offset = "0x11AC570", VA = "0x11AC570")]
	public TopWorldLootSpawner()
	{
	}
}
[Token(Token = "0x200034A")]
[RequireComponent(typeof(PhotonView))]
public class Torch : MonoBehaviourPunCallbacks, IDamageable, IInteractable
{
	[Token(Token = "0x4001677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnTorchLit;

	[Token(Token = "0x4001678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DamageType takeDamageType;

	[Token(Token = "0x4001679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public DamageType makeDamageType;

	[Token(Token = "0x400167A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject fireFX;

	[Token(Token = "0x400167B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Light fireLight;

	[Token(Token = "0x400167C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject gasFX;

	[Token(Token = "0x400167D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Light gasLight;

	[Token(Token = "0x400167E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UnityEngine.Color lightColorLvl1;

	[Token(Token = "0x400167F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UnityEngine.Color lightColorLvl2;

	[Token(Token = "0x4001680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private UnityEngine.Color lightColorLvl3;

	[Token(Token = "0x4001681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	protected bool startLit;

	[Token(Token = "0x4001682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	[SerializeField]
	protected bool overrideColorActive;

	[Token(Token = "0x4001683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private UnityEngine.Color overrideColorValue;

	[Token(Token = "0x4001684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ParticleSystem[] particles;

	[Token(Token = "0x4001685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool torchLit;

	[Token(Token = "0x4001686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<Torch> AllLitTorches;

	[Token(Token = "0x4001687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private LocalizedString interactionText;

	[Token(Token = "0x60018F5")]
	[Address(RVA = "0x11AC8D4", Offset = "0x11AC8D4", VA = "0x11AC8D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018F6")]
	[Address(RVA = "0x11AC960", Offset = "0x11AC960", VA = "0x11AC960", Slot = "28")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x60018F7")]
	[Address(RVA = "0x11AC9A0", Offset = "0x11AC9A0", VA = "0x11AC9A0", Slot = "29")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x60018F8")]
	[Address(RVA = "0x11AC9C0", Offset = "0x11AC9C0", VA = "0x11AC9C0", Slot = "58")]
	[PunRPC]
	protected virtual void ToggleFireRPC(bool value)
	{
	}

	[Token(Token = "0x60018F9")]
	[Address(RVA = "0x11AC9D8", Offset = "0x11AC9D8", VA = "0x11AC9D8", Slot = "42")]
	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
	}

	[Token(Token = "0x60018FA")]
	[Address(RVA = "0x11ACB04", Offset = "0x11ACB04", VA = "0x11ACB04", Slot = "59")]
	public virtual void ToggleFire(bool value, bool force = false)
	{
	}

	[Token(Token = "0x60018FB")]
	[Address(RVA = "0x11ACE5C", Offset = "0x11ACE5C", VA = "0x11ACE5C", Slot = "54")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x60018FC")]
	[Address(RVA = "0x11ACEF8", Offset = "0x11ACEF8", VA = "0x11ACEF8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60018FD")]
	[Address(RVA = "0x11ACF84", Offset = "0x11ACF84", VA = "0x11ACF84")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60018FE")]
	[Address(RVA = "0x11AD004", Offset = "0x11AD004", VA = "0x11AD004")]
	public static void SnuffAllTorches()
	{
	}

	[Token(Token = "0x60018FF")]
	[Address(RVA = "0x11AD1C4", Offset = "0x11AD1C4", VA = "0x11AD1C4")]
	public bool IsLit()
	{
		return default(bool);
	}

	[Token(Token = "0x6001900")]
	[Address(RVA = "0x11AD1CC", Offset = "0x11AD1CC", VA = "0x11AD1CC", Slot = "55")]
	public void Interact()
	{
	}

	[Token(Token = "0x6001901")]
	[Address(RVA = "0x11AD1F0", Offset = "0x11AD1F0", VA = "0x11AD1F0", Slot = "56")]
	public LocalizedString GetInteractionText()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x6001902")]
	[Address(RVA = "0x11AD23C", Offset = "0x11AD23C", VA = "0x11AD23C", Slot = "57")]
	public GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x6001903")]
	[Address(RVA = "0x11AD244", Offset = "0x11AD244", VA = "0x11AD244")]
	public Torch()
	{
	}
}
[Token(Token = "0x200034B")]
public class TrackedLight : MonoBehaviour
{
	[Token(Token = "0x200034C")]
	[CompilerGenerated]
	private sealed class <_AddLight>d__4 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackedLight <>4__this;

		[Token(Token = "0x170002ED")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600190F")]
			[Address(RVA = "0x11AD7C4", Offset = "0x11AD7C4", VA = "0x11AD7C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002EE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001911")]
			[Address(RVA = "0x11AD80C", Offset = "0x11AD80C", VA = "0x11AD80C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0x11AD51C", Offset = "0x11AD51C", VA = "0x11AD51C")]
		[DebuggerHidden]
		public <_AddLight>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0x11AD6E8", Offset = "0x11AD6E8", VA = "0x11AD6E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0x11AD6EC", Offset = "0x11AD6EC", VA = "0x11AD6EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0x11AD7CC", Offset = "0x11AD7CC", VA = "0x11AD7CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200034D")]
	[CompilerGenerated]
	private sealed class <_RemoveLight>d__7 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackedLight <>4__this;

		[Token(Token = "0x170002EF")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001915")]
			[Address(RVA = "0x11AD950", Offset = "0x11AD950", VA = "0x11AD950", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002F0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001917")]
			[Address(RVA = "0x11AD998", Offset = "0x11AD998", VA = "0x11AD998", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0x11AD6B8", Offset = "0x11AD6B8", VA = "0x11AD6B8")]
		[DebuggerHidden]
		public <_RemoveLight>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0x11AD868", Offset = "0x11AD868", VA = "0x11AD868", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0x11AD86C", Offset = "0x11AD86C", VA = "0x11AD86C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0x11AD958", Offset = "0x11AD958", VA = "0x11AD958", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light light;

	[Token(Token = "0x4001689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _quitting;

	[Token(Token = "0x6001905")]
	[Address(RVA = "0x11AD350", Offset = "0x11AD350", VA = "0x11AD350")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001906")]
	[Address(RVA = "0x11AD3FC", Offset = "0x11AD3FC", VA = "0x11AD3FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001907")]
	[Address(RVA = "0x11AD4A8", Offset = "0x11AD4A8", VA = "0x11AD4A8")]
	[IteratorStateMachine(typeof(<_AddLight>d__4))]
	private IEnumerator<float> _AddLight()
	{
		return null;
	}

	[Token(Token = "0x6001908")]
	[Address(RVA = "0x11AD544", Offset = "0x11AD544", VA = "0x11AD544")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6001909")]
	[Address(RVA = "0x11AD550", Offset = "0x11AD550", VA = "0x11AD550")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600190A")]
	[Address(RVA = "0x11AD644", Offset = "0x11AD644", VA = "0x11AD644")]
	[IteratorStateMachine(typeof(<_RemoveLight>d__7))]
	private IEnumerator<float> _RemoveLight()
	{
		return null;
	}

	[Token(Token = "0x600190B")]
	[Address(RVA = "0x11AD6E0", Offset = "0x11AD6E0", VA = "0x11AD6E0")]
	public TrackedLight()
	{
	}
}
[Token(Token = "0x200034E")]
public class TransformFollow : ObjectFollow
{
	[Token(Token = "0x200034F")]
	public enum FollowMoment
	{
		[Token(Token = "0x4001694")]
		OnFixedUpdate,
		[Token(Token = "0x4001695")]
		OnUpdate,
		[Token(Token = "0x4001696")]
		OnLateUpdate,
		[Token(Token = "0x4001697")]
		OnManualUpdate
	}

	[Token(Token = "0x4001690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Follow Settings")]
	[SerializeField]
	[UnityEngine.Tooltip("The moment at which to follow.")]
	private FollowMoment _moment;

	[Token(Token = "0x4001691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected Transform transformToFollow;

	[Token(Token = "0x4001692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected Transform transformToChange;

	[Token(Token = "0x170002F1")]
	public FollowMoment moment
	{
		[Token(Token = "0x6001918")]
		[Address(RVA = "0x11AD9F4", Offset = "0x11AD9F4", VA = "0x11AD9F4")]
		get
		{
			return default(FollowMoment);
		}
		[Token(Token = "0x6001919")]
		[Address(RVA = "0x11AD9FC", Offset = "0x11AD9FC", VA = "0x11AD9FC")]
		set
		{
		}
	}

	[Token(Token = "0x600191A")]
	[Address(RVA = "0x11ADA10", Offset = "0x11ADA10", VA = "0x11ADA10", Slot = "4")]
	public override void Follow()
	{
	}

	[Token(Token = "0x600191B")]
	[Address(RVA = "0x11ADA38", Offset = "0x11ADA38", VA = "0x11ADA38", Slot = "5")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600191C")]
	[Address(RVA = "0x11ADA40", Offset = "0x11ADA40", VA = "0x11ADA40", Slot = "16")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600191D")]
	[Address(RVA = "0x11ADA68", Offset = "0x11ADA68", VA = "0x11ADA68")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x600191E")]
	[Address(RVA = "0x11ADA80", Offset = "0x11ADA80", VA = "0x11ADA80")]
	protected void Update()
	{
	}

	[Token(Token = "0x600191F")]
	[Address(RVA = "0x11ADA9C", Offset = "0x11ADA9C", VA = "0x11ADA9C", Slot = "17")]
	protected virtual void LateUpdate()
	{
	}

	[Token(Token = "0x6001920")]
	[Address(RVA = "0x11ADAB8", Offset = "0x11ADAB8", VA = "0x11ADAB8", Slot = "18")]
	public virtual void ManualUpdate()
	{
	}

	[Token(Token = "0x6001921")]
	[Address(RVA = "0x11ADAD4", Offset = "0x11ADAD4", VA = "0x11ADAD4", Slot = "7")]
	protected override Vector3 GetPositionToFollow()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001922")]
	[Address(RVA = "0x11ADAF0", Offset = "0x11ADAF0", VA = "0x11ADAF0", Slot = "8")]
	protected override void SetPositionOnGameObject(Vector3 newPosition)
	{
	}

	[Token(Token = "0x6001923")]
	[Address(RVA = "0x11ADB0C", Offset = "0x11ADB0C", VA = "0x11ADB0C", Slot = "9")]
	protected override Quaternion GetRotationToFollow()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6001924")]
	[Address(RVA = "0x11ADB28", Offset = "0x11ADB28", VA = "0x11ADB28", Slot = "10")]
	protected override void SetRotationOnGameObject(Quaternion newRotation)
	{
	}

	[Token(Token = "0x6001925")]
	[Address(RVA = "0x11ADB44", Offset = "0x11ADB44", VA = "0x11ADB44", Slot = "19")]
	protected virtual void CacheTransforms()
	{
	}

	[Token(Token = "0x6001926")]
	[Address(RVA = "0x11ADC80", Offset = "0x11ADC80", VA = "0x11ADC80")]
	public TransformFollow()
	{
	}
}
[Token(Token = "0x2000350")]
public class TutorialDiggingArea : DiggingArea
{
	[Token(Token = "0x6001927")]
	[Address(RVA = "0x11ADC90", Offset = "0x11ADC90", VA = "0x11ADC90", Slot = "54")]
	public override int GetWallTier()
	{
		return default(int);
	}

	[Token(Token = "0x6001928")]
	[Address(RVA = "0x11ADC98", Offset = "0x11ADC98", VA = "0x11ADC98")]
	public TutorialDiggingArea()
	{
	}
}
[Token(Token = "0x2000351")]
public class TutorialIntroSequence : MonoBehaviour
{
	[Token(Token = "0x2000352")]
	[CompilerGenerated]
	private sealed class <Start>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TutorialIntroSequence <>4__this;

		[Token(Token = "0x170002F2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600193E")]
			[Address(RVA = "0x11AF608", Offset = "0x11AF608", VA = "0x11AF608", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001940")]
			[Address(RVA = "0x11AF650", Offset = "0x11AF650", VA = "0x11AF650", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x11ADEBC", Offset = "0x11ADEBC", VA = "0x11ADEBC")]
		[DebuggerHidden]
		public <Start>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x11AEFEC", Offset = "0x11AEFEC", VA = "0x11AEFEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x11AEFF0", Offset = "0x11AEFF0", VA = "0x11AEFF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x11AF610", Offset = "0x11AF610", VA = "0x11AF610", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000353")]
	[CompilerGenerated]
	private sealed class <DelayedCalibrate>d__30 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TutorialIntroSequence <>4__this;

		[Token(Token = "0x170002F4")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001944")]
			[Address(RVA = "0x11AF7D8", Offset = "0x11AF7D8", VA = "0x11AF7D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002F5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001946")]
			[Address(RVA = "0x11AF820", Offset = "0x11AF820", VA = "0x11AF820", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0x11AE004", Offset = "0x11AE004", VA = "0x11AE004")]
		[DebuggerHidden]
		public <DelayedCalibrate>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0x11AF658", Offset = "0x11AF658", VA = "0x11AF658", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0x11AF65C", Offset = "0x11AF65C", VA = "0x11AF65C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x11AF7E0", Offset = "0x11AF7E0", VA = "0x11AF7E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000356")]
	[CompilerGenerated]
	private sealed class <_SlideShow>d__37 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TutorialIntroSequence <>4__this;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <waitTime>5__2;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <time>5__3;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <showedClayton>5__4;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__5;

		[Token(Token = "0x170002F6")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001950")]
			[Address(RVA = "0x11AFF0C", Offset = "0x11AFF0C", VA = "0x11AFF0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002F7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001952")]
			[Address(RVA = "0x11AFF54", Offset = "0x11AFF54", VA = "0x11AFF54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x11AE828", Offset = "0x11AE828", VA = "0x11AE828")]
		[DebuggerHidden]
		public <_SlideShow>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0x11AF8C4", Offset = "0x11AF8C4", VA = "0x11AF8C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0x11AF8C8", Offset = "0x11AF8C8", VA = "0x11AF8C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x11AFF14", Offset = "0x11AFF14", VA = "0x11AFF14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ScrollRect introImagesScrollRect;

	[Token(Token = "0x4001699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int imageAmount;

	[Token(Token = "0x400169A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float slideChangeDuration;

	[Token(Token = "0x400169B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Ease easeType;

	[Token(Token = "0x400169C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip slideChangAudioClip;

	[Token(Token = "0x400169D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip tankCrashAudioClip;

	[Token(Token = "0x400169E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private VoiceLinesScriptable.VoiceLineCategory[] voiceLines;

	[Token(Token = "0x400169F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioSource drillTankMoveAudioSource;

	[Token(Token = "0x40016A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioSource drillTankAlarmAudioSource;

	[Token(Token = "0x40016A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource radioStaticAudioSource;

	[Token(Token = "0x40016A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioSource imageProjectorAudioSource;

	[Token(Token = "0x40016A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject forcePlayerCameraPosStart;

	[Token(Token = "0x40016A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private HVRPhysicsButton startButton;

	[Token(Token = "0x40016A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Light tankLight;

	[Token(Token = "0x40016A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform tankIntroHeadStartPos;

	[Token(Token = "0x40016A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int currentPage;

	[Token(Token = "0x40016A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float tweenedValue;

	[Token(Token = "0x40016A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float originalAmbience;

	[Token(Token = "0x40016AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool buttonPressed;

	[Token(Token = "0x40016AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 originalPosition;

	[Token(Token = "0x40016AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float lightDiffMultiplier;

	[Token(Token = "0x40016AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float lightMaxChanveAmountOnOneFrame;

	[Token(Token = "0x40016AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool tankShakeRunning;

	[Token(Token = "0x40016AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float tankLightColorLerpValue;

	[Token(Token = "0x40016B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float drillTankAlarmAudioSourceOriginalVolume;

	[Token(Token = "0x40016B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private XROrigin _xrOrigin;

	[Token(Token = "0x6001929")]
	[Address(RVA = "0x11ADCA0", Offset = "0x11ADCA0", VA = "0x11ADCA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600192A")]
	[Address(RVA = "0x11ADD8C", Offset = "0x11ADD8C", VA = "0x11ADD8C")]
	private void ButtonPressed(HVRPhysicsButton arg0)
	{
	}

	[Token(Token = "0x600192B")]
	[Address(RVA = "0x11ADE48", Offset = "0x11ADE48", VA = "0x11ADE48")]
	[IteratorStateMachine(typeof(<Start>d__28))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600192C")]
	[Address(RVA = "0x11ADEE4", Offset = "0x11ADEE4", VA = "0x11ADEE4")]
	private void MoveAndCalibrate()
	{
	}

	[Token(Token = "0x600192D")]
	[Address(RVA = "0x11ADF90", Offset = "0x11ADF90", VA = "0x11ADF90")]
	[IteratorStateMachine(typeof(<DelayedCalibrate>d__30))]
	private IEnumerator<float> DelayedCalibrate()
	{
		return null;
	}

	[Token(Token = "0x600192E")]
	[Address(RVA = "0x11AE02C", Offset = "0x11AE02C", VA = "0x11AE02C")]
	private void MoveToSeat()
	{
	}

	[Token(Token = "0x600192F")]
	[Address(RVA = "0x11AE26C", Offset = "0x11AE26C", VA = "0x11AE26C")]
	private void InGameUIDisabled()
	{
	}

	[Token(Token = "0x6001930")]
	[Address(RVA = "0x11AE2D0", Offset = "0x11AE2D0", VA = "0x11AE2D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001931")]
	[Address(RVA = "0x11AE32C", Offset = "0x11AE32C", VA = "0x11AE32C")]
	private void ScrollLeft()
	{
	}

	[Token(Token = "0x6001932")]
	[Address(RVA = "0x11AE56C", Offset = "0x11AE56C", VA = "0x11AE56C")]
	private void ScrollRight()
	{
	}

	[Token(Token = "0x6001933")]
	[Address(RVA = "0x11ADDB0", Offset = "0x11ADDB0", VA = "0x11ADDB0")]
	private void StartShow()
	{
	}

	[Token(Token = "0x6001934")]
	[Address(RVA = "0x11AE7B4", Offset = "0x11AE7B4", VA = "0x11AE7B4")]
	[IteratorStateMachine(typeof(<_SlideShow>d__37))]
	private IEnumerator<float> _SlideShow()
	{
		return null;
	}

	[Token(Token = "0x6001935")]
	[Address(RVA = "0x11AE850", Offset = "0x11AE850", VA = "0x11AE850")]
	private void StartTankShake(float shakeTime)
	{
	}

	[Token(Token = "0x6001936")]
	[Address(RVA = "0x11AEAE0", Offset = "0x11AEAE0", VA = "0x11AEAE0")]
	private void UpdateTankLightColor()
	{
	}

	[Token(Token = "0x6001937")]
	[Address(RVA = "0x11AEB28", Offset = "0x11AEB28", VA = "0x11AEB28")]
	private void SetTankLightIntensity()
	{
	}

	[Token(Token = "0x6001938")]
	[Address(RVA = "0x11AEC64", Offset = "0x11AEC64", VA = "0x11AEC64")]
	private void MovePlayerToStart()
	{
	}

	[Token(Token = "0x6001939")]
	[Address(RVA = "0x11AEF68", Offset = "0x11AEF68", VA = "0x11AEF68")]
	public TutorialIntroSequence()
	{
	}
}
[Token(Token = "0x2000358")]
public class TutorialItemSocketFilter : HVREnumFlagsSocketFilter<CustomItems>
{
	[Token(Token = "0x40016C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject onlyPossibleSocketableObject;

	[Token(Token = "0x6001956")]
	[Address(RVA = "0x11B0030", Offset = "0x11B0030", VA = "0x11B0030", Slot = "4")]
	public override bool IsValid(HVRSocketable filter)
	{
		return default(bool);
	}

	[Token(Token = "0x6001957")]
	[Address(RVA = "0x11B0114", Offset = "0x11B0114", VA = "0x11B0114")]
	public TutorialItemSocketFilter()
	{
	}
}
[Token(Token = "0x2000359")]
public class AddAudioClipToButton : MonoBehaviour
{
	[Token(Token = "0x40016C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip buttonClip;

	[Token(Token = "0x40016C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Button _button;

	[Token(Token = "0x6001958")]
	[Address(RVA = "0x11B015C", Offset = "0x11B015C", VA = "0x11B015C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001959")]
	[Address(RVA = "0x11B0224", Offset = "0x11B0224", VA = "0x11B0224")]
	private void PlayClip()
	{
	}

	[Token(Token = "0x600195A")]
	[Address(RVA = "0x11B027C", Offset = "0x11B027C", VA = "0x11B027C")]
	public AddAudioClipToButton()
	{
	}
}
[Token(Token = "0x200035A")]
public class AddAudioClipToToggle : MonoBehaviour
{
	[Token(Token = "0x40016C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip buttonClip;

	[Token(Token = "0x40016C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Toggle _toggle;

	[Token(Token = "0x600195B")]
	[Address(RVA = "0x11B0284", Offset = "0x11B0284", VA = "0x11B0284")]
	private void Start()
	{
	}

	[Token(Token = "0x600195C")]
	[Address(RVA = "0x11B0360", Offset = "0x11B0360", VA = "0x11B0360")]
	private void PlayClip(bool arg0)
	{
	}

	[Token(Token = "0x600195D")]
	[Address(RVA = "0x11B03B8", Offset = "0x11B03B8", VA = "0x11B03B8")]
	public AddAudioClipToToggle()
	{
	}
}
[Token(Token = "0x200035B")]
public class CardLootItem : CardItem
{
	[Token(Token = "0x40016CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI Collected;

	[Token(Token = "0x40016CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI ValueText;

	[Token(Token = "0x40016CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI SmallValue;

	[Token(Token = "0x40016CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI LargeValue;

	[Token(Token = "0x40016CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TextMeshProUGUI IDText;

	[Token(Token = "0x40016CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.UI.Image smallImage;

	[Token(Token = "0x40016D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEngine.UI.Image largeImage;

	[Token(Token = "0x170002F8")]
	public override Card Card
	{
		[Token(Token = "0x600195E")]
		[Address(RVA = "0x11B03C0", Offset = "0x11B03C0", VA = "0x11B03C0", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600195F")]
		[Address(RVA = "0x11B03C8", Offset = "0x11B03C8", VA = "0x11B03C8", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x6001960")]
	[Address(RVA = "0x11B0474", Offset = "0x11B0474", VA = "0x11B0474")]
	private void SetValues()
	{
	}

	[Token(Token = "0x6001961")]
	[Address(RVA = "0x11B0970", Offset = "0x11B0970", VA = "0x11B0970", Slot = "6")]
	public override void UpdateWholeCard()
	{
	}

	[Token(Token = "0x6001962")]
	[Address(RVA = "0x11B0974", Offset = "0x11B0974", VA = "0x11B0974", Slot = "7")]
	public override void UpdateAmount()
	{
	}

	[Token(Token = "0x6001963")]
	[Address(RVA = "0x11B0AE8", Offset = "0x11B0AE8", VA = "0x11B0AE8")]
	public CardLootItem()
	{
	}
}
[Token(Token = "0x200035C")]
public class AutoLevelGenTester : MonoBehaviour
{
	[Token(Token = "0x200035D")]
	[CompilerGenerated]
	private sealed class <DebugTestLoadingScreen>d__4 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoLevelGenTester <>4__this;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Enemy> <enemies>5__2;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Room> <rooms>5__3;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__4;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<DiggingArea>.Enumerator <>7__wrap4;

		[Token(Token = "0x170002F9")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600196B")]
			[Address(RVA = "0x11B1A9C", Offset = "0x11B1A9C", VA = "0x11B1A9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002FA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600196D")]
			[Address(RVA = "0x11B1AE4", Offset = "0x11B1AE4", VA = "0x11B1AE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x11B0D10", Offset = "0x11B0D10", VA = "0x11B0D10")]
		[DebuggerHidden]
		public <DebugTestLoadingScreen>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x11B0D40", Offset = "0x11B0D40", VA = "0x11B0D40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x11B0D5C", Offset = "0x11B0D5C", VA = "0x11B0D5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x11B1A4C", Offset = "0x11B1A4C", VA = "0x11B1A4C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x11B1AA4", Offset = "0x11B1AA4", VA = "0x11B1AA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40016D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CoroutineHandle debugHandle;

	[Token(Token = "0x40016D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool debugLoadingMode;

	[Token(Token = "0x40016D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int numberOfDebugGeneration;

	[Token(Token = "0x6001964")]
	[Address(RVA = "0x11B0AF0", Offset = "0x11B0AF0", VA = "0x11B0AF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001965")]
	[Address(RVA = "0x11B0C9C", Offset = "0x11B0C9C", VA = "0x11B0C9C")]
	[IteratorStateMachine(typeof(<DebugTestLoadingScreen>d__4))]
	private IEnumerator<float> DebugTestLoadingScreen()
	{
		return null;
	}

	[Token(Token = "0x6001966")]
	[Address(RVA = "0x11B0D38", Offset = "0x11B0D38", VA = "0x11B0D38")]
	public AutoLevelGenTester()
	{
	}
}
[Token(Token = "0x200035E")]
public class CheatOptions : MonoBehaviour
{
	[Token(Token = "0x40016DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Toggle allToggle;

	[Token(Token = "0x40016DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Toggle godModeToggle;

	[Token(Token = "0x40016DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Toggle flyingToggle;

	[Token(Token = "0x40016DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Toggle noClipToggle;

	[Token(Token = "0x40016DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Toggle superSpeedToggle;

	[Token(Token = "0x40016E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Button addMoneyButton;

	[Token(Token = "0x40016E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Button spawnQuestButton;

	[Token(Token = "0x40016E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Button spawnBusinessChompy;

	[Token(Token = "0x40016E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Button finishQuestsButton;

	[Token(Token = "0x40016E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Button unlockAllCostumesButton;

	[Token(Token = "0x40016E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	public SingleUnityLayer playerLayer;

	[Token(Token = "0x40016E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private LayerMask ignoreCollisionsLayers;

	[Token(Token = "0x40016E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float originalPlayerGravity;

	[Token(Token = "0x40016E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float originalMaxFallSpeed;

	[Token(Token = "0x600196E")]
	[Address(RVA = "0x11B1B40", Offset = "0x11B1B40", VA = "0x11B1B40")]
	private void Awake()
	{
	}

	[Token(Token = "0x600196F")]
	[Address(RVA = "0x11B1EF8", Offset = "0x11B1EF8", VA = "0x11B1EF8")]
	private void SpawnBusinessChompy()
	{
	}

	[Token(Token = "0x6001970")]
	[Address(RVA = "0x11B1FD4", Offset = "0x11B1FD4", VA = "0x11B1FD4")]
	private void FinishQuests()
	{
	}

	[Token(Token = "0x6001971")]
	[Address(RVA = "0x11B208C", Offset = "0x11B208C", VA = "0x11B208C")]
	private void SpawnQuest()
	{
	}

	[Token(Token = "0x6001972")]
	[Address(RVA = "0x11B2148", Offset = "0x11B2148", VA = "0x11B2148")]
	private void UnlockAllCostumes()
	{
	}

	[Token(Token = "0x6001973")]
	[Address(RVA = "0x11B219C", Offset = "0x11B219C", VA = "0x11B219C")]
	private void ToggleAllValueChanged(bool arg0)
	{
	}

	[Token(Token = "0x6001974")]
	[Address(RVA = "0x11B2210", Offset = "0x11B2210", VA = "0x11B2210")]
	private void GodModeValueChanged(bool arg0)
	{
	}

	[Token(Token = "0x6001975")]
	[Address(RVA = "0x11B226C", Offset = "0x11B226C", VA = "0x11B226C")]
	private void FlyingToggleValueChanged(bool arg0)
	{
	}

	[Token(Token = "0x6001976")]
	[Address(RVA = "0x11B22D0", Offset = "0x11B22D0", VA = "0x11B22D0")]
	private void NoClipToggleValueChanged(bool arg0)
	{
	}

	[Token(Token = "0x6001977")]
	[Address(RVA = "0x11B2380", Offset = "0x11B2380", VA = "0x11B2380")]
	private void SuperSpeedToggleValueChanged(bool arg0)
	{
	}

	[Token(Token = "0x6001978")]
	[Address(RVA = "0x11B23EC", Offset = "0x11B23EC", VA = "0x11B23EC")]
	private void AddMoney()
	{
	}

	[Token(Token = "0x6001979")]
	[Address(RVA = "0x11B2464", Offset = "0x11B2464", VA = "0x11B2464")]
	public CheatOptions()
	{
	}
}
[Token(Token = "0x200035F")]
public class DebuggingOptions : MonoBehaviour
{
	[Token(Token = "0x40016E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Toggle lowRezMode;

	[Token(Token = "0x40016EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Toggle slowPhysicsMode;

	[Token(Token = "0x40016EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Toggle togglePotatoTextures;

	[Token(Token = "0x40016EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Toggle disableAggro;

	[Token(Token = "0x40016ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Toggle hidePlayer;

	[Token(Token = "0x40016EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Toggle showNetworkStatsPanel;

	[Token(Token = "0x40016EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Toggle disableSpaceWarp;

	[Token(Token = "0x40016F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Toggle disableSceneParticles;

	[Token(Token = "0x40016F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Toggle disableMiningAreas;

	[Token(Token = "0x40016F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Button despawnEnemies;

	[Token(Token = "0x40016F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Button randomDay;

	[Token(Token = "0x40016F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Button randomNight;

	[Token(Token = "0x40016F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Button logRBs;

	[Token(Token = "0x40016F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Button logTriggers;

	[Token(Token = "0x40016F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Button despawnMisc;

	[Token(Token = "0x40016F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Button migoArtifactUnlock;

	[Token(Token = "0x40016F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float originalTimestep;

	[Token(Token = "0x40016FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float originalRenderScale;

	[Token(Token = "0x40016FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private UniversalRenderPipelineAsset pipelineAsset;

	[Token(Token = "0x40016FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private ParticleSystem[] particles;

	[Token(Token = "0x40016FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private DiggingArea[] miningAreas;

	[Token(Token = "0x600197A")]
	[Address(RVA = "0x11B246C", Offset = "0x11B246C", VA = "0x11B246C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600197B")]
	[Address(RVA = "0x11B2B18", Offset = "0x11B2B18", VA = "0x11B2B18")]
	private void DisableMiningAreas(bool arg0)
	{
	}

	[Token(Token = "0x600197C")]
	[Address(RVA = "0x11B2C38", Offset = "0x11B2C38", VA = "0x11B2C38")]
	public static void LogRBs()
	{
	}

	[Token(Token = "0x600197D")]
	[Address(RVA = "0x11B2E2C", Offset = "0x11B2E2C", VA = "0x11B2E2C")]
	public static void LogTriggers()
	{
	}

	[Token(Token = "0x600197E")]
	[Address(RVA = "0x11B3020", Offset = "0x11B3020", VA = "0x11B3020")]
	private void RandomNight()
	{
	}

	[Token(Token = "0x600197F")]
	[Address(RVA = "0x11B3044", Offset = "0x11B3044", VA = "0x11B3044")]
	private void RandomDay()
	{
	}

	[Token(Token = "0x6001980")]
	[Address(RVA = "0x11B3068", Offset = "0x11B3068", VA = "0x11B3068")]
	private void DisableSceneParticles(bool arg0)
	{
	}

	[Token(Token = "0x6001981")]
	[Address(RVA = "0x11B3188", Offset = "0x11B3188", VA = "0x11B3188")]
	private void DisableSpaceWarp(bool arg0)
	{
	}

	[Token(Token = "0x6001982")]
	[Address(RVA = "0x11B3228", Offset = "0x11B3228", VA = "0x11B3228")]
	private void ShowNetworkStatsPanel(bool arg0)
	{
	}

	[Token(Token = "0x6001983")]
	[Address(RVA = "0x11B32A4", Offset = "0x11B32A4", VA = "0x11B32A4")]
	private void HidePlayer(bool arg0)
	{
	}

	[Token(Token = "0x6001984")]
	[Address(RVA = "0x11B3304", Offset = "0x11B3304", VA = "0x11B3304")]
	private void DespawnEnemies()
	{
	}

	[Token(Token = "0x6001985")]
	[Address(RVA = "0x11B3364", Offset = "0x11B3364", VA = "0x11B3364")]
	private void DespawnMisc()
	{
	}

	[Token(Token = "0x6001986")]
	[Address(RVA = "0x11B33C4", Offset = "0x11B33C4", VA = "0x11B33C4")]
	private void DisableAggro(bool arg0)
	{
	}

	[Token(Token = "0x6001987")]
	[Address(RVA = "0x11B3410", Offset = "0x11B3410", VA = "0x11B3410")]
	private void PotatoTexturesToggle(bool arg0)
	{
	}

	[Token(Token = "0x6001988")]
	[Address(RVA = "0x11B3424", Offset = "0x11B3424", VA = "0x11B3424")]
	private void SlowPhysicsToggle(bool arg0)
	{
	}

	[Token(Token = "0x6001989")]
	[Address(RVA = "0x11B35CC", Offset = "0x11B35CC", VA = "0x11B35CC")]
	private void LowRezToggle(bool arg0)
	{
	}

	[Token(Token = "0x600198A")]
	[Address(RVA = "0x11B3680", Offset = "0x11B3680", VA = "0x11B3680")]
	public DebuggingOptions()
	{
	}
}
[Token(Token = "0x2000360")]
public class FlatUIController : HandGadgetController
{
	[Token(Token = "0x40016FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Sprite pickaxe;

	[Token(Token = "0x40016FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Sprite shovel;

	[Token(Token = "0x4001700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Sprite sledge;

	[Token(Token = "0x4001701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Sprite detector;

	[Token(Token = "0x4001702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Sprite dynamite;

	[Token(Token = "0x4001703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Sprite revolver;

	[Token(Token = "0x4001704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Sprite pan;

	[Token(Token = "0x4001705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private UnityEngine.UI.Image[] slots;

	[Token(Token = "0x600198B")]
	[Address(RVA = "0x11B3690", Offset = "0x11B3690", VA = "0x11B3690")]
	private void Awake()
	{
	}

	[Token(Token = "0x600198C")]
	[Address(RVA = "0x11B37A0", Offset = "0x11B37A0", VA = "0x11B37A0")]
	private void Start()
	{
	}

	[Token(Token = "0x600198D")]
	[Address(RVA = "0x11B391C", Offset = "0x11B391C", VA = "0x11B391C", Slot = "54")]
	public override void Setup(bool isMine)
	{
	}

	[Token(Token = "0x600198E")]
	[Address(RVA = "0x11B390C", Offset = "0x11B390C", VA = "0x11B390C")]
	private void MoneyAmountChanged(int arg0)
	{
	}

	[Token(Token = "0x600198F")]
	[Address(RVA = "0x11B3920", Offset = "0x11B3920", VA = "0x11B3920", Slot = "55")]
	public override void SetMaxHealth(int maxHealth)
	{
	}

	[Token(Token = "0x6001990")]
	[Address(RVA = "0x11B39E8", Offset = "0x11B39E8", VA = "0x11B39E8", Slot = "56")]
	public override void SetHealthLeft(int healthLeft)
	{
	}

	[Token(Token = "0x6001991")]
	[Address(RVA = "0x11B3AB0", Offset = "0x11B3AB0", VA = "0x11B3AB0", Slot = "57")]
	public override void SetBackPackFullness(float amountInPrecent)
	{
	}

	[Token(Token = "0x6001992")]
	[Address(RVA = "0x11B3B80", Offset = "0x11B3B80", VA = "0x11B3B80", Slot = "58")]
	public override void SetPlayerMoneyText(int newMoneyAmount)
	{
	}

	[Token(Token = "0x6001993")]
	[Address(RVA = "0x11B3CA0", Offset = "0x11B3CA0", VA = "0x11B3CA0")]
	public void EquipTool(Tool.ToolType toolType, int slot)
	{
	}

	[Token(Token = "0x6001994")]
	[Address(RVA = "0x11B3D98", Offset = "0x11B3D98", VA = "0x11B3D98")]
	public void UnequipTool(int slot)
	{
	}

	[Token(Token = "0x6001995")]
	[Address(RVA = "0x11B3D30", Offset = "0x11B3D30", VA = "0x11B3D30")]
	private Sprite GetSpriteByTooltype(Tool.ToolType toolType)
	{
		return null;
	}

	[Token(Token = "0x6001996")]
	[Address(RVA = "0x11B3DE4", Offset = "0x11B3DE4", VA = "0x11B3DE4")]
	public FlatUIController()
	{
	}
}
[Token(Token = "0x2000361")]
public class InteractionText : MonoBehaviour, IInteractable
{
	[Token(Token = "0x4001706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LocalizedString interactionText;

	[Token(Token = "0x6001997")]
	[Address(RVA = "0x11B3DEC", Offset = "0x11B3DEC", VA = "0x11B3DEC", Slot = "4")]
	public void Interact()
	{
	}

	[Token(Token = "0x6001998")]
	[Address(RVA = "0x11B3DF0", Offset = "0x11B3DF0", VA = "0x11B3DF0", Slot = "5")]
	public LocalizedString GetInteractionText()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x6001999")]
	[Address(RVA = "0x11B3E04", Offset = "0x11B3E04", VA = "0x11B3E04", Slot = "6")]
	public GameObject GetGameObject()
	{
		return null;
	}

	[Token(Token = "0x600199A")]
	[Address(RVA = "0x11B3E0C", Offset = "0x11B3E0C", VA = "0x11B3E0C")]
	public InteractionText()
	{
	}
}
[Token(Token = "0x2000362")]
public enum InteractionTextType
{
	[Token(Token = "0x4001708")]
	Default,
	[Token(Token = "0x4001709")]
	Grabtext,
	[Token(Token = "0x400170A")]
	ToolText
}
[Token(Token = "0x2000363")]
public class InteractionTextController : MonoBehaviour
{
	[Token(Token = "0x2000364")]
	[CompilerGenerated]
	private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionTextController <>4__this;

		[Token(Token = "0x170002FB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019A5")]
			[Address(RVA = "0x11B4494", Offset = "0x11B4494", VA = "0x11B4494", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019A7")]
			[Address(RVA = "0x11B44DC", Offset = "0x11B44DC", VA = "0x11B44DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x11B3F18", Offset = "0x11B3F18", VA = "0x11B3F18")]
		[DebuggerHidden]
		public <Start>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x11B42B8", Offset = "0x11B42B8", VA = "0x11B42B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0x11B42BC", Offset = "0x11B42BC", VA = "0x11B42BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0x11B449C", Offset = "0x11B449C", VA = "0x11B449C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400170B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Localize loc;

	[Token(Token = "0x400170C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI textMesh;

	[Token(Token = "0x400170D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private KeyCode interactKey;

	[Token(Token = "0x400170E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private KeyCode grabKey;

	[Token(Token = "0x400170F")]
	private const string interactCode = "@";

	[Token(Token = "0x600199B")]
	[Address(RVA = "0x11B3E14", Offset = "0x11B3E14", VA = "0x11B3E14")]
	private void Awake()
	{
	}

	[Token(Token = "0x600199C")]
	[Address(RVA = "0x11B3EA4", Offset = "0x11B3EA4", VA = "0x11B3EA4")]
	[IteratorStateMachine(typeof(<Start>d__6))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600199D")]
	[Address(RVA = "0x11B3F40", Offset = "0x11B3F40", VA = "0x11B3F40")]
	public void SetInteractionText(LocalizedString localizedString, Tool.ToolType toolType = Tool.ToolType.None)
	{
	}

	[Token(Token = "0x600199E")]
	[Address(RVA = "0x11B4274", Offset = "0x11B4274", VA = "0x11B4274")]
	public void HideText()
	{
	}

	[Token(Token = "0x600199F")]
	[Address(RVA = "0x11B42A0", Offset = "0x11B42A0", VA = "0x11B42A0")]
	public void UpdateInteractKeyCode(KeyCode keyCode)
	{
	}

	[Token(Token = "0x60019A0")]
	[Address(RVA = "0x11B42A8", Offset = "0x11B42A8", VA = "0x11B42A8")]
	public void UpdateGrabKeyCode(KeyCode keyCode)
	{
	}

	[Token(Token = "0x60019A1")]
	[Address(RVA = "0x11B42B0", Offset = "0x11B42B0", VA = "0x11B42B0")]
	public InteractionTextController()
	{
	}
}
[Token(Token = "0x2000365")]
public class MultiplayerTabItem : TabItem
{
	[Token(Token = "0x4001713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CoroutineHandle waitForPSPlusAvailabilityCheckCoroutine;

	[Token(Token = "0x60019A8")]
	[Address(RVA = "0x11B44E4", Offset = "0x11B44E4", VA = "0x11B44E4", Slot = "4")]
	public override void Activate()
	{
	}

	[Token(Token = "0x60019A9")]
	[Address(RVA = "0x11B44EC", Offset = "0x11B44EC", VA = "0x11B44EC")]
	public MultiplayerTabItem()
	{
	}
}
[Token(Token = "0x2000366")]
[RequireComponent(typeof(Playstation4NetworkingManager))]
[RequireComponent(typeof(Playstation5NetworkingManager))]
public class PlaystationGeneralNetworkingManager : MonoBehaviour
{
	[Token(Token = "0x4001714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("If user has no ps plus, activate this panel after showing the join ps plus upselling")]
	[SerializeField]
	private TabItem fallbackPanelTabItem;

	[Token(Token = "0x4001715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ListSelectionHelper ingameUIListTabSelectionHelper;

	[Token(Token = "0x4001716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Canvas multiplayerPanelCanvas;

	[Token(Token = "0x4001717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public string roomCode;

	[Token(Token = "0x4001718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private NetworkConnectManager networkConnectManager;

	[Token(Token = "0x4001719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private InvitePanel invitePanel;

	[Token(Token = "0x400171A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private JoinGamePanel joinGamePanel;

	[Token(Token = "0x400171B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MultiplayerOptionsPanel optionsPanel;

	[Token(Token = "0x400171C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Playstation4NetworkingManager playstation4NetworkingManager;

	[Token(Token = "0x400171D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Playstation5NetworkingManager playstation5NetworkingManager;

	[Token(Token = "0x400171E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool joiningViaStoredSessionInvite;

	[Token(Token = "0x400171F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool receivedJoinedSessionEvent;

	[Token(Token = "0x60019AA")]
	[Address(RVA = "0x11B44F4", Offset = "0x11B44F4", VA = "0x11B44F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60019AB")]
	[Address(RVA = "0x11B4628", Offset = "0x11B4628", VA = "0x11B4628")]
	public void PSFriendDisconnected(long disconnectedFriendID)
	{
	}

	[Token(Token = "0x60019AC")]
	[Address(RVA = "0x11B4644", Offset = "0x11B4644", VA = "0x11B4644")]
	public void PSFriendConnected(long connectedPlayerID, string connectedPlayerName, string userAvatarUrl, Player sender, string sessionID, bool ps4Player)
	{
	}

	[Token(Token = "0x60019AD")]
	[Address(RVA = "0x11B47B4", Offset = "0x11B47B4", VA = "0x11B47B4")]
	public void PlayerKicked(InGameUI.FriendInfo playerKicked)
	{
	}

	[Token(Token = "0x60019AE")]
	[Address(RVA = "0x11B4904", Offset = "0x11B4904", VA = "0x11B4904")]
	public PlaystationGeneralNetworkingManager()
	{
	}
}
[Token(Token = "0x2000367")]
public class HidePlayerNamesToggle : MonoBehaviour, IOption
{
	[Token(Token = "0x4001720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Toggle myToggle;

	[Token(Token = "0x4001721")]
	private const string saveString = "HideNameMode";

	[Token(Token = "0x60019AF")]
	[Address(RVA = "0x11B495C", Offset = "0x11B495C", VA = "0x11B495C", Slot = "4")]
	private void IOption.Init()
	{
	}

	[Token(Token = "0x60019B0")]
	[Address(RVA = "0x11B4AF8", Offset = "0x11B4AF8", VA = "0x11B4AF8")]
	private void OnDataLoaded()
	{
	}

	[Token(Token = "0x60019B1")]
	[Address(RVA = "0x11B4BFC", Offset = "0x11B4BFC", VA = "0x11B4BFC")]
	private void Start()
	{
	}

	[Token(Token = "0x60019B2")]
	[Address(RVA = "0x11B4C2C", Offset = "0x11B4C2C", VA = "0x11B4C2C")]
	private void ToggleValueChanged(bool arg0)
	{
	}

	[Token(Token = "0x60019B3")]
	[Address(RVA = "0x11B4D00", Offset = "0x11B4D00", VA = "0x11B4D00")]
	public HidePlayerNamesToggle()
	{
	}
}
[Token(Token = "0x2000368")]
public class InitChildOptions : MonoBehaviour
{
	[Token(Token = "0x60019B4")]
	[Address(RVA = "0x11B4D08", Offset = "0x11B4D08", VA = "0x11B4D08")]
	private void Awake()
	{
	}

	[Token(Token = "0x60019B5")]
	[Address(RVA = "0x11B4E10", Offset = "0x11B4E10", VA = "0x11B4E10")]
	public InitChildOptions()
	{
	}
}
[Token(Token = "0x2000369")]
public class ItemsFoundCounter : MonoBehaviour
{
	[Token(Token = "0x4001722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CounterType counterType;

	[Token(Token = "0x4001723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CodexCardListManager manager;

	[Token(Token = "0x4001724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI textMeshProUGUI;

	[Token(Token = "0x60019B6")]
	[Address(RVA = "0x11B4E18", Offset = "0x11B4E18", VA = "0x11B4E18")]
	public void UpdateCounter()
	{
	}

	[Token(Token = "0x60019B7")]
	[Address(RVA = "0x11B4F18", Offset = "0x11B4F18", VA = "0x11B4F18")]
	private int CountTotals()
	{
		return default(int);
	}

	[Token(Token = "0x60019B8")]
	[Address(RVA = "0x11B4EFC", Offset = "0x11B4EFC", VA = "0x11B4EFC")]
	private int CountFoundItems()
	{
		return default(int);
	}

	[Token(Token = "0x60019B9")]
	[Address(RVA = "0x11B501C", Offset = "0x11B501C", VA = "0x11B501C")]
	public ItemsFoundCounter()
	{
	}
}
[Token(Token = "0x200036A")]
public enum CounterType
{
	[Token(Token = "0x4001726")]
	Gems,
	[Token(Token = "0x4001727")]
	Relics
}
[Token(Token = "0x200036B")]
public class LocalizedContentSizeFitterRefresher : MonoBehaviour
{
	[Token(Token = "0x200036C")]
	[CompilerGenerated]
	private sealed class <WaitOneFrameThenRebuild>d__1 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedContentSizeFitterRefresher <>4__this;

		[Token(Token = "0x170002FD")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x60019C0")]
			[Address(RVA = "0x11B5230", Offset = "0x11B5230", VA = "0x11B5230", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002FE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019C2")]
			[Address(RVA = "0x11B5278", Offset = "0x11B5278", VA = "0x11B5278", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0x11B5120", Offset = "0x11B5120", VA = "0x11B5120")]
		[DebuggerHidden]
		public <WaitOneFrameThenRebuild>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0x11B5150", Offset = "0x11B5150", VA = "0x11B5150", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x11B5154", Offset = "0x11B5154", VA = "0x11B5154", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x11B5238", Offset = "0x11B5238", VA = "0x11B5238", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60019BA")]
	[Address(RVA = "0x11B5024", Offset = "0x11B5024", VA = "0x11B5024")]
	public void RebuildLayout()
	{
	}

	[Token(Token = "0x60019BB")]
	[Address(RVA = "0x11B50AC", Offset = "0x11B50AC", VA = "0x11B50AC")]
	[IteratorStateMachine(typeof(<WaitOneFrameThenRebuild>d__1))]
	private IEnumerator<float> WaitOneFrameThenRebuild()
	{
		return null;
	}

	[Token(Token = "0x60019BC")]
	[Address(RVA = "0x11B5148", Offset = "0x11B5148", VA = "0x11B5148")]
	public LocalizedContentSizeFitterRefresher()
	{
	}
}
[Token(Token = "0x200036D")]
public class LootsFoundInBiome : MonoBehaviour
{
	[Token(Token = "0x400172B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI texmex;

	[Token(Token = "0x60019C3")]
	[Address(RVA = "0x11B52D4", Offset = "0x11B52D4", VA = "0x11B52D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60019C4")]
	[Address(RVA = "0x11B53A0", Offset = "0x11B53A0", VA = "0x11B53A0")]
	private void UpdateText()
	{
	}

	[Token(Token = "0x60019C5")]
	[Address(RVA = "0x11B54C4", Offset = "0x11B54C4", VA = "0x11B54C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60019C6")]
	[Address(RVA = "0x11B54C8", Offset = "0x11B54C8", VA = "0x11B54C8")]
	public LootsFoundInBiome()
	{
	}
}
[Token(Token = "0x200036E")]
public class MapSectorButton : MonoBehaviour
{
	[Token(Token = "0x400172C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SceneChangerManager.Scenes Sector;

	[Token(Token = "0x400172D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool disableSector;

	[Token(Token = "0x400172E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int Cost;

	[Token(Token = "0x400172F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private LocalizedString sectorName;

	[Token(Token = "0x4001730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Icons")]
	private GameObject LockIcon;

	[Token(Token = "0x4001731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject TravelIcon;

	[Token(Token = "0x4001732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject HereIcon;

	[Token(Token = "0x4001733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Text")]
	private Text locationText;

	[Token(Token = "0x4001734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Text actionText;

	[Token(Token = "0x4001735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Localize actionTextLocalize;

	[Token(Token = "0x4001736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Button SectorButton;

	[Token(Token = "0x4001737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool Bought;

	[Token(Token = "0x4001738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Sprites")]
	[SerializeField]
	private Sprite enabledSprite;

	[Token(Token = "0x4001739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Sprite disabledSprite;

	[Token(Token = "0x60019C7")]
	[Address(RVA = "0x11B54D0", Offset = "0x11B54D0", VA = "0x11B54D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60019C8")]
	[Address(RVA = "0x11B5A60", Offset = "0x11B5A60", VA = "0x11B5A60")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60019C9")]
	[Address(RVA = "0x11B5C94", Offset = "0x11B5C94", VA = "0x11B5C94")]
	private void OnDataLoaded()
	{
	}

	[Token(Token = "0x60019CA")]
	[Address(RVA = "0x11B57E4", Offset = "0x11B57E4", VA = "0x11B57E4")]
	private void UpdateText()
	{
	}

	[Token(Token = "0x60019CB")]
	[Address(RVA = "0x11B5D80", Offset = "0x11B5D80", VA = "0x11B5D80")]
	private void SetInteractable(bool b)
	{
	}

	[Token(Token = "0x60019CC")]
	[Address(RVA = "0x11B5EF4", Offset = "0x11B5EF4", VA = "0x11B5EF4")]
	private void OnMoneyChange(int newMoney)
	{
	}

	[Token(Token = "0x60019CD")]
	[Address(RVA = "0x11B5F10", Offset = "0x11B5F10", VA = "0x11B5F10")]
	private void OnPress()
	{
	}

	[Token(Token = "0x60019CE")]
	[Address(RVA = "0x11B5DE4", Offset = "0x11B5DE4", VA = "0x11B5DE4")]
	public void UpdateBuyText()
	{
	}

	[Token(Token = "0x60019CF")]
	[Address(RVA = "0x11B61C8", Offset = "0x11B61C8", VA = "0x11B61C8")]
	public MapSectorButton()
	{
	}
}
[Token(Token = "0x200036F")]
public class MenuButton : MonoBehaviour
{
	[Token(Token = "0x400173A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Item item;

	[Token(Token = "0x400173B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator anim;

	[Token(Token = "0x60019D0")]
	[Address(RVA = "0x11B61D0", Offset = "0x11B61D0", VA = "0x11B61D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60019D1")]
	[Address(RVA = "0x11B62C4", Offset = "0x11B62C4", VA = "0x11B62C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60019D2")]
	[Address(RVA = "0x11B63B8", Offset = "0x11B63B8", VA = "0x11B63B8")]
	private void Item_OnDeactive()
	{
	}

	[Token(Token = "0x60019D3")]
	[Address(RVA = "0x11B6410", Offset = "0x11B6410", VA = "0x11B6410")]
	private void Item_OnActivate()
	{
	}

	[Token(Token = "0x60019D4")]
	[Address(RVA = "0x11B6468", Offset = "0x11B6468", VA = "0x11B6468")]
	public MenuButton()
	{
	}
}
[Token(Token = "0x2000370")]
public class RoomIndicatorUI : MonoBehaviour
{
	[Token(Token = "0x400173C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text currentLevelText;

	[Token(Token = "0x400173D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool disable;

	[Token(Token = "0x400173E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float _cooldownTime;

	[Token(Token = "0x400173F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Canvas canvas;

	[Token(Token = "0x60019D5")]
	[Address(RVA = "0x11B6470", Offset = "0x11B6470", VA = "0x11B6470")]
	private void Awake()
	{
	}

	[Token(Token = "0x60019D6")]
	[Address(RVA = "0x11B6538", Offset = "0x11B6538", VA = "0x11B6538")]
	private void Update()
	{
	}

	[Token(Token = "0x60019D7")]
	[Address(RVA = "0x11B6514", Offset = "0x11B6514", VA = "0x11B6514")]
	public void ChangeCurrentLevelText(string newLevel)
	{
	}

	[Token(Token = "0x60019D8")]
	[Address(RVA = "0x11B670C", Offset = "0x11B670C", VA = "0x11B670C")]
	public string GetCurrentLevelName()
	{
		return null;
	}

	[Token(Token = "0x60019D9")]
	[Address(RVA = "0x11B6730", Offset = "0x11B6730", VA = "0x11B6730")]
	public RoomIndicatorUI()
	{
	}
}
[Token(Token = "0x2000371")]
public class CurrentSceneText : MonoBehaviour
{
	[Token(Token = "0x4001740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text currentSceneText;

	[Token(Token = "0x60019DA")]
	[Address(RVA = "0x11B6738", Offset = "0x11B6738", VA = "0x11B6738")]
	private void Awake()
	{
	}

	[Token(Token = "0x60019DB")]
	[Address(RVA = "0x11B67A0", Offset = "0x11B67A0", VA = "0x11B67A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60019DC")]
	[Address(RVA = "0x11B685C", Offset = "0x11B685C", VA = "0x11B685C")]
	private void ChangeCurrentSceneText(string newScene)
	{
	}

	[Token(Token = "0x60019DD")]
	[Address(RVA = "0x11B68D8", Offset = "0x11B68D8", VA = "0x11B68D8")]
	public CurrentSceneText()
	{
	}
}
[Token(Token = "0x2000372")]
public class SwitchSceneButton : MonoBehaviour
{
	[Token(Token = "0x4001741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Button switchSceneButton;

	[Token(Token = "0x60019DE")]
	[Address(RVA = "0x11B68E0", Offset = "0x11B68E0", VA = "0x11B68E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60019DF")]
	[Address(RVA = "0x11B69B4", Offset = "0x11B69B4", VA = "0x11B69B4")]
	private void SwitchScene()
	{
	}

	[Token(Token = "0x60019E0")]
	[Address(RVA = "0x11B6A58", Offset = "0x11B6A58", VA = "0x11B6A58")]
	public SwitchSceneButton()
	{
	}
}
[Token(Token = "0x2000373")]
public class VolumeOptionsManager : MonoBehaviour
{
	[Token(Token = "0x4001742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Slider masterVolumeSlider;

	[Token(Token = "0x4001743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Slider musicVolumeSlider;

	[Token(Token = "0x4001744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Slider SFXVolumeSlider;

	[Token(Token = "0x4001745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Slider ambienceVolumeSlider;

	[Token(Token = "0x4001746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Slider voiceLinesVolumeSlider;

	[Token(Token = "0x4001747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float multiplier;

	[Token(Token = "0x60019E1")]
	[Address(RVA = "0x11B6A60", Offset = "0x11B6A60", VA = "0x11B6A60")]
	private void Start()
	{
	}

	[Token(Token = "0x60019E2")]
	[Address(RVA = "0x11B6D0C", Offset = "0x11B6D0C", VA = "0x11B6D0C")]
	private void OnDataLoaded()
	{
	}

	[Token(Token = "0x60019E3")]
	[Address(RVA = "0x11B6F2C", Offset = "0x11B6F2C", VA = "0x11B6F2C")]
	private void MasterValueChanged(float value)
	{
	}

	[Token(Token = "0x60019E4")]
	[Address(RVA = "0x11B6F74", Offset = "0x11B6F74", VA = "0x11B6F74")]
	private void MusicValueChanged(float value)
	{
	}

	[Token(Token = "0x60019E5")]
	[Address(RVA = "0x11B6FBC", Offset = "0x11B6FBC", VA = "0x11B6FBC")]
	private void SFXValueChanged(float value)
	{
	}

	[Token(Token = "0x60019E6")]
	[Address(RVA = "0x11B7004", Offset = "0x11B7004", VA = "0x11B7004")]
	private void ambienceValueChanged(float value)
	{
	}

	[Token(Token = "0x60019E7")]
	[Address(RVA = "0x11B704C", Offset = "0x11B704C", VA = "0x11B704C")]
	private void voiceLinesValueChanged(float value)
	{
	}

	[Token(Token = "0x60019E8")]
	[Address(RVA = "0x11B7094", Offset = "0x11B7094", VA = "0x11B7094")]
	public VolumeOptionsManager()
	{
	}
}
[Token(Token = "0x2000374")]
public static class Utility
{
	[Token(Token = "0x2000375")]
	[CompilerGenerated]
	private sealed class <ExecuteAfterTimeCoroutine>d__20 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool stopIfAreadyRunning;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float time;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public System.Action Task;

		[Token(Token = "0x170002FF")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001A00")]
			[Address(RVA = "0x11B8C34", Offset = "0x11B8C34", VA = "0x11B8C34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000300")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A02")]
			[Address(RVA = "0x11B8C7C", Offset = "0x11B8C7C", VA = "0x11B8C7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019FD")]
		[Address(RVA = "0x11B888C", Offset = "0x11B888C", VA = "0x11B888C")]
		[DebuggerHidden]
		public <ExecuteAfterTimeCoroutine>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0x11B8AFC", Offset = "0x11B8AFC", VA = "0x11B8AFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0x11B8B00", Offset = "0x11B8B00", VA = "0x11B8B00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0x11B8C3C", Offset = "0x11B8C3C", VA = "0x11B8C3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000376")]
	[CompilerGenerated]
	private sealed class <PeriodicCheckUntilTrue>d__21 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Func<bool> CheckIfTrue;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public System.Action DoAfterTrue;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float waitPeriod;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject objectActive;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool <success>5__2;

		[Token(Token = "0x17000301")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001A06")]
			[Address(RVA = "0x11B8DE8", Offset = "0x11B8DE8", VA = "0x11B8DE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000302")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A08")]
			[Address(RVA = "0x11B8E30", Offset = "0x11B8E30", VA = "0x11B8E30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x11B8968", Offset = "0x11B8968", VA = "0x11B8968")]
		[DebuggerHidden]
		public <PeriodicCheckUntilTrue>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x11B8CD8", Offset = "0x11B8CD8", VA = "0x11B8CD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x11B8CDC", Offset = "0x11B8CDC", VA = "0x11B8CDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x11B8DF0", Offset = "0x11B8DF0", VA = "0x11B8DF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string[] damageableTags;

	[Token(Token = "0x4001749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string ignoreDamage;

	[Token(Token = "0x400174A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool _isCoroutineExecuting;

	[Token(Token = "0x60019E9")]
	[Address(RVA = "0x11B70A4", Offset = "0x11B70A4", VA = "0x11B70A4")]
	public static Transform FindParentWithTag(Transform childObject, string[] tags)
	{
		return null;
	}

	[Token(Token = "0x60019EA")]
	[Address(RVA = "0x11B7214", Offset = "0x11B7214", VA = "0x11B7214")]
	public static Transform FindParentWithTag(Transform childObject, string tag)
	{
		return null;
	}

	[Token(Token = "0x60019EB")]
	[Address(RVA = "0x11B72F8", Offset = "0x11B72F8", VA = "0x11B72F8")]
	public static Transform TryToMakeDamage(Transform damageToObject, int damageAmount, DamageType damageType, [Optional] List<Transform> ignoreList, bool onlyDamageIfMine = true)
	{
		return null;
	}

	[Token(Token = "0x60019EC")]
	[Address(RVA = "0x11B76C4", Offset = "0x11B76C4", VA = "0x11B76C4")]
	public static bool CanDoDamage(DamageType senderDamageType, DamageType myDamageType)
	{
		return default(bool);
	}

	[Token(Token = "0x60019ED")]
	[Address(RVA = "0x11B76E8", Offset = "0x11B76E8", VA = "0x11B76E8")]
	public static bool HasCommandLineArgument(string argumentName)
	{
		return default(bool);
	}

	[Token(Token = "0x60019EE")]
	public static T GetRandomFromArray<T>(this T[] array)
	{
		return (T)null;
	}

	[Token(Token = "0x60019EF")]
	public static void ShuffleList<T>(this IList<T> ts)
	{
	}

	[Token(Token = "0x60019F0")]
	public static T GetRandomFromList<T>(this List<T> list)
	{
		return (T)null;
	}

	[Token(Token = "0x60019F1")]
	public static T GetOrAddComponent<T>(this GameObject go) where T : Component
	{
		return null;
	}

	[Token(Token = "0x60019F2")]
	public static void TryDestroyComponent<T>(this GameObject go) where T : Component
	{
	}

	[Token(Token = "0x60019F3")]
	[Address(RVA = "0x11B7768", Offset = "0x11B7768", VA = "0x11B7768")]
	public static Transform GetClosestPlayerHeadTransform(Vector3 myPos, bool onlyReturnAlive = true, float maxDistance = float.PositiveInfinity, bool checkLOS = false)
	{
		return null;
	}

	[Token(Token = "0x60019F4")]
	[Address(RVA = "0x11B7BA8", Offset = "0x11B7BA8", VA = "0x11B7BA8")]
	public static PlayerAvatar GetClosestPlayerAvatar(Vector3 myPos, bool onlyReturnAlive = true, float maxDistance = float.PositiveInfinity, bool checkLOS = false)
	{
		return null;
	}

	[Token(Token = "0x60019F5")]
	[Address(RVA = "0x11B7FEC", Offset = "0x11B7FEC", VA = "0x11B7FEC")]
	public static float GetClosestPlayerDistance(Vector3 myPos, bool onlyReturnAlive = true)
	{
		return default(float);
	}

	[Token(Token = "0x60019F6")]
	[Address(RVA = "0x11B82B8", Offset = "0x11B82B8", VA = "0x11B82B8")]
	public static float GetLocalPlayerDistance(Vector3 myPos)
	{
		return default(float);
	}

	[Token(Token = "0x60019F7")]
	[Address(RVA = "0x11B8400", Offset = "0x11B8400", VA = "0x11B8400")]
	public static Vector3 CubeBezierLerp(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60019F8")]
	[Address(RVA = "0x11B849C", Offset = "0x11B849C", VA = "0x11B849C")]
	public static void HVRHaptics(HVRGrabbable grabbable, float collisionImpactForce)
	{
	}

	[Token(Token = "0x60019F9")]
	[Address(RVA = "0x11B8660", Offset = "0x11B8660", VA = "0x11B8660")]
	public static void HVRHaptics(HVRGrabbable grabbable, float strength, float duration, float freq)
	{
	}

	[Token(Token = "0x60019FA")]
	[Address(RVA = "0x11B87F4", Offset = "0x11B87F4", VA = "0x11B87F4")]
	[IteratorStateMachine(typeof(<ExecuteAfterTimeCoroutine>d__20))]
	public static IEnumerator<float> ExecuteAfterTimeCoroutine(float time, System.Action Task, bool stopIfAreadyRunning = true)
	{
		return null;
	}

	[Token(Token = "0x60019FB")]
	[Address(RVA = "0x11B88B4", Offset = "0x11B88B4", VA = "0x11B88B4")]
	[IteratorStateMachine(typeof(<PeriodicCheckUntilTrue>d__21))]
	public static IEnumerator<float> PeriodicCheckUntilTrue(float waitPeriod, Func<bool> CheckIfTrue, System.Action DoAfterTrue, GameObject objectActive)
	{
		return null;
	}
}
[Token(Token = "0x2000377")]
public class ValleyMapStand : MonoBehaviour
{
	[Token(Token = "0x4001757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject mapStandRenderer;

	[Token(Token = "0x4001758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject purchaseSign;

	[Token(Token = "0x4001759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip buyClip;

	[Token(Token = "0x400175A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int _currentTier;

	[Token(Token = "0x6001A09")]
	[Address(RVA = "0x11B8E8C", Offset = "0x11B8E8C", VA = "0x11B8E8C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A0A")]
	[Address(RVA = "0x11B9014", Offset = "0x11B9014", VA = "0x11B9014")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A0B")]
	[Address(RVA = "0x11B92D0", Offset = "0x11B92D0", VA = "0x11B92D0")]
	private void Loaded()
	{
	}

	[Token(Token = "0x6001A0C")]
	[Address(RVA = "0x11B9170", Offset = "0x11B9170", VA = "0x11B9170")]
	private void SetupMapstand()
	{
	}

	[Token(Token = "0x6001A0D")]
	[Address(RVA = "0x11B92D4", Offset = "0x11B92D4", VA = "0x11B92D4")]
	private void Upgraded(OtherUpgradePathScriptableObject.UpgradeType arg0)
	{
	}

	[Token(Token = "0x6001A0E")]
	[Address(RVA = "0x11B94A4", Offset = "0x11B94A4", VA = "0x11B94A4")]
	public ValleyMapStand()
	{
	}
}
[Token(Token = "0x2000378")]
public class VisualHandFollow : MonoBehaviour
{
	[Token(Token = "0x400175B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x6001A0F")]
	[Address(RVA = "0x11B94AC", Offset = "0x11B94AC", VA = "0x11B94AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A10")]
	[Address(RVA = "0x11B94FC", Offset = "0x11B94FC", VA = "0x11B94FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A11")]
	[Address(RVA = "0x11B9860", Offset = "0x11B9860", VA = "0x11B9860")]
	public void OffsetVisualHandPosition(Transform offsetPoint)
	{
	}

	[Token(Token = "0x6001A12")]
	[Address(RVA = "0x11B9928", Offset = "0x11B9928", VA = "0x11B9928")]
	public void ResetVisualHand()
	{
	}

	[Token(Token = "0x6001A13")]
	[Address(RVA = "0x11B994C", Offset = "0x11B994C", VA = "0x11B994C")]
	public VisualHandFollow()
	{
	}
}
[Token(Token = "0x2000379")]
public class VoiceLineLookAtTrigger : MonoBehaviour
{
	[Token(Token = "0x400175C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VoiceLinesScriptable.Preset lineType;

	[Token(Token = "0x400175D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float timeToWatch;

	[Token(Token = "0x400175E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool onlyAtNight;

	[Token(Token = "0x400175F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool canBeActivatedMoreThanOnce;

	[Token(Token = "0x4001760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float _timeSpentWatching;

	[Token(Token = "0x4001761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool _activated;

	[Token(Token = "0x6001A14")]
	[Address(RVA = "0x11B9954", Offset = "0x11B9954", VA = "0x11B9954")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A15")]
	[Address(RVA = "0x11B99D4", Offset = "0x11B99D4", VA = "0x11B99D4")]
	public void WatchedThis(float watchTime)
	{
	}

	[Token(Token = "0x6001A16")]
	[Address(RVA = "0x11B9A90", Offset = "0x11B9A90", VA = "0x11B9A90")]
	public VoiceLineLookAtTrigger()
	{
	}
}
[Token(Token = "0x200037A")]
public class VoicelinesEventListener : MonoBehaviour
{
	[Token(Token = "0x200037B")]
	[CompilerGenerated]
	private sealed class <DelayedBuyingEncouragements>d__24 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VoicelinesEventListener <>4__this;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int delay;

		[Token(Token = "0x17000303")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001A31")]
			[Address(RVA = "0x11BDA40", Offset = "0x11BDA40", VA = "0x11BDA40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000304")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A33")]
			[Address(RVA = "0x11BDA88", Offset = "0x11BDA88", VA = "0x11BDA88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x11BC460", Offset = "0x11BC460", VA = "0x11BC460")]
		[DebuggerHidden]
		public <DelayedBuyingEncouragements>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x11BD944", Offset = "0x11BD944", VA = "0x11BD944", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x11BD948", Offset = "0x11BD948", VA = "0x11BD948", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0x11BDA48", Offset = "0x11BDA48", VA = "0x11BDA48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200037D")]
	[CompilerGenerated]
	private sealed class <RecordHaulDelayedVoiceline>d__33 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float delay;

		[Token(Token = "0x17000305")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001A3A")]
			[Address(RVA = "0x11BDC98", Offset = "0x11BDC98", VA = "0x11BDC98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000306")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A3C")]
			[Address(RVA = "0x11BDCE0", Offset = "0x11BDCE0", VA = "0x11BDCE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0x11BD2FC", Offset = "0x11BD2FC", VA = "0x11BD2FC")]
		[DebuggerHidden]
		public <RecordHaulDelayedVoiceline>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0x11BDBB8", Offset = "0x11BDBB8", VA = "0x11BDBB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x11BDBBC", Offset = "0x11BDBBC", VA = "0x11BDBBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0x11BDCA0", Offset = "0x11BDCA0", VA = "0x11BDCA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool printLogs;

	[Token(Token = "0x4001763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("How many seconds after returning from the caves for this to play.")]
	[SerializeField]
	[Header("Time dependent lines trigger times")]
	private int genericTopworld;

	[Token(Token = "0x4001764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("How many seconds after returning from the caves for this to play. There's a different line for every scene.")]
	[SerializeField]
	private int sceneSpecificLine;

	[Token(Token = "0x4001765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("How many seconds to spend in a cave for this to play. There sure is a lot of bugs in these damn mines. They need patchin up! ")]
	[SerializeField]
	private int caveLine1;

	[Token(Token = "0x4001766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("How many seconds to spend in a cave for this to play. Man, I could do with a big jug o moonshine right about now.")]
	private int caveLine2;

	[Token(Token = "0x4001767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("How long to spend in topworld B1 for Clayton to comment on the music. MAKE SURE THIS IS LOWER THAN THE SCENE SPECIFIC LINE.")]
	[SerializeField]
	private int bothKindsOfMusicLine;

	[Token(Token = "0x4001768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool roomDetectorEnabled;

	[Token(Token = "0x4001769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool inACave;

	[Token(Token = "0x400176A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool countTopworldTime;

	[Token(Token = "0x400176B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	private bool countCaveTime;

	[Token(Token = "0x400176C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float topWorldTimer;

	[Token(Token = "0x400176D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float caveTimer;

	[Token(Token = "0x400176E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float roomDetectorCooldown;

	[Token(Token = "0x400176F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float _roomCheckInterval;

	[Token(Token = "0x4001770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool inASetPieceRoom;

	[Token(Token = "0x4001771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool firstRunsetPieceLinePlayed;

	[Token(Token = "0x4001772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	private bool setPieceLinePlayed;

	[Token(Token = "0x4001773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int runsSinceLastBoughtTool;

	[Token(Token = "0x4001774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UpgradeableToolCardListManager toolCardManager;

	[Token(Token = "0x4001775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool newQuestAvailable;

	[Token(Token = "0x6001A17")]
	[Address(RVA = "0x11B9AA0", Offset = "0x11B9AA0", VA = "0x11B9AA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A18")]
	[Address(RVA = "0x11BA0CC", Offset = "0x11BA0CC", VA = "0x11BA0CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A19")]
	[Address(RVA = "0x11BB5E4", Offset = "0x11BB5E4", VA = "0x11BB5E4")]
	private void CommentOnNewRun()
	{
	}

	[Token(Token = "0x6001A1A")]
	[Address(RVA = "0x11BC26C", Offset = "0x11BC26C", VA = "0x11BC26C")]
	private void BuyingEncouragements()
	{
	}

	[Token(Token = "0x6001A1B")]
	[Address(RVA = "0x11BC3DC", Offset = "0x11BC3DC", VA = "0x11BC3DC")]
	[IteratorStateMachine(typeof(<DelayedBuyingEncouragements>d__24))]
	private IEnumerator<float> DelayedBuyingEncouragements(int delay)
	{
		return null;
	}

	[Token(Token = "0x6001A1C")]
	[Address(RVA = "0x11BC488", Offset = "0x11BC488", VA = "0x11BC488")]
	private void CommentOnReturn()
	{
	}

	[Token(Token = "0x6001A1D")]
	[Address(RVA = "0x11BCDB0", Offset = "0x11BCDB0", VA = "0x11BCDB0")]
	private void SetInACave(bool status)
	{
	}

	[Token(Token = "0x6001A1E")]
	[Address(RVA = "0x11BCDD4", Offset = "0x11BCDD4", VA = "0x11BCDD4")]
	private void LootGenerated()
	{
	}

	[Token(Token = "0x6001A1F")]
	[Address(RVA = "0x11BD224", Offset = "0x11BD224", VA = "0x11BD224")]
	private void SetNewQuestAvailable()
	{
	}

	[Token(Token = "0x6001A20")]
	[Address(RVA = "0x11BB0A8", Offset = "0x11BB0A8", VA = "0x11BB0A8")]
	private void ActivateTopworldTimeDependentLines()
	{
	}

	[Token(Token = "0x6001A21")]
	[Address(RVA = "0x11BB4A0", Offset = "0x11BB4A0", VA = "0x11BB4A0")]
	private void ActivateCaveTimeDependentLines()
	{
	}

	[Token(Token = "0x6001A22")]
	[Address(RVA = "0x11BD228", Offset = "0x11BD228", VA = "0x11BD228")]
	private void QuestFinished()
	{
	}

	[Token(Token = "0x6001A23")]
	[Address(RVA = "0x11BC090", Offset = "0x11BC090", VA = "0x11BC090")]
	private void Log(object message)
	{
	}

	[Token(Token = "0x6001A24")]
	[Address(RVA = "0x11BD28C", Offset = "0x11BD28C", VA = "0x11BD28C")]
	[IteratorStateMachine(typeof(<RecordHaulDelayedVoiceline>d__33))]
	private IEnumerator<float> RecordHaulDelayedVoiceline(float delay)
	{
		return null;
	}

	[Token(Token = "0x6001A25")]
	[Address(RVA = "0x11BD324", Offset = "0x11BD324", VA = "0x11BD324")]
	private void EnemyDied(Enemy enemy, DamageType killedByType)
	{
	}

	[Token(Token = "0x6001A26")]
	[Address(RVA = "0x11BD4E4", Offset = "0x11BD4E4", VA = "0x11BD4E4")]
	private void CheckForLootRecord(int runLootValue)
	{
	}

	[Token(Token = "0x6001A27")]
	[Address(RVA = "0x11BD818", Offset = "0x11BD818", VA = "0x11BD818")]
	public void OnToolBought()
	{
	}

	[Token(Token = "0x6001A28")]
	[Address(RVA = "0x11BD820", Offset = "0x11BD820", VA = "0x11BD820")]
	public void NunChompyLeft()
	{
	}

	[Token(Token = "0x6001A29")]
	[Address(RVA = "0x11BD89C", Offset = "0x11BD89C", VA = "0x11BD89C")]
	public void DelayedNunChompyVoiceline()
	{
	}

	[Token(Token = "0x6001A2A")]
	[Address(RVA = "0x11BA114", Offset = "0x11BA114", VA = "0x11BA114")]
	private void CheckForSetPieceRoom()
	{
	}

	[Token(Token = "0x6001A2B")]
	[Address(RVA = "0x11BD900", Offset = "0x11BD900", VA = "0x11BD900")]
	public VoicelinesEventListener()
	{
	}
}
[Token(Token = "0x200037E")]
[CreateAssetMenu(fileName = "", menuName = "VoiceLinesScriptable", order = 0)]
public class VoiceLinesScriptable : ScriptableObject
{
	[Token(Token = "0x200037F")]
	public enum Preset
	{
		[Token(Token = "0x400184F")]
		Aurora,
		[Token(Token = "0x4001850")]
		CabinBottle,
		[Token(Token = "0x4001851")]
		Hmmph,
		[Token(Token = "0x4001852")]
		Angry,
		[Token(Token = "0x4001853")]
		EvilLaugh,
		[Token(Token = "0x4001854")]
		SatiricalLaugh,
		[Token(Token = "0x4001855")]
		FunnyLaugh,
		[Token(Token = "0x4001856")]
		Trap,
		[Token(Token = "0x4001857")]
		ErrandPoster,
		[Token(Token = "0x4001858")]
		Relic,
		[Token(Token = "0x4001859")]
		DiggingSpot,
		[Token(Token = "0x400185A")]
		WaterNode,
		[Token(Token = "0x400185B")]
		Geode,
		[Token(Token = "0x400185C")]
		Safe,
		[Token(Token = "0x400185D")]
		lightsCoupling,
		[Token(Token = "0x400185E")]
		doorCoupling,
		[Token(Token = "0x400185F")]
		PoisonPlant,
		[Token(Token = "0x4001860")]
		Geysir,
		[Token(Token = "0x4001861")]
		BarrelsAndCratesTuto,
		[Token(Token = "0x4001862")]
		NodeIntro,
		[Token(Token = "0x4001863")]
		Bonfire
	}

	[Token(Token = "0x2000380")]
	public enum VLType
	{
		[Token(Token = "0x4001865")]
		Interrupt,
		[Token(Token = "0x4001866")]
		Queue,
		[Token(Token = "0x4001867")]
		Forget
	}

	[Serializable]
	[Token(Token = "0x2000381")]
	public class VoiceLineCategory
	{
		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioClip[] voiceClips;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float cooldownDuration;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float playProbability;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedString[] subtitles;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Default values")]
		[UnityEngine.Tooltip("If true, sync to everyone. Only MasterClient can call synced lines")]
		public bool defaultSyncToEveryone;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("Determines whether the line interrupts other voicelines, or is queued after them, or whether the line is dismissed if triggered while another voiceline is playing/in the queue")]
		public VLType defaultBehaviour;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("If true lines can be replayed. If false then the line gets saved and never gets replayed")]
		public bool defaultRecycle;

		[NonSerialized]
		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _cooldownAfterTime;

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0x11BC100", Offset = "0x11BC100", VA = "0x11BC100")]
		public void PlayRandomVoiceLine(bool syncToEveryone, VLType behaviour, bool recycle, bool allowDuringEnding = false)
		{
		}

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0x11BC000", Offset = "0x11BC000", VA = "0x11BC000")]
		public void PlayRandomVoiceLine(bool allowDuringEnding = false)
		{
		}

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0x11BBFDC", Offset = "0x11BBFDC", VA = "0x11BBFDC")]
		public bool IsOnCooldown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0x11BCD80", Offset = "0x11BCD80", VA = "0x11BCD80")]
		public AudioClip GetFirstClipOrNull()
		{
			return null;
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0x11BDD44", Offset = "0x11BDD44", VA = "0x11BDD44")]
		public VoiceLineCategory()
		{
		}
	}

	[Token(Token = "0x400177F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("1.1 TutorialIntro")]
	public VoiceLineCategory v1_1_1;

	[Token(Token = "0x4001780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VoiceLineCategory v1_1_2;

	[Token(Token = "0x4001781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VoiceLineCategory v1_1_3;

	[Token(Token = "0x4001782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VoiceLineCategory v1_1_4;

	[Token(Token = "0x4001783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VoiceLineCategory v1_1_5;

	[Token(Token = "0x4001784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public VoiceLineCategory v1_1_6;

	[Token(Token = "0x4001785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public VoiceLineCategory v1_1_7;

	[Token(Token = "0x4001786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VoiceLineCategory v1_1_8;

	[Token(Token = "0x4001787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("1.2 Tutorial")]
	public VoiceLineCategory v1_2_1_startTutorial;

	[Token(Token = "0x4001788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public VoiceLineCategory v1_2_2_pickUpGloves;

	[Token(Token = "0x4001789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VoiceLineCategory v1_2_3_afterLightingTorch;

	[Token(Token = "0x400178A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public VoiceLineCategory v1_2_4_afterSlotting;

	[Token(Token = "0x400178B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VoiceLineCategory v1_2_5_foundGold;

	[Token(Token = "0x400178C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public VoiceLineCategory v1_2_6_findElevator;

	[Token(Token = "0x400178D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public VoiceLineCategory v1_2_7_reachBase;

	[Token(Token = "0x400178E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public VoiceLineCategory v1_2_8_findShrimp;

	[Token(Token = "0x400178F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public VoiceLineCategory v1_2_9_after5minsWandering;

	[Token(Token = "0x4001790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public VoiceLineCategory v1_2_10_grinderFinish;

	[Token(Token = "0x4001791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public VoiceLineCategory v1_2_11_catalogueTutorial;

	[Token(Token = "0x4001792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public VoiceLineCategory v1_2_12_buyingTutorial;

	[Token(Token = "0x4001793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public VoiceLineCategory v1_2_13_toolSlotRepeat;

	[Token(Token = "0x4001794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public VoiceLineCategory v1_2_15_reminderToBreakStuff;

	[Token(Token = "0x4001795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public VoiceLineCategory v1_2_16_commentOnDifferentNodes;

	[Token(Token = "0x4001796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public VoiceLineCategory v1_2_17_bonfire;

	[Token(Token = "0x4001797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[Header("1.3 Misc teaching lines")]
	public VoiceLineCategory v1_3_1_afterShootingCritter;

	[Token(Token = "0x4001798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public VoiceLineCategory v1_3_2;

	[Token(Token = "0x4001799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public VoiceLineCategory v1_3_3;

	[Token(Token = "0x400179A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public VoiceLineCategory v1_3_4;

	[Token(Token = "0x400179B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public VoiceLineCategory v1_3_5;

	[Token(Token = "0x400179C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public VoiceLineCategory v1_3_6;

	[Token(Token = "0x400179D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public VoiceLineCategory v1_3_7;

	[Token(Token = "0x400179E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public VoiceLineCategory v1_3_8;

	[Token(Token = "0x400179F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public VoiceLineCategory v1_3_9;

	[Token(Token = "0x40017A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public VoiceLineCategory v1_3_10;

	[Token(Token = "0x40017A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public VoiceLineCategory v1_3_11_runGenerator;

	[Token(Token = "0x40017A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public VoiceLineCategory v1_3_12_mapStand;

	[Token(Token = "0x40017A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[Header("2. Guiding")]
	public VoiceLineCategory tryingToPutLootInFullBackpack;

	[Token(Token = "0x40017A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public VoiceLineCategory wrongTool;

	[Token(Token = "0x40017A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public VoiceLineCategory firstTimeSeeingPlasmaShrimp;

	[Token(Token = "0x40017A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public VoiceLineCategory firstTimeSeeingNautiloid;

	[Token(Token = "0x40017A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public VoiceLineCategory secondTimeSeeingNautiloid;

	[Token(Token = "0x40017A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public VoiceLineCategory killingPrimalChameleon;

	[Token(Token = "0x40017A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public VoiceLineCategory killingThievingChameleon;

	[Token(Token = "0x40017AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public VoiceLineCategory encounteringGolem;

	[Token(Token = "0x40017AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public VoiceLineCategory golemNotTakingDamage;

	[Token(Token = "0x40017AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public VoiceLineCategory enteringRoomWithBarrelTrap;

	[Token(Token = "0x40017AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public VoiceLineCategory diggingWallGettingHarder;

	[Token(Token = "0x40017AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public VoiceLineCategory diggingWallIsUnMinable;

	[Token(Token = "0x40017AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public VoiceLineCategory lightsCoupling;

	[Token(Token = "0x40017B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public VoiceLineCategory doorCoupling;

	[Token(Token = "0x40017B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public VoiceLineCategory poisonCloud;

	[Token(Token = "0x40017B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public VoiceLineCategory geysir;

	[Token(Token = "0x40017B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public VoiceLineCategory drone;

	[Token(Token = "0x40017B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[Header("3. Combat")]
	public VoiceLineCategory firingWhileInCombat;

	[Token(Token = "0x40017B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public VoiceLineCategory meleeWhileInCombat;

	[Token(Token = "0x40017B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public VoiceLineCategory droppingToLowHitpoints;

	[Token(Token = "0x40017B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public VoiceLineCategory endingCombat;

	[Token(Token = "0x40017B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public VoiceLineCategory respawning;

	[Token(Token = "0x40017B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public VoiceLineCategory playerGetsSlimed;

	[Token(Token = "0x40017BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public VoiceLineCategory playerTakesDamage;

	[Token(Token = "0x40017BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public VoiceLineCategory playerUsesExplosives;

	[Token(Token = "0x40017BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public VoiceLineCategory playerDies;

	[Token(Token = "0x40017BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[Header("4.1 Flavour starting run")]
	public VoiceLineCategory startingARun;

	[Token(Token = "0x40017BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	public VoiceLineCategory startingARunWithoutRevolver;

	[Token(Token = "0x40017BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	public VoiceLineCategory startingARunWithLotsOfEnemies;

	[Token(Token = "0x40017C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	public VoiceLineCategory startingARunWithSafeInLevel;

	[Token(Token = "0x40017C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	public VoiceLineCategory startingARunWithTreasureChest;

	[Token(Token = "0x40017C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	public VoiceLineCategory startingARunInCoralPitFirstTime;

	[Token(Token = "0x40017C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	public VoiceLineCategory startingARunInCoralPit;

	[Token(Token = "0x40017C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public VoiceLineCategory startingARunInGeodePitFirstTime;

	[Token(Token = "0x40017C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public VoiceLineCategory startingARunInGeodePit;

	[Token(Token = "0x40017C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public VoiceLineCategory startingARunInRuinsPitFirstTime;

	[Token(Token = "0x40017C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	public VoiceLineCategory startingARunInRuinsPit;

	[Token(Token = "0x40017C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	public VoiceLineCategory startingARunInDeepPitFirstTime;

	[Token(Token = "0x40017C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	public VoiceLineCategory startingARunInDeepPit;

	[Token(Token = "0x40017CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[Header("4.2 After run")]
	public VoiceLineCategory returningSecondTime;

	[Token(Token = "0x40017CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	public VoiceLineCategory returningGoodRun;

	[Token(Token = "0x40017CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	public VoiceLineCategory returningBadRun;

	[Token(Token = "0x40017CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	public VoiceLineCategory returningAfterPlasmaShrimpFirstTime;

	[Token(Token = "0x40017CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	public VoiceLineCategory returningAfterNautiloidFirstTime;

	[Token(Token = "0x40017CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	public VoiceLineCategory returningAfterChameleonFirstTime;

	[Token(Token = "0x40017D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	public VoiceLineCategory newRecordHaul;

	[Token(Token = "0x40017D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	public VoiceLineCategory returningAfterDrone;

	[Token(Token = "0x40017D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	public VoiceLineCategory returningAfterGolem;

	[Token(Token = "0x40017D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	[Header("4.3 Buying and upgrading")]
	public VoiceLineCategory upgradingPickaxe;

	[Token(Token = "0x40017D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	public VoiceLineCategory buyingRevolver;

	[Token(Token = "0x40017D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	public VoiceLineCategory upgradingRevolver;

	[Token(Token = "0x40017D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	public VoiceLineCategory buyingSledgehammer;

	[Token(Token = "0x40017D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	public VoiceLineCategory buyingPan;

	[Token(Token = "0x40017D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	public VoiceLineCategory buyingScanner;

	[Token(Token = "0x40017D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	public VoiceLineCategory buyingShovel;

	[Token(Token = "0x40017DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	public VoiceLineCategory buyingCabin;

	[Token(Token = "0x40017DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	public VoiceLineCategory buyingEncouragements;

	[Token(Token = "0x40017DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	public VoiceLineCategory gameRoom;

	[Token(Token = "0x40017DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	public VoiceLineCategory trophyRoom;

	[Token(Token = "0x40017DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	public VoiceLineCategory firstTrophy;

	[Token(Token = "0x40017DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	public VoiceLineCategory secondTrophy;

	[Token(Token = "0x40017E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
	public VoiceLineCategory thirdTrophy;

	[Token(Token = "0x40017E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
	[Header("4.4 Specific")]
	public VoiceLineCategory lookAtNightSky;

	[Token(Token = "0x40017E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
	public VoiceLineCategory holdBottleAtCabin;

	[Token(Token = "0x40017E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
	public VoiceLineCategory spendingTimeInTopworld2Minutes;

	[Token(Token = "0x40017E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
	public VoiceLineCategory hasBeenInCavesFor3Minutes;

	[Token(Token = "0x40017E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
	public VoiceLineCategory hasBeenInCavesFor5Minutes;

	[Token(Token = "0x40017E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
	public VoiceLineCategory newErrandAvailable;

	[Token(Token = "0x40017E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
	public VoiceLineCategory errandCompleted;

	[Token(Token = "0x40017E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
	public VoiceLineCategory spendingTimeInValleyTopworld3Minutes;

	[Token(Token = "0x40017E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
	public VoiceLineCategory spendingTimeInCoralTopworld3Minutes;

	[Token(Token = "0x40017EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
	public VoiceLineCategory spendingTimeInGeodeTopworld3Minutes;

	[Token(Token = "0x40017EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
	public VoiceLineCategory spendingTimeInTempleTopworld01;

	[Token(Token = "0x40017EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
	public VoiceLineCategory spendingTimeInValleyTopworld5Minutes;

	[Token(Token = "0x40017ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
	public VoiceLineCategory spendingTimeInCoralTopworld5Minutes;

	[Token(Token = "0x40017EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
	public VoiceLineCategory spendingTimeInGeodeTopworld5Minutes;

	[Token(Token = "0x40017EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
	public VoiceLineCategory spendingTimeInRuinsTopworld5Minutes;

	[Token(Token = "0x40017F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
	public VoiceLineCategory seeingARelic;

	[Token(Token = "0x40017F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
	public VoiceLineCategory seeingARelic_4_4_17;

	[Token(Token = "0x40017F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
	public VoiceLineCategory seeingARelic_4_4_18;

	[Token(Token = "0x40017F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
	public VoiceLineCategory seeingARelic_4_4_19;

	[Token(Token = "0x40017F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
	public VoiceLineCategory seeingARelic_4_4_20;

	[Token(Token = "0x40017F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
	public VoiceLineCategory seeingARelic_4_4_21;

	[Token(Token = "0x40017F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
	public VoiceLineCategory playerChangesCosmetics;

	[Token(Token = "0x40017F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
	public VoiceLineCategory motherlodeSafe;

	[Token(Token = "0x40017F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
	public VoiceLineCategory claytonCommentsOnMusic;

	[Token(Token = "0x40017F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
	public VoiceLineCategory crackingGeodes;

	[Token(Token = "0x40017FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
	public VoiceLineCategory nunChompy;

	[Token(Token = "0x40017FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
	public VoiceLineCategory frontierChompy;

	[Token(Token = "0x40017FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
	public VoiceLineCategory businessChompy;

	[Token(Token = "0x40017FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
	public VoiceLineCategory comeDigWithMe;

	[Token(Token = "0x40017FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
	public VoiceLineCategory firstRunSetpieceRoom;

	[Token(Token = "0x40017FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
	public VoiceLineCategory B1SetpieceRoom;

	[Token(Token = "0x4001800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
	public VoiceLineCategory B2SetpieceRoom;

	[Token(Token = "0x4001801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
	public VoiceLineCategory B3SetpieceRoom;

	[Token(Token = "0x4001802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
	public VoiceLineCategory B4SetpieceRoom;

	[Token(Token = "0x4001803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
	public VoiceLineCategory minerChompyEncounter;

	[Token(Token = "0x4001804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
	public VoiceLineCategory frontierChompyEncounter;

	[Token(Token = "0x4001805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
	public VoiceLineCategory nunChompyEncounter;

	[Token(Token = "0x4001806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
	public VoiceLineCategory punkChompyEncounter;

	[Token(Token = "0x4001807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
	public VoiceLineCategory hellraiserChompyEncounter;

	[Token(Token = "0x4001808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
	public VoiceLineCategory businessChompyEncounter;

	[Token(Token = "0x4001809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
	public VoiceLineCategory runGenerationLever;

	[Token(Token = "0x400180A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
	public VoiceLineCategory goldRushRunModifier;

	[Token(Token = "0x400180B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
	public VoiceLineCategory dangerousRunModifier;

	[Token(Token = "0x400180C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
	public VoiceLineCategory newComicPage;

	[Token(Token = "0x400180D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
	public VoiceLineCategory lastComicPage;

	[Token(Token = "0x400180E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
	public VoiceLineCategory friendDied;

	[Token(Token = "0x400180F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
	[Header("5.1 Ending 1")]
	public VoiceLineCategory v5_1_1;

	[Token(Token = "0x4001810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
	public VoiceLineCategory v5_1_2;

	[Token(Token = "0x4001811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
	public VoiceLineCategory v5_1_3;

	[Token(Token = "0x4001812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
	public VoiceLineCategory v5_1_4;

	[Token(Token = "0x4001813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
	public VoiceLineCategory v5_1_5;

	[Token(Token = "0x4001814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
	public VoiceLineCategory v5_1_6;

	[Token(Token = "0x4001815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
	public VoiceLineCategory v5_1_7;

	[Token(Token = "0x4001816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
	public VoiceLineCategory v5_1_8;

	[Token(Token = "0x4001817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
	public VoiceLineCategory v5_1_9;

	[Token(Token = "0x4001818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
	public VoiceLineCategory v5_1_10;

	[Token(Token = "0x4001819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
	public VoiceLineCategory v5_1_11;

	[Token(Token = "0x400181A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
	public VoiceLineCategory v5_1_12;

	[Token(Token = "0x400181B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
	public VoiceLineCategory v5_1_13;

	[Token(Token = "0x400181C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
	[Header("5.4 Ending 4")]
	public VoiceLineCategory v5_4_1;

	[Token(Token = "0x400181D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
	public VoiceLineCategory v5_4_2;

	[Token(Token = "0x400181E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
	public VoiceLineCategory v5_4_3;

	[Token(Token = "0x400181F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
	public VoiceLineCategory v5_4_4;

	[Token(Token = "0x4001820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
	public VoiceLineCategory v5_4_5;

	[Token(Token = "0x4001821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
	public VoiceLineCategory v5_4_6;

	[Token(Token = "0x4001822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
	public VoiceLineCategory v5_4_7;

	[Token(Token = "0x4001823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x538")]
	public VoiceLineCategory v5_4_8;

	[Token(Token = "0x4001824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
	public VoiceLineCategory v5_4_9;

	[Token(Token = "0x4001825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
	public VoiceLineCategory v5_4_10;

	[Token(Token = "0x4001826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x550")]
	public VoiceLineCategory v5_4_11;

	[Token(Token = "0x4001827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x558")]
	public VoiceLineCategory v5_4_12;

	[Token(Token = "0x4001828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x560")]
	public VoiceLineCategory v5_4_13;

	[Token(Token = "0x4001829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x568")]
	public VoiceLineCategory v5_4_14;

	[Token(Token = "0x400182A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x570")]
	public VoiceLineCategory v5_4_15;

	[Token(Token = "0x400182B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x578")]
	public VoiceLineCategory v5_4_16;

	[Token(Token = "0x400182C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x580")]
	public VoiceLineCategory v5_4_17;

	[Token(Token = "0x400182D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x588")]
	[Header("Exposition")]
	public VoiceLineCategory claytonRemembersCabin;

	[Token(Token = "0x400182E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x590")]
	public VoiceLineCategory B1ShrimpHive;

	[Token(Token = "0x400182F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x598")]
	public VoiceLineCategory B1LizardHive;

	[Token(Token = "0x4001830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A0")]
	public VoiceLineCategory B1ShelleyRoom;

	[Token(Token = "0x4001831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A8")]
	public VoiceLineCategory B1ShelleyWake;

	[Token(Token = "0x4001832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B0")]
	public VoiceLineCategory B1Migo;

	[Token(Token = "0x4001833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B8")]
	public VoiceLineCategory B1MiningCamp;

	[Token(Token = "0x4001834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C0")]
	public VoiceLineCategory B2SleepyNautiloids;

	[Token(Token = "0x4001835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C8")]
	public VoiceLineCategory B2ShelleyRoom;

	[Token(Token = "0x4001836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D0")]
	public VoiceLineCategory B2ShelleyFight;

	[Token(Token = "0x4001837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D8")]
	public VoiceLineCategory B2Migo;

	[Token(Token = "0x4001838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E0")]
	public VoiceLineCategory B2Ships;

	[Token(Token = "0x4001839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E8")]
	public VoiceLineCategory B3Maze;

	[Token(Token = "0x400183A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F0")]
	public VoiceLineCategory B3LizardKing;

	[Token(Token = "0x400183B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F8")]
	public VoiceLineCategory B3Fightpit;

	[Token(Token = "0x400183C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x600")]
	public VoiceLineCategory B3Migo;

	[Token(Token = "0x400183D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x608")]
	public VoiceLineCategory B3MiningCamp;

	[Token(Token = "0x400183E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x610")]
	public VoiceLineCategory B4Sea;

	[Token(Token = "0x400183F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x618")]
	public VoiceLineCategory B4PocketDimension;

	[Token(Token = "0x4001840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x620")]
	public VoiceLineCategory B4CommandCenter;

	[Token(Token = "0x4001841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x628")]
	public VoiceLineCategory B4Forest;

	[Token(Token = "0x4001842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x630")]
	public VoiceLineCategory B4GolemFoundry;

	[Token(Token = "0x4001843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x638")]
	public VoiceLineCategory GeneralReturningFromMinesLines;

	[Token(Token = "0x4001844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x640")]
	public VoiceLineCategory enteringB2;

	[Token(Token = "0x4001845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x648")]
	public VoiceLineCategory enteringB3;

	[Token(Token = "0x4001846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x650")]
	public VoiceLineCategory enteringB4;

	[Token(Token = "0x4001847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x658")]
	public VoiceLineCategory wakeTheFuckUpRookie;

	[Token(Token = "0x4001848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x660")]
	[Header("Misc")]
	public VoiceLineCategory angry;

	[Token(Token = "0x4001849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x668")]
	public VoiceLineCategory evilLaughs;

	[Token(Token = "0x400184A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x670")]
	public VoiceLineCategory funnyLaughs;

	[Token(Token = "0x400184B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x678")]
	public VoiceLineCategory satireLaughs;

	[Token(Token = "0x400184C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x680")]
	public VoiceLineCategory hmmphs;

	[Token(Token = "0x400184D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x688")]
	public VoiceLineCategory[] relicLines;

	[Token(Token = "0x6001A3D")]
	[Address(RVA = "0x11BDD3C", Offset = "0x11BDD3C", VA = "0x11BDD3C")]
	public VoiceLinesScriptable()
	{
	}
}
[Token(Token = "0x2000382")]
public class VRIKRotationLimits : MonoBehaviour
{
	[Token(Token = "0x4001870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRIK ik;

	[Token(Token = "0x4001871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RotationLimit[] rotationLimits;

	[Token(Token = "0x6001A43")]
	[Address(RVA = "0x11BDD58", Offset = "0x11BDD58", VA = "0x11BDD58")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A44")]
	[Address(RVA = "0x11BDE84", Offset = "0x11BDE84", VA = "0x11BDE84")]
	private void AfterVRIK()
	{
	}

	[Token(Token = "0x6001A45")]
	[Address(RVA = "0x11BDEE4", Offset = "0x11BDEE4", VA = "0x11BDEE4")]
	public VRIKRotationLimits()
	{
	}
}
[Token(Token = "0x2000383")]
public class VRPlatform : MonoBehaviour
{
	[Token(Token = "0x2000384")]
	public enum VRDevicePlatform
	{
		[Token(Token = "0x4001883")]
		Oculus,
		[Token(Token = "0x4001884")]
		OpenVR,
		[Token(Token = "0x4001885")]
		Simulator,
		[Token(Token = "0x4001886")]
		PSVR,
		[Token(Token = "0x4001887")]
		Pico,
		[Token(Token = "0x4001888")]
		PSVR2,
		[Token(Token = "0x4001889")]
		Flat
	}

	[Token(Token = "0x2000385")]
	[CompilerGenerated]
	private sealed class <StartXRCoroutine>d__27 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRPlatform <>4__this;

		[Token(Token = "0x17000308")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001A5A")]
			[Address(RVA = "0x11BFA80", Offset = "0x11BFA80", VA = "0x11BFA80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000309")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0x11BFAC8", Offset = "0x11BFAC8", VA = "0x11BFAC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0x11BF064", Offset = "0x11BF064", VA = "0x11BF064")]
		[DebuggerHidden]
		public <StartXRCoroutine>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0x11BF1C0", Offset = "0x11BF1C0", VA = "0x11BF1C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x11BF1C4", Offset = "0x11BF1C4", VA = "0x11BF1C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x11BFA88", Offset = "0x11BFA88", VA = "0x11BFA88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000386")]
	[CompilerGenerated]
	private sealed class <DelayedEnableVR>d__29 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRPlatform <>4__this;

		[Token(Token = "0x1700030A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001A60")]
			[Address(RVA = "0x11BFEBC", Offset = "0x11BFEBC", VA = "0x11BFEBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700030B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x11BFF04", Offset = "0x11BFF04", VA = "0x11BFF04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0x11BF08C", Offset = "0x11BF08C", VA = "0x11BF08C")]
		[DebuggerHidden]
		public <DelayedEnableVR>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0x11BFB24", Offset = "0x11BFB24", VA = "0x11BFB24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0x11BFB28", Offset = "0x11BFB28", VA = "0x11BFB28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0x11BFEC4", Offset = "0x11BFEC4", VA = "0x11BFEC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static VRPlatform Instance;

	[Token(Token = "0x4001873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool useSimulatorInEditor;

	[Token(Token = "0x4001874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool useOculusModeInStandaloneEditor;

	[Token(Token = "0x4001875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool overrideUseSimulatorInPS4;

	[Token(Token = "0x4001877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HVRInputManager hvrInputManager;

	[Token(Token = "0x4001878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HVRGlobalInputs hvrGlobalInputs;

	[Token(Token = "0x4001879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public XRLoader steamVRLoader;

	[Token(Token = "0x400187A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public XRLoader oculusLoader;

	[Token(Token = "0x400187B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public XRLoader psvrLoader;

	[Token(Token = "0x400187C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public XRLoader picoLoader;

	[Token(Token = "0x400187D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public XRLoader psvr2Loader;

	[Token(Token = "0x400187E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static bool initialized;

	[Token(Token = "0x400187F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool steamInitialized;

	[Token(Token = "0x4001880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool vrInitiliazed;

	[Token(Token = "0x4001881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private XRLoader _selectedXRLoader;

	[Token(Token = "0x17000307")]
	public static VRDevicePlatform vrDevicePlatform
	{
		[Token(Token = "0x6001A46")]
		[Address(RVA = "0x11BDEEC", Offset = "0x11BDEEC", VA = "0x11BDEEC")]
		[CompilerGenerated]
		get
		{
			return default(VRDevicePlatform);
		}
		[Token(Token = "0x6001A47")]
		[Address(RVA = "0x11BDF34", Offset = "0x11BDF34", VA = "0x11BDF34")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001A48")]
	[Address(RVA = "0x11BDF80", Offset = "0x11BDF80", VA = "0x11BDF80")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A49")]
	[Address(RVA = "0x11BE4DC", Offset = "0x11BE4DC", VA = "0x11BE4DC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A4A")]
	[Address(RVA = "0x11BE5EC", Offset = "0x11BE5EC", VA = "0x11BE5EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A4B")]
	[Address(RVA = "0x11BE690", Offset = "0x11BE690", VA = "0x11BE690")]
	private void SceneChanged(Scene arg0, Scene arg1)
	{
	}

	[Token(Token = "0x6001A4C")]
	[Address(RVA = "0x11BE1F0", Offset = "0x11BE1F0", VA = "0x11BE1F0")]
	private void SetPlatform()
	{
	}

	[Token(Token = "0x6001A4D")]
	[Address(RVA = "0x11BE774", Offset = "0x11BE774", VA = "0x11BE774")]
	private void ChangeHVR_SDK()
	{
	}

	[Token(Token = "0x6001A4E")]
	[Address(RVA = "0x11BE9EC", Offset = "0x11BE9EC", VA = "0x11BE9EC")]
	private void LoadVRDevice()
	{
	}

	[Token(Token = "0x6001A4F")]
	[Address(RVA = "0x11BEFF0", Offset = "0x11BEFF0", VA = "0x11BEFF0")]
	[IteratorStateMachine(typeof(<StartXRCoroutine>d__27))]
	public IEnumerator<float> StartXRCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001A50")]
	[Address(RVA = "0x11BE0B8", Offset = "0x11BE0B8", VA = "0x11BE0B8")]
	private void FindHVRInputManager()
	{
	}

	[Token(Token = "0x6001A51")]
	[Address(RVA = "0x11BEF7C", Offset = "0x11BEF7C", VA = "0x11BEF7C")]
	[IteratorStateMachine(typeof(<DelayedEnableVR>d__29))]
	private IEnumerator<float> DelayedEnableVR()
	{
		return null;
	}

	[Token(Token = "0x6001A52")]
	[Address(RVA = "0x11BF0B4", Offset = "0x11BF0B4", VA = "0x11BF0B4")]
	private void ActivateSteamInputActions()
	{
	}

	[Token(Token = "0x6001A53")]
	[Address(RVA = "0x11BF0B8", Offset = "0x11BF0B8", VA = "0x11BF0B8")]
	private void SteamVRInitialize()
	{
	}

	[Token(Token = "0x6001A54")]
	[Address(RVA = "0x11BF0BC", Offset = "0x11BF0BC", VA = "0x11BF0BC")]
	public void StartXR()
	{
	}

	[Token(Token = "0x6001A55")]
	[Address(RVA = "0x11BF124", Offset = "0x11BF124", VA = "0x11BF124")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A56")]
	[Address(RVA = "0x11BF1B8", Offset = "0x11BF1B8", VA = "0x11BF1B8")]
	public VRPlatform()
	{
	}
}
[Token(Token = "0x2000387")]
public class WallNode : MonoBehaviourPun, IPoolable, IEventSystemHandler, IDamageable, IPunInstantiateMagicCallback
{
	[Token(Token = "0x4001890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DamageType takeDamageType;

	[Token(Token = "0x4001891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float velocityRequiredToOpen;

	[Token(Token = "0x4001892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip failOpenAudioClip;

	[Token(Token = "0x4001893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip openAudioClip;

	[Token(Token = "0x4001894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int hitAmountToOpen;

	[Token(Token = "0x4001895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource audioSource;

	[Token(Token = "0x4001896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Loot _myLoot;

	[Token(Token = "0x4001897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int _currentHitAmount;

	[Token(Token = "0x4001898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool _opened;

	[Token(Token = "0x4001899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool allowSetRenderers;

	[Token(Token = "0x400189A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CoroutineHandle _levitateHandle;

	[Token(Token = "0x400189B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private MeshRenderer meshRenderer;

	[Token(Token = "0x400189C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject levitatingLootEffectPrefab;

	[Token(Token = "0x400189D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject _levitatingEffectInstance;

	[Token(Token = "0x400189E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Renderer[] _renderers;

	[Token(Token = "0x400189F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private LootSpawnAndDespawnManager.LootType _myLootType;

	[Token(Token = "0x1700030C")]
	public bool destroyed
	{
		[Token(Token = "0x6001A63")]
		[Address(RVA = "0x11BFF60", Offset = "0x11BFF60", VA = "0x11BFF60")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001A64")]
	[Address(RVA = "0x11BFFBC", Offset = "0x11BFFBC", VA = "0x11BFFBC")]
	public void SetRenderers(bool status)
	{
	}

	[Token(Token = "0x6001A65")]
	[Address(RVA = "0x11C001C", Offset = "0x11C001C", VA = "0x11C001C")]
	public bool IsVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x6001A66")]
	[Address(RVA = "0x11C008C", Offset = "0x11C008C", VA = "0x11C008C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001A67")]
	[Address(RVA = "0x11C00BC", Offset = "0x11C00BC", VA = "0x11C00BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A68")]
	[Address(RVA = "0x11C024C", Offset = "0x11C024C", VA = "0x11C024C", Slot = "4")]
	public void Acquire()
	{
	}

	[Token(Token = "0x6001A69")]
	[Address(RVA = "0x11C0254", Offset = "0x11C0254", VA = "0x11C0254", Slot = "5")]
	public void Release()
	{
	}

	[Token(Token = "0x6001A6A")]
	[Address(RVA = "0x11C016C", Offset = "0x11C016C", VA = "0x11C016C")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6001A6B")]
	[Address(RVA = "0x11C045C", Offset = "0x11C045C", VA = "0x11C045C")]
	private void Hit(int hits = 1)
	{
	}

	[Token(Token = "0x6001A6C")]
	[Address(RVA = "0x11C0610", Offset = "0x11C0610", VA = "0x11C0610")]
	[PunRPC]
	private void OpenWallNodeRPC()
	{
	}

	[Token(Token = "0x6001A6D")]
	[Address(RVA = "0x11C0C68", Offset = "0x11C0C68", VA = "0x11C0C68")]
	private void UnableToOpen()
	{
	}

	[Token(Token = "0x6001A6E")]
	[Address(RVA = "0x11C0D10", Offset = "0x11C0D10", VA = "0x11C0D10")]
	public void InitiliazeGenerate(MultiNode randomWallNode)
	{
	}

	[Token(Token = "0x6001A6F")]
	[Address(RVA = "0x11C09CC", Offset = "0x11C09CC", VA = "0x11C09CC")]
	private void SpawnLoot(bool startKinematic)
	{
	}

	[Token(Token = "0x6001A70")]
	[Address(RVA = "0x11C0EA0", Offset = "0x11C0EA0", VA = "0x11C0EA0")]
	[PunRPC]
	private void SetFloatingLootModeRPC()
	{
	}

	[Token(Token = "0x6001A71")]
	[Address(RVA = "0x11C11BC", Offset = "0x11C11BC", VA = "0x11C11BC")]
	public void LevitateLoot()
	{
	}

	[Token(Token = "0x6001A72")]
	[Address(RVA = "0x11C12D8", Offset = "0x11C12D8", VA = "0x11C12D8", Slot = "6")]
	[PunRPC]
	public void DamageRPC(int damageTaken, DamageType damageType)
	{
	}

	[Token(Token = "0x6001A73")]
	[Address(RVA = "0x11C1368", Offset = "0x11C1368", VA = "0x11C1368", Slot = "7")]
	public void OnPhotonInstantiate(PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001A74")]
	[Address(RVA = "0x11C14D8", Offset = "0x11C14D8", VA = "0x11C14D8")]
	public WallNode()
	{
	}
}
[Token(Token = "0x2000388")]
public class WaterSplash : MonoBehaviour
{
	[Token(Token = "0x2000389")]
	[CompilerGenerated]
	private sealed class <CooldownRigidbodyCoroutine>d__9 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody rigidbody;

		[Token(Token = "0x1700030D")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001A80")]
			[Address(RVA = "0x11C2298", Offset = "0x11C2298", VA = "0x11C2298", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700030E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A82")]
			[Address(RVA = "0x11C22E0", Offset = "0x11C22E0", VA = "0x11C22E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0x11C1EA8", Offset = "0x11C1EA8", VA = "0x11C1EA8")]
		[DebuggerHidden]
		public <CooldownRigidbodyCoroutine>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0x11C211C", Offset = "0x11C211C", VA = "0x11C211C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0x11C2120", Offset = "0x11C2120", VA = "0x11C2120", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0x11C22A0", Offset = "0x11C22A0", VA = "0x11C22A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200038A")]
	[CompilerGenerated]
	private sealed class <DragIncreaseCoroutine>d__10 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody rigidbody;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <origDrag>5__2;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <origAngu>5__3;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__4;

		[Token(Token = "0x1700030F")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001A86")]
			[Address(RVA = "0x11C24A8", Offset = "0x11C24A8", VA = "0x11C24A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000310")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A88")]
			[Address(RVA = "0x11C24F0", Offset = "0x11C24F0", VA = "0x11C24F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0x11C1ED0", Offset = "0x11C1ED0", VA = "0x11C1ED0")]
		[DebuggerHidden]
		public <DragIncreaseCoroutine>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0x11C233C", Offset = "0x11C233C", VA = "0x11C233C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0x11C2340", Offset = "0x11C2340", VA = "0x11C2340", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0x11C24B0", Offset = "0x11C24B0", VA = "0x11C24B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40018A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask waterLayer;

	[Token(Token = "0x40018A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float _readyTime;

	[Token(Token = "0x40018A2")]
	private const float Cooldown = 0.5f;

	[Token(Token = "0x40018A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onWaterCollision;

	[Token(Token = "0x40018A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Rigidbody> cooldownObjectList;

	[Token(Token = "0x40018A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BoxCollider _myCollider;

	[Token(Token = "0x6001A75")]
	[Address(RVA = "0x11C14F8", Offset = "0x11C14F8", VA = "0x11C14F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001A76")]
	[Address(RVA = "0x11C1534", Offset = "0x11C1534", VA = "0x11C1534")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A77")]
	[Address(RVA = "0x11C15CC", Offset = "0x11C15CC", VA = "0x11C15CC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001A78")]
	[Address(RVA = "0x11C1DC0", Offset = "0x11C1DC0", VA = "0x11C1DC0")]
	[IteratorStateMachine(typeof(<CooldownRigidbodyCoroutine>d__9))]
	private IEnumerator<float> CooldownRigidbodyCoroutine(Rigidbody rigidbody)
	{
		return null;
	}

	[Token(Token = "0x6001A79")]
	[Address(RVA = "0x11C1E34", Offset = "0x11C1E34", VA = "0x11C1E34")]
	[IteratorStateMachine(typeof(<DragIncreaseCoroutine>d__10))]
	private IEnumerator<float> DragIncreaseCoroutine(Rigidbody rigidbody)
	{
		return null;
	}

	[Token(Token = "0x6001A7A")]
	[Address(RVA = "0x11C1EF8", Offset = "0x11C1EF8", VA = "0x11C1EF8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001A7B")]
	[Address(RVA = "0x11C207C", Offset = "0x11C207C", VA = "0x11C207C")]
	public WaterSplash()
	{
	}
}
[Token(Token = "0x200038B")]
public class WaterWheel : MonoBehaviour
{
	[Token(Token = "0x40018AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float rotateSpeed;

	[Token(Token = "0x6001A89")]
	[Address(RVA = "0x11C254C", Offset = "0x11C254C", VA = "0x11C254C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A8A")]
	[Address(RVA = "0x11C25F0", Offset = "0x11C25F0", VA = "0x11C25F0")]
	public WaterWheel()
	{
	}
}
[Token(Token = "0x200038C")]
public class WeatherEffects : MonoBehaviour
{
	[Token(Token = "0x40018B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject snow;

	[Token(Token = "0x40018B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject snowLowQuality;

	[Token(Token = "0x40018B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject windTrails;

	[Token(Token = "0x40018B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject clouds;

	[Token(Token = "0x40018B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject auroraParent;

	[Token(Token = "0x40018B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] auroraBorealis;

	[Token(Token = "0x40018B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] meteor;

	[Token(Token = "0x40018B7")]
	private const float CloudRotateSpeed = 0.1f;

	[Token(Token = "0x6001A8B")]
	[Address(RVA = "0x11C2600", Offset = "0x11C2600", VA = "0x11C2600")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A8C")]
	[Address(RVA = "0x11C2664", Offset = "0x11C2664", VA = "0x11C2664")]
	public void ActivateRandomAuroraBorealis()
	{
	}

	[Token(Token = "0x6001A8D")]
	[Address(RVA = "0x11C2750", Offset = "0x11C2750", VA = "0x11C2750")]
	public void ActivateMeteor(int state)
	{
	}

	[Token(Token = "0x6001A8E")]
	[Address(RVA = "0x11C298C", Offset = "0x11C298C", VA = "0x11C298C")]
	public void RandomizeClouds()
	{
	}

	[Token(Token = "0x6001A8F")]
	[Address(RVA = "0x11C2AB8", Offset = "0x11C2AB8", VA = "0x11C2AB8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A90")]
	[Address(RVA = "0x11C2BF4", Offset = "0x11C2BF4", VA = "0x11C2BF4")]
	public WeatherEffects()
	{
	}
}
[Token(Token = "0x200038D")]
public static class WeightedRandomizer
{
	[Token(Token = "0x6001A91")]
	public static WeightedRandomizer<R> From<R>(Dictionary<R, int> spawnRate)
	{
		return null;
	}
}
[Token(Token = "0x200038E")]
public class WeightedRandomizer<T>
{
	[Token(Token = "0x40018B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static System.Random random;

	[Token(Token = "0x40018B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Dictionary<T, int> _weights;

	[Token(Token = "0x6001A92")]
	public WeightedRandomizer(Dictionary<T, int> weights)
	{
	}

	[Token(Token = "0x6001A93")]
	public T TakeOne()
	{
		return (T)null;
	}

	[Token(Token = "0x6001A94")]
	private List<KeyValuePair<T, int>> Sort(Dictionary<T, int> weights)
	{
		return null;
	}
}
[Token(Token = "0x2000390")]
[RequireComponent(typeof(BetterVelocityEstimator))]
[RequireComponent(typeof(AudioSource))]
public class WorkersGlove : MonoBehaviourPun, IPunObservable
{
	[Token(Token = "0x2000391")]
	[CompilerGenerated]
	private sealed class <_VibrateControllerCoroutine>d__44 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool continuous;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float amplitude;

		[Token(Token = "0x17000311")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001AB2")]
			[Address(RVA = "0x11C5474", Offset = "0x11C5474", VA = "0x11C5474", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000312")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001AB4")]
			[Address(RVA = "0x11C54BC", Offset = "0x11C54BC", VA = "0x11C54BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0x11C4CAC", Offset = "0x11C4CAC", VA = "0x11C4CAC")]
		[DebuggerHidden]
		public <_VibrateControllerCoroutine>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x11C5270", Offset = "0x11C5270", VA = "0x11C5270", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0x11C5274", Offset = "0x11C5274", VA = "0x11C5274", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0x11C547C", Offset = "0x11C547C", VA = "0x11C547C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000392")]
	[CompilerGenerated]
	private sealed class <_EnableModels>d__46 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WorkersGlove <>4__this;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int level;

		[Token(Token = "0x17000313")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6001AB8")]
			[Address(RVA = "0x11C55C8", Offset = "0x11C55C8", VA = "0x11C55C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000314")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001ABA")]
			[Address(RVA = "0x11C5610", Offset = "0x11C5610", VA = "0x11C5610", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0x11C4D58", Offset = "0x11C4D58", VA = "0x11C4D58")]
		[DebuggerHidden]
		public <_EnableModels>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0x11C5518", Offset = "0x11C5518", VA = "0x11C5518", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0x11C551C", Offset = "0x11C551C", VA = "0x11C551C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x11C55D0", Offset = "0x11C55D0", VA = "0x11C55D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40018BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int maxObjectAmount;

	[Token(Token = "0x40018BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float range;

	[Token(Token = "0x40018BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float minHoverRange;

	[Token(Token = "0x40018BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float maxHoverRange;

	[Token(Token = "0x40018C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float pullForce;

	[Token(Token = "0x40018C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform vacuumPoint;

	[Token(Token = "0x40018C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float pulledObjectOrbitSpeed;

	[Token(Token = "0x40018C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float pullingObjecSlowAmount;

	[Token(Token = "0x40018C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float magnitudeMultiplier;

	[Token(Token = "0x40018C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip lootPullingClip;

	[Token(Token = "0x40018C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip lootPulledClip;

	[Token(Token = "0x40018C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip lootPullingClipVibration;

	[Token(Token = "0x40018C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioClip lootPulledClipVibration;

	[Token(Token = "0x40018C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private LayerMask pullableLayer;

	[Token(Token = "0x40018CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Rigidbody> currentlyPulling;

	[Token(Token = "0x40018CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<Rigidbody> currentlyPulled;

	[Token(Token = "0x40018CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private BetterVelocityEstimator velocityEstimator;

	[Token(Token = "0x40018CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool pullingLoots;

	[Token(Token = "0x40018CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool _inputStatus;

	[Token(Token = "0x40018CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private BackPack currentBackpackReference;

	[Token(Token = "0x40018D0")]
	private const string vibrateControllerCoroutineName = "WorkersGloveVibrateControllerCoroutineName";

	[Token(Token = "0x40018D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private PlayerAvatar playerAvatar;

	[Token(Token = "0x40018D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private AudioSource idleAudioSource;

	[Token(Token = "0x40018D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private AudioSource vibrationAS;

	[Token(Token = "0x40018D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private ParticleSystem vacuumParticleSystem;

	[Token(Token = "0x40018D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private CosmeticController myCosmeticController;

	[Token(Token = "0x40018D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Collider[] _sphereCastBuffer;

	[Token(Token = "0x6001A99")]
	[Address(RVA = "0x11C2BFC", Offset = "0x11C2BFC", VA = "0x11C2BFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A9A")]
	[Address(RVA = "0x11C2CDC", Offset = "0x11C2CDC", VA = "0x11C2CDC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A9B")]
	[Address(RVA = "0x11C2EF4", Offset = "0x11C2EF4", VA = "0x11C2EF4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A9C")]
	[Address(RVA = "0x11C3048", Offset = "0x11C3048", VA = "0x11C3048")]
	public void UpdateRotation()
	{
	}

	[Token(Token = "0x6001A9D")]
	[Address(RVA = "0x11C30BC", Offset = "0x11C30BC", VA = "0x11C30BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A9E")]
	[Address(RVA = "0x11C3308", Offset = "0x11C3308", VA = "0x11C3308")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001A9F")]
	[Address(RVA = "0x11C32C0", Offset = "0x11C32C0", VA = "0x11C32C0")]
	private void PullingLootsChanged()
	{
	}

	[Token(Token = "0x6001AA0")]
	[Address(RVA = "0x11C33D8", Offset = "0x11C33D8", VA = "0x11C33D8")]
	private void PullLoots()
	{
	}

	[Token(Token = "0x6001AA1")]
	[Address(RVA = "0x11C426C", Offset = "0x11C426C", VA = "0x11C426C")]
	private void StartPulling(Rigidbody rb, Loot loot, bool changeOwnership)
	{
	}

	[Token(Token = "0x6001AA2")]
	[Address(RVA = "0x11C4570", Offset = "0x11C4570", VA = "0x11C4570")]
	private void ChangeOwnerShip(GameObject changeOwnershipObject)
	{
	}

	[Token(Token = "0x6001AA3")]
	[Address(RVA = "0x11C3C9C", Offset = "0x11C3C9C", VA = "0x11C3C9C")]
	private void DropLoots()
	{
	}

	[Token(Token = "0x6001AA4")]
	[Address(RVA = "0x11C4658", Offset = "0x11C4658", VA = "0x11C4658")]
	private void DropLoot(Rigidbody rb)
	{
	}

	[Token(Token = "0x6001AA5")]
	[Address(RVA = "0x11C4754", Offset = "0x11C4754", VA = "0x11C4754")]
	private void LootLoots()
	{
	}

	[Token(Token = "0x6001AA6")]
	[Address(RVA = "0x11C4A0C", Offset = "0x11C4A0C", VA = "0x11C4A0C")]
	private void SetRange(float range)
	{
	}

	[Token(Token = "0x6001AA7")]
	[Address(RVA = "0x11C4A14", Offset = "0x11C4A14", VA = "0x11C4A14")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001AA8")]
	[Address(RVA = "0x11C4B98", Offset = "0x11C4B98", VA = "0x11C4B98")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001AA9")]
	[Address(RVA = "0x11C4918", Offset = "0x11C4918", VA = "0x11C4918")]
	private void KillVibrate()
	{
	}

	[Token(Token = "0x6001AAA")]
	[Address(RVA = "0x11C44F4", Offset = "0x11C44F4", VA = "0x11C44F4")]
	[IteratorStateMachine(typeof(<_VibrateControllerCoroutine>d__44))]
	private IEnumerator<float> _VibrateControllerCoroutine(float amplitude, bool continuous = true)
	{
		return null;
	}

	[Token(Token = "0x6001AAB")]
	[Address(RVA = "0x11C2DEC", Offset = "0x11C2DEC", VA = "0x11C2DEC")]
	private void OtherUpgraded(OtherUpgradePathScriptableObject.UpgradeType arg0)
	{
	}

	[Token(Token = "0x6001AAC")]
	[Address(RVA = "0x11C4CD4", Offset = "0x11C4CD4", VA = "0x11C4CD4")]
	[IteratorStateMachine(typeof(<_EnableModels>d__46))]
	private IEnumerator<float> _EnableModels(int level)
	{
		return null;
	}

	[Token(Token = "0x6001AAD")]
	[Address(RVA = "0x11C4D80", Offset = "0x11C4D80", VA = "0x11C4D80", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001AAE")]
	[Address(RVA = "0x11C5150", Offset = "0x11C5150", VA = "0x11C5150")]
	public WorkersGlove()
	{
	}
}
[Token(Token = "0x2000393")]
public static class XRGeneralSettingsHack
{
	[Token(Token = "0x6001ABB")]
	[Address(RVA = "0x11C566C", Offset = "0x11C566C", VA = "0x11C566C")]
	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterAssembliesLoaded)]
	private static void UpdateRegisteredLoadersList()
	{
	}
}
[Token(Token = "0x2000394")]
[CreateAssetMenu(menuName = "Loading Screen Hints/New Hint")]
public class LoadingScreenHint : ScriptableObject
{
	[Token(Token = "0x40018DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Not yet implemented")]
	[Header("To enable this hint, add this ScriptableObject")]
	[Header("to LoadingScreenHintController in LoadingScreenFade prefab.")]
	public bool controllerSpecific;

	[Token(Token = "0x40018E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LocalizedString hint;

	[Token(Token = "0x40018E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("These can be left empty if the controllerSpecific bool is set to false.")]
	[Header("Controller Specific Terms")]
	[Space(10f)]
	public LocalizedString hintPSVR;

	[Token(Token = "0x40018E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public LocalizedString hintVive;

	[Token(Token = "0x40018E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public LocalizedString hintKnuckles;

	[Token(Token = "0x6001ABC")]
	[Address(RVA = "0x11C5A78", Offset = "0x11C5A78", VA = "0x11C5A78")]
	public LocalizedString GetHint()
	{
		return default(LocalizedString);
	}

	[Token(Token = "0x6001ABD")]
	[Address(RVA = "0x11C5AC4", Offset = "0x11C5AC4", VA = "0x11C5AC4")]
	public LoadingScreenHint()
	{
	}
}
[Token(Token = "0x2000395")]
public class ExampleCardItemAction : MonoBehaviour
{
	[Token(Token = "0x40018E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform title;

	[Token(Token = "0x40018E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform description;

	[Token(Token = "0x40018E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Text titleText;

	[Token(Token = "0x40018E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text descriptionText;

	[Token(Token = "0x6001ABE")]
	[Address(RVA = "0x11C5ACC", Offset = "0x11C5ACC", VA = "0x11C5ACC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001ABF")]
	[Address(RVA = "0x11C5BC8", Offset = "0x11C5BC8", VA = "0x11C5BC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001AC0")]
	[Address(RVA = "0x11C5C80", Offset = "0x11C5C80", VA = "0x11C5C80")]
	private void ShowDescription(Card card)
	{
	}

	[Token(Token = "0x6001AC1")]
	[Address(RVA = "0x11C5DA8", Offset = "0x11C5DA8", VA = "0x11C5DA8")]
	public ExampleCardItemAction()
	{
	}
}
[Token(Token = "0x2000396")]
public class ExampleDynamicCardList : MonoBehaviour
{
	[Token(Token = "0x40018E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CardListManager clm;

	[Token(Token = "0x6001AC2")]
	[Address(RVA = "0x11C5DB0", Offset = "0x11C5DB0", VA = "0x11C5DB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001AC3")]
	[Address(RVA = "0x11C5DB4", Offset = "0x11C5DB4", VA = "0x11C5DB4")]
	public void UpdateList()
	{
	}

	[Token(Token = "0x6001AC4")]
	[Address(RVA = "0x11C5F84", Offset = "0x11C5F84", VA = "0x11C5F84")]
	public ExampleDynamicCardList()
	{
	}
}
[Token(Token = "0x2000397")]
public class ExampleOptionControl : MonoBehaviour
{
	[Token(Token = "0x40018E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OptionsManager optionsManager;

	[Token(Token = "0x6001AC5")]
	[Address(RVA = "0x11C5F8C", Offset = "0x11C5F8C", VA = "0x11C5F8C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001AC6")]
	[Address(RVA = "0x11C6054", Offset = "0x11C6054", VA = "0x11C6054")]
	private void SwitchInteractionMode(int i)
	{
	}

	[Token(Token = "0x6001AC7")]
	[Address(RVA = "0x11C61DC", Offset = "0x11C61DC", VA = "0x11C61DC")]
	public ExampleOptionControl()
	{
	}
}
[Token(Token = "0x2000398")]
public class InvokeKeyboard : MonoBehaviour, ISelectHandler, IEventSystemHandler, IDeselectHandler
{
	[Token(Token = "0x40018EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MobileKeyboardManager keyboard;

	[Token(Token = "0x40018EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hideKeyboardOnDeslect;

	[Token(Token = "0x6001AC8")]
	[Address(RVA = "0x11C61E4", Offset = "0x11C61E4", VA = "0x11C61E4", Slot = "4")]
	public void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x6001AC9")]
	[Address(RVA = "0x11C6258", Offset = "0x11C6258", VA = "0x11C6258", Slot = "5")]
	public void OnDeselect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x6001ACA")]
	[Address(RVA = "0x11C62D4", Offset = "0x11C62D4", VA = "0x11C62D4")]
	public InvokeKeyboard()
	{
	}
}
[Token(Token = "0x2000399")]
public class SwitchUI : MonoBehaviour
{
	[Token(Token = "0x40018EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> canvas;

	[Token(Token = "0x40018ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentIndex;

	[Token(Token = "0x6001ACB")]
	[Address(RVA = "0x11C62DC", Offset = "0x11C62DC", VA = "0x11C62DC")]
	public void NextUI()
	{
	}

	[Token(Token = "0x6001ACC")]
	[Address(RVA = "0x11C63A0", Offset = "0x11C63A0", VA = "0x11C63A0")]
	public SwitchUI()
	{
	}
}
namespace Umbrace.Unity.PurePool.Photon
{
	[Serializable]
	[Token(Token = "0x200039A")]
	public class PrefabPool : IPunPrefabPool
	{
		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		[SerializeField]
		private NamedGameObjectPoolManager manager;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<string, GameObject> resourceCache;

		[Token(Token = "0x17000315")]
		public Dictionary<string, GameObject> ResourceCache
		{
			[Token(Token = "0x6001ACD")]
			[Address(RVA = "0x11C63A8", Offset = "0x11C63A8", VA = "0x11C63A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000316")]
		public NamedGameObjectPoolManager Manager
		{
			[Token(Token = "0x6001ACE")]
			[Address(RVA = "0x11C63B0", Offset = "0x11C63B0", VA = "0x11C63B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001ACF")]
			[Address(RVA = "0x11C63B8", Offset = "0x11C63B8", VA = "0x11C63B8")]
			set
			{
			}
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0x11C657C", Offset = "0x11C657C", VA = "0x11C657C", Slot = "5")]
		public void Destroy(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0x11C6598", Offset = "0x11C6598", VA = "0x11C6598", Slot = "4")]
		public GameObject Instantiate(string prefabId, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0x11C6930", Offset = "0x11C6930", VA = "0x11C6930")]
		public PrefabPool()
		{
		}
	}
	[Token(Token = "0x200039B")]
	public class PunPoolingSetup : MonoBehaviour
	{
		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		private PrefabPool punPrefabPool;

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0x11C69B8", Offset = "0x11C69B8", VA = "0x11C69B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0x11C6A80", Offset = "0x11C6A80", VA = "0x11C6A80")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0x11C6ADC", Offset = "0x11C6ADC", VA = "0x11C6ADC")]
		public PunPoolingSetup()
		{
		}
	}
}
namespace Sigtrap.Editors.ShaderStripper
{
	[Token(Token = "0x200039C")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Force Keywords")]
	public class ShaderForceKeywords : ShaderStripperBase
	{
		[Serializable]
		[Token(Token = "0x200039D")]
		private struct ForceBuiltin
		{
			[Token(Token = "0x40018F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BuiltinShaderDefine defineToMatch;

			[Token(Token = "0x40018F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public BuiltinShaderDefine defineToForce;

			[Token(Token = "0x40018F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[UnityEngine.Tooltip("If true, check Define To Match is NOT enabled")]
			public bool invertMatch;

			[Token(Token = "0x40018F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			[UnityEngine.Tooltip("If true, DISABLE Define To Force")]
			public bool invertForce;
		}

		[Serializable]
		[Token(Token = "0x200039E")]
		private struct ForceKeyword
		{
			[Token(Token = "0x40018F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string keywordToMatch;

			[Token(Token = "0x40018F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string keywordToForce;

			[Token(Token = "0x40018F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("If true, check Keyword To Match is NOT enabled")]
			public bool invertMatch;

			[Token(Token = "0x40018FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[UnityEngine.Tooltip("If true, DISABLE Keyword To Force")]
			public bool invertForce;
		}

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private ForceBuiltin[] _forceBuiltins;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ForceKeyword[] _forceKeywords;

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x11C6AE4", Offset = "0x11C6AE4", VA = "0x11C6AE4")]
		public ShaderForceKeywords()
		{
		}
	}
	[Token(Token = "0x200039F")]
	public class ShaderLog
	{
		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<string> log;

		[Token(Token = "0x17000317")]
		public string logName
		{
			[Token(Token = "0x6001AD7")]
			[Address(RVA = "0x11C6B14", Offset = "0x11C6B14", VA = "0x11C6B14")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AD8")]
			[Address(RVA = "0x11C6B1C", Offset = "0x11C6B1C", VA = "0x11C6B1C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000318")]
		public int Count
		{
			[Token(Token = "0x6001AD9")]
			[Address(RVA = "0x11C6B24", Offset = "0x11C6B24", VA = "0x11C6B24")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0x11C6B6C", Offset = "0x11C6B6C", VA = "0x11C6B6C")]
		public ShaderLog(string logName)
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0x11C6C10", Offset = "0x11C6C10", VA = "0x11C6C10")]
		public void Add(string s)
		{
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0x11C6CC0", Offset = "0x11C6CC0", VA = "0x11C6CC0")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0x11C6D30", Offset = "0x11C6D30", VA = "0x11C6D30")]
		public void Insert(int index, string s)
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0x11C6D98", Offset = "0x11C6D98", VA = "0x11C6D98")]
		public bool Contains(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0x11C6DF0", Offset = "0x11C6DF0", VA = "0x11C6DF0")]
		public string[] ToArray()
		{
			return null;
		}
	}
	[Token(Token = "0x20003A0")]
	public abstract class ShaderStripperBase : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20003A1")]
		protected class StringMatch
		{
			[Token(Token = "0x20003A2")]
			public enum MatchType
			{
				[Token(Token = "0x4001906")]
				EQUALS,
				[Token(Token = "0x4001907")]
				CONTAINS,
				[Token(Token = "0x4001908")]
				STARTSWITH,
				[Token(Token = "0x4001909")]
				ENDSWITH
			}

			[Token(Token = "0x4001902")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MatchType matchType;

			[Token(Token = "0x4001903")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string namePattern;

			[Token(Token = "0x4001904")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool caseInsensitive;

			[Token(Token = "0x6001AE2")]
			[Address(RVA = "0x11C6E48", Offset = "0x11C6E48", VA = "0x11C6E48")]
			public bool Evaluate(string name)
			{
				return default(bool);
			}

			[Token(Token = "0x6001AE3")]
			[Address(RVA = "0x11C6F40", Offset = "0x11C6F40", VA = "0x11C6F40")]
			public StringMatch()
			{
			}
		}

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		private bool _expanded;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		[SerializeField]
		private int _order;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _active;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string _notes;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected bool _logOutput;

		[Token(Token = "0x17000319")]
		public bool active
		{
			[Token(Token = "0x6001AE0")]
			[Address(RVA = "0x11C6E40", Offset = "0x11C6E40", VA = "0x11C6E40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0x11C6AFC", Offset = "0x11C6AFC", VA = "0x11C6AFC")]
		protected ShaderStripperBase()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Stripper Path")]
	public class ShaderStripperPath : ShaderStripperBase
	{
		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private StringMatch[] _pathBlacklist;

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0x11C6F48", Offset = "0x11C6F48", VA = "0x11C6F48")]
		public ShaderStripperPath()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Stripper Platform")]
	public class ShaderStripperPlatform : ShaderStripperBase
	{
		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		[UnityEngine.Tooltip("If checked, use as whitelist. Otherwise, blacklist.")]
		private bool _whitelist;

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0x11C6F60", Offset = "0x11C6F60", VA = "0x11C6F60")]
		public ShaderStripperPlatform()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Stripper Simple")]
	public class ShaderStripperSimple : ShaderStripperBase
	{
		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[UnityEngine.Tooltip("If shader name matches ANY of these, will be considered for stripping.")]
		private List<StringMatch> _blacklistedShaderNames;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("If pass type matches ANY of these, will be considerered for stripping.")]
		private List<PassType> _blacklistedPassTypes;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("If variant uses ANY of these keywords, will be considered for stripping.")]
		[SerializeField]
		private List<string> _blacklistedKeywords;

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0x11C6F78", Offset = "0x11C6F78", VA = "0x11C6F78")]
		public ShaderStripperSimple()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	[CreateAssetMenu(menuName = "Sigtrap/Shader Stripper Variant Collection")]
	public class ShaderStripperVariantCollection : ShaderStripperBase, ISerializationCallbackReceiver
	{
		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[UnityEngine.Tooltip("Set a path like Assets/.../<name> (no extension) to merge whitelisted collections into a new collection asset.\nPath to a whitelisted collection (to overwrite) IS allowed.")]
		private string _mergeToFile;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("Only shader variants in these collections will NOT be stripped (except built-in shaders).")]
		private List<ShaderVariantCollection> _whitelistedCollections;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private List<string> _collectionPaths;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Strip Hidden shaders. Be careful - shaders in Resources might get stripped.\nHidden shaders in collections will always have their variants stripped.")]
		[SerializeField]
		private bool _stripHidden;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[UnityEngine.Tooltip("Allow VR versions of variants in collection even when VR keywords not in collection.")]
		[SerializeField]
		private bool _allowVrVariants;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[SerializeField]
		[UnityEngine.Tooltip("Allow GPU instanced versions of variants in collection even when instancing keywords not in collection.")]
		private bool _allowInstancedVariants;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Shaders matching these names will be ignored (not stripped)")]
		[SerializeField]
		private StringMatch[] _ignoreShadersByName;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[UnityEngine.Tooltip("These passtypes will be ignored (not stripped)")]
		private List<PassType> _ignorePassTypes;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _valid;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool _dirty;

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0x11C6F90", Offset = "0x11C6F90", VA = "0x11C6F90", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0x11C6F9C", Offset = "0x11C6F9C", VA = "0x11C6F9C", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x11C6FA8", Offset = "0x11C6FA8", VA = "0x11C6FA8")]
		public ShaderStripperVariantCollection()
		{
		}
	}
}
namespace SteamNetworking
{
	[Token(Token = "0x20003A7")]
	[RequireComponent(typeof(NetworkConnectManager))]
	public class SteamNetworkingManager : MonoBehaviour
	{
		[Token(Token = "0x4001919")]
		public const uint appID = 1523510u;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MultiplayerOptionsPanel optionsPanel;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private InvitePanel invitePanel;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private JoinGamePanel joinGamePanel;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool steamConnected;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool friendsGetted;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ulong storedMySteamID;

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0x11C6FC0", Offset = "0x11C6FC0", VA = "0x11C6FC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0x11C7028", Offset = "0x11C7028", VA = "0x11C7028")]
		private void Start()
		{
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x11C7090", Offset = "0x11C7090", VA = "0x11C7090")]
		public void SteamFriendConnectedRPC(long connectedPlayerID, string connectedPlayerName, byte[] connectedPlayerAvatarBytes, int connectedPlayerAvatarHeight, int connectedPlayerAvatarWidth, Player sender)
		{
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x11C71BC", Offset = "0x11C71BC", VA = "0x11C71BC")]
		public void SteamFriendDisconnectedRPC(long disconnectedFriendID)
		{
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0x11C71D8", Offset = "0x11C71D8", VA = "0x11C71D8")]
		public void DisconnectedFromRoom()
		{
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0x11C72FC", Offset = "0x11C72FC", VA = "0x11C72FC")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x11C76F4", Offset = "0x11C76F4", VA = "0x11C76F4")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x11C771C", Offset = "0x11C771C", VA = "0x11C771C")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0x11C7AFC", Offset = "0x11C7AFC", VA = "0x11C7AFC")]
		public void JoinRoom(string roomCode)
		{
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0x11C7C0C", Offset = "0x11C7C0C", VA = "0x11C7C0C")]
		public void ConnectToSteam()
		{
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0x11C7F40", Offset = "0x11C7F40", VA = "0x11C7F40")]
		private void OnGameRichPresenceJoinRequested(Steamworks.Friend arg1, string arg2)
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0x11C826C", Offset = "0x11C826C", VA = "0x11C826C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0x11C83E8", Offset = "0x11C83E8", VA = "0x11C83E8")]
		private void ChatMessageReceived(Steamworks.Friend friend, string arg2, string message)
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0x11C8910", Offset = "0x11C8910", VA = "0x11C8910")]
		public void PlayerKicked(InGameUI.FriendInfo playerKicked)
		{
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0x11C8A34", Offset = "0x11C8A34", VA = "0x11C8A34")]
		private void UpdateFriendStatus(Steamworks.Friend obj)
		{
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x11C8A74", Offset = "0x11C8A74", VA = "0x11C8A74")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x11C908C", Offset = "0x11C908C", VA = "0x11C908C")]
		public bool ConnectedToSteam()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0x11C9094", Offset = "0x11C9094", VA = "0x11C9094")]
		public SteamNetworkingManager()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public static class SteamHelpers
	{
		[StructLayout(3)]
		[Token(Token = "0x20003A9")]
		[CompilerGenerated]
		private struct <GetImageWithID>d__1 : IAsyncStateMachine
		{
			[Token(Token = "0x4001921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001922")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<Steamworks.Data.Image?> <>t__builder;

			[Token(Token = "0x6001B02")]
			[Address(RVA = "0x11CA2E8", Offset = "0x11CA2E8", VA = "0x11CA2E8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001B03")]
			[Address(RVA = "0x11CA350", Offset = "0x11CA350", VA = "0x11CA350", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x11CA09C", Offset = "0x11CA09C", VA = "0x11CA09C")]
		public static Texture GetFriendAvatarImage(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0x11CA0A4", Offset = "0x11CA0A4", VA = "0x11CA0A4")]
		[AsyncStateMachine(typeof(<GetImageWithID>d__1))]
		public static Task<Steamworks.Data.Image?> GetImageWithID(ulong id)
		{
			return null;
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0x11CA198", Offset = "0x11CA198", VA = "0x11CA198")]
		public static Texture GetFriendTextureFromData(Steamworks.Data.Image imageData)
		{
			return null;
		}

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0x11CA2D4", Offset = "0x11CA2D4", VA = "0x11CA2D4")]
		public static void InviteFriend(InGameUI.FriendInfo friend)
		{
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0x11CA2D8", Offset = "0x11CA2D8", VA = "0x11CA2D8")]
		public static InGameUI.FriendInfo.FriendStatus ConvertUserStatus(InGameUI.FriendInfo friend)
		{
			return default(InGameUI.FriendInfo.FriendStatus);
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0x11CA2E0", Offset = "0x11CA2E0", VA = "0x11CA2E0")]
		public static InGameUI.FriendInfo.FriendStatus UpdateStatus(InGameUI.FriendInfo friend)
		{
			return default(InGameUI.FriendInfo.FriendStatus);
		}
	}
}
namespace PlaystationNetworking
{
	[Token(Token = "0x20003AA")]
	[RequireComponent(typeof(NetworkConnectManager))]
	public class Playstation4NetworkingManager : MonoBehaviour
	{
		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MultiplayerOptionsPanel optionsPanel;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InvitePanel invitePanel;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlaystationGeneralNetworkingManager playstationGeneralNetworkingManager;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InGameUI.FriendInfo myInfo;

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0x11CA3A8", Offset = "0x11CA3A8", VA = "0x11CA3A8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0x11CA44C", Offset = "0x11CA44C", VA = "0x11CA44C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x11CA450", Offset = "0x11CA450", VA = "0x11CA450")]
		public void CheckPlus()
		{
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0x11CA4B8", Offset = "0x11CA4B8", VA = "0x11CA4B8")]
		public void CheckAvailability()
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0x11CA520", Offset = "0x11CA520", VA = "0x11CA520")]
		private void CheckPlusResponse(NpUtils.CheckPlusResponse response)
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0x11CA524", Offset = "0x11CA524", VA = "0x11CA524")]
		private void CheckAvailabilityResponse(Sony.NP.Core.EmptyResponse response)
		{
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x11CA528", Offset = "0x11CA528", VA = "0x11CA528")]
		public void DisplayJoinPlusDialog()
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0x11CA748", Offset = "0x11CA748", VA = "0x11CA748")]
		public bool NotifyPlusFeature()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x11CA750", Offset = "0x11CA750", VA = "0x11CA750")]
		public Playstation4NetworkingManager()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	[RequireComponent(typeof(NetworkConnectManager))]
	public class Playstation5NetworkingManager : MonoBehaviour
	{
		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MuteMicToggle muteMicToggle;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PlaystationGeneralNetworkingManager playstationGeneralNetworkingManager;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x1700031A")]
		public bool notifyPlusFeatureRequestResult
		{
			[Token(Token = "0x6001B14")]
			[Address(RVA = "0x11CAAF4", Offset = "0x11CAAF4", VA = "0x11CAAF4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B15")]
			[Address(RVA = "0x11CAAFC", Offset = "0x11CAAFC", VA = "0x11CAAFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0x11CA7C4", Offset = "0x11CA7C4", VA = "0x11CA7C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x11CA868", Offset = "0x11CA868", VA = "0x11CA868")]
		public void CheckPlus()
		{
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x11CA86C", Offset = "0x11CA86C", VA = "0x11CA86C")]
		public void CheckAvailability()
		{
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x11CA870", Offset = "0x11CA870", VA = "0x11CA870")]
		public void DisplayJoinPlusDialog()
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x11CA874", Offset = "0x11CA874", VA = "0x11CA874")]
		public void SetAgeRestricted(bool showAgeDialog)
		{
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x11CA930", Offset = "0x11CA930", VA = "0x11CA930")]
		public void MuteAllPlayers()
		{
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x11CAA8C", Offset = "0x11CAA8C", VA = "0x11CAA8C")]
		private void DisplayAgeRestrictedMessage()
		{
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x11CAB08", Offset = "0x11CAB08", VA = "0x11CAB08")]
		public void NotifyPlusFeature(bool crossPlatform)
		{
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0x11CAB0C", Offset = "0x11CAB0C", VA = "0x11CAB0C")]
		public Playstation5NetworkingManager()
		{
		}
	}
}
namespace PicoNetworking
{
	[Token(Token = "0x20003AC")]
	public class PicoNetworkingManager : MonoBehaviour
	{
		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MultiplayerOptionsPanel optionsPanel;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InvitePanel invitePanel;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InGameUI.FriendInfo myInfo;

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x11CAB14", Offset = "0x11CAB14", VA = "0x11CAB14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x11CAB7C", Offset = "0x11CAB7C", VA = "0x11CAB7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0x11CABC8", Offset = "0x11CABC8", VA = "0x11CABC8")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x11CABCC", Offset = "0x11CABCC", VA = "0x11CABCC")]
		private void InitializePico()
		{
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x11CABD0", Offset = "0x11CABD0", VA = "0x11CABD0")]
		private void GetUserInfo()
		{
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x11CABD4", Offset = "0x11CABD4", VA = "0x11CABD4")]
		public void PlayerKicked(InGameUI.FriendInfo playerKicked)
		{
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x11CACF8", Offset = "0x11CACF8", VA = "0x11CACF8")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x11CACFC", Offset = "0x11CACFC", VA = "0x11CACFC")]
		public void DisconnectedFromRoom()
		{
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x11CAD00", Offset = "0x11CAD00", VA = "0x11CAD00")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x11CAD04", Offset = "0x11CAD04", VA = "0x11CAD04")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0x11CAD08", Offset = "0x11CAD08", VA = "0x11CAD08")]
		public void PicoFriendConnectedRPC(long connectedPlayerID, string connectedPlayerName, string userAvatarUrl, Player sender)
		{
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x11CAE60", Offset = "0x11CAE60", VA = "0x11CAE60")]
		public void PicoFriendDisconnectedRPC(long disconnectedFriendID)
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x11CAE7C", Offset = "0x11CAE7C", VA = "0x11CAE7C")]
		public PicoNetworkingManager()
		{
		}
	}
}
namespace OculusNetworking
{
	[Token(Token = "0x20003AD")]
	[RequireComponent(typeof(NetworkConnectManager))]
	public class OculusNetworkingManager : MonoBehaviour
	{
		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private JoinGamePanel joinGamePanel;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MultiplayerOptionsPanel optionsPanel;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InvitePanel invitePanel;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool createRoom;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool oculusConnected;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public string roomCode;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ulong roomIDOculus;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string inviterName;

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InGameUI.FriendInfo myInfo;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private User myUserData;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UserList invitableFriends;

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x11CAEF0", Offset = "0x11CAEF0", VA = "0x11CAEF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x11CAF58", Offset = "0x11CAF58", VA = "0x11CAF58")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x11CAFC0", Offset = "0x11CAFC0", VA = "0x11CAFC0")]
		public void PlayerKicked(InGameUI.FriendInfo playerKicked)
		{
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x11CB0E4", Offset = "0x11CB0E4", VA = "0x11CB0E4")]
		public void OculusFriendConnectedRPC(long connectedPlayerID, string connectedPlayerName, string userAvatarUrl, Player sender)
		{
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x11CB268", Offset = "0x11CB268", VA = "0x11CB268")]
		public void OculusFriendDisconnectedRPC(long disconnectedFriendID)
		{
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x11CB4F4", Offset = "0x11CB4F4", VA = "0x11CB4F4")]
		public void InitializeOculus()
		{
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x11CB5C8", Offset = "0x11CB5C8", VA = "0x11CB5C8")]
		public void ConnectToOculus()
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x11CB624", Offset = "0x11CB624", VA = "0x11CB624")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x11CB77C", Offset = "0x11CB77C", VA = "0x11CB77C")]
		public void DisconnectedFromRoom()
		{
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x11CB8A8", Offset = "0x11CB8A8", VA = "0x11CB8A8")]
		private void OnApplicationPause(bool pause)
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x11CBAF0", Offset = "0x11CBAF0", VA = "0x11CBAF0")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0x11CBB48", Offset = "0x11CBB48", VA = "0x11CBB48")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x11CBD90", Offset = "0x11CBD90", VA = "0x11CBD90")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0x11CBFC4", Offset = "0x11CBFC4", VA = "0x11CBFC4")]
		public void JoinRoom(string roomCode, ulong roomIDOculus)
		{
		}

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0x11CBB0C", Offset = "0x11CBB0C", VA = "0x11CBB0C")]
		public void ChangeFriendRoomCodes(string newRoomCode)
		{
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x11CC118", Offset = "0x11CC118", VA = "0x11CC118")]
		private void UpdateFriendStatus(InGameUI.FriendInfo friend)
		{
		}

		[Token(Token = "0x6001B35")]
		[Address(RVA = "0x11CC14C", Offset = "0x11CC14C", VA = "0x11CC14C")]
		private void OnInitializationCallback(Message<PlatformInitialize> msg)
		{
		}

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0x11CC2D8", Offset = "0x11CC2D8", VA = "0x11CC2D8")]
		private void OnIsEntitledCallback(Message msg)
		{
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0x11CB3EC", Offset = "0x11CB3EC", VA = "0x11CB3EC")]
		private void GetLoggedInUser()
		{
		}

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0x11CC424", Offset = "0x11CC424", VA = "0x11CC424")]
		private void RoomInvitationGetted(Message<RoomInviteNotification> message)
		{
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0x11CC5B0", Offset = "0x11CC5B0", VA = "0x11CC5B0")]
		private void GetRoomCode(Message<Oculus.Platform.Models.Room> message)
		{
		}

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0x11CC704", Offset = "0x11CC704", VA = "0x11CC704")]
		private void OnLoggedInUserCallback(Message<User> msg)
		{
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x11CC98C", Offset = "0x11CC98C", VA = "0x11CC98C")]
		private void GetUserProof()
		{
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x11CC9A0", Offset = "0x11CC9A0", VA = "0x11CC9A0")]
		public void CreateRoom(bool emptyFriendList = false)
		{
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x11CCB5C", Offset = "0x11CCB5C", VA = "0x11CCB5C")]
		private void RoomCreated(Message<Oculus.Platform.Models.Room> message)
		{
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x11CCCA0", Offset = "0x11CCCA0", VA = "0x11CCCA0")]
		private void GetFriendsToInvite(Message<UserList> message)
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0x11CCEC8", Offset = "0x11CCEC8", VA = "0x11CCEC8")]
		public OculusNetworkingManager()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public static class OculusHelpers
	{
		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x11CCEA4", Offset = "0x11CCEA4", VA = "0x11CCEA4")]
		public static InGameUI.FriendInfo.FriendStatus ConvertUserStatus(User friend)
		{
			return default(InGameUI.FriendInfo.FriendStatus);
		}
	}
}
namespace VRUiKits.Demo
{
	[Token(Token = "0x20003AF")]
	public class ChangeColor : MonoBehaviour
	{
		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material material;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.Color color;

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isClicked;

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x11CCF94", Offset = "0x11CCF94", VA = "0x11CCF94")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x11CCFFC", Offset = "0x11CCFFC", VA = "0x11CCFFC")]
		public void PointerEnter()
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x11CD04C", Offset = "0x11CD04C", VA = "0x11CD04C")]
		public void PointerLeave()
		{
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x11CD084", Offset = "0x11CD084", VA = "0x11CD084")]
		public void PointerClick()
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0x11CD0C0", Offset = "0x11CD0C0", VA = "0x11CD0C0")]
		public ChangeColor()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public class FaceVRCamera : MonoBehaviour
	{
		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform vrCamera;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FaceCameraType type;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float distance;

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x11CD0C8", Offset = "0x11CD0C8", VA = "0x11CD0C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x11CD114", Offset = "0x11CD114", VA = "0x11CD114")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x11CD22C", Offset = "0x11CD22C", VA = "0x11CD22C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x11CD128", Offset = "0x11CD128", VA = "0x11CD128")]
		private void CalibratePosition()
		{
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0x11CD23C", Offset = "0x11CD23C", VA = "0x11CD23C")]
		public FaceVRCamera()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	public enum FaceCameraType
	{
		[Token(Token = "0x4001943")]
		Always,
		[Token(Token = "0x4001944")]
		OnToggle
	}
	[Token(Token = "0x20003B2")]
	public class KeyboardDisplay : MonoBehaviour
	{
		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform vrCamera;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 offset;

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0x11CD244", Offset = "0x11CD244", VA = "0x11CD244")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x11CD2AC", Offset = "0x11CD2AC", VA = "0x11CD2AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x11CD2B0", Offset = "0x11CD2B0", VA = "0x11CD2B0")]
		private void SetPosition()
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x11CD30C", Offset = "0x11CD30C", VA = "0x11CD30C")]
		public KeyboardDisplay()
		{
		}
	}
	[Token(Token = "0x20003B3")]
	public class MouseLook : MonoBehaviour
	{
		[Token(Token = "0x4001947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float x;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float y;

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x11CD314", Offset = "0x11CD314", VA = "0x11CD314")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x11CD49C", Offset = "0x11CD49C", VA = "0x11CD49C")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x20003B4")]
	public class ToggleUIKitHelper : MonoBehaviour
	{
		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UIKitPointer pointer;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> objectsToToggle;

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0x11CD4AC", Offset = "0x11CD4AC", VA = "0x11CD4AC")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x11CD6CC", Offset = "0x11CD6CC", VA = "0x11CD6CC")]
		public void Run()
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0x11CD558", Offset = "0x11CD558", VA = "0x11CD558")]
		private void Toggle(bool enabled)
		{
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0x11CD778", Offset = "0x11CD778", VA = "0x11CD778")]
		public ToggleUIKitHelper()
		{
		}
	}
}
namespace VRUiKits.Utils
{
	[Token(Token = "0x20003B5")]
	public class CodexCardListManager : MonoBehaviour
	{
		[Token(Token = "0x20003B6")]
		public enum CardType
		{
			[Token(Token = "0x4001963")]
			Monster,
			[Token(Token = "0x4001964")]
			Loot,
			[Token(Token = "0x4001965")]
			Relics,
			[Token(Token = "0x4001966")]
			Chompys
		}

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CardType cardType;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ItemsFoundCounter counter;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform listContent;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject itemTemplate;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject itemGemTemplate;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject itemUnknownTemplate;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected List<CardItem> cardItems;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected List<CardItem> unknownCardItems;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Sprite UnknownLootSprite;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Card selectedCard;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Card> Ores;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Card Gold;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Card Boombastium;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Card Brinestone;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Card Marcopolonium;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Card Enigmium;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<Card> Gems;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<Card> Relics;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<Card> Enemies;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<Card> Chompys;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private List<ChompyCodexScriptableObject> chompyScriptables;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool populated;

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0x11CD780", Offset = "0x11CD780", VA = "0x11CD780", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0x11CE91C", Offset = "0x11CE91C", VA = "0x11CE91C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0x11CEDAC", Offset = "0x11CEDAC", VA = "0x11CEDAC")]
		private void Loaded()
		{
		}

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0x11CEEE0", Offset = "0x11CEEE0", VA = "0x11CEEE0", Slot = "5")]
		protected virtual void SetSelectedCard(Card card)
		{
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0x11CEEE8", Offset = "0x11CEEE8", VA = "0x11CEEE8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x11CF07C", Offset = "0x11CF07C", VA = "0x11CF07C")]
		public void AddLoot(Loot loot, bool deleteUnknown = false)
		{
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x11CFCB8", Offset = "0x11CFCB8", VA = "0x11CFCB8")]
		private CardItem GetExistingCardItem(Card card)
		{
			return null;
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0x11CFD84", Offset = "0x11CFD84", VA = "0x11CFD84")]
		public void AddRelic(Loot loot, bool deleteUnknown = false)
		{
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0x11D01D4", Offset = "0x11D01D4", VA = "0x11D01D4")]
		public void AddEnemy(Enemy enemy, bool deleteUnknown = false)
		{
		}

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0x11D04AC", Offset = "0x11D04AC", VA = "0x11D04AC")]
		public void AddChompy(string chompy, bool deleteUnknown = false, bool popup = false)
		{
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x11CDE98", Offset = "0x11CDE98", VA = "0x11CDE98")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0x11D09A8", Offset = "0x11D09A8", VA = "0x11D09A8")]
		public void AddNewLootEntry(LootSpawnAndDespawnManager.LootType lootType)
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0x11D0BB0", Offset = "0x11D0BB0", VA = "0x11D0BB0")]
		public void AddNewEnemyEntry(EnemySpawnAndDespawnManager.EnemyType enemyType)
		{
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x11D0CE4", Offset = "0x11D0CE4", VA = "0x11D0CE4")]
		public void AddNewChompyEntry(string chompy)
		{
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0x11D0D0C", Offset = "0x11D0D0C", VA = "0x11D0D0C")]
		public void UpdateLootAmount(LootSpawnAndDespawnManager.LootType lootType, int newAmount)
		{
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x11D0ED4", Offset = "0x11D0ED4", VA = "0x11D0ED4")]
		public void UpdateEnemyAmount(EnemySpawnAndDespawnManager.EnemyType enemyType, int newAmount)
		{
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x11CFB84", Offset = "0x11CFB84", VA = "0x11CFB84")]
		public void DeleteUnknownItem()
		{
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0x11D10E8", Offset = "0x11D10E8", VA = "0x11D10E8", Slot = "6")]
		public virtual void AddGemCardItem(Card card, int index)
		{
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0x11D14AC", Offset = "0x11D14AC", VA = "0x11D14AC", Slot = "7")]
		public virtual CardItem AddCardItem(Card card, int index)
		{
			return null;
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x11D1660", Offset = "0x11D1660", VA = "0x11D1660", Slot = "8")]
		public virtual void AddUnknownCardItem()
		{
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x11D17E0", Offset = "0x11D17E0", VA = "0x11D17E0")]
		public int GetTotalCardItems()
		{
			return default(int);
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x11D1828", Offset = "0x11D1828", VA = "0x11D1828")]
		public CodexCardListManager()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class ImageHoverOutline : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Image targetImage;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Color outlineColor;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float outlineWidth;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.UI.Outline outline;

		[Token(Token = "0x1700031B")]
		private UnityEngine.UI.Outline _Outline
		{
			[Token(Token = "0x6001B6B")]
			[Address(RVA = "0x11D1AE8", Offset = "0x11D1AE8", VA = "0x11D1AE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0x11D1C84", Offset = "0x11D1C84", VA = "0x11D1C84", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0x11D1D1C", Offset = "0x11D1D1C", VA = "0x11D1D1C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x11D1DB4", Offset = "0x11D1DB4", VA = "0x11D1DB4")]
		public ImageHoverOutline()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public class TextHoverScale : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text targetText;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scale;

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int originSize;

		[Token(Token = "0x1700031C")]
		private Text TargetText
		{
			[Token(Token = "0x6001B6F")]
			[Address(RVA = "0x11D1DD0", Offset = "0x11D1DD0", VA = "0x11D1DD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x11D1EB0", Offset = "0x11D1EB0", VA = "0x11D1EB0", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x11D2020", Offset = "0x11D2020", VA = "0x11D2020", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0x11D20B8", Offset = "0x11D20B8", VA = "0x11D20B8")]
		public TextHoverScale()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class GazeInputModule : UIKitInputModule
	{
		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool previewWithoutHeadset;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool preventRepeatClick;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RaycastResult currentRaycast;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GazeInputModule Instance;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private PointerEventData pointerEventData;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private PointerEventData lastPressedEventData;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GameObject currentTarget;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float currentClickTime;

		[Token(Token = "0x6001B73")]
		[Address(RVA = "0x11D20CC", Offset = "0x11D20CC", VA = "0x11D20CC")]
		protected GazeInputModule()
		{
		}

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0x11D2150", Offset = "0x11D2150", VA = "0x11D2150", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0x11D2168", Offset = "0x11D2168", VA = "0x11D2168")]
		private void GazeControl()
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x11D2380", Offset = "0x11D2380", VA = "0x11D2380")]
		private void HandleSelection()
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x11D26B0", Offset = "0x11D26B0", VA = "0x11D26B0")]
		private void ReleaseLastPress()
		{
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0x11D2790", Offset = "0x11D2790", VA = "0x11D2790", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0x11D2844", Offset = "0x11D2844", VA = "0x11D2844", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x11D2860", Offset = "0x11D2860", VA = "0x11D2860")]
		protected void ClearSelection()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0x11D289C", Offset = "0x11D289C", VA = "0x11D289C", Slot = "27")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}
	}
	[Token(Token = "0x20003BA")]
	[RequireComponent(typeof(VREventSystemHelper))]
	public class LaserInputModule : UIKitInputModule
	{
		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRPlatform platform;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Pointer pointer;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject currentTarget;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentClickTime;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LaserInputModule _instance;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Camera helperCamera;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UIKitPointer controller;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool triggerPressed;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool triggerPressedLastFrame;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PointerEventData pointerEventData;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 lastRaycastHitPoint;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float pressedDistance;

		[Token(Token = "0x1700031D")]
		public static LaserInputModule instance
		{
			[Token(Token = "0x6001B7C")]
			[Address(RVA = "0x11D28E4", Offset = "0x11D28E4", VA = "0x11D28E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x11D292C", Offset = "0x11D292C", VA = "0x11D292C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0x11D2A94", Offset = "0x11D2A94", VA = "0x11D2A94", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x11D2D54", Offset = "0x11D2D54", VA = "0x11D2D54")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0x11D2C7C", Offset = "0x11D2C7C", VA = "0x11D2C7C")]
		private void SetCanvasCamera()
		{
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0x11D2D50", Offset = "0x11D2D50", VA = "0x11D2D50")]
		private void SetupHmd()
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0x11D2D58", Offset = "0x11D2D58", VA = "0x11D2D58")]
		public void SetController(UIKitPointer _controller)
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0x11D2D60", Offset = "0x11D2D60", VA = "0x11D2D60")]
		public void RemoveController(UIKitPointer _controller)
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0x11D2E18", Offset = "0x11D2E18", VA = "0x11D2E18", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0x11D2EBC", Offset = "0x11D2EBC", VA = "0x11D2EBC")]
		private void UpdateHelperCamera()
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0x11D31D4", Offset = "0x11D31D4", VA = "0x11D31D4")]
		private void CheckTriggerStatus()
		{
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0x11D2F5C", Offset = "0x11D2F5C", VA = "0x11D2F5C")]
		private void ProcessGazePointer()
		{
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0x11D3228", Offset = "0x11D3228", VA = "0x11D3228")]
		private void ProcessLaserPointer()
		{
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0x11D3AB4", Offset = "0x11D3AB4", VA = "0x11D3AB4")]
		private void ProcessPress(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0x11D3530", Offset = "0x11D3530", VA = "0x11D3530")]
		private PointerEventData GetPointerEventData()
		{
			return null;
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x11D4464", Offset = "0x11D4464", VA = "0x11D4464")]
		private bool TriggerReleasedThisFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0x11D4444", Offset = "0x11D4444", VA = "0x11D4444")]
		private bool TriggerPressedThisFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0x11D33E8", Offset = "0x11D33E8", VA = "0x11D33E8")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0x11D4484", Offset = "0x11D4484", VA = "0x11D4484", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0x11D4538", Offset = "0x11D4538", VA = "0x11D4538", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0x11D4554", Offset = "0x11D4554", VA = "0x11D4554")]
		protected void ClearSelection()
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0x11D4590", Offset = "0x11D4590", VA = "0x11D4590")]
		private bool ShouldStartDrag(float threshold, bool useDragThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0x11D45AC", Offset = "0x11D45AC", VA = "0x11D45AC", Slot = "27")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0x11D41AC", Offset = "0x11D41AC", VA = "0x11D41AC")]
		private void ProcessDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0x11D45F4", Offset = "0x11D45F4", VA = "0x11D45F4")]
		public LaserInputModule()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	public enum VRPlatform
	{
		[Token(Token = "0x4001983")]
		NONE,
		[Token(Token = "0x4001984")]
		OCULUS,
		[Token(Token = "0x4001985")]
		VIVE,
		[Token(Token = "0x4001986")]
		VIVE_STEAM2
	}
	[Token(Token = "0x20003BC")]
	public enum Pointer
	{
		[Token(Token = "0x4001988")]
		RightHand,
		[Token(Token = "0x4001989")]
		LeftHand,
		[Token(Token = "0x400198A")]
		Eye
	}
	[Token(Token = "0x20003BD")]
	public class MouseInputModule : StandaloneInputModule
	{
		[Token(Token = "0x6001B95")]
		[Address(RVA = "0x11D4610", Offset = "0x11D4610", VA = "0x11D4610", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x11D4668", Offset = "0x11D4668", VA = "0x11D4668")]
		protected new void ProcessMouseEvent()
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x11D4940", Offset = "0x11D4940", VA = "0x11D4940")]
		private static bool UseMouse(bool pressed, bool released, PointerEventData pointerData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0x11D4984", Offset = "0x11D4984", VA = "0x11D4984")]
		protected new void ProcessMousePress(MouseButtonEventData data)
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x11D4FEC", Offset = "0x11D4FEC", VA = "0x11D4FEC")]
		public MouseInputModule()
		{
		}
	}
	[Token(Token = "0x20003BE")]
	public class GazeProgressCircle : MonoBehaviour
	{
		[Token(Token = "0x20003BF")]
		[CompilerGenerated]
		private sealed class <FillCircle>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400198E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400198F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GazeProgressCircle <>4__this;

			[Token(Token = "0x4001991")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x1700031E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BA2")]
				[Address(RVA = "0x11D55E4", Offset = "0x11D55E4", VA = "0x11D55E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BA4")]
				[Address(RVA = "0x11D562C", Offset = "0x11D562C", VA = "0x11D562C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B9F")]
			[Address(RVA = "0x11D544C", Offset = "0x11D544C", VA = "0x11D544C")]
			[DebuggerHidden]
			public <FillCircle>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001BA0")]
			[Address(RVA = "0x11D547C", Offset = "0x11D547C", VA = "0x11D547C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BA1")]
			[Address(RVA = "0x11D5480", Offset = "0x11D5480", VA = "0x11D5480", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BA3")]
			[Address(RVA = "0x11D55EC", Offset = "0x11D55EC", VA = "0x11D55EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Image circle;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine fillCircle;

		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UIKitInputModule m_inputModule;

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x11D4FF4", Offset = "0x11D4FF4", VA = "0x11D4FF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0x11D524C", Offset = "0x11D524C", VA = "0x11D524C")]
		private void HandleProgressCircle(GameObject target)
		{
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0x11D53D8", Offset = "0x11D53D8", VA = "0x11D53D8")]
		[IteratorStateMachine(typeof(<FillCircle>d__5))]
		private IEnumerator FillCircle()
		{
			return null;
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0x11D5310", Offset = "0x11D5310", VA = "0x11D5310")]
		private void ResetGazer()
		{
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0x11D5474", Offset = "0x11D5474", VA = "0x11D5474")]
		public GazeProgressCircle()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LineRenderer lr;

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x11D5634", Offset = "0x11D5634", VA = "0x11D5634")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x11D568C", Offset = "0x11D568C", VA = "0x11D568C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0x11D584C", Offset = "0x11D584C", VA = "0x11D584C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0x11D5960", Offset = "0x11D5960", VA = "0x11D5960")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	public class UIKitPointer : MonoBehaviour
	{
		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gazePointer;

		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject laser;

		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Pointer? temp;

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0x11D5968", Offset = "0x11D5968", VA = "0x11D5968")]
		private void Start()
		{
		}

		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0x11D5A50", Offset = "0x11D5A50", VA = "0x11D5A50")]
		private void Update()
		{
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0x11D5B7C", Offset = "0x11D5B7C", VA = "0x11D5B7C")]
		private void ResetTransform(Transform trans)
		{
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0x11D5C5C", Offset = "0x11D5C5C", VA = "0x11D5C5C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0x11D5D40", Offset = "0x11D5D40", VA = "0x11D5D40")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0x11D5E28", Offset = "0x11D5E28", VA = "0x11D5E28")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0x11D5F0C", Offset = "0x11D5F0C", VA = "0x11D5F0C")]
		public UIKitPointer()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	public class UIKitInputModule : BaseInputModule
	{
		[Token(Token = "0x20003C3")]
		public delegate void OnGazeChangedHandler(GameObject target);

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public float gazeTimeInSeconds;

		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public float delayTimeInSeconds;

		[Token(Token = "0x14000005")]
		public event OnGazeChangedHandler OnGazeChanged
		{
			[Token(Token = "0x6001BB0")]
			[Address(RVA = "0x11D51B0", Offset = "0x11D51B0", VA = "0x11D51B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BB1")]
			[Address(RVA = "0x11D5F14", Offset = "0x11D5F14", VA = "0x11D5F14")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0x11D2694", Offset = "0x11D2694", VA = "0x11D2694")]
		protected void RaiseGazeChangeEvent(GameObject target)
		{
		}

		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0x11D5FB0", Offset = "0x11D5FB0", VA = "0x11D5FB0", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0x11D213C", Offset = "0x11D213C", VA = "0x11D213C")]
		public UIKitInputModule()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003C4")]
	public class Card
	{
		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LocalizedString title;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LocalizedString subtitle;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LocalizedString description;

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Sprite image;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int CollectedInt;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LocalizedString Collected;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string value;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string SmallValue;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string LargeValue;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Sprite smallImage;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Sprite largeImage;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public LootSpawnAndDespawnManager.LootType lootType;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public EnemySpawnAndDespawnManager.EnemyType enemyType;

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0x11CFC40", Offset = "0x11CFC40", VA = "0x11CFC40")]
		public Card()
		{
		}
	}
	[Token(Token = "0x20003C5")]
	public class CardItem : MonoBehaviour
	{
		[Token(Token = "0x20003C6")]
		public delegate void OnCardClickedHandler(Card card);

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform title;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform subtitle;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform description;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform counterNumberText;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.UI.Image image;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Card card;

		[Token(Token = "0x17000320")]
		public TextMeshProUGUI Title
		{
			[Token(Token = "0x6001BBC")]
			[Address(RVA = "0x11D6090", Offset = "0x11D6090", VA = "0x11D6090")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000321")]
		public Localize TitleLoc
		{
			[Token(Token = "0x6001BBD")]
			[Address(RVA = "0x11D612C", Offset = "0x11D612C", VA = "0x11D612C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000322")]
		public TextMeshProUGUI Subtitle
		{
			[Token(Token = "0x6001BBE")]
			[Address(RVA = "0x11D61C8", Offset = "0x11D61C8", VA = "0x11D61C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000323")]
		public Localize SubtitleLoc
		{
			[Token(Token = "0x6001BBF")]
			[Address(RVA = "0x11D6264", Offset = "0x11D6264", VA = "0x11D6264")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000324")]
		public TextMeshProUGUI Description
		{
			[Token(Token = "0x6001BC0")]
			[Address(RVA = "0x11D6300", Offset = "0x11D6300", VA = "0x11D6300")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000325")]
		public Localize DescriptionLoc
		{
			[Token(Token = "0x6001BC1")]
			[Address(RVA = "0x11D639C", Offset = "0x11D639C", VA = "0x11D639C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000326")]
		public TextMeshProUGUI CounterNumberField
		{
			[Token(Token = "0x6001BC2")]
			[Address(RVA = "0x11D6438", Offset = "0x11D6438", VA = "0x11D6438")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000327")]
		public virtual Card Card
		{
			[Token(Token = "0x6001BC3")]
			[Address(RVA = "0x11D64D4", Offset = "0x11D64D4", VA = "0x11D64D4", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BC4")]
			[Address(RVA = "0x11D64DC", Offset = "0x11D64DC", VA = "0x11D64DC", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6001BBA")]
			[Address(RVA = "0x11D1410", Offset = "0x11D1410", VA = "0x11D1410")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BBB")]
			[Address(RVA = "0x11D5FF4", Offset = "0x11D5FF4", VA = "0x11D5FF4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x11D64F8", Offset = "0x11D64F8", VA = "0x11D64F8")]
		private void SetValues()
		{
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0x11D66A0", Offset = "0x11D66A0", VA = "0x11D66A0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0x11D67B4", Offset = "0x11D67B4", VA = "0x11D67B4", Slot = "6")]
		public virtual void UpdateWholeCard()
		{
		}

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0x11D67B8", Offset = "0x11D67B8", VA = "0x11D67B8", Slot = "7")]
		public virtual void UpdateAmount()
		{
		}

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0x11D687C", Offset = "0x11D687C", VA = "0x11D687C")]
		public CardItem()
		{
		}
	}
	[Token(Token = "0x20003C7")]
	public class CardListManager : MonoBehaviour
	{
		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<Card> cardList;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<CardItem> cardItems;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Card selectedCard;

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0x11D68EC", Offset = "0x11D68EC", VA = "0x11D68EC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0x11D69B0", Offset = "0x11D69B0", VA = "0x11D69B0", Slot = "5")]
		protected virtual void SetSelectedCard(Card card)
		{
		}

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0x11D69B8", Offset = "0x11D69B8", VA = "0x11D69B8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0x11D6918", Offset = "0x11D6918", VA = "0x11D6918")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0x11D6B4C", Offset = "0x11D6B4C", VA = "0x11D6B4C", Slot = "6")]
		public virtual void AddCardItem(Card card, int index)
		{
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0x11D6CE0", Offset = "0x11D6CE0", VA = "0x11D6CE0")]
		public CardListManager()
		{
		}
	}
	[Token(Token = "0x20003C8")]
	public class InputFocusHelper : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerClickHandler, IEndDragHandler
	{
		[Token(Token = "0x20003C9")]
		[CompilerGenerated]
		private sealed class <ActivateInputFieldWithCaret>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputFocusHelper <>4__this;

			[Token(Token = "0x40019BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isMoveCaretToEnd;

			[Token(Token = "0x17000328")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BE2")]
				[Address(RVA = "0x11D71D8", Offset = "0x11D71D8", VA = "0x11D71D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000329")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BE4")]
				[Address(RVA = "0x11D7220", Offset = "0x11D7220", VA = "0x11D7220", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BDF")]
			[Address(RVA = "0x11D702C", Offset = "0x11D702C", VA = "0x11D702C")]
			[DebuggerHidden]
			public <ActivateInputFieldWithCaret>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001BE0")]
			[Address(RVA = "0x11D70F0", Offset = "0x11D70F0", VA = "0x11D70F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BE1")]
			[Address(RVA = "0x11D70F4", Offset = "0x11D70F4", VA = "0x11D70F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BE3")]
			[Address(RVA = "0x11D71E0", Offset = "0x11D71E0", VA = "0x11D71E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected InputField input;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int caretPosition;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int selectionAnchorPosition;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int selectionFocusPosition;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float originColorAlpha;

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0x11D6DB8", Offset = "0x11D6DB8", VA = "0x11D6DB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0x11D6E2C", Offset = "0x11D6E2C", VA = "0x11D6E2C", Slot = "7")]
		public virtual void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0x11D6FCC", Offset = "0x11D6FCC", VA = "0x11D6FCC", Slot = "5")]
		public void OnPointerClick(PointerEventData pointerEventData)
		{
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0x11D7028", Offset = "0x11D7028", VA = "0x11D7028", Slot = "8")]
		public virtual void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0x11D6F44", Offset = "0x11D6F44", VA = "0x11D6F44")]
		[IteratorStateMachine(typeof(<ActivateInputFieldWithCaret>d__9))]
		protected IEnumerator ActivateInputFieldWithCaret(bool isMoveCaretToEnd)
		{
			return null;
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0x11D7054", Offset = "0x11D7054", VA = "0x11D7054")]
		public void ForceActivate()
		{
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x11D6FD0", Offset = "0x11D6FD0", VA = "0x11D6FD0")]
		public void StorePositionInfo()
		{
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x11D7070", Offset = "0x11D7070", VA = "0x11D7070")]
		private void SetPosition()
		{
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x11D70BC", Offset = "0x11D70BC", VA = "0x11D70BC")]
		private void SetSelectionAlpha(float alpha)
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x11D70E8", Offset = "0x11D70E8", VA = "0x11D70E8")]
		public InputFocusHelper()
		{
		}
	}
	[Token(Token = "0x20003CA")]
	public class UIKitInputField : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerClickHandler, IDeselectHandler
	{
		[Token(Token = "0x20003CB")]
		public enum ContentType
		{
			[Token(Token = "0x40019CA")]
			Standard,
			[Token(Token = "0x40019CB")]
			Password
		}

		[Token(Token = "0x20003CC")]
		[CompilerGenerated]
		private sealed class <BlinkCaret>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UIKitInputField <>4__this;

			[Token(Token = "0x1700032A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BF1")]
				[Address(RVA = "0x11D7B08", Offset = "0x11D7B08", VA = "0x11D7B08", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BF3")]
				[Address(RVA = "0x11D7B50", Offset = "0x11D7B50", VA = "0x11D7B50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BEE")]
			[Address(RVA = "0x11D794C", Offset = "0x11D794C", VA = "0x11D794C")]
			[DebuggerHidden]
			public <BlinkCaret>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001BEF")]
			[Address(RVA = "0x11D79D8", Offset = "0x11D79D8", VA = "0x11D79D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BF0")]
			[Address(RVA = "0x11D79DC", Offset = "0x11D79DC", VA = "0x11D79DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BF2")]
			[Address(RVA = "0x11D7B10", Offset = "0x11D7B10", VA = "0x11D7B10", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform wrapper;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform m_textTransform;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform m_placeholderTransform;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RectTransform m_caretTransform;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string text;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int characterLimit;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ContentType contentType;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 4f)]
		public float caretBlinkRate;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float maxW_textComponent;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string displayedText;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string prevText;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Text textComponent;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Text caretText;

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Text placeholder;

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x11D7228", Offset = "0x11D7228", VA = "0x11D7228")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x11D7310", Offset = "0x11D7310", VA = "0x11D7310", Slot = "7")]
		public virtual void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x11D746C", Offset = "0x11D746C", VA = "0x11D746C", Slot = "5")]
		public void OnPointerClick(PointerEventData pointerEventData)
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x11D74E8", Offset = "0x11D74E8", VA = "0x11D74E8", Slot = "6")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x11D7410", Offset = "0x11D7410", VA = "0x11D7410")]
		public void ForceCaretUpdate()
		{
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x11D7558", Offset = "0x11D7558", VA = "0x11D7558")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x11D76E0", Offset = "0x11D76E0", VA = "0x11D76E0", Slot = "8")]
		protected virtual void CalculateLengthOfText(string text)
		{
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x11D78D8", Offset = "0x11D78D8", VA = "0x11D78D8")]
		[IteratorStateMachine(typeof(<BlinkCaret>d__22))]
		private IEnumerator BlinkCaret()
		{
			return null;
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x11D7974", Offset = "0x11D7974", VA = "0x11D7974")]
		public UIKitInputField()
		{
		}
	}
	[Token(Token = "0x20003CD")]
	public class KeyboardExtentionMethods : MonoBehaviour
	{
		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject symbols;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject alphabets;

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0x11D7B58", Offset = "0x11D7B58", VA = "0x11D7B58")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x11D7C5C", Offset = "0x11D7C5C", VA = "0x11D7C5C")]
		public void SwitchSymbols()
		{
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x11D7C78", Offset = "0x11D7C78", VA = "0x11D7C78")]
		public void ToggleObject(GameObject go)
		{
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x11D7CAC", Offset = "0x11D7CAC", VA = "0x11D7CAC")]
		public KeyboardExtentionMethods()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public class KeyboardManager : MonoBehaviour
	{
		[Token(Token = "0x20003CF")]
		public delegate void OnInputValueUpdatedHandler(string value);

		[Token(Token = "0x20003D2")]
		[CompilerGenerated]
		private sealed class <WaitTargetProcessEvent>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public System.Action callback;

			[Token(Token = "0x40019E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public KeyboardManager <>4__this;

			[Token(Token = "0x1700032E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C17")]
				[Address(RVA = "0x11D8F4C", Offset = "0x11D8F4C", VA = "0x11D8F4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C19")]
				[Address(RVA = "0x11D8F94", Offset = "0x11D8F94", VA = "0x11D8F94", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C14")]
			[Address(RVA = "0x11D89FC", Offset = "0x11D89FC", VA = "0x11D89FC")]
			[DebuggerHidden]
			public <WaitTargetProcessEvent>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6001C15")]
			[Address(RVA = "0x11D8D3C", Offset = "0x11D8D3C", VA = "0x11D8D3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C16")]
			[Address(RVA = "0x11D8D40", Offset = "0x11D8D40", VA = "0x11D8D40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C18")]
			[Address(RVA = "0x11D8F54", Offset = "0x11D8F54", VA = "0x11D8F54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("If the character is uppercase at the initialization")]
		[Header("User defined")]
		public bool isUppercase;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Essentials")]
		public Transform keys;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static InputField lastTarget;

		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static InputField target;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Key[] keyList;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool capslockFlag;

		[Token(Token = "0x1700032C")]
		public static InputField Target
		{
			[Token(Token = "0x6001BF8")]
			[Address(RVA = "0x11D7CB4", Offset = "0x11D7CB4", VA = "0x11D7CB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BF9")]
			[Address(RVA = "0x11D6ED8", Offset = "0x11D6ED8", VA = "0x11D6ED8")]
			set
			{
			}
		}

		[Token(Token = "0x1700032D")]
		private string Input
		{
			[Token(Token = "0x6001BFC")]
			[Address(RVA = "0x11D7F50", Offset = "0x11D7F50", VA = "0x11D7F50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BFD")]
			[Address(RVA = "0x11D7FE8", Offset = "0x11D7FE8", VA = "0x11D7FE8")]
			set
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event OnInputValueUpdatedHandler OnInputValueUpdated
		{
			[Token(Token = "0x6001BFA")]
			[Address(RVA = "0x11D7E18", Offset = "0x11D7E18", VA = "0x11D7E18")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BFB")]
			[Address(RVA = "0x11D7EB4", Offset = "0x11D7EB4", VA = "0x11D7EB4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x11D8078", Offset = "0x11D8078", VA = "0x11D8078", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x11D80DC", Offset = "0x11D80DC", VA = "0x11D80DC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x11D840C", Offset = "0x11D840C", VA = "0x11D840C")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x11D86AC", Offset = "0x11D86AC", VA = "0x11D86AC")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0x11D8338", Offset = "0x11D8338", VA = "0x11D8338")]
		public void CapsLock()
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x11D87F0", Offset = "0x11D87F0", VA = "0x11D87F0")]
		public void Shift()
		{
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0x11D88B4", Offset = "0x11D88B4", VA = "0x11D88B4")]
		public void GenerateInput(string s)
		{
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x11D86EC", Offset = "0x11D86EC", VA = "0x11D86EC")]
		public void SetInput(string s)
		{
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x11D8560", Offset = "0x11D8560", VA = "0x11D8560")]
		private void ForceInputFieldActivated()
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x11D861C", Offset = "0x11D861C", VA = "0x11D861C")]
		[IteratorStateMachine(typeof(<WaitTargetProcessEvent>d__25))]
		private IEnumerator WaitTargetProcessEvent(System.Action callback)
		{
			return null;
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0x11D8A24", Offset = "0x11D8A24", VA = "0x11D8A24", Slot = "6")]
		protected virtual void SimulateKeyboardEvent(string s)
		{
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0x11D8AEC", Offset = "0x11D8AEC", VA = "0x11D8AEC")]
		public KeyboardManager()
		{
		}
	}
	[Token(Token = "0x20003D3")]
	public class Alphabet : Key
	{
		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0x11D8F9C", Offset = "0x11D8F9C", VA = "0x11D8F9C", Slot = "5")]
		public override void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0x11D9000", Offset = "0x11D9000", VA = "0x11D9000")]
		public Alphabet()
		{
		}
	}
	[Token(Token = "0x20003D4")]
	public class Key : MonoBehaviour
	{
		[Token(Token = "0x20003D5")]
		public delegate void OnKeyClickedHandler(string key);

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Text key;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private EventTrigger myEventTrigger;

		[Token(Token = "0x14000008")]
		public event OnKeyClickedHandler OnKeyClicked
		{
			[Token(Token = "0x6001C1C")]
			[Address(RVA = "0x11D829C", Offset = "0x11D829C", VA = "0x11D829C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001C1D")]
			[Address(RVA = "0x11D9010", Offset = "0x11D9010", VA = "0x11D9010")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x11D90AC", Offset = "0x11D90AC", VA = "0x11D90AC", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x11D934C", Offset = "0x11D934C", VA = "0x11D934C")]
		private void KeyClicked(BaseEventData arg0)
		{
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0x11D9390", Offset = "0x11D9390", VA = "0x11D9390", Slot = "5")]
		public virtual void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0x11D9394", Offset = "0x11D9394", VA = "0x11D9394", Slot = "6")]
		public virtual void ShiftKey()
		{
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0x11D9008", Offset = "0x11D9008", VA = "0x11D9008")]
		public Key()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	public class Number : Key
	{
		[Token(Token = "0x6001C27")]
		[Address(RVA = "0x11D93D8", Offset = "0x11D93D8", VA = "0x11D93D8")]
		public Number()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	public class Shift : Key
	{
		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Text subscript;

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x11D93E0", Offset = "0x11D93E0", VA = "0x11D93E0", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x11D9474", Offset = "0x11D9474", VA = "0x11D9474", Slot = "6")]
		public override void ShiftKey()
		{
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0x11D9500", Offset = "0x11D9500", VA = "0x11D9500")]
		public Shift()
		{
		}
	}
	[Token(Token = "0x20003D8")]
	public class Symbol : Key
	{
		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0x11D9508", Offset = "0x11D9508", VA = "0x11D9508")]
		public Symbol()
		{
		}
	}
	[Token(Token = "0x20003D9")]
	public class MobileKeyboardManager : MonoBehaviour
	{
		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("User defined")]
		[UnityEngine.Tooltip("If the character is uppercase at the initialization")]
		public bool isUppercase;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Essentials")]
		public Transform keys;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Keyboard Canvas graphic raycaster")]
		public GraphicRaycaster graphicRaycaster;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UIKitInputField target;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Key[] keyList;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool capslockFlag;

		[Token(Token = "0x17000330")]
		public static UIKitInputField Target
		{
			[Token(Token = "0x6001C2C")]
			[Address(RVA = "0x11D9510", Offset = "0x11D9510", VA = "0x11D9510")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C2D")]
			[Address(RVA = "0x11D9674", Offset = "0x11D9674", VA = "0x11D9674")]
			set
			{
			}
		}

		[Token(Token = "0x17000331")]
		private string Input
		{
			[Token(Token = "0x6001C2E")]
			[Address(RVA = "0x11D96CC", Offset = "0x11D96CC", VA = "0x11D96CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C2F")]
			[Address(RVA = "0x11D9764", Offset = "0x11D9764", VA = "0x11D9764")]
			set
			{
			}
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x11D9848", Offset = "0x11D9848", VA = "0x11D9848")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0x11D98AC", Offset = "0x11D98AC", VA = "0x11D98AC", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0x11D9A5C", Offset = "0x11D9A5C", VA = "0x11D9A5C")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0x11D9AB4", Offset = "0x11D9AB4", VA = "0x11D9AB4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0x11D9988", Offset = "0x11D9988", VA = "0x11D9988")]
		public void CapsLock()
		{
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0x11D9B54", Offset = "0x11D9B54", VA = "0x11D9B54")]
		public void Shift()
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0x11D9C18", Offset = "0x11D9C18", VA = "0x11D9C18")]
		public void GenerateInput(string s)
		{
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x11D9C3C", Offset = "0x11D9C3C", VA = "0x11D9C3C")]
		public MobileKeyboardManager()
		{
		}
	}
	[Token(Token = "0x20003DA")]
	public class KeyboardSuggestions : MonoBehaviour
	{
		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyboardManager keyboardManager;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxNumberOfSuggestions;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<string> suggestions;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string pattern;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SuggestionButton[] suggestionButtons;

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0x11D9C44", Offset = "0x11D9C44", VA = "0x11D9C44")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x11D9DF8", Offset = "0x11D9DF8", VA = "0x11D9DF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x11DA0A0", Offset = "0x11DA0A0", VA = "0x11DA0A0")]
		private void Suggest(string word)
		{
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x11DA18C", Offset = "0x11DA18C", VA = "0x11DA18C")]
		private bool IsSkipSugestion()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x11DA5C4", Offset = "0x11DA5C4", VA = "0x11DA5C4")]
		private void GenerateSuggestionsUI()
		{
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x11DA744", Offset = "0x11DA744", VA = "0x11DA744")]
		private void SetSuggestionToCurrentInput(string word)
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x11DA960", Offset = "0x11DA960", VA = "0x11DA960")]
		public KeyboardSuggestions()
		{
		}
	}
	[Token(Token = "0x20003DB")]
	public class SuggestionButton : MonoBehaviour
	{
		[Token(Token = "0x20003DC")]
		public delegate void OnSuggestionClickedHandler(string word);

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text suggestionText;

		[Token(Token = "0x14000009")]
		public event OnSuggestionClickedHandler OnSuggestionClicked
		{
			[Token(Token = "0x6001C3F")]
			[Address(RVA = "0x11DA004", Offset = "0x11DA004", VA = "0x11DA004")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001C40")]
			[Address(RVA = "0x11DA9C0", Offset = "0x11DA9C0", VA = "0x11DA9C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x11DAA5C", Offset = "0x11DAA5C", VA = "0x11DAA5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x11DA6A4", Offset = "0x11DA6A4", VA = "0x11DA6A4")]
		public void SetSuggestion(string word)
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x11DAB44", Offset = "0x11DAB44", VA = "0x11DAB44")]
		public SuggestionButton()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	public class SuggestionSetup
	{
		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SuggestionSetup instance;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Node root;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string[] textArray;

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0x11D9D34", Offset = "0x11D9D34", VA = "0x11D9D34")]
		public SuggestionSetup(string[] textArray)
		{
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x11DACA8", Offset = "0x11DACA8", VA = "0x11DACA8")]
		private void PreProcess()
		{
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x11DA274", Offset = "0x11DA274", VA = "0x11DA274")]
		public List<string> GetSuggestions(string word, int maxNumberOfSuggestions)
		{
			return null;
		}
	}
	[Token(Token = "0x20003DE")]
	public class Node
	{
		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<char, Node> nodes;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> indexes;

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x11DABD0", Offset = "0x11DABD0", VA = "0x11DABD0")]
		public Node()
		{
		}
	}
	[Token(Token = "0x20003DF")]
	public class Item : MonoBehaviour
	{
		[Token(Token = "0x20003E0")]
		public delegate void OnItemSelectedHandler(Item item);

		[Token(Token = "0x20003E1")]
		public delegate void OnActivateHandler();

		[Token(Token = "0x20003E2")]
		public delegate void OnDeactivateHandler();

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button button;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected UnityEngine.Color normalColor;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected UnityEngine.Color highlightedColor;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float _lastActivateTime;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private AudioClip buttonClip;

		[Token(Token = "0x1400000A")]
		public event OnItemSelectedHandler OnItemSelected
		{
			[Token(Token = "0x6001C4D")]
			[Address(RVA = "0x11DAEA0", Offset = "0x11DAEA0", VA = "0x11DAEA0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001C4E")]
			[Address(RVA = "0x11DAF3C", Offset = "0x11DAF3C", VA = "0x11DAF3C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event OnActivateHandler OnActivate
		{
			[Token(Token = "0x6001C4F")]
			[Address(RVA = "0x11DAFD8", Offset = "0x11DAFD8", VA = "0x11DAFD8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001C50")]
			[Address(RVA = "0x11DB074", Offset = "0x11DB074", VA = "0x11DB074")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event OnDeactivateHandler OnDeactive
		{
			[Token(Token = "0x6001C51")]
			[Address(RVA = "0x11DB110", Offset = "0x11DB110", VA = "0x11DB110")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001C52")]
			[Address(RVA = "0x11DB1AC", Offset = "0x11DB1AC", VA = "0x11DB1AC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x11DB248", Offset = "0x11DB248", VA = "0x11DB248")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x11DB3FC", Offset = "0x11DB3FC", VA = "0x11DB3FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0x11DB544", Offset = "0x11DB544", VA = "0x11DB544")]
		private void PlayClip()
		{
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0x11DB5E4", Offset = "0x11DB5E4", VA = "0x11DB5E4", Slot = "4")]
		public virtual void Activate()
		{
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0x11DB68C", Offset = "0x11DB68C", VA = "0x11DB68C", Slot = "5")]
		public virtual void Deactivate()
		{
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0x11DB718", Offset = "0x11DB718", VA = "0x11DB718", Slot = "6")]
		public virtual void DeactivateSubMenu()
		{
		}

		[Token(Token = "0x6001C59")]
		[Address(RVA = "0x11DB71C", Offset = "0x11DB71C", VA = "0x11DB71C")]
		public Item()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	public class ListSelectionHelper : MonoBehaviour
	{
		[Token(Token = "0x20003E5")]
		[CompilerGenerated]
		private sealed class <_WaitForFrameAndDisableInteractable>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Item senderItem;

			[Token(Token = "0x17000332")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C74")]
				[Address(RVA = "0x11DC21C", Offset = "0x11DC21C", VA = "0x11DC21C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000333")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C76")]
				[Address(RVA = "0x11DC264", Offset = "0x11DC264", VA = "0x11DC264", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C71")]
			[Address(RVA = "0x11DBF04", Offset = "0x11DBF04", VA = "0x11DBF04")]
			[DebuggerHidden]
			public <_WaitForFrameAndDisableInteractable>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001C72")]
			[Address(RVA = "0x11DC1A8", Offset = "0x11DC1A8", VA = "0x11DC1A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C73")]
			[Address(RVA = "0x11DC1AC", Offset = "0x11DC1AC", VA = "0x11DC1AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C75")]
			[Address(RVA = "0x11DC224", Offset = "0x11DC224", VA = "0x11DC224", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform list;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TabItem initialActivatedItem;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Item currentSelectedItem;

		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Item[] items;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InGameUIToggle inGameUIToggle;

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x11DBA0C", Offset = "0x11DBA0C", VA = "0x11DBA0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0x11DBA70", Offset = "0x11DBA70", VA = "0x11DBA70")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x11DBD80", Offset = "0x11DBD80", VA = "0x11DBD80")]
		private void SetButtonInteractable(Item senderItem)
		{
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x11DBE90", Offset = "0x11DBE90", VA = "0x11DBE90")]
		[IteratorStateMachine(typeof(<_WaitForFrameAndDisableInteractable>d__8))]
		private IEnumerator _WaitForFrameAndDisableInteractable(Item senderItem)
		{
			return null;
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x11DBF2C", Offset = "0x11DBF2C", VA = "0x11DBF2C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0x11DC0C4", Offset = "0x11DC0C4", VA = "0x11DC0C4")]
		public void SelectionHelper(Item item)
		{
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0x11DC038", Offset = "0x11DC038", VA = "0x11DC038")]
		public void DeselectCurrentItem()
		{
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0x11DC180", Offset = "0x11DC180", VA = "0x11DC180")]
		public ListSelectionHelper()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	public class MenuItem : Item
	{
		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject subMenu;

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0x11DC26C", Offset = "0x11DC26C", VA = "0x11DC26C", Slot = "4")]
		public override void Activate()
		{
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x11DC2FC", Offset = "0x11DC2FC", VA = "0x11DC2FC", Slot = "5")]
		public override void Deactivate()
		{
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0x11DC31C", Offset = "0x11DC31C", VA = "0x11DC31C", Slot = "6")]
		public override void DeactivateSubMenu()
		{
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0x11DC3A4", Offset = "0x11DC3A4", VA = "0x11DC3A4")]
		public MenuItem()
		{
		}
	}
	[Token(Token = "0x20003E7")]
	public class TabItem : Item
	{
		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject relatedPanel;

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0x11DC3AC", Offset = "0x11DC3AC", VA = "0x11DC3AC", Slot = "4")]
		public override void Activate()
		{
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0x11DC5E4", Offset = "0x11DC5E4", VA = "0x11DC5E4", Slot = "5")]
		public override void Deactivate()
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0x11DC530", Offset = "0x11DC530", VA = "0x11DC530")]
		private void ToggleCanvasGroupBlockRaycast(bool enabled)
		{
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0x11DC758", Offset = "0x11DC758", VA = "0x11DC758")]
		public TabItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E8")]
	public struct Option
	{
		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string value;
	}
	[Token(Token = "0x20003E9")]
	public class OptionItem : MonoBehaviour
	{
		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Option option;

		[Token(Token = "0x17000334")]
		public string Value
		{
			[Token(Token = "0x6001C7F")]
			[Address(RVA = "0x11DC760", Offset = "0x11DC760", VA = "0x11DC760")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000335")]
		public Option Option
		{
			[Token(Token = "0x6001C80")]
			[Address(RVA = "0x11DC768", Offset = "0x11DC768", VA = "0x11DC768")]
			get
			{
				return default(Option);
			}
			[Token(Token = "0x6001C81")]
			[Address(RVA = "0x11DC770", Offset = "0x11DC770", VA = "0x11DC770")]
			set
			{
			}
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0x11DC84C", Offset = "0x11DC84C", VA = "0x11DC84C")]
		public void Activate()
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0x11DC870", Offset = "0x11DC870", VA = "0x11DC870")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0x11DC894", Offset = "0x11DC894", VA = "0x11DC894")]
		public OptionItem()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	public class OptionsManager : MonoBehaviour
	{
		[Token(Token = "0x20003EB")]
		public delegate void OnOptionSelectedHandler(int index);

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Template")]
		public GameObject optionTemplate;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public List<Option> optionsList;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public string selectedValue;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int firstSelectedIndex;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int selectedIdx;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<OptionItem> optionItems;

		[Token(Token = "0x1400000D")]
		public event OnOptionSelectedHandler OnOptionSelected
		{
			[Token(Token = "0x6001C85")]
			[Address(RVA = "0x11DC89C", Offset = "0x11DC89C", VA = "0x11DC89C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001C86")]
			[Address(RVA = "0x11DC938", Offset = "0x11DC938", VA = "0x11DC938")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x11DC9D4", Offset = "0x11DC9D4", VA = "0x11DC9D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0x11DCBC8", Offset = "0x11DCBC8", VA = "0x11DCBC8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0x11DCA00", Offset = "0x11DCA00", VA = "0x11DCA00")]
		private void PopulateOptions()
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0x11DCE04", Offset = "0x11DCE04", VA = "0x11DCE04")]
		public void PrevOption()
		{
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0x11DCED4", Offset = "0x11DCED4", VA = "0x11DCED4")]
		public void NextOption()
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0x11DCC80", Offset = "0x11DCC80", VA = "0x11DCC80")]
		private void ActivateOption(int i)
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0x11DCE4C", Offset = "0x11DCE4C", VA = "0x11DCE4C")]
		private void DeactivateOption(int i)
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0x11DCF60", Offset = "0x11DCF60", VA = "0x11DCF60")]
		public OptionsManager()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	public enum ButtonDeactiveStyle
	{
		[Token(Token = "0x4001A15")]
		Disabled,
		[Token(Token = "0x4001A16")]
		Hidden
	}
	[Token(Token = "0x20003ED")]
	public class Pagination : MonoBehaviour
	{
		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Target")]
		public Transform targetObject;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Pagination Buttons")]
		public ButtonDeactiveStyle buttonDeactiveStyle;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button nextBtn;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button prevBtn;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int currentPage;

		[Token(Token = "0x17000336")]
		public int CurrentPage
		{
			[Token(Token = "0x6001C93")]
			[Address(RVA = "0x11DD0DC", Offset = "0x11DD0DC", VA = "0x11DD0DC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C94")]
			[Address(RVA = "0x11DD0E4", Offset = "0x11DD0E4", VA = "0x11DD0E4")]
			set
			{
			}
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x11DD400", Offset = "0x11DD400", VA = "0x11DD400")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0x11DD570", Offset = "0x11DD570", VA = "0x11DD570")]
		public void Next()
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x11DD57C", Offset = "0x11DD57C", VA = "0x11DD57C")]
		public void Prev()
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x11DD2B8", Offset = "0x11DD2B8", VA = "0x11DD2B8")]
		private void PagintionBtnControl(bool nextEnabled, bool prevEnabled)
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x11DD588", Offset = "0x11DD588", VA = "0x11DD588")]
		public Pagination()
		{
		}
	}
	[Token(Token = "0x20003EE")]
	[RequireComponent(typeof(ProgressBarManager))]
	public class CircularProgressBar : MonoBehaviour
	{
		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Image circle;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float step;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Value")]
		public Transform valueText;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float min;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float max;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x17000337")]
		public Text ValueText
		{
			[Token(Token = "0x6001C9A")]
			[Address(RVA = "0x11DD590", Offset = "0x11DD590", VA = "0x11DD590")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000338")]
		public float Value
		{
			[Token(Token = "0x6001C9B")]
			[Address(RVA = "0x11DD5E0", Offset = "0x11DD5E0", VA = "0x11DD5E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C9C")]
			[Address(RVA = "0x11DD5FC", Offset = "0x11DD5FC", VA = "0x11DD5FC")]
			set
			{
			}
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x11DD618", Offset = "0x11DD618", VA = "0x11DD618")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0x11DD670", Offset = "0x11DD670", VA = "0x11DD670")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0x11DDA64", Offset = "0x11DDA64", VA = "0x11DDA64")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x11DDB28", Offset = "0x11DDB28", VA = "0x11DDB28")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0x11DDBEC", Offset = "0x11DDBEC", VA = "0x11DDBEC")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0x11DD754", Offset = "0x11DD754", VA = "0x11DD754")]
		private void UpdateValueText(float newValue)
		{
		}

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0x11DDC08", Offset = "0x11DDC08", VA = "0x11DDC08")]
		public CircularProgressBar()
		{
		}
	}
	[Token(Token = "0x20003EF")]
	public class ProgressBarManager : MonoBehaviour
	{
		[Token(Token = "0x20003F0")]
		public delegate void OnValueUpdatedHandler(float updatedValue);

		[Token(Token = "0x20003F1")]
		[CompilerGenerated]
		private sealed class <SlideTo>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float target;

			[Token(Token = "0x4001A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float toValue;

			[Token(Token = "0x4001A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x4001A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ProgressBarManager <>4__this;

			[Token(Token = "0x4001A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <fromValue>5__2;

			[Token(Token = "0x4001A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__3;

			[Token(Token = "0x17000339")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CB3")]
				[Address(RVA = "0x11DDFD0", Offset = "0x11DDFD0", VA = "0x11DDFD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CB5")]
				[Address(RVA = "0x11DE018", Offset = "0x11DE018", VA = "0x11DE018", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CB0")]
			[Address(RVA = "0x11DDDF4", Offset = "0x11DDDF4", VA = "0x11DDDF4")]
			[DebuggerHidden]
			public <SlideTo>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001CB1")]
			[Address(RVA = "0x11DDEC8", Offset = "0x11DDEC8", VA = "0x11DDEC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CB2")]
			[Address(RVA = "0x11DDECC", Offset = "0x11DDECC", VA = "0x11DDECC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CB4")]
			[Address(RVA = "0x11DDFD8", Offset = "0x11DDFD8", VA = "0x11DDFD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine slideCoroutine;

		[Token(Token = "0x1400000E")]
		public event OnValueUpdatedHandler OnValueIsUpdating
		{
			[Token(Token = "0x6001CA4")]
			[Address(RVA = "0x11DD92C", Offset = "0x11DD92C", VA = "0x11DD92C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001CA5")]
			[Address(RVA = "0x11DDC24", Offset = "0x11DDC24", VA = "0x11DDC24")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000F")]
		public event OnValueUpdatedHandler OnValueStopUpgating
		{
			[Token(Token = "0x6001CA6")]
			[Address(RVA = "0x11DD9C8", Offset = "0x11DD9C8", VA = "0x11DD9C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001CA7")]
			[Address(RVA = "0x11DDCC0", Offset = "0x11DDCC0", VA = "0x11DDCC0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0x11DDA94", Offset = "0x11DDA94", VA = "0x11DDA94")]
		public void IncreaseValue(float target, float step, float min, float max)
		{
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0x11DDB58", Offset = "0x11DDB58", VA = "0x11DDB58")]
		public void DecreaseValue(float target, float step, float min, float max)
		{
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0x11DDD5C", Offset = "0x11DDD5C", VA = "0x11DDD5C")]
		[IteratorStateMachine(typeof(<SlideTo>d__10))]
		private IEnumerator SlideTo(float target, float toValue, float time = 0.2f)
		{
			return null;
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0x11DDE1C", Offset = "0x11DDE1C", VA = "0x11DDE1C")]
		public ProgressBarManager()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	[RequireComponent(typeof(ProgressBarManager))]
	public class ScrollController : MonoBehaviour
	{
		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Scrollbar scrollbar;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float step;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ScrollRect _scrollRect;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float min;

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float max;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x1700033B")]
		public float Value
		{
			[Token(Token = "0x6001CB6")]
			[Address(RVA = "0x11DE020", Offset = "0x11DE020", VA = "0x11DE020")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CB7")]
			[Address(RVA = "0x11DE03C", Offset = "0x11DE03C", VA = "0x11DE03C")]
			set
			{
			}
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0x11DE058", Offset = "0x11DE058", VA = "0x11DE058")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0x11DE0FC", Offset = "0x11DE0FC", VA = "0x11DE0FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x11DE240", Offset = "0x11DE240", VA = "0x11DE240")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x11DE2C4", Offset = "0x11DE2C4", VA = "0x11DE2C4")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x11DE304", Offset = "0x11DE304", VA = "0x11DE304")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0x11DE344", Offset = "0x11DE344", VA = "0x11DE344")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0x11DE360", Offset = "0x11DE360", VA = "0x11DE360")]
		public ScrollController()
		{
		}
	}
	[Token(Token = "0x20003F3")]
	[RequireComponent(typeof(ProgressBarManager))]
	public class SliderProgressBar : MonoBehaviour
	{
		[Token(Token = "0x20003F4")]
		public enum ValueType
		{
			[Token(Token = "0x4001A3B")]
			Percentage,
			[Token(Token = "0x4001A3C")]
			Number
		}

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Slider slider;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float step;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Value")]
		public ValueType valuePresentedAs;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform valueText;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float roundedPercentage;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float roundedValue;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x1700033C")]
		public Text ValueText
		{
			[Token(Token = "0x6001CBF")]
			[Address(RVA = "0x11DE378", Offset = "0x11DE378", VA = "0x11DE378")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700033D")]
		public float Value
		{
			[Token(Token = "0x6001CC0")]
			[Address(RVA = "0x11DE3C8", Offset = "0x11DE3C8", VA = "0x11DE3C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CC1")]
			[Address(RVA = "0x11DE3EC", Offset = "0x11DE3EC", VA = "0x11DE3EC")]
			set
			{
			}
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0x11DE410", Offset = "0x11DE410", VA = "0x11DE410")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x11DE468", Offset = "0x11DE468", VA = "0x11DE468")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0x11DE844", Offset = "0x11DE844", VA = "0x11DE844")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0x11DE898", Offset = "0x11DE898", VA = "0x11DE898")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x11DE8EC", Offset = "0x11DE8EC", VA = "0x11DE8EC")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x11DE5BC", Offset = "0x11DE5BC", VA = "0x11DE5BC")]
		private void CalculateValue(float newValue)
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x11DE744", Offset = "0x11DE744", VA = "0x11DE744")]
		private void UpdateValueText(float newValue)
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x11DE910", Offset = "0x11DE910", VA = "0x11DE910")]
		public SliderProgressBar()
		{
		}
	}
	[Token(Token = "0x20003F5")]
	public class RadialItem : MonoBehaviour
	{
		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Color normalColor;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Color hoverColor;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sprite iconImage;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onClickEvent;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform icon;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform sector;

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x11DE924", Offset = "0x11DE924", VA = "0x11DE924")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x11DE9B0", Offset = "0x11DE9B0", VA = "0x11DE9B0")]
		public void AdjustFillSize(int total, int index, float radius)
		{
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x11DEB6C", Offset = "0x11DEB6C", VA = "0x11DEB6C")]
		public void Activate()
		{
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x11DEBD8", Offset = "0x11DEBD8", VA = "0x11DEBD8")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x11DEC44", Offset = "0x11DEC44", VA = "0x11DEC44")]
		public void Click()
		{
		}

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0x11DEAD8", Offset = "0x11DEAD8", VA = "0x11DEAD8")]
		private Vector3 CalculateIconPosition(float rotation, float radis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0x11DEC58", Offset = "0x11DEC58", VA = "0x11DEC58")]
		public RadialItem()
		{
		}
	}
	[Token(Token = "0x20003F6")]
	[ExecuteInEditMode]
	public class RadialMenuManager : MonoBehaviour
	{
		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Min(0f)]
		public float iconRadius;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector2 position;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RadialItem[] radialItems;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentAngle;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int previousSelection;

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0x11DEC60", Offset = "0x11DEC60", VA = "0x11DEC60")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0x11DED80", Offset = "0x11DED80", VA = "0x11DED80")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0x11DECC0", Offset = "0x11DECC0", VA = "0x11DECC0")]
		private void AdjustRadialItem()
		{
		}

		[Token(Token = "0x6001CD4")]
		[Address(RVA = "0x11DEEF8", Offset = "0x11DEEF8", VA = "0x11DEEF8")]
		private int GetCurrentSelection(Vector2 position)
		{
			return default(int);
		}

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0x11DEEB4", Offset = "0x11DEEB4", VA = "0x11DEEB4")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0x11DEF94", Offset = "0x11DEF94", VA = "0x11DEF94")]
		private void ProcessSelection(int selection)
		{
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0x11DF01C", Offset = "0x11DF01C", VA = "0x11DF01C")]
		private void ProcessPress(int selection)
		{
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0x11DF0A0", Offset = "0x11DF0A0", VA = "0x11DF0A0")]
		public RadialMenuManager()
		{
		}
	}
	[Token(Token = "0x20003F7")]
	public class Util : MonoBehaviour
	{
		[Token(Token = "0x6001CD9")]
		public static T SafeDestroy<T>(T obj) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001CDA")]
		public static T SafeDestroyGameObject<T>(T component) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0x11DF0A8", Offset = "0x11DF0A8", VA = "0x11DF0A8")]
		public static void DestroyChildren(Transform root)
		{
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0x11DA8E0", Offset = "0x11DA8E0", VA = "0x11DA8E0")]
		public static string ReplaceLastOccurrence(string Source, string Find, string Replace)
		{
			return null;
		}

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0x11DF12C", Offset = "0x11DF12C", VA = "0x11DF12C")]
		public Util()
		{
		}
	}
	[Token(Token = "0x20003F8")]
	public class VREventSystemHelper : EventSystem
	{
		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0x11DF134", Offset = "0x11DF134", VA = "0x11DF134", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0x11DF140", Offset = "0x11DF140", VA = "0x11DF140")]
		public VREventSystemHelper()
		{
		}
	}
}
namespace HandGadget
{
	[Token(Token = "0x20003F9")]
	[RequireComponent(typeof(Slider))]
	public class BackPackIndicator : MonoBehaviour
	{
		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UnityEngine.Color backPackEmptyColor;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEngine.Color backPackHalfFullColor;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEngine.Color backPackFullColor;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UnityEngine.UI.Image sliderImage;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Slider backPackFullnesSlider;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float currentFullness;

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0x11DF198", Offset = "0x11DF198", VA = "0x11DF198")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0x11DF22C", Offset = "0x11DF22C", VA = "0x11DF22C")]
		public void SetBackPackFullness(float amount)
		{
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0x11DF2D4", Offset = "0x11DF2D4", VA = "0x11DF2D4")]
		public float GetCurrentAmount()
		{
			return default(float);
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0x11DF2DC", Offset = "0x11DF2DC", VA = "0x11DF2DC")]
		public BackPackIndicator()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class HandGadgetController : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject gadgetRenderer;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected HealthIcons healthIcons;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected PlayerMoneyText playerMoneyText;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected BackPackIndicator backPackIndicator;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Canvas canvas;

		[Token(Token = "0x1700033E")]
		public Canvas GetCanvas
		{
			[Token(Token = "0x6001CE4")]
			[Address(RVA = "0x11DF2E4", Offset = "0x11DF2E4", VA = "0x11DF2E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0x11DF2EC", Offset = "0x11DF2EC", VA = "0x11DF2EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0x11DF3FC", Offset = "0x11DF3FC", VA = "0x11DF3FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0x11DF51C", Offset = "0x11DF51C", VA = "0x11DF51C", Slot = "54")]
		public virtual void Setup(bool isMine)
		{
		}

		[Token(Token = "0x6001CE8")]
		[Address(RVA = "0x11DF50C", Offset = "0x11DF50C", VA = "0x11DF50C")]
		private void MoneyAmountChanged(int arg0)
		{
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0x11DF580", Offset = "0x11DF580", VA = "0x11DF580", Slot = "55")]
		public virtual void SetMaxHealth(int maxHealth)
		{
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0x11DF718", Offset = "0x11DF718", VA = "0x11DF718", Slot = "56")]
		public virtual void SetHealthLeft(int healthLeft)
		{
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0x11DFB04", Offset = "0x11DFB04", VA = "0x11DFB04", Slot = "57")]
		public virtual void SetBackPackFullness(float amountInPrecent)
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0x11DFC28", Offset = "0x11DFC28", VA = "0x11DFC28", Slot = "58")]
		public virtual void SetPlayerMoneyText(int newMoneyAmount)
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0x11DF900", Offset = "0x11DF900", VA = "0x11DF900")]
		public void SyncToOthers()
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0x11DFD84", Offset = "0x11DFD84", VA = "0x11DFD84")]
		[PunRPC]
		public void SyncRPC(byte healthLeft, int moneyAmount, byte fullness)
		{
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0x11DFDD8", Offset = "0x11DFDD8", VA = "0x11DFDD8", Slot = "42")]
		public override void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0x11DFFDC", Offset = "0x11DFFDC", VA = "0x11DFFDC")]
		public HandGadgetController()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class HealthIcons : MonoBehaviour
	{
		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.UI.Image[] healthIcons;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int currentHealthLeft;

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0x11DFFE4", Offset = "0x11DFFE4", VA = "0x11DFFE4")]
		private void CheckInit()
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0x11DF69C", Offset = "0x11DF69C", VA = "0x11DF69C")]
		public void SetMaxHealth(int maxHealth)
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0x11DF83C", Offset = "0x11DF83C", VA = "0x11DF83C")]
		public void SetHealthLeft(int healthLeft)
		{
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0x11E005C", Offset = "0x11E005C", VA = "0x11E005C")]
		public int GetCurrentHealthLeft()
		{
			return default(int);
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0x11E0064", Offset = "0x11E0064", VA = "0x11E0064")]
		public HealthIcons()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	[RequireComponent(typeof(TextMeshProUGUI))]
	public class PlayerMoneyText : MonoBehaviour
	{
		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshProUGUI moneyText;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int currentMoneyAmount;

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0x11E006C", Offset = "0x11E006C", VA = "0x11E006C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0x11DFD4C", Offset = "0x11DFD4C", VA = "0x11DFD4C")]
		public void ChangeMoneyAmount(int newAmount)
		{
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0x11E00E0", Offset = "0x11E00E0", VA = "0x11E00E0")]
		public int GetCurrentMoneyAmount()
		{
			return default(int);
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0x11E00E8", Offset = "0x11E00E8", VA = "0x11E00E8")]
		public PlayerMoneyText()
		{
		}
	}
}
namespace SRF.UI.Layout
{
	[Token(Token = "0x20003FD")]
	[AddComponentMenu("SRF/UI/Layout/Flow Layout Group")]
	public class FlowLayoutGroup : LayoutGroup
	{
		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Spacing;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool ChildForceExpandWidth;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool ChildForceExpandHeight;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _layoutHeight;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IList<RectTransform> _rowList;

		[Token(Token = "0x1700033F")]
		protected bool IsCenterAlign
		{
			[Token(Token = "0x6001CFE")]
			[Address(RVA = "0x11E0854", Offset = "0x11E0854", VA = "0x11E0854")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000340")]
		protected bool IsRightAlign
		{
			[Token(Token = "0x6001CFF")]
			[Address(RVA = "0x11E0880", Offset = "0x11E0880", VA = "0x11E0880")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000341")]
		protected bool IsMiddleAlign
		{
			[Token(Token = "0x6001D00")]
			[Address(RVA = "0x11E08AC", Offset = "0x11E08AC", VA = "0x11E08AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000342")]
		protected bool IsLowerAlign
		{
			[Token(Token = "0x6001D01")]
			[Address(RVA = "0x11E08D0", Offset = "0x11E08D0", VA = "0x11E08D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0x11E00F0", Offset = "0x11E00F0", VA = "0x11E00F0", Slot = "28")]
		public override void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0x11E0214", Offset = "0x11E0214", VA = "0x11E0214", Slot = "37")]
		public override void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0x11E07A0", Offset = "0x11E07A0", VA = "0x11E07A0", Slot = "38")]
		public override void SetLayoutVertical()
		{
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0x11E07F8", Offset = "0x11E07F8", VA = "0x11E07F8", Slot = "29")]
		public override void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0x11E026C", Offset = "0x11E026C", VA = "0x11E026C")]
		public float SetLayout(float width, int axis, bool layoutInput)
		{
			return default(float);
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0x11E08F4", Offset = "0x11E08F4", VA = "0x11E08F4")]
		private float CalculateRowVerticalOffset(float groupHeight, float yOffset, float currentRowHeight)
		{
			return default(float);
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0x11E093C", Offset = "0x11E093C", VA = "0x11E093C")]
		protected void LayoutRow(IList<RectTransform> contents, float rowWidth, float rowHeight, float maxWidth, float xOffset, float yOffset, int axis)
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0x11E0174", Offset = "0x11E0174", VA = "0x11E0174")]
		public float GetGreatestMinimumChildWidth()
		{
			return default(float);
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0x11E0D58", Offset = "0x11E0D58", VA = "0x11E0D58")]
		public FlowLayoutGroup()
		{
		}
	}
}
namespace SRF.Internal
{
	[Token(Token = "0x20003FE")]
	internal static class ComponentMenuPaths
	{
		[Token(Token = "0x4001A5C")]
		public const string PathRoot = "SRF";

		[Token(Token = "0x4001A5D")]
		public const string BehavioursRoot = "SRF/Behaviours";

		[Token(Token = "0x4001A5E")]
		public const string DestroyOnDisable = "SRF/Behaviours/Destroy On Disable";

		[Token(Token = "0x4001A5F")]
		public const string DontDestroyOnLoad = "SRF/Behaviours/Don't Destroy On Load";

		[Token(Token = "0x4001A60")]
		public const string MatchTransform = "SRF/Behaviours/Match Transform";

		[Token(Token = "0x4001A61")]
		public const string LookAt = "SRF/Behaviours/LookAt";

		[Token(Token = "0x4001A62")]
		public const string MatchForwardDirection = "SRF/Behaviours/Match Forward Direction";

		[Token(Token = "0x4001A63")]
		public const string MatchMainCameraForwardDirection = "SRF/Behaviours/Match Forward Direction (Main Camera)";

		[Token(Token = "0x4001A64")]
		public const string RuntimePosition = "SRF/Behaviours/Runtime Position";

		[Token(Token = "0x4001A65")]
		public const string ScrollTexture = "SRF/Behaviours/Scroll Texture";

		[Token(Token = "0x4001A66")]
		public const string SmoothFloatBehaviour = "SRF/Behaviours/Smooth Float";

		[Token(Token = "0x4001A67")]
		public const string SmoothFollow2D = "SRF/Behaviours/Smooth Follow (2D)";

		[Token(Token = "0x4001A68")]
		public const string SpringFollow = "SRF/Behaviours/Spring Follow";

		[Token(Token = "0x4001A69")]
		public const string SmoothMatchTransform = "SRF/Behaviours/Match Transform (Smooth)";

		[Token(Token = "0x4001A6A")]
		public const string SpawnPrefab = "SRF/Behaviours/Spawn Prefab";

		[Token(Token = "0x4001A6B")]
		public const string Velocity = "SRF/Behaviours/Velocity";

		[Token(Token = "0x4001A6C")]
		public const string SmoothOscillate = "SRF/Behaviours/Smooth Oscillate";

		[Token(Token = "0x4001A6D")]
		public const string SRDebugCamera = "SRF/Behaviours/Camera/SRDebugCamera";

		[Token(Token = "0x4001A6E")]
		public const string ComponentsRoot = "SRF/Components";

		[Token(Token = "0x4001A6F")]
		public const string SRLineRenderer = "SRF/Components/SRLineRenderer";

		[Token(Token = "0x4001A70")]
		public const string SelectionRoot = "SRF/Components/Selection Root";

		[Token(Token = "0x4001A71")]
		public const string SRSpriteFadeRenderer = "SRF/Components/Fade Renderer (Sprite)";

		[Token(Token = "0x4001A72")]
		public const string SRMaterialFadeRenderer = "SRF/Components/Fade Renderer (Material)";

		[Token(Token = "0x4001A73")]
		public const string SRCompositeFadeRenderer = "SRF/Components/Fade Renderer (Composite)";

		[Token(Token = "0x4001A74")]
		public const string SRServiceManager = "SRF/Service/Service Manager";

		[Token(Token = "0x4001A75")]
		public const string UIRoot = "SRF/UI";

		[Token(Token = "0x4001A76")]
		public const string TiltOnTouch = "SRF/UI/Tilt On Touch";

		[Token(Token = "0x4001A77")]
		public const string ScaleOnTouch = "SRF/UI/Scale On Touch";

		[Token(Token = "0x4001A78")]
		public const string InheritColour = "SRF/UI/Inherit Colour";

		[Token(Token = "0x4001A79")]
		public const string FlashGraphic = "SRF/UI/Flash Graphic";

		[Token(Token = "0x4001A7A")]
		public const string CopyPreferredSize = "SRF/UI/Copy Preferred Size";

		[Token(Token = "0x4001A7B")]
		public const string CopyLayoutElement = "SRF/UI/Copy Layout Element";

		[Token(Token = "0x4001A7C")]
		public const string SRText = "SRF/UI/SRText";

		[Token(Token = "0x4001A7D")]
		public const string Unselectable = "SRF/UI/Unselectable";

		[Token(Token = "0x4001A7E")]
		public const string LongPressButton = "SRF/UI/Long Press Button";

		[Token(Token = "0x4001A7F")]
		public const string FlowLayoutGroup = "SRF/UI/Layout/Flow Layout Group";

		[Token(Token = "0x4001A80")]
		public const string VirtualVerticalLayoutGroup = "SRF/UI/Layout/VerticalLayoutGroup (Virtualizing)";

		[Token(Token = "0x4001A81")]
		public const string StyleRoot = "SRF/UI/Style Root";

		[Token(Token = "0x4001A82")]
		public const string StyleComponent = "SRF/UI/Style Component";

		[Token(Token = "0x4001A83")]
		public const string ResponsiveEnable = "SRF/UI/Responsive (Enable)";

		[Token(Token = "0x4001A84")]
		public const string ResponsiveResize = "SRF/UI/Responsive (Resize)";

		[Token(Token = "0x4001A85")]
		public const string RetinaScaler = "SRF/UI/Retina Scaler";

		[Token(Token = "0x4001A86")]
		public const string NumberButton = "SRF/UI/SRNumberButton";

		[Token(Token = "0x4001A87")]
		public const string NumberSpinner = "SRF/UI/SRNumberSpinner";

		[Token(Token = "0x4001A88")]
		public const string SRSpinner = "SRF/UI/Spinner";

		[Token(Token = "0x4001A89")]
		public const string ContentFitText = "SRF/UI/Content Fit Text";
	}
}
namespace CheatsAndDevToolsUI
{
	[Serializable]
	[Token(Token = "0x20003FF")]
	public class EnemyCard
	{
		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject prefabObject;

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0x11E1DE0", Offset = "0x11E1DE0", VA = "0x11E1DE0")]
		public EnemyCard()
		{
		}
	}
	[Token(Token = "0x2000400")]
	public class CustomEnemyCardItem : MonoBehaviour
	{
		[Token(Token = "0x2000401")]
		public delegate void OnCardClickedHandler(EnemyCard card);

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text prefabName;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private EnemyCard card;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject prefabObject;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Button myButton;

		[Token(Token = "0x17000343")]
		public EnemyCard Card
		{
			[Token(Token = "0x6001D0A")]
			[Address(RVA = "0x11E1F20", Offset = "0x11E1F20", VA = "0x11E1F20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D0B")]
			[Address(RVA = "0x11E1F28", Offset = "0x11E1F28", VA = "0x11E1F28")]
			set
			{
			}
		}

		[Token(Token = "0x14000010")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6001D08")]
			[Address(RVA = "0x11E1DE8", Offset = "0x11E1DE8", VA = "0x11E1DE8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D09")]
			[Address(RVA = "0x11E1E84", Offset = "0x11E1E84", VA = "0x11E1E84")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0x11E1FA0", Offset = "0x11E1FA0", VA = "0x11E1FA0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0x11E20BC", Offset = "0x11E20BC", VA = "0x11E20BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0x11E2194", Offset = "0x11E2194", VA = "0x11E2194")]
		private void SpawnEnemy()
		{
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0x11E22CC", Offset = "0x11E22CC", VA = "0x11E22CC")]
		public CustomEnemyCardItem()
		{
		}
	}
	[Token(Token = "0x2000402")]
	public class CustomEnemyCardListManager : MonoBehaviour
	{
		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<CustomEnemyCardItem> cardItems;

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0x11E2450", Offset = "0x11E2450", VA = "0x11E2450")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0x11E25F0", Offset = "0x11E25F0", VA = "0x11E25F0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0x11E247C", Offset = "0x11E247C", VA = "0x11E247C")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0x11E2784", Offset = "0x11E2784", VA = "0x11E2784")]
		public void AddCardItem(EnemyCard card)
		{
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0x11E28D8", Offset = "0x11E28D8", VA = "0x11E28D8")]
		public CustomEnemyCardListManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000403")]
	public class LootCard
	{
		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject prefabObject;

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0x11E2960", Offset = "0x11E2960", VA = "0x11E2960")]
		public LootCard()
		{
		}
	}
	[Token(Token = "0x2000404")]
	public class CustomLootCardItem : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x2000405")]
		public delegate void OnCardClickedHandler(LootCard card);

		[Token(Token = "0x2000406")]
		[CompilerGenerated]
		private sealed class <_SpawnLoot>d__17 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CustomLootCardItem <>4__this;

			[Token(Token = "0x4001A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 <spawnPosition>5__2;

			[Token(Token = "0x17000345")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001D2D")]
				[Address(RVA = "0x11E310C", Offset = "0x11E310C", VA = "0x11E310C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000346")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D2F")]
				[Address(RVA = "0x11E3154", Offset = "0x11E3154", VA = "0x11E3154", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D2A")]
			[Address(RVA = "0x11E2D04", Offset = "0x11E2D04", VA = "0x11E2D04")]
			[DebuggerHidden]
			public <_SpawnLoot>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001D2B")]
			[Address(RVA = "0x11E2EB8", Offset = "0x11E2EB8", VA = "0x11E2EB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D2C")]
			[Address(RVA = "0x11E2EBC", Offset = "0x11E2EBC", VA = "0x11E2EBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D2E")]
			[Address(RVA = "0x11E3114", Offset = "0x11E3114", VA = "0x11E3114", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text prefabName;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LootCard card;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject prefabObject;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Button myButton;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private EventTrigger eventTrigger;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CoroutineHandle spawnLootCoroutine;

		[Token(Token = "0x17000344")]
		public LootCard Card
		{
			[Token(Token = "0x6001D1C")]
			[Address(RVA = "0x11E2AA0", Offset = "0x11E2AA0", VA = "0x11E2AA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D1D")]
			[Address(RVA = "0x11E2AA8", Offset = "0x11E2AA8", VA = "0x11E2AA8")]
			set
			{
			}
		}

		[Token(Token = "0x14000011")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6001D1A")]
			[Address(RVA = "0x11E2968", Offset = "0x11E2968", VA = "0x11E2968")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D1B")]
			[Address(RVA = "0x11E2A04", Offset = "0x11E2A04", VA = "0x11E2A04")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0x11E2B20", Offset = "0x11E2B20", VA = "0x11E2B20")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0x11E2BC0", Offset = "0x11E2BC0", VA = "0x11E2BC0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0x11E2BC4", Offset = "0x11E2BC4", VA = "0x11E2BC4")]
		private void ButtonPressed()
		{
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0x11E2CA8", Offset = "0x11E2CA8", VA = "0x11E2CA8")]
		private void ButtonReleased()
		{
		}

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0x11E2C34", Offset = "0x11E2C34", VA = "0x11E2C34")]
		[IteratorStateMachine(typeof(<_SpawnLoot>d__17))]
		private IEnumerator<float> _SpawnLoot()
		{
			return null;
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0x11E2D2C", Offset = "0x11E2D2C", VA = "0x11E2D2C", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0x11E2D30", Offset = "0x11E2D30", VA = "0x11E2D30", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0x11E2D34", Offset = "0x11E2D34", VA = "0x11E2D34")]
		public CustomLootCardItem()
		{
		}
	}
	[Token(Token = "0x2000407")]
	public class CustomLootCardListManager : MonoBehaviour
	{
		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<CustomLootCardItem> cardItems;

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x11E31B0", Offset = "0x11E31B0", VA = "0x11E31B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0x11E3350", Offset = "0x11E3350", VA = "0x11E3350")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0x11E31DC", Offset = "0x11E31DC", VA = "0x11E31DC")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0x11E34E4", Offset = "0x11E34E4", VA = "0x11E34E4")]
		public void AddCardItem(LootCard card)
		{
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0x11E3638", Offset = "0x11E3638", VA = "0x11E3638")]
		public CustomLootCardListManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000408")]
	public class MiscCard
	{
		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject prefabObject;

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0x11E36C0", Offset = "0x11E36C0", VA = "0x11E36C0")]
		public MiscCard()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public class CustomMiscCardItem : MonoBehaviour
	{
		[Token(Token = "0x200040A")]
		public delegate void OnCardClickedHandler(EnemyCard card);

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text prefabName;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MiscCard card;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject prefabObject;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Button myButton;

		[Token(Token = "0x17000347")]
		public MiscCard Card
		{
			[Token(Token = "0x6001D38")]
			[Address(RVA = "0x11E3800", Offset = "0x11E3800", VA = "0x11E3800")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D39")]
			[Address(RVA = "0x11E3808", Offset = "0x11E3808", VA = "0x11E3808")]
			set
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6001D36")]
			[Address(RVA = "0x11E36C8", Offset = "0x11E36C8", VA = "0x11E36C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D37")]
			[Address(RVA = "0x11E3764", Offset = "0x11E3764", VA = "0x11E3764")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0x11E3880", Offset = "0x11E3880", VA = "0x11E3880")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0x11E399C", Offset = "0x11E399C", VA = "0x11E399C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0x11E3A74", Offset = "0x11E3A74", VA = "0x11E3A74")]
		private void Spawn()
		{
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0x11E3C48", Offset = "0x11E3C48", VA = "0x11E3C48")]
		public CustomMiscCardItem()
		{
		}
	}
	[Token(Token = "0x200040B")]
	public class CustomMiscCardListManager : MonoBehaviour
	{
		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<CustomMiscCardItem> cardItems;

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0x11E3DCC", Offset = "0x11E3DCC", VA = "0x11E3DCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0x11E3F64", Offset = "0x11E3F64", VA = "0x11E3F64")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0x11E3DF8", Offset = "0x11E3DF8", VA = "0x11E3DF8")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0x11E40F8", Offset = "0x11E40F8", VA = "0x11E40F8")]
		public void AddCardItem(MiscCard card)
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0x11E424C", Offset = "0x11E424C", VA = "0x11E424C")]
		public CustomMiscCardListManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200040C")]
	public class RelicCard
	{
		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject prefabObject;

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0x11E42D4", Offset = "0x11E42D4", VA = "0x11E42D4")]
		public RelicCard()
		{
		}
	}
	[Token(Token = "0x200040D")]
	public class CustomRelicCardItem : MonoBehaviour
	{
		[Token(Token = "0x200040E")]
		public delegate void OnCardClickedHandler(RelicCard card);

		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text prefabName;

		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RelicCard card;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject prefabObject;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Button myButton;

		[Token(Token = "0x17000348")]
		public RelicCard Card
		{
			[Token(Token = "0x6001D4A")]
			[Address(RVA = "0x11E4414", Offset = "0x11E4414", VA = "0x11E4414")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D4B")]
			[Address(RVA = "0x11E441C", Offset = "0x11E441C", VA = "0x11E441C")]
			set
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6001D48")]
			[Address(RVA = "0x11E42DC", Offset = "0x11E42DC", VA = "0x11E42DC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D49")]
			[Address(RVA = "0x11E4378", Offset = "0x11E4378", VA = "0x11E4378")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0x11E4494", Offset = "0x11E4494", VA = "0x11E4494")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0x11E45B0", Offset = "0x11E45B0", VA = "0x11E45B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0x11E4688", Offset = "0x11E4688", VA = "0x11E4688")]
		private void SpawnLoot()
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0x11E47C4", Offset = "0x11E47C4", VA = "0x11E47C4")]
		public CustomRelicCardItem()
		{
		}
	}
	[Token(Token = "0x200040F")]
	public class CustomRelicCardListManager : MonoBehaviour
	{
		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<CustomRelicCardItem> cardItems;

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0x11E4948", Offset = "0x11E4948", VA = "0x11E4948")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0x11E4AE8", Offset = "0x11E4AE8", VA = "0x11E4AE8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001D56")]
		[Address(RVA = "0x11E4974", Offset = "0x11E4974", VA = "0x11E4974")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0x11E4C7C", Offset = "0x11E4C7C", VA = "0x11E4C7C")]
		public void AddCardItem(RelicCard card)
		{
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0x11E4DD0", Offset = "0x11E4DD0", VA = "0x11E4DD0")]
		public CustomRelicCardListManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000410")]
	public class ToolCard
	{
		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject prefabObject;

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0x11E4E58", Offset = "0x11E4E58", VA = "0x11E4E58")]
		public ToolCard()
		{
		}
	}
	[Token(Token = "0x2000411")]
	public class CustomToolCardItem : MonoBehaviour
	{
		[Token(Token = "0x2000412")]
		public delegate void OnCardClickedHandler(ToolCard card);

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text prefabName;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ToolCard card;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject prefabObject;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Button myButton;

		[Token(Token = "0x17000349")]
		public ToolCard Card
		{
			[Token(Token = "0x6001D5C")]
			[Address(RVA = "0x11E4F98", Offset = "0x11E4F98", VA = "0x11E4F98")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D5D")]
			[Address(RVA = "0x11E4FA0", Offset = "0x11E4FA0", VA = "0x11E4FA0")]
			set
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6001D5A")]
			[Address(RVA = "0x11E4E60", Offset = "0x11E4E60", VA = "0x11E4E60")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001D5B")]
			[Address(RVA = "0x11E4EFC", Offset = "0x11E4EFC", VA = "0x11E4EFC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0x11E5018", Offset = "0x11E5018", VA = "0x11E5018")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0x11E5134", Offset = "0x11E5134", VA = "0x11E5134")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0x11E520C", Offset = "0x11E520C", VA = "0x11E520C")]
		private void SpawnTool()
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0x11E5394", Offset = "0x11E5394", VA = "0x11E5394")]
		public CustomToolCardItem()
		{
		}
	}
	[Token(Token = "0x2000413")]
	public class CustomToolCardListManager : MonoBehaviour
	{
		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<CustomToolCardItem> cardItems;

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0x11E5518", Offset = "0x11E5518", VA = "0x11E5518")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0x11E56B8", Offset = "0x11E56B8", VA = "0x11E56B8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0x11E5544", Offset = "0x11E5544", VA = "0x11E5544")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0x11E584C", Offset = "0x11E584C", VA = "0x11E584C")]
		public void AddCardItem(ToolCard card)
		{
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0x11E59A0", Offset = "0x11E59A0", VA = "0x11E59A0")]
		public CustomToolCardListManager()
		{
		}
	}
	[Token(Token = "0x2000414")]
	public class NetworkStatusPanel : MonoBehaviour
	{
		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector3 positionOffset;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform originalParent;

		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool pollNetworkStats;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Canvas myCanvas;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GraphicRaycaster graphicRaycaster;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text totalText;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Text elapsedTimeText;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Text averageText;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Text trafficStatsInText;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text trafficStatsOutText;

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Text healthStatsText;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Button resetStatsButton;

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0x11E5A28", Offset = "0x11E5A28", VA = "0x11E5A28")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0x11E5B28", Offset = "0x11E5B28", VA = "0x11E5B28")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0x11E5B84", Offset = "0x11E5B84", VA = "0x11E5B84")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0x11E6528", Offset = "0x11E6528", VA = "0x11E6528")]
		public void TogglePanel(bool active)
		{
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0x11E5BBC", Offset = "0x11E5BBC", VA = "0x11E5BBC")]
		private void ResetStats()
		{
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0x11E5C4C", Offset = "0x11E5C4C", VA = "0x11E5C4C")]
		private void PollNetworkStats()
		{
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0x11E66E0", Offset = "0x11E66E0", VA = "0x11E66E0")]
		public NetworkStatusPanel()
		{
		}
	}
	[Token(Token = "0x2000415")]
	public class ToggleCheatAndDevToolsPanel : Singleton<ToggleCheatAndDevToolsPanel>
	{
		[Token(Token = "0x2000416")]
		[CompilerGenerated]
		private sealed class <_HoldButtonCounter>d__13 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001AD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001AD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001AD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ToggleCheatAndDevToolsPanel <>4__this;

			[Token(Token = "0x4001AD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float <time>5__2;

			[Token(Token = "0x1700034A")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001D81")]
				[Address(RVA = "0x11E7ED0", Offset = "0x11E7ED0", VA = "0x11E7ED0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700034B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D83")]
				[Address(RVA = "0x11E7F18", Offset = "0x11E7F18", VA = "0x11E7F18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D7E")]
			[Address(RVA = "0x11E7620", Offset = "0x11E7620", VA = "0x11E7620")]
			[DebuggerHidden]
			public <_HoldButtonCounter>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001D7F")]
			[Address(RVA = "0x11E7E20", Offset = "0x11E7E20", VA = "0x11E7E20", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D80")]
			[Address(RVA = "0x11E7E24", Offset = "0x11E7E24", VA = "0x11E7E24", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D82")]
			[Address(RVA = "0x11E7ED8", Offset = "0x11E7ED8", VA = "0x11E7ED8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool CheatsEnabled;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float disableDistance;

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float holdSecondaryButtonDuration;

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool enabledOnStart;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private NetworkStatusPanel networkStats;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool cheatsPanelActive;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Canvas[] myCanvases;

		[Token(Token = "0x4001AD0")]
		private const string holdButtonCounterCoroutineName = "HoldButtonCounterCoroutineName";

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GraphicRaycaster[] raycasters;

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0x11E6740", Offset = "0x11E6740", VA = "0x11E6740")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0x11E7158", Offset = "0x11E7158", VA = "0x11E7158")]
		private void SceneChangeFinished()
		{
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0x11E74A8", Offset = "0x11E74A8", VA = "0x11E74A8")]
		private void StartCounter()
		{
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0x11E75B8", Offset = "0x11E75B8", VA = "0x11E75B8")]
		private void StopCounter()
		{
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0x11E7544", Offset = "0x11E7544", VA = "0x11E7544")]
		[IteratorStateMachine(typeof(<_HoldButtonCounter>d__13))]
		private IEnumerator<float> _HoldButtonCounter()
		{
			return null;
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0x11E7648", Offset = "0x11E7648", VA = "0x11E7648", Slot = "5")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0x11E6C18", Offset = "0x11E6C18", VA = "0x11E6C18")]
		public void ToggleCheatsAndDevToolsPanel(bool active)
		{
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0x11E7108", Offset = "0x11E7108", VA = "0x11E7108")]
		public void ToggleNetworkStatsPanel(bool active)
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0x11E7B34", Offset = "0x11E7B34", VA = "0x11E7B34")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0x11E6B8C", Offset = "0x11E6B8C", VA = "0x11E6B8C")]
		public static void EnableCheats()
		{
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0x11E794C", Offset = "0x11E794C", VA = "0x11E794C")]
		private void MoveMultiplayerPanel()
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0x11E7DA0", Offset = "0x11E7DA0", VA = "0x11E7DA0")]
		public ToggleCheatAndDevToolsPanel()
		{
		}
	}
}
namespace Tutorial
{
	[Token(Token = "0x2000417")]
	public class GhostToolTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialGhostToolController ghostToolController;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool alreadyTriggered;

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0x11E7F74", Offset = "0x11E7F74", VA = "0x11E7F74")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0x11E812C", Offset = "0x11E812C", VA = "0x11E812C")]
		public GhostToolTrigger()
		{
		}
	}
	[Token(Token = "0x2000418")]
	public class PickaxeSlotTutorial : MonoBehaviour
	{
		[Token(Token = "0x2000419")]
		[CompilerGenerated]
		private sealed class <_DelayedSetup>d__15 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001AE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001AE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001AE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PickaxeSlotTutorial <>4__this;

			[Token(Token = "0x1700034C")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001D91")]
				[Address(RVA = "0x11E8A3C", Offset = "0x11E8A3C", VA = "0x11E8A3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700034D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D93")]
				[Address(RVA = "0x11E8A84", Offset = "0x11E8A84", VA = "0x11E8A84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D8E")]
			[Address(RVA = "0x11E82EC", Offset = "0x11E82EC", VA = "0x11E82EC")]
			[DebuggerHidden]
			public <_DelayedSetup>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001D8F")]
			[Address(RVA = "0x11E88AC", Offset = "0x11E88AC", VA = "0x11E88AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D90")]
			[Address(RVA = "0x11E88B0", Offset = "0x11E88B0", VA = "0x11E88B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D92")]
			[Address(RVA = "0x11E8A44", Offset = "0x11E8A44", VA = "0x11E8A44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200041A")]
		[CompilerGenerated]
		private sealed class <_UpdateLineRenderer>d__19 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001AE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001AE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001AEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PickaxeSlotTutorial <>4__this;

			[Token(Token = "0x4001AEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject socket;

			[Token(Token = "0x1700034E")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001D97")]
				[Address(RVA = "0x11E8CBC", Offset = "0x11E8CBC", VA = "0x11E8CBC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700034F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D99")]
				[Address(RVA = "0x11E8D04", Offset = "0x11E8D04", VA = "0x11E8D04", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D94")]
			[Address(RVA = "0x11E887C", Offset = "0x11E887C", VA = "0x11E887C")]
			[DebuggerHidden]
			public <_UpdateLineRenderer>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001D95")]
			[Address(RVA = "0x11E8AE0", Offset = "0x11E8AE0", VA = "0x11E8AE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D96")]
			[Address(RVA = "0x11E8AE4", Offset = "0x11E8AE4", VA = "0x11E8AE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D98")]
			[Address(RVA = "0x11E8CC4", Offset = "0x11E8CC4", VA = "0x11E8CC4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialToolSocket leftHandSocket;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TutorialToolSocket rightHandSocket;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Atmosphere pickaxeTutorialAtmossphere;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TutorialPointOfIntrestArrow leftSocketArrow;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TutorialPointOfIntrestArrow rightSocketArrow;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pickaxe tutorialPickaxe;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool pickaxeSlotted;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float originalMoveSpeed;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float originalRunSpeed;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material lineRendererMaterial;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool updatingLineRenderer;

		[Token(Token = "0x4001AE4")]
		private const string updateLineRendererCoroutineName = "UpdateLineRendererCoroutine";

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0x11E8134", Offset = "0x11E8134", VA = "0x11E8134")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0x11E8210", Offset = "0x11E8210", VA = "0x11E8210")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0x11E8278", Offset = "0x11E8278", VA = "0x11E8278")]
		[IteratorStateMachine(typeof(<_DelayedSetup>d__15))]
		private IEnumerator<float> _DelayedSetup()
		{
			return null;
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0x11E8314", Offset = "0x11E8314", VA = "0x11E8314")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0x11E83A4", Offset = "0x11E83A4", VA = "0x11E83A4")]
		public void AllowMoving(bool allow)
		{
		}

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0x11E8430", Offset = "0x11E8430", VA = "0x11E8430")]
		private void ToggleSlotHighlight(bool active)
		{
		}

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0x11E8630", Offset = "0x11E8630", VA = "0x11E8630")]
		[IteratorStateMachine(typeof(<_UpdateLineRenderer>d__19))]
		private IEnumerator<float> _UpdateLineRenderer(GameObject socket)
		{
			return null;
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0x11E88A4", Offset = "0x11E88A4", VA = "0x11E88A4")]
		public PickaxeSlotTutorial()
		{
		}
	}
	[Token(Token = "0x200041B")]
	public class PickaxeSlotTutorialScreenFade : MonoBehaviour
	{
		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRScreenFade screenFade;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool pickaxeSlotted;

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0x11E8D60", Offset = "0x11E8D60", VA = "0x11E8D60")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0x11E8D64", Offset = "0x11E8D64", VA = "0x11E8D64")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0x11E8DD0", Offset = "0x11E8DD0", VA = "0x11E8DD0")]
		private void FadeScreen(bool fadeActive)
		{
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0x11E8E00", Offset = "0x11E8E00", VA = "0x11E8E00")]
		public PickaxeSlotTutorialScreenFade()
		{
		}
	}
	[Token(Token = "0x200041C")]
	public class SetupTutorialPlayerAvatar : MonoBehaviour
	{
		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialBackPack backPack;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SubtitleHolder subtitleHolder;

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0x11E8E08", Offset = "0x11E8E08", VA = "0x11E8E08")]
		public void InitPlayer()
		{
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0x11E8FA4", Offset = "0x11E8FA4", VA = "0x11E8FA4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0x11E9048", Offset = "0x11E9048", VA = "0x11E9048")]
		public SetupTutorialPlayerAvatar()
		{
		}
	}
	[Token(Token = "0x200041D")]
	[RequireComponent(typeof(HVRGrabbable))]
	public class TutorialBackPack : MonoBehaviour
	{
		[Token(Token = "0x200041E")]
		[CompilerGenerated]
		private sealed class <_VibrateControllerCoroutine>d__30 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001B05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HVRController controllerToVibrate;

			[Token(Token = "0x4001B06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float amplitude;

			[Token(Token = "0x17000350")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001DB7")]
				[Address(RVA = "0x11EAE10", Offset = "0x11EAE10", VA = "0x11EAE10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000351")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DB9")]
				[Address(RVA = "0x11EAE58", Offset = "0x11EAE58", VA = "0x11EAE58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DB4")]
			[Address(RVA = "0x11EA300", Offset = "0x11EA300", VA = "0x11EA300")]
			[DebuggerHidden]
			public <_VibrateControllerCoroutine>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001DB5")]
			[Address(RVA = "0x11EADB4", Offset = "0x11EADB4", VA = "0x11EADB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DB6")]
			[Address(RVA = "0x11EADB8", Offset = "0x11EADB8", VA = "0x11EADB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DB8")]
			[Address(RVA = "0x11EAE18", Offset = "0x11EAE18", VA = "0x11EAE18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float shakeDetectionThreshold;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform dropLootPosition;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform automaticDropLootPosition;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Audio clip to play when loot is added")]
		[SerializeField]
		private AudioClip lootClip;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[UnityEngine.Tooltip("Audio clip to play when loot is declined")]
		private AudioClip lootRemovedClip;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 100f)]
		[UnityEngine.Tooltip("Change that loot will drop when shaking")]
		[SerializeField]
		private int dropChance;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[UnityEngine.Tooltip("How many loot objects can the backpack hold")]
		private float backPackMaxAmount;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("If enabled, only the owner of this photonview can grab it")]
		[Header("Multiplayer stuff")]
		[SerializeField]
		private bool allowGrabOnlyOnOwner;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Collider backPackCollider;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BetterVelocityEstimator velocityEstimator;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private HVRGrabbable backPackHVRGrabbable;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody myRB;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AudioSource audioSource;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string[] lootTags;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Loot targetLoot;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Loot> currentLootsInTriggerArea;

		[Token(Token = "0x4001B00")]
		private const string vibrateControllerCoroutineName = "VibrateControllerCoroutine";

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool firstTimeLooting;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<LootSpawnAndDespawnManager.LootType> currentLootsInBackPack;

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0x11E9050", Offset = "0x11E9050", VA = "0x11E9050")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0x11E949C", Offset = "0x11E949C", VA = "0x11E949C")]
		private void BackpackSocketed(HVRSocket arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0x11E94B4", Offset = "0x11E94B4", VA = "0x11E94B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0x11E97A0", Offset = "0x11E97A0", VA = "0x11E97A0")]
		private void SceneChangeStarted()
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0x11E9884", Offset = "0x11E9884", VA = "0x11E9884")]
		private void SceneChangeFinished()
		{
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0x11E9968", Offset = "0x11E9968", VA = "0x11E9968")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0x11E96D0", Offset = "0x11E96D0", VA = "0x11E96D0")]
		private void OtherUpgraded(OtherUpgradePathScriptableObject.UpgradeType arg0)
		{
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0x11E9104", Offset = "0x11E9104", VA = "0x11E9104")]
		private void GetReferences()
		{
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0x11E9BFC", Offset = "0x11E9BFC", VA = "0x11E9BFC")]
		public List<LootSpawnAndDespawnManager.LootType> GetBackPackLoots()
		{
			return null;
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0x11E9C04", Offset = "0x11E9C04", VA = "0x11E9C04")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0x11E9F2C", Offset = "0x11E9F2C", VA = "0x11E9F2C")]
		private void LootReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0x11E9EA8", Offset = "0x11E9EA8", VA = "0x11E9EA8")]
		[IteratorStateMachine(typeof(<_VibrateControllerCoroutine>d__30))]
		private IEnumerator<float> _VibrateControllerCoroutine(HVRController controllerToVibrate, float amplitude)
		{
			return null;
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0x11EA328", Offset = "0x11EA328", VA = "0x11EA328")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x11EA15C", Offset = "0x11EA15C", VA = "0x11EA15C")]
		private void AddAndDestroyLoot(Loot loot)
		{
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0x11EA67C", Offset = "0x11EA67C", VA = "0x11EA67C")]
		private void AddLoot(LootSpawnAndDespawnManager.LootType lootType, bool playSound = true)
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0x11EA9B8", Offset = "0x11EA9B8", VA = "0x11EA9B8")]
		private void AddLootRPC(LootSpawnAndDespawnManager.LootType lootType)
		{
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0x11EA580", Offset = "0x11EA580", VA = "0x11EA580")]
		private void DropLoot(LootSpawnAndDespawnManager.LootType lootType)
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0x11EAB20", Offset = "0x11EAB20", VA = "0x11EAB20")]
		public void RemoveLootFromBackPack(LootSpawnAndDespawnManager.LootType lootType)
		{
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0x11EAC14", Offset = "0x11EAC14", VA = "0x11EAC14")]
		public TutorialBackPack()
		{
		}
	}
	[Token(Token = "0x200041F")]
	public class TutorialDDOLHolder : MonoBehaviour
	{
		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<LootSpawnAndDespawnManager.LootType> backPackLootsToPreserve;

		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0x11EAEB4", Offset = "0x11EAEB4", VA = "0x11EAEB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0x11EAF20", Offset = "0x11EAF20", VA = "0x11EAF20")]
		public void SetBackPackLootsToPreserve(List<LootSpawnAndDespawnManager.LootType> loots)
		{
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0x11EAF28", Offset = "0x11EAF28", VA = "0x11EAF28")]
		public List<LootSpawnAndDespawnManager.LootType> GetPreservedBackPackLoots()
		{
			return null;
		}

		[Token(Token = "0x6001DBD")]
		[Address(RVA = "0x11EAF30", Offset = "0x11EAF30", VA = "0x11EAF30")]
		public TutorialDDOLHolder()
		{
		}
	}
	[Token(Token = "0x2000420")]
	public class TutorialElevatorMoving : MonoBehaviour
	{
		[Token(Token = "0x2000421")]
		[CompilerGenerated]
		private sealed class <_GoingUp>d__29 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x17000352")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001DD0")]
				[Address(RVA = "0x11EC6B0", Offset = "0x11EC6B0", VA = "0x11EC6B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000353")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DD2")]
				[Address(RVA = "0x11EC6F8", Offset = "0x11EC6F8", VA = "0x11EC6F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DCD")]
			[Address(RVA = "0x11EC0E8", Offset = "0x11EC0E8", VA = "0x11EC0E8")]
			[DebuggerHidden]
			public <_GoingUp>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6001DCE")]
			[Address(RVA = "0x11EC3C8", Offset = "0x11EC3C8", VA = "0x11EC3C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DCF")]
			[Address(RVA = "0x11EC3CC", Offset = "0x11EC3CC", VA = "0x11EC3CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DD1")]
			[Address(RVA = "0x11EC6B8", Offset = "0x11EC6B8", VA = "0x11EC6B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource moveLoop;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float stopMoveLoopTime;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool audioPaused;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[UnityEngine.Tooltip("Amount of movement to trigger level generation, currently tied to position, so could need some rework")]
		private float generateTheshold;

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[UnityEngine.Tooltip("Amount of movement to trigger player teleporting to elevator, currently tied to position, so could need some rework")]
		private float playerTeleportThreshold;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private BoxCollider myBoxTrigger;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public bool elevatorMoving;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool levelGenerated;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool levelDestroyed;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		private bool alreadyOnElevator;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool lastElevator;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool playersTeleported;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		private bool sceneChangeStarted;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 originalPosition;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 targetPosMin;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 targetPosMax;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform playerSpawnPoint;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private TutorialElevatorRoom myElevatorRoom;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RotatorObject rotatorObject;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<CustomHexaBodyPlayer3> hexaBodies;

		[Token(Token = "0x6001DBE")]
		[Address(RVA = "0x11EAFB8", Offset = "0x11EAFB8", VA = "0x11EAFB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DBF")]
		[Address(RVA = "0x11EB08C", Offset = "0x11EB08C", VA = "0x11EB08C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0x11EB134", Offset = "0x11EB134", VA = "0x11EB134")]
		public void SetElevatorPos(Transform newPos)
		{
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0x11EB1FC", Offset = "0x11EB1FC", VA = "0x11EB1FC")]
		public void SetElevatorTargetPosMin(Transform target)
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0x11EB264", Offset = "0x11EB264", VA = "0x11EB264")]
		public void SetElevatorTargetPosMax(Transform target)
		{
		}

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0x11EB2CC", Offset = "0x11EB2CC", VA = "0x11EB2CC")]
		public void ResetElevator()
		{
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0x11EB380", Offset = "0x11EB380", VA = "0x11EB380")]
		private void MoveElevator(float rotatorValue)
		{
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0x11EBADC", Offset = "0x11EBADC", VA = "0x11EBADC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0x11EBE00", Offset = "0x11EBE00", VA = "0x11EBE00")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0x11EBA7C", Offset = "0x11EBA7C", VA = "0x11EBA7C")]
		[IteratorStateMachine(typeof(<_GoingUp>d__29))]
		private IEnumerator<float> _GoingUp()
		{
			return null;
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0x11EB958", Offset = "0x11EB958", VA = "0x11EB958")]
		private void ElevatorIsUp()
		{
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0x11EC110", Offset = "0x11EC110", VA = "0x11EC110")]
		private void TeleportPlayersToElevatorRPC()
		{
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0x11EC260", Offset = "0x11EC260", VA = "0x11EC260")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0x11EB6C8", Offset = "0x11EB6C8", VA = "0x11EB6C8")]
		private void ToggleCCs(bool value)
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0x11EC2CC", Offset = "0x11EC2CC", VA = "0x11EC2CC")]
		public TutorialElevatorMoving()
		{
		}
	}
	[Token(Token = "0x2000422")]
	public class TutorialElevatorRoom : MonoBehaviour
	{
		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool elevatorIsOnTopWorld;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool inUse;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform levelTopWorld;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform levelMiddle;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private RotatorObject rotatorObject;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TutorialElevatorMoving elevatorMoving;

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0x11EC754", Offset = "0x11EC754", VA = "0x11EC754")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0x11EC7BC", Offset = "0x11EC7BC", VA = "0x11EC7BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0x11EC7DC", Offset = "0x11EC7DC", VA = "0x11EC7DC")]
		public void ResetElevator()
		{
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0x11EC828", Offset = "0x11EC828", VA = "0x11EC828")]
		public void SetupElevator()
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0x11EC82C", Offset = "0x11EC82C", VA = "0x11EC82C")]
		public TutorialElevatorRoom()
		{
		}
	}
	[Token(Token = "0x2000423")]
	public class TutorialGhostToolController : MonoBehaviour
	{
		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HVRGrabbable ghostToolGrabbable;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Pickaxe pickaxe;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float originalMoveSpeed;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float originalRunSpeed;

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0x11E7FC8", Offset = "0x11E7FC8", VA = "0x11E7FC8")]
		public void LoseTool()
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0x11EC894", Offset = "0x11EC894", VA = "0x11EC894")]
		private void GhostToolGrabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0x11EC944", Offset = "0x11EC944", VA = "0x11EC944")]
		public TutorialGhostToolController()
		{
		}
	}
	[Token(Token = "0x2000424")]
	[RequireComponent(typeof(HVRGrabbable))]
	public class TutorialGlove : MonoBehaviour
	{
		[Token(Token = "0x2000425")]
		[CompilerGenerated]
		private sealed class <_HandGrabbed>d__10 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001B2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HVRGrabbable arg1;

			[Token(Token = "0x4001B30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TutorialGlove <>4__this;

			[Token(Token = "0x17000354")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001DE6")]
				[Address(RVA = "0x11ED000", Offset = "0x11ED000", VA = "0x11ED000", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000355")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DE8")]
				[Address(RVA = "0x11ED048", Offset = "0x11ED048", VA = "0x11ED048", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DE3")]
			[Address(RVA = "0x11ECDF4", Offset = "0x11ECDF4", VA = "0x11ECDF4")]
			[DebuggerHidden]
			public <_HandGrabbed>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001DE4")]
			[Address(RVA = "0x11ECE30", Offset = "0x11ECE30", VA = "0x11ECE30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DE5")]
			[Address(RVA = "0x11ECE34", Offset = "0x11ECE34", VA = "0x11ECE34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DE7")]
			[Address(RVA = "0x11ED008", Offset = "0x11ED008", VA = "0x11ED008", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HVRHandSide handSide;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public HVRGrabbable hvrGrabbable;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TutorialPointOfIntrestArrow myPointOfIntrestArrow;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private CollisionDetectionMode collisionDetectionMode;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 originalPos;

		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0x11EC94C", Offset = "0x11EC94C", VA = "0x11EC94C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DDC")]
		[Address(RVA = "0x11ECAB8", Offset = "0x11ECAB8", VA = "0x11ECAB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0x11ECB00", Offset = "0x11ECB00", VA = "0x11ECB00")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0x11ECCC8", Offset = "0x11ECCC8", VA = "0x11ECCC8")]
		private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0x11ECCEC", Offset = "0x11ECCEC", VA = "0x11ECCEC")]
		private void HandGrabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0x11ECD64", Offset = "0x11ECD64", VA = "0x11ECD64")]
		[IteratorStateMachine(typeof(<_HandGrabbed>d__10))]
		private IEnumerator<float> _HandGrabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
		{
			return null;
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0x11ECE1C", Offset = "0x11ECE1C", VA = "0x11ECE1C")]
		public void AllowGrabbing()
		{
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0x11ECE20", Offset = "0x11ECE20", VA = "0x11ECE20")]
		public TutorialGlove()
		{
		}
	}
	[Token(Token = "0x2000426")]
	[RequireComponent(typeof(AudioSource))]
	public class TutorialGloveAudio : MonoBehaviour
	{
		[Token(Token = "0x2000427")]
		[CompilerGenerated]
		private sealed class <_ReplayAudio>d__13 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float waitDuration;

			[Token(Token = "0x4001B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private float <audioNotPlayedAmount>5__2;

			[Token(Token = "0x17000356")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001DF6")]
				[Address(RVA = "0x11ED70C", Offset = "0x11ED70C", VA = "0x11ED70C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000357")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DF8")]
				[Address(RVA = "0x11ED754", Offset = "0x11ED754", VA = "0x11ED754", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DF3")]
			[Address(RVA = "0x11ED5A4", Offset = "0x11ED5A4", VA = "0x11ED5A4")]
			[DebuggerHidden]
			public <_ReplayAudio>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001DF4")]
			[Address(RVA = "0x11ED5F8", Offset = "0x11ED5F8", VA = "0x11ED5F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DF5")]
			[Address(RVA = "0x11ED5FC", Offset = "0x11ED5FC", VA = "0x11ED5FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DF7")]
			[Address(RVA = "0x11ED714", Offset = "0x11ED714", VA = "0x11ED714", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static TutorialGloveAudio Instance;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HVRGrabbable leftGrabbableGlove;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private HVRGrabbable rightGrabbableGlove;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public AudioSource myAudioSource;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updatePos;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool audioPlayed;

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0x11ED0A4", Offset = "0x11ED0A4", VA = "0x11ED0A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0x11ED218", Offset = "0x11ED218", VA = "0x11ED218")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0x11ED2DC", Offset = "0x11ED2DC", VA = "0x11ED2DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0x11ED434", Offset = "0x11ED434", VA = "0x11ED434")]
		private void LeftGloveGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0x11ED440", Offset = "0x11ED440", VA = "0x11ED440")]
		private void RightGloveGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0x11ED40C", Offset = "0x11ED40C", VA = "0x11ED40C")]
		private void DisableAudioSpatialization()
		{
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0x11ED44C", Offset = "0x11ED44C", VA = "0x11ED44C")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0x11ED534", Offset = "0x11ED534", VA = "0x11ED534")]
		[IteratorStateMachine(typeof(<_ReplayAudio>d__13))]
		private IEnumerator<float> _ReplayAudio(float waitDuration)
		{
			return null;
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0x11ED5CC", Offset = "0x11ED5CC", VA = "0x11ED5CC")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0x11ED5E8", Offset = "0x11ED5E8", VA = "0x11ED5E8")]
		public TutorialGloveAudio()
		{
		}
	}
	[Token(Token = "0x2000428")]
	public class TutorialGloveLight : MonoBehaviour
	{
		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DamageType damageType;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform thumbFX;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform indexFingerFX;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rigThumbtip;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rigIndexTip;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform flame;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private string[] collisionTags;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource snapSFX;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private FireFlicker fireFlicker;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _isActive;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool allowActivation;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Collider lightCollider;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayerAvatar playerAvatar;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _inputStatus;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private float activeTime;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float extingquishTime;

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0x11ED7B0", Offset = "0x11ED7B0", VA = "0x11ED7B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0x11ED854", Offset = "0x11ED854", VA = "0x11ED854")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0x11ED990", Offset = "0x11ED990", VA = "0x11ED990")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0x11ED8C8", Offset = "0x11ED8C8", VA = "0x11ED8C8")]
		public void SetActive(bool value)
		{
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0x11EDA98", Offset = "0x11EDA98", VA = "0x11EDA98")]
		public void AllowGloveLight(bool allow)
		{
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0x11EDAA4", Offset = "0x11EDAA4", VA = "0x11EDAA4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001DFF")]
		[Address(RVA = "0x11EDB30", Offset = "0x11EDB30", VA = "0x11EDB30")]
		public TutorialGloveLight()
		{
		}
	}
	[Token(Token = "0x2000429")]
	[RequireComponent(typeof(HVRHandGrabber))]
	public class TutorialIgnoreGrabbingToObject : MonoBehaviour
	{
		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<HVRGrabbable> ignoredGrabbables;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<HVRGrabbableBag> hvrGrabbableBags;

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0x11EDC10", Offset = "0x11EDC10", VA = "0x11EDC10")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E01")]
		[Address(RVA = "0x11EDDE0", Offset = "0x11EDDE0", VA = "0x11EDDE0")]
		public TutorialIgnoreGrabbingToObject()
		{
		}
	}
	[Token(Token = "0x200042A")]
	[RequireComponent(typeof(LevelLootSpawnManager))]
	public class TutorialLevelGenerationController : MonoBehaviour
	{
		[Token(Token = "0x200042B")]
		[CompilerGenerated]
		private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TutorialLevelGenerationController <>4__this;

			[Token(Token = "0x17000358")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E08")]
				[Address(RVA = "0x11EE0B0", Offset = "0x11EE0B0", VA = "0x11EE0B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000359")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E0A")]
				[Address(RVA = "0x11EE0F8", Offset = "0x11EE0F8", VA = "0x11EE0F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E05")]
			[Address(RVA = "0x11EDFD0", Offset = "0x11EDFD0", VA = "0x11EDFD0")]
			[DebuggerHidden]
			public <Start>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001E06")]
			[Address(RVA = "0x11EE000", Offset = "0x11EE000", VA = "0x11EE000", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E07")]
			[Address(RVA = "0x11EE004", Offset = "0x11EE004", VA = "0x11EE004", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E09")]
			[Address(RVA = "0x11EE0B8", Offset = "0x11EE0B8", VA = "0x11EE0B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Room tutorialRoom;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LevelLootSpawnManager levelLootSpawnManager;

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0x11EDEB8", Offset = "0x11EDEB8", VA = "0x11EDEB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0x11EDF5C", Offset = "0x11EDF5C", VA = "0x11EDF5C")]
		[IteratorStateMachine(typeof(<Start>d__3))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0x11EDFF8", Offset = "0x11EDFF8", VA = "0x11EDFF8")]
		public TutorialLevelGenerationController()
		{
		}
	}
	[Token(Token = "0x200042C")]
	public class TutorialLightController : MonoBehaviour
	{
		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Light glovesSpotLight;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Light torchIdleLight;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject pickaxeSpotLight;

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0x11EE100", Offset = "0x11EE100", VA = "0x11EE100")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0x11EE200", Offset = "0x11EE200", VA = "0x11EE200")]
		public void MovePickAxeSpotLight(Vector3 newPickaxePosition)
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0x11EE264", Offset = "0x11EE264", VA = "0x11EE264")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0x11EE35C", Offset = "0x11EE35C", VA = "0x11EE35C")]
		public TutorialLightController()
		{
		}
	}
	[Token(Token = "0x200042D")]
	public class TutorialLootSpawnChecker : MonoBehaviour
	{
		[Token(Token = "0x200042E")]
		[CompilerGenerated]
		private sealed class <_PollForLootDrop>d__5 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001B59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TutorialLootSpawnChecker <>4__this;

			[Token(Token = "0x1700035A")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001E17")]
				[Address(RVA = "0x11EE944", Offset = "0x11EE944", VA = "0x11EE944", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700035B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E19")]
				[Address(RVA = "0x11EE98C", Offset = "0x11EE98C", VA = "0x11EE98C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E14")]
			[Address(RVA = "0x11EE730", Offset = "0x11EE730", VA = "0x11EE730")]
			[DebuggerHidden]
			public <_PollForLootDrop>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001E15")]
			[Address(RVA = "0x11EE7E0", Offset = "0x11EE7E0", VA = "0x11EE7E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E16")]
			[Address(RVA = "0x11EE7E4", Offset = "0x11EE7E4", VA = "0x11EE7E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E18")]
			[Address(RVA = "0x11EE94C", Offset = "0x11EE94C", VA = "0x11EE94C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<GameObject> allSpawnedLoots;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int initialLootAmount;

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0x11EE364", Offset = "0x11EE364", VA = "0x11EE364")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0x11EE428", Offset = "0x11EE428", VA = "0x11EE428")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0x11EE63C", Offset = "0x11EE63C", VA = "0x11EE63C")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0x11EE6BC", Offset = "0x11EE6BC", VA = "0x11EE6BC")]
		[IteratorStateMachine(typeof(<_PollForLootDrop>d__5))]
		private IEnumerator<float> _PollForLootDrop()
		{
			return null;
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0x11EE758", Offset = "0x11EE758", VA = "0x11EE758")]
		public TutorialLootSpawnChecker()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200042F")]
	public class MyTutorialEvent : UnityEvent<TutorialManager.TutorialStage>
	{
		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0x11EE9E8", Offset = "0x11EE9E8", VA = "0x11EE9E8")]
		public MyTutorialEvent()
		{
		}
	}
	[Token(Token = "0x2000430")]
	public class TutorialManager : MonoBehaviour
	{
		[Token(Token = "0x2000431")]
		public enum TutorialStage
		{
			[Token(Token = "0x4001B64")]
			Start,
			[Token(Token = "0x4001B65")]
			PlayerStartedMoving,
			[Token(Token = "0x4001B66")]
			GlovesGrabbed,
			[Token(Token = "0x4001B67")]
			TorchLighted,
			[Token(Token = "0x4001B68")]
			PickaxeGrabbed,
			[Token(Token = "0x4001B69")]
			PickaxeNotSlottedAndDropped,
			[Token(Token = "0x4001B6A")]
			PickaxeSlotted,
			[Token(Token = "0x4001B6B")]
			LootDropped,
			[Token(Token = "0x4001B6C")]
			LootLooted,
			[Token(Token = "0x4001B6D")]
			ToolLost,
			[Token(Token = "0x4001B6E")]
			GhostToolGrabbed,
			[Token(Token = "0x4001B6F")]
			PlasmaShrimpFound,
			[Token(Token = "0x4001B70")]
			ElevatorFound,
			[Token(Token = "0x4001B71")]
			ElevatorUsed
		}

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static TutorialManager Instance;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TutorialLightController tutorialLightController;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TutorialPlayerAvatar tutorialPlayerAvatar;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private DiggingArea[] diggingAreas;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string loadingScreenSceneName;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Atmosphere tutorialAtmosphere;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int glovesGrabbed;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private TutorialStage _currentTutorialStage;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MyTutorialEvent OnTutorialStageChanged;

		[Token(Token = "0x1700035C")]
		private TutorialStage currentTutorialStage
		{
			[Token(Token = "0x6001E1B")]
			[Address(RVA = "0x11EEA30", Offset = "0x11EEA30", VA = "0x11EEA30")]
			get
			{
				return default(TutorialStage);
			}
			[Token(Token = "0x6001E1C")]
			[Address(RVA = "0x11EEA38", Offset = "0x11EEA38", VA = "0x11EEA38")]
			set
			{
			}
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0x11EEAE4", Offset = "0x11EEAE4", VA = "0x11EEAE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0x11EECC8", Offset = "0x11EECC8", VA = "0x11EECC8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0x11EED88", Offset = "0x11EED88", VA = "0x11EED88")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0x11EEEF4", Offset = "0x11EEEF4", VA = "0x11EEEF4")]
		public void PlayerStartedMoving()
		{
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0x11ECFB8", Offset = "0x11ECFB8", VA = "0x11ECFB8")]
		public void GloveGrabbed(HVRHandSide handSide)
		{
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0x11EEF6C", Offset = "0x11EEF6C", VA = "0x11EEF6C")]
		private void GlovesGrabbed()
		{
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0x11EEFE4", Offset = "0x11EEFE4", VA = "0x11EEFE4")]
		public void TorchLighted()
		{
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0x11EF044", Offset = "0x11EF044", VA = "0x11EF044")]
		public void PickaxeGrabbed()
		{
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0x11EF0A4", Offset = "0x11EF0A4", VA = "0x11EF0A4")]
		public void PickaxeNotSlottedAndDropped()
		{
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0x11EF104", Offset = "0x11EF104", VA = "0x11EF104")]
		public void PickaxeSlotted()
		{
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0x11EE8E4", Offset = "0x11EE8E4", VA = "0x11EE8E4")]
		public void LootDropped()
		{
		}

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0x11EA85C", Offset = "0x11EA85C", VA = "0x11EA85C")]
		public void LootLooted()
		{
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0x11EC834", Offset = "0x11EC834", VA = "0x11EC834")]
		public void ToolLost()
		{
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0x11EC8E4", Offset = "0x11EC8E4", VA = "0x11EC8E4")]
		public void GhostToolGrabbed()
		{
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0x11EF164", Offset = "0x11EF164", VA = "0x11EF164")]
		public void PlasmaShrimpFound()
		{
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0x11EF1C4", Offset = "0x11EF1C4", VA = "0x11EF1C4")]
		public void ElevatorFound()
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0x11EB8F8", Offset = "0x11EB8F8", VA = "0x11EB8F8")]
		public void ElevatorUsed()
		{
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0x11EC514", Offset = "0x11EC514", VA = "0x11EC514")]
		public void TutorialEnd()
		{
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0x11EB8F0", Offset = "0x11EB8F0", VA = "0x11EB8F0")]
		public TutorialStage GetCurrentStage()
		{
			return default(TutorialStage);
		}

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0x11EF224", Offset = "0x11EF224", VA = "0x11EF224")]
		public TutorialManager()
		{
		}
	}
	[Token(Token = "0x2000432")]
	public class TutorialMoveOutFromDDOL : MonoBehaviour
	{
		[Token(Token = "0x6001E31")]
		[Address(RVA = "0x11EF22C", Offset = "0x11EF22C", VA = "0x11EF22C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0x11EF2A4", Offset = "0x11EF2A4", VA = "0x11EF2A4")]
		public TutorialMoveOutFromDDOL()
		{
		}
	}
	[Token(Token = "0x2000433")]
	[RequireComponent(typeof(HVRGrabbable))]
	[RequireComponent(typeof(Pickaxe))]
	public class TutorialPickaxe : MonoBehaviour
	{
		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HVRGrabbable grabbable;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Pickaxe pickaxe;

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool slotted;

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 originalSpawnPos;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion originalSpawnRot;

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0x11EF2AC", Offset = "0x11EF2AC", VA = "0x11EF2AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0x11EF4CC", Offset = "0x11EF4CC", VA = "0x11EF4CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0x11EF590", Offset = "0x11EF590", VA = "0x11EF590")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0x11EF5B8", Offset = "0x11EF5B8", VA = "0x11EF5B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0x11EF7B0", Offset = "0x11EF7B0", VA = "0x11EF7B0")]
		private void Released(HVRHandGrabber arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0x11EF858", Offset = "0x11EF858", VA = "0x11EF858")]
		private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0x11EF69C", Offset = "0x11EF69C", VA = "0x11EF69C")]
		private void ResetPickAxePosition()
		{
		}

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0x11EF910", Offset = "0x11EF910", VA = "0x11EF910")]
		public TutorialPickaxe()
		{
		}
	}
	[Token(Token = "0x2000434")]
	[RequireComponent(typeof(QuickOutline.Outline))]
	public class TutorialPickaxeOutline : MonoBehaviour
	{
		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private QuickOutline.Outline outline;

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0x11EF918", Offset = "0x11EF918", VA = "0x11EF918")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0x11EF980", Offset = "0x11EF980", VA = "0x11EF980")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0x11EFA58", Offset = "0x11EFA58", VA = "0x11EFA58")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0x11EFA7C", Offset = "0x11EFA7C", VA = "0x11EFA7C")]
		public TutorialPickaxeOutline()
		{
		}
	}
	[Token(Token = "0x2000435")]
	public class TutorialPlasmaShrimp : PlasmaShrimp
	{
		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		[SerializeField]
		private TutorialPointOfIntrestArrow myPointOfIntrestArrow;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private bool disableMovement;

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0x11EFA84", Offset = "0x11EFA84", VA = "0x11EFA84")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0x11EFC38", Offset = "0x11EFC38", VA = "0x11EFC38", Slot = "70")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0x11EFC4C", Offset = "0x11EFC4C", VA = "0x11EFC4C")]
		private void ShrimpGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0x11EFC70", Offset = "0x11EFC70", VA = "0x11EFC70")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0x11EFD1C", Offset = "0x11EFD1C", VA = "0x11EFD1C", Slot = "73")]
		public override void DamageRPC(int damageTaken, DamageType damageType)
		{
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0x11EFD4C", Offset = "0x11EFD4C", VA = "0x11EFD4C")]
		private void DisableTutorialArrow()
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0x11EFDE0", Offset = "0x11EFDE0", VA = "0x11EFDE0")]
		public TutorialPlasmaShrimp()
		{
		}
	}
	[Token(Token = "0x2000436")]
	public class TutorialPlayerAvatar : MonoBehaviour
	{
		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialGloveLight tutorialGloveLight;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private HandGadgetController handGadgetController;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CustomHexaBodyPlayer3 hexabody;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SetupTutorialPlayerAvatar setupPlayerAvatar;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TutorialToggleGloveVisibility toggleGloveVisibility;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool playerMoved;

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0x11EFDF0", Offset = "0x11EFDF0", VA = "0x11EFDF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0x11EFE94", Offset = "0x11EFE94", VA = "0x11EFE94")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0x11F01BC", Offset = "0x11F01BC", VA = "0x11F01BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0x11F02A4", Offset = "0x11F02A4", VA = "0x11F02A4")]
		private void PlayerTeleported()
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0x11F030C", Offset = "0x11F030C", VA = "0x11F030C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0x11EFF40", Offset = "0x11EFF40", VA = "0x11EFF40")]
		private void Setup()
		{
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0x11EEED4", Offset = "0x11EEED4", VA = "0x11EEED4")]
		public void AllowGloveLight(bool allow)
		{
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0x11EEF54", Offset = "0x11EEF54", VA = "0x11EEF54")]
		public void EnableHandGlove(HVRHandSide handSide)
		{
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0x11EA8BC", Offset = "0x11EA8BC", VA = "0x11EA8BC")]
		public HandGadgetController GetPlayerHandGagdetController()
		{
			return null;
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0x11F057C", Offset = "0x11F057C", VA = "0x11F057C")]
		public TutorialPlayerAvatar()
		{
		}
	}
	[Token(Token = "0x2000437")]
	public class TutorialPlayerHealthSystem : MonoBehaviour, IKillable, IDamageable
	{
		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DamageType takeDamageType;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TutorialPlayerAvatar _player;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip damageTakenClip;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip deathClip;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int maxHealth;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int totalDamageTaken;

		[Token(Token = "0x1700035D")]
		public Action<GameObject> deathAction
		{
			[Token(Token = "0x6001E50")]
			[Address(RVA = "0x11F0584", Offset = "0x11F0584", VA = "0x11F0584", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001E51")]
			[Address(RVA = "0x11F058C", Offset = "0x11F058C", VA = "0x11F058C", Slot = "6")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700035E")]
		public GameObject GetGameObject
		{
			[Token(Token = "0x6001E52")]
			[Address(RVA = "0x11F0594", Offset = "0x11F0594", VA = "0x11F0594", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700035F")]
		public bool IsDead
		{
			[Token(Token = "0x6001E53")]
			[Address(RVA = "0x11F059C", Offset = "0x11F059C", VA = "0x11F059C", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0x11F05A4", Offset = "0x11F05A4", VA = "0x11F05A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0x11F05AC", Offset = "0x11F05AC", VA = "0x11F05AC")]
		private void SetMaxHealth(int newMaxHealth)
		{
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0x11F05FC", Offset = "0x11F05FC", VA = "0x11F05FC", Slot = "9")]
		public void DamageRPC(int damageTaken, DamageType damageType)
		{
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0x11F078C", Offset = "0x11F078C", VA = "0x11F078C", Slot = "4")]
		public void KillRPC(DamageType killedByDamageType)
		{
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0x11F08FC", Offset = "0x11F08FC", VA = "0x11F08FC")]
		public TutorialPlayerHealthSystem()
		{
		}
	}
	[Token(Token = "0x2000438")]
	public class TutorialPointOfIntrestArrow : MonoBehaviour
	{
		[Token(Token = "0x2000439")]
		[CompilerGenerated]
		private sealed class <_MoveArrow>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001B8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TutorialPointOfIntrestArrow <>4__this;

			[Token(Token = "0x17000360")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001E61")]
				[Address(RVA = "0x11F0BAC", Offset = "0x11F0BAC", VA = "0x11F0BAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000361")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E63")]
				[Address(RVA = "0x11F0BF4", Offset = "0x11F0BF4", VA = "0x11F0BF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E5E")]
			[Address(RVA = "0x11F0A5C", Offset = "0x11F0A5C", VA = "0x11F0A5C")]
			[DebuggerHidden]
			public <_MoveArrow>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001E5F")]
			[Address(RVA = "0x11F0A98", Offset = "0x11F0A98", VA = "0x11F0A98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E60")]
			[Address(RVA = "0x11F0A9C", Offset = "0x11F0A9C", VA = "0x11F0A9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E62")]
			[Address(RVA = "0x11F0BB4", Offset = "0x11F0BB4", VA = "0x11F0BB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float moveAmount;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float moveSpeed;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 originalLocalPosition;

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0x11F090C", Offset = "0x11F090C", VA = "0x11F090C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0x11F0948", Offset = "0x11F0948", VA = "0x11F0948")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0x11E8778", Offset = "0x11E8778", VA = "0x11E8778")]
		public void ToggleArrow(bool active, [Optional] GameObject parentToObject, bool resetOriginalPos = false)
		{
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0x11F09E8", Offset = "0x11F09E8", VA = "0x11F09E8")]
		[IteratorStateMachine(typeof(<_MoveArrow>d__6))]
		private IEnumerator<float> _MoveArrow()
		{
			return null;
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0x11F0A84", Offset = "0x11F0A84", VA = "0x11F0A84")]
		public TutorialPointOfIntrestArrow()
		{
		}
	}
	[Token(Token = "0x200043A")]
	public class TutorialPointOfIntrestArrowManager : MonoBehaviour
	{
		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialPointOfIntrestArrow firstTorchArrow;

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0x11F0C50", Offset = "0x11F0C50", VA = "0x11F0C50")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0x11F0D14", Offset = "0x11F0D14", VA = "0x11F0D14")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0x11F0D64", Offset = "0x11F0D64", VA = "0x11F0D64")]
		public TutorialPointOfIntrestArrowManager()
		{
		}
	}
	[Token(Token = "0x200043B")]
	public class TutorialTarget : MonoBehaviour
	{
		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer myRenderer;

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0x11F0D6C", Offset = "0x11F0D6C", VA = "0x11F0D6C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0x11F0DD4", Offset = "0x11F0DD4", VA = "0x11F0DD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0x11F0ECC", Offset = "0x11F0ECC", VA = "0x11F0ECC")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0x11F0EAC", Offset = "0x11F0EAC", VA = "0x11F0EAC")]
		private void ToggleRenderers(bool active)
		{
		}

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0x11F0EFC", Offset = "0x11F0EFC", VA = "0x11F0EFC")]
		public TutorialTarget()
		{
		}
	}
	[Token(Token = "0x200043C")]
	public class TutorialToggleGloveVisibility : MonoBehaviour
	{
		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SkinnedMeshRenderer handsRenderer;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private SkinnedMeshRenderer glovesRenderer;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material invisbleMaterial;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject handGadgetModel;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Canvas handGadgetCanvas;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material originalLeftHandGloveMaterial;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material originalRightHandGloveMaterial;

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0x11F0F04", Offset = "0x11F0F04", VA = "0x11F0F04")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0x11F0F88", Offset = "0x11F0F88", VA = "0x11F0F88")]
		private void DisableGloveVisibility()
		{
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0x11F03DC", Offset = "0x11F03DC", VA = "0x11F03DC")]
		public void ToggleVisibility(HVRHandSide handSide)
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0x11F107C", Offset = "0x11F107C", VA = "0x11F107C")]
		public TutorialToggleGloveVisibility()
		{
		}
	}
	[Token(Token = "0x200043D")]
	public class TutorialToolSocket : MonoBehaviour
	{
		[Token(Token = "0x200043E")]
		[CompilerGenerated]
		private sealed class <_RingBlink>d__16 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001BA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TutorialToolSocket <>4__this;

			[Token(Token = "0x4001BA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float blinkDuration;

			[Token(Token = "0x17000362")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001E7D")]
				[Address(RVA = "0x11F1888", Offset = "0x11F1888", VA = "0x11F1888", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000363")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E7F")]
				[Address(RVA = "0x11F18D0", Offset = "0x11F18D0", VA = "0x11F18D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E7A")]
			[Address(RVA = "0x11F172C", Offset = "0x11F172C", VA = "0x11F172C")]
			[DebuggerHidden]
			public <_RingBlink>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001E7B")]
			[Address(RVA = "0x11F1764", Offset = "0x11F1764", VA = "0x11F1764", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E7C")]
			[Address(RVA = "0x11F1768", Offset = "0x11F1768", VA = "0x11F1768", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E7E")]
			[Address(RVA = "0x11F1890", Offset = "0x11F1890", VA = "0x11F1890", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer ringMeshRenderer;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Material ringBlinkMaterial;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HVRSocket hvrSocket;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TutorialItemSocketFilter tutorialItemSocketFilter;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool allowChangingObject;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private CoroutineHandle blinkCoroutine;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool blinkingActive;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool shouldBlink;

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0x11F1084", Offset = "0x11F1084", VA = "0x11F1084")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0x11F13C8", Offset = "0x11F13C8", VA = "0x11F13C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0x11F1588", Offset = "0x11F1588", VA = "0x11F1588")]
		private void HoverEnter(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x11F1598", Offset = "0x11F1598", VA = "0x11F1598")]
		private void HoverExit(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0x11F1600", Offset = "0x11F1600", VA = "0x11F1600")]
		private void Released(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0x11F1630", Offset = "0x11F1630", VA = "0x11F1630")]
		private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0x11F1664", Offset = "0x11F1664", VA = "0x11F1664")]
		public void AllowChanging(bool newValue)
		{
		}

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0x11E86C0", Offset = "0x11E86C0", VA = "0x11E86C0")]
		public void ToggleBlinking(bool active)
		{
		}

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0x11F16A8", Offset = "0x11F16A8", VA = "0x11F16A8")]
		[IteratorStateMachine(typeof(<_RingBlink>d__16))]
		private IEnumerator<float> _RingBlink(float blinkDuration)
		{
			return null;
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0x11F1754", Offset = "0x11F1754", VA = "0x11F1754")]
		public TutorialToolSocket()
		{
		}
	}
	[Token(Token = "0x200043F")]
	public class TutorialTorch : MonoBehaviour, IDamageable
	{
		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DamageType takeDamageType;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public DamageType makeDamageType;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject fireFX;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Light fireLight;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject gasFX;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Light gasLight;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private UnityEngine.Color lightColor;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool triggerVoiceLine;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TutorialPointOfIntrestArrow torchTutorialPointOfIntrest;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool activated;

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0x11F192C", Offset = "0x11F192C", VA = "0x11F192C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0x11F1934", Offset = "0x11F1934", VA = "0x11F1934")]
		private void ToggleFire(bool value)
		{
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0x11F1A38", Offset = "0x11F1A38", VA = "0x11F1A38", Slot = "4")]
		public void DamageRPC(int damageTaken, DamageType damageType)
		{
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0x11F1AC4", Offset = "0x11F1AC4", VA = "0x11F1AC4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0x11F1B50", Offset = "0x11F1B50", VA = "0x11F1B50")]
		public TutorialTorch()
		{
		}
	}
	[Token(Token = "0x2000440")]
	public class TutorialTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialPointOfIntrestArrow arrowToDisable;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TutorialPointOfIntrestArrow arrowToEnable;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool alreadyTriggered;

		[Token(Token = "0x6001E85")]
		[Address(RVA = "0x11F1B58", Offset = "0x11F1B58", VA = "0x11F1B58")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001E86")]
		[Address(RVA = "0x11F1C54", Offset = "0x11F1C54", VA = "0x11F1C54")]
		public TutorialTrigger()
		{
		}
	}
	[Token(Token = "0x2000441")]
	[RequireComponent(typeof(Canvas))]
	public class TutorialUI : MonoBehaviour
	{
		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool alwaysRotateTowardPlayer;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Canvas myCanvas;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Can be setted manually to override, if not setted in inspector, will use GetComponentInChildren")]
		[SerializeField]
		private UnityEngine.UI.Image myImage;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshProUGUI myText;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Localize i2localize;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public Sprite oculusOrDefaultSprite;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public Sprite viveSprite;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public Sprite knucklesSprite;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public Sprite psvrSprite;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		public Sprite picoSprite;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public Sprite psvr2Sprite;

		[Token(Token = "0x6001E87")]
		[Address(RVA = "0x11F1C5C", Offset = "0x11F1C5C", VA = "0x11F1C5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0x11F1F08", Offset = "0x11F1F08", VA = "0x11F1F08")]
		public void SwitchController(HVRControllerType controllerType)
		{
		}

		[Token(Token = "0x6001E89")]
		[Address(RVA = "0x11F227C", Offset = "0x11F227C", VA = "0x11F227C")]
		[Obsolete("Doesn't work with I2 localization. Use SetTerm instead.", false)]
		public void SetText(string newText)
		{
		}

		[Token(Token = "0x6001E8A")]
		[Address(RVA = "0x11F234C", Offset = "0x11F234C", VA = "0x11F234C")]
		public void SetTerm(string term)
		{
		}

		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0x11F2414", Offset = "0x11F2414", VA = "0x11F2414")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0x11F2558", Offset = "0x11F2558", VA = "0x11F2558")]
		private void RotateTowardsCamera(Transform camera)
		{
		}

		[Token(Token = "0x6001E8D")]
		[Address(RVA = "0x11F25F8", Offset = "0x11F25F8", VA = "0x11F25F8")]
		public void PositionTo(Vector3 position)
		{
		}

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0x11F264C", Offset = "0x11F264C", VA = "0x11F264C")]
		public TutorialUI()
		{
		}
	}
	[Token(Token = "0x2000442")]
	public class TutorialUisController : MonoBehaviour
	{
		[Token(Token = "0x2000443")]
		[CompilerGenerated]
		private sealed class <_PollForMovementChanges>d__29 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001BD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TutorialUisController <>4__this;

			[Token(Token = "0x4001BD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private bool <playerMoved>5__2;

			[Token(Token = "0x17000364")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001EA9")]
				[Address(RVA = "0x11F375C", Offset = "0x11F375C", VA = "0x11F375C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000365")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001EAB")]
				[Address(RVA = "0x11F37A4", Offset = "0x11F37A4", VA = "0x11F37A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001EA6")]
			[Address(RVA = "0x11F323C", Offset = "0x11F323C", VA = "0x11F323C")]
			[DebuggerHidden]
			public <_PollForMovementChanges>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6001EA7")]
			[Address(RVA = "0x11F33DC", Offset = "0x11F33DC", VA = "0x11F33DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001EA8")]
			[Address(RVA = "0x11F33E0", Offset = "0x11F33E0", VA = "0x11F33E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001EAA")]
			[Address(RVA = "0x11F3764", Offset = "0x11F3764", VA = "0x11F3764", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000444")]
		[CompilerGenerated]
		private sealed class <_PollForTurnChanges>d__30 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001BD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TutorialUisController <>4__this;

			[Token(Token = "0x4001BD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private bool <playerRotated>5__2;

			[Token(Token = "0x17000366")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001EAF")]
				[Address(RVA = "0x11F39BC", Offset = "0x11F39BC", VA = "0x11F39BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000367")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001EB1")]
				[Address(RVA = "0x11F3A04", Offset = "0x11F3A04", VA = "0x11F3A04", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001EAC")]
			[Address(RVA = "0x11F3264", Offset = "0x11F3264", VA = "0x11F3264")]
			[DebuggerHidden]
			public <_PollForTurnChanges>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001EAD")]
			[Address(RVA = "0x11F3800", Offset = "0x11F3800", VA = "0x11F3800", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001EAE")]
			[Address(RVA = "0x11F3804", Offset = "0x11F3804", VA = "0x11F3804", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001EB0")]
			[Address(RVA = "0x11F39C4", Offset = "0x11F39C4", VA = "0x11F39C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HVRControllerType controllerType;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool controllerCheck;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static TutorialUisController Instance;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public TutorialUI moveTutorialUI;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public TutorialUI turnTutorialUI;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public TutorialUI rightGrabTutorialUI;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public TutorialUI leftGrabTutorialUI;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public TutorialUI teleportTutorialUI;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public TutorialUI lighterTutorialUI;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public TutorialUI slotTutorialUI;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public TutorialUI pressToReleaseToolTutorialUI;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		public TutorialUI lootingTutorialUI;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public TutorialUI ghostToolTutorialUI;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		public TutorialUI crankMenuTutorialUI;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private TutorialGlove leftHandTutorialGlove;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private TutorialGlove rightHandTutorialGlove;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private TutorialPointOfIntrestArrow leftHandGrabArrow;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private TutorialPointOfIntrestArrow rightHandGrabArrow;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private TutorialPointOfIntrestArrow firstTorchArrow;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private TutorialPointOfIntrestArrow pickaxeArrow;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private TutorialPointOfIntrestArrow goThroughFirstWallArrow;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private TutorialPointOfIntrestArrow goThroughSecondWallArrow;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private TutorialPointOfIntrestArrow elevatorArrow;

		[Token(Token = "0x6001E8F")]
		[Address(RVA = "0x11F2654", Offset = "0x11F2654", VA = "0x11F2654")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0x11F26AC", Offset = "0x11F26AC", VA = "0x11F26AC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0x11F2760", Offset = "0x11F2760", VA = "0x11F2760")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0x11F2C50", Offset = "0x11F2C50", VA = "0x11F2C50")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0x11F2F08", Offset = "0x11F2F08", VA = "0x11F2F08")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0x11F2950", Offset = "0x11F2950", VA = "0x11F2950")]
		private void DisableAll()
		{
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0x11F2B68", Offset = "0x11F2B68", VA = "0x11F2B68")]
		[IteratorStateMachine(typeof(<_PollForMovementChanges>d__29))]
		private IEnumerator<float> _PollForMovementChanges()
		{
			return null;
		}

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0x11F2BDC", Offset = "0x11F2BDC", VA = "0x11F2BDC")]
		[IteratorStateMachine(typeof(<_PollForTurnChanges>d__30))]
		private IEnumerator<float> _PollForTurnChanges()
		{
			return null;
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0x11F328C", Offset = "0x11F328C", VA = "0x11F328C")]
		private void LeftGloveGrabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0x11F32B8", Offset = "0x11F32B8", VA = "0x11F32B8")]
		private void RightGloveGrabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0x11F2F58", Offset = "0x11F2F58", VA = "0x11F2F58")]
		private void GlovesGrabbed()
		{
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0x11F32E4", Offset = "0x11F32E4", VA = "0x11F32E4")]
		private void DisableTeleportUI()
		{
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0x11F3010", Offset = "0x11F3010", VA = "0x11F3010")]
		private void TorchLighted()
		{
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0x11F3090", Offset = "0x11F3090", VA = "0x11F3090")]
		private void PickaxeGrabbed()
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0x11F30B4", Offset = "0x11F30B4", VA = "0x11F30B4")]
		private void PickaxeSlotted()
		{
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0x11F30FC", Offset = "0x11F30FC", VA = "0x11F30FC")]
		private void LootDropped()
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0x11F3128", Offset = "0x11F3128", VA = "0x11F3128")]
		private void LootLooted()
		{
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0x11F3154", Offset = "0x11F3154", VA = "0x11F3154")]
		private void ToolLost()
		{
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0x11F3180", Offset = "0x11F3180", VA = "0x11F3180")]
		private void GhostToolGrabbed()
		{
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0x11F31AC", Offset = "0x11F31AC", VA = "0x11F31AC")]
		private void ElevatorFound()
		{
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0x11F31F4", Offset = "0x11F31F4", VA = "0x11F31F4")]
		private void ElevatorUsed()
		{
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0x11F2C74", Offset = "0x11F2C74", VA = "0x11F2C74")]
		private void CheckController()
		{
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0x11F33D4", Offset = "0x11F33D4", VA = "0x11F33D4")]
		public TutorialUisController()
		{
		}
	}
	[Token(Token = "0x2000445")]
	public class TutorialVoiceLines : MonoBehaviour
	{
		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static TutorialVoiceLines Instance;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip firstAudioClip;

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0x11F3A60", Offset = "0x11F3A60", VA = "0x11F3A60")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EB3")]
		[Address(RVA = "0x11F3AB8", Offset = "0x11F3AB8", VA = "0x11F3AB8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0x11F3B78", Offset = "0x11F3B78", VA = "0x11F3B78")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0x11F3C3C", Offset = "0x11F3C3C", VA = "0x11F3C3C")]
		private void TutorialStageChanged(TutorialManager.TutorialStage arg0)
		{
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0x11F3DE8", Offset = "0x11F3DE8", VA = "0x11F3DE8")]
		public TutorialVoiceLines()
		{
		}
	}
	[Token(Token = "0x2000446")]
	public class ValleySceneFirstTutorialTriggerer : MonoBehaviour
	{
		[Token(Token = "0x2000447")]
		[CompilerGenerated]
		private sealed class <DelayedVoiceLineCoroutine>d__38 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x17000368")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001ECD")]
				[Address(RVA = "0x11F5C30", Offset = "0x11F5C30", VA = "0x11F5C30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000369")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001ECF")]
				[Address(RVA = "0x11F5C78", Offset = "0x11F5C78", VA = "0x11F5C78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001ECA")]
			[Address(RVA = "0x11F4AC8", Offset = "0x11F4AC8", VA = "0x11F4AC8")]
			[DebuggerHidden]
			public <DelayedVoiceLineCoroutine>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x6001ECB")]
			[Address(RVA = "0x11F5B18", Offset = "0x11F5B18", VA = "0x11F5B18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001ECC")]
			[Address(RVA = "0x11F5B1C", Offset = "0x11F5B1C", VA = "0x11F5B1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001ECE")]
			[Address(RVA = "0x11F5C38", Offset = "0x11F5C38", VA = "0x11F5C38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000448")]
		[CompilerGenerated]
		private sealed class <_ForceShowDialsToPlayer>d__43 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001BFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ValleySceneFirstTutorialTriggerer <>4__this;

			[Token(Token = "0x4001C00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Transform <leftHandIKTargetTransform>5__2;

			[Token(Token = "0x4001C01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <time>5__3;

			[Token(Token = "0x1700036A")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001ED3")]
				[Address(RVA = "0x11F67FC", Offset = "0x11F67FC", VA = "0x11F67FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700036B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001ED5")]
				[Address(RVA = "0x11F6844", Offset = "0x11F6844", VA = "0x11F6844", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001ED0")]
			[Address(RVA = "0x11F4EC0", Offset = "0x11F4EC0", VA = "0x11F4EC0")]
			[DebuggerHidden]
			public <_ForceShowDialsToPlayer>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x6001ED1")]
			[Address(RVA = "0x11F5CD4", Offset = "0x11F5CD4", VA = "0x11F5CD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001ED2")]
			[Address(RVA = "0x11F5CD8", Offset = "0x11F5CD8", VA = "0x11F5CD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001ED4")]
			[Address(RVA = "0x11F6804", Offset = "0x11F6804", VA = "0x11F6804", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000449")]
		[CompilerGenerated]
		private sealed class <_MenuOpened>d__46 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001C04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ValleySceneFirstTutorialTriggerer <>4__this;

			[Token(Token = "0x4001C05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <updatePrice>5__2;

			[Token(Token = "0x1700036C")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001ED9")]
				[Address(RVA = "0x11F6C34", Offset = "0x11F6C34", VA = "0x11F6C34", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700036D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001EDB")]
				[Address(RVA = "0x11F6C7C", Offset = "0x11F6C7C", VA = "0x11F6C7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001ED6")]
			[Address(RVA = "0x11F525C", Offset = "0x11F525C", VA = "0x11F525C")]
			[DebuggerHidden]
			public <_MenuOpened>d__46(int <>1__state)
			{
			}

			[Token(Token = "0x6001ED7")]
			[Address(RVA = "0x11F68A0", Offset = "0x11F68A0", VA = "0x11F68A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001ED8")]
			[Address(RVA = "0x11F68A4", Offset = "0x11F68A4", VA = "0x11F68A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001EDA")]
			[Address(RVA = "0x11F6C3C", Offset = "0x11F6C3C", VA = "0x11F6C3C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject lootGrinderObject;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RotatorObject lootGrinderRotator;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InGameUIToggle inGameUIToggle;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ListSelectionHelper ingameUIListTabSelectionHelper;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private ListSelectionHelper ingameUIListItemsTabSelectionHelper;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("When menu is opened first time, automatically select this item on the menu (Items tab")]
		[SerializeField]
		private Item autoSelectedGeneralTabItem;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("When menu is opened first time, automatically select this item on the items menu (Environment tab)")]
		[SerializeField]
		private Item autoSelectedItemsTabItem;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Button[] otherTabButtons;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private UpgradeableToolCardListManager toolCardListManager;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private UpgradeableOtherCardListManager environmentCardListManager;

		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private UpgradeableOtherCardListManager otherCardListManager;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Sprite toolShedUpgradeSprite;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private TutorialUI crankGrabTutorialUI;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private TutorialUI openMenuTutorialUI;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private TutorialPointOfIntrestArrow crankGrabArrow;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private TutorialPointOfIntrestArrow buyToolShedArrow;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private TutorialPointOfIntrestArrow getRevolverArrow;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Tutorial2Triggerer elevatorAndMiningRunTutorialTriggerer;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private GameObject multiplayerPanelBlocker;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private GameObject mapStandBlocker;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioSource myAudioSource;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private UnityEngine.Color originalButtonDisabledColor;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool controllerCheck;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private HVRControllerType controllerType;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float originalMoveSpeed;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float originalRunSpeed;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 originalLeftHandIKTargetPos;

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private Quaternion originalLeftHandIKTargetRot;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private GameObject tempL_IKTarget;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[HideInInspector]
		public bool willStartTutorial;

		[Token(Token = "0x4001BF9")]
		private const string reminderVoiceLineCoroutineName = "ReminderVoiceLineCoroutine";

		[Token(Token = "0x4001BFA")]
		private const string checkWhenAudioClipHasEndedCoroutineName = "CheckWhenAudioClipHasEndedCoroutine";

		[Token(Token = "0x6001EB7")]
		[Address(RVA = "0x11F3DF0", Offset = "0x11F3DF0", VA = "0x11F3DF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EB8")]
		[Address(RVA = "0x11F3E58", Offset = "0x11F3E58", VA = "0x11F3E58")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EB9")]
		[Address(RVA = "0x11F4004", Offset = "0x11F4004", VA = "0x11F4004")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0x11F410C", Offset = "0x11F410C", VA = "0x11F410C")]
		public void LocalPlayerInitialized()
		{
		}

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0x11F421C", Offset = "0x11F421C", VA = "0x11F421C")]
		private void CameFromTutorialScene(TutorialDDOLHolder tutorialDDOLHolder)
		{
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0x11F446C", Offset = "0x11F446C", VA = "0x11F446C")]
		private void StartValleyTutorial()
		{
		}

		[Token(Token = "0x6001EBD")]
		[Address(RVA = "0x11F4A68", Offset = "0x11F4A68", VA = "0x11F4A68")]
		[IteratorStateMachine(typeof(<DelayedVoiceLineCoroutine>d__38))]
		private IEnumerator<float> DelayedVoiceLineCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001EBE")]
		[Address(RVA = "0x11F4AF0", Offset = "0x11F4AF0", VA = "0x11F4AF0")]
		private void MoneyAmountChanged(int arg0)
		{
		}

		[Token(Token = "0x6001EBF")]
		[Address(RVA = "0x11F4CF4", Offset = "0x11F4CF4", VA = "0x11F4CF4")]
		private void LootGrinderRotatorMoved(float arg0)
		{
		}

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0x11F4DA4", Offset = "0x11F4DA4", VA = "0x11F4DA4")]
		public void CrankTurned()
		{
		}

		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0x11F4BDC", Offset = "0x11F4BDC", VA = "0x11F4BDC")]
		private void ForceShowDialsToPlayer()
		{
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0x11F4E4C", Offset = "0x11F4E4C", VA = "0x11F4E4C")]
		[IteratorStateMachine(typeof(<_ForceShowDialsToPlayer>d__43))]
		private IEnumerator<float> _ForceShowDialsToPlayer()
		{
			return null;
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0x11F4EE8", Offset = "0x11F4EE8", VA = "0x11F4EE8")]
		private void MenuOpened()
		{
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0x11F5144", Offset = "0x11F5144", VA = "0x11F5144")]
		private void MenuClosed(bool menuActive)
		{
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0x11F50D0", Offset = "0x11F50D0", VA = "0x11F50D0")]
		[IteratorStateMachine(typeof(<_MenuOpened>d__46))]
		private IEnumerator<float> _MenuOpened()
		{
			return null;
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0x11F5284", Offset = "0x11F5284", VA = "0x11F5284")]
		private void ToolUpgraded(Tool.ToolType arg0)
		{
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0x11F5524", Offset = "0x11F5524", VA = "0x11F5524")]
		private void TutorialEnd()
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0x11F48A8", Offset = "0x11F48A8", VA = "0x11F48A8")]
		[ContextMenu("CheckController")]
		private void CheckController()
		{
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0x11F5A80", Offset = "0x11F5A80", VA = "0x11F5A80")]
		public ValleySceneFirstTutorialTriggerer()
		{
		}
	}
	[Token(Token = "0x200044A")]
	public class VoiceLineTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TutorialManager.TutorialStage triggerStage;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool alreadyTriggered;

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0x11F6CD8", Offset = "0x11F6CD8", VA = "0x11F6CD8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0x11F6D94", Offset = "0x11F6D94", VA = "0x11F6D94")]
		public VoiceLineTrigger()
		{
		}
	}
	[Token(Token = "0x200044B")]
	public class Tutorial2ElevatorTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Tutorial2Room tutorial2ElevatorRoom;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool alreadyTriggered;

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0x11F6D9C", Offset = "0x11F6D9C", VA = "0x11F6D9C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001EDF")]
		[Address(RVA = "0x11F6E10", Offset = "0x11F6E10", VA = "0x11F6E10")]
		public Tutorial2ElevatorTrigger()
		{
		}
	}
	[Token(Token = "0x200044C")]
	public class Tutorial2MidPointTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Tutorial2Room tutorial2ElevatorRoom;

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool alreadyTriggered;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool playShrimpsFound;

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0x11F6E18", Offset = "0x11F6E18", VA = "0x11F6E18")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0x11F6F0C", Offset = "0x11F6F0C", VA = "0x11F6F0C")]
		public Tutorial2MidPointTrigger()
		{
		}
	}
	[Token(Token = "0x200044D")]
	public class Tutorial2Room : MonoBehaviour
	{
		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialPointOfIntrestArrow torchArrow;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TutorialPointOfIntrestArrow secondElevatorArrow;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Torch roomTorch;

		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TutorialUI shootTutorialUI;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Tutorial2Triggerer elevatorAndMiningRunTutorialTriggerer;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Revolver playersRevolver;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool controllerCheck;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private HVRControllerType controllerType;

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0x11F6F14", Offset = "0x11F6F14", VA = "0x11F6F14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0x11F70C4", Offset = "0x11F70C4", VA = "0x11F70C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0x11F71A0", Offset = "0x11F71A0", VA = "0x11F71A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0x11F72B8", Offset = "0x11F72B8", VA = "0x11F72B8")]
		private void TorchLit()
		{
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0x11F72C0", Offset = "0x11F72C0", VA = "0x11F72C0")]
		public void ToggleTorchArrow(bool active)
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0x11F72E4", Offset = "0x11F72E4", VA = "0x11F72E4")]
		public void ToggleSecondElevatorArrow(bool active)
		{
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0x11F6EF4", Offset = "0x11F6EF4", VA = "0x11F6EF4")]
		public void PlayerAtMidpointOfFirstLevel()
		{
		}

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0x11F6DF8", Offset = "0x11F6DF8", VA = "0x11F6DF8")]
		public void PlayerAtElevatorOfFirstLevel()
		{
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0x11F7670", Offset = "0x11F7670", VA = "0x11F7670")]
		private void RevolverShot()
		{
		}

		[Token(Token = "0x6001EEB")]
		[Address(RVA = "0x11F724C", Offset = "0x11F724C", VA = "0x11F724C")]
		private void CheckController()
		{
		}

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0x11F7768", Offset = "0x11F7768", VA = "0x11F7768")]
		public Tutorial2Room()
		{
		}
	}
	[Token(Token = "0x200044E")]
	public class Tutorial2Triggerer : MonoBehaviour
	{
		[Token(Token = "0x200044F")]
		[CompilerGenerated]
		private sealed class <_GetPlayerRevolver>d__30 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001C28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Tutorial2Triggerer <>4__this;

			[Token(Token = "0x1700036E")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001F07")]
				[Address(RVA = "0x11FA26C", Offset = "0x11FA26C", VA = "0x11FA26C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700036F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F09")]
				[Address(RVA = "0x11FA2B4", Offset = "0x11FA2B4", VA = "0x11FA2B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F04")]
			[Address(RVA = "0x11F9F1C", Offset = "0x11F9F1C", VA = "0x11F9F1C")]
			[DebuggerHidden]
			public <_GetPlayerRevolver>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001F05")]
			[Address(RVA = "0x11F9F44", Offset = "0x11F9F44", VA = "0x11F9F44", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F06")]
			[Address(RVA = "0x11F9F48", Offset = "0x11F9F48", VA = "0x11F9F48", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F08")]
			[Address(RVA = "0x11FA274", Offset = "0x11FA274", VA = "0x11FA274", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Tutorial2Triggerer Instance;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RunGenerationDataSO customRunGenerationData;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject forcePlayerToSlotRevolverCollider;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TutorialUI forcePlayerToSlotTutorialUI;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject multiplayerBlocker;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject mapStandBlocker;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TutorialPointOfIntrestArrow getRevolverArrow;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TutorialPointOfIntrestArrow useElevatorArrow;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform forcePlayerToToolshedPosition;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TutorialUI reloadTutorialUI;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ElevatorMoving firstElevatorMoving;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ElevatorMoving secondElevatorMoving;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Tutorial2Room tutorial2ElevatorRoom;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool willStartTutorial;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool revolverSlotted;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		private bool pickaxeSlotted;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Revolver playersRevolver;

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0x11F7770", Offset = "0x11F7770", VA = "0x11F7770")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0x11F77C8", Offset = "0x11F77C8", VA = "0x11F77C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001EEF")]
		[Address(RVA = "0x11F781C", Offset = "0x11F781C", VA = "0x11F781C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0x11F78CC", Offset = "0x11F78CC", VA = "0x11F78CC")]
		private void StartTutorialCaller()
		{
		}

		[Token(Token = "0x6001EF1")]
		[Address(RVA = "0x11F56C8", Offset = "0x11F56C8", VA = "0x11F56C8")]
		public void StartTutorial(bool startedFromTutorial12_1 = false)
		{
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0x11F7D20", Offset = "0x11F7D20", VA = "0x11F7D20")]
		private void ForcePlayerToToolshed()
		{
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0x11F78D4", Offset = "0x11F78D4", VA = "0x11F78D4")]
		private void GuidePlayerToToolshed()
		{
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0x11F7DBC", Offset = "0x11F7DBC", VA = "0x11F7DBC")]
		private void ToolGrabbedFromToolShed(Tool.ToolType arg0)
		{
		}

		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0x11F80A4", Offset = "0x11F80A4", VA = "0x11F80A4")]
		private void ToolReleased(Tool.ToolType arg0)
		{
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0x11F8178", Offset = "0x11F8178", VA = "0x11F8178")]
		private void ToolSlotted(Tool.ToolType arg0, int arg1)
		{
		}

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0x11F825C", Offset = "0x11F825C", VA = "0x11F825C")]
		private void UpdatedToolSlot(Tool.ToolType arg0, int arg1)
		{
		}

		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0x11F79B0", Offset = "0x11F79B0", VA = "0x11F79B0")]
		private void CheckSlottedTools()
		{
		}

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0x11F82D4", Offset = "0x11F82D4", VA = "0x11F82D4")]
		private void ElevatorCrankGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0x11F8260", Offset = "0x11F8260", VA = "0x11F8260")]
		[IteratorStateMachine(typeof(<_GetPlayerRevolver>d__30))]
		private IEnumerator<float> _GetPlayerRevolver()
		{
			return null;
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0x11F82F8", Offset = "0x11F82F8", VA = "0x11F82F8")]
		private void LevelGeneratingFinished()
		{
		}

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0x11F85E0", Offset = "0x11F85E0", VA = "0x11F85E0")]
		private void ElevatorIsDown()
		{
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0x11F7308", Offset = "0x11F7308", VA = "0x11F7308")]
		public void PlayerAtMidpointOfFirstLevel()
		{
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0x11F7538", Offset = "0x11F7538", VA = "0x11F7538")]
		public void PlayerAtElevatorOfFirstLevel()
		{
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0x11F8728", Offset = "0x11F8728", VA = "0x11F8728")]
		private void CheckForLevel3ElevatorRotator()
		{
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0x11F8844", Offset = "0x11F8844", VA = "0x11F8844")]
		public void Tutorial3End()
		{
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0x11F8C0C", Offset = "0x11F8C0C", VA = "0x11F8C0C")]
		private void RevolverEmpty()
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0x11F8E1C", Offset = "0x11F8E1C", VA = "0x11F8E1C")]
		private void RevolverLoaded()
		{
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0x11F8F14", Offset = "0x11F8F14", VA = "0x11F8F14")]
		public Tutorial2Triggerer()
		{
		}
	}
	[Token(Token = "0x2000450")]
	public class Tutorial3MidPointTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Tutorial3Room tutorial3Room;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool alreadyTriggered;

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0x11FA310", Offset = "0x11FA310", VA = "0x11FA310")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0x11FA38C", Offset = "0x11FA38C", VA = "0x11FA38C")]
		public Tutorial3MidPointTrigger()
		{
		}
	}
	[Token(Token = "0x2000451")]
	public class Tutorial3Room : MonoBehaviour
	{
		[Token(Token = "0x2000452")]
		[CompilerGenerated]
		private sealed class <_CheckDeadPlasmaShrimpCount>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001C2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Tutorial3Room <>4__this;

			[Token(Token = "0x4001C30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private List<PlasmaShrimp> <deadPlasmashrimps>5__2;

			[Token(Token = "0x17000370")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001F17")]
				[Address(RVA = "0x11FA9F0", Offset = "0x11FA9F0", VA = "0x11FA9F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000371")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F19")]
				[Address(RVA = "0x11FAA38", Offset = "0x11FAA38", VA = "0x11FAA38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F14")]
			[Address(RVA = "0x11FA654", Offset = "0x11FA654", VA = "0x11FA654")]
			[DebuggerHidden]
			public <_CheckDeadPlasmaShrimpCount>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001F15")]
			[Address(RVA = "0x11FA7F8", Offset = "0x11FA7F8", VA = "0x11FA7F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F16")]
			[Address(RVA = "0x11FA7FC", Offset = "0x11FA7FC", VA = "0x11FA7FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F18")]
			[Address(RVA = "0x11FA9F8", Offset = "0x11FA9F8", VA = "0x11FA9F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialPointOfIntrestArrow middlePointPointOfIntrestArrow;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PlasmaShrimp[] plasmaShrimps;

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0x11FA394", Offset = "0x11FA394", VA = "0x11FA394")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0x11FA4A0", Offset = "0x11FA4A0", VA = "0x11FA4A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0x11FA364", Offset = "0x11FA364", VA = "0x11FA364")]
		public void PlayerAtMidpointOfFirstLevel()
		{
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0x11FA4A4", Offset = "0x11FA4A4", VA = "0x11FA4A4")]
		private void LevelLootGeneratingFinished()
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0x11FA5E0", Offset = "0x11FA5E0", VA = "0x11FA5E0")]
		[IteratorStateMachine(typeof(<_CheckDeadPlasmaShrimpCount>d__6))]
		private IEnumerator<float> _CheckDeadPlasmaShrimpCount()
		{
			return null;
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0x11FA67C", Offset = "0x11FA67C", VA = "0x11FA67C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0x11FA788", Offset = "0x11FA788", VA = "0x11FA788")]
		private void TriggerVoiceLine()
		{
		}

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0x11FA7F0", Offset = "0x11FA7F0", VA = "0x11FA7F0")]
		public Tutorial3Room()
		{
		}
	}
	[Token(Token = "0x2000453")]
	public class ValleyTutorialManager : MonoBehaviour
	{
		[Token(Token = "0x2000454")]
		private class TutorialState
		{
			[Token(Token = "0x4001C37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TutorialName tutorialName;

			[Token(Token = "0x4001C38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool finished;

			[Token(Token = "0x6001F22")]
			[Address(RVA = "0x11FADD8", Offset = "0x11FADD8", VA = "0x11FADD8")]
			public TutorialState()
			{
			}
		}

		[Token(Token = "0x2000455")]
		public enum TutorialName
		{
			[Token(Token = "0x4001C3A")]
			tutorialIntroScene,
			[Token(Token = "0x4001C3B")]
			tutorialIntro,
			[Token(Token = "0x4001C3C")]
			tutorialElevatorAndRevolver
		}

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ValleyTutorialManager Instance;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ValleySceneFirstTutorialTriggerer introTutorialTriggerer;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Tutorial2Triggerer elevatorAndRevolverTutorialTriggerer;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject[] disableUntilTutorialIsFinishedObjects;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool localPlayerInitialized;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<TutorialState> tutorialStates;

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0x11FAA94", Offset = "0x11FAA94", VA = "0x11FAA94")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0x11FAAEC", Offset = "0x11FAAEC", VA = "0x11FAAEC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0x11FAB9C", Offset = "0x11FAB9C", VA = "0x11FAB9C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0x11FACD4", Offset = "0x11FACD4", VA = "0x11FACD4")]
		private void LocalPlayerInitialized()
		{
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0x11FACE0", Offset = "0x11FACE0", VA = "0x11FACE0")]
		public void AddTutorialState(TutorialName tutorialName, bool finished)
		{
		}

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0x11FADE0", Offset = "0x11FADE0", VA = "0x11FADE0")]
		public void CheckIfTutorialShouldBeStarted()
		{
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0x11FB088", Offset = "0x11FB088", VA = "0x11FB088")]
		public void ToggleUntilTutorialFinishedObjects(bool active)
		{
		}

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0x11FB0F0", Offset = "0x11FB0F0", VA = "0x11FB0F0")]
		public ValleyTutorialManager()
		{
		}
	}
}
namespace ToolShed
{
	[Token(Token = "0x2000457")]
	public class ToolShedArea : MonoBehaviour
	{
		[Token(Token = "0x6001F26")]
		[Address(RVA = "0x11FB208", Offset = "0x11FB208", VA = "0x11FB208")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001F27")]
		[Address(RVA = "0x11FB33C", Offset = "0x11FB33C", VA = "0x11FB33C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0x11FB4CC", Offset = "0x11FB4CC", VA = "0x11FB4CC")]
		public ToolShedArea()
		{
		}
	}
	[Token(Token = "0x2000458")]
	public class ToolShedManager : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip toolReturnedAudioClip;

		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ToolShedManager Instance;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ToolShedToolPosition> toolShedPositions;

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0x11FB4D4", Offset = "0x11FB4D4", VA = "0x11FB4D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0x11FB588", Offset = "0x11FB588", VA = "0x11FB588")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F2B")]
		[Address(RVA = "0x11FBA14", Offset = "0x11FBA14", VA = "0x11FBA14")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0x11FBBC8", Offset = "0x11FBBC8", VA = "0x11FBBC8", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0x11FB97C", Offset = "0x11FB97C", VA = "0x11FB97C")]
		private void UpdateTool(Tool.ToolType toolType)
		{
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0x11FBDE8", Offset = "0x11FBDE8", VA = "0x11FBDE8")]
		public void UpdateToolTier(Tool.ToolType toolType, int newTier)
		{
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0x11FC014", Offset = "0x11FC014", VA = "0x11FC014")]
		public void MakeCurrentTierVisible(Tool.ToolType toolType)
		{
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0x11FC244", Offset = "0x11FC244", VA = "0x11FC244")]
		public void DisableShowTool(Tool.ToolType toolType)
		{
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0x11FC308", Offset = "0x11FC308", VA = "0x11FC308")]
		public Transform GetToolPositionTransform(Tool.ToolType toolType)
		{
			return null;
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0x11FC500", Offset = "0x11FC500", VA = "0x11FC500")]
		public ToolShedManager()
		{
		}
	}
	[Token(Token = "0x2000459")]
	public class ToolShedToolPosition : MonoBehaviour
	{
		[Token(Token = "0x200045A")]
		[CompilerGenerated]
		private sealed class <_ToolGrabbed>d__17 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001C4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HVRGrabberBase arg0;

			[Token(Token = "0x4001C4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ToolShedToolPosition <>4__this;

			[Token(Token = "0x4001C50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <instantiatedTool>5__2;

			[Token(Token = "0x17000372")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001F43")]
				[Address(RVA = "0x11FD280", Offset = "0x11FD280", VA = "0x11FD280", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000373")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F45")]
				[Address(RVA = "0x11FD2C8", Offset = "0x11FD2C8", VA = "0x11FD2C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F40")]
			[Address(RVA = "0x11FCDFC", Offset = "0x11FCDFC", VA = "0x11FCDFC")]
			[DebuggerHidden]
			public <_ToolGrabbed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001F41")]
			[Address(RVA = "0x11FCF84", Offset = "0x11FCF84", VA = "0x11FCF84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F42")]
			[Address(RVA = "0x11FCF88", Offset = "0x11FCF88", VA = "0x11FCF88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F44")]
			[Address(RVA = "0x11FD288", Offset = "0x11FD288", VA = "0x11FD288", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Tool.ToolType myToolType;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Tool> allTools;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<HVRGrabbable> allToolsGrabbables;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int highestTier;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int currentTier;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject currentActiveTool;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 originalToolPos;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion originalToolRot;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool forcePosition;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		private bool showTool;

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0x11FC588", Offset = "0x11FC588", VA = "0x11FC588")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0x11FCAF4", Offset = "0x11FCAF4", VA = "0x11FCAF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0x11FC6F8", Offset = "0x11FC6F8", VA = "0x11FC6F8")]
		private void GetToolRefs()
		{
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0x11FBEA8", Offset = "0x11FBEA8", VA = "0x11FBEA8")]
		public void UpdateToolShedTierRPC(int tier)
		{
		}

		[Token(Token = "0x6001F37")]
		[Address(RVA = "0x11FBCE0", Offset = "0x11FBCE0", VA = "0x11FBCE0")]
		public void MakeCurrentTierVisible()
		{
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0x11FCC50", Offset = "0x11FCC50", VA = "0x11FCC50")]
		private void SnapToolToPosition(HVRGrabbable toolGrabbable)
		{
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0x11FCCF0", Offset = "0x11FCCF0", VA = "0x11FCCF0")]
		private void ToolGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0x11FCD6C", Offset = "0x11FCD6C", VA = "0x11FCD6C")]
		[IteratorStateMachine(typeof(<_ToolGrabbed>d__17))]
		private IEnumerator<float> _ToolGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
			return null;
		}

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0x11FCBB4", Offset = "0x11FCBB4", VA = "0x11FCBB4")]
		private void DisableAll()
		{
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0x11FCE24", Offset = "0x11FCE24", VA = "0x11FCE24")]
		public Tool.ToolType GetMyToolType()
		{
			return default(Tool.ToolType);
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0x11FC46C", Offset = "0x11FC46C", VA = "0x11FC46C")]
		public Transform GetToolPositionTransform()
		{
			return null;
		}

		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0x11FC300", Offset = "0x11FC300", VA = "0x11FC300")]
		public void DisableShowTool()
		{
		}

		[Token(Token = "0x6001F3F")]
		[Address(RVA = "0x11FCE2C", Offset = "0x11FCE2C", VA = "0x11FCE2C")]
		public ToolShedToolPosition()
		{
		}
	}
}
namespace UnityEngine.XR.PSVR2
{
	[Token(Token = "0x200045B")]
	public class PS5HMDRumble : MonoBehaviour
	{
		[Token(Token = "0x6001F46")]
		[Address(RVA = "0x11FD324", Offset = "0x11FD324", VA = "0x11FD324")]
		public void InitHMDRumble()
		{
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0x11FD328", Offset = "0x11FD328", VA = "0x11FD328")]
		public void SendImpulse(int frequency)
		{
		}

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0x11FD32C", Offset = "0x11FD32C", VA = "0x11FD32C")]
		public void SendImpulse(float amplitude, float duration)
		{
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0x11FD330", Offset = "0x11FD330", VA = "0x11FD330")]
		public void SendIntensiveExplosionImpulse()
		{
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0x11FD334", Offset = "0x11FD334", VA = "0x11FD334")]
		public void SendExplosionImpulse()
		{
		}

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0x11FD338", Offset = "0x11FD338", VA = "0x11FD338")]
		public void StopHaptics(bool destroying = false)
		{
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0x11FD33C", Offset = "0x11FD33C", VA = "0x11FD33C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0x11FD340", Offset = "0x11FD340", VA = "0x11FD340")]
		public PS5HMDRumble()
		{
		}
	}
}
namespace UnityEngine.XR.PSVR2.Samples
{
	[Token(Token = "0x200045C")]
	public class HMDRumble : MonoBehaviour
	{
		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int Frequency;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool IsHapticsEnabled;

		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InputActionReference m_ActionReference;

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0x11FD348", Offset = "0x11FD348", VA = "0x11FD348")]
		public HMDRumble()
		{
		}
	}
	[Token(Token = "0x200045D")]
	public class TankTriggerEffects : MonoBehaviour
	{
		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputActionReference InputActionReference;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HMDRumble hmdRumble;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.InputSystem.InputDevice m_InputDevice;

		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(2f, 7f)]
		public byte StartPosition;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Range(3f, 8f)]
		public byte EndPosition;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[Range(0f, 8f)]
		public byte Strength;

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0x11FD358", Offset = "0x11FD358", VA = "0x11FD358")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F50")]
		[Address(RVA = "0x11FD35C", Offset = "0x11FD35C", VA = "0x11FD35C")]
		public void SetTriggerEffect()
		{
		}

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0x11FD360", Offset = "0x11FD360", VA = "0x11FD360")]
		public TankTriggerEffects()
		{
		}
	}
	[Token(Token = "0x200045E")]
	public class TankTriggerEffectsWithoutISX : MonoBehaviour
	{
		[Token(Token = "0x6001F52")]
		[Address(RVA = "0x11FD378", Offset = "0x11FD378", VA = "0x11FD378")]
		public TankTriggerEffectsWithoutISX()
		{
		}
	}
	[Token(Token = "0x200045F")]
	public class TrackingModeOrigin : MonoBehaviour
	{
		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UnityEngine.UI.Image m_RecenteredImage;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Color m_RecenteredOffColor;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color m_RecenteredColor;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_RecenteredColorResetTime;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_LastRecenteredTime;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TrackingOriginModeFlags m_CurrentTrackingOriginMode;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Text m_CurrentTrackingOriginModeDisplay;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TrackingOriginModeFlags m_DesiredTrackingOriginMode;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private TrackingOriginModeFlags m_SupportedTrackingOriginModes;

		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<XRInputSubsystem> s_InputSubsystems;

		[Token(Token = "0x17000374")]
		public TrackingOriginModeFlags currentTrackingOriginMode
		{
			[Token(Token = "0x6001F53")]
			[Address(RVA = "0x11FD380", Offset = "0x11FD380", VA = "0x11FD380")]
			get
			{
				return default(TrackingOriginModeFlags);
			}
		}

		[Token(Token = "0x17000375")]
		public TrackingOriginModeFlags desiredTrackingOriginMode
		{
			[Token(Token = "0x6001F54")]
			[Address(RVA = "0x11FD388", Offset = "0x11FD388", VA = "0x11FD388")]
			get
			{
				return default(TrackingOriginModeFlags);
			}
			[Token(Token = "0x6001F55")]
			[Address(RVA = "0x11FD390", Offset = "0x11FD390", VA = "0x11FD390")]
			set
			{
			}
		}

		[Token(Token = "0x17000376")]
		public TrackingOriginModeFlags supportedTrackingOriginModes
		{
			[Token(Token = "0x6001F56")]
			[Address(RVA = "0x11FD398", Offset = "0x11FD398", VA = "0x11FD398")]
			get
			{
				return default(TrackingOriginModeFlags);
			}
		}

		[Token(Token = "0x6001F57")]
		[Address(RVA = "0x11FD3A0", Offset = "0x11FD3A0", VA = "0x11FD3A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0x11FD3A4", Offset = "0x11FD3A4", VA = "0x11FD3A4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0x11FD3A8", Offset = "0x11FD3A8", VA = "0x11FD3A8")]
		public void OnDesiredSelectionChanged(int newValue)
		{
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0x11FD3D8", Offset = "0x11FD3D8", VA = "0x11FD3D8")]
		private void TrackingOriginUpdated(XRInputSubsystem obj)
		{
		}

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0x11FD3F4", Offset = "0x11FD3F4", VA = "0x11FD3F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0x11FD3F8", Offset = "0x11FD3F8", VA = "0x11FD3F8")]
		public TrackingModeOrigin()
		{
		}
	}
}
namespace Samples
{
	[Token(Token = "0x2000460")]
	public class ActionAssetEnabler : MonoBehaviour
	{
		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InputActionAsset m_ActionAsset;

		[Token(Token = "0x17000377")]
		public InputActionAsset actionAsset
		{
			[Token(Token = "0x6001F5E")]
			[Address(RVA = "0x11FD4B4", Offset = "0x11FD4B4", VA = "0x11FD4B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F5F")]
			[Address(RVA = "0x11FD4BC", Offset = "0x11FD4BC", VA = "0x11FD4BC")]
			set
			{
			}
		}

		[Token(Token = "0x6001F60")]
		[Address(RVA = "0x11FD4C4", Offset = "0x11FD4C4", VA = "0x11FD4C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F61")]
		[Address(RVA = "0x11FD548", Offset = "0x11FD548", VA = "0x11FD548")]
		public ActionAssetEnabler()
		{
		}
	}
}
namespace Flat
{
	[Token(Token = "0x2000461")]
	public class FlatToolManager : MonoBehaviour
	{
		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static FlatToolManager Instance;

		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InventorySlot[] slots;

		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip equipSound;

		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip returnSound;

		[Token(Token = "0x6001F62")]
		[Address(RVA = "0x11FD550", Offset = "0x11FD550", VA = "0x11FD550")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0x11FD604", Offset = "0x11FD604", VA = "0x11FD604")]
		public void AddTool(Tool newTool, int slot)
		{
		}

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0x11FD75C", Offset = "0x11FD75C", VA = "0x11FD75C")]
		public void RemoveTool(Tool toolToRemove)
		{
		}

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0x11FD944", Offset = "0x11FD944", VA = "0x11FD944")]
		public Tool GetToolBySlot(int slot)
		{
			return null;
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0x11FDA28", Offset = "0x11FDA28", VA = "0x11FDA28")]
		public int GetSlotByToolType(Tool.ToolType toolType)
		{
			return default(int);
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0x11FDB1C", Offset = "0x11FDB1C", VA = "0x11FDB1C")]
		public FlatToolManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000462")]
	public class InventorySlot
	{
		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int slot;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Tool tool;

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0x11FDB80", Offset = "0x11FDB80", VA = "0x11FDB80")]
		public InventorySlot()
		{
		}
	}
	[Token(Token = "0x2000463")]
	public class FlatLootVacuum : MonoBehaviour
	{
		[Token(Token = "0x2000464")]
		[CompilerGenerated]
		private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FlatLootVacuum <>4__this;

			[Token(Token = "0x17000378")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F75")]
				[Address(RVA = "0x11FE738", Offset = "0x11FE738", VA = "0x11FE738", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000379")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F77")]
				[Address(RVA = "0x11FE780", Offset = "0x11FE780", VA = "0x11FE780", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F72")]
			[Address(RVA = "0x11FDC8C", Offset = "0x11FDC8C", VA = "0x11FDC8C")]
			[DebuggerHidden]
			public <Start>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001F73")]
			[Address(RVA = "0x11FE400", Offset = "0x11FE400", VA = "0x11FE400", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F74")]
			[Address(RVA = "0x11FE404", Offset = "0x11FE404", VA = "0x11FE404", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F76")]
			[Address(RVA = "0x11FE740", Offset = "0x11FE740", VA = "0x11FE740", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool vacuuming;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float radius;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource idleAudioSource;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CapsuleCollider interactionCollider;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Interactor interactor;

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0x11FDB88", Offset = "0x11FDB88", VA = "0x11FDB88")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0x11FDC18", Offset = "0x11FDC18", VA = "0x11FDC18")]
		[IteratorStateMachine(typeof(<Start>d__6))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0x11FDCB4", Offset = "0x11FDCB4", VA = "0x11FDCB4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0x11FDCF4", Offset = "0x11FDCF4", VA = "0x11FDCF4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0x11FDE48", Offset = "0x11FDE48", VA = "0x11FDE48")]
		private void InteractReleased()
		{
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0x11FDE88", Offset = "0x11FDE88", VA = "0x11FDE88")]
		private void InteractLong()
		{
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0x11FE2B4", Offset = "0x11FE2B4", VA = "0x11FE2B4")]
		private void OtherUpgraded(OtherUpgradePathScriptableObject.UpgradeType arg0)
		{
		}

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0x11FE3DC", Offset = "0x11FE3DC", VA = "0x11FE3DC")]
		private void SetInteractionColliderRadius(float newRadius)
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0x11FE3F8", Offset = "0x11FE3F8", VA = "0x11FE3F8")]
		public FlatLootVacuum()
		{
		}
	}
	[Token(Token = "0x2000465")]
	public class FlatToolController : MonoBehaviour
	{
		[Token(Token = "0x2000466")]
		[CompilerGenerated]
		private sealed class <Start>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FlatToolController <>4__this;

			[Token(Token = "0x1700037A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F99")]
				[Address(RVA = "0x120128C", Offset = "0x120128C", VA = "0x120128C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700037B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F9B")]
				[Address(RVA = "0x12012D4", Offset = "0x12012D4", VA = "0x12012D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F96")]
			[Address(RVA = "0x11FE890", Offset = "0x11FE890", VA = "0x11FE890")]
			[DebuggerHidden]
			public <Start>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x6001F97")]
			[Address(RVA = "0x1200FAC", Offset = "0x1200FAC", VA = "0x1200FAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F98")]
			[Address(RVA = "0x1200FB0", Offset = "0x1200FB0", VA = "0x1200FB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F9A")]
			[Address(RVA = "0x1201294", Offset = "0x1201294", VA = "0x1201294", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000467")]
		[CompilerGenerated]
		private sealed class <_DigWithShovel>d__52 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FlatToolController <>4__this;

			[Token(Token = "0x1700037C")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001F9F")]
				[Address(RVA = "0x12015F8", Offset = "0x12015F8", VA = "0x12015F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700037D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FA1")]
				[Address(RVA = "0x1201640", Offset = "0x1201640", VA = "0x1201640", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F9C")]
			[Address(RVA = "0x1200AC4", Offset = "0x1200AC4", VA = "0x1200AC4")]
			[DebuggerHidden]
			public <_DigWithShovel>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6001F9D")]
			[Address(RVA = "0x12012DC", Offset = "0x12012DC", VA = "0x12012DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F9E")]
			[Address(RVA = "0x12012E0", Offset = "0x12012E0", VA = "0x12012E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FA0")]
			[Address(RVA = "0x1201600", Offset = "0x1201600", VA = "0x1201600", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000468")]
		[CompilerGenerated]
		private sealed class <_ThrowTool>d__54 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001CA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001CA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FlatToolController <>4__this;

			[Token(Token = "0x4001CA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool drop;

			[Token(Token = "0x4001CA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			private bool <applyAngularVelocity>5__2;

			[Token(Token = "0x4001CA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Rigidbody <toolRb>5__3;

			[Token(Token = "0x4001CA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <isShovel>5__4;

			[Token(Token = "0x1700037E")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001FA5")]
				[Address(RVA = "0x1201B1C", Offset = "0x1201B1C", VA = "0x1201B1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700037F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FA7")]
				[Address(RVA = "0x1201B64", Offset = "0x1201B64", VA = "0x1201B64", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FA2")]
			[Address(RVA = "0x1200B74", Offset = "0x1200B74", VA = "0x1200B74")]
			[DebuggerHidden]
			public <_ThrowTool>d__54(int <>1__state)
			{
			}

			[Token(Token = "0x6001FA3")]
			[Address(RVA = "0x120169C", Offset = "0x120169C", VA = "0x120169C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FA4")]
			[Address(RVA = "0x12016A0", Offset = "0x12016A0", VA = "0x12016A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FA6")]
			[Address(RVA = "0x1201B24", Offset = "0x1201B24", VA = "0x1201B24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000469")]
		[CompilerGenerated]
		private sealed class <_LightDynamite>d__56 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001CA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001CA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001CAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FlatToolController <>4__this;

			[Token(Token = "0x4001CAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Dynamite <dynamite>5__2;

			[Token(Token = "0x4001CAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <time>5__3;

			[Token(Token = "0x17000380")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001FAB")]
				[Address(RVA = "0x1201DC0", Offset = "0x1201DC0", VA = "0x1201DC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000381")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FAD")]
				[Address(RVA = "0x1201E08", Offset = "0x1201E08", VA = "0x1201E08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FA8")]
			[Address(RVA = "0x1200C10", Offset = "0x1200C10", VA = "0x1200C10")]
			[DebuggerHidden]
			public <_LightDynamite>d__56(int <>1__state)
			{
			}

			[Token(Token = "0x6001FA9")]
			[Address(RVA = "0x1201BC0", Offset = "0x1201BC0", VA = "0x1201BC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FAA")]
			[Address(RVA = "0x1201BC4", Offset = "0x1201BC4", VA = "0x1201BC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FAC")]
			[Address(RVA = "0x1201DC8", Offset = "0x1201DC8", VA = "0x1201DC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200046A")]
		[CompilerGenerated]
		private sealed class <_DeformAndDamage>d__57 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001CAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001CAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001CAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FlatToolController <>4__this;

			[Token(Token = "0x17000382")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001FB1")]
				[Address(RVA = "0x12025AC", Offset = "0x12025AC", VA = "0x12025AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000383")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FB3")]
				[Address(RVA = "0x12025F4", Offset = "0x12025F4", VA = "0x12025F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FAE")]
			[Address(RVA = "0x1200C38", Offset = "0x1200C38", VA = "0x1200C38")]
			[DebuggerHidden]
			public <_DeformAndDamage>d__57(int <>1__state)
			{
			}

			[Token(Token = "0x6001FAF")]
			[Address(RVA = "0x1201E64", Offset = "0x1201E64", VA = "0x1201E64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FB0")]
			[Address(RVA = "0x1201E68", Offset = "0x1201E68", VA = "0x1201E68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FB2")]
			[Address(RVA = "0x12025B4", Offset = "0x12025B4", VA = "0x12025B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform rightHandItemHandler;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform cameraTransform;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Camera camera;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Tool currentTool;

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int currentSlot;

		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AimIK aimIK;

		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private LayerMask raycastMask;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float deformHelperRange;

		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float deformHelperDelay;

		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AimIKTarget targetObjectScript;

		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform aimIKOGAimTransform;

		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float aimIKOGWeightClamp;

		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Animator animator;

		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FlatToolManager toolManager;

		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private FlatItemHolder itemHolder;

		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private FlatUIController UIController;

		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Rigidbody rightHandRB;

		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private float ToolThrowForce;

		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		private float shovelThrowDelay;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private float toolThrowCooldown;

		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private float dynamiteIgnieDelay;

		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private float toolSwitchTime;

		[Token(Token = "0x4001C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private FlatController flatController;

		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool inToolShed;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool swinging;

		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		private bool lerpAimIKWeight;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB")]
		private bool ADS;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int ADSAmount;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float originalFOV;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float ADSSpeed;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float lerpSpeed;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private bool dynamiteIgnited;

		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Tool.ToolType currentTooltype;

		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Shovel shovel;

		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Sledgehammer sledgehammer;

		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Pickaxe pickaxe;

		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float dynamiteFuseTime;

		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private ArmIK armIKLeft;

		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform originalLeftHandIkTarget;

		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool lerpLeftArmIK;

		[Token(Token = "0x6001F78")]
		[Address(RVA = "0x11FE788", Offset = "0x11FE788", VA = "0x11FE788")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F79")]
		[Address(RVA = "0x11FE81C", Offset = "0x11FE81C", VA = "0x11FE81C")]
		[IteratorStateMachine(typeof(<Start>d__41))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0x11FE8B8", Offset = "0x11FE8B8", VA = "0x11FE8B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0x11FF2F0", Offset = "0x11FF2F0", VA = "0x11FF2F0")]
		private void SelectSlot(int slot)
		{
		}

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0x11FF960", Offset = "0x11FF960", VA = "0x11FF960")]
		public void SetIsOnToolShedArea(bool isOnToolShedArea)
		{
		}

		[Token(Token = "0x6001F7D")]
		[Address(RVA = "0x11FF96C", Offset = "0x11FF96C", VA = "0x11FF96C")]
		public void SpawnTool(Tool targetTool, Transform spawn, int slot)
		{
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0x11FF300", Offset = "0x11FF300", VA = "0x11FF300")]
		private void SelectTool(int slot)
		{
		}

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0x11FFFB4", Offset = "0x11FFFB4", VA = "0x11FFFB4")]
		private void ToggleToolActiveState(int slot, bool isVisible)
		{
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0x11FFD80", Offset = "0x11FFD80", VA = "0x11FFD80")]
		public void MoveToolToInventory(Tool tool)
		{
		}

		[Token(Token = "0x6001F81")]
		[Address(RVA = "0x1200578", Offset = "0x1200578", VA = "0x1200578")]
		private Transform GetTargetHolder(Tool.ToolType toolType)
		{
			return null;
		}

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0x11FF00C", Offset = "0x11FF00C", VA = "0x11FF00C")]
		private void DeformAndDamage()
		{
		}

		[Token(Token = "0x6001F83")]
		[Address(RVA = "0x11FF164", Offset = "0x11FF164", VA = "0x11FF164")]
		private void DigWithShovel()
		{
		}

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0x1200A50", Offset = "0x1200A50", VA = "0x1200A50")]
		[IteratorStateMachine(typeof(<_DigWithShovel>d__52))]
		private IEnumerator<float> _DigWithShovel()
		{
			return null;
		}

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0x11FF0B4", Offset = "0x11FF0B4", VA = "0x11FF0B4")]
		private void ThrowTool(bool drop = false)
		{
		}

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0x1200AEC", Offset = "0x1200AEC", VA = "0x1200AEC")]
		[IteratorStateMachine(typeof(<_ThrowTool>d__54))]
		private IEnumerator<float> _ThrowTool(bool drop = false)
		{
			return null;
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0x11FF20C", Offset = "0x11FF20C", VA = "0x11FF20C")]
		private void LightDynamite()
		{
		}

		[Token(Token = "0x6001F88")]
		[Address(RVA = "0x1200B9C", Offset = "0x1200B9C", VA = "0x1200B9C")]
		[IteratorStateMachine(typeof(<_LightDynamite>d__56))]
		private IEnumerator<float> _LightDynamite()
		{
			return null;
		}

		[Token(Token = "0x6001F89")]
		[Address(RVA = "0x12009DC", Offset = "0x12009DC", VA = "0x12009DC")]
		[IteratorStateMachine(typeof(<_DeformAndDamage>d__57))]
		private IEnumerator<float> _DeformAndDamage()
		{
			return null;
		}

		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0x1200C60", Offset = "0x1200C60", VA = "0x1200C60")]
		private void EditTerrain(DiggingArea world, Vector3 point, bool addTerrain, float deformSpeed, float range)
		{
		}

		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0x1200EB8", Offset = "0x1200EB8", VA = "0x1200EB8")]
		private void PlayHitEffects(Tool tool)
		{
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0x12002E4", Offset = "0x12002E4", VA = "0x12002E4")]
		private void SetupRevolver(Tool playerRevolver)
		{
		}

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0x120049C", Offset = "0x120049C", VA = "0x120049C")]
		private void SetupDetector(Tool playerDetector)
		{
		}

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0x12003B0", Offset = "0x12003B0", VA = "0x12003B0")]
		private void SetupShovel(Tool playerShovel)
		{
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0x1200088", Offset = "0x1200088", VA = "0x1200088")]
		private void ResetAimIK()
		{
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0x1200164", Offset = "0x1200164", VA = "0x1200164")]
		private void SetAnimatorCurrentToolType(Tool.ToolType toolType)
		{
		}

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0x1200260", Offset = "0x1200260", VA = "0x1200260")]
		private void SetupToolBoneWeights(Tool tool)
		{
		}

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0x1200624", Offset = "0x1200624", VA = "0x1200624")]
		private void SetLayerRecursive(GameObject _go, int _layer)
		{
		}

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0x12001C0", Offset = "0x12001C0", VA = "0x12001C0")]
		private void SetUpLeftArmIK(Tool tool)
		{
		}

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0x1200110", Offset = "0x1200110", VA = "0x1200110")]
		private void ResetLeftArmIK()
		{
		}

		[Token(Token = "0x6001F95")]
		[Address(RVA = "0x1200FA4", Offset = "0x1200FA4", VA = "0x1200FA4")]
		public FlatToolController()
		{
		}
	}
	[Token(Token = "0x200046B")]
	public class FlatUIHelper : MonoBehaviour
	{
		[Token(Token = "0x200046C")]
		[CompilerGenerated]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001CB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001CB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001CB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FlatUIHelper <>4__this;

			[Token(Token = "0x17000384")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FBC")]
				[Address(RVA = "0x1202A98", Offset = "0x1202A98", VA = "0x1202A98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000385")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FBE")]
				[Address(RVA = "0x1202AE0", Offset = "0x1202AE0", VA = "0x1202AE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FB9")]
			[Address(RVA = "0x1202768", Offset = "0x1202768", VA = "0x1202768")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001FBA")]
			[Address(RVA = "0x12028D8", Offset = "0x12028D8", VA = "0x12028D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FBB")]
			[Address(RVA = "0x12028DC", Offset = "0x12028DC", VA = "0x12028DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FBD")]
			[Address(RVA = "0x1202AA0", Offset = "0x1202AA0", VA = "0x1202AA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform flatCameraTransform;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotateSpeed;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera flatCamera;

		[Token(Token = "0x6001FB4")]
		[Address(RVA = "0x1202650", Offset = "0x1202650", VA = "0x1202650")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FB5")]
		[Address(RVA = "0x12026F4", Offset = "0x12026F4", VA = "0x12026F4")]
		[IteratorStateMachine(typeof(<Start>d__4))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001FB6")]
		[Address(RVA = "0x1202790", Offset = "0x1202790", VA = "0x1202790")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001FB7")]
		[Address(RVA = "0x1202860", Offset = "0x1202860", VA = "0x1202860")]
		private void OnInGameUIEnabled()
		{
		}

		[Token(Token = "0x6001FB8")]
		[Address(RVA = "0x12028D0", Offset = "0x12028D0", VA = "0x12028D0")]
		public FlatUIHelper()
		{
		}
	}
	[Token(Token = "0x200046D")]
	public class InputModuleSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CustomHVRInputModule hvrInputModule;

		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StandaloneInputModule standaloneInputModule;

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0x1202AE8", Offset = "0x1202AE8", VA = "0x1202AE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0x1202BA8", Offset = "0x1202BA8", VA = "0x1202BA8")]
		public InputModuleSwitcher()
		{
		}
	}
	[Token(Token = "0x200046E")]
	public class Interactor : MonoBehaviour
	{
		[Token(Token = "0x200046F")]
		[CompilerGenerated]
		private sealed class <Start>d__44 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001CE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001CE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001CE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Interactor <>4__this;

			[Token(Token = "0x17000387")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FDB")]
				[Address(RVA = "0x1205630", Offset = "0x1205630", VA = "0x1205630", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000388")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FDD")]
				[Address(RVA = "0x1205678", Offset = "0x1205678", VA = "0x1205678", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FD8")]
			[Address(RVA = "0x1203020", Offset = "0x1203020", VA = "0x1203020")]
			[DebuggerHidden]
			public <Start>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x6001FD9")]
			[Address(RVA = "0x12051D0", Offset = "0x12051D0", VA = "0x12051D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FDA")]
			[Address(RVA = "0x12051D4", Offset = "0x12051D4", VA = "0x12051D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FDC")]
			[Address(RVA = "0x1205638", Offset = "0x1205638", VA = "0x1205638", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000470")]
		[CompilerGenerated]
		private sealed class <_Inspect>d__52 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001CE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001CE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001CE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform objectToMove;

			[Token(Token = "0x4001CE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Interactor <>4__this;

			[Token(Token = "0x4001CE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Rigidbody targetRB;

			[Token(Token = "0x17000389")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001FE1")]
				[Address(RVA = "0x120593C", Offset = "0x120593C", VA = "0x120593C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700038A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FE3")]
				[Address(RVA = "0x1205984", Offset = "0x1205984", VA = "0x1205984", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FDE")]
			[Address(RVA = "0x1204EA8", Offset = "0x1204EA8", VA = "0x1204EA8")]
			[DebuggerHidden]
			public <_Inspect>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6001FDF")]
			[Address(RVA = "0x1205680", Offset = "0x1205680", VA = "0x1205680", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FE0")]
			[Address(RVA = "0x1205684", Offset = "0x1205684", VA = "0x1205684", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FE2")]
			[Address(RVA = "0x1205944", Offset = "0x1205944", VA = "0x1205944", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000471")]
		[CompilerGenerated]
		private sealed class <_LootTheLoot>d__54 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001CE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001CE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001CEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Interactor <>4__this;

			[Token(Token = "0x4001CEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform objectToMove;

			[Token(Token = "0x4001CEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Loot loot;

			[Token(Token = "0x4001CED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Prop prop;

			[Token(Token = "0x4001CEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public WantedBoardPoster poster;

			[Token(Token = "0x4001CEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <journeyLength>5__2;

			[Token(Token = "0x4001CF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <startTime>5__3;

			[Token(Token = "0x4001CF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <timer>5__4;

			[Token(Token = "0x1700038B")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001FE7")]
				[Address(RVA = "0x1205FDC", Offset = "0x1205FDC", VA = "0x1205FDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700038C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FE9")]
				[Address(RVA = "0x1206024", Offset = "0x1206024", VA = "0x1206024", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FE4")]
			[Address(RVA = "0x1204ED0", Offset = "0x1204ED0", VA = "0x1204ED0")]
			[DebuggerHidden]
			public <_LootTheLoot>d__54(int <>1__state)
			{
			}

			[Token(Token = "0x6001FE5")]
			[Address(RVA = "0x12059E0", Offset = "0x12059E0", VA = "0x12059E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FE6")]
			[Address(RVA = "0x12059E4", Offset = "0x12059E4", VA = "0x12059E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FE8")]
			[Address(RVA = "0x1205FE4", Offset = "0x1205FE4", VA = "0x1205FE4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private LayerMask searchLayers;

		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private BackPack ownBackpack;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<GameObject> foundLootAndProps;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float interactionRaycastRange;

		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int crankSpeedMultiplier;

		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Looting Settings")]
		[SerializeField]
		private Transform lootDestination;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AnimationCurve curve;

		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float speed;

		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float maxTime;

		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Grab, Throw and Inspect Settings")]
		[SerializeField]
		private Transform inspectPosition;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform inspectBehindPos;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float throwForce;

		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float t;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float maxWeight;

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private Vector3 maxSize;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool crankin;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private RotatorObject currentCrank;

		[Token(Token = "0x4001CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private FlatToolController toolController;

		[Token(Token = "0x4001CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private InteractionTextController textController;

		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private LocalizedString letGoText;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private CapsuleCollider interactionCollider;

		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float scrollScale;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float inspectMinDistance;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float inspectMaxDistance;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool inspectingClue;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float inspectZoomAmount;

		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float clampedZoom;

		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AudioSource grabAS;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GameObject currentLootOrProp;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Rigidbody inspectRB;

		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GameObject currentlyInspecting;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool inspecting;

		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Prop grabbedProp;

		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float originalMoveSpeed;

		[Token(Token = "0x4001CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float originalRunSpeed;

		[Token(Token = "0x4001CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float AxisY;

		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool inToolShed;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		private bool vacuuming;

		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private RaycastHit hit;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private IInteractable _foundInteractable;

		[Token(Token = "0x17000386")]
		private IInteractable foundInteractable
		{
			[Token(Token = "0x6001FC1")]
			[Address(RVA = "0x1202BB0", Offset = "0x1202BB0", VA = "0x1202BB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FC2")]
			[Address(RVA = "0x1202BB8", Offset = "0x1202BB8", VA = "0x1202BB8")]
			set
			{
			}
		}

		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0x1202F54", Offset = "0x1202F54", VA = "0x1202F54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0x1202FAC", Offset = "0x1202FAC", VA = "0x1202FAC")]
		[IteratorStateMachine(typeof(<Start>d__44))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0x1203048", Offset = "0x1203048", VA = "0x1203048")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FC6")]
		[Address(RVA = "0x12030A0", Offset = "0x12030A0", VA = "0x12030A0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0x1203460", Offset = "0x1203460", VA = "0x1203460")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0x1203974", Offset = "0x1203974", VA = "0x1203974")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0x1203A4C", Offset = "0x1203A4C", VA = "0x1203A4C")]
		private void Interact()
		{
		}

		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0x120410C", Offset = "0x120410C", VA = "0x120410C")]
		private void InteractLong()
		{
		}

		[Token(Token = "0x6001FCB")]
		[Address(RVA = "0x12043D0", Offset = "0x12043D0", VA = "0x12043D0")]
		private void Grab()
		{
		}

		[Token(Token = "0x6001FCC")]
		[Address(RVA = "0x1204E04", Offset = "0x1204E04", VA = "0x1204E04")]
		[IteratorStateMachine(typeof(<_Inspect>d__52))]
		private IEnumerator<float> _Inspect(Transform objectToMove, Rigidbody targetRB)
		{
			return null;
		}

		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0x1204D44", Offset = "0x1204D44", VA = "0x1204D44")]
		private void ResetGrabbedObjects()
		{
		}

		[Token(Token = "0x6001FCE")]
		[Address(RVA = "0x11FE1E0", Offset = "0x11FE1E0", VA = "0x11FE1E0")]
		[IteratorStateMachine(typeof(<_LootTheLoot>d__54))]
		public IEnumerator<float> _LootTheLoot(Transform objectToMove, [Optional] Loot loot, [Optional] Prop prop, [Optional] WantedBoardPoster poster)
		{
			return null;
		}

		[Token(Token = "0x6001FCF")]
		[Address(RVA = "0x12037B4", Offset = "0x12037B4", VA = "0x12037B4")]
		private void ClearList()
		{
		}

		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0x1204EF8", Offset = "0x1204EF8", VA = "0x1204EF8")]
		private void PropBroke()
		{
		}

		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0x120501C", Offset = "0x120501C", VA = "0x120501C")]
		public void SetIsOnToolShedArea(bool isOnToolShedArea)
		{
		}

		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0x1205040", Offset = "0x1205040", VA = "0x1205040")]
		private void EquipTool(int slot)
		{
		}

		[Token(Token = "0x6001FD3")]
		[Address(RVA = "0x1203F54", Offset = "0x1203F54", VA = "0x1203F54")]
		private void ToggleCranking(bool shouldCrank)
		{
		}

		[Token(Token = "0x6001FD4")]
		[Address(RVA = "0x1205188", Offset = "0x1205188", VA = "0x1205188")]
		private void InteractReleased()
		{
		}

		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0x1205198", Offset = "0x1205198", VA = "0x1205198")]
		public List<GameObject> GetFoundLootAndProps()
		{
			return null;
		}

		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0x12051A0", Offset = "0x12051A0", VA = "0x12051A0")]
		public GameObject GetCurrentLootOrProp()
		{
			return null;
		}

		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0x12051A8", Offset = "0x12051A8", VA = "0x12051A8")]
		public Interactor()
		{
		}
	}
	[Token(Token = "0x2000472")]
	public class InteractorDummy : MonoBehaviour
	{
		[Token(Token = "0x4001CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Interactor interactor;

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0x1206080", Offset = "0x1206080", VA = "0x1206080")]
		public Interactor GetInteractor()
		{
			return null;
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0x1206088", Offset = "0x1206088", VA = "0x1206088")]
		public InteractorDummy()
		{
		}
	}
}
namespace LoadingScreen
{
	[Token(Token = "0x2000473")]
	public class LoadingScreenDataManager : MonoBehaviour
	{
		[Token(Token = "0x2000474")]
		[CompilerGenerated]
		private sealed class <Start>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LoadingScreenDataManager <>4__this;

			[Token(Token = "0x1700038E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002000")]
				[Address(RVA = "0x12078CC", Offset = "0x12078CC", VA = "0x12078CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700038F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002002")]
				[Address(RVA = "0x1207914", Offset = "0x1207914", VA = "0x1207914", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FFD")]
			[Address(RVA = "0x1206350", Offset = "0x1206350", VA = "0x1206350")]
			[DebuggerHidden]
			public <Start>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001FFE")]
			[Address(RVA = "0x12077B4", Offset = "0x12077B4", VA = "0x12077B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FFF")]
			[Address(RVA = "0x12077B8", Offset = "0x12077B8", VA = "0x12077B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002001")]
			[Address(RVA = "0x12078D4", Offset = "0x12078D4", VA = "0x12078D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000475")]
		[CompilerGenerated]
		private sealed class <LoadDatabase>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LoadingScreenDataManager <>4__this;

			[Token(Token = "0x17000390")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002006")]
				[Address(RVA = "0x1207AE0", Offset = "0x1207AE0", VA = "0x1207AE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000391")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002008")]
				[Address(RVA = "0x1207B28", Offset = "0x1207B28", VA = "0x1207B28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002003")]
			[Address(RVA = "0x12065BC", Offset = "0x12065BC", VA = "0x12065BC")]
			[DebuggerHidden]
			public <LoadDatabase>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6002004")]
			[Address(RVA = "0x120791C", Offset = "0x120791C", VA = "0x120791C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002005")]
			[Address(RVA = "0x1207920", Offset = "0x1207920", VA = "0x1207920", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002007")]
			[Address(RVA = "0x1207AE8", Offset = "0x1207AE8", VA = "0x1207AE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static LoadingScreenDataManager Instance;

		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject errorUI;

		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI errorText;

		[Token(Token = "0x4001CF6")]
		public const int SAVE_DATA_VERSION = 1;

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool initialized;

		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DataboxObject runtimeDataNormal;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DataboxObject runtimeDataPS4;

		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DataboxObject runtimeDataClone;

		[Token(Token = "0x4001CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useCloneData;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private LoadingScreenManager loadingScreenManager;

		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly string saveName;

		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly string tableId;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly string saveInfoEntryId;

		[Token(Token = "0x4001D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly string gameVersionId;

		[Token(Token = "0x4001D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly string saveVersionId;

		[Token(Token = "0x4001D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly string tutorialStateId;

		[Token(Token = "0x4001D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool dataReady;

		[Token(Token = "0x1700038D")]
		public DataboxObject runtimeData
		{
			[Token(Token = "0x6001FEC")]
			[Address(RVA = "0x1206090", Offset = "0x1206090", VA = "0x1206090")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0x12060AC", Offset = "0x12060AC", VA = "0x12060AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0x1206104", Offset = "0x1206104", VA = "0x1206104")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0x12061F0", Offset = "0x12061F0", VA = "0x12061F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0x12062DC", Offset = "0x12062DC", VA = "0x12062DC")]
		[IteratorStateMachine(typeof(<Start>d__22))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0x1206378", Offset = "0x1206378", VA = "0x1206378")]
		private void OnIsEntitledCallback(Message message)
		{
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0x1206548", Offset = "0x1206548", VA = "0x1206548")]
		[IteratorStateMachine(typeof(<LoadDatabase>d__24))]
		private IEnumerator LoadDatabase()
		{
			return null;
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0x12065E4", Offset = "0x12065E4", VA = "0x12065E4")]
		public void Save()
		{
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0x1206874", Offset = "0x1206874", VA = "0x1206874")]
		private void GetOculusCloudStoragePathFromMessage(Message msg)
		{
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0x1206D2C", Offset = "0x1206D2C", VA = "0x1206D2C")]
		private void DataReady()
		{
		}

		[Token(Token = "0x6001FF6")]
		[Address(RVA = "0x1206D7C", Offset = "0x1206D7C", VA = "0x1206D7C")]
		private void CheckVersion()
		{
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0x12066C8", Offset = "0x12066C8", VA = "0x12066C8")]
		private void UpdateVersion()
		{
		}

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0x1206F04", Offset = "0x1206F04", VA = "0x1206F04")]
		public void LoadTutorialState()
		{
		}

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0x1207300", Offset = "0x1207300", VA = "0x1207300")]
		public void UpdateTutorialState(ValleyTutorialManager.TutorialName tutorialState, bool passed)
		{
		}

		[Token(Token = "0x6001FFA")]
		[Address(RVA = "0x120754C", Offset = "0x120754C", VA = "0x120754C")]
		private void ShowError(string error)
		{
		}

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0x12075DC", Offset = "0x12075DC", VA = "0x12075DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0x1207690", Offset = "0x1207690", VA = "0x1207690")]
		public LoadingScreenDataManager()
		{
		}
	}
	[Token(Token = "0x2000476")]
	public class LoadingScreenManager : MonoBehaviour
	{
		[Token(Token = "0x2000477")]
		[CompilerGenerated]
		private sealed class <LoadScene>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool newState;

			[Token(Token = "0x4001D10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LoadingScreenManager <>4__this;

			[Token(Token = "0x4001D11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AsyncOperation <asyncOperation>5__2;

			[Token(Token = "0x17000392")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002010")]
				[Address(RVA = "0x1207F38", Offset = "0x1207F38", VA = "0x1207F38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000393")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002012")]
				[Address(RVA = "0x1207F80", Offset = "0x1207F80", VA = "0x1207F80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600200D")]
			[Address(RVA = "0x1207BB8", Offset = "0x1207BB8", VA = "0x1207BB8")]
			[DebuggerHidden]
			public <LoadScene>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600200E")]
			[Address(RVA = "0x1207BE8", Offset = "0x1207BE8", VA = "0x1207BE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600200F")]
			[Address(RVA = "0x1207BEC", Offset = "0x1207BEC", VA = "0x1207BEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002011")]
			[Address(RVA = "0x1207F40", Offset = "0x1207F40", VA = "0x1207F40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro progressText;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool overrideLoading;

		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string overrideSceneToLoad;

		[Token(Token = "0x6002009")]
		[Address(RVA = "0x1207290", Offset = "0x1207290", VA = "0x1207290")]
		public bool LoadingScreenCameFromTutorial()
		{
			return default(bool);
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0x1207528", Offset = "0x1207528", VA = "0x1207528")]
		public void SetTutorialState(bool newState)
		{
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0x1207B30", Offset = "0x1207B30", VA = "0x1207B30")]
		[IteratorStateMachine(typeof(<LoadScene>d__5))]
		private IEnumerator LoadScene(bool newState)
		{
			return null;
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0x1207BE0", Offset = "0x1207BE0", VA = "0x1207BE0")]
		public LoadingScreenManager()
		{
		}
	}
	[Token(Token = "0x2000478")]
	public class OculusEntitlementCheck : MonoBehaviour
	{
		[Token(Token = "0x6002013")]
		[Address(RVA = "0x1207F88", Offset = "0x1207F88", VA = "0x1207F88")]
		private void Start()
		{
		}

		[Token(Token = "0x6002014")]
		[Address(RVA = "0x1208158", Offset = "0x1208158", VA = "0x1208158")]
		private void EntitlementCallback(Message msg)
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0x1208210", Offset = "0x1208210", VA = "0x1208210")]
		public OculusEntitlementCheck()
		{
		}
	}
}
namespace LevelGeneration
{
	[Token(Token = "0x2000479")]
	[RequireComponent(typeof(RunGenerationManager))]
	[RequireComponent(typeof(LevelLootSpawnManager))]
	public class LevelGenerationManager : MonoBehaviour
	{
		[Token(Token = "0x200047A")]
		[CompilerGenerated]
		private sealed class <DisablePhysicsForAWhile>d__47 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x17000398")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600204A")]
				[Address(RVA = "0x120AFD4", Offset = "0x120AFD4", VA = "0x120AFD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000399")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600204C")]
				[Address(RVA = "0x120B01C", Offset = "0x120B01C", VA = "0x120B01C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002047")]
			[Address(RVA = "0x1209290", Offset = "0x1209290", VA = "0x1209290")]
			[DebuggerHidden]
			public <DisablePhysicsForAWhile>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x6002048")]
			[Address(RVA = "0x120AF10", Offset = "0x120AF10", VA = "0x120AF10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002049")]
			[Address(RVA = "0x120AF14", Offset = "0x120AF14", VA = "0x120AF14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600204B")]
			[Address(RVA = "0x120AFDC", Offset = "0x120AFDC", VA = "0x120AFDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200047B")]
		[CompilerGenerated]
		private sealed class <DisableCommonCollisionForAWhile>d__48 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x1700039A")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002050")]
				[Address(RVA = "0x120B15C", Offset = "0x120B15C", VA = "0x120B15C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700039B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002052")]
				[Address(RVA = "0x120B1A4", Offset = "0x120B1A4", VA = "0x120B1A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600204D")]
			[Address(RVA = "0x12092B8", Offset = "0x12092B8", VA = "0x12092B8")]
			[DebuggerHidden]
			public <DisableCommonCollisionForAWhile>d__48(int <>1__state)
			{
			}

			[Token(Token = "0x600204E")]
			[Address(RVA = "0x120B078", Offset = "0x120B078", VA = "0x120B078", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600204F")]
			[Address(RVA = "0x120B07C", Offset = "0x120B07C", VA = "0x120B07C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002051")]
			[Address(RVA = "0x120B164", Offset = "0x120B164", VA = "0x120B164", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200047C")]
		[CompilerGenerated]
		private sealed class <GenerateNavMeshCoroutine>d__56 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LevelGenerationManager <>4__this;

			[Token(Token = "0x1700039C")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002056")]
				[Address(RVA = "0x120B8B8", Offset = "0x120B8B8", VA = "0x120B8B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700039D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002058")]
				[Address(RVA = "0x120B900", Offset = "0x120B900", VA = "0x120B900", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002053")]
			[Address(RVA = "0x1209BA0", Offset = "0x1209BA0", VA = "0x1209BA0")]
			[DebuggerHidden]
			public <GenerateNavMeshCoroutine>d__56(int <>1__state)
			{
			}

			[Token(Token = "0x6002054")]
			[Address(RVA = "0x120B200", Offset = "0x120B200", VA = "0x120B200", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002055")]
			[Address(RVA = "0x120B204", Offset = "0x120B204", VA = "0x120B204", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002057")]
			[Address(RVA = "0x120B8C0", Offset = "0x120B8C0", VA = "0x120B8C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200047D")]
		[CompilerGenerated]
		private sealed class <_GenerateLoot>d__58 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LevelGenerationManager <>4__this;

			[Token(Token = "0x4001D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <i>5__2;

			[Token(Token = "0x1700039E")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600205C")]
				[Address(RVA = "0x120BB30", Offset = "0x120BB30", VA = "0x120BB30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700039F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600205E")]
				[Address(RVA = "0x120BB78", Offset = "0x120BB78", VA = "0x120BB78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002059")]
			[Address(RVA = "0x1209C3C", Offset = "0x1209C3C", VA = "0x1209C3C")]
			[DebuggerHidden]
			public <_GenerateLoot>d__58(int <>1__state)
			{
			}

			[Token(Token = "0x600205A")]
			[Address(RVA = "0x120B95C", Offset = "0x120B95C", VA = "0x120B95C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600205B")]
			[Address(RVA = "0x120B960", Offset = "0x120B960", VA = "0x120B960", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600205D")]
			[Address(RVA = "0x120BB38", Offset = "0x120BB38", VA = "0x120BB38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static LevelGenerationManager Instance;

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<GameObject> finishedGeneratingAllDiggingAreasCallback;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LayerMask navmeshLayers;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Room> roomsToUse;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform levelStartingTransform;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MeshCombiner meshCombiner;

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool disableMeshCombiner;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Room> generatedRooms;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Room latestGeneratedRoom;

		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Room roomConnectedToExit;

		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform originalLevelStartingTransform;

		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<RoomTransitionTransform> possibleExitTransforms;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int roomNotFittingIterations;

		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LevelLootSpawnManager levelLootSpawnManager;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public PhotonView photonView;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool _needToCreateNavMesh;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool _isGeneratingNavMesh;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _nextNavMeshGenerateTime;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool _needToGenerateLoot;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float _generateLootTime;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int _howManyDiggingAreasAreGenerating;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<Room> roomsToBeGenerated;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int currentIndex;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool branching;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private NavMeshSurface _navmesh;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool _firstNavMeshGenerate;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Dictionary<DiggingArea, int> _diggingAreaNavMeshIndex;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Room generatedRoom;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool _hasGeneratedDiggingAreaLoot;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool _isGenerationInProgress;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float generateStartedRealTime;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Room exitElevator;

		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public System.Action OnFirstNavMeshReady;

		[Token(Token = "0x17000394")]
		public List<Room> GetRooms
		{
			[Token(Token = "0x6002016")]
			[Address(RVA = "0x1208218", Offset = "0x1208218", VA = "0x1208218")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000395")]
		public bool IsGenerationInProgress
		{
			[Token(Token = "0x6002017")]
			[Address(RVA = "0x1208220", Offset = "0x1208220", VA = "0x1208220")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000396")]
		public bool IsGenerationTotallyFinished
		{
			[Token(Token = "0x6002018")]
			[Address(RVA = "0x1208228", Offset = "0x1208228", VA = "0x1208228")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000397")]
		public bool NavMeshReady
		{
			[Token(Token = "0x6002019")]
			[Address(RVA = "0x1208258", Offset = "0x1208258", VA = "0x1208258")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0x1208268", Offset = "0x1208268", VA = "0x1208268")]
		private void Awake()
		{
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0x120851C", Offset = "0x120851C", VA = "0x120851C")]
		private void Start()
		{
		}

		[Token(Token = "0x600201C")]
		[Address(RVA = "0x1208670", Offset = "0x1208670", VA = "0x1208670")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0x12088B0", Offset = "0x12088B0", VA = "0x12088B0")]
		private void Update()
		{
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0x12089D0", Offset = "0x12089D0", VA = "0x12089D0")]
		public void GenerateLevelNew(List<Room> roomsToBeGenerated, bool branching)
		{
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0x1209084", Offset = "0x1209084", VA = "0x1209084")]
		public void OnNewLevelGeneratingStarted()
		{
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0x1209230", Offset = "0x1209230", VA = "0x1209230")]
		[IteratorStateMachine(typeof(<DisablePhysicsForAWhile>d__47))]
		private IEnumerator<float> DisablePhysicsForAWhile()
		{
			return null;
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0x12091D0", Offset = "0x12091D0", VA = "0x12091D0")]
		[IteratorStateMachine(typeof(<DisableCommonCollisionForAWhile>d__48))]
		private IEnumerator<float> DisableCommonCollisionForAWhile()
		{
			return null;
		}

		[Token(Token = "0x6002022")]
		[Address(RVA = "0x1208EFC", Offset = "0x1208EFC", VA = "0x1208EFC")]
		private void GenerateRoom(Room roomToBeGenerated)
		{
		}

		[Token(Token = "0x6002023")]
		[Address(RVA = "0x12093A8", Offset = "0x12093A8", VA = "0x12093A8")]
		[PunRPC]
		public void SyncRoomPositionsRPC(Player newPlayer)
		{
		}

		[Token(Token = "0x6002024")]
		[Address(RVA = "0x1209494", Offset = "0x1209494", VA = "0x1209494")]
		private void GeneratingLevelFinished()
		{
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0x1209668", Offset = "0x1209668", VA = "0x1209668")]
		private void CheckAndSetMigoPowerCouplingDoors()
		{
		}

		[Token(Token = "0x6002026")]
		[Address(RVA = "0x12098AC", Offset = "0x12098AC", VA = "0x12098AC")]
		[PunRPC]
		public void CombineLevelRPC()
		{
		}

		[Token(Token = "0x6002027")]
		[Address(RVA = "0x1209B24", Offset = "0x1209B24", VA = "0x1209B24")]
		public void SetExitElevator(Room exitElevator)
		{
		}

		[Token(Token = "0x6002028")]
		[Address(RVA = "0x1208490", Offset = "0x1208490", VA = "0x1208490")]
		private void GenerateNavMesh()
		{
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0x1209B2C", Offset = "0x1209B2C", VA = "0x1209B2C")]
		[IteratorStateMachine(typeof(<GenerateNavMeshCoroutine>d__56))]
		private IEnumerator<float> GenerateNavMeshCoroutine()
		{
			return null;
		}

		[Token(Token = "0x600202A")]
		[Address(RVA = "0x1209A24", Offset = "0x1209A24", VA = "0x1209A24")]
		private void GenerateLoot(MeshCombiner meshCombiner)
		{
		}

		[Token(Token = "0x600202B")]
		[Address(RVA = "0x1209BC8", Offset = "0x1209BC8", VA = "0x1209BC8")]
		[IteratorStateMachine(typeof(<_GenerateLoot>d__58))]
		private IEnumerator<float> _GenerateLoot()
		{
			return null;
		}

		[Token(Token = "0x600202C")]
		[Address(RVA = "0x1209C64", Offset = "0x1209C64", VA = "0x1209C64")]
		private void GenerateSpecificRoom(Room room)
		{
		}

		[Token(Token = "0x600202D")]
		[Address(RVA = "0x1209E5C", Offset = "0x1209E5C", VA = "0x1209E5C")]
		public void GenerateNextRoom()
		{
		}

		[Token(Token = "0x600202E")]
		[Address(RVA = "0x1208CC4", Offset = "0x1208CC4", VA = "0x1208CC4")]
		public void ResetAll()
		{
		}

		[Token(Token = "0x600202F")]
		[Address(RVA = "0x120A164", Offset = "0x120A164", VA = "0x120A164")]
		[PunRPC]
		public void ResetLevelGenRPC()
		{
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0x1209FF8", Offset = "0x1209FF8", VA = "0x1209FF8")]
		private void DeactivateRooms()
		{
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0x120A35C", Offset = "0x120A35C", VA = "0x120A35C")]
		public void RoomTransitionTransformUsed(RoomTransitionTransform transitionPieceUsed, bool lastRoomsExitTransform = false)
		{
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0x120A490", Offset = "0x120A490", VA = "0x120A490")]
		public List<RoomTransitionTransform> GetAllTransitionTransforms()
		{
			return null;
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0x120A4E0", Offset = "0x120A4E0", VA = "0x120A4E0")]
		public RoomTransitionTransform GetExitTransitionTransform()
		{
			return null;
		}

		[Token(Token = "0x6002034")]
		[Address(RVA = "0x120A594", Offset = "0x120A594", VA = "0x120A594")]
		public void RoomNotFitting(Room room)
		{
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0x120A8AC", Offset = "0x120A8AC", VA = "0x120A8AC")]
		public void SetupLevelStartingTransform(Transform levelStartingTransform)
		{
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0x120A9BC", Offset = "0x120A9BC", VA = "0x120A9BC")]
		public void ResetLevelStartingTransform()
		{
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0x120A9C8", Offset = "0x120A9C8", VA = "0x120A9C8")]
		public Room GetLatestRoom()
		{
			return null;
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0x120A9D0", Offset = "0x120A9D0", VA = "0x120A9D0")]
		public Room GetRoomConnectedToExit()
		{
			return null;
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0x120A9D8", Offset = "0x120A9D8", VA = "0x120A9D8")]
		public Room GetExitElevator()
		{
			return null;
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0x120A9E0", Offset = "0x120A9E0", VA = "0x120A9E0")]
		public void SetLatestRoom(Room generatedRoom)
		{
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0x120AB68", Offset = "0x120AB68", VA = "0x120AB68")]
		public Transform GetLevelStartingTransform()
		{
			return null;
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0x120AB70", Offset = "0x120AB70", VA = "0x120AB70")]
		public Transform GetOriginalStartingTransform()
		{
			return null;
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0x120AB78", Offset = "0x120AB78", VA = "0x120AB78")]
		public int GetRoomAmount()
		{
			return default(int);
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0x120ABC0", Offset = "0x120ABC0", VA = "0x120ABC0")]
		public bool LevelGenerated()
		{
			return default(bool);
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0x120AC10", Offset = "0x120AC10", VA = "0x120AC10")]
		public void RequestNavMeshRebuild()
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0x120AC3C", Offset = "0x120AC3C", VA = "0x120AC3C")]
		public void NewDiggingArea()
		{
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0x120AC54", Offset = "0x120AC54", VA = "0x120AC54")]
		public void SetGenerateLootTrue()
		{
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0x120AC80", Offset = "0x120AC80", VA = "0x120AC80")]
		public void DiggingAreaFinished()
		{
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0x120ACB0", Offset = "0x120ACB0", VA = "0x120ACB0")]
		public void AddRoomToGeneratedRooms(Room room)
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0x120AD60", Offset = "0x120AD60", VA = "0x120AD60")]
		public void SetRoomConnectedToExit(Room room)
		{
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0x120AD68", Offset = "0x120AD68", VA = "0x120AD68")]
		public void FinishedLootGeneration()
		{
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0x120AD70", Offset = "0x120AD70", VA = "0x120AD70")]
		public LevelGenerationManager()
		{
		}
	}
	[Token(Token = "0x200047E")]
	public class RoomDatas : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x200047F")]
		public class RoomData
		{
			[Token(Token = "0x4001D3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string roomCode;

			[Token(Token = "0x4001D40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RoomSize size;

			[Token(Token = "0x4001D41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public RoomHeight height;

			[Token(Token = "0x4001D42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RoomDeco deco;

			[Token(Token = "0x4001D43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RoomGameplay[] gameplay;

			[Token(Token = "0x4001D44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int[] depths;

			[Token(Token = "0x4001D45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[HideInInspector]
			public string isStarter;

			[Token(Token = "0x4001D46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool isStarterRoom;

			[Token(Token = "0x4001D47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[HideInInspector]
			public string buriedNodeAmount;

			[Token(Token = "0x4001D48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public int minBuriedNodeAmount;

			[Token(Token = "0x4001D49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public int maxBuriedNodeAmount;

			[Token(Token = "0x4001D4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[HideInInspector]
			public string wallNodeAmount;

			[Token(Token = "0x4001D4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public int minWallNodeAmount;

			[Token(Token = "0x4001D4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int maxWallNodeAmount;

			[Token(Token = "0x4001D4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public string geodeNodeAmount;

			[Token(Token = "0x4001D4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public int minGeodeNodeAmount;

			[Token(Token = "0x4001D4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public int maxGeodeNodeAmount;

			[Token(Token = "0x4001D50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public string monsterNodeAmount;

			[Token(Token = "0x4001D51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public int minMonsterNodeAmount;

			[Token(Token = "0x4001D52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			public int maxMonsterNodeAmount;

			[Token(Token = "0x4001D53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[HideInInspector]
			public string waterNodeAmount;

			[Token(Token = "0x4001D54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public int minWaterNodeAmount;

			[Token(Token = "0x4001D55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			public int maxWaterNodeAmount;

			[Token(Token = "0x4001D56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			public string relicNodeAmount;

			[Token(Token = "0x4001D57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public int minRelicNodeAmount;

			[Token(Token = "0x4001D58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			public int maxRelicNodeAmount;

			[Token(Token = "0x4001D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[HideInInspector]
			public string diggingSpotNodeAmount;

			[Token(Token = "0x4001D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public int minDiggingSpotNodeAmount;

			[Token(Token = "0x4001D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			public int maxDiggingSpotNodeAmount;

			[Token(Token = "0x4001D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[HideInInspector]
			public string safeNodeAmount;

			[Token(Token = "0x4001D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public int minSafeNodeAmount;

			[Token(Token = "0x4001D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			public int maxSafeNodeAmount;

			[Token(Token = "0x4001D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public string geysirNodeAmount;

			[Token(Token = "0x4001D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public int minGeysirNodeAmount;

			[Token(Token = "0x4001D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			public int maxGeysirNodeAmount;

			[Token(Token = "0x4001D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public string poisonNodeAmount;

			[Token(Token = "0x4001D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			public int minPoisonNodeAmount;

			[Token(Token = "0x4001D64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			public int maxPoisonNodeAmount;

			[Token(Token = "0x6002061")]
			[Address(RVA = "0x120C8B8", Offset = "0x120C8B8", VA = "0x120C8B8", Slot = "0")]
			public override bool Equals(object other)
			{
				return default(bool);
			}

			[Token(Token = "0x6002062")]
			[Address(RVA = "0x120C964", Offset = "0x120C964", VA = "0x120C964")]
			private string GetRoomDataString()
			{
				return null;
			}

			[Token(Token = "0x6002063")]
			[Address(RVA = "0x120CF38", Offset = "0x120CF38", VA = "0x120CF38")]
			public bool ContainsDepth(int floor)
			{
				return default(bool);
			}

			[Token(Token = "0x6002064")]
			[Address(RVA = "0x120CF94", Offset = "0x120CF94", VA = "0x120CF94")]
			public bool ContainsDepths(int[] floors)
			{
				return default(bool);
			}

			[Token(Token = "0x6002065")]
			[Address(RVA = "0x120D010", Offset = "0x120D010", VA = "0x120D010")]
			public RoomData()
			{
			}
		}

		[Token(Token = "0x2000480")]
		public enum RoomSize
		{
			[Token(Token = "0x4001D66")]
			S,
			[Token(Token = "0x4001D67")]
			M,
			[Token(Token = "0x4001D68")]
			L
		}

		[Token(Token = "0x2000481")]
		public enum RoomHeight
		{
			[Token(Token = "0x4001D6A")]
			low,
			[Token(Token = "0x4001D6B")]
			medium,
			[Token(Token = "0x4001D6C")]
			high
		}

		[Token(Token = "0x2000482")]
		public enum RoomDeco
		{
			[Token(Token = "0x4001D6E")]
			natural,
			[Token(Token = "0x4001D6F")]
			industrial,
			[Token(Token = "0x4001D70")]
			weird
		}

		[Token(Token = "0x2000483")]
		public enum RoomGameplay
		{
			[Token(Token = "0x4001D72")]
			wallnodes,
			[Token(Token = "0x4001D73")]
			enemies,
			[Token(Token = "0x4001D74")]
			mine,
			[Token(Token = "0x4001D75")]
			water,
			[Token(Token = "0x4001D76")]
			digs,
			[Token(Token = "0x4001D77")]
			geodes,
			[Token(Token = "0x4001D78")]
			tunnel
		}

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RoomData[] m_roomDatas;

		[Token(Token = "0x600205F")]
		[Address(RVA = "0x120BBD4", Offset = "0x120BBD4", VA = "0x120BBD4")]
		public void UpdateDatas()
		{
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0x120C8B0", Offset = "0x120C8B0", VA = "0x120C8B0")]
		public RoomDatas()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000484")]
	public class RunGenerationData
	{
		[Token(Token = "0x2000485")]
		public enum SpecialCondition
		{
			[Token(Token = "0x4001D8A")]
			none,
			[Token(Token = "0x4001D8B")]
			tutorial,
			[Token(Token = "0x4001D8C")]
			quest,
			[Token(Token = "0x4001D8D")]
			goal
		}

		[Token(Token = "0x2000486")]
		public enum SpecialDecoration
		{
			[Token(Token = "0x4001D8F")]
			none,
			[Token(Token = "0x4001D90")]
			natural,
			[Token(Token = "0x4001D91")]
			industrial
		}

		[Token(Token = "0x2000487")]
		public enum SpecialSpace
		{
			[Token(Token = "0x4001D93")]
			none,
			[Token(Token = "0x4001D94")]
			open,
			[Token(Token = "0x4001D95")]
			closed
		}

		[Token(Token = "0x2000488")]
		public enum GameplayTags
		{
			[Token(Token = "0x4001D97")]
			wallnodes,
			[Token(Token = "0x4001D98")]
			enemies,
			[Token(Token = "0x4001D99")]
			mine,
			[Token(Token = "0x4001D9A")]
			water,
			[Token(Token = "0x4001D9B")]
			digs,
			[Token(Token = "0x4001D9C")]
			geodes,
			[Token(Token = "0x4001D9D")]
			tunnel
		}

		[Token(Token = "0x2000489")]
		public enum LootModifier
		{
			[Token(Token = "0x4001D9F")]
			none,
			[Token(Token = "0x4001DA0")]
			maximum,
			[Token(Token = "0x4001DA1")]
			minimum
		}

		[Token(Token = "0x200048A")]
		public enum SecretModifier
		{
			[Token(Token = "0x4001DA3")]
			none,
			[Token(Token = "0x4001DA4")]
			extraSecrets,
			[Token(Token = "0x4001DA5")]
			noSecrets
		}

		[Token(Token = "0x200048B")]
		public enum EnemyModifier
		{
			[Token(Token = "0x4001DA7")]
			none,
			[Token(Token = "0x4001DA8")]
			maxEnemies,
			[Token(Token = "0x4001DA9")]
			minEnemies
		}

		[Token(Token = "0x200048C")]
		public enum RoomSplit
		{
			[Token(Token = "0x4001DAB")]
			noEffect,
			[Token(Token = "0x4001DAC")]
			firstLong,
			[Token(Token = "0x4001DAD")]
			secondLong,
			[Token(Token = "0x4001DAE")]
			thirdLong
		}

		[Token(Token = "0x200048D")]
		public enum DirectnessModifier
		{
			[Token(Token = "0x4001DB0")]
			straight,
			[Token(Token = "0x4001DB1")]
			firstBranching,
			[Token(Token = "0x4001DB2")]
			secondBranching,
			[Token(Token = "0x4001DB3")]
			thirdBranching
		}

		[Token(Token = "0x200048E")]
		public enum ChompyModifier
		{
			[Token(Token = "0x4001DB5")]
			noChompy,
			[Token(Token = "0x4001DB6")]
			Chompy
		}

		[Serializable]
		[Token(Token = "0x200048F")]
		public class ForcedRoomData
		{
			[Token(Token = "0x4001DB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Help("WARNING! \n Do not overuse forced room managment, since it does not take into account multiple special cases.For example forcing 5 rooms to a level that has possibility to only spawn 3 rooms based on level lengths.This should be mostly used just to make sure that we get certain room as first (for example tutorial room).Or certain last room (for example special room at the end of level 3).", MessageType.Info)]
			public Room forcedRoom;

			[Token(Token = "0x4001DB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Header("Level that room will going to be (1-3)")]
			public int level;

			[Token(Token = "0x4001DB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Header("If the room should be the last one on the level. Use -1")]
			[Header("Position of the room that it will be spawned. From 1 to upward.")]
			public int position;

			[Token(Token = "0x600206E")]
			[Address(RVA = "0x120D970", Offset = "0x120D970", VA = "0x120D970")]
			public ForcedRoomData()
			{
			}
		}

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int totalRoomAmount;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SpecialCondition specialCondition;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpecialDecoration specialDecoration;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool includeWeird;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpecialSpace specialSpace;

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<GameplayTags> gameplayTags;

		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LootModifier lootModifier;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SecretModifier secretModifier;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EnemyModifier enemyModifier;

		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public RoomSplit roomSplit;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DirectnessModifier directness;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ChompyModifier chompyModifier;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ForcedRoomData[] forcedRoomData;

		[Token(Token = "0x4001D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool includeTutorialLevels;

		[Token(Token = "0x170003A0")]
		public int maxRoomAmount
		{
			[Token(Token = "0x6002067")]
			[Address(RVA = "0x120D8C8", Offset = "0x120D8C8", VA = "0x120D8C8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002068")]
			[Address(RVA = "0x120D8D0", Offset = "0x120D8D0", VA = "0x120D8D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003A1")]
		public int minRoomAmount
		{
			[Token(Token = "0x6002069")]
			[Address(RVA = "0x120D8D8", Offset = "0x120D8D8", VA = "0x120D8D8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600206A")]
			[Address(RVA = "0x120D8E0", Offset = "0x120D8E0", VA = "0x120D8E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002066")]
		[Address(RVA = "0x120D018", Offset = "0x120D018", VA = "0x120D018")]
		public void GenerateData()
		{
		}

		[Token(Token = "0x600206B")]
		[Address(RVA = "0x120D538", Offset = "0x120D538", VA = "0x120D538")]
		public int GetRandomEnum(int[,] indexAndProbability)
		{
			return default(int);
		}

		[Token(Token = "0x600206C")]
		[Address(RVA = "0x120D744", Offset = "0x120D744", VA = "0x120D744")]
		private void GetAndAddGameplayTag()
		{
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0x120D8E8", Offset = "0x120D8E8", VA = "0x120D8E8")]
		public RunGenerationData()
		{
		}
	}
	[Token(Token = "0x2000490")]
	[CreateAssetMenu(fileName = "RunGenerationData", menuName = "ScriptableObjects/RunGenerationDataScriptableObject", order = 1)]
	public class RunGenerationDataSO : ScriptableObject
	{
		[Token(Token = "0x4001DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RunGenerationData runGenerationData;

		[Token(Token = "0x600206F")]
		[Address(RVA = "0x120D978", Offset = "0x120D978", VA = "0x120D978")]
		public RunGenerationDataSO()
		{
		}
	}
	[Token(Token = "0x2000491")]
	[RequireComponent(typeof(LevelGenerationManager))]
	[RequireComponent(typeof(LevelLootSpawnManager))]
	public class RunGenerationManager : MonoBehaviourPunCallbacks, IOnEventCallback
	{
		[Token(Token = "0x2000492")]
		[CompilerGenerated]
		private sealed class <CacheRooms>d__42 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001DE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RunGenerationManager <>4__this;

			[Token(Token = "0x4001DE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <i>5__2;

			[Token(Token = "0x170003A3")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60020A1")]
				[Address(RVA = "0x122AC6C", Offset = "0x122AC6C", VA = "0x122AC6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60020A3")]
				[Address(RVA = "0x122ACB4", Offset = "0x122ACB4", VA = "0x122ACB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600209E")]
			[Address(RVA = "0x122A7B0", Offset = "0x122A7B0", VA = "0x122A7B0")]
			[DebuggerHidden]
			public <CacheRooms>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x600209F")]
			[Address(RVA = "0x122A7D8", Offset = "0x122A7D8", VA = "0x122A7D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60020A0")]
			[Address(RVA = "0x122A7DC", Offset = "0x122A7DC", VA = "0x122A7DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60020A2")]
			[Address(RVA = "0x122AC74", Offset = "0x122AC74", VA = "0x122AC74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static RunGenerationManager Instance;

		[Token(Token = "0x4001DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Room[] biomeRooms;

		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Room> biomeRoomInstances;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Room[] biomeSetpieceRooms;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Room> biomeSetpieceRoomsInstances;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Room[] tutorialRooms;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Room> tutorialRoomsInstances;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RunGenerationDataSO customRunGenerationData;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action<int> levelChangedEvent;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Room> tempRooms;

		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Room> cachedRooms;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<string, Room> cachedRoomDictionary;

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LevelGenerationManager levelGenerationManager;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Room> allRoomsToBeGenerated;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<Room> firstLevelRooms;

		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<Room> secondLevelRooms;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<Room> thirdLevelRooms;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int currentLevel;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool firstBranching;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		private bool secondBranching;

		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		private bool thirdBranching;

		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA7")]
		private bool cachingDone;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool syncWhenCachingDone;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[HideInInspector]
		public int firstLevelRoomAmount;

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public int secondLevelRoomAmount;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		public int thirdLevelRoomAmount;

		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public int tempTotalRoomAmount;

		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int firstLevelRoomAmountLeft;

		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int secondLevelRoomAmountLeft;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int thirdLevelRoomAmountLeft;

		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Exposed only for debugging purposes")]
		public RunGenerationData currentRunGenerationData;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private EnvironmentPropController environmentPropController;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public bool nerfWallTier;

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<Room> tempL1Rooms;

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<Room> tempL2Rooms;

		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private List<Room> tempL3Rooms;

		[Token(Token = "0x170003A2")]
		public bool IsCachingDone
		{
			[Token(Token = "0x6002070")]
			[Address(RVA = "0x120D980", Offset = "0x120D980", VA = "0x120D980")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0x120D988", Offset = "0x120D988", VA = "0x120D988")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0x120A240", Offset = "0x120A240", VA = "0x120A240")]
		public void DeactivateAllRooms()
		{
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0x12092E0", Offset = "0x12092E0", VA = "0x12092E0")]
		public Room GetCachedRoom(Room roomType, bool parentToLevelGenManager = true)
		{
			return null;
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0x120A714", Offset = "0x120A714", VA = "0x120A714")]
		public Room GetRandomRoomToDepth(List<Room> roomsThatAreCurrentlyBeingGenerated)
		{
			return null;
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0x120DA78", Offset = "0x120DA78", VA = "0x120DA78")]
		[IteratorStateMachine(typeof(<CacheRooms>d__42))]
		private IEnumerator<float> CacheRooms()
		{
			return null;
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0x120DAEC", Offset = "0x120DAEC", VA = "0x120DAEC")]
		private Room SpawnRoom(Room prefab)
		{
			return null;
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0x120DCB0", Offset = "0x120DCB0", VA = "0x120DCB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0x120DD74", Offset = "0x120DD74", VA = "0x120DD74")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0x120E130", Offset = "0x120E130", VA = "0x120E130")]
		public List<Room> GetCachedRooms()
		{
			return null;
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0x120E138", Offset = "0x120E138", VA = "0x120E138")]
		public void AddBackToCache(Room room)
		{
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0x120E184", Offset = "0x120E184", VA = "0x120E184")]
		public void SyncRoomViewIds()
		{
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0x120E934", Offset = "0x120E934", VA = "0x120E934")]
		public void RequestRoomIDs()
		{
		}

		[Token(Token = "0x600207D")]
		[Address(RVA = "0x120E9EC", Offset = "0x120E9EC", VA = "0x120E9EC", Slot = "54")]
		public void OnEvent(EventData photonEvent)
		{
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0x120EEE8", Offset = "0x120EEE8", VA = "0x120EEE8", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0x120EF60", Offset = "0x120EF60", VA = "0x120EF60")]
		private void Start()
		{
		}

		[Token(Token = "0x6002080")]
		[Address(RVA = "0x120F004", Offset = "0x120F004", VA = "0x120F004")]
		private void Update()
		{
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0x120F090", Offset = "0x120F090", VA = "0x120F090")]
		public void DebugGenerateLevel()
		{
		}

		[Token(Token = "0x6002082")]
		[Address(RVA = "0x120F44C", Offset = "0x120F44C", VA = "0x120F44C")]
		public void GenerateLevel(int level)
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0x120F550", Offset = "0x120F550", VA = "0x120F550")]
		public void GenerateNextLevel()
		{
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0x120F580", Offset = "0x120F580", VA = "0x120F580")]
		public void ResetLevelGenerator()
		{
		}

		[Token(Token = "0x6002085")]
		[Address(RVA = "0x120F5A4", Offset = "0x120F5A4", VA = "0x120F5A4")]
		public int CurrentLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0x120E6FC", Offset = "0x120E6FC", VA = "0x120E6FC")]
		public void SetCurrentLevel(int currentLevel, bool invokeEvent = true, bool activateAtmosphere = true, bool sync = true)
		{
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0x120F5AC", Offset = "0x120F5AC", VA = "0x120F5AC")]
		[PunRPC]
		public void SetCurrentLevelRPC(int currentLevel, bool invokeEvent, bool activateAtmosphere)
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0x120F61C", Offset = "0x120F61C", VA = "0x120F61C")]
		public void ResetLevelGenerationStartingTransform()
		{
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0x120F6A0", Offset = "0x120F6A0", VA = "0x120F6A0")]
		public RunGenerationData GetCurrentRunGenerationData()
		{
			return null;
		}

		[Token(Token = "0x600208A")]
		[Address(RVA = "0x120F6A8", Offset = "0x120F6A8", VA = "0x120F6A8")]
		public void DecideRunRooms(RunGenerationData runGenerationData)
		{
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0x1213F30", Offset = "0x1213F30", VA = "0x1213F30")]
		private void AddForcedRoom(RunGenerationData.ForcedRoomData forcedRoomData)
		{
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0x1212060", Offset = "0x1212060", VA = "0x1212060")]
		private List<Room> ShuffleRoomList(List<Room> roomsToShuffle)
		{
			return null;
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0x1211EB4", Offset = "0x1211EB4", VA = "0x1211EB4")]
		private void ResetValues()
		{
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0x12141E4", Offset = "0x12141E4", VA = "0x12141E4")]
		private static bool IsWeirdRoom(Room room)
		{
			return default(bool);
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0x121420C", Offset = "0x121420C", VA = "0x121420C")]
		public RunGenerationManager()
		{
		}
	}
	[Token(Token = "0x2000497")]
	public class MyDecoComparer : IComparer<RoomDatas.RoomData>
	{
		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RoomDatas.RoomDeco roomDeco;

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0x122AE18", Offset = "0x122AE18", VA = "0x122AE18")]
		public MyDecoComparer(RoomDatas.RoomDeco roomDecoration)
		{
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0x122AE40", Offset = "0x122AE40", VA = "0x122AE40", Slot = "4")]
		public int Compare(RoomDatas.RoomData a, RoomDatas.RoomData b)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000498")]
	public class MySpaceComparer : IComparer<RoomDatas.RoomData>
	{
		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RoomDatas.RoomHeight roomHeight;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private RoomDatas.RoomSize roomSize;

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0x122AEA4", Offset = "0x122AEA4", VA = "0x122AEA4")]
		public MySpaceComparer(RoomDatas.RoomHeight roomHeight, RoomDatas.RoomSize roomSize)
		{
		}

		[Token(Token = "0x60020AF")]
		[Address(RVA = "0x122AED0", Offset = "0x122AED0", VA = "0x122AED0", Slot = "4")]
		public int Compare(RoomDatas.RoomData a, RoomDatas.RoomData b)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000499")]
	public class MyGameplayTagComparer : IComparer<RoomDatas.RoomData>
	{
		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RoomDatas.RoomGameplay[] roomGameplayTags;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int index;

		[Token(Token = "0x60020B0")]
		[Address(RVA = "0x122AF8C", Offset = "0x122AF8C", VA = "0x122AF8C")]
		public MyGameplayTagComparer(RoomDatas.RoomGameplay[] gameplayTags, int index)
		{
		}

		[Token(Token = "0x60020B1")]
		[Address(RVA = "0x122AFC8", Offset = "0x122AFC8", VA = "0x122AFC8", Slot = "4")]
		public int Compare(RoomDatas.RoomData a, RoomDatas.RoomData b)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200049A")]
	[RequireComponent(typeof(RunGenerationManager))]
	[RequireComponent(typeof(LevelGenerationManager))]
	public class LevelLootSpawnManager : MonoBehaviourPun
	{
		[Token(Token = "0x200049B")]
		[CompilerGenerated]
		private sealed class <SpawnLootOverTime>d__45 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LevelLootSpawnManager <>4__this;

			[Token(Token = "0x4001E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <floor>5__2;

			[Token(Token = "0x4001E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float <timeStarted>5__3;

			[Token(Token = "0x4001E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<Room>.Enumerator <>7__wrap3;

			[Token(Token = "0x4001E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Room <room>5__5;

			[Token(Token = "0x4001E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<NodeTypes> <randomizedNodeTypeList>5__6;

			[Token(Token = "0x4001E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int <i>5__7;

			[Token(Token = "0x170003A6")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60020E1")]
				[Address(RVA = "0x1231940", Offset = "0x1231940", VA = "0x1231940", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003A7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60020E3")]
				[Address(RVA = "0x1231988", Offset = "0x1231988", VA = "0x1231988", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60020DD")]
			[Address(RVA = "0x122BC80", Offset = "0x122BC80", VA = "0x122BC80")]
			[DebuggerHidden]
			public <SpawnLootOverTime>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x60020DE")]
			[Address(RVA = "0x12305C8", Offset = "0x12305C8", VA = "0x12305C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60020DF")]
			[Address(RVA = "0x12305F4", Offset = "0x12305F4", VA = "0x12305F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60020E0")]
			[Address(RVA = "0x12318F0", Offset = "0x12318F0", VA = "0x12318F0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60020E2")]
			[Address(RVA = "0x1231948", Offset = "0x1231948", VA = "0x1231948", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200049C")]
		[CompilerGenerated]
		private sealed class <DelayedUpdateAllGeneratedObjectListCoroutine>d__49 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float delay;

			[Token(Token = "0x4001E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LevelLootSpawnManager <>4__this;

			[Token(Token = "0x4001E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Player player;

			[Token(Token = "0x170003A8")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60020E7")]
				[Address(RVA = "0x1231A94", Offset = "0x1231A94", VA = "0x1231A94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60020E9")]
				[Address(RVA = "0x1231ADC", Offset = "0x1231ADC", VA = "0x1231ADC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60020E4")]
			[Address(RVA = "0x122BFE4", Offset = "0x122BFE4", VA = "0x122BFE4")]
			[DebuggerHidden]
			public <DelayedUpdateAllGeneratedObjectListCoroutine>d__49(int <>1__state)
			{
			}

			[Token(Token = "0x60020E5")]
			[Address(RVA = "0x12319E4", Offset = "0x12319E4", VA = "0x12319E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60020E6")]
			[Address(RVA = "0x12319E8", Offset = "0x12319E8", VA = "0x12319E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60020E8")]
			[Address(RVA = "0x1231A9C", Offset = "0x1231A9C", VA = "0x1231A9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200049D")]
		[CompilerGenerated]
		private sealed class <GenerateForNode>d__52 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LevelLootSpawnManager <>4__this;

			[Token(Token = "0x4001E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NodeTypes nodeType;

			[Token(Token = "0x4001E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Room room;

			[Token(Token = "0x4001E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <onlyHarmless>5__2;

			[Token(Token = "0x4001E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private NodeSettingsWithEnemyGroup <monsterNode>5__3;

			[Token(Token = "0x4001E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <randomMonsterAmount>5__4;

			[Token(Token = "0x4001E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <i>5__5;

			[Token(Token = "0x170003AA")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60020ED")]
				[Address(RVA = "0x1232034", Offset = "0x1232034", VA = "0x1232034", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60020EF")]
				[Address(RVA = "0x123207C", Offset = "0x123207C", VA = "0x123207C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60020EA")]
			[Address(RVA = "0x122C5C4", Offset = "0x122C5C4", VA = "0x122C5C4")]
			[DebuggerHidden]
			public <GenerateForNode>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x60020EB")]
			[Address(RVA = "0x1231B38", Offset = "0x1231B38", VA = "0x1231B38", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60020EC")]
			[Address(RVA = "0x1231B3C", Offset = "0x1231B3C", VA = "0x1231B3C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60020EE")]
			[Address(RVA = "0x123203C", Offset = "0x123203C", VA = "0x123203C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static LevelLootSpawnManager Instance;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LevelNodeSettings levelNodeSettings;

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material wall1Gold;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material wall2Gold;

		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material wall2Brinestone;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material wall2Boombastium;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material wall3Brimestone;

		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material wall3Boombastium;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Material wall4Boombastium;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Material wall4Marcopolonium;

		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Material wall5Marcopolonium;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Material wall5Enigmium;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<MultiNode> _availableNodes;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<MultiNode> _wallNodes;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<MultiNode> _geodeNodes;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<MultiNode> _waterNodes;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<MultiNode> _relicNodes;

		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<MultiNode> _diggingNodes;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<MultiNode> _safeNodes;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<MultiNode> _monsterNodes;

		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<MultiNode> _healthpotionNodes;

		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private List<MultiNode> _geysirNodes;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<MultiNode> _poisonPlantNodes;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<GameObject> _allGeneratedLootObjects;

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<GameObject> _allGeneratedMiscObjects;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<GameObject> _allGeneratedEnemyObjects;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<Room> _allGeneratedRooms;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private LevelGenerationManager levelGenerationManager;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RunGenerationManager runGenerationManager;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Dictionary<EnemySpawnAndDespawnManager.EnemyType, int> _enemySpawnStats;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int _totalEnemiesSpawned;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private object[] instantiationData;

		[Token(Token = "0x4001E18")]
		private const int MaxEnemies = 25;

		[Token(Token = "0x4001E19")]
		private const int MaxGolems = 1;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private List<int> allGeneratedLootViewIDs;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private List<int> allGeneratedMiscViewIDs;

		[Token(Token = "0x4001E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3 floatingLootSineVector;

		[Token(Token = "0x170003A5")]
		public static Vector3 GetFloatingLootSineVector
		{
			[Token(Token = "0x60020B2")]
			[Address(RVA = "0x122B0E8", Offset = "0x122B0E8", VA = "0x122B0E8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60020B3")]
		[Address(RVA = "0x122B134", Offset = "0x122B134", VA = "0x122B134")]
		private void Awake()
		{
		}

		[Token(Token = "0x60020B4")]
		[Address(RVA = "0x122B41C", Offset = "0x122B41C", VA = "0x122B41C")]
		private void Start()
		{
		}

		[Token(Token = "0x60020B5")]
		[Address(RVA = "0x122B668", Offset = "0x122B668", VA = "0x122B668")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60020B6")]
		[Address(RVA = "0x122B82C", Offset = "0x122B82C", VA = "0x122B82C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60020B7")]
		[Address(RVA = "0x122B948", Offset = "0x122B948", VA = "0x122B948")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60020B8")]
		[Address(RVA = "0x122BA64", Offset = "0x122BA64", VA = "0x122BA64")]
		public void GenerateAllLoot(GameObject levelRoot)
		{
		}

		[Token(Token = "0x60020B9")]
		[Address(RVA = "0x122BC0C", Offset = "0x122BC0C", VA = "0x122BC0C")]
		[IteratorStateMachine(typeof(<SpawnLootOverTime>d__45))]
		private IEnumerator<float> SpawnLootOverTime()
		{
			return null;
		}

		[Token(Token = "0x60020BA")]
		[Address(RVA = "0x122BCA8", Offset = "0x122BCA8", VA = "0x122BCA8")]
		public void UpdateAllGeneratedObjectList()
		{
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0x122BEBC", Offset = "0x122BEBC", VA = "0x122BEBC")]
		public void UpdateAllGeneratedObjectList(Player player)
		{
		}

		[Token(Token = "0x60020BC")]
		[Address(RVA = "0x122BD30", Offset = "0x122BD30", VA = "0x122BD30")]
		private void RemoveNullGenerated()
		{
		}

		[Token(Token = "0x60020BD")]
		[Address(RVA = "0x122BF44", Offset = "0x122BF44", VA = "0x122BF44")]
		[IteratorStateMachine(typeof(<DelayedUpdateAllGeneratedObjectListCoroutine>d__49))]
		public IEnumerator<float> DelayedUpdateAllGeneratedObjectListCoroutine(Player player, float delay)
		{
			return null;
		}

		[Token(Token = "0x60020BE")]
		[Address(RVA = "0x122C00C", Offset = "0x122C00C", VA = "0x122C00C")]
		[PunRPC]
		private void ReceiveAllGeneratedObjectsRPC(int[] lootViewIDList, int[] miscViewIDList)
		{
		}

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0x122C464", Offset = "0x122C464", VA = "0x122C464")]
		[PunRPC]
		private void ClearAllGeneratedObjectsRPC()
		{
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0x122C52C", Offset = "0x122C52C", VA = "0x122C52C")]
		[IteratorStateMachine(typeof(<GenerateForNode>d__52))]
		private IEnumerator<float> GenerateForNode(NodeTypes nodeType, Room room)
		{
			return null;
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0x122C5EC", Offset = "0x122C5EC", VA = "0x122C5EC")]
		private List<MultiNode> ShuffleNodeList(List<MultiNode> listToShuffle)
		{
			return null;
		}

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0x122C6E8", Offset = "0x122C6E8", VA = "0x122C6E8")]
		private List<NodeTypes> ShuffleNodeTypesList(List<NodeTypes> listToShuffle)
		{
			return null;
		}

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0x122C7E4", Offset = "0x122C7E4", VA = "0x122C7E4")]
		private void ClearTempLists()
		{
		}

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0x122CA0C", Offset = "0x122CA0C", VA = "0x122CA0C")]
		private void FetchNodes(Room room)
		{
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0x122D0B0", Offset = "0x122D0B0", VA = "0x122D0B0")]
		public void DestroyAllLoot()
		{
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0x122D5D4", Offset = "0x122D5D4", VA = "0x122D5D4")]
		private void RemoveNode(ref MultiNode node)
		{
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0x122D6E0", Offset = "0x122D6E0", VA = "0x122D6E0")]
		private void SpawnEnemy(NodeSettingsWithEnemyGroup nodeSettings, List<MultiNode> availableNodes, bool onlyHarmlessEnemies)
		{
		}

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0x122DB68", Offset = "0x122DB68", VA = "0x122DB68")]
		private GameObject SpawnPrefabAtNodes(NodeSettingsWithPrefab nodeSettings, List<MultiNode> availableNodes, bool raycastPosition = false, bool randomRotation = false)
		{
			return null;
		}

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0x122E084", Offset = "0x122E084", VA = "0x122E084")]
		private GameObject SpawnPoisontPlantAtNode(NodeSettingsWithPrefab nodeSettings, List<MultiNode> availableNodes, bool raycastPosition = false, bool randomRotation = false)
		{
			return null;
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0x122E5F0", Offset = "0x122E5F0", VA = "0x122E5F0")]
		private GameObject SpawnWallNodeAtNodes(NodeSettingsWithPrefab nodeSettings, List<MultiNode> availableNodes)
		{
			return null;
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0x122E974", Offset = "0x122E974", VA = "0x122E974")]
		private GameObject SpawnLootAtNodes(NodeSettingsWithPrefab nodeSettings, List<MultiNode> availableNodes, bool raycastPosition = false, bool isRelic = false)
		{
			return null;
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0x122EE7C", Offset = "0x122EE7C", VA = "0x122EE7C")]
		private void SpawnBuriedNode(Room room)
		{
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0x122F034", Offset = "0x122F034", VA = "0x122F034")]
		private void SpawnLootInsideDiggingArea(DiggingArea diggingArea)
		{
		}

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0x122F44C", Offset = "0x122F44C", VA = "0x122F44C")]
		private void SpawnEnemyLoot(Enemy enemy)
		{
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0x122F77C", Offset = "0x122F77C", VA = "0x122F77C")]
		public void AddLootToList(GameObject loot)
		{
		}

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0x122F864", Offset = "0x122F864", VA = "0x122F864")]
		public List<GameObject> GetAllGeneratedLoots()
		{
			return null;
		}

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0x122F86C", Offset = "0x122F86C", VA = "0x122F86C")]
		public void AddMiscToList(GameObject miscObject)
		{
		}

		[Token(Token = "0x60020D2")]
		[Address(RVA = "0x122F954", Offset = "0x122F954", VA = "0x122F954")]
		public List<GameObject> GetAllGeneratedMisc()
		{
			return null;
		}

		[Token(Token = "0x60020D3")]
		[Address(RVA = "0x122F95C", Offset = "0x122F95C", VA = "0x122F95C")]
		public void AddEnemyToList(GameObject enemyObject)
		{
		}

		[Token(Token = "0x60020D4")]
		[Address(RVA = "0x122FA44", Offset = "0x122FA44", VA = "0x122FA44")]
		public List<Loot> GetAllBiomeLootTypes()
		{
			return null;
		}

		[Token(Token = "0x60020D5")]
		[Address(RVA = "0x122FD74", Offset = "0x122FD74", VA = "0x122FD74")]
		public int GetAmountOfLootsFound(List<Loot> loots)
		{
			return default(int);
		}

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0x122FB90", Offset = "0x122FB90", VA = "0x122FB90")]
		private void AddAllLootsToList(List<Loot> loots, LootGroup[] lootGroup)
		{
		}

		[Token(Token = "0x60020D7")]
		[Address(RVA = "0x122FE80", Offset = "0x122FE80", VA = "0x122FE80")]
		public void ClearAllGeneratedLootList()
		{
		}

		[Token(Token = "0x60020D8")]
		[Address(RVA = "0x122FEF0", Offset = "0x122FEF0", VA = "0x122FEF0")]
		public int GetTotalEnemiesSpawned()
		{
			return default(int);
		}

		[Token(Token = "0x60020D9")]
		[Address(RVA = "0x122FEF8", Offset = "0x122FEF8", VA = "0x122FEF8")]
		public LootSpawnAndDespawnManager.LootType GetRandomRelicFromLootGroupCurrentFloor()
		{
			return default(LootSpawnAndDespawnManager.LootType);
		}

		[Token(Token = "0x60020DA")]
		[Address(RVA = "0x1230004", Offset = "0x1230004", VA = "0x1230004")]
		public LootSpawnAndDespawnManager.LootType GetRandomSafeLootFromLootGroupCurrentFloor()
		{
			return default(LootSpawnAndDespawnManager.LootType);
		}

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0x1230110", Offset = "0x1230110", VA = "0x1230110")]
		private void Update()
		{
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0x12301C0", Offset = "0x12301C0", VA = "0x12301C0")]
		public LevelLootSpawnManager()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x200049E")]
	public class VRIK_PUN_Player : MonoBehaviourPun
	{
		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Root of the VR camera rig")]
		public GameObject vrRig;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("The VRIK component.")]
		public VRIK ik;

		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] disableIfLocal;

		[Token(Token = "0x4001E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform headIKProxy;

		[Token(Token = "0x4001E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform leftHandIKProxy;

		[Token(Token = "0x4001E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform rightHandIKProxy;

		[Token(Token = "0x4001E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform leftHandIKProxyRemote;

		[Token(Token = "0x4001E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform rightHandIKProxyRemote;

		[Token(Token = "0x4001E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool localInitDone;

		[Token(Token = "0x4001E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[LargeHeader("Calibration")]
		[Header("Head")]
		[UnityEngine.Tooltip("HMD.")]
		public Transform centerEyeAnchor;

		[Token(Token = "0x4001E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Position offset of the camera from the head bone (root space).")]
		public Vector3 headAnchorPositionOffset;

		[Token(Token = "0x4001E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[UnityEngine.Tooltip("Rotation offset of the camera from the head bone (root space).")]
		public Vector3 headAnchorRotationOffset;

		[Token(Token = "0x4001E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Hands")]
		[UnityEngine.Tooltip("Left Hand Controller")]
		public Transform leftHandAnchor;

		[Token(Token = "0x4001E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("Right Hand Controller")]
		public Transform rightHandAnchor;

		[Token(Token = "0x4001E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("Position offset of the hand controller from the hand bone (controller space).")]
		public Vector3 handAnchorPositionOffset;

		[Token(Token = "0x4001E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[UnityEngine.Tooltip("Rotation offset of the hand controller from the hand bone (controller space).")]
		public Vector3 handAnchorRotationOffset;

		[Token(Token = "0x4001E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Scale")]
		[UnityEngine.Tooltip("Multiplies the scale of the root.")]
		public float scaleMlp;

		[Token(Token = "0x4001E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool fixedScale;

		[Token(Token = "0x4001E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x4001E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[LargeHeader("Remote")]
		[UnityEngine.Tooltip("The speed of interpolating remote IK targets.")]
		public float proxyInterpolationSpeed;

		[Token(Token = "0x4001E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[UnityEngine.Tooltip("Max interpolation error square magnitude. IK targets snap to latest synced position if current interpolated position is farther than that.")]
		public float proxyMaxErrorSqrMag;

		[Token(Token = "0x4001E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UnityEngine.Tooltip("If assigned, remote instances of this player will use this material.")]
		public Material remoteMaterialOverride;

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0x12320D8", Offset = "0x12320D8", VA = "0x12320D8")]
		private void Start()
		{
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0x1232334", Offset = "0x1232334", VA = "0x1232334")]
		private void Update()
		{
		}

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0x12326AC", Offset = "0x12326AC", VA = "0x12326AC")]
		public void InitiateLocal()
		{
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0x12323C0", Offset = "0x12323C0", VA = "0x12323C0")]
		private void UpdateLocal()
		{
		}

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0x1232164", Offset = "0x1232164", VA = "0x1232164")]
		private void InitiateRemote()
		{
		}

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0x1232934", Offset = "0x1232934", VA = "0x1232934")]
		public VRIK_PUN_Player()
		{
		}
	}
}
namespace NetBase
{
	[Token(Token = "0x200049F")]
	public class NetUtils
	{
		[Token(Token = "0x60020F6")]
		[Address(RVA = "0x12329C4", Offset = "0x12329C4", VA = "0x12329C4")]
		public static void SetPhotonViewSync(Transform trans, ViewSynchronization sync)
		{
		}

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0x1232B20", Offset = "0x1232B20", VA = "0x1232B20")]
		public static string GetPath(Transform current)
		{
			return null;
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0x1232C40", Offset = "0x1232C40", VA = "0x1232C40")]
		public static string RelPath(Transform current, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0x1232CE8", Offset = "0x1232CE8", VA = "0x1232CE8")]
		public static GameObject Find(GameObject parent, string name)
		{
			return null;
		}

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0x1232DC8", Offset = "0x1232DC8", VA = "0x1232DC8")]
		public static Transform Find(Transform parent, string name)
		{
			return null;
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0x1232F40", Offset = "0x1232F40", VA = "0x1232F40")]
		public static GameObject FindInScene(Scene scene, string name)
		{
			return null;
		}

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0x12330D8", Offset = "0x12330D8", VA = "0x12330D8")]
		public NetUtils()
		{
		}
	}
	[Token(Token = "0x20004A0")]
	public struct NetworkReference
	{
		[Token(Token = "0x4001E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int parentHandleId;

		[Token(Token = "0x4001E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pathFromParent;

		[Token(Token = "0x170003AC")]
		public static NetworkReference INVALID
		{
			[Token(Token = "0x60020FD")]
			[Address(RVA = "0x12330E0", Offset = "0x12330E0", VA = "0x12330E0")]
			get
			{
				return default(NetworkReference);
			}
		}

		[Token(Token = "0x170003AD")]
		public bool IsPhotonView
		{
			[Token(Token = "0x6002101")]
			[Address(RVA = "0x123329C", Offset = "0x123329C", VA = "0x123329C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003AE")]
		public bool IsNetworkAttachment
		{
			[Token(Token = "0x6002102")]
			[Address(RVA = "0x12332AC", Offset = "0x12332AC", VA = "0x12332AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003AF")]
		public bool IsChild
		{
			[Token(Token = "0x6002105")]
			[Address(RVA = "0x1233414", Offset = "0x1233414", VA = "0x1233414")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0x1233138", Offset = "0x1233138", VA = "0x1233138")]
		public GameObject FindObject()
		{
			return null;
		}

		[Token(Token = "0x60020FF")]
		public T FindComponent<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6002100")]
		public T[] FindComponents<T>()
		{
			return null;
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0x12332B8", Offset = "0x12332B8", VA = "0x12332B8")]
		public PhotonView GetPhotonView()
		{
			return null;
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0x12332D4", Offset = "0x12332D4", VA = "0x12332D4")]
		public NetworkAttachment GetNetworkAttachment()
		{
			return null;
		}

		[Token(Token = "0x6002106")]
		[Address(RVA = "0x1233424", Offset = "0x1233424", VA = "0x1233424")]
		public static bool operator ==(NetworkReference nref1, NetworkReference nref2)
		{
			return default(bool);
		}

		[Token(Token = "0x6002107")]
		[Address(RVA = "0x1233580", Offset = "0x1233580", VA = "0x1233580")]
		public static bool operator !=(NetworkReference nref1, NetworkReference nref2)
		{
			return default(bool);
		}

		[Token(Token = "0x6002108")]
		[Address(RVA = "0x12334C8", Offset = "0x12334C8", VA = "0x12334C8")]
		public bool Equals(NetworkReference other)
		{
			return default(bool);
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0x1233598", Offset = "0x1233598", VA = "0x1233598", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600210A")]
		[Address(RVA = "0x12336BC", Offset = "0x12336BC", VA = "0x12336BC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0x12336FC", Offset = "0x12336FC", VA = "0x12336FC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600210C")]
		[Address(RVA = "0x123310C", Offset = "0x123310C", VA = "0x123310C")]
		public static NetworkReference FromIdAndPath(int parentHandleId, string pathFromParent)
		{
			return default(NetworkReference);
		}

		[Token(Token = "0x600210D")]
		[Address(RVA = "0x123399C", Offset = "0x123399C", VA = "0x123399C")]
		public static NetworkReference FromObject(GameObject obj)
		{
			return default(NetworkReference);
		}

		[Token(Token = "0x600210E")]
		[Address(RVA = "0x1233A1C", Offset = "0x1233A1C", VA = "0x1233A1C")]
		public static NetworkReference FromTransform(Transform transform)
		{
			return default(NetworkReference);
		}

		[Token(Token = "0x600210F")]
		[Address(RVA = "0x1233ADC", Offset = "0x1233ADC", VA = "0x1233ADC")]
		private static MonoBehaviour GetNetworkHandle(Transform obj)
		{
			return null;
		}

		[Token(Token = "0x6002110")]
		[Address(RVA = "0x1233C14", Offset = "0x1233C14", VA = "0x1233C14")]
		private static int GetNetworkHandleId(MonoBehaviour script)
		{
			return default(int);
		}

		[Token(Token = "0x6002111")]
		[Address(RVA = "0x1233D58", Offset = "0x1233D58", VA = "0x1233D58")]
		private static string GetNetworkHandlePath(Transform obj, MonoBehaviour script)
		{
			return null;
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0x1233218", Offset = "0x1233218", VA = "0x1233218")]
		private static MonoBehaviour FindNetworkReferenceParent(int parentHandleId)
		{
			return null;
		}
	}
	[Token(Token = "0x20004A1")]
	public class NetworkAttachment : MonoBehaviour
	{
		[Token(Token = "0x4001E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int id;

		[Token(Token = "0x4001E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, NetworkAttachment> ids;

		[Token(Token = "0x6002113")]
		[Address(RVA = "0x1233340", Offset = "0x1233340", VA = "0x1233340")]
		public static NetworkAttachment Find(int id)
		{
			return null;
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0x1233F08", Offset = "0x1233F08", VA = "0x1233F08")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0x123401C", Offset = "0x123401C", VA = "0x123401C")]
		public NetworkAttachment()
		{
		}
	}
	[Token(Token = "0x20004A2")]
	[RequireComponent(typeof(PhotonView))]
	public abstract class NetworkAudio : MonoBehaviourPun
	{
		[Token(Token = "0x4001E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NetworkAudio instance;

		[Token(Token = "0x6002117")]
		[Address(RVA = "0x12340BC", Offset = "0x12340BC", VA = "0x12340BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0x1234114", Offset = "0x1234114", VA = "0x1234114")]
		public static void PlayClipAtPoint(AudioClip clip, Vector3 position, float volume, RpcTarget targets = RpcTarget.All)
		{
		}

		[Token(Token = "0x6002119")]
		[Address(RVA = "0x12344F4", Offset = "0x12344F4", VA = "0x12344F4")]
		public static void PlayClipAtPoint(string clipName, Vector3 position, float volume, RpcTarget targets = RpcTarget.All)
		{
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0x123429C", Offset = "0x123429C", VA = "0x123429C")]
		public static void PlayClipAtPoint(int clipId, Vector3 position, float volume, RpcTarget targets = RpcTarget.All)
		{
		}

		[Token(Token = "0x600211B")]
		[Address(RVA = "0x1234668", Offset = "0x1234668", VA = "0x1234668")]
		[PunRPC]
		protected void NetPlayClipAtPointRPC(int clipId, Vector3 position, float volume)
		{
		}

		[Token(Token = "0x600211C")]
		protected abstract int GetClipId(AudioClip clip);

		[Token(Token = "0x600211D")]
		protected abstract int GetClipId(string clipName);

		[Token(Token = "0x600211E")]
		protected abstract AudioClip GetClip(int clipId);

		[Token(Token = "0x600211F")]
		[Address(RVA = "0x1234744", Offset = "0x1234744", VA = "0x1234744")]
		protected NetworkAudio()
		{
		}
	}
	[Token(Token = "0x20004A3")]
	public abstract class NetworkBehaviour : MonoBehaviour
	{
		[Token(Token = "0x20004A4")]
		protected sealed class PropertyEventHandler : MonoBehaviourPunCallbacks
		{
			[Token(Token = "0x4001E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static PropertyEventHandler instance;

			[Token(Token = "0x170003B1")]
			public static PropertyEventHandler Instance
			{
				[Token(Token = "0x6002125")]
				[Address(RVA = "0x123486C", Offset = "0x123486C", VA = "0x123486C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002124")]
			[Address(RVA = "0x1234864", Offset = "0x1234864", VA = "0x1234864")]
			private PropertyEventHandler()
			{
			}

			[Token(Token = "0x6002126")]
			[Address(RVA = "0x123497C", Offset = "0x123497C", VA = "0x123497C", Slot = "46")]
			public override void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
			{
			}
		}

		[Token(Token = "0x170003B0")]
		protected abstract string PropKey
		{
			[Token(Token = "0x6002120")]
			get;
		}

		[Token(Token = "0x6002121")]
		protected abstract void RecvState(ExitGames.Client.Photon.Hashtable content);

		[Token(Token = "0x6002122")]
		[Address(RVA = "0x123474C", Offset = "0x123474C", VA = "0x123474C")]
		protected void SetProperties(ExitGames.Client.Photon.Hashtable content)
		{
		}

		[Token(Token = "0x6002123")]
		[Address(RVA = "0x123485C", Offset = "0x123485C", VA = "0x123485C")]
		protected NetworkBehaviour()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	[RequireComponent(typeof(PhotonView))]
	public class NetworkObject : MonoBehaviourPun, IPunObservable
	{
		[Token(Token = "0x20004A6")]
		public enum UpdateMode
		{
			[Token(Token = "0x4001E5B")]
			None,
			[Token(Token = "0x4001E5C")]
			Set,
			[Token(Token = "0x4001E5D")]
			Lerp
		}

		[Token(Token = "0x20004A7")]
		private class ComponentInterpolator
		{
			[Token(Token = "0x20004A8")]
			internal struct State
			{
				[Token(Token = "0x4001E64")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				internal double timestamp;

				[Token(Token = "0x4001E65")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				internal int parentId;

				[Token(Token = "0x4001E66")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				internal string path;

				[Token(Token = "0x4001E67")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				internal Vector3 pos;

				[Token(Token = "0x4001E68")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				internal Quaternion rot;

				[Token(Token = "0x4001E69")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
				internal Vector3 scale;

				[Token(Token = "0x4001E6A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
				internal Vector3 v;

				[Token(Token = "0x4001E6B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
				internal Vector3 angv;
			}

			[Token(Token = "0x4001E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private NetworkObject nit;

			[Token(Token = "0x4001E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Component component;

			[Token(Token = "0x4001E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private State[] states;

			[Token(Token = "0x4001E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int lastRcvdSlot;

			[Token(Token = "0x4001E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int nextFreeSlot;

			[Token(Token = "0x4001E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int slotsUsed;

			[Token(Token = "0x600212D")]
			[Address(RVA = "0x1234FC4", Offset = "0x1234FC4", VA = "0x1234FC4")]
			public ComponentInterpolator(NetworkObject nit, Component component)
			{
			}

			[Token(Token = "0x600212E")]
			[Address(RVA = "0x1235700", Offset = "0x1235700", VA = "0x1235700")]
			public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
			{
			}

			[Token(Token = "0x600212F")]
			[Address(RVA = "0x1235FDC", Offset = "0x1235FDC", VA = "0x1235FDC")]
			private bool hasChanged(int pid, string path, Vector3 pos, Quaternion rot, Vector3 scale, Vector3 v, Vector3 angv)
			{
				return default(bool);
			}

			[Token(Token = "0x6002130")]
			[Address(RVA = "0x12351E4", Offset = "0x12351E4", VA = "0x12351E4")]
			public void Update(double interpolationTime)
			{
			}

			[Token(Token = "0x6002131")]
			[Address(RVA = "0x1235FE4", Offset = "0x1235FE4", VA = "0x1235FE4")]
			protected void updateStates(State lhs, State rhs, float t)
			{
			}

			[Token(Token = "0x6002132")]
			[Address(RVA = "0x123641C", Offset = "0x123641C", VA = "0x123641C")]
			protected void UpdateParent(Transform transform, State state)
			{
			}
		}

		[Token(Token = "0x4001E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Synchronize changes to the location of the object in the object hierarchy")]
		public bool parent;

		[Token(Token = "0x4001E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public UpdateMode position;

		[Token(Token = "0x4001E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode rotation;

		[Token(Token = "0x4001E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UpdateMode scale;

		[Token(Token = "0x4001E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateMode velocity;

		[Token(Token = "0x4001E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public UpdateMode angularVelocity;

		[Token(Token = "0x4001E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Use local coordinates if true, otherwise use world coordinates")]
		public bool useLocalValues;

		[Token(Token = "0x4001E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[UnityEngine.Tooltip("Only send updates if any of the tracked values have changed")]
		public bool onChangeOnly;

		[Token(Token = "0x4001E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ComponentInterpolator[] cipols;

		[Token(Token = "0x4001E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool interpolationEnabled;

		[Token(Token = "0x6002127")]
		[Address(RVA = "0x1234DC8", Offset = "0x1234DC8", VA = "0x1234DC8")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0x1235058", Offset = "0x1235058", VA = "0x1235058")]
		private void Update()
		{
		}

		[Token(Token = "0x6002129")]
		[Address(RVA = "0x123512C", Offset = "0x123512C", VA = "0x123512C")]
		private double GetInterpolationBackTime()
		{
			return default(double);
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0x1235664", Offset = "0x1235664", VA = "0x1235664", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x600212B")]
		[Address(RVA = "0x1235F14", Offset = "0x1235F14", VA = "0x1235F14")]
		public NetworkObject()
		{
		}
	}
	[Token(Token = "0x20004A9")]
	public class PhotonViewLink : MonoBehaviour
	{
		[Token(Token = "0x4001E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhotonView linkedView;

		[Token(Token = "0x6002133")]
		[Address(RVA = "0x1236520", Offset = "0x1236520", VA = "0x1236520")]
		public PhotonViewLink()
		{
		}
	}
}
namespace PlayoVR
{
	[Token(Token = "0x20004AA")]
	public class AvatarHMDSyncAction : MonoBehaviourPun
	{
		[Token(Token = "0x4001E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("HeadCollider")]
		public GameObject headCollider;

		[Token(Token = "0x4001E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform headColliderFollow;

		[Token(Token = "0x4001E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject leftHandFollower;

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject rightHandFollower;

		[Token(Token = "0x4001E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform leftHandTransformToFollow;

		[Token(Token = "0x4001E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform rightHandTransformToFollow;

		[Token(Token = "0x4001E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform headsetTransform;

		[Token(Token = "0x4001E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform HVRPlayerController;

		[Token(Token = "0x4001E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject VRIKAvatar;

		[Token(Token = "0x6002134")]
		[Address(RVA = "0x1236528", Offset = "0x1236528", VA = "0x1236528")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0x123660C", Offset = "0x123660C", VA = "0x123660C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0x1236610", Offset = "0x1236610", VA = "0x1236610", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6002137")]
		[Address(RVA = "0x1236614", Offset = "0x1236614", VA = "0x1236614")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002138")]
		[Address(RVA = "0x1236620", Offset = "0x1236620", VA = "0x1236620", Slot = "5")]
		protected virtual void Action()
		{
		}

		[Token(Token = "0x6002139")]
		[Address(RVA = "0x1236788", Offset = "0x1236788", VA = "0x1236788")]
		private static void FollowTransform(GameObject avatarComponent, Transform followX, Transform followY, Transform followZ, Transform followRotation)
		{
		}

		[Token(Token = "0x600213A")]
		[Address(RVA = "0x123695C", Offset = "0x123695C", VA = "0x123695C")]
		public AvatarHMDSyncAction()
		{
		}
	}
}
namespace Assets.Scripts.UI.InGame.Options
{
	[Token(Token = "0x20004AB")]
	public class BlinderEffectStrengthSlider : MonoBehaviourPunCallbacks, IOption
	{
		[Token(Token = "0x20004AC")]
		[CompilerGenerated]
		private sealed class <Init>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public BlinderEffectStrengthSlider <>4__this;

			[Token(Token = "0x170003B2")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002146")]
				[Address(RVA = "0x1237134", Offset = "0x1237134", VA = "0x1237134", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003B3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002148")]
				[Address(RVA = "0x123717C", Offset = "0x123717C", VA = "0x123717C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002143")]
			[Address(RVA = "0x1236AFC", Offset = "0x1236AFC", VA = "0x1236AFC")]
			[DebuggerHidden]
			public <Init>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6002144")]
			[Address(RVA = "0x1236F30", Offset = "0x1236F30", VA = "0x1236F30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002145")]
			[Address(RVA = "0x1236F34", Offset = "0x1236F34", VA = "0x1236F34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002147")]
			[Address(RVA = "0x123713C", Offset = "0x123713C", VA = "0x123713C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004AD")]
		[CompilerGenerated]
		private sealed class <_ValueChangedCoroutine>d__5 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float raw;

			[Token(Token = "0x4001E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BlinderEffectStrengthSlider <>4__this;

			[Token(Token = "0x170003B4")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600214C")]
				[Address(RVA = "0x12372EC", Offset = "0x12372EC", VA = "0x12372EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003B5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600214E")]
				[Address(RVA = "0x1237334", Offset = "0x1237334", VA = "0x1237334", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002149")]
			[Address(RVA = "0x1236D0C", Offset = "0x1236D0C", VA = "0x1236D0C")]
			[DebuggerHidden]
			public <_ValueChangedCoroutine>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600214A")]
			[Address(RVA = "0x12371D8", Offset = "0x12371D8", VA = "0x12371D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600214B")]
			[Address(RVA = "0x12371DC", Offset = "0x12371DC", VA = "0x12371DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600214D")]
			[Address(RVA = "0x12372F4", Offset = "0x12372F4", VA = "0x12372F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004AE")]
		[CompilerGenerated]
		private sealed class <OnJoinValueChangedCoroutine>d__8 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public BlinderEffectStrengthSlider <>4__this;

			[Token(Token = "0x170003B6")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002152")]
				[Address(RVA = "0x12374FC", Offset = "0x12374FC", VA = "0x12374FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003B7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002154")]
				[Address(RVA = "0x1237544", Offset = "0x1237544", VA = "0x1237544", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600214F")]
			[Address(RVA = "0x1236F00", Offset = "0x1236F00", VA = "0x1236F00")]
			[DebuggerHidden]
			public <OnJoinValueChangedCoroutine>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6002150")]
			[Address(RVA = "0x1237390", Offset = "0x1237390", VA = "0x1237390", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002151")]
			[Address(RVA = "0x1237394", Offset = "0x1237394", VA = "0x1237394", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002153")]
			[Address(RVA = "0x1237504", Offset = "0x1237504", VA = "0x1237504", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Slider slider;

		[Token(Token = "0x4001E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI amountText;

		[Token(Token = "0x600213B")]
		[Address(RVA = "0x1236964", Offset = "0x1236964", VA = "0x1236964", Slot = "54")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x600213C")]
		[Address(RVA = "0x1236A88", Offset = "0x1236A88", VA = "0x1236A88")]
		[IteratorStateMachine(typeof(<Init>d__3))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x600213D")]
		[Address(RVA = "0x1236B24", Offset = "0x1236B24", VA = "0x1236B24")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x600213E")]
		[Address(RVA = "0x1236C88", Offset = "0x1236C88", VA = "0x1236C88")]
		[IteratorStateMachine(typeof(<_ValueChangedCoroutine>d__5))]
		private IEnumerator<float> _ValueChangedCoroutine(float raw)
		{
			return null;
		}

		[Token(Token = "0x600213F")]
		[Address(RVA = "0x1236D34", Offset = "0x1236D34", VA = "0x1236D34")]
		private void ValueChanged(float value)
		{
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0x1236E18", Offset = "0x1236E18", VA = "0x1236E18", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002141")]
		[Address(RVA = "0x1236E8C", Offset = "0x1236E8C", VA = "0x1236E8C")]
		[IteratorStateMachine(typeof(<OnJoinValueChangedCoroutine>d__8))]
		private IEnumerator<float> OnJoinValueChangedCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002142")]
		[Address(RVA = "0x1236F28", Offset = "0x1236F28", VA = "0x1236F28")]
		public BlinderEffectStrengthSlider()
		{
		}
	}
	[Token(Token = "0x20004AF")]
	public class BloomSlider : MonoBehaviour, IOption
	{
		[Token(Token = "0x20004B0")]
		[CompilerGenerated]
		private sealed class <Init>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public BloomSlider <>4__this;

			[Token(Token = "0x170003B8")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600215E")]
				[Address(RVA = "0x1237EEC", Offset = "0x1237EEC", VA = "0x1237EEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002160")]
				[Address(RVA = "0x1237F34", Offset = "0x1237F34", VA = "0x1237F34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600215B")]
			[Address(RVA = "0x123766C", Offset = "0x123766C", VA = "0x123766C")]
			[DebuggerHidden]
			public <Init>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600215C")]
			[Address(RVA = "0x1237BD4", Offset = "0x1237BD4", VA = "0x1237BD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600215D")]
			[Address(RVA = "0x1237BD8", Offset = "0x1237BD8", VA = "0x1237BD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600215F")]
			[Address(RVA = "0x1237EF4", Offset = "0x1237EF4", VA = "0x1237EF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Slider slider;

		[Token(Token = "0x4001E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI percentText;

		[Token(Token = "0x4001E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private VolumeProfile[] postProcessVolumes;

		[Token(Token = "0x4001E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Bloom bloom;

		[Token(Token = "0x4001E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float originalIntensity;

		[Token(Token = "0x6002155")]
		[Address(RVA = "0x12375A0", Offset = "0x12375A0", VA = "0x12375A0", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002156")]
		[Address(RVA = "0x12375F8", Offset = "0x12375F8", VA = "0x12375F8")]
		[IteratorStateMachine(typeof(<Init>d__6))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x6002157")]
		[Address(RVA = "0x1237694", Offset = "0x1237694", VA = "0x1237694")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0x1237A04", Offset = "0x1237A04", VA = "0x1237A04")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002159")]
		[Address(RVA = "0x12377C0", Offset = "0x12377C0", VA = "0x12377C0")]
		private void ValueChanged(float raw)
		{
		}

		[Token(Token = "0x600215A")]
		[Address(RVA = "0x1237BC4", Offset = "0x1237BC4", VA = "0x1237BC4")]
		public BloomSlider()
		{
		}
	}
	[Token(Token = "0x20004B1")]
	public class HipSlotPositionSlider : MonoBehaviourPunCallbacks, IOption
	{
		[Token(Token = "0x20004B2")]
		[CompilerGenerated]
		private sealed class <Init>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HipSlotPositionSlider <>4__this;

			[Token(Token = "0x170003BA")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600216C")]
				[Address(RVA = "0x123874C", Offset = "0x123874C", VA = "0x123874C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003BB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600216E")]
				[Address(RVA = "0x1238794", Offset = "0x1238794", VA = "0x1238794", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002169")]
			[Address(RVA = "0x1238128", Offset = "0x1238128", VA = "0x1238128")]
			[DebuggerHidden]
			public <Init>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x600216A")]
			[Address(RVA = "0x1238548", Offset = "0x1238548", VA = "0x1238548", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600216B")]
			[Address(RVA = "0x123854C", Offset = "0x123854C", VA = "0x123854C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600216D")]
			[Address(RVA = "0x1238754", Offset = "0x1238754", VA = "0x1238754", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004B3")]
		[CompilerGenerated]
		private sealed class <_ValueChangedCoroutine>d__5 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float raw;

			[Token(Token = "0x4001E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HipSlotPositionSlider <>4__this;

			[Token(Token = "0x170003BC")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002172")]
				[Address(RVA = "0x1238904", Offset = "0x1238904", VA = "0x1238904", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002174")]
				[Address(RVA = "0x123894C", Offset = "0x123894C", VA = "0x123894C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600216F")]
			[Address(RVA = "0x1238338", Offset = "0x1238338", VA = "0x1238338")]
			[DebuggerHidden]
			public <_ValueChangedCoroutine>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6002170")]
			[Address(RVA = "0x12387F0", Offset = "0x12387F0", VA = "0x12387F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002171")]
			[Address(RVA = "0x12387F4", Offset = "0x12387F4", VA = "0x12387F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002173")]
			[Address(RVA = "0x123890C", Offset = "0x123890C", VA = "0x123890C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004B4")]
		[CompilerGenerated]
		private sealed class <OnJoinValueChangedCoroutine>d__8 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HipSlotPositionSlider <>4__this;

			[Token(Token = "0x170003BE")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002178")]
				[Address(RVA = "0x1238B14", Offset = "0x1238B14", VA = "0x1238B14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600217A")]
				[Address(RVA = "0x1238B5C", Offset = "0x1238B5C", VA = "0x1238B5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002175")]
			[Address(RVA = "0x1238518", Offset = "0x1238518", VA = "0x1238518")]
			[DebuggerHidden]
			public <OnJoinValueChangedCoroutine>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6002176")]
			[Address(RVA = "0x12389A8", Offset = "0x12389A8", VA = "0x12389A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002177")]
			[Address(RVA = "0x12389AC", Offset = "0x12389AC", VA = "0x12389AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002179")]
			[Address(RVA = "0x1238B1C", Offset = "0x1238B1C", VA = "0x1238B1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Slider slider;

		[Token(Token = "0x4001E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI amountText;

		[Token(Token = "0x6002161")]
		[Address(RVA = "0x1237F90", Offset = "0x1237F90", VA = "0x1237F90", Slot = "54")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002162")]
		[Address(RVA = "0x12380B4", Offset = "0x12380B4", VA = "0x12380B4")]
		[IteratorStateMachine(typeof(<Init>d__3))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x6002163")]
		[Address(RVA = "0x1238150", Offset = "0x1238150", VA = "0x1238150")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002164")]
		[Address(RVA = "0x12382B4", Offset = "0x12382B4", VA = "0x12382B4")]
		[IteratorStateMachine(typeof(<_ValueChangedCoroutine>d__5))]
		private IEnumerator<float> _ValueChangedCoroutine(float raw)
		{
			return null;
		}

		[Token(Token = "0x6002165")]
		[Address(RVA = "0x1238360", Offset = "0x1238360", VA = "0x1238360")]
		private void ValueChanged(float value)
		{
		}

		[Token(Token = "0x6002166")]
		[Address(RVA = "0x1238430", Offset = "0x1238430", VA = "0x1238430", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002167")]
		[Address(RVA = "0x12384A4", Offset = "0x12384A4", VA = "0x12384A4")]
		[IteratorStateMachine(typeof(<OnJoinValueChangedCoroutine>d__8))]
		private IEnumerator<float> OnJoinValueChangedCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002168")]
		[Address(RVA = "0x1238540", Offset = "0x1238540", VA = "0x1238540")]
		public HipSlotPositionSlider()
		{
		}
	}
	[Token(Token = "0x20004B5")]
	public class OffsetHandAngleSlider : MonoBehaviourPunCallbacks, IOption, IPointerUpHandler, IEventSystemHandler
	{
		[Token(Token = "0x20004B6")]
		[CompilerGenerated]
		private sealed class <Init>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public OffsetHandAngleSlider <>4__this;

			[Token(Token = "0x170003C0")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002187")]
				[Address(RVA = "0x12393A0", Offset = "0x12393A0", VA = "0x12393A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002189")]
				[Address(RVA = "0x12393E8", Offset = "0x12393E8", VA = "0x12393E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002184")]
			[Address(RVA = "0x1238D50", Offset = "0x1238D50", VA = "0x1238D50")]
			[DebuggerHidden]
			public <Init>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6002185")]
			[Address(RVA = "0x123919C", Offset = "0x123919C", VA = "0x123919C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002186")]
			[Address(RVA = "0x12391A0", Offset = "0x12391A0", VA = "0x12391A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002188")]
			[Address(RVA = "0x12393A8", Offset = "0x12393A8", VA = "0x12393A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004B7")]
		[CompilerGenerated]
		private sealed class <_ValueChanged>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float raw;

			[Token(Token = "0x4001E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetHandAngleSlider <>4__this;

			[Token(Token = "0x170003C2")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600218D")]
				[Address(RVA = "0x12395F8", Offset = "0x12395F8", VA = "0x12395F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600218F")]
				[Address(RVA = "0x1239640", Offset = "0x1239640", VA = "0x1239640", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600218A")]
			[Address(RVA = "0x1238FDC", Offset = "0x1238FDC", VA = "0x1238FDC")]
			[DebuggerHidden]
			public <_ValueChanged>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600218B")]
			[Address(RVA = "0x1239444", Offset = "0x1239444", VA = "0x1239444", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600218C")]
			[Address(RVA = "0x1239448", Offset = "0x1239448", VA = "0x1239448", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600218E")]
			[Address(RVA = "0x1239600", Offset = "0x1239600", VA = "0x1239600", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004B8")]
		[CompilerGenerated]
		private sealed class <OnJoinValueChangedCoroutine>d__9 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public OffsetHandAngleSlider <>4__this;

			[Token(Token = "0x170003C4")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002193")]
				[Address(RVA = "0x1239808", Offset = "0x1239808", VA = "0x1239808", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002195")]
				[Address(RVA = "0x1239850", Offset = "0x1239850", VA = "0x1239850", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002190")]
			[Address(RVA = "0x123916C", Offset = "0x123916C", VA = "0x123916C")]
			[DebuggerHidden]
			public <OnJoinValueChangedCoroutine>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6002191")]
			[Address(RVA = "0x123969C", Offset = "0x123969C", VA = "0x123969C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002192")]
			[Address(RVA = "0x12396A0", Offset = "0x12396A0", VA = "0x12396A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002194")]
			[Address(RVA = "0x1239810", Offset = "0x1239810", VA = "0x1239810", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Slider slider;

		[Token(Token = "0x4001E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI amountText;

		[Token(Token = "0x600217B")]
		[Address(RVA = "0x1238BB8", Offset = "0x1238BB8", VA = "0x1238BB8", Slot = "54")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0x1238CDC", Offset = "0x1238CDC", VA = "0x1238CDC")]
		[IteratorStateMachine(typeof(<Init>d__3))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x600217D")]
		[Address(RVA = "0x1238D78", Offset = "0x1238D78", VA = "0x1238D78", Slot = "55")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600217E")]
		[Address(RVA = "0x1238E80", Offset = "0x1238E80", VA = "0x1238E80")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x600217F")]
		[Address(RVA = "0x1238DFC", Offset = "0x1238DFC", VA = "0x1238DFC")]
		[IteratorStateMachine(typeof(<_ValueChanged>d__6))]
		private IEnumerator<float> _ValueChanged(float raw)
		{
			return null;
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0x1239004", Offset = "0x1239004", VA = "0x1239004")]
		private void SetAmountText(float raw)
		{
		}

		[Token(Token = "0x6002181")]
		[Address(RVA = "0x1239084", Offset = "0x1239084", VA = "0x1239084", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002182")]
		[Address(RVA = "0x12390F8", Offset = "0x12390F8", VA = "0x12390F8")]
		[IteratorStateMachine(typeof(<OnJoinValueChangedCoroutine>d__9))]
		private IEnumerator<float> OnJoinValueChangedCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002183")]
		[Address(RVA = "0x1239194", Offset = "0x1239194", VA = "0x1239194")]
		public OffsetHandAngleSlider()
		{
		}
	}
	[Token(Token = "0x20004B9")]
	public class PlayerHeightOffsetSlider : MonoBehaviourPunCallbacks, IOption, IPointerUpHandler, IEventSystemHandler
	{
		[Token(Token = "0x20004BA")]
		[CompilerGenerated]
		private sealed class <Init>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PlayerHeightOffsetSlider <>4__this;

			[Token(Token = "0x170003C6")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021A3")]
				[Address(RVA = "0x123A094", Offset = "0x123A094", VA = "0x123A094", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021A5")]
				[Address(RVA = "0x123A0DC", Offset = "0x123A0DC", VA = "0x123A0DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021A0")]
			[Address(RVA = "0x1239A44", Offset = "0x1239A44", VA = "0x1239A44")]
			[DebuggerHidden]
			public <Init>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60021A1")]
			[Address(RVA = "0x1239E90", Offset = "0x1239E90", VA = "0x1239E90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021A2")]
			[Address(RVA = "0x1239E94", Offset = "0x1239E94", VA = "0x1239E94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021A4")]
			[Address(RVA = "0x123A09C", Offset = "0x123A09C", VA = "0x123A09C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004BB")]
		[CompilerGenerated]
		private sealed class <_ValueChangedCoroutine>d__7 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float raw;

			[Token(Token = "0x4001EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerHeightOffsetSlider <>4__this;

			[Token(Token = "0x170003C8")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021A9")]
				[Address(RVA = "0x123A288", Offset = "0x123A288", VA = "0x123A288", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021AB")]
				[Address(RVA = "0x123A2D0", Offset = "0x123A2D0", VA = "0x123A2D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021A6")]
			[Address(RVA = "0x1239D50", Offset = "0x1239D50", VA = "0x1239D50")]
			[DebuggerHidden]
			public <_ValueChangedCoroutine>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60021A7")]
			[Address(RVA = "0x123A138", Offset = "0x123A138", VA = "0x123A138", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021A8")]
			[Address(RVA = "0x123A13C", Offset = "0x123A13C", VA = "0x123A13C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021AA")]
			[Address(RVA = "0x123A290", Offset = "0x123A290", VA = "0x123A290", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004BC")]
		[CompilerGenerated]
		private sealed class <OnJoinValueChangedCoroutine>d__10 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PlayerHeightOffsetSlider <>4__this;

			[Token(Token = "0x170003CA")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021AF")]
				[Address(RVA = "0x123A498", Offset = "0x123A498", VA = "0x123A498", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021B1")]
				[Address(RVA = "0x123A4E0", Offset = "0x123A4E0", VA = "0x123A4E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021AC")]
			[Address(RVA = "0x1239E60", Offset = "0x1239E60", VA = "0x1239E60")]
			[DebuggerHidden]
			public <OnJoinValueChangedCoroutine>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60021AD")]
			[Address(RVA = "0x123A32C", Offset = "0x123A32C", VA = "0x123A32C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021AE")]
			[Address(RVA = "0x123A330", Offset = "0x123A330", VA = "0x123A330", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021B0")]
			[Address(RVA = "0x123A4A0", Offset = "0x123A4A0", VA = "0x123A4A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Slider slider;

		[Token(Token = "0x4001EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI amountText;

		[Token(Token = "0x6002196")]
		[Address(RVA = "0x12398AC", Offset = "0x12398AC", VA = "0x12398AC", Slot = "54")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0x12399D0", Offset = "0x12399D0", VA = "0x12399D0")]
		[IteratorStateMachine(typeof(<Init>d__3))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0x1239A6C", Offset = "0x1239A6C", VA = "0x1239A6C")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002199")]
		[Address(RVA = "0x1239C54", Offset = "0x1239C54", VA = "0x1239C54", Slot = "55")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0x1239CD0", Offset = "0x1239CD0", VA = "0x1239CD0")]
		private void ChangeAmountText(float value)
		{
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0x1239BD0", Offset = "0x1239BD0", VA = "0x1239BD0")]
		[IteratorStateMachine(typeof(<_ValueChangedCoroutine>d__7))]
		private IEnumerator<float> _ValueChangedCoroutine(float raw)
		{
			return null;
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0x1239C84", Offset = "0x1239C84", VA = "0x1239C84")]
		private void ValueChanged(float value)
		{
		}

		[Token(Token = "0x600219D")]
		[Address(RVA = "0x1239D78", Offset = "0x1239D78", VA = "0x1239D78", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0x1239DEC", Offset = "0x1239DEC", VA = "0x1239DEC")]
		[IteratorStateMachine(typeof(<OnJoinValueChangedCoroutine>d__10))]
		private IEnumerator<float> OnJoinValueChangedCoroutine()
		{
			return null;
		}

		[Token(Token = "0x600219F")]
		[Address(RVA = "0x1239E88", Offset = "0x1239E88", VA = "0x1239E88")]
		public PlayerHeightOffsetSlider()
		{
		}
	}
	[Token(Token = "0x20004BD")]
	public class PopupScaleSlider : MonoBehaviour, IOption
	{
		[Token(Token = "0x20004BE")]
		[CompilerGenerated]
		private sealed class <Init>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PopupScaleSlider <>4__this;

			[Token(Token = "0x170003CC")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021BC")]
				[Address(RVA = "0x123AC70", Offset = "0x123AC70", VA = "0x123AC70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021BE")]
				[Address(RVA = "0x123ACB8", Offset = "0x123ACB8", VA = "0x123ACB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021B9")]
			[Address(RVA = "0x123A650", Offset = "0x123A650", VA = "0x123A650")]
			[DebuggerHidden]
			public <Init>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60021BA")]
			[Address(RVA = "0x123A9E8", Offset = "0x123A9E8", VA = "0x123A9E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021BB")]
			[Address(RVA = "0x123A9EC", Offset = "0x123A9EC", VA = "0x123A9EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021BD")]
			[Address(RVA = "0x123AC78", Offset = "0x123AC78", VA = "0x123AC78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004BF")]
		[CompilerGenerated]
		private sealed class <_SetOption>d__7 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float scale;

			[Token(Token = "0x170003CE")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021C2")]
				[Address(RVA = "0x123AF3C", Offset = "0x123AF3C", VA = "0x123AF3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021C4")]
				[Address(RVA = "0x123AF84", Offset = "0x123AF84", VA = "0x123AF84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021BF")]
			[Address(RVA = "0x123A9B8", Offset = "0x123A9B8", VA = "0x123A9B8")]
			[DebuggerHidden]
			public <_SetOption>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60021C0")]
			[Address(RVA = "0x123AD14", Offset = "0x123AD14", VA = "0x123AD14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021C1")]
			[Address(RVA = "0x123AD18", Offset = "0x123AD18", VA = "0x123AD18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021C3")]
			[Address(RVA = "0x123AF44", Offset = "0x123AF44", VA = "0x123AF44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Slider slider;

		[Token(Token = "0x4001EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI percentText;

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0x123A53C", Offset = "0x123A53C", VA = "0x123A53C", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0x123A5DC", Offset = "0x123A5DC", VA = "0x123A5DC")]
		[IteratorStateMachine(typeof(<Init>d__3))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0x123A678", Offset = "0x123A678", VA = "0x123A678")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x60021B5")]
		[Address(RVA = "0x123A8A0", Offset = "0x123A8A0", VA = "0x123A8A0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0x123A7A4", Offset = "0x123A7A4", VA = "0x123A7A4")]
		private void ValueChanged(float raw)
		{
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0x123A948", Offset = "0x123A948", VA = "0x123A948")]
		[IteratorStateMachine(typeof(<_SetOption>d__7))]
		private IEnumerator<float> _SetOption(float scale)
		{
			return null;
		}

		[Token(Token = "0x60021B8")]
		[Address(RVA = "0x123A9E0", Offset = "0x123A9E0", VA = "0x123A9E0")]
		public PopupScaleSlider()
		{
		}
	}
	[Token(Token = "0x20004C0")]
	public class PopupTransparencySlider : MonoBehaviour, IOption
	{
		[Token(Token = "0x20004C1")]
		[CompilerGenerated]
		private sealed class <Init>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PopupTransparencySlider <>4__this;

			[Token(Token = "0x170003D0")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021CF")]
				[Address(RVA = "0x123B6F4", Offset = "0x123B6F4", VA = "0x123B6F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021D1")]
				[Address(RVA = "0x123B73C", Offset = "0x123B73C", VA = "0x123B73C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021CC")]
			[Address(RVA = "0x123B0F4", Offset = "0x123B0F4", VA = "0x123B0F4")]
			[DebuggerHidden]
			public <Init>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60021CD")]
			[Address(RVA = "0x123B46C", Offset = "0x123B46C", VA = "0x123B46C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021CE")]
			[Address(RVA = "0x123B470", Offset = "0x123B470", VA = "0x123B470", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021D0")]
			[Address(RVA = "0x123B6FC", Offset = "0x123B6FC", VA = "0x123B6FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004C2")]
		[CompilerGenerated]
		private sealed class <_SetOption>d__7 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float transparency;

			[Token(Token = "0x170003D2")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021D5")]
				[Address(RVA = "0x123B9C0", Offset = "0x123B9C0", VA = "0x123B9C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021D7")]
				[Address(RVA = "0x123BA08", Offset = "0x123BA08", VA = "0x123BA08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021D2")]
			[Address(RVA = "0x123B43C", Offset = "0x123B43C", VA = "0x123B43C")]
			[DebuggerHidden]
			public <_SetOption>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60021D3")]
			[Address(RVA = "0x123B798", Offset = "0x123B798", VA = "0x123B798", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021D4")]
			[Address(RVA = "0x123B79C", Offset = "0x123B79C", VA = "0x123B79C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021D6")]
			[Address(RVA = "0x123B9C8", Offset = "0x123B9C8", VA = "0x123B9C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Slider slider;

		[Token(Token = "0x4001EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI percentText;

		[Token(Token = "0x60021C5")]
		[Address(RVA = "0x123AFE0", Offset = "0x123AFE0", VA = "0x123AFE0", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x60021C6")]
		[Address(RVA = "0x123B080", Offset = "0x123B080", VA = "0x123B080")]
		[IteratorStateMachine(typeof(<Init>d__3))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x60021C7")]
		[Address(RVA = "0x123B11C", Offset = "0x123B11C", VA = "0x123B11C")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x60021C8")]
		[Address(RVA = "0x123B324", Offset = "0x123B324", VA = "0x123B324")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0x123B248", Offset = "0x123B248", VA = "0x123B248")]
		private void ValueChanged(float raw)
		{
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0x123B3CC", Offset = "0x123B3CC", VA = "0x123B3CC")]
		[IteratorStateMachine(typeof(<_SetOption>d__7))]
		private IEnumerator<float> _SetOption(float transparency)
		{
			return null;
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0x123B464", Offset = "0x123B464", VA = "0x123B464")]
		public PopupTransparencySlider()
		{
		}
	}
	[Token(Token = "0x20004C3")]
	public class RenderScaleSlider : MonoBehaviour, IOption
	{
		[Token(Token = "0x20004C4")]
		[CompilerGenerated]
		private sealed class <Init>d__8 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RenderScaleSlider <>4__this;

			[Token(Token = "0x170003D4")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021E2")]
				[Address(RVA = "0x123C288", Offset = "0x123C288", VA = "0x123C288", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021E4")]
				[Address(RVA = "0x123C2D0", Offset = "0x123C2D0", VA = "0x123C2D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021DF")]
			[Address(RVA = "0x123BC3C", Offset = "0x123BC3C", VA = "0x123BC3C")]
			[DebuggerHidden]
			public <Init>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60021E0")]
			[Address(RVA = "0x123C000", Offset = "0x123C000", VA = "0x123C000", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021E1")]
			[Address(RVA = "0x123C004", Offset = "0x123C004", VA = "0x123C004", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021E3")]
			[Address(RVA = "0x123C290", Offset = "0x123C290", VA = "0x123C290", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Slider slider;

		[Token(Token = "0x4001EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UniversalRenderPipelineAsset pipelineAsset;

		[Token(Token = "0x4001EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI percentText;

		[Token(Token = "0x4001EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastChangeTime;

		[Token(Token = "0x4001EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool changed;

		[Token(Token = "0x4001EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float newScale;

		[Token(Token = "0x4001EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float originalScale;

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0x123BA64", Offset = "0x123BA64", VA = "0x123BA64", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0x123BBC8", Offset = "0x123BBC8", VA = "0x123BBC8")]
		[IteratorStateMachine(typeof(<Init>d__8))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0x123BC64", Offset = "0x123BC64", VA = "0x123BC64")]
		private void Update()
		{
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0x123BCB4", Offset = "0x123BCB4", VA = "0x123BCB4")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0x123BF48", Offset = "0x123BF48", VA = "0x123BF48")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60021DD")]
		[Address(RVA = "0x123BE0C", Offset = "0x123BE0C", VA = "0x123BE0C")]
		private void ValueChanged(float raw)
		{
		}

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0x123BFF0", Offset = "0x123BFF0", VA = "0x123BFF0")]
		public RenderScaleSlider()
		{
		}
	}
	[Token(Token = "0x20004C5")]
	public class SmoothTurningSpeed : MonoBehaviour, IOption
	{
		[Token(Token = "0x20004C6")]
		[CompilerGenerated]
		private sealed class <Init>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SmoothTurningSpeed <>4__this;

			[Token(Token = "0x170003D6")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021EE")]
				[Address(RVA = "0x123C9C4", Offset = "0x123C9C4", VA = "0x123C9C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021F0")]
				[Address(RVA = "0x123CA0C", Offset = "0x123CA0C", VA = "0x123CA0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021EB")]
			[Address(RVA = "0x123C4C4", Offset = "0x123C4C4", VA = "0x123C4C4")]
			[DebuggerHidden]
			public <Init>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60021EC")]
			[Address(RVA = "0x123C7C0", Offset = "0x123C7C0", VA = "0x123C7C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021ED")]
			[Address(RVA = "0x123C7C4", Offset = "0x123C7C4", VA = "0x123C7C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021EF")]
			[Address(RVA = "0x123C9CC", Offset = "0x123C9CC", VA = "0x123C9CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004C7")]
		[CompilerGenerated]
		private sealed class <_ValueChangedCoroutine>d__5 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float raw;

			[Token(Token = "0x4001ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SmoothTurningSpeed <>4__this;

			[Token(Token = "0x170003D8")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60021F4")]
				[Address(RVA = "0x123CBB8", Offset = "0x123CBB8", VA = "0x123CBB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021F6")]
				[Address(RVA = "0x123CC00", Offset = "0x123CC00", VA = "0x123CC00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021F1")]
			[Address(RVA = "0x123C6D4", Offset = "0x123C6D4", VA = "0x123C6D4")]
			[DebuggerHidden]
			public <_ValueChangedCoroutine>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60021F2")]
			[Address(RVA = "0x123CA68", Offset = "0x123CA68", VA = "0x123CA68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021F3")]
			[Address(RVA = "0x123CA6C", Offset = "0x123CA6C", VA = "0x123CA6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021F5")]
			[Address(RVA = "0x123CBC0", Offset = "0x123CBC0", VA = "0x123CBC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Slider slider;

		[Token(Token = "0x4001EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI amountText;

		[Token(Token = "0x60021E5")]
		[Address(RVA = "0x123C32C", Offset = "0x123C32C", VA = "0x123C32C", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x60021E6")]
		[Address(RVA = "0x123C450", Offset = "0x123C450", VA = "0x123C450")]
		[IteratorStateMachine(typeof(<Init>d__3))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x60021E7")]
		[Address(RVA = "0x123C4EC", Offset = "0x123C4EC", VA = "0x123C4EC")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x60021E8")]
		[Address(RVA = "0x123C650", Offset = "0x123C650", VA = "0x123C650")]
		[IteratorStateMachine(typeof(<_ValueChangedCoroutine>d__5))]
		private IEnumerator<float> _ValueChangedCoroutine(float raw)
		{
			return null;
		}

		[Token(Token = "0x60021E9")]
		[Address(RVA = "0x123C6FC", Offset = "0x123C6FC", VA = "0x123C6FC")]
		private void ValueChanged(float value)
		{
		}

		[Token(Token = "0x60021EA")]
		[Address(RVA = "0x123C7B8", Offset = "0x123C7B8", VA = "0x123C7B8")]
		public SmoothTurningSpeed()
		{
		}
	}
}
namespace Assets.Scripts.Endings.MeteorEnding
{
	[Token(Token = "0x20004C8")]
	public class MeteorAreaTrigger : MonoBehaviour
	{
		[Token(Token = "0x60021F7")]
		[Address(RVA = "0x123CC5C", Offset = "0x123CC5C", VA = "0x123CC5C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0x123CDAC", Offset = "0x123CDAC", VA = "0x123CDAC")]
		public MeteorAreaTrigger()
		{
		}
	}
}
namespace Ending4
{
	[Token(Token = "0x20004C9")]
	public class EndingFourArtifactKey : Prop
	{
		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[SerializeField]
		private bool commandCenterKey;

		[Token(Token = "0x4001ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[SerializeField]
		private GameObject voiceLineTrigger;

		[Token(Token = "0x4001ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private HVRGrabbable myGrabbable;

		[Token(Token = "0x4001ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private Transform originalParent2;

		[Token(Token = "0x4001ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Vector3 originalLocalPosition;

		[Token(Token = "0x4001ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private Quaternion originalLocalRotation;

		[Token(Token = "0x4001ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private RigidBodyFloat rbFloat;

		[Token(Token = "0x4001ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private bool dataLoaded;

		[Token(Token = "0x4001ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x209")]
		private bool voiceLineAlreadyPlayed;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private PhotonView cachedPhotonView;

		[Token(Token = "0x60021F9")]
		[Address(RVA = "0x123CDB4", Offset = "0x123CDB4", VA = "0x123CDB4", Slot = "18")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0x123CEFC", Offset = "0x123CEFC", VA = "0x123CEFC", Slot = "23")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60021FB")]
		[Address(RVA = "0x123CF1C", Offset = "0x123CF1C", VA = "0x123CF1C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60021FC")]
		[Address(RVA = "0x123D030", Offset = "0x123D030", VA = "0x123D030")]
		private void CommandCenterKeySetup()
		{
		}

		[Token(Token = "0x60021FD")]
		[Address(RVA = "0x123D314", Offset = "0x123D314", VA = "0x123D314")]
		private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60021FE")]
		[Address(RVA = "0x123D49C", Offset = "0x123D49C", VA = "0x123D49C")]
		private void Released(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60021FF")]
		[Address(RVA = "0x123D2F4", Offset = "0x123D2F4", VA = "0x123D2F4")]
		public new void SetKinematic(bool isKinematic)
		{
		}

		[Token(Token = "0x6002200")]
		[Address(RVA = "0x123D558", Offset = "0x123D558", VA = "0x123D558", Slot = "20")]
		public override void onLooted()
		{
		}

		[Token(Token = "0x6002201")]
		[Address(RVA = "0x123D6E8", Offset = "0x123D6E8", VA = "0x123D6E8")]
		public static void ArtifactLooted()
		{
		}

		[Token(Token = "0x6002202")]
		[Address(RVA = "0x123D814", Offset = "0x123D814", VA = "0x123D814")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002203")]
		[Address(RVA = "0x123D2CC", Offset = "0x123D2CC", VA = "0x123D2CC")]
		public void SetActive(bool active)
		{
		}

		[Token(Token = "0x6002204")]
		[Address(RVA = "0x123D910", Offset = "0x123D910", VA = "0x123D910", Slot = "22")]
		protected override void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002205")]
		[Address(RVA = "0x123DC80", Offset = "0x123DC80", VA = "0x123DC80")]
		[PunRPC]
		private void PlayVoicelineRPC(bool first)
		{
		}

		[Token(Token = "0x6002206")]
		[Address(RVA = "0x123DCF8", Offset = "0x123DCF8", VA = "0x123DCF8")]
		public void ToggleSync(bool sync)
		{
		}

		[Token(Token = "0x6002207")]
		[Address(RVA = "0x123DD98", Offset = "0x123DD98", VA = "0x123DD98")]
		public EndingFourArtifactKey()
		{
		}
	}
	[Token(Token = "0x20004CA")]
	public class EndingFourBridgeController : MonoBehaviourPun
	{
		[Token(Token = "0x20004CB")]
		private class BridgePart
		{
			[Token(Token = "0x4001EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody myRB;

			[Token(Token = "0x4001EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Collider myCollider;

			[Token(Token = "0x4001EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 originalLocalPosition;

			[Token(Token = "0x4001EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion originalLocalRotation;

			[Token(Token = "0x600220E")]
			[Address(RVA = "0x123E0A0", Offset = "0x123E0A0", VA = "0x123E0A0")]
			public BridgePart()
			{
			}
		}

		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool useAnimator;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioSource bridgeBreakingAudioSource;

		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject invisibleWallsObject;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<BridgePart> breakingObjects;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool alreadyTriggered;

		[Token(Token = "0x6002208")]
		[Address(RVA = "0x123DE30", Offset = "0x123DE30", VA = "0x123DE30")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0x123E0A8", Offset = "0x123E0A8", VA = "0x123E0A8")]
		private void Start()
		{
		}

		[Token(Token = "0x600220A")]
		[Address(RVA = "0x123E0D8", Offset = "0x123E0D8", VA = "0x123E0D8")]
		[PunRPC]
		private void BreakBridge()
		{
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0x123E270", Offset = "0x123E270", VA = "0x123E270")]
		public void ResetBridge()
		{
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0x123E4C0", Offset = "0x123E4C0", VA = "0x123E4C0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0x123E69C", Offset = "0x123E69C", VA = "0x123E69C")]
		public EndingFourBridgeController()
		{
		}
	}
	[Token(Token = "0x20004CC")]
	public class EndingFourClaytonAvatar : MonoBehaviour
	{
		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EndingFourEndingRoomManager endingFourEndingRoom;

		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CosmeticController claytonCosmeticController;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator avatarAnimator;

		[Token(Token = "0x600220F")]
		[Address(RVA = "0x123E724", Offset = "0x123E724", VA = "0x123E724")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002210")]
		[Address(RVA = "0x123E78C", Offset = "0x123E78C", VA = "0x123E78C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002211")]
		[Address(RVA = "0x123E920", Offset = "0x123E920", VA = "0x123E920")]
		private void Start()
		{
		}

		[Token(Token = "0x6002212")]
		[Address(RVA = "0x123E964", Offset = "0x123E964", VA = "0x123E964")]
		public void PlayAnimation()
		{
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0x123E9D4", Offset = "0x123E9D4", VA = "0x123E9D4")]
		public void PlayVoiceline()
		{
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0x123EA3C", Offset = "0x123EA3C", VA = "0x123EA3C")]
		public void CloseDoors()
		{
		}

		[Token(Token = "0x6002215")]
		[Address(RVA = "0x123EAEC", Offset = "0x123EAEC", VA = "0x123EAEC")]
		public EndingFourClaytonAvatar()
		{
		}
	}
	[Token(Token = "0x20004CD")]
	public class EndingFourClaytonsHeadJar : MonoBehaviour
	{
		[Token(Token = "0x20004CE")]
		[CompilerGenerated]
		private sealed class <_ForceJarToPlayerHead>d__15 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourClaytonsHeadJar <>4__this;

			[Token(Token = "0x4001EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Transform <leftHandControllerOffsetTransform>5__2;

			[Token(Token = "0x4001EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform <rightHandControllerOffsetTransform>5__3;

			[Token(Token = "0x4001EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Quaternion <newRotL>5__4;

			[Token(Token = "0x4001EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Quaternion <newRotR>5__5;

			[Token(Token = "0x4001EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <time>5__6;

			[Token(Token = "0x4001EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <duration>5__7;

			[Token(Token = "0x170003DA")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002221")]
				[Address(RVA = "0x1240148", Offset = "0x1240148", VA = "0x1240148", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002223")]
				[Address(RVA = "0x1240190", Offset = "0x1240190", VA = "0x1240190", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600221E")]
			[Address(RVA = "0x123F1BC", Offset = "0x123F1BC", VA = "0x123F1BC")]
			[DebuggerHidden]
			public <_ForceJarToPlayerHead>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x600221F")]
			[Address(RVA = "0x123F1F4", Offset = "0x123F1F4", VA = "0x123F1F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002220")]
			[Address(RVA = "0x123F1F8", Offset = "0x123F1F8", VA = "0x123F1F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002222")]
			[Address(RVA = "0x1240150", Offset = "0x1240150", VA = "0x1240150", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EndingFourEndingRoomManager endingFourEndingRoomManager;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource skullSawAudioSource;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HVRGrabbable myGrabbable;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody myRB;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform originalParent;

		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 originalLocalPosition;

		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion originalLocalRotation;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 originalLeftHandControllerOffsetPos;

		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 originalRightHandControllerOffsetPos;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool hasbeenInit;

		[Token(Token = "0x6002216")]
		[Address(RVA = "0x123EAF4", Offset = "0x123EAF4", VA = "0x123EAF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002217")]
		[Address(RVA = "0x123EC20", Offset = "0x123EC20", VA = "0x123EC20")]
		private void CacheOriginals()
		{
		}

		[Token(Token = "0x6002218")]
		[Address(RVA = "0x123ECC4", Offset = "0x123ECC4", VA = "0x123ECC4")]
		private void Grabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6002219")]
		[Address(RVA = "0x123EDFC", Offset = "0x123EDFC", VA = "0x123EDFC")]
		public void Activate()
		{
		}

		[Token(Token = "0x600221A")]
		[Address(RVA = "0x123EF94", Offset = "0x123EF94", VA = "0x123EF94")]
		public void ResetHeadJar()
		{
		}

		[Token(Token = "0x600221B")]
		[Address(RVA = "0x123ED88", Offset = "0x123ED88", VA = "0x123ED88")]
		[IteratorStateMachine(typeof(<_ForceJarToPlayerHead>d__15))]
		private IEnumerator<float> _ForceJarToPlayerHead()
		{
			return null;
		}

		[Token(Token = "0x600221C")]
		[Address(RVA = "0x123F1E4", Offset = "0x123F1E4", VA = "0x123F1E4")]
		public HVRGrabbable GetGrababbale()
		{
			return null;
		}

		[Token(Token = "0x600221D")]
		[Address(RVA = "0x123F1EC", Offset = "0x123F1EC", VA = "0x123F1EC")]
		public EndingFourClaytonsHeadJar()
		{
		}
	}
	[Token(Token = "0x20004CF")]
	public class EndingFourDisableAutoFallingResetTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool alreadyTriggered;

		[Token(Token = "0x6002224")]
		[Address(RVA = "0x12401EC", Offset = "0x12401EC", VA = "0x12401EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002225")]
		[Address(RVA = "0x12401F4", Offset = "0x12401F4", VA = "0x12401F4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002226")]
		[Address(RVA = "0x124030C", Offset = "0x124030C", VA = "0x124030C")]
		public EndingFourDisableAutoFallingResetTrigger()
		{
		}
	}
	[Token(Token = "0x20004D0")]
	public class EndingFourEndingRoomManager : MonoBehaviourPun
	{
		[Token(Token = "0x20004D1")]
		[CompilerGenerated]
		private sealed class <_WaitUntilVoiceLineIsFinished>d__33 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourEndingRoomManager <>4__this;

			[Token(Token = "0x170003DC")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600224A")]
				[Address(RVA = "0x1241DEC", Offset = "0x1241DEC", VA = "0x1241DEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003DD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600224C")]
				[Address(RVA = "0x1241E34", Offset = "0x1241E34", VA = "0x1241E34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002247")]
			[Address(RVA = "0x1241D30", Offset = "0x1241D30", VA = "0x1241D30")]
			[DebuggerHidden]
			public <_WaitUntilVoiceLineIsFinished>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6002248")]
			[Address(RVA = "0x1241D58", Offset = "0x1241D58", VA = "0x1241D58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002249")]
			[Address(RVA = "0x1241D5C", Offset = "0x1241D5C", VA = "0x1241D5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600224B")]
			[Address(RVA = "0x1241DF4", Offset = "0x1241DF4", VA = "0x1241DF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004D2")]
		[CompilerGenerated]
		private sealed class <_Crank1Moving>d__37 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourEndingRoomManager <>4__this;

			[Token(Token = "0x4001F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float <timeToStop>5__2;

			[Token(Token = "0x170003DE")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002250")]
				[Address(RVA = "0x1242014", Offset = "0x1242014", VA = "0x1242014", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003DF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002252")]
				[Address(RVA = "0x124205C", Offset = "0x124205C", VA = "0x124205C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600224D")]
			[Address(RVA = "0x1241E90", Offset = "0x1241E90", VA = "0x1241E90")]
			[DebuggerHidden]
			public <_Crank1Moving>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x600224E")]
			[Address(RVA = "0x1241EB8", Offset = "0x1241EB8", VA = "0x1241EB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600224F")]
			[Address(RVA = "0x1241EBC", Offset = "0x1241EBC", VA = "0x1241EBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002251")]
			[Address(RVA = "0x124201C", Offset = "0x124201C", VA = "0x124201C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004D3")]
		[CompilerGenerated]
		private sealed class <_Crank2Moving>d__39 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourEndingRoomManager <>4__this;

			[Token(Token = "0x4001F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float <timeToStop>5__2;

			[Token(Token = "0x170003E0")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002256")]
				[Address(RVA = "0x124223C", Offset = "0x124223C", VA = "0x124223C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002258")]
				[Address(RVA = "0x1242284", Offset = "0x1242284", VA = "0x1242284", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002253")]
			[Address(RVA = "0x12420B8", Offset = "0x12420B8", VA = "0x12420B8")]
			[DebuggerHidden]
			public <_Crank2Moving>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6002254")]
			[Address(RVA = "0x12420E0", Offset = "0x12420E0", VA = "0x12420E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002255")]
			[Address(RVA = "0x12420E4", Offset = "0x12420E4", VA = "0x12420E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002257")]
			[Address(RVA = "0x1242244", Offset = "0x1242244", VA = "0x1242244", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004D4")]
		[CompilerGenerated]
		private sealed class <_CheckIfPlayerPressesTheButton>d__42 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourEndingRoomManager <>4__this;

			[Token(Token = "0x4001F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float <playVoiceline5_4_13Time>5__2;

			[Token(Token = "0x170003E2")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600225C")]
				[Address(RVA = "0x1242518", Offset = "0x1242518", VA = "0x1242518", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600225E")]
				[Address(RVA = "0x1242560", Offset = "0x1242560", VA = "0x1242560", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002259")]
			[Address(RVA = "0x12422E0", Offset = "0x12422E0", VA = "0x12422E0")]
			[DebuggerHidden]
			public <_CheckIfPlayerPressesTheButton>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x600225A")]
			[Address(RVA = "0x1242308", Offset = "0x1242308", VA = "0x1242308", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600225B")]
			[Address(RVA = "0x124230C", Offset = "0x124230C", VA = "0x124230C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600225D")]
			[Address(RVA = "0x1242520", Offset = "0x1242520", VA = "0x1242520", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004D5")]
		[CompilerGenerated]
		private sealed class <_CheckIfPlayerGrabsTheJar>d__45 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourEndingRoomManager <>4__this;

			[Token(Token = "0x4001F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float <playVoiceline5_4_15Time>5__2;

			[Token(Token = "0x170003E4")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002262")]
				[Address(RVA = "0x124281C", Offset = "0x124281C", VA = "0x124281C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002264")]
				[Address(RVA = "0x1242864", Offset = "0x1242864", VA = "0x1242864", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600225F")]
			[Address(RVA = "0x12425BC", Offset = "0x12425BC", VA = "0x12425BC")]
			[DebuggerHidden]
			public <_CheckIfPlayerGrabsTheJar>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x6002260")]
			[Address(RVA = "0x12425E4", Offset = "0x12425E4", VA = "0x12425E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002261")]
			[Address(RVA = "0x12425E8", Offset = "0x12425E8", VA = "0x12425E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002263")]
			[Address(RVA = "0x1242824", Offset = "0x1242824", VA = "0x1242824", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004D6")]
		[CompilerGenerated]
		private sealed class <_ForceClientsToHostPosition>d__52 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourEndingRoomManager <>4__this;

			[Token(Token = "0x4001F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 hostPosition;

			[Token(Token = "0x4001F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 hostEuler;

			[Token(Token = "0x170003E6")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002268")]
				[Address(RVA = "0x1242C40", Offset = "0x1242C40", VA = "0x1242C40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003E7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600226A")]
				[Address(RVA = "0x1242C88", Offset = "0x1242C88", VA = "0x1242C88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002265")]
			[Address(RVA = "0x12428C0", Offset = "0x12428C0", VA = "0x12428C0")]
			[DebuggerHidden]
			public <_ForceClientsToHostPosition>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6002266")]
			[Address(RVA = "0x12428E8", Offset = "0x12428E8", VA = "0x12428E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002267")]
			[Address(RVA = "0x12428EC", Offset = "0x12428EC", VA = "0x12428EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002269")]
			[Address(RVA = "0x1242C48", Offset = "0x1242C48", VA = "0x1242C48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004D7")]
		[CompilerGenerated]
		private sealed class <TurnOffLights>d__56 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourEndingRoomManager <>4__this;

			[Token(Token = "0x170003E8")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600226E")]
				[Address(RVA = "0x1242E44", Offset = "0x1242E44", VA = "0x1242E44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003E9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002270")]
				[Address(RVA = "0x1242E8C", Offset = "0x1242E8C", VA = "0x1242E8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600226B")]
			[Address(RVA = "0x1242CE4", Offset = "0x1242CE4", VA = "0x1242CE4")]
			[DebuggerHidden]
			public <TurnOffLights>d__56(int <>1__state)
			{
			}

			[Token(Token = "0x600226C")]
			[Address(RVA = "0x1242D0C", Offset = "0x1242D0C", VA = "0x1242D0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600226D")]
			[Address(RVA = "0x1242D10", Offset = "0x1242D10", VA = "0x1242D10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600226F")]
			[Address(RVA = "0x1242E4C", Offset = "0x1242E4C", VA = "0x1242E4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004D8")]
		[CompilerGenerated]
		private sealed class <_EndSequence>d__57 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourEndingRoomManager <>4__this;

			[Token(Token = "0x170003EA")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002274")]
				[Address(RVA = "0x12439FC", Offset = "0x12439FC", VA = "0x12439FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003EB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002276")]
				[Address(RVA = "0x1243A44", Offset = "0x1243A44", VA = "0x1243A44", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002271")]
			[Address(RVA = "0x1242EE8", Offset = "0x1242EE8", VA = "0x1242EE8")]
			[DebuggerHidden]
			public <_EndSequence>d__57(int <>1__state)
			{
			}

			[Token(Token = "0x6002272")]
			[Address(RVA = "0x1242F10", Offset = "0x1242F10", VA = "0x1242F10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002273")]
			[Address(RVA = "0x1242F14", Offset = "0x1242F14", VA = "0x1242F14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002275")]
			[Address(RVA = "0x1243A04", Offset = "0x1243A04", VA = "0x1243A04", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004D9")]
		[CompilerGenerated]
		private sealed class <_ToggleBGMusicBackOn>d__58 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float waitTime;

			[Token(Token = "0x170003EC")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600227A")]
				[Address(RVA = "0x1243B9C", Offset = "0x1243B9C", VA = "0x1243B9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003ED")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600227C")]
				[Address(RVA = "0x1243BE4", Offset = "0x1243BE4", VA = "0x1243BE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002277")]
			[Address(RVA = "0x1243AA0", Offset = "0x1243AA0", VA = "0x1243AA0")]
			[DebuggerHidden]
			public <_ToggleBGMusicBackOn>d__58(int <>1__state)
			{
			}

			[Token(Token = "0x6002278")]
			[Address(RVA = "0x1243AC8", Offset = "0x1243AC8", VA = "0x1243AC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002279")]
			[Address(RVA = "0x1243ACC", Offset = "0x1243ACC", VA = "0x1243ACC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600227B")]
			[Address(RVA = "0x1243BA4", Offset = "0x1243BA4", VA = "0x1243BA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RotatorObject crank1;

		[Token(Token = "0x4001EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private RotatorObject crank2;

		[Token(Token = "0x4001EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private HVRPhysicsButton button;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Animator endingRoomAnimator;

		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject[] otherSkinnedMeshRendererJarObjects;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject brainRoot;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private EndingFourClaytonsHeadJar claytonsHeadJar;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private EndingFourClaytonAvatar claytonAvatar;

		[Token(Token = "0x4001F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private CreditsController creditsController;

		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Atmosphere creditsAtmosphere;

		[Token(Token = "0x4001F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private EndingFourVaultDoorController vaultDoorController;

		[Token(Token = "0x4001F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private EndingFourValleyManager endingFourValleyManager;

		[Token(Token = "0x4001F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private EndingFourVoicelineTrigger voiceline5_4_10Trigger;

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioClip brainClampButtonAudioClip;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip brainClampsOpeningAudioClip;

		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource skullSawAudioSource;

		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioSource enigmaticSound01AudioSource;

		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioSource enigmaticSound02AudioSource;

		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioSource enigmaticSound03AudioSource;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource slowBeepLoopAS;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool crank1Done;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool crank2Done;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		private bool buttonPressed;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float crank1StartingCurAngle;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float crank2StartingCurAngle;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Vector3 buttonOriginalLocalPosition;

		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool crank1AnimationRunning;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		private bool crank2AnimationRunning;

		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private CoroutineHandle checkIfPlayerPressesButtonCoroutine;

		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private CoroutineHandle checkIfPlayerGrabsJarCoroutine;

		[Token(Token = "0x6002227")]
		[Address(RVA = "0x1240314", Offset = "0x1240314", VA = "0x1240314")]
		private void Start()
		{
		}

		[Token(Token = "0x6002228")]
		[Address(RVA = "0x12406E4", Offset = "0x12406E4", VA = "0x12406E4")]
		private void OpenClamps()
		{
		}

		[Token(Token = "0x6002229")]
		[Address(RVA = "0x12407E0", Offset = "0x12407E0", VA = "0x12407E0")]
		public void WaitUntilVoiceLineIsFinishedToAllowCrank()
		{
		}

		[Token(Token = "0x600222A")]
		[Address(RVA = "0x1240848", Offset = "0x1240848", VA = "0x1240848")]
		[IteratorStateMachine(typeof(<_WaitUntilVoiceLineIsFinished>d__33))]
		private IEnumerator<float> _WaitUntilVoiceLineIsFinished()
		{
			return null;
		}

		[Token(Token = "0x600222B")]
		[Address(RVA = "0x12408BC", Offset = "0x12408BC", VA = "0x12408BC")]
		private void AllowMoveCrank1()
		{
		}

		[Token(Token = "0x600222C")]
		[Address(RVA = "0x12408E0", Offset = "0x12408E0", VA = "0x12408E0")]
		private void AllowMoveCrank2()
		{
		}

		[Token(Token = "0x600222D")]
		[Address(RVA = "0x1240904", Offset = "0x1240904", VA = "0x1240904")]
		private void Crank1Moving(float arg0)
		{
		}

		[Token(Token = "0x600222E")]
		[Address(RVA = "0x1240B2C", Offset = "0x1240B2C", VA = "0x1240B2C")]
		[IteratorStateMachine(typeof(<_Crank1Moving>d__37))]
		private IEnumerator<float> _Crank1Moving()
		{
			return null;
		}

		[Token(Token = "0x600222F")]
		[Address(RVA = "0x1240BA0", Offset = "0x1240BA0", VA = "0x1240BA0")]
		private void Crank2Moving(float arg0)
		{
		}

		[Token(Token = "0x6002230")]
		[Address(RVA = "0x1240DD0", Offset = "0x1240DD0", VA = "0x1240DD0")]
		[IteratorStateMachine(typeof(<_Crank2Moving>d__39))]
		private IEnumerator<float> _Crank2Moving()
		{
			return null;
		}

		[Token(Token = "0x6002231")]
		[Address(RVA = "0x1240E44", Offset = "0x1240E44", VA = "0x1240E44")]
		public void ClampsOpen()
		{
		}

		[Token(Token = "0x6002232")]
		[Address(RVA = "0x1240EC4", Offset = "0x1240EC4", VA = "0x1240EC4")]
		private void AllowPressButton()
		{
		}

		[Token(Token = "0x6002233")]
		[Address(RVA = "0x1240F54", Offset = "0x1240F54", VA = "0x1240F54")]
		[IteratorStateMachine(typeof(<_CheckIfPlayerPressesTheButton>d__42))]
		private IEnumerator<float> _CheckIfPlayerPressesTheButton()
		{
			return null;
		}

		[Token(Token = "0x6002234")]
		[Address(RVA = "0x1240FC8", Offset = "0x1240FC8", VA = "0x1240FC8")]
		private void ButtonDown(HVRPhysicsButton arg0)
		{
		}

		[Token(Token = "0x6002235")]
		[Address(RVA = "0x1241394", Offset = "0x1241394", VA = "0x1241394")]
		[PunRPC]
		private void ButtonDownRPC()
		{
		}

		[Token(Token = "0x6002236")]
		[Address(RVA = "0x1241320", Offset = "0x1241320", VA = "0x1241320")]
		[IteratorStateMachine(typeof(<_CheckIfPlayerGrabsTheJar>d__45))]
		private IEnumerator<float> _CheckIfPlayerGrabsTheJar()
		{
			return null;
		}

		[Token(Token = "0x6002237")]
		[Address(RVA = "0x1240540", Offset = "0x1240540", VA = "0x1240540")]
		public void ResetEverything()
		{
		}

		[Token(Token = "0x6002238")]
		[Address(RVA = "0x124148C", Offset = "0x124148C", VA = "0x124148C")]
		private void ResetButton()
		{
		}

		[Token(Token = "0x6002239")]
		[Address(RVA = "0x1241494", Offset = "0x1241494", VA = "0x1241494")]
		private void ResetCranks()
		{
		}

		[Token(Token = "0x600223A")]
		[Address(RVA = "0x124153C", Offset = "0x124153C", VA = "0x124153C")]
		private void ResetClaytonHead()
		{
		}

		[Token(Token = "0x600223B")]
		[Address(RVA = "0x123FA74", Offset = "0x123FA74", VA = "0x123FA74")]
		public void PlayerHasGrabbedTheJar(Vector3 playerPosition, Vector3 playerForward)
		{
		}

		[Token(Token = "0x600223C")]
		[Address(RVA = "0x12415BC", Offset = "0x12415BC", VA = "0x12415BC")]
		[PunRPC]
		private void ForceClientsToHostPosition(Vector3 hostPosition, Vector3 hostEuler)
		{
		}

		[Token(Token = "0x600223D")]
		[Address(RVA = "0x124166C", Offset = "0x124166C", VA = "0x124166C")]
		[IteratorStateMachine(typeof(<_ForceClientsToHostPosition>d__52))]
		private IEnumerator<float> _ForceClientsToHostPosition(Vector3 hostPosition, Vector3 hostEuler)
		{
			return null;
		}

		[Token(Token = "0x600223E")]
		[Address(RVA = "0x123FEC0", Offset = "0x123FEC0", VA = "0x123FEC0")]
		public void ForcePlayerToJarPlace()
		{
		}

		[Token(Token = "0x600223F")]
		[Address(RVA = "0x124171C", Offset = "0x124171C", VA = "0x124171C")]
		private void FreezeAndRotatePlayer(Vector3 point, Quaternion rotation)
		{
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0x123EA70", Offset = "0x123EA70", VA = "0x123EA70")]
		public void CloseVaultDoors()
		{
		}

		[Token(Token = "0x6002241")]
		[Address(RVA = "0x12419D4", Offset = "0x12419D4", VA = "0x12419D4")]
		[IteratorStateMachine(typeof(<TurnOffLights>d__56))]
		private IEnumerator<float> TurnOffLights()
		{
			return null;
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0x1241A48", Offset = "0x1241A48", VA = "0x1241A48")]
		[IteratorStateMachine(typeof(<_EndSequence>d__57))]
		private IEnumerator<float> _EndSequence()
		{
			return null;
		}

		[Token(Token = "0x6002243")]
		[Address(RVA = "0x1241ABC", Offset = "0x1241ABC", VA = "0x1241ABC")]
		[IteratorStateMachine(typeof(<_ToggleBGMusicBackOn>d__58))]
		private IEnumerator<float> _ToggleBGMusicBackOn(float waitTime)
		{
			return null;
		}

		[Token(Token = "0x6002244")]
		[Address(RVA = "0x1241B2C", Offset = "0x1241B2C", VA = "0x1241B2C")]
		[PunRPC]
		private void PlayVoicelineRPC(int voicelineNumber)
		{
		}

		[Token(Token = "0x6002245")]
		[Address(RVA = "0x1241CA8", Offset = "0x1241CA8", VA = "0x1241CA8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002246")]
		[Address(RVA = "0x1241D28", Offset = "0x1241D28", VA = "0x1241D28")]
		public EndingFourEndingRoomManager()
		{
		}
	}
	[Token(Token = "0x20004DA")]
	public class EndingFourFirePlaceMechanism : MonoBehaviour
	{
		[Token(Token = "0x4001F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent OnArtifactKeyAttached;

		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 artifactKeyConnectedLocalPosition;

		[Token(Token = "0x4001F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion artifactKeyConnectedLocalRotation;

		[Token(Token = "0x4001F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool activated;

		[Token(Token = "0x600227D")]
		[Address(RVA = "0x1243C40", Offset = "0x1243C40", VA = "0x1243C40")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600227E")]
		[Address(RVA = "0x1243DDC", Offset = "0x1243DDC", VA = "0x1243DDC")]
		public void Reset()
		{
		}

		[Token(Token = "0x600227F")]
		[Address(RVA = "0x1243DE4", Offset = "0x1243DE4", VA = "0x1243DE4")]
		public EndingFourFirePlaceMechanism()
		{
		}
	}
	[Token(Token = "0x20004DB")]
	public class EndingFourForceClientsToB2RoomTrigger : MonoBehaviourPun
	{
		[Token(Token = "0x20004DC")]
		[CompilerGenerated]
		private sealed class <_ForcePlayers>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourForceClientsToB2RoomTrigger <>4__this;

			[Token(Token = "0x170003EE")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002287")]
				[Address(RVA = "0x12443E8", Offset = "0x12443E8", VA = "0x12443E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003EF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002289")]
				[Address(RVA = "0x1244430", Offset = "0x1244430", VA = "0x1244430", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002284")]
			[Address(RVA = "0x1243F5C", Offset = "0x1243F5C", VA = "0x1243F5C")]
			[DebuggerHidden]
			public <_ForcePlayers>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6002285")]
			[Address(RVA = "0x1244170", Offset = "0x1244170", VA = "0x1244170", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002286")]
			[Address(RVA = "0x1244174", Offset = "0x1244174", VA = "0x1244174", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002288")]
			[Address(RVA = "0x12443F0", Offset = "0x12443F0", VA = "0x12443F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] teleportPositions;

		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool alreadyTriggered;

		[Token(Token = "0x6002280")]
		[Address(RVA = "0x1243E80", Offset = "0x1243E80", VA = "0x1243E80")]
		[PunRPC]
		private void ForcePlayersToB2Lake()
		{
		}

		[Token(Token = "0x6002281")]
		[Address(RVA = "0x1243EE8", Offset = "0x1243EE8", VA = "0x1243EE8")]
		[IteratorStateMachine(typeof(<_ForcePlayers>d__3))]
		private IEnumerator<float> _ForcePlayers()
		{
			return null;
		}

		[Token(Token = "0x6002282")]
		[Address(RVA = "0x1243F84", Offset = "0x1243F84", VA = "0x1243F84")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002283")]
		[Address(RVA = "0x1244168", Offset = "0x1244168", VA = "0x1244168")]
		public EndingFourForceClientsToB2RoomTrigger()
		{
		}
	}
	[Token(Token = "0x20004DD")]
	public class EndingFourTempleManager : MonoBehaviour
	{
		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Room commandCenterRoom;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool artifactFound;

		[Token(Token = "0x600228A")]
		[Address(RVA = "0x124448C", Offset = "0x124448C", VA = "0x124448C")]
		private void Start()
		{
		}

		[Token(Token = "0x600228B")]
		[Address(RVA = "0x12445D4", Offset = "0x12445D4", VA = "0x12445D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600228C")]
		[Address(RVA = "0x12447C0", Offset = "0x12447C0", VA = "0x12447C0")]
		private void GoingToCave()
		{
		}

		[Token(Token = "0x600228D")]
		[Address(RVA = "0x124490C", Offset = "0x124490C", VA = "0x124490C")]
		private void DataLoaded()
		{
		}

		[Token(Token = "0x600228E")]
		[Address(RVA = "0x1244990", Offset = "0x1244990", VA = "0x1244990")]
		private void GenerateAndSetCustomData()
		{
		}

		[Token(Token = "0x600228F")]
		[Address(RVA = "0x1244AA4", Offset = "0x1244AA4", VA = "0x1244AA4")]
		public EndingFourTempleManager()
		{
		}
	}
	[Token(Token = "0x20004DE")]
	public class EndingFourValleyManager : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x20004DF")]
		[CompilerGenerated]
		private sealed class <_WaitABitAndDisableRooms>d__24 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourValleyManager <>4__this;

			[Token(Token = "0x170003F0")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60022A1")]
				[Address(RVA = "0x124595C", Offset = "0x124595C", VA = "0x124595C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022A3")]
				[Address(RVA = "0x12459A4", Offset = "0x12459A4", VA = "0x12459A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600229E")]
			[Address(RVA = "0x1245464", Offset = "0x1245464", VA = "0x1245464")]
			[DebuggerHidden]
			public <_WaitABitAndDisableRooms>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x600229F")]
			[Address(RVA = "0x12458A8", Offset = "0x12458A8", VA = "0x12458A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60022A0")]
			[Address(RVA = "0x12458AC", Offset = "0x12458AC", VA = "0x12458AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022A2")]
			[Address(RVA = "0x1245964", Offset = "0x1245964", VA = "0x1245964", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject firePlaceObject;

		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject hatchArchObject;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject ending4Rooms;

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private EndingFourBridgeController bridgeController;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private EndingFourVaultDoorController vaultDoorController;

		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private EndingFourFirePlaceMechanism firePlaceMechanism;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private EndingFourArtifactKey artifactKey;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private EndingFourEndingRoomManager endingRoomManager;

		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ParticleSystem fireplaceOpeningFX;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Transform resetPlayerPosition;

		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 originalHatchArchLocalPosition;

		[Token(Token = "0x4001F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 hatchArchNewLocalPosition;

		[Token(Token = "0x4001F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 originalFirePlaceLocalPosition;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float originalVoiceLineVolume;

		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float originalMusicVolume;

		[Token(Token = "0x4001F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool hostHasArtifactUnlocked;

		[Token(Token = "0x6002290")]
		[Address(RVA = "0x1244AAC", Offset = "0x1244AAC", VA = "0x1244AAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002291")]
		[Address(RVA = "0x1244EBC", Offset = "0x1244EBC", VA = "0x1244EBC")]
		private void LoadAndSetArtifact()
		{
		}

		[Token(Token = "0x6002292")]
		[Address(RVA = "0x1244DB4", Offset = "0x1244DB4", VA = "0x1244DB4")]
		public void SetEndingActive(bool active)
		{
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0x1244E9C", Offset = "0x1244E9C", VA = "0x1244E9C")]
		public void ToggleArtifactSync(bool sync)
		{
		}

		[Token(Token = "0x6002294")]
		[Address(RVA = "0x1244FB0", Offset = "0x1244FB0", VA = "0x1244FB0", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002295")]
		[Address(RVA = "0x1245088", Offset = "0x1245088", VA = "0x1245088", Slot = "42")]
		public override void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6002296")]
		[Address(RVA = "0x12451E4", Offset = "0x12451E4", VA = "0x12451E4")]
		[PunRPC]
		private void ReceiveHostArtifactFoundStatus(bool hostHasThisUnlocked)
		{
		}

		[Token(Token = "0x6002297")]
		[Address(RVA = "0x12437F8", Offset = "0x12437F8", VA = "0x12437F8")]
		public void ResetEnding()
		{
		}

		[Token(Token = "0x6002298")]
		[Address(RVA = "0x12453F0", Offset = "0x12453F0", VA = "0x12453F0")]
		[IteratorStateMachine(typeof(<_WaitABitAndDisableRooms>d__24))]
		private IEnumerator<float> _WaitABitAndDisableRooms()
		{
			return null;
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0x124548C", Offset = "0x124548C", VA = "0x124548C")]
		private void SwitchToHatchArc()
		{
		}

		[Token(Token = "0x600229A")]
		[Address(RVA = "0x1245804", Offset = "0x1245804", VA = "0x1245804")]
		[PunRPC]
		private void TeleportClientsRPC()
		{
		}

		[Token(Token = "0x600229B")]
		[Address(RVA = "0x124524C", Offset = "0x124524C", VA = "0x124524C")]
		private void SwitchToFirePlace()
		{
		}

		[Token(Token = "0x600229C")]
		[Address(RVA = "0x12438A8", Offset = "0x12438A8", VA = "0x12438A8")]
		public void ResetPlayerToCabin()
		{
		}

		[Token(Token = "0x600229D")]
		[Address(RVA = "0x1245888", Offset = "0x1245888", VA = "0x1245888")]
		public EndingFourValleyManager()
		{
		}
	}
	[Token(Token = "0x20004E0")]
	[RequireComponent(typeof(Animator))]
	public class EndingFourVaultDoorController : MonoBehaviourPun
	{
		[Token(Token = "0x20004E1")]
		[CompilerGenerated]
		private sealed class <_OpenDoor>d__5 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourVaultDoorController <>4__this;

			[Token(Token = "0x170003F2")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60022AF")]
				[Address(RVA = "0x1245F14", Offset = "0x1245F14", VA = "0x1245F14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003F3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022B1")]
				[Address(RVA = "0x1245F5C", Offset = "0x1245F5C", VA = "0x1245F5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022AC")]
			[Address(RVA = "0x1245B44", Offset = "0x1245B44", VA = "0x1245B44")]
			[DebuggerHidden]
			public <_OpenDoor>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60022AD")]
			[Address(RVA = "0x1245DF0", Offset = "0x1245DF0", VA = "0x1245DF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60022AE")]
			[Address(RVA = "0x1245DF4", Offset = "0x1245DF4", VA = "0x1245DF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022B0")]
			[Address(RVA = "0x1245F1C", Offset = "0x1245F1C", VA = "0x1245F1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004E2")]
		[CompilerGenerated]
		private sealed class <_WaitUntilClaytonShutsUp>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EndingFourVaultDoorController <>4__this;

			[Token(Token = "0x170003F4")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60022B5")]
				[Address(RVA = "0x124613C", Offset = "0x124613C", VA = "0x124613C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022B7")]
				[Address(RVA = "0x1246184", Offset = "0x1246184", VA = "0x1246184", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022B2")]
			[Address(RVA = "0x1245BE0", Offset = "0x1245BE0", VA = "0x1245BE0")]
			[DebuggerHidden]
			public <_WaitUntilClaytonShutsUp>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60022B3")]
			[Address(RVA = "0x1245FB8", Offset = "0x1245FB8", VA = "0x1245FB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60022B4")]
			[Address(RVA = "0x1245FBC", Offset = "0x1245FBC", VA = "0x1245FBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022B6")]
			[Address(RVA = "0x1246144", Offset = "0x1246144", VA = "0x1246144", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator doorAnimator;

		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool alreadyTriggered;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioSource vaultDoorAudioSource;

		[Token(Token = "0x60022A4")]
		[Address(RVA = "0x1245A00", Offset = "0x1245A00", VA = "0x1245A00")]
		private void Awake()
		{
		}

		[Token(Token = "0x60022A5")]
		[Address(RVA = "0x1245A68", Offset = "0x1245A68", VA = "0x1245A68")]
		[PunRPC]
		private void OpenDoorRPC()
		{
		}

		[Token(Token = "0x60022A6")]
		[Address(RVA = "0x1245AD0", Offset = "0x1245AD0", VA = "0x1245AD0")]
		[IteratorStateMachine(typeof(<_OpenDoor>d__5))]
		private IEnumerator<float> _OpenDoor()
		{
			return null;
		}

		[Token(Token = "0x60022A7")]
		[Address(RVA = "0x1245B6C", Offset = "0x1245B6C", VA = "0x1245B6C")]
		[IteratorStateMachine(typeof(<_WaitUntilClaytonShutsUp>d__6))]
		private IEnumerator<float> _WaitUntilClaytonShutsUp()
		{
			return null;
		}

		[Token(Token = "0x60022A8")]
		[Address(RVA = "0x1245C08", Offset = "0x1245C08", VA = "0x1245C08")]
		public void CloseDoor()
		{
		}

		[Token(Token = "0x60022A9")]
		[Address(RVA = "0x12451F0", Offset = "0x12451F0", VA = "0x12451F0")]
		public void ResetDoor()
		{
		}

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0x1245C6C", Offset = "0x1245C6C", VA = "0x1245C6C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60022AB")]
		[Address(RVA = "0x1245DE8", Offset = "0x1245DE8", VA = "0x1245DE8")]
		public EndingFourVaultDoorController()
		{
		}
	}
	[Token(Token = "0x20004E3")]
	public class EndingFourVoicelineTrigger : MonoBehaviourPun
	{
		[Token(Token = "0x20004E4")]
		public enum VoiceLineType
		{
			[Token(Token = "0x4001F67")]
			v5_4_4,
			[Token(Token = "0x4001F68")]
			v5_4_5,
			[Token(Token = "0x4001F69")]
			v5_4_6,
			[Token(Token = "0x4001F6A")]
			v5_4_7,
			[Token(Token = "0x4001F6B")]
			v5_4_8,
			[Token(Token = "0x4001F6C")]
			v5_4_10
		}

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VoiceLineType voiceLineType;

		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent OnVoiceLineStartedPlaying;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool voicelineAlreadyPlayed;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool interrupt;

		[Token(Token = "0x60022B8")]
		[Address(RVA = "0x12461E0", Offset = "0x12461E0", VA = "0x12461E0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60022B9")]
		[Address(RVA = "0x12461E8", Offset = "0x12461E8", VA = "0x12461E8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60022BA")]
		[Address(RVA = "0x1246548", Offset = "0x1246548", VA = "0x1246548")]
		[PunRPC]
		private void PlayVoiceLineRPC()
		{
		}

		[Token(Token = "0x60022BB")]
		[Address(RVA = "0x1246418", Offset = "0x1246418", VA = "0x1246418")]
		private VoiceLinesScriptable.VoiceLineCategory GetVoiceLine()
		{
			return null;
		}

		[Token(Token = "0x60022BC")]
		[Address(RVA = "0x1246660", Offset = "0x1246660", VA = "0x1246660")]
		public EndingFourVoicelineTrigger()
		{
		}
	}
}
namespace Ending1
{
	[Token(Token = "0x20004E5")]
	public class FirstEndingContentController : MonoBehaviour
	{
		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private DiggingArea firstTopworldDiggingArea;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DiggingArea secondTopworldDiggingArea;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private DiggingArea[] endingRoomDiggingAreas;

		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Material diggingAreaOverrideMaterial;

		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SafeRiddle safe;

		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject[] endingObjects;

		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<int> generatedContentToRooms;

		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int runningEnemyIndex;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Enemy> currentEndingEnemies;

		[Token(Token = "0x4001F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool endingEnemiesGetted;

		[Token(Token = "0x4001F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool initializedLocalPlayer;

		[Token(Token = "0x60022BD")]
		[Address(RVA = "0x12466D4", Offset = "0x12466D4", VA = "0x12466D4")]
		private void Start()
		{
		}

		[Token(Token = "0x60022BE")]
		[Address(RVA = "0x1246AA0", Offset = "0x1246AA0", VA = "0x1246AA0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60022BF")]
		[Address(RVA = "0x1246850", Offset = "0x1246850", VA = "0x1246850")]
		private void LocalPlayerInitialized()
		{
		}

		[Token(Token = "0x60022C0")]
		[Address(RVA = "0x1246C1C", Offset = "0x1246C1C", VA = "0x1246C1C")]
		private void FirstTopworldDiggingAreaDeformed(DiggingArea obj)
		{
		}

		[Token(Token = "0x60022C1")]
		[Address(RVA = "0x1246C84", Offset = "0x1246C84", VA = "0x1246C84")]
		private void SecondTopworldDiggingAreaDeformed(DiggingArea obj)
		{
		}

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0x1246CEC", Offset = "0x1246CEC", VA = "0x1246CEC")]
		public void GenerateContent(int segmentIndex)
		{
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0x1246FC8", Offset = "0x1246FC8", VA = "0x1246FC8")]
		public void DestroyContent(int segmentIndex)
		{
		}

		[Token(Token = "0x60022C4")]
		[Address(RVA = "0x124709C", Offset = "0x124709C", VA = "0x124709C")]
		private void GetEnemies()
		{
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0x124732C", Offset = "0x124732C", VA = "0x124732C")]
		public void AggroAllEnemies(int percentOfEnemies)
		{
		}

		[Token(Token = "0x60022C6")]
		[Address(RVA = "0x12474E8", Offset = "0x12474E8", VA = "0x12474E8")]
		public FirstEndingContentController()
		{
		}
	}
	[Token(Token = "0x20004E7")]
	[RequireComponent(typeof(FirstEndingContentController))]
	public class FirstEndingController : MonoBehaviourPun
	{
		[Token(Token = "0x20004E8")]
		[CompilerGenerated]
		private sealed class <_WaitForRunGenManager>d__29 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FirstEndingController <>4__this;

			[Token(Token = "0x170003F8")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60022EB")]
				[Address(RVA = "0x1248F94", Offset = "0x1248F94", VA = "0x1248F94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022ED")]
				[Address(RVA = "0x1248FDC", Offset = "0x1248FDC", VA = "0x1248FDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022E8")]
			[Address(RVA = "0x1247A6C", Offset = "0x1247A6C", VA = "0x1247A6C")]
			[DebuggerHidden]
			public <_WaitForRunGenManager>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x60022E9")]
			[Address(RVA = "0x1248E1C", Offset = "0x1248E1C", VA = "0x1248E1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60022EA")]
			[Address(RVA = "0x1248E20", Offset = "0x1248E20", VA = "0x1248E20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022EC")]
			[Address(RVA = "0x1248F9C", Offset = "0x1248F9C", VA = "0x1248F9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004E9")]
		[CompilerGenerated]
		private sealed class <_MovePlayerToDriversSeat>d__40 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FirstEndingController <>4__this;

			[Token(Token = "0x170003FA")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60022F1")]
				[Address(RVA = "0x1249B70", Offset = "0x1249B70", VA = "0x1249B70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022F3")]
				[Address(RVA = "0x1249BB8", Offset = "0x1249BB8", VA = "0x1249BB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022EE")]
			[Address(RVA = "0x12483C4", Offset = "0x12483C4", VA = "0x12483C4")]
			[DebuggerHidden]
			public <_MovePlayerToDriversSeat>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x60022EF")]
			[Address(RVA = "0x1249038", Offset = "0x1249038", VA = "0x1249038", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60022F0")]
			[Address(RVA = "0x124903C", Offset = "0x124903C", VA = "0x124903C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022F2")]
			[Address(RVA = "0x1249B78", Offset = "0x1249B78", VA = "0x1249B78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004EA")]
		[CompilerGenerated]
		private sealed class <_EndRun>d__41 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001F9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FirstEndingController <>4__this;

			[Token(Token = "0x170003FC")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60022F7")]
				[Address(RVA = "0x124A8E0", Offset = "0x124A8E0", VA = "0x124A8E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60022F9")]
				[Address(RVA = "0x124A928", Offset = "0x124A928", VA = "0x124A928", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60022F4")]
			[Address(RVA = "0x1248460", Offset = "0x1248460", VA = "0x1248460")]
			[DebuggerHidden]
			public <_EndRun>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x60022F5")]
			[Address(RVA = "0x1249C14", Offset = "0x1249C14", VA = "0x1249C14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60022F6")]
			[Address(RVA = "0x1249C18", Offset = "0x1249C18", VA = "0x1249C18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60022F8")]
			[Address(RVA = "0x124A8E8", Offset = "0x124A8E8", VA = "0x124A8E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TankOfDoom tankOfDoom;

		[Token(Token = "0x4001F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TankOfDoomPathFollower pathFollower;

		[Token(Token = "0x4001F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform endOfEndingSpawnPos;

		[Token(Token = "0x4001F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private FirstEndingPath firstEndingPath;

		[Token(Token = "0x4001F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Choose an segment to start from, 0 starts from beginning")]
		[SerializeField]
		private int startFromSegment;

		[Token(Token = "0x4001F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private FirstEndingLever startLever;

		[Token(Token = "0x4001F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource tarpitAudioSource;

		[Token(Token = "0x4001F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Atmosphere creditsAtmosphere;

		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ScrollRect creditsScrollRect;

		[Token(Token = "0x4001F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Campfire topworldCampFire;

		[Token(Token = "0x4001F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject creditsObject;

		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private AudioSource claytonVoicelineAudioSource;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private FirstEndingContentController contentController;

		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool running;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool playerIsOnDriverSeat;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UniversalAdditionalCameraData cachedAdditionalCameraData;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera playerCamera;

		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public bool allowButtonPress;

		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private GameObject[] colliderObjectsToToggle;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private FirstEndingTankOfDoomDoor tankOfDoomDoor;

		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<Collider> collidersToToggle;

		[Token(Token = "0x4001F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Transform playerSpawnPosTEMP;

		[Token(Token = "0x4001F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[UnityEngine.Tooltip("Different group for ending SFX:s, since normal SFX audiogroup volume is low")]
		private AudioMixerGroup sfxMixerGroup;

		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float originalSFXVolume;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float originalVoiceLineVolume;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private CreditsController creditsController;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private DisableChildrenWhenPlayerIsInCave[] disableChildrenScripts;

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0x1247858", Offset = "0x1247858", VA = "0x1247858")]
		public void PlayAudioClip(AudioClip audioClipToPlay)
		{
		}

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0x12478F8", Offset = "0x12478F8", VA = "0x12478F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0x12479F8", Offset = "0x12479F8", VA = "0x12479F8")]
		[IteratorStateMachine(typeof(<_WaitForRunGenManager>d__29))]
		private IEnumerator<float> _WaitForRunGenManager()
		{
			return null;
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0x1247A94", Offset = "0x1247A94", VA = "0x1247A94")]
		public void PlayVoiceLine(FirstEndingTrigger.VoicelineType voiceLineType)
		{
		}

		[Token(Token = "0x60022D2")]
		[Address(RVA = "0x1247D38", Offset = "0x1247D38", VA = "0x1247D38")]
		private void PlayClaytonVoiceLineClip(AudioClip audioClip, LocalizedString subtitle)
		{
		}

		[Token(Token = "0x60022D3")]
		[Address(RVA = "0x1247E38", Offset = "0x1247E38", VA = "0x1247E38")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60022D4")]
		[Address(RVA = "0x1247F8C", Offset = "0x1247F8C", VA = "0x1247F8C")]
		private void LevelChanged(int level)
		{
		}

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0x1247FB8", Offset = "0x1247FB8", VA = "0x1247FB8")]
		private void Update()
		{
		}

		[Token(Token = "0x60022D6")]
		[Address(RVA = "0x1247FBC", Offset = "0x1247FBC", VA = "0x1247FBC")]
		public void StartEnding()
		{
		}

		[Token(Token = "0x60022D7")]
		[Address(RVA = "0x12481B4", Offset = "0x12481B4", VA = "0x12481B4")]
		[PunRPC]
		public void StartEndingRPC()
		{
		}

		[Token(Token = "0x60022D8")]
		[Address(RVA = "0x12482A0", Offset = "0x12482A0", VA = "0x12482A0")]
		public void SwitchAtmosphere(Atmosphere newAtmosphere)
		{
		}

		[Token(Token = "0x60022D9")]
		[Address(RVA = "0x12480EC", Offset = "0x12480EC", VA = "0x12480EC")]
		public void MovePlayerToDriversSeat()
		{
		}

		[Token(Token = "0x60022DA")]
		[Address(RVA = "0x12482D4", Offset = "0x12482D4", VA = "0x12482D4")]
		[PunRPC]
		private void MovePlayersToDrivesSeatRPC()
		{
		}

		[Token(Token = "0x60022DB")]
		[Address(RVA = "0x1248350", Offset = "0x1248350", VA = "0x1248350")]
		[IteratorStateMachine(typeof(<_MovePlayerToDriversSeat>d__40))]
		private IEnumerator<float> _MovePlayerToDriversSeat()
		{
			return null;
		}

		[Token(Token = "0x60022DC")]
		[Address(RVA = "0x12483EC", Offset = "0x12483EC", VA = "0x12483EC")]
		[IteratorStateMachine(typeof(<_EndRun>d__41))]
		public IEnumerator<float> _EndRun()
		{
			return null;
		}

		[Token(Token = "0x60022DD")]
		[Address(RVA = "0x1248488", Offset = "0x1248488", VA = "0x1248488")]
		public void SetEnviromentActive(bool value)
		{
		}

		[Token(Token = "0x60022DE")]
		[Address(RVA = "0x12485BC", Offset = "0x12485BC", VA = "0x12485BC")]
		public void ToggleTarpitAudioSouce(bool play)
		{
		}

		[Token(Token = "0x60022DF")]
		[Address(RVA = "0x12485E8", Offset = "0x12485E8", VA = "0x12485E8")]
		public void ChangeTankSpeed(float newSpeed, float lerpTime, bool killSpeed)
		{
		}

		[Token(Token = "0x60022E0")]
		[Address(RVA = "0x12486CC", Offset = "0x12486CC", VA = "0x12486CC")]
		public TankOfDoomPathFollower GetPathFollower()
		{
			return null;
		}

		[Token(Token = "0x60022E1")]
		[Address(RVA = "0x12486D4", Offset = "0x12486D4", VA = "0x12486D4")]
		public void SegmentStateChanged(int roomID, FirstEndingTrigger.SegmentState state)
		{
		}

		[Token(Token = "0x60022E2")]
		[Address(RVA = "0x12487E8", Offset = "0x12487E8", VA = "0x12487E8")]
		public void StartEndOfEnding()
		{
		}

		[Token(Token = "0x60022E3")]
		[Address(RVA = "0x1248AEC", Offset = "0x1248AEC", VA = "0x1248AEC")]
		public bool IsEndingRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x60022E4")]
		[Address(RVA = "0x1248AF4", Offset = "0x1248AF4", VA = "0x1248AF4")]
		public void AggroAllEnemies(int aggroPercent)
		{
		}

		[Token(Token = "0x60022E5")]
		[Address(RVA = "0x1248B0C", Offset = "0x1248B0C", VA = "0x1248B0C")]
		public void FadeScreen(bool toBlack)
		{
		}

		[Token(Token = "0x60022E6")]
		[Address(RVA = "0x1248BB4", Offset = "0x1248BB4", VA = "0x1248BB4")]
		public void ToggleTopworldRenderersAndColliders(bool isSurface)
		{
		}

		[Token(Token = "0x60022E7")]
		[Address(RVA = "0x1248D94", Offset = "0x1248D94", VA = "0x1248D94")]
		public FirstEndingController()
		{
		}
	}
	[Token(Token = "0x20004EB")]
	[RequireComponent(typeof(CustomHVRPhysicsDial))]
	[RequireComponent(typeof(HVRGrabbable))]
	[RequireComponent(typeof(HVRRotationTracker))]
	public class FirstEndingLever : MonoBehaviour
	{
		[Token(Token = "0x20004EC")]
		[CompilerGenerated]
		private sealed class <_WaitAndResetActivated>d__16 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001FAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FirstEndingLever <>4__this;

			[Token(Token = "0x170003FE")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002308")]
				[Address(RVA = "0x124AF3C", Offset = "0x124AF3C", VA = "0x124AF3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600230A")]
				[Address(RVA = "0x124AF84", Offset = "0x124AF84", VA = "0x124AF84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002305")]
			[Address(RVA = "0x124AE4C", Offset = "0x124AE4C", VA = "0x124AE4C")]
			[DebuggerHidden]
			public <_WaitAndResetActivated>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6002306")]
			[Address(RVA = "0x124AE90", Offset = "0x124AE90", VA = "0x124AE90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002307")]
			[Address(RVA = "0x124AE94", Offset = "0x124AE94", VA = "0x124AE94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002309")]
			[Address(RVA = "0x124AF44", Offset = "0x124AF44", VA = "0x124AF44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float RequiredLeverAngle;

		[Token(Token = "0x4001FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Rigidbody mass;

		[Token(Token = "0x4001FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HVRRotationTracker leverRotation;

		[Token(Token = "0x4001FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CustomHVRPhysicsDial physicsDial;

		[Token(Token = "0x4001FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HVRGrabbable levelGrabbable;

		[Token(Token = "0x4001FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private FirstEndingController firstEndingController;

		[Token(Token = "0x4001FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _activated;

		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 originalLocalPosition;

		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion originalLocalRotation;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool voicelinePlayed;

		[Token(Token = "0x60022FA")]
		[Address(RVA = "0x124A984", Offset = "0x124A984", VA = "0x124A984")]
		private void Awake()
		{
		}

		[Token(Token = "0x60022FB")]
		[Address(RVA = "0x124AC60", Offset = "0x124AC60", VA = "0x124AC60")]
		private void LeverAngleChanged(float arg0, float arg1)
		{
		}

		[Token(Token = "0x60022FC")]
		[Address(RVA = "0x124AD44", Offset = "0x124AD44", VA = "0x124AD44")]
		private void LeverGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60022FD")]
		[Address(RVA = "0x124AD84", Offset = "0x124AD84", VA = "0x124AD84")]
		private void LeverReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60022FE")]
		[Address(RVA = "0x124ADD4", Offset = "0x124ADD4", VA = "0x124ADD4")]
		private void Update()
		{
		}

		[Token(Token = "0x60022FF")]
		[Address(RVA = "0x124A7D8", Offset = "0x124A7D8", VA = "0x124A7D8")]
		public void ResetLever()
		{
		}

		[Token(Token = "0x6002300")]
		[Address(RVA = "0x124ADD8", Offset = "0x124ADD8", VA = "0x124ADD8")]
		[IteratorStateMachine(typeof(<_WaitAndResetActivated>d__16))]
		private IEnumerator<float> _WaitAndResetActivated()
		{
			return null;
		}

		[Token(Token = "0x6002301")]
		[Address(RVA = "0x124ACC4", Offset = "0x124ACC4", VA = "0x124ACC4")]
		private void StartEnding()
		{
		}

		[Token(Token = "0x6002302")]
		[Address(RVA = "0x124ACEC", Offset = "0x124ACEC", VA = "0x124ACEC")]
		private void BreakHandle()
		{
		}

		[Token(Token = "0x6002303")]
		[Address(RVA = "0x124AE74", Offset = "0x124AE74", VA = "0x124AE74")]
		public void SetActivatedToTrue()
		{
		}

		[Token(Token = "0x6002304")]
		[Address(RVA = "0x124AE80", Offset = "0x124AE80", VA = "0x124AE80")]
		public FirstEndingLever()
		{
		}
	}
	[Token(Token = "0x20004ED")]
	public class FirstEndingPath : MonoBehaviour
	{
		[Token(Token = "0x4001FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PathCreator segment1Path;

		[Token(Token = "0x4001FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PathCreator segment2Path;

		[Token(Token = "0x4001FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PathCreator segment3Path;

		[Token(Token = "0x4001FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private PathCreator segment4Path;

		[Token(Token = "0x4001FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private PathCreator segment5Path;

		[Token(Token = "0x4001FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private EndOfPathInstruction end;

		[Token(Token = "0x4001FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private FirstEndingTrigger segment1Start;

		[Token(Token = "0x4001FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FirstEndingTrigger segment2Start;

		[Token(Token = "0x4001FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private FirstEndingTrigger segment3Start;

		[Token(Token = "0x4001FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private FirstEndingTrigger segment4Start;

		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private FirstEndingTrigger segment5Start;

		[Token(Token = "0x17000400")]
		public Vector3 updatedPositionAlongPath
		{
			[Token(Token = "0x600230B")]
			[Address(RVA = "0x124AFE0", Offset = "0x124AFE0", VA = "0x124AFE0")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600230C")]
			[Address(RVA = "0x124AFEC", Offset = "0x124AFEC", VA = "0x124AFEC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000401")]
		public Quaternion updatedRotationAlongPath
		{
			[Token(Token = "0x600230D")]
			[Address(RVA = "0x124AFF8", Offset = "0x124AFF8", VA = "0x124AFF8")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x600230E")]
			[Address(RVA = "0x124B004", Offset = "0x124B004", VA = "0x124B004")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600230F")]
		[Address(RVA = "0x124B010", Offset = "0x124B010", VA = "0x124B010")]
		public Vector3 GetSegmentStart(int segmentID)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002310")]
		[Address(RVA = "0x124B08C", Offset = "0x124B08C", VA = "0x124B08C")]
		public float GetPathLength(int index)
		{
			return default(float);
		}

		[Token(Token = "0x6002311")]
		[Address(RVA = "0x124B110", Offset = "0x124B110", VA = "0x124B110")]
		public void UpdatePositionAndRotationAtPath(float distanceTravelled)
		{
		}

		[Token(Token = "0x6002312")]
		[Address(RVA = "0x124B438", Offset = "0x124B438", VA = "0x124B438")]
		public float GetClosestDistanceAlongPath(int segmentID)
		{
			return default(float);
		}

		[Token(Token = "0x6002313")]
		[Address(RVA = "0x124B730", Offset = "0x124B730", VA = "0x124B730")]
		public Vector3 GetOriginalStartPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002314")]
		[Address(RVA = "0x124B75C", Offset = "0x124B75C", VA = "0x124B75C")]
		public Quaternion GetOriginalStartRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002315")]
		[Address(RVA = "0x124B78C", Offset = "0x124B78C", VA = "0x124B78C")]
		public float CombinedLength()
		{
			return default(float);
		}

		[Token(Token = "0x6002316")]
		[Address(RVA = "0x124875C", Offset = "0x124875C", VA = "0x124875C")]
		public void TogglePath(int pathIndex, bool active)
		{
		}

		[Token(Token = "0x6002317")]
		[Address(RVA = "0x124B848", Offset = "0x124B848", VA = "0x124B848")]
		public FirstEndingPath()
		{
		}
	}
	[Token(Token = "0x20004EE")]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(HVRRotationTracker))]
	public class FirstEndingTankOfDoomDoor : MonoBehaviour
	{
		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HVRRotationTracker doorHandleRotationTracker;

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HVRRotationTracker doorRotationTracker;

		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float doorHandleAngleThreshold;

		[Token(Token = "0x4001FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float startEndingDoorAngleThreshold;

		[Token(Token = "0x4001FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private FirstEndingController firstEndingController;

		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioClip doorOpenClip;

		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AudioClip doorCloseClip;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Rigidbody doorHandleRB;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody myRB;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 originalPosition;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion originalRotation;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion doorHandleOriginalRotation;

		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool doorOpened;

		[Token(Token = "0x6002318")]
		[Address(RVA = "0x124B850", Offset = "0x124B850", VA = "0x124B850")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002319")]
		[Address(RVA = "0x124B9D8", Offset = "0x124B9D8", VA = "0x124B9D8")]
		private void Start()
		{
		}

		[Token(Token = "0x600231A")]
		[Address(RVA = "0x124BA94", Offset = "0x124BA94", VA = "0x124BA94")]
		private void DoorHandleAngleChanged(float arg0, float arg1)
		{
		}

		[Token(Token = "0x600231B")]
		[Address(RVA = "0x124BC04", Offset = "0x124BC04", VA = "0x124BC04")]
		private void DoorAngleChanged(float arg0, float arg1)
		{
		}

		[Token(Token = "0x600231C")]
		[Address(RVA = "0x124BA74", Offset = "0x124BA74", VA = "0x124BA74")]
		public void DisableTurning()
		{
		}

		[Token(Token = "0x600231D")]
		[Address(RVA = "0x124BB34", Offset = "0x124BB34", VA = "0x124BB34")]
		public void AllowTurning()
		{
		}

		[Token(Token = "0x600231E")]
		[Address(RVA = "0x12497E8", Offset = "0x12497E8", VA = "0x12497E8")]
		public void LockDoor()
		{
		}

		[Token(Token = "0x600231F")]
		[Address(RVA = "0x124A7B8", Offset = "0x124A7B8", VA = "0x124A7B8")]
		public void AllowDoorHandleToMove()
		{
		}

		[Token(Token = "0x6002320")]
		[Address(RVA = "0x124BCA4", Offset = "0x124BCA4", VA = "0x124BCA4")]
		public FirstEndingTankOfDoomDoor()
		{
		}
	}
	[Token(Token = "0x20004EF")]
	public class FirstEndingTrigger : MonoBehaviour
	{
		[Token(Token = "0x20004F0")]
		public enum FirstEndingTriggerSegment
		{
			[Token(Token = "0x4001FD4")]
			ChangeTankOfDoomSpeed,
			[Token(Token = "0x4001FD5")]
			ToggleWindows,
			[Token(Token = "0x4001FD6")]
			SegmentChange,
			[Token(Token = "0x4001FD7")]
			AggroAllEnemies,
			[Token(Token = "0x4001FD8")]
			ChangeAtmosphere,
			[Token(Token = "0x4001FD9")]
			FadePlayerScreen,
			[Token(Token = "0x4001FDA")]
			ToggleTopworldRenderersAndColliders,
			[Token(Token = "0x4001FDB")]
			EngineStruggle,
			[Token(Token = "0x4001FDC")]
			PlayAudioClip,
			[Token(Token = "0x4001FDD")]
			PlayVoiceLine
		}

		[Token(Token = "0x20004F1")]
		public enum SegmentState
		{
			[Token(Token = "0x4001FDF")]
			Entered,
			[Token(Token = "0x4001FE0")]
			Exited
		}

		[Token(Token = "0x20004F2")]
		public enum VoicelineType
		{
			[Token(Token = "0x4001FE2")]
			v5_1_6,
			[Token(Token = "0x4001FE3")]
			v5_1_7,
			[Token(Token = "0x4001FE4")]
			v5_1_8,
			[Token(Token = "0x4001FE5")]
			v5_1_9,
			[Token(Token = "0x4001FE6")]
			v5_1_11,
			[Token(Token = "0x4001FE7")]
			v5_1_10
		}

		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FirstEndingTriggerSegment myTriggerSegment;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float newSpeed;

		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float lerpSpeed;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool killSpeed;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool toggleWindows;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int segmentInt;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public SegmentState segmentState;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int aggroPercent;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Atmosphere newAtmosphere;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool fadeScreen;

		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool isSurface;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip audioClipToPlay;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VoicelineType voiceLineType;

		[Token(Token = "0x6002321")]
		[Address(RVA = "0x124BCB8", Offset = "0x124BCB8", VA = "0x124BCB8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002322")]
		[Address(RVA = "0x124BDA8", Offset = "0x124BDA8", VA = "0x124BDA8")]
		public FirstEndingTrigger()
		{
		}
	}
	[Token(Token = "0x20004F3")]
	public class FirstEndingVoicelineTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool alreadyTriggered;

		[Token(Token = "0x6002323")]
		[Address(RVA = "0x124BDB0", Offset = "0x124BDB0", VA = "0x124BDB0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002324")]
		[Address(RVA = "0x124BE58", Offset = "0x124BE58", VA = "0x124BE58")]
		public FirstEndingVoicelineTrigger()
		{
		}
	}
	[Token(Token = "0x20004F4")]
	public class TankOfDoom : MonoBehaviour
	{
		[Token(Token = "0x20004F5")]
		[CompilerGenerated]
		private sealed class <_StartRiding>d__23 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TankOfDoom <>4__this;

			[Token(Token = "0x4002000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private bool <alreadyChangedSpeed>5__2;

			[Token(Token = "0x4002001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			private bool <alreadyChangedSpeed2>5__3;

			[Token(Token = "0x17000402")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600233A")]
				[Address(RVA = "0x124CA84", Offset = "0x124CA84", VA = "0x124CA84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000403")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600233C")]
				[Address(RVA = "0x124CACC", Offset = "0x124CACC", VA = "0x124CACC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002337")]
			[Address(RVA = "0x124C098", Offset = "0x124C098", VA = "0x124C098")]
			[DebuggerHidden]
			public <_StartRiding>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6002338")]
			[Address(RVA = "0x124C8BC", Offset = "0x124C8BC", VA = "0x124C8BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002339")]
			[Address(RVA = "0x124C8C0", Offset = "0x124C8C0", VA = "0x124C8C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600233B")]
			[Address(RVA = "0x124CA8C", Offset = "0x124CA8C", VA = "0x124CA8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004F6")]
		[CompilerGenerated]
		private sealed class <_ControllerHaptics>d__29 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TankOfDoom <>4__this;

			[Token(Token = "0x17000404")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002340")]
				[Address(RVA = "0x124CC40", Offset = "0x124CC40", VA = "0x124CC40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000405")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002342")]
				[Address(RVA = "0x124CC88", Offset = "0x124CC88", VA = "0x124CC88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600233D")]
			[Address(RVA = "0x124C684", Offset = "0x124C684", VA = "0x124C684")]
			[DebuggerHidden]
			public <_ControllerHaptics>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600233E")]
			[Address(RVA = "0x124CB28", Offset = "0x124CB28", VA = "0x124CB28", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600233F")]
			[Address(RVA = "0x124CB2C", Offset = "0x124CB2C", VA = "0x124CB2C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002341")]
			[Address(RVA = "0x124CC48", Offset = "0x124CC48", VA = "0x124CC48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004F7")]
		[CompilerGenerated]
		private sealed class <_ToggleWindows>d__31 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002005")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002006")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002007")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TankOfDoom <>4__this;

			[Token(Token = "0x4002008")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool darken;

			[Token(Token = "0x4002009")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float duration;

			[Token(Token = "0x400200A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <time>5__2;

			[Token(Token = "0x400200B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private UnityEngine.Color <currentColor>5__3;

			[Token(Token = "0x17000406")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002346")]
				[Address(RVA = "0x124CE48", Offset = "0x124CE48", VA = "0x124CE48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000407")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002348")]
				[Address(RVA = "0x124CE90", Offset = "0x124CE90", VA = "0x124CE90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002343")]
			[Address(RVA = "0x124C744", Offset = "0x124C744", VA = "0x124C744")]
			[DebuggerHidden]
			public <_ToggleWindows>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6002344")]
			[Address(RVA = "0x124CCE4", Offset = "0x124CCE4", VA = "0x124CCE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002345")]
			[Address(RVA = "0x124CCE8", Offset = "0x124CCE8", VA = "0x124CCE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002347")]
			[Address(RVA = "0x124CE50", Offset = "0x124CE50", VA = "0x124CE50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004F8")]
		[CompilerGenerated]
		private sealed class <_StartEngineStruggle>d__35 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400200C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400200D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400200E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TankOfDoom <>4__this;

			[Token(Token = "0x400200F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private bool <alreadyChangedSpeed>5__2;

			[Token(Token = "0x4002010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float <originalSpeed>5__3;

			[Token(Token = "0x17000408")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600234C")]
				[Address(RVA = "0x124D130", Offset = "0x124D130", VA = "0x124D130", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000409")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600234E")]
				[Address(RVA = "0x124D178", Offset = "0x124D178", VA = "0x124D178", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002349")]
			[Address(RVA = "0x124C884", Offset = "0x124C884", VA = "0x124C884")]
			[DebuggerHidden]
			public <_StartEngineStruggle>d__35(int <>1__state)
			{
			}

			[Token(Token = "0x600234A")]
			[Address(RVA = "0x124CEEC", Offset = "0x124CEEC", VA = "0x124CEEC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600234B")]
			[Address(RVA = "0x124CEF0", Offset = "0x124CEF0", VA = "0x124CEF0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600234D")]
			[Address(RVA = "0x124D138", Offset = "0x124D138", VA = "0x124D138", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform bladeTransform;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ShakeTransform shake;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform forcePlayerCameraPos;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Renderer windowRenderer;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material windowMaterial;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private FirstEndingController firstEndingController;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private ParticleSystem dustParticleSystem;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystem[] allParticles;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TankOfDoomBlade tankOfDoomBlade;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TankOfDoomPathFollower pathFollower;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AudioSource moveLoopAudioSource;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AudioSource engineStartAudioSource;

		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private AudioSource engineStruggleAudioSource;

		[Token(Token = "0x4001FF6")]
		private const string controllerHapticsCoroutineName = "TankOfDoomControllerHapticCoroutineName";

		[Token(Token = "0x4001FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool controllerHapticsRunning;

		[Token(Token = "0x4001FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool riding;

		[Token(Token = "0x4001FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		private bool endingReached;

		[Token(Token = "0x4001FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float particlesToSpawn;

		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.Color originalWindowColor;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Color darkenedWindowColor;

		[Token(Token = "0x6002325")]
		[Address(RVA = "0x124BE60", Offset = "0x124BE60", VA = "0x124BE60")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002326")]
		[Address(RVA = "0x1249938", Offset = "0x1249938", VA = "0x1249938")]
		public void MovePlayerToTank()
		{
		}

		[Token(Token = "0x6002327")]
		[Address(RVA = "0x124BFBC", Offset = "0x124BFBC", VA = "0x124BFBC")]
		public void StartRiding()
		{
		}

		[Token(Token = "0x6002328")]
		[Address(RVA = "0x124C024", Offset = "0x124C024", VA = "0x124C024")]
		[IteratorStateMachine(typeof(<_StartRiding>d__23))]
		private IEnumerator<float> _StartRiding()
		{
			return null;
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0x124C0C0", Offset = "0x124C0C0", VA = "0x124C0C0")]
		public void StopRiding()
		{
		}

		[Token(Token = "0x600232A")]
		[Address(RVA = "0x124C0E8", Offset = "0x124C0E8", VA = "0x124C0E8")]
		private void Update()
		{
		}

		[Token(Token = "0x600232B")]
		[Address(RVA = "0x124C290", Offset = "0x124C290", VA = "0x124C290")]
		public void ToggleShake(bool isOn)
		{
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0x124C2BC", Offset = "0x124C2BC", VA = "0x124C2BC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600232D")]
		[Address(RVA = "0x124C478", Offset = "0x124C478", VA = "0x124C478")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600232E")]
		[Address(RVA = "0x124C610", Offset = "0x124C610", VA = "0x124C610")]
		[IteratorStateMachine(typeof(<_ControllerHaptics>d__29))]
		private IEnumerator<float> _ControllerHaptics()
		{
			return null;
		}

		[Token(Token = "0x600232F")]
		[Address(RVA = "0x124A514", Offset = "0x124A514", VA = "0x124A514")]
		public void ToggleWindows(bool darken)
		{
		}

		[Token(Token = "0x6002330")]
		[Address(RVA = "0x124C6AC", Offset = "0x124C6AC", VA = "0x124C6AC")]
		[IteratorStateMachine(typeof(<_ToggleWindows>d__31))]
		private IEnumerator<float> _ToggleWindows(bool darken, float duration)
		{
			return null;
		}

		[Token(Token = "0x6002331")]
		[Address(RVA = "0x124C76C", Offset = "0x124C76C", VA = "0x124C76C")]
		public void ChangeSpeed(float newSpeed, float lerpTime, bool killSpeed)
		{
		}

		[Token(Token = "0x6002332")]
		[Address(RVA = "0x124C790", Offset = "0x124C790", VA = "0x124C790")]
		public void SegmentStateChanged(int roomID, FirstEndingTrigger.SegmentState state)
		{
		}

		[Token(Token = "0x6002333")]
		[Address(RVA = "0x124C7A8", Offset = "0x124C7A8", VA = "0x124C7A8")]
		public void StartEngineStruggle()
		{
		}

		[Token(Token = "0x6002334")]
		[Address(RVA = "0x124C810", Offset = "0x124C810", VA = "0x124C810")]
		[IteratorStateMachine(typeof(<_StartEngineStruggle>d__35))]
		private IEnumerator<float> _StartEngineStruggle()
		{
			return null;
		}

		[Token(Token = "0x6002335")]
		[Address(RVA = "0x124C8AC", Offset = "0x124C8AC", VA = "0x124C8AC")]
		public FirstEndingController GetFirstEndingController()
		{
			return null;
		}

		[Token(Token = "0x6002336")]
		[Address(RVA = "0x124C8B4", Offset = "0x124C8B4", VA = "0x124C8B4")]
		public TankOfDoom()
		{
		}
	}
	[Token(Token = "0x20004F9")]
	public class TankOfDoomBlade : MonoBehaviour
	{
		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float currentSpeed;

		[Token(Token = "0x600234F")]
		[Address(RVA = "0x124D1D4", Offset = "0x124D1D4", VA = "0x124D1D4")]
		public void ChangeSpeed(float newSpeed)
		{
		}

		[Token(Token = "0x6002350")]
		[Address(RVA = "0x124D1DC", Offset = "0x124D1DC", VA = "0x124D1DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002351")]
		[Address(RVA = "0x124D1E0", Offset = "0x124D1E0", VA = "0x124D1E0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002352")]
		[Address(RVA = "0x124D1E4", Offset = "0x124D1E4", VA = "0x124D1E4")]
		public TankOfDoomBlade()
		{
		}
	}
	[Token(Token = "0x20004FA")]
	[RequireComponent(typeof(TankOfDoom))]
	public class TankOfDoomPathFollower : MonoBehaviour
	{
		[Token(Token = "0x20004FB")]
		[CompilerGenerated]
		private sealed class <_RotateTankAtTarpit>d__19 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400201D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400201E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400201F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TankOfDoomPathFollower <>4__this;

			[Token(Token = "0x4002020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x4002021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float <time>5__2;

			[Token(Token = "0x4002022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Quaternion <curRotation>5__3;

			[Token(Token = "0x4002023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Quaternion <endRotation>5__4;

			[Token(Token = "0x1700040A")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002361")]
				[Address(RVA = "0x124D860", Offset = "0x124D860", VA = "0x124D860", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700040B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002363")]
				[Address(RVA = "0x124D8A8", Offset = "0x124D8A8", VA = "0x124D8A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600235E")]
			[Address(RVA = "0x124D6CC", Offset = "0x124D6CC", VA = "0x124D6CC")]
			[DebuggerHidden]
			public <_RotateTankAtTarpit>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x600235F")]
			[Address(RVA = "0x124D72C", Offset = "0x124D72C", VA = "0x124D72C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002360")]
			[Address(RVA = "0x124D730", Offset = "0x124D730", VA = "0x124D730", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002362")]
			[Address(RVA = "0x124D868", Offset = "0x124D868", VA = "0x124D868", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004FC")]
		[CompilerGenerated]
		private sealed class <_SetNewSpeed>d__20 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TankOfDoomPathFollower <>4__this;

			[Token(Token = "0x4002027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float newSpeed;

			[Token(Token = "0x4002028")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float timeToLerp;

			[Token(Token = "0x4002029")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <time>5__2;

			[Token(Token = "0x400202A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <currentlySettedSpeed>5__3;

			[Token(Token = "0x1700040C")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002367")]
				[Address(RVA = "0x124D9CC", Offset = "0x124D9CC", VA = "0x124D9CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700040D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002369")]
				[Address(RVA = "0x124DA14", Offset = "0x124DA14", VA = "0x124DA14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002364")]
			[Address(RVA = "0x124D6F4", Offset = "0x124D6F4", VA = "0x124D6F4")]
			[DebuggerHidden]
			public <_SetNewSpeed>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6002365")]
			[Address(RVA = "0x124D904", Offset = "0x124D904", VA = "0x124D904", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002366")]
			[Address(RVA = "0x124D908", Offset = "0x124D908", VA = "0x124D908", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002368")]
			[Address(RVA = "0x124D9D4", Offset = "0x124D9D4", VA = "0x124D9D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private FirstEndingPath endingPath;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float startSpeed;

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private EndOfPathInstruction end;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private FirstEndingController firstEndingController;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip drillTankGoundImpactAudioClip;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TankOfDoom tankOfDoom;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float currentSpeed;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float distanceTravelled;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool moving;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool endingReached;

		[Token(Token = "0x400201C")]
		private const string setNewSpeedCoroutineName = "Ending1TankOfDoomSetNewSpeedCoroutineName";

		[Token(Token = "0x6002353")]
		[Address(RVA = "0x124D1EC", Offset = "0x124D1EC", VA = "0x124D1EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002354")]
		[Address(RVA = "0x124A41C", Offset = "0x124A41C", VA = "0x124A41C")]
		public void MoveToOriginalPosition()
		{
		}

		[Token(Token = "0x6002355")]
		[Address(RVA = "0x1248254", Offset = "0x1248254", VA = "0x1248254")]
		public void StartMoving(int startFromSegment)
		{
		}

		[Token(Token = "0x6002356")]
		[Address(RVA = "0x124827C", Offset = "0x124827C", VA = "0x124827C")]
		public void StartMoving()
		{
		}

		[Token(Token = "0x6002357")]
		[Address(RVA = "0x124D2D4", Offset = "0x124D2D4", VA = "0x124D2D4")]
		public void OnEndPosition()
		{
		}

		[Token(Token = "0x6002358")]
		[Address(RVA = "0x1248604", Offset = "0x1248604", VA = "0x1248604")]
		public void ChangeSpeed(float newSpeed, float lerpTime, bool killSpeed)
		{
		}

		[Token(Token = "0x6002359")]
		[Address(RVA = "0x124D3E4", Offset = "0x124D3E4", VA = "0x124D3E4")]
		public float GetCurrentSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x600235A")]
		[Address(RVA = "0x124D3EC", Offset = "0x124D3EC", VA = "0x124D3EC")]
		private void Update()
		{
		}

		[Token(Token = "0x600235B")]
		[Address(RVA = "0x124D648", Offset = "0x124D648", VA = "0x124D648")]
		[IteratorStateMachine(typeof(<_RotateTankAtTarpit>d__19))]
		private IEnumerator<float> _RotateTankAtTarpit(float duration)
		{
			return null;
		}

		[Token(Token = "0x600235C")]
		[Address(RVA = "0x124D35C", Offset = "0x124D35C", VA = "0x124D35C")]
		[IteratorStateMachine(typeof(<_SetNewSpeed>d__20))]
		public IEnumerator<float> _SetNewSpeed(float newSpeed, float timeToLerp)
		{
			return null;
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0x124D71C", Offset = "0x124D71C", VA = "0x124D71C")]
		public TankOfDoomPathFollower()
		{
		}
	}
	[Token(Token = "0x20004FD")]
	public class TankOfDoomTriggerActivator : MonoBehaviour
	{
		[Token(Token = "0x400202B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TankOfDoom tankOfDoom;

		[Token(Token = "0x400202C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FirstEndingTrigger foundEndingTrigger;

		[Token(Token = "0x600236A")]
		[Address(RVA = "0x124DA70", Offset = "0x124DA70", VA = "0x124DA70")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600236B")]
		[Address(RVA = "0x124DD08", Offset = "0x124DD08", VA = "0x124DD08")]
		public TankOfDoomTriggerActivator()
		{
		}
	}
}
namespace VRTK
{
	[Token(Token = "0x20004FE")]
	public class ConsoleViewer : MonoBehaviour
	{
		[Token(Token = "0x400202D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The size of the font the log text is displayed in.")]
		public int fontSize;

		[Token(Token = "0x400202E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("The colour of the text for an info log message.")]
		public UnityEngine.Color infoMessage;

		[Token(Token = "0x400202F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("The colour of the text for an assertion log message.")]
		public UnityEngine.Color assertMessage;

		[Token(Token = "0x4002030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("The colour of the text for a warning log message.")]
		public UnityEngine.Color warningMessage;

		[Token(Token = "0x4002031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("The colour of the text for an error log message.")]
		public UnityEngine.Color errorMessage;

		[Token(Token = "0x4002032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("The colour of the text for an exception log message.")]
		public UnityEngine.Color exceptionMessage;

		[Token(Token = "0x4002033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Dictionary<LogType, UnityEngine.Color> logTypeColors;

		[Token(Token = "0x4002034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private ScrollRect scrollWindow;

		[Token(Token = "0x4002035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private RectTransform consoleRect;

		[Token(Token = "0x4002036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Text consoleOutput;

		[Token(Token = "0x4002037")]
		protected const string NEWLINE = "\n";

		[Token(Token = "0x4002038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected int lineBuffer;

		[Token(Token = "0x4002039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected int currentBuffer;

		[Token(Token = "0x400203A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected string lastMessage;

		[Token(Token = "0x400203B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected bool collapseLog;

		[Token(Token = "0x600236C")]
		[Address(RVA = "0x124DD10", Offset = "0x124DD10", VA = "0x124DD10", Slot = "4")]
		public virtual void SetCollapse(bool state)
		{
		}

		[Token(Token = "0x600236D")]
		[Address(RVA = "0x124DD1C", Offset = "0x124DD1C", VA = "0x124DD1C", Slot = "5")]
		public virtual void ClearLog()
		{
		}

		[Token(Token = "0x600236E")]
		[Address(RVA = "0x124DD8C", Offset = "0x124DD8C", VA = "0x124DD8C", Slot = "6")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600236F")]
		[Address(RVA = "0x124DEBC", Offset = "0x124DEBC", VA = "0x124DEBC", Slot = "7")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6002370")]
		[Address(RVA = "0x124DF30", Offset = "0x124DF30", VA = "0x124DF30", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6002371")]
		[Address(RVA = "0x124DFA4", Offset = "0x124DFA4", VA = "0x124DFA4", Slot = "9")]
		protected virtual string GetMessage(string message, LogType type)
		{
			return null;
		}

		[Token(Token = "0x6002372")]
		[Address(RVA = "0x124E1D4", Offset = "0x124E1D4", VA = "0x124E1D4", Slot = "10")]
		protected virtual void HandleLog(string message, string stackTrace, LogType type)
		{
		}

		[Token(Token = "0x6002373")]
		[Address(RVA = "0x124E408", Offset = "0x124E408", VA = "0x124E408")]
		public ConsoleViewer()
		{
		}
	}
}
namespace PSNSample
{
	[Token(Token = "0x20004FF")]
	public class SonyNpMain : MonoBehaviour, IScreen
	{
		[Token(Token = "0x400203C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SonyNpMain Instance;

		[Token(Token = "0x400203D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("PS5 sony np main")]
		public MeshRenderer iconRender;

		[Token(Token = "0x6002374")]
		[Address(RVA = "0x124E458", Offset = "0x124E458", VA = "0x124E458")]
		public SonyNpMain()
		{
		}
	}
	[Token(Token = "0x2000500")]
	internal class User
	{
		[Token(Token = "0x6002375")]
		[Address(RVA = "0x124E460", Offset = "0x124E460", VA = "0x124E460")]
		public User()
		{
		}
	}
	[Token(Token = "0x2000501")]
	public interface IScreen
	{
	}
	[Token(Token = "0x2000502")]
	public class MenuLayout
	{
		[Token(Token = "0x6002376")]
		[Address(RVA = "0x124E468", Offset = "0x124E468", VA = "0x124E468")]
		public MenuLayout()
		{
		}
	}
	[Token(Token = "0x2000503")]
	public class MenuStack
	{
		[Token(Token = "0x6002377")]
		[Address(RVA = "0x124E470", Offset = "0x124E470", VA = "0x124E470")]
		public MenuStack()
		{
		}
	}
	[Token(Token = "0x2000504")]
	public class Notifications : MonoBehaviour
	{
		[Token(Token = "0x6002378")]
		[Address(RVA = "0x124E478", Offset = "0x124E478", VA = "0x124E478")]
		public Notifications()
		{
		}
	}
	[Token(Token = "0x2000505")]
	public class OnScreenLog : MonoBehaviour
	{
		[Token(Token = "0x6002379")]
		[Address(RVA = "0x124E480", Offset = "0x124E480", VA = "0x124E480")]
		public OnScreenLog()
		{
		}
	}
}
namespace QuickOutline
{
	[Token(Token = "0x2000506")]
	[DisallowMultipleComponent]
	public class Outline : MonoBehaviour
	{
		[Token(Token = "0x2000507")]
		public enum Mode
		{
			[Token(Token = "0x400204A")]
			OutlineAll,
			[Token(Token = "0x400204B")]
			OutlineVisible,
			[Token(Token = "0x400204C")]
			OutlineHidden,
			[Token(Token = "0x400204D")]
			OutlineAndSilhouette,
			[Token(Token = "0x400204E")]
			SilhouetteOnly
		}

		[Serializable]
		[Token(Token = "0x2000508")]
		private class ListVector3
		{
			[Token(Token = "0x400204F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<Vector3> data;

			[Token(Token = "0x600238C")]
			[Address(RVA = "0x124FD68", Offset = "0x124FD68", VA = "0x124FD68")]
			public ListVector3()
			{
			}
		}

		[Token(Token = "0x400203E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HashSet<Mesh> registeredMeshes;

		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Mode outlineMode;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private UnityEngine.Color outlineColor;

		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Range(0f, 10f)]
		private float outlineWidth;

		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[UnityEngine.Tooltip("Precompute enabled: Per-vertex calculations are performed in the editor and serialized with the object. Precompute disabled: Per-vertex calculations are performed at runtime in Awake(). This may cause a pause for large meshes.")]
		[Header("Optional")]
		private bool precomputeOutline;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private List<Mesh> bakeKeys;

		[Token(Token = "0x4002044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		private List<ListVector3> bakeValues;

		[Token(Token = "0x4002045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Renderer[] renderers;

		[Token(Token = "0x4002046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material outlineMaskMaterial;

		[Token(Token = "0x4002047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material outlineFillMaterial;

		[Token(Token = "0x4002048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool needsUpdate;

		[Token(Token = "0x1700040E")]
		public Mode OutlineMode
		{
			[Token(Token = "0x600237A")]
			[Address(RVA = "0x124E488", Offset = "0x124E488", VA = "0x124E488")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x600237B")]
			[Address(RVA = "0x124E490", Offset = "0x124E490", VA = "0x124E490")]
			set
			{
			}
		}

		[Token(Token = "0x1700040F")]
		public UnityEngine.Color OutlineColor
		{
			[Token(Token = "0x600237C")]
			[Address(RVA = "0x124E4A0", Offset = "0x124E4A0", VA = "0x124E4A0")]
			get
			{
				return default(UnityEngine.Color);
			}
			[Token(Token = "0x600237D")]
			[Address(RVA = "0x124E4AC", Offset = "0x124E4AC", VA = "0x124E4AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000410")]
		public float OutlineWidth
		{
			[Token(Token = "0x600237E")]
			[Address(RVA = "0x124E4C0", Offset = "0x124E4C0", VA = "0x124E4C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600237F")]
			[Address(RVA = "0x124E4C8", Offset = "0x124E4C8", VA = "0x124E4C8")]
			set
			{
			}
		}

		[Token(Token = "0x6002380")]
		[Address(RVA = "0x124E4D8", Offset = "0x124E4D8", VA = "0x124E4D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002381")]
		[Address(RVA = "0x124E92C", Offset = "0x124E92C", VA = "0x124E92C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002382")]
		[Address(RVA = "0x124EAE0", Offset = "0x124EAE0", VA = "0x124EAE0")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6002383")]
		[Address(RVA = "0x124EE70", Offset = "0x124EE70", VA = "0x124EE70")]
		private void Update()
		{
		}

		[Token(Token = "0x6002384")]
		[Address(RVA = "0x124F030", Offset = "0x124F030", VA = "0x124F030")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002385")]
		[Address(RVA = "0x124F148", Offset = "0x124F148", VA = "0x124F148")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002386")]
		[Address(RVA = "0x124EBF8", Offset = "0x124EBF8", VA = "0x124EBF8")]
		private void Bake()
		{
		}

		[Token(Token = "0x6002387")]
		[Address(RVA = "0x124E678", Offset = "0x124E678", VA = "0x124E678")]
		private void LoadSmoothNormals()
		{
		}

		[Token(Token = "0x6002388")]
		[Address(RVA = "0x124F1B0", Offset = "0x124F1B0", VA = "0x124F1B0")]
		private List<Vector3> SmoothNormals(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6002389")]
		[Address(RVA = "0x124EE84", Offset = "0x124EE84", VA = "0x124EE84")]
		private void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x600238A")]
		[Address(RVA = "0x124FD70", Offset = "0x124FD70", VA = "0x124FD70")]
		public Outline()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x200050A")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x4002053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x4002054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x4002055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x4002056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x4002057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x4002058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x6002391")]
		[Address(RVA = "0x1250048", Offset = "0x1250048", VA = "0x1250048")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002392")]
		[Address(RVA = "0x12502D0", Offset = "0x12502D0", VA = "0x12502D0")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x6002393")]
		[Address(RVA = "0x1250454", Offset = "0x1250454", VA = "0x1250454")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002394")]
		[Address(RVA = "0x12504C4", Offset = "0x12504C4", VA = "0x12504C4", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6002395")]
		[Address(RVA = "0x1250590", Offset = "0x1250590", VA = "0x1250590", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6002396")]
		[Address(RVA = "0x12505F4", Offset = "0x12505F4", VA = "0x12505F4")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x200050B")]
	public class ButtonHandler : MonoBehaviour
	{
		[Token(Token = "0x4002059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x6002397")]
		[Address(RVA = "0x1250660", Offset = "0x1250660", VA = "0x1250660")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002398")]
		[Address(RVA = "0x1250664", Offset = "0x1250664", VA = "0x1250664")]
		public void SetDownState()
		{
		}

		[Token(Token = "0x6002399")]
		[Address(RVA = "0x125072C", Offset = "0x125072C", VA = "0x125072C")]
		public void SetUpState()
		{
		}

		[Token(Token = "0x600239A")]
		[Address(RVA = "0x12507F4", Offset = "0x12507F4", VA = "0x12507F4")]
		public void SetAxisPositiveState()
		{
		}

		[Token(Token = "0x600239B")]
		[Address(RVA = "0x12508BC", Offset = "0x12508BC", VA = "0x12508BC")]
		public void SetAxisNeutralState()
		{
		}

		[Token(Token = "0x600239C")]
		[Address(RVA = "0x1250984", Offset = "0x1250984", VA = "0x1250984")]
		public void SetAxisNegativeState()
		{
		}

		[Token(Token = "0x600239D")]
		[Address(RVA = "0x1250A4C", Offset = "0x1250A4C", VA = "0x1250A4C")]
		public void Update()
		{
		}

		[Token(Token = "0x600239E")]
		[Address(RVA = "0x1250A50", Offset = "0x1250A50", VA = "0x1250A50")]
		public ButtonHandler()
		{
		}
	}
	[Token(Token = "0x200050C")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x200050D")]
		public enum ActiveInputMethod
		{
			[Token(Token = "0x400205E")]
			Hardware,
			[Token(Token = "0x400205F")]
			Touch
		}

		[Token(Token = "0x200050E")]
		public class VirtualAxis
		{
			[Token(Token = "0x4002061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x17000412")]
			public string name
			{
				[Token(Token = "0x60023B8")]
				[Address(RVA = "0x1251830", Offset = "0x1251830", VA = "0x1251830")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60023B9")]
				[Address(RVA = "0x1251838", Offset = "0x1251838", VA = "0x1251838")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000413")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x60023BA")]
				[Address(RVA = "0x1251840", Offset = "0x1251840", VA = "0x1251840")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60023BB")]
				[Address(RVA = "0x1251848", Offset = "0x1251848", VA = "0x1251848")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000414")]
			public float GetValue
			{
				[Token(Token = "0x60023C0")]
				[Address(RVA = "0x125189C", Offset = "0x125189C", VA = "0x125189C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000415")]
			public float GetValueRaw
			{
				[Token(Token = "0x60023C1")]
				[Address(RVA = "0x12518A4", Offset = "0x12518A4", VA = "0x12518A4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x60023BC")]
			[Address(RVA = "0x12501C4", Offset = "0x12501C4", VA = "0x12501C4")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x60023BD")]
			[Address(RVA = "0x1251854", Offset = "0x1251854", VA = "0x1251854")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x60023BE")]
			[Address(RVA = "0x125046C", Offset = "0x125046C", VA = "0x125046C")]
			public void Remove()
			{
			}

			[Token(Token = "0x60023BF")]
			[Address(RVA = "0x1251894", Offset = "0x1251894", VA = "0x1251894")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x200050F")]
		public class VirtualButton
		{
			[Token(Token = "0x4002065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x4002066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x4002067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x17000416")]
			public string name
			{
				[Token(Token = "0x60023C2")]
				[Address(RVA = "0x12518AC", Offset = "0x12518AC", VA = "0x12518AC")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60023C3")]
				[Address(RVA = "0x12518B4", Offset = "0x12518B4", VA = "0x12518B4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000417")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x60023C4")]
				[Address(RVA = "0x12518BC", Offset = "0x12518BC", VA = "0x12518BC")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60023C5")]
				[Address(RVA = "0x12518C4", Offset = "0x12518C4", VA = "0x12518C4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000418")]
			public bool GetButton
			{
				[Token(Token = "0x60023CB")]
				[Address(RVA = "0x1251A00", Offset = "0x1251A00", VA = "0x1251A00")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000419")]
			public bool GetButtonDown
			{
				[Token(Token = "0x60023CC")]
				[Address(RVA = "0x1251A08", Offset = "0x1251A08", VA = "0x1251A08")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700041A")]
			public bool GetButtonUp
			{
				[Token(Token = "0x60023CD")]
				[Address(RVA = "0x1251A2C", Offset = "0x1251A2C", VA = "0x1251A2C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60023C6")]
			[Address(RVA = "0x12518D0", Offset = "0x12518D0", VA = "0x12518D0")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x60023C7")]
			[Address(RVA = "0x1251914", Offset = "0x1251914", VA = "0x1251914")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x60023C8")]
			[Address(RVA = "0x125195C", Offset = "0x125195C", VA = "0x125195C")]
			public void Pressed()
			{
			}

			[Token(Token = "0x60023C9")]
			[Address(RVA = "0x1251988", Offset = "0x1251988", VA = "0x1251988")]
			public void Released()
			{
			}

			[Token(Token = "0x60023CA")]
			[Address(RVA = "0x12519A8", Offset = "0x12519A8", VA = "0x12519A8")]
			public void Remove()
			{
			}
		}

		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x400205C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x17000411")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x60023B4")]
			[Address(RVA = "0x125165C", Offset = "0x125165C", VA = "0x125165C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600239F")]
		[Address(RVA = "0x1250A58", Offset = "0x1250A58", VA = "0x1250A58")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x60023A0")]
		[Address(RVA = "0x1250B30", Offset = "0x1250B30", VA = "0x1250B30")]
		public static void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod)
		{
		}

		[Token(Token = "0x60023A1")]
		[Address(RVA = "0x125015C", Offset = "0x125015C", VA = "0x125015C")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60023A2")]
		[Address(RVA = "0x1250C2C", Offset = "0x1250C2C", VA = "0x1250C2C")]
		public static bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60023A3")]
		[Address(RVA = "0x1250200", Offset = "0x1250200", VA = "0x1250200")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x60023A4")]
		[Address(RVA = "0x1250E84", Offset = "0x1250E84", VA = "0x1250E84")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x60023A5")]
		[Address(RVA = "0x1251084", Offset = "0x1251084", VA = "0x1251084")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60023A6")]
		[Address(RVA = "0x12511CC", Offset = "0x12511CC", VA = "0x12511CC")]
		public static void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60023A7")]
		[Address(RVA = "0x1250268", Offset = "0x1250268", VA = "0x1250268")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60023A8")]
		[Address(RVA = "0x1251358", Offset = "0x1251358", VA = "0x1251358")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x60023A9")]
		[Address(RVA = "0x1251430", Offset = "0x1251430", VA = "0x1251430")]
		public static float GetAxisRaw(string name)
		{
			return default(float);
		}

		[Token(Token = "0x60023AA")]
		[Address(RVA = "0x12513B0", Offset = "0x12513B0", VA = "0x12513B0")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60023AB")]
		[Address(RVA = "0x1251488", Offset = "0x1251488", VA = "0x1251488")]
		public static bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60023AC")]
		[Address(RVA = "0x12514F8", Offset = "0x12514F8", VA = "0x12514F8")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60023AD")]
		[Address(RVA = "0x1251568", Offset = "0x1251568", VA = "0x1251568")]
		public static bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60023AE")]
		[Address(RVA = "0x12506BC", Offset = "0x12506BC", VA = "0x12506BC")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60023AF")]
		[Address(RVA = "0x1250784", Offset = "0x1250784", VA = "0x1250784")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60023B0")]
		[Address(RVA = "0x125084C", Offset = "0x125084C", VA = "0x125084C")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60023B1")]
		[Address(RVA = "0x12509DC", Offset = "0x12509DC", VA = "0x12509DC")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60023B2")]
		[Address(RVA = "0x1250914", Offset = "0x1250914", VA = "0x1250914")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60023B3")]
		[Address(RVA = "0x12515D8", Offset = "0x12515D8", VA = "0x12515D8")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60023B5")]
		[Address(RVA = "0x12516C8", Offset = "0x12516C8", VA = "0x12516C8")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x60023B6")]
		[Address(RVA = "0x1251740", Offset = "0x1251740", VA = "0x1251740")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x60023B7")]
		[Address(RVA = "0x12517B8", Offset = "0x12517B8", VA = "0x12517B8")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x2000510")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x4002068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x60023CE")]
		[Address(RVA = "0x1251A50", Offset = "0x1251A50", VA = "0x1251A50")]
		private void Update()
		{
		}

		[Token(Token = "0x60023CF")]
		[Address(RVA = "0x1251A54", Offset = "0x1251A54", VA = "0x1251A54")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x60023D0")]
		[Address(RVA = "0x1251AC4", Offset = "0x1251AC4", VA = "0x1251AC4")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x2000511")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x2000512")]
		public enum AxisOption
		{
			[Token(Token = "0x4002073")]
			Both,
			[Token(Token = "0x4002074")]
			OnlyHorizontal,
			[Token(Token = "0x4002075")]
			OnlyVertical
		}

		[Token(Token = "0x4002069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x400206A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x400206B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x400206C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x400206D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x400206E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x400206F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x4002070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4002071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0x1251ACC", Offset = "0x1251ACC", VA = "0x1251ACC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0x1251C30", Offset = "0x1251C30", VA = "0x1251C30")]
		private void Start()
		{
		}

		[Token(Token = "0x60023D3")]
		[Address(RVA = "0x1251C60", Offset = "0x1251C60", VA = "0x1251C60")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60023D4")]
		[Address(RVA = "0x1251AD0", Offset = "0x1251AD0", VA = "0x1251AD0")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60023D5")]
		[Address(RVA = "0x1251CC0", Offset = "0x1251CC0", VA = "0x1251CC0", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60023D6")]
		[Address(RVA = "0x1251E0C", Offset = "0x1251E0C", VA = "0x1251E0C", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60023D7")]
		[Address(RVA = "0x1251E48", Offset = "0x1251E48", VA = "0x1251E48", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0x1251E4C", Offset = "0x1251E4C", VA = "0x1251E4C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0x1251E8C", Offset = "0x1251E8C", VA = "0x1251E8C")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x2000513")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x60023DA")]
		[Address(RVA = "0x1251F18", Offset = "0x1251F18", VA = "0x1251F18")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0x1251F28", Offset = "0x1251F28", VA = "0x1251F28")]
		private void Start()
		{
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0x1251F20", Offset = "0x1251F20", VA = "0x1251F20")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0x1252030", Offset = "0x1252030", VA = "0x1252030")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x60023DE")]
		[Address(RVA = "0x1252328", Offset = "0x1252328", VA = "0x1252328")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x2000514")]
	[RequireComponent(typeof(UnityEngine.UI.Image))]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x2000515")]
		public enum AxisOption
		{
			[Token(Token = "0x4002089")]
			Both,
			[Token(Token = "0x400208A")]
			OnlyHorizontal,
			[Token(Token = "0x400208B")]
			OnlyVertical
		}

		[Token(Token = "0x2000516")]
		public enum ControlStyle
		{
			[Token(Token = "0x400208D")]
			Absolute,
			[Token(Token = "0x400208E")]
			Relative,
			[Token(Token = "0x400208F")]
			Swipe
		}

		[Token(Token = "0x4002076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x4002077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x4002078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x4002079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x400207A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x400207B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x400207C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x400207D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x400207E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x400207F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x4002080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x4002081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4002082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.UI.Image m_Image;

		[Token(Token = "0x60023DF")]
		[Address(RVA = "0x1252330", Offset = "0x1252330", VA = "0x1252330")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60023E0")]
		[Address(RVA = "0x1252494", Offset = "0x1252494", VA = "0x1252494")]
		private void Start()
		{
		}

		[Token(Token = "0x60023E1")]
		[Address(RVA = "0x1252334", Offset = "0x1252334", VA = "0x1252334")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60023E2")]
		[Address(RVA = "0x125251C", Offset = "0x125251C", VA = "0x125251C")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60023E3")]
		[Address(RVA = "0x125261C", Offset = "0x125261C", VA = "0x125261C", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60023E4")]
		[Address(RVA = "0x1252654", Offset = "0x1252654", VA = "0x1252654")]
		private void Update()
		{
		}

		[Token(Token = "0x60023E5")]
		[Address(RVA = "0x125282C", Offset = "0x125282C", VA = "0x125282C", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60023E6")]
		[Address(RVA = "0x125288C", Offset = "0x125288C", VA = "0x125288C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60023E7")]
		[Address(RVA = "0x125294C", Offset = "0x125294C", VA = "0x125294C")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x2000517")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x1700041B")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x60023E8")]
			[Address(RVA = "0x12529E0", Offset = "0x12529E0", VA = "0x12529E0")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60023E9")]
			[Address(RVA = "0x12529EC", Offset = "0x12529EC", VA = "0x12529EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60023EA")]
		[Address(RVA = "0x1250BD4", Offset = "0x1250BD4", VA = "0x1250BD4")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60023EB")]
		[Address(RVA = "0x1250C94", Offset = "0x1250C94", VA = "0x1250C94")]
		public bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60023EC")]
		[Address(RVA = "0x1250CEC", Offset = "0x1250CEC", VA = "0x1250CEC")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x60023ED")]
		[Address(RVA = "0x1250EEC", Offset = "0x1250EEC", VA = "0x1250EEC")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x60023EE")]
		[Address(RVA = "0x125113C", Offset = "0x125113C", VA = "0x125113C")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60023EF")]
		[Address(RVA = "0x1251234", Offset = "0x1251234", VA = "0x1251234")]
		public void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60023F0")]
		[Address(RVA = "0x12512C4", Offset = "0x12512C4", VA = "0x12512C4")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0x1251738", Offset = "0x1251738", VA = "0x1251738")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x60023F2")]
		[Address(RVA = "0x12517B0", Offset = "0x12517B0", VA = "0x12517B0")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0x1251828", Offset = "0x1251828", VA = "0x1251828")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x60023F4")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x60023F5")]
		public abstract bool GetButton(string name);

		[Token(Token = "0x60023F6")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x60023F7")]
		public abstract bool GetButtonUp(string name);

		[Token(Token = "0x60023F8")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x60023F9")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x60023FA")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x60023FB")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x60023FC")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x60023FD")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x60023FE")]
		public abstract Vector3 MousePosition();

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0x12529F8", Offset = "0x12529F8", VA = "0x12529F8")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x2000518")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x6002400")]
		[Address(RVA = "0x1252B20", Offset = "0x1252B20", VA = "0x1252B20")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x6002401")]
		[Address(RVA = "0x1252BD0", Offset = "0x1252BD0", VA = "0x1252BD0")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x6002402")]
		[Address(RVA = "0x1252C78", Offset = "0x1252C78", VA = "0x1252C78", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6002403")]
		[Address(RVA = "0x1252D10", Offset = "0x1252D10", VA = "0x1252D10", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6002404")]
		[Address(RVA = "0x1252DC4", Offset = "0x1252DC4", VA = "0x1252DC4", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6002405")]
		[Address(RVA = "0x1252E6C", Offset = "0x1252E6C", VA = "0x1252E6C", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6002406")]
		[Address(RVA = "0x1252F08", Offset = "0x1252F08", VA = "0x1252F08", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0x1252FA4", Offset = "0x1252FA4", VA = "0x1252FA4", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6002408")]
		[Address(RVA = "0x125303C", Offset = "0x125303C", VA = "0x125303C", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0x12530E0", Offset = "0x12530E0", VA = "0x12530E0", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600240A")]
		[Address(RVA = "0x125318C", Offset = "0x125318C", VA = "0x125318C", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600240B")]
		[Address(RVA = "0x1253238", Offset = "0x1253238", VA = "0x1253238", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600240C")]
		[Address(RVA = "0x12532D0", Offset = "0x12532D0", VA = "0x12532D0", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600240D")]
		[Address(RVA = "0x1250B28", Offset = "0x1250B28", VA = "0x1250B28")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x2000519")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x600240E")]
		[Address(RVA = "0x12532DC", Offset = "0x12532DC", VA = "0x12532DC", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x600240F")]
		[Address(RVA = "0x12532F0", Offset = "0x12532F0", VA = "0x12532F0", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6002410")]
		[Address(RVA = "0x12532FC", Offset = "0x12532FC", VA = "0x12532FC", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6002411")]
		[Address(RVA = "0x1253308", Offset = "0x1253308", VA = "0x1253308", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0x1253314", Offset = "0x1253314", VA = "0x1253314", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0x1253364", Offset = "0x1253364", VA = "0x1253364", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0x12533B4", Offset = "0x12533B4", VA = "0x12533B4", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6002415")]
		[Address(RVA = "0x1253404", Offset = "0x1253404", VA = "0x1253404", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6002416")]
		[Address(RVA = "0x1253454", Offset = "0x1253454", VA = "0x1253454", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6002417")]
		[Address(RVA = "0x12534A4", Offset = "0x12534A4", VA = "0x12534A4", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6002418")]
		[Address(RVA = "0x12534F4", Offset = "0x12534F4", VA = "0x12534F4", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002419")]
		[Address(RVA = "0x1250B2C", Offset = "0x1250B2C", VA = "0x1250B2C")]
		public StandaloneInput()
		{
		}
	}
}
namespace ExitGames.Demos.DemoPunVoice
{
	[Token(Token = "0x200051A")]
	[RequireComponent(typeof(PhotonView))]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(Animator))]
	public abstract class BaseController : MonoBehaviour
	{
		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera ControllerCamera;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Rigidbody rigidBody;

		[Token(Token = "0x4002096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Animator animator;

		[Token(Token = "0x4002097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform camTrans;

		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float h;

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float v;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected float speed;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float cameraDistance;

		[Token(Token = "0x600241A")]
		[Address(RVA = "0x12534FC", Offset = "0x12534FC", VA = "0x12534FC", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0x1253704", Offset = "0x1253704", VA = "0x1253704", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600241C")]
		[Address(RVA = "0x1253828", Offset = "0x1253828", VA = "0x1253828", Slot = "6")]
		protected virtual void ChangePOV_CameraChanged(Camera camera)
		{
		}

		[Token(Token = "0x600241D")]
		[Address(RVA = "0x12538D0", Offset = "0x12538D0", VA = "0x12538D0", Slot = "7")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600241E")]
		[Address(RVA = "0x1253964", Offset = "0x1253964", VA = "0x1253964", Slot = "8")]
		protected virtual void Init()
		{
		}

		[Token(Token = "0x600241F")]
		[Address(RVA = "0x12539F4", Offset = "0x12539F4", VA = "0x12539F4", Slot = "9")]
		protected virtual void SetCamera()
		{
		}

		[Token(Token = "0x6002420")]
		[Address(RVA = "0x1253AA0", Offset = "0x1253AA0", VA = "0x1253AA0", Slot = "10")]
		protected virtual void UpdateAnimator(float h, float v)
		{
		}

		[Token(Token = "0x6002421")]
		[Address(RVA = "0x1253B18", Offset = "0x1253B18", VA = "0x1253B18", Slot = "11")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6002422")]
		[Address(RVA = "0x1253C0C", Offset = "0x1253C0C", VA = "0x1253C0C", Slot = "12")]
		protected virtual void ShowCamera(Camera camera)
		{
		}

		[Token(Token = "0x6002423")]
		[Address(RVA = "0x1253C9C", Offset = "0x1253C9C", VA = "0x1253C9C", Slot = "13")]
		protected virtual void HideCamera(Camera camera)
		{
		}

		[Token(Token = "0x6002424")]
		protected abstract void Move(float h, float v);

		[Token(Token = "0x6002425")]
		[Address(RVA = "0x1253D2C", Offset = "0x1253D2C", VA = "0x1253D2C")]
		protected BaseController()
		{
		}
	}
	[Token(Token = "0x200051B")]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(Toggle))]
	public class BetterToggle : MonoBehaviour
	{
		[Token(Token = "0x200051C")]
		public delegate void OnToggle(Toggle toggle);

		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle toggle;

		[Token(Token = "0x14000015")]
		public static event OnToggle ToggleValueChanged
		{
			[Token(Token = "0x6002426")]
			[Address(RVA = "0x1253D3C", Offset = "0x1253D3C", VA = "0x1253D3C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002427")]
			[Address(RVA = "0x1253DF4", Offset = "0x1253DF4", VA = "0x1253DF4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002428")]
		[Address(RVA = "0x1253EAC", Offset = "0x1253EAC", VA = "0x1253EAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002429")]
		[Address(RVA = "0x1253F88", Offset = "0x1253F88", VA = "0x1253F88")]
		public void OnToggleValueChanged()
		{
		}

		[Token(Token = "0x600242A")]
		[Address(RVA = "0x1253FF4", Offset = "0x1253FF4", VA = "0x1253FF4")]
		public BetterToggle()
		{
		}
	}
	[Token(Token = "0x200051D")]
	public class ChangePOV : MonoBehaviour, IMatchmakingCallbacks
	{
		[Token(Token = "0x200051E")]
		public delegate void OnCameraChanged(Camera newCamera);

		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FirstPersonController firstPersonController;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ThirdPersonController thirdPersonController;

		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OrthographicController orthographicController;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialCameraPosition;

		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion initialCameraRotation;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Camera defaultCamera;

		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject ButtonsHolder;

		[Token(Token = "0x40020A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Button FirstPersonCamActivator;

		[Token(Token = "0x40020A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Button ThirdPersonCamActivator;

		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Button OrthographicCamActivator;

		[Token(Token = "0x14000016")]
		public static event OnCameraChanged CameraChanged
		{
			[Token(Token = "0x6002430")]
			[Address(RVA = "0x125364C", Offset = "0x125364C", VA = "0x125364C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002431")]
			[Address(RVA = "0x1253770", Offset = "0x1253770", VA = "0x1253770")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002432")]
		[Address(RVA = "0x125417C", Offset = "0x125417C", VA = "0x125417C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002433")]
		[Address(RVA = "0x12543C0", Offset = "0x12543C0", VA = "0x12543C0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002434")]
		[Address(RVA = "0x1254520", Offset = "0x1254520", VA = "0x1254520")]
		private void Start()
		{
		}

		[Token(Token = "0x6002435")]
		[Address(RVA = "0x1254744", Offset = "0x1254744", VA = "0x1254744")]
		private void OnCharacterInstantiated(GameObject character)
		{
		}

		[Token(Token = "0x6002436")]
		[Address(RVA = "0x125484C", Offset = "0x125484C", VA = "0x125484C")]
		private void FirstPersonMode()
		{
		}

		[Token(Token = "0x6002437")]
		[Address(RVA = "0x12549D0", Offset = "0x12549D0", VA = "0x12549D0")]
		private void ThirdPersonMode()
		{
		}

		[Token(Token = "0x6002438")]
		[Address(RVA = "0x12549D8", Offset = "0x12549D8", VA = "0x12549D8")]
		private void OrthographicMode()
		{
		}

		[Token(Token = "0x6002439")]
		[Address(RVA = "0x1254854", Offset = "0x1254854", VA = "0x1254854")]
		private void ToggleMode(BaseController controller)
		{
		}

		[Token(Token = "0x600243A")]
		[Address(RVA = "0x12549E0", Offset = "0x12549E0", VA = "0x12549E0")]
		private void BroadcastChange(Camera camera)
		{
		}

		[Token(Token = "0x600243B")]
		[Address(RVA = "0x1254A84", Offset = "0x1254A84", VA = "0x1254A84", Slot = "4")]
		public void OnFriendListUpdate(List<Photon.Realtime.FriendInfo> friendList)
		{
		}

		[Token(Token = "0x600243C")]
		[Address(RVA = "0x1254A88", Offset = "0x1254A88", VA = "0x1254A88", Slot = "5")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x600243D")]
		[Address(RVA = "0x1254A8C", Offset = "0x1254A8C", VA = "0x1254A8C", Slot = "6")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x600243E")]
		[Address(RVA = "0x1254A90", Offset = "0x1254A90", VA = "0x1254A90", Slot = "7")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x600243F")]
		[Address(RVA = "0x1254A94", Offset = "0x1254A94", VA = "0x1254A94", Slot = "8")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002440")]
		[Address(RVA = "0x1254A98", Offset = "0x1254A98", VA = "0x1254A98", Slot = "9")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002441")]
		[Address(RVA = "0x1254A9C", Offset = "0x1254A9C", VA = "0x1254A9C", Slot = "10")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x6002442")]
		[Address(RVA = "0x1254BB0", Offset = "0x1254BB0", VA = "0x1254BB0")]
		public ChangePOV()
		{
		}
	}
	[Token(Token = "0x200051F")]
	public class CharacterInstantiation : MonoBehaviourPunCallbacks, IOnEventCallback
	{
		[Token(Token = "0x2000520")]
		public enum SpawnSequence
		{
			[Token(Token = "0x40020B8")]
			Connection,
			[Token(Token = "0x40020B9")]
			Random,
			[Token(Token = "0x40020BA")]
			RoundRobin
		}

		[Token(Token = "0x2000521")]
		public delegate void OnCharacterInstantiated(GameObject character);

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform SpawnPosition;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float PositionOffset;

		[Token(Token = "0x40020AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] PrefabsToInstantiate;

		[Token(Token = "0x40020AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Transform> SpawnPoints;

		[Token(Token = "0x40020AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool AutoSpawn;

		[Token(Token = "0x40020AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool UseRandomOffset;

		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public SpawnSequence Sequence;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private byte manualInstantiationEventCode;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected int lastUsedSpawnPointIndex;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool manualInstantiation;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[SerializeField]
		private bool differentPrefabs;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private string localPrefabSuffix;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private string remotePrefabSuffix;

		[Token(Token = "0x14000017")]
		public static event OnCharacterInstantiated CharacterInstantiated
		{
			[Token(Token = "0x6002447")]
			[Address(RVA = "0x1254308", Offset = "0x1254308", VA = "0x1254308")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002448")]
			[Address(RVA = "0x1254468", Offset = "0x1254468", VA = "0x1254468")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002449")]
		[Address(RVA = "0x1254BF8", Offset = "0x1254BF8", VA = "0x1254BF8", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x600244A")]
		[Address(RVA = "0x1254E0C", Offset = "0x1254E0C", VA = "0x1254E0C")]
		private void ManualInstantiation(int index, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600244B")]
		[Address(RVA = "0x1255338", Offset = "0x1255338", VA = "0x1255338", Slot = "54")]
		public void OnEvent(EventData photonEvent)
		{
		}

		[Token(Token = "0x600244C")]
		[Address(RVA = "0x1255698", Offset = "0x1255698", VA = "0x1255698", Slot = "55")]
		protected virtual void GetSpawnPoint(out Vector3 spawnPos, out Quaternion spawnRot)
		{
		}

		[Token(Token = "0x600244D")]
		[Address(RVA = "0x12558B0", Offset = "0x12558B0", VA = "0x12558B0", Slot = "56")]
		protected virtual Transform GetSpawnPoint()
		{
			return null;
		}

		[Token(Token = "0x600244E")]
		[Address(RVA = "0x12559D0", Offset = "0x12559D0", VA = "0x12559D0")]
		public CharacterInstantiation()
		{
		}
	}
	[Token(Token = "0x2000522")]
	public class FirstPersonController : BaseController
	{
		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private MouseLookHelper mouseLook;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float oldYRotation;

		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion velRotation;

		[Token(Token = "0x1700041C")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6002453")]
			[Address(RVA = "0x1255A38", Offset = "0x1255A38", VA = "0x1255A38")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6002454")]
		[Address(RVA = "0x1255A54", Offset = "0x1255A54", VA = "0x1255A54", Slot = "9")]
		protected override void SetCamera()
		{
		}

		[Token(Token = "0x6002455")]
		[Address(RVA = "0x1255A98", Offset = "0x1255A98", VA = "0x1255A98", Slot = "14")]
		protected override void Move(float h, float v)
		{
		}

		[Token(Token = "0x6002456")]
		[Address(RVA = "0x1255B20", Offset = "0x1255B20", VA = "0x1255B20")]
		private void Update()
		{
		}

		[Token(Token = "0x6002457")]
		[Address(RVA = "0x1255B24", Offset = "0x1255B24", VA = "0x1255B24")]
		private void RotateView()
		{
		}

		[Token(Token = "0x6002458")]
		[Address(RVA = "0x1255C4C", Offset = "0x1255C4C", VA = "0x1255C4C")]
		public FirstPersonController()
		{
		}
	}
	[Token(Token = "0x2000523")]
	[RequireComponent(typeof(Canvas))]
	public class Highlighter : MonoBehaviour
	{
		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Canvas canvas;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PhotonVoiceView photonVoiceView;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEngine.UI.Image recorderSprite;

		[Token(Token = "0x40020C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.UI.Image speakerSprite;

		[Token(Token = "0x40020C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text bufferLagText;

		[Token(Token = "0x40020C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showSpeakerLag;

		[Token(Token = "0x6002459")]
		[Address(RVA = "0x1255CC8", Offset = "0x1255CC8", VA = "0x1255CC8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600245A")]
		[Address(RVA = "0x1255E48", Offset = "0x1255E48", VA = "0x1255E48")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600245B")]
		[Address(RVA = "0x1255FC8", Offset = "0x1255FC8", VA = "0x1255FC8")]
		private void VoiceDemoUI_DebugToggled(bool debugMode)
		{
		}

		[Token(Token = "0x600245C")]
		[Address(RVA = "0x1255FD4", Offset = "0x1255FD4", VA = "0x1255FD4")]
		private void ChangePOV_CameraChanged(Camera camera)
		{
		}

		[Token(Token = "0x600245D")]
		[Address(RVA = "0x1255FF0", Offset = "0x1255FF0", VA = "0x1255FF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600245E")]
		[Address(RVA = "0x1256120", Offset = "0x1256120", VA = "0x1256120")]
		private void Update()
		{
		}

		[Token(Token = "0x600245F")]
		[Address(RVA = "0x1256280", Offset = "0x1256280", VA = "0x1256280")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002460")]
		[Address(RVA = "0x1256398", Offset = "0x1256398", VA = "0x1256398")]
		public Highlighter()
		{
		}
	}
	[Token(Token = "0x2000524")]
	public class OrthographicController : ThirdPersonController
	{
		[Token(Token = "0x40020C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float smoothing;

		[Token(Token = "0x40020C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 offset;

		[Token(Token = "0x6002461")]
		[Address(RVA = "0x12563A0", Offset = "0x12563A0", VA = "0x12563A0", Slot = "8")]
		protected override void Init()
		{
		}

		[Token(Token = "0x6002462")]
		[Address(RVA = "0x12563C8", Offset = "0x12563C8", VA = "0x12563C8", Slot = "9")]
		protected override void SetCamera()
		{
		}

		[Token(Token = "0x6002463")]
		[Address(RVA = "0x1256438", Offset = "0x1256438", VA = "0x1256438", Slot = "14")]
		protected override void Move(float h, float v)
		{
		}

		[Token(Token = "0x6002464")]
		[Address(RVA = "0x12565CC", Offset = "0x12565CC", VA = "0x12565CC")]
		private void CameraFollow()
		{
		}

		[Token(Token = "0x6002465")]
		[Address(RVA = "0x12566A0", Offset = "0x12566A0", VA = "0x12566A0")]
		public OrthographicController()
		{
		}
	}
	[Token(Token = "0x2000525")]
	public class ThirdPersonController : BaseController
	{
		[Token(Token = "0x40020C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float movingTurnSpeed;

		[Token(Token = "0x6002466")]
		[Address(RVA = "0x1256450", Offset = "0x1256450", VA = "0x1256450", Slot = "14")]
		protected override void Move(float h, float v)
		{
		}

		[Token(Token = "0x6002467")]
		[Address(RVA = "0x12566BC", Offset = "0x12566BC", VA = "0x12566BC")]
		public ThirdPersonController()
		{
		}
	}
	[Token(Token = "0x2000526")]
	public class VoiceDemoUI : MonoBehaviour
	{
		[Token(Token = "0x2000527")]
		public delegate void OnDebugToggle(bool debugMode);

		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text punState;

		[Token(Token = "0x40020C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text voiceState;

		[Token(Token = "0x40020C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PhotonVoiceNetwork punVoiceNetwork;

		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Canvas canvas;

		[Token(Token = "0x40020CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button punSwitch;

		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Text punSwitchText;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Button voiceSwitch;

		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Text voiceSwitchText;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button calibrateButton;

		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Text calibrateText;

		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text voiceDebugText;

		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Recorder recorder;

		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject inGameSettings;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject globalSettings;

		[Token(Token = "0x40020D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Text devicesInfoText;

		[Token(Token = "0x40020D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject debugGO;

		[Token(Token = "0x40020D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool debugMode;

		[Token(Token = "0x40020D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float volumeBeforeMute;

		[Token(Token = "0x40020D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private DebugLevel previousDebugLevel;

		[Token(Token = "0x40020DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private int calibrationMilliSeconds;

		[Token(Token = "0x1700041D")]
		public bool DebugMode
		{
			[Token(Token = "0x6002468")]
			[Address(RVA = "0x12566D4", Offset = "0x12566D4", VA = "0x12566D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002469")]
			[Address(RVA = "0x12566DC", Offset = "0x12566DC", VA = "0x12566DC")]
			set
			{
			}
		}

		[Token(Token = "0x14000018")]
		public static event OnDebugToggle DebugToggled
		{
			[Token(Token = "0x600246A")]
			[Address(RVA = "0x1255D90", Offset = "0x1255D90", VA = "0x1255D90")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600246B")]
			[Address(RVA = "0x1255F10", Offset = "0x1255F10", VA = "0x1255F10")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600246C")]
		[Address(RVA = "0x125680C", Offset = "0x125680C", VA = "0x125680C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600246D")]
		[Address(RVA = "0x1256870", Offset = "0x1256870", VA = "0x1256870")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600246E")]
		[Address(RVA = "0x1256A74", Offset = "0x1256A74", VA = "0x1256A74")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600246F")]
		[Address(RVA = "0x1256C78", Offset = "0x1256C78", VA = "0x1256C78")]
		private void CharacterInstantiation_CharacterInstantiated(GameObject character)
		{
		}

		[Token(Token = "0x6002470")]
		[Address(RVA = "0x1256D38", Offset = "0x1256D38", VA = "0x1256D38")]
		private void InitToggles(Toggle[] toggles)
		{
		}

		[Token(Token = "0x6002471")]
		[Address(RVA = "0x12570B8", Offset = "0x12570B8", VA = "0x12570B8")]
		private void BetterToggle_ToggleValueChanged(Toggle toggle)
		{
		}

		[Token(Token = "0x6002472")]
		[Address(RVA = "0x125740C", Offset = "0x125740C", VA = "0x125740C")]
		private void OnCameraChanged(Camera newCamera)
		{
		}

		[Token(Token = "0x6002473")]
		[Address(RVA = "0x1257428", Offset = "0x1257428", VA = "0x1257428")]
		private void Start()
		{
		}

		[Token(Token = "0x6002474")]
		[Address(RVA = "0x1257A10", Offset = "0x1257A10", VA = "0x1257A10")]
		private void PunSwitchOnClick()
		{
		}

		[Token(Token = "0x6002475")]
		[Address(RVA = "0x1257AE0", Offset = "0x1257AE0", VA = "0x1257AE0")]
		private void VoiceSwitchOnClick()
		{
		}

		[Token(Token = "0x6002476")]
		[Address(RVA = "0x1257B60", Offset = "0x1257B60", VA = "0x1257B60")]
		private void CalibrateButtonOnClick()
		{
		}

		[Token(Token = "0x6002477")]
		[Address(RVA = "0x1257BFC", Offset = "0x1257BFC", VA = "0x1257BFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002478")]
		[Address(RVA = "0x1257E0C", Offset = "0x1257E0C", VA = "0x1257E0C")]
		private void PunClientStateChanged(ClientState fromState, ClientState toState)
		{
		}

		[Token(Token = "0x6002479")]
		[Address(RVA = "0x12583D4", Offset = "0x12583D4", VA = "0x12583D4")]
		private void VoiceClientStateChanged(ClientState fromState, ClientState toState)
		{
		}

		[Token(Token = "0x600247A")]
		[Address(RVA = "0x1257FA0", Offset = "0x1257FA0", VA = "0x1257FA0")]
		private void UpdateUiBasedOnVoiceState(ClientState voiceClientState)
		{
		}

		[Token(Token = "0x600247B")]
		[Address(RVA = "0x12583DC", Offset = "0x12583DC", VA = "0x12583DC")]
		public VoiceDemoUI()
		{
		}
	}
}
namespace Photon.Voice.Unity.Demos
{
	[Token(Token = "0x2000528")]
	public class BackgroundMusicController : MonoBehaviour
	{
		[Token(Token = "0x40020DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text volumeText;

		[Token(Token = "0x40020DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Slider volumeSlider;

		[Token(Token = "0x40020DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioSource audioSource;

		[Token(Token = "0x40020DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float initialVolume;

		[Token(Token = "0x6002480")]
		[Address(RVA = "0x125856C", Offset = "0x125856C", VA = "0x125856C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002481")]
		[Address(RVA = "0x12586CC", Offset = "0x12586CC", VA = "0x12586CC")]
		private void OnVolumeChanged(float newValue)
		{
		}

		[Token(Token = "0x6002482")]
		[Address(RVA = "0x1258798", Offset = "0x1258798", VA = "0x1258798")]
		public BackgroundMusicController()
		{
		}
	}
	[Token(Token = "0x2000529")]
	public class SidebarToggle : MonoBehaviour
	{
		[Token(Token = "0x40020E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Button sidebarButton;

		[Token(Token = "0x40020E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform panelsHolder;

		[Token(Token = "0x40020E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float sidebarWidth;

		[Token(Token = "0x40020E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool sidebarOpen;

		[Token(Token = "0x6002483")]
		[Address(RVA = "0x12587A8", Offset = "0x12587A8", VA = "0x12587A8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002484")]
		[Address(RVA = "0x12588DC", Offset = "0x12588DC", VA = "0x12588DC")]
		[ContextMenu("ToggleSidebar")]
		private void ToggleSidebar()
		{
		}

		[Token(Token = "0x6002485")]
		[Address(RVA = "0x1258860", Offset = "0x1258860", VA = "0x1258860")]
		private void ToggleSidebar(bool open)
		{
		}

		[Token(Token = "0x6002486")]
		[Address(RVA = "0x1258940", Offset = "0x1258940", VA = "0x1258940")]
		public SidebarToggle()
		{
		}
	}
	[Token(Token = "0x200052A")]
	public static class UiExtensions
	{
		[Token(Token = "0x40020E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Toggle.ToggleEvent emptyToggleEvent;

		[Token(Token = "0x40020E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Slider.SliderEvent emptySliderEvent;

		[Token(Token = "0x6002487")]
		[Address(RVA = "0x12588F4", Offset = "0x12588F4", VA = "0x12588F4")]
		public static void SetPosX(this RectTransform rectTransform, float x)
		{
		}

		[Token(Token = "0x6002488")]
		[Address(RVA = "0x1258958", Offset = "0x1258958", VA = "0x1258958")]
		public static void SetHeight(this RectTransform rectTransform, float h)
		{
		}

		[Token(Token = "0x6002489")]
		[Address(RVA = "0x1258970", Offset = "0x1258970", VA = "0x1258970")]
		public static void SetValue(this Toggle toggle, bool isOn)
		{
		}

		[Token(Token = "0x600248A")]
		[Address(RVA = "0x1258988", Offset = "0x1258988", VA = "0x1258988")]
		public static void SetValue(this Slider slider, float v)
		{
		}

		[Token(Token = "0x600248B")]
		[Address(RVA = "0x12589A8", Offset = "0x12589A8", VA = "0x12589A8")]
		public static void DestroyChildren(this Transform transform)
		{
		}

		[Token(Token = "0x600248C")]
		[Address(RVA = "0x1258AB0", Offset = "0x1258AB0", VA = "0x1258AB0")]
		public static void Hide(this CanvasGroup canvasGroup, bool blockRaycasts = false, bool interactable = false)
		{
		}

		[Token(Token = "0x600248D")]
		[Address(RVA = "0x1258B00", Offset = "0x1258B00", VA = "0x1258B00")]
		public static void Show(this CanvasGroup canvasGroup, bool blockRaycasts = true, bool interactable = true)
		{
		}

		[Token(Token = "0x600248E")]
		[Address(RVA = "0x1258B50", Offset = "0x1258B50", VA = "0x1258B50")]
		public static bool IsHidden(this CanvasGroup canvasGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x600248F")]
		[Address(RVA = "0x1258B74", Offset = "0x1258B74", VA = "0x1258B74")]
		public static bool IsShown(this CanvasGroup canvasGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x6002490")]
		[Address(RVA = "0x1258B98", Offset = "0x1258B98", VA = "0x1258B98")]
		public static void SetSingleOnClickCallback(this Button button, UnityAction action)
		{
		}

		[Token(Token = "0x6002491")]
		[Address(RVA = "0x1258BDC", Offset = "0x1258BDC", VA = "0x1258BDC")]
		public static void SetSingleOnValueChangedCallback(this Toggle toggle, UnityAction<bool> action)
		{
		}

		[Token(Token = "0x6002492")]
		[Address(RVA = "0x1258C48", Offset = "0x1258C48", VA = "0x1258C48")]
		public static void SetSingleOnValueChangedCallback(this InputField inputField, UnityAction<string> action)
		{
		}

		[Token(Token = "0x6002493")]
		[Address(RVA = "0x1258CB4", Offset = "0x1258CB4", VA = "0x1258CB4")]
		public static void SetSingleOnEndEditCallback(this InputField inputField, UnityAction<string> action)
		{
		}

		[Token(Token = "0x6002494")]
		[Address(RVA = "0x1258D20", Offset = "0x1258D20", VA = "0x1258D20")]
		public static void SetSingleOnValueChangedCallback(this Dropdown inputField, UnityAction<int> action)
		{
		}

		[Token(Token = "0x6002495")]
		[Address(RVA = "0x1258660", Offset = "0x1258660", VA = "0x1258660")]
		public static void SetSingleOnValueChangedCallback(this Slider slider, UnityAction<float> action)
		{
		}
	}
}
namespace Photon.Voice.Unity.Demos.DemoVoiceUI
{
	[Token(Token = "0x200052B")]
	public class CodecSettingsUI : MonoBehaviour
	{
		[Token(Token = "0x40020E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Dropdown frameDurationDropdown;

		[Token(Token = "0x40020E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Dropdown samplingRateDropdown;

		[Token(Token = "0x40020E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InputField bitrateInputField;

		[Token(Token = "0x40020E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Recorder recorder;

		[Token(Token = "0x40020EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<string> frameDurationOptions;

		[Token(Token = "0x40020EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<string> samplingRateOptions;

		[Token(Token = "0x6002497")]
		[Address(RVA = "0x1258E50", Offset = "0x1258E50", VA = "0x1258E50")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002498")]
		[Address(RVA = "0x1259180", Offset = "0x1259180", VA = "0x1259180")]
		private void Update()
		{
		}

		[Token(Token = "0x6002499")]
		[Address(RVA = "0x12591A0", Offset = "0x12591A0", VA = "0x12591A0")]
		private void OnBitrateChanged(string newBitrateString)
		{
		}

		[Token(Token = "0x600249A")]
		[Address(RVA = "0x1259208", Offset = "0x1259208", VA = "0x1259208")]
		private void OnFrameDurationChanged(int index)
		{
		}

		[Token(Token = "0x600249B")]
		[Address(RVA = "0x1259268", Offset = "0x1259268", VA = "0x1259268")]
		private void OnSamplingRateChanged(int index)
		{
		}

		[Token(Token = "0x600249C")]
		[Address(RVA = "0x125903C", Offset = "0x125903C", VA = "0x125903C")]
		private void InitFrameDuration()
		{
		}

		[Token(Token = "0x600249D")]
		[Address(RVA = "0x12590C8", Offset = "0x12590C8", VA = "0x12590C8")]
		private void InitSamplingRate()
		{
		}

		[Token(Token = "0x600249E")]
		[Address(RVA = "0x1259130", Offset = "0x1259130", VA = "0x1259130")]
		private void InitBitrate()
		{
		}

		[Token(Token = "0x600249F")]
		[Address(RVA = "0x12592C8", Offset = "0x12592C8", VA = "0x12592C8")]
		public CodecSettingsUI()
		{
		}
	}
	[Token(Token = "0x200052C")]
	[RequireComponent(typeof(VoiceConnection), typeof(ConnectAndJoin))]
	public class DemoVoiceUI : MonoBehaviour, IInRoomCallbacks, IMatchmakingCallbacks
	{
		[Token(Token = "0x40020EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text connectionStatusText;

		[Token(Token = "0x40020ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text serverStatusText;

		[Token(Token = "0x40020EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text roomStatusText;

		[Token(Token = "0x40020EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text inputWarningText;

		[Token(Token = "0x40020F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text rttText;

		[Token(Token = "0x40020F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text rttVariationText;

		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text packetLossWarningText;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InputField localNicknameText;

		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Toggle debugEchoToggle;

		[Token(Token = "0x40020F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Toggle reliableTransmissionToggle;

		[Token(Token = "0x40020F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Toggle encryptionToggle;

		[Token(Token = "0x40020F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject webRtcDspGameObject;

		[Token(Token = "0x40020F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Toggle aecToggle;

		[Token(Token = "0x40020F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Toggle aecHighPassToggle;

		[Token(Token = "0x40020FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InputField reverseStreamDelayInputField;

		[Token(Token = "0x40020FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Toggle noiseSuppressionToggle;

		[Token(Token = "0x40020FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Toggle agcToggle;

		[Token(Token = "0x40020FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Slider agcCompressionGainSlider;

		[Token(Token = "0x40020FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Toggle vadToggle;

		[Token(Token = "0x40020FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private Toggle muteToggle;

		[Token(Token = "0x4002100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private Toggle streamAudioClipToggle;

		[Token(Token = "0x4002101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Toggle dspToggle;

		[Token(Token = "0x4002102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Toggle highPassToggle;

		[Token(Token = "0x4002103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Toggle photonVadToggle;

		[Token(Token = "0x4002104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private GameObject microphoneSetupGameObject;

		[Token(Token = "0x4002105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private bool defaultTransmitEnabled;

		[Token(Token = "0x4002106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int screenWidth;

		[Token(Token = "0x4002107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private int screenHeight;

		[Token(Token = "0x4002108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private bool fullScreen;

		[Token(Token = "0x4002109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private InputField roomNameInputField;

		[Token(Token = "0x400210A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private InputField globalPlaybackDelayInputField;

		[Token(Token = "0x400210B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private int rttYellowThreshold;

		[Token(Token = "0x400210C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private int rttRedThreshold;

		[Token(Token = "0x400210D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private int rttVariationYellowThreshold;

		[Token(Token = "0x400210E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private int rttVariationRedThreshold;

		[Token(Token = "0x400210F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private GameObject compressionGainGameObject;

		[Token(Token = "0x4002110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Text compressionGainText;

		[Token(Token = "0x4002111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private GameObject aecOptionsGameObject;

		[Token(Token = "0x4002112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Transform RemoteVoicesPanel;

		[Token(Token = "0x4002113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected VoiceConnection voiceConnection;

		[Token(Token = "0x4002114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private WebRtcAudioDsp voiceAudioPreprocessor;

		[Token(Token = "0x4002115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private ConnectAndJoin connectAndJoin;

		[Token(Token = "0x4002116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private readonly UnityEngine.Color warningColor;

		[Token(Token = "0x4002117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly UnityEngine.Color okColor;

		[Token(Token = "0x4002118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private readonly UnityEngine.Color redColor;

		[Token(Token = "0x4002119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private readonly UnityEngine.Color defaultColor;

		[Token(Token = "0x60024A1")]
		[Address(RVA = "0x1259880", Offset = "0x1259880", VA = "0x1259880")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024A2")]
		[Address(RVA = "0x125A470", Offset = "0x125A470", VA = "0x125A470", Slot = "16")]
		protected virtual void SetDefaults()
		{
		}

		[Token(Token = "0x60024A3")]
		[Address(RVA = "0x125A49C", Offset = "0x125A49C", VA = "0x125A49C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60024A4")]
		[Address(RVA = "0x125A538", Offset = "0x125A538", VA = "0x125A538")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60024A5")]
		[Address(RVA = "0x125A3D4", Offset = "0x125A3D4", VA = "0x125A3D4")]
		private void GetSavedNickname()
		{
		}

		[Token(Token = "0x60024A6")]
		[Address(RVA = "0x125A5D4", Offset = "0x125A5D4", VA = "0x125A5D4", Slot = "17")]
		protected virtual void OnSpeakerCreated(Speaker speaker)
		{
		}

		[Token(Token = "0x60024A7")]
		[Address(RVA = "0x125A704", Offset = "0x125A704", VA = "0x125A704")]
		private void OnRemoteVoiceRemove(Speaker speaker)
		{
		}

		[Token(Token = "0x60024A8")]
		[Address(RVA = "0x125A7A8", Offset = "0x125A7A8", VA = "0x125A7A8")]
		private void ToggleMute(bool isOn)
		{
		}

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0x125A9F4", Offset = "0x125A9F4", VA = "0x125A9F4", Slot = "18")]
		protected virtual void ToggleIsRecording(bool isRecording)
		{
		}

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0x125AA24", Offset = "0x125AA24", VA = "0x125AA24")]
		private void ToggleDebugEcho(bool isOn)
		{
		}

		[Token(Token = "0x60024AB")]
		[Address(RVA = "0x125AA54", Offset = "0x125AA54", VA = "0x125AA54")]
		private void ToggleReliable(bool isOn)
		{
		}

		[Token(Token = "0x60024AC")]
		[Address(RVA = "0x125AA84", Offset = "0x125AA84", VA = "0x125AA84")]
		private void ToggleEncryption(bool isOn)
		{
		}

		[Token(Token = "0x60024AD")]
		[Address(RVA = "0x125AAB4", Offset = "0x125AAB4", VA = "0x125AAB4")]
		private void ToggleAEC(bool isOn)
		{
		}

		[Token(Token = "0x60024AE")]
		[Address(RVA = "0x125AAF8", Offset = "0x125AAF8", VA = "0x125AAF8")]
		private void ToggleNoiseSuppression(bool isOn)
		{
		}

		[Token(Token = "0x60024AF")]
		[Address(RVA = "0x125AB18", Offset = "0x125AB18", VA = "0x125AB18")]
		private void ToggleAGC(bool isOn)
		{
		}

		[Token(Token = "0x60024B0")]
		[Address(RVA = "0x125AB5C", Offset = "0x125AB5C", VA = "0x125AB5C")]
		private void ToggleVAD(bool isOn)
		{
		}

		[Token(Token = "0x60024B1")]
		[Address(RVA = "0x125AB7C", Offset = "0x125AB7C", VA = "0x125AB7C")]
		private void ToggleHighPass(bool isOn)
		{
		}

		[Token(Token = "0x60024B2")]
		[Address(RVA = "0x125AB9C", Offset = "0x125AB9C", VA = "0x125AB9C")]
		private void ToggleDsp(bool isOn)
		{
		}

		[Token(Token = "0x60024B3")]
		[Address(RVA = "0x125ABFC", Offset = "0x125ABFC", VA = "0x125ABFC")]
		private void ToggleAudioClipStreaming(bool isOn)
		{
		}

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0x125AC98", Offset = "0x125AC98", VA = "0x125AC98")]
		private void TogglePhotonVAD(bool isOn)
		{
		}

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0x125ACC8", Offset = "0x125ACC8", VA = "0x125ACC8")]
		private void ToggleAecHighPass(bool isOn)
		{
		}

		[Token(Token = "0x60024B6")]
		[Address(RVA = "0x125ACE8", Offset = "0x125ACE8", VA = "0x125ACE8")]
		private void OnAgcCompressionGainChanged(float agcCompressionGain)
		{
		}

		[Token(Token = "0x60024B7")]
		[Address(RVA = "0x125ADB8", Offset = "0x125ADB8", VA = "0x125ADB8")]
		private void OnGlobalPlaybackDelayChanged(string newPlaybackDelayString)
		{
		}

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0x125AE44", Offset = "0x125AE44", VA = "0x125AE44")]
		private void OnReverseStreamDelayChanged(string newReverseStreamString)
		{
		}

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0x125AED0", Offset = "0x125AED0", VA = "0x125AED0")]
		private void UpdateSyncedNickname(string nickname)
		{
		}

		[Token(Token = "0x60024BA")]
		[Address(RVA = "0x125AF78", Offset = "0x125AF78", VA = "0x125AF78")]
		private void JoinOrCreateRoom(string roomName)
		{
		}

		[Token(Token = "0x60024BB")]
		[Address(RVA = "0x125B0B0", Offset = "0x125B0B0", VA = "0x125B0B0", Slot = "19")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60024BC")]
		[Address(RVA = "0x125B63C", Offset = "0x125B63C", VA = "0x125B63C")]
		private void SetTextColor(int textValue, Text text, int yellowThreshold, int redThreshold)
		{
		}

		[Token(Token = "0x60024BD")]
		[Address(RVA = "0x125B604", Offset = "0x125B604", VA = "0x125B604")]
		private void ResetTextColor(Text text)
		{
		}

		[Token(Token = "0x60024BE")]
		[Address(RVA = "0x1259A34", Offset = "0x1259A34", VA = "0x1259A34")]
		private void InitUiCallbacks()
		{
		}

		[Token(Token = "0x60024BF")]
		[Address(RVA = "0x1259FC0", Offset = "0x1259FC0", VA = "0x1259FC0")]
		private void InitUiValues()
		{
		}

		[Token(Token = "0x60024C0")]
		[Address(RVA = "0x125B784", Offset = "0x125B784", VA = "0x125B784")]
		private void SetRoomDebugText()
		{
		}

		[Token(Token = "0x60024C1")]
		[Address(RVA = "0x125BA94", Offset = "0x125BA94", VA = "0x125BA94", Slot = "20")]
		protected virtual void OnActorPropertiesChanged(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60024C2")]
		[Address(RVA = "0x125BB48", Offset = "0x125BB48", VA = "0x125BB48", Slot = "4")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x60024C3")]
		[Address(RVA = "0x125BB4C", Offset = "0x125BB4C", VA = "0x125BB4C", Slot = "5")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x60024C4")]
		[Address(RVA = "0x125BB50", Offset = "0x125BB50", VA = "0x125BB50", Slot = "6")]
		private void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60024C5")]
		[Address(RVA = "0x125BB54", Offset = "0x125BB54", VA = "0x125BB54", Slot = "7")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60024C6")]
		[Address(RVA = "0x125BB64", Offset = "0x125BB64", VA = "0x125BB64", Slot = "8")]
		private void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x60024C7")]
		[Address(RVA = "0x125BB68", Offset = "0x125BB68", VA = "0x125BB68", Slot = "9")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate(List<Photon.Realtime.FriendInfo> friendList)
		{
		}

		[Token(Token = "0x60024C8")]
		[Address(RVA = "0x125BB6C", Offset = "0x125BB6C", VA = "0x125BB6C", Slot = "10")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom()
		{
		}

		[Token(Token = "0x60024C9")]
		[Address(RVA = "0x125BB70", Offset = "0x125BB70", VA = "0x125BB70", Slot = "11")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60024CA")]
		[Address(RVA = "0x125BB74", Offset = "0x125BB74", VA = "0x125BB74", Slot = "12")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom()
		{
		}

		[Token(Token = "0x60024CB")]
		[Address(RVA = "0x125BB78", Offset = "0x125BB78", VA = "0x125BB78", Slot = "13")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60024CC")]
		[Address(RVA = "0x125BB7C", Offset = "0x125BB7C", VA = "0x125BB7C", Slot = "14")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60024CD")]
		[Address(RVA = "0x125BB80", Offset = "0x125BB80", VA = "0x125BB80", Slot = "15")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom()
		{
		}

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0x125BBF4", Offset = "0x125BBF4", VA = "0x125BBF4")]
		public DemoVoiceUI()
		{
		}
	}
	[Token(Token = "0x200052D")]
	public struct MicRef
	{
		[Token(Token = "0x400211A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Recorder.MicType MicType;

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Name;

		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int PhotonId;

		[Token(Token = "0x60024CF")]
		[Address(RVA = "0x125BC48", Offset = "0x125BC48", VA = "0x125BC48")]
		public MicRef(string name, int id)
		{
		}

		[Token(Token = "0x60024D0")]
		[Address(RVA = "0x125BC78", Offset = "0x125BC78", VA = "0x125BC78")]
		public MicRef(string name)
		{
		}

		[Token(Token = "0x60024D1")]
		[Address(RVA = "0x125BC9C", Offset = "0x125BC9C", VA = "0x125BC9C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200052E")]
	public class MicrophoneDropdownFiller : MonoBehaviour
	{
		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<MicRef> micOptions;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Dropdown micDropdown;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Recorder recorder;

		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FormerlySerializedAs("RefreshButton")]
		[SerializeField]
		private GameObject refreshButton;

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[FormerlySerializedAs("ToggleButton")]
		private GameObject toggleButton;

		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Toggle photonToggle;

		[Token(Token = "0x60024D2")]
		[Address(RVA = "0x125BCE8", Offset = "0x125BCE8", VA = "0x125BCE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024D3")]
		[Address(RVA = "0x125BD70", Offset = "0x125BD70", VA = "0x125BD70")]
		private void SetupMicDropdown()
		{
		}

		[Token(Token = "0x60024D4")]
		[Address(RVA = "0x125C0D8", Offset = "0x125C0D8", VA = "0x125C0D8")]
		private void MicDropdownValueChanged(MicRef mic)
		{
		}

		[Token(Token = "0x60024D5")]
		[Address(RVA = "0x125C16C", Offset = "0x125C16C", VA = "0x125C16C")]
		private void SetCurrentValue()
		{
		}

		[Token(Token = "0x60024D6")]
		[Address(RVA = "0x125C508", Offset = "0x125C508", VA = "0x125C508")]
		public void PhotonMicToggled(bool on)
		{
		}

		[Token(Token = "0x60024D7")]
		[Address(RVA = "0x125BD58", Offset = "0x125BD58", VA = "0x125BD58")]
		public void RefreshMicrophones()
		{
		}

		[Token(Token = "0x60024D8")]
		[Address(RVA = "0x125C59C", Offset = "0x125C59C", VA = "0x125C59C")]
		private void PhotonVoiceCreated()
		{
		}

		[Token(Token = "0x60024D9")]
		[Address(RVA = "0x125C5B4", Offset = "0x125C5B4", VA = "0x125C5B4")]
		public MicrophoneDropdownFiller()
		{
		}
	}
	[Token(Token = "0x200052F")]
	public static class PhotonDemoExtensions
	{
		[Token(Token = "0x4002123")]
		internal const string IS_MUTED_PROPERTY_KEY = "mute";

		[Token(Token = "0x60024DB")]
		[Address(RVA = "0x125A810", Offset = "0x125A810", VA = "0x125A810")]
		public static bool Mute(this Player player)
		{
			return default(bool);
		}

		[Token(Token = "0x60024DC")]
		[Address(RVA = "0x125A904", Offset = "0x125A904", VA = "0x125A904")]
		public static bool Unmute(this Player player)
		{
			return default(bool);
		}

		[Token(Token = "0x60024DD")]
		[Address(RVA = "0x125B6B8", Offset = "0x125B6B8", VA = "0x125B6B8")]
		public static bool IsMuted(this Player player)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000530")]
	[RequireComponent(typeof(Speaker))]
	public class RemoteSpeakerUI : MonoBehaviour, IInRoomCallbacks
	{
		[Token(Token = "0x4002124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text nameText;

		[Token(Token = "0x4002125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected UnityEngine.UI.Image remoteIsMuting;

		[Token(Token = "0x4002126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEngine.UI.Image remoteIsTalking;

		[Token(Token = "0x4002127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private InputField playbackDelayInputField;

		[Token(Token = "0x4002128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text bufferLagText;

		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Speaker speaker;

		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected VoiceConnection voiceConnection;

		[Token(Token = "0x60024DE")]
		[Address(RVA = "0x125C644", Offset = "0x125C644", VA = "0x125C644", Slot = "9")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60024DF")]
		[Address(RVA = "0x125C88C", Offset = "0x125C88C", VA = "0x125C88C")]
		private void OnPlaybackDelayChanged(string newPlaybackDelayString)
		{
		}

		[Token(Token = "0x60024E0")]
		[Address(RVA = "0x125C918", Offset = "0x125C918", VA = "0x125C918")]
		private void Update()
		{
		}

		[Token(Token = "0x60024E1")]
		[Address(RVA = "0x125C9F8", Offset = "0x125C9F8", VA = "0x125C9F8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60024E2")]
		[Address(RVA = "0x125C774", Offset = "0x125C774", VA = "0x125C774")]
		private void SetNickname()
		{
		}

		[Token(Token = "0x60024E3")]
		[Address(RVA = "0x125C858", Offset = "0x125C858", VA = "0x125C858")]
		private void SetMutedState()
		{
		}

		[Token(Token = "0x60024E4")]
		[Address(RVA = "0x125CA28", Offset = "0x125CA28", VA = "0x125CA28", Slot = "10")]
		protected virtual void SetMutedState(bool isMuted)
		{
		}

		[Token(Token = "0x60024E5")]
		[Address(RVA = "0x125CA48", Offset = "0x125CA48", VA = "0x125CA48", Slot = "11")]
		protected virtual void OnActorPropertiesChanged(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60024E6")]
		[Address(RVA = "0x125CA94", Offset = "0x125CA94", VA = "0x125CA94", Slot = "12")]
		public virtual void Init(VoiceConnection vC)
		{
		}

		[Token(Token = "0x60024E7")]
		[Address(RVA = "0x125CADC", Offset = "0x125CADC", VA = "0x125CADC", Slot = "4")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x60024E8")]
		[Address(RVA = "0x125CAE0", Offset = "0x125CAE0", VA = "0x125CAE0", Slot = "5")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x60024E9")]
		[Address(RVA = "0x125CAE4", Offset = "0x125CAE4", VA = "0x125CAE4", Slot = "6")]
		private void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60024EA")]
		[Address(RVA = "0x125CAE8", Offset = "0x125CAE8", VA = "0x125CAE8", Slot = "7")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x60024EB")]
		[Address(RVA = "0x125CAF4", Offset = "0x125CAF4", VA = "0x125CAF4", Slot = "8")]
		private void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x60024EC")]
		[Address(RVA = "0x125CAF8", Offset = "0x125CAF8", VA = "0x125CAF8")]
		public RemoteSpeakerUI()
		{
		}
	}
}
namespace Photon.Realtime.Demo
{
	[Token(Token = "0x2000531")]
	public class ConnectAndJoinRandomLb : MonoBehaviour, IConnectionCallbacks, IMatchmakingCallbacks, ILobbyCallbacks
	{
		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AppSettings appSettings;

		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LoadBalancingClient lbc;

		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ConnectionHandler ch;

		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text StateUiText;

		[Token(Token = "0x60024ED")]
		[Address(RVA = "0x125CB00", Offset = "0x125CB00", VA = "0x125CB00")]
		public void Start()
		{
		}

		[Token(Token = "0x60024EE")]
		[Address(RVA = "0x125CCA0", Offset = "0x125CCA0", VA = "0x125CCA0")]
		public void Update()
		{
		}

		[Token(Token = "0x60024EF")]
		[Address(RVA = "0x125CDD4", Offset = "0x125CDD4", VA = "0x125CDD4", Slot = "4")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x60024F0")]
		[Address(RVA = "0x125CDD8", Offset = "0x125CDD8", VA = "0x125CDD8", Slot = "5")]
		public void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x60024F1")]
		[Address(RVA = "0x125CE5C", Offset = "0x125CE5C", VA = "0x125CE5C", Slot = "6")]
		public void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x60024F2")]
		[Address(RVA = "0x125CF48", Offset = "0x125CF48", VA = "0x125CF48", Slot = "8")]
		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x60024F3")]
		[Address(RVA = "0x125CF4C", Offset = "0x125CF4C", VA = "0x125CF4C", Slot = "9")]
		public void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x60024F4")]
		[Address(RVA = "0x125CF50", Offset = "0x125CF50", VA = "0x125CF50", Slot = "7")]
		public void OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x60024F5")]
		[Address(RVA = "0x125D02C", Offset = "0x125D02C", VA = "0x125D02C", Slot = "19")]
		public void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x60024F6")]
		[Address(RVA = "0x125D030", Offset = "0x125D030", VA = "0x125D030", Slot = "20")]
		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}

		[Token(Token = "0x60024F7")]
		[Address(RVA = "0x125D034", Offset = "0x125D034", VA = "0x125D034", Slot = "17")]
		public void OnJoinedLobby()
		{
		}

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0x125D038", Offset = "0x125D038", VA = "0x125D038", Slot = "18")]
		public void OnLeftLobby()
		{
		}

		[Token(Token = "0x60024F9")]
		[Address(RVA = "0x125D03C", Offset = "0x125D03C", VA = "0x125D03C", Slot = "10")]
		public void OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0x125D040", Offset = "0x125D040", VA = "0x125D040", Slot = "11")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0x125D044", Offset = "0x125D044", VA = "0x125D044", Slot = "12")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0x125D048", Offset = "0x125D048", VA = "0x125D048", Slot = "13")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x60024FD")]
		[Address(RVA = "0x125D0B0", Offset = "0x125D0B0", VA = "0x125D0B0", Slot = "14")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60024FE")]
		[Address(RVA = "0x125D0B4", Offset = "0x125D0B4", VA = "0x125D0B4", Slot = "15")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60024FF")]
		[Address(RVA = "0x125D168", Offset = "0x125D168", VA = "0x125D168", Slot = "16")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x6002500")]
		[Address(RVA = "0x125D16C", Offset = "0x125D16C", VA = "0x125D16C")]
		private void OnRegionPingCompleted(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6002501")]
		[Address(RVA = "0x125D290", Offset = "0x125D290", VA = "0x125D290")]
		public ConnectAndJoinRandomLb()
		{
		}
	}
}
namespace Photon.Chat.UtilityScripts
{
	[Token(Token = "0x2000532")]
	public class EventSystemSpawner : MonoBehaviour
	{
		[Token(Token = "0x6002502")]
		[Address(RVA = "0x125D304", Offset = "0x125D304", VA = "0x125D304")]
		private void Start()
		{
		}

		[Token(Token = "0x6002503")]
		[Address(RVA = "0x125D40C", Offset = "0x125D40C", VA = "0x125D40C")]
		public EventSystemSpawner()
		{
		}
	}
	[Token(Token = "0x2000533")]
	public class OnStartDelete : MonoBehaviour
	{
		[Token(Token = "0x6002504")]
		[Address(RVA = "0x125D414", Offset = "0x125D414", VA = "0x125D414")]
		private void Start()
		{
		}

		[Token(Token = "0x6002505")]
		[Address(RVA = "0x125D480", Offset = "0x125D480", VA = "0x125D480")]
		public OnStartDelete()
		{
		}
	}
	[Token(Token = "0x2000534")]
	[RequireComponent(typeof(Text))]
	public class TextButtonTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4002130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Selectable Selectable;

		[Token(Token = "0x4002131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Color NormalColor;

		[Token(Token = "0x4002132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Color HoverColor;

		[Token(Token = "0x6002506")]
		[Address(RVA = "0x125D488", Offset = "0x125D488", VA = "0x125D488")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002507")]
		[Address(RVA = "0x125D4E0", Offset = "0x125D4E0", VA = "0x125D4E0")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0x125D510", Offset = "0x125D510", VA = "0x125D510")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002509")]
		[Address(RVA = "0x125D540", Offset = "0x125D540", VA = "0x125D540", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600250A")]
		[Address(RVA = "0x125D5F0", Offset = "0x125D5F0", VA = "0x125D5F0", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600250B")]
		[Address(RVA = "0x125D6A0", Offset = "0x125D6A0", VA = "0x125D6A0")]
		public TextButtonTransition()
		{
		}
	}
	[Token(Token = "0x2000535")]
	[RequireComponent(typeof(Text))]
	public class TextToggleIsOnTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4002133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle toggle;

		[Token(Token = "0x4002134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _text;

		[Token(Token = "0x4002135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Color NormalOnColor;

		[Token(Token = "0x4002136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Color NormalOffColor;

		[Token(Token = "0x4002137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Color HoverOnColor;

		[Token(Token = "0x4002138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Color HoverOffColor;

		[Token(Token = "0x4002139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isHover;

		[Token(Token = "0x600250C")]
		[Address(RVA = "0x125D6BC", Offset = "0x125D6BC", VA = "0x125D6BC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600250D")]
		[Address(RVA = "0x125D810", Offset = "0x125D810", VA = "0x125D810")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600250E")]
		[Address(RVA = "0x125D7AC", Offset = "0x125D7AC", VA = "0x125D7AC")]
		public void OnValueChanged(bool isOn)
		{
		}

		[Token(Token = "0x600250F")]
		[Address(RVA = "0x125D8B8", Offset = "0x125D8B8", VA = "0x125D8B8", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002510")]
		[Address(RVA = "0x125D92C", Offset = "0x125D92C", VA = "0x125D92C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002511")]
		[Address(RVA = "0x125D99C", Offset = "0x125D99C", VA = "0x125D99C")]
		public TextToggleIsOnTransition()
		{
		}
	}
}
namespace PathCreation.Examples
{
	[Token(Token = "0x2000536")]
	[RequireComponent(typeof(PathCreator))]
	public class GeneratePathExample : MonoBehaviour
	{
		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool closedLoop;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform[] waypoints;

		[Token(Token = "0x6002512")]
		[Address(RVA = "0x125D9C0", Offset = "0x125D9C0", VA = "0x125D9C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002513")]
		[Address(RVA = "0x125DA84", Offset = "0x125DA84", VA = "0x125DA84")]
		public GeneratePathExample()
		{
		}
	}
	[Token(Token = "0x2000537")]
	public class PathFollower : MonoBehaviour
	{
		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PathCreator pathCreator;

		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndOfPathInstruction endOfPathInstruction;

		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speed;

		[Token(Token = "0x400213F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float distanceTravelled;

		[Token(Token = "0x6002514")]
		[Address(RVA = "0x125DA94", Offset = "0x125DA94", VA = "0x125DA94")]
		private void Start()
		{
		}

		[Token(Token = "0x6002515")]
		[Address(RVA = "0x125DB68", Offset = "0x125DB68", VA = "0x125DB68")]
		private void Update()
		{
		}

		[Token(Token = "0x6002516")]
		[Address(RVA = "0x125DC90", Offset = "0x125DC90", VA = "0x125DC90")]
		private void OnPathChanged()
		{
		}

		[Token(Token = "0x6002517")]
		[Address(RVA = "0x125DCEC", Offset = "0x125DCEC", VA = "0x125DCEC")]
		public PathFollower()
		{
		}
	}
	[Token(Token = "0x2000538")]
	[ExecuteInEditMode]
	public class PathPlacer : PathSceneTool
	{
		[Token(Token = "0x4002140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject prefab;

		[Token(Token = "0x4002141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject holder;

		[Token(Token = "0x4002142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float spacing;

		[Token(Token = "0x4002143")]
		private const float minSpacing = 0.1f;

		[Token(Token = "0x6002518")]
		[Address(RVA = "0x125DCFC", Offset = "0x125DCFC", VA = "0x125DCFC")]
		private void Generate()
		{
		}

		[Token(Token = "0x6002519")]
		[Address(RVA = "0x125DEF0", Offset = "0x125DEF0", VA = "0x125DEF0")]
		private void DestroyObjects()
		{
		}

		[Token(Token = "0x600251A")]
		[Address(RVA = "0x125DFBC", Offset = "0x125DFBC", VA = "0x125DFBC", Slot = "5")]
		protected override void PathUpdated()
		{
		}

		[Token(Token = "0x600251B")]
		[Address(RVA = "0x125E034", Offset = "0x125E034", VA = "0x125E034")]
		public PathPlacer()
		{
		}
	}
	[Token(Token = "0x2000539")]
	[ExecuteInEditMode]
	public abstract class PathSceneTool : MonoBehaviour
	{
		[Token(Token = "0x4002145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PathCreator pathCreator;

		[Token(Token = "0x4002146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool autoUpdate;

		[Token(Token = "0x1700041E")]
		protected VertexPath path
		{
			[Token(Token = "0x600251E")]
			[Address(RVA = "0x125E194", Offset = "0x125E194", VA = "0x125E194")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000019")]
		public event System.Action onDestroyed
		{
			[Token(Token = "0x600251C")]
			[Address(RVA = "0x125E05C", Offset = "0x125E05C", VA = "0x125E05C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600251D")]
			[Address(RVA = "0x125E0F8", Offset = "0x125E0F8", VA = "0x125E0F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600251F")]
		[Address(RVA = "0x125E1B0", Offset = "0x125E1B0", VA = "0x125E1B0")]
		public void TriggerUpdate()
		{
		}

		[Token(Token = "0x6002520")]
		[Address(RVA = "0x125E1BC", Offset = "0x125E1BC", VA = "0x125E1BC", Slot = "4")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6002521")]
		protected abstract void PathUpdated();

		[Token(Token = "0x6002522")]
		[Address(RVA = "0x125E04C", Offset = "0x125E04C", VA = "0x125E04C")]
		protected PathSceneTool()
		{
		}
	}
	[Token(Token = "0x200053A")]
	public class PathSpawner : MonoBehaviour
	{
		[Token(Token = "0x4002147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PathCreator pathPrefab;

		[Token(Token = "0x4002148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PathFollower followerPrefab;

		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform[] spawnPoints;

		[Token(Token = "0x6002523")]
		[Address(RVA = "0x125E1D8", Offset = "0x125E1D8", VA = "0x125E1D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002524")]
		[Address(RVA = "0x125E370", Offset = "0x125E370", VA = "0x125E370")]
		public PathSpawner()
		{
		}
	}
	[Token(Token = "0x200053B")]
	public class RoadMeshCreator : PathSceneTool
	{
		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Road settings")]
		public float roadWidth;

		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 0.5f)]
		public float thickness;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool flattenSurface;

		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Material settings")]
		public Material roadMaterial;

		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material undersideMaterial;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float textureTiling;

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		private GameObject meshHolder;

		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4002152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4002153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Mesh mesh;

		[Token(Token = "0x6002525")]
		[Address(RVA = "0x125E378", Offset = "0x125E378", VA = "0x125E378", Slot = "5")]
		protected override void PathUpdated()
		{
		}

		[Token(Token = "0x6002526")]
		[Address(RVA = "0x125E970", Offset = "0x125E970", VA = "0x125E970")]
		private void CreateRoadMesh()
		{
		}

		[Token(Token = "0x6002527")]
		[Address(RVA = "0x125E400", Offset = "0x125E400", VA = "0x125E400")]
		private void AssignMeshComponents()
		{
		}

		[Token(Token = "0x6002528")]
		[Address(RVA = "0x125E7A0", Offset = "0x125E7A0", VA = "0x125E7A0")]
		private void AssignMaterials()
		{
		}

		[Token(Token = "0x6002529")]
		[Address(RVA = "0x125F2D4", Offset = "0x125F2D4", VA = "0x125F2D4")]
		public RoadMeshCreator()
		{
		}
	}
}
namespace DigitalRuby.LightningBolt
{
	[Token(Token = "0x200053C")]
	public enum LightningBoltAnimationMode
	{
		[Token(Token = "0x4002155")]
		None,
		[Token(Token = "0x4002156")]
		Random,
		[Token(Token = "0x4002157")]
		Loop,
		[Token(Token = "0x4002158")]
		PingPong
	}
	[Token(Token = "0x200053D")]
	[RequireComponent(typeof(LineRenderer))]
	public class LightningBoltScript : MonoBehaviour
	{
		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The game object where the lightning will emit from. If null, StartPosition is used.")]
		public GameObject StartObject;

		[Token(Token = "0x400215A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The start position where the lightning will emit from. This is in world space if StartObject is null, otherwise this is offset from StartObject position.")]
		public Vector3 StartPosition;

		[Token(Token = "0x400215B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The game object where the lightning will end at. If null, EndPosition is used.")]
		public GameObject EndObject;

		[Token(Token = "0x400215C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("The end position where the lightning will end at. This is in world space if EndObject is null, otherwise this is offset from EndObject position.")]
		public Vector3 EndPosition;

		[Token(Token = "0x400215D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 8f)]
		[UnityEngine.Tooltip("How manu generations? Higher numbers create more line segments.")]
		public int Generations;

		[Token(Token = "0x400215E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0.01f, 1f)]
		[UnityEngine.Tooltip("How long each bolt should last before creating a new bolt. In ManualMode, the bolt will simply disappear after this amount of seconds.")]
		public float Duration;

		[Token(Token = "0x400215F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float timer;

		[Token(Token = "0x4002160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("How chaotic should the lightning be? (0-1)")]
		public float ChaosFactor;

		[Token(Token = "0x4002161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("In manual mode, the trigger method must be called to create a bolt")]
		public bool ManualMode;

		[Token(Token = "0x4002162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(1f, 64f)]
		[UnityEngine.Tooltip("The number of rows in the texture. Used for animation.")]
		public int Rows;

		[Token(Token = "0x4002163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(1f, 64f)]
		[UnityEngine.Tooltip("The number of columns in the texture. Used for animation.")]
		public int Columns;

		[Token(Token = "0x4002164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("The animation mode for the lightning")]
		public LightningBoltAnimationMode AnimationMode;

		[NonSerialized]
		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public System.Random RandomGenerator;

		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<KeyValuePair<Vector3, Vector3>> segments;

		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int startIndex;

		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector2 size;

		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2[] offsets;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int animationOffsetIndex;

		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int animationPingPongDirection;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool orthographic;

		[Token(Token = "0x600252A")]
		[Address(RVA = "0x125F2F8", Offset = "0x125F2F8", VA = "0x125F2F8")]
		private void GetPerpendicularVector(ref Vector3 directionNormalized, out Vector3 side)
		{
		}

		[Token(Token = "0x600252B")]
		[Address(RVA = "0x125F4E4", Offset = "0x125F4E4", VA = "0x125F4E4")]
		private void GenerateLightningBolt(Vector3 start, Vector3 end, int generation, int totalGenerations, float offsetAmount)
		{
		}

		[Token(Token = "0x600252C")]
		[Address(RVA = "0x125F9B8", Offset = "0x125F9B8", VA = "0x125F9B8")]
		public void RandomVector(ref Vector3 start, ref Vector3 end, float offsetAmount, out Vector3 result)
		{
		}

		[Token(Token = "0x600252D")]
		[Address(RVA = "0x125FBB0", Offset = "0x125FBB0", VA = "0x125FBB0")]
		private void SelectOffsetFromAnimationMode()
		{
		}

		[Token(Token = "0x600252E")]
		[Address(RVA = "0x125FD08", Offset = "0x125FD08", VA = "0x125FD08")]
		private void UpdateLineRenderer()
		{
		}

		[Token(Token = "0x600252F")]
		[Address(RVA = "0x125FE74", Offset = "0x125FE74", VA = "0x125FE74")]
		private void Start()
		{
		}

		[Token(Token = "0x6002530")]
		[Address(RVA = "0x1260098", Offset = "0x1260098", VA = "0x1260098")]
		private void Update()
		{
		}

		[Token(Token = "0x6002531")]
		[Address(RVA = "0x1260194", Offset = "0x1260194", VA = "0x1260194")]
		public void Trigger()
		{
		}

		[Token(Token = "0x6002532")]
		[Address(RVA = "0x125FF64", Offset = "0x125FF64", VA = "0x125FF64")]
		public void UpdateFromMaterialChange()
		{
		}

		[Token(Token = "0x6002533")]
		[Address(RVA = "0x12602E8", Offset = "0x12602E8", VA = "0x12602E8")]
		public LightningBoltScript()
		{
		}
	}
}
namespace I2.Loc
{
	[Token(Token = "0x200053E")]
	public class CallbackNotification : MonoBehaviour
	{
		[Token(Token = "0x6002534")]
		[Address(RVA = "0x12603E0", Offset = "0x12603E0", VA = "0x12603E0")]
		public void OnModifyLocalization()
		{
		}

		[Token(Token = "0x6002535")]
		[Address(RVA = "0x1260500", Offset = "0x1260500", VA = "0x1260500")]
		public CallbackNotification()
		{
		}
	}
	[Token(Token = "0x200053F")]
	public class Example_ChangeLanguage : MonoBehaviour
	{
		[Token(Token = "0x6002536")]
		[Address(RVA = "0x1260508", Offset = "0x1260508", VA = "0x1260508")]
		public void SetLanguage_English()
		{
		}

		[Token(Token = "0x6002537")]
		[Address(RVA = "0x12605D8", Offset = "0x12605D8", VA = "0x12605D8")]
		public void SetLanguage_French()
		{
		}

		[Token(Token = "0x6002538")]
		[Address(RVA = "0x1260618", Offset = "0x1260618", VA = "0x1260618")]
		public void SetLanguage_Spanish()
		{
		}

		[Token(Token = "0x6002539")]
		[Address(RVA = "0x1260548", Offset = "0x1260548", VA = "0x1260548")]
		public void SetLanguage(string LangName)
		{
		}

		[Token(Token = "0x600253A")]
		[Address(RVA = "0x1260658", Offset = "0x1260658", VA = "0x1260658")]
		public Example_ChangeLanguage()
		{
		}
	}
	[Token(Token = "0x2000540")]
	public class Example_LocalizedString : MonoBehaviour
	{
		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString _MyLocalizedString;

		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _NormalString;

		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[TermsPopup("")]
		public string _StringWithTermPopup;

		[Token(Token = "0x600253B")]
		[Address(RVA = "0x1260660", Offset = "0x1260660", VA = "0x1260660")]
		public void Start()
		{
		}

		[Token(Token = "0x600253C")]
		[Address(RVA = "0x1260990", Offset = "0x1260990", VA = "0x1260990")]
		public Example_LocalizedString()
		{
		}
	}
	[Token(Token = "0x2000541")]
	public class GlobalParametersExample : RegisterGlobalParameters
	{
		[Token(Token = "0x600253D")]
		[Address(RVA = "0x1260998", Offset = "0x1260998", VA = "0x1260998", Slot = "7")]
		public override string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x600253E")]
		[Address(RVA = "0x1260A58", Offset = "0x1260A58", VA = "0x1260A58")]
		public GlobalParametersExample()
		{
		}
	}
	[Token(Token = "0x2000542")]
	public class RealTimeTranslation : MonoBehaviour
	{
		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string OriginalText;

		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string TranslatedText;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool IsTranslating;

		[Token(Token = "0x600253F")]
		[Address(RVA = "0x1260A60", Offset = "0x1260A60", VA = "0x1260A60")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6002540")]
		[Address(RVA = "0x1260FA0", Offset = "0x1260FA0", VA = "0x1260FA0")]
		public void StartTranslating(string fromCode, string toCode)
		{
		}

		[Token(Token = "0x6002541")]
		[Address(RVA = "0x1261248", Offset = "0x1261248", VA = "0x1261248")]
		private void OnTranslationReady(string Translation, string errorMsg)
		{
		}

		[Token(Token = "0x6002542")]
		[Address(RVA = "0x12612D4", Offset = "0x12612D4", VA = "0x12612D4")]
		public void ExampleMultiTranslations_Blocking()
		{
		}

		[Token(Token = "0x6002543")]
		[Address(RVA = "0x1261074", Offset = "0x1261074", VA = "0x1261074")]
		public void ExampleMultiTranslations_Async()
		{
		}

		[Token(Token = "0x6002544")]
		[Address(RVA = "0x1261548", Offset = "0x1261548", VA = "0x1261548")]
		private void OnMultitranslationReady(Dictionary<string, TranslationQuery> dict, string errorMsg)
		{
		}

		[Token(Token = "0x6002545")]
		[Address(RVA = "0x12617C0", Offset = "0x12617C0", VA = "0x12617C0")]
		public bool IsWaitingForTranslation()
		{
			return default(bool);
		}

		[Token(Token = "0x6002546")]
		[Address(RVA = "0x12617C8", Offset = "0x12617C8", VA = "0x12617C8")]
		public string GetTranslatedText()
		{
			return null;
		}

		[Token(Token = "0x6002547")]
		[Address(RVA = "0x12617D0", Offset = "0x12617D0", VA = "0x12617D0")]
		public void SetOriginalText(string text)
		{
		}

		[Token(Token = "0x6002548")]
		[Address(RVA = "0x12617D8", Offset = "0x12617D8", VA = "0x12617D8")]
		public RealTimeTranslation()
		{
		}
	}
	[Token(Token = "0x2000543")]
	public class RegisterBundlesManager : MonoBehaviour, IResourceManager_Bundles
	{
		[Token(Token = "0x6002549")]
		[Address(RVA = "0x1261864", Offset = "0x1261864", VA = "0x1261864")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600254A")]
		[Address(RVA = "0x1261960", Offset = "0x1261960", VA = "0x1261960")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600254B")]
		[Address(RVA = "0x12619C0", Offset = "0x12619C0", VA = "0x12619C0", Slot = "5")]
		public virtual UnityEngine.Object LoadFromBundle(string path, Type assetType)
		{
			return null;
		}

		[Token(Token = "0x600254C")]
		[Address(RVA = "0x12619C8", Offset = "0x12619C8", VA = "0x12619C8")]
		public RegisterBundlesManager()
		{
		}
	}
	[Token(Token = "0x2000544")]
	public class ToggleLanguage : MonoBehaviour
	{
		[Token(Token = "0x600254D")]
		[Address(RVA = "0x12619D0", Offset = "0x12619D0", VA = "0x12619D0")]
		private void Start()
		{
		}

		[Token(Token = "0x600254E")]
		[Address(RVA = "0x1261A20", Offset = "0x1261A20", VA = "0x1261A20")]
		private void test()
		{
		}

		[Token(Token = "0x600254F")]
		[Address(RVA = "0x1261AE4", Offset = "0x1261AE4", VA = "0x1261AE4")]
		public ToggleLanguage()
		{
		}
	}
	[Token(Token = "0x2000545")]
	public static class PersistentStorage
	{
		[Token(Token = "0x2000546")]
		public enum eFileType
		{
			[Token(Token = "0x4002176")]
			Raw,
			[Token(Token = "0x4002177")]
			Persistent,
			[Token(Token = "0x4002178")]
			Temporal,
			[Token(Token = "0x4002179")]
			Streaming
		}

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static I2CustomPersistentStorage mStorage;

		[Token(Token = "0x6002550")]
		[Address(RVA = "0x1261AEC", Offset = "0x1261AEC", VA = "0x1261AEC")]
		public static void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x6002551")]
		[Address(RVA = "0x1261BBC", Offset = "0x1261BBC", VA = "0x1261BBC")]
		public static string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6002552")]
		[Address(RVA = "0x1261C84", Offset = "0x1261C84", VA = "0x1261C84")]
		public static void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x6002553")]
		[Address(RVA = "0x1261D3C", Offset = "0x1261D3C", VA = "0x1261D3C")]
		public static bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002554")]
		[Address(RVA = "0x1261DF4", Offset = "0x1261DF4", VA = "0x1261DF4")]
		public static void ForceSaveSettings()
		{
		}

		[Token(Token = "0x6002555")]
		[Address(RVA = "0x1261EA4", Offset = "0x1261EA4", VA = "0x1261EA4")]
		public static bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x6002556")]
		[Address(RVA = "0x1261F54", Offset = "0x1261F54", VA = "0x1261F54")]
		public static bool SaveFile(eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002557")]
		[Address(RVA = "0x1262034", Offset = "0x1262034", VA = "0x1262034")]
		public static string LoadFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x6002558")]
		[Address(RVA = "0x1262104", Offset = "0x1262104", VA = "0x1262104")]
		public static bool DeleteFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002559")]
		[Address(RVA = "0x12621D4", Offset = "0x12621D4", VA = "0x12621D4")]
		public static bool HasFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000547")]
	public abstract class I2BasePersistentStorage
	{
		[Token(Token = "0x600255A")]
		[Address(RVA = "0x12622A8", Offset = "0x12622A8", VA = "0x12622A8", Slot = "4")]
		public virtual void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x600255B")]
		[Address(RVA = "0x1262544", Offset = "0x1262544", VA = "0x1262544", Slot = "5")]
		public virtual string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x600255C")]
		[Address(RVA = "0x12627C0", Offset = "0x12627C0", VA = "0x12627C0", Slot = "6")]
		public virtual void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x600255D")]
		[Address(RVA = "0x1262A00", Offset = "0x1262A00", VA = "0x1262A00", Slot = "7")]
		public virtual void ForceSaveSettings()
		{
		}

		[Token(Token = "0x600255E")]
		[Address(RVA = "0x1262A08", Offset = "0x1262A08", VA = "0x1262A08", Slot = "8")]
		public virtual bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600255F")]
		[Address(RVA = "0x1262A14", Offset = "0x1262A14", VA = "0x1262A14", Slot = "9")]
		public virtual bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x6002560")]
		[Address(RVA = "0x1262A1C", Offset = "0x1262A1C", VA = "0x1262A1C")]
		private string UpdateFilename(PersistentStorage.eFileType fileType, string fileName)
		{
			return null;
		}

		[Token(Token = "0x6002561")]
		[Address(RVA = "0x1262AB4", Offset = "0x1262AB4", VA = "0x1262AB4", Slot = "10")]
		public virtual bool SaveFile(PersistentStorage.eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002562")]
		[Address(RVA = "0x1262C48", Offset = "0x1262C48", VA = "0x1262C48", Slot = "11")]
		public virtual string LoadFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x6002563")]
		[Address(RVA = "0x1262DD0", Offset = "0x1262DD0", VA = "0x1262DD0", Slot = "12")]
		public virtual bool DeleteFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002564")]
		[Address(RVA = "0x1262F4C", Offset = "0x1262F4C", VA = "0x1262F4C", Slot = "13")]
		public virtual bool HasFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002565")]
		[Address(RVA = "0x12630C8", Offset = "0x12630C8", VA = "0x12630C8")]
		protected I2BasePersistentStorage()
		{
		}
	}
	[Token(Token = "0x2000548")]
	public class I2CustomPersistentStorage : I2BasePersistentStorage
	{
		[Token(Token = "0x6002566")]
		[Address(RVA = "0x1261BB4", Offset = "0x1261BB4", VA = "0x1261BB4")]
		public I2CustomPersistentStorage()
		{
		}
	}
	[Token(Token = "0x2000549")]
	public class BaseSpecializationManager
	{
		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] mSpecializations;

		[Token(Token = "0x400217B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, string> mSpecializationsFallbacks;

		[Token(Token = "0x6002567")]
		[Address(RVA = "0x12630D0", Offset = "0x12630D0", VA = "0x12630D0", Slot = "4")]
		public virtual void InitializeSpecializations()
		{
		}

		[Token(Token = "0x6002568")]
		[Address(RVA = "0x1263794", Offset = "0x1263794", VA = "0x1263794", Slot = "5")]
		public virtual string GetCurrentSpecialization()
		{
			return null;
		}

		[Token(Token = "0x6002569")]
		[Address(RVA = "0x12637F0", Offset = "0x12637F0", VA = "0x12637F0", Slot = "6")]
		public virtual string GetFallbackSpecialization(string specialization)
		{
			return null;
		}

		[Token(Token = "0x600256A")]
		[Address(RVA = "0x1263898", Offset = "0x1263898", VA = "0x1263898")]
		public BaseSpecializationManager()
		{
		}
	}
	[Token(Token = "0x200054A")]
	public class SpecializationManager : BaseSpecializationManager
	{
		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SpecializationManager Singleton;

		[Token(Token = "0x600256B")]
		[Address(RVA = "0x12638A0", Offset = "0x12638A0", VA = "0x12638A0")]
		private SpecializationManager()
		{
		}

		[Token(Token = "0x600256C")]
		[Address(RVA = "0x12638C4", Offset = "0x12638C4", VA = "0x12638C4")]
		public static string GetSpecializedText(string text, [Optional] string specialization)
		{
			return null;
		}

		[Token(Token = "0x600256D")]
		[Address(RVA = "0x1263ABC", Offset = "0x1263ABC", VA = "0x1263ABC")]
		public static string SetSpecializedText(string text, string newText, string specialization)
		{
			return null;
		}

		[Token(Token = "0x600256E")]
		[Address(RVA = "0x1263E48", Offset = "0x1263E48", VA = "0x1263E48")]
		public static string SetSpecializedText(Dictionary<string, string> specializations)
		{
			return null;
		}

		[Token(Token = "0x600256F")]
		[Address(RVA = "0x1263BDC", Offset = "0x1263BDC", VA = "0x1263BDC")]
		public static Dictionary<string, string> GetSpecializations(string text, [Optional] Dictionary<string, string> buffer)
		{
			return null;
		}

		[Token(Token = "0x6002570")]
		[Address(RVA = "0x1264260", Offset = "0x1264260", VA = "0x1264260")]
		public static void AppendSpecializations(string text, [Optional] List<string> list)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200054B")]
	public class EventCallback
	{
		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MonoBehaviour Target;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string MethodName;

		[Token(Token = "0x6002572")]
		[Address(RVA = "0x1264518", Offset = "0x1264518", VA = "0x1264518")]
		public void Execute([Optional] UnityEngine.Object Sender)
		{
		}

		[Token(Token = "0x6002573")]
		[Address(RVA = "0x126457C", Offset = "0x126457C", VA = "0x126457C")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x6002574")]
		[Address(RVA = "0x1264600", Offset = "0x1264600", VA = "0x1264600")]
		public EventCallback()
		{
		}
	}
	[Token(Token = "0x200054C")]
	public enum ePluralType
	{
		[Token(Token = "0x4002180")]
		Zero,
		[Token(Token = "0x4002181")]
		One,
		[Token(Token = "0x4002182")]
		Two,
		[Token(Token = "0x4002183")]
		Few,
		[Token(Token = "0x4002184")]
		Many,
		[Token(Token = "0x4002185")]
		Plural
	}
	[Token(Token = "0x200054D")]
	public static class GoogleLanguages
	{
		[Token(Token = "0x200054E")]
		public struct LanguageCodeDef
		{
			[Token(Token = "0x4002187")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Code;

			[Token(Token = "0x4002188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string GoogleCode;

			[Token(Token = "0x4002189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool HasJoinedWords;

			[Token(Token = "0x400218A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int PluralRule;
		}

		[Token(Token = "0x4002186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, LanguageCodeDef> mLanguageDef;

		[Token(Token = "0x6002575")]
		[Address(RVA = "0x1264660", Offset = "0x1264660", VA = "0x1264660")]
		public static string GetLanguageCode(string Filter, bool ShowWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6002576")]
		[Address(RVA = "0x1264A78", Offset = "0x1264A78", VA = "0x1264A78")]
		public static List<string> GetLanguagesForDropdown(string Filter, string CodesToExclude)
		{
			return null;
		}

		[Token(Token = "0x6002577")]
		[Address(RVA = "0x126492C", Offset = "0x126492C", VA = "0x126492C")]
		private static bool LanguageMatchesFilter(string Language, string[] Filters)
		{
			return default(bool);
		}

		[Token(Token = "0x6002578")]
		[Address(RVA = "0x1265008", Offset = "0x1265008", VA = "0x1265008")]
		public static string GetFormatedLanguageName(string Language)
		{
			return null;
		}

		[Token(Token = "0x6002579")]
		[Address(RVA = "0x1265154", Offset = "0x1265154", VA = "0x1265154")]
		public static string GetCodedLanguage(string Language, string code)
		{
			return null;
		}

		[Token(Token = "0x600257A")]
		[Address(RVA = "0x1265224", Offset = "0x1265224", VA = "0x1265224")]
		public static void UnPackCodeFromLanguageName(string CodedLanguage, out string Language, out string code)
		{
		}

		[Token(Token = "0x600257B")]
		[Address(RVA = "0x12653B0", Offset = "0x12653B0", VA = "0x12653B0")]
		public static string GetGoogleLanguageCode(string InternationalCode)
		{
			return null;
		}

		[Token(Token = "0x600257C")]
		[Address(RVA = "0x12655AC", Offset = "0x12655AC", VA = "0x12655AC")]
		public static string GetLanguageName(string code, bool useParenthesesForRegion = false, bool allowDiscardRegion = true)
		{
			return null;
		}

		[Token(Token = "0x600257D")]
		[Address(RVA = "0x12658AC", Offset = "0x12658AC", VA = "0x12658AC")]
		public static List<string> GetAllInternationalCodes()
		{
			return null;
		}

		[Token(Token = "0x600257E")]
		[Address(RVA = "0x1265B3C", Offset = "0x1265B3C", VA = "0x1265B3C")]
		public static bool LanguageCode_HasJoinedWord(string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x600257F")]
		[Address(RVA = "0x1265CFC", Offset = "0x1265CFC", VA = "0x1265CFC")]
		private static int GetPluralRule(string langCode)
		{
			return default(int);
		}

		[Token(Token = "0x6002580")]
		[Address(RVA = "0x1265EDC", Offset = "0x1265EDC", VA = "0x1265EDC")]
		public static bool LanguageHasPluralType(string langCode, string pluralType)
		{
			return default(bool);
		}

		[Token(Token = "0x6002581")]
		[Address(RVA = "0x126608C", Offset = "0x126608C", VA = "0x126608C")]
		public static ePluralType GetPluralType(string langCode, int n)
		{
			return default(ePluralType);
		}

		[Token(Token = "0x6002582")]
		[Address(RVA = "0x126672C", Offset = "0x126672C", VA = "0x126672C")]
		public static int GetPluralTestNumber(string langCode, ePluralType pluralType)
		{
			return default(int);
		}

		[Token(Token = "0x6002583")]
		[Address(RVA = "0x1266714", Offset = "0x1266714", VA = "0x1266714")]
		private static bool inRange(int amount, int min, int max)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200054F")]
	public static class GoogleTranslation
	{
		[Token(Token = "0x2000550")]
		public delegate void fnOnTranslated(string Translation, string Error);

		[Token(Token = "0x2000551")]
		public delegate void fnOnTranslationReady(Dictionary<string, TranslationQuery> dict, string error);

		[Token(Token = "0x2000553")]
		[CompilerGenerated]
		private sealed class <WaitForTranslations>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002191")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002192")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700041F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025AE")]
				[Address(RVA = "0x1271600", Offset = "0x1271600", VA = "0x1271600", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000420")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025B0")]
				[Address(RVA = "0x1271648", Offset = "0x1271648", VA = "0x1271648", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025AB")]
			[Address(RVA = "0x126F2CC", Offset = "0x126F2CC", VA = "0x126F2CC")]
			[DebuggerHidden]
			public <WaitForTranslations>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60025AC")]
			[Address(RVA = "0x127146C", Offset = "0x127146C", VA = "0x127146C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025AD")]
			[Address(RVA = "0x1271470", Offset = "0x1271470", VA = "0x1271470", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025AF")]
			[Address(RVA = "0x1271608", Offset = "0x1271608", VA = "0x1271608", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400218B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityWebRequest> mCurrentTranslations;

		[Token(Token = "0x400218C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<TranslationJob> mTranslationJobs;

		[Token(Token = "0x6002585")]
		[Address(RVA = "0x126DA20", Offset = "0x126DA20", VA = "0x126DA20")]
		public static bool CanTranslate()
		{
			return default(bool);
		}

		[Token(Token = "0x6002586")]
		[Address(RVA = "0x126DC58", Offset = "0x126DC58", VA = "0x126DC58")]
		public static void Translate(string text, string LanguageCodeFrom, string LanguageCodeTo, fnOnTranslated OnTranslationReady)
		{
		}

		[Token(Token = "0x6002587")]
		[Address(RVA = "0x126E414", Offset = "0x126E414", VA = "0x126E414")]
		public static string ForceTranslate(string text, string LanguageCodeFrom, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x6002588")]
		[Address(RVA = "0x126E380", Offset = "0x126E380", VA = "0x126E380")]
		public static void Translate(Dictionary<string, TranslationQuery> requests, fnOnTranslationReady OnTranslationReady, bool usePOST = true)
		{
		}

		[Token(Token = "0x6002589")]
		[Address(RVA = "0x126EBC4", Offset = "0x126EBC4", VA = "0x126EBC4")]
		public static bool ForceTranslate(Dictionary<string, TranslationQuery> requests, bool usePOST = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600258A")]
		[Address(RVA = "0x126EC40", Offset = "0x126EC40", VA = "0x126EC40")]
		public static List<string> ConvertTranslationRequest(Dictionary<string, TranslationQuery> requests, bool encodeGET)
		{
			return null;
		}

		[Token(Token = "0x600258B")]
		[Address(RVA = "0x126EAA4", Offset = "0x126EAA4", VA = "0x126EAA4")]
		private static void AddTranslationJob(TranslationJob job)
		{
		}

		[Token(Token = "0x600258C")]
		[Address(RVA = "0x126F26C", Offset = "0x126F26C", VA = "0x126F26C")]
		[IteratorStateMachine(typeof(<WaitForTranslations>d__11))]
		private static IEnumerator WaitForTranslations()
		{
			return null;
		}

		[Token(Token = "0x600258D")]
		[Address(RVA = "0x126F2F4", Offset = "0x126F2F4", VA = "0x126F2F4")]
		public static string ParseTranslationResult(string html, Dictionary<string, TranslationQuery> requests)
		{
			return null;
		}

		[Token(Token = "0x600258E")]
		[Address(RVA = "0x126FA60", Offset = "0x126FA60", VA = "0x126FA60")]
		public static bool IsTranslating()
		{
			return default(bool);
		}

		[Token(Token = "0x600258F")]
		[Address(RVA = "0x126FB14", Offset = "0x126FB14", VA = "0x126FB14")]
		public static void CancelCurrentGoogleTranslations()
		{
		}

		[Token(Token = "0x6002590")]
		[Address(RVA = "0x126E030", Offset = "0x126E030", VA = "0x126E030")]
		public static void CreateQueries(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6002591")]
		[Address(RVA = "0x126FD1C", Offset = "0x126FD1C", VA = "0x126FD1C")]
		private static void CreateQueries_Plurals(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6002592")]
		[Address(RVA = "0x126E5CC", Offset = "0x126E5CC", VA = "0x126E5CC")]
		public static void AddQuery(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x6002593")]
		[Address(RVA = "0x12707E8", Offset = "0x12707E8", VA = "0x12707E8")]
		private static string GetTranslation(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x6002594")]
		[Address(RVA = "0x126F7E0", Offset = "0x126F7E0", VA = "0x126F7E0")]
		private static TranslationQuery FindQueryFromOrigText(string origText, Dictionary<string, TranslationQuery> dict)
		{
			return default(TranslationQuery);
		}

		[Token(Token = "0x6002595")]
		[Address(RVA = "0x126FF6C", Offset = "0x126FF6C", VA = "0x126FF6C")]
		public static bool HasParameters(string text)
		{
			return default(bool);
		}

		[Token(Token = "0x6002596")]
		[Address(RVA = "0x1270140", Offset = "0x1270140", VA = "0x1270140")]
		public static string GetPluralParameter(string text, bool forceTag)
		{
			return null;
		}

		[Token(Token = "0x6002597")]
		[Address(RVA = "0x1270008", Offset = "0x1270008", VA = "0x1270008")]
		public static string GetPluralText(string text, string pluralType)
		{
			return null;
		}

		[Token(Token = "0x6002598")]
		[Address(RVA = "0x12708E8", Offset = "0x12708E8", VA = "0x12708E8")]
		private static int FindClosingTag(string tag, MatchCollection matches, int startIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6002599")]
		[Address(RVA = "0x126F9B0", Offset = "0x126F9B0", VA = "0x126F9B0")]
		private static string GetGoogleNoTranslateTag(int tagNumber)
		{
			return null;
		}

		[Token(Token = "0x600259A")]
		[Address(RVA = "0x1270230", Offset = "0x1270230", VA = "0x1270230")]
		private static void ParseNonTranslatableElements(ref TranslationQuery query)
		{
		}

		[Token(Token = "0x600259B")]
		[Address(RVA = "0x126E98C", Offset = "0x126E98C", VA = "0x126E98C")]
		public static string GetQueryResult(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x600259C")]
		[Address(RVA = "0x12709B0", Offset = "0x12709B0", VA = "0x12709B0")]
		public static string RebuildTranslation(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x600259D")]
		[Address(RVA = "0x1270CC8", Offset = "0x1270CC8", VA = "0x1270CC8")]
		private static string RebuildTranslation_Plural(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x600259E")]
		[Address(RVA = "0x1271030", Offset = "0x1271030", VA = "0x1271030")]
		public static string UppercaseFirst(string s)
		{
			return null;
		}

		[Token(Token = "0x600259F")]
		[Address(RVA = "0x126F1B8", Offset = "0x126F1B8", VA = "0x126F1B8")]
		public static string TitleCase(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x2000554")]
	public struct TranslationQuery
	{
		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OrigText;

		[Token(Token = "0x4002194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Text;

		[Token(Token = "0x4002195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string LanguageCode;

		[Token(Token = "0x4002196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] TargetLanguagesCode;

		[Token(Token = "0x4002197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] Results;

		[Token(Token = "0x4002198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Tags;
	}
	[Token(Token = "0x2000555")]
	public class TranslationJob : IDisposable
	{
		[Token(Token = "0x2000556")]
		public enum eJobState
		{
			[Token(Token = "0x400219B")]
			Running,
			[Token(Token = "0x400219C")]
			Succeeded,
			[Token(Token = "0x400219D")]
			Failed
		}

		[Token(Token = "0x4002199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public eJobState mJobState;

		[Token(Token = "0x60025B1")]
		[Address(RVA = "0x1271650", Offset = "0x1271650", VA = "0x1271650", Slot = "5")]
		public virtual eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60025B2")]
		[Address(RVA = "0x1271658", Offset = "0x1271658", VA = "0x1271658", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x60025B3")]
		[Address(RVA = "0x127165C", Offset = "0x127165C", VA = "0x127165C")]
		public TranslationJob()
		{
		}
	}
	[Token(Token = "0x2000557")]
	public class TranslationJob_WWW : TranslationJob
	{
		[Token(Token = "0x400219E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityWebRequest www;

		[Token(Token = "0x60025B4")]
		[Address(RVA = "0x1271664", Offset = "0x1271664", VA = "0x1271664", Slot = "6")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x60025B5")]
		[Address(RVA = "0x1271690", Offset = "0x1271690", VA = "0x1271690")]
		public TranslationJob_WWW()
		{
		}
	}
	[Token(Token = "0x2000558")]
	public class TranslationJob_GET : TranslationJob_WWW
	{
		[Token(Token = "0x400219F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x40021A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x40021A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<string> mQueries;

		[Token(Token = "0x40021A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mErrorMessage;

		[Token(Token = "0x60025B6")]
		[Address(RVA = "0x1271698", Offset = "0x1271698", VA = "0x1271698")]
		public TranslationJob_GET(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x60025B7")]
		[Address(RVA = "0x127174C", Offset = "0x127174C", VA = "0x127174C")]
		private void ExecuteNextQuery()
		{
		}

		[Token(Token = "0x60025B8")]
		[Address(RVA = "0x127187C", Offset = "0x127187C", VA = "0x127187C", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60025B9")]
		[Address(RVA = "0x1271928", Offset = "0x1271928", VA = "0x1271928")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x2000559")]
	public class TranslationJob_Main : TranslationJob
	{
		[Token(Token = "0x40021A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TranslationJob_WEB mWeb;

		[Token(Token = "0x40021A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TranslationJob_POST mPost;

		[Token(Token = "0x40021A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TranslationJob_GET mGet;

		[Token(Token = "0x40021A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x40021A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x40021A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mErrorMessage;

		[Token(Token = "0x60025BA")]
		[Address(RVA = "0x126E8E4", Offset = "0x126E8E4", VA = "0x126E8E4")]
		public TranslationJob_Main(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x60025BB")]
		[Address(RVA = "0x1271BEC", Offset = "0x1271BEC", VA = "0x1271BEC", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60025BC")]
		[Address(RVA = "0x1271E00", Offset = "0x1271E00", VA = "0x1271E00", Slot = "6")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x200055A")]
	public class TranslationJob_POST : TranslationJob_WWW
	{
		[Token(Token = "0x40021A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x40021AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x60025BD")]
		[Address(RVA = "0x1271A40", Offset = "0x1271A40", VA = "0x1271A40")]
		public TranslationJob_POST(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x60025BE")]
		[Address(RVA = "0x1271E60", Offset = "0x1271E60", VA = "0x1271E60", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60025BF")]
		[Address(RVA = "0x1271EFC", Offset = "0x1271EFC", VA = "0x1271EFC")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x200055B")]
	public class TranslationJob_WEB : TranslationJob_WWW
	{
		[Token(Token = "0x40021AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x40021AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x40021AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mErrorMessage;

		[Token(Token = "0x40021AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string mCurrentBatch_ToLanguageCode;

		[Token(Token = "0x40021AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mCurrentBatch_FromLanguageCode;

		[Token(Token = "0x40021B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<string> mCurrentBatch_Text;

		[Token(Token = "0x40021B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<KeyValuePair<string, string>> mQueries;

		[Token(Token = "0x60025C0")]
		[Address(RVA = "0x1271FE4", Offset = "0x1271FE4", VA = "0x1271FE4")]
		public TranslationJob_WEB(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x60025C1")]
		[Address(RVA = "0x1272038", Offset = "0x1272038", VA = "0x1272038")]
		private void FindAllQueries()
		{
		}

		[Token(Token = "0x60025C2")]
		[Address(RVA = "0x127241C", Offset = "0x127241C", VA = "0x127241C")]
		private void ExecuteNextBatch()
		{
		}

		[Token(Token = "0x60025C3")]
		[Address(RVA = "0x12727F0", Offset = "0x12727F0", VA = "0x12727F0", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60025C4")]
		[Address(RVA = "0x127289C", Offset = "0x127289C", VA = "0x127289C")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}

		[Token(Token = "0x60025C5")]
		[Address(RVA = "0x12729D0", Offset = "0x12729D0", VA = "0x12729D0")]
		private string ParseTranslationResult(string html, string OriginalText)
		{
			return null;
		}
	}
	[Token(Token = "0x200055D")]
	public enum eLanguageDataFlags
	{
		[Token(Token = "0x40021B7")]
		DISABLED = 1,
		[Token(Token = "0x40021B8")]
		KEEP_LOADED = 2,
		[Token(Token = "0x40021B9")]
		NOT_LOADED = 4
	}
	[Serializable]
	[Token(Token = "0x200055E")]
	public class LanguageData
	{
		[Token(Token = "0x40021BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x40021BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Code;

		[Token(Token = "0x40021BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte Flags;

		[NonSerialized]
		[Token(Token = "0x40021BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Compressed;

		[Token(Token = "0x60025CB")]
		[Address(RVA = "0x12730C4", Offset = "0x12730C4", VA = "0x12730C4")]
		public bool IsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60025CC")]
		[Address(RVA = "0x12730D4", Offset = "0x12730D4", VA = "0x12730D4")]
		public void SetEnabled(bool bEnabled)
		{
		}

		[Token(Token = "0x60025CD")]
		[Address(RVA = "0x12730F0", Offset = "0x12730F0", VA = "0x12730F0")]
		public bool IsLoaded()
		{
			return default(bool);
		}

		[Token(Token = "0x60025CE")]
		[Address(RVA = "0x1273100", Offset = "0x1273100", VA = "0x1273100")]
		public bool CanBeUnloaded()
		{
			return default(bool);
		}

		[Token(Token = "0x60025CF")]
		[Address(RVA = "0x1273110", Offset = "0x1273110", VA = "0x1273110")]
		public void SetLoaded(bool loaded)
		{
		}

		[Token(Token = "0x60025D0")]
		[Address(RVA = "0x127312C", Offset = "0x127312C", VA = "0x127312C")]
		public void SetCanBeUnLoaded(bool allowUnloading)
		{
		}

		[Token(Token = "0x60025D1")]
		[Address(RVA = "0x1273148", Offset = "0x1273148", VA = "0x1273148")]
		public LanguageData()
		{
		}
	}
	[Token(Token = "0x200055F")]
	[AddComponentMenu("I2/Localization/Source")]
	[ExecuteInEditMode]
	public class LanguageSource : MonoBehaviour, ISerializationCallbackReceiver, ILanguageSource
	{
		[Token(Token = "0x2000560")]
		public delegate void fnOnSourceUpdated(LanguageSourceData source, bool ReceivedNewData, string errorMsg);

		[Token(Token = "0x40021BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x40021BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int version;

		[Token(Token = "0x40021C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool NeverDestroy;

		[Token(Token = "0x40021C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x40021C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x40021C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool GoogleLiveSyncIsUptoDate;

		[Token(Token = "0x40021C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<UnityEngine.Object> Assets;

		[Token(Token = "0x40021C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Google_WebServiceURL;

		[Token(Token = "0x40021C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x40021C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x40021C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x40021C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LanguageSourceData.eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x40021CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x40021CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x40021CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x40021CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public LanguageSourceData.eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x40021CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<TermData> mTerms;

		[Token(Token = "0x40021D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool CaseInsensitiveTerms;

		[Token(Token = "0x40021D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public LanguageSourceData.MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x40021D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string mTerm_AppName;

		[Token(Token = "0x17000421")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x60025D2")]
			[Address(RVA = "0x1273150", Offset = "0x1273150", VA = "0x1273150", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025D3")]
			[Address(RVA = "0x1273158", Offset = "0x1273158", VA = "0x1273158", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x60025D4")]
			[Address(RVA = "0x1273160", Offset = "0x1273160", VA = "0x1273160")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60025D5")]
			[Address(RVA = "0x12731FC", Offset = "0x12731FC", VA = "0x12731FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60025D6")]
		[Address(RVA = "0x1273298", Offset = "0x1273298", VA = "0x1273298")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025D7")]
		[Address(RVA = "0x1273338", Offset = "0x1273338", VA = "0x1273338")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60025D8")]
		[Address(RVA = "0x12733AC", Offset = "0x12733AC", VA = "0x12733AC")]
		public string GetSourceName()
		{
			return null;
		}

		[Token(Token = "0x60025D9")]
		[Address(RVA = "0x127349C", Offset = "0x127349C", VA = "0x127349C", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60025DA")]
		[Address(RVA = "0x12734A8", Offset = "0x12734A8", VA = "0x12734A8", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60025DB")]
		[Address(RVA = "0x1273C2C", Offset = "0x1273C2C", VA = "0x1273C2C")]
		public LanguageSource()
		{
		}
	}
	[Token(Token = "0x2000561")]
	[CreateAssetMenu(fileName = "I2Languages", menuName = "I2 Localization/LanguageSource", order = 1)]
	public class LanguageSourceAsset : ScriptableObject, ILanguageSource
	{
		[Token(Token = "0x40021D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x17000422")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x60025E0")]
			[Address(RVA = "0x1273FB8", Offset = "0x1273FB8", VA = "0x1273FB8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60025E1")]
			[Address(RVA = "0x1273FC0", Offset = "0x1273FC0", VA = "0x1273FC0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x60025E2")]
		[Address(RVA = "0x1273FC8", Offset = "0x1273FC8", VA = "0x1273FC8")]
		public LanguageSourceAsset()
		{
		}
	}
	[Token(Token = "0x2000562")]
	public interface ILanguageSource
	{
		[Token(Token = "0x17000423")]
		LanguageSourceData SourceData
		{
			[Token(Token = "0x60025E3")]
			get;
			[Token(Token = "0x60025E4")]
			set;
		}
	}
	[Serializable]
	[Token(Token = "0x2000563")]
	[ExecuteInEditMode]
	public class LanguageSourceData
	{
		[Token(Token = "0x2000564")]
		public enum MissingTranslationAction
		{
			[Token(Token = "0x40021F0")]
			Empty,
			[Token(Token = "0x40021F1")]
			Fallback,
			[Token(Token = "0x40021F2")]
			ShowWarning,
			[Token(Token = "0x40021F3")]
			ShowTerm
		}

		[Token(Token = "0x2000565")]
		public enum eAllowUnloadLanguages
		{
			[Token(Token = "0x40021F5")]
			Never,
			[Token(Token = "0x40021F6")]
			OnlyInDevice,
			[Token(Token = "0x40021F7")]
			EditorAndDevice
		}

		[Token(Token = "0x2000566")]
		public enum eGoogleUpdateFrequency
		{
			[Token(Token = "0x40021F9")]
			Always,
			[Token(Token = "0x40021FA")]
			Never,
			[Token(Token = "0x40021FB")]
			Daily,
			[Token(Token = "0x40021FC")]
			Weekly,
			[Token(Token = "0x40021FD")]
			Monthly,
			[Token(Token = "0x40021FE")]
			OnlyOnce,
			[Token(Token = "0x40021FF")]
			EveryOtherDay
		}

		[Token(Token = "0x2000567")]
		public enum eGoogleUpdateSynchronization
		{
			[Token(Token = "0x4002201")]
			Manual,
			[Token(Token = "0x4002202")]
			OnSceneLoaded,
			[Token(Token = "0x4002203")]
			AsSoonAsDownloaded
		}

		[Token(Token = "0x2000569")]
		[CompilerGenerated]
		private sealed class <Import_Google_Coroutine>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400220B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400220C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400220D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LanguageSourceData <>4__this;

			[Token(Token = "0x400220E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool forceUpdate;

			[Token(Token = "0x400220F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			public bool JustCheck;

			[Token(Token = "0x4002210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x17000425")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600263F")]
				[Address(RVA = "0x127CB50", Offset = "0x127CB50", VA = "0x127CB50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000426")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002641")]
				[Address(RVA = "0x127CB98", Offset = "0x127CB98", VA = "0x127CB98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600263C")]
			[Address(RVA = "0x127A190", Offset = "0x127A190", VA = "0x127A190")]
			[DebuggerHidden]
			public <Import_Google_Coroutine>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x600263D")]
			[Address(RVA = "0x127C860", Offset = "0x127C860", VA = "0x127C860", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600263E")]
			[Address(RVA = "0x127C864", Offset = "0x127C864", VA = "0x127C864", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002640")]
			[Address(RVA = "0x127CB58", Offset = "0x127CB58", VA = "0x127CB58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[NonSerialized]
		[Token(Token = "0x40021D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ILanguageSource owner;

		[Token(Token = "0x40021D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x40021D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x40021D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool GoogleLiveSyncIsUptoDate;

		[NonSerialized]
		[Token(Token = "0x40021D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool mIsGlobalSource;

		[Token(Token = "0x40021D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<TermData> mTerms;

		[Token(Token = "0x40021DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool CaseInsensitiveTerms;

		[NonSerialized]
		[Token(Token = "0x40021DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, TermData> mDictionary;

		[Token(Token = "0x40021DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x40021DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mTerm_AppName;

		[Token(Token = "0x40021DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x40021DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x40021E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x40021E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string Google_WebServiceURL;

		[Token(Token = "0x40021E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x40021E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x40021E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x40021E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x40021E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public eGoogleUpdateFrequency GoogleInEditorCheckFrequency;

		[Token(Token = "0x40021E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public eGoogleUpdateSynchronization GoogleUpdateSynchronization;

		[Token(Token = "0x40021E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x40021EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<UnityEngine.Object> Assets;

		[NonSerialized]
		[Token(Token = "0x40021EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x40021EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private string mDelayedGoogleData;

		[Token(Token = "0x40021ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string EmptyCategory;

		[Token(Token = "0x40021EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static char[] CategorySeparators;

		[Token(Token = "0x17000424")]
		public UnityEngine.Object ownerObject
		{
			[Token(Token = "0x60025E5")]
			[Address(RVA = "0x1274038", Offset = "0x1274038", VA = "0x1274038")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400001B")]
		public event LanguageSource.fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x60025E6")]
			[Address(RVA = "0x1273B90", Offset = "0x1273B90", VA = "0x1273B90")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60025E7")]
			[Address(RVA = "0x12740B4", Offset = "0x12740B4", VA = "0x12740B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60025E8")]
		[Address(RVA = "0x12732C8", Offset = "0x12732C8", VA = "0x12732C8")]
		public void Awake()
		{
		}

		[Token(Token = "0x60025E9")]
		[Address(RVA = "0x1273358", Offset = "0x1273358", VA = "0x1273358")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60025EA")]
		[Address(RVA = "0x1274C1C", Offset = "0x1274C1C", VA = "0x1274C1C")]
		public bool IsEqualTo(LanguageSourceData Source)
		{
			return default(bool);
		}

		[Token(Token = "0x60025EB")]
		[Address(RVA = "0x1275184", Offset = "0x1275184", VA = "0x1275184")]
		internal bool ManagerHasASimilarSource()
		{
			return default(bool);
		}

		[Token(Token = "0x60025EC")]
		[Address(RVA = "0x127528C", Offset = "0x127528C", VA = "0x127528C")]
		public void ClearAllData()
		{
		}

		[Token(Token = "0x60025ED")]
		[Address(RVA = "0x1275370", Offset = "0x1275370", VA = "0x1275370")]
		public bool IsGlobalSource()
		{
			return default(bool);
		}

		[Token(Token = "0x60025EE")]
		[Address(RVA = "0x1275378", Offset = "0x1275378", VA = "0x1275378")]
		public void Editor_SetDirty()
		{
		}

		[Token(Token = "0x60025EF")]
		[Address(RVA = "0x12746B8", Offset = "0x12746B8", VA = "0x12746B8")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x60025F0")]
		[Address(RVA = "0x127537C", Offset = "0x127537C", VA = "0x127537C")]
		public UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x60025F1")]
		[Address(RVA = "0x1275450", Offset = "0x1275450", VA = "0x1275450")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60025F2")]
		[Address(RVA = "0x12754A8", Offset = "0x12754A8", VA = "0x12754A8")]
		public void AddAsset(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x60025F3")]
		[Address(RVA = "0x1275594", Offset = "0x1275594", VA = "0x1275594")]
		private string Export_Language_to_Cache(int langIndex, bool fillTermWithFallback)
		{
			return null;
		}

		[Token(Token = "0x60025F4")]
		[Address(RVA = "0x1275AD4", Offset = "0x1275AD4", VA = "0x1275AD4")]
		public string Export_I2CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x60025F5")]
		[Address(RVA = "0x1276204", Offset = "0x1276204", VA = "0x1276204")]
		private static void AppendI2Term(StringBuilder Builder, int nLanguages, string Term, TermData termData, char Separator, string forceSpecialization)
		{
		}

		[Token(Token = "0x60025F6")]
		[Address(RVA = "0x1276460", Offset = "0x1276460", VA = "0x1276460")]
		private static void AppendI2Text(StringBuilder Builder, string text)
		{
		}

		[Token(Token = "0x60025F7")]
		[Address(RVA = "0x1276534", Offset = "0x1276534", VA = "0x1276534")]
		public string Export_CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x60025F8")]
		[Address(RVA = "0x1276E84", Offset = "0x1276E84", VA = "0x1276E84")]
		private static void AppendTerm(StringBuilder Builder, int nLanguages, string Term, TermData termData, string specialization, char Separator)
		{
		}

		[Token(Token = "0x60025F9")]
		[Address(RVA = "0x1276D20", Offset = "0x1276D20", VA = "0x1276D20")]
		private static void AppendString(StringBuilder Builder, string Text, char Separator)
		{
		}

		[Token(Token = "0x60025FA")]
		[Address(RVA = "0x12770E4", Offset = "0x12770E4", VA = "0x12770E4")]
		private static void AppendTranslation(StringBuilder Builder, string Text, char Separator, string tags)
		{
		}

		[Token(Token = "0x60025FB")]
		[Address(RVA = "0x1277260", Offset = "0x1277260", VA = "0x1277260")]
		public UnityWebRequest Export_Google_CreateWWWcall(eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x60025FC")]
		[Address(RVA = "0x1277424", Offset = "0x1277424", VA = "0x1277424")]
		private string Export_Google_CreateData()
		{
			return null;
		}

		[Token(Token = "0x60025FD")]
		[Address(RVA = "0x1277900", Offset = "0x1277900", VA = "0x1277900")]
		public string Import_CSV(string Category, string CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x60025FE")]
		[Address(RVA = "0x1278724", Offset = "0x1278724", VA = "0x1278724")]
		public string Import_I2CSV(string Category, string I2CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x60025FF")]
		[Address(RVA = "0x1277A64", Offset = "0x1277A64", VA = "0x1277A64")]
		public string Import_CSV(string Category, List<string[]> CSV, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x6002600")]
		[Address(RVA = "0x12789A8", Offset = "0x12789A8", VA = "0x12789A8")]
		private bool ArrayContains(string MainText, params string[] texts)
		{
			return default(bool);
		}

		[Token(Token = "0x6002601")]
		[Address(RVA = "0x1278D50", Offset = "0x1278D50", VA = "0x1278D50")]
		public static eTermType GetTermType(string type)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002602")]
		[Address(RVA = "0x1278F98", Offset = "0x1278F98", VA = "0x1278F98")]
		private void Import_Language_from_Cache(int langIndex, string langData, bool useFallback, bool onlyCurrentSpecialization)
		{
		}

		[Token(Token = "0x6002603")]
		[Address(RVA = "0x12791D0", Offset = "0x12791D0", VA = "0x12791D0")]
		public static void FreeUnusedLanguages()
		{
		}

		[Token(Token = "0x6002604")]
		[Address(RVA = "0x1279390", Offset = "0x1279390", VA = "0x1279390")]
		public void Import_Google_FromCache()
		{
		}

		[Token(Token = "0x6002605")]
		[Address(RVA = "0x12797C4", Offset = "0x12797C4", VA = "0x12797C4")]
		private bool IsNewerVersion(string currentVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6002606")]
		[Address(RVA = "0x1279E80", Offset = "0x1279E80", VA = "0x1279E80")]
		public void Import_Google(bool ForceUpdate, bool justCheck)
		{
		}

		[Token(Token = "0x6002607")]
		[Address(RVA = "0x1279604", Offset = "0x1279604", VA = "0x1279604")]
		private string GetSourcePlayerPrefName()
		{
			return null;
		}

		[Token(Token = "0x6002608")]
		[Address(RVA = "0x127A0FC", Offset = "0x127A0FC", VA = "0x127A0FC")]
		[IteratorStateMachine(typeof(<Import_Google_Coroutine>d__65))]
		private IEnumerator Import_Google_Coroutine(bool forceUpdate, bool JustCheck)
		{
			return null;
		}

		[Token(Token = "0x6002609")]
		[Address(RVA = "0x127A1B8", Offset = "0x127A1B8", VA = "0x127A1B8")]
		private void ApplyDownloadedDataOnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x600260A")]
		[Address(RVA = "0x127A264", Offset = "0x127A264", VA = "0x127A264")]
		public void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x600260B")]
		[Address(RVA = "0x127A3C4", Offset = "0x127A3C4", VA = "0x127A3C4")]
		public UnityWebRequest Import_Google_CreateWWWcall(bool ForceUpdate, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x600260C")]
		[Address(RVA = "0x127A538", Offset = "0x127A538", VA = "0x127A538")]
		public bool HasGoogleSpreadsheet()
		{
			return default(bool);
		}

		[Token(Token = "0x600260D")]
		[Address(RVA = "0x1279854", Offset = "0x1279854", VA = "0x1279854")]
		public string Import_Google_Result(string JsonString, eSpreadsheetUpdateMode UpdateMode, bool saveInPlayerPrefs = false)
		{
			return null;
		}

		[Token(Token = "0x600260E")]
		[Address(RVA = "0x1274D7C", Offset = "0x1274D7C", VA = "0x1274D7C")]
		public int GetLanguageIndex(string language, bool AllowDiscartingRegion = true, bool SkipDisabled = true)
		{
			return default(int);
		}

		[Token(Token = "0x600260F")]
		[Address(RVA = "0x127A78C", Offset = "0x127A78C", VA = "0x127A78C")]
		public LanguageData GetLanguageData(string language, bool AllowDiscartingRegion = true)
		{
			return null;
		}

		[Token(Token = "0x6002610")]
		[Address(RVA = "0x127A81C", Offset = "0x127A81C", VA = "0x127A81C")]
		public bool IsCurrentLanguage(int languageIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6002611")]
		[Address(RVA = "0x1278A38", Offset = "0x1278A38", VA = "0x1278A38")]
		public int GetLanguageIndexFromCode(string Code, bool exactMatch = true, bool ignoreDisabled = false)
		{
			return default(int);
		}

		[Token(Token = "0x6002612")]
		[Address(RVA = "0x127A5D0", Offset = "0x127A5D0", VA = "0x127A5D0")]
		public static int GetCommonWordInLanguageNames(string Language1, string Language2)
		{
			return default(int);
		}

		[Token(Token = "0x6002613")]
		[Address(RVA = "0x127A8C0", Offset = "0x127A8C0", VA = "0x127A8C0")]
		public static bool AreTheSameLanguage(string Language1, string Language2)
		{
			return default(bool);
		}

		[Token(Token = "0x6002614")]
		[Address(RVA = "0x127A94C", Offset = "0x127A94C", VA = "0x127A94C")]
		public static string GetLanguageWithoutRegion(string Language)
		{
			return null;
		}

		[Token(Token = "0x6002615")]
		[Address(RVA = "0x127A9E4", Offset = "0x127A9E4", VA = "0x127A9E4")]
		public void AddLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x6002616")]
		[Address(RVA = "0x127AA5C", Offset = "0x127AA5C", VA = "0x127AA5C")]
		public void AddLanguage(string LanguageName, string LanguageCode)
		{
		}

		[Token(Token = "0x6002617")]
		[Address(RVA = "0x127AC58", Offset = "0x127AC58", VA = "0x127AC58")]
		public void RemoveLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x6002618")]
		[Address(RVA = "0x127AF28", Offset = "0x127AF28", VA = "0x127AF28")]
		public List<string> GetLanguages(bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6002619")]
		[Address(RVA = "0x127B0A0", Offset = "0x127B0A0", VA = "0x127B0A0")]
		public List<string> GetLanguagesCode(bool allowRegions = true, bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x600261A")]
		[Address(RVA = "0x127B298", Offset = "0x127B298", VA = "0x127B298")]
		public bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x600261B")]
		[Address(RVA = "0x127B324", Offset = "0x127B324", VA = "0x127B324")]
		public void EnableLanguage(string Language, bool bEnabled)
		{
		}

		[Token(Token = "0x600261C")]
		[Address(RVA = "0x127B3C0", Offset = "0x127B3C0", VA = "0x127B3C0")]
		public bool AllowUnloadingLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x600261D")]
		[Address(RVA = "0x127B3D0", Offset = "0x127B3D0", VA = "0x127B3D0")]
		private string GetSavedLanguageFileName(int languageIndex)
		{
			return null;
		}

		[Token(Token = "0x600261E")]
		[Address(RVA = "0x127B618", Offset = "0x127B618", VA = "0x127B618")]
		public void LoadLanguage(int languageIndex, bool UnloadOtherLanguages, bool useFallback, bool onlyCurrentSpecialization, bool forceLoad)
		{
		}

		[Token(Token = "0x600261F")]
		[Address(RVA = "0x127B9E4", Offset = "0x127B9E4", VA = "0x127B9E4")]
		public void LoadAllLanguages(bool forceLoad = false)
		{
		}

		[Token(Token = "0x6002620")]
		[Address(RVA = "0x127B77C", Offset = "0x127B77C", VA = "0x127B77C")]
		public void UnloadLanguage(int languageIndex)
		{
		}

		[Token(Token = "0x6002621")]
		[Address(RVA = "0x1278E80", Offset = "0x1278E80", VA = "0x1278E80")]
		public void SaveLanguages(bool unloadAll, PersistentStorage.eFileType fileLocation = PersistentStorage.eFileType.Temporal)
		{
		}

		[Token(Token = "0x6002622")]
		[Address(RVA = "0x1278DE8", Offset = "0x1278DE8", VA = "0x1278DE8")]
		public bool HasUnloadedLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x6002623")]
		[Address(RVA = "0x1277638", Offset = "0x1277638", VA = "0x1277638")]
		public List<string> GetCategories(bool OnlyMainCategory = false, [Optional] List<string> Categories)
		{
			return null;
		}

		[Token(Token = "0x6002624")]
		[Address(RVA = "0x127BB30", Offset = "0x127BB30", VA = "0x127BB30")]
		public static string GetKeyFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6002625")]
		[Address(RVA = "0x127BA68", Offset = "0x127BA68", VA = "0x127BA68")]
		public static string GetCategoryFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6002626")]
		[Address(RVA = "0x127BBDC", Offset = "0x127BBDC", VA = "0x127BBDC")]
		public static void DeserializeFullTerm(string FullTerm, out string Key, out string Category, bool OnlyMainCategory = false)
		{
		}

		[Token(Token = "0x6002627")]
		[Address(RVA = "0x12743B0", Offset = "0x12743B0", VA = "0x12743B0")]
		public void UpdateDictionary(bool force = false)
		{
		}

		[Token(Token = "0x6002628")]
		[Address(RVA = "0x127BCF4", Offset = "0x127BCF4", VA = "0x127BCF4")]
		public string GetTranslation(string term, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x6002629")]
		[Address(RVA = "0x127BD28", Offset = "0x127BD28", VA = "0x127BD28")]
		public bool TryGetTranslation(string term, out string Translation, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600262A")]
		[Address(RVA = "0x1275848", Offset = "0x1275848", VA = "0x1275848")]
		private bool TryGetFallbackTranslation(TermData termData, out string Translation, int langIndex, [Optional] string overrideSpecialization, bool skipDisabled = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600262B")]
		[Address(RVA = "0x127BFB4", Offset = "0x127BFB4", VA = "0x127BFB4")]
		public TermData AddTerm(string term)
		{
			return null;
		}

		[Token(Token = "0x600262C")]
		[Address(RVA = "0x1274F2C", Offset = "0x1274F2C", VA = "0x1274F2C")]
		public TermData GetTermData(string term, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x600262D")]
		[Address(RVA = "0x127C210", Offset = "0x127C210", VA = "0x127C210")]
		public bool ContainsTerm(string term)
		{
			return default(bool);
		}

		[Token(Token = "0x600262E")]
		[Address(RVA = "0x127C22C", Offset = "0x127C22C", VA = "0x127C22C")]
		public List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x600262F")]
		[Address(RVA = "0x127BFC0", Offset = "0x127BFC0", VA = "0x127BFC0")]
		public TermData AddTerm(string NewTerm, eTermType termType, bool SaveSource = true)
		{
			return null;
		}

		[Token(Token = "0x6002630")]
		[Address(RVA = "0x127C47C", Offset = "0x127C47C", VA = "0x127C47C")]
		public void RemoveTerm(string term)
		{
		}

		[Token(Token = "0x6002631")]
		[Address(RVA = "0x1278BAC", Offset = "0x1278BAC", VA = "0x1278BAC")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x6002632")]
		[Address(RVA = "0x12738F0", Offset = "0x12738F0", VA = "0x12738F0")]
		public LanguageSourceData()
		{
		}
	}
	[Token(Token = "0x200056A")]
	public enum eSpreadsheetUpdateMode
	{
		[Token(Token = "0x4002212")]
		None,
		[Token(Token = "0x4002213")]
		Replace,
		[Token(Token = "0x4002214")]
		Merge,
		[Token(Token = "0x4002215")]
		AddNewTerms
	}
	[Token(Token = "0x200056B")]
	public class LocalizationReader
	{
		[Token(Token = "0x6002642")]
		[Address(RVA = "0x127CBA0", Offset = "0x127CBA0", VA = "0x127CBA0")]
		public static Dictionary<string, string> ReadTextAsset(TextAsset asset)
		{
			return null;
		}

		[Token(Token = "0x6002643")]
		[Address(RVA = "0x127CE0C", Offset = "0x127CE0C", VA = "0x127CE0C")]
		public static bool TextAsset_ReadLine(string line, out string key, out string value, out string category, out string comment, out string termType)
		{
			return default(bool);
		}

		[Token(Token = "0x6002644")]
		[Address(RVA = "0x127D29C", Offset = "0x127D29C", VA = "0x127D29C")]
		public static string ReadCSVfile(string Path, Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x6002645")]
		[Address(RVA = "0x127793C", Offset = "0x127793C", VA = "0x127793C")]
		public static List<string[]> ReadCSV(string Text, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x6002646")]
		[Address(RVA = "0x127D4C0", Offset = "0x127D4C0", VA = "0x127D4C0")]
		private static string[] ParseCSVline(string Line, ref int iStart, char Separator)
		{
			return null;
		}

		[Token(Token = "0x6002647")]
		[Address(RVA = "0x127D6AC", Offset = "0x127D6AC", VA = "0x127D6AC")]
		private static void AddCSVtoken(ref List<string> list, ref string Line, int iEnd, ref int iWordStart)
		{
		}

		[Token(Token = "0x6002648")]
		[Address(RVA = "0x127875C", Offset = "0x127875C", VA = "0x127875C")]
		public static List<string[]> ReadI2CSV(string Text)
		{
			return null;
		}

		[Token(Token = "0x6002649")]
		[Address(RVA = "0x127D1F4", Offset = "0x127D1F4", VA = "0x127D1F4")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x600264A")]
		[Address(RVA = "0x127D838", Offset = "0x127D838", VA = "0x127D838")]
		public static string EncodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x600264B")]
		[Address(RVA = "0x127D14C", Offset = "0x127D14C", VA = "0x127D14C")]
		public static string DecodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x600264C")]
		[Address(RVA = "0x127D930", Offset = "0x127D930", VA = "0x127D930")]
		public LocalizationReader()
		{
		}
	}
	[Token(Token = "0x200056C")]
	[AddComponentMenu("I2/Localization/I2 Localize")]
	public class Localize : MonoBehaviour
	{
		[Token(Token = "0x200056D")]
		public enum TermModification
		{
			[Token(Token = "0x4002237")]
			DontModify,
			[Token(Token = "0x4002238")]
			ToUpper,
			[Token(Token = "0x4002239")]
			ToLower,
			[Token(Token = "0x400223A")]
			ToUpperFirst,
			[Token(Token = "0x400223B")]
			ToTitle
		}

		[Token(Token = "0x4002216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string mTerm;

		[Token(Token = "0x4002217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mTermSecondary;

		[NonSerialized]
		[Token(Token = "0x4002218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string FinalTerm;

		[NonSerialized]
		[Token(Token = "0x4002219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string FinalSecondaryTerm;

		[Token(Token = "0x400221A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TermModification PrimaryTermModifier;

		[Token(Token = "0x400221B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TermModification SecondaryTermModifier;

		[Token(Token = "0x400221C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string TermPrefix;

		[Token(Token = "0x400221D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string TermSuffix;

		[Token(Token = "0x400221E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool LocalizeOnAwake;

		[Token(Token = "0x400221F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string LastLocalizedLanguage;

		[Token(Token = "0x4002220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool IgnoreRTL;

		[Token(Token = "0x4002221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int MaxCharactersInRTL;

		[Token(Token = "0x4002222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreNumbersInRTL;

		[Token(Token = "0x4002223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool CorrectAlignmentForRTL;

		[Token(Token = "0x4002224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AddSpacesToJoinedLanguages;

		[Token(Token = "0x4002225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool AllowLocalizedParameters;

		[Token(Token = "0x4002226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool AllowParameters;

		[Token(Token = "0x4002227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<UnityEngine.Object> TranslatedObjects;

		[NonSerialized]
		[Token(Token = "0x4002228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x4002229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent LocalizeEvent;

		[Token(Token = "0x400222A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string MainTranslation;

		[Token(Token = "0x400222B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string SecondaryTranslation;

		[Token(Token = "0x400222C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string CallBackTerm;

		[Token(Token = "0x400222D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string CallBackSecondaryTerm;

		[Token(Token = "0x400222E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Localize CurrentLocalizeComponent;

		[Token(Token = "0x400222F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool AlwaysForceLocalize;

		[Token(Token = "0x4002230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public EventCallback LocalizeCallBack;

		[Token(Token = "0x4002231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool mGUI_ShowReferences;

		[Token(Token = "0x4002232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool mGUI_ShowTems;

		[Token(Token = "0x4002233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool mGUI_ShowCallback;

		[Token(Token = "0x4002234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ILocalizeTarget mLocalizeTarget;

		[Token(Token = "0x4002235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string mLocalizeTargetName;

		[Token(Token = "0x17000427")]
		public string Term
		{
			[Token(Token = "0x600264D")]
			[Address(RVA = "0x127D938", Offset = "0x127D938", VA = "0x127D938")]
			get
			{
				return null;
			}
			[Token(Token = "0x600264E")]
			[Address(RVA = "0x127D940", Offset = "0x127D940", VA = "0x127D940")]
			set
			{
			}
		}

		[Token(Token = "0x17000428")]
		public string SecondaryTerm
		{
			[Token(Token = "0x600264F")]
			[Address(RVA = "0x127D998", Offset = "0x127D998", VA = "0x127D998")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002650")]
			[Address(RVA = "0x127D9A0", Offset = "0x127D9A0", VA = "0x127D9A0")]
			set
			{
			}
		}

		[Token(Token = "0x6002651")]
		[Address(RVA = "0x127DA24", Offset = "0x127DA24", VA = "0x127DA24")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002652")]
		[Address(RVA = "0x127EB60", Offset = "0x127EB60", VA = "0x127EB60")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002653")]
		[Address(RVA = "0x127EB68", Offset = "0x127EB68", VA = "0x127EB68")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x6002654")]
		[Address(RVA = "0x127E270", Offset = "0x127E270", VA = "0x127E270")]
		public void OnLocalize(bool Force = false)
		{
		}

		[Token(Token = "0x6002655")]
		[Address(RVA = "0x127DDC0", Offset = "0x127DDC0", VA = "0x127DDC0")]
		public bool FindTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x6002656")]
		[Address(RVA = "0x127EBB0", Offset = "0x127EBB0", VA = "0x127EBB0")]
		public void GetFinalTerms(out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002657")]
		[Address(RVA = "0x127F3CC", Offset = "0x127F3CC", VA = "0x127F3CC")]
		public string GetMainTargetsText()
		{
			return null;
		}

		[Token(Token = "0x6002658")]
		[Address(RVA = "0x127F494", Offset = "0x127F494", VA = "0x127F494")]
		public void SetFinalTerms(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x6002659")]
		[Address(RVA = "0x127D944", Offset = "0x127D944", VA = "0x127D944")]
		public void SetTerm(string primary)
		{
		}

		[Token(Token = "0x600265A")]
		[Address(RVA = "0x127D9AC", Offset = "0x127D9AC", VA = "0x127D9AC")]
		public void SetTerm(string primary, string secondary)
		{
		}

		[Token(Token = "0x600265B")]
		internal T GetSecondaryTranslatedObj<T>(ref string mainTranslation, ref string secondaryTranslation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600265C")]
		[Address(RVA = "0x127DA58", Offset = "0x127DA58", VA = "0x127DA58")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x600265D")]
		internal T GetObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600265E")]
		private T GetTranslatedObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600265F")]
		[Address(RVA = "0x127F4E4", Offset = "0x127F4E4", VA = "0x127F4E4")]
		private void DeserializeTranslation(string translation, out string value, out string secondary)
		{
		}

		[Token(Token = "0x6002660")]
		public T FindTranslatedObject<T>(string value) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6002661")]
		[Address(RVA = "0x127F5F4", Offset = "0x127F5F4", VA = "0x127F5F4")]
		public bool HasTranslatedObject(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002662")]
		[Address(RVA = "0x127F678", Offset = "0x127F678", VA = "0x127F678")]
		public void AddTranslatedObject(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x6002663")]
		[Address(RVA = "0x127F764", Offset = "0x127F764", VA = "0x127F764")]
		public void SetGlobalLanguage(string Language)
		{
		}

		[Token(Token = "0x6002664")]
		[Address(RVA = "0x127F888", Offset = "0x127F888", VA = "0x127F888")]
		public Localize()
		{
		}
	}
	[Token(Token = "0x200056F")]
	[AddComponentMenu("I2/Localization/Localize Dropdown")]
	public class LocalizeDropdown : MonoBehaviour
	{
		[Token(Token = "0x4002241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> _Terms;

		[Token(Token = "0x600266B")]
		[Address(RVA = "0x127FC78", Offset = "0x127FC78", VA = "0x127FC78")]
		public void Start()
		{
		}

		[Token(Token = "0x600266C")]
		[Address(RVA = "0x127FFB0", Offset = "0x127FFB0", VA = "0x127FFB0")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x600266D")]
		[Address(RVA = "0x1280128", Offset = "0x1280128", VA = "0x1280128")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600266E")]
		[Address(RVA = "0x127FEC4", Offset = "0x127FEC4", VA = "0x127FEC4")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x600266F")]
		[Address(RVA = "0x1280180", Offset = "0x1280180", VA = "0x1280180")]
		private void FillValues()
		{
		}

		[Token(Token = "0x6002670")]
		[Address(RVA = "0x12803E4", Offset = "0x12803E4", VA = "0x12803E4")]
		public void UpdateLocalization()
		{
		}

		[Token(Token = "0x6002671")]
		[Address(RVA = "0x1280960", Offset = "0x1280960", VA = "0x1280960")]
		public void UpdateLocalizationTMPro()
		{
		}

		[Token(Token = "0x6002672")]
		[Address(RVA = "0x1280714", Offset = "0x1280714", VA = "0x1280714")]
		private void FillValuesTMPro()
		{
		}

		[Token(Token = "0x6002673")]
		[Address(RVA = "0x1280C84", Offset = "0x1280C84", VA = "0x1280C84")]
		public LocalizeDropdown()
		{
		}
	}
	[Token(Token = "0x2000570")]
	public static class LocalizationManager
	{
		[Token(Token = "0x2000571")]
		public delegate bool FnCustomApplyLocalizationParams(ref string translation, _GetParam getParam, bool allowLocalizedParameters);

		[Token(Token = "0x2000572")]
		public delegate object _GetParam(string param);

		[Token(Token = "0x2000573")]
		public delegate void OnLocalizeCallback();

		[Token(Token = "0x2000579")]
		[CompilerGenerated]
		private sealed class <Delayed_Import_Google>d__63 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400225C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400225D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400225E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x400225F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LanguageSourceData source;

			[Token(Token = "0x4002260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool justCheck;

			[Token(Token = "0x1700042E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60026D3")]
				[Address(RVA = "0x1286B60", Offset = "0x1286B60", VA = "0x1286B60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700042F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60026D5")]
				[Address(RVA = "0x1286BA8", Offset = "0x1286BA8", VA = "0x1286BA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60026D0")]
			[Address(RVA = "0x1286A70", Offset = "0x1286A70", VA = "0x1286A70")]
			[DebuggerHidden]
			public <Delayed_Import_Google>d__63(int <>1__state)
			{
			}

			[Token(Token = "0x60026D1")]
			[Address(RVA = "0x1286A98", Offset = "0x1286A98", VA = "0x1286A98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60026D2")]
			[Address(RVA = "0x1286A9C", Offset = "0x1286A9C", VA = "0x1286A9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60026D4")]
			[Address(RVA = "0x1286B68", Offset = "0x1286B68", VA = "0x1286B68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200057B")]
		[CompilerGenerated]
		private sealed class <Coroutine_LocalizeAll>d__88 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000430")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60026DB")]
				[Address(RVA = "0x1286CD4", Offset = "0x1286CD4", VA = "0x1286CD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000431")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60026DD")]
				[Address(RVA = "0x1286D1C", Offset = "0x1286D1C", VA = "0x1286D1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60026D8")]
			[Address(RVA = "0x1286BE0", Offset = "0x1286BE0", VA = "0x1286BE0")]
			[DebuggerHidden]
			public <Coroutine_LocalizeAll>d__88(int <>1__state)
			{
			}

			[Token(Token = "0x60026D9")]
			[Address(RVA = "0x1286C08", Offset = "0x1286C08", VA = "0x1286C08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60026DA")]
			[Address(RVA = "0x1286C0C", Offset = "0x1286C0C", VA = "0x1286C0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60026DC")]
			[Address(RVA = "0x1286CDC", Offset = "0x1286CDC", VA = "0x1286CDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string mCurrentLanguage;

		[Token(Token = "0x4002243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string mLanguageCode;

		[Token(Token = "0x4002244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static CultureInfo mCurrentCulture;

		[Token(Token = "0x4002245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool mChangeCultureInfo;

		[Token(Token = "0x4002246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public static bool IsRight2Left;

		[Token(Token = "0x4002247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public static bool HasJoinedWords;

		[Token(Token = "0x4002248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static List<ILocalizationParamsManager> ParamManagers;

		[Token(Token = "0x4002249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static FnCustomApplyLocalizationParams CustomApplyLocalizationParams;

		[Token(Token = "0x400224A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string[] LanguagesRTL;

		[Token(Token = "0x400224B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static List<LanguageSourceData> Sources;

		[Token(Token = "0x400224C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] GlobalSources;

		[Token(Token = "0x400224D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Func<LanguageSourceData, bool> Callback_AllowSyncFromGoogle;

		[Token(Token = "0x400224E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static string mCurrentDeviceLanguage;

		[Token(Token = "0x400224F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static List<ILocalizeTargetDescriptor> mLocalizeTargets;

		[Token(Token = "0x4002251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static bool mLocalizeIsScheduled;

		[Token(Token = "0x4002252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private static bool mLocalizeIsScheduledWithForcedValue;

		[Token(Token = "0x4002253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public static bool HighlightLocalizedTargets;

		[Token(Token = "0x17000429")]
		public static string CurrentLanguage
		{
			[Token(Token = "0x6002678")]
			[Address(RVA = "0x1279334", Offset = "0x1279334", VA = "0x1279334")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002679")]
			[Address(RVA = "0x127F7B8", Offset = "0x127F7B8", VA = "0x127F7B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700042A")]
		public static string CurrentLanguageCode
		{
			[Token(Token = "0x600267A")]
			[Address(RVA = "0x1281D70", Offset = "0x1281D70", VA = "0x1281D70")]
			get
			{
				return null;
			}
			[Token(Token = "0x600267B")]
			[Address(RVA = "0x1281DCC", Offset = "0x1281DCC", VA = "0x1281DCC")]
			set
			{
			}
		}

		[Token(Token = "0x1700042B")]
		public static string CurrentRegion
		{
			[Token(Token = "0x600267C")]
			[Address(RVA = "0x128205C", Offset = "0x128205C", VA = "0x128205C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600267D")]
			[Address(RVA = "0x12821D0", Offset = "0x12821D0", VA = "0x12821D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700042C")]
		public static string CurrentRegionCode
		{
			[Token(Token = "0x600267E")]
			[Address(RVA = "0x1282390", Offset = "0x1282390", VA = "0x1282390")]
			get
			{
				return null;
			}
			[Token(Token = "0x600267F")]
			[Address(RVA = "0x1282460", Offset = "0x1282460", VA = "0x1282460")]
			set
			{
			}
		}

		[Token(Token = "0x1700042D")]
		public static CultureInfo CurrentCulture
		{
			[Token(Token = "0x6002680")]
			[Address(RVA = "0x1282564", Offset = "0x1282564", VA = "0x1282564")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400001C")]
		public static event OnLocalizeCallback OnLocalizeEvent
		{
			[Token(Token = "0x60026A9")]
			[Address(RVA = "0x127FDE8", Offset = "0x127FDE8", VA = "0x127FDE8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60026AA")]
			[Address(RVA = "0x128004C", Offset = "0x128004C", VA = "0x128004C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002674")]
		[Address(RVA = "0x126DF6C", Offset = "0x126DF6C", VA = "0x126DF6C")]
		public static void InitializeIfNeeded()
		{
		}

		[Token(Token = "0x6002675")]
		[Address(RVA = "0x1281620", Offset = "0x1281620", VA = "0x1281620")]
		public static string GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6002676")]
		[Address(RVA = "0x127A5C8", Offset = "0x127A5C8", VA = "0x127A5C8")]
		public static int GetRequiredWebServiceVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6002677")]
		[Address(RVA = "0x126DAC4", Offset = "0x126DAC4", VA = "0x126DAC4")]
		public static string GetWebServiceURL([Optional] LanguageSourceData source)
		{
			return null;
		}

		[Token(Token = "0x6002681")]
		[Address(RVA = "0x1281B74", Offset = "0x1281B74", VA = "0x1281B74")]
		public static void SetLanguageAndCode(string LanguageName, string LanguageCode, bool RememberLanguage = true, bool Force = false)
		{
		}

		[Token(Token = "0x6002682")]
		[Address(RVA = "0x12825BC", Offset = "0x12825BC", VA = "0x12825BC")]
		private static CultureInfo CreateCultureForCode(string code)
		{
			return null;
		}

		[Token(Token = "0x6002683")]
		[Address(RVA = "0x12827AC", Offset = "0x12827AC", VA = "0x12827AC")]
		public static void EnableChangingCultureInfo(bool bEnable)
		{
		}

		[Token(Token = "0x6002684")]
		[Address(RVA = "0x12826B0", Offset = "0x12826B0", VA = "0x12826B0")]
		private static void SetCurrentCultureInfo()
		{
		}

		[Token(Token = "0x6002685")]
		[Address(RVA = "0x1280F70", Offset = "0x1280F70", VA = "0x1280F70")]
		private static void SelectStartupLanguage()
		{
		}

		[Token(Token = "0x6002686")]
		[Address(RVA = "0x12828DC", Offset = "0x12828DC", VA = "0x12828DC")]
		public static bool HasLanguage(string Language, bool AllowDiscartingRegion = true, bool Initialize = true, bool SkipDisabled = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002687")]
		[Address(RVA = "0x1281660", Offset = "0x1281660", VA = "0x1281660")]
		public static string GetSupportedLanguage(string Language, bool ignoreDisabled = false)
		{
			return null;
		}

		[Token(Token = "0x6002688")]
		[Address(RVA = "0x12819BC", Offset = "0x12819BC", VA = "0x12819BC")]
		public static string GetLanguageCode(string Language)
		{
			return null;
		}

		[Token(Token = "0x6002689")]
		[Address(RVA = "0x1281E94", Offset = "0x1281E94", VA = "0x1281E94")]
		public static string GetLanguageFromCode(string Code, bool exactMatch = true)
		{
			return null;
		}

		[Token(Token = "0x600268A")]
		[Address(RVA = "0x1282A94", Offset = "0x1282A94", VA = "0x1282A94")]
		public static List<string> GetAllLanguages(bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x600268B")]
		[Address(RVA = "0x1282D0C", Offset = "0x1282D0C", VA = "0x1282D0C")]
		public static List<string> GetAllLanguagesCode(bool allowRegions = true, bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x600268C")]
		[Address(RVA = "0x1282F58", Offset = "0x1282F58", VA = "0x1282F58")]
		public static bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x600268D")]
		[Address(RVA = "0x128304C", Offset = "0x128304C", VA = "0x128304C")]
		private static void LoadCurrentLanguage()
		{
		}

		[Token(Token = "0x600268E")]
		[Address(RVA = "0x1283174", Offset = "0x1283174", VA = "0x1283174")]
		public static void PreviewLanguage(string NewLanguage)
		{
		}

		[Token(Token = "0x600268F")]
		[Address(RVA = "0x1280D0C", Offset = "0x1280D0C", VA = "0x1280D0C")]
		public static void AutoLoadGlobalParamManagers()
		{
		}

		[Token(Token = "0x6002690")]
		[Address(RVA = "0x128326C", Offset = "0x128326C", VA = "0x128326C")]
		public static void ApplyLocalizationParams(ref string translation, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6002691")]
		[Address(RVA = "0x127EE10", Offset = "0x127EE10", VA = "0x127EE10")]
		public static void ApplyLocalizationParams(ref string translation, GameObject root, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6002692")]
		[Address(RVA = "0x12838F0", Offset = "0x12838F0", VA = "0x12838F0")]
		public static void ApplyLocalizationParams(ref string translation, Dictionary<string, object> parameters, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6002693")]
		[Address(RVA = "0x1283460", Offset = "0x1283460", VA = "0x1283460")]
		public static void ApplyLocalizationParams(ref string translation, _GetParam getParam, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x6002694")]
		[Address(RVA = "0x1283B38", Offset = "0x1283B38", VA = "0x1283B38")]
		internal static string GetLocalizationParam(string ParamName, GameObject root)
		{
			return null;
		}

		[Token(Token = "0x6002695")]
		[Address(RVA = "0x1283DC8", Offset = "0x1283DC8", VA = "0x1283DC8")]
		private static string GetPluralType(MatchCollection matches, string langCode, _GetParam getParam)
		{
			return null;
		}

		[Token(Token = "0x6002696")]
		[Address(RVA = "0x127F370", Offset = "0x127F370", VA = "0x127F370")]
		public static string ApplyRTLfix(string line)
		{
			return null;
		}

		[Token(Token = "0x6002697")]
		[Address(RVA = "0x127EF00", Offset = "0x127EF00", VA = "0x127EF00")]
		public static string ApplyRTLfix(string line, int maxCharacters, bool ignoreNumbers)
		{
			return null;
		}

		[Token(Token = "0x6002698")]
		[Address(RVA = "0x1283F8C", Offset = "0x1283F8C", VA = "0x1283F8C")]
		public static string FixRTL_IfNeeded(string text, int maxCharacters = 0, bool ignoreNumber = false)
		{
			return null;
		}

		[Token(Token = "0x6002699")]
		[Address(RVA = "0x1282728", Offset = "0x1282728", VA = "0x1282728")]
		public static bool IsRTL(string Code)
		{
			return default(bool);
		}

		[Token(Token = "0x600269A")]
		[Address(RVA = "0x1280EEC", Offset = "0x1280EEC", VA = "0x1280EEC")]
		public static bool UpdateSources()
		{
			return default(bool);
		}

		[Token(Token = "0x600269B")]
		[Address(RVA = "0x1284028", Offset = "0x1284028", VA = "0x1284028")]
		private static void UnregisterDeletededSources()
		{
		}

		[Token(Token = "0x600269C")]
		[Address(RVA = "0x12842D0", Offset = "0x12842D0", VA = "0x12842D0")]
		private static void RegisterSceneSources()
		{
		}

		[Token(Token = "0x600269D")]
		[Address(RVA = "0x1284130", Offset = "0x1284130", VA = "0x1284130")]
		private static void RegisterSourceInResources()
		{
		}

		[Token(Token = "0x600269E")]
		[Address(RVA = "0x1284464", Offset = "0x1284464", VA = "0x1284464")]
		private static bool AllowSyncFromGoogle(LanguageSourceData Source)
		{
			return default(bool);
		}

		[Token(Token = "0x600269F")]
		[Address(RVA = "0x1274150", Offset = "0x1274150", VA = "0x1274150")]
		internal static void AddSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x60026A0")]
		[Address(RVA = "0x1284504", Offset = "0x1284504", VA = "0x1284504")]
		[IteratorStateMachine(typeof(<Delayed_Import_Google>d__63))]
		private static IEnumerator Delayed_Import_Google(LanguageSourceData source, float delay, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x60026A1")]
		[Address(RVA = "0x1274B9C", Offset = "0x1274B9C", VA = "0x1274B9C")]
		internal static void RemoveSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x60026A2")]
		[Address(RVA = "0x128459C", Offset = "0x128459C", VA = "0x128459C")]
		public static bool IsGlobalSource(string SourceName)
		{
			return default(bool);
		}

		[Token(Token = "0x60026A3")]
		[Address(RVA = "0x1284620", Offset = "0x1284620", VA = "0x1284620")]
		public static LanguageSourceData GetSourceContaining(string term, bool fallbackToFirst = true)
		{
			return null;
		}

		[Token(Token = "0x60026A4")]
		[Address(RVA = "0x12847C4", Offset = "0x12847C4", VA = "0x12847C4")]
		public static UnityEngine.Object FindAsset(string value)
		{
			return null;
		}

		[Token(Token = "0x60026A5")]
		[Address(RVA = "0x12848F4", Offset = "0x12848F4", VA = "0x12848F4")]
		public static void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x60026A6")]
		[Address(RVA = "0x1282840", Offset = "0x1282840", VA = "0x1282840")]
		public static string GetCurrentDeviceLanguage(bool force = false)
		{
			return null;
		}

		[Token(Token = "0x60026A7")]
		[Address(RVA = "0x12849D0", Offset = "0x12849D0", VA = "0x12849D0")]
		private static void DetectDeviceLanguage()
		{
		}

		[Token(Token = "0x60026A8")]
		[Address(RVA = "0x1284E50", Offset = "0x1284E50", VA = "0x1284E50")]
		public static void RegisterTarget(ILocalizeTargetDescriptor desc)
		{
		}

		[Token(Token = "0x60026AB")]
		[Address(RVA = "0x127ED4C", Offset = "0x127ED4C", VA = "0x127ED4C")]
		public static string GetTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage, bool allowLocalizedParameters = true)
		{
			return null;
		}

		[Token(Token = "0x60026AC")]
		[Address(RVA = "0x12852F4", Offset = "0x12852F4", VA = "0x12852F4")]
		public static string GetTermTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage, bool allowLocalizedParameters = true)
		{
			return null;
		}

		[Token(Token = "0x60026AD")]
		[Address(RVA = "0x1285100", Offset = "0x1285100", VA = "0x1285100")]
		public static bool TryGetTranslation(string Term, out string Translation, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage, bool allowLocalizedParameters = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60026AE")]
		public static T GetTranslatedObject<T>(string AssetName, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60026AF")]
		public static T GetTranslatedObjectByTermName<T>(string Term, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60026B0")]
		[Address(RVA = "0x12853A0", Offset = "0x12853A0", VA = "0x12853A0")]
		public static string GetAppName(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x60026B1")]
		[Address(RVA = "0x1274AD0", Offset = "0x1274AD0", VA = "0x1274AD0")]
		public static void LocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x60026B2")]
		[Address(RVA = "0x1285708", Offset = "0x1285708", VA = "0x1285708")]
		[IteratorStateMachine(typeof(<Coroutine_LocalizeAll>d__88))]
		private static IEnumerator Coroutine_LocalizeAll()
		{
			return null;
		}

		[Token(Token = "0x60026B3")]
		[Address(RVA = "0x1285590", Offset = "0x1285590", VA = "0x1285590")]
		private static void DoLocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x60026B4")]
		[Address(RVA = "0x1285768", Offset = "0x1285768", VA = "0x1285768")]
		public static List<string> GetCategories()
		{
			return null;
		}

		[Token(Token = "0x60026B5")]
		[Address(RVA = "0x1285890", Offset = "0x1285890", VA = "0x1285890")]
		public static List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x60026B6")]
		[Address(RVA = "0x1285AD4", Offset = "0x1285AD4", VA = "0x1285AD4")]
		public static TermData GetTermData(string term)
		{
			return null;
		}

		[Token(Token = "0x60026B7")]
		[Address(RVA = "0x12839E0", Offset = "0x12839E0", VA = "0x12839E0")]
		public static TermData GetTermData(string term, out LanguageSourceData source)
		{
			return null;
		}
	}
	[Token(Token = "0x200057C")]
	public abstract class ILocalizeTarget : ScriptableObject
	{
		[Token(Token = "0x60026DE")]
		public abstract bool IsValid(Localize cmp);

		[Token(Token = "0x60026DF")]
		public abstract void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm);

		[Token(Token = "0x60026E0")]
		public abstract void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation);

		[Token(Token = "0x60026E1")]
		public abstract bool CanUseSecondaryTerm();

		[Token(Token = "0x60026E2")]
		public abstract bool AllowMainTermToBeRTL();

		[Token(Token = "0x60026E3")]
		public abstract bool AllowSecondTermToBeRTL();

		[Token(Token = "0x60026E4")]
		public abstract eTermType GetPrimaryTermType(Localize cmp);

		[Token(Token = "0x60026E5")]
		public abstract eTermType GetSecondaryTermType(Localize cmp);

		[Token(Token = "0x60026E6")]
		[Address(RVA = "0x1286D24", Offset = "0x1286D24", VA = "0x1286D24")]
		protected ILocalizeTarget()
		{
		}
	}
	[Token(Token = "0x200057D")]
	public abstract class LocalizeTarget<T> : ILocalizeTarget where T : UnityEngine.Object
	{
		[Token(Token = "0x4002264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T mTarget;

		[Token(Token = "0x60026E7")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60026E8")]
		protected LocalizeTarget()
		{
		}
	}
	[Token(Token = "0x200057E")]
	public abstract class ILocalizeTargetDescriptor
	{
		[Token(Token = "0x4002265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4002266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Priority;

		[Token(Token = "0x60026E9")]
		public abstract bool CanLocalize(Localize cmp);

		[Token(Token = "0x60026EA")]
		public abstract ILocalizeTarget CreateTarget(Localize cmp);

		[Token(Token = "0x60026EB")]
		public abstract Type GetTargetType();

		[Token(Token = "0x60026EC")]
		[Address(RVA = "0x1286D2C", Offset = "0x1286D2C", VA = "0x1286D2C")]
		protected ILocalizeTargetDescriptor()
		{
		}
	}
	[Token(Token = "0x200057F")]
	public abstract class LocalizeTargetDesc<T> : ILocalizeTargetDescriptor where T : ILocalizeTarget
	{
		[Token(Token = "0x60026ED")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x60026EE")]
		public override Type GetTargetType()
		{
			return null;
		}

		[Token(Token = "0x60026EF")]
		protected LocalizeTargetDesc()
		{
		}
	}
	[Token(Token = "0x2000580")]
	public class LocalizeTargetDesc_Type<T, G> : LocalizeTargetDesc<G> where T : UnityEngine.Object where G : LocalizeTarget<T>
	{
		[Token(Token = "0x60026F0")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60026F1")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x60026F2")]
		public LocalizeTargetDesc_Type()
		{
		}
	}
	[Token(Token = "0x2000581")]
	public class LocalizeTarget_TextMeshPro_Label : LocalizeTarget<TextMeshPro>
	{
		[Token(Token = "0x4002267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x4002268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x4002269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x400226A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x60026F3")]
		[Address(RVA = "0x1286D34", Offset = "0x1286D34", VA = "0x1286D34")]
		static LocalizeTarget_TextMeshPro_Label()
		{
		}

		[Token(Token = "0x60026F4")]
		[Address(RVA = "0x1286D38", Offset = "0x1286D38", VA = "0x1286D38")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60026F5")]
		[Address(RVA = "0x1286E00", Offset = "0x1286E00", VA = "0x1286E00", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60026F6")]
		[Address(RVA = "0x1286E08", Offset = "0x1286E08", VA = "0x1286E08", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60026F7")]
		[Address(RVA = "0x1286E10", Offset = "0x1286E10", VA = "0x1286E10", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60026F8")]
		[Address(RVA = "0x1286E18", Offset = "0x1286E18", VA = "0x1286E18", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60026F9")]
		[Address(RVA = "0x1286E20", Offset = "0x1286E20", VA = "0x1286E20", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60026FA")]
		[Address(RVA = "0x1286E28", Offset = "0x1286E28", VA = "0x1286E28", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60026FB")]
		[Address(RVA = "0x1286F44", Offset = "0x1286F44", VA = "0x1286F44", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60026FC")]
		[Address(RVA = "0x12874D0", Offset = "0x12874D0", VA = "0x12874D0")]
		internal static TMP_FontAsset GetTMPFontFromMaterial(Localize cmp, string matName)
		{
			return null;
		}

		[Token(Token = "0x60026FD")]
		[Address(RVA = "0x1287738", Offset = "0x1287738", VA = "0x1287738")]
		internal static void InitAlignment_TMPro(bool isRTL, TextAlignmentOptions alignment, out TextAlignmentOptions alignLTR, out TextAlignmentOptions alignRTL)
		{
		}

		[Token(Token = "0x60026FE")]
		[Address(RVA = "0x12873F0", Offset = "0x12873F0", VA = "0x12873F0")]
		internal static void SetFont(TMP_Text label, TMP_FontAsset newFont)
		{
		}

		[Token(Token = "0x60026FF")]
		[Address(RVA = "0x1287638", Offset = "0x1287638", VA = "0x1287638")]
		internal static void SetMaterial(TMP_Text label, Material newMat)
		{
		}

		[Token(Token = "0x6002700")]
		[Address(RVA = "0x1287ACC", Offset = "0x1287ACC", VA = "0x1287ACC")]
		public LocalizeTarget_TextMeshPro_Label()
		{
		}
	}
	[Token(Token = "0x2000582")]
	public class LocalizeTarget_TextMeshPro_UGUI : LocalizeTarget<TextMeshProUGUI>
	{
		[Token(Token = "0x400226B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x400226C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x400226D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool mAlignmentWasRTL;

		[Token(Token = "0x400226E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool mInitializeAlignment;

		[Token(Token = "0x6002701")]
		[Address(RVA = "0x1287B28", Offset = "0x1287B28", VA = "0x1287B28")]
		static LocalizeTarget_TextMeshPro_UGUI()
		{
		}

		[Token(Token = "0x6002702")]
		[Address(RVA = "0x1287B2C", Offset = "0x1287B2C", VA = "0x1287B2C")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002703")]
		[Address(RVA = "0x1287BF4", Offset = "0x1287BF4", VA = "0x1287BF4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002704")]
		[Address(RVA = "0x1287BFC", Offset = "0x1287BFC", VA = "0x1287BFC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002705")]
		[Address(RVA = "0x1287C04", Offset = "0x1287C04", VA = "0x1287C04", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002706")]
		[Address(RVA = "0x1287C0C", Offset = "0x1287C0C", VA = "0x1287C0C", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002707")]
		[Address(RVA = "0x1287C14", Offset = "0x1287C14", VA = "0x1287C14", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002708")]
		[Address(RVA = "0x1287C1C", Offset = "0x1287C1C", VA = "0x1287C1C", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002709")]
		[Address(RVA = "0x1287D38", Offset = "0x1287D38", VA = "0x1287D38", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600270A")]
		[Address(RVA = "0x12881E4", Offset = "0x12881E4", VA = "0x12881E4")]
		public LocalizeTarget_TextMeshPro_UGUI()
		{
		}
	}
	[Token(Token = "0x2000583")]
	public class LocalizeTarget_UnityStandard_AudioSource : LocalizeTarget<AudioSource>
	{
		[Token(Token = "0x600270B")]
		[Address(RVA = "0x1288240", Offset = "0x1288240", VA = "0x1288240")]
		static LocalizeTarget_UnityStandard_AudioSource()
		{
		}

		[Token(Token = "0x600270C")]
		[Address(RVA = "0x1288244", Offset = "0x1288244", VA = "0x1288244")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600270D")]
		[Address(RVA = "0x128830C", Offset = "0x128830C", VA = "0x128830C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600270E")]
		[Address(RVA = "0x1288314", Offset = "0x1288314", VA = "0x1288314", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600270F")]
		[Address(RVA = "0x128831C", Offset = "0x128831C", VA = "0x128831C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002710")]
		[Address(RVA = "0x1288324", Offset = "0x1288324", VA = "0x1288324", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002711")]
		[Address(RVA = "0x128832C", Offset = "0x128832C", VA = "0x128832C", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002712")]
		[Address(RVA = "0x1288334", Offset = "0x1288334", VA = "0x1288334", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002713")]
		[Address(RVA = "0x1288410", Offset = "0x1288410", VA = "0x1288410", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002714")]
		[Address(RVA = "0x1288580", Offset = "0x1288580", VA = "0x1288580")]
		public LocalizeTarget_UnityStandard_AudioSource()
		{
		}
	}
	[Token(Token = "0x2000584")]
	public class LocalizeTargetDesc_Child : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Child>
	{
		[Token(Token = "0x6002715")]
		[Address(RVA = "0x12885C8", Offset = "0x12885C8", VA = "0x12885C8", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002716")]
		[Address(RVA = "0x12885FC", Offset = "0x12885FC", VA = "0x12885FC")]
		public LocalizeTargetDesc_Child()
		{
		}
	}
	[Token(Token = "0x2000585")]
	public class LocalizeTarget_UnityStandard_Child : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x6002717")]
		[Address(RVA = "0x1288644", Offset = "0x1288644", VA = "0x1288644")]
		static LocalizeTarget_UnityStandard_Child()
		{
		}

		[Token(Token = "0x6002718")]
		[Address(RVA = "0x1288648", Offset = "0x1288648", VA = "0x1288648")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002719")]
		[Address(RVA = "0x12886F8", Offset = "0x12886F8", VA = "0x12886F8", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x600271A")]
		[Address(RVA = "0x128872C", Offset = "0x128872C", VA = "0x128872C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600271B")]
		[Address(RVA = "0x1288734", Offset = "0x1288734", VA = "0x1288734", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600271C")]
		[Address(RVA = "0x128873C", Offset = "0x128873C", VA = "0x128873C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x600271D")]
		[Address(RVA = "0x1288744", Offset = "0x1288744", VA = "0x1288744", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600271E")]
		[Address(RVA = "0x128874C", Offset = "0x128874C", VA = "0x128874C", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600271F")]
		[Address(RVA = "0x1288754", Offset = "0x1288754", VA = "0x1288754", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002720")]
		[Address(RVA = "0x12887A0", Offset = "0x12887A0", VA = "0x12887A0", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002721")]
		[Address(RVA = "0x12888E0", Offset = "0x12888E0", VA = "0x12888E0")]
		public LocalizeTarget_UnityStandard_Child()
		{
		}
	}
	[Token(Token = "0x2000586")]
	public class LocalizeTarget_UnityStandard_MeshRenderer : LocalizeTarget<MeshRenderer>
	{
		[Token(Token = "0x6002722")]
		[Address(RVA = "0x1288928", Offset = "0x1288928", VA = "0x1288928")]
		static LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}

		[Token(Token = "0x6002723")]
		[Address(RVA = "0x128892C", Offset = "0x128892C", VA = "0x128892C")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002724")]
		[Address(RVA = "0x12889F4", Offset = "0x12889F4", VA = "0x12889F4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002725")]
		[Address(RVA = "0x12889FC", Offset = "0x12889FC", VA = "0x12889FC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002726")]
		[Address(RVA = "0x1288A04", Offset = "0x1288A04", VA = "0x1288A04", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002727")]
		[Address(RVA = "0x1288A0C", Offset = "0x1288A0C", VA = "0x1288A0C", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002728")]
		[Address(RVA = "0x1288A14", Offset = "0x1288A14", VA = "0x1288A14", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002729")]
		[Address(RVA = "0x1288A1C", Offset = "0x1288A1C", VA = "0x1288A1C", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600272A")]
		[Address(RVA = "0x1288C14", Offset = "0x1288C14", VA = "0x1288C14", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600272B")]
		[Address(RVA = "0x1288DE0", Offset = "0x1288DE0", VA = "0x1288DE0")]
		public LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}
	}
	[Token(Token = "0x2000587")]
	public class LocalizeTargetDesc_Prefab : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Prefab>
	{
		[Token(Token = "0x600272C")]
		[Address(RVA = "0x1288E28", Offset = "0x1288E28", VA = "0x1288E28", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x600272D")]
		[Address(RVA = "0x1288E30", Offset = "0x1288E30", VA = "0x1288E30")]
		public LocalizeTargetDesc_Prefab()
		{
		}
	}
	[Token(Token = "0x2000588")]
	public class LocalizeTarget_UnityStandard_Prefab : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x600272E")]
		[Address(RVA = "0x1288E78", Offset = "0x1288E78", VA = "0x1288E78")]
		static LocalizeTarget_UnityStandard_Prefab()
		{
		}

		[Token(Token = "0x600272F")]
		[Address(RVA = "0x1288E7C", Offset = "0x1288E7C", VA = "0x1288E7C")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002730")]
		[Address(RVA = "0x1288F2C", Offset = "0x1288F2C", VA = "0x1288F2C", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002731")]
		[Address(RVA = "0x1288F34", Offset = "0x1288F34", VA = "0x1288F34", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002732")]
		[Address(RVA = "0x1288F3C", Offset = "0x1288F3C", VA = "0x1288F3C", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002733")]
		[Address(RVA = "0x1288F44", Offset = "0x1288F44", VA = "0x1288F44", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002734")]
		[Address(RVA = "0x1288F4C", Offset = "0x1288F4C", VA = "0x1288F4C", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002735")]
		[Address(RVA = "0x1288F54", Offset = "0x1288F54", VA = "0x1288F54", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002736")]
		[Address(RVA = "0x1288F5C", Offset = "0x1288F5C", VA = "0x1288F5C", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002737")]
		[Address(RVA = "0x1288FA8", Offset = "0x1288FA8", VA = "0x1288FA8", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002738")]
		[Address(RVA = "0x12891AC", Offset = "0x12891AC", VA = "0x12891AC")]
		private Transform InstantiateNewPrefab(Localize cmp, string mainTranslation)
		{
			return null;
		}

		[Token(Token = "0x6002739")]
		[Address(RVA = "0x1289360", Offset = "0x1289360", VA = "0x1289360")]
		public LocalizeTarget_UnityStandard_Prefab()
		{
		}
	}
	[Token(Token = "0x2000589")]
	public class LocalizeTarget_UnityStandard_SpriteRenderer : LocalizeTarget<SpriteRenderer>
	{
		[Token(Token = "0x600273A")]
		[Address(RVA = "0x12893A8", Offset = "0x12893A8", VA = "0x12893A8")]
		static LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}

		[Token(Token = "0x600273B")]
		[Address(RVA = "0x12893AC", Offset = "0x12893AC", VA = "0x12893AC")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600273C")]
		[Address(RVA = "0x1289474", Offset = "0x1289474", VA = "0x1289474", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600273D")]
		[Address(RVA = "0x128947C", Offset = "0x128947C", VA = "0x128947C", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600273E")]
		[Address(RVA = "0x1289484", Offset = "0x1289484", VA = "0x1289484", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x600273F")]
		[Address(RVA = "0x128948C", Offset = "0x128948C", VA = "0x128948C", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002740")]
		[Address(RVA = "0x1289494", Offset = "0x1289494", VA = "0x1289494", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002741")]
		[Address(RVA = "0x128949C", Offset = "0x128949C", VA = "0x128949C", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002742")]
		[Address(RVA = "0x128957C", Offset = "0x128957C", VA = "0x128957C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002743")]
		[Address(RVA = "0x1289678", Offset = "0x1289678", VA = "0x1289678")]
		public LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}
	}
	[Token(Token = "0x200058A")]
	public class LocalizeTarget_UnityStandard_TextMesh : LocalizeTarget<TextMesh>
	{
		[Token(Token = "0x400226F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignment mAlignment_RTL;

		[Token(Token = "0x4002270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignment mAlignment_LTR;

		[Token(Token = "0x4002271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x4002272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x6002744")]
		[Address(RVA = "0x12896C0", Offset = "0x12896C0", VA = "0x12896C0")]
		static LocalizeTarget_UnityStandard_TextMesh()
		{
		}

		[Token(Token = "0x6002745")]
		[Address(RVA = "0x12896C4", Offset = "0x12896C4", VA = "0x12896C4")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002746")]
		[Address(RVA = "0x128978C", Offset = "0x128978C", VA = "0x128978C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002747")]
		[Address(RVA = "0x1289794", Offset = "0x1289794", VA = "0x1289794", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002748")]
		[Address(RVA = "0x128979C", Offset = "0x128979C", VA = "0x128979C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002749")]
		[Address(RVA = "0x12897A4", Offset = "0x12897A4", VA = "0x12897A4", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600274A")]
		[Address(RVA = "0x12897AC", Offset = "0x12897AC", VA = "0x12897AC", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600274B")]
		[Address(RVA = "0x12897B4", Offset = "0x12897B4", VA = "0x12897B4", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600274C")]
		[Address(RVA = "0x12898D8", Offset = "0x12898D8", VA = "0x12898D8", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600274D")]
		[Address(RVA = "0x1289B80", Offset = "0x1289B80", VA = "0x1289B80")]
		public LocalizeTarget_UnityStandard_TextMesh()
		{
		}
	}
	[Token(Token = "0x200058B")]
	public class LocalizeTarget_UnityStandard_VideoPlayer : LocalizeTarget<VideoPlayer>
	{
		[Token(Token = "0x600274E")]
		[Address(RVA = "0x1289BD8", Offset = "0x1289BD8", VA = "0x1289BD8")]
		static LocalizeTarget_UnityStandard_VideoPlayer()
		{
		}

		[Token(Token = "0x600274F")]
		[Address(RVA = "0x1289BDC", Offset = "0x1289BDC", VA = "0x1289BDC")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002750")]
		[Address(RVA = "0x1289CA4", Offset = "0x1289CA4", VA = "0x1289CA4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002751")]
		[Address(RVA = "0x1289CAC", Offset = "0x1289CAC", VA = "0x1289CAC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002752")]
		[Address(RVA = "0x1289CB4", Offset = "0x1289CB4", VA = "0x1289CB4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002753")]
		[Address(RVA = "0x1289CBC", Offset = "0x1289CBC", VA = "0x1289CBC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002754")]
		[Address(RVA = "0x1289CC4", Offset = "0x1289CC4", VA = "0x1289CC4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002755")]
		[Address(RVA = "0x1289CCC", Offset = "0x1289CCC", VA = "0x1289CCC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002756")]
		[Address(RVA = "0x1289DAC", Offset = "0x1289DAC", VA = "0x1289DAC", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002757")]
		[Address(RVA = "0x1289EA8", Offset = "0x1289EA8", VA = "0x1289EA8")]
		public LocalizeTarget_UnityStandard_VideoPlayer()
		{
		}
	}
	[Token(Token = "0x200058C")]
	public class LocalizeTarget_UnityUI_Image : LocalizeTarget<UnityEngine.UI.Image>
	{
		[Token(Token = "0x6002758")]
		[Address(RVA = "0x1289EF0", Offset = "0x1289EF0", VA = "0x1289EF0")]
		static LocalizeTarget_UnityUI_Image()
		{
		}

		[Token(Token = "0x6002759")]
		[Address(RVA = "0x1289EF4", Offset = "0x1289EF4", VA = "0x1289EF4")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600275A")]
		[Address(RVA = "0x1289FBC", Offset = "0x1289FBC", VA = "0x1289FBC", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x600275B")]
		[Address(RVA = "0x1289FC4", Offset = "0x1289FC4", VA = "0x1289FC4", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600275C")]
		[Address(RVA = "0x1289FCC", Offset = "0x1289FCC", VA = "0x1289FCC", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600275D")]
		[Address(RVA = "0x1289FD4", Offset = "0x1289FD4", VA = "0x1289FD4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600275E")]
		[Address(RVA = "0x128A054", Offset = "0x128A054", VA = "0x128A054", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600275F")]
		[Address(RVA = "0x128A05C", Offset = "0x128A05C", VA = "0x128A05C", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002760")]
		[Address(RVA = "0x128A1F8", Offset = "0x128A1F8", VA = "0x128A1F8", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002761")]
		[Address(RVA = "0x128A2E8", Offset = "0x128A2E8", VA = "0x128A2E8")]
		public LocalizeTarget_UnityUI_Image()
		{
		}
	}
	[Token(Token = "0x200058D")]
	public class LocalizeTarget_UnityUI_RawImage : LocalizeTarget<RawImage>
	{
		[Token(Token = "0x6002762")]
		[Address(RVA = "0x128A330", Offset = "0x128A330", VA = "0x128A330")]
		static LocalizeTarget_UnityUI_RawImage()
		{
		}

		[Token(Token = "0x6002763")]
		[Address(RVA = "0x128A334", Offset = "0x128A334", VA = "0x128A334")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6002764")]
		[Address(RVA = "0x128A3FC", Offset = "0x128A3FC", VA = "0x128A3FC", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002765")]
		[Address(RVA = "0x128A404", Offset = "0x128A404", VA = "0x128A404", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002766")]
		[Address(RVA = "0x128A40C", Offset = "0x128A40C", VA = "0x128A40C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002767")]
		[Address(RVA = "0x128A414", Offset = "0x128A414", VA = "0x128A414", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002768")]
		[Address(RVA = "0x128A41C", Offset = "0x128A41C", VA = "0x128A41C", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002769")]
		[Address(RVA = "0x128A424", Offset = "0x128A424", VA = "0x128A424", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600276A")]
		[Address(RVA = "0x128A514", Offset = "0x128A514", VA = "0x128A514", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600276B")]
		[Address(RVA = "0x128A604", Offset = "0x128A604", VA = "0x128A604")]
		public LocalizeTarget_UnityUI_RawImage()
		{
		}
	}
	[Token(Token = "0x200058E")]
	public class LocalizeTarget_UnityUI_Text : LocalizeTarget<Text>
	{
		[Token(Token = "0x4002273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAnchor mAlignment_RTL;

		[Token(Token = "0x4002274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAnchor mAlignment_LTR;

		[Token(Token = "0x4002275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x4002276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x600276C")]
		[Address(RVA = "0x128A64C", Offset = "0x128A64C", VA = "0x128A64C")]
		static LocalizeTarget_UnityUI_Text()
		{
		}

		[Token(Token = "0x600276D")]
		[Address(RVA = "0x128A650", Offset = "0x128A650", VA = "0x128A650")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600276E")]
		[Address(RVA = "0x128A718", Offset = "0x128A718", VA = "0x128A718", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600276F")]
		[Address(RVA = "0x128A720", Offset = "0x128A720", VA = "0x128A720", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6002770")]
		[Address(RVA = "0x128A728", Offset = "0x128A728", VA = "0x128A728", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6002771")]
		[Address(RVA = "0x128A730", Offset = "0x128A730", VA = "0x128A730", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002772")]
		[Address(RVA = "0x128A738", Offset = "0x128A738", VA = "0x128A738", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6002773")]
		[Address(RVA = "0x128A740", Offset = "0x128A740", VA = "0x128A740", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6002774")]
		[Address(RVA = "0x128A86C", Offset = "0x128A86C", VA = "0x128A86C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6002775")]
		[Address(RVA = "0x128AB14", Offset = "0x128AB14", VA = "0x128AB14")]
		private void InitAlignment(bool isRTL, TextAnchor alignment, out TextAnchor alignLTR, out TextAnchor alignRTL)
		{
		}

		[Token(Token = "0x6002776")]
		[Address(RVA = "0x128ABCC", Offset = "0x128ABCC", VA = "0x128ABCC")]
		public LocalizeTarget_UnityUI_Text()
		{
		}
	}
	[Token(Token = "0x200058F")]
	public enum eTermType
	{
		[Token(Token = "0x4002278")]
		Text,
		[Token(Token = "0x4002279")]
		Font,
		[Token(Token = "0x400227A")]
		Texture,
		[Token(Token = "0x400227B")]
		AudioClip,
		[Token(Token = "0x400227C")]
		GameObject,
		[Token(Token = "0x400227D")]
		Sprite,
		[Token(Token = "0x400227E")]
		Material,
		[Token(Token = "0x400227F")]
		Child,
		[Token(Token = "0x4002280")]
		Mesh,
		[Token(Token = "0x4002281")]
		TextMeshPFont,
		[Token(Token = "0x4002282")]
		Object,
		[Token(Token = "0x4002283")]
		Video
	}
	[Token(Token = "0x2000590")]
	public enum TranslationFlag : byte
	{
		[Token(Token = "0x4002285")]
		Normal = 1,
		[Token(Token = "0x4002286")]
		AutoTranslated
	}
	[Serializable]
	[Token(Token = "0x2000591")]
	public class TermData
	{
		[Token(Token = "0x4002287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Term;

		[Token(Token = "0x4002288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public eTermType TermType;

		[NonSerialized]
		[Token(Token = "0x4002289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x400228A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Languages;

		[Token(Token = "0x400228B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte[] Flags;

		[Token(Token = "0x400228C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string[] Languages_Touch;

		[Token(Token = "0x6002777")]
		[Address(RVA = "0x128AC24", Offset = "0x128AC24", VA = "0x128AC24")]
		public string GetTranslation(int idx, [Optional] string specialization, bool editMode = false)
		{
			return null;
		}

		[Token(Token = "0x6002778")]
		[Address(RVA = "0x128AD38", Offset = "0x128AD38", VA = "0x128AD38")]
		public void SetTranslation(int idx, string translation, [Optional] string specialization)
		{
		}

		[Token(Token = "0x6002779")]
		[Address(RVA = "0x128AE1C", Offset = "0x128AE1C", VA = "0x128AE1C")]
		public void RemoveSpecialization(string specialization)
		{
		}

		[Token(Token = "0x600277A")]
		[Address(RVA = "0x128AE70", Offset = "0x128AE70", VA = "0x128AE70")]
		public void RemoveSpecialization(int idx, string specialization)
		{
		}

		[Token(Token = "0x600277B")]
		[Address(RVA = "0x128B010", Offset = "0x128B010", VA = "0x128B010")]
		public bool IsAutoTranslated(int idx, bool IsTouch)
		{
			return default(bool);
		}

		[Token(Token = "0x600277C")]
		[Address(RVA = "0x128B044", Offset = "0x128B044", VA = "0x128B044")]
		public void Validate()
		{
		}

		[Token(Token = "0x600277D")]
		[Address(RVA = "0x128B240", Offset = "0x128B240", VA = "0x128B240")]
		public bool IsTerm(string name, bool allowCategoryMistmatch)
		{
			return default(bool);
		}

		[Token(Token = "0x600277E")]
		[Address(RVA = "0x128B2C8", Offset = "0x128B2C8", VA = "0x128B2C8")]
		public bool HasSpecializations()
		{
			return default(bool);
		}

		[Token(Token = "0x600277F")]
		[Address(RVA = "0x128B390", Offset = "0x128B390", VA = "0x128B390")]
		public List<string> GetAllSpecializations()
		{
			return null;
		}

		[Token(Token = "0x6002780")]
		[Address(RVA = "0x128B478", Offset = "0x128B478", VA = "0x128B478")]
		public TermData()
		{
		}
	}
	[Token(Token = "0x2000592")]
	public class TermsPopup : PropertyAttribute
	{
		[Token(Token = "0x17000432")]
		public string Filter
		{
			[Token(Token = "0x6002782")]
			[Address(RVA = "0x128B5D0", Offset = "0x128B5D0", VA = "0x128B5D0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002783")]
			[Address(RVA = "0x128B5D8", Offset = "0x128B5D8", VA = "0x128B5D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002781")]
		[Address(RVA = "0x128B5A0", Offset = "0x128B5A0", VA = "0x128B5A0")]
		public TermsPopup(string filter = "")
		{
		}
	}
	[Token(Token = "0x2000593")]
	public class AutoChangeCultureInfo : MonoBehaviour
	{
		[Token(Token = "0x6002784")]
		[Address(RVA = "0x128B5E0", Offset = "0x128B5E0", VA = "0x128B5E0")]
		public void Start()
		{
		}

		[Token(Token = "0x6002785")]
		[Address(RVA = "0x128B634", Offset = "0x128B634", VA = "0x128B634")]
		public AutoChangeCultureInfo()
		{
		}
	}
	[Token(Token = "0x2000594")]
	public class CoroutineManager : MonoBehaviour
	{
		[Token(Token = "0x400228E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CoroutineManager mInstance;

		[Token(Token = "0x17000433")]
		private static CoroutineManager pInstance
		{
			[Token(Token = "0x6002786")]
			[Address(RVA = "0x128B63C", Offset = "0x128B63C", VA = "0x128B63C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002787")]
		[Address(RVA = "0x128B78C", Offset = "0x128B78C", VA = "0x128B78C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002788")]
		[Address(RVA = "0x128B810", Offset = "0x128B810", VA = "0x128B810")]
		public static Coroutine Start(IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x6002789")]
		[Address(RVA = "0x128B834", Offset = "0x128B834", VA = "0x128B834")]
		public CoroutineManager()
		{
		}
	}
	[Token(Token = "0x2000595")]
	[AddComponentMenu("I2/Localization/I2 Localize Callback")]
	public class CustomLocalizeCallback : MonoBehaviour
	{
		[Token(Token = "0x400228F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent _OnLocalize;

		[Token(Token = "0x600278A")]
		[Address(RVA = "0x128B83C", Offset = "0x128B83C", VA = "0x128B83C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600278B")]
		[Address(RVA = "0x128B914", Offset = "0x128B914", VA = "0x128B914")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600278C")]
		[Address(RVA = "0x128B9B8", Offset = "0x128B9B8", VA = "0x128B9B8")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x600278D")]
		[Address(RVA = "0x128B9D4", Offset = "0x128B9D4", VA = "0x128B9D4")]
		public CustomLocalizeCallback()
		{
		}
	}
	[Token(Token = "0x2000596")]
	public class HindiFixer
	{
		[Token(Token = "0x600278E")]
		[Address(RVA = "0x128BA48", Offset = "0x128BA48", VA = "0x128BA48")]
		internal static string Fix(string text)
		{
			return null;
		}

		[Token(Token = "0x600278F")]
		[Address(RVA = "0x128BE54", Offset = "0x128BE54", VA = "0x128BE54")]
		public HindiFixer()
		{
		}
	}
	[Token(Token = "0x2000598")]
	public static class I2Utils
	{
		[Token(Token = "0x4002292")]
		public const string ValidChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";

		[Token(Token = "0x4002293")]
		public const string NumberChars = "0123456789";

		[Token(Token = "0x4002294")]
		public const string ValidNameSymbols = ".-_$#@*()[]{}+:?!&',^=<>~`";

		[Token(Token = "0x6002793")]
		[Address(RVA = "0x1287920", Offset = "0x1287920", VA = "0x1287920")]
		public static string ReverseText(string source)
		{
			return null;
		}

		[Token(Token = "0x6002794")]
		[Address(RVA = "0x128BF64", Offset = "0x128BF64", VA = "0x128BF64")]
		public static string RemoveNonASCII(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6002795")]
		[Address(RVA = "0x128C184", Offset = "0x128C184", VA = "0x128C184")]
		public static string GetValidTermName(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6002796")]
		[Address(RVA = "0x128C22C", Offset = "0x128C22C", VA = "0x128C22C")]
		public static string SplitLine(string line, int maxCharacters)
		{
			return null;
		}

		[Token(Token = "0x6002797")]
		[Address(RVA = "0x128C4D0", Offset = "0x128C4D0", VA = "0x128C4D0")]
		public static bool FindNextTag(string line, int iStart, out int tagStart, out int tagEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6002798")]
		[Address(RVA = "0x128C1A4", Offset = "0x128C1A4", VA = "0x128C1A4")]
		public static string RemoveTags(string text)
		{
			return null;
		}

		[Token(Token = "0x6002799")]
		[Address(RVA = "0x128C654", Offset = "0x128C654", VA = "0x128C654")]
		public static bool RemoveResourcesPath(ref string sPath)
		{
			return default(bool);
		}

		[Token(Token = "0x600279A")]
		[Address(RVA = "0x128C8F8", Offset = "0x128C8F8", VA = "0x128C8F8")]
		public static bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x600279B")]
		[Address(RVA = "0x128C900", Offset = "0x128C900", VA = "0x128C900")]
		public static string GetPath(this Transform tr)
		{
			return null;
		}

		[Token(Token = "0x600279C")]
		[Address(RVA = "0x128C9D0", Offset = "0x128C9D0", VA = "0x128C9D0")]
		public static Transform FindObject(string objectPath)
		{
			return null;
		}

		[Token(Token = "0x600279D")]
		[Address(RVA = "0x128CA30", Offset = "0x128CA30", VA = "0x128CA30")]
		public static Transform FindObject(Scene scene, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x600279E")]
		[Address(RVA = "0x128CB70", Offset = "0x128CB70", VA = "0x128CB70")]
		public static Transform FindObject(Transform root, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x600279F")]
		public static H FindInParents<H>(Transform tr) where H : Component
		{
			return null;
		}

		[Token(Token = "0x60027A0")]
		[Address(RVA = "0x128CC98", Offset = "0x128CC98", VA = "0x128CC98")]
		public static string GetCaptureMatch(Match match)
		{
			return null;
		}

		[Token(Token = "0x60027A1")]
		[Address(RVA = "0x128CD44", Offset = "0x128CD44", VA = "0x128CD44")]
		public static void SendWebRequest(UnityWebRequest www)
		{
		}
	}
	[Token(Token = "0x200059B")]
	public interface ILocalizationParamsManager
	{
		[Token(Token = "0x60027A6")]
		string GetParameterValue(string Param);
	}
	[Token(Token = "0x200059C")]
	public class LocalizationParamsManager : MonoBehaviour, ILocalizationParamsManager
	{
		[Serializable]
		[Token(Token = "0x200059D")]
		public struct ParamValue
		{
			[Token(Token = "0x400229B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Name;

			[Token(Token = "0x400229C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string Value;
		}

		[Token(Token = "0x4002299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<ParamValue> _Params;

		[Token(Token = "0x400229A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _IsGlobalManager;

		[Token(Token = "0x60027A7")]
		[Address(RVA = "0x128CDDC", Offset = "0x128CDDC", VA = "0x128CDDC", Slot = "4")]
		public string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x60027A8")]
		[Address(RVA = "0x128CEA0", Offset = "0x128CEA0", VA = "0x128CEA0")]
		public void SetParameterValue(string ParamName, string ParamValue, bool localize = true)
		{
		}

		[Token(Token = "0x60027A9")]
		[Address(RVA = "0x128D080", Offset = "0x128D080", VA = "0x128D080")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x60027AA")]
		[Address(RVA = "0x128D138", Offset = "0x128D138", VA = "0x128D138", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60027AB")]
		[Address(RVA = "0x128D148", Offset = "0x128D148", VA = "0x128D148")]
		public void DoAutoRegister()
		{
		}

		[Token(Token = "0x60027AC")]
		[Address(RVA = "0x128D278", Offset = "0x128D278", VA = "0x128D278")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60027AD")]
		[Address(RVA = "0x128D2F8", Offset = "0x128D2F8", VA = "0x128D2F8")]
		public LocalizationParamsManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200059E")]
	public struct LocalizedString
	{
		[Token(Token = "0x400229D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string mTerm;

		[Token(Token = "0x400229E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool mRTL_IgnoreArabicFix;

		[Token(Token = "0x400229F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int mRTL_MaxLineLength;

		[Token(Token = "0x40022A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool mRTL_ConvertNumbers;

		[Token(Token = "0x40022A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_DontLocalizeParameters;

		[Token(Token = "0x60027AE")]
		[Address(RVA = "0x128D380", Offset = "0x128D380", VA = "0x128D380")]
		public static implicit operator string(LocalizedString s)
		{
			return null;
		}

		[Token(Token = "0x60027AF")]
		[Address(RVA = "0x128D448", Offset = "0x128D448", VA = "0x128D448")]
		public static implicit operator LocalizedString(string term)
		{
			return default(LocalizedString);
		}

		[Token(Token = "0x60027B0")]
		[Address(RVA = "0x128D484", Offset = "0x128D484", VA = "0x128D484")]
		public LocalizedString(LocalizedString str)
		{
		}

		[Token(Token = "0x60027B1")]
		[Address(RVA = "0x128D384", Offset = "0x128D384", VA = "0x128D384", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200059F")]
	public class RegisterCallback_AllowSyncFromGoogle : MonoBehaviour
	{
		[Token(Token = "0x60027B2")]
		[Address(RVA = "0x128D4D8", Offset = "0x128D4D8", VA = "0x128D4D8")]
		public void Awake()
		{
		}

		[Token(Token = "0x60027B3")]
		[Address(RVA = "0x128D578", Offset = "0x128D578", VA = "0x128D578")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60027B4")]
		[Address(RVA = "0x128D618", Offset = "0x128D618", VA = "0x128D618")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60027B5")]
		[Address(RVA = "0x128D674", Offset = "0x128D674", VA = "0x128D674", Slot = "4")]
		public virtual bool AllowSyncFromGoogle(LanguageSourceData Source)
		{
			return default(bool);
		}

		[Token(Token = "0x60027B6")]
		[Address(RVA = "0x128D67C", Offset = "0x128D67C", VA = "0x128D67C")]
		public RegisterCallback_AllowSyncFromGoogle()
		{
		}
	}
	[Token(Token = "0x20005A0")]
	public class RegisterGlobalParameters : MonoBehaviour, ILocalizationParamsManager
	{
		[Token(Token = "0x60027B7")]
		[Address(RVA = "0x128D684", Offset = "0x128D684", VA = "0x128D684", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60027B8")]
		[Address(RVA = "0x128D7B4", Offset = "0x128D7B4", VA = "0x128D7B4", Slot = "6")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x60027B9")]
		[Address(RVA = "0x128D834", Offset = "0x128D834", VA = "0x128D834", Slot = "7")]
		public virtual string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x60027BA")]
		[Address(RVA = "0x128D83C", Offset = "0x128D83C", VA = "0x128D83C")]
		public RegisterGlobalParameters()
		{
		}
	}
	[Token(Token = "0x20005A1")]
	public interface IResourceManager_Bundles
	{
		[Token(Token = "0x60027BB")]
		UnityEngine.Object LoadFromBundle(string path, Type assetType);
	}
	[Token(Token = "0x20005A2")]
	public class ResourceManager : MonoBehaviour
	{
		[Token(Token = "0x40022A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ResourceManager mInstance;

		[Token(Token = "0x40022A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<IResourceManager_Bundles> mBundleManagers;

		[Token(Token = "0x40022A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object[] Assets;

		[Token(Token = "0x40022A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<string, UnityEngine.Object> mResourcesCache;

		[Token(Token = "0x17000434")]
		public static ResourceManager pInstance
		{
			[Token(Token = "0x60027BC")]
			[Address(RVA = "0x128D844", Offset = "0x128D844", VA = "0x128D844")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60027BD")]
		[Address(RVA = "0x128DC20", Offset = "0x128DC20", VA = "0x128DC20")]
		public static void MyOnLevelWasLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x60027BE")]
		public T GetAsset<T>(string Name) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60027BF")]
		[Address(RVA = "0x128DCE8", Offset = "0x128DCE8", VA = "0x128DCE8")]
		private UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x60027C0")]
		[Address(RVA = "0x128DE0C", Offset = "0x128DE0C", VA = "0x128DE0C")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60027C1")]
		public T LoadFromResources<T>(string Path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60027C2")]
		public T LoadFromBundle<T>(string path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60027C3")]
		[Address(RVA = "0x128DC7C", Offset = "0x128DC7C", VA = "0x128DC7C")]
		public void CleanResourceCache(bool unloadResources = false)
		{
		}

		[Token(Token = "0x60027C4")]
		[Address(RVA = "0x128DE6C", Offset = "0x128DE6C", VA = "0x128DE6C")]
		public ResourceManager()
		{
		}
	}
	[Token(Token = "0x20005A3")]
	public class RTLFixer
	{
		[Token(Token = "0x60027C5")]
		[Address(RVA = "0x128DFA8", Offset = "0x128DFA8", VA = "0x128DFA8")]
		public static string Fix(string str)
		{
			return null;
		}

		[Token(Token = "0x60027C6")]
		[Address(RVA = "0x128E230", Offset = "0x128E230", VA = "0x128E230")]
		public static string Fix(string str, bool rtl)
		{
			return null;
		}

		[Token(Token = "0x60027C7")]
		[Address(RVA = "0x128DFB4", Offset = "0x128DFB4", VA = "0x128DFB4")]
		public static string Fix(string str, bool showTashkeel, bool useHinduNumbers)
		{
			return null;
		}

		[Token(Token = "0x60027C8")]
		[Address(RVA = "0x128F438", Offset = "0x128F438", VA = "0x128F438")]
		public RTLFixer()
		{
		}
	}
	[Token(Token = "0x20005A4")]
	internal enum IsolatedArabicLetters
	{
		[Token(Token = "0x40022A7")]
		Hamza = 65152,
		[Token(Token = "0x40022A8")]
		Alef = 65165,
		[Token(Token = "0x40022A9")]
		AlefHamza = 65155,
		[Token(Token = "0x40022AA")]
		WawHamza = 65157,
		[Token(Token = "0x40022AB")]
		AlefMaksoor = 65159,
		[Token(Token = "0x40022AC")]
		AlefMaksora = 64508,
		[Token(Token = "0x40022AD")]
		HamzaNabera = 65161,
		[Token(Token = "0x40022AE")]
		Ba = 65167,
		[Token(Token = "0x40022AF")]
		Ta = 65173,
		[Token(Token = "0x40022B0")]
		Tha2 = 65177,
		[Token(Token = "0x40022B1")]
		Jeem = 65181,
		[Token(Token = "0x40022B2")]
		H7aa = 65185,
		[Token(Token = "0x40022B3")]
		Khaa2 = 65189,
		[Token(Token = "0x40022B4")]
		Dal = 65193,
		[Token(Token = "0x40022B5")]
		Thal = 65195,
		[Token(Token = "0x40022B6")]
		Ra2 = 65197,
		[Token(Token = "0x40022B7")]
		Zeen = 65199,
		[Token(Token = "0x40022B8")]
		Seen = 65201,
		[Token(Token = "0x40022B9")]
		Sheen = 65205,
		[Token(Token = "0x40022BA")]
		S9a = 65209,
		[Token(Token = "0x40022BB")]
		Dha = 65213,
		[Token(Token = "0x40022BC")]
		T6a = 65217,
		[Token(Token = "0x40022BD")]
		T6ha = 65221,
		[Token(Token = "0x40022BE")]
		Ain = 65225,
		[Token(Token = "0x40022BF")]
		Gain = 65229,
		[Token(Token = "0x40022C0")]
		Fa = 65233,
		[Token(Token = "0x40022C1")]
		Gaf = 65237,
		[Token(Token = "0x40022C2")]
		Kaf = 65241,
		[Token(Token = "0x40022C3")]
		Lam = 65245,
		[Token(Token = "0x40022C4")]
		Meem = 65249,
		[Token(Token = "0x40022C5")]
		Noon = 65253,
		[Token(Token = "0x40022C6")]
		Ha = 65257,
		[Token(Token = "0x40022C7")]
		Waw = 65261,
		[Token(Token = "0x40022C8")]
		Ya = 65265,
		[Token(Token = "0x40022C9")]
		AlefMad = 65153,
		[Token(Token = "0x40022CA")]
		TaMarboota = 65171,
		[Token(Token = "0x40022CB")]
		PersianPe = 64342,
		[Token(Token = "0x40022CC")]
		PersianChe = 64378,
		[Token(Token = "0x40022CD")]
		PersianZe = 64394,
		[Token(Token = "0x40022CE")]
		PersianGaf = 64402,
		[Token(Token = "0x40022CF")]
		PersianGaf2 = 64398
	}
	[Token(Token = "0x20005A5")]
	internal enum GeneralArabicLetters
	{
		[Token(Token = "0x40022D1")]
		Hamza = 1569,
		[Token(Token = "0x40022D2")]
		Alef = 1575,
		[Token(Token = "0x40022D3")]
		AlefHamza = 1571,
		[Token(Token = "0x40022D4")]
		WawHamza = 1572,
		[Token(Token = "0x40022D5")]
		AlefMaksoor = 1573,
		[Token(Token = "0x40022D6")]
		AlefMagsora = 1609,
		[Token(Token = "0x40022D7")]
		HamzaNabera = 1574,
		[Token(Token = "0x40022D8")]
		Ba = 1576,
		[Token(Token = "0x40022D9")]
		Ta = 1578,
		[Token(Token = "0x40022DA")]
		Tha2 = 1579,
		[Token(Token = "0x40022DB")]
		Jeem = 1580,
		[Token(Token = "0x40022DC")]
		H7aa = 1581,
		[Token(Token = "0x40022DD")]
		Khaa2 = 1582,
		[Token(Token = "0x40022DE")]
		Dal = 1583,
		[Token(Token = "0x40022DF")]
		Thal = 1584,
		[Token(Token = "0x40022E0")]
		Ra2 = 1585,
		[Token(Token = "0x40022E1")]
		Zeen = 1586,
		[Token(Token = "0x40022E2")]
		Seen = 1587,
		[Token(Token = "0x40022E3")]
		Sheen = 1588,
		[Token(Token = "0x40022E4")]
		S9a = 1589,
		[Token(Token = "0x40022E5")]
		Dha = 1590,
		[Token(Token = "0x40022E6")]
		T6a = 1591,
		[Token(Token = "0x40022E7")]
		T6ha = 1592,
		[Token(Token = "0x40022E8")]
		Ain = 1593,
		[Token(Token = "0x40022E9")]
		Gain = 1594,
		[Token(Token = "0x40022EA")]
		Fa = 1601,
		[Token(Token = "0x40022EB")]
		Gaf = 1602,
		[Token(Token = "0x40022EC")]
		Kaf = 1603,
		[Token(Token = "0x40022ED")]
		Lam = 1604,
		[Token(Token = "0x40022EE")]
		Meem = 1605,
		[Token(Token = "0x40022EF")]
		Noon = 1606,
		[Token(Token = "0x40022F0")]
		Ha = 1607,
		[Token(Token = "0x40022F1")]
		Waw = 1608,
		[Token(Token = "0x40022F2")]
		Ya = 1610,
		[Token(Token = "0x40022F3")]
		AlefMad = 1570,
		[Token(Token = "0x40022F4")]
		TaMarboota = 1577,
		[Token(Token = "0x40022F5")]
		PersianPe = 1662,
		[Token(Token = "0x40022F6")]
		PersianChe = 1670,
		[Token(Token = "0x40022F7")]
		PersianZe = 1688,
		[Token(Token = "0x40022F8")]
		PersianGaf = 1711,
		[Token(Token = "0x40022F9")]
		PersianGaf2 = 1705
	}
	[Token(Token = "0x20005A6")]
	internal class ArabicMapping
	{
		[Token(Token = "0x40022FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int from;

		[Token(Token = "0x40022FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int to;

		[Token(Token = "0x60027C9")]
		[Address(RVA = "0x128F440", Offset = "0x128F440", VA = "0x128F440")]
		public ArabicMapping(int from, int to)
		{
		}
	}
	[Token(Token = "0x20005A7")]
	internal class ArabicTable
	{
		[Token(Token = "0x40022FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ArabicMapping> mapList;

		[Token(Token = "0x40022FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ArabicTable arabicMapper;

		[Token(Token = "0x17000435")]
		internal static ArabicTable ArabicMapper
		{
			[Token(Token = "0x60027CB")]
			[Address(RVA = "0x1290D00", Offset = "0x1290D00", VA = "0x1290D00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60027CA")]
		[Address(RVA = "0x128F46C", Offset = "0x128F46C", VA = "0x128F46C")]
		private ArabicTable()
		{
		}

		[Token(Token = "0x60027CC")]
		[Address(RVA = "0x1290D84", Offset = "0x1290D84", VA = "0x1290D84")]
		internal int Convert(int toBeConverted)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20005A8")]
	internal class TashkeelLocation
	{
		[Token(Token = "0x40022FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public char tashkeel;

		[Token(Token = "0x40022FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int position;

		[Token(Token = "0x60027CD")]
		[Address(RVA = "0x1290F18", Offset = "0x1290F18", VA = "0x1290F18")]
		public TashkeelLocation(char tashkeel, int position)
		{
		}
	}
	[Token(Token = "0x20005A9")]
	internal class RTLFixerTool
	{
		[Token(Token = "0x4002300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool showTashkeel;

		[Token(Token = "0x4002301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		internal static bool useHinduNumbers;

		[Token(Token = "0x60027CE")]
		[Address(RVA = "0x1290F48", Offset = "0x1290F48", VA = "0x1290F48")]
		internal static string RemoveTashkeel(string str, out List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x60027CF")]
		[Address(RVA = "0x1291478", Offset = "0x1291478", VA = "0x1291478")]
		internal static char[] ReturnTashkeel(char[] letters, List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x60027D0")]
		[Address(RVA = "0x128E430", Offset = "0x128E430", VA = "0x128E430")]
		internal static string FixLine(string str)
		{
			return null;
		}

		[Token(Token = "0x60027D1")]
		[Address(RVA = "0x12916A0", Offset = "0x12916A0", VA = "0x12916A0")]
		internal static bool IsIgnoredCharacter(char ch)
		{
			return default(bool);
		}

		[Token(Token = "0x60027D2")]
		[Address(RVA = "0x1291C70", Offset = "0x1291C70", VA = "0x1291C70")]
		internal static bool IsLeadingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60027D3")]
		[Address(RVA = "0x1291B2C", Offset = "0x1291B2C", VA = "0x1291B2C")]
		internal static bool IsFinishingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60027D4")]
		[Address(RVA = "0x12917FC", Offset = "0x12917FC", VA = "0x12917FC")]
		internal static bool IsMiddleLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60027D5")]
		[Address(RVA = "0x1291F5C", Offset = "0x1291F5C", VA = "0x1291F5C")]
		public RTLFixerTool()
		{
		}
	}
	[Token(Token = "0x20005AA")]
	[AddComponentMenu("I2/Localization/SetLanguage Button")]
	public class SetLanguage : MonoBehaviour
	{
		[Token(Token = "0x4002302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string _Language;

		[Token(Token = "0x60027D7")]
		[Address(RVA = "0x1291FB0", Offset = "0x1291FB0", VA = "0x1291FB0")]
		private void OnClick()
		{
		}

		[Token(Token = "0x60027D8")]
		[Address(RVA = "0x1291FB4", Offset = "0x1291FB4", VA = "0x1291FB4")]
		public void ApplyLanguage()
		{
		}

		[Token(Token = "0x60027D9")]
		[Address(RVA = "0x129225C", Offset = "0x129225C", VA = "0x129225C")]
		public SetLanguage()
		{
		}
	}
	[Token(Token = "0x20005AB")]
	[AddComponentMenu("I2/Localization/SetLanguage Dropdown")]
	public class SetLanguageDropdown : MonoBehaviour
	{
		[Token(Token = "0x60027DA")]
		[Address(RVA = "0x1292264", Offset = "0x1292264", VA = "0x1292264")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60027DB")]
		[Address(RVA = "0x12924BC", Offset = "0x12924BC", VA = "0x12924BC")]
		private void OnValueChanged(int index)
		{
		}

		[Token(Token = "0x60027DC")]
		[Address(RVA = "0x12925A8", Offset = "0x12925A8", VA = "0x12925A8")]
		public SetLanguageDropdown()
		{
		}
	}
	[Token(Token = "0x20005AC")]
	public class StringObfucator
	{
		[Token(Token = "0x4002303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static char[] StringObfuscatorPassword;

		[Token(Token = "0x60027DD")]
		[Address(RVA = "0x12925B0", Offset = "0x12925B0", VA = "0x12925B0")]
		public static string Encode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x60027DE")]
		[Address(RVA = "0x12928A4", Offset = "0x12928A4", VA = "0x12928A4")]
		public static string Decode(string ObfucatedString)
		{
			return null;
		}

		[Token(Token = "0x60027DF")]
		[Address(RVA = "0x1292820", Offset = "0x1292820", VA = "0x1292820")]
		private static string ToBase64(string regularString)
		{
			return null;
		}

		[Token(Token = "0x60027E0")]
		[Address(RVA = "0x129297C", Offset = "0x129297C", VA = "0x129297C")]
		private static string FromBase64(string base64string)
		{
			return null;
		}

		[Token(Token = "0x60027E1")]
		[Address(RVA = "0x1292688", Offset = "0x1292688", VA = "0x1292688")]
		private static string XoREncode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x60027E2")]
		[Address(RVA = "0x1292A08", Offset = "0x1292A08", VA = "0x1292A08")]
		public StringObfucator()
		{
		}
	}
}
namespace I2.Loc.SimpleJSON
{
	[Token(Token = "0x20005AD")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x4002305")]
		Array = 1,
		[Token(Token = "0x4002306")]
		Class,
		[Token(Token = "0x4002307")]
		Value,
		[Token(Token = "0x4002308")]
		IntValue,
		[Token(Token = "0x4002309")]
		DoubleValue,
		[Token(Token = "0x400230A")]
		BoolValue,
		[Token(Token = "0x400230B")]
		FloatValue
	}
	[Token(Token = "0x20005AE")]
	public class JSONNode
	{
		[Token(Token = "0x20005AF")]
		[CompilerGenerated]
		private sealed class <get_Childs>d__17 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400230C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400230D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x400230E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x17000442")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002818")]
				[Address(RVA = "0x1294B48", Offset = "0x1294B48", VA = "0x1294B48", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000443")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600281A")]
				[Address(RVA = "0x1294B90", Offset = "0x1294B90", VA = "0x1294B90", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002815")]
			[Address(RVA = "0x1292BDC", Offset = "0x1292BDC", VA = "0x1292BDC")]
			[DebuggerHidden]
			public <get_Childs>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6002816")]
			[Address(RVA = "0x1294B2C", Offset = "0x1294B2C", VA = "0x1294B2C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002817")]
			[Address(RVA = "0x1294B30", Offset = "0x1294B30", VA = "0x1294B30", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002819")]
			[Address(RVA = "0x1294B50", Offset = "0x1294B50", VA = "0x1294B50", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600281B")]
			[Address(RVA = "0x1294B98", Offset = "0x1294B98", VA = "0x1294B98", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600281C")]
			[Address(RVA = "0x1294C30", Offset = "0x1294C30", VA = "0x1294C30", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20005B0")]
		[CompilerGenerated]
		private sealed class <get_DeepChilds>d__19 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400230F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002310")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002311")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4002312")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONNode <>4__this;

			[Token(Token = "0x4002313")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x4002314")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x17000444")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002822")]
				[Address(RVA = "0x129529C", Offset = "0x129529C", VA = "0x129529C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000445")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002824")]
				[Address(RVA = "0x12952E4", Offset = "0x12952E4", VA = "0x12952E4", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600281D")]
			[Address(RVA = "0x1292C94", Offset = "0x1292C94", VA = "0x1292C94")]
			[DebuggerHidden]
			public <get_DeepChilds>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x600281E")]
			[Address(RVA = "0x1294C34", Offset = "0x1294C34", VA = "0x1294C34", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600281F")]
			[Address(RVA = "0x1294CEC", Offset = "0x1294CEC", VA = "0x1294CEC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002820")]
			[Address(RVA = "0x12951EC", Offset = "0x12951EC", VA = "0x12951EC")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002821")]
			[Address(RVA = "0x129513C", Offset = "0x129513C", VA = "0x129513C")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6002823")]
			[Address(RVA = "0x12952A4", Offset = "0x12952A4", VA = "0x12952A4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002825")]
			[Address(RVA = "0x12952EC", Offset = "0x12952EC", VA = "0x12952EC", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002826")]
			[Address(RVA = "0x1295398", Offset = "0x1295398", VA = "0x1295398", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x17000436")]
		public virtual JSONNode this[int aIndex]
		{
			[Token(Token = "0x60027E5")]
			[Address(RVA = "0x1292A90", Offset = "0x1292A90", VA = "0x1292A90", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027E6")]
			[Address(RVA = "0x1292A98", Offset = "0x1292A98", VA = "0x1292A98", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000437")]
		public virtual JSONNode this[string aKey]
		{
			[Token(Token = "0x60027E7")]
			[Address(RVA = "0x1292A9C", Offset = "0x1292A9C", VA = "0x1292A9C", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027E8")]
			[Address(RVA = "0x1292AA4", Offset = "0x1292AA4", VA = "0x1292AA4", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000438")]
		public virtual string Value
		{
			[Token(Token = "0x60027E9")]
			[Address(RVA = "0x1292AA8", Offset = "0x1292AA8", VA = "0x1292AA8", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x60027EA")]
			[Address(RVA = "0x1292AE8", Offset = "0x1292AE8", VA = "0x1292AE8", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000439")]
		public virtual int Count
		{
			[Token(Token = "0x60027EB")]
			[Address(RVA = "0x1292AEC", Offset = "0x1292AEC", VA = "0x1292AEC", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700043A")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x60027F0")]
			[Address(RVA = "0x1292B6C", Offset = "0x1292B6C", VA = "0x1292B6C", Slot = "16")]
			[IteratorStateMachine(typeof(<get_Childs>d__17))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700043B")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x60027F1")]
			[Address(RVA = "0x1292C10", Offset = "0x1292C10", VA = "0x1292C10")]
			[IteratorStateMachine(typeof(<get_DeepChilds>d__19))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700043C")]
		public virtual int AsInt
		{
			[Token(Token = "0x60027F4")]
			[Address(RVA = "0x1292D48", Offset = "0x1292D48", VA = "0x1292D48", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60027F5")]
			[Address(RVA = "0x1292D7C", Offset = "0x1292D7C", VA = "0x1292D7C", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700043D")]
		public virtual float AsFloat
		{
			[Token(Token = "0x60027F6")]
			[Address(RVA = "0x1292DB8", Offset = "0x1292DB8", VA = "0x1292DB8", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60027F7")]
			[Address(RVA = "0x1292DF0", Offset = "0x1292DF0", VA = "0x1292DF0", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700043E")]
		public virtual double AsDouble
		{
			[Token(Token = "0x60027F8")]
			[Address(RVA = "0x1292E2C", Offset = "0x1292E2C", VA = "0x1292E2C", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60027F9")]
			[Address(RVA = "0x1292E64", Offset = "0x1292E64", VA = "0x1292E64", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700043F")]
		public virtual bool AsBool
		{
			[Token(Token = "0x60027FA")]
			[Address(RVA = "0x1292EA0", Offset = "0x1292EA0", VA = "0x1292EA0", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60027FB")]
			[Address(RVA = "0x1292F58", Offset = "0x1292F58", VA = "0x1292F58", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x17000440")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x60027FC")]
			[Address(RVA = "0x1292FD0", Offset = "0x1292FD0", VA = "0x1292FD0", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000441")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x60027FD")]
			[Address(RVA = "0x1293048", Offset = "0x1293048", VA = "0x1293048", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60027E4")]
		[Address(RVA = "0x1292A8C", Offset = "0x1292A8C", VA = "0x1292A8C", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60027EC")]
		[Address(RVA = "0x1292AF4", Offset = "0x1292AF4", VA = "0x1292AF4", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x60027ED")]
		[Address(RVA = "0x1292B54", Offset = "0x1292B54", VA = "0x1292B54", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x60027EE")]
		[Address(RVA = "0x1292B5C", Offset = "0x1292B5C", VA = "0x1292B5C", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x60027EF")]
		[Address(RVA = "0x1292B64", Offset = "0x1292B64", VA = "0x1292B64", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x60027F2")]
		[Address(RVA = "0x1292CC8", Offset = "0x1292CC8", VA = "0x1292CC8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60027F3")]
		[Address(RVA = "0x1292D08", Offset = "0x1292D08", VA = "0x1292D08", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x60027FE")]
		[Address(RVA = "0x12930C0", Offset = "0x12930C0", VA = "0x12930C0")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x60027FF")]
		[Address(RVA = "0x1293160", Offset = "0x1293160", VA = "0x1293160")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6002800")]
		[Address(RVA = "0x129319C", Offset = "0x129319C", VA = "0x129319C")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002801")]
		[Address(RVA = "0x1293224", Offset = "0x1293224", VA = "0x1293224")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002802")]
		[Address(RVA = "0x129323C", Offset = "0x129323C", VA = "0x129323C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002803")]
		[Address(RVA = "0x1293248", Offset = "0x1293248", VA = "0x1293248", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002804")]
		[Address(RVA = "0x1293250", Offset = "0x1293250", VA = "0x1293250")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6002805")]
		[Address(RVA = "0x129341C", Offset = "0x129341C", VA = "0x129341C")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6002806")]
		[Address(RVA = "0x1293CB4", Offset = "0x1293CB4", VA = "0x1293CB4", Slot = "28")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6002807")]
		[Address(RVA = "0x1293CB8", Offset = "0x1293CB8", VA = "0x1293CB8")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x6002808")]
		[Address(RVA = "0x1293D38", Offset = "0x1293D38", VA = "0x1293D38")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x6002809")]
		[Address(RVA = "0x1293D88", Offset = "0x1293D88", VA = "0x1293D88")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x600280A")]
		[Address(RVA = "0x1293DD8", Offset = "0x1293DD8", VA = "0x1293DD8")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x600280B")]
		[Address(RVA = "0x1293E28", Offset = "0x1293E28", VA = "0x1293E28")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x600280C")]
		[Address(RVA = "0x1293FF8", Offset = "0x1293FF8", VA = "0x1293FF8")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x600280D")]
		[Address(RVA = "0x12941F8", Offset = "0x12941F8", VA = "0x12941F8")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x600280E")]
		[Address(RVA = "0x1294670", Offset = "0x1294670", VA = "0x1294670")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x600280F")]
		[Address(RVA = "0x12946C0", Offset = "0x12946C0", VA = "0x12946C0")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6002810")]
		[Address(RVA = "0x1294710", Offset = "0x1294710", VA = "0x1294710")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6002811")]
		[Address(RVA = "0x1294760", Offset = "0x1294760", VA = "0x1294760")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6002812")]
		[Address(RVA = "0x12948F4", Offset = "0x12948F4", VA = "0x12948F4")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6002813")]
		[Address(RVA = "0x1294A70", Offset = "0x1294A70", VA = "0x1294A70")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6002814")]
		[Address(RVA = "0x1294B24", Offset = "0x1294B24", VA = "0x1294B24")]
		public JSONNode()
		{
		}
	}
	[Token(Token = "0x20005B1")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x20005B2")]
		[CompilerGenerated]
		private sealed class <get_Childs>d__13 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002316")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002317")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002318")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4002319")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONArray <>4__this;

			[Token(Token = "0x400231A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x1700044A")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002839")]
				[Address(RVA = "0x1296194", Offset = "0x1296194", VA = "0x1296194", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700044B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600283B")]
				[Address(RVA = "0x12961DC", Offset = "0x12961DC", VA = "0x12961DC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002835")]
			[Address(RVA = "0x129593C", Offset = "0x129593C", VA = "0x129593C")]
			[DebuggerHidden]
			public <get_Childs>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002836")]
			[Address(RVA = "0x1295F80", Offset = "0x1295F80", VA = "0x1295F80", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002837")]
			[Address(RVA = "0x1295F9C", Offset = "0x1295F9C", VA = "0x1295F9C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002838")]
			[Address(RVA = "0x1296144", Offset = "0x1296144", VA = "0x1296144")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600283A")]
			[Address(RVA = "0x129619C", Offset = "0x129619C", VA = "0x129619C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600283C")]
			[Address(RVA = "0x12961E4", Offset = "0x12961E4", VA = "0x12961E4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600283D")]
			[Address(RVA = "0x1296290", Offset = "0x1296290", VA = "0x1296290", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20005B3")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400231B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400231C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400231D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONArray <>4__this;

			[Token(Token = "0x400231E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x1700044C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002842")]
				[Address(RVA = "0x12964A8", Offset = "0x12964A8", VA = "0x12964A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700044D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002844")]
				[Address(RVA = "0x12964F0", Offset = "0x12964F0", VA = "0x12964F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600283E")]
			[Address(RVA = "0x12959E4", Offset = "0x12959E4", VA = "0x12959E4")]
			[DebuggerHidden]
			public <GetEnumerator>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x600283F")]
			[Address(RVA = "0x1296294", Offset = "0x1296294", VA = "0x1296294", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002840")]
			[Address(RVA = "0x12962B0", Offset = "0x12962B0", VA = "0x12962B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002841")]
			[Address(RVA = "0x1296458", Offset = "0x1296458", VA = "0x1296458")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002843")]
			[Address(RVA = "0x12964B0", Offset = "0x12964B0", VA = "0x12964B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x17000446")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x6002827")]
			[Address(RVA = "0x129539C", Offset = "0x129539C", VA = "0x129539C", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002828")]
			[Address(RVA = "0x129548C", Offset = "0x129548C", VA = "0x129548C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000447")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x6002829")]
			[Address(RVA = "0x129559C", Offset = "0x129559C", VA = "0x129559C", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x600282A")]
			[Address(RVA = "0x12955FC", Offset = "0x12955FC", VA = "0x12955FC", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000448")]
		public override int Count
		{
			[Token(Token = "0x600282B")]
			[Address(RVA = "0x12956AC", Offset = "0x12956AC", VA = "0x12956AC", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000449")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x600282F")]
			[Address(RVA = "0x12958B8", Offset = "0x12958B8", VA = "0x12958B8", Slot = "16")]
			[IteratorStateMachine(typeof(<get_Childs>d__13))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600282C")]
		[Address(RVA = "0x12956F4", Offset = "0x12956F4", VA = "0x12956F4", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x600282D")]
		[Address(RVA = "0x12957A4", Offset = "0x12957A4", VA = "0x12957A4", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x600282E")]
		[Address(RVA = "0x1295858", Offset = "0x1295858", VA = "0x1295858", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6002830")]
		[Address(RVA = "0x1295970", Offset = "0x1295970", VA = "0x1295970", Slot = "29")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__14))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002831")]
		[Address(RVA = "0x1295A0C", Offset = "0x1295A0C", VA = "0x1295A0C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002832")]
		[Address(RVA = "0x1295C24", Offset = "0x1295C24", VA = "0x1295C24", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6002833")]
		[Address(RVA = "0x1295EA4", Offset = "0x1295EA4", VA = "0x1295EA4", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6002834")]
		[Address(RVA = "0x1293C2C", Offset = "0x1293C2C", VA = "0x1293C2C")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x20005B4")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x20005B6")]
		[CompilerGenerated]
		private sealed class <get_Childs>d__14 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002321")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002322")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002323")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4002324")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONClass <>4__this;

			[Token(Token = "0x4002325")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000452")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x600285A")]
				[Address(RVA = "0x1297BF8", Offset = "0x1297BF8", VA = "0x1297BF8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000453")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600285C")]
				[Address(RVA = "0x1297C40", Offset = "0x1297C40", VA = "0x1297C40", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002856")]
			[Address(RVA = "0x1296DA8", Offset = "0x1296DA8", VA = "0x1296DA8")]
			[DebuggerHidden]
			public <get_Childs>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002857")]
			[Address(RVA = "0x12979D0", Offset = "0x12979D0", VA = "0x12979D0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002858")]
			[Address(RVA = "0x12979EC", Offset = "0x12979EC", VA = "0x12979EC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002859")]
			[Address(RVA = "0x1297BA8", Offset = "0x1297BA8", VA = "0x1297BA8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600285B")]
			[Address(RVA = "0x1297C00", Offset = "0x1297C00", VA = "0x1297C00", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600285D")]
			[Address(RVA = "0x1297C48", Offset = "0x1297C48", VA = "0x1297C48", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600285E")]
			[Address(RVA = "0x1297CF4", Offset = "0x1297CF4", VA = "0x1297CF4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20005B7")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002326")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002327")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002328")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONClass <>4__this;

			[Token(Token = "0x4002329")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000454")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002863")]
				[Address(RVA = "0x1297F48", Offset = "0x1297F48", VA = "0x1297F48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000455")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002865")]
				[Address(RVA = "0x1297F90", Offset = "0x1297F90", VA = "0x1297F90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600285F")]
			[Address(RVA = "0x1296E50", Offset = "0x1296E50", VA = "0x1296E50")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002860")]
			[Address(RVA = "0x1297CF8", Offset = "0x1297CF8", VA = "0x1297CF8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002861")]
			[Address(RVA = "0x1297D14", Offset = "0x1297D14", VA = "0x1297D14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002862")]
			[Address(RVA = "0x1297EF8", Offset = "0x1297EF8", VA = "0x1297EF8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002864")]
			[Address(RVA = "0x1297F50", Offset = "0x1297F50", VA = "0x1297F50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400231F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x1700044E")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x6002845")]
			[Address(RVA = "0x12964F8", Offset = "0x12964F8", VA = "0x12964F8", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002846")]
			[Address(RVA = "0x1296600", Offset = "0x1296600", VA = "0x1296600", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700044F")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x6002847")]
			[Address(RVA = "0x12966CC", Offset = "0x12966CC", VA = "0x12966CC", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002848")]
			[Address(RVA = "0x129676C", Offset = "0x129676C", VA = "0x129676C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000450")]
		public override int Count
		{
			[Token(Token = "0x6002849")]
			[Address(RVA = "0x1296848", Offset = "0x1296848", VA = "0x1296848", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000451")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x600284E")]
			[Address(RVA = "0x1296D24", Offset = "0x1296D24", VA = "0x1296D24", Slot = "16")]
			[IteratorStateMachine(typeof(<get_Childs>d__14))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600284A")]
		[Address(RVA = "0x1296898", Offset = "0x1296898", VA = "0x1296898", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x600284B")]
		[Address(RVA = "0x12969AC", Offset = "0x12969AC", VA = "0x12969AC", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x600284C")]
		[Address(RVA = "0x1296A70", Offset = "0x1296A70", VA = "0x1296A70", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x600284D")]
		[Address(RVA = "0x1296B4C", Offset = "0x1296B4C", VA = "0x1296B4C", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x600284F")]
		[Address(RVA = "0x1296DDC", Offset = "0x1296DDC", VA = "0x1296DDC", Slot = "29")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__15))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002850")]
		[Address(RVA = "0x1296E78", Offset = "0x1296E78", VA = "0x1296E78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002851")]
		[Address(RVA = "0x12972A8", Offset = "0x12972A8", VA = "0x12972A8", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6002852")]
		[Address(RVA = "0x129776C", Offset = "0x129776C", VA = "0x129776C", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6002853")]
		[Address(RVA = "0x1293B38", Offset = "0x1293B38", VA = "0x1293B38")]
		public JSONClass()
		{
		}
	}
	[Token(Token = "0x20005B8")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x400232A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x17000456")]
		public override string Value
		{
			[Token(Token = "0x6002866")]
			[Address(RVA = "0x1297F98", Offset = "0x1297F98", VA = "0x1297F98", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002867")]
			[Address(RVA = "0x1297FA0", Offset = "0x1297FA0", VA = "0x1297FA0", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6002868")]
		[Address(RVA = "0x1293130", Offset = "0x1293130", VA = "0x1293130")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x6002869")]
		[Address(RVA = "0x1294638", Offset = "0x1294638", VA = "0x1294638")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x600286A")]
		[Address(RVA = "0x12945C8", Offset = "0x12945C8", VA = "0x12945C8")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x600286B")]
		[Address(RVA = "0x1294600", Offset = "0x1294600", VA = "0x1294600")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x600286C")]
		[Address(RVA = "0x1294590", Offset = "0x1294590", VA = "0x1294590")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x600286D")]
		[Address(RVA = "0x1297FA8", Offset = "0x1297FA8", VA = "0x1297FA8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600286E")]
		[Address(RVA = "0x1298000", Offset = "0x1298000", VA = "0x1298000", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x600286F")]
		[Address(RVA = "0x1298058", Offset = "0x1298058", VA = "0x1298058", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x20005B9")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x400232B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x400232C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x17000457")]
		public override JSONNode this[int aIndex]
		{
			[Token(Token = "0x6002873")]
			[Address(RVA = "0x1298388", Offset = "0x1298388", VA = "0x1298388", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002874")]
			[Address(RVA = "0x12983E8", Offset = "0x12983E8", VA = "0x12983E8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000458")]
		public override JSONNode this[string aKey]
		{
			[Token(Token = "0x6002875")]
			[Address(RVA = "0x1298468", Offset = "0x1298468", VA = "0x1298468", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002876")]
			[Address(RVA = "0x12984D8", Offset = "0x12984D8", VA = "0x12984D8", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000459")]
		public override int AsInt
		{
			[Token(Token = "0x600287F")]
			[Address(RVA = "0x1298738", Offset = "0x1298738", VA = "0x1298738", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002880")]
			[Address(RVA = "0x12987BC", Offset = "0x12987BC", VA = "0x12987BC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700045A")]
		public override float AsFloat
		{
			[Token(Token = "0x6002881")]
			[Address(RVA = "0x1298844", Offset = "0x1298844", VA = "0x1298844", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002882")]
			[Address(RVA = "0x12988C8", Offset = "0x12988C8", VA = "0x12988C8", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700045B")]
		public override double AsDouble
		{
			[Token(Token = "0x6002883")]
			[Address(RVA = "0x1298950", Offset = "0x1298950", VA = "0x1298950", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002884")]
			[Address(RVA = "0x12989D4", Offset = "0x12989D4", VA = "0x12989D4", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700045C")]
		public override bool AsBool
		{
			[Token(Token = "0x6002885")]
			[Address(RVA = "0x1298A5C", Offset = "0x1298A5C", VA = "0x1298A5C", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002886")]
			[Address(RVA = "0x1298AE0", Offset = "0x1298AE0", VA = "0x1298AE0", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700045D")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6002887")]
			[Address(RVA = "0x1298B68", Offset = "0x1298B68", VA = "0x1298B68", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045E")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x6002888")]
			[Address(RVA = "0x1298BD0", Offset = "0x1298BD0", VA = "0x1298BD0", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002870")]
		[Address(RVA = "0x129544C", Offset = "0x129544C", VA = "0x129544C")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x6002871")]
		[Address(RVA = "0x12965BC", Offset = "0x12965BC", VA = "0x12965BC")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x6002872")]
		[Address(RVA = "0x1298328", Offset = "0x1298328", VA = "0x1298328")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6002877")]
		[Address(RVA = "0x1298560", Offset = "0x1298560", VA = "0x1298560", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6002878")]
		[Address(RVA = "0x12985E0", Offset = "0x12985E0", VA = "0x12985E0", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6002879")]
		[Address(RVA = "0x1298668", Offset = "0x1298668", VA = "0x1298668")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600287A")]
		[Address(RVA = "0x1298680", Offset = "0x1298680", VA = "0x1298680")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600287B")]
		[Address(RVA = "0x1298698", Offset = "0x1298698", VA = "0x1298698", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600287C")]
		[Address(RVA = "0x12986B0", Offset = "0x12986B0", VA = "0x12986B0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600287D")]
		[Address(RVA = "0x12986B8", Offset = "0x12986B8", VA = "0x12986B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600287E")]
		[Address(RVA = "0x12986F8", Offset = "0x12986F8", VA = "0x12986F8", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x20005BA")]
	public static class JSON
	{
		[Token(Token = "0x6002889")]
		[Address(RVA = "0x1298C38", Offset = "0x1298C38", VA = "0x1298C38")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace HurricaneVR.TechDemo.Scripts
{
	[Token(Token = "0x20005BB")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class DemoDummyArm : MonoBehaviour
	{
		[Token(Token = "0x400232D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Anchor;

		[Token(Token = "0x400232E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Length;

		[Token(Token = "0x400232F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LineRenderer Rope;

		[Token(Token = "0x4002330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ArmRopeAnchor;

		[Token(Token = "0x600288A")]
		[Address(RVA = "0x1298C3C", Offset = "0x1298C3C", VA = "0x1298C3C")]
		private void Start()
		{
		}

		[Token(Token = "0x600288B")]
		[Address(RVA = "0x1298D04", Offset = "0x1298D04", VA = "0x1298D04")]
		private void Update()
		{
		}

		[Token(Token = "0x600288C")]
		[Address(RVA = "0x1298D6C", Offset = "0x1298D6C", VA = "0x1298D6C")]
		public DemoDummyArm()
		{
		}
	}
	[Token(Token = "0x20005BC")]
	public class DemoGlassRotate : MonoBehaviour
	{
		[Token(Token = "0x4002331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Timer;

		[Token(Token = "0x4002332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Degrees;

		[Token(Token = "0x4002333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Unlocked;

		[Token(Token = "0x4002334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool DoneRotating;

		[Token(Token = "0x4002335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SFXOpen;

		[Token(Token = "0x4002336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _elapsed;

		[Token(Token = "0x600288D")]
		[Address(RVA = "0x1298D7C", Offset = "0x1298D7C", VA = "0x1298D7C")]
		private void Start()
		{
		}

		[Token(Token = "0x600288E")]
		[Address(RVA = "0x1298D80", Offset = "0x1298D80", VA = "0x1298D80")]
		private void Update()
		{
		}

		[Token(Token = "0x600288F")]
		[Address(RVA = "0x1298EDC", Offset = "0x1298EDC", VA = "0x1298EDC")]
		public void Unlock()
		{
		}

		[Token(Token = "0x6002890")]
		[Address(RVA = "0x1298F6C", Offset = "0x1298F6C", VA = "0x1298F6C")]
		public DemoGlassRotate()
		{
		}
	}
	[Token(Token = "0x20005BD")]
	public class DemoHatchDoor : MonoBehaviour
	{
		[Token(Token = "0x4002337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Timer;

		[Token(Token = "0x4002338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Degrees;

		[Token(Token = "0x4002339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Unlocked;

		[Token(Token = "0x400233A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool DoneRotating;

		[Token(Token = "0x400233B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SFXOpen;

		[Token(Token = "0x400233C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _elapsed;

		[Token(Token = "0x6002891")]
		[Address(RVA = "0x1298F80", Offset = "0x1298F80", VA = "0x1298F80")]
		private void Update()
		{
		}

		[Token(Token = "0x6002892")]
		[Address(RVA = "0x12990DC", Offset = "0x12990DC", VA = "0x12990DC")]
		public void Unlock()
		{
		}

		[Token(Token = "0x6002893")]
		[Address(RVA = "0x129916C", Offset = "0x129916C", VA = "0x129916C")]
		public DemoHatchDoor()
		{
		}
	}
	[Token(Token = "0x20005BE")]
	public class DemoHeavyDoor : MonoBehaviour
	{
		[Token(Token = "0x400233D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody DoorRigidbody;

		[Token(Token = "0x400233E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRRotationTracker ValveTracker;

		[Token(Token = "0x400233F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HVRRotationLimiter Limiter;

		[Token(Token = "0x4002340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MaxAngle;

		[Token(Token = "0x4002341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip[] SFX;

		[Token(Token = "0x4002342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float SFXAngle;

		[Token(Token = "0x4002343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Angle;

		[Token(Token = "0x6002894")]
		[Address(RVA = "0x1299180", Offset = "0x1299180", VA = "0x1299180")]
		private void Start()
		{
		}

		[Token(Token = "0x6002895")]
		[Address(RVA = "0x1299184", Offset = "0x1299184", VA = "0x1299184")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002896")]
		[Address(RVA = "0x12992DC", Offset = "0x12992DC", VA = "0x12992DC")]
		public DemoHeavyDoor()
		{
		}
	}
	[Token(Token = "0x20005BF")]
	public class DemoKeyHologram : MonoBehaviour
	{
		[Token(Token = "0x4002344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Interval;

		[Token(Token = "0x4002345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LastMove;

		[Token(Token = "0x4002346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Vector3> Positions;

		[Token(Token = "0x4002347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Index;

		[Token(Token = "0x6002897")]
		[Address(RVA = "0x12992F4", Offset = "0x12992F4", VA = "0x12992F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002898")]
		[Address(RVA = "0x12992F8", Offset = "0x12992F8", VA = "0x12992F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002899")]
		[Address(RVA = "0x12993E8", Offset = "0x12993E8", VA = "0x12993E8")]
		public void Destroy()
		{
		}

		[Token(Token = "0x600289A")]
		[Address(RVA = "0x1299454", Offset = "0x1299454", VA = "0x1299454")]
		public DemoKeyHologram()
		{
		}
	}
	[Token(Token = "0x20005C0")]
	public class DemoKeypad : MonoBehaviour
	{
		[Token(Token = "0x4002348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent Unlocked;

		[Token(Token = "0x4002349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Code;

		[Token(Token = "0x400234A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshPro Display;

		[Token(Token = "0x400234B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Entry;

		[Token(Token = "0x400234C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ForceUnlock;

		[Token(Token = "0x400234D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool _unlocked;

		[Token(Token = "0x1700045F")]
		public int Index
		{
			[Token(Token = "0x600289B")]
			[Address(RVA = "0x12994E8", Offset = "0x12994E8", VA = "0x12994E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000460")]
		public int MaxLength
		{
			[Token(Token = "0x600289C")]
			[Address(RVA = "0x1299500", Offset = "0x1299500", VA = "0x1299500")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600289D")]
		[Address(RVA = "0x1299518", Offset = "0x1299518", VA = "0x1299518", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600289E")]
		[Address(RVA = "0x1299848", Offset = "0x1299848", VA = "0x1299848", Slot = "5")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x600289F")]
		[Address(RVA = "0x1299864", Offset = "0x1299864", VA = "0x1299864", Slot = "6")]
		protected virtual void OnButtonDown(HVRPhysicsButton button)
		{
		}

		[Token(Token = "0x60028A0")]
		[Address(RVA = "0x1299A3C", Offset = "0x1299A3C", VA = "0x1299A3C", Slot = "7")]
		protected virtual void Unlock()
		{
		}

		[Token(Token = "0x60028A1")]
		[Address(RVA = "0x1299ACC", Offset = "0x1299ACC", VA = "0x1299ACC")]
		public DemoKeypad()
		{
		}
	}
	[Token(Token = "0x20005C1")]
	public class DemoKeypadButton : HVRPhysicsButton
	{
		[Token(Token = "0x400234E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public char Key;

		[Token(Token = "0x400234F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshPro TextMeshPro;

		[Token(Token = "0x60028A2")]
		[Address(RVA = "0x1299B64", Offset = "0x1299B64", VA = "0x1299B64", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60028A3")]
		[Address(RVA = "0x1299BE4", Offset = "0x1299BE4", VA = "0x1299BE4")]
		public DemoKeypadButton()
		{
		}
	}
	[Token(Token = "0x20005C2")]
	[RequireComponent(typeof(DemoPassthroughSocket))]
	public class DemoLock : MonoBehaviour
	{
		[Token(Token = "0x20005C3")]
		[CompilerGenerated]
		private sealed class <MoveKey>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400235A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400235B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400235C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HVRGrabbable key;

			[Token(Token = "0x400235D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DemoLock <>4__this;

			[Token(Token = "0x400235E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <start>5__2;

			[Token(Token = "0x400235F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Quaternion <startRot>5__3;

			[Token(Token = "0x4002360")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <elapsed>5__4;

			[Token(Token = "0x17000461")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60028AC")]
				[Address(RVA = "0x129A2D8", Offset = "0x129A2D8", VA = "0x129A2D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000462")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60028AE")]
				[Address(RVA = "0x129A320", Offset = "0x129A320", VA = "0x129A320", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60028A9")]
			[Address(RVA = "0x1299F38", Offset = "0x1299F38", VA = "0x1299F38")]
			[DebuggerHidden]
			public <MoveKey>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60028AA")]
			[Address(RVA = "0x1299FE4", Offset = "0x1299FE4", VA = "0x1299FE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60028AB")]
			[Address(RVA = "0x1299FE8", Offset = "0x1299FE8", VA = "0x1299FE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60028AD")]
			[Address(RVA = "0x129A2E0", Offset = "0x129A2E0", VA = "0x129A2E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DemoPassthroughSocket Socket;

		[Token(Token = "0x4002351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRGrabbable FaceGrabbable;

		[Token(Token = "0x4002352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject Face;

		[Token(Token = "0x4002353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform Key;

		[Token(Token = "0x4002354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float AnimationTime;

		[Token(Token = "0x4002355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip SFXUnlocked;

		[Token(Token = "0x4002356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip SFXKeyInserted;

		[Token(Token = "0x4002357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LockThreshold;

		[Token(Token = "0x4002358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent Unlocked;

		[Token(Token = "0x4002359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _unlocked;

		[Token(Token = "0x60028A4")]
		[Address(RVA = "0x1299BEC", Offset = "0x1299BEC", VA = "0x1299BEC")]
		public void Start()
		{
		}

		[Token(Token = "0x60028A5")]
		[Address(RVA = "0x1299CC8", Offset = "0x1299CC8", VA = "0x1299CC8")]
		public void Update()
		{
		}

		[Token(Token = "0x60028A6")]
		[Address(RVA = "0x1299E84", Offset = "0x1299E84", VA = "0x1299E84")]
		private void OnKeyGrabbed(HVRGrabberBase grabber, HVRGrabbable key)
		{
		}

		[Token(Token = "0x60028A7")]
		[Address(RVA = "0x1299EA8", Offset = "0x1299EA8", VA = "0x1299EA8")]
		[IteratorStateMachine(typeof(<MoveKey>d__13))]
		private IEnumerator MoveKey(HVRGrabbable key)
		{
			return null;
		}

		[Token(Token = "0x60028A8")]
		[Address(RVA = "0x1299F60", Offset = "0x1299F60", VA = "0x1299F60")]
		public DemoLock()
		{
		}
	}
	[Token(Token = "0x20005C4")]
	public class DemoPassthroughSocket : HVRSocket
	{
		[Token(Token = "0x60028AF")]
		[Address(RVA = "0x129A328", Offset = "0x129A328", VA = "0x129A328", Slot = "25")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60028B0")]
		[Address(RVA = "0x129A354", Offset = "0x129A354", VA = "0x129A354", Slot = "39")]
		protected override void OnGrabbed(HVRGrabArgs args)
		{
		}

		[Token(Token = "0x60028B1")]
		[Address(RVA = "0x129A408", Offset = "0x129A408", VA = "0x129A408")]
		public DemoPassthroughSocket()
		{
		}
	}
	[Token(Token = "0x20005C5")]
	public class DemoPowerUnit : MonoBehaviour
	{
		[Token(Token = "0x4002361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent PoweredUp;

		[Token(Token = "0x4002362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRSocket LeftSocket;

		[Token(Token = "0x4002363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HVRSocket RightSocket;

		[Token(Token = "0x4002364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshRenderer LeftLight;

		[Token(Token = "0x4002365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MeshRenderer RightLight;

		[Token(Token = "0x4002366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HVRRotationTracker LeverRotation;

		[Token(Token = "0x4002367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float RequiredAngle;

		[Token(Token = "0x4002368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip SFXPoweredOn;

		[Token(Token = "0x4002369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int RequiredCells;

		[Token(Token = "0x400236A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int SocketedCellCount;

		[Token(Token = "0x400236B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool Engaged;

		[Token(Token = "0x400236C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Material OnMaterial;

		[Token(Token = "0x17000463")]
		public bool IsPoweredUp
		{
			[Token(Token = "0x60028B2")]
			[Address(RVA = "0x129A410", Offset = "0x129A410", VA = "0x129A410")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60028B3")]
		[Address(RVA = "0x129A420", Offset = "0x129A420", VA = "0x129A420")]
		private void Start()
		{
		}

		[Token(Token = "0x60028B4")]
		[Address(RVA = "0x129A524", Offset = "0x129A524", VA = "0x129A524")]
		private void OnRightSocketGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60028B5")]
		[Address(RVA = "0x129A5B8", Offset = "0x129A5B8", VA = "0x129A5B8")]
		private void OnLeftSocketGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60028B6")]
		[Address(RVA = "0x129A64C", Offset = "0x129A64C", VA = "0x129A64C")]
		private void Update()
		{
		}

		[Token(Token = "0x60028B7")]
		[Address(RVA = "0x129A774", Offset = "0x129A774", VA = "0x129A774")]
		public DemoPowerUnit()
		{
		}
	}
	[Token(Token = "0x20005C6")]
	public enum SafeDialState
	{
		[Token(Token = "0x400236E")]
		CamOne,
		[Token(Token = "0x400236F")]
		CamTwo,
		[Token(Token = "0x4002370")]
		CamThree,
		[Token(Token = "0x4002371")]
		Unlocked
	}
	[Token(Token = "0x20005C7")]
	public class DemoSafeDial : HVRRotationTracker
	{
		[Token(Token = "0x4002372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshPro NumberLabel;

		[Token(Token = "0x4002373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshPro DebugLabel;

		[Token(Token = "0x4002374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool DisplayDebug;

		[Token(Token = "0x4002375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int First;

		[Token(Token = "0x4002376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int Second;

		[Token(Token = "0x4002377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int Third;

		[Token(Token = "0x4002378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int CurrentNumber;

		[Token(Token = "0x4002379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float CamDistance;

		[Token(Token = "0x400237A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float PreviousDistance;

		[Token(Token = "0x400237B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float Tolerance;

		[Token(Token = "0x400237C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float LowerBound;

		[Token(Token = "0x400237D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float UpperBound;

		[Token(Token = "0x400237E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public int AccuracyAllowance;

		[Token(Token = "0x400237F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UnityEvent Unlocked;

		[Token(Token = "0x4002380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SafeDialState _state;

		[Token(Token = "0x17000464")]
		public SafeDialState State
		{
			[Token(Token = "0x60028B8")]
			[Address(RVA = "0x129A7F8", Offset = "0x129A7F8", VA = "0x129A7F8")]
			get
			{
				return default(SafeDialState);
			}
			[Token(Token = "0x60028B9")]
			[Address(RVA = "0x129A800", Offset = "0x129A800", VA = "0x129A800")]
			set
			{
			}
		}

		[Token(Token = "0x17000465")]
		public int NumberOfRotations
		{
			[Token(Token = "0x60028BA")]
			[Address(RVA = "0x129A8B8", Offset = "0x129A8B8", VA = "0x129A8B8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000466")]
		public bool IsFirstInRange
		{
			[Token(Token = "0x60028BE")]
			[Address(RVA = "0x129ACCC", Offset = "0x129ACCC", VA = "0x129ACCC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000467")]
		public bool IsSecondInRange
		{
			[Token(Token = "0x60028BF")]
			[Address(RVA = "0x129ACF8", Offset = "0x129ACF8", VA = "0x129ACF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000468")]
		public bool IsThirdInRange
		{
			[Token(Token = "0x60028C0")]
			[Address(RVA = "0x129AD24", Offset = "0x129AD24", VA = "0x129AD24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60028BB")]
		[Address(RVA = "0x129A8F8", Offset = "0x129A8F8", VA = "0x129A8F8", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60028BC")]
		[Address(RVA = "0x129A808", Offset = "0x129A808", VA = "0x129A808")]
		private void ComputeBounds()
		{
		}

		[Token(Token = "0x60028BD")]
		[Address(RVA = "0x129ACC4", Offset = "0x129ACC4", VA = "0x129ACC4", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60028C1")]
		[Address(RVA = "0x129ACA8", Offset = "0x129ACA8", VA = "0x129ACA8")]
		public void ResetLockState(SafeDialState state)
		{
		}

		[Token(Token = "0x60028C2")]
		[Address(RVA = "0x129AD4C", Offset = "0x129AD4C", VA = "0x129AD4C", Slot = "6")]
		protected override void OnStepChanged(int step, bool raiseEvents)
		{
		}

		[Token(Token = "0x60028C3")]
		[Address(RVA = "0x129B16C", Offset = "0x129B16C", VA = "0x129B16C", Slot = "7")]
		protected override void OnAngleChanged(float angle, float delta)
		{
		}

		[Token(Token = "0x60028C4")]
		[Address(RVA = "0x129B2EC", Offset = "0x129B2EC", VA = "0x129B2EC")]
		public DemoSafeDial()
		{
		}
	}
	[Token(Token = "0x20005C8")]
	public class DemoSafeDoor : MonoBehaviour
	{
		[Token(Token = "0x60028C5")]
		[Address(RVA = "0x129B380", Offset = "0x129B380", VA = "0x129B380")]
		public DemoSafeDoor()
		{
		}
	}
	[Token(Token = "0x20005C9")]
	public class DemoSlidingDoor : MonoBehaviour
	{
		[Token(Token = "0x20005CA")]
		[CompilerGenerated]
		private sealed class <OpenDoorRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400238A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400238B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400238C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DemoSlidingDoor <>4__this;

			[Token(Token = "0x400238D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <elapsed>5__2;

			[Token(Token = "0x400238E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <LockRotateSpeed>5__3;

			[Token(Token = "0x400238F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <time>5__4;

			[Token(Token = "0x17000469")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60028CD")]
				[Address(RVA = "0x129B9F4", Offset = "0x129B9F4", VA = "0x129B9F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700046A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60028CF")]
				[Address(RVA = "0x129BA3C", Offset = "0x129BA3C", VA = "0x129BA3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60028CA")]
			[Address(RVA = "0x129B4AC", Offset = "0x129B4AC", VA = "0x129B4AC")]
			[DebuggerHidden]
			public <OpenDoorRoutine>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60028CB")]
			[Address(RVA = "0x129B4E8", Offset = "0x129B4E8", VA = "0x129B4E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60028CC")]
			[Address(RVA = "0x129B4EC", Offset = "0x129B4EC", VA = "0x129B4EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60028CE")]
			[Address(RVA = "0x129B9FC", Offset = "0x129B9FC", VA = "0x129B9FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody LeftDoor;

		[Token(Token = "0x4002382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody RightDoor;

		[Token(Token = "0x4002383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Lock;

		[Token(Token = "0x4002384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LockRotateTime;

		[Token(Token = "0x4002385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LockRotateAngles;

		[Token(Token = "0x4002386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float OpenOffset;

		[Token(Token = "0x4002387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Speed;

		[Token(Token = "0x4002388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip OpenedClip;

		[Token(Token = "0x4002389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _opened;

		[Token(Token = "0x60028C6")]
		[Address(RVA = "0x129B388", Offset = "0x129B388", VA = "0x129B388")]
		public void Start()
		{
		}

		[Token(Token = "0x60028C7")]
		[Address(RVA = "0x129B38C", Offset = "0x129B38C", VA = "0x129B38C")]
		public void OpenDoors()
		{
		}

		[Token(Token = "0x60028C8")]
		[Address(RVA = "0x129B438", Offset = "0x129B438", VA = "0x129B438")]
		[IteratorStateMachine(typeof(<OpenDoorRoutine>d__11))]
		private IEnumerator OpenDoorRoutine()
		{
			return null;
		}

		[Token(Token = "0x60028C9")]
		[Address(RVA = "0x129B4D4", Offset = "0x129B4D4", VA = "0x129B4D4")]
		public DemoSlidingDoor()
		{
		}
	}
	[Token(Token = "0x20005CB")]
	public class DemoSocketables : HVREnumFlagsSocketable<DemoSocketableItems>
	{
		[Token(Token = "0x60028D0")]
		[Address(RVA = "0x129BA44", Offset = "0x129BA44", VA = "0x129BA44")]
		public DemoSocketables()
		{
		}
	}
	[Token(Token = "0x20005CC")]
	[Flags]
	public enum DemoSocketableItems
	{
		[Token(Token = "0x4002391")]
		None = 0,
		[Token(Token = "0x4002392")]
		Pistol = 1,
		[Token(Token = "0x4002393")]
		PistolMagazine = 2,
		[Token(Token = "0x4002394")]
		SMG = 4,
		[Token(Token = "0x4002395")]
		SMGMagazine = 8,
		[Token(Token = "0x4002396")]
		PowerCell = 0x10,
		[Token(Token = "0x4002397")]
		SmallObject = 0x20,
		[Token(Token = "0x4002398")]
		LargeObject = 0x40,
		[Token(Token = "0x4002399")]
		DoorKey = 0x80,
		[Token(Token = "0x400239A")]
		ShotgunShell = 0x100,
		[Token(Token = "0x400239B")]
		Valve = 0x200,
		[Token(Token = "0x400239C")]
		Key = 0x400,
		[Token(Token = "0x400239D")]
		All = -1
	}
	[Token(Token = "0x20005CD")]
	public class DemoSocketFilter : HVREnumFlagsSocketFilter<DemoSocketableItems>
	{
		[Token(Token = "0x60028D1")]
		[Address(RVA = "0x129BA8C", Offset = "0x129BA8C", VA = "0x129BA8C")]
		public DemoSocketFilter()
		{
		}
	}
	[Token(Token = "0x20005CE")]
	public class DemoValveHologram : MonoBehaviour
	{
		[Token(Token = "0x400239E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Interval;

		[Token(Token = "0x400239F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion StartRotation;

		[Token(Token = "0x40023A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion EndRotation;

		[Token(Token = "0x40023A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion _current;

		[Token(Token = "0x40023A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion _next;

		[Token(Token = "0x40023A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float _elapsed;

		[Token(Token = "0x60028D2")]
		[Address(RVA = "0x129BAD4", Offset = "0x129BAD4", VA = "0x129BAD4")]
		private void Start()
		{
		}

		[Token(Token = "0x60028D3")]
		[Address(RVA = "0x129BAE8", Offset = "0x129BAE8", VA = "0x129BAE8")]
		private void Update()
		{
		}

		[Token(Token = "0x60028D4")]
		[Address(RVA = "0x129BB98", Offset = "0x129BB98", VA = "0x129BB98")]
		public void Destroy()
		{
		}

		[Token(Token = "0x60028D5")]
		[Address(RVA = "0x129BC04", Offset = "0x129BC04", VA = "0x129BC04")]
		public DemoValveHologram()
		{
		}
	}
	[Token(Token = "0x20005CF")]
	[RequireComponent(typeof(DemoPassthroughSocket))]
	public class DemoValveLock : MonoBehaviour
	{
		[Token(Token = "0x20005D0")]
		[CompilerGenerated]
		private sealed class <MoveKey>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40023A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40023A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40023A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HVRGrabbable key;

			[Token(Token = "0x40023AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DemoValveLock <>4__this;

			[Token(Token = "0x40023AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <start>5__2;

			[Token(Token = "0x40023AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Quaternion <startRot>5__3;

			[Token(Token = "0x40023AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <elapsed>5__4;

			[Token(Token = "0x1700046B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60028DE")]
				[Address(RVA = "0x129C06C", Offset = "0x129C06C", VA = "0x129C06C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700046C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60028E0")]
				[Address(RVA = "0x129C0B4", Offset = "0x129C0B4", VA = "0x129C0B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60028DB")]
			[Address(RVA = "0x129BDAC", Offset = "0x129BDAC", VA = "0x129BDAC")]
			[DebuggerHidden]
			public <MoveKey>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60028DC")]
			[Address(RVA = "0x129BDE4", Offset = "0x129BDE4", VA = "0x129BDE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60028DD")]
			[Address(RVA = "0x129BDE8", Offset = "0x129BDE8", VA = "0x129BDE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60028DF")]
			[Address(RVA = "0x129C074", Offset = "0x129C074", VA = "0x129C074", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40023A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DemoPassthroughSocket Socket;

		[Token(Token = "0x40023A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HVRGrabbable FaceGrabbable;

		[Token(Token = "0x40023A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AnimationTime;

		[Token(Token = "0x60028D6")]
		[Address(RVA = "0x129BC18", Offset = "0x129BC18", VA = "0x129BC18")]
		public void Start()
		{
		}

		[Token(Token = "0x60028D7")]
		[Address(RVA = "0x129BCF4", Offset = "0x129BCF4", VA = "0x129BCF4")]
		public void Update()
		{
		}

		[Token(Token = "0x60028D8")]
		[Address(RVA = "0x129BCF8", Offset = "0x129BCF8", VA = "0x129BCF8")]
		private void OnValveGrabbed(HVRGrabberBase grabber, HVRGrabbable key)
		{
		}

		[Token(Token = "0x60028D9")]
		[Address(RVA = "0x129BD1C", Offset = "0x129BD1C", VA = "0x129BD1C")]
		[IteratorStateMachine(typeof(<MoveKey>d__6))]
		private IEnumerator MoveKey(HVRGrabbable key)
		{
			return null;
		}

		[Token(Token = "0x60028DA")]
		[Address(RVA = "0x129BDD4", Offset = "0x129BDD4", VA = "0x129BDD4")]
		public DemoValveLock()
		{
		}
	}
}
namespace HurricaneVR.Samples
{
	[Token(Token = "0x20005D1")]
	public class AmmoSocketable : HVREnumSocketable<AmmoType>
	{
		[Token(Token = "0x60028E1")]
		[Address(RVA = "0x129C0BC", Offset = "0x129C0BC", VA = "0x129C0BC")]
		public AmmoSocketable()
		{
		}
	}
	[Token(Token = "0x20005D2")]
	public enum AmmoType
	{
		[Token(Token = "0x40023AF")]
		Mag556,
		[Token(Token = "0x40023B0")]
		ShotgunShell
	}
	[Token(Token = "0x20005D3")]
	public class AmmoSocketFilter : HVREnumSocketFilter<AmmoType>
	{
		[Token(Token = "0x60028E2")]
		[Address(RVA = "0x129C104", Offset = "0x129C104", VA = "0x129C104")]
		public AmmoSocketFilter()
		{
		}
	}
	[Token(Token = "0x20005D4")]
	public class Backpack : MonoBehaviour
	{
		[Token(Token = "0x20005D5")]
		[CompilerGenerated]
		private sealed class <IgnoreColliders>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40023B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40023B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40023B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Backpack <>4__this;

			[Token(Token = "0x1700046D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60028EA")]
				[Address(RVA = "0x129C694", Offset = "0x129C694", VA = "0x129C694", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700046E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60028EC")]
				[Address(RVA = "0x129C6DC", Offset = "0x129C6DC", VA = "0x129C6DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60028E7")]
			[Address(RVA = "0x129C290", Offset = "0x129C290", VA = "0x129C290")]
			[DebuggerHidden]
			public <IgnoreColliders>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60028E8")]
			[Address(RVA = "0x129C544", Offset = "0x129C544", VA = "0x129C544", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60028E9")]
			[Address(RVA = "0x129C548", Offset = "0x129C548", VA = "0x129C548", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60028EB")]
			[Address(RVA = "0x129C69C", Offset = "0x129C69C", VA = "0x129C69C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40023B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Used to ignore collision with grabbable colliders.")]
		public List<Collider> Colliders;

		[Token(Token = "0x60028E3")]
		[Address(RVA = "0x129C14C", Offset = "0x129C14C", VA = "0x129C14C")]
		private void Start()
		{
		}

		[Token(Token = "0x60028E4")]
		[Address(RVA = "0x129C21C", Offset = "0x129C21C", VA = "0x129C21C")]
		[IteratorStateMachine(typeof(<IgnoreColliders>d__2))]
		public IEnumerator IgnoreColliders()
		{
			return null;
		}

		[Token(Token = "0x60028E5")]
		[Address(RVA = "0x129C2B8", Offset = "0x129C2B8", VA = "0x129C2B8")]
		public void IgnoreCollision(HVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x60028E6")]
		[Address(RVA = "0x129C4BC", Offset = "0x129C4BC", VA = "0x129C4BC")]
		public Backpack()
		{
		}
	}
	[Token(Token = "0x20005D6")]
	public enum CombinationLockState
	{
		[Token(Token = "0x40023B6")]
		CamOne,
		[Token(Token = "0x40023B7")]
		CamTwo,
		[Token(Token = "0x40023B8")]
		CamThree,
		[Token(Token = "0x40023B9")]
		Unlocked
	}
	[Token(Token = "0x20005D7")]
	public class CombinationLock : HVRDial
	{
		[Token(Token = "0x40023BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshPro NumberLabel;

		[Token(Token = "0x40023BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TextMeshPro DebugLabel;

		[Token(Token = "0x40023BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool DisplayDebug;

		[Token(Token = "0x40023BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public int First;

		[Token(Token = "0x40023BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public int Second;

		[Token(Token = "0x40023BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public int Third;

		[Token(Token = "0x40023C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int CurrentNumber;

		[Token(Token = "0x40023C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float CamDistance;

		[Token(Token = "0x40023C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float PreviousDistance;

		[Token(Token = "0x40023C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float Tolerance;

		[Token(Token = "0x40023C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float LowerBound;

		[Token(Token = "0x40023C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float UpperBound;

		[Token(Token = "0x40023C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public int AccuracyAllowance;

		[Token(Token = "0x40023C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public UnityEvent Unlocked;

		[Token(Token = "0x40023C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private CombinationLockState _state;

		[Token(Token = "0x1700046F")]
		public CombinationLockState State
		{
			[Token(Token = "0x60028ED")]
			[Address(RVA = "0x129C6E4", Offset = "0x129C6E4", VA = "0x129C6E4")]
			get
			{
				return default(CombinationLockState);
			}
			[Token(Token = "0x60028EE")]
			[Address(RVA = "0x129C6EC", Offset = "0x129C6EC", VA = "0x129C6EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000470")]
		public int NumberOfRotations
		{
			[Token(Token = "0x60028EF")]
			[Address(RVA = "0x129C7A4", Offset = "0x129C7A4", VA = "0x129C7A4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000471")]
		public bool IsFirstInRange
		{
			[Token(Token = "0x60028F3")]
			[Address(RVA = "0x129CBB8", Offset = "0x129CBB8", VA = "0x129CBB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000472")]
		public bool IsSecondInRange
		{
			[Token(Token = "0x60028F4")]
			[Address(RVA = "0x129CBE4", Offset = "0x129CBE4", VA = "0x129CBE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000473")]
		public bool IsThirdInRange
		{
			[Token(Token = "0x60028F5")]
			[Address(RVA = "0x129CC10", Offset = "0x129CC10", VA = "0x129CC10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60028F0")]
		[Address(RVA = "0x129C7E4", Offset = "0x129C7E4", VA = "0x129C7E4", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60028F1")]
		[Address(RVA = "0x129C6F4", Offset = "0x129C6F4", VA = "0x129C6F4")]
		private void ComputeBounds()
		{
		}

		[Token(Token = "0x60028F2")]
		[Address(RVA = "0x129CBB0", Offset = "0x129CBB0", VA = "0x129CBB0", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60028F6")]
		[Address(RVA = "0x129CB94", Offset = "0x129CB94", VA = "0x129CB94")]
		public void ResetLockState(CombinationLockState state)
		{
		}

		[Token(Token = "0x60028F7")]
		[Address(RVA = "0x129CC38", Offset = "0x129CC38", VA = "0x129CC38", Slot = "6")]
		protected override void OnStepChanged(int step, bool raiseEvents)
		{
		}

		[Token(Token = "0x60028F8")]
		[Address(RVA = "0x129D030", Offset = "0x129D030", VA = "0x129D030", Slot = "7")]
		protected override void OnAngleChanged(float angle, float delta, float percent, bool raiseEvents)
		{
		}

		[Token(Token = "0x60028F9")]
		[Address(RVA = "0x129D1B0", Offset = "0x129D1B0", VA = "0x129D1B0")]
		public CombinationLock()
		{
		}
	}
	[Token(Token = "0x20005D8")]
	[RequireComponent(typeof(SpotLight))]
	public class ExampleLight : MonoBehaviour
	{
		[Token(Token = "0x40023C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light Light;

		[Token(Token = "0x40023CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxIntensity;

		[Token(Token = "0x60028FA")]
		[Address(RVA = "0x129D244", Offset = "0x129D244", VA = "0x129D244")]
		private void Awake()
		{
		}

		[Token(Token = "0x60028FB")]
		[Address(RVA = "0x129D29C", Offset = "0x129D29C", VA = "0x129D29C")]
		public void OnAngledChanged(float angle, float delta, float percent)
		{
		}

		[Token(Token = "0x60028FC")]
		[Address(RVA = "0x129D2C4", Offset = "0x129D2C4", VA = "0x129D2C4")]
		public ExampleLight()
		{
		}
	}
	[Token(Token = "0x20005D9")]
	public class Examples : MonoBehaviour
	{
		[Token(Token = "0x20005DA")]
		private class ResetState
		{
			[Token(Token = "0x40023CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HVRGrabbable Grabbable;

			[Token(Token = "0x40023D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HVRGrabbable Clone;

			[Token(Token = "0x40023D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 Position;

			[Token(Token = "0x40023D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion Rotation;

			[Token(Token = "0x40023D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform Parent;

			[Token(Token = "0x17000474")]
			public Vector3 Scale
			{
				[Token(Token = "0x6002905")]
				[Address(RVA = "0x129E53C", Offset = "0x129E53C", VA = "0x129E53C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6002906")]
				[Address(RVA = "0x129E548", Offset = "0x129E548", VA = "0x129E548")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x6002907")]
			[Address(RVA = "0x129DB64", Offset = "0x129DB64", VA = "0x129DB64")]
			public ResetState()
			{
			}
		}

		[Token(Token = "0x40023CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> Parents;

		[Token(Token = "0x40023CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<HVRGrabbable> Grabbables;

		[Token(Token = "0x40023CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<ResetState> _grabbableState;

		[Token(Token = "0x40023CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<HVRGrabbable> _balls;

		[Token(Token = "0x60028FD")]
		[Address(RVA = "0x129D2CC", Offset = "0x129D2CC", VA = "0x129D2CC")]
		private void Start()
		{
		}

		[Token(Token = "0x60028FE")]
		[Address(RVA = "0x129D588", Offset = "0x129D588", VA = "0x129D588")]
		private void AddResetGrabbable(Transform parent)
		{
		}

		[Token(Token = "0x60028FF")]
		[Address(RVA = "0x129D95C", Offset = "0x129D95C", VA = "0x129D95C")]
		private void SaveResetGrabbable(Transform parent, HVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6002900")]
		[Address(RVA = "0x129DB6C", Offset = "0x129DB6C", VA = "0x129DB6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002901")]
		[Address(RVA = "0x129DB70", Offset = "0x129DB70", VA = "0x129DB70")]
		public void BallSpawned(HVRSocket socket, GameObject ball)
		{
		}

		[Token(Token = "0x6002902")]
		[Address(RVA = "0x129DC40", Offset = "0x129DC40", VA = "0x129DC40")]
		public void ResetGrabbables()
		{
		}

		[Token(Token = "0x6002903")]
		[Address(RVA = "0x129E38C", Offset = "0x129E38C", VA = "0x129E38C")]
		public Examples()
		{
		}
	}
	[Token(Token = "0x20005DC")]
	public class Holster : HVRSocket
	{
		[Token(Token = "0x600290A")]
		[Address(RVA = "0x129E5E0", Offset = "0x129E5E0", VA = "0x129E5E0", Slot = "56")]
		protected override Quaternion GetRotationOffset(HVRGrabbable grabbable)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600290B")]
		[Address(RVA = "0x129E6CC", Offset = "0x129E6CC", VA = "0x129E6CC", Slot = "55")]
		protected override Vector3 GetPositionOffset(HVRGrabbable grabbable)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600290C")]
		[Address(RVA = "0x129E7B8", Offset = "0x129E7B8", VA = "0x129E7B8")]
		public Holster()
		{
		}
	}
	[Token(Token = "0x20005DD")]
	public class HolsterOrientation : MonoBehaviour
	{
		[Token(Token = "0x40023D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Orientation;

		[Token(Token = "0x600290D")]
		[Address(RVA = "0x129E7C0", Offset = "0x129E7C0", VA = "0x129E7C0")]
		public HolsterOrientation()
		{
		}
	}
	[Token(Token = "0x20005DE")]
	public class HVRShoulderGrabber : HVRSocketContainerGrabber
	{
		[Token(Token = "0x600290E")]
		[Address(RVA = "0x129E7C8", Offset = "0x129E7C8", VA = "0x129E7C8", Slot = "47")]
		public override bool CanHover(HVRGrabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x600290F")]
		[Address(RVA = "0x129E9E8", Offset = "0x129E9E8", VA = "0x129E9E8")]
		public HVRShoulderGrabber()
		{
		}
	}
	[Token(Token = "0x20005DF")]
	public class HVRShoulderSocket : HVRSocket
	{
		[Token(Token = "0x6002910")]
		[Address(RVA = "0x129E9F0", Offset = "0x129E9F0", VA = "0x129E9F0", Slot = "47")]
		public override bool CanHover(HVRGrabbable grabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6002911")]
		[Address(RVA = "0x129EC10", Offset = "0x129EC10", VA = "0x129EC10")]
		public HVRShoulderSocket()
		{
		}
	}
	[Token(Token = "0x20005E0")]
	public class ItemsSocketable : HVREnumFlagsSocketable<Items>
	{
		[Token(Token = "0x6002912")]
		[Address(RVA = "0x129EC18", Offset = "0x129EC18", VA = "0x129EC18")]
		public ItemsSocketable()
		{
		}
	}
	[Token(Token = "0x20005E1")]
	[Flags]
	public enum Items
	{
		[Token(Token = "0x40023D9")]
		None = 0,
		[Token(Token = "0x40023DA")]
		Item = 1,
		[Token(Token = "0x40023DB")]
		LargeItem = 2,
		[Token(Token = "0x40023DC")]
		SmallWeapon = 4,
		[Token(Token = "0x40023DD")]
		MadsonD9Magazine = 8,
		[Token(Token = "0x40023DE")]
		Ball = 0x10,
		[Token(Token = "0x40023DF")]
		All = -1
	}
	[Token(Token = "0x20005E2")]
	public class ItemsSocketFilter : HVREnumFlagsSocketFilter<Items>
	{
		[Token(Token = "0x6002913")]
		[Address(RVA = "0x129EC60", Offset = "0x129EC60", VA = "0x129EC60")]
		public ItemsSocketFilter()
		{
		}
	}
	[Token(Token = "0x20005E3")]
	public class KeypadDisplay : MonoBehaviour
	{
		[Token(Token = "0x40023E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro Display;

		[Token(Token = "0x6002914")]
		[Address(RVA = "0x129ECA8", Offset = "0x129ECA8", VA = "0x129ECA8")]
		public void Unlocked()
		{
		}

		[Token(Token = "0x6002915")]
		[Address(RVA = "0x129ED48", Offset = "0x129ED48", VA = "0x129ED48")]
		public KeypadDisplay()
		{
		}
	}
	[Token(Token = "0x20005E4")]
	[RequireComponent(typeof(TextMeshPro))]
	public class LeverDisplay : MonoBehaviour
	{
		[Token(Token = "0x40023E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _step;

		[Token(Token = "0x40023E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _angle;

		[Token(Token = "0x40023E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshPro _tm;

		[Token(Token = "0x6002916")]
		[Address(RVA = "0x129ED50", Offset = "0x129ED50", VA = "0x129ED50")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002917")]
		[Address(RVA = "0x129EDA8", Offset = "0x129EDA8", VA = "0x129EDA8")]
		public void OnStepChanged(int step)
		{
		}

		[Token(Token = "0x6002918")]
		[Address(RVA = "0x129EE8C", Offset = "0x129EE8C", VA = "0x129EE8C")]
		public void OnAngleChanged(float angle, float delta, float percent)
		{
		}

		[Token(Token = "0x6002919")]
		[Address(RVA = "0x129EF74", Offset = "0x129EF74", VA = "0x129EF74")]
		public LeverDisplay()
		{
		}
	}
	[Token(Token = "0x20005E5")]
	[RequireComponent(typeof(HingeJoint))]
	[RequireComponent(typeof(Rigidbody))]
	public class LockedDoor : MonoBehaviour
	{
		[Token(Token = "0x40023E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HingeJoint _hinge;

		[Token(Token = "0x40023E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody _rigidbody;

		[Token(Token = "0x40023E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinAngle;

		[Token(Token = "0x40023E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MaxAngle;

		[Token(Token = "0x40023E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool LockOnStart;

		[Token(Token = "0x600291A")]
		[Address(RVA = "0x129EF7C", Offset = "0x129EF7C", VA = "0x129EF7C")]
		private void Start()
		{
		}

		[Token(Token = "0x600291B")]
		[Address(RVA = "0x129F030", Offset = "0x129F030", VA = "0x129F030")]
		private void Lock()
		{
		}

		[Token(Token = "0x600291C")]
		[Address(RVA = "0x129F0E4", Offset = "0x129F0E4", VA = "0x129F0E4")]
		public void Unlock()
		{
		}

		[Token(Token = "0x600291D")]
		[Address(RVA = "0x129F198", Offset = "0x129F198", VA = "0x129F198")]
		public LockedDoor()
		{
		}
	}
}
namespace HurricaneVR.Samples.Prefabs.Keypad
{
	[Token(Token = "0x20005E6")]
	public class Keypad : MonoBehaviour
	{
		[Token(Token = "0x40023E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent Unlocked;

		[Token(Token = "0x40023EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Code;

		[Token(Token = "0x40023EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshPro Display;

		[Token(Token = "0x40023EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Entry;

		[Token(Token = "0x40023ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public KeyPadButton LeftActive;

		[Token(Token = "0x40023EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public KeyPadButton RightActive;

		[Token(Token = "0x40023EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int MaxLength;

		[Token(Token = "0x40023F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool _unlocked;

		[Token(Token = "0x17000475")]
		public int Index
		{
			[Token(Token = "0x600291E")]
			[Address(RVA = "0x129F1A8", Offset = "0x129F1A8", VA = "0x129F1A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600291F")]
		[Address(RVA = "0x129F1C0", Offset = "0x129F1C0", VA = "0x129F1C0", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6002920")]
		[Address(RVA = "0x129F4C8", Offset = "0x129F4C8", VA = "0x129F4C8", Slot = "5")]
		protected virtual void OnButtonDown(HVRButton button)
		{
		}

		[Token(Token = "0x6002921")]
		[Address(RVA = "0x129F698", Offset = "0x129F698", VA = "0x129F698")]
		private void Update()
		{
		}

		[Token(Token = "0x6002922")]
		[Address(RVA = "0x129F69C", Offset = "0x129F69C", VA = "0x129F69C")]
		public Keypad()
		{
		}
	}
	[Token(Token = "0x20005E7")]
	[RequireComponent(typeof(AudioSource))]
	public class KeyPadButton : HVRButton
	{
		[Token(Token = "0x40023F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[FormerlySerializedAs("Number")]
		public char Key;

		[Token(Token = "0x40023F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshPro Text;

		[Token(Token = "0x40023F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshPro Ring;

		[Token(Token = "0x6002923")]
		[Address(RVA = "0x129F734", Offset = "0x129F734", VA = "0x129F734")]
		public KeyPadButton()
		{
		}
	}
}
namespace HurricaneVR.Framework.Components
{
	[Token(Token = "0x20005E8")]
	[RequireComponent(typeof(Rigidbody))]
	public class CustomHVRPhysicsDial : MonoBehaviour
	{
		[Token(Token = "0x40023F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Settings")]
		[UnityEngine.Tooltip("Local axis of rotation")]
		public HVRAxis Axis;

		[Token(Token = "0x40023F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Rigidbody to connect the joint to")]
		public Rigidbody ConnectedBody;

		[Token(Token = "0x40023F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("If true the angular velocity will be zero'd out on release.")]
		public bool StopOnRelease;

		[Token(Token = "0x40023F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool DisableGravity;

		[Token(Token = "0x40023F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[Header("Joint Limits")]
		public bool LimitRotation;

		[Token(Token = "0x40023F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("Minimum Angle about the axis of rotation")]
		public float MinAngle;

		[Token(Token = "0x40023FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Maximum rotation about the axis of rotation")]
		public float MaxAngle;

		[Token(Token = "0x40023FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Joint Settings")]
		[UnityEngine.Tooltip("Angular Damper when the dial is grabbed")]
		public float GrabbedDamper;

		[Token(Token = "0x40023FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Angular Damper when the dial is not grabbed")]
		public float Damper;

		[Token(Token = "0x40023FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Spring;

		[Token(Token = "0x40023FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Editor")]
		[SerializeField]
		protected Quaternion JointStartRotation;

		[Token(Token = "0x40023FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Debugging Tools")]
		public float TargetAngularVelocity;

		[Token(Token = "0x17000476")]
		public Rigidbody Rigidbody
		{
			[Token(Token = "0x6002924")]
			[Address(RVA = "0x129F73C", Offset = "0x129F73C", VA = "0x129F73C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002925")]
			[Address(RVA = "0x129F744", Offset = "0x129F744", VA = "0x129F744")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000477")]
		public HVRGrabbable Grabbable
		{
			[Token(Token = "0x6002926")]
			[Address(RVA = "0x129F74C", Offset = "0x129F74C", VA = "0x129F74C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002927")]
			[Address(RVA = "0x129F754", Offset = "0x129F754", VA = "0x129F754")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000478")]
		protected ConfigurableJoint Joint
		{
			[Token(Token = "0x6002928")]
			[Address(RVA = "0x129F75C", Offset = "0x129F75C", VA = "0x129F75C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002929")]
			[Address(RVA = "0x129F764", Offset = "0x129F764", VA = "0x129F764")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600292A")]
		[Address(RVA = "0x129F76C", Offset = "0x129F76C", VA = "0x129F76C", Slot = "4")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x600292B")]
		[Address(RVA = "0x129FB38", Offset = "0x129FB38", VA = "0x129FB38", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600292C")]
		[Address(RVA = "0x129FBC4", Offset = "0x129FBC4", VA = "0x129FBC4")]
		private void OnDialReleased(HVRHandGrabber arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x600292D")]
		[Address(RVA = "0x129FCA0", Offset = "0x129FCA0", VA = "0x129FCA0")]
		private void OnDialGrabbed(HVRHandGrabber arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x600292E")]
		[Address(RVA = "0x129F960", Offset = "0x129F960", VA = "0x129F960")]
		public void SetupJoint()
		{
		}

		[Token(Token = "0x600292F")]
		[Address(RVA = "0x129FD78", Offset = "0x129FD78", VA = "0x129FD78")]
		public void SetLimits(float minAngle, float maxAngle)
		{
		}

		[Token(Token = "0x6002930")]
		[Address(RVA = "0x129FD28", Offset = "0x129FD28", VA = "0x129FD28")]
		public void ResetLimits()
		{
		}

		[Token(Token = "0x6002931")]
		[Address(RVA = "0x129FDD0", Offset = "0x129FDD0", VA = "0x129FDD0")]
		public void DisconnectFromJoint()
		{
		}

		[Token(Token = "0x6002932")]
		[Address(RVA = "0x129FE2C", Offset = "0x129FE2C", VA = "0x129FE2C")]
		public CustomHVRPhysicsDial()
		{
		}
	}
}
namespace HurricaneVR.Framework.ControllerInput
{
	[Token(Token = "0x20005E9")]
	public class CustomHVRInputManager : HVRInputManager
	{
		[Token(Token = "0x4002403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public HVRController LeftPSVRController;

		[Token(Token = "0x4002404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public HVRController RightPSVRController;

		[Token(Token = "0x4002405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public HVRController LeftPSVR2Controller;

		[Token(Token = "0x4002406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public HVRController RightPSVR2Controller;

		[Token(Token = "0x6002933")]
		[Address(RVA = "0x129FE44", Offset = "0x129FE44", VA = "0x129FE44", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002934")]
		[Address(RVA = "0x129FF3C", Offset = "0x129FF3C", VA = "0x129FF3C", Slot = "5")]
		protected override HVRController UpdateController(XRInputSystem sdk, UnityEngine.XR.InputDevice device, HVRHandSide side)
		{
			return null;
		}

		[Token(Token = "0x6002935")]
		[Address(RVA = "0x12A06D4", Offset = "0x12A06D4", VA = "0x12A06D4")]
		public CustomHVRInputManager()
		{
		}
	}
	[Token(Token = "0x20005EA")]
	public class HVRPSVR2Controller : HVRXRInputController
	{
		[Token(Token = "0x4002407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private byte StartPosition;

		[Token(Token = "0x4002408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		private byte EndPosition;

		[Token(Token = "0x4002409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
		private byte Strength;

		[Token(Token = "0x6002936")]
		[Address(RVA = "0x12A06DC", Offset = "0x12A06DC", VA = "0x12A06DC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002937")]
		[Address(RVA = "0x12A06E8", Offset = "0x12A06E8", VA = "0x12A06E8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002938")]
		[Address(RVA = "0x12A06E4", Offset = "0x12A06E4", VA = "0x12A06E4")]
		private void SetCommands()
		{
		}

		[Token(Token = "0x6002939")]
		[Address(RVA = "0x12A06F0", Offset = "0x12A06F0", VA = "0x12A06F0", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600293A")]
		[Address(RVA = "0x12A06F8", Offset = "0x12A06F8", VA = "0x12A06F8")]
		public void SetTriggerEffect(bool active)
		{
		}

		[Token(Token = "0x600293B")]
		[Address(RVA = "0x12A06FC", Offset = "0x12A06FC", VA = "0x12A06FC")]
		public HVRPSVR2Controller()
		{
		}
	}
	[Token(Token = "0x20005EB")]
	public class HVRPSVRController : HVRController
	{
		[Token(Token = "0x20005EC")]
		[CompilerGenerated]
		private sealed class <VibrateRoutine>d__7 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400240D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400240E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x17000479")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002945")]
				[Address(RVA = "0x12A0A94", Offset = "0x12A0A94", VA = "0x12A0A94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700047A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002947")]
				[Address(RVA = "0x12A0ADC", Offset = "0x12A0ADC", VA = "0x12A0ADC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002942")]
			[Address(RVA = "0x12A09DC", Offset = "0x12A09DC", VA = "0x12A09DC")]
			[DebuggerHidden]
			public <VibrateRoutine>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6002943")]
			[Address(RVA = "0x12A0A5C", Offset = "0x12A0A5C", VA = "0x12A0A5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002944")]
			[Address(RVA = "0x12A0A60", Offset = "0x12A0A60", VA = "0x12A0A60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002946")]
			[Address(RVA = "0x12A0A9C", Offset = "0x12A0A9C", VA = "0x12A0A9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400240A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public HVRHandSide HandSide;

		[Token(Token = "0x400240B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Transform handTransform;

		[Token(Token = "0x400240C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private CoroutineHandle _vibrateRoutine;

		[Token(Token = "0x600293C")]
		[Address(RVA = "0x12A0764", Offset = "0x12A0764", VA = "0x12A0764", Slot = "8")]
		protected override void UpdateInput()
		{
		}

		[Token(Token = "0x600293D")]
		[Address(RVA = "0x12A0768", Offset = "0x12A0768", VA = "0x12A0768")]
		public void UpdateInputPSVR()
		{
		}

		[Token(Token = "0x600293E")]
		[Address(RVA = "0x12A076C", Offset = "0x12A076C", VA = "0x12A076C", Slot = "9")]
		protected override void CheckButtonState(HVRButtons button, ref HVRButtonState buttonState)
		{
		}

		[Token(Token = "0x600293F")]
		[Address(RVA = "0x12A08D8", Offset = "0x12A08D8", VA = "0x12A08D8", Slot = "10")]
		public override void Vibrate(float amplitude, float duration = 0.1f, float frequency = 1f)
		{
		}

		[Token(Token = "0x6002940")]
		[Address(RVA = "0x12A097C", Offset = "0x12A097C", VA = "0x12A097C")]
		[IteratorStateMachine(typeof(<VibrateRoutine>d__7))]
		private IEnumerator<float> VibrateRoutine(float amplitude, float duration = 0.1f, float frequency = 1f)
		{
			return null;
		}

		[Token(Token = "0x6002941")]
		[Address(RVA = "0x12A0A04", Offset = "0x12A0A04", VA = "0x12A0A04")]
		public HVRPSVRController()
		{
		}
	}
	[Token(Token = "0x20005ED")]
	public class HVRSimulatorInputController : HVRController
	{
		[Token(Token = "0x6002948")]
		[Address(RVA = "0x12A0B38", Offset = "0x12A0B38", VA = "0x12A0B38", Slot = "8")]
		protected override void UpdateInput()
		{
		}

		[Token(Token = "0x6002949")]
		[Address(RVA = "0x12A0BD4", Offset = "0x12A0BD4", VA = "0x12A0BD4")]
		private void UpdateInputPC()
		{
		}

		[Token(Token = "0x600294A")]
		[Address(RVA = "0x12A0E00", Offset = "0x12A0E00", VA = "0x12A0E00")]
		private void UpdateInputPS()
		{
		}

		[Token(Token = "0x600294B")]
		[Address(RVA = "0x12A0E04", Offset = "0x12A0E04", VA = "0x12A0E04", Slot = "9")]
		protected override void CheckButtonState(HVRButtons button, ref HVRButtonState buttonState)
		{
		}

		[Token(Token = "0x600294C")]
		[Address(RVA = "0x12A0F64", Offset = "0x12A0F64", VA = "0x12A0F64")]
		public HVRSimulatorInputController()
		{
		}
	}
}
namespace HurricaneVR.Framework.Integrations.PUN
{
	[Token(Token = "0x20005EE")]
	[RequireComponent(typeof(PhotonView))]
	public class HVRPunDial : HVRDial, IPunObservable
	{
		[Token(Token = "0x400240F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool OthersRaiseEvents;

		[Token(Token = "0x1700047B")]
		public PhotonView PhotonView
		{
			[Token(Token = "0x600294D")]
			[Address(RVA = "0x12A0FBC", Offset = "0x12A0FBC", VA = "0x12A0FBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600294E")]
			[Address(RVA = "0x12A0FC4", Offset = "0x12A0FC4", VA = "0x12A0FC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600294F")]
		[Address(RVA = "0x12A0FCC", Offset = "0x12A0FCC", VA = "0x12A0FCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002950")]
		[Address(RVA = "0x12A1024", Offset = "0x12A1024", VA = "0x12A1024", Slot = "5")]
		protected override void FixedUpdate()
		{
		}

		[Token(Token = "0x6002951")]
		[Address(RVA = "0x12A105C", Offset = "0x12A105C", VA = "0x12A105C", Slot = "9")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6002952")]
		[Address(RVA = "0x12A121C", Offset = "0x12A121C", VA = "0x12A121C", Slot = "6")]
		protected override void OnStepChanged(int step, bool raiseEvents)
		{
		}

		[Token(Token = "0x6002953")]
		[Address(RVA = "0x12A13AC", Offset = "0x12A13AC", VA = "0x12A13AC", Slot = "7")]
		protected override void OnAngleChanged(float angle, float delta, float percent, bool raiseEvents)
		{
		}

		[Token(Token = "0x6002954")]
		[Address(RVA = "0x12A15F0", Offset = "0x12A15F0", VA = "0x12A15F0", Slot = "10")]
		[PunRPC]
		protected virtual void PunOnStepChangedRPC(int step, bool raiseEvents)
		{
		}

		[Token(Token = "0x6002955")]
		[Address(RVA = "0x12A15FC", Offset = "0x12A15FC", VA = "0x12A15FC", Slot = "11")]
		[PunRPC]
		protected virtual void PunOnAngleChangedRPC(float angle, float delta, float percent, bool raiseEvents)
		{
		}

		[Token(Token = "0x6002956")]
		[Address(RVA = "0x12A1608", Offset = "0x12A1608", VA = "0x12A1608")]
		public HVRPunDial()
		{
		}
	}
	[Token(Token = "0x20005EF")]
	[RequireComponent(typeof(PhotonView))]
	public class HVRPunGrabberManager : HVRGrabberManager
	{
		[Token(Token = "0x20005F0")]
		[CompilerGenerated]
		private sealed class <_OnHandGrabberGrabbed>d__11 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002412")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002413")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002414")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HVRHandGrabber grabber;

			[Token(Token = "0x4002415")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HVRGrabbable grabbable;

			[Token(Token = "0x4002416")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HVRPunGrabberManager <>4__this;

			[Token(Token = "0x4002417")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PhotonView grabberView;

			[Token(Token = "0x4002418")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public PhotonView grabbableView;

			[Token(Token = "0x1700047D")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600296F")]
				[Address(RVA = "0x12A4480", Offset = "0x12A4480", VA = "0x12A4480", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700047E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002971")]
				[Address(RVA = "0x12A44C8", Offset = "0x12A44C8", VA = "0x12A44C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600296C")]
			[Address(RVA = "0x12A21BC", Offset = "0x12A21BC", VA = "0x12A21BC")]
			[DebuggerHidden]
			public <_OnHandGrabberGrabbed>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x600296D")]
			[Address(RVA = "0x12A36B4", Offset = "0x12A36B4", VA = "0x12A36B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600296E")]
			[Address(RVA = "0x12A36B8", Offset = "0x12A36B8", VA = "0x12A36B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002970")]
			[Address(RVA = "0x12A4488", Offset = "0x12A4488", VA = "0x12A4488", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005F1")]
		[CompilerGenerated]
		private sealed class <_WaitForFrameAndPunPhysicsHandGrab>d__14 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002419")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400241A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400241B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HVRGrabbable grabbable;

			[Token(Token = "0x400241C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HVRHandGrabber grabber;

			[Token(Token = "0x400241D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HVRPunGrabberManager <>4__this;

			[Token(Token = "0x400241E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Quaternion grabPointRotation;

			[Token(Token = "0x400241F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 grabPointPosition;

			[Token(Token = "0x4002420")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public Quaternion poseRotation;

			[Token(Token = "0x4002421")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 posePosition;

			[Token(Token = "0x4002422")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public byte[] poseData;

			[Token(Token = "0x1700047F")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002975")]
				[Address(RVA = "0x12A4898", Offset = "0x12A4898", VA = "0x12A4898", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000480")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002977")]
				[Address(RVA = "0x12A48E0", Offset = "0x12A48E0", VA = "0x12A48E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002972")]
			[Address(RVA = "0x12A27EC", Offset = "0x12A27EC", VA = "0x12A27EC")]
			[DebuggerHidden]
			public <_WaitForFrameAndPunPhysicsHandGrab>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002973")]
			[Address(RVA = "0x12A4524", Offset = "0x12A4524", VA = "0x12A4524", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002974")]
			[Address(RVA = "0x12A4528", Offset = "0x12A4528", VA = "0x12A4528", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002976")]
			[Address(RVA = "0x12A48A0", Offset = "0x12A48A0", VA = "0x12A48A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005F2")]
		[CompilerGenerated]
		private sealed class <_WaitForFrameAndGrab>d__17 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002423")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002424")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002425")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HVRHandGrabber grabber;

			[Token(Token = "0x4002426")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion grabberRotation;

			[Token(Token = "0x4002427")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public HVRGrabbable grabbable;

			[Token(Token = "0x4002428")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 grabbablePosition;

			[Token(Token = "0x4002429")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion grabbableRotation;

			[Token(Token = "0x400242A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public int grabPointIndex;

			[Token(Token = "0x17000481")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600297B")]
				[Address(RVA = "0x12A4CAC", Offset = "0x12A4CAC", VA = "0x12A4CAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000482")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600297D")]
				[Address(RVA = "0x12A4CF4", Offset = "0x12A4CF4", VA = "0x12A4CF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002978")]
			[Address(RVA = "0x12A2DF0", Offset = "0x12A2DF0", VA = "0x12A2DF0")]
			[DebuggerHidden]
			public <_WaitForFrameAndGrab>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6002979")]
			[Address(RVA = "0x12A493C", Offset = "0x12A493C", VA = "0x12A493C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600297A")]
			[Address(RVA = "0x12A4940", Offset = "0x12A4940", VA = "0x12A4940", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600297C")]
			[Address(RVA = "0x12A4CB4", Offset = "0x12A4CB4", VA = "0x12A4CB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x1700047C")]
		public PhotonView PhotonView
		{
			[Token(Token = "0x6002957")]
			[Address(RVA = "0x12A1618", Offset = "0x12A1618", VA = "0x12A1618")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002958")]
			[Address(RVA = "0x12A1620", Offset = "0x12A1620", VA = "0x12A1620")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002959")]
		[Address(RVA = "0x12A1628", Offset = "0x12A1628", VA = "0x12A1628", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600295A")]
		[Address(RVA = "0x12A168C", Offset = "0x12A168C", VA = "0x12A168C", Slot = "5")]
		protected override void OnBeforeGrabberGrabbed(HVRGrabberBase grabber, HVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x600295B")]
		[Address(RVA = "0x12A1694", Offset = "0x12A1694", VA = "0x12A1694", Slot = "7")]
		protected override void OnGrabberGrabbed(HVRGrabberBase grabber, HVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x600295C")]
		[Address(RVA = "0x12A1CB4", Offset = "0x12A1CB4", VA = "0x12A1CB4")]
		private void OnForceGrabbed(HVRForceGrabber forceGrabber, HVRGrabbable grabbable, PhotonView grabberView, PhotonView grabbableView)
		{
		}

		[Token(Token = "0x600295D")]
		[Address(RVA = "0x12A1CB8", Offset = "0x12A1CB8", VA = "0x12A1CB8")]
		[PunRPC]
		private void PunForceGrabRPC(int grabberId, int grabbableId)
		{
		}

		[Token(Token = "0x600295E")]
		[Address(RVA = "0x12A1B50", Offset = "0x12A1B50", VA = "0x12A1B50")]
		private void OnSocketGrabbed(HVRSocket socket, HVRGrabbable grabbable, PhotonView grabberView, PhotonView grabbableView)
		{
		}

		[Token(Token = "0x600295F")]
		[Address(RVA = "0x12A1FE4", Offset = "0x12A1FE4", VA = "0x12A1FE4")]
		[PunRPC]
		private void PunSocketGrabRPC(int grabberId, int grabbableId)
		{
		}

		[Token(Token = "0x6002960")]
		[Address(RVA = "0x12A1A7C", Offset = "0x12A1A7C", VA = "0x12A1A7C")]
		[IteratorStateMachine(typeof(<_OnHandGrabberGrabbed>d__11))]
		private IEnumerator<float> _OnHandGrabberGrabbed(HVRHandGrabber grabber, HVRGrabbable grabbable, PhotonView grabberView, PhotonView grabbableView)
		{
			return null;
		}

		[Token(Token = "0x6002961")]
		[Address(RVA = "0x12A21E4", Offset = "0x12A21E4", VA = "0x12A21E4")]
		[PunRPC]
		private void PunPhysicsHandGrabRPC(int grabberId, int grabbableId, byte[] poseData, Vector3 grabPointPosition, Quaternion grabPointRotation, Quaternion poseRotation, Vector3 posePosition)
		{
		}

		[Token(Token = "0x6002962")]
		[Address(RVA = "0x12A2580", Offset = "0x12A2580", VA = "0x12A2580")]
		[PunRPC]
		private void PunPhysicsHandGrabPropRPC(int grabberId, int roomPropControllerViewID, int propID, byte[] poseData, Vector3 grabPointPosition, Quaternion grabPointRotation, Quaternion poseRotation, Vector3 posePosition)
		{
		}

		[Token(Token = "0x6002963")]
		[Address(RVA = "0x12A2438", Offset = "0x12A2438", VA = "0x12A2438")]
		[IteratorStateMachine(typeof(<_WaitForFrameAndPunPhysicsHandGrab>d__14))]
		private IEnumerator<float> _WaitForFrameAndPunPhysicsHandGrab(HVRHandGrabber grabber, HVRGrabbable grabbable, byte[] poseData, Vector3 grabPointPosition, Quaternion grabPointRotation, Quaternion poseRotation, Vector3 posePosition)
		{
			return null;
		}

		[Token(Token = "0x6002964")]
		[Address(RVA = "0x12A2814", Offset = "0x12A2814", VA = "0x12A2814")]
		[PunRPC]
		private void PunHandGrabRPC(int grabberId, int grabbableId, int grabPointIndex, Vector3 grabbablePosition, Quaternion grabbableRotation, Quaternion grabberRotation)
		{
		}

		[Token(Token = "0x6002965")]
		[Address(RVA = "0x12A2B80", Offset = "0x12A2B80", VA = "0x12A2B80")]
		[PunRPC]
		private void PunHandGrabPropRPC(int grabberId, int roomPropControllerViewID, int propID, int grabPointIndex, Vector3 grabbablePosition, Quaternion grabbableRotation, Quaternion grabberRotation)
		{
		}

		[Token(Token = "0x6002966")]
		[Address(RVA = "0x12A2A78", Offset = "0x12A2A78", VA = "0x12A2A78")]
		[IteratorStateMachine(typeof(<_WaitForFrameAndGrab>d__17))]
		private IEnumerator<float> _WaitForFrameAndGrab(HVRHandGrabber grabber, HVRGrabbable grabbable, int grabPointIndex, Vector3 grabbablePosition, Quaternion grabbableRotation, Quaternion grabberRotation)
		{
			return null;
		}

		[Token(Token = "0x6002967")]
		[Address(RVA = "0x12A2E18", Offset = "0x12A2E18", VA = "0x12A2E18", Slot = "6")]
		protected override void OnGrabberReleased(HVRGrabberBase grabber, HVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6002968")]
		[Address(RVA = "0x12A32C0", Offset = "0x12A32C0", VA = "0x12A32C0")]
		[PunRPC]
		private void PunOnGrabberReleasedRPC(int grabberId, int grabbableId)
		{
		}

		[Token(Token = "0x6002969")]
		[Address(RVA = "0x12A34B0", Offset = "0x12A34B0", VA = "0x12A34B0")]
		[PunRPC]
		private void PunOnGrabberReleasedPropRPC(int grabberId, int roomPropControllerViewID, int propID)
		{
		}

		[Token(Token = "0x600296A")]
		[Address(RVA = "0x12A1E58", Offset = "0x12A1E58", VA = "0x12A1E58")]
		private static void EnableDisableView(HVRGrabbable grabbable, bool enable)
		{
		}

		[Token(Token = "0x600296B")]
		[Address(RVA = "0x12A36AC", Offset = "0x12A36AC", VA = "0x12A36AC")]
		public HVRPunGrabberManager()
		{
		}
	}
	[Token(Token = "0x20005F3")]
	public class HVRPunLever : HVRLever, IPunObservable
	{
		[Token(Token = "0x400242B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool OthersRaiseEvents;

		[Token(Token = "0x17000483")]
		public PhotonView PhotonView
		{
			[Token(Token = "0x600297E")]
			[Address(RVA = "0x12A4D50", Offset = "0x12A4D50", VA = "0x12A4D50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600297F")]
			[Address(RVA = "0x12A4D58", Offset = "0x12A4D58", VA = "0x12A4D58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002980")]
		[Address(RVA = "0x12A4D60", Offset = "0x12A4D60", VA = "0x12A4D60")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002981")]
		[Address(RVA = "0x12A4DB8", Offset = "0x12A4DB8", VA = "0x12A4DB8", Slot = "4")]
		protected override void FixedUpdate()
		{
		}

		[Token(Token = "0x6002982")]
		[Address(RVA = "0x12A4DF0", Offset = "0x12A4DF0", VA = "0x12A4DF0", Slot = "7")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6002983")]
		[Address(RVA = "0x12A5084", Offset = "0x12A5084", VA = "0x12A5084", Slot = "5")]
		protected override void OnStepChanged(int step, bool raiseEvents = true)
		{
		}

		[Token(Token = "0x6002984")]
		[Address(RVA = "0x12A5214", Offset = "0x12A5214", VA = "0x12A5214", Slot = "6")]
		protected override void OnAngleChanged(float angle, float delta, float percent, bool raiseEvents = true)
		{
		}

		[Token(Token = "0x6002985")]
		[Address(RVA = "0x12A5458", Offset = "0x12A5458", VA = "0x12A5458", Slot = "8")]
		[PunRPC]
		protected virtual void PunOnStepChangedRPC(int step, bool raiseEvents)
		{
		}

		[Token(Token = "0x6002986")]
		[Address(RVA = "0x12A5464", Offset = "0x12A5464", VA = "0x12A5464", Slot = "9")]
		[PunRPC]
		protected virtual void PunOnAngleChangedRPC(float angle, float delta, float percent, bool raiseEvents)
		{
		}

		[Token(Token = "0x6002987")]
		[Address(RVA = "0x12A5470", Offset = "0x12A5470", VA = "0x12A5470")]
		public HVRPunLever()
		{
		}
	}
	[Token(Token = "0x20005F4")]
	public class HVRPUNManager : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x400242D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject Prefab;

		[Token(Token = "0x400242E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject Player;

		[Token(Token = "0x6002988")]
		[Address(RVA = "0x12A5480", Offset = "0x12A5480", VA = "0x12A5480")]
		private void Start()
		{
		}

		[Token(Token = "0x6002989")]
		[Address(RVA = "0x12A54D0", Offset = "0x12A54D0", VA = "0x12A54D0")]
		private void Update()
		{
		}

		[Token(Token = "0x600298A")]
		[Address(RVA = "0x12A54D4", Offset = "0x12A54D4", VA = "0x12A54D4", Slot = "45")]
		public override void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x600298B")]
		[Address(RVA = "0x12A5610", Offset = "0x12A5610", VA = "0x12A5610", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x600298C")]
		[Address(RVA = "0x12A5770", Offset = "0x12A5770", VA = "0x12A5770", Slot = "31")]
		public override void OnLeftRoom()
		{
		}

		[Token(Token = "0x600298D")]
		[Address(RVA = "0x12A581C", Offset = "0x12A581C", VA = "0x12A581C", Slot = "43")]
		public override void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x600298E")]
		[Address(RVA = "0x12A58A4", Offset = "0x12A58A4", VA = "0x12A58A4", Slot = "38")]
		public override void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x600298F")]
		[Address(RVA = "0x12A592C", Offset = "0x12A592C", VA = "0x12A592C")]
		public HVRPUNManager()
		{
		}
	}
	[Token(Token = "0x20005F5")]
	[RequireComponent(typeof(PhotonView))]
	public class HVRPUNPlayer : MonoBehaviour
	{
		[Token(Token = "0x17000484")]
		public PhotonView PhotonView
		{
			[Token(Token = "0x6002990")]
			[Address(RVA = "0x12A5934", Offset = "0x12A5934", VA = "0x12A5934")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002991")]
			[Address(RVA = "0x12A593C", Offset = "0x12A593C", VA = "0x12A593C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002992")]
		[Address(RVA = "0x12A5944", Offset = "0x12A5944", VA = "0x12A5944")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002993")]
		[Address(RVA = "0x12A5948", Offset = "0x12A5948", VA = "0x12A5948")]
		public void Setup()
		{
		}

		[Token(Token = "0x6002994")]
		[Address(RVA = "0x12A5E0C", Offset = "0x12A5E0C", VA = "0x12A5E0C")]
		public HVRPUNPlayer()
		{
		}
	}
	[Token(Token = "0x20005F7")]
	public class HVRPUNPlayerInputs : MonoBehaviour
	{
		[Token(Token = "0x4002434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRPlayerInputs PlayerInputs;

		[Token(Token = "0x600299A")]
		[Address(RVA = "0x12A5F44", Offset = "0x12A5F44", VA = "0x12A5F44")]
		public HVRPUNPlayerInputs()
		{
		}
	}
}
namespace HurricaneVR.Framework.Oculus
{
	[Token(Token = "0x20005F8")]
	public class HVROculusManager : MonoBehaviour
	{
		[Token(Token = "0x4002435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MonoBehaviour[] ComponentsToDisable;

		[Token(Token = "0x4002436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<MonoBehaviour, Vector3> Stuff;

		[Token(Token = "0x600299B")]
		[Address(RVA = "0x12A5F4C", Offset = "0x12A5F4C", VA = "0x12A5F4C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600299C")]
		[Address(RVA = "0x12A6038", Offset = "0x12A6038", VA = "0x12A6038")]
		private void OnResume()
		{
		}

		[Token(Token = "0x600299D")]
		[Address(RVA = "0x12A611C", Offset = "0x12A611C", VA = "0x12A611C")]
		private void OnPaused()
		{
		}

		[Token(Token = "0x600299E")]
		[Address(RVA = "0x12A6248", Offset = "0x12A6248", VA = "0x12A6248")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600299F")]
		[Address(RVA = "0x12A6334", Offset = "0x12A6334", VA = "0x12A6334")]
		public HVROculusManager()
		{
		}
	}
}
namespace HurricaneVR.Framework.Core.Player
{
	[Token(Token = "0x20005F9")]
	public class HVRHexaBodyHands : HVRPhysicsHands
	{
		[Token(Token = "0x4002437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("----HVRHexaBodyHands-----")]
		public HVRJointSettings ClimbStrength;

		[Token(Token = "0x4002438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HVRHandGrabber Grabber;

		[Token(Token = "0x4002439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform Camera;

		[Token(Token = "0x400243A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform Shoulder;

		[Token(Token = "0x400243B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float ArmLength;

		[Token(Token = "0x400243C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[UnityEngine.Tooltip("If true the joint will use controller angular velocity as it's target")]
		[Header("Torque Control")]
		public bool EnableTargetAngularVelocity;

		[Token(Token = "0x400243D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("Scaling factor to apply to target angular velocity")]
		[Range(0f, 1f)]
		public float AngularVelocityScale;

		[Token(Token = "0x400243E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 _previousCamera;

		[Token(Token = "0x400243F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _previousControllerPosition;

		[Token(Token = "0x4002440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion _previousRotation;

		[Token(Token = "0x60029A0")]
		[Address(RVA = "0x12A63BC", Offset = "0x12A63BC", VA = "0x12A63BC")]
		public void Disable()
		{
		}

		[Token(Token = "0x60029A1")]
		[Address(RVA = "0x12A6454", Offset = "0x12A6454", VA = "0x12A6454")]
		public void Enable()
		{
		}

		[Token(Token = "0x60029A2")]
		[Address(RVA = "0x12A64EC", Offset = "0x12A64EC", VA = "0x12A64EC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60029A3")]
		[Address(RVA = "0x12A6644", Offset = "0x12A6644", VA = "0x12A6644")]
		private void OnReleased(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60029A4")]
		[Address(RVA = "0x12A6650", Offset = "0x12A6650", VA = "0x12A6650")]
		private void OnGrabbed(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x60029A5")]
		[Address(RVA = "0x12A66E4", Offset = "0x12A66E4", VA = "0x12A66E4", Slot = "7")]
		protected override void FixedUpdate()
		{
		}

		[Token(Token = "0x60029A6")]
		[Address(RVA = "0x12A6C24", Offset = "0x12A6C24", VA = "0x12A6C24", Slot = "10")]
		public override void UpdateStrength(HVRJointSettings settings)
		{
		}

		[Token(Token = "0x60029A7")]
		[Address(RVA = "0x12A68D4", Offset = "0x12A68D4", VA = "0x12A68D4")]
		private void UpdateRotation()
		{
		}

		[Token(Token = "0x60029A8")]
		[Address(RVA = "0x12A6710", Offset = "0x12A6710", VA = "0x12A6710")]
		protected void UpdateJointAnchors()
		{
		}

		[Token(Token = "0x60029A9")]
		[Address(RVA = "0x12A6C4C", Offset = "0x12A6C4C", VA = "0x12A6C4C", Slot = "9")]
		public override void SetupJoint()
		{
		}

		[Token(Token = "0x60029AA")]
		[Address(RVA = "0x12A69B8", Offset = "0x12A69B8", VA = "0x12A69B8")]
		public void UpdateTargetVelocity()
		{
		}

		[Token(Token = "0x60029AB")]
		[Address(RVA = "0x12A6D98", Offset = "0x12A6D98", VA = "0x12A6D98")]
		public HVRHexaBodyHands()
		{
		}
	}
	[Token(Token = "0x20005FA")]
	public class CustomHVRCanvasFade : HVRCanvasFade
	{
		[Token(Token = "0x20005FB")]
		[CompilerGenerated]
		private sealed class <FadeRoutineFixedDuration>d__5 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002444")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002445")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002446")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float fadeLevel;

			[Token(Token = "0x4002447")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CustomHVRCanvasFade <>4__this;

			[Token(Token = "0x4002448")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float duration;

			[Token(Token = "0x17000485")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60029B3")]
				[Address(RVA = "0x12A71B8", Offset = "0x12A71B8", VA = "0x12A71B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000486")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029B5")]
				[Address(RVA = "0x12A7200", Offset = "0x12A7200", VA = "0x12A7200", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029B0")]
			[Address(RVA = "0x12A6F60", Offset = "0x12A6F60", VA = "0x12A6F60")]
			[DebuggerHidden]
			public <FadeRoutineFixedDuration>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60029B1")]
			[Address(RVA = "0x12A6F90", Offset = "0x12A6F90", VA = "0x12A6F90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029B2")]
			[Address(RVA = "0x12A6F94", Offset = "0x12A6F94", VA = "0x12A6F94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029B4")]
			[Address(RVA = "0x12A71C0", Offset = "0x12A71C0", VA = "0x12A71C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.UI.Image image;

		[Token(Token = "0x4002442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CoroutineHandle _coroutine;

		[Token(Token = "0x4002443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Tweener tweener;

		[Token(Token = "0x60029AC")]
		[Address(RVA = "0x12A6DB4", Offset = "0x12A6DB4", VA = "0x12A6DB4")]
		public void SetColor(UnityEngine.Color color)
		{
		}

		[Token(Token = "0x60029AD")]
		[Address(RVA = "0x12A6DD8", Offset = "0x12A6DD8", VA = "0x12A6DD8")]
		public void FadeFixedDuration(float fade, float duration)
		{
		}

		[Token(Token = "0x60029AE")]
		[Address(RVA = "0x12A6ED4", Offset = "0x12A6ED4", VA = "0x12A6ED4")]
		[IteratorStateMachine(typeof(<FadeRoutineFixedDuration>d__5))]
		protected IEnumerator<float> FadeRoutineFixedDuration(float fadeLevel, float duration)
		{
			return null;
		}

		[Token(Token = "0x60029AF")]
		[Address(RVA = "0x12A6F88", Offset = "0x12A6F88", VA = "0x12A6F88")]
		public CustomHVRCanvasFade()
		{
		}
	}
	[Token(Token = "0x20005FC")]
	public class HVRHandStuckHandler : MonoBehaviour
	{
		[Token(Token = "0x4002449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Time threshold while stuck before unstucking hand")]
		[Header("Settings")]
		public float TimeThreshold;

		[Token(Token = "0x400244A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Hand must be further than this from the controller")]
		public float DistanceThreshold;

		[Token(Token = "0x400244B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Angle between hand -> body and hand -> controller must be more than this to be considered stuck")]
		public float AngleTreshold;

		[Token(Token = "0x400244C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("Environment layers to block hand after resetting")]
		public LayerMask LayerMask;

		[Token(Token = "0x400244D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Transforms / Components")]
		public Transform Player;

		[Token(Token = "0x400244E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform Controller;

		[Token(Token = "0x400244F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ResetPoint;

		[Token(Token = "0x4002450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HVRHandGrabber Grabber;

		[Token(Token = "0x4002452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float _stuck;

		[Token(Token = "0x4002453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Collider[] _colliders;

		[Token(Token = "0x17000487")]
		public Rigidbody Hand
		{
			[Token(Token = "0x60029B6")]
			[Address(RVA = "0x12A725C", Offset = "0x12A725C", VA = "0x12A725C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60029B7")]
			[Address(RVA = "0x12A7264", Offset = "0x12A7264", VA = "0x12A7264")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60029B8")]
		[Address(RVA = "0x12A726C", Offset = "0x12A726C", VA = "0x12A726C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60029B9")]
		[Address(RVA = "0x12A72C4", Offset = "0x12A72C4", VA = "0x12A72C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60029BA")]
		[Address(RVA = "0x12A7328", Offset = "0x12A7328", VA = "0x12A7328", Slot = "5")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60029BB")]
		[Address(RVA = "0x12A7420", Offset = "0x12A7420", VA = "0x12A7420", Slot = "6")]
		protected virtual bool CheckStuck()
		{
			return default(bool);
		}

		[Token(Token = "0x60029BC")]
		[Address(RVA = "0x12A76AC", Offset = "0x12A76AC", VA = "0x12A76AC", Slot = "7")]
		protected virtual void SweepHand()
		{
		}

		[Token(Token = "0x60029BD")]
		[Address(RVA = "0x12A7BA4", Offset = "0x12A7BA4", VA = "0x12A7BA4")]
		public HVRHandStuckHandler()
		{
		}
	}
}
namespace HurricaneVR.Framework.Shared.HandPoser
{
	[Token(Token = "0x20005FD")]
	[RequireComponent(typeof(HVRIKTargets))]
	[RequireComponent(typeof(VRIK))]
	[ExecuteInEditMode]
	public class HVREditorIK : MonoBehaviour
	{
		[Token(Token = "0x4002454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HVRIKTargets Targets;

		[Token(Token = "0x4002455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRIK ik;

		[Token(Token = "0x17000488")]
		public Transform LeftTarget
		{
			[Token(Token = "0x60029BE")]
			[Address(RVA = "0x12A7BE0", Offset = "0x12A7BE0", VA = "0x12A7BE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000489")]
		public Transform RightTarget
		{
			[Token(Token = "0x60029BF")]
			[Address(RVA = "0x12A7BFC", Offset = "0x12A7BFC", VA = "0x12A7BFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60029C0")]
		[Address(RVA = "0x12A7C18", Offset = "0x12A7C18", VA = "0x12A7C18")]
		private void Start()
		{
		}

		[Token(Token = "0x60029C1")]
		[Address(RVA = "0x12A7CF4", Offset = "0x12A7CF4", VA = "0x12A7CF4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60029C2")]
		[Address(RVA = "0x12A7CF8", Offset = "0x12A7CF8", VA = "0x12A7CF8")]
		private void Update()
		{
		}

		[Token(Token = "0x60029C3")]
		[Address(RVA = "0x12A7E00", Offset = "0x12A7E00", VA = "0x12A7E00")]
		public HVREditorIK()
		{
		}
	}
}
namespace MarchingCubes
{
	[Token(Token = "0x20005FE")]
	[BurstCompile(FloatPrecision.Low, FloatMode.Fast)]
	public struct VertexSmootherJob : IJob
	{
		[Token(Token = "0x20005FF")]
		private struct VertexKeyJobified : IEquatable<VertexKeyJobified>
		{
			[Token(Token = "0x400245A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly long _x;

			[Token(Token = "0x400245B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly long _y;

			[Token(Token = "0x400245C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly long _z;

			[Token(Token = "0x400245D")]
			private const int Tolerance = 100000;

			[Token(Token = "0x60029C5")]
			[Address(RVA = "0x12A8C38", Offset = "0x12A8C38", VA = "0x12A8C38")]
			public VertexKeyJobified(Vector3 position)
			{
			}

			[Token(Token = "0x60029C6")]
			[Address(RVA = "0x12A8F3C", Offset = "0x12A8F3C", VA = "0x12A8F3C", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x60029C7")]
			[Address(RVA = "0x12A8F80", Offset = "0x12A8F80", VA = "0x12A8F80", Slot = "4")]
			public bool Equals(VertexKeyJobified other)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000600")]
		private struct VertexEntryJobified
		{
			[Token(Token = "0x400245E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FixedList128Bytes<int> TriangleIndex;

			[Token(Token = "0x400245F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public FixedList128Bytes<int> VertexIndex;

			[Token(Token = "0x4002460")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			private int _count;

			[Token(Token = "0x1700048A")]
			public int Count
			{
				[Token(Token = "0x60029C8")]
				[Address(RVA = "0x12A8FBC", Offset = "0x12A8FBC", VA = "0x12A8FBC")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x60029C9")]
			[Address(RVA = "0x12A8EC4", Offset = "0x12A8EC4", VA = "0x12A8EC4")]
			public void Add(int vertIndex, int triIndex)
			{
			}
		}

		[Token(Token = "0x4002456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Unity.Collections.ReadOnly]
		public NativeArray<Vector3> verts;

		[Token(Token = "0x4002457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[WriteOnly]
		public NativeArray<Vector3> normals;

		[Token(Token = "0x4002458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NativeArray<UnityEngine.Color> colors;

		[Token(Token = "0x4002459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Unity.Collections.ReadOnly]
		public NativeArray<int> tris;

		[Token(Token = "0x60029C4")]
		[Address(RVA = "0x12A7E08", Offset = "0x12A7E08", VA = "0x12A7E08", Slot = "4")]
		public void Execute()
		{
		}
	}
	[Token(Token = "0x2000601")]
	public struct Counter : IDisposable
	{
		[Token(Token = "0x4002461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Allocator allocator;

		[Token(Token = "0x4002462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[NativeDisableUnsafePtrRestriction]
		private unsafe int* _counter;

		[Token(Token = "0x1700048B")]
		public int Count
		{
			[Token(Token = "0x60029CA")]
			[Address(RVA = "0x12A8FC4", Offset = "0x12A8FC4", VA = "0x12A8FC4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60029CB")]
			[Address(RVA = "0x12A8FD0", Offset = "0x12A8FD0", VA = "0x12A8FD0")]
			set
			{
			}
		}

		[Token(Token = "0x60029CC")]
		[Address(RVA = "0x12A8FDC", Offset = "0x12A8FDC", VA = "0x12A8FDC")]
		public Counter(Allocator allocator)
		{
		}

		[Token(Token = "0x60029CD")]
		[Address(RVA = "0x12A900C", Offset = "0x12A900C", VA = "0x12A900C")]
		public int Increment()
		{
			return default(int);
		}

		[Token(Token = "0x60029CE")]
		[Address(RVA = "0x12A9028", Offset = "0x12A9028", VA = "0x12A9028", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000602")]
	public static class LookupTables
	{
		[Token(Token = "0x4002463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int[] EdgeIndexTable;

		[Token(Token = "0x4002464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int3[] CubeCorners;

		[Token(Token = "0x4002465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int[] EdgeTable;

		[Token(Token = "0x4002466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int[] TriangleTable;
	}
	[Token(Token = "0x2000603")]
	[BurstCompile(FloatPrecision.Low, FloatMode.Fast)]
	public struct MarchingCubesJob : IJob
	{
		[Token(Token = "0x4002467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Unity.Collections.ReadOnly]
		public NativeArray<float> densities;

		[Token(Token = "0x4002468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Unity.Collections.ReadOnly]
		public NativeArray<float> veinDensities;

		[Token(Token = "0x4002469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Unity.Collections.ReadOnly]
		public float isolevel;

		[Token(Token = "0x400246A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Unity.Collections.ReadOnly]
		public int chunkSize;

		[Token(Token = "0x400246B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[WriteOnly]
		public Counter counter;

		[Token(Token = "0x400246C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[NativeDisableParallelForRestriction]
		[WriteOnly]
		public NativeArray<MarchingCubesVertexData> vertices;

		[Token(Token = "0x400246D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[WriteOnly]
		[NativeDisableParallelForRestriction]
		public NativeArray<int> triangles;

		[Token(Token = "0x400246E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public NativeArray<Color32> colors;

		[Token(Token = "0x400246F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[WriteOnly]
		public float averageDensity;

		[Token(Token = "0x60029D0")]
		[Address(RVA = "0x12A923C", Offset = "0x12A923C", VA = "0x12A923C", Slot = "4")]
		public void Execute()
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x60029D1")]
		[Address(RVA = "0x12A98F0", Offset = "0x12A98F0", VA = "0x12A98F0")]
		private VoxelCorners<float> GetDensities(int3 localPosition)
		{
			return default(VoxelCorners<float>);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60029D2")]
		[Address(RVA = "0x12A9A14", Offset = "0x12A9A14", VA = "0x12A9A14")]
		private VoxelCorners<int3> GetCorners(int3 position)
		{
			return default(VoxelCorners<int3>);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60029D3")]
		[Address(RVA = "0x12A9B28", Offset = "0x12A9B28", VA = "0x12A9B28")]
		private float3 VertexInterpolate(float3 p1, float3 p2, float v1, float v2, float isolevel)
		{
			return default(float3);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60029D4")]
		[Address(RVA = "0x12A9B68", Offset = "0x12A9B68", VA = "0x12A9B68")]
		private VertexList GenerateVertexList(VoxelCorners<float> voxelDensities, VoxelCorners<int3> voxelCorners, int edgeIndex, float isolevel)
		{
			return default(VertexList);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60029D5")]
		[Address(RVA = "0x12A9E40", Offset = "0x12A9E40", VA = "0x12A9E40")]
		public static byte CalculateCubeIndex(VoxelCorners<float> voxelDensities, float isolevel)
		{
			return default(byte);
		}
	}
	[Token(Token = "0x2000604")]
	public static class Utils
	{
		[MethodImpl(256)]
		[Token(Token = "0x60029D6")]
		[Address(RVA = "0x12A9F44", Offset = "0x12A9F44", VA = "0x12A9F44")]
		public static int3 FloorToMultipleOfX(this float3 n, int x)
		{
			return default(int3);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60029D7")]
		[Address(RVA = "0x12AA078", Offset = "0x12AA078", VA = "0x12AA078")]
		public static Vector3Int ToVectorInt(this int3 n)
		{
			return default(Vector3Int);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60029D8")]
		[Address(RVA = "0x12AA080", Offset = "0x12AA080", VA = "0x12AA080")]
		public static int3 Mod(this int3 n, int x)
		{
			return default(int3);
		}

		[Token(Token = "0x60029D9")]
		public static void CopyToFast<T>(this NativeSlice<T> source, T[] target) where T : struct
		{
		}

		[Token(Token = "0x60029DA")]
		[Address(RVA = "0x12AA0C8", Offset = "0x12AA0C8", VA = "0x12AA0C8")]
		public static PlaneLineIntersectionResult PlaneLineIntersection(float3 planeOrigin, float3 planeNormal, float3 lineOrigin, float3 lineDirection, out float3 intersectionPoint)
		{
			return default(PlaneLineIntersectionResult);
		}
	}
	[Token(Token = "0x2000605")]
	public struct VertexList
	{
		[Token(Token = "0x4002470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float3 _c1;

		[Token(Token = "0x4002471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float3 _c2;

		[Token(Token = "0x4002472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float3 _c3;

		[Token(Token = "0x4002473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float3 _c4;

		[Token(Token = "0x4002474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float3 _c5;

		[Token(Token = "0x4002475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float3 _c6;

		[Token(Token = "0x4002476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float3 _c7;

		[Token(Token = "0x4002477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float3 _c8;

		[Token(Token = "0x4002478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float3 _c9;

		[Token(Token = "0x4002479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float3 _c10;

		[Token(Token = "0x400247A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float3 _c11;

		[Token(Token = "0x400247B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float3 _c12;

		[Token(Token = "0x1700048C")]
		public float3 this[int index]
		{
			[Token(Token = "0x60029DB")]
			[Address(RVA = "0x12A97BC", Offset = "0x12A97BC", VA = "0x12A97BC")]
			get
			{
				return default(float3);
			}
			[Token(Token = "0x60029DC")]
			[Address(RVA = "0x12A9D44", Offset = "0x12A9D44", VA = "0x12A9D44")]
			set
			{
			}
		}
	}
	[Token(Token = "0x2000606")]
	public struct VoxelCorners<T>
	{
		[Token(Token = "0x1700048D")]
		public T Corner1
		{
			[Token(Token = "0x60029DD")]
			[CompilerGenerated]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x60029DE")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700048E")]
		public T Corner2
		{
			[Token(Token = "0x60029DF")]
			[CompilerGenerated]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x60029E0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700048F")]
		public T Corner3
		{
			[Token(Token = "0x60029E1")]
			[CompilerGenerated]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x60029E2")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000490")]
		public T Corner4
		{
			[Token(Token = "0x60029E3")]
			[CompilerGenerated]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x60029E4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000491")]
		public T Corner5
		{
			[Token(Token = "0x60029E5")]
			[CompilerGenerated]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x60029E6")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000492")]
		public T Corner6
		{
			[Token(Token = "0x60029E7")]
			[CompilerGenerated]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x60029E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000493")]
		public T Corner7
		{
			[Token(Token = "0x60029E9")]
			[CompilerGenerated]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x60029EA")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000494")]
		public T Corner8
		{
			[Token(Token = "0x60029EB")]
			[CompilerGenerated]
			readonly get
			{
				return (T)null;
			}
			[Token(Token = "0x60029EC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000495")]
		public T this[int index]
		{
			[Token(Token = "0x60029ED")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60029EE")]
			set
			{
			}
		}
	}
}
namespace MarchingCubes.DiggingArea
{
	[Token(Token = "0x2000607")]
	[SelectionBase]
	public class DiggingArea : MonoBehaviourPunCallbacks
	{
		[Serializable]
		[Token(Token = "0x2000608")]
		public class ChunkSave
		{
			[Token(Token = "0x40024C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int3 coordinates;

			[Token(Token = "0x40024C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float[] densities;

			[Token(Token = "0x40024C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float[] veinDensities;

			[Token(Token = "0x6002A36")]
			[Address(RVA = "0x12ADBCC", Offset = "0x12ADBCC", VA = "0x12ADBCC")]
			public ChunkSave()
			{
			}
		}

		[Token(Token = "0x2000609")]
		private struct EditTerrainData
		{
			[Token(Token = "0x40024C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 point;

			[Token(Token = "0x40024CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float deformSpeed;

			[Token(Token = "0x40024CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float range;
		}

		[Token(Token = "0x200060A")]
		[CompilerGenerated]
		private sealed class <LoadDataAsync>d__85 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40024CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40024CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40024CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DiggingArea <>4__this;

			[Token(Token = "0x40024CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private ResourceRequest <asyncLoad>5__2;

			[Token(Token = "0x1700049D")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002A3A")]
				[Address(RVA = "0x12B0310", Offset = "0x12B0310", VA = "0x12B0310", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700049E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A3C")]
				[Address(RVA = "0x12B0358", Offset = "0x12B0358", VA = "0x12B0358", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A37")]
			[Address(RVA = "0x12AB060", Offset = "0x12AB060", VA = "0x12AB060")]
			[DebuggerHidden]
			public <LoadDataAsync>d__85(int <>1__state)
			{
			}

			[Token(Token = "0x6002A38")]
			[Address(RVA = "0x12B0148", Offset = "0x12B0148", VA = "0x12B0148", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A39")]
			[Address(RVA = "0x12B014C", Offset = "0x12B014C", VA = "0x12B014C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A3B")]
			[Address(RVA = "0x12B0318", Offset = "0x12B0318", VA = "0x12B0318", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200060B")]
		[CompilerGenerated]
		private sealed class <GenerateCoroutine>d__101 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40024D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40024D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40024D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DiggingArea <>4__this;

			[Token(Token = "0x40024D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool invokeCallBacks;

			[Token(Token = "0x40024D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool askMasterForDiggingAreaUpdates;

			[Token(Token = "0x40024D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int <chunksProcessed>5__2;

			[Token(Token = "0x40024D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__3;

			[Token(Token = "0x1700049F")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002A40")]
				[Address(RVA = "0x12B0908", Offset = "0x12B0908", VA = "0x12B0908", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004A0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A42")]
				[Address(RVA = "0x12B0950", Offset = "0x12B0950", VA = "0x12B0950", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A3D")]
			[Address(RVA = "0x12ACC04", Offset = "0x12ACC04", VA = "0x12ACC04")]
			[DebuggerHidden]
			public <GenerateCoroutine>d__101(int <>1__state)
			{
			}

			[Token(Token = "0x6002A3E")]
			[Address(RVA = "0x12B03B4", Offset = "0x12B03B4", VA = "0x12B03B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A3F")]
			[Address(RVA = "0x12B03B8", Offset = "0x12B03B8", VA = "0x12B03B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A41")]
			[Address(RVA = "0x12B0910", Offset = "0x12B0910", VA = "0x12B0910", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200060C")]
		[CompilerGenerated]
		private sealed class <_EditTerrainCoroutine>d__105 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40024D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40024D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40024D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DiggingArea <>4__this;

			[Token(Token = "0x40024DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3[] tempPoints;

			[Token(Token = "0x40024DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float[] tempDeformSpeeds;

			[Token(Token = "0x40024DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float[] tempRanges;

			[Token(Token = "0x40024DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__2;

			[Token(Token = "0x170004A1")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002A46")]
				[Address(RVA = "0x12B0A80", Offset = "0x12B0A80", VA = "0x12B0A80", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004A2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A48")]
				[Address(RVA = "0x12B0AC8", Offset = "0x12B0AC8", VA = "0x12B0AC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A43")]
			[Address(RVA = "0x12AD2F0", Offset = "0x12AD2F0", VA = "0x12AD2F0")]
			[DebuggerHidden]
			public <_EditTerrainCoroutine>d__105(int <>1__state)
			{
			}

			[Token(Token = "0x6002A44")]
			[Address(RVA = "0x12B09AC", Offset = "0x12B09AC", VA = "0x12B09AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A45")]
			[Address(RVA = "0x12B09B0", Offset = "0x12B09B0", VA = "0x12B09B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A47")]
			[Address(RVA = "0x12B0A88", Offset = "0x12B0A88", VA = "0x12B0A88", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200060D")]
		[CompilerGenerated]
		private sealed class <CreateHeightmapTerrain>d__112 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40024DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40024DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40024E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DiggingArea <>4__this;

			[Token(Token = "0x170004A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A4C")]
				[Address(RVA = "0x12B0D3C", Offset = "0x12B0D3C", VA = "0x12B0D3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A4E")]
				[Address(RVA = "0x12B0D84", Offset = "0x12B0D84", VA = "0x12B0D84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A49")]
			[Address(RVA = "0x12ADBD4", Offset = "0x12ADBD4", VA = "0x12ADBD4")]
			[DebuggerHidden]
			public <CreateHeightmapTerrain>d__112(int <>1__state)
			{
			}

			[Token(Token = "0x6002A4A")]
			[Address(RVA = "0x12B0B24", Offset = "0x12B0B24", VA = "0x12B0B24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A4B")]
			[Address(RVA = "0x12B0B28", Offset = "0x12B0B28", VA = "0x12B0B28", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A4D")]
			[Address(RVA = "0x12B0D44", Offset = "0x12B0D44", VA = "0x12B0D44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200060E")]
		[CompilerGenerated]
		private sealed class <CombineMesh>d__122 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40024E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40024E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40024E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DiggingArea <>4__this;

			[Token(Token = "0x170004A5")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002A52")]
				[Address(RVA = "0x12B17CC", Offset = "0x12B17CC", VA = "0x12B17CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004A6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A54")]
				[Address(RVA = "0x12B1814", Offset = "0x12B1814", VA = "0x12B1814", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A4F")]
			[Address(RVA = "0x12AE7DC", Offset = "0x12AE7DC", VA = "0x12AE7DC")]
			[DebuggerHidden]
			public <CombineMesh>d__122(int <>1__state)
			{
			}

			[Token(Token = "0x6002A50")]
			[Address(RVA = "0x12B0D8C", Offset = "0x12B0D8C", VA = "0x12B0D8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A51")]
			[Address(RVA = "0x12B0D90", Offset = "0x12B0D90", VA = "0x12B0D90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A53")]
			[Address(RVA = "0x12B17D4", Offset = "0x12B17D4", VA = "0x12B17D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200060F")]
		[CompilerGenerated]
		private sealed class <EditTerrainCoroutine>d__135 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40024E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40024E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40024E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DiggingArea <>4__this;

			[Token(Token = "0x40024E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int intRange;

			[Token(Token = "0x40024E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int hitX;

			[Token(Token = "0x40024E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int hitY;

			[Token(Token = "0x40024EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int hitZ;

			[Token(Token = "0x40024EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 point;

			[Token(Token = "0x40024EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float range;

			[Token(Token = "0x40024ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float deformSpeed;

			[Token(Token = "0x40024EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector3 oldPoint;

			[Token(Token = "0x170004A7")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002A58")]
				[Address(RVA = "0x12B3094", Offset = "0x12B3094", VA = "0x12B3094", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004A8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A5A")]
				[Address(RVA = "0x12B30DC", Offset = "0x12B30DC", VA = "0x12B30DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A55")]
			[Address(RVA = "0x12B2DC8", Offset = "0x12B2DC8", VA = "0x12B2DC8")]
			[DebuggerHidden]
			public <EditTerrainCoroutine>d__135(int <>1__state)
			{
			}

			[Token(Token = "0x6002A56")]
			[Address(RVA = "0x12B2DF0", Offset = "0x12B2DF0", VA = "0x12B2DF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A57")]
			[Address(RVA = "0x12B2DF4", Offset = "0x12B2DF4", VA = "0x12B2DF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A59")]
			[Address(RVA = "0x12B309C", Offset = "0x12B309C", VA = "0x12B309C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material debugMaterial;

		[Token(Token = "0x4002485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Shader androidShader;

		[Token(Token = "0x4002486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int chunkSize;

		[Token(Token = "0x4002487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float isolevel;

		[Token(Token = "0x4002488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<int3, int> loadedChunksDictionary;

		[Token(Token = "0x4002489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<int3, int> savedChunksDictionary;

		[Token(Token = "0x400248A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Mesh[] allMeshes;

		[Token(Token = "0x400248B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DiggingChunk[] allChunks;

		[Token(Token = "0x400248C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool showGizmosWhenPlaying;

		[Token(Token = "0x400248D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public DiggingAreaData diggingAreaData;

		[NonSerialized]
		[Token(Token = "0x400248E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DiggingAreaData diggingAreaDataNonSerialized;

		[Token(Token = "0x400248F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string diggingAreaDataName;

		[Token(Token = "0x4002490")]
		public const float scale = 0.5f;

		[Token(Token = "0x4002491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Action<DiggingArea> onFinishedFirstGenerate;

		[Token(Token = "0x4002492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Action<DiggingArea> onDiggingAreaDeformed;

		[Token(Token = "0x4002493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<DiggingChunk> potentialLootChunks;

		[Token(Token = "0x4002495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public int chunksInitialized;

		[Token(Token = "0x4002496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool _materialOverrided;

		[Token(Token = "0x4002497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material _selectedMineableMaterial;

		[Token(Token = "0x4002499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _chunkCapacity;

		[Token(Token = "0x400249A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool _generateNewArea;

		[Token(Token = "0x400249B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool _saveArea;

		[Token(Token = "0x400249C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		private bool _loadArea;

		[Token(Token = "0x400249D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		private bool _isCombining;

		[Token(Token = "0x400249E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _meshChanged;

		[Token(Token = "0x400249F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private MeshFilter _combinedMeshFilter;

		[Token(Token = "0x40024A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private MeshCollider _combinedMeshCollider;

		[Token(Token = "0x40024A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int _oreNodesMined;

		[Token(Token = "0x40024A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private bool _needToSave;

		[Token(Token = "0x40024A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _nextSaveTime;

		[Token(Token = "0x40024A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool _spawnFinished;

		[Token(Token = "0x40024A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		private bool _generateInEditor;

		[Token(Token = "0x40024A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
		private bool _firstChunksFinished;

		[Token(Token = "0x40024A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<DiggingChunk> chunksThatNeedCompletion;

		[Token(Token = "0x40024A8")]
		private const string diggingAreaPath = "Assets/FreeminingAreas/Resources/";

		[Token(Token = "0x40024AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _generateStartTime;

		[Token(Token = "0x40024AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _combiningStartTime;

		[Token(Token = "0x40024AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private JobHandle _jobHandle;

		[Token(Token = "0x40024AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private NativeArray<Vector3> _vertices;

		[Token(Token = "0x40024AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private NativeArray<Vector3> _normals;

		[Token(Token = "0x40024B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private NativeArray<UnityEngine.Color> _colors;

		[Token(Token = "0x40024B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private NativeArray<int> _triangles;

		[Token(Token = "0x40024B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Mesh _newMesh;

		[Token(Token = "0x40024B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Mesh _tempMesh;

		[Token(Token = "0x40024B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool _jobStarted;

		[Token(Token = "0x40024B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
		private bool _initialized;

		[Token(Token = "0x40024B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private HashSet<int3> _checkedChunkPositions;

		[Token(Token = "0x40024B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Mesh _emptyStaticMesh;

		[Token(Token = "0x40024B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int debug_TotalChunksSpawned;

		[Token(Token = "0x40024B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Dictionary<LootSpawnAndDespawnManager.LootType, int> cachedLootWeightDictionary;

		[Token(Token = "0x40024BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private List<LootSpawnAndDespawnManager.LootType> oreType;

		[Token(Token = "0x40024BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private RunGenerationData.LootModifier lootModifier;

		[Token(Token = "0x40024BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private CombineInstance[] _combineInstance;

		[Token(Token = "0x40024BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private bool disposeOnDisable;

		[Token(Token = "0x40024BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
		private bool _allowComplete;

		[Token(Token = "0x40024BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private CoroutineHandle meshcombineHandle;

		[Token(Token = "0x40024C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private List<Mesh> activeMeshList;

		[Token(Token = "0x40024C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private List<float4x4> activeMatrixList;

		[NonSerialized]
		[Token(Token = "0x40024C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public List<DiggingChunk> chunksThatNeedGenerating;

		[Token(Token = "0x40024C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private readonly object[] instantiationData;

		[Token(Token = "0x40024C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private List<EditTerrainData> stashedEditTerrainData;

		[Token(Token = "0x40024C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private bool _loadingAreaData;

		[Token(Token = "0x17000496")]
		public int ChunkSize
		{
			[Token(Token = "0x60029EF")]
			[Address(RVA = "0x12AA308", Offset = "0x12AA308", VA = "0x12AA308")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000497")]
		public float Isolevel
		{
			[Token(Token = "0x60029F0")]
			[Address(RVA = "0x12AA310", Offset = "0x12AA310", VA = "0x12AA310")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000498")]
		public GameObject combinedMesh
		{
			[Token(Token = "0x60029F1")]
			[Address(RVA = "0x12AA318", Offset = "0x12AA318", VA = "0x12AA318")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60029F2")]
			[Address(RVA = "0x12AA320", Offset = "0x12AA320", VA = "0x12AA320")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000499")]
		public Texture CachedMaterialTexture
		{
			[Token(Token = "0x60029F3")]
			[Address(RVA = "0x12AA328", Offset = "0x12AA328", VA = "0x12AA328")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60029F4")]
			[Address(RVA = "0x12AA330", Offset = "0x12AA330", VA = "0x12AA330")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700049A")]
		public MeshCollider GetMeshCollider
		{
			[Token(Token = "0x60029F5")]
			[Address(RVA = "0x12AA338", Offset = "0x12AA338", VA = "0x12AA338")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049B")]
		public bool Editing
		{
			[Token(Token = "0x60029F6")]
			[Address(RVA = "0x12AA340", Offset = "0x12AA340", VA = "0x12AA340")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60029F7")]
			[Address(RVA = "0x12AA348", Offset = "0x12AA348", VA = "0x12AA348")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700049C")]
		public bool VeinEditingMode
		{
			[Token(Token = "0x60029F8")]
			[Address(RVA = "0x12AA354", Offset = "0x12AA354", VA = "0x12AA354")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60029F9")]
			[Address(RVA = "0x12AA35C", Offset = "0x12AA35C", VA = "0x12AA35C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60029FA")]
		[Address(RVA = "0x12AA368", Offset = "0x12AA368", VA = "0x12AA368")]
		private void Awake()
		{
		}

		[Token(Token = "0x60029FB")]
		[Address(RVA = "0x12AA658", Offset = "0x12AA658", VA = "0x12AA658")]
		private bool Initiliaze()
		{
			return default(bool);
		}

		[Token(Token = "0x60029FC")]
		[Address(RVA = "0x12AABA4", Offset = "0x12AABA4", VA = "0x12AABA4")]
		private void LoadData()
		{
		}

		[Token(Token = "0x60029FD")]
		[Address(RVA = "0x12AAFEC", Offset = "0x12AAFEC", VA = "0x12AAFEC")]
		[IteratorStateMachine(typeof(<LoadDataAsync>d__85))]
		public IEnumerator<float> LoadDataAsync()
		{
			return null;
		}

		[Token(Token = "0x60029FE")]
		[Address(RVA = "0x12AB088", Offset = "0x12AB088", VA = "0x12AB088")]
		public void EnableEditingMode()
		{
		}

		[Token(Token = "0x60029FF")]
		[Address(RVA = "0x12AB7A0", Offset = "0x12AB7A0", VA = "0x12AB7A0", Slot = "29")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6002A00")]
		[Address(RVA = "0x12ABC6C", Offset = "0x12ABC6C", VA = "0x12ABC6C")]
		private void UnloadData()
		{
		}

		[Token(Token = "0x6002A01")]
		[Address(RVA = "0x12ABD00", Offset = "0x12ABD00", VA = "0x12ABD00")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002A02")]
		[Address(RVA = "0x12ABD28", Offset = "0x12ABD28", VA = "0x12ABD28")]
		public void OverrideDisposeOnDisable(bool disposeOnDisable)
		{
		}

		[Token(Token = "0x6002A03")]
		[Address(RVA = "0x12AB7DC", Offset = "0x12AB7DC", VA = "0x12AB7DC")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002A04")]
		[Address(RVA = "0x12ABD34", Offset = "0x12ABD34", VA = "0x12ABD34")]
		private void DisposeSmoothingArrays()
		{
		}

		[Token(Token = "0x6002A05")]
		[Address(RVA = "0x12ABE6C", Offset = "0x12ABE6C", VA = "0x12ABE6C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6002A06")]
		[Address(RVA = "0x12ABECC", Offset = "0x12ABECC", VA = "0x12ABECC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6002A07")]
		[Address(RVA = "0x12ABF5C", Offset = "0x12ABF5C", VA = "0x12ABF5C")]
		public bool ConvertToUseResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A08")]
		[Address(RVA = "0x12AC084", Offset = "0x12AC084", VA = "0x12AC084")]
		private void CreateNewDiggingArea_EditorOnly()
		{
		}

		[Token(Token = "0x6002A09")]
		[Address(RVA = "0x12AC088", Offset = "0x12AC088", VA = "0x12AC088")]
		private string GetRootName()
		{
			return null;
		}

		[Token(Token = "0x6002A0A")]
		[Address(RVA = "0x12AC0C8", Offset = "0x12AC0C8", VA = "0x12AC0C8")]
		private void RenameDiggingArea_EditorOnly()
		{
		}

		[Token(Token = "0x6002A0B")]
		[Address(RVA = "0x12AA4D0", Offset = "0x12AA4D0", VA = "0x12AA4D0")]
		private void CheckForErrors()
		{
		}

		[Token(Token = "0x6002A0C")]
		[Address(RVA = "0x12AB120", Offset = "0x12AB120", VA = "0x12AB120")]
		public void Generate(bool askMasterForDiggingAreaUpdates = false, bool invokeCallBacks = true)
		{
		}

		[Token(Token = "0x6002A0D")]
		[Address(RVA = "0x12ACB70", Offset = "0x12ACB70", VA = "0x12ACB70")]
		[IteratorStateMachine(typeof(<GenerateCoroutine>d__101))]
		public IEnumerator<float> GenerateCoroutine(bool askMasterForDiggingAreaUpdates = false, bool invokeCallBacks = true)
		{
			return null;
		}

		[Token(Token = "0x6002A0E")]
		[Address(RVA = "0x12ACA3C", Offset = "0x12ACA3C", VA = "0x12ACA3C")]
		private void AskMasterForDiggingAreaUpdates()
		{
		}

		[Token(Token = "0x6002A0F")]
		[Address(RVA = "0x12ACC2C", Offset = "0x12ACC2C", VA = "0x12ACC2C")]
		[PunRPC]
		private void ClientAskedDiggingAreaUpdatesRPC(Player sendToPlayer)
		{
		}

		[Token(Token = "0x6002A10")]
		[Address(RVA = "0x12AD090", Offset = "0x12AD090", VA = "0x12AD090")]
		[PunRPC]
		private void GetDiggingAreaUpdatesRPC(Vector3[] tempPoints, float[] tempDeformSpeeds, float[] tempRanges, int[] oreTypes, int lootModifier)
		{
		}

		[Token(Token = "0x6002A11")]
		[Address(RVA = "0x12AD230", Offset = "0x12AD230", VA = "0x12AD230")]
		[IteratorStateMachine(typeof(<_EditTerrainCoroutine>d__105))]
		private IEnumerator<float> _EditTerrainCoroutine(Vector3[] tempPoints, float[] tempDeformSpeeds, float[] tempRanges)
		{
			return null;
		}

		[Token(Token = "0x6002A12")]
		[Address(RVA = "0x12AAC34", Offset = "0x12AAC34", VA = "0x12AAC34")]
		private void CreateCombinedMeshObject()
		{
		}

		[Token(Token = "0x6002A13")]
		[Address(RVA = "0x12AC0CC", Offset = "0x12AC0CC", VA = "0x12AC0CC")]
		private void SelectWallMaterialAndOreType([Optional] List<LootSpawnAndDespawnManager.LootType> forcedOreType, RunGenerationData.LootModifier forcedLootModifier = RunGenerationData.LootModifier.none)
		{
		}

		[Token(Token = "0x6002A14")]
		[Address(RVA = "0x12AD7C0", Offset = "0x12AD7C0", VA = "0x12AD7C0")]
		private void CacheRockAlbedo()
		{
		}

		[Token(Token = "0x6002A15")]
		[Address(RVA = "0x12AD318", Offset = "0x12AD318", VA = "0x12AD318")]
		private Material SelectMaterial(int wallTier)
		{
			return null;
		}

		[Token(Token = "0x6002A16")]
		[Address(RVA = "0x12AD848", Offset = "0x12AD848", VA = "0x12AD848", Slot = "54")]
		public virtual int GetWallTier()
		{
			return default(int);
		}

		[Token(Token = "0x6002A17")]
		[Address(RVA = "0x12AD970", Offset = "0x12AD970", VA = "0x12AD970")]
		public ChunkSave[] GetFormatForSaving()
		{
			return null;
		}

		[Token(Token = "0x6002A18")]
		[Address(RVA = "0x12AC9C8", Offset = "0x12AC9C8", VA = "0x12AC9C8")]
		[IteratorStateMachine(typeof(<CreateHeightmapTerrain>d__112))]
		private IEnumerator CreateHeightmapTerrain()
		{
			return null;
		}

		[Token(Token = "0x6002A19")]
		[Address(RVA = "0x12AC8B8", Offset = "0x12AC8B8", VA = "0x12AC8B8")]
		private void SetChunkEdges(int x, int y, int z, DiggingChunk chunk)
		{
		}

		[Token(Token = "0x6002A1A")]
		[Address(RVA = "0x12AC748", Offset = "0x12AC748", VA = "0x12AC748")]
		private DiggingChunk LoadChunk(int3 chunkCoordinate, float[] densities, float[] goldDensities)
		{
			return null;
		}

		[Token(Token = "0x6002A1B")]
		[Address(RVA = "0x12AC83C", Offset = "0x12AC83C", VA = "0x12AC83C")]
		private DiggingChunk CreateChunk(int3 chunkCoordinate)
		{
			return null;
		}

		[Token(Token = "0x6002A1C")]
		[Address(RVA = "0x12ADBFC", Offset = "0x12ADBFC", VA = "0x12ADBFC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002A1D")]
		[Address(RVA = "0x12AE100", Offset = "0x12AE100", VA = "0x12AE100")]
		private void SetGizmoColor(bool gizmoValue)
		{
		}

		[Token(Token = "0x6002A1E")]
		[Address(RVA = "0x12AE130", Offset = "0x12AE130", VA = "0x12AE130")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A1F")]
		[Address(RVA = "0x12AE3E8", Offset = "0x12AE3E8", VA = "0x12AE3E8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002A20")]
		[Address(RVA = "0x12AE790", Offset = "0x12AE790", VA = "0x12AE790")]
		public void OnFinishedEvents()
		{
		}

		[Token(Token = "0x6002A21")]
		[Address(RVA = "0x12AE7B0", Offset = "0x12AE7B0", VA = "0x12AE7B0")]
		public void NeedSave()
		{
		}

		[Token(Token = "0x6002A22")]
		[Address(RVA = "0x12AE71C", Offset = "0x12AE71C", VA = "0x12AE71C")]
		[IteratorStateMachine(typeof(<CombineMesh>d__122))]
		private IEnumerator<float> CombineMesh()
		{
			return null;
		}

		[Token(Token = "0x6002A23")]
		[Address(RVA = "0x12AE610", Offset = "0x12AE610", VA = "0x12AE610")]
		private void CompleteMeshSmoothing()
		{
		}

		[Token(Token = "0x6002A24")]
		[Address(RVA = "0x12AE31C", Offset = "0x12AE31C", VA = "0x12AE31C")]
		public bool AreChunksCompleted()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A25")]
		[Address(RVA = "0x12AE804", Offset = "0x12AE804", VA = "0x12AE804")]
		public static bool EqualVector3Fast(Vector3 a, Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A26")]
		[Address(RVA = "0x12AE82C", Offset = "0x12AE82C", VA = "0x12AE82C")]
		public bool TryGetChunk(int3 worldPosition, out DiggingChunk chunk)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A27")]
		[Address(RVA = "0x12AEB10", Offset = "0x12AEB10", VA = "0x12AEB10")]
		public float GetDensity(int3 worldPosition)
		{
			return default(float);
		}

		[Token(Token = "0x6002A28")]
		[Address(RVA = "0x12AEBAC", Offset = "0x12AEBAC", VA = "0x12AEBAC")]
		public float GetVeinDensity(int3 worldPosition)
		{
			return default(float);
		}

		[Token(Token = "0x6002A29")]
		[Address(RVA = "0x12AEC48", Offset = "0x12AEC48", VA = "0x12AEC48")]
		public void SetDensity(float density, int3 worldPosition)
		{
		}

		[Token(Token = "0x6002A2A")]
		[Address(RVA = "0x12AEEF0", Offset = "0x12AEEF0", VA = "0x12AEEF0")]
		[PunRPC]
		public void EditTerrainRPC(Vector3 point, float deformSpeed, float range)
		{
		}

		[Token(Token = "0x6002A2B")]
		[Address(RVA = "0x12AF3E8", Offset = "0x12AF3E8", VA = "0x12AF3E8")]
		[IteratorStateMachine(typeof(<EditTerrainCoroutine>d__135))]
		private IEnumerator<float> EditTerrainCoroutine(Vector3 point, float deformSpeed, float range, Vector3 oldPoint, int hitX, int hitY, int hitZ, int intRange)
		{
			return null;
		}

		[Token(Token = "0x6002A2C")]
		[Address(RVA = "0x12AF4D4", Offset = "0x12AF4D4", VA = "0x12AF4D4")]
		public void SetDensityPickaxe(float density, int worldPositionX, int worldPositionY, int worldPositionZ, Vector3 hitPos)
		{
		}

		[Token(Token = "0x6002A2D")]
		[Address(RVA = "0x12AF9C0", Offset = "0x12AF9C0", VA = "0x12AF9C0")]
		public void SetDensityDeformer(float density, int worldPositionX, int worldPositionY, int worldPositionZ, bool deformVein)
		{
		}

		[Token(Token = "0x6002A2E")]
		[Address(RVA = "0x12AE9CC", Offset = "0x12AE9CC", VA = "0x12AE9CC")]
		public int3 WorldPositionToCoordinate(float3 worldPosition)
		{
			return default(int3);
		}

		[Token(Token = "0x6002A2F")]
		[Address(RVA = "0x12AFE98", Offset = "0x12AFE98", VA = "0x12AFE98")]
		public void SetMeshChanged()
		{
		}

		[Token(Token = "0x6002A30")]
		[Address(RVA = "0x12AFEA4", Offset = "0x12AFEA4", VA = "0x12AFEA4")]
		public bool GetFirstChunksFinished()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A31")]
		[Address(RVA = "0x12AFEAC", Offset = "0x12AFEAC", VA = "0x12AFEAC")]
		public void KillCoroutines()
		{
		}

		[Token(Token = "0x6002A32")]
		[Address(RVA = "0x12AFEB4", Offset = "0x12AFEB4", VA = "0x12AFEB4")]
		public void OverrideMaterial(Material mat)
		{
		}

		[Token(Token = "0x6002A33")]
		[Address(RVA = "0x12AFED8", Offset = "0x12AFED8", VA = "0x12AFED8")]
		[ContextMenu("DebugListLoots")]
		public void DebugListLoots()
		{
		}

		[Token(Token = "0x6002A34")]
		[Address(RVA = "0x12AFF38", Offset = "0x12AFF38", VA = "0x12AFF38")]
		public DiggingArea()
		{
		}
	}
	[Token(Token = "0x2000610")]
	public struct MarchingCubesVertexData
	{
		[Token(Token = "0x40024EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float3 position;

		[Token(Token = "0x40024F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float3 normal;

		[Token(Token = "0x40024F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color32 color;

		[Token(Token = "0x40024F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly VertexAttributeDescriptor[] VertexBufferMemoryLayout;

		[Token(Token = "0x6002A5B")]
		[Address(RVA = "0x12B3138", Offset = "0x12B3138", VA = "0x12B3138")]
		public MarchingCubesVertexData(float3 position, float3 normal, Color32 color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000611")]
	public class DiggingAreaData : ScriptableObject
	{
		[Token(Token = "0x40024F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Set the size of the area")]
		public int chunkCountX;

		[Token(Token = "0x40024F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int chunkCountZ;

		[Token(Token = "0x40024F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int chunkCountY;

		[Token(Token = "0x40024F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Set which wall edge starts visible")]
		public bool visibleEdgePositiveX;

		[Token(Token = "0x40024F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool visibleEdgePositiveY;

		[Token(Token = "0x40024F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool visibleEdgePositiveZ;

		[Token(Token = "0x40024F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool visibleEdgeNegativeX;

		[Token(Token = "0x40024FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool visibleEdgeNegativeY;

		[Token(Token = "0x40024FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool visibleEdgeNegativeZ;

		[Token(Token = "0x40024FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DiggingArea.ChunkSave[] chunkSaves;

		[Token(Token = "0x40024FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public int3 savedChunksSize;

		[Token(Token = "0x6002A5D")]
		[Address(RVA = "0x12B3274", Offset = "0x12B3274", VA = "0x12B3274")]
		public void SaveChunkCounts()
		{
		}

		[Token(Token = "0x6002A5E")]
		[Address(RVA = "0x12B328C", Offset = "0x12B328C", VA = "0x12B328C")]
		public int3 GetSavedChunkCounts(bool editing)
		{
			return default(int3);
		}

		[Token(Token = "0x6002A5F")]
		[Address(RVA = "0x12B349C", Offset = "0x12B349C", VA = "0x12B349C")]
		public int GetTotalCount(bool editing)
		{
			return default(int);
		}

		[Token(Token = "0x6002A60")]
		[Address(RVA = "0x12B3348", Offset = "0x12B3348", VA = "0x12B3348")]
		private int3 EstimateChunksFromSaveData(bool bruteForce = false)
		{
			return default(int3);
		}

		[Token(Token = "0x6002A61")]
		[Address(RVA = "0x12B3314", Offset = "0x12B3314", VA = "0x12B3314")]
		public bool HasCorrectAmountOfSaves()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A62")]
		[Address(RVA = "0x12B34BC", Offset = "0x12B34BC", VA = "0x12B34BC")]
		public DiggingAreaData()
		{
		}
	}
	[Token(Token = "0x2000612")]
	[BurstCompile]
	internal struct DiggingAreaDensityCalculationJob : IDensityCalculationJob, IJobParallelFor
	{
		[Token(Token = "0x40024FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[WriteOnly]
		private NativeArray<float> densities;

		[Token(Token = "0x40024FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[WriteOnly]
		private NativeArray<float> veinDensities;

		[Token(Token = "0x4002500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Unity.Collections.ReadOnly]
		public int3 offset;

		[Token(Token = "0x4002501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Unity.Collections.ReadOnly]
		public int chunkSize;

		[Token(Token = "0x4002502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Unity.Collections.ReadOnly]
		public bool isEdgeChunkX;

		[Token(Token = "0x4002503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Unity.Collections.ReadOnly]
		public bool isEdgeChunkY;

		[Token(Token = "0x4002504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[Unity.Collections.ReadOnly]
		public bool isEdgeChunkZ;

		[Token(Token = "0x4002505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		[Unity.Collections.ReadOnly]
		public bool isEdgeChunkX0;

		[Token(Token = "0x4002506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Unity.Collections.ReadOnly]
		public bool isEdgeChunkY0;

		[Token(Token = "0x4002507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Unity.Collections.ReadOnly]
		public bool isEdgeChunkZ0;

		[Token(Token = "0x170004A9")]
		public NativeArray<float> Densities
		{
			[Token(Token = "0x6002A63")]
			[Address(RVA = "0x12B3540", Offset = "0x12B3540", VA = "0x12B3540", Slot = "4")]
			get
			{
				return default(NativeArray<float>);
			}
			[Token(Token = "0x6002A64")]
			[Address(RVA = "0x12B354C", Offset = "0x12B354C", VA = "0x12B354C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170004AA")]
		public NativeArray<float> VeinDensities
		{
			[Token(Token = "0x6002A65")]
			[Address(RVA = "0x12B3554", Offset = "0x12B3554", VA = "0x12B3554")]
			get
			{
				return default(NativeArray<float>);
			}
			[Token(Token = "0x6002A66")]
			[Address(RVA = "0x12B3560", Offset = "0x12B3560", VA = "0x12B3560")]
			set
			{
			}
		}

		[Token(Token = "0x6002A67")]
		[Address(RVA = "0x12B3568", Offset = "0x12B3568", VA = "0x12B3568", Slot = "7")]
		public void Execute(int index)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x6002A68")]
		[Address(RVA = "0x12B36B0", Offset = "0x12B36B0", VA = "0x12B36B0", Slot = "6")]
		public float CalculateDensity(int worldPositionX, int worldPositionY, int worldPositionZ)
		{
			return default(float);
		}

		[MethodImpl(256)]
		[Token(Token = "0x6002A69")]
		[Address(RVA = "0x12B36B8", Offset = "0x12B36B8", VA = "0x12B36B8")]
		private float Perlin3D(float x, float y, float z, float frequency)
		{
			return default(float);
		}

		[MethodImpl(256)]
		[Token(Token = "0x6002A6A")]
		[Address(RVA = "0x12B3778", Offset = "0x12B3778", VA = "0x12B3778")]
		public float Remap(float from, float fromMin, float fromMax, float toMin, float toMax)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000613")]
	public class DiggingChunk
	{
		[Token(Token = "0x2000614")]
		[CompilerGenerated]
		private sealed class <_CompleteMeshGenerationCoroutine>d__65 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400252B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400252C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400252D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DiggingChunk <>4__this;

			[Token(Token = "0x170004B3")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002A9A")]
				[Address(RVA = "0x12B6170", Offset = "0x12B6170", VA = "0x12B6170", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004B4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A9C")]
				[Address(RVA = "0x12B61B8", Offset = "0x12B61B8", VA = "0x12B61B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A97")]
			[Address(RVA = "0x12B4954", Offset = "0x12B4954", VA = "0x12B4954")]
			[DebuggerHidden]
			public <_CompleteMeshGenerationCoroutine>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6002A98")]
			[Address(RVA = "0x12B60D8", Offset = "0x12B60D8", VA = "0x12B60D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A99")]
			[Address(RVA = "0x12B60DC", Offset = "0x12B60DC", VA = "0x12B60DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A9B")]
			[Address(RVA = "0x12B6178", Offset = "0x12B6178", VA = "0x12B6178", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000615")]
		[CompilerGenerated]
		private sealed class <DetermineIfViableLootPositionCoroutine>d__69 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400252E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400252F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002530")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DiggingChunk <>4__this;

			[Token(Token = "0x4002531")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 <worldPos>5__2;

			[Token(Token = "0x4002532")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private LayerMask <defaultLayer>5__3;

			[Token(Token = "0x170004B5")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002AA0")]
				[Address(RVA = "0x12B6718", Offset = "0x12B6718", VA = "0x12B6718", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002AA2")]
				[Address(RVA = "0x12B6760", Offset = "0x12B6760", VA = "0x12B6760", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A9D")]
			[Address(RVA = "0x12B58E0", Offset = "0x12B58E0", VA = "0x12B58E0")]
			[DebuggerHidden]
			public <DetermineIfViableLootPositionCoroutine>d__69(int <>1__state)
			{
			}

			[Token(Token = "0x6002A9E")]
			[Address(RVA = "0x12B6214", Offset = "0x12B6214", VA = "0x12B6214", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A9F")]
			[Address(RVA = "0x12B6218", Offset = "0x12B6218", VA = "0x12B6218", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AA1")]
			[Address(RVA = "0x12B6720", Offset = "0x12B6720", VA = "0x12B6720", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _chunkIndex;

		[Token(Token = "0x400250A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NativeArray<float> veinDensity;

		[Token(Token = "0x400250B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NativeArray<Color32> _colors;

		[Token(Token = "0x400250D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private NativeArray<float> _densities;

		[Token(Token = "0x400250F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool _intialized;

		[Token(Token = "0x4002510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool _arraysCreated;

		[Token(Token = "0x4002511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _isolevel;

		[Token(Token = "0x4002512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Mesh _mesh;

		[Token(Token = "0x4002513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private NativeArray<MarchingCubesVertexData> _outputVertices;

		[Token(Token = "0x4002514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private NativeArray<int> _outputTriangles;

		[Token(Token = "0x4002515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<(int index, float density)> _densityModifications;

		[Token(Token = "0x4002516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<(int index, float density)> _veinDensityModifications;

		[Token(Token = "0x4002517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Counter _counter;

		[Token(Token = "0x4002518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool _creatingMesh;

		[Token(Token = "0x4002519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool _firstGenerationIsDone;

		[Token(Token = "0x400251A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private List<GameObject> _myLoots;

		[Token(Token = "0x400251B")]
		private const float LootDetachOffset = 0.5f;

		[Token(Token = "0x400251C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float _averageDensity;

		[Token(Token = "0x400251D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float _previousAverageDensity;

		[Token(Token = "0x400251E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _timeOfGeneration;

		[Token(Token = "0x400251F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Vector3 position;

		[Token(Token = "0x4002523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool edgeChunkX;

		[Token(Token = "0x4002524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		public bool edgeChunkY;

		[Token(Token = "0x4002525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
		public bool edgeChunkZ;

		[Token(Token = "0x4002526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10B")]
		public bool edgeChunkX0;

		[Token(Token = "0x4002527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public bool edgeChunkY0;

		[Token(Token = "0x4002528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		public bool edgeChunkZ0;

		[Token(Token = "0x4002529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10E")]
		private bool meshGenerationCoroutineRunning;

		[Token(Token = "0x400252A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10F")]
		private bool _hasBroken;

		[Token(Token = "0x170004AB")]
		public DiggingArea World
		{
			[Token(Token = "0x6002A6B")]
			[Address(RVA = "0x12B3794", Offset = "0x12B3794", VA = "0x12B3794")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A6C")]
			[Address(RVA = "0x12B379C", Offset = "0x12B379C", VA = "0x12B379C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004AC")]
		public int ChunkSize
		{
			[Token(Token = "0x6002A6D")]
			[Address(RVA = "0x12B37A4", Offset = "0x12B37A4", VA = "0x12B37A4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002A6E")]
			[Address(RVA = "0x12B37AC", Offset = "0x12B37AC", VA = "0x12B37AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170004AD")]
		public int3 Coordinate
		{
			[Token(Token = "0x6002A6F")]
			[Address(RVA = "0x12B37B4", Offset = "0x12B37B4", VA = "0x12B37B4")]
			[CompilerGenerated]
			get
			{
				return default(int3);
			}
			[Token(Token = "0x6002A70")]
			[Address(RVA = "0x12B37C4", Offset = "0x12B37C4", VA = "0x12B37C4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004AE")]
		public NativeArray<float> Densities
		{
			[Token(Token = "0x6002A71")]
			[Address(RVA = "0x12B37D0", Offset = "0x12B37D0", VA = "0x12B37D0")]
			get
			{
				return default(NativeArray<float>);
			}
			[Token(Token = "0x6002A72")]
			[Address(RVA = "0x12B37DC", Offset = "0x12B37DC", VA = "0x12B37DC")]
			private set
			{
			}
		}

		[Token(Token = "0x170004AF")]
		public bool isCreatingMesh
		{
			[Token(Token = "0x6002A73")]
			[Address(RVA = "0x12B37E4", Offset = "0x12B37E4", VA = "0x12B37E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004B0")]
		public bool HasBeenModified
		{
			[Token(Token = "0x6002A74")]
			[Address(RVA = "0x12B37EC", Offset = "0x12B37EC", VA = "0x12B37EC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A75")]
			[Address(RVA = "0x12B37F4", Offset = "0x12B37F4", VA = "0x12B37F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170004B1")]
		public JobHandle DensityJobHandle
		{
			[Token(Token = "0x6002A76")]
			[Address(RVA = "0x12B3800", Offset = "0x12B3800", VA = "0x12B3800")]
			[CompilerGenerated]
			get
			{
				return default(JobHandle);
			}
			[Token(Token = "0x6002A77")]
			[Address(RVA = "0x12B380C", Offset = "0x12B380C", VA = "0x12B380C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004B2")]
		public JobHandle MarchingCubesJobHandle
		{
			[Token(Token = "0x6002A78")]
			[Address(RVA = "0x12B3814", Offset = "0x12B3814", VA = "0x12B3814")]
			[CompilerGenerated]
			get
			{
				return default(JobHandle);
			}
			[Token(Token = "0x6002A79")]
			[Address(RVA = "0x12B3820", Offset = "0x12B3820", VA = "0x12B3820")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002A7A")]
		[Address(RVA = "0x12B3828", Offset = "0x12B3828", VA = "0x12B3828")]
		private void InitiliazeSettings()
		{
		}

		[Token(Token = "0x6002A7B")]
		[Address(RVA = "0x12B3EF0", Offset = "0x12B3EF0", VA = "0x12B3EF0")]
		public void CreateArrays()
		{
		}

		[Token(Token = "0x6002A7C")]
		[Address(RVA = "0x12B4160", Offset = "0x12B4160", VA = "0x12B4160")]
		public void StartDensityCalculation()
		{
		}

		[Token(Token = "0x6002A7D")]
		[Address(RVA = "0x12B4274", Offset = "0x12B4274", VA = "0x12B4274")]
		public bool IsEdge()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A7E")]
		[Address(RVA = "0x12B3D5C", Offset = "0x12B3D5C", VA = "0x12B3D5C")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002A7F")]
		[Address(RVA = "0x12B42B4", Offset = "0x12B42B4", VA = "0x12B42B4")]
		internal void Reset()
		{
		}

		[Token(Token = "0x6002A80")]
		[Address(RVA = "0x12B4378", Offset = "0x12B4378", VA = "0x12B4378")]
		public void Initialize(int chunkSize, float isolevel, int3 coordinate)
		{
		}

		[Token(Token = "0x6002A81")]
		[Address(RVA = "0x12B4670", Offset = "0x12B4670", VA = "0x12B4670")]
		public void LoadInitialize(int chunkSize, float isolevel, int3 coordinate, float[] densities, float[] veinDensities)
		{
		}

		[Token(Token = "0x6002A82")]
		[Address(RVA = "0x12B4408", Offset = "0x12B4408", VA = "0x12B4408")]
		public void StartMeshGeneration(bool forceVeinMode = false, bool loading = false)
		{
		}

		[Token(Token = "0x6002A83")]
		[Address(RVA = "0x12B48E0", Offset = "0x12B48E0", VA = "0x12B48E0")]
		[IteratorStateMachine(typeof(<_CompleteMeshGenerationCoroutine>d__65))]
		private IEnumerator<float> _CompleteMeshGenerationCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002A84")]
		[Address(RVA = "0x12B497C", Offset = "0x12B497C", VA = "0x12B497C")]
		public void CompleteMeshGeneration(bool playSFX = true)
		{
		}

		[Token(Token = "0x6002A85")]
		[Address(RVA = "0x12B586C", Offset = "0x12B586C", VA = "0x12B586C")]
		[IteratorStateMachine(typeof(<DetermineIfViableLootPositionCoroutine>d__69))]
		private IEnumerator<float> DetermineIfViableLootPositionCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002A86")]
		[Address(RVA = "0x12B5908", Offset = "0x12B5908", VA = "0x12B5908")]
		public float GetDensity(int x, int y, int z)
		{
			return default(float);
		}

		[Token(Token = "0x6002A87")]
		[Address(RVA = "0x12B5924", Offset = "0x12B5924", VA = "0x12B5924")]
		public float GetVeinDensity(int x, int y, int z)
		{
			return default(float);
		}

		[Token(Token = "0x6002A88")]
		[Address(RVA = "0x12B5940", Offset = "0x12B5940", VA = "0x12B5940")]
		public float GetDensity(int3 localPosition)
		{
			return default(float);
		}

		[Token(Token = "0x6002A89")]
		[Address(RVA = "0x12B5960", Offset = "0x12B5960", VA = "0x12B5960")]
		public float GetVeinDensity(int3 localPosition)
		{
			return default(float);
		}

		[Token(Token = "0x6002A8A")]
		[Address(RVA = "0x12B5980", Offset = "0x12B5980", VA = "0x12B5980")]
		public void SetDensity(float density, int x, int y, int z)
		{
		}

		[Token(Token = "0x6002A8B")]
		[Address(RVA = "0x12B5BEC", Offset = "0x12B5BEC", VA = "0x12B5BEC")]
		public void SetVeinDensity(float density, int x, int y, int z)
		{
		}

		[Token(Token = "0x6002A8C")]
		[Address(RVA = "0x12B5AD8", Offset = "0x12B5AD8", VA = "0x12B5AD8")]
		public void TryToStartMeshGeneration()
		{
		}

		[Token(Token = "0x6002A8D")]
		[Address(RVA = "0x12B5DB0", Offset = "0x12B5DB0", VA = "0x12B5DB0")]
		public void SetDensity(float density, int3 localPos)
		{
		}

		[Token(Token = "0x6002A8E")]
		[Address(RVA = "0x12B5DBC", Offset = "0x12B5DBC", VA = "0x12B5DBC")]
		public void SetVeinDensity(float density, int3 localPos)
		{
		}

		[Token(Token = "0x6002A8F")]
		[Address(RVA = "0x12B5DC8", Offset = "0x12B5DC8", VA = "0x12B5DC8")]
		public NativeArray<float> GetDensities()
		{
			return default(NativeArray<float>);
		}

		[Token(Token = "0x6002A90")]
		[Address(RVA = "0x12B5DD4", Offset = "0x12B5DD4", VA = "0x12B5DD4")]
		public int To1D(int3 int3, int xMax, int yMax)
		{
			return default(int);
		}

		[Token(Token = "0x6002A91")]
		[Address(RVA = "0x12B5DE4", Offset = "0x12B5DE4", VA = "0x12B5DE4")]
		public void AddLoot(GameObject loot)
		{
		}

		[Token(Token = "0x6002A92")]
		[Address(RVA = "0x12B5EEC", Offset = "0x12B5EEC", VA = "0x12B5EEC")]
		public void ClearModified()
		{
		}

		[Token(Token = "0x6002A93")]
		[Address(RVA = "0x12B5EF4", Offset = "0x12B5EF4", VA = "0x12B5EF4")]
		public bool GetIfCreatingMesh()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A94")]
		[Address(RVA = "0x12B4898", Offset = "0x12B4898", VA = "0x12B4898")]
		private void CacheAverageDensity()
		{
		}

		[Token(Token = "0x6002A95")]
		[Address(RVA = "0x12B5EFC", Offset = "0x12B5EFC", VA = "0x12B5EFC")]
		public void DebugListLoots()
		{
		}

		[Token(Token = "0x6002A96")]
		[Address(RVA = "0x12B60D0", Offset = "0x12B60D0", VA = "0x12B60D0")]
		public DiggingChunk()
		{
		}
	}
	[Token(Token = "0x2000616")]
	public interface IDensityCalculationJob : IJobParallelFor
	{
		[Token(Token = "0x170004B7")]
		NativeArray<float> Densities
		{
			[Token(Token = "0x6002AA3")]
			get;
			[Token(Token = "0x6002AA4")]
			set;
		}

		[Token(Token = "0x6002AA5")]
		float CalculateDensity(int worldPositionX, int worldPositionY, int worldPositionZ);
	}
	[Token(Token = "0x2000617")]
	public enum PlaneLineIntersectionResult
	{
		[Token(Token = "0x4002534")]
		NoHit,
		[Token(Token = "0x4002535")]
		OneHit,
		[Token(Token = "0x4002536")]
		ParallelInsidePlane
	}
	[Token(Token = "0x2000618")]
	[RequireComponent(typeof(Camera))]
	public class PlayerCamera : MonoBehaviour
	{
		[Token(Token = "0x4002537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Movement")]
		[SerializeField]
		private float movementSpeed;

		[Token(Token = "0x4002538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[Header("Shift boost multiplier")]
		private float shiftBoost;

		[Token(Token = "0x4002539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Header("Rotation")]
		private float sensitivity;

		[Token(Token = "0x400253A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject VRCam;

		[Token(Token = "0x400253B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera _cam;

		[Token(Token = "0x400253C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _rotationX;

		[Token(Token = "0x400253D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _rotationY;

		[Token(Token = "0x6002AA6")]
		[Address(RVA = "0x12B67BC", Offset = "0x12B67BC", VA = "0x12B67BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AA7")]
		[Address(RVA = "0x12B68EC", Offset = "0x12B68EC", VA = "0x12B68EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002AA8")]
		[Address(RVA = "0x12B692C", Offset = "0x12B692C", VA = "0x12B692C")]
		private void Move()
		{
		}

		[Token(Token = "0x6002AA9")]
		[Address(RVA = "0x12B6B38", Offset = "0x12B6B38", VA = "0x12B6B38")]
		private void LookAround()
		{
		}

		[Token(Token = "0x6002AAA")]
		[Address(RVA = "0x12B6C38", Offset = "0x12B6C38", VA = "0x12B6C38")]
		public PlayerCamera()
		{
		}
	}
	[Token(Token = "0x2000619")]
	public class ToolDeformer : MonoBehaviour
	{
		[Token(Token = "0x400253E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem hitFX;

		[Token(Token = "0x400253F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip[] hitClips;

		[Token(Token = "0x4002540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip[] vibrationClips;

		[Token(Token = "0x4002541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LayerMask hitLayers;

		[Token(Token = "0x4002542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool frontDeformer;

		[Token(Token = "0x4002543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float spherecastSize;

		[Token(Token = "0x4002544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float hitCooldown;

		[Token(Token = "0x4002545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool allowDeform;

		[Token(Token = "0x4002546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastHitTime;

		[Token(Token = "0x4002547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastPosition;

		[Token(Token = "0x4002548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float speed;

		[Token(Token = "0x4002549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource _as;

		[Token(Token = "0x400254A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BetterVelocityEstimator velocityEstimator;

		[Token(Token = "0x400254B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HVRGrabbable hvrGrabbable;

		[Token(Token = "0x400254C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit[] results;

		[Token(Token = "0x400254D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Tool tool;

		[Token(Token = "0x400254E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody rigidbody;

		[Token(Token = "0x400254F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float _ogMass;

		[Token(Token = "0x4002550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		private float modificationClip;

		[Token(Token = "0x4002551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private float deformSpeed;

		[Token(Token = "0x4002552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private float deformRange;

		[Token(Token = "0x4002553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PhotonView parentPhotonView;

		[Token(Token = "0x6002AAB")]
		[Address(RVA = "0x12B6C54", Offset = "0x12B6C54", VA = "0x12B6C54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002AAC")]
		[Address(RVA = "0x12B6F5C", Offset = "0x12B6F5C", VA = "0x12B6F5C")]
		private void ResetMass(HVRGrabberBase arg0, HVRGrabbable arg1)
		{
		}

		[Token(Token = "0x6002AAD")]
		[Address(RVA = "0x12B6F84", Offset = "0x12B6F84", VA = "0x12B6F84")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002AAE")]
		[Address(RVA = "0x12B71A4", Offset = "0x12B71A4", VA = "0x12B71A4")]
		private void RaycastToTerrain(bool addTerrain)
		{
		}

		[Token(Token = "0x6002AAF")]
		[Address(RVA = "0x12B6F60", Offset = "0x12B6F60", VA = "0x12B6F60")]
		private void ResetMass()
		{
		}

		[Token(Token = "0x6002AB0")]
		[Address(RVA = "0x12B7B64", Offset = "0x12B7B64", VA = "0x12B7B64")]
		public void PlayHitEffects()
		{
		}

		[Token(Token = "0x6002AB1")]
		[Address(RVA = "0x12B790C", Offset = "0x12B790C", VA = "0x12B790C")]
		private void EditTerrain(DiggingArea world, Vector3 point, bool addTerrain, float deformSpeed, float range)
		{
		}

		[Token(Token = "0x6002AB2")]
		[Address(RVA = "0x12B7E40", Offset = "0x12B7E40", VA = "0x12B7E40")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002AB3")]
		[Address(RVA = "0x12B7E8C", Offset = "0x12B7E8C", VA = "0x12B7E8C")]
		public void ToggleAllowDeform(bool allowDeform)
		{
		}

		[Token(Token = "0x6002AB4")]
		[Address(RVA = "0x12B7E98", Offset = "0x12B7E98", VA = "0x12B7E98")]
		public float GetDeformSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x6002AB5")]
		[Address(RVA = "0x12B7EA0", Offset = "0x12B7EA0", VA = "0x12B7EA0")]
		public float GetDeformRange()
		{
			return default(float);
		}

		[Token(Token = "0x6002AB6")]
		[Address(RVA = "0x12B7EA8", Offset = "0x12B7EA8", VA = "0x12B7EA8")]
		public float GetSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x6002AB7")]
		[Address(RVA = "0x12B7EB0", Offset = "0x12B7EB0", VA = "0x12B7EB0")]
		public ToolDeformer()
		{
		}
	}
}
namespace UnrealByte.EasyJira
{
	[Token(Token = "0x200061B")]
	public class JErrorHandler
	{
		[Token(Token = "0x6002ABF")]
		[Address(RVA = "0x12B8108", Offset = "0x12B8108", VA = "0x12B8108")]
		public static string ReadError(string errorCode, string text, string errorText)
		{
			return null;
		}

		[Token(Token = "0x6002AC0")]
		[Address(RVA = "0x12B831C", Offset = "0x12B831C", VA = "0x12B831C")]
		public JErrorHandler()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200061C")]
	public class JIssue
	{
		[Token(Token = "0x400255A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public JProject project;

		[Token(Token = "0x400255B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string summary;

		[Token(Token = "0x400255C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string description;

		[Token(Token = "0x400255D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public JIssueType issuetype;

		[Token(Token = "0x400255E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public JIssuePriority priority;

		[Token(Token = "0x6002AC1")]
		[Address(RVA = "0x12B8324", Offset = "0x12B8324", VA = "0x12B8324")]
		public JIssue(string summary, string description)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200061D")]
	public class JProject
	{
		[Token(Token = "0x400255F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string key;

		[Token(Token = "0x6002AC2")]
		[Address(RVA = "0x12B83C4", Offset = "0x12B83C4", VA = "0x12B83C4")]
		public JProject(string key)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200061E")]
	public class JIssueType
	{
		[Token(Token = "0x4002560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int id;

		[NonSerialized]
		[Token(Token = "0x4002561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x6002AC3")]
		[Address(RVA = "0x12B843C", Offset = "0x12B843C", VA = "0x12B843C")]
		public JIssueType()
		{
		}

		[Token(Token = "0x6002AC4")]
		[Address(RVA = "0x12B8444", Offset = "0x12B8444", VA = "0x12B8444")]
		public JIssueType(int id)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200061F")]
	public class JIssuePriority
	{
		[Token(Token = "0x4002562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string id;

		[NonSerialized]
		[Token(Token = "0x4002563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x6002AC5")]
		[Address(RVA = "0x12B846C", Offset = "0x12B846C", VA = "0x12B846C")]
		public JIssuePriority()
		{
		}

		[Token(Token = "0x6002AC6")]
		[Address(RVA = "0x12B8474", Offset = "0x12B8474", VA = "0x12B8474")]
		public JIssuePriority(string id)
		{
		}
	}
	[Token(Token = "0x2000620")]
	public class JIssueDetails
	{
		[Token(Token = "0x4002564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string projectKey;

		[Token(Token = "0x4002565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string projectTypeKey;

		[Token(Token = "0x4002566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string projectName;

		[Token(Token = "0x4002567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string projectIconURL;

		[Token(Token = "0x4002568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D projectIconTexture;

		[Token(Token = "0x4002569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string key;

		[Token(Token = "0x400256A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string summary;

		[Token(Token = "0x400256B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string type;

		[Token(Token = "0x400256C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string typeIconURL;

		[Token(Token = "0x400256D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture2D issueTypeIconTexture;

		[Token(Token = "0x400256E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string priority;

		[Token(Token = "0x400256F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string priorityIconURL;

		[Token(Token = "0x4002570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D priorityIconTexture;

		[Token(Token = "0x4002571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string affectVersions;

		[Token(Token = "0x4002572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string components;

		[Token(Token = "0x4002573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string labels;

		[Token(Token = "0x4002574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string status;

		[Token(Token = "0x4002575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string statusIconURL;

		[Token(Token = "0x4002576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2D statusIconTexture;

		[Token(Token = "0x4002577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string resolution;

		[Token(Token = "0x4002578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string fixVersions;

		[Token(Token = "0x4002579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string assignee;

		[Token(Token = "0x400257A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string reporter;

		[Token(Token = "0x400257B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public string votes;

		[Token(Token = "0x400257C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public string watcher;

		[Token(Token = "0x400257D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string dateCreated;

		[Token(Token = "0x400257E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public string dateUpdated;

		[Token(Token = "0x400257F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public string description;

		[Token(Token = "0x4002580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public List<JIssueComment> comments;

		[Token(Token = "0x4002581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public List<JIssueAttachment> attachments;

		[Token(Token = "0x4002582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public List<JIssueChangelog> changelogHistories;

		[Token(Token = "0x6002AC7")]
		[Address(RVA = "0x12B84A4", Offset = "0x12B84A4", VA = "0x12B84A4")]
		public JIssueDetails getIssueFromJsonString(string JSONString, JsonDataJira JSONData)
		{
			return null;
		}

		[Token(Token = "0x6002AC8")]
		[Address(RVA = "0x12BD5C0", Offset = "0x12BD5C0", VA = "0x12BD5C0")]
		public JIssueDetails()
		{
		}
	}
	[Token(Token = "0x2000621")]
	public class JIssueComment
	{
		[Token(Token = "0x4002583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string created;

		[Token(Token = "0x4002584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string body;

		[Token(Token = "0x4002585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string authorName;

		[Token(Token = "0x4002586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string authorEmail;

		[Token(Token = "0x4002587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string authorDisplayName;

		[Token(Token = "0x4002588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string authorAvatar;

		[Token(Token = "0x4002589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture2D authorAvatarTexture;

		[Token(Token = "0x6002AC9")]
		[Address(RVA = "0x12BB710", Offset = "0x12BB710", VA = "0x12BB710")]
		public JIssueComment getIssueCommentFromJsonString(string JSONString)
		{
			return null;
		}

		[Token(Token = "0x6002ACA")]
		[Address(RVA = "0x12BB618", Offset = "0x12BB618", VA = "0x12BB618")]
		public JIssueComment()
		{
		}
	}
	[Token(Token = "0x2000622")]
	public class JIssueAttachment
	{
		[Token(Token = "0x400258A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string fileName;

		[Token(Token = "0x400258B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string created;

		[Token(Token = "0x400258C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string size;

		[Token(Token = "0x400258D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string mimeType;

		[Token(Token = "0x400258E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string content;

		[Token(Token = "0x400258F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string authorDisplayName;

		[Token(Token = "0x6002ACB")]
		[Address(RVA = "0x12BC088", Offset = "0x12BC088", VA = "0x12BC088")]
		public JIssueAttachment getIssueAttachmentFromJsonString(string JSONString)
		{
			return null;
		}

		[Token(Token = "0x6002ACC")]
		[Address(RVA = "0x12BBFE0", Offset = "0x12BBFE0", VA = "0x12BBFE0")]
		public JIssueAttachment()
		{
		}
	}
	[Token(Token = "0x2000623")]
	public class JIssueChangelog
	{
		[Token(Token = "0x4002590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string created;

		[Token(Token = "0x4002591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string field;

		[Token(Token = "0x4002592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string fromValue;

		[Token(Token = "0x4002593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string toValue;

		[Token(Token = "0x4002594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string authorName;

		[Token(Token = "0x4002595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string authorEmail;

		[Token(Token = "0x4002596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string authorDisplayName;

		[Token(Token = "0x4002597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string authorAvatar;

		[Token(Token = "0x4002598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Texture2D authorAvatarTexture;

		[Token(Token = "0x6002ACD")]
		[Address(RVA = "0x12BC9F4", Offset = "0x12BC9F4", VA = "0x12BC9F4")]
		public JIssueChangelog getChangeLogFromJsonString(string JSONString)
		{
			return null;
		}

		[Token(Token = "0x6002ACE")]
		[Address(RVA = "0x12BC8DC", Offset = "0x12BC8DC", VA = "0x12BC8DC")]
		public JIssueChangelog()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000624")]
	public class JUser
	{
		[Token(Token = "0x4002599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string accountId;

		[Token(Token = "0x400259A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string emailAddress;

		[Token(Token = "0x400259B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string displayName;

		[Token(Token = "0x400259C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string avatarURL;

		[Token(Token = "0x6002ACF")]
		[Address(RVA = "0x12BD884", Offset = "0x12BD884", VA = "0x12BD884")]
		public JUser()
		{
		}
	}
	[Token(Token = "0x2000625")]
	public class UBLog
	{
		[Token(Token = "0x400259D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string logFilePath;

		[Token(Token = "0x400259E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool debugLog;

		[Token(Token = "0x400259F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool includeWarnings;

		[Token(Token = "0x6002AD0")]
		[Address(RVA = "0x12BD90C", Offset = "0x12BD90C", VA = "0x12BD90C")]
		public UBLog()
		{
		}

		[Token(Token = "0x6002AD1")]
		[Address(RVA = "0x12BD964", Offset = "0x12BD964", VA = "0x12BD964")]
		public UBLog(bool initialize)
		{
		}

		[Token(Token = "0x6002AD2")]
		[Address(RVA = "0x12BD9BC", Offset = "0x12BD9BC", VA = "0x12BD9BC")]
		public string initializeLog(bool inCustomPath, string customFilePath, string initMessage, bool debugLog, bool includeWarnings)
		{
			return null;
		}

		[Token(Token = "0x6002AD3")]
		[Address(RVA = "0x12BDCC0", Offset = "0x12BDCC0", VA = "0x12BDCC0")]
		public void log(string msg)
		{
		}

		[Token(Token = "0x6002AD4")]
		[Address(RVA = "0x12BDED0", Offset = "0x12BDED0", VA = "0x12BDED0")]
		private void HandleLog(string condition, string stackTrace, LogType type)
		{
		}
	}
	[Token(Token = "0x2000626")]
	public class JiraConnect
	{
		[Token(Token = "0x2000627")]
		[CompilerGenerated]
		private sealed class <APISendIssueIG>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JIssue issue;

			[Token(Token = "0x40025A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool takeScreenshot;

			[Token(Token = "0x40025A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string logFilePath;

			[Token(Token = "0x40025A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool sendSave;

			[Token(Token = "0x40025A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private string <encodedCredentials>5__2;

			[Token(Token = "0x40025AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private string <jiraIssueURL>5__3;

			[Token(Token = "0x40025AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private UnityWebRequest <request>5__4;

			[Token(Token = "0x170004BA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002AE6")]
				[Address(RVA = "0x12BF7DC", Offset = "0x12BF7DC", VA = "0x12BF7DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002AE8")]
				[Address(RVA = "0x12BF824", Offset = "0x12BF824", VA = "0x12BF824", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AE3")]
			[Address(RVA = "0x12BE1F8", Offset = "0x12BE1F8", VA = "0x12BE1F8")]
			[DebuggerHidden]
			public <APISendIssueIG>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6002AE4")]
			[Address(RVA = "0x12BEBE0", Offset = "0x12BEBE0", VA = "0x12BEBE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002AE5")]
			[Address(RVA = "0x12BEBE4", Offset = "0x12BEBE4", VA = "0x12BEBE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AE7")]
			[Address(RVA = "0x12BF7E4", Offset = "0x12BF7E4", VA = "0x12BF7E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000628")]
		[CompilerGenerated]
		private sealed class <APIDownloadProjectIssueTypesIG>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string projectKey;

			[Token(Token = "0x40025B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public JiraConnect <>4__this;

			[Token(Token = "0x40025B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool subTask;

			[Token(Token = "0x40025B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x170004BC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002AEC")]
				[Address(RVA = "0x12BFF84", Offset = "0x12BFF84", VA = "0x12BFF84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002AEE")]
				[Address(RVA = "0x12BFFCC", Offset = "0x12BFFCC", VA = "0x12BFFCC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AE9")]
			[Address(RVA = "0x12BE2D8", Offset = "0x12BE2D8", VA = "0x12BE2D8")]
			[DebuggerHidden]
			public <APIDownloadProjectIssueTypesIG>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6002AEA")]
			[Address(RVA = "0x12BF82C", Offset = "0x12BF82C", VA = "0x12BF82C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002AEB")]
			[Address(RVA = "0x12BF830", Offset = "0x12BF830", VA = "0x12BF830", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AED")]
			[Address(RVA = "0x12BFF8C", Offset = "0x12BFF8C", VA = "0x12BFF8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000629")]
		[CompilerGenerated]
		private sealed class <APITestAuth>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<string> callback;

			[Token(Token = "0x40025B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private string <encodedCredentials>5__2;

			[Token(Token = "0x40025B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <www>5__3;

			[Token(Token = "0x170004BE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002AF2")]
				[Address(RVA = "0x12C07F0", Offset = "0x12C07F0", VA = "0x12C07F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002AF4")]
				[Address(RVA = "0x12C0838", Offset = "0x12C0838", VA = "0x12C0838", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AEF")]
			[Address(RVA = "0x12BE390", Offset = "0x12BE390", VA = "0x12BE390")]
			[DebuggerHidden]
			public <APITestAuth>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6002AF0")]
			[Address(RVA = "0x12BFFD4", Offset = "0x12BFFD4", VA = "0x12BFFD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002AF1")]
			[Address(RVA = "0x12BFFD8", Offset = "0x12BFFD8", VA = "0x12BFFD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AF3")]
			[Address(RVA = "0x12C07F8", Offset = "0x12C07F8", VA = "0x12C07F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200062A")]
		[CompilerGenerated]
		private sealed class <APICreateIssue>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JIssue issue;

			[Token(Token = "0x40025BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<string> callback;

			[Token(Token = "0x40025BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170004C0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002AF8")]
				[Address(RVA = "0x12C0D80", Offset = "0x12C0D80", VA = "0x12C0D80", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002AFA")]
				[Address(RVA = "0x12C0DC8", Offset = "0x12C0DC8", VA = "0x12C0DC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AF5")]
			[Address(RVA = "0x12BE45C", Offset = "0x12BE45C", VA = "0x12BE45C")]
			[DebuggerHidden]
			public <APICreateIssue>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6002AF6")]
			[Address(RVA = "0x12C0840", Offset = "0x12C0840", VA = "0x12C0840", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002AF7")]
			[Address(RVA = "0x12C0844", Offset = "0x12C0844", VA = "0x12C0844", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AF9")]
			[Address(RVA = "0x12C0D88", Offset = "0x12C0D88", VA = "0x12C0D88", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200062B")]
		[CompilerGenerated]
		private sealed class <APIDownloadProjectIssueTypes>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string projectKey;

			[Token(Token = "0x40025C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool subTask;

			[Token(Token = "0x40025C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action<List<JIssueType>> callback;

			[Token(Token = "0x40025C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<JIssueType> <issueTypes>5__2;

			[Token(Token = "0x40025C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private UnityWebRequest <www>5__3;

			[Token(Token = "0x170004C2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002AFE")]
				[Address(RVA = "0x12C163C", Offset = "0x12C163C", VA = "0x12C163C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B00")]
				[Address(RVA = "0x12C1684", Offset = "0x12C1684", VA = "0x12C1684", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AFB")]
			[Address(RVA = "0x12BE53C", Offset = "0x12BE53C", VA = "0x12BE53C")]
			[DebuggerHidden]
			public <APIDownloadProjectIssueTypes>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6002AFC")]
			[Address(RVA = "0x12C0DD0", Offset = "0x12C0DD0", VA = "0x12C0DD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002AFD")]
			[Address(RVA = "0x12C0DD4", Offset = "0x12C0DD4", VA = "0x12C0DD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AFF")]
			[Address(RVA = "0x12C1644", Offset = "0x12C1644", VA = "0x12C1644", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200062C")]
		[CompilerGenerated]
		private sealed class <APIDownloadPriorities>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<List<JIssuePriority>> callback;

			[Token(Token = "0x40025CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JIssuePriority> <priorities>5__2;

			[Token(Token = "0x40025CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <www>5__3;

			[Token(Token = "0x170004C4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B04")]
				[Address(RVA = "0x12C1C50", Offset = "0x12C1C50", VA = "0x12C1C50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B06")]
				[Address(RVA = "0x12C1C98", Offset = "0x12C1C98", VA = "0x12C1C98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B01")]
			[Address(RVA = "0x12BE5F4", Offset = "0x12BE5F4", VA = "0x12BE5F4")]
			[DebuggerHidden]
			public <APIDownloadPriorities>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6002B02")]
			[Address(RVA = "0x12C168C", Offset = "0x12C168C", VA = "0x12C168C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B03")]
			[Address(RVA = "0x12C1690", Offset = "0x12C1690", VA = "0x12C1690", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B05")]
			[Address(RVA = "0x12C1C58", Offset = "0x12C1C58", VA = "0x12C1C58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200062D")]
		[CompilerGenerated]
		private sealed class <APIDownloadUsersAssignableToIssues>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string query;

			[Token(Token = "0x40025D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string issueKey;

			[Token(Token = "0x40025D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action<List<JUser>> callback;

			[Token(Token = "0x40025D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170004C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B0A")]
				[Address(RVA = "0x12C2658", Offset = "0x12C2658", VA = "0x12C2658", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B0C")]
				[Address(RVA = "0x12C26A0", Offset = "0x12C26A0", VA = "0x12C26A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B07")]
			[Address(RVA = "0x12BE6DC", Offset = "0x12BE6DC", VA = "0x12BE6DC")]
			[DebuggerHidden]
			public <APIDownloadUsersAssignableToIssues>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6002B08")]
			[Address(RVA = "0x12C1CA0", Offset = "0x12C1CA0", VA = "0x12C1CA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B09")]
			[Address(RVA = "0x12C1CA4", Offset = "0x12C1CA4", VA = "0x12C1CA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B0B")]
			[Address(RVA = "0x12C2660", Offset = "0x12C2660", VA = "0x12C2660", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200062E")]
		[CompilerGenerated]
		private sealed class <APIGetIssue>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string jIssueKey;

			[Token(Token = "0x40025D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<string> callback;

			[Token(Token = "0x40025D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170004C8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B10")]
				[Address(RVA = "0x12C2A00", Offset = "0x12C2A00", VA = "0x12C2A00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B12")]
				[Address(RVA = "0x12C2A48", Offset = "0x12C2A48", VA = "0x12C2A48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B0D")]
			[Address(RVA = "0x12BE7A8", Offset = "0x12BE7A8", VA = "0x12BE7A8")]
			[DebuggerHidden]
			public <APIGetIssue>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6002B0E")]
			[Address(RVA = "0x12C26A8", Offset = "0x12C26A8", VA = "0x12C26A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B0F")]
			[Address(RVA = "0x12C26AC", Offset = "0x12C26AC", VA = "0x12C26AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B11")]
			[Address(RVA = "0x12C2A08", Offset = "0x12C2A08", VA = "0x12C2A08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200062F")]
		[CompilerGenerated]
		private sealed class <APISearchIssues>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int startAt;

			[Token(Token = "0x40025DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int maxResults;

			[Token(Token = "0x40025DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<string> callback;

			[Token(Token = "0x40025E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170004CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B16")]
				[Address(RVA = "0x12C3180", Offset = "0x12C3180", VA = "0x12C3180", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B18")]
				[Address(RVA = "0x12C31C8", Offset = "0x12C31C8", VA = "0x12C31C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B13")]
			[Address(RVA = "0x12BE874", Offset = "0x12BE874", VA = "0x12BE874")]
			[DebuggerHidden]
			public <APISearchIssues>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6002B14")]
			[Address(RVA = "0x12C2A50", Offset = "0x12C2A50", VA = "0x12C2A50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B15")]
			[Address(RVA = "0x12C2A54", Offset = "0x12C2A54", VA = "0x12C2A54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B17")]
			[Address(RVA = "0x12C3188", Offset = "0x12C3188", VA = "0x12C3188", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000630")]
		[CompilerGenerated]
		private sealed class <APIAssignIssue>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string issueKey;

			[Token(Token = "0x40025E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string accountId;

			[Token(Token = "0x40025E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action<string> callback;

			[Token(Token = "0x40025E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170004CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B1C")]
				[Address(RVA = "0x12C36C8", Offset = "0x12C36C8", VA = "0x12C36C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B1E")]
				[Address(RVA = "0x12C3710", Offset = "0x12C3710", VA = "0x12C3710", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B19")]
			[Address(RVA = "0x12BE95C", Offset = "0x12BE95C", VA = "0x12BE95C")]
			[DebuggerHidden]
			public <APIAssignIssue>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6002B1A")]
			[Address(RVA = "0x12C31D0", Offset = "0x12C31D0", VA = "0x12C31D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B1B")]
			[Address(RVA = "0x12C31D4", Offset = "0x12C31D4", VA = "0x12C31D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B1D")]
			[Address(RVA = "0x12C36D0", Offset = "0x12C36D0", VA = "0x12C36D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000631")]
		[CompilerGenerated]
		private sealed class <APIAddComment>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraSettings settings;

			[Token(Token = "0x40025EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string IssueKey;

			[Token(Token = "0x40025EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string comment;

			[Token(Token = "0x40025ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action<string> callback;

			[Token(Token = "0x40025EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170004CE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B22")]
				[Address(RVA = "0x12C3B74", Offset = "0x12C3B74", VA = "0x12C3B74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B24")]
				[Address(RVA = "0x12C3BBC", Offset = "0x12C3BBC", VA = "0x12C3BBC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B1F")]
			[Address(RVA = "0x12BEA44", Offset = "0x12BEA44", VA = "0x12BEA44")]
			[DebuggerHidden]
			public <APIAddComment>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002B20")]
			[Address(RVA = "0x12C3718", Offset = "0x12C3718", VA = "0x12C3718", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B21")]
			[Address(RVA = "0x12C371C", Offset = "0x12C371C", VA = "0x12C371C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B23")]
			[Address(RVA = "0x12C3B7C", Offset = "0x12C3B7C", VA = "0x12C3B7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000632")]
		[CompilerGenerated]
		private sealed class <GetTexture>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string url;

			[Token(Token = "0x40025F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<Texture2D> result;

			[Token(Token = "0x40025F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170004D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B28")]
				[Address(RVA = "0x12C3D5C", Offset = "0x12C3D5C", VA = "0x12C3D5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B2A")]
				[Address(RVA = "0x12C3DA4", Offset = "0x12C3DA4", VA = "0x12C3DA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B25")]
			[Address(RVA = "0x12BEBB8", Offset = "0x12BEBB8", VA = "0x12BEBB8")]
			[DebuggerHidden]
			public <GetTexture>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002B26")]
			[Address(RVA = "0x12C3BC4", Offset = "0x12C3BC4", VA = "0x12C3BC4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B27")]
			[Address(RVA = "0x12C3BC8", Offset = "0x12C3BC8", VA = "0x12C3BC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B29")]
			[Address(RVA = "0x12C3D64", Offset = "0x12C3D64", VA = "0x12C3D64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40025A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<JIssueType> jIssueTypes;

		[Token(Token = "0x40025A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<string> callbackAction;

		[Token(Token = "0x6002AD5")]
		[Address(RVA = "0x12BE12C", Offset = "0x12BE12C", VA = "0x12BE12C")]
		public JiraConnect()
		{
		}

		[Token(Token = "0x6002AD6")]
		[Address(RVA = "0x12BE134", Offset = "0x12BE134", VA = "0x12BE134")]
		[IteratorStateMachine(typeof(<APISendIssueIG>d__3))]
		public IEnumerator APISendIssueIG(JiraSettings settings, JIssue issue, string logFilePath, bool takeScreenshot, bool sendSave)
		{
			return null;
		}

		[Token(Token = "0x6002AD7")]
		[Address(RVA = "0x12BE220", Offset = "0x12BE220", VA = "0x12BE220")]
		[IteratorStateMachine(typeof(<APIDownloadProjectIssueTypesIG>d__4))]
		public IEnumerator APIDownloadProjectIssueTypesIG(JiraSettings settings, string projectKey, bool subTask)
		{
			return null;
		}

		[Token(Token = "0x6002AD8")]
		[Address(RVA = "0x12BE300", Offset = "0x12BE300", VA = "0x12BE300")]
		[IteratorStateMachine(typeof(<APITestAuth>d__5))]
		public static IEnumerator APITestAuth(JiraSettings settings, Action<string> callback)
		{
			return null;
		}

		[Token(Token = "0x6002AD9")]
		[Address(RVA = "0x12BE3B8", Offset = "0x12BE3B8", VA = "0x12BE3B8")]
		[IteratorStateMachine(typeof(<APICreateIssue>d__6))]
		public static IEnumerator APICreateIssue(JiraSettings settings, JIssue issue, Action<string> callback)
		{
			return null;
		}

		[Token(Token = "0x6002ADA")]
		[Address(RVA = "0x12BE484", Offset = "0x12BE484", VA = "0x12BE484")]
		[IteratorStateMachine(typeof(<APIDownloadProjectIssueTypes>d__7))]
		public static IEnumerator APIDownloadProjectIssueTypes(JiraSettings settings, string projectKey, bool subTask, Action<List<JIssueType>> callback)
		{
			return null;
		}

		[Token(Token = "0x6002ADB")]
		[Address(RVA = "0x12BE564", Offset = "0x12BE564", VA = "0x12BE564")]
		[IteratorStateMachine(typeof(<APIDownloadPriorities>d__8))]
		public static IEnumerator APIDownloadPriorities(JiraSettings settings, Action<List<JIssuePriority>> callback)
		{
			return null;
		}

		[Token(Token = "0x6002ADC")]
		[Address(RVA = "0x12BE61C", Offset = "0x12BE61C", VA = "0x12BE61C")]
		[IteratorStateMachine(typeof(<APIDownloadUsersAssignableToIssues>d__9))]
		public static IEnumerator APIDownloadUsersAssignableToIssues(JiraSettings settings, string query, string issueKey, Action<List<JUser>> callback)
		{
			return null;
		}

		[Token(Token = "0x6002ADD")]
		[Address(RVA = "0x12BE704", Offset = "0x12BE704", VA = "0x12BE704")]
		[IteratorStateMachine(typeof(<APIGetIssue>d__10))]
		public static IEnumerator APIGetIssue(JiraSettings settings, string jIssueKey, Action<string> callback)
		{
			return null;
		}

		[Token(Token = "0x6002ADE")]
		[Address(RVA = "0x12BE7D0", Offset = "0x12BE7D0", VA = "0x12BE7D0")]
		[IteratorStateMachine(typeof(<APISearchIssues>d__11))]
		public static IEnumerator APISearchIssues(JiraSettings settings, int startAt, int maxResults, Action<string> callback)
		{
			return null;
		}

		[Token(Token = "0x6002ADF")]
		[Address(RVA = "0x12BE89C", Offset = "0x12BE89C", VA = "0x12BE89C")]
		[IteratorStateMachine(typeof(<APIAssignIssue>d__12))]
		public static IEnumerator APIAssignIssue(JiraSettings settings, string issueKey, string accountId, Action<string> callback)
		{
			return null;
		}

		[Token(Token = "0x6002AE0")]
		[Address(RVA = "0x12BE984", Offset = "0x12BE984", VA = "0x12BE984")]
		[IteratorStateMachine(typeof(<APIAddComment>d__13))]
		public static IEnumerator APIAddComment(string comment, string IssueKey, JiraSettings settings, Action<string> callback)
		{
			return null;
		}

		[Token(Token = "0x6002AE1")]
		[Address(RVA = "0x12BEA6C", Offset = "0x12BEA6C", VA = "0x12BEA6C")]
		public static string GenerateBasicAuth(string jiraUser, string jiraPassword)
		{
			return null;
		}

		[Token(Token = "0x6002AE2")]
		[Address(RVA = "0x12BEB28", Offset = "0x12BEB28", VA = "0x12BEB28")]
		[IteratorStateMachine(typeof(<GetTexture>d__15))]
		public static IEnumerator GetTexture(string url, Action<Texture2D> result)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000633")]
	public class JiraSettings : ScriptableObject
	{
		[Token(Token = "0x40025F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string jiraBaseRestURL;

		[Token(Token = "0x40025F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public string jiraMyselfURL;

		[Token(Token = "0x40025F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public string jiraUserURL;

		[Token(Token = "0x40025F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public string jiraStatusURL;

		[Token(Token = "0x40025F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public string jiraProjectURL;

		[Token(Token = "0x40025F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public string jiraIssueURL;

		[Token(Token = "0x40025FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public string jiraIssueTypeURL;

		[Token(Token = "0x40025FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public string jiraPrioritiesURL;

		[Token(Token = "0x40025FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public string jiraSearchURL;

		[Token(Token = "0x40025FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public string jiraAccountId;

		[Token(Token = "0x40025FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public string jiraName;

		[Token(Token = "0x40025FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public string jiraUser;

		[Token(Token = "0x4002600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public string jiraToken;

		[Token(Token = "0x4002601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public string jiraProjectKey;

		[Token(Token = "0x4002602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int maxResults;

		[Token(Token = "0x4002603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int maxShowAttachments;

		[Token(Token = "0x4002604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool showAttachAtInit;

		[Token(Token = "0x4002605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool showCommentsAtInit;

		[Token(Token = "0x4002606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		public bool showHistoryAtInit;

		[Token(Token = "0x4002607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		[HideInInspector]
		public bool assignIssues;

		[Token(Token = "0x6002B2B")]
		[Address(RVA = "0x12C3DAC", Offset = "0x12C3DAC", VA = "0x12C3DAC")]
		public JiraSettings Init(string jiraBaseRestURL, string jiraUser, string jiraToken, string jiraProjectKey)
		{
			return null;
		}

		[Token(Token = "0x6002B2C")]
		[Address(RVA = "0x12C3E14", Offset = "0x12C3E14", VA = "0x12C3E14")]
		public JiraSettings Init(string jiraBaseRestURL, string jiraUser, string jiraToken, string jiraProjectKey, int maxResults, bool showAttach, bool showComments, bool showHistory)
		{
			return null;
		}

		[Token(Token = "0x6002B2D")]
		[Address(RVA = "0x12C3EB0", Offset = "0x12C3EB0", VA = "0x12C3EB0")]
		public void sanitizeBaseURL()
		{
		}

		[Token(Token = "0x6002B2E")]
		[Address(RVA = "0x12C0780", Offset = "0x12C0780", VA = "0x12C0780")]
		public string getJiraMyselfURL()
		{
			return null;
		}

		[Token(Token = "0x6002B2F")]
		[Address(RVA = "0x12C3F40", Offset = "0x12C3F40", VA = "0x12C3F40")]
		public string getJiraUserURL()
		{
			return null;
		}

		[Token(Token = "0x6002B30")]
		[Address(RVA = "0x12C3F60", Offset = "0x12C3F60", VA = "0x12C3F60")]
		public string getJiraStatusURL()
		{
			return null;
		}

		[Token(Token = "0x6002B31")]
		[Address(RVA = "0x12BFF64", Offset = "0x12BFF64", VA = "0x12BFF64")]
		public string getJiraProjectURL()
		{
			return null;
		}

		[Token(Token = "0x6002B32")]
		[Address(RVA = "0x12BF7BC", Offset = "0x12BF7BC", VA = "0x12BF7BC")]
		public string getJiraIssueURL()
		{
			return null;
		}

		[Token(Token = "0x6002B33")]
		[Address(RVA = "0x12C3F80", Offset = "0x12C3F80", VA = "0x12C3F80")]
		public string getJiraIssueTypeURL()
		{
			return null;
		}

		[Token(Token = "0x6002B34")]
		[Address(RVA = "0x12C1C30", Offset = "0x12C1C30", VA = "0x12C1C30")]
		public string getJiraPrioritiesURL()
		{
			return null;
		}

		[Token(Token = "0x6002B35")]
		[Address(RVA = "0x12C3160", Offset = "0x12C3160", VA = "0x12C3160")]
		public string getJiraSearchURL()
		{
			return null;
		}

		[Token(Token = "0x6002B36")]
		[Address(RVA = "0x12C2600", Offset = "0x12C2600", VA = "0x12C2600")]
		public string getJiraUserAssignableIssuesURL()
		{
			return null;
		}

		[Token(Token = "0x6002B37")]
		[Address(RVA = "0x12C079C", Offset = "0x12C079C", VA = "0x12C079C")]
		public string getJiraMyPermissionsURL()
		{
			return null;
		}

		[Token(Token = "0x6002B38")]
		[Address(RVA = "0x12C3FA0", Offset = "0x12C3FA0", VA = "0x12C3FA0")]
		public JiraSettings()
		{
		}
	}
}
namespace InGameUI
{
	[Token(Token = "0x2000634")]
	public class JiraObject : MonoBehaviour
	{
		[Token(Token = "0x2000635")]
		public enum FeedbackType
		{
			[Token(Token = "0x4002621")]
			Positive,
			[Token(Token = "0x4002622")]
			Neutral,
			[Token(Token = "0x4002623")]
			Negative
		}

		[Token(Token = "0x2000636")]
		[CompilerGenerated]
		private sealed class <Start>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002625")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraObject <>4__this;

			[Token(Token = "0x170004D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B49")]
				[Address(RVA = "0x12C5734", Offset = "0x12C5734", VA = "0x12C5734", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B4B")]
				[Address(RVA = "0x12C577C", Offset = "0x12C577C", VA = "0x12C577C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B46")]
			[Address(RVA = "0x12C454C", Offset = "0x12C454C", VA = "0x12C454C")]
			[DebuggerHidden]
			public <Start>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6002B47")]
			[Address(RVA = "0x12C5364", Offset = "0x12C5364", VA = "0x12C5364", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B48")]
			[Address(RVA = "0x12C5368", Offset = "0x12C5368", VA = "0x12C5368", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B4A")]
			[Address(RVA = "0x12C573C", Offset = "0x12C573C", VA = "0x12C573C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000637")]
		[CompilerGenerated]
		private sealed class <SendIssuePost>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002628")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002629")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JiraObject <>4__this;

			[Token(Token = "0x400262A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JIssue jIssue;

			[Token(Token = "0x400262B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private string <path>5__2;

			[Token(Token = "0x170004D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B4F")]
				[Address(RVA = "0x12C5EA4", Offset = "0x12C5EA4", VA = "0x12C5EA4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B51")]
				[Address(RVA = "0x12C5EEC", Offset = "0x12C5EEC", VA = "0x12C5EEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B4C")]
			[Address(RVA = "0x12C510C", Offset = "0x12C510C", VA = "0x12C510C")]
			[DebuggerHidden]
			public <SendIssuePost>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6002B4D")]
			[Address(RVA = "0x12C5784", Offset = "0x12C5784", VA = "0x12C5784", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B4E")]
			[Address(RVA = "0x12C5788", Offset = "0x12C5788", VA = "0x12C5788", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B50")]
			[Address(RVA = "0x12C5EAC", Offset = "0x12C5EAC", VA = "0x12C5EAC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000638")]
		[CompilerGenerated]
		private sealed class <ActivateGO>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400262C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400262D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400262E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject gameObjectToActivate;

			[Token(Token = "0x400262F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool setActive;

			[Token(Token = "0x4002630")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float timeInSeconds;

			[Token(Token = "0x170004D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B55")]
				[Address(RVA = "0x12C5FD4", Offset = "0x12C5FD4", VA = "0x12C5FD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B57")]
				[Address(RVA = "0x12C601C", Offset = "0x12C601C", VA = "0x12C601C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B52")]
			[Address(RVA = "0x12C5134", Offset = "0x12C5134", VA = "0x12C5134")]
			[DebuggerHidden]
			public <ActivateGO>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6002B53")]
			[Address(RVA = "0x12C5EF4", Offset = "0x12C5EF4", VA = "0x12C5EF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B54")]
			[Address(RVA = "0x12C5EF8", Offset = "0x12C5EF8", VA = "0x12C5EF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B56")]
			[Address(RVA = "0x12C5FDC", Offset = "0x12C5FDC", VA = "0x12C5FDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static JiraObject jiraInstance;

		[Token(Token = "0x4002609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private JiraConnect jiraConnect;

		[Token(Token = "0x400260A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Jira connection settings")]
		public string jiraBaseRestURL;

		[Token(Token = "0x400260B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string jiraUser;

		[Token(Token = "0x400260C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string jiraPassword;

		[Token(Token = "0x400260D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string jiraProjectKey;

		[Token(Token = "0x400260E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("UI settings")]
		[Space(10f)]
		public Text statusText;

		[Token(Token = "0x400260F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button reportPositiveTicketButton;

		[Token(Token = "0x4002610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button reportNeutralTicketButton;

		[Token(Token = "0x4002611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Button reportNegativeTicketButton;

		[Token(Token = "0x4002612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("UI Objects")]
		public CheatsInputField titleInput;

		[Token(Token = "0x4002613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CheatsInputField descriptionInput;

		[Token(Token = "0x4002614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Toggle includeScreenShotToggle;

		[Token(Token = "0x4002615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Space(10f)]
		[Header("Log settings")]
		public bool logActive;

		[Token(Token = "0x4002616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool logInCustomFile;

		[Token(Token = "0x4002617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string logFilePath;

		[Token(Token = "0x4002618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string initLogMessage;

		[Token(Token = "0x4002619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool debugLog;

		[Token(Token = "0x400261A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool includeWarnings;

		[Token(Token = "0x400261B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		public bool takeScreenshot;

		[Token(Token = "0x400261C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UBLog tLog;

		[Token(Token = "0x400261D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<JIssuePriority> issuePriorities;

		[Token(Token = "0x400261E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private JiraSettings settings;

		[Token(Token = "0x400261F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private InGameUIToggle inGameUIToggle;

		[Token(Token = "0x6002B39")]
		[Address(RVA = "0x12C41F8", Offset = "0x12C41F8", VA = "0x12C41F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B3A")]
		[Address(RVA = "0x12C44CC", Offset = "0x12C44CC", VA = "0x12C44CC")]
		private void TakeScreenShotToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002B3B")]
		[Address(RVA = "0x12C44D8", Offset = "0x12C44D8", VA = "0x12C44D8")]
		[IteratorStateMachine(typeof(<Start>d__27))]
		public IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6002B3C")]
		[Address(RVA = "0x12C4574", Offset = "0x12C4574", VA = "0x12C4574")]
		public void SendForm(FeedbackType feedBackType)
		{
		}

		[Token(Token = "0x6002B3D")]
		[Address(RVA = "0x12C4F3C", Offset = "0x12C4F3C", VA = "0x12C4F3C")]
		public Coroutine SendIssueForm(string title, string description, int issueType, string issuePriorityID)
		{
			return null;
		}

		[Token(Token = "0x6002B3E")]
		[Address(RVA = "0x12C507C", Offset = "0x12C507C", VA = "0x12C507C")]
		[IteratorStateMachine(typeof(<SendIssuePost>d__30))]
		public IEnumerator SendIssuePost(string encodedAuth, JIssue jIssue)
		{
			return null;
		}

		[Token(Token = "0x6002B3F")]
		[Address(RVA = "0x12C4EA4", Offset = "0x12C4EA4", VA = "0x12C4EA4")]
		[IteratorStateMachine(typeof(<ActivateGO>d__31))]
		public IEnumerator ActivateGO(GameObject gameObjectToActivate, float timeInSeconds, bool setActive = true)
		{
			return null;
		}

		[Token(Token = "0x6002B40")]
		[Address(RVA = "0x12C515C", Offset = "0x12C515C", VA = "0x12C515C")]
		private bool IsFileUnavailable(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B41")]
		[Address(RVA = "0x12C52BC", Offset = "0x12C52BC", VA = "0x12C52BC")]
		public JiraObject()
		{
		}
	}
	[Token(Token = "0x2000639")]
	public class EndingFourLibraryUI : MonoBehaviour
	{
		[Token(Token = "0x4002631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject tabListItem;

		[Token(Token = "0x6002B58")]
		[Address(RVA = "0x12C6024", Offset = "0x12C6024", VA = "0x12C6024")]
		public void ToggleTabListItem()
		{
		}

		[Token(Token = "0x6002B59")]
		[Address(RVA = "0x12C6100", Offset = "0x12C6100", VA = "0x12C6100")]
		public EndingFourLibraryUI()
		{
		}
	}
	[Token(Token = "0x200063A")]
	[RequireComponent(typeof(Toggle))]
	public class FreeMoveToggle : MonoBehaviourPunCallbacks, IOption
	{
		[Token(Token = "0x200063B")]
		[CompilerGenerated]
		private sealed class <Init>d__2 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002633")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002634")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002635")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FreeMoveToggle <>4__this;

			[Token(Token = "0x170004D8")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002B64")]
				[Address(RVA = "0x12C67B0", Offset = "0x12C67B0", VA = "0x12C67B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B66")]
				[Address(RVA = "0x12C67F8", Offset = "0x12C67F8", VA = "0x12C67F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B61")]
			[Address(RVA = "0x12C62AC", Offset = "0x12C62AC", VA = "0x12C62AC")]
			[DebuggerHidden]
			public <Init>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6002B62")]
			[Address(RVA = "0x12C65AC", Offset = "0x12C65AC", VA = "0x12C65AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B63")]
			[Address(RVA = "0x12C65B0", Offset = "0x12C65B0", VA = "0x12C65B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B65")]
			[Address(RVA = "0x12C67B8", Offset = "0x12C67B8", VA = "0x12C67B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200063C")]
		[CompilerGenerated]
		private sealed class <DelayedToggle>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002636")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002637")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002638")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FreeMoveToggle <>4__this;

			[Token(Token = "0x170004DA")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002B6A")]
				[Address(RVA = "0x12C6950", Offset = "0x12C6950", VA = "0x12C6950", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B6C")]
				[Address(RVA = "0x12C6998", Offset = "0x12C6998", VA = "0x12C6998", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B67")]
			[Address(RVA = "0x12C657C", Offset = "0x12C657C", VA = "0x12C657C")]
			[DebuggerHidden]
			public <DelayedToggle>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6002B68")]
			[Address(RVA = "0x12C6854", Offset = "0x12C6854", VA = "0x12C6854", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B69")]
			[Address(RVA = "0x12C6858", Offset = "0x12C6858", VA = "0x12C6858", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B6B")]
			[Address(RVA = "0x12C6958", Offset = "0x12C6958", VA = "0x12C6958", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle myToggle;

		[Token(Token = "0x6002B5A")]
		[Address(RVA = "0x12C6108", Offset = "0x12C6108", VA = "0x12C6108", Slot = "54")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002B5B")]
		[Address(RVA = "0x12C6238", Offset = "0x12C6238", VA = "0x12C6238")]
		[IteratorStateMachine(typeof(<Init>d__2))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x6002B5C")]
		[Address(RVA = "0x12C62D4", Offset = "0x12C62D4", VA = "0x12C62D4")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002B5D")]
		[Address(RVA = "0x12C63E8", Offset = "0x12C63E8", VA = "0x12C63E8")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002B5E")]
		[Address(RVA = "0x12C6494", Offset = "0x12C6494", VA = "0x12C6494", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002B5F")]
		[Address(RVA = "0x12C6508", Offset = "0x12C6508", VA = "0x12C6508")]
		[IteratorStateMachine(typeof(<DelayedToggle>d__6))]
		private IEnumerator<float> DelayedToggle()
		{
			return null;
		}

		[Token(Token = "0x6002B60")]
		[Address(RVA = "0x12C65A4", Offset = "0x12C65A4", VA = "0x12C65A4")]
		public FreeMoveToggle()
		{
		}
	}
	[Token(Token = "0x200063D")]
	public class NetworkStatusText : MonoBehaviour
	{
		[Token(Token = "0x4002639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text networkStatusText;

		[Token(Token = "0x6002B6D")]
		[Address(RVA = "0x12C69F4", Offset = "0x12C69F4", VA = "0x12C69F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002B6E")]
		[Address(RVA = "0x12C6A5C", Offset = "0x12C6A5C", VA = "0x12C6A5C")]
		public void NetworkStatus(string newText)
		{
		}

		[Token(Token = "0x6002B6F")]
		[Address(RVA = "0x12C6A80", Offset = "0x12C6A80", VA = "0x12C6A80")]
		public NetworkStatusText()
		{
		}
	}
	[Token(Token = "0x200063E")]
	public class InGameUIController : MonoBehaviour
	{
		[Token(Token = "0x400263A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UpgradeableToolCardListManager toolCardListManager;

		[Token(Token = "0x400263B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UpgradeableOtherCardListManager environmentCardListManager;

		[Token(Token = "0x400263C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpgradeableOtherCardListManager otherCardListManager;

		[Token(Token = "0x6002B70")]
		[Address(RVA = "0x12C6A88", Offset = "0x12C6A88", VA = "0x12C6A88")]
		public void CheckAllCanBuy()
		{
		}

		[Token(Token = "0x6002B71")]
		[Address(RVA = "0x12C6AC8", Offset = "0x12C6AC8", VA = "0x12C6AC8")]
		public InGameUIController()
		{
		}
	}
	[Token(Token = "0x200063F")]
	[RequireComponent(typeof(Toggle))]
	public class SubtitlesToggle : MonoBehaviour, IOption
	{
		[Token(Token = "0x2000640")]
		[CompilerGenerated]
		private sealed class <_SetOption>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400263E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400263F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002640")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isOn;

			[Token(Token = "0x170004DC")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002B7D")]
				[Address(RVA = "0x12C71C4", Offset = "0x12C71C4", VA = "0x12C71C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004DD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B7F")]
				[Address(RVA = "0x12C720C", Offset = "0x12C720C", VA = "0x12C720C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B7A")]
			[Address(RVA = "0x12C70C4", Offset = "0x12C70C4", VA = "0x12C70C4")]
			[DebuggerHidden]
			public <_SetOption>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6002B7B")]
			[Address(RVA = "0x12C70F4", Offset = "0x12C70F4", VA = "0x12C70F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B7C")]
			[Address(RVA = "0x12C70F8", Offset = "0x12C70F8", VA = "0x12C70F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B7E")]
			[Address(RVA = "0x12C71CC", Offset = "0x12C71CC", VA = "0x12C71CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400263D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002B72")]
		[Address(RVA = "0x12C6AD0", Offset = "0x12C6AD0", VA = "0x12C6AD0", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002B73")]
		[Address(RVA = "0x12C6C6C", Offset = "0x12C6C6C", VA = "0x12C6C6C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002B74")]
		[Address(RVA = "0x12C6D4C", Offset = "0x12C6D4C", VA = "0x12C6D4C")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002B75")]
		[Address(RVA = "0x12C6FAC", Offset = "0x12C6FAC", VA = "0x12C6FAC")]
		private void SceneChanged()
		{
		}

		[Token(Token = "0x6002B76")]
		[Address(RVA = "0x12C7044", Offset = "0x12C7044", VA = "0x12C7044")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002B77")]
		[Address(RVA = "0x12C6F40", Offset = "0x12C6F40", VA = "0x12C6F40")]
		[IteratorStateMachine(typeof(<_SetOption>d__6))]
		private IEnumerator<float> _SetOption(bool isOn)
		{
			return null;
		}

		[Token(Token = "0x6002B78")]
		[Address(RVA = "0x12C6F3C", Offset = "0x12C6F3C", VA = "0x12C6F3C")]
		public void SetSubtitlesOnIfNotEnglish()
		{
		}

		[Token(Token = "0x6002B79")]
		[Address(RVA = "0x12C70EC", Offset = "0x12C70EC", VA = "0x12C70EC")]
		public SubtitlesToggle()
		{
		}
	}
	[Token(Token = "0x2000641")]
	public class AdventuresOfClaytonUI : PictureScrollerUI
	{
		[Token(Token = "0x6002B80")]
		[Address(RVA = "0x12C7268", Offset = "0x12C7268", VA = "0x12C7268")]
		public void ComicCollected()
		{
		}

		[Token(Token = "0x6002B81")]
		[Address(RVA = "0x12C7290", Offset = "0x12C7290", VA = "0x12C7290", Slot = "9")]
		protected override void UpdateImage()
		{
		}

		[Token(Token = "0x6002B82")]
		[Address(RVA = "0x12C73B8", Offset = "0x12C73B8", VA = "0x12C73B8", Slot = "8")]
		protected override void ButtonLogic()
		{
		}

		[Token(Token = "0x6002B83")]
		[Address(RVA = "0x12C7534", Offset = "0x12C7534", VA = "0x12C7534")]
		public AdventuresOfClaytonUI()
		{
		}
	}
	[Token(Token = "0x2000642")]
	[RequireComponent(typeof(Toggle))]
	public class AnalyticsToggle : MonoBehaviour, IOption
	{
		[Token(Token = "0x2000643")]
		[CompilerGenerated]
		private sealed class <_SetOption>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002642")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002644")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isOn;

			[Token(Token = "0x170004DE")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002B8E")]
				[Address(RVA = "0x12C7C04", Offset = "0x12C7C04", VA = "0x12C7C04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004DF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B90")]
				[Address(RVA = "0x12C7C4C", Offset = "0x12C7C4C", VA = "0x12C7C4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B8B")]
			[Address(RVA = "0x12C7A80", Offset = "0x12C7A80", VA = "0x12C7A80")]
			[DebuggerHidden]
			public <_SetOption>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6002B8C")]
			[Address(RVA = "0x12C7AB0", Offset = "0x12C7AB0", VA = "0x12C7AB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B8D")]
			[Address(RVA = "0x12C7AB4", Offset = "0x12C7AB4", VA = "0x12C7AB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B8F")]
			[Address(RVA = "0x12C7C0C", Offset = "0x12C7C0C", VA = "0x12C7C0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002B84")]
		[Address(RVA = "0x12C753C", Offset = "0x12C753C", VA = "0x12C753C", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002B85")]
		[Address(RVA = "0x12C76D8", Offset = "0x12C76D8", VA = "0x12C76D8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002B86")]
		[Address(RVA = "0x12C77B8", Offset = "0x12C77B8", VA = "0x12C77B8")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002B87")]
		[Address(RVA = "0x12C7968", Offset = "0x12C7968", VA = "0x12C7968")]
		private void SceneChanged()
		{
		}

		[Token(Token = "0x6002B88")]
		[Address(RVA = "0x12C7A00", Offset = "0x12C7A00", VA = "0x12C7A00")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002B89")]
		[Address(RVA = "0x12C78FC", Offset = "0x12C78FC", VA = "0x12C78FC")]
		[IteratorStateMachine(typeof(<_SetOption>d__6))]
		private IEnumerator<float> _SetOption(bool isOn)
		{
			return null;
		}

		[Token(Token = "0x6002B8A")]
		[Address(RVA = "0x12C7AA8", Offset = "0x12C7AA8", VA = "0x12C7AA8")]
		public AnalyticsToggle()
		{
		}
	}
	[Token(Token = "0x2000644")]
	[RequireComponent(typeof(Toggle))]
	public class BlindersToggle : MonoBehaviourPunCallbacks, IOption
	{
		[Token(Token = "0x2000645")]
		[CompilerGenerated]
		private sealed class <Init>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002647")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002648")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002649")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public BlindersToggle <>4__this;

			[Token(Token = "0x170004E0")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002B9C")]
				[Address(RVA = "0x12C836C", Offset = "0x12C836C", VA = "0x12C836C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B9E")]
				[Address(RVA = "0x12C83B4", Offset = "0x12C83B4", VA = "0x12C83B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B99")]
			[Address(RVA = "0x12C7E4C", Offset = "0x12C7E4C", VA = "0x12C7E4C")]
			[DebuggerHidden]
			public <Init>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6002B9A")]
			[Address(RVA = "0x12C8168", Offset = "0x12C8168", VA = "0x12C8168", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B9B")]
			[Address(RVA = "0x12C816C", Offset = "0x12C816C", VA = "0x12C816C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B9D")]
			[Address(RVA = "0x12C8374", Offset = "0x12C8374", VA = "0x12C8374", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000646")]
		[CompilerGenerated]
		private sealed class <_SetOption>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400264A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400264B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400264C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isOn;

			[Token(Token = "0x400264D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BlindersToggle <>4__this;

			[Token(Token = "0x170004E2")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002BA2")]
				[Address(RVA = "0x12C8540", Offset = "0x12C8540", VA = "0x12C8540", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BA4")]
				[Address(RVA = "0x12C8588", Offset = "0x12C8588", VA = "0x12C8588", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B9F")]
			[Address(RVA = "0x12C8028", Offset = "0x12C8028", VA = "0x12C8028")]
			[DebuggerHidden]
			public <_SetOption>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6002BA0")]
			[Address(RVA = "0x12C8410", Offset = "0x12C8410", VA = "0x12C8410", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BA1")]
			[Address(RVA = "0x12C8414", Offset = "0x12C8414", VA = "0x12C8414", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BA3")]
			[Address(RVA = "0x12C8548", Offset = "0x12C8548", VA = "0x12C8548", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000647")]
		[CompilerGenerated]
		private sealed class <DelayedToggle>d__8 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400264E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400264F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002650")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public BlindersToggle <>4__this;

			[Token(Token = "0x170004E4")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002BA8")]
				[Address(RVA = "0x12C86E4", Offset = "0x12C86E4", VA = "0x12C86E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BAA")]
				[Address(RVA = "0x12C872C", Offset = "0x12C872C", VA = "0x12C872C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BA5")]
			[Address(RVA = "0x12C8138", Offset = "0x12C8138", VA = "0x12C8138")]
			[DebuggerHidden]
			public <DelayedToggle>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6002BA6")]
			[Address(RVA = "0x12C85E4", Offset = "0x12C85E4", VA = "0x12C85E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BA7")]
			[Address(RVA = "0x12C85E8", Offset = "0x12C85E8", VA = "0x12C85E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BA9")]
			[Address(RVA = "0x12C86EC", Offset = "0x12C86EC", VA = "0x12C86EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle myToggle;

		[Token(Token = "0x4002646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Slider blinderStrengthSlider;

		[Token(Token = "0x6002B91")]
		[Address(RVA = "0x12C7CA8", Offset = "0x12C7CA8", VA = "0x12C7CA8", Slot = "54")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002B92")]
		[Address(RVA = "0x12C7DD8", Offset = "0x12C7DD8", VA = "0x12C7DD8")]
		[IteratorStateMachine(typeof(<Init>d__3))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x6002B93")]
		[Address(RVA = "0x12C7E74", Offset = "0x12C7E74", VA = "0x12C7E74")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002B94")]
		[Address(RVA = "0x12C7F98", Offset = "0x12C7F98", VA = "0x12C7F98")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002B95")]
		[Address(RVA = "0x12C7F10", Offset = "0x12C7F10", VA = "0x12C7F10")]
		[IteratorStateMachine(typeof(<_SetOption>d__6))]
		private IEnumerator<float> _SetOption(bool isOn)
		{
			return null;
		}

		[Token(Token = "0x6002B96")]
		[Address(RVA = "0x12C8050", Offset = "0x12C8050", VA = "0x12C8050", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002B97")]
		[Address(RVA = "0x12C80C4", Offset = "0x12C80C4", VA = "0x12C80C4")]
		[IteratorStateMachine(typeof(<DelayedToggle>d__8))]
		private IEnumerator<float> DelayedToggle()
		{
			return null;
		}

		[Token(Token = "0x6002B98")]
		[Address(RVA = "0x12C8160", Offset = "0x12C8160", VA = "0x12C8160")]
		public BlindersToggle()
		{
		}
	}
	[Token(Token = "0x2000648")]
	public class CheatsInputField : UIKitInputField
	{
		[Token(Token = "0x6002BAB")]
		[Address(RVA = "0x12C8788", Offset = "0x12C8788", VA = "0x12C8788", Slot = "7")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6002BAC")]
		[Address(RVA = "0x12C8848", Offset = "0x12C8848", VA = "0x12C8848")]
		public CheatsInputField()
		{
		}
	}
	[Token(Token = "0x2000649")]
	public class CheatsKeyboardManager : MobileKeyboardManager
	{
		[Token(Token = "0x6002BAD")]
		[Address(RVA = "0x12C8850", Offset = "0x12C8850", VA = "0x12C8850", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002BAE")]
		[Address(RVA = "0x12C8858", Offset = "0x12C8858", VA = "0x12C8858")]
		public CheatsKeyboardManager()
		{
		}
	}
	[Token(Token = "0x200064A")]
	[RequireComponent(typeof(Toggle))]
	public class DisableHapticsToggle : MonoBehaviour
	{
		[Token(Token = "0x4002651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002BAF")]
		[Address(RVA = "0x12C8860", Offset = "0x12C8860", VA = "0x12C8860")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BB0")]
		[Address(RVA = "0x12C89FC", Offset = "0x12C89FC", VA = "0x12C89FC")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002BB1")]
		[Address(RVA = "0x12C8B00", Offset = "0x12C8B00", VA = "0x12C8B00")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002BB2")]
		[Address(RVA = "0x12C8B28", Offset = "0x12C8B28", VA = "0x12C8B28")]
		public DisableHapticsToggle()
		{
		}
	}
	[Token(Token = "0x200064B")]
	public class EndingUI : PictureScrollerUI
	{
		[Token(Token = "0x4002652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private int endingIndex;

		[Token(Token = "0x4002653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject tabListItem;

		[Token(Token = "0x6002BB3")]
		[Address(RVA = "0x12C8C3C", Offset = "0x12C8C3C", VA = "0x12C8C3C")]
		public void ToggleTabListItem()
		{
		}

		[Token(Token = "0x6002BB4")]
		[Address(RVA = "0x12C8CFC", Offset = "0x12C8CFC", VA = "0x12C8CFC")]
		public void EndingClueCollected()
		{
		}

		[Token(Token = "0x6002BB5")]
		[Address(RVA = "0x12C8D24", Offset = "0x12C8D24", VA = "0x12C8D24", Slot = "9")]
		protected override void UpdateImage()
		{
		}

		[Token(Token = "0x6002BB6")]
		[Address(RVA = "0x12C8F34", Offset = "0x12C8F34", VA = "0x12C8F34")]
		public EndingUI()
		{
		}
	}
	[Token(Token = "0x200064C")]
	[RequireComponent(typeof(Toggle))]
	public class HoldGrabToggle : MonoBehaviour
	{
		[Token(Token = "0x4002654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002BB7")]
		[Address(RVA = "0x12C8F3C", Offset = "0x12C8F3C", VA = "0x12C8F3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BB8")]
		[Address(RVA = "0x12C90D8", Offset = "0x12C90D8", VA = "0x12C90D8")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002BB9")]
		[Address(RVA = "0x12C91DC", Offset = "0x12C91DC", VA = "0x12C91DC")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002BBA")]
		[Address(RVA = "0x12C9204", Offset = "0x12C9204", VA = "0x12C9204")]
		public HoldGrabToggle()
		{
		}
	}
	[Token(Token = "0x200064D")]
	[CreateAssetMenu(fileName = "ChompyCodexScriptableObject", menuName = "ScriptableObjects/ChompyCodexScriptableObject", order = 3)]
	public class ChompyCodexScriptableObject : ScriptableObject
	{
		[Token(Token = "0x4002655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString title;

		[Token(Token = "0x4002656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LocalizedString description;

		[Token(Token = "0x4002657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Sprite sprite;

		[Token(Token = "0x6002BBB")]
		[Address(RVA = "0x12C920C", Offset = "0x12C920C", VA = "0x12C920C")]
		public ChompyCodexScriptableObject()
		{
		}
	}
	[Token(Token = "0x200064E")]
	[RequireComponent(typeof(TogglePlayerControls))]
	public class InGameUIToggle : Singleton<InGameUIToggle>
	{
		[Token(Token = "0x200064F")]
		[CompilerGenerated]
		private sealed class <_ToggleUIAfter>d__34 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InGameUIToggle <>4__this;

			[Token(Token = "0x4002673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x4002674")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool show;

			[Token(Token = "0x170004E7")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002BD1")]
				[Address(RVA = "0x12CAD30", Offset = "0x12CAD30", VA = "0x12CAD30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BD3")]
				[Address(RVA = "0x12CAD78", Offset = "0x12CAD78", VA = "0x12CAD78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BCE")]
			[Address(RVA = "0x12C9EFC", Offset = "0x12C9EFC", VA = "0x12C9EFC")]
			[DebuggerHidden]
			public <_ToggleUIAfter>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6002BCF")]
			[Address(RVA = "0x12CA6E4", Offset = "0x12CA6E4", VA = "0x12CA6E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BD0")]
			[Address(RVA = "0x12CA6E8", Offset = "0x12CA6E8", VA = "0x12CA6E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BD2")]
			[Address(RVA = "0x12CAD38", Offset = "0x12CAD38", VA = "0x12CAD38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Canvas inGameUICanvas;

		[Token(Token = "0x4002659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Canvas multiplayerRoomCodeKeyboardCanvas;

		[Token(Token = "0x400265A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Canvas feedbackFormKeyboardCanvas;

		[Token(Token = "0x400265B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Canvas comicCanvas;

		[Token(Token = "0x400265C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AdventuresOfClaytonUI adventuresOfClaytonUI;

		[Token(Token = "0x400265D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public EndingUI ending1UI;

		[Token(Token = "0x400265E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public EndingFourLibraryUI ending4UI;

		[Token(Token = "0x400265F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject inGameUIPanelRootObject;

		[Token(Token = "0x4002660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject sidebarGameObject;

		[Token(Token = "0x4002661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RoomCodeKeyboardManager roomCodeKeyboardManager;

		[Token(Token = "0x4002662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private CheatsKeyboardManager cheatsKeyboardManager;

		[Token(Token = "0x4002663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private AudioClip buttonClip;

		[Token(Token = "0x4002664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GraphicRaycaster[] raycasters;

		[Token(Token = "0x4002665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private GraphicRaycaster tabListRaycaster;

		[Token(Token = "0x4002666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private ListSelectionHelper mainListSelectionHelper;

		[Token(Token = "0x4002667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public bool allowToggle;

		[Token(Token = "0x4002668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private TogglePlayerControls togglePlayerControls;

		[Token(Token = "0x4002669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool inGamePanelActive;

		[Token(Token = "0x400266A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Animator[] animators;

		[Token(Token = "0x400266B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool hasLeftButtonventListener;

		[Token(Token = "0x400266C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UnityEvent OnInGameUIEnabled;

		[Token(Token = "0x400266D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UnityEvent OnInGameUIDisabled;

		[Token(Token = "0x400266E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private ScrollRect[] scrollRects;

		[Token(Token = "0x400266F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Scrollbar[] scrollbars;

		[Token(Token = "0x170004E6")]
		public bool IsActive
		{
			[Token(Token = "0x6002BBC")]
			[Address(RVA = "0x12C9214", Offset = "0x12C9214", VA = "0x12C9214")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002BBD")]
		[Address(RVA = "0x12C921C", Offset = "0x12C921C", VA = "0x12C921C")]
		protected void Start()
		{
		}

		[Token(Token = "0x6002BBE")]
		[Address(RVA = "0x12C9AF8", Offset = "0x12C9AF8", VA = "0x12C9AF8")]
		private void SaveDataLoaded()
		{
		}

		[Token(Token = "0x6002BBF")]
		[Address(RVA = "0x12C9B24", Offset = "0x12C9B24", VA = "0x12C9B24", Slot = "5")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6002BC0")]
		[Address(RVA = "0x12C9C08", Offset = "0x12C9C08", VA = "0x12C9C08")]
		private void SceneChangeStarted()
		{
		}

		[Token(Token = "0x6002BC1")]
		[Address(RVA = "0x12C9CDC", Offset = "0x12C9CDC", VA = "0x12C9CDC")]
		private void SceneChangeFinished()
		{
		}

		[Token(Token = "0x6002BC2")]
		[Address(RVA = "0x12C9DB4", Offset = "0x12C9DB4", VA = "0x12C9DB4")]
		public void SetSidebarActive(bool b)
		{
		}

		[Token(Token = "0x6002BC3")]
		[Address(RVA = "0x12C9DD4", Offset = "0x12C9DD4", VA = "0x12C9DD4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002BC4")]
		[Address(RVA = "0x12C96A0", Offset = "0x12C96A0", VA = "0x12C96A0")]
		public void ToggleInGameUIPanel()
		{
		}

		[Token(Token = "0x6002BC5")]
		[Address(RVA = "0x12C9E64", Offset = "0x12C9E64", VA = "0x12C9E64")]
		[IteratorStateMachine(typeof(<_ToggleUIAfter>d__34))]
		private IEnumerator<float> _ToggleUIAfter(float duration, bool show)
		{
			return null;
		}

		[Token(Token = "0x6002BC6")]
		[Address(RVA = "0x12C9F24", Offset = "0x12C9F24", VA = "0x12C9F24")]
		public void PlayTutorial()
		{
		}

		[Token(Token = "0x6002BC7")]
		[Address(RVA = "0x12CA128", Offset = "0x12CA128", VA = "0x12CA128")]
		public void SetInGameUIPanelVisibility(bool visible)
		{
		}

		[Token(Token = "0x6002BC8")]
		[Address(RVA = "0x12CA144", Offset = "0x12CA144", VA = "0x12CA144")]
		private void MoveInGamePanel()
		{
		}

		[Token(Token = "0x6002BC9")]
		[Address(RVA = "0x12CA288", Offset = "0x12CA288", VA = "0x12CA288")]
		public void ToggleOffKeyboards()
		{
		}

		[Token(Token = "0x6002BCA")]
		[Address(RVA = "0x12CA310", Offset = "0x12CA310", VA = "0x12CA310")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002BCB")]
		[Address(RVA = "0x12CA5EC", Offset = "0x12CA5EC", VA = "0x12CA5EC")]
		public Canvas GetUICanvas()
		{
			return null;
		}

		[Token(Token = "0x6002BCC")]
		[Address(RVA = "0x12CA5F4", Offset = "0x12CA5F4", VA = "0x12CA5F4")]
		public TogglePlayerControls GetPlayerControlsToggle()
		{
			return null;
		}

		[Token(Token = "0x6002BCD")]
		[Address(RVA = "0x12CA5FC", Offset = "0x12CA5FC", VA = "0x12CA5FC")]
		public InGameUIToggle()
		{
		}
	}
	[Token(Token = "0x2000650")]
	public class GameplayTag : MonoBehaviour
	{
		[Token(Token = "0x4002675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI myText;

		[Token(Token = "0x4002676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Sprite activatedGameplayTagSprite;

		[Token(Token = "0x4002677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip buttonClip;

		[Token(Token = "0x4002678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button myButton;

		[Token(Token = "0x4002679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.UI.Image myImage;

		[Token(Token = "0x400267A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Sprite originalGameplayTagSprite;

		[Token(Token = "0x400267B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MatchmakingRoom.GameplayTag myGameplayTag;

		[Token(Token = "0x400267C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameplayTagsArea myTagArea;

		[Token(Token = "0x400267D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool selected;

		[Token(Token = "0x6002BD4")]
		[Address(RVA = "0x12CADD4", Offset = "0x12CADD4", VA = "0x12CADD4")]
		public void Init(MatchmakingRoom.GameplayTag gameplayTag, GameplayTagsArea tagArea)
		{
		}

		[Token(Token = "0x6002BD5")]
		[Address(RVA = "0x12CAF88", Offset = "0x12CAF88", VA = "0x12CAF88")]
		private void GameplayTagSelected()
		{
		}

		[Token(Token = "0x6002BD6")]
		[Address(RVA = "0x12CB310", Offset = "0x12CB310", VA = "0x12CB310")]
		public MatchmakingRoom.GameplayTag GetMyGameplayTag()
		{
			return default(MatchmakingRoom.GameplayTag);
		}

		[Token(Token = "0x6002BD7")]
		[Address(RVA = "0x12CB318", Offset = "0x12CB318", VA = "0x12CB318")]
		public bool IsSelected()
		{
			return default(bool);
		}

		[Token(Token = "0x6002BD8")]
		[Address(RVA = "0x12CB290", Offset = "0x12CB290", VA = "0x12CB290")]
		private void PlayClip()
		{
		}

		[Token(Token = "0x6002BD9")]
		[Address(RVA = "0x12CB320", Offset = "0x12CB320", VA = "0x12CB320")]
		public GameplayTag()
		{
		}
	}
	[Token(Token = "0x2000651")]
	public class GameplayTagsArea : MonoBehaviour
	{
		[Token(Token = "0x400267E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool showAllTags;

		[Token(Token = "0x400267F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject gameplayTagPrefab;

		[Token(Token = "0x4002680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MatchmakingPanel matchmakingPanel;

		[Token(Token = "0x4002681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int maxGameplayTagAmount;

		[Token(Token = "0x4002682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<GameplayTag> allInstantiatedTags;

		[Token(Token = "0x6002BDA")]
		[Address(RVA = "0x12CB328", Offset = "0x12CB328", VA = "0x12CB328")]
		private void Start()
		{
		}

		[Token(Token = "0x6002BDB")]
		[Address(RVA = "0x12CB338", Offset = "0x12CB338", VA = "0x12CB338")]
		private void PopulateAll()
		{
		}

		[Token(Token = "0x6002BDC")]
		[Address(RVA = "0x12CB674", Offset = "0x12CB674", VA = "0x12CB674")]
		public void AddGameplayTag(MatchmakingRoom.GameplayTag tag)
		{
		}

		[Token(Token = "0x6002BDD")]
		[Address(RVA = "0x12CB0A0", Offset = "0x12CB0A0", VA = "0x12CB0A0")]
		public void GameplayTagSelected(MatchmakingRoom.GameplayTag myGameplayTag)
		{
		}

		[Token(Token = "0x6002BDE")]
		[Address(RVA = "0x12CB198", Offset = "0x12CB198", VA = "0x12CB198")]
		public void GameplayTagDeSelected(MatchmakingRoom.GameplayTag myGameplayTag)
		{
		}

		[Token(Token = "0x6002BDF")]
		[Address(RVA = "0x12CB90C", Offset = "0x12CB90C", VA = "0x12CB90C")]
		public void RemoveGamePlayTag(MatchmakingRoom.GameplayTag tag)
		{
		}

		[Token(Token = "0x6002BE0")]
		[Address(RVA = "0x12CBA44", Offset = "0x12CBA44", VA = "0x12CBA44")]
		public void ToggleAll(bool active)
		{
		}

		[Token(Token = "0x6002BE1")]
		[Address(RVA = "0x12CBAEC", Offset = "0x12CBAEC", VA = "0x12CBAEC")]
		public GameplayTagsArea()
		{
		}
	}
	[Token(Token = "0x2000652")]
	[RequireComponent(typeof(Dropdown))]
	public class LanguageDropdown : MonoBehaviour
	{
		[Token(Token = "0x2000653")]
		public enum LangugeOption
		{
			[Token(Token = "0x4002688")]
			Any,
			[Token(Token = "0x4002689")]
			English,
			[Token(Token = "0x400268A")]
			Spanish,
			[Token(Token = "0x400268B")]
			German,
			[Token(Token = "0x400268C")]
			Russian,
			[Token(Token = "0x400268D")]
			French,
			[Token(Token = "0x400268E")]
			Italian,
			[Token(Token = "0x400268F")]
			Japanese,
			[Token(Token = "0x4002690")]
			Korean,
			[Token(Token = "0x4002691")]
			Finnish
		}

		[Token(Token = "0x4002683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MatchmakingPanel matchmakingPanel;

		[Token(Token = "0x4002684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TMP_Dropdown myDropdown;

		[Token(Token = "0x4002685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<TMP_Dropdown.OptionData> langugaeOptionDatas;

		[Token(Token = "0x4002686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LangugeOption currentSelectedLanguage;

		[Token(Token = "0x6002BE2")]
		[Address(RVA = "0x12CBB7C", Offset = "0x12CBB7C", VA = "0x12CBB7C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BE3")]
		[Address(RVA = "0x12CBE64", Offset = "0x12CBE64", VA = "0x12CBE64")]
		private void LanguageOptionSwitched(int arg0)
		{
		}

		[Token(Token = "0x6002BE4")]
		[Address(RVA = "0x12CBF74", Offset = "0x12CBF74", VA = "0x12CBF74")]
		public LanguageDropdown()
		{
		}
	}
	[Token(Token = "0x2000654")]
	[RequireComponent(typeof(NetworkConnectManager))]
	public class MatchmakingManager : MonoBehaviour
	{
		[Token(Token = "0x4002692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x4002693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PhotonRoomPoller photonRoomPoller;

		[Token(Token = "0x6002BE5")]
		[Address(RVA = "0x12CBFFC", Offset = "0x12CBFFC", VA = "0x12CBFFC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002BE6")]
		[Address(RVA = "0x12CC0A0", Offset = "0x12CC0A0", VA = "0x12CC0A0")]
		public void StartPhotonRoomPoller()
		{
		}

		[Token(Token = "0x6002BE7")]
		[Address(RVA = "0x12CC408", Offset = "0x12CC408", VA = "0x12CC408")]
		public void ConnectedToLobby(string cloudRegion)
		{
		}

		[Token(Token = "0x6002BE8")]
		[Address(RVA = "0x12CC474", Offset = "0x12CC474", VA = "0x12CC474")]
		public void StopPhotonRoomPoller()
		{
		}

		[Token(Token = "0x6002BE9")]
		[Address(RVA = "0x12CC50C", Offset = "0x12CC50C", VA = "0x12CC50C")]
		public void SwitchRoomPollerRegion(string newRegion)
		{
		}

		[Token(Token = "0x6002BEA")]
		[Address(RVA = "0x12CC554", Offset = "0x12CC554", VA = "0x12CC554")]
		private void AddContent(List<RoomInfo> roomInfos)
		{
		}

		[Token(Token = "0x6002BEB")]
		[Address(RVA = "0x12CCA50", Offset = "0x12CCA50", VA = "0x12CCA50")]
		public MatchmakingManager()
		{
		}
	}
	[Token(Token = "0x2000655")]
	public class MatchmakingPanel : MonoBehaviour
	{
		[Token(Token = "0x2000656")]
		[CompilerGenerated]
		private sealed class <RegionSwitchedDelayed>d__21 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40026AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatchmakingPanel <>4__this;

			[Token(Token = "0x40026AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string selectedRegion;

			[Token(Token = "0x170004E9")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002C10")]
				[Address(RVA = "0x12CEC24", Offset = "0x12CEC24", VA = "0x12CEC24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004EA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C12")]
				[Address(RVA = "0x12CEC6C", Offset = "0x12CEC6C", VA = "0x12CEC6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C0D")]
			[Address(RVA = "0x12CCB98", Offset = "0x12CCB98", VA = "0x12CCB98")]
			[DebuggerHidden]
			public <RegionSwitchedDelayed>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6002C0E")]
			[Address(RVA = "0x12CEAD4", Offset = "0x12CEAD4", VA = "0x12CEAD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C0F")]
			[Address(RVA = "0x12CEAD8", Offset = "0x12CEAD8", VA = "0x12CEAD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C11")]
			[Address(RVA = "0x12CEC2C", Offset = "0x12CEC2C", VA = "0x12CEC2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000657")]
		[CompilerGenerated]
		private sealed class <DisconnectCoroutine>d__33 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40026AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatchmakingPanel <>4__this;

			[Token(Token = "0x170004EB")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002C16")]
				[Address(RVA = "0x12CEF68", Offset = "0x12CEF68", VA = "0x12CEF68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004EC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C18")]
				[Address(RVA = "0x12CEFB0", Offset = "0x12CEFB0", VA = "0x12CEFB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C13")]
			[Address(RVA = "0x12CD9E0", Offset = "0x12CD9E0", VA = "0x12CD9E0")]
			[DebuggerHidden]
			public <DisconnectCoroutine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6002C14")]
			[Address(RVA = "0x12CECC8", Offset = "0x12CECC8", VA = "0x12CECC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C15")]
			[Address(RVA = "0x12CECCC", Offset = "0x12CECCC", VA = "0x12CECCC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C17")]
			[Address(RVA = "0x12CEF70", Offset = "0x12CEF70", VA = "0x12CEF70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000658")]
		[CompilerGenerated]
		private sealed class <ReconnectPhotonDelayed>d__36 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40026B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatchmakingPanel <>4__this;

			[Token(Token = "0x170004ED")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002C1C")]
				[Address(RVA = "0x12CF274", Offset = "0x12CF274", VA = "0x12CF274", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004EE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C1E")]
				[Address(RVA = "0x12CF2BC", Offset = "0x12CF2BC", VA = "0x12CF2BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C19")]
			[Address(RVA = "0x12CDB88", Offset = "0x12CDB88", VA = "0x12CDB88")]
			[DebuggerHidden]
			public <ReconnectPhotonDelayed>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x6002C1A")]
			[Address(RVA = "0x12CF00C", Offset = "0x12CF00C", VA = "0x12CF00C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C1B")]
			[Address(RVA = "0x12CF010", Offset = "0x12CF010", VA = "0x12CF010", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C1D")]
			[Address(RVA = "0x12CF27C", Offset = "0x12CF27C", VA = "0x12CF27C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000659")]
		[CompilerGenerated]
		private sealed class <_PollForPlayerAmountChange>d__50 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40026B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatchmakingPanel <>4__this;

			[Token(Token = "0x170004EF")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002C22")]
				[Address(RVA = "0x12CF6B8", Offset = "0x12CF6B8", VA = "0x12CF6B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004F0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C24")]
				[Address(RVA = "0x12CF700", Offset = "0x12CF700", VA = "0x12CF700", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C1F")]
			[Address(RVA = "0x12CE9B8", Offset = "0x12CE9B8", VA = "0x12CE9B8")]
			[DebuggerHidden]
			public <_PollForPlayerAmountChange>d__50(int <>1__state)
			{
			}

			[Token(Token = "0x6002C20")]
			[Address(RVA = "0x12CF318", Offset = "0x12CF318", VA = "0x12CF318", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C21")]
			[Address(RVA = "0x12CF31C", Offset = "0x12CF31C", VA = "0x12CF31C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C23")]
			[Address(RVA = "0x12CF6C0", Offset = "0x12CF6C0", VA = "0x12CF6C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x4002695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MatchmakingRoomList matchMakingRoomList;

		[Token(Token = "0x4002696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Button startRandomGameButton;

		[Token(Token = "0x4002697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Button stopRandomGameButton;

		[Token(Token = "0x4002698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button disconnectFromRoomButton;

		[Token(Token = "0x4002699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Button reconnectButton;

		[Token(Token = "0x400269A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private LanguageDropdown languageDropdown;

		[Token(Token = "0x400269B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TextMeshProUGUI roomCountText;

		[Token(Token = "0x400269C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TextMeshProUGUI connectingText;

		[Token(Token = "0x400269D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private TextMeshProUGUI reconnectingText;

		[Token(Token = "0x400269E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RoomPollerRegionDropdown roomPollerRegionDropdown;

		[Token(Token = "0x400269F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<MatchmakingRoom.GameplayTag> selectedGameplayTags;

		[Token(Token = "0x40026A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LanguageDropdown.LangugeOption selectedLanguage;

		[Token(Token = "0x40026A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool roomOpenForPublic;

		[Token(Token = "0x40026A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MatchmakingRoom myRoom;

		[Token(Token = "0x40026A3")]
		private const string pollForPlayerAmountChangeCoroutineName = "PollForPlayerAmountChangeCoroutine";

		[Token(Token = "0x40026A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int currentPlayerCount;

		[Token(Token = "0x40026A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int lastPlayerAmount;

		[Token(Token = "0x40026A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ExitGames.Client.Photon.Hashtable customProperties;

		[Token(Token = "0x40026A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string[] propertiesListedInLobby;

		[Token(Token = "0x6002BED")]
		[Address(RVA = "0x12CCA5C", Offset = "0x12CCA5C", VA = "0x12CCA5C")]
		public void RegionSwitched(string selectedRegion)
		{
		}

		[Token(Token = "0x6002BEE")]
		[Address(RVA = "0x12CCB08", Offset = "0x12CCB08", VA = "0x12CCB08")]
		[IteratorStateMachine(typeof(<RegionSwitchedDelayed>d__21))]
		private IEnumerator<float> RegionSwitchedDelayed(string selectedRegion)
		{
			return null;
		}

		[Token(Token = "0x6002BEF")]
		[Address(RVA = "0x12CC45C", Offset = "0x12CC45C", VA = "0x12CC45C")]
		public void SwitchDropdownRegion(string region)
		{
		}

		[Token(Token = "0x6002BF0")]
		[Address(RVA = "0x12CCCE0", Offset = "0x12CCCE0", VA = "0x12CCCE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002BF1")]
		[Address(RVA = "0x12CCF24", Offset = "0x12CCF24", VA = "0x12CCF24")]
		private void SetupCustomProperties()
		{
		}

		[Token(Token = "0x6002BF2")]
		[Address(RVA = "0x12CC1BC", Offset = "0x12CC1BC", VA = "0x12CC1BC")]
		public void ToggleConnectingText(bool active)
		{
		}

		[Token(Token = "0x6002BF3")]
		[Address(RVA = "0x12CCECC", Offset = "0x12CCECC", VA = "0x12CCECC")]
		public void ToggleReconnectingText(bool active)
		{
		}

		[Token(Token = "0x6002BF4")]
		[Address(RVA = "0x12CD280", Offset = "0x12CD280", VA = "0x12CD280")]
		public void UpdateRoomCount(int newRoomCount)
		{
		}

		[Token(Token = "0x6002BF5")]
		[Address(RVA = "0x12CD328", Offset = "0x12CD328", VA = "0x12CD328")]
		public void JoiningNewRoom()
		{
		}

		[Token(Token = "0x6002BF6")]
		[Address(RVA = "0x12CD464", Offset = "0x12CD464", VA = "0x12CD464")]
		public void JoinedRoom()
		{
		}

		[Token(Token = "0x6002BF7")]
		[Address(RVA = "0x12CD688", Offset = "0x12CD688", VA = "0x12CD688")]
		public void SetupMatchMakingPanel()
		{
		}

		[Token(Token = "0x6002BF8")]
		[Address(RVA = "0x12CD7B0", Offset = "0x12CD7B0", VA = "0x12CD7B0")]
		public void PlayerNotConnected()
		{
		}

		[Token(Token = "0x6002BF9")]
		[Address(RVA = "0x12CD8BC", Offset = "0x12CD8BC", VA = "0x12CD8BC")]
		private void DisconnectFromRoom()
		{
		}

		[Token(Token = "0x6002BFA")]
		[Address(RVA = "0x12CD96C", Offset = "0x12CD96C", VA = "0x12CD96C")]
		[IteratorStateMachine(typeof(<DisconnectCoroutine>d__33))]
		private IEnumerator<float> DisconnectCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002BFB")]
		[Address(RVA = "0x12CDA08", Offset = "0x12CDA08", VA = "0x12CDA08")]
		public void DisconnectedFromRoom()
		{
		}

		[Token(Token = "0x6002BFC")]
		[Address(RVA = "0x12CDA78", Offset = "0x12CDA78", VA = "0x12CDA78")]
		private void ReconnectPhoton()
		{
		}

		[Token(Token = "0x6002BFD")]
		[Address(RVA = "0x12CDB14", Offset = "0x12CDB14", VA = "0x12CDB14")]
		[IteratorStateMachine(typeof(<ReconnectPhotonDelayed>d__36))]
		private IEnumerator<float> ReconnectPhotonDelayed()
		{
			return null;
		}

		[Token(Token = "0x6002BFE")]
		[Address(RVA = "0x12CDBB0", Offset = "0x12CDBB0", VA = "0x12CDBB0")]
		public bool IsRoomOpenForPublic()
		{
			return default(bool);
		}

		[Token(Token = "0x6002BFF")]
		[Address(RVA = "0x12CC9FC", Offset = "0x12CC9FC", VA = "0x12CC9FC")]
		public void AddRoom(MatchmakingRoom.RoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6002C00")]
		[Address(RVA = "0x12CC9C8", Offset = "0x12CC9C8", VA = "0x12CC9C8")]
		public void RemoveRoom(MatchmakingRoom.RoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6002C01")]
		[Address(RVA = "0x12CDBB8", Offset = "0x12CDBB8", VA = "0x12CDBB8")]
		private bool IsConnectedInRoom(MatchmakingRoom.RoomInfo roomInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C02")]
		[Address(RVA = "0x12CC4F4", Offset = "0x12CC4F4", VA = "0x12CC4F4")]
		public void ClearRoomList()
		{
		}

		[Token(Token = "0x6002C03")]
		[Address(RVA = "0x12CDE40", Offset = "0x12CDE40", VA = "0x12CDE40")]
		public void StartRandomGame()
		{
		}

		[Token(Token = "0x6002C04")]
		[Address(RVA = "0x12CD338", Offset = "0x12CD338", VA = "0x12CD338")]
		public void StopRandomGame()
		{
		}

		[Token(Token = "0x6002C05")]
		[Address(RVA = "0x12CB7D0", Offset = "0x12CB7D0", VA = "0x12CB7D0")]
		public void AddGameplayTag(MatchmakingRoom.GameplayTag gameplayTag)
		{
		}

		[Token(Token = "0x6002C06")]
		[Address(RVA = "0x12CB898", Offset = "0x12CB898", VA = "0x12CB898")]
		public void RemoveGameplayTag(MatchmakingRoom.GameplayTag gameplayTag)
		{
		}

		[Token(Token = "0x6002C07")]
		[Address(RVA = "0x12CBE84", Offset = "0x12CBE84", VA = "0x12CBE84")]
		public void UpdateSelectedLanguage(LanguageDropdown.LangugeOption newLanguage)
		{
		}

		[Token(Token = "0x6002C08")]
		[Address(RVA = "0x12CE9A8", Offset = "0x12CE9A8", VA = "0x12CE9A8")]
		public List<MatchmakingRoom.GameplayTag> GetSelectedGameplayTags()
		{
			return null;
		}

		[Token(Token = "0x6002C09")]
		[Address(RVA = "0x12CE9B0", Offset = "0x12CE9B0", VA = "0x12CE9B0")]
		public LanguageDropdown.LangugeOption GetSelectedLanguage()
		{
			return default(LanguageDropdown.LangugeOption);
		}

		[Token(Token = "0x6002C0A")]
		[Address(RVA = "0x12CE8C0", Offset = "0x12CE8C0", VA = "0x12CE8C0")]
		private void UpdateGameplayTags()
		{
		}

		[Token(Token = "0x6002C0B")]
		[Address(RVA = "0x12CE314", Offset = "0x12CE314", VA = "0x12CE314")]
		[IteratorStateMachine(typeof(<_PollForPlayerAmountChange>d__50))]
		private IEnumerator<float> _PollForPlayerAmountChange()
		{
			return null;
		}

		[Token(Token = "0x6002C0C")]
		[Address(RVA = "0x12CE9E0", Offset = "0x12CE9E0", VA = "0x12CE9E0")]
		public MatchmakingPanel()
		{
		}
	}
	[Token(Token = "0x200065A")]
	public class MatchmakingRoom : MonoBehaviour
	{
		[Token(Token = "0x200065B")]
		public class RoomInfo
		{
			[Token(Token = "0x40026C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string roomCode;

			[Token(Token = "0x40026C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string roomName;

			[Token(Token = "0x40026C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string region;

			[Token(Token = "0x40026C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string langCode;

			[Token(Token = "0x40026C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LanguageDropdown.LangugeOption roomLanguage;

			[Token(Token = "0x40026C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public GameplayTag[] gameplayTags;

			[Token(Token = "0x40026C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool connectedThisRoom;

			[Token(Token = "0x40026C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int currentPlayerAmount;

			[Token(Token = "0x6002C2F")]
			[Address(RVA = "0x12CC9C0", Offset = "0x12CC9C0", VA = "0x12CC9C0")]
			public RoomInfo()
			{
			}
		}

		[Token(Token = "0x200065C")]
		public enum GameplayTag
		{
			[Token(Token = "0x40026CA")]
			Relaxing,
			[Token(Token = "0x40026CB")]
			Quiet,
			[Token(Token = "0x40026CC")]
			Roleplay,
			[Token(Token = "0x40026CD")]
			Explore,
			[Token(Token = "0x40026CE")]
			NSFW,
			[Token(Token = "0x40026CF")]
			Hardcore,
			[Token(Token = "0x40026D0")]
			Streaming,
			[Token(Token = "0x40026D1")]
			Social,
			[Token(Token = "0x40026D2")]
			Fooling,
			[Token(Token = "0x40026D3")]
			Valley,
			[Token(Token = "0x40026D4")]
			Coral
		}

		[Token(Token = "0x200065D")]
		[CompilerGenerated]
		private sealed class <JoinCoroutine>d__21 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40026D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatchmakingRoom <>4__this;

			[Token(Token = "0x170004F1")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002C33")]
				[Address(RVA = "0x12D023C", Offset = "0x12D023C", VA = "0x12D023C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004F2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C35")]
				[Address(RVA = "0x12D0284", Offset = "0x12D0284", VA = "0x12D0284", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C30")]
			[Address(RVA = "0x12CFF18", Offset = "0x12CFF18", VA = "0x12CFF18")]
			[DebuggerHidden]
			public <JoinCoroutine>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6002C31")]
			[Address(RVA = "0x12CFF48", Offset = "0x12CFF48", VA = "0x12CFF48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C32")]
			[Address(RVA = "0x12CFF4C", Offset = "0x12CFF4C", VA = "0x12CFF4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C34")]
			[Address(RVA = "0x12D0244", Offset = "0x12D0244", VA = "0x12D0244", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40026B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI roomNameText;

		[Token(Token = "0x40026B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI regionText;

		[Token(Token = "0x40026B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI languageText;

		[Token(Token = "0x40026B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI playerCountText;

		[Token(Token = "0x40026B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button joinButton;

		[Token(Token = "0x40026BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TextMeshProUGUI joinButtonText;

		[Token(Token = "0x40026BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Localize roomNameLoc;

		[Token(Token = "0x40026BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TextMeshProUGUI[] gameplayTags;

		[Token(Token = "0x40026BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip buttonClip;

		[Token(Token = "0x40026BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RoomInfo myRoomInfo;

		[Token(Token = "0x40026BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x40026C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool joinInProgress;

		[Token(Token = "0x6002C25")]
		[Address(RVA = "0x12CF75C", Offset = "0x12CF75C", VA = "0x12CF75C")]
		public void Init(RoomInfo roomInfo, NetworkConnectManager networkConnectManager)
		{
		}

		[Token(Token = "0x6002C26")]
		[Address(RVA = "0x12CFCB0", Offset = "0x12CFCB0", VA = "0x12CFCB0")]
		public RoomInfo GetMyRoomInfo()
		{
			return null;
		}

		[Token(Token = "0x6002C27")]
		[Address(RVA = "0x12CF92C", Offset = "0x12CF92C", VA = "0x12CF92C")]
		public void UpdateLanguage(RoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6002C28")]
		[Address(RVA = "0x12CFB28", Offset = "0x12CFB28", VA = "0x12CFB28")]
		public void UpdateGameplayTags(RoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6002C29")]
		[Address(RVA = "0x12CF544", Offset = "0x12CF544", VA = "0x12CF544")]
		public void UpdatePlayerAmount(int newAmount)
		{
		}

		[Token(Token = "0x6002C2A")]
		[Address(RVA = "0x12CFA70", Offset = "0x12CFA70", VA = "0x12CFA70")]
		public void UpdateConnectedStatus(bool newStatus)
		{
		}

		[Token(Token = "0x6002C2B")]
		[Address(RVA = "0x12CFDA0", Offset = "0x12CFDA0", VA = "0x12CFDA0")]
		private void JoinGame()
		{
		}

		[Token(Token = "0x6002C2C")]
		[Address(RVA = "0x12CFEA4", Offset = "0x12CFEA4", VA = "0x12CFEA4")]
		[IteratorStateMachine(typeof(<JoinCoroutine>d__21))]
		private IEnumerator<float> JoinCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002C2D")]
		[Address(RVA = "0x12CFCB8", Offset = "0x12CFCB8", VA = "0x12CFCB8")]
		private void DisableAllGameplayTags()
		{
		}

		[Token(Token = "0x6002C2E")]
		[Address(RVA = "0x12CFF40", Offset = "0x12CFF40", VA = "0x12CFF40")]
		public MatchmakingRoom()
		{
		}
	}
	[Token(Token = "0x200065E")]
	public class MatchmakingRoomList : MonoBehaviour
	{
		[Token(Token = "0x200065F")]
		public class MyMatchmakingComparer : IComparer<MatchmakingRoom.RoomInfo>
		{
			[Token(Token = "0x40026E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<MatchmakingRoom.GameplayTag> matchmakingRoomGameplayTags;

			[Token(Token = "0x40026E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int index;

			[Token(Token = "0x6002C52")]
			[Address(RVA = "0x12D1288", Offset = "0x12D1288", VA = "0x12D1288")]
			public MyMatchmakingComparer(List<MatchmakingRoom.GameplayTag> gameplayTags, int index)
			{
			}

			[Token(Token = "0x6002C53")]
			[Address(RVA = "0x12D15BC", Offset = "0x12D15BC", VA = "0x12D15BC", Slot = "4")]
			public int Compare(MatchmakingRoom.RoomInfo a, MatchmakingRoom.RoomInfo b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40026D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject roomPrefab;

		[Token(Token = "0x40026D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float padding;

		[Token(Token = "0x40026DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private RectTransform contentRectTransform;

		[Token(Token = "0x40026DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MatchmakingPanel matchmakingPanel;

		[Token(Token = "0x40026DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<MatchmakingRoom.RoomInfo> roomsInfos;

		[Token(Token = "0x40026DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<MatchmakingRoom> allGeneratedRooms;

		[Token(Token = "0x40026DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<GameObject> unusedRooms;

		[Token(Token = "0x40026DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool settedUp;

		[Token(Token = "0x40026E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x6002C36")]
		[Address(RVA = "0x12D02E0", Offset = "0x12D02E0", VA = "0x12D02E0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002C37")]
		[Address(RVA = "0x12D048C", Offset = "0x12D048C", VA = "0x12D048C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002C38")]
		[Address(RVA = "0x12D0688", Offset = "0x12D0688", VA = "0x12D0688")]
		private void StartPoller()
		{
		}

		[Token(Token = "0x6002C39")]
		[Address(RVA = "0x12D0738", Offset = "0x12D0738", VA = "0x12D0738")]
		private void StopPoller()
		{
		}

		[Token(Token = "0x6002C3A")]
		[Address(RVA = "0x12D0758", Offset = "0x12D0758", VA = "0x12D0758")]
		private void Start()
		{
		}

		[Token(Token = "0x6002C3B")]
		[Address(RVA = "0x12CDC5C", Offset = "0x12CDC5C", VA = "0x12CDC5C")]
		public void AddRoom(MatchmakingRoom.RoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6002C3C")]
		[Address(RVA = "0x12D096C", Offset = "0x12D096C", VA = "0x12D096C")]
		public bool IsRoomAlreadyAdded(MatchmakingRoom.RoomInfo roomInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C3D")]
		[Address(RVA = "0x12CDD94", Offset = "0x12CDD94", VA = "0x12CDD94")]
		public MatchmakingRoom.RoomInfo RemoveRoom(MatchmakingRoom.RoomInfo roomInfo)
		{
			return null;
		}

		[Token(Token = "0x6002C3E")]
		[Address(RVA = "0x12D0984", Offset = "0x12D0984", VA = "0x12D0984")]
		private void UpdateRoomInfo(MatchmakingRoom.RoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6002C3F")]
		[Address(RVA = "0x12CD52C", Offset = "0x12CD52C", VA = "0x12CD52C")]
		public void CheckAllIfConnectedRoom()
		{
		}

		[Token(Token = "0x6002C40")]
		[Address(RVA = "0x12CE388", Offset = "0x12CE388", VA = "0x12CE388")]
		public void RemoveMyRoomFromList()
		{
		}

		[Token(Token = "0x6002C41")]
		[Address(RVA = "0x12CE25C", Offset = "0x12CE25C", VA = "0x12CE25C")]
		public MatchmakingRoom GetMyRoom()
		{
			return null;
		}

		[Token(Token = "0x6002C42")]
		[Address(RVA = "0x12D0B74", Offset = "0x12D0B74", VA = "0x12D0B74")]
		private MatchmakingRoom.RoomInfo CheckIfAlreadyExists(MatchmakingRoom.RoomInfo roomInfo)
		{
			return null;
		}

		[Token(Token = "0x6002C43")]
		[Address(RVA = "0x12D0C70", Offset = "0x12D0C70", VA = "0x12D0C70")]
		private MatchmakingRoom GetMatchMakingRoom(MatchmakingRoom.RoomInfo roomInfo)
		{
			return null;
		}

		[Token(Token = "0x6002C44")]
		[Address(RVA = "0x12D0B5C", Offset = "0x12D0B5C", VA = "0x12D0B5C")]
		public void GenerateRoomList()
		{
		}

		[Token(Token = "0x6002C45")]
		[Address(RVA = "0x12D0E34", Offset = "0x12D0E34", VA = "0x12D0E34")]
		public void Populate()
		{
		}

		[Token(Token = "0x6002C46")]
		[Address(RVA = "0x12CD844", Offset = "0x12CD844", VA = "0x12CD844")]
		public void ClearRooms()
		{
		}

		[Token(Token = "0x6002C47")]
		[Address(RVA = "0x12D0EC4", Offset = "0x12D0EC4", VA = "0x12D0EC4")]
		private void InitRoom(MatchmakingRoom.RoomInfo room, int index)
		{
		}

		[Token(Token = "0x6002C48")]
		[Address(RVA = "0x12D0830", Offset = "0x12D0830", VA = "0x12D0830")]
		private void AddUnusedRoomToPool()
		{
		}

		[Token(Token = "0x6002C49")]
		[Address(RVA = "0x12D10DC", Offset = "0x12D10DC", VA = "0x12D10DC")]
		private GameObject GetUnusedRoom()
		{
			return null;
		}

		[Token(Token = "0x6002C4A")]
		[Address(RVA = "0x12D11B0", Offset = "0x12D11B0", VA = "0x12D11B0")]
		private void ReturnObjectToUnusedPool(GameObject room)
		{
		}

		[Token(Token = "0x6002C4B")]
		[Address(RVA = "0x12D0D7C", Offset = "0x12D0D7C", VA = "0x12D0D7C")]
		private void ChangeContentFieldSize()
		{
		}

		[Token(Token = "0x6002C4C")]
		[Address(RVA = "0x12D0A8C", Offset = "0x12D0A8C", VA = "0x12D0A8C")]
		private void ClearGeneratedRooms()
		{
		}

		[Token(Token = "0x6002C4D")]
		[Address(RVA = "0x12CDD4C", Offset = "0x12CDD4C", VA = "0x12CDD4C")]
		public int GetMatchmakingRoomsCount()
		{
			return default(int);
		}

		[Token(Token = "0x6002C4E")]
		[Address(RVA = "0x12CE434", Offset = "0x12CE434", VA = "0x12CE434")]
		public void SortLobbyList()
		{
		}

		[Token(Token = "0x6002C4F")]
		[Address(RVA = "0x12D12C4", Offset = "0x12D12C4", VA = "0x12D12C4")]
		public void RepositionGeneratedRooms()
		{
		}

		[Token(Token = "0x6002C50")]
		[Address(RVA = "0x12D148C", Offset = "0x12D148C", VA = "0x12D148C")]
		public bool IsSettedUp()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C51")]
		[Address(RVA = "0x12D1494", Offset = "0x12D1494", VA = "0x12D1494")]
		public MatchmakingRoomList()
		{
		}
	}
	[Token(Token = "0x2000662")]
	[RequireComponent(typeof(MatchmakingManager))]
	public class PhotonRoomPoller : MonoBehaviourPun, ILobbyCallbacks
	{
		[Token(Token = "0x40026E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action<List<RoomInfo>> callback;

		[Token(Token = "0x40026EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LoadBalancingClient client;

		[Token(Token = "0x40026EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MatchmakingManager matchmakingManager;

		[Token(Token = "0x40026EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string currentRegion;

		[Token(Token = "0x6002C5C")]
		[Address(RVA = "0x12D1848", Offset = "0x12D1848", VA = "0x12D1848")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002C5D")]
		[Address(RVA = "0x12CC214", Offset = "0x12CC214", VA = "0x12CC214")]
		public void StartRoomPolling(Action<List<RoomInfo>> callback)
		{
		}

		[Token(Token = "0x6002C5E")]
		[Address(RVA = "0x12CC4AC", Offset = "0x12CC4AC", VA = "0x12CC4AC")]
		public void StopRoomPolling()
		{
		}

		[Token(Token = "0x6002C5F")]
		[Address(RVA = "0x12CC524", Offset = "0x12CC524", VA = "0x12CC524")]
		public void SwitchRegion(string newRegion)
		{
		}

		[Token(Token = "0x6002C60")]
		[Address(RVA = "0x12D18B0", Offset = "0x12D18B0", VA = "0x12D18B0")]
		public string GetCurrentRegion()
		{
			return null;
		}

		[Token(Token = "0x6002C61")]
		[Address(RVA = "0x12D18B8", Offset = "0x12D18B8", VA = "0x12D18B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002C62")]
		[Address(RVA = "0x12D18CC", Offset = "0x12D18CC", VA = "0x12D18CC")]
		private void OnStateChanged(ClientState previousState, ClientState state)
		{
		}

		[Token(Token = "0x6002C63")]
		[Address(RVA = "0x12D1954", Offset = "0x12D1954", VA = "0x12D1954", Slot = "6")]
		public void OnRoomListUpdate(List<RoomInfo> infos)
		{
		}

		[Token(Token = "0x6002C64")]
		[Address(RVA = "0x12D1AA8", Offset = "0x12D1AA8", VA = "0x12D1AA8", Slot = "4")]
		public void OnJoinedLobby()
		{
		}

		[Token(Token = "0x6002C65")]
		[Address(RVA = "0x12D1AC8", Offset = "0x12D1AC8", VA = "0x12D1AC8", Slot = "5")]
		public void OnLeftLobby()
		{
		}

		[Token(Token = "0x6002C66")]
		[Address(RVA = "0x12D1ACC", Offset = "0x12D1ACC", VA = "0x12D1ACC", Slot = "7")]
		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}

		[Token(Token = "0x6002C67")]
		[Address(RVA = "0x12D1AD0", Offset = "0x12D1AD0", VA = "0x12D1AD0")]
		public PhotonRoomPoller()
		{
		}
	}
	[Token(Token = "0x2000663")]
	public class RoomPollerRegionDropdown : MonoBehaviour
	{
		[Token(Token = "0x2000664")]
		private enum Region
		{
			[Token(Token = "0x40026F2")]
			asia,
			[Token(Token = "0x40026F3")]
			au,
			[Token(Token = "0x40026F4")]
			eu,
			[Token(Token = "0x40026F5")]
			za,
			[Token(Token = "0x40026F6")]
			sa,
			[Token(Token = "0x40026F7")]
			us
		}

		[Token(Token = "0x40026ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MatchmakingPanel matchmakingPanel;

		[Token(Token = "0x40026EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TMP_Dropdown myDropdown;

		[Token(Token = "0x40026EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<TMP_Dropdown.OptionData> regionOptionDatas;

		[Token(Token = "0x40026F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Region currentSelectedRegion;

		[Token(Token = "0x6002C68")]
		[Address(RVA = "0x12D1B28", Offset = "0x12D1B28", VA = "0x12D1B28")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002C69")]
		[Address(RVA = "0x12CCBC0", Offset = "0x12CCBC0", VA = "0x12CCBC0")]
		public void SetCurrentRegion(string currentRegion)
		{
		}

		[Token(Token = "0x6002C6A")]
		[Address(RVA = "0x12D2304", Offset = "0x12D2304", VA = "0x12D2304")]
		private void RoomPollerRegionSwitched(int arg0)
		{
		}

		[Token(Token = "0x6002C6B")]
		[Address(RVA = "0x12D2390", Offset = "0x12D2390", VA = "0x12D2390")]
		public RoomPollerRegionDropdown()
		{
		}
	}
	[Token(Token = "0x2000665")]
	public class ConnectedFriend : MonoBehaviour
	{
		[Token(Token = "0x2000666")]
		[CompilerGenerated]
		private sealed class <_GetUserAvatarFromUrl>d__24 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400270A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string url;

			[Token(Token = "0x400270B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ConnectedFriend <>4__this;

			[Token(Token = "0x400270C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x170004F3")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002C7B")]
				[Address(RVA = "0x12D33E8", Offset = "0x12D33E8", VA = "0x12D33E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004F4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C7D")]
				[Address(RVA = "0x12D3430", Offset = "0x12D3430", VA = "0x12D3430", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C78")]
			[Address(RVA = "0x12D320C", Offset = "0x12D320C", VA = "0x12D320C")]
			[DebuggerHidden]
			public <_GetUserAvatarFromUrl>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6002C79")]
			[Address(RVA = "0x12D3244", Offset = "0x12D3244", VA = "0x12D3244", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C7A")]
			[Address(RVA = "0x12D3248", Offset = "0x12D3248", VA = "0x12D3248", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C7C")]
			[Address(RVA = "0x12D33F0", Offset = "0x12D33F0", VA = "0x12D33F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40026F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI friendNameText;

		[Token(Token = "0x40026F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI platformText;

		[Token(Token = "0x40026FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI muteButtonText;

		[Token(Token = "0x40026FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI kickText;

		[Token(Token = "0x40026FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private RawImage avatarImage;

		[Token(Token = "0x40026FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private UnityEngine.UI.Image mutedImage;

		[Token(Token = "0x40026FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UnityEngine.UI.Image speakingImage;

		[Token(Token = "0x40026FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Button kickButton;

		[Token(Token = "0x4002700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button confirmKickButton;

		[Token(Token = "0x4002701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Button rejectKickButton;

		[Token(Token = "0x4002702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Button muteButton;

		[Token(Token = "0x4002703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject sureToKickPanel;

		[Token(Token = "0x4002704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FriendInfo friend;

		[Token(Token = "0x4002705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InvitePanel invitePanel;

		[Token(Token = "0x4002706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool playerMuted;

		[Token(Token = "0x4002707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool canShowSpakingImage;

		[Token(Token = "0x6002C6C")]
		[Address(RVA = "0x12D2418", Offset = "0x12D2418", VA = "0x12D2418")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002C6D")]
		[Address(RVA = "0x12D25C4", Offset = "0x12D25C4", VA = "0x12D25C4")]
		public void Init(FriendInfo friend, InvitePanel invitePanel)
		{
		}

		[Token(Token = "0x6002C6E")]
		[Address(RVA = "0x12D2B10", Offset = "0x12D2B10", VA = "0x12D2B10")]
		private void OpenSureToKickPanel()
		{
		}

		[Token(Token = "0x6002C6F")]
		[Address(RVA = "0x12D2B30", Offset = "0x12D2B30", VA = "0x12D2B30")]
		private void KickPlayer()
		{
		}

		[Token(Token = "0x6002C70")]
		[Address(RVA = "0x12D2F08", Offset = "0x12D2F08", VA = "0x12D2F08")]
		private void RejectKick()
		{
		}

		[Token(Token = "0x6002C71")]
		[Address(RVA = "0x12D2F28", Offset = "0x12D2F28", VA = "0x12D2F28")]
		private void MutePlayer()
		{
		}

		[Token(Token = "0x6002C72")]
		[Address(RVA = "0x12D24D4", Offset = "0x12D24D4", VA = "0x12D24D4")]
		public void SetUserAvatarFromUrl()
		{
		}

		[Token(Token = "0x6002C73")]
		[Address(RVA = "0x12D3204", Offset = "0x12D3204", VA = "0x12D3204")]
		public FriendInfo GetFriendInfo()
		{
			return null;
		}

		[Token(Token = "0x6002C74")]
		[Address(RVA = "0x12D3174", Offset = "0x12D3174", VA = "0x12D3174")]
		[IteratorStateMachine(typeof(<_GetUserAvatarFromUrl>d__24))]
		private IEnumerator<float> _GetUserAvatarFromUrl(string url)
		{
			return null;
		}

		[Token(Token = "0x6002C75")]
		[Address(RVA = "0x12D2AC0", Offset = "0x12D2AC0", VA = "0x12D2AC0")]
		public void HideMuteButton()
		{
		}

		[Token(Token = "0x6002C76")]
		[Address(RVA = "0x12D3034", Offset = "0x12D3034", VA = "0x12D3034")]
		public void ShowSpeakingImage(bool show)
		{
		}

		[Token(Token = "0x6002C77")]
		[Address(RVA = "0x12D3234", Offset = "0x12D3234", VA = "0x12D3234")]
		public ConnectedFriend()
		{
		}
	}
	[Token(Token = "0x2000667")]
	public class ConnectedFriendsList : MonoBehaviour
	{
		[Token(Token = "0x400270D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject friendPrefab;

		[Token(Token = "0x400270E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float padding;

		[Token(Token = "0x400270F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private RectTransform contentRectTransform;

		[Token(Token = "0x4002710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private InvitePanel invitePanel;

		[Token(Token = "0x4002711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<FriendInfo> friends;

		[Token(Token = "0x4002712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<ConnectedFriend> allGeneratedFriends;

		[Token(Token = "0x6002C7E")]
		[Address(RVA = "0x12D348C", Offset = "0x12D348C", VA = "0x12D348C")]
		public void AddFriend(FriendInfo friend)
		{
		}

		[Token(Token = "0x6002C7F")]
		[Address(RVA = "0x12D3570", Offset = "0x12D3570", VA = "0x12D3570")]
		public bool IsFriendAlreadyAdded(ulong friendID)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C80")]
		[Address(RVA = "0x12D3738", Offset = "0x12D3738", VA = "0x12D3738")]
		public FriendInfo RemoveFriend(Player punPlayer)
		{
			return null;
		}

		[Token(Token = "0x6002C81")]
		[Address(RVA = "0x12D380C", Offset = "0x12D380C", VA = "0x12D380C")]
		public FriendInfo RemoveFriend(ulong friendID)
		{
			return null;
		}

		[Token(Token = "0x6002C82")]
		[Address(RVA = "0x12D3720", Offset = "0x12D3720", VA = "0x12D3720")]
		public void GenerateFriendsList()
		{
		}

		[Token(Token = "0x6002C83")]
		[Address(RVA = "0x12D39DC", Offset = "0x12D39DC", VA = "0x12D39DC")]
		public void Populate()
		{
		}

		[Token(Token = "0x6002C84")]
		[Address(RVA = "0x12D3CE0", Offset = "0x12D3CE0", VA = "0x12D3CE0")]
		public void ClearFriends()
		{
		}

		[Token(Token = "0x6002C85")]
		[Address(RVA = "0x12D3D58", Offset = "0x12D3D58", VA = "0x12D3D58")]
		public void SetUserAvatarFromUrl(FriendInfo friend)
		{
		}

		[Token(Token = "0x6002C86")]
		[Address(RVA = "0x12D3E20", Offset = "0x12D3E20", VA = "0x12D3E20")]
		public ulong GetConnectedFriendID(Player punPlayer)
		{
			return default(ulong);
		}

		[Token(Token = "0x6002C87")]
		[Address(RVA = "0x12D3EE4", Offset = "0x12D3EE4", VA = "0x12D3EE4")]
		public FriendInfo.Platform[] GetConnectedFriendPlatforms()
		{
			return null;
		}

		[Token(Token = "0x6002C88")]
		[Address(RVA = "0x12D3A6C", Offset = "0x12D3A6C", VA = "0x12D3A6C")]
		private void InitFriend(FriendInfo friend, int index)
		{
		}

		[Token(Token = "0x6002C89")]
		[Address(RVA = "0x12D3924", Offset = "0x12D3924", VA = "0x12D3924")]
		private void ChangeContentFieldSize()
		{
		}

		[Token(Token = "0x6002C8A")]
		[Address(RVA = "0x12D3618", Offset = "0x12D3618", VA = "0x12D3618")]
		private void ClearGeneratedFriends()
		{
		}

		[Token(Token = "0x6002C8B")]
		[Address(RVA = "0x12D3FC4", Offset = "0x12D3FC4", VA = "0x12D3FC4")]
		public int ConnectedFriendAmount()
		{
			return default(int);
		}

		[Token(Token = "0x6002C8C")]
		[Address(RVA = "0x12D400C", Offset = "0x12D400C", VA = "0x12D400C")]
		public void ForceMutedPlayer(Player player)
		{
		}

		[Token(Token = "0x6002C8D")]
		[Address(RVA = "0x12D40CC", Offset = "0x12D40CC", VA = "0x12D40CC")]
		public void ShowSpeakingImage(Player photonPlayer, bool show)
		{
		}

		[Token(Token = "0x6002C8E")]
		[Address(RVA = "0x12D4198", Offset = "0x12D4198", VA = "0x12D4198")]
		public ConnectedFriendsList()
		{
		}
	}
	[Token(Token = "0x2000668")]
	public class Friend : MonoBehaviour
	{
		[Token(Token = "0x2000669")]
		[CompilerGenerated]
		private sealed class <_FriendInvitedCoroutine>d__11 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400271B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400271C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400271D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Friend <>4__this;

			[Token(Token = "0x400271E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x400271F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float <time>5__2;

			[Token(Token = "0x170004F5")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002C9E")]
				[Address(RVA = "0x12D4D60", Offset = "0x12D4D60", VA = "0x12D4D60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004F6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002CA0")]
				[Address(RVA = "0x12D4DA8", Offset = "0x12D4DA8", VA = "0x12D4DA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C9B")]
			[Address(RVA = "0x12D4910", Offset = "0x12D4910", VA = "0x12D4910")]
			[DebuggerHidden]
			public <_FriendInvitedCoroutine>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6002C9C")]
			[Address(RVA = "0x12D4C34", Offset = "0x12D4C34", VA = "0x12D4C34", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C9D")]
			[Address(RVA = "0x12D4C38", Offset = "0x12D4C38", VA = "0x12D4C38", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C9F")]
			[Address(RVA = "0x12D4D68", Offset = "0x12D4D68", VA = "0x12D4D68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200066A")]
		[CompilerGenerated]
		private sealed class <_GetUserAvatarFromUrl>d__18 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string url;

			[Token(Token = "0x4002723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Friend <>4__this;

			[Token(Token = "0x4002724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x170004F7")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002CA4")]
				[Address(RVA = "0x12D5004", Offset = "0x12D5004", VA = "0x12D5004", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004F8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002CA6")]
				[Address(RVA = "0x12D504C", Offset = "0x12D504C", VA = "0x12D504C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002CA1")]
			[Address(RVA = "0x12D4C04", Offset = "0x12D4C04", VA = "0x12D4C04")]
			[DebuggerHidden]
			public <_GetUserAvatarFromUrl>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6002CA2")]
			[Address(RVA = "0x12D4E04", Offset = "0x12D4E04", VA = "0x12D4E04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002CA3")]
			[Address(RVA = "0x12D4E08", Offset = "0x12D4E08", VA = "0x12D4E08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002CA5")]
			[Address(RVA = "0x12D500C", Offset = "0x12D500C", VA = "0x12D500C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI friendNameText;

		[Token(Token = "0x4002714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI activeStateText;

		[Token(Token = "0x4002715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private RawImage avatarImage;

		[Token(Token = "0x4002716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Button inviteButton;

		[Token(Token = "0x4002717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextMeshProUGUI inviteText;

		[Token(Token = "0x4002718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FriendInfo friend;

		[Token(Token = "0x4002719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool friendConnected;

		[Token(Token = "0x400271A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int currentlyFethingUserAvatarAmount;

		[Token(Token = "0x6002C8F")]
		[Address(RVA = "0x12D4270", Offset = "0x12D4270", VA = "0x12D4270")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002C90")]
		[Address(RVA = "0x12D441C", Offset = "0x12D441C", VA = "0x12D441C")]
		public void Init(FriendInfo friend)
		{
		}

		[Token(Token = "0x6002C91")]
		[Address(RVA = "0x12D465C", Offset = "0x12D465C", VA = "0x12D465C")]
		private void InviteFriend()
		{
		}

		[Token(Token = "0x6002C92")]
		[Address(RVA = "0x12D4810", Offset = "0x12D4810", VA = "0x12D4810")]
		private void InviteFriendOculus(Message<UserList> message)
		{
		}

		[Token(Token = "0x6002C93")]
		[Address(RVA = "0x12D478C", Offset = "0x12D478C", VA = "0x12D478C")]
		[IteratorStateMachine(typeof(<_FriendInvitedCoroutine>d__11))]
		private IEnumerator<float> _FriendInvitedCoroutine(float duration)
		{
			return null;
		}

		[Token(Token = "0x6002C94")]
		[Address(RVA = "0x12D4938", Offset = "0x12D4938", VA = "0x12D4938")]
		public void UpdateStatus()
		{
		}

		[Token(Token = "0x6002C95")]
		[Address(RVA = "0x12D4A48", Offset = "0x12D4A48", VA = "0x12D4A48")]
		public void UpdateStatusPS(FriendInfo.FriendStatus newStatus)
		{
		}

		[Token(Token = "0x6002C96")]
		[Address(RVA = "0x12D4B4C", Offset = "0x12D4B4C", VA = "0x12D4B4C")]
		public FriendInfo GetMyFriendRef()
		{
			return null;
		}

		[Token(Token = "0x6002C97")]
		[Address(RVA = "0x12D432C", Offset = "0x12D432C", VA = "0x12D432C")]
		public void SetUserAvatarFromUrl()
		{
		}

		[Token(Token = "0x6002C98")]
		[Address(RVA = "0x12D4BE4", Offset = "0x12D4BE4", VA = "0x12D4BE4")]
		public void ToggleInviteButton(bool inviteButtonActive)
		{
		}

		[Token(Token = "0x6002C99")]
		[Address(RVA = "0x12D4B54", Offset = "0x12D4B54", VA = "0x12D4B54")]
		[IteratorStateMachine(typeof(<_GetUserAvatarFromUrl>d__18))]
		private IEnumerator<float> _GetUserAvatarFromUrl(string url)
		{
			return null;
		}

		[Token(Token = "0x6002C9A")]
		[Address(RVA = "0x12D4C2C", Offset = "0x12D4C2C", VA = "0x12D4C2C")]
		public Friend()
		{
		}
	}
	[Token(Token = "0x200066B")]
	public class FriendInfo
	{
		[Token(Token = "0x200066C")]
		public enum Platform
		{
			[Token(Token = "0x4002731")]
			Steam,
			[Token(Token = "0x4002732")]
			Oculus,
			[Token(Token = "0x4002733")]
			PS4,
			[Token(Token = "0x4002734")]
			PS5,
			[Token(Token = "0x4002735")]
			Pico
		}

		[Token(Token = "0x200066D")]
		public enum FriendStatus
		{
			[Token(Token = "0x4002737")]
			PlayingThisGame,
			[Token(Token = "0x4002738")]
			Online,
			[Token(Token = "0x4002739")]
			Away,
			[Token(Token = "0x400273A")]
			Busy,
			[Token(Token = "0x400273B")]
			Snooze,
			[Token(Token = "0x400273C")]
			Offline
		}

		[Token(Token = "0x4002725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong userID;

		[Token(Token = "0x4002726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string userName;

		[Token(Token = "0x4002727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture userAvatar;

		[Token(Token = "0x4002728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string userAvatarUrl;

		[Token(Token = "0x4002729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool inSameParty;

		[Token(Token = "0x400272A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Player punPlayer;

		[Token(Token = "0x400272B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ulong roomIDOculus;

		[Token(Token = "0x400272C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string roomCode;

		[Token(Token = "0x400272D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Platform platform;

		[Token(Token = "0x400272E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public FriendStatus friendStatus;

		[Token(Token = "0x400272F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool showMuteButton;

		[Token(Token = "0x6002CA7")]
		[Address(RVA = "0x12D50A8", Offset = "0x12D50A8", VA = "0x12D50A8")]
		public FriendInfo()
		{
		}
	}
	[Token(Token = "0x200066E")]
	public class FriendInviteReceivedPanel : MonoBehaviour
	{
		[Token(Token = "0x400273D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject togglableObject;

		[Token(Token = "0x400273E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Button acceptButton;

		[Token(Token = "0x400273F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Button rejectButton;

		[Token(Token = "0x4002740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI friendInviteText;

		[Token(Token = "0x4002741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string tempRoomCode;

		[Token(Token = "0x4002742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ulong tempRoomIDOculus;

		[Token(Token = "0x4002743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string tempRegion;

		[Token(Token = "0x6002CA8")]
		[Address(RVA = "0x12D50B8", Offset = "0x12D50B8", VA = "0x12D50B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002CA9")]
		[Address(RVA = "0x12D51DC", Offset = "0x12D51DC", VA = "0x12D51DC")]
		private void AcceptInvite()
		{
		}

		[Token(Token = "0x6002CAA")]
		[Address(RVA = "0x12D5388", Offset = "0x12D5388", VA = "0x12D5388")]
		private void RejectInvite()
		{
		}

		[Token(Token = "0x6002CAB")]
		[Address(RVA = "0x12D51BC", Offset = "0x12D51BC", VA = "0x12D51BC")]
		public void TogglePanel(bool isActive)
		{
		}

		[Token(Token = "0x6002CAC")]
		[Address(RVA = "0x12D53BC", Offset = "0x12D53BC", VA = "0x12D53BC")]
		public void InviteReceived(string senderName, string roomCode, string region, ulong oculusRoomID)
		{
		}

		[Token(Token = "0x6002CAD")]
		[Address(RVA = "0x12D5488", Offset = "0x12D5488", VA = "0x12D5488")]
		private void ChangeFriendInviteText(string newText)
		{
		}

		[Token(Token = "0x6002CAE")]
		[Address(RVA = "0x12D54AC", Offset = "0x12D54AC", VA = "0x12D54AC")]
		public FriendInviteReceivedPanel()
		{
		}
	}
	[Token(Token = "0x200066F")]
	public class InvitableFriendsList : MonoBehaviour
	{
		[Token(Token = "0x4002744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject friendPrefab;

		[Token(Token = "0x4002745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float padding;

		[Token(Token = "0x4002746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private RectTransform contentRectTransform;

		[Token(Token = "0x4002747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<FriendInfo> friends;

		[Token(Token = "0x4002748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Friend> allGeneratedFriends;

		[Token(Token = "0x6002CAF")]
		[Address(RVA = "0x12D54B4", Offset = "0x12D54B4", VA = "0x12D54B4")]
		public void AddFriend(FriendInfo friend)
		{
		}

		[Token(Token = "0x6002CB0")]
		[Address(RVA = "0x12D559C", Offset = "0x12D559C", VA = "0x12D559C")]
		public void RemoveFriend(ulong friendID)
		{
		}

		[Token(Token = "0x6002CB1")]
		[Address(RVA = "0x12D57F0", Offset = "0x12D57F0", VA = "0x12D57F0")]
		public void UpdateFriendStatus(ulong friendID)
		{
		}

		[Token(Token = "0x6002CB2")]
		[Address(RVA = "0x12D5B40", Offset = "0x12D5B40", VA = "0x12D5B40")]
		public void UpdateFriendStatusPS(ulong friendID, FriendInfo.FriendStatus newStatus)
		{
		}

		[Token(Token = "0x6002CB3")]
		[Address(RVA = "0x12D5C10", Offset = "0x12D5C10", VA = "0x12D5C10")]
		public void FriendDisconnected(FriendInfo friend)
		{
		}

		[Token(Token = "0x6002CB4")]
		[Address(RVA = "0x12D5C38", Offset = "0x12D5C38", VA = "0x12D5C38")]
		public void FriendConnected(ulong friendID)
		{
		}

		[Token(Token = "0x6002CB5")]
		[Address(RVA = "0x12D57D8", Offset = "0x12D57D8", VA = "0x12D57D8")]
		public void GenerateFriendsList()
		{
		}

		[Token(Token = "0x6002CB6")]
		[Address(RVA = "0x12D5D8C", Offset = "0x12D5D8C", VA = "0x12D5D8C")]
		public void ClearFriends()
		{
		}

		[Token(Token = "0x6002CB7")]
		[Address(RVA = "0x12D5E04", Offset = "0x12D5E04", VA = "0x12D5E04")]
		public void ChangeFriendsRoomIDs(ulong newID)
		{
		}

		[Token(Token = "0x6002CB8")]
		[Address(RVA = "0x12D5E98", Offset = "0x12D5E98", VA = "0x12D5E98")]
		public void ChangeFriendsRoomCode(string newRoomCode)
		{
		}

		[Token(Token = "0x6002CB9")]
		[Address(RVA = "0x12D5CF4", Offset = "0x12D5CF4", VA = "0x12D5CF4")]
		public void Populate()
		{
		}

		[Token(Token = "0x6002CBA")]
		[Address(RVA = "0x12D6368", Offset = "0x12D6368", VA = "0x12D6368")]
		public void ToggleInviteButtons(bool inviteButtonActive)
		{
		}

		[Token(Token = "0x6002CBB")]
		[Address(RVA = "0x12D5F34", Offset = "0x12D5F34", VA = "0x12D5F34")]
		private void SortFriends()
		{
		}

		[Token(Token = "0x6002CBC")]
		[Address(RVA = "0x12D60F8", Offset = "0x12D60F8", VA = "0x12D60F8")]
		private void InitFriend(FriendInfo friend, int index)
		{
		}

		[Token(Token = "0x6002CBD")]
		[Address(RVA = "0x12D58B8", Offset = "0x12D58B8", VA = "0x12D58B8")]
		private void RepositionFriends()
		{
		}

		[Token(Token = "0x6002CBE")]
		[Address(RVA = "0x12D5C3C", Offset = "0x12D5C3C", VA = "0x12D5C3C")]
		private void ChangeContentFieldSize()
		{
		}

		[Token(Token = "0x6002CBF")]
		[Address(RVA = "0x12D5690", Offset = "0x12D5690", VA = "0x12D5690")]
		private void ClearGeneratedFriends()
		{
		}

		[Token(Token = "0x6002CC0")]
		[Address(RVA = "0x12D6410", Offset = "0x12D6410", VA = "0x12D6410")]
		public int GetInvitableFriendAmount()
		{
			return default(int);
		}

		[Token(Token = "0x6002CC1")]
		[Address(RVA = "0x12D645C", Offset = "0x12D645C", VA = "0x12D645C")]
		public InvitableFriendsList()
		{
		}
	}
	[Token(Token = "0x2000671")]
	public class InvitePanel : MonoBehaviour
	{
		[Token(Token = "0x2000672")]
		[CompilerGenerated]
		private sealed class <_MutePlayer>d__20 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400274F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002750")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002751")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float delay;

			[Token(Token = "0x4002752")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InvitePanel <>4__this;

			[Token(Token = "0x4002753")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Player playerToMute;

			[Token(Token = "0x4002754")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool mute;

			[Token(Token = "0x4002755")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool hideMuteButton;

			[Token(Token = "0x170004F9")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002CE0")]
				[Address(RVA = "0x12D6B38", Offset = "0x12D6B38", VA = "0x12D6B38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002CE2")]
				[Address(RVA = "0x12D6B80", Offset = "0x12D6B80", VA = "0x12D6B80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002CDD")]
			[Address(RVA = "0x12D69B0", Offset = "0x12D69B0", VA = "0x12D69B0")]
			[DebuggerHidden]
			public <_MutePlayer>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6002CDE")]
			[Address(RVA = "0x12D6A68", Offset = "0x12D6A68", VA = "0x12D6A68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002CDF")]
			[Address(RVA = "0x12D6A6C", Offset = "0x12D6A6C", VA = "0x12D6A6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002CE1")]
			[Address(RVA = "0x12D6B40", Offset = "0x12D6B40", VA = "0x12D6B40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400274C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x400274D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ConnectedFriendsList connectedFriendsList;

		[Token(Token = "0x400274E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InvitableFriendsList invitableFriendsList;

		[Token(Token = "0x6002CC6")]
		[Address(RVA = "0x12D65E4", Offset = "0x12D65E4", VA = "0x12D65E4")]
		public void AddInvitableFriend(FriendInfo friend)
		{
		}

		[Token(Token = "0x6002CC7")]
		[Address(RVA = "0x12D65FC", Offset = "0x12D65FC", VA = "0x12D65FC")]
		public void UpdateInvitableFriendStatus(ulong friendID)
		{
		}

		[Token(Token = "0x6002CC8")]
		[Address(RVA = "0x12D6614", Offset = "0x12D6614", VA = "0x12D6614")]
		public void UpdateInvitableFriendStatusPS(ulong friendID, FriendInfo.FriendStatus friendStatus)
		{
		}

		[Token(Token = "0x6002CC9")]
		[Address(RVA = "0x12D662C", Offset = "0x12D662C", VA = "0x12D662C")]
		public void GenerateInvitableFriendsList()
		{
		}

		[Token(Token = "0x6002CCA")]
		[Address(RVA = "0x12D6650", Offset = "0x12D6650", VA = "0x12D6650")]
		public void InvitableFriendConnected(ulong friendID)
		{
		}

		[Token(Token = "0x6002CCB")]
		[Address(RVA = "0x12D6668", Offset = "0x12D6668", VA = "0x12D6668")]
		public void InvitableFriendDisconnected(FriendInfo friend)
		{
		}

		[Token(Token = "0x6002CCC")]
		[Address(RVA = "0x12D6694", Offset = "0x12D6694", VA = "0x12D6694")]
		public void ChangeInvitableFriendListRoomIDs(ulong newID)
		{
		}

		[Token(Token = "0x6002CCD")]
		[Address(RVA = "0x12D66AC", Offset = "0x12D66AC", VA = "0x12D66AC")]
		public void ChangeInvitableFriendsRoomCodes(string newRoomCode)
		{
		}

		[Token(Token = "0x6002CCE")]
		[Address(RVA = "0x12D66C4", Offset = "0x12D66C4", VA = "0x12D66C4")]
		public void ClearInvitableFriends()
		{
		}

		[Token(Token = "0x6002CCF")]
		[Address(RVA = "0x12D66DC", Offset = "0x12D66DC", VA = "0x12D66DC")]
		public void AddConnectedFriend(FriendInfo friend)
		{
		}

		[Token(Token = "0x6002CD0")]
		[Address(RVA = "0x12D67C0", Offset = "0x12D67C0", VA = "0x12D67C0")]
		public FriendInfo.Platform[] GetConnectedFriendPlatforms()
		{
			return null;
		}

		[Token(Token = "0x6002CD1")]
		[Address(RVA = "0x12D67D8", Offset = "0x12D67D8", VA = "0x12D67D8")]
		public void SetUserAvatarFromUrl(FriendInfo friend)
		{
		}

		[Token(Token = "0x6002CD2")]
		[Address(RVA = "0x12D67F0", Offset = "0x12D67F0", VA = "0x12D67F0")]
		public FriendInfo RemoveConnectedFriend(ulong friendID)
		{
			return null;
		}

		[Token(Token = "0x6002CD3")]
		[Address(RVA = "0x12D6808", Offset = "0x12D6808", VA = "0x12D6808")]
		public ulong GetConnectedFriend(Player punPlayer)
		{
			return default(ulong);
		}

		[Token(Token = "0x6002CD4")]
		[Address(RVA = "0x12D6820", Offset = "0x12D6820", VA = "0x12D6820")]
		public void ClearConnectedFriends()
		{
		}

		[Token(Token = "0x6002CD5")]
		[Address(RVA = "0x12D6838", Offset = "0x12D6838", VA = "0x12D6838")]
		public bool IsFriendAlreadyAdded(ulong friendID)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CD6")]
		[Address(RVA = "0x12D6850", Offset = "0x12D6850", VA = "0x12D6850")]
		public void MutePlayer(Player playerToMute, bool mute, float delay, bool hideMuteButton)
		{
		}

		[Token(Token = "0x6002CD7")]
		[Address(RVA = "0x12D68F0", Offset = "0x12D68F0", VA = "0x12D68F0")]
		[IteratorStateMachine(typeof(<_MutePlayer>d__20))]
		private IEnumerator<float> _MutePlayer(Player playerToMute, bool mute, float delay, bool hideMuteButton)
		{
			return null;
		}

		[Token(Token = "0x6002CD8")]
		[Address(RVA = "0x12D3074", Offset = "0x12D3074", VA = "0x12D3074")]
		public void MutePlayer(Player playerToMute, bool mute)
		{
		}

		[Token(Token = "0x6002CD9")]
		[Address(RVA = "0x12D69D8", Offset = "0x12D69D8", VA = "0x12D69D8")]
		public void HideMutePlayerButton(Player photonPlayer)
		{
		}

		[Token(Token = "0x6002CDA")]
		[Address(RVA = "0x12D69F0", Offset = "0x12D69F0", VA = "0x12D69F0")]
		public int GetInvitableFriendAmount()
		{
			return default(int);
		}

		[Token(Token = "0x6002CDB")]
		[Address(RVA = "0x12D6A44", Offset = "0x12D6A44", VA = "0x12D6A44")]
		public void ShowSpeakingImage(Player photonPlayer, bool show)
		{
		}

		[Token(Token = "0x6002CDC")]
		[Address(RVA = "0x12D6A60", Offset = "0x12D6A60", VA = "0x12D6A60")]
		public InvitePanel()
		{
		}
	}
	[Token(Token = "0x2000673")]
	public class JoinGamePanel : MonoBehaviour
	{
		[Token(Token = "0x4002756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Button playMultiplayerButton;

		[Token(Token = "0x4002757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Button startSinglePlayerButton;

		[Token(Token = "0x4002758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI roomCode;

		[Token(Token = "0x4002759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI infoText;

		[Token(Token = "0x400275A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Localize infoTextLoc;

		[Token(Token = "0x400275B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private RoomCodeInputField roomCodeInputField2;

		[Token(Token = "0x400275C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private RoomCodeKeyboardManager virtualKeyboard;

		[Token(Token = "0x400275D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TextMeshProUGUI networkStatusText;

		[Token(Token = "0x400275E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button reconnectButton;

		[Token(Token = "0x400275F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject joinPSPlusToEnableBlocker;

		[Token(Token = "0x4002760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Button joinPSPlusButton;

		[Token(Token = "0x4002761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject ageRestrictionBlocker;

		[Token(Token = "0x4002762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x4002763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string originalInfoText;

		[Token(Token = "0x4002764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool joinInProgress;

		[Token(Token = "0x6002CE3")]
		[Address(RVA = "0x12D6BDC", Offset = "0x12D6BDC", VA = "0x12D6BDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002CE4")]
		[Address(RVA = "0x12D6E9C", Offset = "0x12D6E9C", VA = "0x12D6E9C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002CE5")]
		[Address(RVA = "0x12D6F70", Offset = "0x12D6F70", VA = "0x12D6F70")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002CE6")]
		[Address(RVA = "0x12D7004", Offset = "0x12D7004", VA = "0x12D7004")]
		private void CloseVirtualKeyboard()
		{
		}

		[Token(Token = "0x6002CE7")]
		[Address(RVA = "0x12D70BC", Offset = "0x12D70BC", VA = "0x12D70BC")]
		private void RoomCodeInputFieldValueChanged()
		{
		}

		[Token(Token = "0x6002CE8")]
		[Address(RVA = "0x12D71B4", Offset = "0x12D71B4", VA = "0x12D71B4")]
		public void JoinedRoom(string newRoomCode)
		{
		}

		[Token(Token = "0x6002CE9")]
		[Address(RVA = "0x12D7354", Offset = "0x12D7354", VA = "0x12D7354")]
		private void JoinSpecificRoom()
		{
		}

		[Token(Token = "0x6002CEA")]
		[Address(RVA = "0x12D73F4", Offset = "0x12D73F4", VA = "0x12D73F4")]
		private void JoinRoom()
		{
		}

		[Token(Token = "0x6002CEB")]
		[Address(RVA = "0x12D7298", Offset = "0x12D7298", VA = "0x12D7298")]
		public void ChangeRoomCode(string newRoomCode)
		{
		}

		[Token(Token = "0x6002CEC")]
		[Address(RVA = "0x12D7448", Offset = "0x12D7448", VA = "0x12D7448")]
		public void UpdateRoomCode()
		{
		}

		[Token(Token = "0x6002CED")]
		[Address(RVA = "0x12D700C", Offset = "0x12D700C", VA = "0x12D700C")]
		public void ToggleVirtualKeyboard(bool active)
		{
		}

		[Token(Token = "0x6002CEE")]
		[Address(RVA = "0x12D7464", Offset = "0x12D7464", VA = "0x12D7464")]
		public void ChangeNetworkStatusText(string networkStatus)
		{
		}

		[Token(Token = "0x6002CEF")]
		[Address(RVA = "0x12D7488", Offset = "0x12D7488", VA = "0x12D7488")]
		public void PlayerNotConnected()
		{
		}

		[Token(Token = "0x6002CF0")]
		[Address(RVA = "0x12D7530", Offset = "0x12D7530", VA = "0x12D7530")]
		public void PlayerConnected()
		{
		}

		[Token(Token = "0x6002CF1")]
		[Address(RVA = "0x12D758C", Offset = "0x12D758C", VA = "0x12D758C")]
		private void TryToReconnect()
		{
		}

		[Token(Token = "0x6002CF2")]
		[Address(RVA = "0x12D7660", Offset = "0x12D7660", VA = "0x12D7660")]
		private void StartSinglePlayerGame()
		{
		}

		[Token(Token = "0x6002CF3")]
		[Address(RVA = "0x12D7704", Offset = "0x12D7704", VA = "0x12D7704")]
		private void StartSinglePlayerCoroutine()
		{
		}

		[Token(Token = "0x6002CF4")]
		[Address(RVA = "0x12D7754", Offset = "0x12D7754", VA = "0x12D7754")]
		public void AutoFillJoinMekiwi()
		{
		}

		[Token(Token = "0x6002CF5")]
		[Address(RVA = "0x12D77D0", Offset = "0x12D77D0", VA = "0x12D77D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002CF6")]
		[Address(RVA = "0x12D7840", Offset = "0x12D7840", VA = "0x12D7840")]
		public void GameInviteReceived(PlayerFriendInvitePopup.FriendInviteData friendInviteData)
		{
		}

		[Token(Token = "0x6002CF7")]
		[Address(RVA = "0x12D6F30", Offset = "0x12D6F30", VA = "0x12D6F30")]
		public void ToggleJoinPSPlusBlocker(bool active)
		{
		}

		[Token(Token = "0x6002CF8")]
		[Address(RVA = "0x12D6F50", Offset = "0x12D6F50", VA = "0x12D6F50")]
		public void ToggleAgeRestrictionBlocker(bool active)
		{
		}

		[Token(Token = "0x6002CF9")]
		[Address(RVA = "0x12D78D4", Offset = "0x12D78D4", VA = "0x12D78D4")]
		private void JoinPSPlusButtonPressed()
		{
		}

		[Token(Token = "0x6002CFA")]
		[Address(RVA = "0x12D78D8", Offset = "0x12D78D8", VA = "0x12D78D8")]
		public JoinGamePanel()
		{
		}
	}
	[Token(Token = "0x2000674")]
	public class MultiplayerOptionsPanel : MonoBehaviour
	{
		[Token(Token = "0x2000676")]
		[CompilerGenerated]
		private sealed class <_WaitForConnect>d__15 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400276F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002770")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x170004FB")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002D09")]
				[Address(RVA = "0x12D7F64", Offset = "0x12D7F64", VA = "0x12D7F64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170004FC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D0B")]
				[Address(RVA = "0x12D7FAC", Offset = "0x12D7FAC", VA = "0x12D7FAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D06")]
			[Address(RVA = "0x12D7E50", Offset = "0x12D7E50", VA = "0x12D7E50")]
			[DebuggerHidden]
			public <_WaitForConnect>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002D07")]
			[Address(RVA = "0x12D7EA8", Offset = "0x12D7EA8", VA = "0x12D7EA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D08")]
			[Address(RVA = "0x12D7EAC", Offset = "0x12D7EAC", VA = "0x12D7EAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D0A")]
			[Address(RVA = "0x12D7F6C", Offset = "0x12D7F6C", VA = "0x12D7F6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x4002766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject regionSelections;

		[Token(Token = "0x4002767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RegionSelectionButton[] regionSelectionButtons;

		[Token(Token = "0x4002768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI currentRegionText;

		[Token(Token = "0x4002769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Toggle openForJoiningToggle;

		[Token(Token = "0x400276A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Toggle disablePopupsToggle;

		[Token(Token = "0x400276B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject[] roomNotOpenBlockers;

		[Token(Token = "0x400276C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject[] disableIfChinaObjects;

		[Token(Token = "0x6002CFB")]
		[Address(RVA = "0x12D78E0", Offset = "0x12D78E0", VA = "0x12D78E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002CFC")]
		[Address(RVA = "0x12D7B7C", Offset = "0x12D7B7C", VA = "0x12D7B7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002CFD")]
		[Address(RVA = "0x12D7C3C", Offset = "0x12D7C3C", VA = "0x12D7C3C")]
		private void DisablePopupsValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002CFE")]
		[Address(RVA = "0x12D7C5C", Offset = "0x12D7C5C", VA = "0x12D7C5C")]
		private void OpenForPublicValueChanged(bool isOpen)
		{
		}

		[Token(Token = "0x6002CFF")]
		[Address(RVA = "0x12D7DC8", Offset = "0x12D7DC8", VA = "0x12D7DC8")]
		public void UpdateOpenForPublicToggle()
		{
		}

		[Token(Token = "0x6002D00")]
		[Address(RVA = "0x12D7DE4", Offset = "0x12D7DE4", VA = "0x12D7DE4")]
		private void ChangeRegion(string newRegion)
		{
		}

		[Token(Token = "0x6002D01")]
		[Address(RVA = "0x12D7DFC", Offset = "0x12D7DFC", VA = "0x12D7DFC")]
		public void ToggleOpenForJoiningToggle(bool active)
		{
		}

		[Token(Token = "0x6002D02")]
		[Address(RVA = "0x12D7BDC", Offset = "0x12D7BDC", VA = "0x12D7BDC")]
		[IteratorStateMachine(typeof(<_WaitForConnect>d__15))]
		private IEnumerator<float> _WaitForConnect()
		{
			return null;
		}

		[Token(Token = "0x6002D03")]
		[Address(RVA = "0x12D7E78", Offset = "0x12D7E78", VA = "0x12D7E78")]
		public MultiplayerOptionsPanel()
		{
		}
	}
	[Token(Token = "0x2000677")]
	[RequireComponent(typeof(Playstation4NetworkingManager))]
	[RequireComponent(typeof(MatchmakingManager))]
	[RequireComponent(typeof(PlaystationGeneralNetworkingManager))]
	[RequireComponent(typeof(Playstation5NetworkingManager))]
	[RequireComponent(typeof(OculusNetworkingManager))]
	[RequireComponent(typeof(SteamNetworkingManager))]
	[RequireComponent(typeof(PhotonRoomPoller))]
	[RequireComponent(typeof(RoomCodeGenerator))]
	public class NetworkConnectManager : MonoBehaviour
	{
		[Token(Token = "0x2000678")]
		[CompilerGenerated]
		private sealed class <DelayedReconnect>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002791")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002792")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002793")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkConnectManager <>4__this;

			[Token(Token = "0x170004FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002D41")]
				[Address(RVA = "0x12DA528", Offset = "0x12DA528", VA = "0x12DA528", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D43")]
				[Address(RVA = "0x12DA570", Offset = "0x12DA570", VA = "0x12DA570", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D3E")]
			[Address(RVA = "0x12D9180", Offset = "0x12D9180", VA = "0x12D9180")]
			[DebuggerHidden]
			public <DelayedReconnect>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6002D3F")]
			[Address(RVA = "0x12DA3B0", Offset = "0x12DA3B0", VA = "0x12DA3B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D40")]
			[Address(RVA = "0x12DA3B4", Offset = "0x12DA3B4", VA = "0x12DA3B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D42")]
			[Address(RVA = "0x12DA530", Offset = "0x12DA530", VA = "0x12DA530", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000679")]
		[CompilerGenerated]
		private sealed class <OnDisconnectedDelayed>d__44 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002794")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002795")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4002796")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public NetworkConnectManager <>4__this;

			[Token(Token = "0x4002797")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <reconnectTries>5__2;

			[Token(Token = "0x170004FF")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002D47")]
				[Address(RVA = "0x12DAA60", Offset = "0x12DAA60", VA = "0x12DAA60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000500")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D49")]
				[Address(RVA = "0x12DAAA8", Offset = "0x12DAAA8", VA = "0x12DAAA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D44")]
			[Address(RVA = "0x12D93B8", Offset = "0x12D93B8", VA = "0x12D93B8")]
			[DebuggerHidden]
			public <OnDisconnectedDelayed>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x6002D45")]
			[Address(RVA = "0x12DA578", Offset = "0x12DA578", VA = "0x12DA578", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D46")]
			[Address(RVA = "0x12DA57C", Offset = "0x12DA57C", VA = "0x12DA57C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D48")]
			[Address(RVA = "0x12DAA68", Offset = "0x12DAA68", VA = "0x12DAA68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200067A")]
		[CompilerGenerated]
		private sealed class <_ShowPopupWhenPlayerIsSettedUp>d__46 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002798")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002799")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400279A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float waitTime;

			[Token(Token = "0x400279B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkConnectManager <>4__this;

			[Token(Token = "0x17000501")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002D4D")]
				[Address(RVA = "0x12DAC98", Offset = "0x12DAC98", VA = "0x12DAC98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000502")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D4F")]
				[Address(RVA = "0x12DACE0", Offset = "0x12DACE0", VA = "0x12DACE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D4A")]
			[Address(RVA = "0x12D9580", Offset = "0x12D9580", VA = "0x12D9580")]
			[DebuggerHidden]
			public <_ShowPopupWhenPlayerIsSettedUp>d__46(int <>1__state)
			{
			}

			[Token(Token = "0x6002D4B")]
			[Address(RVA = "0x12DAB04", Offset = "0x12DAB04", VA = "0x12DAB04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D4C")]
			[Address(RVA = "0x12DAB08", Offset = "0x12DAB08", VA = "0x12DAB08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D4E")]
			[Address(RVA = "0x12DACA0", Offset = "0x12DACA0", VA = "0x12DACA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200067B")]
		[CompilerGenerated]
		private sealed class <_WaitForLocalPlayerAndDisableBackupCamera>d__57 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400279C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400279D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x17000503")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002D53")]
				[Address(RVA = "0x12DAE34", Offset = "0x12DAE34", VA = "0x12DAE34", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000504")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D55")]
				[Address(RVA = "0x12DAE7C", Offset = "0x12DAE7C", VA = "0x12DAE7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D50")]
			[Address(RVA = "0x12D9DBC", Offset = "0x12D9DBC", VA = "0x12D9DBC")]
			[DebuggerHidden]
			public <_WaitForLocalPlayerAndDisableBackupCamera>d__57(int <>1__state)
			{
			}

			[Token(Token = "0x6002D51")]
			[Address(RVA = "0x12DAD3C", Offset = "0x12DAD3C", VA = "0x12DAD3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D52")]
			[Address(RVA = "0x12DAD40", Offset = "0x12DAD40", VA = "0x12DAD40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D54")]
			[Address(RVA = "0x12DAE3C", Offset = "0x12DAE3C", VA = "0x12DAE3C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Defines how many times per second PhotonNetwork should send a package. If you change this, do not forget to also change 'SerializationRate'.Less packages are less overhead but more delay.Setting the SendRate to 50 will create up to 50 packages per second(which is a lot!).Keep your target platform in mind: mobile networks are slower and less reliable.")]
		[SerializeField]
		private int sendRate;

		[Token(Token = "0x4002772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[UnityEngine.Tooltip("Defines how many times per second OnPhotonSerialize should be called on PhotonViews.Choose this value in relation to PhotonNetwork.SendRate.OnPhotonSerialize will create updates and messages to be sent. A lower rate takes up less performance but will cause more lag.")]
		private int serializationRate;

		[Token(Token = "0x4002773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The maximum number of players per room. When a room is full, it can't be joined by new players, and so new room will be created")]
		public byte maxPlayersPerRoom;

		[Token(Token = "0x4002774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public JoinGamePanel joinGamePanel;

		[Token(Token = "0x4002775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MultiplayerOptionsPanel optionsPanel;

		[Token(Token = "0x4002776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InvitePanel invitePanel;

		[Token(Token = "0x4002777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MatchmakingPanel matchmakingPanel;

		[Token(Token = "0x4002778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public bool reconnectOnDisconnect;

		[Token(Token = "0x4002779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[HideInInspector]
		public bool startingSingleplayerFromMultiplayer;

		[Token(Token = "0x400277A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject canvasesParent;

		[Token(Token = "0x400277B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool forceUseOculusSDK;

		[Token(Token = "0x400277C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private VRPlatform.VRDevicePlatform vrPlatform;

		[Token(Token = "0x400277D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public string storedRoomCode;

		[Token(Token = "0x400277E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool joinRandomRoom;

		[Token(Token = "0x400277F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SteamNetworkingManager steamNetworkingManager;

		[Token(Token = "0x4002780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private OculusNetworkingManager oculusNetworkingManager;

		[Token(Token = "0x4002781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Playstation4NetworkingManager playstation4NetworkingManager;

		[Token(Token = "0x4002782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Playstation5NetworkingManager playstation5NetworkingManager;

		[Token(Token = "0x4002783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlaystationGeneralNetworkingManager playstationGeneralNetworkingManager;

		[Token(Token = "0x4002784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PicoNetworkingManager picoNetworkingManager;

		[Token(Token = "0x4002785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private NetworkingPhotonView networkingPhotonView;

		[Token(Token = "0x4002786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private MatchmakingManager matchmakingManager;

		[Token(Token = "0x4002787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private RoomCodeGenerator roomCodeGenerator;

		[Token(Token = "0x4002788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private string roomCode;

		[Token(Token = "0x4002789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool reconnecting;

		[Token(Token = "0x400278A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Canvas[] myCanvases;

		[Token(Token = "0x400278B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool disableFriendInvitePopups;

		[Token(Token = "0x400278C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool alreadyCheckedCommandLineArgs;

		[Token(Token = "0x400278D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private string storedCommandlineargumantRoomCode;

		[Token(Token = "0x400278E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private string tempPopupText;

		[Token(Token = "0x400278F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool disconnectInProgress;

		[Token(Token = "0x4002790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private CoroutineHandle disconnectedDelayedCoroutine;

		[Token(Token = "0x6002D0C")]
		[Address(RVA = "0x12D8008", Offset = "0x12D8008", VA = "0x12D8008")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6002D0D")]
		[Address(RVA = "0x12D8098", Offset = "0x12D8098", VA = "0x12D8098")]
		public void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x6002D0E")]
		[Address(RVA = "0x12D80F4", Offset = "0x12D80F4", VA = "0x12D80F4")]
		public void OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x6002D0F")]
		[Address(RVA = "0x12D81B4", Offset = "0x12D81B4", VA = "0x12D81B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D10")]
		[Address(RVA = "0x12D85DC", Offset = "0x12D85DC", VA = "0x12D85DC")]
		private void NewSceneLoaded()
		{
		}

		[Token(Token = "0x6002D11")]
		[Address(RVA = "0x12D8760", Offset = "0x12D8760", VA = "0x12D8760")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D12")]
		[Address(RVA = "0x12CF1E8", Offset = "0x12CF1E8", VA = "0x12CF1E8")]
		public void TryAutoHost()
		{
		}

		[Token(Token = "0x6002D13")]
		[Address(RVA = "0x12D8C48", Offset = "0x12D8C48", VA = "0x12D8C48")]
		private bool CheckCommandLineArguments()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D14")]
		[Address(RVA = "0x12D9060", Offset = "0x12D9060", VA = "0x12D9060")]
		private void Update()
		{
		}

		[Token(Token = "0x6002D15")]
		[Address(RVA = "0x12D910C", Offset = "0x12D910C", VA = "0x12D910C")]
		[IteratorStateMachine(typeof(<DelayedReconnect>d__40))]
		private IEnumerator DelayedReconnect()
		{
			return null;
		}

		[Token(Token = "0x6002D16")]
		[Address(RVA = "0x12D91A8", Offset = "0x12D91A8", VA = "0x12D91A8")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x6002D17")]
		[Address(RVA = "0x12D9200", Offset = "0x12D9200", VA = "0x12D9200")]
		public void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6002D18")]
		[Address(RVA = "0x12D9344", Offset = "0x12D9344", VA = "0x12D9344")]
		[IteratorStateMachine(typeof(<OnDisconnectedDelayed>d__44))]
		private IEnumerator<float> OnDisconnectedDelayed()
		{
			return null;
		}

		[Token(Token = "0x6002D19")]
		[Address(RVA = "0x12D93E0", Offset = "0x12D93E0", VA = "0x12D93E0")]
		private void ShowPopupAfterPlayerIsSettedUp()
		{
		}

		[Token(Token = "0x6002D1A")]
		[Address(RVA = "0x12D94FC", Offset = "0x12D94FC", VA = "0x12D94FC")]
		[IteratorStateMachine(typeof(<_ShowPopupWhenPlayerIsSettedUp>d__46))]
		private IEnumerator<float> _ShowPopupWhenPlayerIsSettedUp(float waitTime)
		{
			return null;
		}

		[Token(Token = "0x6002D1B")]
		[Address(RVA = "0x12CEDAC", Offset = "0x12CEDAC", VA = "0x12CEDAC")]
		public void GenerateNewRoomCode()
		{
		}

		[Token(Token = "0x6002D1C")]
		[Address(RVA = "0x12D9684", Offset = "0x12D9684", VA = "0x12D9684")]
		public void ChangeRoomCode(string roomID)
		{
		}

		[Token(Token = "0x6002D1D")]
		[Address(RVA = "0x12CF0F8", Offset = "0x12CF0F8", VA = "0x12CF0F8")]
		public void Reconnect()
		{
		}

		[Token(Token = "0x6002D1E")]
		[Address(RVA = "0x12D8A6C", Offset = "0x12D8A6C", VA = "0x12D8A6C")]
		public void Connect()
		{
		}

		[Token(Token = "0x6002D1F")]
		[Address(RVA = "0x12D968C", Offset = "0x12D968C", VA = "0x12D968C")]
		private void ConnectToChina()
		{
		}

		[Token(Token = "0x6002D20")]
		[Address(RVA = "0x12D97F0", Offset = "0x12D97F0", VA = "0x12D97F0")]
		private void PlayerNotConnected()
		{
		}

		[Token(Token = "0x6002D21")]
		[Address(RVA = "0x12D9818", Offset = "0x12D9818", VA = "0x12D9818")]
		public void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6002D22")]
		[Address(RVA = "0x12D9A54", Offset = "0x12D9A54", VA = "0x12D9A54")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6002D23")]
		[Address(RVA = "0x12D98D8", Offset = "0x12D98D8", VA = "0x12D98D8")]
		public void CreatePrivateRoom(string roomCodeToJoin)
		{
		}

		[Token(Token = "0x6002D24")]
		[Address(RVA = "0x12D9AE8", Offset = "0x12D9AE8", VA = "0x12D9AE8")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002D25")]
		[Address(RVA = "0x12D9D5C", Offset = "0x12D9D5C", VA = "0x12D9D5C")]
		[IteratorStateMachine(typeof(<_WaitForLocalPlayerAndDisableBackupCamera>d__57))]
		private IEnumerator<float> _WaitForLocalPlayerAndDisableBackupCamera()
		{
			return null;
		}

		[Token(Token = "0x6002D26")]
		[Address(RVA = "0x12CEE2C", Offset = "0x12CEE2C", VA = "0x12CEE2C")]
		public void JoinPrivateRoom(string roomCode)
		{
		}

		[Token(Token = "0x6002D27")]
		[Address(RVA = "0x12D9DE4", Offset = "0x12D9DE4", VA = "0x12D9DE4")]
		public void StartGame()
		{
		}

		[Token(Token = "0x6002D28")]
		[Address(RVA = "0x12D9E60", Offset = "0x12D9E60", VA = "0x12D9E60")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002D29")]
		[Address(RVA = "0x12DA170", Offset = "0x12DA170", VA = "0x12DA170")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002D2A")]
		[Address(RVA = "0x12DA1F8", Offset = "0x12DA1F8", VA = "0x12DA1F8")]
		public void OnCrateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002D2B")]
		[Address(RVA = "0x12DA278", Offset = "0x12DA278", VA = "0x12DA278")]
		public void ResetStoredIDRPC()
		{
		}

		[Token(Token = "0x6002D2C")]
		[Address(RVA = "0x12DA2A4", Offset = "0x12DA2A4", VA = "0x12DA2A4")]
		public string GetRoomCode()
		{
			return null;
		}

		[Token(Token = "0x6002D2D")]
		[Address(RVA = "0x12D00C8", Offset = "0x12D00C8", VA = "0x12D00C8")]
		public void ChangeRegion(string newRegion)
		{
		}

		[Token(Token = "0x6002D2E")]
		[Address(RVA = "0x12DA2AC", Offset = "0x12DA2AC", VA = "0x12DA2AC")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x6002D2F")]
		[Address(RVA = "0x12D7DC4", Offset = "0x12D7DC4", VA = "0x12D7DC4")]
		public void OpenForPublicValueChanged(bool isOpen)
		{
		}

		[Token(Token = "0x6002D30")]
		[Address(RVA = "0x12D9ABC", Offset = "0x12D9ABC", VA = "0x12D9ABC")]
		public void ChangeNetworkStatusText(string networkStatus)
		{
		}

		[Token(Token = "0x6002D31")]
		[Address(RVA = "0x12DA2C4", Offset = "0x12DA2C4", VA = "0x12DA2C4")]
		public OculusNetworkingManager GetOculusNetworkingManager()
		{
			return null;
		}

		[Token(Token = "0x6002D32")]
		[Address(RVA = "0x12DA2CC", Offset = "0x12DA2CC", VA = "0x12DA2CC")]
		public SteamNetworkingManager GetSteamNetworkingManager()
		{
			return null;
		}

		[Token(Token = "0x6002D33")]
		[Address(RVA = "0x12DA2D4", Offset = "0x12DA2D4", VA = "0x12DA2D4")]
		public Playstation4NetworkingManager GetPlaystation4NetworkingManager()
		{
			return null;
		}

		[Token(Token = "0x6002D34")]
		[Address(RVA = "0x12DA2DC", Offset = "0x12DA2DC", VA = "0x12DA2DC")]
		public Playstation5NetworkingManager GetPlaystation5NetworkingManager()
		{
			return null;
		}

		[Token(Token = "0x6002D35")]
		[Address(RVA = "0x12DA2E4", Offset = "0x12DA2E4", VA = "0x12DA2E4")]
		public PlaystationGeneralNetworkingManager GetGeneralPSNetworkingManager()
		{
			return null;
		}

		[Token(Token = "0x6002D36")]
		[Address(RVA = "0x12DA2EC", Offset = "0x12DA2EC", VA = "0x12DA2EC")]
		public PicoNetworkingManager GetPicoNetworkingManager()
		{
			return null;
		}

		[Token(Token = "0x6002D37")]
		[Address(RVA = "0x12DA2F4", Offset = "0x12DA2F4", VA = "0x12DA2F4")]
		public NetworkingPhotonView GetNetworkingPhotonView()
		{
			return null;
		}

		[Token(Token = "0x6002D38")]
		[Address(RVA = "0x12DA2FC", Offset = "0x12DA2FC", VA = "0x12DA2FC")]
		public MatchmakingManager GetMatchMakingManager()
		{
			return null;
		}

		[Token(Token = "0x6002D39")]
		[Address(RVA = "0x12DA304", Offset = "0x12DA304", VA = "0x12DA304")]
		public void SetDisableFriendInvitePopups(bool disabled)
		{
		}

		[Token(Token = "0x6002D3A")]
		[Address(RVA = "0x12DA310", Offset = "0x12DA310", VA = "0x12DA310")]
		public bool GetDisableFriendInvitePopups()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D3B")]
		[Address(RVA = "0x12CEDFC", Offset = "0x12CEDFC", VA = "0x12CEDFC")]
		public void DisconnectedFromRoom()
		{
		}

		[Token(Token = "0x6002D3C")]
		[Address(RVA = "0x12DA318", Offset = "0x12DA318", VA = "0x12DA318")]
		public NetworkConnectManager()
		{
		}
	}
	[Token(Token = "0x200067D")]
	public class NetworkingPhotonView : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x40027A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NetworkConnectManager networkConnectManager;

		[Token(Token = "0x40027A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OculusNetworkingManager oculusNetworkingManager;

		[Token(Token = "0x40027A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SteamNetworkingManager steamNetworkingManager;

		[Token(Token = "0x40027A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlaystationGeneralNetworkingManager playstationGeneralNetworkingManager;

		[Token(Token = "0x40027A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PicoNetworkingManager picoNetworkingManager;

		[Token(Token = "0x6002D5C")]
		[Address(RVA = "0x12D8548", Offset = "0x12D8548", VA = "0x12D8548")]
		public void GetReferences(NetworkConnectManager sender)
		{
		}

		[Token(Token = "0x6002D5D")]
		[Address(RVA = "0x12DB11C", Offset = "0x12DB11C", VA = "0x12DB11C", Slot = "35")]
		public override void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6002D5E")]
		[Address(RVA = "0x12DB158", Offset = "0x12DB158", VA = "0x12DB158", Slot = "30")]
		public override void OnConnected()
		{
		}

		[Token(Token = "0x6002D5F")]
		[Address(RVA = "0x12DB170", Offset = "0x12DB170", VA = "0x12DB170", Slot = "31")]
		public override void OnLeftRoom()
		{
		}

		[Token(Token = "0x6002D60")]
		[Address(RVA = "0x12DB190", Offset = "0x12DB190", VA = "0x12DB190", Slot = "38")]
		public override void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6002D61")]
		[Address(RVA = "0x12DB1A8", Offset = "0x12DB1A8", VA = "0x12DB1A8", Slot = "45")]
		public override void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6002D62")]
		[Address(RVA = "0x12DB1C0", Offset = "0x12DB1C0", VA = "0x12DB1C0", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002D63")]
		[Address(RVA = "0x12DB1FC", Offset = "0x12DB1FC", VA = "0x12DB1FC", Slot = "34")]
		public override void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002D64")]
		[Address(RVA = "0x12DB214", Offset = "0x12DB214", VA = "0x12DB214", Slot = "33")]
		public override void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002D65")]
		[Address(RVA = "0x12DB22C", Offset = "0x12DB22C", VA = "0x12DB22C", Slot = "44")]
		public override void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6002D66")]
		[Address(RVA = "0x12DB244", Offset = "0x12DB244", VA = "0x12DB244", Slot = "42")]
		public override void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6002D67")]
		[Address(RVA = "0x12DB290", Offset = "0x12DB290", VA = "0x12DB290", Slot = "43")]
		public override void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x6002D68")]
		[Address(RVA = "0x12DB2A8", Offset = "0x12DB2A8", VA = "0x12DB2A8", Slot = "32")]
		public override void OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x6002D69")]
		[Address(RVA = "0x12DB2C0", Offset = "0x12DB2C0", VA = "0x12DB2C0", Slot = "40")]
		public override void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x6002D6A")]
		[Address(RVA = "0x12DB2C4", Offset = "0x12DB2C4", VA = "0x12DB2C4")]
		[PunRPC]
		public void OculusFriendDisconnectedRPC(long disconnectedFriendID)
		{
		}

		[Token(Token = "0x6002D6B")]
		[Address(RVA = "0x12DB2E0", Offset = "0x12DB2E0", VA = "0x12DB2E0")]
		[PunRPC]
		public void OculusFriendConnectedRPC(long connectedPlayerID, string connectedPlayerName, string userAvatarUrl, Player sender)
		{
		}

		[Token(Token = "0x6002D6C")]
		[Address(RVA = "0x12DB2FC", Offset = "0x12DB2FC", VA = "0x12DB2FC")]
		[PunRPC]
		public void SteamFriendConnectedRPC(long connectedPlayerID, string connectedPlayerName, byte[] connectedPlayerAvatarBytes, int connectedPlayerAvatarHeight, int connectedPlayerAvatarWidth, Player sender)
		{
		}

		[Token(Token = "0x6002D6D")]
		[Address(RVA = "0x12DB318", Offset = "0x12DB318", VA = "0x12DB318")]
		[PunRPC]
		public void SteamFriendDisconnectedRPC(long disconnectedFriendID)
		{
		}

		[Token(Token = "0x6002D6E")]
		[Address(RVA = "0x12DB334", Offset = "0x12DB334", VA = "0x12DB334")]
		[PunRPC]
		public void PSFriendDisconnectedRPC(long disconnectedFriendID)
		{
		}

		[Token(Token = "0x6002D6F")]
		[Address(RVA = "0x12DB350", Offset = "0x12DB350", VA = "0x12DB350")]
		[PunRPC]
		public void PSFriendConnectedRPC(long connectedPlayerID, string connectedPlayerName, string userAvatarUrl, Player sender, string sessionID, bool ps4Player)
		{
		}

		[Token(Token = "0x6002D70")]
		[Address(RVA = "0x12DB370", Offset = "0x12DB370", VA = "0x12DB370")]
		[PunRPC]
		public void PSMutePlayerRPC(Player mutePlayer, bool mute, float delay)
		{
		}

		[Token(Token = "0x6002D71")]
		[Address(RVA = "0x12DB374", Offset = "0x12DB374", VA = "0x12DB374")]
		[PunRPC]
		public void PicoFriendConnectedRPC(long connectedPlayerID, string connectedPlayerName, string userAvatarUrl, Player sender)
		{
		}

		[Token(Token = "0x6002D72")]
		[Address(RVA = "0x12DB390", Offset = "0x12DB390", VA = "0x12DB390")]
		[PunRPC]
		public void PicoFriendDisconnectedRPC(long disconnectedFriendID)
		{
		}

		[Token(Token = "0x6002D73")]
		[Address(RVA = "0x12D2E34", Offset = "0x12D2E34", VA = "0x12D2E34")]
		public void ResetStoredID(Player targetPlayer)
		{
		}

		[Token(Token = "0x6002D74")]
		[Address(RVA = "0x12DB3AC", Offset = "0x12DB3AC", VA = "0x12DB3AC")]
		[PunRPC]
		private void ResetStoredIDRPC()
		{
		}

		[Token(Token = "0x6002D75")]
		[Address(RVA = "0x12DB3E0", Offset = "0x12DB3E0", VA = "0x12DB3E0")]
		public NetworkingPhotonView()
		{
		}
	}
	[Token(Token = "0x200067E")]
	public class RoomCodeGenerator : MonoBehaviour
	{
		[Token(Token = "0x40027A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int roomCodeLength;

		[Token(Token = "0x40027A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string characters;

		[Token(Token = "0x40027A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string generatedRoomCode;

		[Token(Token = "0x6002D76")]
		[Address(RVA = "0x12D95A8", Offset = "0x12D95A8", VA = "0x12D95A8")]
		public string GenerateRoomCode()
		{
			return null;
		}

		[Token(Token = "0x6002D77")]
		[Address(RVA = "0x12DB3E8", Offset = "0x12DB3E8", VA = "0x12DB3E8")]
		public string GetStoredRoomCode()
		{
			return null;
		}

		[Token(Token = "0x6002D78")]
		[Address(RVA = "0x12DB3F0", Offset = "0x12DB3F0", VA = "0x12DB3F0")]
		public RoomCodeGenerator()
		{
		}
	}
	[Token(Token = "0x200067F")]
	[RequireComponent(typeof(Button))]
	public class RegionSelectionButton : MonoBehaviour
	{
		[Token(Token = "0x2000680")]
		[CompilerGenerated]
		private sealed class <_SelectButton>d__4 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40027AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RegionSelectionButton <>4__this;

			[Token(Token = "0x17000507")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002D81")]
				[Address(RVA = "0x12DB82C", Offset = "0x12DB82C", VA = "0x12DB82C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000508")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D83")]
				[Address(RVA = "0x12DB874", Offset = "0x12DB874", VA = "0x12DB874", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D7E")]
			[Address(RVA = "0x12DB638", Offset = "0x12DB638", VA = "0x12DB638")]
			[DebuggerHidden]
			public <_SelectButton>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6002D7F")]
			[Address(RVA = "0x12DB720", Offset = "0x12DB720", VA = "0x12DB720", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D80")]
			[Address(RVA = "0x12DB724", Offset = "0x12DB724", VA = "0x12DB724", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D82")]
			[Address(RVA = "0x12DB834", Offset = "0x12DB834", VA = "0x12DB834", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string region;

		[Token(Token = "0x40027AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Button myButton;

		[Token(Token = "0x6002D79")]
		[Address(RVA = "0x12DB450", Offset = "0x12DB450", VA = "0x12DB450")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D7A")]
		[Address(RVA = "0x12DB55C", Offset = "0x12DB55C", VA = "0x12DB55C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002D7B")]
		[Address(RVA = "0x12DB5C4", Offset = "0x12DB5C4", VA = "0x12DB5C4")]
		[IteratorStateMachine(typeof(<_SelectButton>d__4))]
		private IEnumerator<float> _SelectButton()
		{
			return null;
		}

		[Token(Token = "0x6002D7C")]
		[Address(RVA = "0x12DB660", Offset = "0x12DB660", VA = "0x12DB660")]
		public Button GetButton()
		{
			return null;
		}

		[Token(Token = "0x6002D7D")]
		[Address(RVA = "0x12DB718", Offset = "0x12DB718", VA = "0x12DB718")]
		public RegionSelectionButton()
		{
		}
	}
	[Token(Token = "0x2000681")]
	public class RoomCodeInputField : UIKitInputField
	{
		[Token(Token = "0x40027AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent InputFieldUpdated;

		[Token(Token = "0x6002D84")]
		[Address(RVA = "0x12DB8D0", Offset = "0x12DB8D0", VA = "0x12DB8D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D85")]
		[Address(RVA = "0x12DB94C", Offset = "0x12DB94C", VA = "0x12DB94C", Slot = "7")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6002D86")]
		[Address(RVA = "0x12DBA0C", Offset = "0x12DBA0C", VA = "0x12DBA0C", Slot = "8")]
		protected override void CalculateLengthOfText(string text)
		{
		}

		[Token(Token = "0x6002D87")]
		[Address(RVA = "0x12DBA38", Offset = "0x12DBA38", VA = "0x12DBA38")]
		public RoomCodeInputField()
		{
		}
	}
	[Token(Token = "0x2000682")]
	public class RoomCodeInputFocusHelper : InputFocusHelper
	{
		[Token(Token = "0x6002D88")]
		[Address(RVA = "0x12DBA40", Offset = "0x12DBA40", VA = "0x12DBA40", Slot = "7")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6002D89")]
		[Address(RVA = "0x12DBA44", Offset = "0x12DBA44", VA = "0x12DBA44")]
		public RoomCodeInputFocusHelper()
		{
		}
	}
	[Token(Token = "0x2000683")]
	public class RoomCodeKeyboardManager : MobileKeyboardManager
	{
		[Token(Token = "0x40027AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent EnterButtonPressedEvent;

		[Token(Token = "0x6002D8A")]
		[Address(RVA = "0x12DBA4C", Offset = "0x12DBA4C", VA = "0x12DBA4C", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002D8B")]
		[Address(RVA = "0x12DBAD4", Offset = "0x12DBAD4", VA = "0x12DBAD4")]
		public void EnterButtonPressed()
		{
		}

		[Token(Token = "0x6002D8C")]
		[Address(RVA = "0x12DBAE8", Offset = "0x12DBAE8", VA = "0x12DBAE8")]
		public RoomCodeKeyboardManager()
		{
		}
	}
	[Token(Token = "0x2000684")]
	public class ToggleMultiplayerInvitePanel : MonoBehaviour
	{
		[Token(Token = "0x40027B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject multiplayerInvitePanel;

		[Token(Token = "0x40027B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float disableDistance;

		[Token(Token = "0x40027B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool multiplayerPanelActive;

		[Token(Token = "0x6002D8D")]
		[Address(RVA = "0x12DBAF0", Offset = "0x12DBAF0", VA = "0x12DBAF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D8E")]
		[Address(RVA = "0x12DBD78", Offset = "0x12DBD78", VA = "0x12DBD78")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002D8F")]
		[Address(RVA = "0x12DBE3C", Offset = "0x12DBE3C", VA = "0x12DBE3C")]
		private void SceneChangeStarted()
		{
		}

		[Token(Token = "0x6002D90")]
		[Address(RVA = "0x12DBF00", Offset = "0x12DBF00", VA = "0x12DBF00")]
		private void SceneChangeFinished()
		{
		}

		[Token(Token = "0x6002D91")]
		[Address(RVA = "0x12DBCB4", Offset = "0x12DBCB4", VA = "0x12DBCB4")]
		private void ToggleMultiplayerPanel()
		{
		}

		[Token(Token = "0x6002D92")]
		[Address(RVA = "0x12DC1B4", Offset = "0x12DC1B4", VA = "0x12DC1B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002D93")]
		[Address(RVA = "0x12DBFC4", Offset = "0x12DBFC4", VA = "0x12DBFC4")]
		private void MoveMultiplayerPanel()
		{
		}

		[Token(Token = "0x6002D94")]
		[Address(RVA = "0x12DC390", Offset = "0x12DC390", VA = "0x12DC390")]
		public ToggleMultiplayerInvitePanel()
		{
		}
	}
	[Token(Token = "0x2000685")]
	[RequireComponent(typeof(Toggle))]
	public class AlwaysRun : MonoBehaviourPunCallbacks, IOption
	{
		[Token(Token = "0x2000686")]
		[CompilerGenerated]
		private sealed class <Init>d__2 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40027B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AlwaysRun <>4__this;

			[Token(Token = "0x17000509")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002D9F")]
				[Address(RVA = "0x12DCA40", Offset = "0x12DCA40", VA = "0x12DCA40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700050A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002DA1")]
				[Address(RVA = "0x12DCA88", Offset = "0x12DCA88", VA = "0x12DCA88", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D9C")]
			[Address(RVA = "0x12DC54C", Offset = "0x12DC54C", VA = "0x12DC54C")]
			[DebuggerHidden]
			public <Init>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6002D9D")]
			[Address(RVA = "0x12DC83C", Offset = "0x12DC83C", VA = "0x12DC83C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D9E")]
			[Address(RVA = "0x12DC840", Offset = "0x12DC840", VA = "0x12DC840", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002DA0")]
			[Address(RVA = "0x12DCA48", Offset = "0x12DCA48", VA = "0x12DCA48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000687")]
		[CompilerGenerated]
		private sealed class <DelayedToggle>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40027B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AlwaysRun <>4__this;

			[Token(Token = "0x1700050B")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002DA5")]
				[Address(RVA = "0x12DCBE0", Offset = "0x12DCBE0", VA = "0x12DCBE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700050C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002DA7")]
				[Address(RVA = "0x12DCC28", Offset = "0x12DCC28", VA = "0x12DCC28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002DA2")]
			[Address(RVA = "0x12DC80C", Offset = "0x12DC80C", VA = "0x12DC80C")]
			[DebuggerHidden]
			public <DelayedToggle>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6002DA3")]
			[Address(RVA = "0x12DCAE4", Offset = "0x12DCAE4", VA = "0x12DCAE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002DA4")]
			[Address(RVA = "0x12DCAE8", Offset = "0x12DCAE8", VA = "0x12DCAE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002DA6")]
			[Address(RVA = "0x12DCBE8", Offset = "0x12DCBE8", VA = "0x12DCBE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle myToggle;

		[Token(Token = "0x6002D95")]
		[Address(RVA = "0x12DC3A8", Offset = "0x12DC3A8", VA = "0x12DC3A8", Slot = "54")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002D96")]
		[Address(RVA = "0x12DC4D8", Offset = "0x12DC4D8", VA = "0x12DC4D8")]
		[IteratorStateMachine(typeof(<Init>d__2))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x6002D97")]
		[Address(RVA = "0x12DC574", Offset = "0x12DC574", VA = "0x12DC574")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002D98")]
		[Address(RVA = "0x12DC688", Offset = "0x12DC688", VA = "0x12DC688")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002D99")]
		[Address(RVA = "0x12DC724", Offset = "0x12DC724", VA = "0x12DC724", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002D9A")]
		[Address(RVA = "0x12DC798", Offset = "0x12DC798", VA = "0x12DC798")]
		[IteratorStateMachine(typeof(<DelayedToggle>d__6))]
		private IEnumerator<float> DelayedToggle()
		{
			return null;
		}

		[Token(Token = "0x6002D9B")]
		[Address(RVA = "0x12DC834", Offset = "0x12DC834", VA = "0x12DC834")]
		public AlwaysRun()
		{
		}
	}
	[Token(Token = "0x2000688")]
	[RequireComponent(typeof(Toggle))]
	public class AmbientBoostToggle : MonoBehaviour, IOption
	{
		[Token(Token = "0x2000689")]
		[CompilerGenerated]
		private sealed class <_SetOption>d__6 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40027BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isOn;

			[Token(Token = "0x1700050D")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002DB3")]
				[Address(RVA = "0x12DD40C", Offset = "0x12DD40C", VA = "0x12DD40C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700050E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002DB5")]
				[Address(RVA = "0x12DD454", Offset = "0x12DD454", VA = "0x12DD454", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002DB0")]
			[Address(RVA = "0x12DD2D4", Offset = "0x12DD2D4", VA = "0x12DD2D4")]
			[DebuggerHidden]
			public <_SetOption>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6002DB1")]
			[Address(RVA = "0x12DD354", Offset = "0x12DD354", VA = "0x12DD354", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002DB2")]
			[Address(RVA = "0x12DD358", Offset = "0x12DD358", VA = "0x12DD358", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002DB4")]
			[Address(RVA = "0x12DD414", Offset = "0x12DD414", VA = "0x12DD414", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002DA8")]
		[Address(RVA = "0x12DCC84", Offset = "0x12DCC84", VA = "0x12DCC84", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002DA9")]
		[Address(RVA = "0x12DD070", Offset = "0x12DD070", VA = "0x12DD070")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002DAA")]
		[Address(RVA = "0x12DCE80", Offset = "0x12DCE80", VA = "0x12DCE80")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002DAB")]
		[Address(RVA = "0x12DD1BC", Offset = "0x12DD1BC", VA = "0x12DD1BC")]
		private void SceneChanged()
		{
		}

		[Token(Token = "0x6002DAC")]
		[Address(RVA = "0x12DD254", Offset = "0x12DD254", VA = "0x12DD254")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002DAD")]
		[Address(RVA = "0x12DD150", Offset = "0x12DD150", VA = "0x12DD150")]
		[IteratorStateMachine(typeof(<_SetOption>d__6))]
		private IEnumerator<float> _SetOption(bool isOn)
		{
			return null;
		}

		[Token(Token = "0x6002DAE")]
		[Address(RVA = "0x12DD2FC", Offset = "0x12DD2FC", VA = "0x12DD2FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002DAF")]
		[Address(RVA = "0x12DD34C", Offset = "0x12DD34C", VA = "0x12DD34C")]
		public AmbientBoostToggle()
		{
		}
	}
	[Token(Token = "0x200068A")]
	[RequireComponent(typeof(Toggle))]
	public class HideRoomCodesToggle : MonoBehaviour, IOption
	{
		[Token(Token = "0x200068B")]
		[CompilerGenerated]
		private sealed class <DelayedToggle>d__2 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40027C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HideRoomCodesToggle <>4__this;

			[Token(Token = "0x1700050F")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002DBD")]
				[Address(RVA = "0x12DD854", Offset = "0x12DD854", VA = "0x12DD854", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000510")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002DBF")]
				[Address(RVA = "0x12DD89C", Offset = "0x12DD89C", VA = "0x12DD89C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002DBA")]
			[Address(RVA = "0x12DD654", Offset = "0x12DD654", VA = "0x12DD654")]
			[DebuggerHidden]
			public <DelayedToggle>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6002DBB")]
			[Address(RVA = "0x12DD76C", Offset = "0x12DD76C", VA = "0x12DD76C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002DBC")]
			[Address(RVA = "0x12DD770", Offset = "0x12DD770", VA = "0x12DD770", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002DBE")]
			[Address(RVA = "0x12DD85C", Offset = "0x12DD85C", VA = "0x12DD85C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002DB6")]
		[Address(RVA = "0x12DD4B0", Offset = "0x12DD4B0", VA = "0x12DD4B0", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002DB7")]
		[Address(RVA = "0x12DD5E0", Offset = "0x12DD5E0", VA = "0x12DD5E0")]
		[IteratorStateMachine(typeof(<DelayedToggle>d__2))]
		private IEnumerator<float> DelayedToggle()
		{
			return null;
		}

		[Token(Token = "0x6002DB8")]
		[Address(RVA = "0x12DD67C", Offset = "0x12DD67C", VA = "0x12DD67C")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002DB9")]
		[Address(RVA = "0x12DD764", Offset = "0x12DD764", VA = "0x12DD764")]
		public HideRoomCodesToggle()
		{
		}
	}
	[Token(Token = "0x200068C")]
	[RequireComponent(typeof(Toggle))]
	public class MonitorViewToggle : MonoBehaviour, IOption
	{
		[Token(Token = "0x200068D")]
		[CompilerGenerated]
		private sealed class <_SetFollowHDMToggle>d__5 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40027C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isOn;

			[Token(Token = "0x17000511")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002DCA")]
				[Address(RVA = "0x12DDEF8", Offset = "0x12DDEF8", VA = "0x12DDEF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000512")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002DCC")]
				[Address(RVA = "0x12DDF40", Offset = "0x12DDF40", VA = "0x12DDF40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002DC7")]
			[Address(RVA = "0x12DDDAC", Offset = "0x12DDDAC", VA = "0x12DDDAC")]
			[DebuggerHidden]
			public <_SetFollowHDMToggle>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6002DC8")]
			[Address(RVA = "0x12DDE2C", Offset = "0x12DDE2C", VA = "0x12DDE2C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002DC9")]
			[Address(RVA = "0x12DDE30", Offset = "0x12DDE30", VA = "0x12DDE30", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002DCB")]
			[Address(RVA = "0x12DDF00", Offset = "0x12DDF00", VA = "0x12DDF00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002DC0")]
		[Address(RVA = "0x12DD8F8", Offset = "0x12DD8F8", VA = "0x12DD8F8", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002DC1")]
		[Address(RVA = "0x12DDA94", Offset = "0x12DDA94", VA = "0x12DDA94")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002DC2")]
		[Address(RVA = "0x12DDB74", Offset = "0x12DDB74", VA = "0x12DDB74")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002DC3")]
		[Address(RVA = "0x12DDD2C", Offset = "0x12DDD2C", VA = "0x12DDD2C")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002DC4")]
		[Address(RVA = "0x12DDCC0", Offset = "0x12DDCC0", VA = "0x12DDCC0")]
		[IteratorStateMachine(typeof(<_SetFollowHDMToggle>d__5))]
		private IEnumerator<float> _SetFollowHDMToggle(bool isOn)
		{
			return null;
		}

		[Token(Token = "0x6002DC5")]
		[Address(RVA = "0x12DDDD4", Offset = "0x12DDDD4", VA = "0x12DDDD4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002DC6")]
		[Address(RVA = "0x12DDE24", Offset = "0x12DDE24", VA = "0x12DDE24")]
		public MonitorViewToggle()
		{
		}
	}
	[Token(Token = "0x200068E")]
	[RequireComponent(typeof(Toggle))]
	public class MuteBGMusicToggle : MonoBehaviour, IOption
	{
		[Token(Token = "0x40027C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002DCD")]
		[Address(RVA = "0x12DDF9C", Offset = "0x12DDF9C", VA = "0x12DDF9C", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002DCE")]
		[Address(RVA = "0x12DE138", Offset = "0x12DE138", VA = "0x12DE138")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002DCF")]
		[Address(RVA = "0x12DE23C", Offset = "0x12DE23C", VA = "0x12DE23C")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002DD0")]
		[Address(RVA = "0x12DE2B4", Offset = "0x12DE2B4", VA = "0x12DE2B4")]
		public MuteBGMusicToggle()
		{
		}
	}
	[Token(Token = "0x200068F")]
	[RequireComponent(typeof(Toggle))]
	public class MuteMicToggle : MonoBehaviour, IOption
	{
		[Token(Token = "0x40027C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002DD1")]
		[Address(RVA = "0x12DE2BC", Offset = "0x12DE2BC", VA = "0x12DE2BC", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002DD2")]
		[Address(RVA = "0x12DE518", Offset = "0x12DE518", VA = "0x12DE518")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002DD3")]
		[Address(RVA = "0x12DE648", Offset = "0x12DE648", VA = "0x12DE648")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002DD4")]
		[Address(RVA = "0x12DE670", Offset = "0x12DE670", VA = "0x12DE670")]
		public void ToggleInteractable(bool interactable)
		{
		}

		[Token(Token = "0x6002DD5")]
		[Address(RVA = "0x12DE600", Offset = "0x12DE600", VA = "0x12DE600")]
		public void UpdateToggleValue()
		{
		}

		[Token(Token = "0x6002DD6")]
		[Address(RVA = "0x12DE778", Offset = "0x12DE778", VA = "0x12DE778")]
		public MuteMicToggle()
		{
		}
	}
	[Token(Token = "0x2000690")]
	public class OptionsPanel : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x40027C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Button resetPositionButton;

		[Token(Token = "0x40027C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject confirmPanel;

		[Token(Token = "0x6002DD7")]
		[Address(RVA = "0x12DE780", Offset = "0x12DE780", VA = "0x12DE780")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002DD8")]
		[Address(RVA = "0x12DE818", Offset = "0x12DE818", VA = "0x12DE818")]
		private void ResetPositionButtonClicked()
		{
		}

		[Token(Token = "0x6002DD9")]
		[Address(RVA = "0x12DE814", Offset = "0x12DE814", VA = "0x12DE814")]
		public void TogglePanel(bool active)
		{
		}

		[Token(Token = "0x6002DDA")]
		[Address(RVA = "0x12DE8B4", Offset = "0x12DE8B4", VA = "0x12DE8B4")]
		public OptionsPanel()
		{
		}
	}
	[Token(Token = "0x2000691")]
	[RequireComponent(typeof(Toggle))]
	public class SittingModeToggle : MonoBehaviour, IOption
	{
		[Token(Token = "0x2000692")]
		[CompilerGenerated]
		private sealed class <Init>d__2 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40027CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SittingModeToggle <>4__this;

			[Token(Token = "0x17000513")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002DE3")]
				[Address(RVA = "0x12DEE74", Offset = "0x12DEE74", VA = "0x12DEE74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000514")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002DE5")]
				[Address(RVA = "0x12DEEBC", Offset = "0x12DEEBC", VA = "0x12DEEBC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002DE0")]
			[Address(RVA = "0x12DEC44", Offset = "0x12DEC44", VA = "0x12DEC44")]
			[DebuggerHidden]
			public <Init>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6002DE1")]
			[Address(RVA = "0x12DEC6C", Offset = "0x12DEC6C", VA = "0x12DEC6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002DE2")]
			[Address(RVA = "0x12DEC70", Offset = "0x12DEC70", VA = "0x12DEC70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002DE4")]
			[Address(RVA = "0x12DEE7C", Offset = "0x12DEE7C", VA = "0x12DEE7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Toggle myToggle;

		[Token(Token = "0x6002DDB")]
		[Address(RVA = "0x12DE8BC", Offset = "0x12DE8BC", VA = "0x12DE8BC", Slot = "4")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002DDC")]
		[Address(RVA = "0x12DE9EC", Offset = "0x12DE9EC", VA = "0x12DE9EC")]
		[IteratorStateMachine(typeof(<Init>d__2))]
		private IEnumerator<float> Init()
		{
			return null;
		}

		[Token(Token = "0x6002DDD")]
		[Address(RVA = "0x12DEA60", Offset = "0x12DEA60", VA = "0x12DEA60")]
		private void OnDataLoaded()
		{
		}

		[Token(Token = "0x6002DDE")]
		[Address(RVA = "0x12DEB74", Offset = "0x12DEB74", VA = "0x12DEB74")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002DDF")]
		[Address(RVA = "0x12DEC3C", Offset = "0x12DEC3C", VA = "0x12DEC3C")]
		public SittingModeToggle()
		{
		}
	}
	[Token(Token = "0x2000693")]
	[RequireComponent(typeof(Toggle))]
	public class SmoothTurnToggle : MonoBehaviourPunCallbacks, IOption
	{
		[Token(Token = "0x2000694")]
		[CompilerGenerated]
		private sealed class <DelayedToggle>d__3 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40027D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SmoothTurnToggle <>4__this;

			[Token(Token = "0x17000515")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6002DEF")]
				[Address(RVA = "0x12DF384", Offset = "0x12DF384", VA = "0x12DF384", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000516")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002DF1")]
				[Address(RVA = "0x12DF3CC", Offset = "0x12DF3CC", VA = "0x12DF3CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002DEC")]
			[Address(RVA = "0x12DF0BC", Offset = "0x12DF0BC", VA = "0x12DF0BC")]
			[DebuggerHidden]
			public <DelayedToggle>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6002DED")]
			[Address(RVA = "0x12DF298", Offset = "0x12DF298", VA = "0x12DF298", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002DEE")]
			[Address(RVA = "0x12DF29C", Offset = "0x12DF29C", VA = "0x12DF29C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002DF0")]
			[Address(RVA = "0x12DF38C", Offset = "0x12DF38C", VA = "0x12DF38C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle myToggle;

		[Token(Token = "0x40027CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Slider strengthSlider;

		[Token(Token = "0x6002DE6")]
		[Address(RVA = "0x12DEF18", Offset = "0x12DEF18", VA = "0x12DEF18", Slot = "54")]
		private void IOption.Init()
		{
		}

		[Token(Token = "0x6002DE7")]
		[Address(RVA = "0x12DF048", Offset = "0x12DF048", VA = "0x12DF048")]
		[IteratorStateMachine(typeof(<DelayedToggle>d__3))]
		private IEnumerator<float> DelayedToggle()
		{
			return null;
		}

		[Token(Token = "0x6002DE8")]
		[Address(RVA = "0x12DF0E4", Offset = "0x12DF0E4", VA = "0x12DF0E4")]
		private void ToggleValueChanged(bool arg0)
		{
		}

		[Token(Token = "0x6002DE9")]
		[Address(RVA = "0x12DF20C", Offset = "0x12DF20C", VA = "0x12DF20C", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6002DEA")]
		[Address(RVA = "0x12DF228", Offset = "0x12DF228", VA = "0x12DF228")]
		private void ApplySettings()
		{
		}

		[Token(Token = "0x6002DEB")]
		[Address(RVA = "0x12DF290", Offset = "0x12DF290", VA = "0x12DF290")]
		public SmoothTurnToggle()
		{
		}
	}
	[Token(Token = "0x2000695")]
	public class TutorialConfirmPanel : MonoBehaviour
	{
		[Token(Token = "0x6002DF2")]
		[Address(RVA = "0x12DF428", Offset = "0x12DF428", VA = "0x12DF428")]
		public TutorialConfirmPanel()
		{
		}
	}
	[Token(Token = "0x2000696")]
	public class TierManagerPhotonView : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x40027D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TierManager tierManager;

		[Token(Token = "0x6002DF3")]
		[Address(RVA = "0x12DF430", Offset = "0x12DF430", VA = "0x12DF430")]
		public void GetReferences(TierManager sender)
		{
		}

		[Token(Token = "0x6002DF4")]
		[Address(RVA = "0x12DF438", Offset = "0x12DF438", VA = "0x12DF438")]
		[PunRPC]
		public void UpdateToolTierRPC(Tool.ToolType toolType, int newTier, bool playAudio)
		{
		}

		[Token(Token = "0x6002DF5")]
		[Address(RVA = "0x12DF458", Offset = "0x12DF458", VA = "0x12DF458")]
		[PunRPC]
		public void UpdateOtherTierRPC(OtherUpgradePathScriptableObject.UpgradeType upgradeType, int newTier, bool playAudio)
		{
		}

		[Token(Token = "0x6002DF6")]
		[Address(RVA = "0x12DF478", Offset = "0x12DF478", VA = "0x12DF478", Slot = "42")]
		public override void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6002DF7")]
		[Address(RVA = "0x12DF8F0", Offset = "0x12DF8F0", VA = "0x12DF8F0", Slot = "35")]
		public override void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6002DF8")]
		[Address(RVA = "0x12DF974", Offset = "0x12DF974", VA = "0x12DF974")]
		public TierManagerPhotonView()
		{
		}
	}
	[Token(Token = "0x2000697")]
	public class TogglePlayerControls : MonoBehaviour
	{
		[Token(Token = "0x40027D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float originalMoveSpeed;

		[Token(Token = "0x40027D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float originalRunSpeed;

		[Token(Token = "0x6002DF9")]
		[Address(RVA = "0x12DF97C", Offset = "0x12DF97C", VA = "0x12DF97C")]
		public void ToggleControls(bool updateGrabbing, bool updateMovement, bool updateTurning, bool updateTeleport)
		{
		}

		[Token(Token = "0x6002DFA")]
		[Address(RVA = "0x12DFA58", Offset = "0x12DFA58", VA = "0x12DFA58")]
		private void GetOriginalValues()
		{
		}

		[Token(Token = "0x6002DFB")]
		[Address(RVA = "0x12DFA5C", Offset = "0x12DFA5C", VA = "0x12DFA5C")]
		public TogglePlayerControls()
		{
		}
	}
	[Token(Token = "0x2000698")]
	[RequireComponent(typeof(TextMeshProUGUI))]
	public class CurrentMoneyText : MonoBehaviour
	{
		[Token(Token = "0x40027D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshProUGUI moneyText;

		[Token(Token = "0x6002DFC")]
		[Address(RVA = "0x12DFA64", Offset = "0x12DFA64", VA = "0x12DFA64")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002DFD")]
		[Address(RVA = "0x12DFACC", Offset = "0x12DFACC", VA = "0x12DFACC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002DFE")]
		[Address(RVA = "0x12DFC20", Offset = "0x12DFC20", VA = "0x12DFC20")]
		private void Start()
		{
		}

		[Token(Token = "0x6002DFF")]
		[Address(RVA = "0x12DFDAC", Offset = "0x12DFDAC", VA = "0x12DFDAC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002E00")]
		[Address(RVA = "0x12DFD24", Offset = "0x12DFD24", VA = "0x12DFD24")]
		private void ChangeCurrentMoneyAmount(int newMoneyAmount)
		{
		}

		[Token(Token = "0x6002E01")]
		[Address(RVA = "0x12DFE94", Offset = "0x12DFE94", VA = "0x12DFE94")]
		public CurrentMoneyText()
		{
		}
	}
	[Token(Token = "0x2000699")]
	[CreateAssetMenu(fileName = "OtherUpgradePath", menuName = "ScriptableObjects/OtherUpgradePathScriptableObject", order = 2)]
	public class OtherUpgradePathScriptableObject : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x200069A")]
		public class UpgradeData
		{
			[Token(Token = "0x40027DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LocalizedString nameText;

			[Token(Token = "0x40027DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Sprite image;

			[Token(Token = "0x40027DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int cost;

			[Token(Token = "0x40027E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public LocalizedString specsText;

			[Token(Token = "0x6002E03")]
			[Address(RVA = "0x12DFF2C", Offset = "0x12DFF2C", VA = "0x12DFF2C")]
			public UpgradeData()
			{
			}
		}

		[Token(Token = "0x200069B")]
		public enum UpgradeType
		{
			[Token(Token = "0x40027E2")]
			None,
			[Token(Token = "0x40027E3")]
			Backpack,
			[Token(Token = "0x40027E4")]
			Armor,
			[Token(Token = "0x40027E5")]
			ToolBelt,
			[Token(Token = "0x40027E6")]
			Elevator,
			[Token(Token = "0x40027E7")]
			ElevatorB2,
			[Token(Token = "0x40027E8")]
			ElevatorB3,
			[Token(Token = "0x40027E9")]
			ElevatorB4,
			[Token(Token = "0x40027EA")]
			Cabin,
			[Token(Token = "0x40027EB")]
			ToolShed,
			[Token(Token = "0x40027EC")]
			WorkersGlove,
			[Token(Token = "0x40027ED")]
			CosmeticItem,
			[Token(Token = "0x40027EE")]
			MapStand,
			[Token(Token = "0x40027EF")]
			ElevatorSlotMachineB1,
			[Token(Token = "0x40027F0")]
			ElevatorSlotMachineB2,
			[Token(Token = "0x40027F1")]
			ElevatorSlotMachineB3,
			[Token(Token = "0x40027F2")]
			ElevatorSlotMachineB4
		}

		[Token(Token = "0x40027D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new LocalizedString name;

		[Token(Token = "0x40027D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ToolUpgradePathScriptableObject.CompanyType company;

		[Token(Token = "0x40027D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool showInShop;

		[Token(Token = "0x40027DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool disableUpgrades;

		[Token(Token = "0x40027DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpgradeType upgradeType;

		[Token(Token = "0x40027DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<UpgradeData> upgradeDatas;

		[Token(Token = "0x6002E02")]
		[Address(RVA = "0x12DFE9C", Offset = "0x12DFE9C", VA = "0x12DFE9C")]
		public OtherUpgradePathScriptableObject()
		{
		}
	}
	[Token(Token = "0x200069C")]
	[CreateAssetMenu(fileName = "ToolUpgradePath", menuName = "ScriptableObjects/ToolUpgradePathScriptableObject", order = 2)]
	public class ToolUpgradePathScriptableObject : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x200069D")]
		public class UpgradeData
		{
			[Token(Token = "0x40027FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LocalizedString nameText;

			[Token(Token = "0x40027FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject gameObject;

			[Token(Token = "0x40027FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Sprite image;

			[Token(Token = "0x40027FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int cost;

			[Token(Token = "0x40027FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public LocalizedString specsText;

			[Token(Token = "0x6002E05")]
			[Address(RVA = "0x12DFFC4", Offset = "0x12DFFC4", VA = "0x12DFFC4")]
			public UpgradeData()
			{
			}
		}

		[Token(Token = "0x200069E")]
		public enum UpgradeType
		{
			[Token(Token = "0x4002800")]
			PickAxe,
			[Token(Token = "0x4002801")]
			Revolver,
			[Token(Token = "0x4002802")]
			SledgeHammer,
			[Token(Token = "0x4002803")]
			Shovel,
			[Token(Token = "0x4002804")]
			Dynamite,
			[Token(Token = "0x4002805")]
			GoldPan,
			[Token(Token = "0x4002806")]
			Detector,
			[Token(Token = "0x4002807")]
			Backpack,
			[Token(Token = "0x4002808")]
			Armor,
			[Token(Token = "0x4002809")]
			ToolBelt,
			[Token(Token = "0x400280A")]
			Elevator,
			[Token(Token = "0x400280B")]
			Cabin
		}

		[Token(Token = "0x200069F")]
		public enum CompanyType
		{
			[Token(Token = "0x400280D")]
			DaltonTC,
			[Token(Token = "0x400280E")]
			ACME,
			[Token(Token = "0x400280F")]
			MTC,
			[Token(Token = "0x4002810")]
			EDEL,
			[Token(Token = "0x4002811")]
			Chernatom,
			[Token(Token = "0x4002812")]
			FoulRaven
		}

		[Token(Token = "0x40027F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new LocalizedString name;

		[Token(Token = "0x40027F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CompanyType company;

		[Token(Token = "0x40027F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool showInShop;

		[Token(Token = "0x40027F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool disableUpgrades;

		[Token(Token = "0x40027F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Tool.ToolType toolType;

		[Token(Token = "0x40027F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int MaxShownLevel;

		[Token(Token = "0x40027F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<UpgradeData> upgradeDatas;

		[Token(Token = "0x6002E04")]
		[Address(RVA = "0x12DFF34", Offset = "0x12DFF34", VA = "0x12DFF34")]
		public ToolUpgradePathScriptableObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006A0")]
	public class UpgradeableOtherCardData
	{
		[Token(Token = "0x4002813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LocalizedString name;

		[Token(Token = "0x4002814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LocalizedString nameNow;

		[Token(Token = "0x4002815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LocalizedString nameUpgrade;

		[Token(Token = "0x4002816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LocalizedString specsNow;

		[Token(Token = "0x4002817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LocalizedString specsUpgrade;

		[Token(Token = "0x4002818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int upgradePrice;

		[Token(Token = "0x4002819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int oldPrice;

		[Token(Token = "0x400281A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Sprite imageNow;

		[Token(Token = "0x400281B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Sprite imageUpgrade;

		[Token(Token = "0x400281C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool noMoreUpgrades;

		[Token(Token = "0x400281D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool firstUpgrade;

		[Token(Token = "0x400281E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public OtherUpgradePathScriptableObject.UpgradeType upgradeType;

		[Token(Token = "0x400281F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int upgradeTier;

		[Token(Token = "0x4002820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public ToolUpgradePathScriptableObject.CompanyType company;

		[Token(Token = "0x4002821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public BuyableCosmeticItemScriptableObject.CosmeticItem cosmeticItem;

		[Token(Token = "0x6002E06")]
		[Address(RVA = "0x12DFFCC", Offset = "0x12DFFCC", VA = "0x12DFFCC")]
		public UpgradeableOtherCardData()
		{
		}
	}
	[Token(Token = "0x20006A1")]
	public class UpgradeableOtherCardItem : MonoBehaviour
	{
		[Token(Token = "0x20006A2")]
		public delegate void OnCardClickedHandler(UpgradeableOtherCardData card);

		[Token(Token = "0x4002822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Image background;

		[Token(Token = "0x4002823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite bgHighlight;

		[Token(Token = "0x4002824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite bgRegular;

		[Token(Token = "0x4002825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Multi Item Panel")]
		public Transform MultiItemPanel;

		[Token(Token = "0x4002826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI typeText;

		[Token(Token = "0x4002827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI nameNowText;

		[Token(Token = "0x4002828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI nameUpgradeText;

		[Token(Token = "0x4002829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI specsNowText;

		[Token(Token = "0x400282A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI specsUpgradeText;

		[Token(Token = "0x400282B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI upgradePriceText;

		[Token(Token = "0x400282D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEngine.UI.Image imageNow;

		[Token(Token = "0x400282E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEngine.UI.Image imageUpgrade;

		[Token(Token = "0x400282F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Button upgradeButton;

		[Token(Token = "0x4002830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI purchaseText;

		[Token(Token = "0x4002831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshProUGUI oldPriceText;

		[Token(Token = "0x4002832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Single Item Panel")]
		public Transform SingleItemPanel;

		[Token(Token = "0x4002833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public TextMeshProUGUI typeSingleText;

		[Token(Token = "0x4002834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshProUGUI nameSingleText;

		[Token(Token = "0x4002835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TextMeshProUGUI specsSingleText;

		[Token(Token = "0x4002836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public TextMeshProUGUI priceSingleText;

		[Token(Token = "0x4002837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UnityEngine.UI.Image imageSingle;

		[Token(Token = "0x4002838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UnityEngine.UI.Image imageSingleCompany;

		[Token(Token = "0x4002839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Button upgradeSingleButton;

		[Token(Token = "0x400283A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public TextMeshProUGUI purchaseSingleText;

		[Token(Token = "0x400283B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioClip purchaseClip;

		[Token(Token = "0x400283C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioClip upgradeClip;

		[Token(Token = "0x400283D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Header("Upgrade Settings")]
		public OtherUpgradePathScriptableObject.UpgradeType upgradeType;

		[Token(Token = "0x400283E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public int upgradeTier;

		[Token(Token = "0x400283F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private bool cosmeticCard;

		[Token(Token = "0x4002840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public BuyableCosmeticItemScriptableObject.CosmeticItem cosmeticItem;

		[Token(Token = "0x4002841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[Header("Localize Components")]
		private Localize localizeSingleUpgradeBtn;

		[Token(Token = "0x4002842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Localize localizeMultiUpgradeBtn;

		[Token(Token = "0x4002843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private Localize locSingleType;

		[Token(Token = "0x4002844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private Localize locSingleName;

		[Token(Token = "0x4002845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private Localize locSingleSpecs;

		[Token(Token = "0x4002846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private Localize locMultiType;

		[Token(Token = "0x4002847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private Localize locMultiNameNow;

		[Token(Token = "0x4002848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private Localize locMultiNameUpgrade;

		[Token(Token = "0x4002849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private Localize locMultiSpecsNow;

		[Token(Token = "0x400284A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private Localize locMultiSpecsUpgrade;

		[Token(Token = "0x400284B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private UpgradeableOtherCardData cardData;

		[Token(Token = "0x400284C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private int upgradePrice;

		[Token(Token = "0x17000517")]
		public UpgradeableOtherCardData Card
		{
			[Token(Token = "0x6002E09")]
			[Address(RVA = "0x12E010C", Offset = "0x12E010C", VA = "0x12E010C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E0A")]
			[Address(RVA = "0x12E0114", Offset = "0x12E0114", VA = "0x12E0114")]
			set
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6002E07")]
			[Address(RVA = "0x12DFFD4", Offset = "0x12DFFD4", VA = "0x12DFFD4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002E08")]
			[Address(RVA = "0x12E0070", Offset = "0x12E0070", VA = "0x12E0070")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002E0B")]
		[Address(RVA = "0x12E0E20", Offset = "0x12E0E20", VA = "0x12E0E20")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002E0C")]
		[Address(RVA = "0x12E0F7C", Offset = "0x12E0F7C", VA = "0x12E0F7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E0D")]
		[Address(RVA = "0x12E1060", Offset = "0x12E1060", VA = "0x12E1060")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002E0E")]
		[Address(RVA = "0x12E12B4", Offset = "0x12E12B4", VA = "0x12E12B4")]
		private void UpgradeTool()
		{
		}

		[Token(Token = "0x6002E0F")]
		[Address(RVA = "0x12E179C", Offset = "0x12E179C", VA = "0x12E179C")]
		private void MoneyAmountChaged(int arg0)
		{
		}

		[Token(Token = "0x6002E10")]
		[Address(RVA = "0x12E098C", Offset = "0x12E098C", VA = "0x12E098C")]
		public void CheckCanBuy()
		{
		}

		[Token(Token = "0x6002E11")]
		[Address(RVA = "0x12E17A0", Offset = "0x12E17A0", VA = "0x12E17A0")]
		public UpgradeableOtherCardItem()
		{
		}
	}
	[Token(Token = "0x20006A3")]
	public class UpgradeableOtherCardListManager : MonoBehaviour
	{
		[Token(Token = "0x400284D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x400284E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x400284F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool environmentList;

		[Token(Token = "0x4002850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool cosmeticList;

		[Token(Token = "0x4002851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<UpgradeableOtherCardItem> cardItems;

		[Token(Token = "0x4002852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public UpgradeableOtherCardData selectedCard;

		[Token(Token = "0x4002853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public OtherUpgradePathScriptableObject[] itemUpgradePathScriptableObjects;

		[Token(Token = "0x4002854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public bool autoPopulate;

		[Token(Token = "0x4002855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool populated;

		[Token(Token = "0x6002E16")]
		[Address(RVA = "0x12E1924", Offset = "0x12E1924", VA = "0x12E1924", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6002E17")]
		[Address(RVA = "0x12E2394", Offset = "0x12E2394", VA = "0x12E2394")]
		private void RepopulateList(OtherUpgradePathScriptableObject.UpgradeType upgradeType)
		{
		}

		[Token(Token = "0x6002E18")]
		[Address(RVA = "0x12E239C", Offset = "0x12E239C", VA = "0x12E239C")]
		private void RepopulateListWithOuthArg()
		{
		}

		[Token(Token = "0x6002E19")]
		[Address(RVA = "0x12E2398", Offset = "0x12E2398", VA = "0x12E2398")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002E1A")]
		[Address(RVA = "0x12E1ADC", Offset = "0x12E1ADC", VA = "0x12E1ADC")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6002E1B")]
		[Address(RVA = "0x12E23A0", Offset = "0x12E23A0", VA = "0x12E23A0", Slot = "5")]
		public virtual UpgradeableOtherCardItem AddCardItem(UpgradeableOtherCardData card, int index)
		{
			return null;
		}

		[Token(Token = "0x6002E1C")]
		[Address(RVA = "0x12E26B4", Offset = "0x12E26B4", VA = "0x12E26B4")]
		public void CheckAllCanBuy()
		{
		}

		[Token(Token = "0x6002E1D")]
		[Address(RVA = "0x12E273C", Offset = "0x12E273C", VA = "0x12E273C")]
		public UpgradeableOtherCardListManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006A4")]
	public class UpgradeableToolCardData
	{
		[Token(Token = "0x4002856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LocalizedString name;

		[Token(Token = "0x4002857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LocalizedString nameNow;

		[Token(Token = "0x4002858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LocalizedString nameUpgrade;

		[Token(Token = "0x4002859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LocalizedString specsNow;

		[Token(Token = "0x400285A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LocalizedString specsUpgrade;

		[Token(Token = "0x400285B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int upgradePrice;

		[Token(Token = "0x400285C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int oldPrice;

		[Token(Token = "0x400285D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Sprite imageNow;

		[Token(Token = "0x400285E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Sprite imageUpgrade;

		[Token(Token = "0x400285F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool noMoreUpgrades;

		[Token(Token = "0x4002860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool firstUpgrade;

		[Token(Token = "0x4002861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Tool.ToolType upgradeType;

		[Token(Token = "0x4002862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int toolUpgradeTier;

		[Token(Token = "0x4002863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public ToolUpgradePathScriptableObject.CompanyType company;

		[Token(Token = "0x6002E1E")]
		[Address(RVA = "0x12E27CC", Offset = "0x12E27CC", VA = "0x12E27CC")]
		public UpgradeableToolCardData()
		{
		}
	}
	[Token(Token = "0x20006A5")]
	public class UpgradeableToolCardItem : MonoBehaviour
	{
		[Token(Token = "0x20006A6")]
		public delegate void OnCardClickedHandler(UpgradeableToolCardData card);

		[Token(Token = "0x4002864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Image background;

		[Token(Token = "0x4002865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite bgHighlight;

		[Token(Token = "0x4002866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite bgRegular;

		[Token(Token = "0x4002867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Multi Item Panel")]
		public Transform MultiItemPanel;

		[Token(Token = "0x4002868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI typeText;

		[Token(Token = "0x4002869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI nameNowText;

		[Token(Token = "0x400286A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI nameUpgradeText;

		[Token(Token = "0x400286B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI specsNowText;

		[Token(Token = "0x400286C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI specsUpgradeText;

		[Token(Token = "0x400286D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI upgradePriceText;

		[Token(Token = "0x400286E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI oldPriceText;

		[Token(Token = "0x400286F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshProUGUI purchaseText;

		[Token(Token = "0x4002871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.UI.Image imageNow;

		[Token(Token = "0x4002872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEngine.UI.Image imageUpgrade;

		[Token(Token = "0x4002873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEngine.UI.Image imageCompany;

		[Token(Token = "0x4002874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Button upgradeButton;

		[Token(Token = "0x4002875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Single Item Panel")]
		public Transform SingleItemPanel;

		[Token(Token = "0x4002876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshProUGUI typeSingleText;

		[Token(Token = "0x4002877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TextMeshProUGUI nameSingleText;

		[Token(Token = "0x4002878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public TextMeshProUGUI specsSingleText;

		[Token(Token = "0x4002879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public TextMeshProUGUI priceSingleText;

		[Token(Token = "0x400287A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public TextMeshProUGUI purchaseSingleText;

		[Token(Token = "0x400287B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public UnityEngine.UI.Image imageSingle;

		[Token(Token = "0x400287C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public UnityEngine.UI.Image imageSingleCompany;

		[Token(Token = "0x400287D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Button upgradeSingleButton;

		[Token(Token = "0x400287E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioClip purchaseClip;

		[Token(Token = "0x400287F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public AudioClip upgradeClip;

		[Token(Token = "0x4002880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Header("Localize Components")]
		[SerializeField]
		private Localize locSingleTitleText;

		[Token(Token = "0x4002881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private Localize locSingleSpecsText;

		[Token(Token = "0x4002882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Localize locSingleProductNameText;

		[Token(Token = "0x4002883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private Localize locSingleUpgradeBtn;

		[Token(Token = "0x4002884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private Localize locMultiTitleText;

		[Token(Token = "0x4002885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private Localize locMultiCurrentProductNameText;

		[Token(Token = "0x4002886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private Localize locMultiSpecsNowText;

		[Token(Token = "0x4002887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private Localize locMultiNextProductNameText;

		[Token(Token = "0x4002888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private Localize locMultiSpecsUpgradeText;

		[Token(Token = "0x4002889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private Localize locMultiUpgradeBtn;

		[Token(Token = "0x400288A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Tool.ToolType upgradeType;

		[Token(Token = "0x400288B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private int toolUpgradeTier;

		[Token(Token = "0x400288C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private UpgradeableToolCardData cardData;

		[Token(Token = "0x400288D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private int upgradePrice;

		[Token(Token = "0x17000518")]
		public UpgradeableToolCardData Card
		{
			[Token(Token = "0x6002E21")]
			[Address(RVA = "0x12E290C", Offset = "0x12E290C", VA = "0x12E290C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E22")]
			[Address(RVA = "0x12E2914", Offset = "0x12E2914", VA = "0x12E2914")]
			set
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6002E1F")]
			[Address(RVA = "0x12E27D4", Offset = "0x12E27D4", VA = "0x12E27D4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002E20")]
			[Address(RVA = "0x12E2870", Offset = "0x12E2870", VA = "0x12E2870")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002E23")]
		[Address(RVA = "0x12E329C", Offset = "0x12E329C", VA = "0x12E329C")]
		public void Start()
		{
		}

		[Token(Token = "0x6002E24")]
		[Address(RVA = "0x12E349C", Offset = "0x12E349C", VA = "0x12E349C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002E25")]
		[Address(RVA = "0x12E36F0", Offset = "0x12E36F0", VA = "0x12E36F0")]
		private void UpgradeTool()
		{
		}

		[Token(Token = "0x6002E26")]
		[Address(RVA = "0x12E3AA4", Offset = "0x12E3AA4", VA = "0x12E3AA4")]
		private void MoneyAmountChaged(int arg0)
		{
		}

		[Token(Token = "0x6002E27")]
		[Address(RVA = "0x12E3AA8", Offset = "0x12E3AA8", VA = "0x12E3AA8")]
		public void UpdateBuyPrice(int newPrice)
		{
		}

		[Token(Token = "0x6002E28")]
		[Address(RVA = "0x12E3020", Offset = "0x12E3020", VA = "0x12E3020")]
		public void CheckCanBuy()
		{
		}

		[Token(Token = "0x6002E29")]
		[Address(RVA = "0x12E3C44", Offset = "0x12E3C44", VA = "0x12E3C44")]
		public void ToggleUpgradeButton(bool active)
		{
		}

		[Token(Token = "0x6002E2A")]
		[Address(RVA = "0x12E3CB0", Offset = "0x12E3CB0", VA = "0x12E3CB0")]
		public bool CanAfford()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E2B")]
		[Address(RVA = "0x12E3D50", Offset = "0x12E3D50", VA = "0x12E3D50")]
		public UpgradeableToolCardItem()
		{
		}
	}
	[Token(Token = "0x20006A7")]
	public class UpgradeableToolCardListManager : MonoBehaviour
	{
		[Token(Token = "0x400288E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x400288F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x4002890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<UpgradeableToolCardItem> cardItems;

		[Token(Token = "0x4002891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public UpgradeableToolCardData selectedCard;

		[Token(Token = "0x4002892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ToolUpgradePathScriptableObject[] itemUpgradePathScriptableObjects;

		[Token(Token = "0x4002893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool autoPopulate;

		[Token(Token = "0x4002894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onRepopulateList;

		[Token(Token = "0x4002895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool populated;

		[Token(Token = "0x6002E30")]
		[Address(RVA = "0x12E3ED4", Offset = "0x12E3ED4", VA = "0x12E3ED4", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6002E31")]
		[Address(RVA = "0x12E4650", Offset = "0x12E4650", VA = "0x12E4650")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002E32")]
		[Address(RVA = "0x12E47A0", Offset = "0x12E47A0", VA = "0x12E47A0")]
		private void RepopulateList(Tool.ToolType toolType)
		{
		}

		[Token(Token = "0x6002E33")]
		[Address(RVA = "0x12E47C8", Offset = "0x12E47C8", VA = "0x12E47C8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002E34")]
		[Address(RVA = "0x12E3FD4", Offset = "0x12E3FD4", VA = "0x12E3FD4")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6002E35")]
		[Address(RVA = "0x12E47CC", Offset = "0x12E47CC", VA = "0x12E47CC", Slot = "5")]
		public virtual UpgradeableToolCardItem AddCardItem(UpgradeableToolCardData card, int index)
		{
			return null;
		}

		[Token(Token = "0x6002E36")]
		[Address(RVA = "0x12E4A28", Offset = "0x12E4A28", VA = "0x12E4A28")]
		public GameObject UpdateToolBuyPrice(Tool.ToolType toolType, int newPrice)
		{
			return null;
		}

		[Token(Token = "0x6002E37")]
		[Address(RVA = "0x12E4B4C", Offset = "0x12E4B4C", VA = "0x12E4B4C")]
		public void HideAllOtherThan(Tool.ToolType toolType)
		{
		}

		[Token(Token = "0x6002E38")]
		[Address(RVA = "0x12E4C20", Offset = "0x12E4C20", VA = "0x12E4C20")]
		public void ShowAll()
		{
		}

		[Token(Token = "0x6002E39")]
		[Address(RVA = "0x12E4CBC", Offset = "0x12E4CBC", VA = "0x12E4CBC")]
		public List<UpgradeableToolCardItem> GetCardItems()
		{
			return null;
		}

		[Token(Token = "0x6002E3A")]
		[Address(RVA = "0x12E4CC4", Offset = "0x12E4CC4", VA = "0x12E4CC4")]
		public void CheckAllCanBuy()
		{
		}

		[Token(Token = "0x6002E3B")]
		[Address(RVA = "0x12E4D4C", Offset = "0x12E4D4C", VA = "0x12E4D4C")]
		public bool CanAffordSomething()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3C")]
		[Address(RVA = "0x12E4DE4", Offset = "0x12E4DE4", VA = "0x12E4DE4")]
		public UpgradeableToolCardListManager()
		{
		}
	}
	[Token(Token = "0x20006A8")]
	public class InGameUIAssets : MonoBehaviour
	{
		[Token(Token = "0x4002896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sprite DaltonTradingCompany;

		[Token(Token = "0x4002897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite ACME;

		[Token(Token = "0x4002898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite MTC;

		[Token(Token = "0x4002899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Sprite EDEL;

		[Token(Token = "0x400289A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sprite Chernatom;

		[Token(Token = "0x400289B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Sprite FoulRaven;

		[Token(Token = "0x6002E3D")]
		[Address(RVA = "0x12E086C", Offset = "0x12E086C", VA = "0x12E086C")]
		public Sprite CompanyToSprite(ToolUpgradePathScriptableObject.CompanyType company)
		{
			return null;
		}

		[Token(Token = "0x6002E3E")]
		[Address(RVA = "0x12E4EBC", Offset = "0x12E4EBC", VA = "0x12E4EBC")]
		public InGameUIAssets()
		{
		}
	}
	[Token(Token = "0x20006A9")]
	[RequireComponent(typeof(Scrollbar))]
	public class InvokeScrollbarOnStart : MonoBehaviour
	{
		[Token(Token = "0x400289C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Scrollbar scrollBar;

		[Token(Token = "0x6002E3F")]
		[Address(RVA = "0x12E4EC4", Offset = "0x12E4EC4", VA = "0x12E4EC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002E40")]
		[Address(RVA = "0x12E4F2C", Offset = "0x12E4F2C", VA = "0x12E4F2C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002E41")]
		[Address(RVA = "0x12E5010", Offset = "0x12E5010", VA = "0x12E5010")]
		public InvokeScrollbarOnStart()
		{
		}
	}
	[Token(Token = "0x20006AA")]
	public class MoneyAmountText : MonoBehaviour
	{
		[Token(Token = "0x400289D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI[] numberTexts;

		[Token(Token = "0x6002E42")]
		[Address(RVA = "0x12E5018", Offset = "0x12E5018", VA = "0x12E5018")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002E43")]
		[Address(RVA = "0x12E516C", Offset = "0x12E516C", VA = "0x12E516C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E44")]
		[Address(RVA = "0x12E5474", Offset = "0x12E5474", VA = "0x12E5474")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002E45")]
		[Address(RVA = "0x12E5270", Offset = "0x12E5270", VA = "0x12E5270")]
		public void ChangeMoneyAmount(int newAmount)
		{
		}

		[Token(Token = "0x6002E46")]
		[Address(RVA = "0x12E555C", Offset = "0x12E555C", VA = "0x12E555C")]
		public MoneyAmountText()
		{
		}
	}
	[Token(Token = "0x20006AB")]
	public class PictureScrollerUI : MonoBehaviour
	{
		[Token(Token = "0x400289E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Sprite[] pages;

		[Token(Token = "0x400289F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected int curPage;

		[Token(Token = "0x40028A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected int maxPage;

		[Token(Token = "0x40028A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TextMeshProUGUI curPageText;

		[Token(Token = "0x40028A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected UnityEngine.UI.Image pageImage;

		[Token(Token = "0x40028A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected Button leftButton;

		[Token(Token = "0x40028A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected Button rightButton;

		[Token(Token = "0x6002E47")]
		[Address(RVA = "0x12E5564", Offset = "0x12E5564", VA = "0x12E5564", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6002E48")]
		[Address(RVA = "0x12E564C", Offset = "0x12E564C", VA = "0x12E564C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E49")]
		[Address(RVA = "0x12E573C", Offset = "0x12E573C", VA = "0x12E573C")]
		private void DataLoaded()
		{
		}

		[Token(Token = "0x6002E4A")]
		[Address(RVA = "0x12E5764", Offset = "0x12E5764", VA = "0x12E5764", Slot = "5")]
		protected virtual void Next()
		{
		}

		[Token(Token = "0x6002E4B")]
		[Address(RVA = "0x12E57A0", Offset = "0x12E57A0", VA = "0x12E57A0", Slot = "6")]
		protected virtual void Previous()
		{
		}

		[Token(Token = "0x6002E4C")]
		[Address(RVA = "0x12E57E4", Offset = "0x12E57E4", VA = "0x12E57E4", Slot = "7")]
		public virtual void OpenPage(int pageNum)
		{
		}

		[Token(Token = "0x6002E4D")]
		[Address(RVA = "0x12E5810", Offset = "0x12E5810", VA = "0x12E5810", Slot = "8")]
		protected virtual void ButtonLogic()
		{
		}

		[Token(Token = "0x6002E4E")]
		[Address(RVA = "0x12E5864", Offset = "0x12E5864", VA = "0x12E5864", Slot = "9")]
		protected virtual void UpdateImage()
		{
		}

		[Token(Token = "0x6002E4F")]
		[Address(RVA = "0x12E5980", Offset = "0x12E5980", VA = "0x12E5980")]
		public PictureScrollerUI()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime
{
	[Token(Token = "0x20006AC")]
	[AddComponentMenu("Behavior Designer/Behavior Tree")]
	public class BehaviorTree : Behavior
	{
		[Token(Token = "0x6002E50")]
		[Address(RVA = "0x12E5988", Offset = "0x12E5988", VA = "0x12E5988")]
		public BehaviorTree()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006AD")]
	public class ExternalBehaviorTree : ExternalBehavior
	{
		[Token(Token = "0x6002E51")]
		[Address(RVA = "0x12E5990", Offset = "0x12E5990", VA = "0x12E5990")]
		public ExternalBehaviorTree()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006AE")]
	public class SharedAnimationCurve : SharedVariable<AnimationCurve>
	{
		[Token(Token = "0x6002E52")]
		[Address(RVA = "0x12E5998", Offset = "0x12E5998", VA = "0x12E5998")]
		public static implicit operator SharedAnimationCurve(AnimationCurve value)
		{
			return null;
		}

		[Token(Token = "0x6002E53")]
		[Address(RVA = "0x12E5A04", Offset = "0x12E5A04", VA = "0x12E5A04")]
		public SharedAnimationCurve()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006AF")]
	public class SharedBehaviour : SharedVariable<Behaviour>
	{
		[Token(Token = "0x6002E54")]
		[Address(RVA = "0x12E5A4C", Offset = "0x12E5A4C", VA = "0x12E5A4C")]
		public static explicit operator SharedBehaviour(Behaviour value)
		{
			return null;
		}

		[Token(Token = "0x6002E55")]
		[Address(RVA = "0x12E5AB8", Offset = "0x12E5AB8", VA = "0x12E5AB8")]
		public SharedBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B0")]
	public class SharedBool : SharedVariable<bool>
	{
		[Token(Token = "0x6002E56")]
		[Address(RVA = "0x12E5B00", Offset = "0x12E5B00", VA = "0x12E5B00")]
		public static implicit operator SharedBool(bool value)
		{
			return null;
		}

		[Token(Token = "0x6002E57")]
		[Address(RVA = "0x12E5B64", Offset = "0x12E5B64", VA = "0x12E5B64")]
		public SharedBool()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B1")]
	public class SharedCollider : SharedVariable<Collider>
	{
		[Token(Token = "0x6002E58")]
		[Address(RVA = "0x12E5BAC", Offset = "0x12E5BAC", VA = "0x12E5BAC")]
		public static implicit operator SharedCollider(Collider value)
		{
			return null;
		}

		[Token(Token = "0x6002E59")]
		[Address(RVA = "0x12E5C18", Offset = "0x12E5C18", VA = "0x12E5C18")]
		public SharedCollider()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B2")]
	public class SharedColor : SharedVariable<UnityEngine.Color>
	{
		[Token(Token = "0x6002E5A")]
		[Address(RVA = "0x12E5C60", Offset = "0x12E5C60", VA = "0x12E5C60")]
		public static implicit operator SharedColor(UnityEngine.Color value)
		{
			return null;
		}

		[Token(Token = "0x6002E5B")]
		[Address(RVA = "0x12E5CE0", Offset = "0x12E5CE0", VA = "0x12E5CE0")]
		public SharedColor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B3")]
	public class SharedFloat : SharedVariable<float>
	{
		[Token(Token = "0x6002E5C")]
		[Address(RVA = "0x12E5D28", Offset = "0x12E5D28", VA = "0x12E5D28")]
		public static implicit operator SharedFloat(float value)
		{
			return null;
		}

		[Token(Token = "0x6002E5D")]
		[Address(RVA = "0x12E5DB0", Offset = "0x12E5DB0", VA = "0x12E5DB0")]
		public SharedFloat()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B4")]
	public class SharedGameObject : SharedVariable<GameObject>
	{
		[Token(Token = "0x6002E5E")]
		[Address(RVA = "0x12E5DF8", Offset = "0x12E5DF8", VA = "0x12E5DF8")]
		public static implicit operator SharedGameObject(GameObject value)
		{
			return null;
		}

		[Token(Token = "0x6002E5F")]
		[Address(RVA = "0x12E5E64", Offset = "0x12E5E64", VA = "0x12E5E64")]
		public SharedGameObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B5")]
	public class SharedGameObjectList : SharedVariable<List<GameObject>>
	{
		[Token(Token = "0x6002E60")]
		[Address(RVA = "0x12E5EAC", Offset = "0x12E5EAC", VA = "0x12E5EAC")]
		public static implicit operator SharedGameObjectList(List<GameObject> value)
		{
			return null;
		}

		[Token(Token = "0x6002E61")]
		[Address(RVA = "0x12E5F18", Offset = "0x12E5F18", VA = "0x12E5F18")]
		public SharedGameObjectList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B6")]
	public class SharedInt : SharedVariable<int>
	{
		[Token(Token = "0x6002E62")]
		[Address(RVA = "0x12E5F60", Offset = "0x12E5F60", VA = "0x12E5F60")]
		public static implicit operator SharedInt(int value)
		{
			return null;
		}

		[Token(Token = "0x6002E63")]
		[Address(RVA = "0x12E5FC0", Offset = "0x12E5FC0", VA = "0x12E5FC0")]
		public SharedInt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B7")]
	public class SharedLayerMask : SharedVariable<LayerMask>
	{
		[Token(Token = "0x6002E64")]
		[Address(RVA = "0x12E6008", Offset = "0x12E6008", VA = "0x12E6008")]
		public static implicit operator SharedLayerMask(LayerMask value)
		{
			return null;
		}

		[Token(Token = "0x6002E65")]
		[Address(RVA = "0x12E6088", Offset = "0x12E6088", VA = "0x12E6088")]
		public SharedLayerMask()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B8")]
	public class SharedMaterial : SharedVariable<Material>
	{
		[Token(Token = "0x6002E66")]
		[Address(RVA = "0x12E60D0", Offset = "0x12E60D0", VA = "0x12E60D0")]
		public static implicit operator SharedMaterial(Material value)
		{
			return null;
		}

		[Token(Token = "0x6002E67")]
		[Address(RVA = "0x12E613C", Offset = "0x12E613C", VA = "0x12E613C")]
		public SharedMaterial()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B9")]
	public class SharedObject : SharedVariable<UnityEngine.Object>
	{
		[Token(Token = "0x6002E68")]
		[Address(RVA = "0x12E6184", Offset = "0x12E6184", VA = "0x12E6184")]
		public static explicit operator SharedObject(UnityEngine.Object value)
		{
			return null;
		}

		[Token(Token = "0x6002E69")]
		[Address(RVA = "0x12E61F0", Offset = "0x12E61F0", VA = "0x12E61F0")]
		public SharedObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006BA")]
	public class SharedObjectList : SharedVariable<List<UnityEngine.Object>>
	{
		[Token(Token = "0x6002E6A")]
		[Address(RVA = "0x12E6238", Offset = "0x12E6238", VA = "0x12E6238")]
		public static implicit operator SharedObjectList(List<UnityEngine.Object> value)
		{
			return null;
		}

		[Token(Token = "0x6002E6B")]
		[Address(RVA = "0x12E62A4", Offset = "0x12E62A4", VA = "0x12E62A4")]
		public SharedObjectList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006BB")]
	public class SharedQuaternion : SharedVariable<Quaternion>
	{
		[Token(Token = "0x6002E6C")]
		[Address(RVA = "0x12E62EC", Offset = "0x12E62EC", VA = "0x12E62EC")]
		public static implicit operator SharedQuaternion(Quaternion value)
		{
			return null;
		}

		[Token(Token = "0x6002E6D")]
		[Address(RVA = "0x12E636C", Offset = "0x12E636C", VA = "0x12E636C")]
		public SharedQuaternion()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006BC")]
	public class SharedRect : SharedVariable<Rect>
	{
		[Token(Token = "0x6002E6E")]
		[Address(RVA = "0x12E63B4", Offset = "0x12E63B4", VA = "0x12E63B4")]
		public static implicit operator SharedRect(Rect value)
		{
			return null;
		}

		[Token(Token = "0x6002E6F")]
		[Address(RVA = "0x12E6434", Offset = "0x12E6434", VA = "0x12E6434")]
		public SharedRect()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006BD")]
	public class SharedString : SharedVariable<string>
	{
		[Token(Token = "0x6002E70")]
		[Address(RVA = "0x12E647C", Offset = "0x12E647C", VA = "0x12E647C")]
		public static implicit operator SharedString(string value)
		{
			return null;
		}

		[Token(Token = "0x6002E71")]
		[Address(RVA = "0x12E64E8", Offset = "0x12E64E8", VA = "0x12E64E8")]
		public SharedString()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006BE")]
	public class SharedTransform : SharedVariable<Transform>
	{
		[Token(Token = "0x6002E72")]
		[Address(RVA = "0x12E6530", Offset = "0x12E6530", VA = "0x12E6530")]
		public static implicit operator SharedTransform(Transform value)
		{
			return null;
		}

		[Token(Token = "0x6002E73")]
		[Address(RVA = "0x12E659C", Offset = "0x12E659C", VA = "0x12E659C")]
		public SharedTransform()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006BF")]
	public class SharedTransformList : SharedVariable<List<Transform>>
	{
		[Token(Token = "0x6002E74")]
		[Address(RVA = "0x12E65E4", Offset = "0x12E65E4", VA = "0x12E65E4")]
		public static implicit operator SharedTransformList(List<Transform> value)
		{
			return null;
		}

		[Token(Token = "0x6002E75")]
		[Address(RVA = "0x12E6650", Offset = "0x12E6650", VA = "0x12E6650")]
		public SharedTransformList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006C0")]
	public class SharedUInt : SharedVariable<uint>
	{
		[Token(Token = "0x6002E76")]
		[Address(RVA = "0x12E6698", Offset = "0x12E6698", VA = "0x12E6698")]
		public static implicit operator SharedUInt(uint value)
		{
			return null;
		}

		[Token(Token = "0x6002E77")]
		[Address(RVA = "0x12E66F8", Offset = "0x12E66F8", VA = "0x12E66F8")]
		public SharedUInt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006C1")]
	public class SharedVector2 : SharedVariable<Vector2>
	{
		[Token(Token = "0x6002E78")]
		[Address(RVA = "0x12E6740", Offset = "0x12E6740", VA = "0x12E6740")]
		public static implicit operator SharedVector2(Vector2 value)
		{
			return null;
		}

		[Token(Token = "0x6002E79")]
		[Address(RVA = "0x12E67AC", Offset = "0x12E67AC", VA = "0x12E67AC")]
		public SharedVector2()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006C2")]
	public class SharedVector2Int : SharedVariable<Vector2Int>
	{
		[Token(Token = "0x6002E7A")]
		[Address(RVA = "0x12E67F4", Offset = "0x12E67F4", VA = "0x12E67F4")]
		public static implicit operator SharedVector2Int(Vector2Int value)
		{
			return null;
		}

		[Token(Token = "0x6002E7B")]
		[Address(RVA = "0x12E6854", Offset = "0x12E6854", VA = "0x12E6854")]
		public SharedVector2Int()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006C3")]
	public class SharedVector3 : SharedVariable<Vector3>
	{
		[Token(Token = "0x6002E7C")]
		[Address(RVA = "0x12E689C", Offset = "0x12E689C", VA = "0x12E689C")]
		public static implicit operator SharedVector3(Vector3 value)
		{
			return null;
		}

		[Token(Token = "0x6002E7D")]
		[Address(RVA = "0x12E6918", Offset = "0x12E6918", VA = "0x12E6918")]
		public SharedVector3()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006C4")]
	public class SharedVector3Int : SharedVariable<Vector3Int>
	{
		[Token(Token = "0x6002E7E")]
		[Address(RVA = "0x12E6960", Offset = "0x12E6960", VA = "0x12E6960")]
		public static implicit operator SharedVector3Int(Vector3Int value)
		{
			return null;
		}

		[Token(Token = "0x6002E7F")]
		[Address(RVA = "0x12E69D0", Offset = "0x12E69D0", VA = "0x12E69D0")]
		public SharedVector3Int()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006C5")]
	public class SharedVector4 : SharedVariable<Vector4>
	{
		[Token(Token = "0x6002E80")]
		[Address(RVA = "0x12E6A18", Offset = "0x12E6A18", VA = "0x12E6A18")]
		public static implicit operator SharedVector4(Vector4 value)
		{
			return null;
		}

		[Token(Token = "0x6002E81")]
		[Address(RVA = "0x12E6A98", Offset = "0x12E6A98", VA = "0x12E6A98")]
		public SharedVector4()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.ObjectDrawers
{
	[Token(Token = "0x20006C6")]
	public class FloatSliderAttribute : ObjectDrawerAttribute
	{
		[Token(Token = "0x40028A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float min;

		[Token(Token = "0x40028A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float max;

		[Token(Token = "0x6002E82")]
		[Address(RVA = "0x12E6AE0", Offset = "0x12E6AE0", VA = "0x12E6AE0")]
		public FloatSliderAttribute(float min, float max)
		{
		}
	}
	[Token(Token = "0x20006C7")]
	public class IntSliderAttribute : ObjectDrawerAttribute
	{
		[Token(Token = "0x40028A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int min;

		[Token(Token = "0x40028A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int max;

		[Token(Token = "0x6002E83")]
		[Address(RVA = "0x12E6B0C", Offset = "0x12E6B0C", VA = "0x12E6B0C")]
		public IntSliderAttribute(int min, int max)
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks
{
	[Token(Token = "0x20006C8")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer/external-behavior-trees/")]
	[TaskIcon("BehaviorTreeReferenceIcon.png")]
	[TaskDescription("Behavior Tree Reference allows you to run another behavior tree within the current behavior tree.")]
	public class BehaviorTreeReference : BehaviorReference
	{
		[Token(Token = "0x6002E84")]
		[Address(RVA = "0x12E6B38", Offset = "0x12E6B38", VA = "0x12E6B38")]
		public BehaviorTreeReference()
		{
		}
	}
	[Token(Token = "0x20006C9")]
	[TaskDescription("Returns a TaskStatus of running. Will only stop when interrupted or a conditional abort is triggered.")]
	[TaskIcon("{SkinColor}IdleIcon.png")]
	public class Idle : Action
	{
		[Token(Token = "0x6002E85")]
		[Address(RVA = "0x12E6B40", Offset = "0x12E6B40", VA = "0x12E6B40", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002E86")]
		[Address(RVA = "0x12E6B48", Offset = "0x12E6B48", VA = "0x12E6B48")]
		public Idle()
		{
		}
	}
	[Token(Token = "0x20006CA")]
	[TaskIcon("{SkinColor}LogIcon.png")]
	[TaskDescription("Log is a simple task which will output the specified text and return success. It can be used for debugging.")]
	public class Log : Action
	{
		[Token(Token = "0x40028A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Text to output to the log")]
		public SharedString text;

		[Token(Token = "0x40028AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Is this text an error?")]
		public SharedBool logError;

		[Token(Token = "0x40028AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should the time be included in the log message?")]
		public SharedBool logTime;

		[Token(Token = "0x6002E87")]
		[Address(RVA = "0x12E6B50", Offset = "0x12E6B50", VA = "0x12E6B50", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002E88")]
		[Address(RVA = "0x12E6CD4", Offset = "0x12E6CD4", VA = "0x12E6CD4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002E89")]
		[Address(RVA = "0x12E6D58", Offset = "0x12E6D58", VA = "0x12E6D58")]
		public Log()
		{
		}
	}
	[Token(Token = "0x20006CB")]
	[TaskIcon("{SkinColor}PerformInterruptionIcon.png")]
	[TaskDescription("Perform the actual interruption. This will immediately stop the specified tasks from running and will return success or failure depending on the value of interrupt success.")]
	public class PerformInterruption : Action
	{
		[Token(Token = "0x40028AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The list of tasks to interrupt. Can be any number of tasks")]
		public Interrupt[] interruptTasks;

		[Token(Token = "0x40028AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("When we interrupt the task should we return a task status of success?")]
		public SharedBool interruptSuccess;

		[Token(Token = "0x6002E8A")]
		[Address(RVA = "0x12E6D60", Offset = "0x12E6D60", VA = "0x12E6D60", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002E8B")]
		[Address(RVA = "0x12E6E94", Offset = "0x12E6E94", VA = "0x12E6E94", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002E8C")]
		[Address(RVA = "0x12E6EC4", Offset = "0x12E6EC4", VA = "0x12E6EC4")]
		public PerformInterruption()
		{
		}
	}
	[Token(Token = "0x20006CC")]
	[TaskIcon("{SkinColor}ReflectionIcon.png")]
	[TaskCategory("Reflection")]
	[TaskDescription("Gets the value from the field specified. Returns success if the field was retrieved.")]
	public class GetFieldValue : Action
	{
		[Token(Token = "0x40028AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to get the field on")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40028AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The component to get the field on")]
		public SharedString componentName;

		[Token(Token = "0x40028B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the field")]
		public SharedString fieldName;

		[Token(Token = "0x40028B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The value of the field")]
		public SharedVariable fieldValue;

		[Token(Token = "0x6002E8D")]
		[Address(RVA = "0x12E6ECC", Offset = "0x12E6ECC", VA = "0x12E6ECC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002E8E")]
		[Address(RVA = "0x12E7168", Offset = "0x12E7168", VA = "0x12E7168", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002E8F")]
		[Address(RVA = "0x12E71B0", Offset = "0x12E71B0", VA = "0x12E71B0")]
		public GetFieldValue()
		{
		}
	}
	[Token(Token = "0x20006CD")]
	[TaskCategory("Reflection")]
	[TaskDescription("Gets the value from the property specified. Returns success if the property was retrieved.")]
	[TaskIcon("{SkinColor}ReflectionIcon.png")]
	public class GetPropertyValue : Action
	{
		[Token(Token = "0x40028B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to get the property of")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40028B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The component to get the property of")]
		public SharedString componentName;

		[Token(Token = "0x40028B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the property")]
		public SharedString propertyName;

		[Token(Token = "0x40028B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The value of the property")]
		public SharedVariable propertyValue;

		[Token(Token = "0x6002E90")]
		[Address(RVA = "0x12E71B8", Offset = "0x12E71B8", VA = "0x12E71B8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002E91")]
		[Address(RVA = "0x12E7458", Offset = "0x12E7458", VA = "0x12E7458", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002E92")]
		[Address(RVA = "0x12E74A0", Offset = "0x12E74A0", VA = "0x12E74A0")]
		public GetPropertyValue()
		{
		}
	}
	[Token(Token = "0x20006CE")]
	[TaskDescription("Invokes the specified method with the specified parameters. Can optionally store the return value. Returns success if the method was invoked.")]
	[TaskCategory("Reflection")]
	[TaskIcon("{SkinColor}ReflectionIcon.png")]
	public class InvokeMethod : Action
	{
		[Token(Token = "0x40028B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to invoke the method on")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40028B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The component to invoke the method on")]
		public SharedString componentName;

		[Token(Token = "0x40028B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the method")]
		public SharedString methodName;

		[Token(Token = "0x40028B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The first parameter of the method")]
		public SharedVariable parameter1;

		[Token(Token = "0x40028BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The second parameter of the method")]
		public SharedVariable parameter2;

		[Token(Token = "0x40028BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The third parameter of the method")]
		public SharedVariable parameter3;

		[Token(Token = "0x40028BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The fourth parameter of the method")]
		public SharedVariable parameter4;

		[Token(Token = "0x40028BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store the result of the invoke call")]
		public SharedVariable storeResult;

		[Token(Token = "0x6002E93")]
		[Address(RVA = "0x12E74A8", Offset = "0x12E74A8", VA = "0x12E74A8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002E94")]
		[Address(RVA = "0x12E7A98", Offset = "0x12E7A98", VA = "0x12E7A98", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002E95")]
		[Address(RVA = "0x12E7B20", Offset = "0x12E7B20", VA = "0x12E7B20")]
		public InvokeMethod()
		{
		}
	}
	[Token(Token = "0x20006CF")]
	[TaskIcon("{SkinColor}ReflectionIcon.png")]
	[TaskDescription("Sets the field to the value specified. Returns success if the field was set.")]
	[TaskCategory("Reflection")]
	public class SetFieldValue : Action
	{
		[Token(Token = "0x40028BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to set the field on")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40028BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The component to set the field on")]
		public SharedString componentName;

		[Token(Token = "0x40028C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the field")]
		public SharedString fieldName;

		[Token(Token = "0x40028C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The value to set")]
		public SharedVariable fieldValue;

		[Token(Token = "0x6002E96")]
		[Address(RVA = "0x12E7B28", Offset = "0x12E7B28", VA = "0x12E7B28", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002E97")]
		[Address(RVA = "0x12E7DC4", Offset = "0x12E7DC4", VA = "0x12E7DC4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002E98")]
		[Address(RVA = "0x12E7E0C", Offset = "0x12E7E0C", VA = "0x12E7E0C")]
		public SetFieldValue()
		{
		}
	}
	[Token(Token = "0x20006D0")]
	[TaskDescription("Sets the property to the value specified. Returns success if the property was set.")]
	[TaskIcon("{SkinColor}ReflectionIcon.png")]
	[TaskCategory("Reflection")]
	public class SetPropertyValue : Action
	{
		[Token(Token = "0x40028C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to set the property on")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40028C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The component to set the property on")]
		public SharedString componentName;

		[Token(Token = "0x40028C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the property")]
		public SharedString propertyName;

		[Token(Token = "0x40028C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The value to set")]
		public SharedVariable propertyValue;

		[Token(Token = "0x6002E99")]
		[Address(RVA = "0x12E7E14", Offset = "0x12E7E14", VA = "0x12E7E14", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002E9A")]
		[Address(RVA = "0x12E80BC", Offset = "0x12E80BC", VA = "0x12E80BC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002E9B")]
		[Address(RVA = "0x12E8104", Offset = "0x12E8104", VA = "0x12E8104")]
		public SetPropertyValue()
		{
		}
	}
	[Token(Token = "0x20006D1")]
	[TaskIcon("{SkinColor}RestartBehaviorTreeIcon.png")]
	[TaskDescription("Restarts a behavior tree, returns success after it has been restarted.")]
	public class RestartBehaviorTree : Action
	{
		[Token(Token = "0x40028C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject of the behavior tree that should be restarted. If null use the current behavior")]
		public SharedGameObject behaviorGameObject;

		[Token(Token = "0x40028C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The group of the behavior tree that should be restarted")]
		public SharedInt group;

		[Token(Token = "0x40028C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Behavior behavior;

		[Token(Token = "0x6002E9C")]
		[Address(RVA = "0x12E810C", Offset = "0x12E810C", VA = "0x12E810C", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x6002E9D")]
		[Address(RVA = "0x12E82AC", Offset = "0x12E82AC", VA = "0x12E82AC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002E9E")]
		[Address(RVA = "0x12E8344", Offset = "0x12E8344", VA = "0x12E8344", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002E9F")]
		[Address(RVA = "0x12E8350", Offset = "0x12E8350", VA = "0x12E8350")]
		public RestartBehaviorTree()
		{
		}
	}
	[Token(Token = "0x20006D2")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer/events/")]
	[TaskDescription("Sends an event to the behavior tree, returns success after sending the event.")]
	[TaskIcon("{SkinColor}SendEventIcon.png")]
	public class SendEvent : Action
	{
		[Token(Token = "0x40028C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject of the behavior tree that should have the event sent to it. If null use the current behavior")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40028CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The event to send")]
		public SharedString eventName;

		[Token(Token = "0x40028CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The group of the behavior tree that the event should be sent to")]
		public SharedInt group;

		[Token(Token = "0x40028CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SharedRequired]
		[Tooltip("Optionally specify a first argument to send")]
		public SharedVariable argument1;

		[Token(Token = "0x40028CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optionally specify a second argument to send")]
		[SharedRequired]
		public SharedVariable argument2;

		[Token(Token = "0x40028CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optionally specify a third argument to send")]
		[SharedRequired]
		public SharedVariable argument3;

		[Token(Token = "0x40028CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BehaviorTree behaviorTree;

		[Token(Token = "0x6002EA0")]
		[Address(RVA = "0x12E8358", Offset = "0x12E8358", VA = "0x12E8358", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002EA1")]
		[Address(RVA = "0x12E84F8", Offset = "0x12E84F8", VA = "0x12E84F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002EA2")]
		[Address(RVA = "0x12E872C", Offset = "0x12E872C", VA = "0x12E872C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002EA3")]
		[Address(RVA = "0x12E8790", Offset = "0x12E8790", VA = "0x12E8790")]
		public SendEvent()
		{
		}
	}
	[Token(Token = "0x20006D3")]
	[TaskDescription("Start a new behavior tree and return success after it has been started.")]
	[TaskIcon("{SkinColor}StartBehaviorTreeIcon.png")]
	public class StartBehaviorTree : Action
	{
		[Token(Token = "0x40028D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject of the behavior tree that should be started. If null use the current behavior")]
		public SharedGameObject behaviorGameObject;

		[Token(Token = "0x40028D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The group of the behavior tree that should be started")]
		public SharedInt group;

		[Token(Token = "0x40028D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should this task wait for the behavior tree to complete?")]
		public SharedBool waitForCompletion;

		[Token(Token = "0x40028D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Should the variables be synchronized?")]
		public SharedBool synchronizeVariables;

		[Token(Token = "0x40028D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool behaviorComplete;

		[Token(Token = "0x40028D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Behavior behavior;

		[Token(Token = "0x6002EA4")]
		[Address(RVA = "0x12E8798", Offset = "0x12E8798", VA = "0x12E8798", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002EA5")]
		[Address(RVA = "0x12E8AB8", Offset = "0x12E8AB8", VA = "0x12E8AB8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002EA6")]
		[Address(RVA = "0x12E8B68", Offset = "0x12E8B68", VA = "0x12E8B68")]
		private void BehaviorEnded(Behavior behavior)
		{
		}

		[Token(Token = "0x6002EA7")]
		[Address(RVA = "0x12E8B74", Offset = "0x12E8B74", VA = "0x12E8B74", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002EA8")]
		[Address(RVA = "0x12E8C70", Offset = "0x12E8C70", VA = "0x12E8C70", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002EA9")]
		[Address(RVA = "0x12E8CD0", Offset = "0x12E8CD0", VA = "0x12E8CD0")]
		public StartBehaviorTree()
		{
		}
	}
	[Token(Token = "0x20006D4")]
	[TaskDescription("Pause or disable a behavior tree and return success after it has been stopped.")]
	[TaskIcon("{SkinColor}StopBehaviorTreeIcon.png")]
	public class StopBehaviorTree : Action
	{
		[Token(Token = "0x40028D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject of the behavior tree that should be stopped. If null use the current behavior")]
		public SharedGameObject behaviorGameObject;

		[Token(Token = "0x40028D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The group of the behavior tree that should be stopped")]
		public SharedInt group;

		[Token(Token = "0x40028D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should the behavior be paused or completely disabled")]
		public SharedBool pauseBehavior;

		[Token(Token = "0x40028D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Behavior behavior;

		[Token(Token = "0x6002EAA")]
		[Address(RVA = "0x12E8D00", Offset = "0x12E8D00", VA = "0x12E8D00", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002EAB")]
		[Address(RVA = "0x12E8EA0", Offset = "0x12E8EA0", VA = "0x12E8EA0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002EAC")]
		[Address(RVA = "0x12E8F54", Offset = "0x12E8F54", VA = "0x12E8F54", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002EAD")]
		[Address(RVA = "0x12E8F9C", Offset = "0x12E8F9C", VA = "0x12E8F9C")]
		public StopBehaviorTree()
		{
		}
	}
	[Token(Token = "0x20006D5")]
	[TaskIcon("{SkinColor}WaitIcon.png")]
	[TaskDescription("Wait a specified amount of time. The task will return running until the task is done waiting. It will return success after the wait time has elapsed.")]
	public class Wait : Action
	{
		[Token(Token = "0x40028DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The amount of time to wait")]
		public SharedFloat waitTime;

		[Token(Token = "0x40028DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Should the wait be randomized?")]
		public SharedBool randomWait;

		[Token(Token = "0x40028DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The minimum wait time if random wait is enabled")]
		public SharedFloat randomWaitMin;

		[Token(Token = "0x40028DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The maximum wait time if random wait is enabled")]
		public SharedFloat randomWaitMax;

		[Token(Token = "0x40028DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float waitDuration;

		[Token(Token = "0x40028DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float startTime;

		[Token(Token = "0x40028E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float pauseTime;

		[Token(Token = "0x6002EAE")]
		[Address(RVA = "0x12E8FCC", Offset = "0x12E8FCC", VA = "0x12E8FCC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002EAF")]
		[Address(RVA = "0x12E9098", Offset = "0x12E9098", VA = "0x12E9098", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002EB0")]
		[Address(RVA = "0x12E90CC", Offset = "0x12E90CC", VA = "0x12E90CC", Slot = "10")]
		public override void OnPause(bool paused)
		{
		}

		[Token(Token = "0x6002EB1")]
		[Address(RVA = "0x12E9114", Offset = "0x12E9114", VA = "0x12E9114", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002EB2")]
		[Address(RVA = "0x12E918C", Offset = "0x12E918C", VA = "0x12E918C")]
		public Wait()
		{
		}
	}
	[Token(Token = "0x20006D6")]
	[TaskIcon("{SkinColor}ParallelIcon.png")]
	[TaskDescription("Similar to the sequence task, the parallel task will run each child task until a child task returns failure. The difference is that the parallel task will run all of its children tasks simultaneously versus running each task one at a time. Like the sequence class, the parallel task will return success once all of its children tasks have return success. If one tasks returns failure the parallel task will end all of the child tasks and return failure.")]
	public class Parallel : Composite
	{
		[Token(Token = "0x40028E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int currentChildIndex;

		[Token(Token = "0x40028E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TaskStatus[] executionStatus;

		[Token(Token = "0x6002EB3")]
		[Address(RVA = "0x12E9210", Offset = "0x12E9210", VA = "0x12E9210", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x6002EB4")]
		[Address(RVA = "0x12E9280", Offset = "0x12E9280", VA = "0x12E9280", Slot = "39")]
		public override void OnChildStarted(int childIndex)
		{
		}

		[Token(Token = "0x6002EB5")]
		[Address(RVA = "0x12E92C0", Offset = "0x12E92C0", VA = "0x12E92C0", Slot = "31")]
		public override bool CanRunParallelChildren()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EB6")]
		[Address(RVA = "0x12E92C8", Offset = "0x12E92C8", VA = "0x12E92C8", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002EB7")]
		[Address(RVA = "0x12E92D0", Offset = "0x12E92D0", VA = "0x12E92D0", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EB8")]
		[Address(RVA = "0x12E9324", Offset = "0x12E9324", VA = "0x12E9324", Slot = "37")]
		public override void OnChildExecuted(int childIndex, TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002EB9")]
		[Address(RVA = "0x12E9354", Offset = "0x12E9354", VA = "0x12E9354", Slot = "40")]
		public override TaskStatus OverrideStatus(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002EBA")]
		[Address(RVA = "0x12E93D4", Offset = "0x12E93D4", VA = "0x12E93D4", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002EBB")]
		[Address(RVA = "0x12E9428", Offset = "0x12E9428", VA = "0x12E9428", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002EBC")]
		[Address(RVA = "0x12E947C", Offset = "0x12E947C", VA = "0x12E947C")]
		public Parallel()
		{
		}
	}
	[Token(Token = "0x20006D7")]
	[TaskIcon("{SkinColor}ParallelCompleteIcon.png")]
	[TaskDescription("Similar to the parallel selector task, except the parallel complete task will return the child status as soon as the child returns success or failure.The child tasks are executed simultaneously.")]
	public class ParallelComplete : Composite
	{
		[Token(Token = "0x40028E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int currentChildIndex;

		[Token(Token = "0x40028E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TaskStatus[] executionStatus;

		[Token(Token = "0x6002EBD")]
		[Address(RVA = "0x12E9484", Offset = "0x12E9484", VA = "0x12E9484", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x6002EBE")]
		[Address(RVA = "0x12E94F4", Offset = "0x12E94F4", VA = "0x12E94F4", Slot = "39")]
		public override void OnChildStarted(int childIndex)
		{
		}

		[Token(Token = "0x6002EBF")]
		[Address(RVA = "0x12E9534", Offset = "0x12E9534", VA = "0x12E9534", Slot = "31")]
		public override bool CanRunParallelChildren()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EC0")]
		[Address(RVA = "0x12E953C", Offset = "0x12E953C", VA = "0x12E953C", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002EC1")]
		[Address(RVA = "0x12E9544", Offset = "0x12E9544", VA = "0x12E9544", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EC2")]
		[Address(RVA = "0x12E9598", Offset = "0x12E9598", VA = "0x12E9598", Slot = "37")]
		public override void OnChildExecuted(int childIndex, TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002EC3")]
		[Address(RVA = "0x12E95C8", Offset = "0x12E95C8", VA = "0x12E95C8", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002EC4")]
		[Address(RVA = "0x12E961C", Offset = "0x12E961C", VA = "0x12E961C", Slot = "40")]
		public override TaskStatus OverrideStatus(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002EC5")]
		[Address(RVA = "0x12E9684", Offset = "0x12E9684", VA = "0x12E9684", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002EC6")]
		[Address(RVA = "0x12E96D8", Offset = "0x12E96D8", VA = "0x12E96D8")]
		public ParallelComplete()
		{
		}
	}
	[Token(Token = "0x20006D8")]
	[TaskDescription("Similar to the selector task, the parallel selector task will return success as soon as a child task returns success. The difference is that the parallel task will run all of its children tasks simultaneously versus running each task one at a time. If one tasks returns success the parallel selector task will end all of the child tasks and return success. If every child task returns failure then the parallel selector task will return failure.")]
	[TaskIcon("{SkinColor}ParallelSelectorIcon.png")]
	public class ParallelSelector : Composite
	{
		[Token(Token = "0x40028E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int currentChildIndex;

		[Token(Token = "0x40028E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TaskStatus[] executionStatus;

		[Token(Token = "0x6002EC7")]
		[Address(RVA = "0x12E96E0", Offset = "0x12E96E0", VA = "0x12E96E0", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x6002EC8")]
		[Address(RVA = "0x12E9750", Offset = "0x12E9750", VA = "0x12E9750", Slot = "39")]
		public override void OnChildStarted(int childIndex)
		{
		}

		[Token(Token = "0x6002EC9")]
		[Address(RVA = "0x12E9790", Offset = "0x12E9790", VA = "0x12E9790", Slot = "31")]
		public override bool CanRunParallelChildren()
		{
			return default(bool);
		}

		[Token(Token = "0x6002ECA")]
		[Address(RVA = "0x12E9798", Offset = "0x12E9798", VA = "0x12E9798", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002ECB")]
		[Address(RVA = "0x12E97A0", Offset = "0x12E97A0", VA = "0x12E97A0", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002ECC")]
		[Address(RVA = "0x12E97F4", Offset = "0x12E97F4", VA = "0x12E97F4", Slot = "37")]
		public override void OnChildExecuted(int childIndex, TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002ECD")]
		[Address(RVA = "0x12E9824", Offset = "0x12E9824", VA = "0x12E9824", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002ECE")]
		[Address(RVA = "0x12E9878", Offset = "0x12E9878", VA = "0x12E9878", Slot = "40")]
		public override TaskStatus OverrideStatus(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002ECF")]
		[Address(RVA = "0x12E98F8", Offset = "0x12E98F8", VA = "0x12E98F8", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002ED0")]
		[Address(RVA = "0x12E994C", Offset = "0x12E994C", VA = "0x12E994C")]
		public ParallelSelector()
		{
		}
	}
	[Token(Token = "0x20006D9")]
	[TaskDescription("Similar to the selector task, the priority selector task will return success as soon as a child task returns success. Instead of running the tasks sequentially from left to right within the tree, the priority selector will ask the task what its priority is to determine the order. The higher priority tasks have a higher chance at being run first.")]
	[TaskIcon("{SkinColor}PrioritySelectorIcon.png")]
	public class PrioritySelector : Composite
	{
		[Token(Token = "0x40028E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int currentChildIndex;

		[Token(Token = "0x40028E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TaskStatus executionStatus;

		[Token(Token = "0x40028E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<int> childrenExecutionOrder;

		[Token(Token = "0x6002ED1")]
		[Address(RVA = "0x12E9954", Offset = "0x12E9954", VA = "0x12E9954", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002ED2")]
		[Address(RVA = "0x12E9AE4", Offset = "0x12E9AE4", VA = "0x12E9AE4", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002ED3")]
		[Address(RVA = "0x12E9B38", Offset = "0x12E9B38", VA = "0x12E9B38", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002ED4")]
		[Address(RVA = "0x12E9BA0", Offset = "0x12E9BA0", VA = "0x12E9BA0", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002ED5")]
		[Address(RVA = "0x12E9BB0", Offset = "0x12E9BB0", VA = "0x12E9BB0", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002ED6")]
		[Address(RVA = "0x12E9BB8", Offset = "0x12E9BB8", VA = "0x12E9BB8", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002ED7")]
		[Address(RVA = "0x12E9BC0", Offset = "0x12E9BC0", VA = "0x12E9BC0")]
		public PrioritySelector()
		{
		}
	}
	[Token(Token = "0x20006DA")]
	[TaskDescription("Similar to the selector task, the random selector task will return success as soon as a child task returns success.  The difference is that the random selector class will run its children in a random order. The selector task is deterministic in that it will always run the tasks from left to right within the tree. The random selector task shuffles the child tasks up and then begins execution in a random order. Other than that the random selector class is the same as the selector class. It will continue running tasks until a task completes successfully. If no child tasks return success then it will return failure.")]
	[TaskIcon("{SkinColor}RandomSelectorIcon.png")]
	public class RandomSelector : Composite
	{
		[Token(Token = "0x40028EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Seed the random number generator to make things easier to debug")]
		public int seed;

		[Token(Token = "0x40028EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Do we want to use the seed?")]
		public bool useSeed;

		[Token(Token = "0x40028EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<int> childIndexList;

		[Token(Token = "0x40028ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Stack<int> childrenExecutionOrder;

		[Token(Token = "0x40028EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002ED8")]
		[Address(RVA = "0x12E9C48", Offset = "0x12E9C48", VA = "0x12E9C48", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x6002ED9")]
		[Address(RVA = "0x12E9D4C", Offset = "0x12E9D4C", VA = "0x12E9D4C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002EDA")]
		[Address(RVA = "0x12E9E90", Offset = "0x12E9E90", VA = "0x12E9E90", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002EDB")]
		[Address(RVA = "0x12E9EE0", Offset = "0x12E9EE0", VA = "0x12E9EE0", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EDC")]
		[Address(RVA = "0x12E9F44", Offset = "0x12E9F44", VA = "0x12E9F44", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002EDD")]
		[Address(RVA = "0x12E9FB8", Offset = "0x12E9FB8", VA = "0x12E9FB8", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002EDE")]
		[Address(RVA = "0x12EA014", Offset = "0x12EA014", VA = "0x12EA014", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002EDF")]
		[Address(RVA = "0x12EA068", Offset = "0x12EA068", VA = "0x12EA068", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002EE0")]
		[Address(RVA = "0x12E9D50", Offset = "0x12E9D50", VA = "0x12E9D50")]
		private void ShuffleChilden()
		{
		}

		[Token(Token = "0x6002EE1")]
		[Address(RVA = "0x12EA074", Offset = "0x12EA074", VA = "0x12EA074")]
		public RandomSelector()
		{
		}
	}
	[Token(Token = "0x20006DB")]
	[TaskDescription("Similar to the sequence task, the random sequence task will return success as soon as every child task returns success.  The difference is that the random sequence class will run its children in a random order. The sequence task is deterministic in that it will always run the tasks from left to right within the tree. The random sequence task shuffles the child tasks up and then begins execution in a random order. Other than that the random sequence class is the same as the sequence class. It will stop running tasks as soon as a single task ends in failure. On a task failure it will stop executing all of the child tasks and return failure. If no child returns failure then it will return success.")]
	[TaskIcon("{SkinColor}RandomSequenceIcon.png")]
	public class RandomSequence : Composite
	{
		[Token(Token = "0x40028EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Seed the random number generator to make things easier to debug")]
		public int seed;

		[Token(Token = "0x40028F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Do we want to use the seed?")]
		public bool useSeed;

		[Token(Token = "0x40028F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<int> childIndexList;

		[Token(Token = "0x40028F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Stack<int> childrenExecutionOrder;

		[Token(Token = "0x40028F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002EE2")]
		[Address(RVA = "0x12EA14C", Offset = "0x12EA14C", VA = "0x12EA14C", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x6002EE3")]
		[Address(RVA = "0x12EA250", Offset = "0x12EA250", VA = "0x12EA250", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002EE4")]
		[Address(RVA = "0x12EA394", Offset = "0x12EA394", VA = "0x12EA394", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002EE5")]
		[Address(RVA = "0x12EA3E4", Offset = "0x12EA3E4", VA = "0x12EA3E4", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EE6")]
		[Address(RVA = "0x12EA448", Offset = "0x12EA448", VA = "0x12EA448", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002EE7")]
		[Address(RVA = "0x12EA4BC", Offset = "0x12EA4BC", VA = "0x12EA4BC", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002EE8")]
		[Address(RVA = "0x12EA518", Offset = "0x12EA518", VA = "0x12EA518", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002EE9")]
		[Address(RVA = "0x12EA56C", Offset = "0x12EA56C", VA = "0x12EA56C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002EEA")]
		[Address(RVA = "0x12EA254", Offset = "0x12EA254", VA = "0x12EA254")]
		private void ShuffleChilden()
		{
		}

		[Token(Token = "0x6002EEB")]
		[Address(RVA = "0x12EA578", Offset = "0x12EA578", VA = "0x12EA578")]
		public RandomSequence()
		{
		}
	}
	[Token(Token = "0x20006DC")]
	[TaskDescription("The selector task is similar to an \"or\" operation. It will return success as soon as one of its child tasks return success. If a child task returns failure then it will sequentially run the next task. If no child task returns success then it will return failure.")]
	[TaskIcon("{SkinColor}SelectorIcon.png")]
	public class Selector : Composite
	{
		[Token(Token = "0x40028F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int currentChildIndex;

		[Token(Token = "0x40028F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002EEC")]
		[Address(RVA = "0x12EA650", Offset = "0x12EA650", VA = "0x12EA650", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002EED")]
		[Address(RVA = "0x12EA658", Offset = "0x12EA658", VA = "0x12EA658", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EEE")]
		[Address(RVA = "0x12EA6C0", Offset = "0x12EA6C0", VA = "0x12EA6C0", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002EEF")]
		[Address(RVA = "0x12EA6D0", Offset = "0x12EA6D0", VA = "0x12EA6D0", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002EF0")]
		[Address(RVA = "0x12EA6D8", Offset = "0x12EA6D8", VA = "0x12EA6D8", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002EF1")]
		[Address(RVA = "0x12EA6E0", Offset = "0x12EA6E0", VA = "0x12EA6E0")]
		public Selector()
		{
		}
	}
	[Token(Token = "0x20006DD")]
	[TaskDescription("The selector evaluator is a selector task which reevaluates its children every tick. It will run the lowest priority child which returns a task status of running. This is done each tick. If a higher priority child is running and the next frame a lower priority child wants to run it will interrupt the higher priority child. The selector evaluator will return success as soon as the first child returns success otherwise it will keep trying higher priority children. This task mimics the conditional abort functionality except the child tasks don't always have to be conditional tasks.")]
	[TaskIcon("{SkinColor}SelectorEvaluatorIcon.png")]
	public class SelectorEvaluator : Composite
	{
		[Token(Token = "0x40028F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int currentChildIndex;

		[Token(Token = "0x40028F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TaskStatus executionStatus;

		[Token(Token = "0x40028F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int storedCurrentChildIndex;

		[Token(Token = "0x40028F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private TaskStatus storedExecutionStatus;

		[Token(Token = "0x6002EF2")]
		[Address(RVA = "0x12EA6E8", Offset = "0x12EA6E8", VA = "0x12EA6E8", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002EF3")]
		[Address(RVA = "0x12EA6F0", Offset = "0x12EA6F0", VA = "0x12EA6F0", Slot = "39")]
		public override void OnChildStarted(int childIndex)
		{
		}

		[Token(Token = "0x6002EF4")]
		[Address(RVA = "0x12EA704", Offset = "0x12EA704", VA = "0x12EA704", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EF5")]
		[Address(RVA = "0x12EA784", Offset = "0x12EA784", VA = "0x12EA784", Slot = "37")]
		public override void OnChildExecuted(int childIndex, TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002EF6")]
		[Address(RVA = "0x12EA814", Offset = "0x12EA814", VA = "0x12EA814", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002EF7")]
		[Address(RVA = "0x12EA81C", Offset = "0x12EA81C", VA = "0x12EA81C", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002EF8")]
		[Address(RVA = "0x12EA824", Offset = "0x12EA824", VA = "0x12EA824", Slot = "40")]
		public override TaskStatus OverrideStatus(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002EF9")]
		[Address(RVA = "0x12EA82C", Offset = "0x12EA82C", VA = "0x12EA82C", Slot = "31")]
		public override bool CanRunParallelChildren()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EFA")]
		[Address(RVA = "0x12EA834", Offset = "0x12EA834", VA = "0x12EA834", Slot = "35")]
		public override bool CanReevaluate()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EFB")]
		[Address(RVA = "0x12EA83C", Offset = "0x12EA83C", VA = "0x12EA83C", Slot = "43")]
		public override bool OnReevaluationStarted()
		{
			return default(bool);
		}

		[Token(Token = "0x6002EFC")]
		[Address(RVA = "0x12EA860", Offset = "0x12EA860", VA = "0x12EA860", Slot = "44")]
		public override void OnReevaluationEnded(TaskStatus status)
		{
		}

		[Token(Token = "0x6002EFD")]
		[Address(RVA = "0x12EA934", Offset = "0x12EA934", VA = "0x12EA934")]
		public SelectorEvaluator()
		{
		}
	}
	[Token(Token = "0x20006DE")]
	[TaskDescription("The sequence task is similar to an \"and\" operation. It will return failure as soon as one of its child tasks return failure. If a child task returns success then it will sequentially run the next task. If all child tasks return success then it will return success.")]
	[TaskIcon("{SkinColor}SequenceIcon.png")]
	public class Sequence : Composite
	{
		[Token(Token = "0x40028FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int currentChildIndex;

		[Token(Token = "0x40028FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002EFE")]
		[Address(RVA = "0x12EA944", Offset = "0x12EA944", VA = "0x12EA944", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002EFF")]
		[Address(RVA = "0x12EA94C", Offset = "0x12EA94C", VA = "0x12EA94C", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F00")]
		[Address(RVA = "0x12EA9B4", Offset = "0x12EA9B4", VA = "0x12EA9B4", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F01")]
		[Address(RVA = "0x12EA9C4", Offset = "0x12EA9C4", VA = "0x12EA9C4", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002F02")]
		[Address(RVA = "0x12EA9CC", Offset = "0x12EA9CC", VA = "0x12EA9CC", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F03")]
		[Address(RVA = "0x12EA9D4", Offset = "0x12EA9D4", VA = "0x12EA9D4")]
		public Sequence()
		{
		}
	}
	[Token(Token = "0x20006DF")]
	[TaskDescription("The utility selector task evaluates the child tasks using Utility Theory AI. The child task can override the GetUtility method and return the utility value at that particular time. The task with the highest utility value will be selected and the existing running task will be aborted. The utility selector task reevaluates its children every tick.")]
	[TaskIcon("{SkinColor}UtilitySelectorIcon.png")]
	public class UtilitySelector : Composite
	{
		[Token(Token = "0x40028FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int currentChildIndex;

		[Token(Token = "0x40028FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float highestUtility;

		[Token(Token = "0x40028FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private TaskStatus executionStatus;

		[Token(Token = "0x40028FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool reevaluating;

		[Token(Token = "0x4002900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<int> availableChildren;

		[Token(Token = "0x6002F04")]
		[Address(RVA = "0x12EA9DC", Offset = "0x12EA9DC", VA = "0x12EA9DC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002F05")]
		[Address(RVA = "0x12EAB24", Offset = "0x12EAB24", VA = "0x12EAB24", Slot = "32")]
		public override int CurrentChildIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002F06")]
		[Address(RVA = "0x12EAB2C", Offset = "0x12EAB2C", VA = "0x12EAB2C", Slot = "39")]
		public override void OnChildStarted(int childIndex)
		{
		}

		[Token(Token = "0x6002F07")]
		[Address(RVA = "0x12EAB38", Offset = "0x12EAB38", VA = "0x12EAB38", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F08")]
		[Address(RVA = "0x12EABA8", Offset = "0x12EABA8", VA = "0x12EABA8", Slot = "37")]
		public override void OnChildExecuted(int childIndex, TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F09")]
		[Address(RVA = "0x12EACE8", Offset = "0x12EACE8", VA = "0x12EACE8", Slot = "42")]
		public override void OnConditionalAbort(int childIndex)
		{
		}

		[Token(Token = "0x6002F0A")]
		[Address(RVA = "0x12EACF4", Offset = "0x12EACF4", VA = "0x12EACF4", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F0B")]
		[Address(RVA = "0x12EAD00", Offset = "0x12EAD00", VA = "0x12EAD00", Slot = "40")]
		public override TaskStatus OverrideStatus(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F0C")]
		[Address(RVA = "0x12EAD08", Offset = "0x12EAD08", VA = "0x12EAD08", Slot = "31")]
		public override bool CanRunParallelChildren()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F0D")]
		[Address(RVA = "0x12EAD10", Offset = "0x12EAD10", VA = "0x12EAD10", Slot = "35")]
		public override bool CanReevaluate()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F0E")]
		[Address(RVA = "0x12EAD18", Offset = "0x12EAD18", VA = "0x12EAD18", Slot = "43")]
		public override bool OnReevaluationStarted()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F0F")]
		[Address(RVA = "0x12EAD38", Offset = "0x12EAD38", VA = "0x12EAD38", Slot = "44")]
		public override void OnReevaluationEnded(TaskStatus status)
		{
		}

		[Token(Token = "0x6002F10")]
		[Address(RVA = "0x12EAEC0", Offset = "0x12EAEC0", VA = "0x12EAEC0")]
		public UtilitySelector()
		{
		}
	}
	[Token(Token = "0x20006E0")]
	[TaskDescription("Returns success as soon as the event specified by eventName has been received.")]
	[TaskIcon("{SkinColor}HasReceivedEventIcon.png")]
	public class HasReceivedEvent : Conditional
	{
		[Token(Token = "0x4002901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the event to receive")]
		public SharedString eventName;

		[Token(Token = "0x4002902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SharedRequired]
		[Tooltip("Optionally store the first sent argument")]
		public SharedVariable storedValue1;

		[Token(Token = "0x4002903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SharedRequired]
		[Tooltip("Optionally store the second sent argument")]
		public SharedVariable storedValue2;

		[Token(Token = "0x4002904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optionally store the third sent argument")]
		[SharedRequired]
		public SharedVariable storedValue3;

		[Token(Token = "0x4002905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool eventReceived;

		[Token(Token = "0x4002906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool registered;

		[Token(Token = "0x6002F11")]
		[Address(RVA = "0x12EAF48", Offset = "0x12EAF48", VA = "0x12EAF48", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002F12")]
		[Address(RVA = "0x12EB1D0", Offset = "0x12EB1D0", VA = "0x12EB1D0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F13")]
		[Address(RVA = "0x12EB1E4", Offset = "0x12EB1E4", VA = "0x12EB1E4", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F14")]
		[Address(RVA = "0x12EB46C", Offset = "0x12EB46C", VA = "0x12EB46C")]
		private void ReceivedEvent()
		{
		}

		[Token(Token = "0x6002F15")]
		[Address(RVA = "0x12EB478", Offset = "0x12EB478", VA = "0x12EB478")]
		private void ReceivedEvent(object arg1)
		{
		}

		[Token(Token = "0x6002F16")]
		[Address(RVA = "0x12EB4D4", Offset = "0x12EB4D4", VA = "0x12EB4D4")]
		private void ReceivedEvent(object arg1, object arg2)
		{
		}

		[Token(Token = "0x6002F17")]
		[Address(RVA = "0x12EB560", Offset = "0x12EB560", VA = "0x12EB560")]
		private void ReceivedEvent(object arg1, object arg2, object arg3)
		{
		}

		[Token(Token = "0x6002F18")]
		[Address(RVA = "0x12EB628", Offset = "0x12EB628", VA = "0x12EB628", Slot = "15")]
		public override void OnBehaviorComplete()
		{
		}

		[Token(Token = "0x6002F19")]
		[Address(RVA = "0x12EB8A4", Offset = "0x12EB8A4", VA = "0x12EB8A4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F1A")]
		[Address(RVA = "0x12EB8F8", Offset = "0x12EB8F8", VA = "0x12EB8F8")]
		public HasReceivedEvent()
		{
		}
	}
	[Token(Token = "0x20006E1")]
	[TaskCategory("Physics")]
	[TaskDescription("Returns success when a collision starts. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).")]
	public class HasEnteredCollision : Conditional
	{
		[Token(Token = "0x4002907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to check for a collision against")]
		public SharedString tag;

		[Token(Token = "0x4002908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The object that started the collision")]
		public SharedGameObject collidedGameObject;

		[Token(Token = "0x4002909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool enteredCollision;

		[Token(Token = "0x6002F1B")]
		[Address(RVA = "0x12EB958", Offset = "0x12EB958", VA = "0x12EB958", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F1C")]
		[Address(RVA = "0x12EB96C", Offset = "0x12EB96C", VA = "0x12EB96C", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F1D")]
		[Address(RVA = "0x12EB974", Offset = "0x12EB974", VA = "0x12EB974", Slot = "18")]
		public override void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002F1E")]
		[Address(RVA = "0x12EBA68", Offset = "0x12EBA68", VA = "0x12EBA68", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F1F")]
		[Address(RVA = "0x12EBACC", Offset = "0x12EBACC", VA = "0x12EBACC")]
		public HasEnteredCollision()
		{
		}
	}
	[Token(Token = "0x20006E2")]
	[TaskCategory("Physics")]
	[TaskDescription("Returns success when a 2D collision starts. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).")]
	public class HasEnteredCollision2D : Conditional
	{
		[Token(Token = "0x400290A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to check for a collision against")]
		public SharedString tag;

		[Token(Token = "0x400290B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The object that started the collision")]
		public SharedGameObject collidedGameObject;

		[Token(Token = "0x400290C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool enteredCollision;

		[Token(Token = "0x6002F20")]
		[Address(RVA = "0x12EBB2C", Offset = "0x12EBB2C", VA = "0x12EBB2C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F21")]
		[Address(RVA = "0x12EBB40", Offset = "0x12EBB40", VA = "0x12EBB40", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F22")]
		[Address(RVA = "0x12EBB48", Offset = "0x12EBB48", VA = "0x12EBB48", Slot = "22")]
		public override void OnCollisionEnter2D(Collision2D collision)
		{
		}

		[Token(Token = "0x6002F23")]
		[Address(RVA = "0x12EBC3C", Offset = "0x12EBC3C", VA = "0x12EBC3C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F24")]
		[Address(RVA = "0x12EBCA0", Offset = "0x12EBCA0", VA = "0x12EBCA0")]
		public HasEnteredCollision2D()
		{
		}
	}
	[Token(Token = "0x20006E3")]
	[TaskCategory("Physics")]
	[TaskDescription("Returns success when an object enters the trigger. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).")]
	public class HasEnteredTrigger : Conditional
	{
		[Token(Token = "0x400290D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to check for a trigger against")]
		public SharedString tag;

		[Token(Token = "0x400290E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The object that entered the trigger")]
		public SharedGameObject otherGameObject;

		[Token(Token = "0x400290F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool enteredTrigger;

		[Token(Token = "0x6002F25")]
		[Address(RVA = "0x12EBD00", Offset = "0x12EBD00", VA = "0x12EBD00", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F26")]
		[Address(RVA = "0x12EBD14", Offset = "0x12EBD14", VA = "0x12EBD14", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F27")]
		[Address(RVA = "0x12EBD1C", Offset = "0x12EBD1C", VA = "0x12EBD1C", Slot = "20")]
		public override void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002F28")]
		[Address(RVA = "0x12EBE10", Offset = "0x12EBE10", VA = "0x12EBE10", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F29")]
		[Address(RVA = "0x12EBE74", Offset = "0x12EBE74", VA = "0x12EBE74")]
		public HasEnteredTrigger()
		{
		}
	}
	[Token(Token = "0x20006E4")]
	[TaskDescription("Returns success when an object enters the 2D trigger. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).")]
	[TaskCategory("Physics")]
	public class HasEnteredTrigger2D : Conditional
	{
		[Token(Token = "0x4002910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to check for a trigger against")]
		public SharedString tag;

		[Token(Token = "0x4002911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The object that entered the trigger")]
		public SharedGameObject otherGameObject;

		[Token(Token = "0x4002912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool enteredTrigger;

		[Token(Token = "0x6002F2A")]
		[Address(RVA = "0x12EBED4", Offset = "0x12EBED4", VA = "0x12EBED4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F2B")]
		[Address(RVA = "0x12EBEE8", Offset = "0x12EBEE8", VA = "0x12EBEE8", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F2C")]
		[Address(RVA = "0x12EBEF0", Offset = "0x12EBEF0", VA = "0x12EBEF0", Slot = "24")]
		public override void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6002F2D")]
		[Address(RVA = "0x12EBFE4", Offset = "0x12EBFE4", VA = "0x12EBFE4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F2E")]
		[Address(RVA = "0x12EC048", Offset = "0x12EC048", VA = "0x12EC048")]
		public HasEnteredTrigger2D()
		{
		}
	}
	[Token(Token = "0x20006E5")]
	[TaskDescription("Returns success when a collision ends. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).")]
	[TaskCategory("Physics")]
	public class HasExitedCollision : Conditional
	{
		[Token(Token = "0x4002913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to check for a collision against")]
		public SharedString tag;

		[Token(Token = "0x4002914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The object that exited the collision")]
		public SharedGameObject collidedGameObject;

		[Token(Token = "0x4002915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool exitedCollision;

		[Token(Token = "0x6002F2F")]
		[Address(RVA = "0x12EC0A8", Offset = "0x12EC0A8", VA = "0x12EC0A8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F30")]
		[Address(RVA = "0x12EC0BC", Offset = "0x12EC0BC", VA = "0x12EC0BC", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F31")]
		[Address(RVA = "0x12EC0C4", Offset = "0x12EC0C4", VA = "0x12EC0C4", Slot = "19")]
		public override void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6002F32")]
		[Address(RVA = "0x12EC1B8", Offset = "0x12EC1B8", VA = "0x12EC1B8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F33")]
		[Address(RVA = "0x12EC1C4", Offset = "0x12EC1C4", VA = "0x12EC1C4")]
		public HasExitedCollision()
		{
		}
	}
	[Token(Token = "0x20006E6")]
	[TaskDescription("Returns success when a 2D collision ends. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).")]
	[TaskCategory("Physics")]
	public class HasExitedCollision2D : Conditional
	{
		[Token(Token = "0x4002916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to check for a collision against")]
		public SharedString tag;

		[Token(Token = "0x4002917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The object that exited the collision")]
		public SharedGameObject collidedGameObject;

		[Token(Token = "0x4002918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool exitedCollision;

		[Token(Token = "0x6002F34")]
		[Address(RVA = "0x12EC224", Offset = "0x12EC224", VA = "0x12EC224", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F35")]
		[Address(RVA = "0x12EC238", Offset = "0x12EC238", VA = "0x12EC238", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F36")]
		[Address(RVA = "0x12EC240", Offset = "0x12EC240", VA = "0x12EC240", Slot = "23")]
		public override void OnCollisionExit2D(Collision2D collision)
		{
		}

		[Token(Token = "0x6002F37")]
		[Address(RVA = "0x12EC334", Offset = "0x12EC334", VA = "0x12EC334", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F38")]
		[Address(RVA = "0x12EC398", Offset = "0x12EC398", VA = "0x12EC398")]
		public HasExitedCollision2D()
		{
		}
	}
	[Token(Token = "0x20006E7")]
	[TaskDescription("Returns success when an object exits the trigger. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).")]
	[TaskCategory("Physics")]
	public class HasExitedTrigger : Conditional
	{
		[Token(Token = "0x4002919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to check for a trigger against")]
		public SharedString tag;

		[Token(Token = "0x400291A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The object that exited the trigger")]
		public SharedGameObject otherGameObject;

		[Token(Token = "0x400291B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool exitedTrigger;

		[Token(Token = "0x6002F39")]
		[Address(RVA = "0x12EC3F8", Offset = "0x12EC3F8", VA = "0x12EC3F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F3A")]
		[Address(RVA = "0x12EC40C", Offset = "0x12EC40C", VA = "0x12EC40C", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F3B")]
		[Address(RVA = "0x12EC414", Offset = "0x12EC414", VA = "0x12EC414", Slot = "21")]
		public override void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002F3C")]
		[Address(RVA = "0x12EC508", Offset = "0x12EC508", VA = "0x12EC508", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F3D")]
		[Address(RVA = "0x12EC56C", Offset = "0x12EC56C", VA = "0x12EC56C")]
		public HasExitedTrigger()
		{
		}
	}
	[Token(Token = "0x20006E8")]
	[TaskDescription("Returns success when an object exits the 2D trigger. This task will only receive the physics callback if it is being reevaluated (with a conditional abort or under a parallel task).")]
	[TaskCategory("Physics")]
	public class HasExitedTrigger2D : Conditional
	{
		[Token(Token = "0x400291C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to check for a trigger against")]
		public SharedString tag;

		[Token(Token = "0x400291D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The object that exited the trigger")]
		public SharedGameObject otherGameObject;

		[Token(Token = "0x400291E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool exitedTrigger;

		[Token(Token = "0x6002F3E")]
		[Address(RVA = "0x12EC5CC", Offset = "0x12EC5CC", VA = "0x12EC5CC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F3F")]
		[Address(RVA = "0x12EC5E0", Offset = "0x12EC5E0", VA = "0x12EC5E0", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F40")]
		[Address(RVA = "0x12EC5E8", Offset = "0x12EC5E8", VA = "0x12EC5E8", Slot = "25")]
		public override void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x6002F41")]
		[Address(RVA = "0x12EC6DC", Offset = "0x12EC6DC", VA = "0x12EC6DC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F42")]
		[Address(RVA = "0x12EC740", Offset = "0x12EC740", VA = "0x12EC740")]
		public HasExitedTrigger2D()
		{
		}
	}
	[Token(Token = "0x20006E9")]
	[TaskDescription("The random probability task will return success when the random probability is above the succeed probability. It will otherwise return failure.")]
	public class RandomProbability : Conditional
	{
		[Token(Token = "0x400291F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The chance that the task will return success")]
		public SharedFloat successProbability;

		[Token(Token = "0x4002920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Seed the random number generator to make things easier to debug")]
		public SharedInt seed;

		[Token(Token = "0x4002921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Do we want to use the seed?")]
		public SharedBool useSeed;

		[Token(Token = "0x6002F43")]
		[Address(RVA = "0x12EC7A0", Offset = "0x12EC7A0", VA = "0x12EC7A0", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x6002F44")]
		[Address(RVA = "0x12EC82C", Offset = "0x12EC82C", VA = "0x12EC82C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F45")]
		[Address(RVA = "0x12EC8A0", Offset = "0x12EC8A0", VA = "0x12EC8A0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F46")]
		[Address(RVA = "0x12EC8F4", Offset = "0x12EC8F4", VA = "0x12EC8F4")]
		public RandomProbability()
		{
		}
	}
	[Token(Token = "0x20006EA")]
	[TaskDescription("Compares the field value to the value specified. Returns success if the values are the same.")]
	[TaskIcon("{SkinColor}ReflectionIcon.png")]
	[TaskCategory("Reflection")]
	public class CompareFieldValue : Conditional
	{
		[Token(Token = "0x4002922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to compare the field on")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The component to compare the field on")]
		public SharedString componentName;

		[Token(Token = "0x4002924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the field")]
		public SharedString fieldName;

		[Token(Token = "0x4002925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The value to compare to")]
		public SharedVariable compareValue;

		[Token(Token = "0x6002F47")]
		[Address(RVA = "0x12EC924", Offset = "0x12EC924", VA = "0x12EC924", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F48")]
		[Address(RVA = "0x12ECC00", Offset = "0x12ECC00", VA = "0x12ECC00", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F49")]
		[Address(RVA = "0x12ECC48", Offset = "0x12ECC48", VA = "0x12ECC48")]
		public CompareFieldValue()
		{
		}
	}
	[Token(Token = "0x20006EB")]
	[TaskIcon("{SkinColor}ReflectionIcon.png")]
	[TaskCategory("Reflection")]
	[TaskDescription("Compares the property value to the value specified. Returns success if the values are the same.")]
	public class ComparePropertyValue : Conditional
	{
		[Token(Token = "0x4002926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to compare the property of")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The component to compare the property of")]
		public SharedString componentName;

		[Token(Token = "0x4002928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the property")]
		public SharedString propertyName;

		[Token(Token = "0x4002929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The value to compare to")]
		public SharedVariable compareValue;

		[Token(Token = "0x6002F4A")]
		[Address(RVA = "0x12ECC50", Offset = "0x12ECC50", VA = "0x12ECC50", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F4B")]
		[Address(RVA = "0x12ECF30", Offset = "0x12ECF30", VA = "0x12ECF30", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F4C")]
		[Address(RVA = "0x12ECF78", Offset = "0x12ECF78", VA = "0x12ECF78")]
		public ComparePropertyValue()
		{
		}
	}
	[Token(Token = "0x20006EC")]
	[TaskIcon("{SkinColor}ConditionalEvaluatorIcon.png")]
	[TaskDescription("Evaluates the specified conditional task. If the conditional task returns success then the child task is run and the child status is returned. If the conditional task does not return success then the child task is not run and a failure status is immediately returned.")]
	public class ConditionalEvaluator : Decorator
	{
		[Token(Token = "0x400292A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Should the conditional task be reevaluated every tick?")]
		public SharedBool reevaluate;

		[Token(Token = "0x400292B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The conditional task to evaluate")]
		[InspectTask]
		public Conditional conditionalTask;

		[Token(Token = "0x400292C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private TaskStatus executionStatus;

		[Token(Token = "0x400292D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool checkConditionalTask;

		[Token(Token = "0x400292E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool conditionalTaskFailed;

		[Token(Token = "0x6002F4D")]
		[Address(RVA = "0x12ECF80", Offset = "0x12ECF80", VA = "0x12ECF80", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x6002F4E")]
		[Address(RVA = "0x12ECFE8", Offset = "0x12ECFE8", VA = "0x12ECFE8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002F4F")]
		[Address(RVA = "0x12ED000", Offset = "0x12ED000", VA = "0x12ED000", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F50")]
		[Address(RVA = "0x12ED054", Offset = "0x12ED054", VA = "0x12ED054", Slot = "35")]
		public override bool CanReevaluate()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F51")]
		[Address(RVA = "0x12ED0A4", Offset = "0x12ED0A4", VA = "0x12ED0A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F52")]
		[Address(RVA = "0x12ED0E8", Offset = "0x12ED0E8", VA = "0x12ED0E8", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F53")]
		[Address(RVA = "0x12ED0F0", Offset = "0x12ED0F0", VA = "0x12ED0F0", Slot = "41")]
		public override TaskStatus OverrideStatus()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F54")]
		[Address(RVA = "0x12ED0F8", Offset = "0x12ED0F8", VA = "0x12ED0F8", Slot = "40")]
		public override TaskStatus OverrideStatus(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F55")]
		[Address(RVA = "0x12ED108", Offset = "0x12ED108", VA = "0x12ED108", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F56")]
		[Address(RVA = "0x12ED130", Offset = "0x12ED130", VA = "0x12ED130", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F57")]
		[Address(RVA = "0x12ED13C", Offset = "0x12ED13C", VA = "0x12ED13C")]
		public ConditionalEvaluator()
		{
		}
	}
	[Token(Token = "0x20006ED")]
	[TaskIcon("{SkinColor}InterruptIcon.png")]
	[TaskDescription("The interrupt task will stop all child tasks from running if it is interrupted. The interruption can be triggered by the perform interruption task. The interrupt task will keep running its child until this interruption is called. If no interruption happens and the child task completed its execution the interrupt task will return the value assigned by the child task.")]
	public class Interrupt : Decorator
	{
		[Token(Token = "0x400292F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TaskStatus interruptStatus;

		[Token(Token = "0x4002930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002F58")]
		[Address(RVA = "0x12ED14C", Offset = "0x12ED14C", VA = "0x12ED14C", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F59")]
		[Address(RVA = "0x12ED168", Offset = "0x12ED168", VA = "0x12ED168", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F5A")]
		[Address(RVA = "0x12E6E10", Offset = "0x12E6E10", VA = "0x12E6E10")]
		public void DoInterrupt(TaskStatus status)
		{
		}

		[Token(Token = "0x6002F5B")]
		[Address(RVA = "0x12ED170", Offset = "0x12ED170", VA = "0x12ED170", Slot = "41")]
		public override TaskStatus OverrideStatus()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F5C")]
		[Address(RVA = "0x12ED178", Offset = "0x12ED178", VA = "0x12ED178", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F5D")]
		[Address(RVA = "0x12ED188", Offset = "0x12ED188", VA = "0x12ED188")]
		public Interrupt()
		{
		}
	}
	[Token(Token = "0x20006EE")]
	[TaskIcon("{SkinColor}InverterIcon.png")]
	[TaskDescription("The inverter task will invert the return value of the child task after it has finished executing. If the child returns success, the inverter task will return failure. If the child returns failure, the inverter task will return success.")]
	public class Inverter : Decorator
	{
		[Token(Token = "0x4002931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002F5E")]
		[Address(RVA = "0x12ED198", Offset = "0x12ED198", VA = "0x12ED198", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F5F")]
		[Address(RVA = "0x12ED1B4", Offset = "0x12ED1B4", VA = "0x12ED1B4", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F60")]
		[Address(RVA = "0x12ED1BC", Offset = "0x12ED1BC", VA = "0x12ED1BC", Slot = "34")]
		public override TaskStatus Decorate(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F61")]
		[Address(RVA = "0x12ED1DC", Offset = "0x12ED1DC", VA = "0x12ED1DC", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F62")]
		[Address(RVA = "0x12ED1E4", Offset = "0x12ED1E4", VA = "0x12ED1E4")]
		public Inverter()
		{
		}
	}
	[Token(Token = "0x20006EF")]
	[TaskIcon("{SkinColor}RepeaterIcon.png")]
	[TaskDescription("The repeater task will repeat execution of its child task until the child task has been run a specified number of times. It has the option of continuing to execute the child task even if the child task returns a failure.")]
	public class Repeater : Decorator
	{
		[Token(Token = "0x4002932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The number of times to repeat the execution of its child task")]
		public SharedInt count;

		[Token(Token = "0x4002933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Allows the repeater to repeat forever")]
		public SharedBool repeatForever;

		[Token(Token = "0x4002934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Should the task return if the child task returns a failure")]
		public SharedBool endOnFailure;

		[Token(Token = "0x4002935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int executionCount;

		[Token(Token = "0x4002936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002F63")]
		[Address(RVA = "0x12ED1EC", Offset = "0x12ED1EC", VA = "0x12ED1EC", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F64")]
		[Address(RVA = "0x12ED2B8", Offset = "0x12ED2B8", VA = "0x12ED2B8", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F65")]
		[Address(RVA = "0x12ED2C8", Offset = "0x12ED2C8", VA = "0x12ED2C8", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F66")]
		[Address(RVA = "0x12ED2D0", Offset = "0x12ED2D0", VA = "0x12ED2D0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F67")]
		[Address(RVA = "0x12ED30C", Offset = "0x12ED30C", VA = "0x12ED30C")]
		public Repeater()
		{
		}
	}
	[Token(Token = "0x20006F0")]
	[TaskIcon("{SkinColor}ReturnFailureIcon.png")]
	[TaskDescription("The return failure task will always return failure except when the child task is running.")]
	public class ReturnFailure : Decorator
	{
		[Token(Token = "0x4002937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002F68")]
		[Address(RVA = "0x12ED33C", Offset = "0x12ED33C", VA = "0x12ED33C", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F69")]
		[Address(RVA = "0x12ED358", Offset = "0x12ED358", VA = "0x12ED358", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F6A")]
		[Address(RVA = "0x12ED360", Offset = "0x12ED360", VA = "0x12ED360", Slot = "34")]
		public override TaskStatus Decorate(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F6B")]
		[Address(RVA = "0x12ED36C", Offset = "0x12ED36C", VA = "0x12ED36C", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F6C")]
		[Address(RVA = "0x12ED374", Offset = "0x12ED374", VA = "0x12ED374")]
		public ReturnFailure()
		{
		}
	}
	[Token(Token = "0x20006F1")]
	[TaskIcon("{SkinColor}ReturnSuccessIcon.png")]
	[TaskDescription("The return success task will always return success except when the child task is running.")]
	public class ReturnSuccess : Decorator
	{
		[Token(Token = "0x4002938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002F6D")]
		[Address(RVA = "0x12ED37C", Offset = "0x12ED37C", VA = "0x12ED37C", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F6E")]
		[Address(RVA = "0x12ED398", Offset = "0x12ED398", VA = "0x12ED398", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F6F")]
		[Address(RVA = "0x12ED3A0", Offset = "0x12ED3A0", VA = "0x12ED3A0", Slot = "34")]
		public override TaskStatus Decorate(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F70")]
		[Address(RVA = "0x12ED3B0", Offset = "0x12ED3B0", VA = "0x12ED3B0", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F71")]
		[Address(RVA = "0x12ED3B8", Offset = "0x12ED3B8", VA = "0x12ED3B8")]
		public ReturnSuccess()
		{
		}
	}
	[Token(Token = "0x20006F2")]
	[TaskIcon("{SkinColor}TaskGuardIcon.png")]
	[TaskDescription("The task guard task is similar to a semaphore in multithreaded programming. The task guard task is there to ensure a limited resource is not being overused. \n\nFor example, you may place a task guard above a task that plays an animation. Elsewhere within your behavior tree you may also have another task that plays a different animation but uses the same bones for that animation. Because of this you don't want that animation to play twice at the same time. Placing a task guard will let you specify how many times a particular task can be accessed at the same time.\n\nIn the previous animation task example you would specify an access count of 1. With this setup the animation task can be only controlled by one task at a time. If the first task is playing the animation and a second task wants to control the animation as well, it will either have to wait or skip over the task completely.")]
	public class TaskGuard : Decorator
	{
		[Token(Token = "0x4002939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The number of times the child tasks can be accessed by parallel tasks at once")]
		public SharedInt maxTaskAccessCount;

		[Token(Token = "0x400293A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The linked tasks that also guard a task. If the task guard is not linked against any other tasks it doesn't have much purpose. Marked as LinkedTask to ensure all tasks linked are linked to the same set of tasks")]
		[LinkedTask]
		public TaskGuard[] linkedTaskGuards;

		[Token(Token = "0x400293B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If true the task will wait until the child task is available. If false then any unavailable child tasks will be skipped over")]
		public SharedBool waitUntilTaskAvailable;

		[Token(Token = "0x400293C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int executingTasks;

		[Token(Token = "0x400293D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool executing;

		[Token(Token = "0x6002F72")]
		[Address(RVA = "0x12ED3C0", Offset = "0x12ED3C0", VA = "0x12ED3C0", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F73")]
		[Address(RVA = "0x12ED434", Offset = "0x12ED434", VA = "0x12ED434", Slot = "38")]
		public override void OnChildStarted()
		{
		}

		[Token(Token = "0x6002F74")]
		[Address(RVA = "0x12ED4CC", Offset = "0x12ED4CC", VA = "0x12ED4CC", Slot = "40")]
		public override TaskStatus OverrideStatus(TaskStatus status)
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F75")]
		[Address(RVA = "0x12ED4A0", Offset = "0x12ED4A0", VA = "0x12ED4A0")]
		public void taskExecuting(bool increase)
		{
		}

		[Token(Token = "0x6002F76")]
		[Address(RVA = "0x12ED540", Offset = "0x12ED540", VA = "0x12ED540", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F77")]
		[Address(RVA = "0x12ED5B0", Offset = "0x12ED5B0", VA = "0x12ED5B0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F78")]
		[Address(RVA = "0x12ED5F0", Offset = "0x12ED5F0", VA = "0x12ED5F0")]
		public TaskGuard()
		{
		}
	}
	[Token(Token = "0x20006F3")]
	[TaskIcon("{SkinColor}UntilFailureIcon.png")]
	[TaskDescription("The until failure task will keep executing its child task until the child task returns failure.")]
	public class UntilFailure : Decorator
	{
		[Token(Token = "0x400293E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002F79")]
		[Address(RVA = "0x12ED5F8", Offset = "0x12ED5F8", VA = "0x12ED5F8", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F7A")]
		[Address(RVA = "0x12ED608", Offset = "0x12ED608", VA = "0x12ED608", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F7B")]
		[Address(RVA = "0x12ED610", Offset = "0x12ED610", VA = "0x12ED610", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F7C")]
		[Address(RVA = "0x12ED618", Offset = "0x12ED618", VA = "0x12ED618")]
		public UntilFailure()
		{
		}
	}
	[Token(Token = "0x20006F4")]
	[TaskDescription("The until success task will keep executing its child task until the child task returns success.")]
	[TaskIcon("{SkinColor}UntilSuccessIcon.png")]
	public class UntilSuccess : Decorator
	{
		[Token(Token = "0x400293F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TaskStatus executionStatus;

		[Token(Token = "0x6002F7D")]
		[Address(RVA = "0x12ED620", Offset = "0x12ED620", VA = "0x12ED620", Slot = "33")]
		public override bool CanExecute()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F7E")]
		[Address(RVA = "0x12ED630", Offset = "0x12ED630", VA = "0x12ED630", Slot = "36")]
		public override void OnChildExecuted(TaskStatus childStatus)
		{
		}

		[Token(Token = "0x6002F7F")]
		[Address(RVA = "0x12ED638", Offset = "0x12ED638", VA = "0x12ED638", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002F80")]
		[Address(RVA = "0x12ED640", Offset = "0x12ED640", VA = "0x12ED640")]
		public UntilSuccess()
		{
		}
	}
	[Token(Token = "0x20006F5")]
	[TaskIcon("{SkinColor}EntryIcon.png")]
	public class EntryTask : ParentTask
	{
		[Token(Token = "0x6002F81")]
		[Address(RVA = "0x12ED648", Offset = "0x12ED648", VA = "0x12ED648", Slot = "30")]
		public override int MaxChildren()
		{
			return default(int);
		}

		[Token(Token = "0x6002F82")]
		[Address(RVA = "0x12ED650", Offset = "0x12ED650", VA = "0x12ED650")]
		public EntryTask()
		{
		}
	}
	[Token(Token = "0x20006F6")]
	public class DiggingAreaGetClosestPoint : Action
	{
		[Token(Token = "0x4002940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SharedGameObject diggingAreaObject;

		[Token(Token = "0x4002941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SharedVector3 closestPointWorldPos;

		[Token(Token = "0x6002F83")]
		[Address(RVA = "0x12ED658", Offset = "0x12ED658", VA = "0x12ED658", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002F84")]
		[Address(RVA = "0x12ED724", Offset = "0x12ED724", VA = "0x12ED724")]
		public DiggingAreaGetClosestPoint()
		{
		}
	}
	[Token(Token = "0x20006F7")]
	public class DiggingAreaSphereCast : Action
	{
		[Token(Token = "0x4002942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SharedGameObject foundDiggingArea;

		[Token(Token = "0x4002943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SharedLayerMask diggingAreaLayer;

		[Token(Token = "0x4002944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SharedFloat castRadius;

		[Token(Token = "0x4002945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SharedVector3 hitPosition;

		[Token(Token = "0x4002946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit[] hits;

		[Token(Token = "0x6002F85")]
		[Address(RVA = "0x12ED72C", Offset = "0x12ED72C", VA = "0x12ED72C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002F86")]
		[Address(RVA = "0x12ED9F4", Offset = "0x12ED9F4", VA = "0x12ED9F4")]
		public DiggingAreaSphereCast()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityVector3
{
	[Token(Token = "0x20006F8")]
	[TaskCategory("Unity/Vector3")]
	[TaskDescription("Returns the angle between two Vector3s.")]
	public class Angle : Action
	{
		[Token(Token = "0x4002947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first Vector3")]
		public SharedVector3 firstVector3;

		[Token(Token = "0x4002948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second Vector3")]
		public SharedVector3 secondVector3;

		[Token(Token = "0x4002949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The angle")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x6002F87")]
		[Address(RVA = "0x12EDA70", Offset = "0x12EDA70", VA = "0x12EDA70", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F88")]
		[Address(RVA = "0x12EDC08", Offset = "0x12EDC08", VA = "0x12EDC08", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F89")]
		[Address(RVA = "0x12EDCC0", Offset = "0x12EDCC0", VA = "0x12EDCC0")]
		public Angle()
		{
		}
	}
	[Token(Token = "0x20006F9")]
	[TaskDescription("Clamps the magnitude of the Vector3.")]
	[TaskCategory("Unity/Vector3")]
	public class ClampMagnitude : Action
	{
		[Token(Token = "0x400294A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 to clamp the magnitude of")]
		public SharedVector3 vector3Variable;

		[Token(Token = "0x400294B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The max length of the magnitude")]
		public SharedFloat maxLength;

		[Token(Token = "0x400294C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The clamp magnitude resut")]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002F8A")]
		[Address(RVA = "0x12EDCC8", Offset = "0x12EDCC8", VA = "0x12EDCC8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F8B")]
		[Address(RVA = "0x12EDE14", Offset = "0x12EDE14", VA = "0x12EDE14", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F8C")]
		[Address(RVA = "0x12EDECC", Offset = "0x12EDECC", VA = "0x12EDECC")]
		public ClampMagnitude()
		{
		}
	}
	[Token(Token = "0x20006FA")]
	[TaskDescription("Returns the distance between two Vector3s.")]
	[TaskCategory("Unity/Vector3")]
	public class Distance : Action
	{
		[Token(Token = "0x400294D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first Vector3")]
		public SharedVector3 firstVector3;

		[Token(Token = "0x400294E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second Vector3")]
		public SharedVector3 secondVector3;

		[Token(Token = "0x400294F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The distance")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x6002F8D")]
		[Address(RVA = "0x12EDED4", Offset = "0x12EDED4", VA = "0x12EDED4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F8E")]
		[Address(RVA = "0x12EDFF0", Offset = "0x12EDFF0", VA = "0x12EDFF0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F8F")]
		[Address(RVA = "0x12EE0A8", Offset = "0x12EE0A8", VA = "0x12EE0A8")]
		public Distance()
		{
		}
	}
	[Token(Token = "0x20006FB")]
	[TaskCategory("Unity/Vector3")]
	[TaskDescription("Stores the dot product of two Vector3 values.")]
	public class Dot : Action
	{
		[Token(Token = "0x4002950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The left hand side of the dot product")]
		public SharedVector3 leftHandSide;

		[Token(Token = "0x4002951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The right hand side of the dot product")]
		public SharedVector3 rightHandSide;

		[Token(Token = "0x4002952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The dot product result")]
		public SharedFloat storeResult;

		[Token(Token = "0x6002F90")]
		[Address(RVA = "0x12EE0B0", Offset = "0x12EE0B0", VA = "0x12EE0B0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F91")]
		[Address(RVA = "0x12EE170", Offset = "0x12EE170", VA = "0x12EE170", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F92")]
		[Address(RVA = "0x12EE228", Offset = "0x12EE228", VA = "0x12EE228")]
		public Dot()
		{
		}
	}
	[Token(Token = "0x20006FC")]
	[TaskDescription("Stores the forward vector value.")]
	[TaskCategory("Unity/Vector3")]
	public class GetForwardVector : Action
	{
		[Token(Token = "0x4002953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002F93")]
		[Address(RVA = "0x12EE230", Offset = "0x12EE230", VA = "0x12EE230", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F94")]
		[Address(RVA = "0x12EE2C4", Offset = "0x12EE2C4", VA = "0x12EE2C4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F95")]
		[Address(RVA = "0x12EE324", Offset = "0x12EE324", VA = "0x12EE324")]
		public GetForwardVector()
		{
		}
	}
	[Token(Token = "0x20006FD")]
	[TaskDescription("Stores the magnitude of the Vector3.")]
	[TaskCategory("Unity/Vector3")]
	public class GetMagnitude : Action
	{
		[Token(Token = "0x4002954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 to get the magnitude of")]
		public SharedVector3 vector3Variable;

		[Token(Token = "0x4002955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The magnitude of the vector")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x6002F96")]
		[Address(RVA = "0x12EE32C", Offset = "0x12EE32C", VA = "0x12EE32C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F97")]
		[Address(RVA = "0x12EE418", Offset = "0x12EE418", VA = "0x12EE418", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F98")]
		[Address(RVA = "0x12EE490", Offset = "0x12EE490", VA = "0x12EE490")]
		public GetMagnitude()
		{
		}
	}
	[Token(Token = "0x20006FE")]
	[TaskCategory("Unity/Vector3")]
	[TaskDescription("Stores the right vector value.")]
	public class GetRightVector : Action
	{
		[Token(Token = "0x4002956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002F99")]
		[Address(RVA = "0x12EE498", Offset = "0x12EE498", VA = "0x12EE498", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F9A")]
		[Address(RVA = "0x12EE52C", Offset = "0x12EE52C", VA = "0x12EE52C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F9B")]
		[Address(RVA = "0x12EE58C", Offset = "0x12EE58C", VA = "0x12EE58C")]
		public GetRightVector()
		{
		}
	}
	[Token(Token = "0x20006FF")]
	[TaskDescription("Stores the square magnitude of the Vector3.")]
	[TaskCategory("Unity/Vector3")]
	public class GetSqrMagnitude : Action
	{
		[Token(Token = "0x4002957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 to get the square magnitude of")]
		public SharedVector3 vector3Variable;

		[Token(Token = "0x4002958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The square magnitude of the vector")]
		public SharedFloat storeResult;

		[Token(Token = "0x6002F9C")]
		[Address(RVA = "0x12EE594", Offset = "0x12EE594", VA = "0x12EE594", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002F9D")]
		[Address(RVA = "0x12EE628", Offset = "0x12EE628", VA = "0x12EE628", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002F9E")]
		[Address(RVA = "0x12EE6A0", Offset = "0x12EE6A0", VA = "0x12EE6A0")]
		public GetSqrMagnitude()
		{
		}
	}
	[Token(Token = "0x2000700")]
	[TaskDescription("Stores the up vector value.")]
	[TaskCategory("Unity/Vector3")]
	public class GetUpVector : Action
	{
		[Token(Token = "0x4002959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002F9F")]
		[Address(RVA = "0x12EE6A8", Offset = "0x12EE6A8", VA = "0x12EE6A8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FA0")]
		[Address(RVA = "0x12EE73C", Offset = "0x12EE73C", VA = "0x12EE73C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FA1")]
		[Address(RVA = "0x12EE79C", Offset = "0x12EE79C", VA = "0x12EE79C")]
		public GetUpVector()
		{
		}
	}
	[Token(Token = "0x2000701")]
	[TaskDescription("Stores the Vector2 value of the Vector3.")]
	[TaskCategory("Unity/Vector3")]
	public class GetVector2 : Action
	{
		[Token(Token = "0x400295A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 to get the Vector2 value of")]
		public SharedVector3 vector3Variable;

		[Token(Token = "0x400295B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 value")]
		[RequiredField]
		public SharedVector2 storeResult;

		[Token(Token = "0x6002FA2")]
		[Address(RVA = "0x12EE7A4", Offset = "0x12EE7A4", VA = "0x12EE7A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FA3")]
		[Address(RVA = "0x12EE824", Offset = "0x12EE824", VA = "0x12EE824", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FA4")]
		[Address(RVA = "0x12EE8CC", Offset = "0x12EE8CC", VA = "0x12EE8CC")]
		public GetVector2()
		{
		}
	}
	[Token(Token = "0x2000702")]
	[TaskCategory("Unity/Vector3")]
	[TaskDescription("Stores the X, Y, and Z values of the Vector3.")]
	public class GetXYZ : Action
	{
		[Token(Token = "0x400295C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 to get the values of")]
		public SharedVector3 vector3Variable;

		[Token(Token = "0x400295D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The X value")]
		[RequiredField]
		public SharedFloat storeX;

		[Token(Token = "0x400295E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Y value")]
		[RequiredField]
		public SharedFloat storeY;

		[Token(Token = "0x400295F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Z value")]
		[RequiredField]
		public SharedFloat storeZ;

		[Token(Token = "0x6002FA5")]
		[Address(RVA = "0x12EE8D4", Offset = "0x12EE8D4", VA = "0x12EE8D4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FA6")]
		[Address(RVA = "0x12EE9AC", Offset = "0x12EE9AC", VA = "0x12EE9AC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FA7")]
		[Address(RVA = "0x12EEA54", Offset = "0x12EEA54", VA = "0x12EEA54")]
		public GetXYZ()
		{
		}
	}
	[Token(Token = "0x2000703")]
	[TaskCategory("Unity/Vector3")]
	[TaskDescription("Lerp the Vector3 by an amount.")]
	public class Lerp : Action
	{
		[Token(Token = "0x4002960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The from value")]
		public SharedVector3 fromVector3;

		[Token(Token = "0x4002961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The to value")]
		public SharedVector3 toVector3;

		[Token(Token = "0x4002962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The amount to lerp")]
		public SharedFloat lerpAmount;

		[Token(Token = "0x4002963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The lerp resut")]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002FA8")]
		[Address(RVA = "0x12EEA5C", Offset = "0x12EEA5C", VA = "0x12EEA5C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FA9")]
		[Address(RVA = "0x12EEB78", Offset = "0x12EEB78", VA = "0x12EEB78", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FAA")]
		[Address(RVA = "0x12EEC14", Offset = "0x12EEC14", VA = "0x12EEC14")]
		public Lerp()
		{
		}
	}
	[Token(Token = "0x2000704")]
	[TaskCategory("Unity/Vector3")]
	[TaskDescription("Move from the current position to the target position.")]
	public class MoveTowards : Action
	{
		[Token(Token = "0x4002964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The current position")]
		public SharedVector3 currentPosition;

		[Token(Token = "0x4002965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The target position")]
		public SharedVector3 targetPosition;

		[Token(Token = "0x4002966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The movement speed")]
		public SharedFloat speed;

		[Token(Token = "0x4002967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The move resut")]
		[RequiredField]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002FAB")]
		[Address(RVA = "0x12EEC1C", Offset = "0x12EEC1C", VA = "0x12EEC1C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FAC")]
		[Address(RVA = "0x12EEDF0", Offset = "0x12EEDF0", VA = "0x12EEDF0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FAD")]
		[Address(RVA = "0x12EEEE8", Offset = "0x12EEEE8", VA = "0x12EEEE8")]
		public MoveTowards()
		{
		}
	}
	[Token(Token = "0x2000705")]
	[TaskDescription("Multiply the Vector3 by a float.")]
	[TaskCategory("Unity/Vector3")]
	public class Multiply : Action
	{
		[Token(Token = "0x4002968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 to multiply of")]
		public SharedVector3 vector3Variable;

		[Token(Token = "0x4002969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to multiply the Vector3 of")]
		public SharedFloat multiplyBy;

		[Token(Token = "0x400296A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The multiplication resut")]
		[RequiredField]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002FAE")]
		[Address(RVA = "0x12EEEF0", Offset = "0x12EEEF0", VA = "0x12EEEF0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FAF")]
		[Address(RVA = "0x12EEFC0", Offset = "0x12EEFC0", VA = "0x12EEFC0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FB0")]
		[Address(RVA = "0x12EF078", Offset = "0x12EF078", VA = "0x12EF078")]
		public Multiply()
		{
		}
	}
	[Token(Token = "0x2000706")]
	[TaskDescription("Normalize the Vector3.")]
	[TaskCategory("Unity/Vector3")]
	public class Normalize : Action
	{
		[Token(Token = "0x400296B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 to normalize")]
		public SharedVector3 vector3Variable;

		[Token(Token = "0x400296C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The normalized resut")]
		[RequiredField]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002FB1")]
		[Address(RVA = "0x12EF080", Offset = "0x12EF080", VA = "0x12EF080", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FB2")]
		[Address(RVA = "0x12EF1C8", Offset = "0x12EF1C8", VA = "0x12EF1C8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FB3")]
		[Address(RVA = "0x12EF268", Offset = "0x12EF268", VA = "0x12EF268")]
		public Normalize()
		{
		}
	}
	[Token(Token = "0x2000707")]
	[TaskDescription("Performs a math operation on two Vector3s: Add, Subtract, Multiply, Divide, Min, or Max.")]
	[TaskCategory("Unity/Vector3")]
	public class Operator : Action
	{
		[Token(Token = "0x2000708")]
		public enum Operation
		{
			[Token(Token = "0x4002972")]
			Add,
			[Token(Token = "0x4002973")]
			Subtract,
			[Token(Token = "0x4002974")]
			Scale
		}

		[Token(Token = "0x400296D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The operation to perform")]
		public Operation operation;

		[Token(Token = "0x400296E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first Vector3")]
		public SharedVector3 firstVector3;

		[Token(Token = "0x400296F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second Vector3")]
		public SharedVector3 secondVector3;

		[Token(Token = "0x4002970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The variable to store the result")]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002FB4")]
		[Address(RVA = "0x12EF270", Offset = "0x12EF270", VA = "0x12EF270", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FB5")]
		[Address(RVA = "0x12EF3C8", Offset = "0x12EF3C8", VA = "0x12EF3C8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FB6")]
		[Address(RVA = "0x12EF4AC", Offset = "0x12EF4AC", VA = "0x12EF4AC")]
		public Operator()
		{
		}
	}
	[Token(Token = "0x2000709")]
	[TaskCategory("Unity/Vector3")]
	[TaskDescription("Rotate the current rotation to the target rotation.")]
	public class RotateTowards : Action
	{
		[Token(Token = "0x4002975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The current rotation in euler angles")]
		public SharedVector3 currentRotation;

		[Token(Token = "0x4002976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The target rotation in euler angles")]
		public SharedVector3 targetRotation;

		[Token(Token = "0x4002977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum delta of the degrees")]
		public SharedFloat maxDegreesDelta;

		[Token(Token = "0x4002978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The maximum delta of the magnitude")]
		public SharedFloat maxMagnitudeDelta;

		[Token(Token = "0x4002979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The rotation resut")]
		[RequiredField]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002FB7")]
		[Address(RVA = "0x12EF4B4", Offset = "0x12EF4B4", VA = "0x12EF4B4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FB8")]
		[Address(RVA = "0x12EF5F4", Offset = "0x12EF5F4", VA = "0x12EF5F4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FB9")]
		[Address(RVA = "0x12EF704", Offset = "0x12EF704", VA = "0x12EF704")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x200070A")]
	[TaskCategory("Unity/Vector3")]
	[TaskDescription("Sets the value of the Vector3.")]
	public class SetValue : Action
	{
		[Token(Token = "0x400297A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 to get the values of")]
		public SharedVector3 vector3Value;

		[Token(Token = "0x400297B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector3 to set the values of")]
		public SharedVector3 vector3Variable;

		[Token(Token = "0x6002FBA")]
		[Address(RVA = "0x12EF70C", Offset = "0x12EF70C", VA = "0x12EF70C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FBB")]
		[Address(RVA = "0x12EF78C", Offset = "0x12EF78C", VA = "0x12EF78C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FBC")]
		[Address(RVA = "0x12EF82C", Offset = "0x12EF82C", VA = "0x12EF82C")]
		public SetValue()
		{
		}
	}
	[Token(Token = "0x200070B")]
	[TaskDescription("Sets the X, Y, and Z values of the Vector3.")]
	[TaskCategory("Unity/Vector3")]
	public class SetXYZ : Action
	{
		[Token(Token = "0x400297C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 to set the values of")]
		public SharedVector3 vector3Variable;

		[Token(Token = "0x400297D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The X value. Set to None to have the value ignored")]
		public SharedFloat xValue;

		[Token(Token = "0x400297E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Y value. Set to None to have the value ignored")]
		public SharedFloat yValue;

		[Token(Token = "0x400297F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Z value. Set to None to have the value ignored")]
		public SharedFloat zValue;

		[Token(Token = "0x6002FBD")]
		[Address(RVA = "0x12EF834", Offset = "0x12EF834", VA = "0x12EF834", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FBE")]
		[Address(RVA = "0x12EF964", Offset = "0x12EF964", VA = "0x12EF964", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FBF")]
		[Address(RVA = "0x12EFA00", Offset = "0x12EFA00", VA = "0x12EFA00")]
		public SetXYZ()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityVector2
{
	[Token(Token = "0x200070C")]
	[TaskCategory("Unity/Vector2")]
	[TaskDescription("Clamps the magnitude of the Vector2.")]
	public class ClampMagnitude : Action
	{
		[Token(Token = "0x4002980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to clamp the magnitude of")]
		public SharedVector2 vector2Variable;

		[Token(Token = "0x4002981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The max length of the magnitude")]
		public SharedFloat maxLength;

		[Token(Token = "0x4002982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The clamp magnitude resut")]
		public SharedVector2 storeResult;

		[Token(Token = "0x6002FC0")]
		[Address(RVA = "0x12EFA08", Offset = "0x12EFA08", VA = "0x12EFA08", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FC1")]
		[Address(RVA = "0x12EFB34", Offset = "0x12EFB34", VA = "0x12EFB34", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FC2")]
		[Address(RVA = "0x12EFBE4", Offset = "0x12EFBE4", VA = "0x12EFBE4")]
		public ClampMagnitude()
		{
		}
	}
	[Token(Token = "0x200070D")]
	[TaskCategory("Unity/Vector2")]
	[TaskDescription("Returns the distance between two Vector2s.")]
	public class Distance : Action
	{
		[Token(Token = "0x4002983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first Vector2")]
		public SharedVector2 firstVector2;

		[Token(Token = "0x4002984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second Vector2")]
		public SharedVector2 secondVector2;

		[Token(Token = "0x4002985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The distance")]
		public SharedFloat storeResult;

		[Token(Token = "0x6002FC3")]
		[Address(RVA = "0x12EFBEC", Offset = "0x12EFBEC", VA = "0x12EFBEC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FC4")]
		[Address(RVA = "0x12EFCEC", Offset = "0x12EFCEC", VA = "0x12EFCEC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FC5")]
		[Address(RVA = "0x12EFD9C", Offset = "0x12EFD9C", VA = "0x12EFD9C")]
		public Distance()
		{
		}
	}
	[Token(Token = "0x200070E")]
	[TaskCategory("Unity/Vector2")]
	[TaskDescription("Stores the dot product of two Vector2 values.")]
	public class Dot : Action
	{
		[Token(Token = "0x4002986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The left hand side of the dot product")]
		public SharedVector2 leftHandSide;

		[Token(Token = "0x4002987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The right hand side of the dot product")]
		public SharedVector2 rightHandSide;

		[Token(Token = "0x4002988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The dot product result")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x6002FC6")]
		[Address(RVA = "0x12EFDA4", Offset = "0x12EFDA4", VA = "0x12EFDA4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FC7")]
		[Address(RVA = "0x12EFE50", Offset = "0x12EFE50", VA = "0x12EFE50", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FC8")]
		[Address(RVA = "0x12EFF00", Offset = "0x12EFF00", VA = "0x12EFF00")]
		public Dot()
		{
		}
	}
	[Token(Token = "0x200070F")]
	[TaskDescription("Stores the magnitude of the Vector2.")]
	[TaskCategory("Unity/Vector2")]
	public class GetMagnitude : Action
	{
		[Token(Token = "0x4002989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to get the magnitude of")]
		public SharedVector2 vector2Variable;

		[Token(Token = "0x400298A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The magnitude of the vector")]
		public SharedFloat storeResult;

		[Token(Token = "0x6002FC9")]
		[Address(RVA = "0x12EFF08", Offset = "0x12EFF08", VA = "0x12EFF08", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FCA")]
		[Address(RVA = "0x12EFFE0", Offset = "0x12EFFE0", VA = "0x12EFFE0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FCB")]
		[Address(RVA = "0x12F0054", Offset = "0x12F0054", VA = "0x12F0054")]
		public GetMagnitude()
		{
		}
	}
	[Token(Token = "0x2000710")]
	[TaskDescription("Stores the right vector value.")]
	[TaskCategory("Unity/Vector2")]
	public class GetRightVector : Action
	{
		[Token(Token = "0x400298B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedVector2 storeResult;

		[Token(Token = "0x6002FCC")]
		[Address(RVA = "0x12F005C", Offset = "0x12F005C", VA = "0x12F005C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FCD")]
		[Address(RVA = "0x12F00EC", Offset = "0x12F00EC", VA = "0x12F00EC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FCE")]
		[Address(RVA = "0x12F0148", Offset = "0x12F0148", VA = "0x12F0148")]
		public GetRightVector()
		{
		}
	}
	[Token(Token = "0x2000711")]
	[TaskDescription("Stores the square magnitude of the Vector2.")]
	[TaskCategory("Unity/Vector2")]
	public class GetSqrMagnitude : Action
	{
		[Token(Token = "0x400298C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to get the square magnitude of")]
		public SharedVector2 vector2Variable;

		[Token(Token = "0x400298D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The square magnitude of the vector")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x6002FCF")]
		[Address(RVA = "0x12F0150", Offset = "0x12F0150", VA = "0x12F0150", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FD0")]
		[Address(RVA = "0x12F01DC", Offset = "0x12F01DC", VA = "0x12F01DC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FD1")]
		[Address(RVA = "0x12F0250", Offset = "0x12F0250", VA = "0x12F0250")]
		public GetSqrMagnitude()
		{
		}
	}
	[Token(Token = "0x2000712")]
	[TaskDescription("Stores the up vector value.")]
	[TaskCategory("Unity/Vector2")]
	public class GetUpVector : Action
	{
		[Token(Token = "0x400298E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedVector2 storeResult;

		[Token(Token = "0x6002FD2")]
		[Address(RVA = "0x12F0258", Offset = "0x12F0258", VA = "0x12F0258", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FD3")]
		[Address(RVA = "0x12F02E8", Offset = "0x12F02E8", VA = "0x12F02E8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FD4")]
		[Address(RVA = "0x12F0344", Offset = "0x12F0344", VA = "0x12F0344")]
		public GetUpVector()
		{
		}
	}
	[Token(Token = "0x2000713")]
	[TaskDescription("Stores the Vector3 value of the Vector2.")]
	[TaskCategory("Unity/Vector2")]
	public class GetVector3 : Action
	{
		[Token(Token = "0x400298F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to get the Vector3 value of")]
		public SharedVector2 vector3Variable;

		[Token(Token = "0x4002990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector3 value")]
		[RequiredField]
		public SharedVector3 storeResult;

		[Token(Token = "0x6002FD5")]
		[Address(RVA = "0x12F034C", Offset = "0x12F034C", VA = "0x12F034C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FD6")]
		[Address(RVA = "0x12F03D0", Offset = "0x12F03D0", VA = "0x12F03D0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FD7")]
		[Address(RVA = "0x12F0478", Offset = "0x12F0478", VA = "0x12F0478")]
		public GetVector3()
		{
		}
	}
	[Token(Token = "0x2000714")]
	[TaskDescription("Stores the X and Y values of the Vector2.")]
	[TaskCategory("Unity/Vector2")]
	public class GetXY : Action
	{
		[Token(Token = "0x4002991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to get the values of")]
		public SharedVector2 vector2Variable;

		[Token(Token = "0x4002992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The X value")]
		public SharedFloat storeX;

		[Token(Token = "0x4002993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The Y value")]
		public SharedFloat storeY;

		[Token(Token = "0x6002FD8")]
		[Address(RVA = "0x12F0480", Offset = "0x12F0480", VA = "0x12F0480", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FD9")]
		[Address(RVA = "0x12F0530", Offset = "0x12F0530", VA = "0x12F0530", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FDA")]
		[Address(RVA = "0x12F05B8", Offset = "0x12F05B8", VA = "0x12F05B8")]
		public GetXY()
		{
		}
	}
	[Token(Token = "0x2000715")]
	[TaskDescription("Lerp the Vector2 by an amount.")]
	[TaskCategory("Unity/Vector2")]
	public class Lerp : Action
	{
		[Token(Token = "0x4002994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The from value")]
		public SharedVector2 fromVector2;

		[Token(Token = "0x4002995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The to value")]
		public SharedVector2 toVector2;

		[Token(Token = "0x4002996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The amount to lerp")]
		public SharedFloat lerpAmount;

		[Token(Token = "0x4002997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The lerp resut")]
		public SharedVector2 storeResult;

		[Token(Token = "0x6002FDB")]
		[Address(RVA = "0x12F05C0", Offset = "0x12F05C0", VA = "0x12F05C0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FDC")]
		[Address(RVA = "0x12F06C0", Offset = "0x12F06C0", VA = "0x12F06C0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FDD")]
		[Address(RVA = "0x12F07AC", Offset = "0x12F07AC", VA = "0x12F07AC")]
		public Lerp()
		{
		}
	}
	[Token(Token = "0x2000716")]
	[TaskCategory("Unity/Vector2")]
	[TaskDescription("Move from the current position to the target position.")]
	public class MoveTowards : Action
	{
		[Token(Token = "0x4002998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The current position")]
		public SharedVector2 currentPosition;

		[Token(Token = "0x4002999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The target position")]
		public SharedVector2 targetPosition;

		[Token(Token = "0x400299A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The movement speed")]
		public SharedFloat speed;

		[Token(Token = "0x400299B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The move resut")]
		[RequiredField]
		public SharedVector2 storeResult;

		[Token(Token = "0x6002FDE")]
		[Address(RVA = "0x12F07B4", Offset = "0x12F07B4", VA = "0x12F07B4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FDF")]
		[Address(RVA = "0x12F094C", Offset = "0x12F094C", VA = "0x12F094C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FE0")]
		[Address(RVA = "0x12F0A38", Offset = "0x12F0A38", VA = "0x12F0A38")]
		public MoveTowards()
		{
		}
	}
	[Token(Token = "0x2000717")]
	[TaskCategory("Unity/Vector2")]
	[TaskDescription("Multiply the Vector2 by a float.")]
	public class Multiply : Action
	{
		[Token(Token = "0x400299C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to multiply of")]
		public SharedVector2 vector2Variable;

		[Token(Token = "0x400299D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to multiply the Vector2 of")]
		public SharedFloat multiplyBy;

		[Token(Token = "0x400299E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The multiplication resut")]
		[RequiredField]
		public SharedVector2 storeResult;

		[Token(Token = "0x6002FE1")]
		[Address(RVA = "0x12F0A40", Offset = "0x12F0A40", VA = "0x12F0A40", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FE2")]
		[Address(RVA = "0x12F0B00", Offset = "0x12F0B00", VA = "0x12F0B00", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FE3")]
		[Address(RVA = "0x12F0B88", Offset = "0x12F0B88", VA = "0x12F0B88")]
		public Multiply()
		{
		}
	}
	[Token(Token = "0x2000718")]
	[TaskCategory("Unity/Vector2")]
	[TaskDescription("Normalize the Vector2.")]
	public class Normalize : Action
	{
		[Token(Token = "0x400299F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to normalize")]
		public SharedVector2 vector2Variable;

		[Token(Token = "0x40029A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The normalized resut")]
		[RequiredField]
		public SharedVector2 storeResult;

		[Token(Token = "0x6002FE4")]
		[Address(RVA = "0x12F0B90", Offset = "0x12F0B90", VA = "0x12F0B90", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FE5")]
		[Address(RVA = "0x12F0CBC", Offset = "0x12F0CBC", VA = "0x12F0CBC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FE6")]
		[Address(RVA = "0x12F0D54", Offset = "0x12F0D54", VA = "0x12F0D54")]
		public Normalize()
		{
		}
	}
	[Token(Token = "0x2000719")]
	[TaskCategory("Unity/Vector2")]
	[TaskDescription("Performs a math operation on two Vector2s: Add, Subtract, Multiply, Divide, Min, or Max.")]
	public class Operator : Action
	{
		[Token(Token = "0x200071A")]
		public enum Operation
		{
			[Token(Token = "0x40029A6")]
			Add,
			[Token(Token = "0x40029A7")]
			Subtract,
			[Token(Token = "0x40029A8")]
			Scale
		}

		[Token(Token = "0x40029A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The operation to perform")]
		public Operation operation;

		[Token(Token = "0x40029A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first Vector2")]
		public SharedVector2 firstVector2;

		[Token(Token = "0x40029A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second Vector2")]
		public SharedVector2 secondVector2;

		[Token(Token = "0x40029A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The variable to store the result")]
		public SharedVector2 storeResult;

		[Token(Token = "0x6002FE7")]
		[Address(RVA = "0x12F0D5C", Offset = "0x12F0D5C", VA = "0x12F0D5C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FE8")]
		[Address(RVA = "0x12F0E94", Offset = "0x12F0E94", VA = "0x12F0E94", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FE9")]
		[Address(RVA = "0x12F0F6C", Offset = "0x12F0F6C", VA = "0x12F0F6C")]
		public Operator()
		{
		}
	}
	[Token(Token = "0x200071B")]
	[TaskCategory("Unity/Vector2")]
	[TaskDescription("Sets the value of the Vector2.")]
	public class SetValue : Action
	{
		[Token(Token = "0x40029A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to get the values of")]
		public SharedVector2 vector2Value;

		[Token(Token = "0x40029AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 to set the values of")]
		public SharedVector2 vector2Variable;

		[Token(Token = "0x6002FEA")]
		[Address(RVA = "0x12F0F74", Offset = "0x12F0F74", VA = "0x12F0F74", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FEB")]
		[Address(RVA = "0x12F0FF4", Offset = "0x12F0FF4", VA = "0x12F0FF4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FEC")]
		[Address(RVA = "0x12F108C", Offset = "0x12F108C", VA = "0x12F108C")]
		public SetValue()
		{
		}
	}
	[Token(Token = "0x200071C")]
	[TaskCategory("Unity/Vector2")]
	[TaskDescription("Sets the X and Y values of the Vector2.")]
	public class SetXY : Action
	{
		[Token(Token = "0x40029AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to set the values of")]
		public SharedVector2 vector2Variable;

		[Token(Token = "0x40029AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The X value. Set to None to have the value ignored")]
		public SharedFloat xValue;

		[Token(Token = "0x40029AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Y value. Set to None to have the value ignored")]
		public SharedFloat yValue;

		[Token(Token = "0x6002FED")]
		[Address(RVA = "0x12F1094", Offset = "0x12F1094", VA = "0x12F1094", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FEE")]
		[Address(RVA = "0x12F118C", Offset = "0x12F118C", VA = "0x12F118C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FEF")]
		[Address(RVA = "0x12F1218", Offset = "0x12F1218", VA = "0x12F1218")]
		public SetXY()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityTransform
{
	[Token(Token = "0x200071D")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Finds a transform by name. Returns success if an object is found.")]
	public class Find : Action
	{
		[Token(Token = "0x40029AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The transform name to find")]
		public SharedString transformName;

		[Token(Token = "0x40029B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The object found by name")]
		[RequiredField]
		public SharedTransform storeValue;

		[Token(Token = "0x40029B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform targetTransform;

		[Token(Token = "0x40029B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x6002FF0")]
		[Address(RVA = "0x12F1220", Offset = "0x12F1220", VA = "0x12F1220", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002FF1")]
		[Address(RVA = "0x12F1324", Offset = "0x12F1324", VA = "0x12F1324", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FF2")]
		[Address(RVA = "0x12F14A0", Offset = "0x12F14A0", VA = "0x12F14A0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FF3")]
		[Address(RVA = "0x12F14D8", Offset = "0x12F14D8", VA = "0x12F14D8")]
		public Find()
		{
		}
	}
	[Token(Token = "0x200071E")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Gets the Angle between a GameObject's forward direction and a target. Returns Success.")]
	public class GetAngleToTarget : Action
	{
		[Token(Token = "0x40029B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The target object to measure the angle to. If null the targetPosition will be used.")]
		public SharedGameObject targetObject;

		[Token(Token = "0x40029B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The world position to measure an angle to. If the targetObject is also not null, this value is used as an offset from that object's position.")]
		public SharedVector3 targetPosition;

		[Token(Token = "0x40029B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore height differences when calculating the angle?")]
		public SharedBool ignoreHeight;

		[Token(Token = "0x40029B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The angle to the target")]
		public SharedFloat storeValue;

		[Token(Token = "0x40029B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform targetTransform;

		[Token(Token = "0x40029B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject prevGameObject;

		[Token(Token = "0x6002FF4")]
		[Address(RVA = "0x12F14E0", Offset = "0x12F14E0", VA = "0x12F14E0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002FF5")]
		[Address(RVA = "0x12F15E4", Offset = "0x12F15E4", VA = "0x12F15E4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FF6")]
		[Address(RVA = "0x12F18FC", Offset = "0x12F18FC", VA = "0x12F18FC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FF7")]
		[Address(RVA = "0x12F19A8", Offset = "0x12F19A8", VA = "0x12F19A8")]
		public GetAngleToTarget()
		{
		}
	}
	[Token(Token = "0x200071F")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Stores the transform child at the specified index. Returns Success.")]
	public class GetChild : Action
	{
		[Token(Token = "0x40029BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index of the child")]
		public SharedInt index;

		[Token(Token = "0x40029BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The child of the Transform")]
		[RequiredField]
		public SharedTransform storeValue;

		[Token(Token = "0x40029BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform targetTransform;

		[Token(Token = "0x40029BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x6002FF8")]
		[Address(RVA = "0x12F19D8", Offset = "0x12F19D8", VA = "0x12F19D8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002FF9")]
		[Address(RVA = "0x12F1ADC", Offset = "0x12F1ADC", VA = "0x12F1ADC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FFA")]
		[Address(RVA = "0x12F1BFC", Offset = "0x12F1BFC", VA = "0x12F1BFC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FFB")]
		[Address(RVA = "0x12F1C3C", Offset = "0x12F1C3C", VA = "0x12F1C3C")]
		public GetChild()
		{
		}
	}
	[Token(Token = "0x2000720")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Stores the number of children a Transform has. Returns Success.")]
	public class GetChildCount : Action
	{
		[Token(Token = "0x40029BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The number of children")]
		[RequiredField]
		public SharedInt storeValue;

		[Token(Token = "0x40029C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6002FFC")]
		[Address(RVA = "0x12F1C44", Offset = "0x12F1C44", VA = "0x12F1C44", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002FFD")]
		[Address(RVA = "0x12F1D48", Offset = "0x12F1D48", VA = "0x12F1D48", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6002FFE")]
		[Address(RVA = "0x12F1E40", Offset = "0x12F1E40", VA = "0x12F1E40", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6002FFF")]
		[Address(RVA = "0x12F1E70", Offset = "0x12F1E70", VA = "0x12F1E70")]
		public GetChildCount()
		{
		}
	}
	[Token(Token = "0x2000721")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Stores the euler angles of the Transform. Returns Success.")]
	public class GetEulerAngles : Action
	{
		[Token(Token = "0x40029C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The euler angles of the Transform")]
		public SharedVector3 storeValue;

		[Token(Token = "0x40029C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003000")]
		[Address(RVA = "0x12F1E78", Offset = "0x12F1E78", VA = "0x12F1E78", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003001")]
		[Address(RVA = "0x12F1F7C", Offset = "0x12F1F7C", VA = "0x12F1F7C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003002")]
		[Address(RVA = "0x12F2070", Offset = "0x12F2070", VA = "0x12F2070", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003003")]
		[Address(RVA = "0x12F20DC", Offset = "0x12F20DC", VA = "0x12F20DC")]
		public GetEulerAngles()
		{
		}
	}
	[Token(Token = "0x2000722")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Stores the forward vector of the Transform. Returns Success.")]
	public class GetForwardVector : Action
	{
		[Token(Token = "0x40029C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The position of the Transform")]
		public SharedVector3 storeValue;

		[Token(Token = "0x40029C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003004")]
		[Address(RVA = "0x12F20E4", Offset = "0x12F20E4", VA = "0x12F20E4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003005")]
		[Address(RVA = "0x12F21E8", Offset = "0x12F21E8", VA = "0x12F21E8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003006")]
		[Address(RVA = "0x12F22DC", Offset = "0x12F22DC", VA = "0x12F22DC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003007")]
		[Address(RVA = "0x12F2348", Offset = "0x12F2348", VA = "0x12F2348")]
		public GetForwardVector()
		{
		}
	}
	[Token(Token = "0x2000723")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Stores the local euler angles of the Transform. Returns Success.")]
	public class GetLocalEulerAngles : Action
	{
		[Token(Token = "0x40029CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The local euler angles of the Transform")]
		public SharedVector3 storeValue;

		[Token(Token = "0x40029CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003008")]
		[Address(RVA = "0x12F2350", Offset = "0x12F2350", VA = "0x12F2350", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003009")]
		[Address(RVA = "0x12F2454", Offset = "0x12F2454", VA = "0x12F2454", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600300A")]
		[Address(RVA = "0x12F2548", Offset = "0x12F2548", VA = "0x12F2548", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600300B")]
		[Address(RVA = "0x12F25B4", Offset = "0x12F25B4", VA = "0x12F25B4")]
		public GetLocalEulerAngles()
		{
		}
	}
	[Token(Token = "0x2000724")]
	[TaskDescription("Stores the local position of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class GetLocalPosition : Action
	{
		[Token(Token = "0x40029CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The local position of the Transform")]
		public SharedVector3 storeValue;

		[Token(Token = "0x40029D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600300C")]
		[Address(RVA = "0x12F25BC", Offset = "0x12F25BC", VA = "0x12F25BC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600300D")]
		[Address(RVA = "0x12F26C0", Offset = "0x12F26C0", VA = "0x12F26C0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600300E")]
		[Address(RVA = "0x12F27B4", Offset = "0x12F27B4", VA = "0x12F27B4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600300F")]
		[Address(RVA = "0x12F2820", Offset = "0x12F2820", VA = "0x12F2820")]
		public GetLocalPosition()
		{
		}
	}
	[Token(Token = "0x2000725")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Stores the local rotation of the Transform. Returns Success.")]
	public class GetLocalRotation : Action
	{
		[Token(Token = "0x40029D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The local rotation of the Transform")]
		public SharedQuaternion storeValue;

		[Token(Token = "0x40029D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003010")]
		[Address(RVA = "0x12F2828", Offset = "0x12F2828", VA = "0x12F2828", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003011")]
		[Address(RVA = "0x12F292C", Offset = "0x12F292C", VA = "0x12F292C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003012")]
		[Address(RVA = "0x12F2A20", Offset = "0x12F2A20", VA = "0x12F2A20", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003013")]
		[Address(RVA = "0x12F2A8C", Offset = "0x12F2A8C", VA = "0x12F2A8C")]
		public GetLocalRotation()
		{
		}
	}
	[Token(Token = "0x2000726")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Stores the local scale of the Transform. Returns Success.")]
	public class GetLocalScale : Action
	{
		[Token(Token = "0x40029D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The local scale of the Transform")]
		[RequiredField]
		public SharedVector3 storeValue;

		[Token(Token = "0x40029D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003014")]
		[Address(RVA = "0x12F2A94", Offset = "0x12F2A94", VA = "0x12F2A94", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003015")]
		[Address(RVA = "0x12F2B98", Offset = "0x12F2B98", VA = "0x12F2B98", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003016")]
		[Address(RVA = "0x12F2C8C", Offset = "0x12F2C8C", VA = "0x12F2C8C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003017")]
		[Address(RVA = "0x12F2CF8", Offset = "0x12F2CF8", VA = "0x12F2CF8")]
		public GetLocalScale()
		{
		}
	}
	[Token(Token = "0x2000727")]
	[TaskDescription("Stores the parent of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class GetParent : Action
	{
		[Token(Token = "0x40029DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The parent of the Transform")]
		[RequiredField]
		public SharedTransform storeValue;

		[Token(Token = "0x40029DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003018")]
		[Address(RVA = "0x12F2D00", Offset = "0x12F2D00", VA = "0x12F2D00", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003019")]
		[Address(RVA = "0x12F2E04", Offset = "0x12F2E04", VA = "0x12F2E04", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600301A")]
		[Address(RVA = "0x12F2EFC", Offset = "0x12F2EFC", VA = "0x12F2EFC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600301B")]
		[Address(RVA = "0x12F2F24", Offset = "0x12F2F24", VA = "0x12F2F24")]
		public GetParent()
		{
		}
	}
	[Token(Token = "0x2000728")]
	[TaskDescription("Stores the position of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class GetPosition : Action
	{
		[Token(Token = "0x40029DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Can the target GameObject be empty?")]
		[RequiredField]
		public SharedVector3 storeValue;

		[Token(Token = "0x40029E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600301C")]
		[Address(RVA = "0x12F2F2C", Offset = "0x12F2F2C", VA = "0x12F2F2C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600301D")]
		[Address(RVA = "0x12F3030", Offset = "0x12F3030", VA = "0x12F3030", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600301E")]
		[Address(RVA = "0x12F3124", Offset = "0x12F3124", VA = "0x12F3124", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600301F")]
		[Address(RVA = "0x12F3190", Offset = "0x12F3190", VA = "0x12F3190")]
		public GetPosition()
		{
		}
	}
	[Token(Token = "0x2000729")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Stores the right vector of the Transform. Returns Success.")]
	public class GetRightVector : Action
	{
		[Token(Token = "0x40029E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The position of the Transform")]
		public SharedVector3 storeValue;

		[Token(Token = "0x40029E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003020")]
		[Address(RVA = "0x12F3198", Offset = "0x12F3198", VA = "0x12F3198", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003021")]
		[Address(RVA = "0x12F329C", Offset = "0x12F329C", VA = "0x12F329C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003022")]
		[Address(RVA = "0x12F3390", Offset = "0x12F3390", VA = "0x12F3390", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003023")]
		[Address(RVA = "0x12F33FC", Offset = "0x12F33FC", VA = "0x12F33FC")]
		public GetRightVector()
		{
		}
	}
	[Token(Token = "0x200072A")]
	[TaskDescription("Stores the rotation of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class GetRotation : Action
	{
		[Token(Token = "0x40029E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The rotation of the Transform")]
		public SharedQuaternion storeValue;

		[Token(Token = "0x40029E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003024")]
		[Address(RVA = "0x12F3404", Offset = "0x12F3404", VA = "0x12F3404", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003025")]
		[Address(RVA = "0x12F3508", Offset = "0x12F3508", VA = "0x12F3508", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003026")]
		[Address(RVA = "0x12F35FC", Offset = "0x12F35FC", VA = "0x12F35FC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003027")]
		[Address(RVA = "0x12F3668", Offset = "0x12F3668", VA = "0x12F3668")]
		public GetRotation()
		{
		}
	}
	[Token(Token = "0x200072B")]
	[TaskDescription("Stores the up vector of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class GetUpVector : Action
	{
		[Token(Token = "0x40029EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position of the Transform")]
		[RequiredField]
		public SharedVector3 storeValue;

		[Token(Token = "0x40029ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003028")]
		[Address(RVA = "0x12F3670", Offset = "0x12F3670", VA = "0x12F3670", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003029")]
		[Address(RVA = "0x12F3774", Offset = "0x12F3774", VA = "0x12F3774", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600302A")]
		[Address(RVA = "0x12F3868", Offset = "0x12F3868", VA = "0x12F3868", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600302B")]
		[Address(RVA = "0x12F38D4", Offset = "0x12F38D4", VA = "0x12F38D4")]
		public GetUpVector()
		{
		}
	}
	[Token(Token = "0x200072C")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Returns Success if the transform is a child of the specified GameObject.")]
	public class IsChildOf : Conditional
	{
		[Token(Token = "0x40029EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The interested transform")]
		public SharedTransform transformName;

		[Token(Token = "0x40029F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x40029F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600302C")]
		[Address(RVA = "0x12F38DC", Offset = "0x12F38DC", VA = "0x12F38DC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600302D")]
		[Address(RVA = "0x12F39E0", Offset = "0x12F39E0", VA = "0x12F39E0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600302E")]
		[Address(RVA = "0x12F3AE0", Offset = "0x12F3AE0", VA = "0x12F3AE0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600302F")]
		[Address(RVA = "0x12F3B08", Offset = "0x12F3B08", VA = "0x12F3B08")]
		public IsChildOf()
		{
		}
	}
	[Token(Token = "0x200072D")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Rotates the transform so the forward vector points at worldPosition. Returns Success.")]
	public class LookAt : Action
	{
		[Token(Token = "0x40029F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The GameObject to look at. If null the world position will be used.")]
		public SharedGameObject targetLookAt;

		[Token(Token = "0x40029F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Point to look at")]
		public SharedVector3 worldPosition;

		[Token(Token = "0x40029F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Vector specifying the upward direction")]
		public Vector3 worldUp;

		[Token(Token = "0x40029F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform targetTransform;

		[Token(Token = "0x40029F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003030")]
		[Address(RVA = "0x12F3B10", Offset = "0x12F3B10", VA = "0x12F3B10", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003031")]
		[Address(RVA = "0x12F3C14", Offset = "0x12F3C14", VA = "0x12F3C14", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003032")]
		[Address(RVA = "0x12F3D9C", Offset = "0x12F3D9C", VA = "0x12F3D9C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003033")]
		[Address(RVA = "0x12F3E50", Offset = "0x12F3E50", VA = "0x12F3E50")]
		public LookAt()
		{
		}
	}
	[Token(Token = "0x200072E")]
	[TaskDescription("Applies a rotation. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class Rotate : Action
	{
		[Token(Token = "0x40029F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Amount to rotate")]
		public SharedVector3 eulerAngles;

		[Token(Token = "0x40029FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Specifies which axis the rotation is relative to")]
		public Space relativeTo;

		[Token(Token = "0x40029FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform targetTransform;

		[Token(Token = "0x40029FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003034")]
		[Address(RVA = "0x12F3E58", Offset = "0x12F3E58", VA = "0x12F3E58", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003035")]
		[Address(RVA = "0x12F3F5C", Offset = "0x12F3F5C", VA = "0x12F3F5C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003036")]
		[Address(RVA = "0x12F4054", Offset = "0x12F4054", VA = "0x12F4054", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003037")]
		[Address(RVA = "0x12F40CC", Offset = "0x12F40CC", VA = "0x12F40CC")]
		public Rotate()
		{
		}
	}
	[Token(Token = "0x200072F")]
	[TaskDescription("Applies a rotation. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class RotateAround : Action
	{
		[Token(Token = "0x40029FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x40029FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Point to rotate around")]
		public SharedVector3 point;

		[Token(Token = "0x4002A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Axis to rotate around")]
		public SharedVector3 axis;

		[Token(Token = "0x4002A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Amount to rotate")]
		public SharedFloat angle;

		[Token(Token = "0x4002A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform targetTransform;

		[Token(Token = "0x4002A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003038")]
		[Address(RVA = "0x12F40DC", Offset = "0x12F40DC", VA = "0x12F40DC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003039")]
		[Address(RVA = "0x12F41E0", Offset = "0x12F41E0", VA = "0x12F41E0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600303A")]
		[Address(RVA = "0x12F4354", Offset = "0x12F4354", VA = "0x12F4354", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600303B")]
		[Address(RVA = "0x12F4418", Offset = "0x12F4418", VA = "0x12F4418")]
		public RotateAround()
		{
		}
	}
	[Token(Token = "0x2000730")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Sets the euler angles of the Transform. Returns Success.")]
	public class SetEulerAngles : Action
	{
		[Token(Token = "0x4002A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The euler angles of the Transform")]
		public SharedVector3 eulerAngles;

		[Token(Token = "0x4002A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600303C")]
		[Address(RVA = "0x12F4420", Offset = "0x12F4420", VA = "0x12F4420", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600303D")]
		[Address(RVA = "0x12F4524", Offset = "0x12F4524", VA = "0x12F4524", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600303E")]
		[Address(RVA = "0x12F4618", Offset = "0x12F4618", VA = "0x12F4618", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600303F")]
		[Address(RVA = "0x12F4684", Offset = "0x12F4684", VA = "0x12F4684")]
		public SetEulerAngles()
		{
		}
	}
	[Token(Token = "0x2000731")]
	[TaskDescription("Sets the forward vector of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class SetForwardVector : Action
	{
		[Token(Token = "0x4002A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position of the Transform")]
		public SharedVector3 position;

		[Token(Token = "0x4002A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003040")]
		[Address(RVA = "0x12F468C", Offset = "0x12F468C", VA = "0x12F468C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003041")]
		[Address(RVA = "0x12F4790", Offset = "0x12F4790", VA = "0x12F4790", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003042")]
		[Address(RVA = "0x12F4884", Offset = "0x12F4884", VA = "0x12F4884", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003043")]
		[Address(RVA = "0x12F48F0", Offset = "0x12F48F0", VA = "0x12F48F0")]
		public SetForwardVector()
		{
		}
	}
	[Token(Token = "0x2000732")]
	[TaskDescription("Sets the local euler angles of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class SetLocalEulerAngles : Action
	{
		[Token(Token = "0x4002A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The local euler angles of the Transform")]
		public SharedVector3 localEulerAngles;

		[Token(Token = "0x4002A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003044")]
		[Address(RVA = "0x12F48F8", Offset = "0x12F48F8", VA = "0x12F48F8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003045")]
		[Address(RVA = "0x12F49FC", Offset = "0x12F49FC", VA = "0x12F49FC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003046")]
		[Address(RVA = "0x12F4AF0", Offset = "0x12F4AF0", VA = "0x12F4AF0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003047")]
		[Address(RVA = "0x12F4B5C", Offset = "0x12F4B5C", VA = "0x12F4B5C")]
		public SetLocalEulerAngles()
		{
		}
	}
	[Token(Token = "0x2000733")]
	[TaskDescription("Sets the local position of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class SetLocalPosition : Action
	{
		[Token(Token = "0x4002A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The local position of the Transform")]
		public SharedVector3 localPosition;

		[Token(Token = "0x4002A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003048")]
		[Address(RVA = "0x12F4B64", Offset = "0x12F4B64", VA = "0x12F4B64", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003049")]
		[Address(RVA = "0x12F4C68", Offset = "0x12F4C68", VA = "0x12F4C68", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600304A")]
		[Address(RVA = "0x12F4D5C", Offset = "0x12F4D5C", VA = "0x12F4D5C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600304B")]
		[Address(RVA = "0x12F4DC8", Offset = "0x12F4DC8", VA = "0x12F4DC8")]
		public SetLocalPosition()
		{
		}
	}
	[Token(Token = "0x2000734")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Sets the local rotation of the Transform. Returns Success.")]
	public class SetLocalRotation : Action
	{
		[Token(Token = "0x4002A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The local rotation of the Transform")]
		public SharedQuaternion localRotation;

		[Token(Token = "0x4002A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600304C")]
		[Address(RVA = "0x12F5DD0", Offset = "0x12F5DD0", VA = "0x12F5DD0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600304D")]
		[Address(RVA = "0x12F5ED4", Offset = "0x12F5ED4", VA = "0x12F5ED4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600304E")]
		[Address(RVA = "0x12F5FC8", Offset = "0x12F5FC8", VA = "0x12F5FC8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600304F")]
		[Address(RVA = "0x12F6038", Offset = "0x12F6038", VA = "0x12F6038")]
		public SetLocalRotation()
		{
		}
	}
	[Token(Token = "0x2000735")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Sets the local scale of the Transform. Returns Success.")]
	public class SetLocalScale : Action
	{
		[Token(Token = "0x4002A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The local scale of the Transform")]
		public SharedVector3 localScale;

		[Token(Token = "0x4002A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003050")]
		[Address(RVA = "0x12F6040", Offset = "0x12F6040", VA = "0x12F6040", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003051")]
		[Address(RVA = "0x12F6144", Offset = "0x12F6144", VA = "0x12F6144", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003052")]
		[Address(RVA = "0x12F6238", Offset = "0x12F6238", VA = "0x12F6238", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003053")]
		[Address(RVA = "0x12F62A8", Offset = "0x12F62A8", VA = "0x12F62A8")]
		public SetLocalScale()
		{
		}
	}
	[Token(Token = "0x2000736")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Sets the parent of the Transform. Returns Success.")]
	public class SetParent : Action
	{
		[Token(Token = "0x4002A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The parent of the Transform")]
		public SharedTransform parent;

		[Token(Token = "0x4002A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003054")]
		[Address(RVA = "0x12F62B0", Offset = "0x12F62B0", VA = "0x12F62B0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003055")]
		[Address(RVA = "0x12F63B4", Offset = "0x12F63B4", VA = "0x12F63B4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003056")]
		[Address(RVA = "0x12F64AC", Offset = "0x12F64AC", VA = "0x12F64AC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003057")]
		[Address(RVA = "0x12F64D4", Offset = "0x12F64D4", VA = "0x12F64D4")]
		public SetParent()
		{
		}
	}
	[Token(Token = "0x2000737")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Sets the position of the Transform. Returns Success.")]
	public class SetPosition : Action
	{
		[Token(Token = "0x4002A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position of the Transform")]
		public SharedVector3 position;

		[Token(Token = "0x4002A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003058")]
		[Address(RVA = "0x12F64DC", Offset = "0x12F64DC", VA = "0x12F64DC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003059")]
		[Address(RVA = "0x12F65E0", Offset = "0x12F65E0", VA = "0x12F65E0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600305A")]
		[Address(RVA = "0x12F66D4", Offset = "0x12F66D4", VA = "0x12F66D4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600305B")]
		[Address(RVA = "0x12F6744", Offset = "0x12F6744", VA = "0x12F6744")]
		public SetPosition()
		{
		}
	}
	[Token(Token = "0x2000738")]
	[TaskDescription("Sets the right vector of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class SetRightVector : Action
	{
		[Token(Token = "0x4002A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position of the Transform")]
		public SharedVector3 position;

		[Token(Token = "0x4002A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600305C")]
		[Address(RVA = "0x12F674C", Offset = "0x12F674C", VA = "0x12F674C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600305D")]
		[Address(RVA = "0x12F6850", Offset = "0x12F6850", VA = "0x12F6850", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600305E")]
		[Address(RVA = "0x12F6944", Offset = "0x12F6944", VA = "0x12F6944", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600305F")]
		[Address(RVA = "0x12F69B4", Offset = "0x12F69B4", VA = "0x12F69B4")]
		public SetRightVector()
		{
		}
	}
	[Token(Token = "0x2000739")]
	[TaskDescription("Sets the rotation of the Transform. Returns Success.")]
	[TaskCategory("Unity/Transform")]
	public class SetRotation : Action
	{
		[Token(Token = "0x4002A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rotation of the Transform")]
		public SharedQuaternion rotation;

		[Token(Token = "0x4002A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003060")]
		[Address(RVA = "0x12F69BC", Offset = "0x12F69BC", VA = "0x12F69BC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003061")]
		[Address(RVA = "0x12F6AC0", Offset = "0x12F6AC0", VA = "0x12F6AC0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003062")]
		[Address(RVA = "0x12F6BB4", Offset = "0x12F6BB4", VA = "0x12F6BB4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003063")]
		[Address(RVA = "0x12F6C24", Offset = "0x12F6C24", VA = "0x12F6C24")]
		public SetRotation()
		{
		}
	}
	[Token(Token = "0x200073A")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Sets the up vector of the Transform. Returns Success.")]
	public class SetUpVector : Action
	{
		[Token(Token = "0x4002A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position of the Transform")]
		public SharedVector3 position;

		[Token(Token = "0x4002A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform targetTransform;

		[Token(Token = "0x4002A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003064")]
		[Address(RVA = "0x12F6C2C", Offset = "0x12F6C2C", VA = "0x12F6C2C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003065")]
		[Address(RVA = "0x12F6D30", Offset = "0x12F6D30", VA = "0x12F6D30", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003066")]
		[Address(RVA = "0x12F6E24", Offset = "0x12F6E24", VA = "0x12F6E24", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003067")]
		[Address(RVA = "0x12F6E94", Offset = "0x12F6E94", VA = "0x12F6E94")]
		public SetUpVector()
		{
		}
	}
	[Token(Token = "0x200073B")]
	[TaskCategory("Unity/Transform")]
	[TaskDescription("Moves the transform in the direction and distance of translation. Returns Success.")]
	public class Translate : Action
	{
		[Token(Token = "0x4002A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Move direction and distance")]
		public SharedVector3 translation;

		[Token(Token = "0x4002A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Specifies which axis the rotation is relative to")]
		public Space relativeTo;

		[Token(Token = "0x4002A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform targetTransform;

		[Token(Token = "0x4002A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003068")]
		[Address(RVA = "0x12F6E9C", Offset = "0x12F6E9C", VA = "0x12F6E9C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003069")]
		[Address(RVA = "0x12F6FA0", Offset = "0x12F6FA0", VA = "0x12F6FA0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600306A")]
		[Address(RVA = "0x12F7098", Offset = "0x12F7098", VA = "0x12F7098", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600306B")]
		[Address(RVA = "0x12F7114", Offset = "0x12F7114", VA = "0x12F7114")]
		public Translate()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.Timeline
{
	[Token(Token = "0x200073C")]
	[TaskDescription("Is the timeline currently paused?")]
	[TaskCategory("Unity/Timeline")]
	public class IsPaused : Conditional
	{
		[Token(Token = "0x4002A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayableDirector playableDirector;

		[Token(Token = "0x4002A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x600306C")]
		[Address(RVA = "0x12F7124", Offset = "0x12F7124", VA = "0x12F7124", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600306D")]
		[Address(RVA = "0x12F7228", Offset = "0x12F7228", VA = "0x12F7228", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600306E")]
		[Address(RVA = "0x12F72FC", Offset = "0x12F72FC", VA = "0x12F72FC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600306F")]
		[Address(RVA = "0x12F7308", Offset = "0x12F7308", VA = "0x12F7308")]
		public IsPaused()
		{
		}
	}
	[Token(Token = "0x200073D")]
	[TaskDescription("Is the timeline currently playing?")]
	[TaskCategory("Unity/Timeline")]
	public class IsPlaying : Conditional
	{
		[Token(Token = "0x4002A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayableDirector playableDirector;

		[Token(Token = "0x4002A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003070")]
		[Address(RVA = "0x12F7310", Offset = "0x12F7310", VA = "0x12F7310", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003071")]
		[Address(RVA = "0x12F7414", Offset = "0x12F7414", VA = "0x12F7414", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003072")]
		[Address(RVA = "0x12F74E8", Offset = "0x12F74E8", VA = "0x12F74E8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003073")]
		[Address(RVA = "0x12F74F4", Offset = "0x12F74F4", VA = "0x12F74F4")]
		public IsPlaying()
		{
		}
	}
	[Token(Token = "0x200073E")]
	[TaskDescription("Pauses playback of the currently running playable.")]
	[TaskCategory("Unity/Timeline")]
	public class Pause : Action
	{
		[Token(Token = "0x4002A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayableDirector playableDirector;

		[Token(Token = "0x4002A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003074")]
		[Address(RVA = "0x12F74FC", Offset = "0x12F74FC", VA = "0x12F74FC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003075")]
		[Address(RVA = "0x12F7600", Offset = "0x12F7600", VA = "0x12F7600", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003076")]
		[Address(RVA = "0x12F76CC", Offset = "0x12F76CC", VA = "0x12F76CC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003077")]
		[Address(RVA = "0x12F76D8", Offset = "0x12F76D8", VA = "0x12F76D8")]
		public Pause()
		{
		}
	}
	[Token(Token = "0x200073F")]
	[TaskCategory("Unity/Timeline")]
	[TaskDescription("Instatiates a Playable using the provided PlayableAsset and starts playback.")]
	public class Play : Action
	{
		[Token(Token = "0x4002A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("An asset to instantiate a playable from.")]
		public PlayableAsset playableAsset;

		[Token(Token = "0x4002A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should the task be stopped when the timeline has stopped playing?")]
		public SharedBool stopWhenComplete;

		[Token(Token = "0x4002A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayableDirector playableDirector;

		[Token(Token = "0x4002A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x4002A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool playbackStarted;

		[Token(Token = "0x6003078")]
		[Address(RVA = "0x12F76E0", Offset = "0x12F76E0", VA = "0x12F76E0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003079")]
		[Address(RVA = "0x12F77E0", Offset = "0x12F77E0", VA = "0x12F77E0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600307A")]
		[Address(RVA = "0x12F7970", Offset = "0x12F7970", VA = "0x12F7970", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600307B")]
		[Address(RVA = "0x12F79B4", Offset = "0x12F79B4", VA = "0x12F79B4")]
		public Play()
		{
		}
	}
	[Token(Token = "0x2000740")]
	[TaskCategory("Unity/Timeline")]
	[TaskDescription("Resume playing a paused playable.")]
	public class Resume : Action
	{
		[Token(Token = "0x4002A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Should the task be stopped when the timeline has stopped playing?")]
		public SharedBool stopWhenComplete;

		[Token(Token = "0x4002A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayableDirector playableDirector;

		[Token(Token = "0x4002A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x4002A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool playbackStarted;

		[Token(Token = "0x600307C")]
		[Address(RVA = "0x12F79BC", Offset = "0x12F79BC", VA = "0x12F79BC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600307D")]
		[Address(RVA = "0x12F7ABC", Offset = "0x12F7ABC", VA = "0x12F7ABC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600307E")]
		[Address(RVA = "0x12F7C00", Offset = "0x12F7C00", VA = "0x12F7C00", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600307F")]
		[Address(RVA = "0x12F7C34", Offset = "0x12F7C34", VA = "0x12F7C34")]
		public Resume()
		{
		}
	}
	[Token(Token = "0x2000741")]
	[TaskCategory("Unity/Timeline")]
	[TaskDescription("Stops playback of the current Playable and destroys the corresponding graph.")]
	public class Stop : Action
	{
		[Token(Token = "0x4002A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayableDirector playableDirector;

		[Token(Token = "0x4002A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003080")]
		[Address(RVA = "0x12F7C3C", Offset = "0x12F7C3C", VA = "0x12F7C3C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003081")]
		[Address(RVA = "0x12F7D40", Offset = "0x12F7D40", VA = "0x12F7D40", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003082")]
		[Address(RVA = "0x12F7E0C", Offset = "0x12F7E0C", VA = "0x12F7E0C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003083")]
		[Address(RVA = "0x12F7E18", Offset = "0x12F7E18", VA = "0x12F7E18")]
		public Stop()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityTime
{
	[Token(Token = "0x2000742")]
	[TaskCategory("Unity/Time")]
	[TaskDescription("Returns the time in seconds it took to complete the last frame.")]
	public class GetDeltaTime : Action
	{
		[Token(Token = "0x4002A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The variable to store the result")]
		public SharedFloat storeResult;

		[Token(Token = "0x6003084")]
		[Address(RVA = "0x12F7E20", Offset = "0x12F7E20", VA = "0x12F7E20", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003085")]
		[Address(RVA = "0x12F7E84", Offset = "0x12F7E84", VA = "0x12F7E84", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003086")]
		[Address(RVA = "0x12F7EAC", Offset = "0x12F7EAC", VA = "0x12F7EAC")]
		public GetDeltaTime()
		{
		}
	}
	[Token(Token = "0x2000743")]
	[TaskCategory("Unity/Time")]
	[TaskDescription("Returns the real time in seconds since the game started.")]
	public class GetRealtimeSinceStartup : Action
	{
		[Token(Token = "0x4002A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The variable to store the result")]
		public SharedFloat storeResult;

		[Token(Token = "0x6003087")]
		[Address(RVA = "0x12F7EB4", Offset = "0x12F7EB4", VA = "0x12F7EB4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003088")]
		[Address(RVA = "0x12F7F18", Offset = "0x12F7F18", VA = "0x12F7F18", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003089")]
		[Address(RVA = "0x12F7F40", Offset = "0x12F7F40", VA = "0x12F7F40")]
		public GetRealtimeSinceStartup()
		{
		}
	}
	[Token(Token = "0x2000744")]
	[TaskDescription("Returns the time in second since the start of the game.")]
	[TaskCategory("Unity/Time")]
	public class GetTime : Action
	{
		[Token(Token = "0x4002A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The variable to store the result")]
		public SharedFloat storeResult;

		[Token(Token = "0x600308A")]
		[Address(RVA = "0x12F7F48", Offset = "0x12F7F48", VA = "0x12F7F48", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600308B")]
		[Address(RVA = "0x12F7FAC", Offset = "0x12F7FAC", VA = "0x12F7FAC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600308C")]
		[Address(RVA = "0x12F7FD4", Offset = "0x12F7FD4", VA = "0x12F7FD4")]
		public GetTime()
		{
		}
	}
	[Token(Token = "0x2000745")]
	[TaskCategory("Unity/Time")]
	[TaskDescription("Returns the scale at which time is passing.")]
	public class GetTimeScale : Action
	{
		[Token(Token = "0x4002A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The variable to store the result")]
		public SharedFloat storeResult;

		[Token(Token = "0x600308D")]
		[Address(RVA = "0x12F7FDC", Offset = "0x12F7FDC", VA = "0x12F7FDC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600308E")]
		[Address(RVA = "0x12F8040", Offset = "0x12F8040", VA = "0x12F8040", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600308F")]
		[Address(RVA = "0x12F8068", Offset = "0x12F8068", VA = "0x12F8068")]
		public GetTimeScale()
		{
		}
	}
	[Token(Token = "0x2000746")]
	[TaskCategory("Unity/Time")]
	[TaskDescription("Sets the scale at which time is passing.")]
	public class SetTimeScale : Action
	{
		[Token(Token = "0x4002A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The timescale")]
		public SharedFloat timeScale;

		[Token(Token = "0x6003090")]
		[Address(RVA = "0x12F8070", Offset = "0x12F8070", VA = "0x12F8070", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003091")]
		[Address(RVA = "0x12F80D0", Offset = "0x12F80D0", VA = "0x12F80D0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003092")]
		[Address(RVA = "0x12F8124", Offset = "0x12F8124", VA = "0x12F8124")]
		public SetTimeScale()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityString
{
	[Token(Token = "0x2000747")]
	[TaskCategory("Unity/String")]
	[TaskDescription("Creates a string from multiple other strings.")]
	public class BuildString : Action
	{
		[Token(Token = "0x4002A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The array of strings")]
		public SharedString[] source;

		[Token(Token = "0x4002A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedString storeResult;

		[Token(Token = "0x6003093")]
		[Address(RVA = "0x12F812C", Offset = "0x12F812C", VA = "0x12F812C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003094")]
		[Address(RVA = "0x12F8240", Offset = "0x12F8240", VA = "0x12F8240", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003095")]
		[Address(RVA = "0x12F8268", Offset = "0x12F8268", VA = "0x12F8268")]
		public BuildString()
		{
		}
	}
	[Token(Token = "0x2000748")]
	[TaskCategory("Unity/String")]
	[TaskDescription("Compares the first string to the second string. Returns an int which indicates whether the first string precedes, matches, or follows the second string.")]
	public class CompareTo : Action
	{
		[Token(Token = "0x4002A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The string to compare")]
		public SharedString firstString;

		[Token(Token = "0x4002A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The string to compare to")]
		public SharedString secondString;

		[Token(Token = "0x4002A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedInt storeResult;

		[Token(Token = "0x6003096")]
		[Address(RVA = "0x12F8270", Offset = "0x12F8270", VA = "0x12F8270", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003097")]
		[Address(RVA = "0x12F8320", Offset = "0x12F8320", VA = "0x12F8320", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003098")]
		[Address(RVA = "0x12F83B0", Offset = "0x12F83B0", VA = "0x12F83B0")]
		public CompareTo()
		{
		}
	}
	[Token(Token = "0x2000749")]
	[TaskCategory("Unity/String")]
	[TaskDescription("Stores a string with the specified format.")]
	public class Format : Action
	{
		[Token(Token = "0x4002A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The format of the string")]
		public SharedString format;

		[Token(Token = "0x4002A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Any variables to appear in the string")]
		public SharedGenericVariable[] variables;

		[Token(Token = "0x4002A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The result of the format")]
		public SharedString storeResult;

		[Token(Token = "0x4002A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private object[] variableValues;

		[Token(Token = "0x6003099")]
		[Address(RVA = "0x12F83B8", Offset = "0x12F83B8", VA = "0x12F83B8", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x600309A")]
		[Address(RVA = "0x12F841C", Offset = "0x12F841C", VA = "0x12F841C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600309B")]
		[Address(RVA = "0x12F864C", Offset = "0x12F864C", VA = "0x12F864C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600309C")]
		[Address(RVA = "0x12F86C4", Offset = "0x12F86C4", VA = "0x12F86C4")]
		public Format()
		{
		}
	}
	[Token(Token = "0x200074A")]
	[TaskCategory("Unity/String")]
	[TaskDescription("Stores the length of the string")]
	public class GetLength : Action
	{
		[Token(Token = "0x4002A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target string")]
		public SharedString targetString;

		[Token(Token = "0x4002A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedInt storeResult;

		[Token(Token = "0x600309D")]
		[Address(RVA = "0x12F86CC", Offset = "0x12F86CC", VA = "0x12F86CC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600309E")]
		[Address(RVA = "0x12F8754", Offset = "0x12F8754", VA = "0x12F8754", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600309F")]
		[Address(RVA = "0x12F87C8", Offset = "0x12F87C8", VA = "0x12F87C8")]
		public GetLength()
		{
		}
	}
	[Token(Token = "0x200074B")]
	[TaskCategory("Unity/String")]
	[TaskDescription("Randomly selects a string from the array of strings.")]
	public class GetRandomString : Action
	{
		[Token(Token = "0x4002A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The array of strings")]
		public SharedString[] source;

		[Token(Token = "0x4002A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedString storeResult;

		[Token(Token = "0x60030A0")]
		[Address(RVA = "0x12F87D0", Offset = "0x12F87D0", VA = "0x12F87D0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030A1")]
		[Address(RVA = "0x12F8880", Offset = "0x12F8880", VA = "0x12F8880", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030A2")]
		[Address(RVA = "0x12F88A8", Offset = "0x12F88A8", VA = "0x12F88A8")]
		public GetRandomString()
		{
		}
	}
	[Token(Token = "0x200074C")]
	[TaskDescription("Stores a substring of the target string")]
	[TaskCategory("Unity/String")]
	public class GetSubstring : Action
	{
		[Token(Token = "0x4002A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target string")]
		public SharedString targetString;

		[Token(Token = "0x4002A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The start substring index")]
		public SharedInt startIndex;

		[Token(Token = "0x4002A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The length of the substring. Don't use if -1")]
		public SharedInt length;

		[Token(Token = "0x4002A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedString storeResult;

		[Token(Token = "0x60030A3")]
		[Address(RVA = "0x12F88B0", Offset = "0x12F88B0", VA = "0x12F88B0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030A4")]
		[Address(RVA = "0x12F89D0", Offset = "0x12F89D0", VA = "0x12F89D0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030A5")]
		[Address(RVA = "0x12F8A7C", Offset = "0x12F8A7C", VA = "0x12F8A7C")]
		public GetSubstring()
		{
		}
	}
	[Token(Token = "0x200074D")]
	[TaskDescription("Returns success if the string is null or empty")]
	[TaskCategory("Unity/String")]
	public class IsNullOrEmpty : Conditional
	{
		[Token(Token = "0x4002A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target string")]
		public SharedString targetString;

		[Token(Token = "0x60030A6")]
		[Address(RVA = "0x12F8ACC", Offset = "0x12F8ACC", VA = "0x12F8ACC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030A7")]
		[Address(RVA = "0x12F8B34", Offset = "0x12F8B34", VA = "0x12F8B34", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030A8")]
		[Address(RVA = "0x12F8B8C", Offset = "0x12F8B8C", VA = "0x12F8B8C")]
		public IsNullOrEmpty()
		{
		}
	}
	[Token(Token = "0x200074E")]
	[TaskDescription("Replaces a string with the new string")]
	[TaskCategory("Unity/String")]
	public class Replace : Action
	{
		[Token(Token = "0x4002A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target string")]
		public SharedString targetString;

		[Token(Token = "0x4002A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The old replace")]
		public SharedString oldString;

		[Token(Token = "0x4002A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The new string")]
		public SharedString newString;

		[Token(Token = "0x4002A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedString storeResult;

		[Token(Token = "0x60030A9")]
		[Address(RVA = "0x12F8B94", Offset = "0x12F8B94", VA = "0x12F8B94", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030AA")]
		[Address(RVA = "0x12F8C68", Offset = "0x12F8C68", VA = "0x12F8C68", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030AB")]
		[Address(RVA = "0x12F8D14", Offset = "0x12F8D14", VA = "0x12F8D14")]
		public Replace()
		{
		}
	}
	[Token(Token = "0x200074F")]
	[TaskCategory("Unity/String")]
	[TaskDescription("Sets the variable string to the value string.")]
	public class SetString : Action
	{
		[Token(Token = "0x4002A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target string")]
		[RequiredField]
		public SharedString variable;

		[Token(Token = "0x4002A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value string")]
		public SharedString value;

		[Token(Token = "0x60030AC")]
		[Address(RVA = "0x12F8D1C", Offset = "0x12F8D1C", VA = "0x12F8D1C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030AD")]
		[Address(RVA = "0x12F8DA0", Offset = "0x12F8DA0", VA = "0x12F8DA0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030AE")]
		[Address(RVA = "0x12F8E14", Offset = "0x12F8E14", VA = "0x12F8E14")]
		public SetString()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnitySphereCollider
{
	[Token(Token = "0x2000750")]
	[TaskCategory("Unity/SphereCollider")]
	[TaskDescription("Stores the center of the SphereCollider. Returns Success.")]
	public class GetCenter : Action
	{
		[Token(Token = "0x4002A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The center of the SphereCollider")]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SphereCollider sphereCollider;

		[Token(Token = "0x4002A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60030AF")]
		[Address(RVA = "0x12F8E1C", Offset = "0x12F8E1C", VA = "0x12F8E1C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60030B0")]
		[Address(RVA = "0x12F8F20", Offset = "0x12F8F20", VA = "0x12F8F20", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030B1")]
		[Address(RVA = "0x12F9014", Offset = "0x12F9014", VA = "0x12F9014", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030B2")]
		[Address(RVA = "0x12F9078", Offset = "0x12F9078", VA = "0x12F9078")]
		public GetCenter()
		{
		}
	}
	[Token(Token = "0x2000751")]
	[TaskCategory("Unity/SphereCollider")]
	[TaskDescription("Stores the radius of the SphereCollider. Returns Success.")]
	public class GetRadius : Action
	{
		[Token(Token = "0x4002A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The radius of the SphereCollider")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SphereCollider sphereCollider;

		[Token(Token = "0x4002A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60030B3")]
		[Address(RVA = "0x12F9080", Offset = "0x12F9080", VA = "0x12F9080", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60030B4")]
		[Address(RVA = "0x12F9184", Offset = "0x12F9184", VA = "0x12F9184", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030B5")]
		[Address(RVA = "0x12F9278", Offset = "0x12F9278", VA = "0x12F9278", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030B6")]
		[Address(RVA = "0x12F92AC", Offset = "0x12F92AC", VA = "0x12F92AC")]
		public GetRadius()
		{
		}
	}
	[Token(Token = "0x2000752")]
	[TaskCategory("Unity/SphereCollider")]
	[TaskDescription("Sets the center of the SphereCollider. Returns Success.")]
	public class SetCenter : Action
	{
		[Token(Token = "0x4002A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The center of the SphereCollider")]
		public SharedVector3 center;

		[Token(Token = "0x4002A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SphereCollider sphereCollider;

		[Token(Token = "0x4002A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60030B7")]
		[Address(RVA = "0x12F92B4", Offset = "0x12F92B4", VA = "0x12F92B4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60030B8")]
		[Address(RVA = "0x12F93B8", Offset = "0x12F93B8", VA = "0x12F93B8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030B9")]
		[Address(RVA = "0x12F94AC", Offset = "0x12F94AC", VA = "0x12F94AC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030BA")]
		[Address(RVA = "0x12F951C", Offset = "0x12F951C", VA = "0x12F951C")]
		public SetCenter()
		{
		}
	}
	[Token(Token = "0x2000753")]
	[TaskDescription("Sets the radius of the SphereCollider. Returns Success.")]
	[TaskCategory("Unity/SphereCollider")]
	public class SetRadius : Action
	{
		[Token(Token = "0x4002A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The radius of the SphereCollider")]
		public SharedFloat radius;

		[Token(Token = "0x4002A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SphereCollider sphereCollider;

		[Token(Token = "0x4002A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60030BB")]
		[Address(RVA = "0x12F9524", Offset = "0x12F9524", VA = "0x12F9524", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60030BC")]
		[Address(RVA = "0x12F9628", Offset = "0x12F9628", VA = "0x12F9628", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030BD")]
		[Address(RVA = "0x12F971C", Offset = "0x12F971C", VA = "0x12F971C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030BE")]
		[Address(RVA = "0x12F9750", Offset = "0x12F9750", VA = "0x12F9750")]
		public SetRadius()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.SharedVariables
{
	[Token(Token = "0x2000754")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	public class CompareSharedBool : Conditional
	{
		[Token(Token = "0x4002A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedBool variable;

		[Token(Token = "0x4002A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedBool compareTo;

		[Token(Token = "0x60030BF")]
		[Address(RVA = "0x12F9758", Offset = "0x12F9758", VA = "0x12F9758", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030C0")]
		[Address(RVA = "0x12F97E4", Offset = "0x12F97E4", VA = "0x12F97E4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030C1")]
		[Address(RVA = "0x12F9828", Offset = "0x12F9828", VA = "0x12F9828")]
		public CompareSharedBool()
		{
		}
	}
	[Token(Token = "0x2000755")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	[TaskCategory("Unity/SharedVariable")]
	public class CompareSharedColor : Conditional
	{
		[Token(Token = "0x4002A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedColor variable;

		[Token(Token = "0x4002A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedColor compareTo;

		[Token(Token = "0x60030C2")]
		[Address(RVA = "0x12F9830", Offset = "0x12F9830", VA = "0x12F9830", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030C3")]
		[Address(RVA = "0x12F9920", Offset = "0x12F9920", VA = "0x12F9920", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030C4")]
		[Address(RVA = "0x12F9988", Offset = "0x12F9988", VA = "0x12F9988")]
		public CompareSharedColor()
		{
		}
	}
	[Token(Token = "0x2000756")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	public class CompareSharedFloat : Conditional
	{
		[Token(Token = "0x4002A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedFloat variable;

		[Token(Token = "0x4002A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedFloat compareTo;

		[Token(Token = "0x60030C5")]
		[Address(RVA = "0x12F9990", Offset = "0x12F9990", VA = "0x12F9990", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030C6")]
		[Address(RVA = "0x12F9A14", Offset = "0x12F9A14", VA = "0x12F9A14", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030C7")]
		[Address(RVA = "0x12F9A58", Offset = "0x12F9A58", VA = "0x12F9A58")]
		public CompareSharedFloat()
		{
		}
	}
	[Token(Token = "0x2000757")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	[TaskCategory("Unity/SharedVariable")]
	public class CompareSharedGameObject : Conditional
	{
		[Token(Token = "0x4002A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedGameObject variable;

		[Token(Token = "0x4002A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedGameObject compareTo;

		[Token(Token = "0x60030C8")]
		[Address(RVA = "0x12F9A60", Offset = "0x12F9A60", VA = "0x12F9A60", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030C9")]
		[Address(RVA = "0x12F9C0C", Offset = "0x12F9C0C", VA = "0x12F9C0C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030CA")]
		[Address(RVA = "0x12F9C34", Offset = "0x12F9C34", VA = "0x12F9C34")]
		public CompareSharedGameObject()
		{
		}
	}
	[Token(Token = "0x2000758")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	public class CompareSharedGameObjectList : Conditional
	{
		[Token(Token = "0x4002A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedGameObjectList variable;

		[Token(Token = "0x4002A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedGameObjectList compareTo;

		[Token(Token = "0x60030CB")]
		[Address(RVA = "0x12F9C3C", Offset = "0x12F9C3C", VA = "0x12F9C3C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030CC")]
		[Address(RVA = "0x12F9E04", Offset = "0x12F9E04", VA = "0x12F9E04", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030CD")]
		[Address(RVA = "0x12F9E2C", Offset = "0x12F9E2C", VA = "0x12F9E2C")]
		public CompareSharedGameObjectList()
		{
		}
	}
	[Token(Token = "0x2000759")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success true if not null.")]
	public class CompareSharedGameObjectNotNull : Conditional
	{
		[Token(Token = "0x4002A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The variable to compare")]
		public SharedGameObject variable;

		[Token(Token = "0x60030CE")]
		[Address(RVA = "0x12F9E34", Offset = "0x12F9E34", VA = "0x12F9E34", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030CF")]
		[Address(RVA = "0x12F9ED4", Offset = "0x12F9ED4", VA = "0x12F9ED4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030D0")]
		[Address(RVA = "0x12F9EE0", Offset = "0x12F9EE0", VA = "0x12F9EE0")]
		public CompareSharedGameObjectNotNull()
		{
		}
	}
	[Token(Token = "0x200075A")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	[TaskCategory("Unity/SharedVariable")]
	public class CompareSharedInt : Conditional
	{
		[Token(Token = "0x4002A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedInt variable;

		[Token(Token = "0x4002A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedInt compareTo;

		[Token(Token = "0x60030D1")]
		[Address(RVA = "0x12F9EE8", Offset = "0x12F9EE8", VA = "0x12F9EE8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030D2")]
		[Address(RVA = "0x12F9F70", Offset = "0x12F9F70", VA = "0x12F9F70", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030D3")]
		[Address(RVA = "0x12F9FB4", Offset = "0x12F9FB4", VA = "0x12F9FB4")]
		public CompareSharedInt()
		{
		}
	}
	[Token(Token = "0x200075B")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	[TaskCategory("Unity/SharedVariable")]
	public class CompareSharedObject : Conditional
	{
		[Token(Token = "0x4002A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedObject variable;

		[Token(Token = "0x4002A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedObject compareTo;

		[Token(Token = "0x60030D4")]
		[Address(RVA = "0x12F9FBC", Offset = "0x12F9FBC", VA = "0x12F9FBC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030D5")]
		[Address(RVA = "0x12FA168", Offset = "0x12FA168", VA = "0x12FA168", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030D6")]
		[Address(RVA = "0x12FA190", Offset = "0x12FA190", VA = "0x12FA190")]
		public CompareSharedObject()
		{
		}
	}
	[Token(Token = "0x200075C")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	public class CompareSharedObjectList : Conditional
	{
		[Token(Token = "0x4002A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedObjectList variable;

		[Token(Token = "0x4002A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedObjectList compareTo;

		[Token(Token = "0x60030D7")]
		[Address(RVA = "0x12FA198", Offset = "0x12FA198", VA = "0x12FA198", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030D8")]
		[Address(RVA = "0x12FA360", Offset = "0x12FA360", VA = "0x12FA360", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030D9")]
		[Address(RVA = "0x12FA388", Offset = "0x12FA388", VA = "0x12FA388")]
		public CompareSharedObjectList()
		{
		}
	}
	[Token(Token = "0x200075D")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	public class CompareSharedQuaternion : Conditional
	{
		[Token(Token = "0x4002A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedQuaternion variable;

		[Token(Token = "0x4002A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedQuaternion compareTo;

		[Token(Token = "0x60030DA")]
		[Address(RVA = "0x12FA390", Offset = "0x12FA390", VA = "0x12FA390", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030DB")]
		[Address(RVA = "0x12FA480", Offset = "0x12FA480", VA = "0x12FA480", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030DC")]
		[Address(RVA = "0x12FA528", Offset = "0x12FA528", VA = "0x12FA528")]
		public CompareSharedQuaternion()
		{
		}
	}
	[Token(Token = "0x200075E")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	[TaskCategory("Unity/SharedVariable")]
	public class CompareSharedRect : Conditional
	{
		[Token(Token = "0x4002A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedRect variable;

		[Token(Token = "0x4002A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedRect compareTo;

		[Token(Token = "0x60030DD")]
		[Address(RVA = "0x12FA530", Offset = "0x12FA530", VA = "0x12FA530", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030DE")]
		[Address(RVA = "0x12FA5C0", Offset = "0x12FA5C0", VA = "0x12FA5C0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030DF")]
		[Address(RVA = "0x12FA61C", Offset = "0x12FA61C", VA = "0x12FA61C")]
		public CompareSharedRect()
		{
		}
	}
	[Token(Token = "0x200075F")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	public class CompareSharedString : Conditional
	{
		[Token(Token = "0x4002A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedString variable;

		[Token(Token = "0x4002A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedString compareTo;

		[Token(Token = "0x60030E0")]
		[Address(RVA = "0x12FA624", Offset = "0x12FA624", VA = "0x12FA624", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030E1")]
		[Address(RVA = "0x12FA6B0", Offset = "0x12FA6B0", VA = "0x12FA6B0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030E2")]
		[Address(RVA = "0x12FA724", Offset = "0x12FA724", VA = "0x12FA724")]
		public CompareSharedString()
		{
		}
	}
	[Token(Token = "0x2000760")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	public class CompareSharedTransform : Conditional
	{
		[Token(Token = "0x4002A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedTransform variable;

		[Token(Token = "0x4002A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedTransform compareTo;

		[Token(Token = "0x60030E3")]
		[Address(RVA = "0x12FA72C", Offset = "0x12FA72C", VA = "0x12FA72C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030E4")]
		[Address(RVA = "0x12FA8D8", Offset = "0x12FA8D8", VA = "0x12FA8D8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030E5")]
		[Address(RVA = "0x12FA900", Offset = "0x12FA900", VA = "0x12FA900")]
		public CompareSharedTransform()
		{
		}
	}
	[Token(Token = "0x2000761")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	[TaskCategory("Unity/SharedVariable")]
	public class CompareSharedTransformList : Conditional
	{
		[Token(Token = "0x4002A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedTransformList variable;

		[Token(Token = "0x4002A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedTransformList compareTo;

		[Token(Token = "0x60030E6")]
		[Address(RVA = "0x12FA908", Offset = "0x12FA908", VA = "0x12FA908", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030E7")]
		[Address(RVA = "0x12FAAD0", Offset = "0x12FAAD0", VA = "0x12FAAD0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030E8")]
		[Address(RVA = "0x12FAAF8", Offset = "0x12FAAF8", VA = "0x12FAAF8")]
		public CompareSharedTransformList()
		{
		}
	}
	[Token(Token = "0x2000762")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	public class CompareSharedVector2 : Conditional
	{
		[Token(Token = "0x4002A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedVector2 variable;

		[Token(Token = "0x4002A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedVector2 compareTo;

		[Token(Token = "0x60030E9")]
		[Address(RVA = "0x12FAB00", Offset = "0x12FAB00", VA = "0x12FAB00", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030EA")]
		[Address(RVA = "0x12FAB84", Offset = "0x12FAB84", VA = "0x12FAB84", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030EB")]
		[Address(RVA = "0x12FAC24", Offset = "0x12FAC24", VA = "0x12FAC24")]
		public CompareSharedVector2()
		{
		}
	}
	[Token(Token = "0x2000763")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	public class CompareSharedVector3 : Conditional
	{
		[Token(Token = "0x4002A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedVector3 variable;

		[Token(Token = "0x4002A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedVector3 compareTo;

		[Token(Token = "0x60030EC")]
		[Address(RVA = "0x12FAC2C", Offset = "0x12FAC2C", VA = "0x12FAC2C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030ED")]
		[Address(RVA = "0x12FACC0", Offset = "0x12FACC0", VA = "0x12FACC0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030EE")]
		[Address(RVA = "0x12FAD68", Offset = "0x12FAD68", VA = "0x12FAD68")]
		public CompareSharedVector3()
		{
		}
	}
	[Token(Token = "0x2000764")]
	[TaskDescription("Returns success if the variable value is equal to the compareTo value.")]
	[TaskCategory("Unity/SharedVariable")]
	public class CompareSharedVector4 : Conditional
	{
		[Token(Token = "0x4002A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first variable to compare")]
		public SharedVector4 variable;

		[Token(Token = "0x4002A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to compare to")]
		public SharedVector4 compareTo;

		[Token(Token = "0x60030EF")]
		[Address(RVA = "0x12FAD70", Offset = "0x12FAD70", VA = "0x12FAD70", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030F0")]
		[Address(RVA = "0x12FAE0C", Offset = "0x12FAE0C", VA = "0x12FAE0C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030F1")]
		[Address(RVA = "0x12FAEB4", Offset = "0x12FAEB4", VA = "0x12FAEB4")]
		public CompareSharedVector4()
		{
		}
	}
	[Token(Token = "0x2000765")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Sets the SharedBool variable to the specified object. Returns Success.")]
	public class SetSharedBool : Action
	{
		[Token(Token = "0x4002A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedBool to")]
		public SharedBool targetValue;

		[Token(Token = "0x4002A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedBool to set")]
		public SharedBool targetVariable;

		[Token(Token = "0x60030F2")]
		[Address(RVA = "0x12FAEBC", Offset = "0x12FAEBC", VA = "0x12FAEBC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030F3")]
		[Address(RVA = "0x12FAF40", Offset = "0x12FAF40", VA = "0x12FAF40", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030F4")]
		[Address(RVA = "0x12FAF84", Offset = "0x12FAF84", VA = "0x12FAF84")]
		public SetSharedBool()
		{
		}
	}
	[Token(Token = "0x2000766")]
	[TaskDescription("Sets the SharedColor variable to the specified object. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SetSharedColor : Action
	{
		[Token(Token = "0x4002A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedColor to")]
		public SharedColor targetValue;

		[Token(Token = "0x4002A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The SharedColor to set")]
		[RequiredField]
		public SharedColor targetVariable;

		[Token(Token = "0x60030F5")]
		[Address(RVA = "0x12FAF8C", Offset = "0x12FAF8C", VA = "0x12FAF8C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030F6")]
		[Address(RVA = "0x12FB00C", Offset = "0x12FB00C", VA = "0x12FB00C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030F7")]
		[Address(RVA = "0x12FB074", Offset = "0x12FB074", VA = "0x12FB074")]
		public SetSharedColor()
		{
		}
	}
	[Token(Token = "0x2000767")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Sets the SharedFloat variable to the specified object. Returns Success.")]
	public class SetSharedFloat : Action
	{
		[Token(Token = "0x4002A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedFloat to")]
		public SharedFloat targetValue;

		[Token(Token = "0x4002A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedFloat to set")]
		public SharedFloat targetVariable;

		[Token(Token = "0x60030F8")]
		[Address(RVA = "0x12FB07C", Offset = "0x12FB07C", VA = "0x12FB07C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030F9")]
		[Address(RVA = "0x12FB0FC", Offset = "0x12FB0FC", VA = "0x12FB0FC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030FA")]
		[Address(RVA = "0x12FB140", Offset = "0x12FB140", VA = "0x12FB140")]
		public SetSharedFloat()
		{
		}
	}
	[Token(Token = "0x2000768")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Sets the SharedGameObject variable to the specified object. Returns Success.")]
	public class SetSharedGameObject : Action
	{
		[Token(Token = "0x4002AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedGameObject to. If null the variable will be set to the current GameObject")]
		public SharedGameObject targetValue;

		[Token(Token = "0x4002AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedGameObject to set")]
		public SharedGameObject targetVariable;

		[Token(Token = "0x4002AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Can the target value be null?")]
		public SharedBool valueCanBeNull;

		[Token(Token = "0x60030FB")]
		[Address(RVA = "0x12FB148", Offset = "0x12FB148", VA = "0x12FB148", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030FC")]
		[Address(RVA = "0x12FB254", Offset = "0x12FB254", VA = "0x12FB254", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60030FD")]
		[Address(RVA = "0x12FB29C", Offset = "0x12FB29C", VA = "0x12FB29C")]
		public SetSharedGameObject()
		{
		}
	}
	[Token(Token = "0x2000769")]
	[TaskDescription("Sets the SharedGameObjectList variable to the specified object. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SetSharedGameObjectList : Action
	{
		[Token(Token = "0x4002AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedGameObjectList to.")]
		public SharedGameObjectList targetValue;

		[Token(Token = "0x4002AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedGameObjectList to set")]
		public SharedGameObjectList targetVariable;

		[Token(Token = "0x60030FE")]
		[Address(RVA = "0x12FB2A4", Offset = "0x12FB2A4", VA = "0x12FB2A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60030FF")]
		[Address(RVA = "0x12FB328", Offset = "0x12FB328", VA = "0x12FB328", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003100")]
		[Address(RVA = "0x12FB350", Offset = "0x12FB350", VA = "0x12FB350")]
		public SetSharedGameObjectList()
		{
		}
	}
	[Token(Token = "0x200076A")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Sets the SharedInt variable to the specified object. Returns Success.")]
	public class SetSharedInt : Action
	{
		[Token(Token = "0x4002AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedInt to")]
		public SharedInt targetValue;

		[Token(Token = "0x4002AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedInt to set")]
		public SharedInt targetVariable;

		[Token(Token = "0x6003101")]
		[Address(RVA = "0x12FB358", Offset = "0x12FB358", VA = "0x12FB358", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003102")]
		[Address(RVA = "0x12FB3DC", Offset = "0x12FB3DC", VA = "0x12FB3DC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003103")]
		[Address(RVA = "0x12FB420", Offset = "0x12FB420", VA = "0x12FB420")]
		public SetSharedInt()
		{
		}
	}
	[Token(Token = "0x200076B")]
	[TaskDescription("Sets the SharedObject variable to the specified object. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SetSharedObject : Action
	{
		[Token(Token = "0x4002AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedObject to")]
		public SharedObject targetValue;

		[Token(Token = "0x4002AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The SharedTransform to set")]
		[RequiredField]
		public SharedObject targetVariable;

		[Token(Token = "0x6003104")]
		[Address(RVA = "0x12FB428", Offset = "0x12FB428", VA = "0x12FB428", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003105")]
		[Address(RVA = "0x12FB4AC", Offset = "0x12FB4AC", VA = "0x12FB4AC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003106")]
		[Address(RVA = "0x12FB4D4", Offset = "0x12FB4D4", VA = "0x12FB4D4")]
		public SetSharedObject()
		{
		}
	}
	[Token(Token = "0x200076C")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Sets the SharedObjectList variable to the specified object. Returns Success.")]
	public class SetSharedObjectList : Action
	{
		[Token(Token = "0x4002AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedObjectList to.")]
		public SharedObjectList targetValue;

		[Token(Token = "0x4002AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedObjectList to set")]
		public SharedObjectList targetVariable;

		[Token(Token = "0x6003107")]
		[Address(RVA = "0x12FB4DC", Offset = "0x12FB4DC", VA = "0x12FB4DC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003108")]
		[Address(RVA = "0x12FB560", Offset = "0x12FB560", VA = "0x12FB560", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003109")]
		[Address(RVA = "0x12FB588", Offset = "0x12FB588", VA = "0x12FB588")]
		public SetSharedObjectList()
		{
		}
	}
	[Token(Token = "0x200076D")]
	[TaskDescription("Sets the SharedQuaternion variable to the specified object. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SetSharedQuaternion : Action
	{
		[Token(Token = "0x4002AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedQuaternion to")]
		public SharedQuaternion targetValue;

		[Token(Token = "0x4002AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The SharedQuaternion to set")]
		[RequiredField]
		public SharedQuaternion targetVariable;

		[Token(Token = "0x600310A")]
		[Address(RVA = "0x12FB590", Offset = "0x12FB590", VA = "0x12FB590", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600310B")]
		[Address(RVA = "0x12FB610", Offset = "0x12FB610", VA = "0x12FB610", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600310C")]
		[Address(RVA = "0x12FB6B8", Offset = "0x12FB6B8", VA = "0x12FB6B8")]
		public SetSharedQuaternion()
		{
		}
	}
	[Token(Token = "0x200076E")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Sets the SharedRect variable to the specified object. Returns Success.")]
	public class SetSharedRect : Action
	{
		[Token(Token = "0x4002AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedRect to")]
		public SharedRect targetValue;

		[Token(Token = "0x4002AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedRect to set")]
		public SharedRect targetVariable;

		[Token(Token = "0x600310D")]
		[Address(RVA = "0x12FB6C0", Offset = "0x12FB6C0", VA = "0x12FB6C0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600310E")]
		[Address(RVA = "0x12FB740", Offset = "0x12FB740", VA = "0x12FB740", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600310F")]
		[Address(RVA = "0x12FB79C", Offset = "0x12FB79C", VA = "0x12FB79C")]
		public SetSharedRect()
		{
		}
	}
	[Token(Token = "0x200076F")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Sets the SharedString variable to the specified object. Returns Success.")]
	public class SetSharedString : Action
	{
		[Token(Token = "0x4002AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedString to")]
		public SharedString targetValue;

		[Token(Token = "0x4002AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The SharedString to set")]
		[RequiredField]
		public SharedString targetVariable;

		[Token(Token = "0x6003110")]
		[Address(RVA = "0x12FB7A4", Offset = "0x12FB7A4", VA = "0x12FB7A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003111")]
		[Address(RVA = "0x12FB828", Offset = "0x12FB828", VA = "0x12FB828", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003112")]
		[Address(RVA = "0x12FB89C", Offset = "0x12FB89C", VA = "0x12FB89C")]
		public SetSharedString()
		{
		}
	}
	[Token(Token = "0x2000770")]
	[TaskDescription("Sets the SharedTransform variable to the specified object. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SetSharedTransform : Action
	{
		[Token(Token = "0x4002AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedTransform to. If null the variable will be set to the current Transform")]
		public SharedTransform targetValue;

		[Token(Token = "0x4002AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedTransform to set")]
		public SharedTransform targetVariable;

		[Token(Token = "0x6003113")]
		[Address(RVA = "0x12FB8A4", Offset = "0x12FB8A4", VA = "0x12FB8A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003114")]
		[Address(RVA = "0x12FB98C", Offset = "0x12FB98C", VA = "0x12FB98C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003115")]
		[Address(RVA = "0x12FB9B4", Offset = "0x12FB9B4", VA = "0x12FB9B4")]
		public SetSharedTransform()
		{
		}
	}
	[Token(Token = "0x2000771")]
	[TaskCategory("Unity/SharedVariable")]
	[TaskDescription("Sets the SharedTransformList variable to the specified object. Returns Success.")]
	public class SetSharedTransformList : Action
	{
		[Token(Token = "0x4002AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedTransformList to.")]
		public SharedTransformList targetValue;

		[Token(Token = "0x4002AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedTransformList to set")]
		public SharedTransformList targetVariable;

		[Token(Token = "0x6003116")]
		[Address(RVA = "0x12FB9BC", Offset = "0x12FB9BC", VA = "0x12FB9BC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003117")]
		[Address(RVA = "0x12FBA40", Offset = "0x12FBA40", VA = "0x12FBA40", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003118")]
		[Address(RVA = "0x12FBA68", Offset = "0x12FBA68", VA = "0x12FBA68")]
		public SetSharedTransformList()
		{
		}
	}
	[Token(Token = "0x2000772")]
	[TaskDescription("Sets the SharedVector2 variable to the specified object. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SetSharedVector2 : Action
	{
		[Token(Token = "0x4002AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedVector2 to")]
		public SharedVector2 targetValue;

		[Token(Token = "0x4002AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedVector2 to set")]
		public SharedVector2 targetVariable;

		[Token(Token = "0x6003119")]
		[Address(RVA = "0x12FBA70", Offset = "0x12FBA70", VA = "0x12FBA70", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600311A")]
		[Address(RVA = "0x12FBAF0", Offset = "0x12FBAF0", VA = "0x12FBAF0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600311B")]
		[Address(RVA = "0x12FBB90", Offset = "0x12FBB90", VA = "0x12FBB90")]
		public SetSharedVector2()
		{
		}
	}
	[Token(Token = "0x2000773")]
	[TaskDescription("Sets the SharedVector3 variable to the specified object. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SetSharedVector3 : Action
	{
		[Token(Token = "0x4002AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedVector3 to")]
		public SharedVector3 targetValue;

		[Token(Token = "0x4002AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The SharedVector3 to set")]
		[RequiredField]
		public SharedVector3 targetVariable;

		[Token(Token = "0x600311C")]
		[Address(RVA = "0x12FBB98", Offset = "0x12FBB98", VA = "0x12FBB98", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600311D")]
		[Address(RVA = "0x12FBC18", Offset = "0x12FBC18", VA = "0x12FBC18", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600311E")]
		[Address(RVA = "0x12FBCC0", Offset = "0x12FBCC0", VA = "0x12FBCC0")]
		public SetSharedVector3()
		{
		}
	}
	[Token(Token = "0x2000774")]
	[TaskDescription("Sets the SharedVector4 variable to the specified object. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SetSharedVector4 : Action
	{
		[Token(Token = "0x4002AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value to set the SharedVector4 to")]
		public SharedVector4 targetValue;

		[Token(Token = "0x4002ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedVector4 to set")]
		public SharedVector4 targetVariable;

		[Token(Token = "0x600311F")]
		[Address(RVA = "0x12FBCC8", Offset = "0x12FBCC8", VA = "0x12FBCC8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003120")]
		[Address(RVA = "0x12FBD48", Offset = "0x12FBD48", VA = "0x12FBD48", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003121")]
		[Address(RVA = "0x12FBDF0", Offset = "0x12FBDF0", VA = "0x12FBDF0")]
		public SetSharedVector4()
		{
		}
	}
	[Token(Token = "0x2000775")]
	[TaskDescription("Sets the SharedGameObjectList values from the GameObjects. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SharedGameObjectsToGameObjectList : Action
	{
		[Token(Token = "0x4002ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObjects value")]
		public SharedGameObject[] gameObjects;

		[Token(Token = "0x4002ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The SharedTransformList to set")]
		[RequiredField]
		public SharedGameObjectList storedGameObjectList;

		[Token(Token = "0x6003122")]
		[Address(RVA = "0x12FBDF8", Offset = "0x12FBDF8", VA = "0x12FBDF8", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x6003123")]
		[Address(RVA = "0x12FBE90", Offset = "0x12FBE90", VA = "0x12FBE90", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003124")]
		[Address(RVA = "0x12FC030", Offset = "0x12FC030", VA = "0x12FC030", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003125")]
		[Address(RVA = "0x12FC058", Offset = "0x12FC058", VA = "0x12FC058")]
		public SharedGameObjectsToGameObjectList()
		{
		}
	}
	[Token(Token = "0x2000776")]
	[TaskDescription("Gets the Transform from the GameObject. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SharedGameObjectToTransform : Action
	{
		[Token(Token = "0x4002ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to get the Transform of")]
		public SharedGameObject sharedGameObject;

		[Token(Token = "0x4002ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Transform to set")]
		public SharedTransform sharedTransform;

		[Token(Token = "0x6003126")]
		[Address(RVA = "0x12FC060", Offset = "0x12FC060", VA = "0x12FC060", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003127")]
		[Address(RVA = "0x12FC15C", Offset = "0x12FC15C", VA = "0x12FC15C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003128")]
		[Address(RVA = "0x12FC184", Offset = "0x12FC184", VA = "0x12FC184")]
		public SharedGameObjectToTransform()
		{
		}
	}
	[Token(Token = "0x2000777")]
	[TaskDescription("Sets the SharedTransformList values from the Transforms. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SharedTransformsToTransformList : Action
	{
		[Token(Token = "0x4002ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Transforms value")]
		public SharedTransform[] transforms;

		[Token(Token = "0x4002AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The SharedTransformList to set")]
		public SharedTransformList storedTransformList;

		[Token(Token = "0x6003129")]
		[Address(RVA = "0x12FC18C", Offset = "0x12FC18C", VA = "0x12FC18C", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x600312A")]
		[Address(RVA = "0x12FC224", Offset = "0x12FC224", VA = "0x12FC224", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600312B")]
		[Address(RVA = "0x12FC3C4", Offset = "0x12FC3C4", VA = "0x12FC3C4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600312C")]
		[Address(RVA = "0x12FC3EC", Offset = "0x12FC3EC", VA = "0x12FC3EC")]
		public SharedTransformsToTransformList()
		{
		}
	}
	[Token(Token = "0x2000778")]
	[TaskDescription("Gets the GameObject from the Transform component. Returns Success.")]
	[TaskCategory("Unity/SharedVariable")]
	public class SharedTransformToGameObject : Action
	{
		[Token(Token = "0x4002AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Transform component")]
		public SharedTransform sharedTransform;

		[Token(Token = "0x4002AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The GameObject to set")]
		public SharedGameObject sharedGameObject;

		[Token(Token = "0x600312D")]
		[Address(RVA = "0x12FC3F4", Offset = "0x12FC3F4", VA = "0x12FC3F4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600312E")]
		[Address(RVA = "0x12FC4DC", Offset = "0x12FC4DC", VA = "0x12FC4DC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600312F")]
		[Address(RVA = "0x12FC504", Offset = "0x12FC504", VA = "0x12FC504")]
		public SharedTransformToGameObject()
		{
		}
	}
	[Token(Token = "0x2000779")]
	public class CompareIsBiggerThan : Conditional
	{
		[Token(Token = "0x4002AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SharedFloat currentFloat;

		[Token(Token = "0x4002AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SharedInt currentInt;

		[Token(Token = "0x4002AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SharedFloat inBiggerThan;

		[Token(Token = "0x6003130")]
		[Address(RVA = "0x12FC50C", Offset = "0x12FC50C", VA = "0x12FC50C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003131")]
		[Address(RVA = "0x12FC60C", Offset = "0x12FC60C", VA = "0x12FC60C")]
		public CompareIsBiggerThan()
		{
		}
	}
	[Token(Token = "0x200077A")]
	public class CompareIsLessThan : Conditional
	{
		[Token(Token = "0x4002AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SharedFloat currentFloat;

		[Token(Token = "0x4002AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SharedInt currentInt;

		[Token(Token = "0x4002AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SharedFloat isLessThanFloat;

		[Token(Token = "0x4002AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SharedInt isLessThanInt;

		[Token(Token = "0x6003132")]
		[Address(RVA = "0x12FC614", Offset = "0x12FC614", VA = "0x12FC614", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003133")]
		[Address(RVA = "0x12FC788", Offset = "0x12FC788", VA = "0x12FC788")]
		public CompareIsLessThan()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityRigidbody2D
{
	[Token(Token = "0x200077B")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Applies a force to the Rigidbody2D. Returns Success.")]
	public class AddForce : Action
	{
		[Token(Token = "0x4002ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount of force to apply")]
		public SharedVector2 force;

		[Token(Token = "0x4002ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003134")]
		[Address(RVA = "0x12FC790", Offset = "0x12FC790", VA = "0x12FC790", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003135")]
		[Address(RVA = "0x12FC894", Offset = "0x12FC894", VA = "0x12FC894", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003136")]
		[Address(RVA = "0x12FC988", Offset = "0x12FC988", VA = "0x12FC988", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003137")]
		[Address(RVA = "0x12FC9F4", Offset = "0x12FC9F4", VA = "0x12FC9F4")]
		public AddForce()
		{
		}
	}
	[Token(Token = "0x200077C")]
	[TaskDescription("Applies a force at the specified position to the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class AddForceAtPosition : Action
	{
		[Token(Token = "0x4002ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount of force to apply")]
		public SharedVector2 force;

		[Token(Token = "0x4002AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The position of the force")]
		public SharedVector2 position;

		[Token(Token = "0x4002AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003138")]
		[Address(RVA = "0x12FC9FC", Offset = "0x12FC9FC", VA = "0x12FC9FC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003139")]
		[Address(RVA = "0x12FCB00", Offset = "0x12FCB00", VA = "0x12FCB00", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600313A")]
		[Address(RVA = "0x12FCC24", Offset = "0x12FCC24", VA = "0x12FCC24", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600313B")]
		[Address(RVA = "0x12FCCD0", Offset = "0x12FCCD0", VA = "0x12FCCD0")]
		public AddForceAtPosition()
		{
		}
	}
	[Token(Token = "0x200077D")]
	[TaskDescription("Applies a torque to the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class AddTorque : Action
	{
		[Token(Token = "0x4002AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount of torque to apply")]
		public SharedFloat torque;

		[Token(Token = "0x4002AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600313C")]
		[Address(RVA = "0x12FCCD8", Offset = "0x12FCCD8", VA = "0x12FCCD8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600313D")]
		[Address(RVA = "0x12FCDDC", Offset = "0x12FCDDC", VA = "0x12FCDDC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600313E")]
		[Address(RVA = "0x12FCED0", Offset = "0x12FCED0", VA = "0x12FCED0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600313F")]
		[Address(RVA = "0x12FCF04", Offset = "0x12FCF04", VA = "0x12FCF04")]
		public AddTorque()
		{
		}
	}
	[Token(Token = "0x200077E")]
	[TaskDescription("Stores the angular drag of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class GetAngularDrag : Action
	{
		[Token(Token = "0x4002AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The angular drag of the Rigidbody2D")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003140")]
		[Address(RVA = "0x12FCF0C", Offset = "0x12FCF0C", VA = "0x12FCF0C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003141")]
		[Address(RVA = "0x12FD010", Offset = "0x12FD010", VA = "0x12FD010", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003142")]
		[Address(RVA = "0x12FD104", Offset = "0x12FD104", VA = "0x12FD104", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003143")]
		[Address(RVA = "0x12FD138", Offset = "0x12FD138", VA = "0x12FD138")]
		public GetAngularDrag()
		{
		}
	}
	[Token(Token = "0x200077F")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Stores the angular velocity of the Rigidbody2D. Returns Success.")]
	public class GetAngularVelocity : Action
	{
		[Token(Token = "0x4002ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The angular velocity of the Rigidbody2D")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003144")]
		[Address(RVA = "0x12FD140", Offset = "0x12FD140", VA = "0x12FD140", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003145")]
		[Address(RVA = "0x12FD244", Offset = "0x12FD244", VA = "0x12FD244", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003146")]
		[Address(RVA = "0x12FD338", Offset = "0x12FD338", VA = "0x12FD338", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003147")]
		[Address(RVA = "0x12FD36C", Offset = "0x12FD36C", VA = "0x12FD36C")]
		public GetAngularVelocity()
		{
		}
	}
	[Token(Token = "0x2000780")]
	[TaskDescription("Stores the drag of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class GetDrag : Action
	{
		[Token(Token = "0x4002ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The drag of the Rigidbody2D")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003148")]
		[Address(RVA = "0x12FD374", Offset = "0x12FD374", VA = "0x12FD374", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003149")]
		[Address(RVA = "0x12FD478", Offset = "0x12FD478", VA = "0x12FD478", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600314A")]
		[Address(RVA = "0x12FD56C", Offset = "0x12FD56C", VA = "0x12FD56C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600314B")]
		[Address(RVA = "0x12FD5A0", Offset = "0x12FD5A0", VA = "0x12FD5A0")]
		public GetDrag()
		{
		}
	}
	[Token(Token = "0x2000781")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Stores the gravity scale of the Rigidbody2D. Returns Success.")]
	public class GetGravityScale : Action
	{
		[Token(Token = "0x4002AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The gravity scale of the Rigidbody2D")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600314C")]
		[Address(RVA = "0x12FD5A8", Offset = "0x12FD5A8", VA = "0x12FD5A8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600314D")]
		[Address(RVA = "0x12FD6AC", Offset = "0x12FD6AC", VA = "0x12FD6AC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600314E")]
		[Address(RVA = "0x12FD7A0", Offset = "0x12FD7A0", VA = "0x12FD7A0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600314F")]
		[Address(RVA = "0x12FD7D4", Offset = "0x12FD7D4", VA = "0x12FD7D4")]
		public GetGravityScale()
		{
		}
	}
	[Token(Token = "0x2000782")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Stores the is kinematic value of the Rigidbody2D. Returns Success.")]
	public class GetIsKinematic : Action
	{
		[Token(Token = "0x4002AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The is kinematic value of the Rigidbody2D")]
		[RequiredField]
		public SharedBool storeValue;

		[Token(Token = "0x4002AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003150")]
		[Address(RVA = "0x12FD7DC", Offset = "0x12FD7DC", VA = "0x12FD7DC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003151")]
		[Address(RVA = "0x12FD8E0", Offset = "0x12FD8E0", VA = "0x12FD8E0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003152")]
		[Address(RVA = "0x12FD9D8", Offset = "0x12FD9D8", VA = "0x12FD9D8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003153")]
		[Address(RVA = "0x12FDA0C", Offset = "0x12FDA0C", VA = "0x12FDA0C")]
		public GetIsKinematic()
		{
		}
	}
	[Token(Token = "0x2000783")]
	[TaskDescription("Stores the mass of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class GetMass : Action
	{
		[Token(Token = "0x4002AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The mass of the Rigidbody2D")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003154")]
		[Address(RVA = "0x12FDA14", Offset = "0x12FDA14", VA = "0x12FDA14", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003155")]
		[Address(RVA = "0x12FDB18", Offset = "0x12FDB18", VA = "0x12FDB18", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003156")]
		[Address(RVA = "0x12FDC0C", Offset = "0x12FDC0C", VA = "0x12FDC0C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003157")]
		[Address(RVA = "0x12FDC40", Offset = "0x12FDC40", VA = "0x12FDC40")]
		public GetMass()
		{
		}
	}
	[Token(Token = "0x2000784")]
	[TaskDescription("Stores the position of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class GetPosition : Action
	{
		[Token(Token = "0x4002AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The velocity of the Rigidbody2D")]
		[RequiredField]
		public SharedVector2 storeValue;

		[Token(Token = "0x4002AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003158")]
		[Address(RVA = "0x12FDC48", Offset = "0x12FDC48", VA = "0x12FDC48", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003159")]
		[Address(RVA = "0x12FDD4C", Offset = "0x12FDD4C", VA = "0x12FDD4C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600315A")]
		[Address(RVA = "0x12FDE40", Offset = "0x12FDE40", VA = "0x12FDE40", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600315B")]
		[Address(RVA = "0x12FDEAC", Offset = "0x12FDEAC", VA = "0x12FDEAC")]
		public GetPosition()
		{
		}
	}
	[Token(Token = "0x2000785")]
	[TaskDescription("Stores the rotation of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class GetRotation : Action
	{
		[Token(Token = "0x4002AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The rotation of the Rigidbody2D")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600315C")]
		[Address(RVA = "0x12FDEB4", Offset = "0x12FDEB4", VA = "0x12FDEB4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600315D")]
		[Address(RVA = "0x12FDFB8", Offset = "0x12FDFB8", VA = "0x12FDFB8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600315E")]
		[Address(RVA = "0x12FE0AC", Offset = "0x12FE0AC", VA = "0x12FE0AC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600315F")]
		[Address(RVA = "0x12FE0E0", Offset = "0x12FE0E0", VA = "0x12FE0E0")]
		public GetRotation()
		{
		}
	}
	[Token(Token = "0x2000786")]
	[TaskDescription("Stores the velocity of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class GetVelocity : Action
	{
		[Token(Token = "0x4002AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The velocity of the Rigidbody2D")]
		[RequiredField]
		public SharedVector2 storeValue;

		[Token(Token = "0x4002AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003160")]
		[Address(RVA = "0x12FE0E8", Offset = "0x12FE0E8", VA = "0x12FE0E8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003161")]
		[Address(RVA = "0x12FE1EC", Offset = "0x12FE1EC", VA = "0x12FE1EC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003162")]
		[Address(RVA = "0x12FE2E0", Offset = "0x12FE2E0", VA = "0x12FE2E0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003163")]
		[Address(RVA = "0x12FE34C", Offset = "0x12FE34C", VA = "0x12FE34C")]
		public GetVelocity()
		{
		}
	}
	[Token(Token = "0x2000787")]
	[TaskDescription("Returns Success if the Rigidbody2D is kinematic, otherwise Failure.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class IsKinematic : Conditional
	{
		[Token(Token = "0x4002AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003164")]
		[Address(RVA = "0x12FE354", Offset = "0x12FE354", VA = "0x12FE354", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003165")]
		[Address(RVA = "0x12FE458", Offset = "0x12FE458", VA = "0x12FE458", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003166")]
		[Address(RVA = "0x12FE52C", Offset = "0x12FE52C", VA = "0x12FE52C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003167")]
		[Address(RVA = "0x12FE538", Offset = "0x12FE538", VA = "0x12FE538")]
		public IsKinematic()
		{
		}
	}
	[Token(Token = "0x2000788")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Returns Success if the Rigidbody2D is sleeping, otherwise Failure.")]
	public class IsSleeping : Conditional
	{
		[Token(Token = "0x4002AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003168")]
		[Address(RVA = "0x12FE540", Offset = "0x12FE540", VA = "0x12FE540", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003169")]
		[Address(RVA = "0x12FE644", Offset = "0x12FE644", VA = "0x12FE644", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600316A")]
		[Address(RVA = "0x12FE718", Offset = "0x12FE718", VA = "0x12FE718", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600316B")]
		[Address(RVA = "0x12FE724", Offset = "0x12FE724", VA = "0x12FE724")]
		public IsSleeping()
		{
		}
	}
	[Token(Token = "0x2000789")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Moves the Rigidbody2D to the specified position. Returns Success.")]
	public class MovePosition : Action
	{
		[Token(Token = "0x4002B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new position of the Rigidbody")]
		public SharedVector2 position;

		[Token(Token = "0x4002B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600316C")]
		[Address(RVA = "0x12FE72C", Offset = "0x12FE72C", VA = "0x12FE72C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600316D")]
		[Address(RVA = "0x12FE830", Offset = "0x12FE830", VA = "0x12FE830", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600316E")]
		[Address(RVA = "0x12FE924", Offset = "0x12FE924", VA = "0x12FE924", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600316F")]
		[Address(RVA = "0x12FE990", Offset = "0x12FE990", VA = "0x12FE990")]
		public MovePosition()
		{
		}
	}
	[Token(Token = "0x200078A")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Rotates the Rigidbody2D to the specified rotation. Returns Success.")]
	public class MoveRotation : Action
	{
		[Token(Token = "0x4002B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new rotation of the Rigidbody")]
		public SharedFloat rotation;

		[Token(Token = "0x4002B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003170")]
		[Address(RVA = "0x12FE998", Offset = "0x12FE998", VA = "0x12FE998", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003171")]
		[Address(RVA = "0x12FEA9C", Offset = "0x12FEA9C", VA = "0x12FEA9C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003172")]
		[Address(RVA = "0x12FEB90", Offset = "0x12FEB90", VA = "0x12FEB90", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003173")]
		[Address(RVA = "0x12FEBC4", Offset = "0x12FEBC4", VA = "0x12FEBC4")]
		public MoveRotation()
		{
		}
	}
	[Token(Token = "0x200078B")]
	[TaskDescription("Sets the angular drag of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class SetAngularDrag : Action
	{
		[Token(Token = "0x4002B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The angular drag of the Rigidbody2D")]
		public SharedFloat angularDrag;

		[Token(Token = "0x4002B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003174")]
		[Address(RVA = "0x12FEBCC", Offset = "0x12FEBCC", VA = "0x12FEBCC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003175")]
		[Address(RVA = "0x12FECD0", Offset = "0x12FECD0", VA = "0x12FECD0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003176")]
		[Address(RVA = "0x12FEDC4", Offset = "0x12FEDC4", VA = "0x12FEDC4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003177")]
		[Address(RVA = "0x12FEDF8", Offset = "0x12FEDF8", VA = "0x12FEDF8")]
		public SetAngularDrag()
		{
		}
	}
	[Token(Token = "0x200078C")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Sets the angular velocity of the Rigidbody2D. Returns Success.")]
	public class SetAngularVelocity : Action
	{
		[Token(Token = "0x4002B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The angular velocity of the Rigidbody2D")]
		public SharedFloat angularVelocity;

		[Token(Token = "0x4002B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003178")]
		[Address(RVA = "0x12FEE00", Offset = "0x12FEE00", VA = "0x12FEE00", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003179")]
		[Address(RVA = "0x12FEF04", Offset = "0x12FEF04", VA = "0x12FEF04", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600317A")]
		[Address(RVA = "0x12FEFF8", Offset = "0x12FEFF8", VA = "0x12FEFF8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600317B")]
		[Address(RVA = "0x12FF02C", Offset = "0x12FF02C", VA = "0x12FF02C")]
		public SetAngularVelocity()
		{
		}
	}
	[Token(Token = "0x200078D")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Sets the drag of the Rigidbody2D. Returns Success.")]
	public class SetDrag : Action
	{
		[Token(Token = "0x4002B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The drag of the Rigidbody2D")]
		public SharedFloat drag;

		[Token(Token = "0x4002B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600317C")]
		[Address(RVA = "0x12FF034", Offset = "0x12FF034", VA = "0x12FF034", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600317D")]
		[Address(RVA = "0x12FF138", Offset = "0x12FF138", VA = "0x12FF138", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600317E")]
		[Address(RVA = "0x12FF22C", Offset = "0x12FF22C", VA = "0x12FF22C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600317F")]
		[Address(RVA = "0x12FF260", Offset = "0x12FF260", VA = "0x12FF260")]
		public SetDrag()
		{
		}
	}
	[Token(Token = "0x200078E")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Sets the gravity scale of the Rigidbody2D. Returns Success.")]
	public class SetGravityScale : Action
	{
		[Token(Token = "0x4002B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The gravity scale of the Rigidbody2D")]
		public SharedFloat gravityScale;

		[Token(Token = "0x4002B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003180")]
		[Address(RVA = "0x12FF268", Offset = "0x12FF268", VA = "0x12FF268", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003181")]
		[Address(RVA = "0x12FF36C", Offset = "0x12FF36C", VA = "0x12FF36C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003182")]
		[Address(RVA = "0x12FF460", Offset = "0x12FF460", VA = "0x12FF460", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003183")]
		[Address(RVA = "0x12FF494", Offset = "0x12FF494", VA = "0x12FF494")]
		public SetGravityScale()
		{
		}
	}
	[Token(Token = "0x200078F")]
	[TaskDescription("Sets the is kinematic value of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class SetIsKinematic : Action
	{
		[Token(Token = "0x4002B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The is kinematic value of the Rigidbody2D")]
		public SharedBool isKinematic;

		[Token(Token = "0x4002B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003184")]
		[Address(RVA = "0x12FF49C", Offset = "0x12FF49C", VA = "0x12FF49C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003185")]
		[Address(RVA = "0x12FF5A0", Offset = "0x12FF5A0", VA = "0x12FF5A0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003186")]
		[Address(RVA = "0x12FF698", Offset = "0x12FF698", VA = "0x12FF698", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003187")]
		[Address(RVA = "0x12FF6CC", Offset = "0x12FF6CC", VA = "0x12FF6CC")]
		public SetIsKinematic()
		{
		}
	}
	[Token(Token = "0x2000790")]
	[TaskDescription("Sets the mass of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class SetMass : Action
	{
		[Token(Token = "0x4002B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The mass of the Rigidbody2D")]
		public SharedFloat mass;

		[Token(Token = "0x4002B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003188")]
		[Address(RVA = "0x12FF6D4", Offset = "0x12FF6D4", VA = "0x12FF6D4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003189")]
		[Address(RVA = "0x12FF7D8", Offset = "0x12FF7D8", VA = "0x12FF7D8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600318A")]
		[Address(RVA = "0x12FF8CC", Offset = "0x12FF8CC", VA = "0x12FF8CC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600318B")]
		[Address(RVA = "0x12FF900", Offset = "0x12FF900", VA = "0x12FF900")]
		public SetMass()
		{
		}
	}
	[Token(Token = "0x2000791")]
	[TaskDescription("Sets the velocity of the Rigidbody2D. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class SetVelocity : Action
	{
		[Token(Token = "0x4002B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The velocity of the Rigidbody2D")]
		public SharedVector2 velocity;

		[Token(Token = "0x4002B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600318C")]
		[Address(RVA = "0x12FF908", Offset = "0x12FF908", VA = "0x12FF908", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600318D")]
		[Address(RVA = "0x12FFA0C", Offset = "0x12FFA0C", VA = "0x12FFA0C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600318E")]
		[Address(RVA = "0x12FFB00", Offset = "0x12FFB00", VA = "0x12FFB00", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600318F")]
		[Address(RVA = "0x12FFB6C", Offset = "0x12FFB6C", VA = "0x12FFB6C")]
		public SetVelocity()
		{
		}
	}
	[Token(Token = "0x2000792")]
	[TaskDescription("Forces the Rigidbody2D to sleep at least one frame. Returns Success.")]
	[TaskCategory("Unity/Rigidbody2D")]
	public class Sleep : Conditional
	{
		[Token(Token = "0x4002B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003190")]
		[Address(RVA = "0x12FFB74", Offset = "0x12FFB74", VA = "0x12FFB74", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003191")]
		[Address(RVA = "0x12FFC78", Offset = "0x12FFC78", VA = "0x12FFC78", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003192")]
		[Address(RVA = "0x12FFD44", Offset = "0x12FFD44", VA = "0x12FFD44", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003193")]
		[Address(RVA = "0x12FFD50", Offset = "0x12FFD50", VA = "0x12FFD50")]
		public Sleep()
		{
		}
	}
	[Token(Token = "0x2000793")]
	[TaskCategory("Unity/Rigidbody2D")]
	[TaskDescription("Forces the Rigidbody2D to wake up. Returns Success.")]
	public class WakeUp : Conditional
	{
		[Token(Token = "0x4002B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody2D rigidbody2D;

		[Token(Token = "0x4002B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003194")]
		[Address(RVA = "0x12FFD58", Offset = "0x12FFD58", VA = "0x12FFD58", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003195")]
		[Address(RVA = "0x12FFE5C", Offset = "0x12FFE5C", VA = "0x12FFE5C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003196")]
		[Address(RVA = "0x12FFF28", Offset = "0x12FFF28", VA = "0x12FFF28", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003197")]
		[Address(RVA = "0x12FFF34", Offset = "0x12FFF34", VA = "0x12FFF34")]
		public WakeUp()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityRigidbody
{
	[Token(Token = "0x2000794")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Applies a force to the rigidbody that simulates explosion effects. Returns Success.")]
	public class AddExplosionForce : Action
	{
		[Token(Token = "0x4002B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The force of the explosion")]
		public SharedFloat explosionForce;

		[Token(Token = "0x4002B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The position of the explosion")]
		public SharedVector3 explosionPosition;

		[Token(Token = "0x4002B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The radius of the explosion")]
		public SharedFloat explosionRadius;

		[Token(Token = "0x4002B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Applies the force as if it was applied from beneath the object")]
		public float upwardsModifier;

		[Token(Token = "0x4002B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("The type of force")]
		public ForceMode forceMode;

		[Token(Token = "0x4002B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003198")]
		[Address(RVA = "0x12FFF3C", Offset = "0x12FFF3C", VA = "0x12FFF3C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003199")]
		[Address(RVA = "0x1300040", Offset = "0x1300040", VA = "0x1300040", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600319A")]
		[Address(RVA = "0x13001A4", Offset = "0x13001A4", VA = "0x13001A4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600319B")]
		[Address(RVA = "0x1300254", Offset = "0x1300254", VA = "0x1300254")]
		public AddExplosionForce()
		{
		}
	}
	[Token(Token = "0x2000795")]
	[TaskDescription("Applies a force to the rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	[RequiredComponent(typeof(Rigidbody))]
	public class AddForce : Action
	{
		[Token(Token = "0x4002B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount of force to apply")]
		public SharedVector3 force;

		[Token(Token = "0x4002B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The type of force")]
		public ForceMode forceMode;

		[Token(Token = "0x4002B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x600319C")]
		[Address(RVA = "0x130025C", Offset = "0x130025C", VA = "0x130025C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600319D")]
		[Address(RVA = "0x1300360", Offset = "0x1300360", VA = "0x1300360", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600319E")]
		[Address(RVA = "0x1300458", Offset = "0x1300458", VA = "0x1300458", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600319F")]
		[Address(RVA = "0x1300504", Offset = "0x1300504", VA = "0x1300504")]
		public AddForce()
		{
		}
	}
	[Token(Token = "0x2000796")]
	[TaskDescription("Applies a force at the specified position to the rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class AddForceAtPosition : Action
	{
		[Token(Token = "0x4002B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount of force to apply")]
		public SharedVector3 force;

		[Token(Token = "0x4002B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The position of the force")]
		public SharedVector3 position;

		[Token(Token = "0x4002B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The type of force")]
		public ForceMode forceMode;

		[Token(Token = "0x4002B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031A0")]
		[Address(RVA = "0x130050C", Offset = "0x130050C", VA = "0x130050C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031A1")]
		[Address(RVA = "0x1300610", Offset = "0x1300610", VA = "0x1300610", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031A2")]
		[Address(RVA = "0x130074C", Offset = "0x130074C", VA = "0x130074C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031A3")]
		[Address(RVA = "0x1300808", Offset = "0x1300808", VA = "0x1300808")]
		public AddForceAtPosition()
		{
		}
	}
	[Token(Token = "0x2000797")]
	[TaskDescription("Applies a force to the rigidbody relative to its coordinate system. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class AddRelativeForce : Action
	{
		[Token(Token = "0x4002B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount of force to apply")]
		public SharedVector3 force;

		[Token(Token = "0x4002B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The type of force")]
		public ForceMode forceMode;

		[Token(Token = "0x4002B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031A4")]
		[Address(RVA = "0x1300810", Offset = "0x1300810", VA = "0x1300810", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031A5")]
		[Address(RVA = "0x1300914", Offset = "0x1300914", VA = "0x1300914", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031A6")]
		[Address(RVA = "0x1300A0C", Offset = "0x1300A0C", VA = "0x1300A0C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031A7")]
		[Address(RVA = "0x1300A84", Offset = "0x1300A84", VA = "0x1300A84")]
		public AddRelativeForce()
		{
		}
	}
	[Token(Token = "0x2000798")]
	[TaskDescription("Applies a torque to the rigidbody relative to its coordinate system. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class AddRelativeTorque : Action
	{
		[Token(Token = "0x4002B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount of torque to apply")]
		public SharedVector3 torque;

		[Token(Token = "0x4002B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The type of torque")]
		public ForceMode forceMode;

		[Token(Token = "0x4002B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031A8")]
		[Address(RVA = "0x1300A8C", Offset = "0x1300A8C", VA = "0x1300A8C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031A9")]
		[Address(RVA = "0x1300B90", Offset = "0x1300B90", VA = "0x1300B90", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031AA")]
		[Address(RVA = "0x1300C00", Offset = "0x1300C00", VA = "0x1300C00", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031AB")]
		[Address(RVA = "0x1300C78", Offset = "0x1300C78", VA = "0x1300C78")]
		public AddRelativeTorque()
		{
		}
	}
	[Token(Token = "0x2000799")]
	[TaskDescription("Applies a torque to the rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class AddTorque : Action
	{
		[Token(Token = "0x4002B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount of torque to apply")]
		public SharedVector3 torque;

		[Token(Token = "0x4002B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The type of torque")]
		public ForceMode forceMode;

		[Token(Token = "0x4002B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031AC")]
		[Address(RVA = "0x1300C80", Offset = "0x1300C80", VA = "0x1300C80", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031AD")]
		[Address(RVA = "0x1300D84", Offset = "0x1300D84", VA = "0x1300D84", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031AE")]
		[Address(RVA = "0x1300E7C", Offset = "0x1300E7C", VA = "0x1300E7C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031AF")]
		[Address(RVA = "0x1300EF4", Offset = "0x1300EF4", VA = "0x1300EF4")]
		public AddTorque()
		{
		}
	}
	[Token(Token = "0x200079A")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Stores the angular drag of the Rigidbody. Returns Success.")]
	public class GetAngularDrag : Action
	{
		[Token(Token = "0x4002B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The angular drag of the Rigidbody")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031B0")]
		[Address(RVA = "0x1300EFC", Offset = "0x1300EFC", VA = "0x1300EFC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031B1")]
		[Address(RVA = "0x1301000", Offset = "0x1301000", VA = "0x1301000", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031B2")]
		[Address(RVA = "0x13010F4", Offset = "0x13010F4", VA = "0x13010F4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031B3")]
		[Address(RVA = "0x1301128", Offset = "0x1301128", VA = "0x1301128")]
		public GetAngularDrag()
		{
		}
	}
	[Token(Token = "0x200079B")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Stores the angular velocity of the Rigidbody. Returns Success.")]
	public class GetAngularVelocity : Action
	{
		[Token(Token = "0x4002B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The angular velocity of the Rigidbody")]
		[RequiredField]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031B4")]
		[Address(RVA = "0x1301130", Offset = "0x1301130", VA = "0x1301130", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031B5")]
		[Address(RVA = "0x1301234", Offset = "0x1301234", VA = "0x1301234", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031B6")]
		[Address(RVA = "0x1301328", Offset = "0x1301328", VA = "0x1301328", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031B7")]
		[Address(RVA = "0x1301398", Offset = "0x1301398", VA = "0x1301398")]
		public GetAngularVelocity()
		{
		}
	}
	[Token(Token = "0x200079C")]
	[TaskDescription("Stores the center of mass of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class GetCenterOfMass : Action
	{
		[Token(Token = "0x4002B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The center of mass of the Rigidbody")]
		[RequiredField]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031B8")]
		[Address(RVA = "0x13013A0", Offset = "0x13013A0", VA = "0x13013A0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031B9")]
		[Address(RVA = "0x13014A4", Offset = "0x13014A4", VA = "0x13014A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031BA")]
		[Address(RVA = "0x1301598", Offset = "0x1301598", VA = "0x1301598", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031BB")]
		[Address(RVA = "0x1301608", Offset = "0x1301608", VA = "0x1301608")]
		public GetCenterOfMass()
		{
		}
	}
	[Token(Token = "0x200079D")]
	[TaskDescription("Stores the drag of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class GetDrag : Action
	{
		[Token(Token = "0x4002B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The drag of the Rigidbody")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031BC")]
		[Address(RVA = "0x1301610", Offset = "0x1301610", VA = "0x1301610", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031BD")]
		[Address(RVA = "0x1301714", Offset = "0x1301714", VA = "0x1301714", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031BE")]
		[Address(RVA = "0x1301808", Offset = "0x1301808", VA = "0x1301808", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031BF")]
		[Address(RVA = "0x130183C", Offset = "0x130183C", VA = "0x130183C")]
		public GetDrag()
		{
		}
	}
	[Token(Token = "0x200079E")]
	[TaskDescription("Stores the freeze rotation value of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class GetFreezeRotation : Action
	{
		[Token(Token = "0x4002B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The freeze rotation value of the Rigidbody")]
		public SharedBool storeValue;

		[Token(Token = "0x4002B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031C0")]
		[Address(RVA = "0x1301844", Offset = "0x1301844", VA = "0x1301844", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031C1")]
		[Address(RVA = "0x1301948", Offset = "0x1301948", VA = "0x1301948", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031C2")]
		[Address(RVA = "0x1301A40", Offset = "0x1301A40", VA = "0x1301A40", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031C3")]
		[Address(RVA = "0x1301A74", Offset = "0x1301A74", VA = "0x1301A74")]
		public GetFreezeRotation()
		{
		}
	}
	[Token(Token = "0x200079F")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Stores the is kinematic value of the Rigidbody. Returns Success.")]
	public class GetIsKinematic : Action
	{
		[Token(Token = "0x4002B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The is kinematic value of the Rigidbody")]
		[RequiredField]
		public SharedBool storeValue;

		[Token(Token = "0x4002B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031C4")]
		[Address(RVA = "0x1301A7C", Offset = "0x1301A7C", VA = "0x1301A7C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031C5")]
		[Address(RVA = "0x1301B80", Offset = "0x1301B80", VA = "0x1301B80", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031C6")]
		[Address(RVA = "0x1301C78", Offset = "0x1301C78", VA = "0x1301C78", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031C7")]
		[Address(RVA = "0x1301CAC", Offset = "0x1301CAC", VA = "0x1301CAC")]
		public GetIsKinematic()
		{
		}
	}
	[Token(Token = "0x20007A0")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Stores the mass of the Rigidbody. Returns Success.")]
	public class GetMass : Action
	{
		[Token(Token = "0x4002B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The mass of the Rigidbody")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031C8")]
		[Address(RVA = "0x1301CB4", Offset = "0x1301CB4", VA = "0x1301CB4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031C9")]
		[Address(RVA = "0x1301DB8", Offset = "0x1301DB8", VA = "0x1301DB8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031CA")]
		[Address(RVA = "0x1301EAC", Offset = "0x1301EAC", VA = "0x1301EAC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031CB")]
		[Address(RVA = "0x1301EE0", Offset = "0x1301EE0", VA = "0x1301EE0")]
		public GetMass()
		{
		}
	}
	[Token(Token = "0x20007A1")]
	[TaskDescription("Stores the position of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class GetPosition : Action
	{
		[Token(Token = "0x4002B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The position of the Rigidbody")]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031CC")]
		[Address(RVA = "0x1301EE8", Offset = "0x1301EE8", VA = "0x1301EE8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031CD")]
		[Address(RVA = "0x1301FEC", Offset = "0x1301FEC", VA = "0x1301FEC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031CE")]
		[Address(RVA = "0x13020E0", Offset = "0x13020E0", VA = "0x13020E0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031CF")]
		[Address(RVA = "0x1302150", Offset = "0x1302150", VA = "0x1302150")]
		public GetPosition()
		{
		}
	}
	[Token(Token = "0x20007A2")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Stores the rotation of the Rigidbody. Returns Success.")]
	public class GetRotation : Action
	{
		[Token(Token = "0x4002B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rotation of the Rigidbody")]
		[RequiredField]
		public SharedQuaternion storeValue;

		[Token(Token = "0x4002B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031D0")]
		[Address(RVA = "0x1302158", Offset = "0x1302158", VA = "0x1302158", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031D1")]
		[Address(RVA = "0x130225C", Offset = "0x130225C", VA = "0x130225C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031D2")]
		[Address(RVA = "0x1302350", Offset = "0x1302350", VA = "0x1302350", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031D3")]
		[Address(RVA = "0x13023C0", Offset = "0x13023C0", VA = "0x13023C0")]
		public GetRotation()
		{
		}
	}
	[Token(Token = "0x20007A3")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Stores the use gravity value of the Rigidbody. Returns Success.")]
	public class GetUseGravity : Action
	{
		[Token(Token = "0x4002B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The use gravity value of the Rigidbody")]
		[RequiredField]
		public SharedBool storeValue;

		[Token(Token = "0x4002B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031D4")]
		[Address(RVA = "0x13023C8", Offset = "0x13023C8", VA = "0x13023C8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031D5")]
		[Address(RVA = "0x13024CC", Offset = "0x13024CC", VA = "0x13024CC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031D6")]
		[Address(RVA = "0x13025C4", Offset = "0x13025C4", VA = "0x13025C4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031D7")]
		[Address(RVA = "0x13025F8", Offset = "0x13025F8", VA = "0x13025F8")]
		public GetUseGravity()
		{
		}
	}
	[Token(Token = "0x20007A4")]
	[TaskDescription("Stores the velocity of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class GetVelocity : Action
	{
		[Token(Token = "0x4002B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The velocity of the Rigidbody")]
		[RequiredField]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031D8")]
		[Address(RVA = "0x1302600", Offset = "0x1302600", VA = "0x1302600", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031D9")]
		[Address(RVA = "0x1302704", Offset = "0x1302704", VA = "0x1302704", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031DA")]
		[Address(RVA = "0x13027F8", Offset = "0x13027F8", VA = "0x13027F8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031DB")]
		[Address(RVA = "0x1302868", Offset = "0x1302868", VA = "0x1302868")]
		public GetVelocity()
		{
		}
	}
	[Token(Token = "0x20007A5")]
	[TaskDescription("Returns Success if the Rigidbody is kinematic, otherwise Failure.")]
	[TaskCategory("Unity/Rigidbody")]
	public class IsKinematic : Conditional
	{
		[Token(Token = "0x4002B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031DC")]
		[Address(RVA = "0x1302870", Offset = "0x1302870", VA = "0x1302870", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031DD")]
		[Address(RVA = "0x1302974", Offset = "0x1302974", VA = "0x1302974", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031DE")]
		[Address(RVA = "0x1302A48", Offset = "0x1302A48", VA = "0x1302A48", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031DF")]
		[Address(RVA = "0x1302A54", Offset = "0x1302A54", VA = "0x1302A54")]
		public IsKinematic()
		{
		}
	}
	[Token(Token = "0x20007A6")]
	[TaskDescription("Returns Success if the Rigidbody is sleeping, otherwise Failure.")]
	[TaskCategory("Unity/Rigidbody")]
	public class IsSleeping : Conditional
	{
		[Token(Token = "0x4002B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031E0")]
		[Address(RVA = "0x1302A5C", Offset = "0x1302A5C", VA = "0x1302A5C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031E1")]
		[Address(RVA = "0x1302B60", Offset = "0x1302B60", VA = "0x1302B60", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031E2")]
		[Address(RVA = "0x1302C34", Offset = "0x1302C34", VA = "0x1302C34", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031E3")]
		[Address(RVA = "0x1302C40", Offset = "0x1302C40", VA = "0x1302C40")]
		public IsSleeping()
		{
		}
	}
	[Token(Token = "0x20007A7")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Moves the Rigidbody to the specified position. Returns Success.")]
	public class MovePosition : Action
	{
		[Token(Token = "0x4002B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new position of the Rigidbody")]
		public SharedVector3 position;

		[Token(Token = "0x4002B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031E4")]
		[Address(RVA = "0x1302C48", Offset = "0x1302C48", VA = "0x1302C48", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031E5")]
		[Address(RVA = "0x1302D4C", Offset = "0x1302D4C", VA = "0x1302D4C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031E6")]
		[Address(RVA = "0x1302E40", Offset = "0x1302E40", VA = "0x1302E40", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031E7")]
		[Address(RVA = "0x1302EB0", Offset = "0x1302EB0", VA = "0x1302EB0")]
		public MovePosition()
		{
		}
	}
	[Token(Token = "0x20007A8")]
	[TaskDescription("Rotates the Rigidbody to the specified rotation. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class MoveRotation : Action
	{
		[Token(Token = "0x4002B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new rotation of the Rigidbody")]
		public SharedQuaternion rotation;

		[Token(Token = "0x4002B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031E8")]
		[Address(RVA = "0x1302EB8", Offset = "0x1302EB8", VA = "0x1302EB8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031E9")]
		[Address(RVA = "0x1302FBC", Offset = "0x1302FBC", VA = "0x1302FBC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031EA")]
		[Address(RVA = "0x13030B0", Offset = "0x13030B0", VA = "0x13030B0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031EB")]
		[Address(RVA = "0x1303120", Offset = "0x1303120", VA = "0x1303120")]
		public MoveRotation()
		{
		}
	}
	[Token(Token = "0x20007A9")]
	[TaskDescription("Sets the angular drag of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class SetAngularDrag : Action
	{
		[Token(Token = "0x4002B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The angular drag of the Rigidbody")]
		public SharedFloat angularDrag;

		[Token(Token = "0x4002B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031EC")]
		[Address(RVA = "0x1303128", Offset = "0x1303128", VA = "0x1303128", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031ED")]
		[Address(RVA = "0x130322C", Offset = "0x130322C", VA = "0x130322C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031EE")]
		[Address(RVA = "0x1303320", Offset = "0x1303320", VA = "0x1303320", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031EF")]
		[Address(RVA = "0x1303354", Offset = "0x1303354", VA = "0x1303354")]
		public SetAngularDrag()
		{
		}
	}
	[Token(Token = "0x20007AA")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Sets the angular velocity of the Rigidbody. Returns Success.")]
	public class SetAngularVelocity : Action
	{
		[Token(Token = "0x4002B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The angular velocity of the Rigidbody")]
		public SharedVector3 angularVelocity;

		[Token(Token = "0x4002B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031F0")]
		[Address(RVA = "0x130335C", Offset = "0x130335C", VA = "0x130335C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031F1")]
		[Address(RVA = "0x1303460", Offset = "0x1303460", VA = "0x1303460", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031F2")]
		[Address(RVA = "0x1303554", Offset = "0x1303554", VA = "0x1303554", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031F3")]
		[Address(RVA = "0x13035C4", Offset = "0x13035C4", VA = "0x13035C4")]
		public SetAngularVelocity()
		{
		}
	}
	[Token(Token = "0x20007AB")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Sets the center of mass of the Rigidbody. Returns Success.")]
	public class SetCenterOfMass : Action
	{
		[Token(Token = "0x4002B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The center of mass of the Rigidbody")]
		public SharedVector3 centerOfMass;

		[Token(Token = "0x4002B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031F4")]
		[Address(RVA = "0x13035CC", Offset = "0x13035CC", VA = "0x13035CC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031F5")]
		[Address(RVA = "0x13036D0", Offset = "0x13036D0", VA = "0x13036D0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031F6")]
		[Address(RVA = "0x13037C4", Offset = "0x13037C4", VA = "0x13037C4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031F7")]
		[Address(RVA = "0x1303834", Offset = "0x1303834", VA = "0x1303834")]
		public SetCenterOfMass()
		{
		}
	}
	[Token(Token = "0x20007AC")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Sets the constraints of the Rigidbody. Returns Success.")]
	public class SetConstraints : Action
	{
		[Token(Token = "0x4002B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The constraints of the Rigidbody")]
		public RigidbodyConstraints constraints;

		[Token(Token = "0x4002B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031F8")]
		[Address(RVA = "0x130383C", Offset = "0x130383C", VA = "0x130383C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031F9")]
		[Address(RVA = "0x1303940", Offset = "0x1303940", VA = "0x1303940", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031FA")]
		[Address(RVA = "0x1303A10", Offset = "0x1303A10", VA = "0x1303A10", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031FB")]
		[Address(RVA = "0x1303A34", Offset = "0x1303A34", VA = "0x1303A34")]
		public SetConstraints()
		{
		}
	}
	[Token(Token = "0x20007AD")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Sets the drag of the Rigidbody. Returns Success.")]
	public class SetDrag : Action
	{
		[Token(Token = "0x4002B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The drag of the Rigidbody")]
		public SharedFloat drag;

		[Token(Token = "0x4002B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60031FC")]
		[Address(RVA = "0x1303A3C", Offset = "0x1303A3C", VA = "0x1303A3C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60031FD")]
		[Address(RVA = "0x1303B40", Offset = "0x1303B40", VA = "0x1303B40", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60031FE")]
		[Address(RVA = "0x1303C34", Offset = "0x1303C34", VA = "0x1303C34", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60031FF")]
		[Address(RVA = "0x1303C68", Offset = "0x1303C68", VA = "0x1303C68")]
		public SetDrag()
		{
		}
	}
	[Token(Token = "0x20007AE")]
	[TaskDescription("Sets the freeze rotation value of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class SetFreezeRotation : Action
	{
		[Token(Token = "0x4002B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The freeze rotation value of the Rigidbody")]
		public SharedBool freezeRotation;

		[Token(Token = "0x4002B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003200")]
		[Address(RVA = "0x1303C70", Offset = "0x1303C70", VA = "0x1303C70", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003201")]
		[Address(RVA = "0x1303D74", Offset = "0x1303D74", VA = "0x1303D74", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003202")]
		[Address(RVA = "0x1303E6C", Offset = "0x1303E6C", VA = "0x1303E6C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003203")]
		[Address(RVA = "0x1303EA0", Offset = "0x1303EA0", VA = "0x1303EA0")]
		public SetFreezeRotation()
		{
		}
	}
	[Token(Token = "0x20007AF")]
	[TaskDescription("Sets the is kinematic value of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class SetIsKinematic : Action
	{
		[Token(Token = "0x4002B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The is kinematic value of the Rigidbody")]
		public SharedBool isKinematic;

		[Token(Token = "0x4002BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003204")]
		[Address(RVA = "0x1303EA8", Offset = "0x1303EA8", VA = "0x1303EA8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003205")]
		[Address(RVA = "0x1303FAC", Offset = "0x1303FAC", VA = "0x1303FAC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003206")]
		[Address(RVA = "0x13040A4", Offset = "0x13040A4", VA = "0x13040A4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003207")]
		[Address(RVA = "0x13040D8", Offset = "0x13040D8", VA = "0x13040D8")]
		public SetIsKinematic()
		{
		}
	}
	[Token(Token = "0x20007B0")]
	[TaskDescription("Sets the mass of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class SetMass : Action
	{
		[Token(Token = "0x4002BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The mass of the Rigidbody")]
		public SharedFloat mass;

		[Token(Token = "0x4002BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003208")]
		[Address(RVA = "0x13040E0", Offset = "0x13040E0", VA = "0x13040E0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003209")]
		[Address(RVA = "0x13041E4", Offset = "0x13041E4", VA = "0x13041E4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600320A")]
		[Address(RVA = "0x13042D8", Offset = "0x13042D8", VA = "0x13042D8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600320B")]
		[Address(RVA = "0x130430C", Offset = "0x130430C", VA = "0x130430C")]
		public SetMass()
		{
		}
	}
	[Token(Token = "0x20007B1")]
	[TaskCategory("Unity/Rigidbody")]
	[TaskDescription("Sets the position of the Rigidbody. Returns Success.")]
	public class SetPosition : Action
	{
		[Token(Token = "0x4002BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position of the Rigidbody")]
		public SharedVector3 position;

		[Token(Token = "0x4002BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600320C")]
		[Address(RVA = "0x1304314", Offset = "0x1304314", VA = "0x1304314", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600320D")]
		[Address(RVA = "0x1304418", Offset = "0x1304418", VA = "0x1304418", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600320E")]
		[Address(RVA = "0x130450C", Offset = "0x130450C", VA = "0x130450C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600320F")]
		[Address(RVA = "0x130457C", Offset = "0x130457C", VA = "0x130457C")]
		public SetPosition()
		{
		}
	}
	[Token(Token = "0x20007B2")]
	[TaskDescription("Stores the rotation of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class SetRotation : Action
	{
		[Token(Token = "0x4002BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rotation of the Rigidbody")]
		public SharedQuaternion rotation;

		[Token(Token = "0x4002BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003210")]
		[Address(RVA = "0x1304584", Offset = "0x1304584", VA = "0x1304584", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003211")]
		[Address(RVA = "0x1304688", Offset = "0x1304688", VA = "0x1304688", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003212")]
		[Address(RVA = "0x130477C", Offset = "0x130477C", VA = "0x130477C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003213")]
		[Address(RVA = "0x13047EC", Offset = "0x13047EC", VA = "0x13047EC")]
		public SetRotation()
		{
		}
	}
	[Token(Token = "0x20007B3")]
	[TaskDescription("Sets the use gravity value of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class SetUseGravity : Action
	{
		[Token(Token = "0x4002BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The use gravity value of the Rigidbody")]
		public SharedBool useGravity;

		[Token(Token = "0x4002BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003214")]
		[Address(RVA = "0x13047F4", Offset = "0x13047F4", VA = "0x13047F4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003215")]
		[Address(RVA = "0x13048F8", Offset = "0x13048F8", VA = "0x13048F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003216")]
		[Address(RVA = "0x13049F0", Offset = "0x13049F0", VA = "0x13049F0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003217")]
		[Address(RVA = "0x1304A24", Offset = "0x1304A24", VA = "0x1304A24")]
		public SetUseGravity()
		{
		}
	}
	[Token(Token = "0x20007B4")]
	[TaskDescription("Sets the velocity of the Rigidbody. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class SetVelocity : Action
	{
		[Token(Token = "0x4002BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The velocity of the Rigidbody")]
		public SharedVector3 velocity;

		[Token(Token = "0x4002BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003218")]
		[Address(RVA = "0x1304A2C", Offset = "0x1304A2C", VA = "0x1304A2C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003219")]
		[Address(RVA = "0x1304B30", Offset = "0x1304B30", VA = "0x1304B30", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600321A")]
		[Address(RVA = "0x1304C24", Offset = "0x1304C24", VA = "0x1304C24", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600321B")]
		[Address(RVA = "0x1304C94", Offset = "0x1304C94", VA = "0x1304C94")]
		public SetVelocity()
		{
		}
	}
	[Token(Token = "0x20007B5")]
	[TaskDescription("Forces the Rigidbody to sleep at least one frame. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class Sleep : Conditional
	{
		[Token(Token = "0x4002BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x600321C")]
		[Address(RVA = "0x1304C9C", Offset = "0x1304C9C", VA = "0x1304C9C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600321D")]
		[Address(RVA = "0x1304DA0", Offset = "0x1304DA0", VA = "0x1304DA0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600321E")]
		[Address(RVA = "0x1304E6C", Offset = "0x1304E6C", VA = "0x1304E6C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600321F")]
		[Address(RVA = "0x1304E78", Offset = "0x1304E78", VA = "0x1304E78")]
		public Sleep()
		{
		}
	}
	[Token(Token = "0x20007B6")]
	[TaskDescription("Returns Success if the Rigidbody is using gravity, otherwise Failure.")]
	[TaskCategory("Unity/Rigidbody")]
	public class UseGravity : Conditional
	{
		[Token(Token = "0x4002BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003220")]
		[Address(RVA = "0x1304E80", Offset = "0x1304E80", VA = "0x1304E80", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003221")]
		[Address(RVA = "0x1304F84", Offset = "0x1304F84", VA = "0x1304F84", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003222")]
		[Address(RVA = "0x1305058", Offset = "0x1305058", VA = "0x1305058", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003223")]
		[Address(RVA = "0x1305064", Offset = "0x1305064", VA = "0x1305064")]
		public UseGravity()
		{
		}
	}
	[Token(Token = "0x20007B7")]
	[TaskDescription("Forces the Rigidbody to wake up. Returns Success.")]
	[TaskCategory("Unity/Rigidbody")]
	public class WakeUp : Conditional
	{
		[Token(Token = "0x4002BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4002BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003224")]
		[Address(RVA = "0x130506C", Offset = "0x130506C", VA = "0x130506C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003225")]
		[Address(RVA = "0x1305170", Offset = "0x1305170", VA = "0x1305170", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003226")]
		[Address(RVA = "0x130523C", Offset = "0x130523C", VA = "0x130523C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003227")]
		[Address(RVA = "0x1305248", Offset = "0x1305248", VA = "0x1305248")]
		public WakeUp()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityRenderer
{
	[Token(Token = "0x20007B8")]
	[TaskCategory("Unity/Renderer")]
	[TaskDescription("Returns Success if the Renderer is visible, otherwise Failure.")]
	public class IsVisible : Conditional
	{
		[Token(Token = "0x4002BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Renderer renderer;

		[Token(Token = "0x4002BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003228")]
		[Address(RVA = "0x1305250", Offset = "0x1305250", VA = "0x1305250", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003229")]
		[Address(RVA = "0x1305354", Offset = "0x1305354", VA = "0x1305354", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600322A")]
		[Address(RVA = "0x1305428", Offset = "0x1305428", VA = "0x1305428", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600322B")]
		[Address(RVA = "0x1305434", Offset = "0x1305434", VA = "0x1305434")]
		public IsVisible()
		{
		}
	}
	[Token(Token = "0x20007B9")]
	[TaskDescription("Sets the material on the Renderer.")]
	[TaskCategory("Unity/Renderer")]
	public class SetMaterial : Action
	{
		[Token(Token = "0x4002BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The material to set")]
		public SharedMaterial material;

		[Token(Token = "0x4002BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer renderer;

		[Token(Token = "0x4002BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600322C")]
		[Address(RVA = "0x130543C", Offset = "0x130543C", VA = "0x130543C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600322D")]
		[Address(RVA = "0x1305540", Offset = "0x1305540", VA = "0x1305540", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600322E")]
		[Address(RVA = "0x1305638", Offset = "0x1305638", VA = "0x1305638", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600322F")]
		[Address(RVA = "0x1305660", Offset = "0x1305660", VA = "0x1305660")]
		public SetMaterial()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityQuaternion
{
	[Token(Token = "0x20007BA")]
	[TaskDescription("Stores the angle in degrees between two rotations.")]
	[TaskCategory("Unity/Quaternion")]
	public class Angle : Action
	{
		[Token(Token = "0x4002BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first rotation")]
		public SharedQuaternion firstRotation;

		[Token(Token = "0x4002BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second rotation")]
		public SharedQuaternion secondRotation;

		[Token(Token = "0x4002BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x6003230")]
		[Address(RVA = "0x1305668", Offset = "0x1305668", VA = "0x1305668", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003231")]
		[Address(RVA = "0x130576C", Offset = "0x130576C", VA = "0x130576C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003232")]
		[Address(RVA = "0x1305800", Offset = "0x1305800", VA = "0x1305800")]
		public Angle()
		{
		}
	}
	[Token(Token = "0x20007BB")]
	[TaskCategory("Unity/Quaternion")]
	[TaskDescription("Stores the rotation which rotates the specified degrees around the specified axis.")]
	public class AngleAxis : Action
	{
		[Token(Token = "0x4002BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The number of degrees")]
		public SharedFloat degrees;

		[Token(Token = "0x4002BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The axis direction")]
		public SharedVector3 axis;

		[Token(Token = "0x4002BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedQuaternion storeResult;

		[Token(Token = "0x6003233")]
		[Address(RVA = "0x1305808", Offset = "0x1305808", VA = "0x1305808", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003234")]
		[Address(RVA = "0x13058DC", Offset = "0x13058DC", VA = "0x13058DC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003235")]
		[Address(RVA = "0x13059AC", Offset = "0x13059AC", VA = "0x13059AC")]
		public AngleAxis()
		{
		}
	}
	[Token(Token = "0x20007BC")]
	[TaskCategory("Unity/Quaternion")]
	[TaskDescription("Stores the dot product between two rotations.")]
	public class Dot : Action
	{
		[Token(Token = "0x4002BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first rotation")]
		public SharedQuaternion leftRotation;

		[Token(Token = "0x4002BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second rotation")]
		public SharedQuaternion rightRotation;

		[Token(Token = "0x4002BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedFloat storeResult;

		[Token(Token = "0x6003236")]
		[Address(RVA = "0x13059B4", Offset = "0x13059B4", VA = "0x13059B4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003237")]
		[Address(RVA = "0x1305A80", Offset = "0x1305A80", VA = "0x1305A80", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003238")]
		[Address(RVA = "0x1305B14", Offset = "0x1305B14", VA = "0x1305B14")]
		public Dot()
		{
		}
	}
	[Token(Token = "0x20007BD")]
	[TaskCategory("Unity/Quaternion")]
	[TaskDescription("Stores the quaternion of a euler vector.")]
	public class Euler : Action
	{
		[Token(Token = "0x4002BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The euler vector")]
		public SharedVector3 eulerVector;

		[Token(Token = "0x4002BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The stored quaternion")]
		public SharedQuaternion storeResult;

		[Token(Token = "0x6003239")]
		[Address(RVA = "0x1305B1C", Offset = "0x1305B1C", VA = "0x1305B1C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600323A")]
		[Address(RVA = "0x1305BB8", Offset = "0x1305BB8", VA = "0x1305BB8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600323B")]
		[Address(RVA = "0x1305C6C", Offset = "0x1305C6C", VA = "0x1305C6C")]
		public Euler()
		{
		}
	}
	[Token(Token = "0x20007BE")]
	[TaskDescription("Stores a rotation which rotates from the first direction to the second.")]
	[TaskCategory("Unity/Quaternion")]
	public class FromToRotation : Action
	{
		[Token(Token = "0x4002BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The from rotation")]
		public SharedVector3 fromDirection;

		[Token(Token = "0x4002BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The to rotation")]
		public SharedVector3 toDirection;

		[Token(Token = "0x4002BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedQuaternion storeResult;

		[Token(Token = "0x600323C")]
		[Address(RVA = "0x1305C74", Offset = "0x1305C74", VA = "0x1305C74", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600323D")]
		[Address(RVA = "0x1305D40", Offset = "0x1305D40", VA = "0x1305D40", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600323E")]
		[Address(RVA = "0x1305E08", Offset = "0x1305E08", VA = "0x1305E08")]
		public FromToRotation()
		{
		}
	}
	[Token(Token = "0x20007BF")]
	[TaskDescription("Stores the quaternion identity.")]
	[TaskCategory("Unity/Quaternion")]
	public class Identity : Action
	{
		[Token(Token = "0x4002BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The identity")]
		[RequiredField]
		public SharedQuaternion storeResult;

		[Token(Token = "0x600323F")]
		[Address(RVA = "0x1305E10", Offset = "0x1305E10", VA = "0x1305E10", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003240")]
		[Address(RVA = "0x1305EA4", Offset = "0x1305EA4", VA = "0x1305EA4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003241")]
		[Address(RVA = "0x1305F08", Offset = "0x1305F08", VA = "0x1305F08")]
		public Identity()
		{
		}
	}
	[Token(Token = "0x20007C0")]
	[TaskDescription("Stores the inverse of the specified quaternion.")]
	[TaskCategory("Unity/Quaternion")]
	public class Inverse : Action
	{
		[Token(Token = "0x4002BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target quaternion")]
		public SharedQuaternion targetQuaternion;

		[Token(Token = "0x4002BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The stored quaternion")]
		[RequiredField]
		public SharedQuaternion storeResult;

		[Token(Token = "0x6003242")]
		[Address(RVA = "0x1305F10", Offset = "0x1305F10", VA = "0x1305F10", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003243")]
		[Address(RVA = "0x1305F98", Offset = "0x1305F98", VA = "0x1305F98", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003244")]
		[Address(RVA = "0x1306010", Offset = "0x1306010", VA = "0x1306010")]
		public Inverse()
		{
		}
	}
	[Token(Token = "0x20007C1")]
	[TaskCategory("Unity/Quaternion")]
	[TaskDescription("Lerps between two quaternions.")]
	public class Lerp : Action
	{
		[Token(Token = "0x4002BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The from rotation")]
		public SharedQuaternion fromQuaternion;

		[Token(Token = "0x4002BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The to rotation")]
		public SharedQuaternion toQuaternion;

		[Token(Token = "0x4002BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The amount to lerp")]
		public SharedFloat amount;

		[Token(Token = "0x4002BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedQuaternion storeResult;

		[Token(Token = "0x6003245")]
		[Address(RVA = "0x1306018", Offset = "0x1306018", VA = "0x1306018", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003246")]
		[Address(RVA = "0x1306140", Offset = "0x1306140", VA = "0x1306140", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003247")]
		[Address(RVA = "0x13061E4", Offset = "0x13061E4", VA = "0x13061E4")]
		public Lerp()
		{
		}
	}
	[Token(Token = "0x20007C2")]
	[TaskCategory("Unity/Quaternion")]
	[TaskDescription("Stores the quaternion of a forward vector.")]
	public class LookRotation : Action
	{
		[Token(Token = "0x4002BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The forward vector")]
		public SharedVector3 forwardVector;

		[Token(Token = "0x4002BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second Vector3")]
		public SharedVector3 secondVector3;

		[Token(Token = "0x4002BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The stored quaternion")]
		public SharedQuaternion storeResult;

		[Token(Token = "0x6003248")]
		[Address(RVA = "0x13061EC", Offset = "0x13061EC", VA = "0x13061EC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003249")]
		[Address(RVA = "0x1306274", Offset = "0x1306274", VA = "0x1306274", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600324A")]
		[Address(RVA = "0x1306328", Offset = "0x1306328", VA = "0x1306328")]
		public LookRotation()
		{
		}
	}
	[Token(Token = "0x20007C3")]
	[TaskCategory("Unity/Quaternion")]
	[TaskDescription("Stores the quaternion after a rotation.")]
	public class RotateTowards : Action
	{
		[Token(Token = "0x4002BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The from rotation")]
		public SharedQuaternion fromQuaternion;

		[Token(Token = "0x4002BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The to rotation")]
		public SharedQuaternion toQuaternion;

		[Token(Token = "0x4002BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum degrees delta")]
		public SharedFloat maxDeltaDegrees;

		[Token(Token = "0x4002BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedQuaternion storeResult;

		[Token(Token = "0x600324B")]
		[Address(RVA = "0x1306330", Offset = "0x1306330", VA = "0x1306330", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600324C")]
		[Address(RVA = "0x13064E4", Offset = "0x13064E4", VA = "0x13064E4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600324D")]
		[Address(RVA = "0x1306588", Offset = "0x1306588", VA = "0x1306588")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x20007C4")]
	[TaskCategory("Unity/Quaternion")]
	[TaskDescription("Spherically lerp between two quaternions.")]
	public class Slerp : Action
	{
		[Token(Token = "0x4002BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The from rotation")]
		public SharedQuaternion fromQuaternion;

		[Token(Token = "0x4002BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The to rotation")]
		public SharedQuaternion toQuaternion;

		[Token(Token = "0x4002BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The amount to lerp")]
		public SharedFloat amount;

		[Token(Token = "0x4002BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedQuaternion storeResult;

		[Token(Token = "0x600324E")]
		[Address(RVA = "0x1306590", Offset = "0x1306590", VA = "0x1306590", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600324F")]
		[Address(RVA = "0x13066B8", Offset = "0x13066B8", VA = "0x13066B8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003250")]
		[Address(RVA = "0x130675C", Offset = "0x130675C", VA = "0x130675C")]
		public Slerp()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityPlayerPrefs
{
	[Token(Token = "0x20007C5")]
	[TaskCategory("Unity/PlayerPrefs")]
	[TaskDescription("Deletes all entries from the PlayerPrefs.")]
	public class DeleteAll : Action
	{
		[Token(Token = "0x6003251")]
		[Address(RVA = "0x1306764", Offset = "0x1306764", VA = "0x1306764", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003252")]
		[Address(RVA = "0x130677C", Offset = "0x130677C", VA = "0x130677C")]
		public DeleteAll()
		{
		}
	}
	[Token(Token = "0x20007C6")]
	[TaskCategory("Unity/PlayerPrefs")]
	[TaskDescription("Deletes the specified key from the PlayerPrefs.")]
	public class DeleteKey : Action
	{
		[Token(Token = "0x4002BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The key to delete")]
		public SharedString key;

		[Token(Token = "0x6003253")]
		[Address(RVA = "0x1306784", Offset = "0x1306784", VA = "0x1306784", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003254")]
		[Address(RVA = "0x13067E4", Offset = "0x13067E4", VA = "0x13067E4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003255")]
		[Address(RVA = "0x130683C", Offset = "0x130683C", VA = "0x130683C")]
		public DeleteKey()
		{
		}
	}
	[Token(Token = "0x20007C7")]
	[TaskDescription("Stores the value with the specified key from the PlayerPrefs.")]
	[TaskCategory("Unity/PlayerPrefs")]
	public class GetFloat : Action
	{
		[Token(Token = "0x4002BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The key to store")]
		public SharedString key;

		[Token(Token = "0x4002BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The default value")]
		public SharedFloat defaultValue;

		[Token(Token = "0x4002BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The value retrieved from the PlayerPrefs")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x6003256")]
		[Address(RVA = "0x1306844", Offset = "0x1306844", VA = "0x1306844", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003257")]
		[Address(RVA = "0x13068FC", Offset = "0x13068FC", VA = "0x13068FC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003258")]
		[Address(RVA = "0x130698C", Offset = "0x130698C", VA = "0x130698C")]
		public GetFloat()
		{
		}
	}
	[Token(Token = "0x20007C8")]
	[TaskCategory("Unity/PlayerPrefs")]
	[TaskDescription("Stores the value with the specified key from the PlayerPrefs.")]
	public class GetInt : Action
	{
		[Token(Token = "0x4002BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The key to store")]
		public SharedString key;

		[Token(Token = "0x4002BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The default value")]
		public SharedInt defaultValue;

		[Token(Token = "0x4002BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The value retrieved from the PlayerPrefs")]
		[RequiredField]
		public SharedInt storeResult;

		[Token(Token = "0x6003259")]
		[Address(RVA = "0x1306994", Offset = "0x1306994", VA = "0x1306994", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600325A")]
		[Address(RVA = "0x1306A54", Offset = "0x1306A54", VA = "0x1306A54", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600325B")]
		[Address(RVA = "0x1306AE4", Offset = "0x1306AE4", VA = "0x1306AE4")]
		public GetInt()
		{
		}
	}
	[Token(Token = "0x20007C9")]
	[TaskDescription("Stores the value with the specified key from the PlayerPrefs.")]
	[TaskCategory("Unity/PlayerPrefs")]
	public class GetString : Action
	{
		[Token(Token = "0x4002BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The key to store")]
		public SharedString key;

		[Token(Token = "0x4002BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The default value")]
		public SharedString defaultValue;

		[Token(Token = "0x4002BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value retrieved from the PlayerPrefs")]
		public SharedString storeResult;

		[Token(Token = "0x600325C")]
		[Address(RVA = "0x1306AEC", Offset = "0x1306AEC", VA = "0x1306AEC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600325D")]
		[Address(RVA = "0x1306B98", Offset = "0x1306B98", VA = "0x1306B98", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600325E")]
		[Address(RVA = "0x1306C28", Offset = "0x1306C28", VA = "0x1306C28")]
		public GetString()
		{
		}
	}
	[Token(Token = "0x20007CA")]
	[TaskCategory("Unity/PlayerPrefs")]
	[TaskDescription("Retruns success if the specified key exists.")]
	public class HasKey : Conditional
	{
		[Token(Token = "0x4002BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The key to check")]
		public SharedString key;

		[Token(Token = "0x600325F")]
		[Address(RVA = "0x1306C30", Offset = "0x1306C30", VA = "0x1306C30", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003260")]
		[Address(RVA = "0x1306C98", Offset = "0x1306C98", VA = "0x1306C98", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003261")]
		[Address(RVA = "0x1306CF0", Offset = "0x1306CF0", VA = "0x1306CF0")]
		public HasKey()
		{
		}
	}
	[Token(Token = "0x20007CB")]
	[TaskCategory("Unity/PlayerPrefs")]
	[TaskDescription("Saves the PlayerPrefs.")]
	public class Save : Action
	{
		[Token(Token = "0x6003262")]
		[Address(RVA = "0x1306CF8", Offset = "0x1306CF8", VA = "0x1306CF8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003263")]
		[Address(RVA = "0x1306D10", Offset = "0x1306D10", VA = "0x1306D10")]
		public Save()
		{
		}
	}
	[Token(Token = "0x20007CC")]
	[TaskCategory("Unity/PlayerPrefs")]
	[TaskDescription("Sets the value with the specified key from the PlayerPrefs.")]
	public class SetFloat : Action
	{
		[Token(Token = "0x4002BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The key to store")]
		public SharedString key;

		[Token(Token = "0x4002BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to set")]
		public SharedFloat value;

		[Token(Token = "0x6003264")]
		[Address(RVA = "0x1306D18", Offset = "0x1306D18", VA = "0x1306D18", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003265")]
		[Address(RVA = "0x1306DA8", Offset = "0x1306DA8", VA = "0x1306DA8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003266")]
		[Address(RVA = "0x1306E1C", Offset = "0x1306E1C", VA = "0x1306E1C")]
		public SetFloat()
		{
		}
	}
	[Token(Token = "0x20007CD")]
	[TaskDescription("Sets the value with the specified key from the PlayerPrefs.")]
	[TaskCategory("Unity/PlayerPrefs")]
	public class SetInt : Action
	{
		[Token(Token = "0x4002BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The key to store")]
		public SharedString key;

		[Token(Token = "0x4002BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to set")]
		public SharedInt value;

		[Token(Token = "0x6003267")]
		[Address(RVA = "0x1306E24", Offset = "0x1306E24", VA = "0x1306E24", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003268")]
		[Address(RVA = "0x1306EB8", Offset = "0x1306EB8", VA = "0x1306EB8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003269")]
		[Address(RVA = "0x1306F2C", Offset = "0x1306F2C", VA = "0x1306F2C")]
		public SetInt()
		{
		}
	}
	[Token(Token = "0x20007CE")]
	[TaskDescription("Sets the value with the specified key from the PlayerPrefs.")]
	[TaskCategory("Unity/PlayerPrefs")]
	public class SetString : Action
	{
		[Token(Token = "0x4002BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The key to store")]
		public SharedString key;

		[Token(Token = "0x4002BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to set")]
		public SharedString value;

		[Token(Token = "0x600326A")]
		[Address(RVA = "0x1306F34", Offset = "0x1306F34", VA = "0x1306F34", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600326B")]
		[Address(RVA = "0x1306FB4", Offset = "0x1306FB4", VA = "0x1306FB4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600326C")]
		[Address(RVA = "0x1307028", Offset = "0x1307028", VA = "0x1307028")]
		public SetString()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityPhysics2D
{
	[Token(Token = "0x20007CF")]
	[TaskDescription("Casts a circle against all colliders in the scene. Returns success if a collider was hit.")]
	[TaskCategory("Unity/Physics2D")]
	public class Circlecast : Action
	{
		[Token(Token = "0x4002BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Starts the circlecast at the GameObject's position. If null the originPosition will be used.")]
		public SharedGameObject originGameObject;

		[Token(Token = "0x4002BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Starts the circlecast at the position. Only used if originGameObject is null.")]
		public SharedVector2 originPosition;

		[Token(Token = "0x4002BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius of the circlecast")]
		public SharedFloat radius;

		[Token(Token = "0x4002BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The direction of the circlecast")]
		public SharedVector2 direction;

		[Token(Token = "0x4002BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public SharedFloat distance;

		[Token(Token = "0x4002BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Selectively ignore colliders.")]
		public LayerMask layerMask;

		[Token(Token = "0x4002BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Use world or local space. The direction is in world space if no GameObject is specified.")]
		public Space space;

		[Token(Token = "0x4002BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SharedRequired]
		[Tooltip("Stores the hit object of the circlecast.")]
		public SharedGameObject storeHitObject;

		[Token(Token = "0x4002C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Stores the hit point of the circlecast.")]
		[SharedRequired]
		public SharedVector2 storeHitPoint;

		[Token(Token = "0x4002C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Stores the hit normal of the circlecast.")]
		[SharedRequired]
		public SharedVector2 storeHitNormal;

		[Token(Token = "0x4002C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Stores the hit distance of the circlecast.")]
		[SharedRequired]
		public SharedFloat storeHitDistance;

		[Token(Token = "0x600326D")]
		[Address(RVA = "0x1307030", Offset = "0x1307030", VA = "0x1307030", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600326E")]
		[Address(RVA = "0x13073B4", Offset = "0x13073B4", VA = "0x13073B4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600326F")]
		[Address(RVA = "0x13074B0", Offset = "0x13074B0", VA = "0x13074B0")]
		public Circlecast()
		{
		}
	}
	[Token(Token = "0x20007D0")]
	[TaskCategory("Unity/Physics2D")]
	[TaskDescription("Returns success if there is any collider intersecting the line between start and end")]
	public class Linecast : Action
	{
		[Token(Token = "0x4002C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The starting position of the linecast.")]
		public SharedVector2 startPosition;

		[Token(Token = "0x4002C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The ending position of the linecast.")]
		public SharedVector2 endPosition;

		[Token(Token = "0x4002C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Selectively ignore colliders.")]
		public LayerMask layerMask;

		[Token(Token = "0x6003270")]
		[Address(RVA = "0x13074F8", Offset = "0x13074F8", VA = "0x13074F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003271")]
		[Address(RVA = "0x1307608", Offset = "0x1307608", VA = "0x1307608", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003272")]
		[Address(RVA = "0x13076BC", Offset = "0x13076BC", VA = "0x13076BC")]
		public Linecast()
		{
		}
	}
	[Token(Token = "0x20007D1")]
	[TaskCategory("Unity/Physics2D")]
	[TaskDescription("Casts a ray against all colliders in the scene. Returns success if a collider was hit.")]
	public class Raycast : Action
	{
		[Token(Token = "0x4002C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Starts the ray at the GameObject's position. If null the originPosition will be used.")]
		public SharedGameObject originGameObject;

		[Token(Token = "0x4002C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Starts the ray at the position. Only used if originGameObject is null.")]
		public SharedVector2 originPosition;

		[Token(Token = "0x4002C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The direction of the ray")]
		public SharedVector2 direction;

		[Token(Token = "0x4002C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public SharedFloat distance;

		[Token(Token = "0x4002C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Selectively ignore colliders.")]
		public LayerMask layerMask;

		[Token(Token = "0x4002C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Cast the ray in world or local space. The direction is in world space if no GameObject is specified.")]
		public Space space;

		[Token(Token = "0x4002C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Stores the hit object of the raycast.")]
		[SharedRequired]
		public SharedGameObject storeHitObject;

		[Token(Token = "0x4002C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Stores the hit point of the raycast.")]
		[SharedRequired]
		public SharedVector2 storeHitPoint;

		[Token(Token = "0x4002C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Stores the hit normal of the raycast.")]
		[SharedRequired]
		public SharedVector2 storeHitNormal;

		[Token(Token = "0x4002C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SharedRequired]
		[Tooltip("Stores the hit distance of the raycast.")]
		public SharedFloat storeHitDistance;

		[Token(Token = "0x6003273")]
		[Address(RVA = "0x13076E4", Offset = "0x13076E4", VA = "0x13076E4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003274")]
		[Address(RVA = "0x1307A50", Offset = "0x1307A50", VA = "0x1307A50", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003275")]
		[Address(RVA = "0x1307B30", Offset = "0x1307B30", VA = "0x1307B30")]
		public Raycast()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityPhysics
{
	[Token(Token = "0x20007D2")]
	[TaskCategory("Unity/Physics")]
	[TaskDescription("Returns success if there is any collider intersecting the line between start and end")]
	public class Linecast : Action
	{
		[Token(Token = "0x4002C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The starting position of the linecast")]
		public SharedVector3 startPosition;

		[Token(Token = "0x4002C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The ending position of the linecast")]
		public SharedVector3 endPosition;

		[Token(Token = "0x4002C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Selectively ignore colliders.")]
		public LayerMask layerMask;

		[Token(Token = "0x6003276")]
		[Address(RVA = "0x1307B78", Offset = "0x1307B78", VA = "0x1307B78", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003277")]
		[Address(RVA = "0x1307C44", Offset = "0x1307C44", VA = "0x1307C44", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003278")]
		[Address(RVA = "0x1307D00", Offset = "0x1307D00", VA = "0x1307D00")]
		public Linecast()
		{
		}
	}
	[Token(Token = "0x20007D3")]
	[TaskCategory("Unity/Physics")]
	[TaskDescription("Casts a ray against all colliders in the scene. Returns success if a collider was hit.")]
	public class Raycast : Action
	{
		[Token(Token = "0x4002C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Starts the ray at the GameObject's position. If null the originPosition will be used")]
		public SharedGameObject originGameObject;

		[Token(Token = "0x4002C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Starts the ray at the position. Only used if originGameObject is null")]
		public SharedVector3 originPosition;

		[Token(Token = "0x4002C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The direction of the ray")]
		public SharedVector3 direction;

		[Token(Token = "0x4002C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The length of the ray. Set to -1 for infinity")]
		public SharedFloat distance;

		[Token(Token = "0x4002C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Selectively ignore colliders")]
		public LayerMask layerMask;

		[Token(Token = "0x4002C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Cast the ray in world or local space. The direction is in world space if no GameObject is specified")]
		public Space space;

		[Token(Token = "0x4002C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Stores the hit object of the raycast")]
		[SharedRequired]
		public SharedGameObject storeHitObject;

		[Token(Token = "0x4002C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SharedRequired]
		[Tooltip("Stores the hit point of the raycast")]
		public SharedVector3 storeHitPoint;

		[Token(Token = "0x4002C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Stores the hit normal of the raycast")]
		[SharedRequired]
		public SharedVector3 storeHitNormal;

		[Token(Token = "0x4002C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Stores the hit distance of the raycast")]
		[SharedRequired]
		public SharedFloat storeHitDistance;

		[Token(Token = "0x6003279")]
		[Address(RVA = "0x1307D28", Offset = "0x1307D28", VA = "0x1307D28", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600327A")]
		[Address(RVA = "0x130803C", Offset = "0x130803C", VA = "0x130803C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600327B")]
		[Address(RVA = "0x1308124", Offset = "0x1308124", VA = "0x1308124")]
		public Raycast()
		{
		}
	}
	[Token(Token = "0x20007D4")]
	[TaskDescription("Casts a sphere against all colliders in the scene. Returns success if a collider was hit.")]
	[TaskCategory("Unity/Physics")]
	public class SphereCast : Action
	{
		[Token(Token = "0x4002C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Starts the spherecast at the GameObject's position. If null the originPosition will be used")]
		public SharedGameObject originGameObject;

		[Token(Token = "0x4002C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Starts the sherecast at the position. Only used if originGameObject is null")]
		public SharedVector3 originPosition;

		[Token(Token = "0x4002C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius of the spherecast")]
		public SharedFloat radius;

		[Token(Token = "0x4002C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The direction of the spherecast")]
		public SharedVector3 direction;

		[Token(Token = "0x4002C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the spherecast. Set to -1 for infinity")]
		public SharedFloat distance;

		[Token(Token = "0x4002C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Selectively ignore colliders")]
		public LayerMask layerMask;

		[Token(Token = "0x4002C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Use world or local space. The direction is in world space if no GameObject is specified")]
		public Space space;

		[Token(Token = "0x4002C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SharedRequired]
		[Tooltip("Stores the hit object of the spherecast")]
		public SharedGameObject storeHitObject;

		[Token(Token = "0x4002C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SharedRequired]
		[Tooltip("Stores the hit point of the spherecast")]
		public SharedVector3 storeHitPoint;

		[Token(Token = "0x4002C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SharedRequired]
		[Tooltip("Stores the hit normal of the spherecast")]
		public SharedVector3 storeHitNormal;

		[Token(Token = "0x4002C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SharedRequired]
		[Tooltip("Stores the hit distance of the spherecast")]
		public SharedFloat storeHitDistance;

		[Token(Token = "0x600327C")]
		[Address(RVA = "0x130816C", Offset = "0x130816C", VA = "0x130816C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600327D")]
		[Address(RVA = "0x1308498", Offset = "0x1308498", VA = "0x1308498", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600327E")]
		[Address(RVA = "0x130859C", Offset = "0x130859C", VA = "0x130859C")]
		public SphereCast()
		{
		}
	}
	[Token(Token = "0x20007D5")]
	public class OverlapShere : Action
	{
		[Token(Token = "0x4002C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Starts the spherecast at the GameObject's position. If null the gameobject position will be used")]
		public SharedGameObject originGameObject;

		[Token(Token = "0x4002C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The radius of the overlapSphere")]
		public SharedFloat radius;

		[Token(Token = "0x4002C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Selectively ignore colliders")]
		public LayerMask layerMask;

		[Token(Token = "0x4002C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Only return objects with this tag, if empty, all will be returned")]
		public SharedString tag;

		[Token(Token = "0x4002C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Stores the hit objects")]
		public SharedGameObjectList storeHitObjects;

		[Token(Token = "0x4002C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SharedInt storeHitObjectCount;

		[Token(Token = "0x600327F")]
		[Address(RVA = "0x13085E4", Offset = "0x13085E4", VA = "0x13085E4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003280")]
		[Address(RVA = "0x130867C", Offset = "0x130867C", VA = "0x130867C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003281")]
		[Address(RVA = "0x1308B7C", Offset = "0x1308B7C", VA = "0x1308B7C")]
		public OverlapShere()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityParticleSystem
{
	[Token(Token = "0x20007D6")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Clear the Particle System.")]
	public class Clear : Action
	{
		[Token(Token = "0x4002C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003282")]
		[Address(RVA = "0x1308BA4", Offset = "0x1308BA4", VA = "0x1308BA4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003283")]
		[Address(RVA = "0x1308CA8", Offset = "0x1308CA8", VA = "0x1308CA8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003284")]
		[Address(RVA = "0x1308D74", Offset = "0x1308D74", VA = "0x1308D74", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003285")]
		[Address(RVA = "0x1308D80", Offset = "0x1308D80", VA = "0x1308D80")]
		public Clear()
		{
		}
	}
	[Token(Token = "0x20007D7")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Stores the duration of the Particle System.")]
	public class GetDuration : Action
	{
		[Token(Token = "0x4002C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The duration of the ParticleSystem")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x4002C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003286")]
		[Address(RVA = "0x1308D88", Offset = "0x1308D88", VA = "0x1308D88", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003287")]
		[Address(RVA = "0x1308E8C", Offset = "0x1308E8C", VA = "0x1308E8C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003288")]
		[Address(RVA = "0x1308F9C", Offset = "0x1308F9C", VA = "0x1308F9C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003289")]
		[Address(RVA = "0x1308FD0", Offset = "0x1308FD0", VA = "0x1308FD0")]
		public GetDuration()
		{
		}
	}
	[Token(Token = "0x20007D8")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Stores the emission rate of the Particle System.")]
	public class GetEmissionRate : Action
	{
		[Token(Token = "0x4002C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The emission rate of the ParticleSystem")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x4002C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600328A")]
		[Address(RVA = "0x1308FD8", Offset = "0x1308FD8", VA = "0x1308FD8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600328B")]
		[Address(RVA = "0x13090DC", Offset = "0x13090DC", VA = "0x13090DC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600328C")]
		[Address(RVA = "0x13091C0", Offset = "0x13091C0", VA = "0x13091C0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600328D")]
		[Address(RVA = "0x13091F4", Offset = "0x13091F4", VA = "0x13091F4")]
		public GetEmissionRate()
		{
		}
	}
	[Token(Token = "0x20007D9")]
	[TaskDescription("Stores if the Particle System is emitting particles.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class GetEnableEmission : Action
	{
		[Token(Token = "0x4002C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Is the Particle System emitting particles?")]
		[RequiredField]
		public SharedBool storeResult;

		[Token(Token = "0x4002C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600328E")]
		[Address(RVA = "0x13091FC", Offset = "0x13091FC", VA = "0x13091FC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600328F")]
		[Address(RVA = "0x1309300", Offset = "0x1309300", VA = "0x1309300", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003290")]
		[Address(RVA = "0x1309414", Offset = "0x1309414", VA = "0x1309414", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003291")]
		[Address(RVA = "0x1309448", Offset = "0x1309448", VA = "0x1309448")]
		public GetEnableEmission()
		{
		}
	}
	[Token(Token = "0x20007DA")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Stores if the Particle System should loop.")]
	public class GetLoop : Action
	{
		[Token(Token = "0x4002C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Should the ParticleSystem loop?")]
		[RequiredField]
		public SharedBool storeResult;

		[Token(Token = "0x4002C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003292")]
		[Address(RVA = "0x1309450", Offset = "0x1309450", VA = "0x1309450", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003293")]
		[Address(RVA = "0x1309554", Offset = "0x1309554", VA = "0x1309554", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003294")]
		[Address(RVA = "0x1309668", Offset = "0x1309668", VA = "0x1309668", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003295")]
		[Address(RVA = "0x130969C", Offset = "0x130969C", VA = "0x130969C")]
		public GetLoop()
		{
		}
	}
	[Token(Token = "0x20007DB")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Stores the max particles of the Particle System.")]
	public class GetMaxParticles : Action
	{
		[Token(Token = "0x4002C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The max particles of the ParticleSystem")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x4002C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003296")]
		[Address(RVA = "0x13096A4", Offset = "0x13096A4", VA = "0x13096A4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003297")]
		[Address(RVA = "0x13097A8", Offset = "0x13097A8", VA = "0x13097A8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003298")]
		[Address(RVA = "0x13098BC", Offset = "0x13098BC", VA = "0x13098BC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003299")]
		[Address(RVA = "0x13098F0", Offset = "0x13098F0", VA = "0x13098F0")]
		public GetMaxParticles()
		{
		}
	}
	[Token(Token = "0x20007DC")]
	[TaskDescription("Stores the particle count of the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class GetParticleCount : Action
	{
		[Token(Token = "0x4002C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The particle count of the ParticleSystem")]
		public SharedFloat storeResult;

		[Token(Token = "0x4002C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600329A")]
		[Address(RVA = "0x13098F8", Offset = "0x13098F8", VA = "0x13098F8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600329B")]
		[Address(RVA = "0x13099FC", Offset = "0x13099FC", VA = "0x13099FC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600329C")]
		[Address(RVA = "0x1309AF4", Offset = "0x1309AF4", VA = "0x1309AF4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600329D")]
		[Address(RVA = "0x1309B28", Offset = "0x1309B28", VA = "0x1309B28")]
		public GetParticleCount()
		{
		}
	}
	[Token(Token = "0x20007DD")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Stores the playback speed of the Particle System.")]
	public class GetPlaybackSpeed : Action
	{
		[Token(Token = "0x4002C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The playback speed of the ParticleSystem")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x4002C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600329E")]
		[Address(RVA = "0x1309B30", Offset = "0x1309B30", VA = "0x1309B30", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600329F")]
		[Address(RVA = "0x1309C34", Offset = "0x1309C34", VA = "0x1309C34", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032A0")]
		[Address(RVA = "0x1309D44", Offset = "0x1309D44", VA = "0x1309D44", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032A1")]
		[Address(RVA = "0x1309D78", Offset = "0x1309D78", VA = "0x1309D78")]
		public GetPlaybackSpeed()
		{
		}
	}
	[Token(Token = "0x20007DE")]
	[TaskDescription("Stores the time of the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class GetTime : Action
	{
		[Token(Token = "0x4002C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The time of the ParticleSystem")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x4002C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032A2")]
		[Address(RVA = "0x1309D80", Offset = "0x1309D80", VA = "0x1309D80", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032A3")]
		[Address(RVA = "0x1309E84", Offset = "0x1309E84", VA = "0x1309E84", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032A4")]
		[Address(RVA = "0x1309F78", Offset = "0x1309F78", VA = "0x1309F78", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032A5")]
		[Address(RVA = "0x1309FAC", Offset = "0x1309FAC", VA = "0x1309FAC")]
		public GetTime()
		{
		}
	}
	[Token(Token = "0x20007DF")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Is the Particle System alive?")]
	public class IsAlive : Conditional
	{
		[Token(Token = "0x4002C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032A6")]
		[Address(RVA = "0x1309FB4", Offset = "0x1309FB4", VA = "0x1309FB4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032A7")]
		[Address(RVA = "0x130A0B8", Offset = "0x130A0B8", VA = "0x130A0B8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032A8")]
		[Address(RVA = "0x130A18C", Offset = "0x130A18C", VA = "0x130A18C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032A9")]
		[Address(RVA = "0x130A198", Offset = "0x130A198", VA = "0x130A198")]
		public IsAlive()
		{
		}
	}
	[Token(Token = "0x20007E0")]
	[TaskDescription("Is the Particle System paused?")]
	[TaskCategory("Unity/ParticleSystem")]
	public class IsPaused : Conditional
	{
		[Token(Token = "0x4002C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032AA")]
		[Address(RVA = "0x130A1A0", Offset = "0x130A1A0", VA = "0x130A1A0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032AB")]
		[Address(RVA = "0x130A2A4", Offset = "0x130A2A4", VA = "0x130A2A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032AC")]
		[Address(RVA = "0x130A378", Offset = "0x130A378", VA = "0x130A378", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032AD")]
		[Address(RVA = "0x130A384", Offset = "0x130A384", VA = "0x130A384")]
		public IsPaused()
		{
		}
	}
	[Token(Token = "0x20007E1")]
	[TaskDescription("Is the Particle System playing?")]
	[TaskCategory("Unity/ParticleSystem")]
	public class IsPlaying : Conditional
	{
		[Token(Token = "0x4002C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032AE")]
		[Address(RVA = "0x130A38C", Offset = "0x130A38C", VA = "0x130A38C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032AF")]
		[Address(RVA = "0x130A490", Offset = "0x130A490", VA = "0x130A490", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032B0")]
		[Address(RVA = "0x130A564", Offset = "0x130A564", VA = "0x130A564", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032B1")]
		[Address(RVA = "0x130A570", Offset = "0x130A570", VA = "0x130A570")]
		public IsPlaying()
		{
		}
	}
	[Token(Token = "0x20007E2")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Is the Particle System stopped?")]
	public class IsStopped : Conditional
	{
		[Token(Token = "0x4002C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032B2")]
		[Address(RVA = "0x130A578", Offset = "0x130A578", VA = "0x130A578", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032B3")]
		[Address(RVA = "0x130A67C", Offset = "0x130A67C", VA = "0x130A67C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032B4")]
		[Address(RVA = "0x130A750", Offset = "0x130A750", VA = "0x130A750", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032B5")]
		[Address(RVA = "0x130A75C", Offset = "0x130A75C", VA = "0x130A75C")]
		public IsStopped()
		{
		}
	}
	[Token(Token = "0x20007E3")]
	[TaskDescription("Pause the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class Pause : Action
	{
		[Token(Token = "0x4002C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032B6")]
		[Address(RVA = "0x130A764", Offset = "0x130A764", VA = "0x130A764", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032B7")]
		[Address(RVA = "0x130A868", Offset = "0x130A868", VA = "0x130A868", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032B8")]
		[Address(RVA = "0x130A934", Offset = "0x130A934", VA = "0x130A934", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032B9")]
		[Address(RVA = "0x130A940", Offset = "0x130A940", VA = "0x130A940")]
		public Pause()
		{
		}
	}
	[Token(Token = "0x20007E4")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Play the Particle System.")]
	public class Play : Action
	{
		[Token(Token = "0x4002C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032BA")]
		[Address(RVA = "0x130A948", Offset = "0x130A948", VA = "0x130A948", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032BB")]
		[Address(RVA = "0x130AA4C", Offset = "0x130AA4C", VA = "0x130AA4C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032BC")]
		[Address(RVA = "0x130AB18", Offset = "0x130AB18", VA = "0x130AB18", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032BD")]
		[Address(RVA = "0x130AB24", Offset = "0x130AB24", VA = "0x130AB24")]
		public Play()
		{
		}
	}
	[Token(Token = "0x20007E5")]
	[TaskDescription("Sets the emission rate of the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class SetEmissionRate : Action
	{
		[Token(Token = "0x4002C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The emission rate of the ParticleSystem")]
		public SharedFloat emissionRate;

		[Token(Token = "0x4002C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032BE")]
		[Address(RVA = "0x130AB2C", Offset = "0x130AB2C", VA = "0x130AB2C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032BF")]
		[Address(RVA = "0x130AC30", Offset = "0x130AC30", VA = "0x130AC30", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032C0")]
		[Address(RVA = "0x130AD14", Offset = "0x130AD14", VA = "0x130AD14", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032C1")]
		[Address(RVA = "0x130AD48", Offset = "0x130AD48", VA = "0x130AD48")]
		public SetEmissionRate()
		{
		}
	}
	[Token(Token = "0x20007E6")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Enables or disables the Particle System emission.")]
	public class SetEnableEmission : Action
	{
		[Token(Token = "0x4002C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Enable the ParticleSystem emissions?")]
		public SharedBool enable;

		[Token(Token = "0x4002C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032C2")]
		[Address(RVA = "0x130AD50", Offset = "0x130AD50", VA = "0x130AD50", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032C3")]
		[Address(RVA = "0x130AE54", Offset = "0x130AE54", VA = "0x130AE54", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032C4")]
		[Address(RVA = "0x130AF64", Offset = "0x130AF64", VA = "0x130AF64", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032C5")]
		[Address(RVA = "0x130AF98", Offset = "0x130AF98", VA = "0x130AF98")]
		public SetEnableEmission()
		{
		}
	}
	[Token(Token = "0x20007E7")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Sets if the Particle System should loop.")]
	public class SetLoop : Action
	{
		[Token(Token = "0x4002C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Should the ParticleSystem loop?")]
		public SharedBool loop;

		[Token(Token = "0x4002C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032C6")]
		[Address(RVA = "0x130AFA0", Offset = "0x130AFA0", VA = "0x130AFA0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032C7")]
		[Address(RVA = "0x130B0A4", Offset = "0x130B0A4", VA = "0x130B0A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032C8")]
		[Address(RVA = "0x130B1B4", Offset = "0x130B1B4", VA = "0x130B1B4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032C9")]
		[Address(RVA = "0x130B1E8", Offset = "0x130B1E8", VA = "0x130B1E8")]
		public SetLoop()
		{
		}
	}
	[Token(Token = "0x20007E8")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Sets the max particles of the Particle System.")]
	public class SetMaxParticles : Action
	{
		[Token(Token = "0x4002C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The max particles of the ParticleSystem")]
		public SharedInt maxParticles;

		[Token(Token = "0x4002C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032CA")]
		[Address(RVA = "0x130B1F0", Offset = "0x130B1F0", VA = "0x130B1F0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032CB")]
		[Address(RVA = "0x130B2F4", Offset = "0x130B2F4", VA = "0x130B2F4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032CC")]
		[Address(RVA = "0x130B404", Offset = "0x130B404", VA = "0x130B404", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032CD")]
		[Address(RVA = "0x130B438", Offset = "0x130B438", VA = "0x130B438")]
		public SetMaxParticles()
		{
		}
	}
	[Token(Token = "0x20007E9")]
	[TaskDescription("Sets the playback speed of the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class SetPlaybackSpeed : Action
	{
		[Token(Token = "0x4002C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The playback speed of the ParticleSystem")]
		public SharedFloat playbackSpeed;

		[Token(Token = "0x4002C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032CE")]
		[Address(RVA = "0x130B440", Offset = "0x130B440", VA = "0x130B440", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032CF")]
		[Address(RVA = "0x130B544", Offset = "0x130B544", VA = "0x130B544", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032D0")]
		[Address(RVA = "0x130B650", Offset = "0x130B650", VA = "0x130B650", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032D1")]
		[Address(RVA = "0x130B684", Offset = "0x130B684", VA = "0x130B684")]
		public SetPlaybackSpeed()
		{
		}
	}
	[Token(Token = "0x20007EA")]
	[TaskDescription("Sets the start color of the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class SetStartColor : Action
	{
		[Token(Token = "0x4002C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The start color of the ParticleSystem")]
		public SharedColor startColor;

		[Token(Token = "0x4002C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032D2")]
		[Address(RVA = "0x130B6B8", Offset = "0x130B6B8", VA = "0x130B6B8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032D3")]
		[Address(RVA = "0x130B7BC", Offset = "0x130B7BC", VA = "0x130B7BC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032D4")]
		[Address(RVA = "0x130B8F0", Offset = "0x130B8F0", VA = "0x130B8F0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032D5")]
		[Address(RVA = "0x130B930", Offset = "0x130B930", VA = "0x130B930")]
		public SetStartColor()
		{
		}
	}
	[Token(Token = "0x20007EB")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Sets the start delay of the Particle System.")]
	public class SetStartDelay : Action
	{
		[Token(Token = "0x4002C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The start delay of the ParticleSystem")]
		public SharedFloat startDelay;

		[Token(Token = "0x4002C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032D6")]
		[Address(RVA = "0x130B938", Offset = "0x130B938", VA = "0x130B938", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032D7")]
		[Address(RVA = "0x130BA3C", Offset = "0x130BA3C", VA = "0x130BA3C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032D8")]
		[Address(RVA = "0x130BB64", Offset = "0x130BB64", VA = "0x130BB64", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032D9")]
		[Address(RVA = "0x130BB98", Offset = "0x130BB98", VA = "0x130BB98")]
		public SetStartDelay()
		{
		}
	}
	[Token(Token = "0x20007EC")]
	[TaskDescription("Sets the start lifetime of the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class SetStartLifetime : Action
	{
		[Token(Token = "0x4002C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The start lifetime of the ParticleSystem")]
		public SharedFloat startLifetime;

		[Token(Token = "0x4002C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032DA")]
		[Address(RVA = "0x130BBA0", Offset = "0x130BBA0", VA = "0x130BBA0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032DB")]
		[Address(RVA = "0x130BCA4", Offset = "0x130BCA4", VA = "0x130BCA4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032DC")]
		[Address(RVA = "0x130BDCC", Offset = "0x130BDCC", VA = "0x130BDCC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032DD")]
		[Address(RVA = "0x130BE00", Offset = "0x130BE00", VA = "0x130BE00")]
		public SetStartLifetime()
		{
		}
	}
	[Token(Token = "0x20007ED")]
	[TaskDescription("Sets the start rotation of the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class SetStartRotation : Action
	{
		[Token(Token = "0x4002C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The start rotation of the ParticleSystem")]
		public SharedFloat startRotation;

		[Token(Token = "0x4002C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032DE")]
		[Address(RVA = "0x130BE08", Offset = "0x130BE08", VA = "0x130BE08", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032DF")]
		[Address(RVA = "0x130BF0C", Offset = "0x130BF0C", VA = "0x130BF0C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032E0")]
		[Address(RVA = "0x130C034", Offset = "0x130C034", VA = "0x130C034", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032E1")]
		[Address(RVA = "0x130C068", Offset = "0x130C068", VA = "0x130C068")]
		public SetStartRotation()
		{
		}
	}
	[Token(Token = "0x20007EE")]
	[TaskDescription("Sets the start size of the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class SetStartSize : Action
	{
		[Token(Token = "0x4002C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The start size of the ParticleSystem")]
		public SharedFloat startSize;

		[Token(Token = "0x4002C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032E2")]
		[Address(RVA = "0x130C070", Offset = "0x130C070", VA = "0x130C070", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032E3")]
		[Address(RVA = "0x130C174", Offset = "0x130C174", VA = "0x130C174", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032E4")]
		[Address(RVA = "0x130C29C", Offset = "0x130C29C", VA = "0x130C29C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032E5")]
		[Address(RVA = "0x130C2D0", Offset = "0x130C2D0", VA = "0x130C2D0")]
		public SetStartSize()
		{
		}
	}
	[Token(Token = "0x20007EF")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Sets the start speed of the Particle System.")]
	public class SetStartSpeed : Action
	{
		[Token(Token = "0x4002C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The start speed of the ParticleSystem")]
		public SharedFloat startSpeed;

		[Token(Token = "0x4002C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032E6")]
		[Address(RVA = "0x130C2D8", Offset = "0x130C2D8", VA = "0x130C2D8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032E7")]
		[Address(RVA = "0x130C3DC", Offset = "0x130C3DC", VA = "0x130C3DC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032E8")]
		[Address(RVA = "0x130C504", Offset = "0x130C504", VA = "0x130C504", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032E9")]
		[Address(RVA = "0x130C538", Offset = "0x130C538", VA = "0x130C538")]
		public SetStartSpeed()
		{
		}
	}
	[Token(Token = "0x20007F0")]
	[TaskDescription("Sets the time of the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class SetTime : Action
	{
		[Token(Token = "0x4002C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The time of the ParticleSystem")]
		public SharedFloat time;

		[Token(Token = "0x4002C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032EA")]
		[Address(RVA = "0x130C540", Offset = "0x130C540", VA = "0x130C540", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032EB")]
		[Address(RVA = "0x130C644", Offset = "0x130C644", VA = "0x130C644", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032EC")]
		[Address(RVA = "0x130C738", Offset = "0x130C738", VA = "0x130C738", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032ED")]
		[Address(RVA = "0x130C76C", Offset = "0x130C76C", VA = "0x130C76C")]
		public SetTime()
		{
		}
	}
	[Token(Token = "0x20007F1")]
	[TaskDescription("Simulate the Particle System.")]
	[TaskCategory("Unity/ParticleSystem")]
	public class Simulate : Action
	{
		[Token(Token = "0x4002C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Time to fastfoward the Particle System to")]
		public SharedFloat time;

		[Token(Token = "0x4002C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032EE")]
		[Address(RVA = "0x130C774", Offset = "0x130C774", VA = "0x130C774", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032EF")]
		[Address(RVA = "0x130C878", Offset = "0x130C878", VA = "0x130C878", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032F0")]
		[Address(RVA = "0x130C96C", Offset = "0x130C96C", VA = "0x130C96C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032F1")]
		[Address(RVA = "0x130C9A0", Offset = "0x130C9A0", VA = "0x130C9A0")]
		public Simulate()
		{
		}
	}
	[Token(Token = "0x20007F2")]
	[TaskCategory("Unity/ParticleSystem")]
	[TaskDescription("Stop the Particle System.")]
	public class Stop : Action
	{
		[Token(Token = "0x4002C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4002C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032F2")]
		[Address(RVA = "0x130C9A8", Offset = "0x130C9A8", VA = "0x130C9A8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032F3")]
		[Address(RVA = "0x130CAAC", Offset = "0x130CAAC", VA = "0x130CAAC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032F4")]
		[Address(RVA = "0x130CB78", Offset = "0x130CB78", VA = "0x130CB78", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032F5")]
		[Address(RVA = "0x130CB84", Offset = "0x130CB84", VA = "0x130CB84")]
		public Stop()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityNavMeshAgent
{
	[Token(Token = "0x20007F3")]
	[TaskDescription("Gets the maximum acceleration of an agent as it follows a path, given in units / sec^2.. Returns Success.")]
	[TaskCategory("Unity/NavMeshAgent")]
	public class GetAcceleration : Action
	{
		[Token(Token = "0x4002C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SharedRequired]
		[Tooltip("The NavMeshAgent acceleration")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032F6")]
		[Address(RVA = "0x130CB8C", Offset = "0x130CB8C", VA = "0x130CB8C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032F7")]
		[Address(RVA = "0x130CC90", Offset = "0x130CC90", VA = "0x130CC90", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032F8")]
		[Address(RVA = "0x130CD84", Offset = "0x130CD84", VA = "0x130CD84", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032F9")]
		[Address(RVA = "0x130CDB8", Offset = "0x130CDB8", VA = "0x130CDB8")]
		public GetAcceleration()
		{
		}
	}
	[Token(Token = "0x20007F4")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Gets the maximum turning speed in (deg/s) while following a path.. Returns Success.")]
	public class GetAngularSpeed : Action
	{
		[Token(Token = "0x4002C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SharedRequired]
		[Tooltip("The NavMeshAgent angular speed")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032FA")]
		[Address(RVA = "0x130CDC0", Offset = "0x130CDC0", VA = "0x130CDC0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032FB")]
		[Address(RVA = "0x130CEC4", Offset = "0x130CEC4", VA = "0x130CEC4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60032FC")]
		[Address(RVA = "0x130CFB8", Offset = "0x130CFB8", VA = "0x130CFB8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60032FD")]
		[Address(RVA = "0x130CFEC", Offset = "0x130CFEC", VA = "0x130CFEC")]
		public GetAngularSpeed()
		{
		}
	}
	[Token(Token = "0x20007F5")]
	[TaskDescription("Gets the destination of the agent in world-space units. Returns Success.")]
	[TaskCategory("Unity/NavMeshAgent")]
	public class GetDestination : Action
	{
		[Token(Token = "0x4002CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SharedRequired]
		[Tooltip("The NavMeshAgent destination")]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60032FE")]
		[Address(RVA = "0x130CFF4", Offset = "0x130CFF4", VA = "0x130CFF4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60032FF")]
		[Address(RVA = "0x130D0F8", Offset = "0x130D0F8", VA = "0x130D0F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003300")]
		[Address(RVA = "0x130D1EC", Offset = "0x130D1EC", VA = "0x130D1EC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003301")]
		[Address(RVA = "0x130D25C", Offset = "0x130D25C", VA = "0x130D25C")]
		public GetDestination()
		{
		}
	}
	[Token(Token = "0x20007F6")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Gets the stop status. Returns Success.")]
	public class GetIsStopped : Action
	{
		[Token(Token = "0x4002CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The stop status")]
		[SharedRequired]
		public SharedBool storeValue;

		[Token(Token = "0x4002CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003302")]
		[Address(RVA = "0x130D264", Offset = "0x130D264", VA = "0x130D264", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003303")]
		[Address(RVA = "0x130D368", Offset = "0x130D368", VA = "0x130D368", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003304")]
		[Address(RVA = "0x130D460", Offset = "0x130D460", VA = "0x130D460", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003305")]
		[Address(RVA = "0x130D488", Offset = "0x130D488", VA = "0x130D488")]
		public GetIsStopped()
		{
		}
	}
	[Token(Token = "0x20007F7")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Gets the distance between the agent's position and the destination on the current path. Returns Success.")]
	public class GetRemainingDistance : Action
	{
		[Token(Token = "0x4002CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The remaining distance")]
		[SharedRequired]
		public SharedFloat storeValue;

		[Token(Token = "0x4002CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003306")]
		[Address(RVA = "0x130D490", Offset = "0x130D490", VA = "0x130D490", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003307")]
		[Address(RVA = "0x130D594", Offset = "0x130D594", VA = "0x130D594", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003308")]
		[Address(RVA = "0x130D688", Offset = "0x130D688", VA = "0x130D688", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003309")]
		[Address(RVA = "0x130D6BC", Offset = "0x130D6BC", VA = "0x130D6BC")]
		public GetRemainingDistance()
		{
		}
	}
	[Token(Token = "0x20007F8")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Gets the maximum movement speed when following a path. Returns Success.")]
	public class GetSpeed : Action
	{
		[Token(Token = "0x4002CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The NavMeshAgent speed")]
		[SharedRequired]
		public SharedFloat storeValue;

		[Token(Token = "0x4002CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600330A")]
		[Address(RVA = "0x130D6C4", Offset = "0x130D6C4", VA = "0x130D6C4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600330B")]
		[Address(RVA = "0x130D7C8", Offset = "0x130D7C8", VA = "0x130D7C8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600330C")]
		[Address(RVA = "0x130D8BC", Offset = "0x130D8BC", VA = "0x130D8BC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600330D")]
		[Address(RVA = "0x130D8F0", Offset = "0x130D8F0", VA = "0x130D8F0")]
		public GetSpeed()
		{
		}
	}
	[Token(Token = "0x20007F9")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Is the agent stopped?")]
	public class IsStopped : Conditional
	{
		[Token(Token = "0x4002CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x600330E")]
		[Address(RVA = "0x130D8F8", Offset = "0x130D8F8", VA = "0x130D8F8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600330F")]
		[Address(RVA = "0x130D9FC", Offset = "0x130D9FC", VA = "0x130D9FC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003310")]
		[Address(RVA = "0x130DAD0", Offset = "0x130DAD0", VA = "0x130DAD0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003311")]
		[Address(RVA = "0x130DADC", Offset = "0x130DADC", VA = "0x130DADC")]
		public IsStopped()
		{
		}
	}
	[Token(Token = "0x20007FA")]
	[TaskDescription("Apply relative movement to the current position. Returns Success.")]
	[TaskCategory("Unity/NavMeshAgent")]
	public class Move : Action
	{
		[Token(Token = "0x4002CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The relative movement vector")]
		public SharedVector3 offset;

		[Token(Token = "0x4002CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003312")]
		[Address(RVA = "0x130DAE4", Offset = "0x130DAE4", VA = "0x130DAE4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003313")]
		[Address(RVA = "0x130DBE8", Offset = "0x130DBE8", VA = "0x130DBE8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003314")]
		[Address(RVA = "0x130DCDC", Offset = "0x130DCDC", VA = "0x130DCDC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003315")]
		[Address(RVA = "0x130DD4C", Offset = "0x130DD4C", VA = "0x130DD4C")]
		public Move()
		{
		}
	}
	[Token(Token = "0x20007FB")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Clears the current path. Returns Success.")]
	public class ResetPath : Action
	{
		[Token(Token = "0x4002CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003316")]
		[Address(RVA = "0x130DD54", Offset = "0x130DD54", VA = "0x130DD54", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003317")]
		[Address(RVA = "0x130DE58", Offset = "0x130DE58", VA = "0x130DE58", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003318")]
		[Address(RVA = "0x130DF24", Offset = "0x130DF24", VA = "0x130DF24", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003319")]
		[Address(RVA = "0x130DF30", Offset = "0x130DF30", VA = "0x130DF30")]
		public ResetPath()
		{
		}
	}
	[Token(Token = "0x20007FC")]
	[TaskDescription("Resumes the movement along the current path after a pause. Returns Success.")]
	[TaskCategory("Unity/NavMeshAgent")]
	public class Resume : Action
	{
		[Token(Token = "0x4002CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x600331A")]
		[Address(RVA = "0x130DF38", Offset = "0x130DF38", VA = "0x130DF38", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600331B")]
		[Address(RVA = "0x130E03C", Offset = "0x130E03C", VA = "0x130E03C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600331C")]
		[Address(RVA = "0x130E10C", Offset = "0x130E10C", VA = "0x130E10C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600331D")]
		[Address(RVA = "0x130E118", Offset = "0x130E118", VA = "0x130E118")]
		public Resume()
		{
		}
	}
	[Token(Token = "0x20007FD")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Sets the maximum acceleration of an agent as it follows a path, given in units / sec^2. Returns Success.")]
	public class SetAcceleration : Action
	{
		[Token(Token = "0x4002CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The NavMeshAgent acceleration")]
		public SharedFloat acceleration;

		[Token(Token = "0x4002CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600331E")]
		[Address(RVA = "0x130E120", Offset = "0x130E120", VA = "0x130E120", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600331F")]
		[Address(RVA = "0x130E224", Offset = "0x130E224", VA = "0x130E224", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003320")]
		[Address(RVA = "0x130E318", Offset = "0x130E318", VA = "0x130E318", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003321")]
		[Address(RVA = "0x130E34C", Offset = "0x130E34C", VA = "0x130E34C")]
		public SetAcceleration()
		{
		}
	}
	[Token(Token = "0x20007FE")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Sets the maximum turning speed in (deg/s) while following a path. Returns Success.")]
	public class SetAngularSpeed : Action
	{
		[Token(Token = "0x4002CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The NavMeshAgent angular speed")]
		public SharedFloat angularSpeed;

		[Token(Token = "0x4002CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003322")]
		[Address(RVA = "0x130E354", Offset = "0x130E354", VA = "0x130E354", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003323")]
		[Address(RVA = "0x130E458", Offset = "0x130E458", VA = "0x130E458", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003324")]
		[Address(RVA = "0x130E54C", Offset = "0x130E54C", VA = "0x130E54C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003325")]
		[Address(RVA = "0x130E580", Offset = "0x130E580", VA = "0x130E580")]
		public SetAngularSpeed()
		{
		}
	}
	[Token(Token = "0x20007FF")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Sets the destination of the agent in world-space units. Returns Success if the destination is valid.")]
	public class SetDestination : Action
	{
		[Token(Token = "0x4002CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The NavMeshAgent destination")]
		[SharedRequired]
		public SharedVector3 destination;

		[Token(Token = "0x4002CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003326")]
		[Address(RVA = "0x130E588", Offset = "0x130E588", VA = "0x130E588", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003327")]
		[Address(RVA = "0x130E68C", Offset = "0x130E68C", VA = "0x130E68C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003328")]
		[Address(RVA = "0x130E788", Offset = "0x130E788", VA = "0x130E788", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003329")]
		[Address(RVA = "0x130E7F8", Offset = "0x130E7F8", VA = "0x130E7F8")]
		public SetDestination()
		{
		}
	}
	[Token(Token = "0x2000800")]
	[TaskDescription("Sets the stop status. Returns Success.")]
	[TaskCategory("Unity/NavMeshAgent")]
	public class SetIsStopped : Action
	{
		[Token(Token = "0x4002CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The stop status")]
		public SharedBool isStopped;

		[Token(Token = "0x4002CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600332A")]
		[Address(RVA = "0x130E800", Offset = "0x130E800", VA = "0x130E800", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600332B")]
		[Address(RVA = "0x130E904", Offset = "0x130E904", VA = "0x130E904", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600332C")]
		[Address(RVA = "0x130E9FC", Offset = "0x130E9FC", VA = "0x130E9FC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600332D")]
		[Address(RVA = "0x130EA08", Offset = "0x130EA08", VA = "0x130EA08")]
		public SetIsStopped()
		{
		}
	}
	[Token(Token = "0x2000801")]
	[TaskDescription("Sets the maximum movement speed when following a path. Returns Success.")]
	[TaskCategory("Unity/NavMeshAgent")]
	public class SetSpeed : Action
	{
		[Token(Token = "0x4002CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The NavMeshAgent speed")]
		public SharedFloat speed;

		[Token(Token = "0x4002CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600332E")]
		[Address(RVA = "0x130EA10", Offset = "0x130EA10", VA = "0x130EA10", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600332F")]
		[Address(RVA = "0x130EB14", Offset = "0x130EB14", VA = "0x130EB14", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003330")]
		[Address(RVA = "0x130EC08", Offset = "0x130EC08", VA = "0x130EC08", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003331")]
		[Address(RVA = "0x130EC3C", Offset = "0x130EC3C", VA = "0x130EC3C")]
		public SetSpeed()
		{
		}
	}
	[Token(Token = "0x2000802")]
	[TaskDescription("Stop movement of this agent along its current path. Returns Success.")]
	[TaskCategory("Unity/NavMeshAgent")]
	public class Stop : Action
	{
		[Token(Token = "0x4002CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003332")]
		[Address(RVA = "0x130EC44", Offset = "0x130EC44", VA = "0x130EC44", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003333")]
		[Address(RVA = "0x130ED48", Offset = "0x130ED48", VA = "0x130ED48", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003334")]
		[Address(RVA = "0x130EE30", Offset = "0x130EE30", VA = "0x130EE30", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003335")]
		[Address(RVA = "0x130EE3C", Offset = "0x130EE3C", VA = "0x130EE3C")]
		public Stop()
		{
		}
	}
	[Token(Token = "0x2000803")]
	[TaskCategory("Unity/NavMeshAgent")]
	[TaskDescription("Warps agent to the provided position. Returns Success.")]
	public class Warp : Action
	{
		[Token(Token = "0x4002CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position to warp to")]
		public SharedVector3 newPosition;

		[Token(Token = "0x4002CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent navMeshAgent;

		[Token(Token = "0x4002CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003336")]
		[Address(RVA = "0x130EE44", Offset = "0x130EE44", VA = "0x130EE44", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003337")]
		[Address(RVA = "0x130EF48", Offset = "0x130EF48", VA = "0x130EF48", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003338")]
		[Address(RVA = "0x130F03C", Offset = "0x130F03C", VA = "0x130F03C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003339")]
		[Address(RVA = "0x130F0AC", Offset = "0x130F0AC", VA = "0x130F0AC")]
		public Warp()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.Math
{
	[Token(Token = "0x2000804")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Performs a comparison between two bools.")]
	public class BoolComparison : Conditional
	{
		[Token(Token = "0x4002CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first bool")]
		public SharedBool bool1;

		[Token(Token = "0x4002CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second bool")]
		public SharedBool bool2;

		[Token(Token = "0x600333A")]
		[Address(RVA = "0x130F0B4", Offset = "0x130F0B4", VA = "0x130F0B4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600333B")]
		[Address(RVA = "0x130F130", Offset = "0x130F130", VA = "0x130F130", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600333C")]
		[Address(RVA = "0x130F174", Offset = "0x130F174", VA = "0x130F174")]
		public BoolComparison()
		{
		}
	}
	[Token(Token = "0x2000805")]
	[TaskDescription("Flips the value of the bool.")]
	[TaskCategory("Unity/Math")]
	public class BoolFlip : Action
	{
		[Token(Token = "0x4002CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The bool to flip the value of")]
		public SharedBool boolVariable;

		[Token(Token = "0x600333D")]
		[Address(RVA = "0x130F17C", Offset = "0x130F17C", VA = "0x130F17C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600333E")]
		[Address(RVA = "0x130F200", Offset = "0x130F200", VA = "0x130F200", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600333F")]
		[Address(RVA = "0x130F254", Offset = "0x130F254", VA = "0x130F254")]
		public BoolFlip()
		{
		}
	}
	[Token(Token = "0x2000806")]
	[TaskDescription("Performs a math operation on two bools: AND, OR, NAND, or XOR.")]
	[TaskCategory("Unity/Math")]
	public class BoolOperator : Action
	{
		[Token(Token = "0x2000807")]
		public enum Operation
		{
			[Token(Token = "0x4002CE2")]
			AND,
			[Token(Token = "0x4002CE3")]
			OR,
			[Token(Token = "0x4002CE4")]
			NAND,
			[Token(Token = "0x4002CE5")]
			XOR
		}

		[Token(Token = "0x4002CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The operation to perform")]
		public Operation operation;

		[Token(Token = "0x4002CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first bool")]
		public SharedBool bool1;

		[Token(Token = "0x4002CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second bool")]
		public SharedBool bool2;

		[Token(Token = "0x4002CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The variable to store the result")]
		public SharedBool storeResult;

		[Token(Token = "0x6003340")]
		[Address(RVA = "0x130F25C", Offset = "0x130F25C", VA = "0x130F25C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003341")]
		[Address(RVA = "0x130F3D4", Offset = "0x130F3D4", VA = "0x130F3D4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003342")]
		[Address(RVA = "0x130F41C", Offset = "0x130F41C", VA = "0x130F41C")]
		public BoolOperator()
		{
		}
	}
	[Token(Token = "0x2000808")]
	[TaskDescription("Stores the absolute value of the float.")]
	[TaskCategory("Unity/Math")]
	public class FloatAbs : Action
	{
		[Token(Token = "0x4002CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float to return the absolute value of")]
		public SharedFloat floatVariable;

		[Token(Token = "0x6003343")]
		[Address(RVA = "0x130F424", Offset = "0x130F424", VA = "0x130F424", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003344")]
		[Address(RVA = "0x130F4A4", Offset = "0x130F4A4", VA = "0x130F4A4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003345")]
		[Address(RVA = "0x130F4CC", Offset = "0x130F4CC", VA = "0x130F4CC")]
		public FloatAbs()
		{
		}
	}
	[Token(Token = "0x2000809")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Clamps the float between two values.")]
	public class FloatClamp : Action
	{
		[Token(Token = "0x4002CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float to clamp")]
		public SharedFloat floatVariable;

		[Token(Token = "0x4002CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum value of the float")]
		public SharedFloat minValue;

		[Token(Token = "0x4002CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum value of the float")]
		public SharedFloat maxValue;

		[Token(Token = "0x6003346")]
		[Address(RVA = "0x130F4D4", Offset = "0x130F4D4", VA = "0x130F4D4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003347")]
		[Address(RVA = "0x130F590", Offset = "0x130F590", VA = "0x130F590", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003348")]
		[Address(RVA = "0x130F5F0", Offset = "0x130F5F0", VA = "0x130F5F0")]
		public FloatClamp()
		{
		}
	}
	[Token(Token = "0x200080A")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Performs comparison between two floats: less than, less than or equal to, equal to, not equal to, greater than or equal to, or greater than.")]
	public class FloatComparison : Conditional
	{
		[Token(Token = "0x200080B")]
		public enum Operation
		{
			[Token(Token = "0x4002CEE")]
			LessThan,
			[Token(Token = "0x4002CEF")]
			LessThanOrEqualTo,
			[Token(Token = "0x4002CF0")]
			EqualTo,
			[Token(Token = "0x4002CF1")]
			NotEqualTo,
			[Token(Token = "0x4002CF2")]
			GreaterThanOrEqualTo,
			[Token(Token = "0x4002CF3")]
			GreaterThan
		}

		[Token(Token = "0x4002CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The operation to perform")]
		public Operation operation;

		[Token(Token = "0x4002CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first float")]
		public SharedFloat float1;

		[Token(Token = "0x4002CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second float")]
		public SharedFloat float2;

		[Token(Token = "0x6003349")]
		[Address(RVA = "0x130F5F8", Offset = "0x130F5F8", VA = "0x130F5F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600334A")]
		[Address(RVA = "0x130F86C", Offset = "0x130F86C", VA = "0x130F86C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600334B")]
		[Address(RVA = "0x130F8D8", Offset = "0x130F8D8", VA = "0x130F8D8")]
		public FloatComparison()
		{
		}
	}
	[Token(Token = "0x200080C")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Performs a math operation on two floats: Add, Subtract, Multiply, Divide, Min, or Max.")]
	public class FloatOperator : Action
	{
		[Token(Token = "0x200080D")]
		public enum Operation
		{
			[Token(Token = "0x4002CF9")]
			Add,
			[Token(Token = "0x4002CFA")]
			Subtract,
			[Token(Token = "0x4002CFB")]
			Multiply,
			[Token(Token = "0x4002CFC")]
			Divide,
			[Token(Token = "0x4002CFD")]
			Min,
			[Token(Token = "0x4002CFE")]
			Max,
			[Token(Token = "0x4002CFF")]
			Modulo
		}

		[Token(Token = "0x4002CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The operation to perform")]
		public Operation operation;

		[Token(Token = "0x4002CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first float")]
		public SharedFloat float1;

		[Token(Token = "0x4002CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second float")]
		public SharedFloat float2;

		[Token(Token = "0x4002CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The variable to store the result")]
		public SharedFloat storeResult;

		[Token(Token = "0x600334C")]
		[Address(RVA = "0x130F8E0", Offset = "0x130F8E0", VA = "0x130F8E0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600334D")]
		[Address(RVA = "0x130FB0C", Offset = "0x130FB0C", VA = "0x130FB0C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600334E")]
		[Address(RVA = "0x130FB70", Offset = "0x130FB70", VA = "0x130FB70")]
		public FloatOperator()
		{
		}
	}
	[Token(Token = "0x200080E")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Stores the absolute value of the int.")]
	public class IntAbs : Action
	{
		[Token(Token = "0x4002D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The int to return the absolute value of")]
		public SharedInt intVariable;

		[Token(Token = "0x600334F")]
		[Address(RVA = "0x1324E34", Offset = "0x1324E34", VA = "0x1324E34", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003350")]
		[Address(RVA = "0x1324EF4", Offset = "0x1324EF4", VA = "0x1324EF4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003351")]
		[Address(RVA = "0x1324F1C", Offset = "0x1324F1C", VA = "0x1324F1C")]
		public IntAbs()
		{
		}
	}
	[Token(Token = "0x200080F")]
	[TaskDescription("Clamps the int between two values.")]
	[TaskCategory("Unity/Math")]
	public class IntClamp : Action
	{
		[Token(Token = "0x4002D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The int to clamp")]
		public SharedInt intVariable;

		[Token(Token = "0x4002D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum value of the int")]
		public SharedInt minValue;

		[Token(Token = "0x4002D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum value of the int")]
		public SharedInt maxValue;

		[Token(Token = "0x6003352")]
		[Address(RVA = "0x1324F24", Offset = "0x1324F24", VA = "0x1324F24", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003353")]
		[Address(RVA = "0x1324FE8", Offset = "0x1324FE8", VA = "0x1324FE8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003354")]
		[Address(RVA = "0x1325048", Offset = "0x1325048", VA = "0x1325048")]
		public IntClamp()
		{
		}
	}
	[Token(Token = "0x2000810")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Performs comparison between two integers: less than, less than or equal to, equal to, not equal to, greater than or equal to, or greater than.")]
	public class IntComparison : Conditional
	{
		[Token(Token = "0x2000811")]
		public enum Operation
		{
			[Token(Token = "0x4002D08")]
			LessThan,
			[Token(Token = "0x4002D09")]
			LessThanOrEqualTo,
			[Token(Token = "0x4002D0A")]
			EqualTo,
			[Token(Token = "0x4002D0B")]
			NotEqualTo,
			[Token(Token = "0x4002D0C")]
			GreaterThanOrEqualTo,
			[Token(Token = "0x4002D0D")]
			GreaterThan
		}

		[Token(Token = "0x4002D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The operation to perform")]
		public Operation operation;

		[Token(Token = "0x4002D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first integer")]
		public SharedInt integer1;

		[Token(Token = "0x4002D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second integer")]
		public SharedInt integer2;

		[Token(Token = "0x6003355")]
		[Address(RVA = "0x1325050", Offset = "0x1325050", VA = "0x1325050", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003356")]
		[Address(RVA = "0x132520C", Offset = "0x132520C", VA = "0x132520C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003357")]
		[Address(RVA = "0x1325278", Offset = "0x1325278", VA = "0x1325278")]
		public IntComparison()
		{
		}
	}
	[Token(Token = "0x2000812")]
	[TaskDescription("Performs a math operation on two integers: Add, Subtract, Multiply, Divide, Min, or Max.")]
	[TaskCategory("Unity/Math")]
	public class IntOperator : Action
	{
		[Token(Token = "0x2000813")]
		public enum Operation
		{
			[Token(Token = "0x4002D13")]
			Add,
			[Token(Token = "0x4002D14")]
			Subtract,
			[Token(Token = "0x4002D15")]
			Multiply,
			[Token(Token = "0x4002D16")]
			Divide,
			[Token(Token = "0x4002D17")]
			Min,
			[Token(Token = "0x4002D18")]
			Max,
			[Token(Token = "0x4002D19")]
			Modulo
		}

		[Token(Token = "0x4002D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The operation to perform")]
		public Operation operation;

		[Token(Token = "0x4002D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first integer")]
		public SharedInt integer1;

		[Token(Token = "0x4002D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second integer")]
		public SharedInt integer2;

		[Token(Token = "0x4002D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The variable to store the result")]
		[RequiredField]
		public SharedInt storeResult;

		[Token(Token = "0x6003358")]
		[Address(RVA = "0x1325280", Offset = "0x1325280", VA = "0x1325280", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003359")]
		[Address(RVA = "0x13254BC", Offset = "0x13254BC", VA = "0x13254BC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600335A")]
		[Address(RVA = "0x1325520", Offset = "0x1325520", VA = "0x1325520")]
		public IntOperator()
		{
		}
	}
	[Token(Token = "0x2000814")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Is the float a positive value?")]
	public class IsFloatPositive : Conditional
	{
		[Token(Token = "0x4002D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float to check if positive")]
		public SharedFloat floatVariable;

		[Token(Token = "0x600335B")]
		[Address(RVA = "0x1325528", Offset = "0x1325528", VA = "0x1325528", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600335C")]
		[Address(RVA = "0x1325588", Offset = "0x1325588", VA = "0x1325588", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600335D")]
		[Address(RVA = "0x13255B0", Offset = "0x13255B0", VA = "0x13255B0")]
		public IsFloatPositive()
		{
		}
	}
	[Token(Token = "0x2000815")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Is the int a positive value?")]
	public class IsIntPositive : Conditional
	{
		[Token(Token = "0x4002D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The int to check if positive")]
		public SharedInt intVariable;

		[Token(Token = "0x600335E")]
		[Address(RVA = "0x13255B8", Offset = "0x13255B8", VA = "0x13255B8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600335F")]
		[Address(RVA = "0x1325618", Offset = "0x1325618", VA = "0x1325618", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003360")]
		[Address(RVA = "0x1325640", Offset = "0x1325640", VA = "0x1325640")]
		public IsIntPositive()
		{
		}
	}
	[Token(Token = "0x2000816")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Lerp the float by an amount.")]
	public class Lerp : Action
	{
		[Token(Token = "0x4002D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The from value")]
		public SharedFloat fromValue;

		[Token(Token = "0x4002D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The to value")]
		public SharedFloat toValue;

		[Token(Token = "0x4002D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The amount to lerp")]
		public SharedFloat lerpAmount;

		[Token(Token = "0x4002D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The lerp resut")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x6003361")]
		[Address(RVA = "0x1325648", Offset = "0x1325648", VA = "0x1325648", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003362")]
		[Address(RVA = "0x1325718", Offset = "0x1325718", VA = "0x1325718", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003363")]
		[Address(RVA = "0x1325794", Offset = "0x1325794", VA = "0x1325794")]
		public Lerp()
		{
		}
	}
	[Token(Token = "0x2000817")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Lerp the angle by an amount.")]
	public class LerpAngle : Action
	{
		[Token(Token = "0x4002D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The from value")]
		public SharedFloat fromValue;

		[Token(Token = "0x4002D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The to value")]
		public SharedFloat toValue;

		[Token(Token = "0x4002D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The amount to lerp")]
		public SharedFloat lerpAmount;

		[Token(Token = "0x4002D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The lerp resut")]
		public SharedFloat storeResult;

		[Token(Token = "0x6003364")]
		[Address(RVA = "0x132579C", Offset = "0x132579C", VA = "0x132579C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003365")]
		[Address(RVA = "0x13258AC", Offset = "0x13258AC", VA = "0x13258AC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003366")]
		[Address(RVA = "0x1325928", Offset = "0x1325928", VA = "0x1325928")]
		public LerpAngle()
		{
		}
	}
	[Token(Token = "0x2000818")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Sets a random bool value")]
	public class RandomBool : Action
	{
		[Token(Token = "0x4002D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The variable to store the result")]
		public SharedBool storeResult;

		[Token(Token = "0x6003367")]
		[Address(RVA = "0x1325930", Offset = "0x1325930", VA = "0x1325930", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003368")]
		[Address(RVA = "0x13259A0", Offset = "0x13259A0", VA = "0x13259A0")]
		public RandomBool()
		{
		}
	}
	[Token(Token = "0x2000819")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Sets a random float value")]
	public class RandomFloat : Action
	{
		[Token(Token = "0x4002D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The minimum amount")]
		public SharedFloat min;

		[Token(Token = "0x4002D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum amount")]
		public SharedFloat max;

		[Token(Token = "0x4002D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Is the maximum value inclusive?")]
		public bool inclusive;

		[Token(Token = "0x4002D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The variable to store the result")]
		public SharedFloat storeResult;

		[Token(Token = "0x6003369")]
		[Address(RVA = "0x13259A8", Offset = "0x13259A8", VA = "0x13259A8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600336A")]
		[Address(RVA = "0x1325A70", Offset = "0x1325A70", VA = "0x1325A70", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600336B")]
		[Address(RVA = "0x1325AF8", Offset = "0x1325AF8", VA = "0x1325AF8")]
		public RandomFloat()
		{
		}
	}
	[Token(Token = "0x200081A")]
	[TaskDescription("Sets a random int value")]
	[TaskCategory("Unity/Math")]
	public class RandomInt : Action
	{
		[Token(Token = "0x4002D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The minimum amount")]
		public SharedInt min;

		[Token(Token = "0x4002D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum amount")]
		public SharedInt max;

		[Token(Token = "0x4002D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Is the maximum value inclusive?")]
		public bool inclusive;

		[Token(Token = "0x4002D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The variable to store the result")]
		public SharedInt storeResult;

		[Token(Token = "0x600336C")]
		[Address(RVA = "0x1325B00", Offset = "0x1325B00", VA = "0x1325B00", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600336D")]
		[Address(RVA = "0x1325BC0", Offset = "0x1325BC0", VA = "0x1325BC0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600336E")]
		[Address(RVA = "0x1325C48", Offset = "0x1325C48", VA = "0x1325C48")]
		public RandomInt()
		{
		}
	}
	[Token(Token = "0x200081B")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Sets a bool value")]
	public class SetBool : Action
	{
		[Token(Token = "0x4002D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The bool value to set")]
		public SharedBool boolValue;

		[Token(Token = "0x4002D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to store the result")]
		public SharedBool storeResult;

		[Token(Token = "0x600336F")]
		[Address(RVA = "0x1325C50", Offset = "0x1325C50", VA = "0x1325C50", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003370")]
		[Address(RVA = "0x1325CD4", Offset = "0x1325CD4", VA = "0x1325CD4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003371")]
		[Address(RVA = "0x1325CFC", Offset = "0x1325CFC", VA = "0x1325CFC")]
		public SetBool()
		{
		}
	}
	[Token(Token = "0x200081C")]
	[TaskDescription("Sets a float value")]
	[TaskCategory("Unity/Math")]
	public class SetFloat : Action
	{
		[Token(Token = "0x4002D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float value to set")]
		public SharedFloat floatValue;

		[Token(Token = "0x4002D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to store the result")]
		public SharedFloat storeResult;

		[Token(Token = "0x6003372")]
		[Address(RVA = "0x1325D04", Offset = "0x1325D04", VA = "0x1325D04", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003373")]
		[Address(RVA = "0x1325D84", Offset = "0x1325D84", VA = "0x1325D84", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003374")]
		[Address(RVA = "0x1325DC8", Offset = "0x1325DC8", VA = "0x1325DC8")]
		public SetFloat()
		{
		}
	}
	[Token(Token = "0x200081D")]
	[TaskCategory("Unity/Math")]
	[TaskDescription("Sets an int value")]
	public class SetInt : Action
	{
		[Token(Token = "0x4002D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The int value to set")]
		public SharedInt intValue;

		[Token(Token = "0x4002D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to store the result")]
		public SharedInt storeResult;

		[Token(Token = "0x6003375")]
		[Address(RVA = "0x1325DD0", Offset = "0x1325DD0", VA = "0x1325DD0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003376")]
		[Address(RVA = "0x1325E54", Offset = "0x1325E54", VA = "0x1325E54", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003377")]
		[Address(RVA = "0x1325E98", Offset = "0x1325E98", VA = "0x1325E98")]
		public SetInt()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityLight
{
	[Token(Token = "0x200081E")]
	[TaskDescription("Stores the color of the light.")]
	[TaskCategory("Unity/Light")]
	public class GetColor : Action
	{
		[Token(Token = "0x4002D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The color to store")]
		public SharedColor storeValue;

		[Token(Token = "0x4002D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003378")]
		[Address(RVA = "0x1325EA0", Offset = "0x1325EA0", VA = "0x1325EA0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003379")]
		[Address(RVA = "0x1325FA4", Offset = "0x1325FA4", VA = "0x1325FA4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600337A")]
		[Address(RVA = "0x1326088", Offset = "0x1326088", VA = "0x1326088", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600337B")]
		[Address(RVA = "0x13260C8", Offset = "0x13260C8", VA = "0x13260C8")]
		public GetColor()
		{
		}
	}
	[Token(Token = "0x200081F")]
	[TaskCategory("Unity/Light")]
	[TaskDescription("Stores the light's cookie size.")]
	public class GetCookieSize : Action
	{
		[Token(Token = "0x4002D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The size to store")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600337C")]
		[Address(RVA = "0x13260D0", Offset = "0x13260D0", VA = "0x13260D0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600337D")]
		[Address(RVA = "0x13261D4", Offset = "0x13261D4", VA = "0x13261D4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600337E")]
		[Address(RVA = "0x13262B8", Offset = "0x13262B8", VA = "0x13262B8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600337F")]
		[Address(RVA = "0x13262EC", Offset = "0x13262EC", VA = "0x13262EC")]
		public GetCookieSize()
		{
		}
	}
	[Token(Token = "0x2000820")]
	[TaskDescription("Stores the intensity of the light.")]
	[TaskCategory("Unity/Light")]
	public class GetIntensity : Action
	{
		[Token(Token = "0x4002D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The intensity to store")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003380")]
		[Address(RVA = "0x13262F4", Offset = "0x13262F4", VA = "0x13262F4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003381")]
		[Address(RVA = "0x13263F8", Offset = "0x13263F8", VA = "0x13263F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003382")]
		[Address(RVA = "0x13264DC", Offset = "0x13264DC", VA = "0x13264DC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003383")]
		[Address(RVA = "0x1326510", Offset = "0x1326510", VA = "0x1326510")]
		public GetIntensity()
		{
		}
	}
	[Token(Token = "0x2000821")]
	[TaskDescription("Stores the range of the light.")]
	[TaskCategory("Unity/Light")]
	public class GetRange : Action
	{
		[Token(Token = "0x4002D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The range to store")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003384")]
		[Address(RVA = "0x1326518", Offset = "0x1326518", VA = "0x1326518", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003385")]
		[Address(RVA = "0x132661C", Offset = "0x132661C", VA = "0x132661C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003386")]
		[Address(RVA = "0x1326700", Offset = "0x1326700", VA = "0x1326700", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003387")]
		[Address(RVA = "0x1326734", Offset = "0x1326734", VA = "0x1326734")]
		public GetRange()
		{
		}
	}
	[Token(Token = "0x2000822")]
	[TaskDescription("Stores the shadow bias of the light.")]
	[TaskCategory("Unity/Light")]
	public class GetShadowBias : Action
	{
		[Token(Token = "0x4002D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The shadow bias to store")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003388")]
		[Address(RVA = "0x132673C", Offset = "0x132673C", VA = "0x132673C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003389")]
		[Address(RVA = "0x1326840", Offset = "0x1326840", VA = "0x1326840", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600338A")]
		[Address(RVA = "0x1326924", Offset = "0x1326924", VA = "0x1326924", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600338B")]
		[Address(RVA = "0x1326958", Offset = "0x1326958", VA = "0x1326958")]
		public GetShadowBias()
		{
		}
	}
	[Token(Token = "0x2000823")]
	[TaskDescription("Stores the color of the light.")]
	[TaskCategory("Unity/Light")]
	public class GetShadowStrength : Action
	{
		[Token(Token = "0x4002D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The color to store")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600338C")]
		[Address(RVA = "0x1326960", Offset = "0x1326960", VA = "0x1326960", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600338D")]
		[Address(RVA = "0x1326A64", Offset = "0x1326A64", VA = "0x1326A64", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600338E")]
		[Address(RVA = "0x1326B48", Offset = "0x1326B48", VA = "0x1326B48", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600338F")]
		[Address(RVA = "0x1326B7C", Offset = "0x1326B7C", VA = "0x1326B7C")]
		public GetShadowStrength()
		{
		}
	}
	[Token(Token = "0x2000824")]
	[TaskDescription("Stores the spot angle of the light.")]
	[TaskCategory("Unity/Light")]
	public class GetSpotAngle : Action
	{
		[Token(Token = "0x4002D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The spot angle to store")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003390")]
		[Address(RVA = "0x1326B84", Offset = "0x1326B84", VA = "0x1326B84", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003391")]
		[Address(RVA = "0x1326C88", Offset = "0x1326C88", VA = "0x1326C88", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003392")]
		[Address(RVA = "0x1326D6C", Offset = "0x1326D6C", VA = "0x1326D6C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003393")]
		[Address(RVA = "0x1326DA0", Offset = "0x1326DA0", VA = "0x1326DA0")]
		public GetSpotAngle()
		{
		}
	}
	[Token(Token = "0x2000825")]
	[TaskDescription("Sets the color of the light.")]
	[TaskCategory("Unity/Light")]
	public class SetColor : Action
	{
		[Token(Token = "0x4002D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The color to set")]
		public SharedColor color;

		[Token(Token = "0x4002D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003394")]
		[Address(RVA = "0x1326DA8", Offset = "0x1326DA8", VA = "0x1326DA8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003395")]
		[Address(RVA = "0x1326EAC", Offset = "0x1326EAC", VA = "0x1326EAC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003396")]
		[Address(RVA = "0x1326FA0", Offset = "0x1326FA0", VA = "0x1326FA0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003397")]
		[Address(RVA = "0x1326FE0", Offset = "0x1326FE0", VA = "0x1326FE0")]
		public SetColor()
		{
		}
	}
	[Token(Token = "0x2000826")]
	[TaskCategory("Unity/Light")]
	[TaskDescription("Sets the cookie of the light.")]
	public class SetCookie : Action
	{
		[Token(Token = "0x4002D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The cookie to set")]
		public Texture2D cookie;

		[Token(Token = "0x4002D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003398")]
		[Address(RVA = "0x1326FE8", Offset = "0x1326FE8", VA = "0x1326FE8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003399")]
		[Address(RVA = "0x13270EC", Offset = "0x13270EC", VA = "0x13270EC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600339A")]
		[Address(RVA = "0x13271BC", Offset = "0x13271BC", VA = "0x13271BC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600339B")]
		[Address(RVA = "0x13271E4", Offset = "0x13271E4", VA = "0x13271E4")]
		public SetCookie()
		{
		}
	}
	[Token(Token = "0x2000827")]
	[TaskCategory("Unity/Light")]
	[TaskDescription("Sets the light's cookie size.")]
	public class SetCookieSize : Action
	{
		[Token(Token = "0x4002D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The size to set")]
		public SharedFloat cookieSize;

		[Token(Token = "0x4002D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600339C")]
		[Address(RVA = "0x13271EC", Offset = "0x13271EC", VA = "0x13271EC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600339D")]
		[Address(RVA = "0x13272F0", Offset = "0x13272F0", VA = "0x13272F0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600339E")]
		[Address(RVA = "0x13273E4", Offset = "0x13273E4", VA = "0x13273E4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600339F")]
		[Address(RVA = "0x1327418", Offset = "0x1327418", VA = "0x1327418")]
		public SetCookieSize()
		{
		}
	}
	[Token(Token = "0x2000828")]
	[TaskCategory("Unity/Light")]
	[TaskDescription("Sets the culling mask of the light.")]
	public class SetCullingMask : Action
	{
		[Token(Token = "0x4002D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The culling mask to set")]
		public LayerMask cullingMask;

		[Token(Token = "0x4002D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60033A0")]
		[Address(RVA = "0x1327420", Offset = "0x1327420", VA = "0x1327420", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60033A1")]
		[Address(RVA = "0x1327524", Offset = "0x1327524", VA = "0x1327524", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033A2")]
		[Address(RVA = "0x1327604", Offset = "0x1327604", VA = "0x1327604", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033A3")]
		[Address(RVA = "0x1327634", Offset = "0x1327634", VA = "0x1327634")]
		public SetCullingMask()
		{
		}
	}
	[Token(Token = "0x2000829")]
	[TaskDescription("Sets the intensity of the light.")]
	[TaskCategory("Unity/Light")]
	public class SetIntensity : Action
	{
		[Token(Token = "0x4002D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The intensity to set")]
		public SharedFloat intensity;

		[Token(Token = "0x4002D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60033A4")]
		[Address(RVA = "0x132763C", Offset = "0x132763C", VA = "0x132763C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60033A5")]
		[Address(RVA = "0x1327740", Offset = "0x1327740", VA = "0x1327740", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033A6")]
		[Address(RVA = "0x1327834", Offset = "0x1327834", VA = "0x1327834", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033A7")]
		[Address(RVA = "0x1327868", Offset = "0x1327868", VA = "0x1327868")]
		public SetIntensity()
		{
		}
	}
	[Token(Token = "0x200082A")]
	[TaskCategory("Unity/Light")]
	[TaskDescription("Sets the range of the light.")]
	public class SetRange : Action
	{
		[Token(Token = "0x4002D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The range to set")]
		public SharedFloat range;

		[Token(Token = "0x4002D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60033A8")]
		[Address(RVA = "0x1327870", Offset = "0x1327870", VA = "0x1327870", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60033A9")]
		[Address(RVA = "0x1327974", Offset = "0x1327974", VA = "0x1327974", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033AA")]
		[Address(RVA = "0x1327A68", Offset = "0x1327A68", VA = "0x1327A68", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033AB")]
		[Address(RVA = "0x1327A9C", Offset = "0x1327A9C", VA = "0x1327A9C")]
		public SetRange()
		{
		}
	}
	[Token(Token = "0x200082B")]
	[TaskDescription("Sets the shadow bias of the light.")]
	[TaskCategory("Unity/Light")]
	public class SetShadowBias : Action
	{
		[Token(Token = "0x4002D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The shadow bias to set")]
		public SharedFloat shadowBias;

		[Token(Token = "0x4002D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60033AC")]
		[Address(RVA = "0x1327AA4", Offset = "0x1327AA4", VA = "0x1327AA4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60033AD")]
		[Address(RVA = "0x1327BA8", Offset = "0x1327BA8", VA = "0x1327BA8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033AE")]
		[Address(RVA = "0x1327C9C", Offset = "0x1327C9C", VA = "0x1327C9C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033AF")]
		[Address(RVA = "0x1327CD0", Offset = "0x1327CD0", VA = "0x1327CD0")]
		public SetShadowBias()
		{
		}
	}
	[Token(Token = "0x200082C")]
	[TaskCategory("Unity/Light")]
	[TaskDescription("Sets the shadow type of the light.")]
	public class SetShadows : Action
	{
		[Token(Token = "0x4002D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The shadow type to set")]
		public LightShadows shadows;

		[Token(Token = "0x4002D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60033B0")]
		[Address(RVA = "0x1327CD8", Offset = "0x1327CD8", VA = "0x1327CD8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60033B1")]
		[Address(RVA = "0x1327DDC", Offset = "0x1327DDC", VA = "0x1327DDC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033B2")]
		[Address(RVA = "0x1327EAC", Offset = "0x1327EAC", VA = "0x1327EAC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033B3")]
		[Address(RVA = "0x1327EB8", Offset = "0x1327EB8", VA = "0x1327EB8")]
		public SetShadows()
		{
		}
	}
	[Token(Token = "0x200082D")]
	[TaskCategory("Unity/Light")]
	[TaskDescription("Sets the shadow strength of the light.")]
	public class SetShadowSoftnessStrength : Action
	{
		[Token(Token = "0x4002D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The shadow strength to set")]
		public SharedFloat shadowStrength;

		[Token(Token = "0x4002D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60033B4")]
		[Address(RVA = "0x1327EC0", Offset = "0x1327EC0", VA = "0x1327EC0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60033B5")]
		[Address(RVA = "0x1327FC4", Offset = "0x1327FC4", VA = "0x1327FC4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033B6")]
		[Address(RVA = "0x13280B8", Offset = "0x13280B8", VA = "0x13280B8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033B7")]
		[Address(RVA = "0x13280EC", Offset = "0x13280EC", VA = "0x13280EC")]
		public SetShadowSoftnessStrength()
		{
		}
	}
	[Token(Token = "0x200082E")]
	[TaskCategory("Unity/Light")]
	[TaskDescription("Sets the spot angle of the light.")]
	public class SetSpotAngle : Action
	{
		[Token(Token = "0x4002D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The spot angle to set")]
		public SharedFloat spotAngle;

		[Token(Token = "0x4002D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60033B8")]
		[Address(RVA = "0x13280F4", Offset = "0x13280F4", VA = "0x13280F4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60033B9")]
		[Address(RVA = "0x13281F8", Offset = "0x13281F8", VA = "0x13281F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033BA")]
		[Address(RVA = "0x13282EC", Offset = "0x13282EC", VA = "0x13282EC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033BB")]
		[Address(RVA = "0x1328320", Offset = "0x1328320", VA = "0x1328320")]
		public SetSpotAngle()
		{
		}
	}
	[Token(Token = "0x200082F")]
	[TaskCategory("Unity/Light")]
	[TaskDescription("Sets the type of the light.")]
	public class SetType : Action
	{
		[Token(Token = "0x4002D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type to set")]
		public UnityEngine.LightType type;

		[Token(Token = "0x4002D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Light light;

		[Token(Token = "0x4002D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60033BC")]
		[Address(RVA = "0x1328328", Offset = "0x1328328", VA = "0x1328328", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60033BD")]
		[Address(RVA = "0x132842C", Offset = "0x132842C", VA = "0x132842C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033BE")]
		[Address(RVA = "0x13284FC", Offset = "0x13284FC", VA = "0x13284FC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033BF")]
		[Address(RVA = "0x1328508", Offset = "0x1328508", VA = "0x1328508")]
		public SetType()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityLayerMask
{
	[Token(Token = "0x2000830")]
	[TaskCategory("Unity/LayerMask")]
	[TaskDescription("Gets the layer of a GameObject.")]
	public class GetLayer : Action
	{
		[Token(Token = "0x4002D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to set the layer of")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the layer to get")]
		[RequiredField]
		public SharedString storeResult;

		[Token(Token = "0x60033C0")]
		[Address(RVA = "0x1328510", Offset = "0x1328510", VA = "0x1328510", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033C1")]
		[Address(RVA = "0x13285B8", Offset = "0x13285B8", VA = "0x13285B8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033C2")]
		[Address(RVA = "0x1328620", Offset = "0x1328620", VA = "0x1328620")]
		public GetLayer()
		{
		}
	}
	[Token(Token = "0x2000831")]
	[TaskDescription("Sets the layer of a GameObject.")]
	[TaskCategory("Unity/LayerMask")]
	public class SetLayer : Action
	{
		[Token(Token = "0x4002D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to set the layer of")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the layer to set")]
		public SharedString layerName;

		[Token(Token = "0x60033C3")]
		[Address(RVA = "0x1328628", Offset = "0x1328628", VA = "0x1328628", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033C4")]
		[Address(RVA = "0x13286D8", Offset = "0x13286D8", VA = "0x13286D8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033C5")]
		[Address(RVA = "0x1328740", Offset = "0x1328740", VA = "0x1328740")]
		public SetLayer()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityInput
{
	[Token(Token = "0x2000832")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Stores the acceleration value.")]
	public class GetAcceleration : Action
	{
		[Token(Token = "0x4002D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedVector3 storeResult;

		[Token(Token = "0x60033C6")]
		[Address(RVA = "0x13287A4", Offset = "0x13287A4", VA = "0x13287A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033C7")]
		[Address(RVA = "0x1328808", Offset = "0x1328808", VA = "0x1328808", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033C8")]
		[Address(RVA = "0x132886C", Offset = "0x132886C", VA = "0x132886C")]
		public GetAcceleration()
		{
		}
	}
	[Token(Token = "0x2000833")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Stores the value of the specified axis and stores it in a float.")]
	public class GetAxis : Action
	{
		[Token(Token = "0x4002D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the axis")]
		public SharedString axisName;

		[Token(Token = "0x4002D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Axis values are in the range -1 to 1. Use the multiplier to set a larger range")]
		public SharedFloat multiplier;

		[Token(Token = "0x4002D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x60033C9")]
		[Address(RVA = "0x1328874", Offset = "0x1328874", VA = "0x1328874", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033CA")]
		[Address(RVA = "0x1328944", Offset = "0x1328944", VA = "0x1328944", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033CB")]
		[Address(RVA = "0x13289D4", Offset = "0x13289D4", VA = "0x13289D4")]
		public GetAxis()
		{
		}
	}
	[Token(Token = "0x2000834")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Stores the raw value of the specified axis and stores it in a float.")]
	public class GetAxisRaw : Action
	{
		[Token(Token = "0x4002D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the axis")]
		public SharedString axisName;

		[Token(Token = "0x4002D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Axis values are in the range -1 to 1. Use the multiplier to set a larger range")]
		public SharedFloat multiplier;

		[Token(Token = "0x4002D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedFloat storeResult;

		[Token(Token = "0x60033CC")]
		[Address(RVA = "0x13289DC", Offset = "0x13289DC", VA = "0x13289DC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033CD")]
		[Address(RVA = "0x1328AAC", Offset = "0x1328AAC", VA = "0x1328AAC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033CE")]
		[Address(RVA = "0x1328B3C", Offset = "0x1328B3C", VA = "0x1328B3C")]
		public GetAxisRaw()
		{
		}
	}
	[Token(Token = "0x2000835")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Stores the state of the specified button.")]
	public class GetButton : Action
	{
		[Token(Token = "0x4002D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the button")]
		public SharedString buttonName;

		[Token(Token = "0x4002D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedBool storeResult;

		[Token(Token = "0x60033CF")]
		[Address(RVA = "0x1328B44", Offset = "0x1328B44", VA = "0x1328B44", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033D0")]
		[Address(RVA = "0x1328BD0", Offset = "0x1328BD0", VA = "0x1328BD0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033D1")]
		[Address(RVA = "0x1328C44", Offset = "0x1328C44", VA = "0x1328C44")]
		public GetButton()
		{
		}
	}
	[Token(Token = "0x2000836")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Stores the pressed state of the specified key.")]
	public class GetKey : Action
	{
		[Token(Token = "0x4002D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The key to test.")]
		public KeyCode key;

		[Token(Token = "0x4002D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The stored result")]
		public SharedBool storeResult;

		[Token(Token = "0x60033D2")]
		[Address(RVA = "0x1328C4C", Offset = "0x1328C4C", VA = "0x1328C4C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033D3")]
		[Address(RVA = "0x1328CB8", Offset = "0x1328CB8", VA = "0x1328CB8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033D4")]
		[Address(RVA = "0x1328CE4", Offset = "0x1328CE4", VA = "0x1328CE4")]
		public GetKey()
		{
		}
	}
	[Token(Token = "0x2000837")]
	[TaskDescription("Stores the state of the specified mouse button.")]
	[TaskCategory("Unity/Input")]
	public class GetMouseButton : Action
	{
		[Token(Token = "0x4002D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The index of the button")]
		public SharedInt buttonIndex;

		[Token(Token = "0x4002D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedBool storeResult;

		[Token(Token = "0x60033D5")]
		[Address(RVA = "0x1328CEC", Offset = "0x1328CEC", VA = "0x1328CEC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033D6")]
		[Address(RVA = "0x1328D78", Offset = "0x1328D78", VA = "0x1328D78", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033D7")]
		[Address(RVA = "0x1328DBC", Offset = "0x1328DBC", VA = "0x1328DBC")]
		public GetMouseButton()
		{
		}
	}
	[Token(Token = "0x2000838")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Stores the mouse position.")]
	public class GetMousePosition : Action
	{
		[Token(Token = "0x4002D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The stored result")]
		[RequiredField]
		public SharedVector3 storeResult;

		[Token(Token = "0x60033D8")]
		[Address(RVA = "0x1328DC4", Offset = "0x1328DC4", VA = "0x1328DC4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033D9")]
		[Address(RVA = "0x1328E28", Offset = "0x1328E28", VA = "0x1328E28", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033DA")]
		[Address(RVA = "0x1328E8C", Offset = "0x1328E8C", VA = "0x1328E8C")]
		public GetMousePosition()
		{
		}
	}
	[Token(Token = "0x2000839")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Returns success when the specified button is pressed.")]
	public class IsButtonDown : Conditional
	{
		[Token(Token = "0x4002D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the button")]
		public SharedString buttonName;

		[Token(Token = "0x60033DB")]
		[Address(RVA = "0x1328E94", Offset = "0x1328E94", VA = "0x1328E94", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033DC")]
		[Address(RVA = "0x1328EFC", Offset = "0x1328EFC", VA = "0x1328EFC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033DD")]
		[Address(RVA = "0x1328F54", Offset = "0x1328F54", VA = "0x1328F54")]
		public IsButtonDown()
		{
		}
	}
	[Token(Token = "0x200083A")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Returns success when the specified button is released.")]
	public class IsButtonUp : Conditional
	{
		[Token(Token = "0x4002D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the button")]
		public SharedString buttonName;

		[Token(Token = "0x60033DE")]
		[Address(RVA = "0x1328F5C", Offset = "0x1328F5C", VA = "0x1328F5C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033DF")]
		[Address(RVA = "0x1328FC4", Offset = "0x1328FC4", VA = "0x1328FC4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033E0")]
		[Address(RVA = "0x132901C", Offset = "0x132901C", VA = "0x132901C")]
		public IsButtonUp()
		{
		}
	}
	[Token(Token = "0x200083B")]
	[TaskDescription("Returns success when the specified key is pressed.")]
	[TaskCategory("Unity/Input")]
	public class IsKeyDown : Conditional
	{
		[Token(Token = "0x4002D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The key to test")]
		public KeyCode key;

		[Token(Token = "0x60033E1")]
		[Address(RVA = "0x1329024", Offset = "0x1329024", VA = "0x1329024", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033E2")]
		[Address(RVA = "0x1329048", Offset = "0x1329048", VA = "0x1329048", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033E3")]
		[Address(RVA = "0x1329050", Offset = "0x1329050", VA = "0x1329050")]
		public IsKeyDown()
		{
		}
	}
	[Token(Token = "0x200083C")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Returns success when the specified key is released.")]
	public class IsKeyUp : Conditional
	{
		[Token(Token = "0x4002D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The key to test")]
		public KeyCode key;

		[Token(Token = "0x60033E4")]
		[Address(RVA = "0x1329058", Offset = "0x1329058", VA = "0x1329058", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033E5")]
		[Address(RVA = "0x132907C", Offset = "0x132907C", VA = "0x132907C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033E6")]
		[Address(RVA = "0x1329084", Offset = "0x1329084", VA = "0x1329084")]
		public IsKeyUp()
		{
		}
	}
	[Token(Token = "0x200083D")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Returns success when the specified mouse button is pressed.")]
	public class IsMouseDown : Conditional
	{
		[Token(Token = "0x4002D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The button index")]
		public SharedInt buttonIndex;

		[Token(Token = "0x60033E7")]
		[Address(RVA = "0x132908C", Offset = "0x132908C", VA = "0x132908C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033E8")]
		[Address(RVA = "0x13290F4", Offset = "0x13290F4", VA = "0x13290F4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033E9")]
		[Address(RVA = "0x132911C", Offset = "0x132911C", VA = "0x132911C")]
		public IsMouseDown()
		{
		}
	}
	[Token(Token = "0x200083E")]
	[TaskCategory("Unity/Input")]
	[TaskDescription("Returns success when the specified mouse button is pressed.")]
	public class IsMouseUp : Conditional
	{
		[Token(Token = "0x4002D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The button index")]
		public SharedInt buttonIndex;

		[Token(Token = "0x60033EA")]
		[Address(RVA = "0x1329124", Offset = "0x1329124", VA = "0x1329124", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033EB")]
		[Address(RVA = "0x132918C", Offset = "0x132918C", VA = "0x132918C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033EC")]
		[Address(RVA = "0x13291B4", Offset = "0x13291B4", VA = "0x13291B4")]
		public IsMouseUp()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityGameObject
{
	[Token(Token = "0x200083F")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Returns Success if the GameObject is active in the hierarchy, otherwise Failure.")]
	public class ActiveInHierarchy : Conditional
	{
		[Token(Token = "0x4002D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x60033ED")]
		[Address(RVA = "0x13291BC", Offset = "0x13291BC", VA = "0x13291BC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033EE")]
		[Address(RVA = "0x1329238", Offset = "0x1329238", VA = "0x1329238", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033EF")]
		[Address(RVA = "0x1329244", Offset = "0x1329244", VA = "0x1329244")]
		public ActiveInHierarchy()
		{
		}
	}
	[Token(Token = "0x2000840")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Returns Success if the GameObject is active in the hierarchy, otherwise Failure.")]
	public class ActiveSelf : Conditional
	{
		[Token(Token = "0x4002D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x60033F0")]
		[Address(RVA = "0x132924C", Offset = "0x132924C", VA = "0x132924C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033F1")]
		[Address(RVA = "0x13292C8", Offset = "0x13292C8", VA = "0x13292C8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033F2")]
		[Address(RVA = "0x13292D4", Offset = "0x13292D4", VA = "0x13292D4")]
		public ActiveSelf()
		{
		}
	}
	[Token(Token = "0x2000841")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Returns Success if the layermasks match, otherwise Failure.")]
	public class CompareLayerMask : Conditional
	{
		[Token(Token = "0x4002D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layermask to compare against")]
		public LayerMask layermask;

		[Token(Token = "0x60033F3")]
		[Address(RVA = "0x13292DC", Offset = "0x13292DC", VA = "0x13292DC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033F4")]
		[Address(RVA = "0x132936C", Offset = "0x132936C", VA = "0x132936C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033F5")]
		[Address(RVA = "0x1329378", Offset = "0x1329378", VA = "0x1329378")]
		public CompareLayerMask()
		{
		}
	}
	[Token(Token = "0x2000842")]
	[TaskDescription("Returns Success if tags match, otherwise Failure.")]
	[TaskCategory("Unity/GameObject")]
	public class CompareTag : Conditional
	{
		[Token(Token = "0x4002D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The tag to compare against")]
		public SharedString tag;

		[Token(Token = "0x60033F6")]
		[Address(RVA = "0x1329380", Offset = "0x1329380", VA = "0x1329380", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033F7")]
		[Address(RVA = "0x1329430", Offset = "0x1329430", VA = "0x1329430", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033F8")]
		[Address(RVA = "0x1329498", Offset = "0x1329498", VA = "0x1329498")]
		public CompareTag()
		{
		}
	}
	[Token(Token = "0x2000843")]
	[TaskDescription("Destorys the specified GameObject. Returns Success.")]
	[TaskCategory("Unity/GameObject")]
	public class Destroy : Action
	{
		[Token(Token = "0x4002D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Time to destroy the GameObject in")]
		public float time;

		[Token(Token = "0x60033F9")]
		[Address(RVA = "0x13294A0", Offset = "0x13294A0", VA = "0x13294A0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033FA")]
		[Address(RVA = "0x1329574", Offset = "0x1329574", VA = "0x1329574", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033FB")]
		[Address(RVA = "0x1329598", Offset = "0x1329598", VA = "0x1329598")]
		public Destroy()
		{
		}
	}
	[Token(Token = "0x2000844")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Destorys the specified GameObject immediately. Returns Success.")]
	public class DestroyImmediate : Action
	{
		[Token(Token = "0x4002D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x60033FC")]
		[Address(RVA = "0x13295A0", Offset = "0x13295A0", VA = "0x13295A0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60033FD")]
		[Address(RVA = "0x1329640", Offset = "0x1329640", VA = "0x1329640", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60033FE")]
		[Address(RVA = "0x132964C", Offset = "0x132964C", VA = "0x132964C")]
		public DestroyImmediate()
		{
		}
	}
	[Token(Token = "0x2000845")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Finds a GameObject by name. Returns success if an object is found.")]
	public class Find : Action
	{
		[Token(Token = "0x4002D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject name to find")]
		public SharedString gameObjectName;

		[Token(Token = "0x4002D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The object found by name")]
		[RequiredField]
		public SharedGameObject storeValue;

		[Token(Token = "0x60033FF")]
		[Address(RVA = "0x1329654", Offset = "0x1329654", VA = "0x1329654", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003400")]
		[Address(RVA = "0x1329748", Offset = "0x1329748", VA = "0x1329748", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003401")]
		[Address(RVA = "0x1329770", Offset = "0x1329770", VA = "0x1329770")]
		public Find()
		{
		}
	}
	[Token(Token = "0x2000846")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Finds a GameObject by tag. Returns Success.")]
	public class FindGameObjectsWithTag : Action
	{
		[Token(Token = "0x4002D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to find")]
		public SharedString tag;

		[Token(Token = "0x4002D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The objects found by name")]
		public SharedGameObjectList storeValue;

		[Token(Token = "0x6003402")]
		[Address(RVA = "0x1329778", Offset = "0x1329778", VA = "0x1329778", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003403")]
		[Address(RVA = "0x13298BC", Offset = "0x13298BC", VA = "0x13298BC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003404")]
		[Address(RVA = "0x1329938", Offset = "0x1329938", VA = "0x1329938")]
		public FindGameObjectsWithTag()
		{
		}
	}
	[Token(Token = "0x2000847")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Finds a GameObject by tag. Returns success if an object is found.")]
	public class FindWithTag : Action
	{
		[Token(Token = "0x4002DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The tag of the GameObject to find")]
		public SharedString tag;

		[Token(Token = "0x4002DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Should a random GameObject be found?")]
		public SharedBool random;

		[Token(Token = "0x4002DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The object found by name")]
		public SharedGameObject storeValue;

		[Token(Token = "0x6003405")]
		[Address(RVA = "0x1329940", Offset = "0x1329940", VA = "0x1329940", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003406")]
		[Address(RVA = "0x1329AB0", Offset = "0x1329AB0", VA = "0x1329AB0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003407")]
		[Address(RVA = "0x1329B2C", Offset = "0x1329B2C", VA = "0x1329B2C")]
		public FindWithTag()
		{
		}
	}
	[Token(Token = "0x2000848")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Returns the component of Type type if the game object has one attached, null if it doesn't. Returns Success.")]
	public class GetComponent : Action
	{
		[Token(Token = "0x4002DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of component")]
		public SharedString type;

		[Token(Token = "0x4002DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The component")]
		public SharedObject storeValue;

		[Token(Token = "0x6003408")]
		[Address(RVA = "0x1329B34", Offset = "0x1329B34", VA = "0x1329B34", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003409")]
		[Address(RVA = "0x1329C08", Offset = "0x1329C08", VA = "0x1329C08", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600340A")]
		[Address(RVA = "0x1329CAC", Offset = "0x1329CAC", VA = "0x1329CAC")]
		public GetComponent()
		{
		}
	}
	[Token(Token = "0x2000849")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Stores the GameObject tag. Returns Success.")]
	public class GetTag : Action
	{
		[Token(Token = "0x4002DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Active state of the GameObject")]
		public SharedString storeValue;

		[Token(Token = "0x600340B")]
		[Address(RVA = "0x1329CB4", Offset = "0x1329CB4", VA = "0x1329CB4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600340C")]
		[Address(RVA = "0x1329D54", Offset = "0x1329D54", VA = "0x1329D54", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600340D")]
		[Address(RVA = "0x1329DBC", Offset = "0x1329DBC", VA = "0x1329DBC")]
		public GetTag()
		{
		}
	}
	[Token(Token = "0x200084A")]
	[TaskDescription("Instantiates a new GameObject. Returns Success.")]
	[TaskCategory("Unity/GameObject")]
	public class Instantiate : Action
	{
		[Token(Token = "0x4002DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position of the new GameObject")]
		public SharedVector3 position;

		[Token(Token = "0x4002DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The rotation of the new GameObject")]
		public SharedQuaternion rotation;

		[Token(Token = "0x4002DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SharedRequired]
		[Tooltip("The instantiated GameObject")]
		public SharedGameObject storeResult;

		[Token(Token = "0x600340E")]
		[Address(RVA = "0x1329DC4", Offset = "0x1329DC4", VA = "0x1329DC4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600340F")]
		[Address(RVA = "0x1329F3C", Offset = "0x1329F3C", VA = "0x1329F3C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003410")]
		[Address(RVA = "0x1329FFC", Offset = "0x1329FFC", VA = "0x1329FFC")]
		public Instantiate()
		{
		}
	}
	[Token(Token = "0x200084B")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Sends a message to the target GameObject. Returns Success.")]
	public class SendMessage : Action
	{
		[Token(Token = "0x4002DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The message to send")]
		public SharedString message;

		[Token(Token = "0x4002DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The value to send")]
		public SharedGenericVariable value;

		[Token(Token = "0x6003411")]
		[Address(RVA = "0x132A06C", Offset = "0x132A06C", VA = "0x132A06C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003412")]
		[Address(RVA = "0x132A194", Offset = "0x132A194", VA = "0x132A194", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003413")]
		[Address(RVA = "0x132A1FC", Offset = "0x132A1FC", VA = "0x132A1FC")]
		public SendMessage()
		{
		}
	}
	[Token(Token = "0x200084C")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Activates/Deactivates the GameObject. Returns Success.")]
	public class SetActive : Action
	{
		[Token(Token = "0x4002DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Active state of the GameObject")]
		public SharedBool active;

		[Token(Token = "0x6003414")]
		[Address(RVA = "0x132A204", Offset = "0x132A204", VA = "0x132A204", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003415")]
		[Address(RVA = "0x132A2AC", Offset = "0x132A2AC", VA = "0x132A2AC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003416")]
		[Address(RVA = "0x132A2E0", Offset = "0x132A2E0", VA = "0x132A2E0")]
		public SetActive()
		{
		}
	}
	[Token(Token = "0x200084D")]
	[TaskCategory("Unity/GameObject")]
	[TaskDescription("Sets the GameObject tag. Returns Success.")]
	public class SetTag : Action
	{
		[Token(Token = "0x4002DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The GameObject tag")]
		public SharedString tag;

		[Token(Token = "0x6003417")]
		[Address(RVA = "0x132A2E8", Offset = "0x132A2E8", VA = "0x132A2E8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003418")]
		[Address(RVA = "0x132A390", Offset = "0x132A390", VA = "0x132A390", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003419")]
		[Address(RVA = "0x132A3F8", Offset = "0x132A3F8", VA = "0x132A3F8")]
		public SetTag()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityDebug
{
	[Token(Token = "0x200084E")]
	[TaskCategory("Unity/Debug")]
	[TaskDescription("Draws a debug line")]
	public class DrawLine : Action
	{
		[Token(Token = "0x4002DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The start position")]
		public SharedVector3 start;

		[Token(Token = "0x4002DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The end position")]
		public SharedVector3 end;

		[Token(Token = "0x4002DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The color")]
		public SharedColor color;

		[Token(Token = "0x4002DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Duration the line will be visible for in seconds.\nDefault: 0 means 1 frame.")]
		public SharedFloat duration;

		[Token(Token = "0x4002DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Whether the line should show through world geometry.")]
		public SharedBool depthTest;

		[Token(Token = "0x600341A")]
		[Address(RVA = "0x132A400", Offset = "0x132A400", VA = "0x132A400", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600341B")]
		[Address(RVA = "0x132A57C", Offset = "0x132A57C", VA = "0x132A57C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600341C")]
		[Address(RVA = "0x132A684", Offset = "0x132A684", VA = "0x132A684")]
		public DrawLine()
		{
		}
	}
	[Token(Token = "0x200084F")]
	[TaskDescription("Draws a debug ray")]
	[TaskCategory("Unity/Debug")]
	public class DrawRay : Action
	{
		[Token(Token = "0x4002DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The position")]
		public SharedVector3 start;

		[Token(Token = "0x4002DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The direction")]
		public SharedVector3 direction;

		[Token(Token = "0x4002DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The color")]
		public SharedColor color;

		[Token(Token = "0x600341D")]
		[Address(RVA = "0x132A6E0", Offset = "0x132A6E0", VA = "0x132A6E0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600341E")]
		[Address(RVA = "0x132A800", Offset = "0x132A800", VA = "0x132A800", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600341F")]
		[Address(RVA = "0x132A8D0", Offset = "0x132A8D0", VA = "0x132A8D0")]
		public DrawRay()
		{
		}
	}
	[Token(Token = "0x2000850")]
	[TaskDescription("LogFormat is analgous to Debug.LogFormat().\nIt takes format string, substitutes arguments supplied a '{0-4}' and returns success.\nAny fields or arguments not supplied are ignored.It can be used for debugging.")]
	[TaskIcon("{SkinColor}LogIcon.png")]
	public class LogFormat : Action
	{
		[Token(Token = "0x4002DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Text format with {0}, {1}, etc")]
		public SharedString textFormat;

		[Token(Token = "0x4002DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Is this text an error?")]
		public SharedBool logError;

		[Token(Token = "0x4002DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SharedVariable arg0;

		[Token(Token = "0x4002DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SharedVariable arg1;

		[Token(Token = "0x4002DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SharedVariable arg2;

		[Token(Token = "0x4002DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SharedVariable arg3;

		[Token(Token = "0x6003420")]
		[Address(RVA = "0x132A910", Offset = "0x132A910", VA = "0x132A910", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003421")]
		[Address(RVA = "0x132A9EC", Offset = "0x132A9EC", VA = "0x132A9EC")]
		private object[] buildParamsArray()
		{
			return null;
		}

		[Token(Token = "0x6003422")]
		[Address(RVA = "0x132AC74", Offset = "0x132AC74", VA = "0x132AC74")]
		private bool isValid(SharedVariable sv)
		{
			return default(bool);
		}

		[Token(Token = "0x6003423")]
		[Address(RVA = "0x132ACA0", Offset = "0x132ACA0", VA = "0x132ACA0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003424")]
		[Address(RVA = "0x132AD5C", Offset = "0x132AD5C", VA = "0x132AD5C")]
		public LogFormat()
		{
		}
	}
	[Token(Token = "0x2000851")]
	[TaskCategory("Unity/Debug")]
	[TaskDescription("Log a variable value.")]
	public class LogValue : Action
	{
		[Token(Token = "0x4002DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The variable to output")]
		public SharedGenericVariable variable;

		[Token(Token = "0x6003425")]
		[Address(RVA = "0x132AD64", Offset = "0x132AD64", VA = "0x132AD64", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003426")]
		[Address(RVA = "0x132AE34", Offset = "0x132AE34", VA = "0x132AE34", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003427")]
		[Address(RVA = "0x132AE40", Offset = "0x132AE40", VA = "0x132AE40")]
		public LogValue()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.Collider
{
	[Token(Token = "0x2000852")]
	[TaskCategory("Unity/Collider")]
	[TaskDescription("Stores the enabled state of the collider. Returns Success.")]
	public class GetEnabled : Action
	{
		[Token(Token = "0x4002DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Collider to use")]
		public SharedCollider specifiedCollider;

		[Token(Token = "0x4002DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The enabled/disabled state")]
		[RequiredField]
		public SharedBool storeValue;

		[Token(Token = "0x6003428")]
		[Address(RVA = "0x132AE48", Offset = "0x132AE48", VA = "0x132AE48", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003429")]
		[Address(RVA = "0x132AF24", Offset = "0x132AF24", VA = "0x132AF24", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600342A")]
		[Address(RVA = "0x132AF94", Offset = "0x132AF94", VA = "0x132AF94")]
		public GetEnabled()
		{
		}
	}
	[Token(Token = "0x2000853")]
	[TaskDescription("Enables/Disables the collider. Returns Success.")]
	[TaskCategory("Unity/Collider")]
	public class SetEnabled : Action
	{
		[Token(Token = "0x4002DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Behavior to use")]
		public SharedCollider specifiedCollider;

		[Token(Token = "0x4002DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The enabled/disabled state")]
		public SharedBool enabled;

		[Token(Token = "0x600342B")]
		[Address(RVA = "0x132AF9C", Offset = "0x132AF9C", VA = "0x132AF9C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600342C")]
		[Address(RVA = "0x132B080", Offset = "0x132B080", VA = "0x132B080", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600342D")]
		[Address(RVA = "0x132B0F0", Offset = "0x132B0F0", VA = "0x132B0F0")]
		public SetEnabled()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityCircleCollider2D
{
	[Token(Token = "0x2000854")]
	[TaskCategory("Unity/CircleCollider2D")]
	[TaskDescription("Stores the offset of the CircleCollider2D. Returns Success.")]
	public class GetOffset : Action
	{
		[Token(Token = "0x4002DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The offset of the CircleCollider2D")]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CircleCollider2D circleCollider2D;

		[Token(Token = "0x4002DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600342E")]
		[Address(RVA = "0x132B0F8", Offset = "0x132B0F8", VA = "0x132B0F8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600342F")]
		[Address(RVA = "0x132B1FC", Offset = "0x132B1FC", VA = "0x132B1FC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003430")]
		[Address(RVA = "0x132B2F4", Offset = "0x132B2F4", VA = "0x132B2F4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003431")]
		[Address(RVA = "0x132B364", Offset = "0x132B364", VA = "0x132B364")]
		public GetOffset()
		{
		}
	}
	[Token(Token = "0x2000855")]
	[TaskCategory("Unity/CircleCollider2D")]
	[TaskDescription("Stores the radius of the CircleCollider2D. Returns Success.")]
	public class GetRadius : Action
	{
		[Token(Token = "0x4002DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The radius of the CircleCollider2D")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CircleCollider2D circleCollider2D;

		[Token(Token = "0x4002DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003432")]
		[Address(RVA = "0x132B36C", Offset = "0x132B36C", VA = "0x132B36C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003433")]
		[Address(RVA = "0x132B470", Offset = "0x132B470", VA = "0x132B470", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003434")]
		[Address(RVA = "0x132B564", Offset = "0x132B564", VA = "0x132B564", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003435")]
		[Address(RVA = "0x132B598", Offset = "0x132B598", VA = "0x132B598")]
		public GetRadius()
		{
		}
	}
	[Token(Token = "0x2000856")]
	[TaskDescription("Sets the offset of the CircleCollider2D. Returns Success.")]
	[TaskCategory("Unity/CircleCollider2D")]
	public class SetOffset : Action
	{
		[Token(Token = "0x4002DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The offset of the CircleCollider2D")]
		public SharedVector3 offset;

		[Token(Token = "0x4002DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CircleCollider2D circleCollider2D;

		[Token(Token = "0x4002DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003436")]
		[Address(RVA = "0x132B5A0", Offset = "0x132B5A0", VA = "0x132B5A0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003437")]
		[Address(RVA = "0x132B6A4", Offset = "0x132B6A4", VA = "0x132B6A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003438")]
		[Address(RVA = "0x132B798", Offset = "0x132B798", VA = "0x132B798", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003439")]
		[Address(RVA = "0x132B808", Offset = "0x132B808", VA = "0x132B808")]
		public SetOffset()
		{
		}
	}
	[Token(Token = "0x2000857")]
	[TaskCategory("Unity/CircleCollider2D")]
	[TaskDescription("Sets the radius of the CircleCollider2D. Returns Success.")]
	public class SetRadius : Action
	{
		[Token(Token = "0x4002DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The radius of the CircleCollider2D")]
		public SharedFloat radius;

		[Token(Token = "0x4002DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CircleCollider2D circleCollider2D;

		[Token(Token = "0x4002DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600343A")]
		[Address(RVA = "0x132B810", Offset = "0x132B810", VA = "0x132B810", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600343B")]
		[Address(RVA = "0x132B914", Offset = "0x132B914", VA = "0x132B914", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600343C")]
		[Address(RVA = "0x132BA08", Offset = "0x132BA08", VA = "0x132BA08", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600343D")]
		[Address(RVA = "0x132BA3C", Offset = "0x132BA3C", VA = "0x132BA3C")]
		public SetRadius()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityCharacterController
{
	[Token(Token = "0x2000858")]
	[TaskDescription("Stores the center of the CharacterController. Returns Success.")]
	[TaskCategory("Unity/CharacterController")]
	public class GetCenter : Action
	{
		[Token(Token = "0x4002DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The center of the CharacterController")]
		[RequiredField]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600343E")]
		[Address(RVA = "0x132BA44", Offset = "0x132BA44", VA = "0x132BA44", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600343F")]
		[Address(RVA = "0x132BB48", Offset = "0x132BB48", VA = "0x132BB48", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003440")]
		[Address(RVA = "0x132BC3C", Offset = "0x132BC3C", VA = "0x132BC3C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003441")]
		[Address(RVA = "0x132BCAC", Offset = "0x132BCAC", VA = "0x132BCAC")]
		public GetCenter()
		{
		}
	}
	[Token(Token = "0x2000859")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("Stores the height of the CharacterController. Returns Success.")]
	public class GetHeight : Action
	{
		[Token(Token = "0x4002DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The height of the CharacterController")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003442")]
		[Address(RVA = "0x132BCB4", Offset = "0x132BCB4", VA = "0x132BCB4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003443")]
		[Address(RVA = "0x132BDB8", Offset = "0x132BDB8", VA = "0x132BDB8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003444")]
		[Address(RVA = "0x132BEAC", Offset = "0x132BEAC", VA = "0x132BEAC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003445")]
		[Address(RVA = "0x132BEE0", Offset = "0x132BEE0", VA = "0x132BEE0")]
		public GetHeight()
		{
		}
	}
	[Token(Token = "0x200085A")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("Stores the radius of the CharacterController. Returns Success.")]
	public class GetRadius : Action
	{
		[Token(Token = "0x4002DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The radius of the CharacterController")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003446")]
		[Address(RVA = "0x132BEE8", Offset = "0x132BEE8", VA = "0x132BEE8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003447")]
		[Address(RVA = "0x132BFEC", Offset = "0x132BFEC", VA = "0x132BFEC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003448")]
		[Address(RVA = "0x132C0E0", Offset = "0x132C0E0", VA = "0x132C0E0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003449")]
		[Address(RVA = "0x132C114", Offset = "0x132C114", VA = "0x132C114")]
		public GetRadius()
		{
		}
	}
	[Token(Token = "0x200085B")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("Stores the slope limit of the CharacterController. Returns Success.")]
	public class GetSlopeLimit : Action
	{
		[Token(Token = "0x4002DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The slope limit of the CharacterController")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600344A")]
		[Address(RVA = "0x132C11C", Offset = "0x132C11C", VA = "0x132C11C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600344B")]
		[Address(RVA = "0x132C220", Offset = "0x132C220", VA = "0x132C220", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600344C")]
		[Address(RVA = "0x132C314", Offset = "0x132C314", VA = "0x132C314", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600344D")]
		[Address(RVA = "0x132C348", Offset = "0x132C348", VA = "0x132C348")]
		public GetSlopeLimit()
		{
		}
	}
	[Token(Token = "0x200085C")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("Stores the step offset of the CharacterController. Returns Success.")]
	public class GetStepOffset : Action
	{
		[Token(Token = "0x4002DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The step offset of the CharacterController")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600344E")]
		[Address(RVA = "0x132C350", Offset = "0x132C350", VA = "0x132C350", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600344F")]
		[Address(RVA = "0x132C454", Offset = "0x132C454", VA = "0x132C454", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003450")]
		[Address(RVA = "0x132C548", Offset = "0x132C548", VA = "0x132C548", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003451")]
		[Address(RVA = "0x132C57C", Offset = "0x132C57C", VA = "0x132C57C")]
		public GetStepOffset()
		{
		}
	}
	[Token(Token = "0x200085D")]
	[TaskDescription("Stores the velocity of the CharacterController. Returns Success.")]
	[TaskCategory("Unity/CharacterController")]
	public class GetVelocity : Action
	{
		[Token(Token = "0x4002DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The velocity of the CharacterController")]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003452")]
		[Address(RVA = "0x132C584", Offset = "0x132C584", VA = "0x132C584", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003453")]
		[Address(RVA = "0x132C688", Offset = "0x132C688", VA = "0x132C688", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003454")]
		[Address(RVA = "0x132C77C", Offset = "0x132C77C", VA = "0x132C77C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003455")]
		[Address(RVA = "0x132C7EC", Offset = "0x132C7EC", VA = "0x132C7EC")]
		public GetVelocity()
		{
		}
	}
	[Token(Token = "0x200085E")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("Returns Success if the collider hit another object, otherwise Failure.")]
	public class HasColliderHit : Conditional
	{
		[Token(Token = "0x4002DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The tag of the GameObject to check for a collision against")]
		public SharedString tag;

		[Token(Token = "0x4002DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The object that started the collision")]
		public SharedGameObject collidedGameObject;

		[Token(Token = "0x4002DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool enteredCollision;

		[Token(Token = "0x6003456")]
		[Address(RVA = "0x132C7F4", Offset = "0x132C7F4", VA = "0x132C7F4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003457")]
		[Address(RVA = "0x132C808", Offset = "0x132C808", VA = "0x132C808", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6003458")]
		[Address(RVA = "0x132C810", Offset = "0x132C810", VA = "0x132C810", Slot = "26")]
		public override void OnControllerColliderHit(ControllerColliderHit hit)
		{
		}

		[Token(Token = "0x6003459")]
		[Address(RVA = "0x132C904", Offset = "0x132C904", VA = "0x132C904", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600345A")]
		[Address(RVA = "0x132C97C", Offset = "0x132C97C", VA = "0x132C97C")]
		public HasColliderHit()
		{
		}
	}
	[Token(Token = "0x200085F")]
	[TaskDescription("Returns Success if the character is grounded, otherwise Failure.")]
	[TaskCategory("Unity/CharacterController")]
	public class IsGrounded : Conditional
	{
		[Token(Token = "0x4002DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x4002DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x600345B")]
		[Address(RVA = "0x132C9E0", Offset = "0x132C9E0", VA = "0x132C9E0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600345C")]
		[Address(RVA = "0x132CAE4", Offset = "0x132CAE4", VA = "0x132CAE4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600345D")]
		[Address(RVA = "0x132CBB8", Offset = "0x132CBB8", VA = "0x132CBB8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600345E")]
		[Address(RVA = "0x132CBC4", Offset = "0x132CBC4", VA = "0x132CBC4")]
		public IsGrounded()
		{
		}
	}
	[Token(Token = "0x2000860")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("A more complex move function taking absolute movement deltas. Returns Success.")]
	public class Move : Action
	{
		[Token(Token = "0x4002DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The amount to move")]
		public SharedVector3 motion;

		[Token(Token = "0x4002DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600345F")]
		[Address(RVA = "0x132CBCC", Offset = "0x132CBCC", VA = "0x132CBCC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003460")]
		[Address(RVA = "0x132CCD0", Offset = "0x132CCD0", VA = "0x132CCD0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003461")]
		[Address(RVA = "0x132CDC4", Offset = "0x132CDC4", VA = "0x132CDC4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003462")]
		[Address(RVA = "0x132CE34", Offset = "0x132CE34", VA = "0x132CE34")]
		public Move()
		{
		}
	}
	[Token(Token = "0x2000861")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("Sets the center of the CharacterController. Returns Success.")]
	public class SetCenter : Action
	{
		[Token(Token = "0x4002DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The center of the CharacterController")]
		public SharedVector3 center;

		[Token(Token = "0x4002DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003463")]
		[Address(RVA = "0x132CE3C", Offset = "0x132CE3C", VA = "0x132CE3C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003464")]
		[Address(RVA = "0x132CF40", Offset = "0x132CF40", VA = "0x132CF40", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003465")]
		[Address(RVA = "0x132D034", Offset = "0x132D034", VA = "0x132D034", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003466")]
		[Address(RVA = "0x132D0A4", Offset = "0x132D0A4", VA = "0x132D0A4")]
		public SetCenter()
		{
		}
	}
	[Token(Token = "0x2000862")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("Sets the height of the CharacterController. Returns Success.")]
	public class SetHeight : Action
	{
		[Token(Token = "0x4002DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The height of the CharacterController")]
		public SharedFloat height;

		[Token(Token = "0x4002DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003467")]
		[Address(RVA = "0x132D0AC", Offset = "0x132D0AC", VA = "0x132D0AC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003468")]
		[Address(RVA = "0x132D1B0", Offset = "0x132D1B0", VA = "0x132D1B0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003469")]
		[Address(RVA = "0x132D2A4", Offset = "0x132D2A4", VA = "0x132D2A4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600346A")]
		[Address(RVA = "0x132D2D8", Offset = "0x132D2D8", VA = "0x132D2D8")]
		public SetHeight()
		{
		}
	}
	[Token(Token = "0x2000863")]
	[TaskDescription("Sets the radius of the CharacterController. Returns Success.")]
	[TaskCategory("Unity/CharacterController")]
	public class SetRadius : Action
	{
		[Token(Token = "0x4002E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The radius of the CharacterController")]
		public SharedFloat radius;

		[Token(Token = "0x4002E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600346B")]
		[Address(RVA = "0x132D2E0", Offset = "0x132D2E0", VA = "0x132D2E0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600346C")]
		[Address(RVA = "0x132D3E4", Offset = "0x132D3E4", VA = "0x132D3E4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600346D")]
		[Address(RVA = "0x132D4D8", Offset = "0x132D4D8", VA = "0x132D4D8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600346E")]
		[Address(RVA = "0x132D50C", Offset = "0x132D50C", VA = "0x132D50C")]
		public SetRadius()
		{
		}
	}
	[Token(Token = "0x2000864")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("Sets the slope limit of the CharacterController. Returns Success.")]
	public class SetSlopeLimit : Action
	{
		[Token(Token = "0x4002E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The slope limit of the CharacterController")]
		public SharedFloat slopeLimit;

		[Token(Token = "0x4002E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600346F")]
		[Address(RVA = "0x132D514", Offset = "0x132D514", VA = "0x132D514", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003470")]
		[Address(RVA = "0x132D618", Offset = "0x132D618", VA = "0x132D618", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003471")]
		[Address(RVA = "0x132D70C", Offset = "0x132D70C", VA = "0x132D70C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003472")]
		[Address(RVA = "0x132D740", Offset = "0x132D740", VA = "0x132D740")]
		public SetSlopeLimit()
		{
		}
	}
	[Token(Token = "0x2000865")]
	[TaskDescription("Sets the step offset of the CharacterController. Returns Success.")]
	[TaskCategory("Unity/CharacterController")]
	public class SetStepOffset : Action
	{
		[Token(Token = "0x4002E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The step offset of the CharacterController")]
		public SharedFloat stepOffset;

		[Token(Token = "0x4002E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003473")]
		[Address(RVA = "0x132D748", Offset = "0x132D748", VA = "0x132D748", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003474")]
		[Address(RVA = "0x132D84C", Offset = "0x132D84C", VA = "0x132D84C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003475")]
		[Address(RVA = "0x132D940", Offset = "0x132D940", VA = "0x132D940", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003476")]
		[Address(RVA = "0x132D974", Offset = "0x132D974", VA = "0x132D974")]
		public SetStepOffset()
		{
		}
	}
	[Token(Token = "0x2000866")]
	[TaskCategory("Unity/CharacterController")]
	[TaskDescription("Moves the character with speed. Returns Success.")]
	public class SimpleMove : Action
	{
		[Token(Token = "0x4002E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The speed of the movement")]
		public SharedVector3 speed;

		[Token(Token = "0x4002E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CharacterController characterController;

		[Token(Token = "0x4002E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003477")]
		[Address(RVA = "0x132D97C", Offset = "0x132D97C", VA = "0x132D97C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003478")]
		[Address(RVA = "0x132DA80", Offset = "0x132DA80", VA = "0x132DA80", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003479")]
		[Address(RVA = "0x132DB74", Offset = "0x132DB74", VA = "0x132DB74", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600347A")]
		[Address(RVA = "0x132DBE4", Offset = "0x132DBE4", VA = "0x132DBE4")]
		public SimpleMove()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityCapsuleCollider
{
	[Token(Token = "0x2000867")]
	[TaskDescription("Stores the center of the CapsuleCollider. Returns Success.")]
	[TaskCategory("Unity/CapsuleCollider")]
	public class GetCenter : Action
	{
		[Token(Token = "0x4002E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The center of the CapsuleCollider")]
		[RequiredField]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x4002E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600347B")]
		[Address(RVA = "0x132DBEC", Offset = "0x132DBEC", VA = "0x132DBEC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600347C")]
		[Address(RVA = "0x132DCF0", Offset = "0x132DCF0", VA = "0x132DCF0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600347D")]
		[Address(RVA = "0x132DDE4", Offset = "0x132DDE4", VA = "0x132DDE4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600347E")]
		[Address(RVA = "0x132DE54", Offset = "0x132DE54", VA = "0x132DE54")]
		public GetCenter()
		{
		}
	}
	[Token(Token = "0x2000868")]
	[TaskCategory("Unity/CapsuleCollider")]
	[TaskDescription("Stores the direction of the CapsuleCollider. Returns Success.")]
	public class GetDirection : Action
	{
		[Token(Token = "0x4002E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The direction of the CapsuleCollider")]
		public SharedInt storeValue;

		[Token(Token = "0x4002E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x4002E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600347F")]
		[Address(RVA = "0x132DE5C", Offset = "0x132DE5C", VA = "0x132DE5C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003480")]
		[Address(RVA = "0x132DF60", Offset = "0x132DF60", VA = "0x132DF60", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003481")]
		[Address(RVA = "0x132E058", Offset = "0x132E058", VA = "0x132E058", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003482")]
		[Address(RVA = "0x132E08C", Offset = "0x132E08C", VA = "0x132E08C")]
		public GetDirection()
		{
		}
	}
	[Token(Token = "0x2000869")]
	[TaskCategory("Unity/CapsuleCollider")]
	[TaskDescription("Gets the height of the CapsuleCollider. Returns Success.")]
	public class GetHeight : Action
	{
		[Token(Token = "0x4002E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The height of the CapsuleCollider")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x4002E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003483")]
		[Address(RVA = "0x132E094", Offset = "0x132E094", VA = "0x132E094", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003484")]
		[Address(RVA = "0x132E198", Offset = "0x132E198", VA = "0x132E198", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003485")]
		[Address(RVA = "0x132E28C", Offset = "0x132E28C", VA = "0x132E28C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003486")]
		[Address(RVA = "0x132E2C0", Offset = "0x132E2C0", VA = "0x132E2C0")]
		public GetHeight()
		{
		}
	}
	[Token(Token = "0x200086A")]
	[TaskDescription("Stores the radius of the CapsuleCollider. Returns Success.")]
	[TaskCategory("Unity/CapsuleCollider")]
	public class GetRadius : Action
	{
		[Token(Token = "0x4002E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The radius of the CapsuleCollider")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x4002E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003487")]
		[Address(RVA = "0x132E2C8", Offset = "0x132E2C8", VA = "0x132E2C8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003488")]
		[Address(RVA = "0x132E3CC", Offset = "0x132E3CC", VA = "0x132E3CC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003489")]
		[Address(RVA = "0x132E4C0", Offset = "0x132E4C0", VA = "0x132E4C0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600348A")]
		[Address(RVA = "0x132E4F4", Offset = "0x132E4F4", VA = "0x132E4F4")]
		public GetRadius()
		{
		}
	}
	[Token(Token = "0x200086B")]
	[TaskCategory("Unity/CapsuleCollider")]
	[TaskDescription("Sets the center of the CapsuleCollider. Returns Success.")]
	public class SetCenter : Action
	{
		[Token(Token = "0x4002E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The center of the CapsuleCollider")]
		public SharedVector3 center;

		[Token(Token = "0x4002E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x4002E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600348B")]
		[Address(RVA = "0x132E4FC", Offset = "0x132E4FC", VA = "0x132E4FC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600348C")]
		[Address(RVA = "0x132E600", Offset = "0x132E600", VA = "0x132E600", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600348D")]
		[Address(RVA = "0x132E6F4", Offset = "0x132E6F4", VA = "0x132E6F4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600348E")]
		[Address(RVA = "0x132E764", Offset = "0x132E764", VA = "0x132E764")]
		public SetCenter()
		{
		}
	}
	[Token(Token = "0x200086C")]
	[TaskDescription("Sets the direction of the CapsuleCollider. Returns Success.")]
	[TaskCategory("Unity/CapsuleCollider")]
	public class SetDirection : Action
	{
		[Token(Token = "0x4002E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The direction of the CapsuleCollider")]
		public SharedInt direction;

		[Token(Token = "0x4002E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x4002E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600348F")]
		[Address(RVA = "0x132E76C", Offset = "0x132E76C", VA = "0x132E76C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003490")]
		[Address(RVA = "0x132E870", Offset = "0x132E870", VA = "0x132E870", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003491")]
		[Address(RVA = "0x132E968", Offset = "0x132E968", VA = "0x132E968", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003492")]
		[Address(RVA = "0x132E99C", Offset = "0x132E99C", VA = "0x132E99C")]
		public SetDirection()
		{
		}
	}
	[Token(Token = "0x200086D")]
	[TaskCategory("Unity/CapsuleCollider")]
	[TaskDescription("Sets the height of the CapsuleCollider. Returns Success.")]
	public class SetHeight : Action
	{
		[Token(Token = "0x4002E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The height of the CapsuleCollider")]
		public SharedFloat direction;

		[Token(Token = "0x4002E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x4002E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003493")]
		[Address(RVA = "0x132E9A4", Offset = "0x132E9A4", VA = "0x132E9A4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003494")]
		[Address(RVA = "0x132EAA8", Offset = "0x132EAA8", VA = "0x132EAA8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003495")]
		[Address(RVA = "0x132EB9C", Offset = "0x132EB9C", VA = "0x132EB9C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003496")]
		[Address(RVA = "0x132EBD0", Offset = "0x132EBD0", VA = "0x132EBD0")]
		public SetHeight()
		{
		}
	}
	[Token(Token = "0x200086E")]
	[TaskCategory("Unity/CapsuleCollider")]
	[TaskDescription("Sets the radius of the CapsuleCollider. Returns Success.")]
	public class SetRadius : Action
	{
		[Token(Token = "0x4002E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The radius of the CapsuleCollider")]
		public SharedFloat radius;

		[Token(Token = "0x4002E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x4002E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003497")]
		[Address(RVA = "0x132EBD8", Offset = "0x132EBD8", VA = "0x132EBD8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003498")]
		[Address(RVA = "0x132ECDC", Offset = "0x132ECDC", VA = "0x132ECDC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003499")]
		[Address(RVA = "0x132EDD0", Offset = "0x132EDD0", VA = "0x132EDD0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600349A")]
		[Address(RVA = "0x132EE04", Offset = "0x132EE04", VA = "0x132EE04")]
		public SetRadius()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityBoxCollider2D
{
	[Token(Token = "0x200086F")]
	[TaskDescription("Stores the size of the BoxCollider2D. Returns Success.")]
	[TaskCategory("Unity/BoxCollider2D")]
	public class GetSize : Action
	{
		[Token(Token = "0x4002E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The size of the BoxCollider2D")]
		public SharedVector2 storeValue;

		[Token(Token = "0x4002E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoxCollider2D boxCollider2D;

		[Token(Token = "0x4002E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600349B")]
		[Address(RVA = "0x132EE0C", Offset = "0x132EE0C", VA = "0x132EE0C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600349C")]
		[Address(RVA = "0x132EF10", Offset = "0x132EF10", VA = "0x132EF10", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600349D")]
		[Address(RVA = "0x132F004", Offset = "0x132F004", VA = "0x132F004", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600349E")]
		[Address(RVA = "0x132F070", Offset = "0x132F070", VA = "0x132F070")]
		public GetSize()
		{
		}
	}
	[Token(Token = "0x2000870")]
	[TaskDescription("Sets the size of the BoxCollider2D. Returns Success.")]
	[TaskCategory("Unity/BoxCollider2D")]
	public class SetSize : Action
	{
		[Token(Token = "0x4002E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The size of the BoxCollider2D")]
		public SharedVector2 size;

		[Token(Token = "0x4002E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoxCollider2D boxCollider2D;

		[Token(Token = "0x4002E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600349F")]
		[Address(RVA = "0x132F078", Offset = "0x132F078", VA = "0x132F078", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034A0")]
		[Address(RVA = "0x132F17C", Offset = "0x132F17C", VA = "0x132F17C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034A1")]
		[Address(RVA = "0x132F270", Offset = "0x132F270", VA = "0x132F270", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034A2")]
		[Address(RVA = "0x132F2DC", Offset = "0x132F2DC", VA = "0x132F2DC")]
		public SetSize()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityBoxCollider
{
	[Token(Token = "0x2000871")]
	[TaskCategory("Unity/BoxCollider")]
	[TaskDescription("Stores the center of the BoxCollider. Returns Success.")]
	public class GetCenter : Action
	{
		[Token(Token = "0x4002E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The center of the BoxCollider")]
		[RequiredField]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoxCollider boxCollider;

		[Token(Token = "0x4002E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034A3")]
		[Address(RVA = "0x132F2E4", Offset = "0x132F2E4", VA = "0x132F2E4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034A4")]
		[Address(RVA = "0x132F3E8", Offset = "0x132F3E8", VA = "0x132F3E8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034A5")]
		[Address(RVA = "0x132F4DC", Offset = "0x132F4DC", VA = "0x132F4DC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034A6")]
		[Address(RVA = "0x132F54C", Offset = "0x132F54C", VA = "0x132F54C")]
		public GetCenter()
		{
		}
	}
	[Token(Token = "0x2000872")]
	[TaskCategory("Unity/BoxCollider")]
	[TaskDescription("Stores the size of the BoxCollider. Returns Success.")]
	public class GetSize : Action
	{
		[Token(Token = "0x4002E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The size of the BoxCollider")]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoxCollider boxCollider;

		[Token(Token = "0x4002E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034A7")]
		[Address(RVA = "0x132F554", Offset = "0x132F554", VA = "0x132F554", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034A8")]
		[Address(RVA = "0x132F658", Offset = "0x132F658", VA = "0x132F658", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034A9")]
		[Address(RVA = "0x132F74C", Offset = "0x132F74C", VA = "0x132F74C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034AA")]
		[Address(RVA = "0x132F7BC", Offset = "0x132F7BC", VA = "0x132F7BC")]
		public GetSize()
		{
		}
	}
	[Token(Token = "0x2000873")]
	[TaskDescription("Sets the center of the BoxCollider. Returns Success.")]
	[TaskCategory("Unity/BoxCollider")]
	public class SetCenter : Action
	{
		[Token(Token = "0x4002E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The center of the BoxCollider")]
		public SharedVector3 center;

		[Token(Token = "0x4002E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoxCollider boxCollider;

		[Token(Token = "0x4002E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034AB")]
		[Address(RVA = "0x132F7C4", Offset = "0x132F7C4", VA = "0x132F7C4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034AC")]
		[Address(RVA = "0x132F8C8", Offset = "0x132F8C8", VA = "0x132F8C8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034AD")]
		[Address(RVA = "0x132F9BC", Offset = "0x132F9BC", VA = "0x132F9BC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034AE")]
		[Address(RVA = "0x132FA2C", Offset = "0x132FA2C", VA = "0x132FA2C")]
		public SetCenter()
		{
		}
	}
	[Token(Token = "0x2000874")]
	[TaskCategory("Unity/BoxCollider")]
	[TaskDescription("Sets the size of the BoxCollider. Returns Success.")]
	public class SetSize : Action
	{
		[Token(Token = "0x4002E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The size of the BoxCollider")]
		public SharedVector3 size;

		[Token(Token = "0x4002E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoxCollider boxCollider;

		[Token(Token = "0x4002E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034AF")]
		[Address(RVA = "0x132FA34", Offset = "0x132FA34", VA = "0x132FA34", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034B0")]
		[Address(RVA = "0x132FB38", Offset = "0x132FB38", VA = "0x132FB38", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034B1")]
		[Address(RVA = "0x132FC2C", Offset = "0x132FC2C", VA = "0x132FC2C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034B2")]
		[Address(RVA = "0x132FC9C", Offset = "0x132FC9C", VA = "0x132FC9C")]
		public SetSize()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityBehaviour
{
	[Token(Token = "0x2000875")]
	[TaskDescription("Stores the enabled state of the object. Returns Success.")]
	[TaskCategory("Unity/Behaviour")]
	public class GetEnabled : Action
	{
		[Token(Token = "0x4002E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Behavior to use")]
		public SharedBehaviour specifiedObject;

		[Token(Token = "0x4002E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The enabled/disabled state")]
		public SharedBool storeValue;

		[Token(Token = "0x60034B3")]
		[Address(RVA = "0x132FCA4", Offset = "0x132FCA4", VA = "0x132FCA4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034B4")]
		[Address(RVA = "0x132FD80", Offset = "0x132FD80", VA = "0x132FD80", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034B5")]
		[Address(RVA = "0x132FDF0", Offset = "0x132FDF0", VA = "0x132FDF0")]
		public GetEnabled()
		{
		}
	}
	[Token(Token = "0x2000876")]
	[TaskDescription("Returns Success if the object is enabled, otherwise Failure.")]
	[TaskCategory("Unity/Behaviour")]
	public class IsEnabled : Conditional
	{
		[Token(Token = "0x4002E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Object to use")]
		public SharedBehaviour specifiedObject;

		[Token(Token = "0x60034B6")]
		[Address(RVA = "0x132FDF8", Offset = "0x132FDF8", VA = "0x132FDF8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034B7")]
		[Address(RVA = "0x132FE7C", Offset = "0x132FE7C", VA = "0x132FE7C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034B8")]
		[Address(RVA = "0x132FED8", Offset = "0x132FED8", VA = "0x132FED8")]
		public IsEnabled()
		{
		}
	}
	[Token(Token = "0x2000877")]
	[TaskCategory("Unity/Behaviour")]
	[TaskDescription("Enables/Disables the object. Returns Success.")]
	public class SetEnabled : Action
	{
		[Token(Token = "0x4002E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Behavior to use")]
		public SharedBehaviour specifiedObject;

		[Token(Token = "0x4002E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The enabled/disabled state")]
		public SharedBool enabled;

		[Token(Token = "0x60034B9")]
		[Address(RVA = "0x132FEE0", Offset = "0x132FEE0", VA = "0x132FEE0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034BA")]
		[Address(RVA = "0x132FFC4", Offset = "0x132FFC4", VA = "0x132FFC4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034BB")]
		[Address(RVA = "0x1330034", Offset = "0x1330034", VA = "0x1330034")]
		public SetEnabled()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityAudioSource
{
	[Token(Token = "0x2000878")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Stores the ignore listener pause value of the AudioSource. Returns Success.")]
	public class GetIgnoreListenerPause : Action
	{
		[Token(Token = "0x4002E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The ignore listener pause value of the AudioSource")]
		public SharedBool storeValue;

		[Token(Token = "0x4002E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034BC")]
		[Address(RVA = "0x133003C", Offset = "0x133003C", VA = "0x133003C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034BD")]
		[Address(RVA = "0x1330140", Offset = "0x1330140", VA = "0x1330140", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034BE")]
		[Address(RVA = "0x1330238", Offset = "0x1330238", VA = "0x1330238", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034BF")]
		[Address(RVA = "0x133026C", Offset = "0x133026C", VA = "0x133026C")]
		public GetIgnoreListenerPause()
		{
		}
	}
	[Token(Token = "0x2000879")]
	[TaskDescription("Stores the ignore listener volume value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class GetIgnoreListenerVolume : Action
	{
		[Token(Token = "0x4002E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The ignore listener volume value of the AudioSource")]
		[RequiredField]
		public SharedBool storeValue;

		[Token(Token = "0x4002E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034C0")]
		[Address(RVA = "0x1330274", Offset = "0x1330274", VA = "0x1330274", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034C1")]
		[Address(RVA = "0x1330378", Offset = "0x1330378", VA = "0x1330378", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034C2")]
		[Address(RVA = "0x1330470", Offset = "0x1330470", VA = "0x1330470", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034C3")]
		[Address(RVA = "0x13304A4", Offset = "0x13304A4", VA = "0x13304A4")]
		public GetIgnoreListenerVolume()
		{
		}
	}
	[Token(Token = "0x200087A")]
	[TaskDescription("Stores the loop value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class GetLoop : Action
	{
		[Token(Token = "0x4002E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The loop value of the AudioSource")]
		[RequiredField]
		public SharedBool storeValue;

		[Token(Token = "0x4002E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034C4")]
		[Address(RVA = "0x13304AC", Offset = "0x13304AC", VA = "0x13304AC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034C5")]
		[Address(RVA = "0x13305B0", Offset = "0x13305B0", VA = "0x13305B0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034C6")]
		[Address(RVA = "0x13306A8", Offset = "0x13306A8", VA = "0x13306A8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034C7")]
		[Address(RVA = "0x13306DC", Offset = "0x13306DC", VA = "0x13306DC")]
		public GetLoop()
		{
		}
	}
	[Token(Token = "0x200087B")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Stores the max distance value of the AudioSource. Returns Success.")]
	public class GetMaxDistance : Action
	{
		[Token(Token = "0x4002E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The max distance value of the AudioSource")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034C8")]
		[Address(RVA = "0x13306E4", Offset = "0x13306E4", VA = "0x13306E4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034C9")]
		[Address(RVA = "0x13307E8", Offset = "0x13307E8", VA = "0x13307E8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034CA")]
		[Address(RVA = "0x13308DC", Offset = "0x13308DC", VA = "0x13308DC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034CB")]
		[Address(RVA = "0x1330910", Offset = "0x1330910", VA = "0x1330910")]
		public GetMaxDistance()
		{
		}
	}
	[Token(Token = "0x200087C")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Stores the min distance value of the AudioSource. Returns Success.")]
	public class GetMinDistance : Action
	{
		[Token(Token = "0x4002E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The min distance value of the AudioSource")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034CC")]
		[Address(RVA = "0x1330918", Offset = "0x1330918", VA = "0x1330918", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034CD")]
		[Address(RVA = "0x1330A1C", Offset = "0x1330A1C", VA = "0x1330A1C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034CE")]
		[Address(RVA = "0x1330B10", Offset = "0x1330B10", VA = "0x1330B10", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034CF")]
		[Address(RVA = "0x1330B44", Offset = "0x1330B44", VA = "0x1330B44")]
		public GetMinDistance()
		{
		}
	}
	[Token(Token = "0x200087D")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Stores the mute value of the AudioSource. Returns Success.")]
	public class GetMute : Action
	{
		[Token(Token = "0x4002E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The mute value of the AudioSource")]
		[RequiredField]
		public SharedBool storeValue;

		[Token(Token = "0x4002E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034D0")]
		[Address(RVA = "0x1330B4C", Offset = "0x1330B4C", VA = "0x1330B4C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034D1")]
		[Address(RVA = "0x1330C50", Offset = "0x1330C50", VA = "0x1330C50", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034D2")]
		[Address(RVA = "0x1330D48", Offset = "0x1330D48", VA = "0x1330D48", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034D3")]
		[Address(RVA = "0x1330D7C", Offset = "0x1330D7C", VA = "0x1330D7C")]
		public GetMute()
		{
		}
	}
	[Token(Token = "0x200087E")]
	[TaskDescription("Stores the pitch value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class GetPitch : Action
	{
		[Token(Token = "0x4002E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The pitch value of the AudioSource")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034D4")]
		[Address(RVA = "0x1330D84", Offset = "0x1330D84", VA = "0x1330D84", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034D5")]
		[Address(RVA = "0x1330E88", Offset = "0x1330E88", VA = "0x1330E88", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034D6")]
		[Address(RVA = "0x1330F7C", Offset = "0x1330F7C", VA = "0x1330F7C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034D7")]
		[Address(RVA = "0x1330FB0", Offset = "0x1330FB0", VA = "0x1330FB0")]
		public GetPitch()
		{
		}
	}
	[Token(Token = "0x200087F")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Stores the priority value of the AudioSource. Returns Success.")]
	public class GetPriority : Action
	{
		[Token(Token = "0x4002E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The priority value of the AudioSource")]
		[RequiredField]
		public SharedInt storeValue;

		[Token(Token = "0x4002E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034D8")]
		[Address(RVA = "0x1330FB8", Offset = "0x1330FB8", VA = "0x1330FB8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034D9")]
		[Address(RVA = "0x13310BC", Offset = "0x13310BC", VA = "0x13310BC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034DA")]
		[Address(RVA = "0x13311B4", Offset = "0x13311B4", VA = "0x13311B4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034DB")]
		[Address(RVA = "0x13311E8", Offset = "0x13311E8", VA = "0x13311E8")]
		public GetPriority()
		{
		}
	}
	[Token(Token = "0x2000880")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Stores the spread value of the AudioSource. Returns Success.")]
	public class GetSpread : Action
	{
		[Token(Token = "0x4002E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The spread value of the AudioSource")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034DC")]
		[Address(RVA = "0x13311F0", Offset = "0x13311F0", VA = "0x13311F0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034DD")]
		[Address(RVA = "0x13312F4", Offset = "0x13312F4", VA = "0x13312F4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034DE")]
		[Address(RVA = "0x13313E8", Offset = "0x13313E8", VA = "0x13313E8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034DF")]
		[Address(RVA = "0x133141C", Offset = "0x133141C", VA = "0x133141C")]
		public GetSpread()
		{
		}
	}
	[Token(Token = "0x2000881")]
	[TaskDescription("Stores the time value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class GetTime : Action
	{
		[Token(Token = "0x4002E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The time value of the AudioSource")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034E0")]
		[Address(RVA = "0x1331424", Offset = "0x1331424", VA = "0x1331424", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034E1")]
		[Address(RVA = "0x1331528", Offset = "0x1331528", VA = "0x1331528", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034E2")]
		[Address(RVA = "0x133161C", Offset = "0x133161C", VA = "0x133161C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034E3")]
		[Address(RVA = "0x1331650", Offset = "0x1331650", VA = "0x1331650")]
		public GetTime()
		{
		}
	}
	[Token(Token = "0x2000882")]
	[TaskDescription("Stores the time samples value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class GetTimeSamples : Action
	{
		[Token(Token = "0x4002E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The time samples value of the AudioSource")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034E4")]
		[Address(RVA = "0x1331658", Offset = "0x1331658", VA = "0x1331658", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034E5")]
		[Address(RVA = "0x133175C", Offset = "0x133175C", VA = "0x133175C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034E6")]
		[Address(RVA = "0x1331854", Offset = "0x1331854", VA = "0x1331854", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034E7")]
		[Address(RVA = "0x1331888", Offset = "0x1331888", VA = "0x1331888")]
		public GetTimeSamples()
		{
		}
	}
	[Token(Token = "0x2000883")]
	[TaskDescription("Stores the volume value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class GetVolume : Action
	{
		[Token(Token = "0x4002E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The volume value of the AudioSource")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034E8")]
		[Address(RVA = "0x1331890", Offset = "0x1331890", VA = "0x1331890", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034E9")]
		[Address(RVA = "0x1331994", Offset = "0x1331994", VA = "0x1331994", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034EA")]
		[Address(RVA = "0x1331A88", Offset = "0x1331A88", VA = "0x1331A88", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034EB")]
		[Address(RVA = "0x1331ABC", Offset = "0x1331ABC", VA = "0x1331ABC")]
		public GetVolume()
		{
		}
	}
	[Token(Token = "0x2000884")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Returns Success if the AudioClip is playing, otherwise Failure.")]
	public class IsPlaying : Conditional
	{
		[Token(Token = "0x4002E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034EC")]
		[Address(RVA = "0x1331AC4", Offset = "0x1331AC4", VA = "0x1331AC4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034ED")]
		[Address(RVA = "0x1331BC8", Offset = "0x1331BC8", VA = "0x1331BC8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034EE")]
		[Address(RVA = "0x1331C9C", Offset = "0x1331C9C", VA = "0x1331C9C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034EF")]
		[Address(RVA = "0x1331CA8", Offset = "0x1331CA8", VA = "0x1331CA8")]
		public IsPlaying()
		{
		}
	}
	[Token(Token = "0x2000885")]
	[TaskDescription("Pauses the audio clip. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class Pause : Action
	{
		[Token(Token = "0x4002E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034F0")]
		[Address(RVA = "0x1331CB0", Offset = "0x1331CB0", VA = "0x1331CB0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034F1")]
		[Address(RVA = "0x1331DB4", Offset = "0x1331DB4", VA = "0x1331DB4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034F2")]
		[Address(RVA = "0x1331E80", Offset = "0x1331E80", VA = "0x1331E80", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034F3")]
		[Address(RVA = "0x1331E8C", Offset = "0x1331E8C", VA = "0x1331E8C")]
		public Pause()
		{
		}
	}
	[Token(Token = "0x2000886")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Plays the audio clip. Returns Success.")]
	public class Play : Action
	{
		[Token(Token = "0x4002E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034F4")]
		[Address(RVA = "0x1331E94", Offset = "0x1331E94", VA = "0x1331E94", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034F5")]
		[Address(RVA = "0x1331F98", Offset = "0x1331F98", VA = "0x1331F98", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034F6")]
		[Address(RVA = "0x1332064", Offset = "0x1332064", VA = "0x1332064", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034F7")]
		[Address(RVA = "0x1332070", Offset = "0x1332070", VA = "0x1332070")]
		public Play()
		{
		}
	}
	[Token(Token = "0x2000887")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Plays the audio clip with a delay specified in seconds. Returns Success.")]
	public class PlayDelayed : Action
	{
		[Token(Token = "0x4002E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Delay time specified in seconds")]
		public SharedFloat delay;

		[Token(Token = "0x4002E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034F8")]
		[Address(RVA = "0x1332078", Offset = "0x1332078", VA = "0x1332078", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034F9")]
		[Address(RVA = "0x133217C", Offset = "0x133217C", VA = "0x133217C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034FA")]
		[Address(RVA = "0x1332270", Offset = "0x1332270", VA = "0x1332270", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034FB")]
		[Address(RVA = "0x13322A4", Offset = "0x13322A4", VA = "0x13322A4")]
		public PlayDelayed()
		{
		}
	}
	[Token(Token = "0x2000888")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Plays an AudioClip, and scales the AudioSource volume by volumeScale. Returns Success.")]
	public class PlayOneShot : Action
	{
		[Token(Token = "0x4002E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The clip being played")]
		public SharedObject clip;

		[Token(Token = "0x4002E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The scale of the volume (0-1)")]
		public SharedFloat volumeScale;

		[Token(Token = "0x4002E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x60034FC")]
		[Address(RVA = "0x13322D8", Offset = "0x13322D8", VA = "0x13322D8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60034FD")]
		[Address(RVA = "0x13323DC", Offset = "0x13323DC", VA = "0x13323DC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60034FE")]
		[Address(RVA = "0x1332530", Offset = "0x1332530", VA = "0x1332530", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60034FF")]
		[Address(RVA = "0x1332574", Offset = "0x1332574", VA = "0x1332574")]
		public PlayOneShot()
		{
		}
	}
	[Token(Token = "0x2000889")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Plays the audio clip with a delay specified in seconds. Returns Success.")]
	public class PlayScheduled : Action
	{
		[Token(Token = "0x4002E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Time in seconds on the absolute time-line that AudioSettings.dspTime refers to for when the sound should start playing")]
		public SharedFloat time;

		[Token(Token = "0x4002E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003500")]
		[Address(RVA = "0x13325A8", Offset = "0x13325A8", VA = "0x13325A8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003501")]
		[Address(RVA = "0x13326AC", Offset = "0x13326AC", VA = "0x13326AC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003502")]
		[Address(RVA = "0x13327A4", Offset = "0x13327A4", VA = "0x13327A4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003503")]
		[Address(RVA = "0x13327D8", Offset = "0x13327D8", VA = "0x13327D8")]
		public PlayScheduled()
		{
		}
	}
	[Token(Token = "0x200088A")]
	[TaskDescription("Sets the clip value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetAudioClip : Action
	{
		[Token(Token = "0x4002E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The AudioSource clip")]
		public AudioClip audioClip;

		[Token(Token = "0x4002E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003504")]
		[Address(RVA = "0x133280C", Offset = "0x133280C", VA = "0x133280C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003505")]
		[Address(RVA = "0x1332910", Offset = "0x1332910", VA = "0x1332910", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003506")]
		[Address(RVA = "0x13329E0", Offset = "0x13329E0", VA = "0x13329E0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003507")]
		[Address(RVA = "0x1332A08", Offset = "0x1332A08", VA = "0x1332A08")]
		public SetAudioClip()
		{
		}
	}
	[Token(Token = "0x200088B")]
	[TaskDescription("Sets the ignore listener volume value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetIgnoreListenerVolume : Action
	{
		[Token(Token = "0x4002E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The ignore listener volume value of the AudioSource")]
		public SharedBool ignoreListenerVolume;

		[Token(Token = "0x4002E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003508")]
		[Address(RVA = "0x1332A10", Offset = "0x1332A10", VA = "0x1332A10", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003509")]
		[Address(RVA = "0x1332B14", Offset = "0x1332B14", VA = "0x1332B14", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600350A")]
		[Address(RVA = "0x1332C0C", Offset = "0x1332C0C", VA = "0x1332C0C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600350B")]
		[Address(RVA = "0x1332C40", Offset = "0x1332C40", VA = "0x1332C40")]
		public SetIgnoreListenerVolume()
		{
		}
	}
	[Token(Token = "0x200088C")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Sets the ignore listener pause value of the AudioSource. Returns Success.")]
	public class SetIgnoreListenerPause : Action
	{
		[Token(Token = "0x4002E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The ignore listener pause value of the AudioSource")]
		public SharedBool ignoreListenerPause;

		[Token(Token = "0x4002E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600350C")]
		[Address(RVA = "0x1332C48", Offset = "0x1332C48", VA = "0x1332C48", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600350D")]
		[Address(RVA = "0x1332D4C", Offset = "0x1332D4C", VA = "0x1332D4C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600350E")]
		[Address(RVA = "0x1332E44", Offset = "0x1332E44", VA = "0x1332E44", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600350F")]
		[Address(RVA = "0x1332E78", Offset = "0x1332E78", VA = "0x1332E78")]
		public SetIgnoreListenerPause()
		{
		}
	}
	[Token(Token = "0x200088D")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Sets the loop value of the AudioSource. Returns Success.")]
	public class SetLoop : Action
	{
		[Token(Token = "0x4002EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The loop value of the AudioSource")]
		public SharedBool loop;

		[Token(Token = "0x4002EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003510")]
		[Address(RVA = "0x1332E80", Offset = "0x1332E80", VA = "0x1332E80", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003511")]
		[Address(RVA = "0x1332F84", Offset = "0x1332F84", VA = "0x1332F84", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003512")]
		[Address(RVA = "0x133307C", Offset = "0x133307C", VA = "0x133307C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003513")]
		[Address(RVA = "0x13330B0", Offset = "0x13330B0", VA = "0x13330B0")]
		public SetLoop()
		{
		}
	}
	[Token(Token = "0x200088E")]
	[TaskDescription("Sets the max distance value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetMaxDistance : Action
	{
		[Token(Token = "0x4002EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The max distance value of the AudioSource")]
		public SharedFloat maxDistance;

		[Token(Token = "0x4002EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003514")]
		[Address(RVA = "0x13330B8", Offset = "0x13330B8", VA = "0x13330B8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003515")]
		[Address(RVA = "0x13331BC", Offset = "0x13331BC", VA = "0x13331BC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003516")]
		[Address(RVA = "0x13332B0", Offset = "0x13332B0", VA = "0x13332B0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003517")]
		[Address(RVA = "0x13332E4", Offset = "0x13332E4", VA = "0x13332E4")]
		public SetMaxDistance()
		{
		}
	}
	[Token(Token = "0x200088F")]
	[TaskDescription("Sets the min distance value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetMinDistance : Action
	{
		[Token(Token = "0x4002EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The min distance value of the AudioSource")]
		public SharedFloat minDistance;

		[Token(Token = "0x4002EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003518")]
		[Address(RVA = "0x13332EC", Offset = "0x13332EC", VA = "0x13332EC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003519")]
		[Address(RVA = "0x13333F0", Offset = "0x13333F0", VA = "0x13333F0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600351A")]
		[Address(RVA = "0x13334E4", Offset = "0x13334E4", VA = "0x13334E4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600351B")]
		[Address(RVA = "0x1333518", Offset = "0x1333518", VA = "0x1333518")]
		public SetMinDistance()
		{
		}
	}
	[Token(Token = "0x2000890")]
	[TaskDescription("Sets the mute value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetMute : Action
	{
		[Token(Token = "0x4002EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The mute value of the AudioSource")]
		public SharedBool mute;

		[Token(Token = "0x4002EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600351C")]
		[Address(RVA = "0x1333520", Offset = "0x1333520", VA = "0x1333520", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600351D")]
		[Address(RVA = "0x1333624", Offset = "0x1333624", VA = "0x1333624", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600351E")]
		[Address(RVA = "0x133371C", Offset = "0x133371C", VA = "0x133371C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600351F")]
		[Address(RVA = "0x1333750", Offset = "0x1333750", VA = "0x1333750")]
		public SetMute()
		{
		}
	}
	[Token(Token = "0x2000891")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Sets the pitch value of the AudioSource. Returns Success.")]
	public class SetPitch : Action
	{
		[Token(Token = "0x4002EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The pitch value of the AudioSource")]
		public SharedFloat pitch;

		[Token(Token = "0x4002EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003520")]
		[Address(RVA = "0x1333758", Offset = "0x1333758", VA = "0x1333758", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003521")]
		[Address(RVA = "0x133385C", Offset = "0x133385C", VA = "0x133385C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003522")]
		[Address(RVA = "0x1333950", Offset = "0x1333950", VA = "0x1333950", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003523")]
		[Address(RVA = "0x1333984", Offset = "0x1333984", VA = "0x1333984")]
		public SetPitch()
		{
		}
	}
	[Token(Token = "0x2000892")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Sets the priority value of the AudioSource. Returns Success.")]
	public class SetPriority : Action
	{
		[Token(Token = "0x4002EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The priority value of the AudioSource")]
		public SharedInt priority;

		[Token(Token = "0x4002EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003524")]
		[Address(RVA = "0x133398C", Offset = "0x133398C", VA = "0x133398C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003525")]
		[Address(RVA = "0x1333A90", Offset = "0x1333A90", VA = "0x1333A90", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003526")]
		[Address(RVA = "0x1333B88", Offset = "0x1333B88", VA = "0x1333B88", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003527")]
		[Address(RVA = "0x1333BBC", Offset = "0x1333BBC", VA = "0x1333BBC")]
		public SetPriority()
		{
		}
	}
	[Token(Token = "0x2000893")]
	[TaskDescription("Sets the rolloff mode of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetRolloffMode : Action
	{
		[Token(Token = "0x4002EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rolloff mode of the AudioSource")]
		public AudioRolloffMode rolloffMode;

		[Token(Token = "0x4002EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003528")]
		[Address(RVA = "0x1333BC4", Offset = "0x1333BC4", VA = "0x1333BC4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003529")]
		[Address(RVA = "0x1333CC8", Offset = "0x1333CC8", VA = "0x1333CC8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600352A")]
		[Address(RVA = "0x1333D98", Offset = "0x1333D98", VA = "0x1333D98", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600352B")]
		[Address(RVA = "0x1333DBC", Offset = "0x1333DBC", VA = "0x1333DBC")]
		public SetRolloffMode()
		{
		}
	}
	[Token(Token = "0x2000894")]
	[TaskDescription("Changes the time at which a sound that has already been scheduled to play will end. Notice that depending on the timing not all rescheduling requests can be fulfilled. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetScheduledEndTime : Action
	{
		[Token(Token = "0x4002EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Time in seconds")]
		public SharedFloat time;

		[Token(Token = "0x4002EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600352C")]
		[Address(RVA = "0x1333DC4", Offset = "0x1333DC4", VA = "0x1333DC4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600352D")]
		[Address(RVA = "0x1333EC8", Offset = "0x1333EC8", VA = "0x1333EC8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600352E")]
		[Address(RVA = "0x1333FC0", Offset = "0x1333FC0", VA = "0x1333FC0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600352F")]
		[Address(RVA = "0x1333FF4", Offset = "0x1333FF4", VA = "0x1333FF4")]
		public SetScheduledEndTime()
		{
		}
	}
	[Token(Token = "0x2000895")]
	[TaskDescription("Changes the time at which a sound that has already been scheduled to play will start. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetScheduledStartTime : Action
	{
		[Token(Token = "0x4002EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Time in seconds")]
		public SharedFloat time;

		[Token(Token = "0x4002EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003530")]
		[Address(RVA = "0x1334028", Offset = "0x1334028", VA = "0x1334028", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003531")]
		[Address(RVA = "0x133412C", Offset = "0x133412C", VA = "0x133412C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003532")]
		[Address(RVA = "0x1334224", Offset = "0x1334224", VA = "0x1334224", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003533")]
		[Address(RVA = "0x1334258", Offset = "0x1334258", VA = "0x1334258")]
		public SetScheduledStartTime()
		{
		}
	}
	[Token(Token = "0x2000896")]
	[TaskDescription("Sets the spread value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetSpread : Action
	{
		[Token(Token = "0x4002EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The spread value of the AudioSource")]
		public SharedFloat spread;

		[Token(Token = "0x4002EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003534")]
		[Address(RVA = "0x133428C", Offset = "0x133428C", VA = "0x133428C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003535")]
		[Address(RVA = "0x1334390", Offset = "0x1334390", VA = "0x1334390", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003536")]
		[Address(RVA = "0x1334484", Offset = "0x1334484", VA = "0x1334484", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003537")]
		[Address(RVA = "0x13344B8", Offset = "0x13344B8", VA = "0x13344B8")]
		public SetSpread()
		{
		}
	}
	[Token(Token = "0x2000897")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Sets the time value of the AudioSource. Returns Success.")]
	public class SetTime : Action
	{
		[Token(Token = "0x4002EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The time value of the AudioSource")]
		public SharedFloat time;

		[Token(Token = "0x4002ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003538")]
		[Address(RVA = "0x13344C0", Offset = "0x13344C0", VA = "0x13344C0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003539")]
		[Address(RVA = "0x13345C4", Offset = "0x13345C4", VA = "0x13345C4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600353A")]
		[Address(RVA = "0x13346B8", Offset = "0x13346B8", VA = "0x13346B8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600353B")]
		[Address(RVA = "0x13346EC", Offset = "0x13346EC", VA = "0x13346EC")]
		public SetTime()
		{
		}
	}
	[Token(Token = "0x2000898")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Sets the rolloff mode of the AudioSource. Returns Success.")]
	public class SetVelocityUpdateMode : Action
	{
		[Token(Token = "0x4002ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The velocity update mode of the AudioSource")]
		public AudioVelocityUpdateMode velocityUpdateMode;

		[Token(Token = "0x4002ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600353C")]
		[Address(RVA = "0x13346F4", Offset = "0x13346F4", VA = "0x13346F4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600353D")]
		[Address(RVA = "0x13347F8", Offset = "0x13347F8", VA = "0x13347F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600353E")]
		[Address(RVA = "0x13348C8", Offset = "0x13348C8", VA = "0x13348C8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600353F")]
		[Address(RVA = "0x13348EC", Offset = "0x13348EC", VA = "0x13348EC")]
		public SetVelocityUpdateMode()
		{
		}
	}
	[Token(Token = "0x2000899")]
	[TaskDescription("Sets the volume value of the AudioSource. Returns Success.")]
	[TaskCategory("Unity/AudioSource")]
	public class SetVolume : Action
	{
		[Token(Token = "0x4002ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The volume value of the AudioSource")]
		public SharedFloat volume;

		[Token(Token = "0x4002ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x4002ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003540")]
		[Address(RVA = "0x13348F4", Offset = "0x13348F4", VA = "0x13348F4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003541")]
		[Address(RVA = "0x13349F8", Offset = "0x13349F8", VA = "0x13349F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003542")]
		[Address(RVA = "0x1334AEC", Offset = "0x1334AEC", VA = "0x1334AEC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003543")]
		[Address(RVA = "0x1334B20", Offset = "0x1334B20", VA = "0x1334B20")]
		public SetVolume()
		{
		}
	}
	[Token(Token = "0x200089A")]
	[TaskCategory("Unity/AudioSource")]
	[TaskDescription("Stops playing the audio clip. Returns Success.")]
	public class Stop : Action
	{
		[Token(Token = "0x4002ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x4002ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003544")]
		[Address(RVA = "0x1334B28", Offset = "0x1334B28", VA = "0x1334B28", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003545")]
		[Address(RVA = "0x1334C2C", Offset = "0x1334C2C", VA = "0x1334C2C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003546")]
		[Address(RVA = "0x1334CF8", Offset = "0x1334CF8", VA = "0x1334CF8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003547")]
		[Address(RVA = "0x1334D04", Offset = "0x1334D04", VA = "0x1334D04")]
		public Stop()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityAnimator
{
	[Token(Token = "0x200089B")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Creates a dynamic transition between the current state and the destination state. Returns Success.")]
	public class CrossFade : Action
	{
		[Token(Token = "0x4002ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the state")]
		public SharedString stateName;

		[Token(Token = "0x4002ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The duration of the transition. Value is in source state normalized time")]
		public SharedFloat transitionDuration;

		[Token(Token = "0x4002EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The layer where the state is")]
		public int layer;

		[Token(Token = "0x4002EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("The normalized time at which the state will play")]
		public float normalizedTime;

		[Token(Token = "0x4002EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator animator;

		[Token(Token = "0x4002EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003548")]
		[Address(RVA = "0x1334D0C", Offset = "0x1334D0C", VA = "0x1334D0C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003549")]
		[Address(RVA = "0x1334E10", Offset = "0x1334E10", VA = "0x1334E10", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600354A")]
		[Address(RVA = "0x1334F3C", Offset = "0x1334F3C", VA = "0x1334F3C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600354B")]
		[Address(RVA = "0x1334FCC", Offset = "0x1334FCC", VA = "0x1334FCC")]
		public CrossFade()
		{
		}
	}
	[Token(Token = "0x200089C")]
	[TaskDescription("Stores if root motion is applied. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class GetApplyRootMotion : Action
	{
		[Token(Token = "0x4002EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Is root motion applied?")]
		[RequiredField]
		public SharedBool storeValue;

		[Token(Token = "0x4002EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600354C")]
		[Address(RVA = "0x1334FDC", Offset = "0x1334FDC", VA = "0x1334FDC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600354D")]
		[Address(RVA = "0x13350E0", Offset = "0x13350E0", VA = "0x13350E0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600354E")]
		[Address(RVA = "0x13351D8", Offset = "0x13351D8", VA = "0x13351D8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600354F")]
		[Address(RVA = "0x133520C", Offset = "0x133520C", VA = "0x133520C")]
		public GetApplyRootMotion()
		{
		}
	}
	[Token(Token = "0x200089D")]
	[TaskDescription("Stores the bool parameter on an animator. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class GetBoolParameter : Action
	{
		[Token(Token = "0x4002EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the parameter")]
		public SharedString paramaterName;

		[Token(Token = "0x4002EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value of the bool parameter")]
		public SharedBool storeValue;

		[Token(Token = "0x4002EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003550")]
		[Address(RVA = "0x1335214", Offset = "0x1335214", VA = "0x1335214", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003551")]
		[Address(RVA = "0x1335318", Offset = "0x1335318", VA = "0x1335318", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003552")]
		[Address(RVA = "0x1335438", Offset = "0x1335438", VA = "0x1335438", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003553")]
		[Address(RVA = "0x13354BC", Offset = "0x13354BC", VA = "0x13354BC")]
		public GetBoolParameter()
		{
		}
	}
	[Token(Token = "0x200089E")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Gets the avatar delta position for the last evaluated frame. Returns Success.")]
	public class GetDeltaPosition : Action
	{
		[Token(Token = "0x4002EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The avatar delta position")]
		public SharedVector3 storeValue;

		[Token(Token = "0x4002EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003554")]
		[Address(RVA = "0x13354C4", Offset = "0x13354C4", VA = "0x13354C4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003555")]
		[Address(RVA = "0x13355C8", Offset = "0x13355C8", VA = "0x13355C8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003556")]
		[Address(RVA = "0x13356BC", Offset = "0x13356BC", VA = "0x13356BC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003557")]
		[Address(RVA = "0x133572C", Offset = "0x133572C", VA = "0x133572C")]
		public GetDeltaPosition()
		{
		}
	}
	[Token(Token = "0x200089F")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Gets the avatar delta rotation for the last evaluated frame. Returns Success.")]
	public class GetDeltaRotation : Action
	{
		[Token(Token = "0x4002EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The avatar delta rotation")]
		public SharedQuaternion storeValue;

		[Token(Token = "0x4002EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003558")]
		[Address(RVA = "0x1335734", Offset = "0x1335734", VA = "0x1335734", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003559")]
		[Address(RVA = "0x1335838", Offset = "0x1335838", VA = "0x1335838", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600355A")]
		[Address(RVA = "0x133592C", Offset = "0x133592C", VA = "0x133592C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600355B")]
		[Address(RVA = "0x13359C0", Offset = "0x13359C0", VA = "0x13359C0")]
		public GetDeltaRotation()
		{
		}
	}
	[Token(Token = "0x20008A0")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Stores the float parameter on an animator. Returns Success.")]
	public class GetFloatParameter : Action
	{
		[Token(Token = "0x4002EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the parameter")]
		public SharedString paramaterName;

		[Token(Token = "0x4002EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value of the float parameter")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x600355C")]
		[Address(RVA = "0x13359C8", Offset = "0x13359C8", VA = "0x13359C8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600355D")]
		[Address(RVA = "0x1335ACC", Offset = "0x1335ACC", VA = "0x1335ACC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600355E")]
		[Address(RVA = "0x1335BE8", Offset = "0x1335BE8", VA = "0x1335BE8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600355F")]
		[Address(RVA = "0x1335C6C", Offset = "0x1335C6C", VA = "0x1335C6C")]
		public GetFloatParameter()
		{
		}
	}
	[Token(Token = "0x20008A1")]
	[TaskDescription("Stores the current gravity weight based on current animations that are played. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class GetGravityWeight : Action
	{
		[Token(Token = "0x4002EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The value of the gravity weight")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003560")]
		[Address(RVA = "0x1335C74", Offset = "0x1335C74", VA = "0x1335C74", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003561")]
		[Address(RVA = "0x1335D78", Offset = "0x1335D78", VA = "0x1335D78", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003562")]
		[Address(RVA = "0x1335E6C", Offset = "0x1335E6C", VA = "0x1335E6C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003563")]
		[Address(RVA = "0x1335EA0", Offset = "0x1335EA0", VA = "0x1335EA0")]
		public GetGravityWeight()
		{
		}
	}
	[Token(Token = "0x20008A2")]
	[TaskDescription("Stores the integer parameter on an animator. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class GetIntegerParameter : Action
	{
		[Token(Token = "0x4002EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the parameter")]
		public SharedString paramaterName;

		[Token(Token = "0x4002EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The value of the integer parameter")]
		[RequiredField]
		public SharedInt storeValue;

		[Token(Token = "0x4002EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003564")]
		[Address(RVA = "0x1335EA8", Offset = "0x1335EA8", VA = "0x1335EA8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003565")]
		[Address(RVA = "0x1335FAC", Offset = "0x1335FAC", VA = "0x1335FAC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003566")]
		[Address(RVA = "0x13360CC", Offset = "0x13360CC", VA = "0x13360CC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003567")]
		[Address(RVA = "0x1336150", Offset = "0x1336150", VA = "0x1336150")]
		public GetIntegerParameter()
		{
		}
	}
	[Token(Token = "0x20008A3")]
	[TaskDescription("Stores the layer's weight. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class GetLayerWeight : Action
	{
		[Token(Token = "0x4002EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index of the layer")]
		public SharedInt index;

		[Token(Token = "0x4002EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value of the float parameter")]
		public SharedFloat storeValue;

		[Token(Token = "0x4002F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003568")]
		[Address(RVA = "0x1336158", Offset = "0x1336158", VA = "0x1336158", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003569")]
		[Address(RVA = "0x133625C", Offset = "0x133625C", VA = "0x133625C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600356A")]
		[Address(RVA = "0x1336378", Offset = "0x1336378", VA = "0x1336378", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600356B")]
		[Address(RVA = "0x13363C8", Offset = "0x13363C8", VA = "0x13363C8")]
		public GetLayerWeight()
		{
		}
	}
	[Token(Token = "0x20008A4")]
	[TaskDescription("Stores the playback speed of the animator. 1 is normal playback speed. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class GetSpeed : Action
	{
		[Token(Token = "0x4002F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The playback speed of the Animator")]
		[RequiredField]
		public SharedFloat storeValue;

		[Token(Token = "0x4002F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600356C")]
		[Address(RVA = "0x13363D0", Offset = "0x13363D0", VA = "0x13363D0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600356D")]
		[Address(RVA = "0x13364D4", Offset = "0x13364D4", VA = "0x13364D4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600356E")]
		[Address(RVA = "0x13365C8", Offset = "0x13365C8", VA = "0x13365C8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600356F")]
		[Address(RVA = "0x13365FC", Offset = "0x13365FC", VA = "0x13365FC")]
		public GetSpeed()
		{
		}
	}
	[Token(Token = "0x20008A5")]
	[TaskDescription("Converts the state name to its corresponding hash code. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class GetStringToHash : Action
	{
		[Token(Token = "0x4002F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the state to convert to a hash code")]
		public SharedString stateName;

		[Token(Token = "0x4002F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The hash value")]
		public SharedInt storeValue;

		[Token(Token = "0x6003570")]
		[Address(RVA = "0x1336604", Offset = "0x1336604", VA = "0x1336604", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003571")]
		[Address(RVA = "0x1336690", Offset = "0x1336690", VA = "0x1336690", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003572")]
		[Address(RVA = "0x1336704", Offset = "0x1336704", VA = "0x1336704")]
		public GetStringToHash()
		{
		}
	}
	[Token(Token = "0x20008A6")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Interrupts the automatic target matching. Returns Success.")]
	public class InterruptMatchTarget : Action
	{
		[Token(Token = "0x4002F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("CompleteMatch will make the gameobject match the target completely at the next frame")]
		public bool completeMatch;

		[Token(Token = "0x4002F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003573")]
		[Address(RVA = "0x133670C", Offset = "0x133670C", VA = "0x133670C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003574")]
		[Address(RVA = "0x1336810", Offset = "0x1336810", VA = "0x1336810", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003575")]
		[Address(RVA = "0x13368E0", Offset = "0x13368E0", VA = "0x13368E0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003576")]
		[Address(RVA = "0x1336908", Offset = "0x1336908", VA = "0x1336908")]
		public InterruptMatchTarget()
		{
		}
	}
	[Token(Token = "0x20008A7")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Returns success if the specified AnimatorController layer in a transition.")]
	public class IsInTransition : Conditional
	{
		[Token(Token = "0x4002F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layer's index")]
		public SharedInt index;

		[Token(Token = "0x4002F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003577")]
		[Address(RVA = "0x1336918", Offset = "0x1336918", VA = "0x1336918", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003578")]
		[Address(RVA = "0x1336A1C", Offset = "0x1336A1C", VA = "0x1336A1C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003579")]
		[Address(RVA = "0x1336B1C", Offset = "0x1336B1C", VA = "0x1336B1C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600357A")]
		[Address(RVA = "0x1336B50", Offset = "0x1336B50", VA = "0x1336B50")]
		public IsInTransition()
		{
		}
	}
	[Token(Token = "0x20008A8")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Returns success if the specified name matches the name of the active state.")]
	public class IsName : Conditional
	{
		[Token(Token = "0x4002F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layer's index")]
		public SharedInt index;

		[Token(Token = "0x4002F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The state name to compare")]
		public SharedString name;

		[Token(Token = "0x4002F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x600357B")]
		[Address(RVA = "0x1336B58", Offset = "0x1336B58", VA = "0x1336B58", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600357C")]
		[Address(RVA = "0x1336C5C", Offset = "0x1336C5C", VA = "0x1336C5C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600357D")]
		[Address(RVA = "0x1336DBC", Offset = "0x1336DBC", VA = "0x1336DBC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600357E")]
		[Address(RVA = "0x1336E40", Offset = "0x1336E40", VA = "0x1336E40")]
		public IsName()
		{
		}
	}
	[Token(Token = "0x20008A9")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Returns success if the specified parameter is controlled by an additional curve on an animation.")]
	public class IsParameterControlledByCurve : Conditional
	{
		[Token(Token = "0x4002F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the parameter")]
		public SharedString paramaterName;

		[Token(Token = "0x4002F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600357F")]
		[Address(RVA = "0x1336E48", Offset = "0x1336E48", VA = "0x1336E48", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003580")]
		[Address(RVA = "0x1336F4C", Offset = "0x1336F4C", VA = "0x1336F4C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003581")]
		[Address(RVA = "0x133704C", Offset = "0x133704C", VA = "0x133704C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003582")]
		[Address(RVA = "0x13370B4", Offset = "0x13370B4", VA = "0x13370B4")]
		public IsParameterControlledByCurve()
		{
		}
	}
	[Token(Token = "0x20008AA")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Automatically adjust the gameobject position and rotation so that the AvatarTarget reaches the matchPosition when the current state is at the specified progress. Returns Success.")]
	public class MatchTarget : Action
	{
		[Token(Token = "0x4002F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position we want the body part to reach")]
		public SharedVector3 matchPosition;

		[Token(Token = "0x4002F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The rotation in which we want the body part to be")]
		public SharedQuaternion matchRotation;

		[Token(Token = "0x4002F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The body part that is involved in the match")]
		public AvatarTarget targetBodyPart;

		[Token(Token = "0x4002F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Weights for matching position")]
		public Vector3 weightMaskPosition;

		[Token(Token = "0x4002F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Weights for matching rotation")]
		public float weightMaskRotation;

		[Token(Token = "0x4002F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Start time within the animation clip")]
		public float startNormalizedTime;

		[Token(Token = "0x4002F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("End time within the animation clip")]
		public float targetNormalizedTime;

		[Token(Token = "0x4002F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator animator;

		[Token(Token = "0x4002F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003583")]
		[Address(RVA = "0x13370BC", Offset = "0x13370BC", VA = "0x13370BC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003584")]
		[Address(RVA = "0x13371C0", Offset = "0x13371C0", VA = "0x13371C0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003585")]
		[Address(RVA = "0x1337378", Offset = "0x1337378", VA = "0x1337378", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003586")]
		[Address(RVA = "0x133748C", Offset = "0x133748C", VA = "0x133748C")]
		public MatchTarget()
		{
		}
	}
	[Token(Token = "0x20008AB")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Plays an animator state. Returns Success.")]
	public class Play : Action
	{
		[Token(Token = "0x4002F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the state")]
		public SharedString stateName;

		[Token(Token = "0x4002F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The layer where the state is")]
		public int layer;

		[Token(Token = "0x4002F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The normalized time at which the state will play")]
		public float normalizedTime;

		[Token(Token = "0x4002F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003587")]
		[Address(RVA = "0x133749C", Offset = "0x133749C", VA = "0x133749C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003588")]
		[Address(RVA = "0x13375A0", Offset = "0x13375A0", VA = "0x13375A0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003589")]
		[Address(RVA = "0x13376A0", Offset = "0x13376A0", VA = "0x13376A0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600358A")]
		[Address(RVA = "0x1337714", Offset = "0x1337714", VA = "0x1337714")]
		public Play()
		{
		}
	}
	[Token(Token = "0x20008AC")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Sets if root motion is applied. Returns Success.")]
	public class SetApplyRootMotion : Action
	{
		[Token(Token = "0x4002F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Is root motion applied?")]
		public SharedBool rootMotion;

		[Token(Token = "0x4002F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600358B")]
		[Address(RVA = "0x1337724", Offset = "0x1337724", VA = "0x1337724", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600358C")]
		[Address(RVA = "0x1337828", Offset = "0x1337828", VA = "0x1337828", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600358D")]
		[Address(RVA = "0x1337920", Offset = "0x1337920", VA = "0x1337920", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600358E")]
		[Address(RVA = "0x1337954", Offset = "0x1337954", VA = "0x1337954")]
		public SetApplyRootMotion()
		{
		}
	}
	[Token(Token = "0x20008AD")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Sets the bool parameter on an animator. Returns Success.")]
	public class SetBoolParameter : Action
	{
		[Token(Token = "0x20008AE")]
		[CompilerGenerated]
		private sealed class <ResetValue>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SetBoolParameter <>4__this;

			[Token(Token = "0x4002F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool origVale;

			[Token(Token = "0x17000519")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003597")]
				[Address(RVA = "0x1337D74", Offset = "0x1337D74", VA = "0x1337D74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700051A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003599")]
				[Address(RVA = "0x1337DBC", Offset = "0x1337DBC", VA = "0x1337DBC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003594")]
			[Address(RVA = "0x1337C48", Offset = "0x1337C48", VA = "0x1337C48")]
			[DebuggerHidden]
			public <ResetValue>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6003595")]
			[Address(RVA = "0x1337CFC", Offset = "0x1337CFC", VA = "0x1337CFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003596")]
			[Address(RVA = "0x1337D00", Offset = "0x1337D00", VA = "0x1337D00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003598")]
			[Address(RVA = "0x1337D7C", Offset = "0x1337D7C", VA = "0x1337D7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the parameter")]
		public SharedString paramaterName;

		[Token(Token = "0x4002F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The value of the bool parameter")]
		public SharedBool boolValue;

		[Token(Token = "0x4002F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Should the value be reverted back to its original value after it has been set?")]
		public bool setOnce;

		[Token(Token = "0x4002F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int hashID;

		[Token(Token = "0x4002F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator animator;

		[Token(Token = "0x4002F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject prevGameObject;

		[Token(Token = "0x600358F")]
		[Address(RVA = "0x133795C", Offset = "0x133795C", VA = "0x133795C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003590")]
		[Address(RVA = "0x1337A88", Offset = "0x1337A88", VA = "0x1337A88", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003591")]
		[Address(RVA = "0x1337BC0", Offset = "0x1337BC0", VA = "0x1337BC0")]
		[IteratorStateMachine(typeof(<ResetValue>d__9))]
		public IEnumerator ResetValue(bool origVale)
		{
			return null;
		}

		[Token(Token = "0x6003592")]
		[Address(RVA = "0x1337C70", Offset = "0x1337C70", VA = "0x1337C70", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003593")]
		[Address(RVA = "0x1337CF4", Offset = "0x1337CF4", VA = "0x1337CF4")]
		public SetBoolParameter()
		{
		}
	}
	[Token(Token = "0x20008AF")]
	[TaskDescription("Sets the float parameter on an animator. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class SetFloatParameter : Action
	{
		[Token(Token = "0x20008B0")]
		[CompilerGenerated]
		private sealed class <ResetValue>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002F3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002F40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SetFloatParameter <>4__this;

			[Token(Token = "0x4002F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float origVale;

			[Token(Token = "0x1700051B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60035A2")]
				[Address(RVA = "0x13381EC", Offset = "0x13381EC", VA = "0x13381EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700051C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60035A4")]
				[Address(RVA = "0x1338234", Offset = "0x1338234", VA = "0x1338234", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600359F")]
			[Address(RVA = "0x13380C0", Offset = "0x13380C0", VA = "0x13380C0")]
			[DebuggerHidden]
			public <ResetValue>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60035A0")]
			[Address(RVA = "0x1338174", Offset = "0x1338174", VA = "0x1338174", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60035A1")]
			[Address(RVA = "0x1338178", Offset = "0x1338178", VA = "0x1338178", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60035A3")]
			[Address(RVA = "0x13381F4", Offset = "0x13381F4", VA = "0x13381F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the parameter")]
		public SharedString paramaterName;

		[Token(Token = "0x4002F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The value of the float parameter")]
		public SharedFloat floatValue;

		[Token(Token = "0x4002F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Should the value be reverted back to its original value after it has been set?")]
		public bool setOnce;

		[Token(Token = "0x4002F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int hashID;

		[Token(Token = "0x4002F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator animator;

		[Token(Token = "0x4002F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject prevGameObject;

		[Token(Token = "0x600359A")]
		[Address(RVA = "0x1337DC4", Offset = "0x1337DC4", VA = "0x1337DC4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600359B")]
		[Address(RVA = "0x1337EC8", Offset = "0x1337EC8", VA = "0x1337EC8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600359C")]
		[Address(RVA = "0x133803C", Offset = "0x133803C", VA = "0x133803C")]
		[IteratorStateMachine(typeof(<ResetValue>d__9))]
		public IEnumerator ResetValue(float origVale)
		{
			return null;
		}

		[Token(Token = "0x600359D")]
		[Address(RVA = "0x13380E8", Offset = "0x13380E8", VA = "0x13380E8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600359E")]
		[Address(RVA = "0x133816C", Offset = "0x133816C", VA = "0x133816C")]
		public SetFloatParameter()
		{
		}
	}
	[Token(Token = "0x20008B1")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Sets the int parameter on an animator. Returns Success.")]
	public class SetIntegerParameter : Action
	{
		[Token(Token = "0x20008B2")]
		[CompilerGenerated]
		private sealed class <ResetValue>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SetIntegerParameter <>4__this;

			[Token(Token = "0x4002F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int origVale;

			[Token(Token = "0x1700051D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60035AD")]
				[Address(RVA = "0x133866C", Offset = "0x133866C", VA = "0x133866C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700051E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60035AF")]
				[Address(RVA = "0x13386B4", Offset = "0x13386B4", VA = "0x13386B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60035AA")]
			[Address(RVA = "0x1338540", Offset = "0x1338540", VA = "0x1338540")]
			[DebuggerHidden]
			public <ResetValue>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60035AB")]
			[Address(RVA = "0x13385F4", Offset = "0x13385F4", VA = "0x13385F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60035AC")]
			[Address(RVA = "0x13385F8", Offset = "0x13385F8", VA = "0x13385F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60035AE")]
			[Address(RVA = "0x1338674", Offset = "0x1338674", VA = "0x1338674", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the parameter")]
		public SharedString paramaterName;

		[Token(Token = "0x4002F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The value of the int parameter")]
		public SharedInt intValue;

		[Token(Token = "0x4002F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Should the value be reverted back to its original value after it has been set?")]
		public bool setOnce;

		[Token(Token = "0x4002F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int hashID;

		[Token(Token = "0x4002F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator animator;

		[Token(Token = "0x4002F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035A5")]
		[Address(RVA = "0x133823C", Offset = "0x133823C", VA = "0x133823C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035A6")]
		[Address(RVA = "0x1338340", Offset = "0x1338340", VA = "0x1338340", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035A7")]
		[Address(RVA = "0x13384BC", Offset = "0x13384BC", VA = "0x13384BC")]
		[IteratorStateMachine(typeof(<ResetValue>d__9))]
		public IEnumerator ResetValue(int origVale)
		{
			return null;
		}

		[Token(Token = "0x60035A8")]
		[Address(RVA = "0x1338568", Offset = "0x1338568", VA = "0x1338568", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035A9")]
		[Address(RVA = "0x13385EC", Offset = "0x13385EC", VA = "0x13385EC")]
		public SetIntegerParameter()
		{
		}
	}
	[Token(Token = "0x20008B3")]
	[TaskDescription("Sets the layer's current weight. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class SetLayerWeight : Action
	{
		[Token(Token = "0x4002F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layer's index")]
		public SharedInt index;

		[Token(Token = "0x4002F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The weight of the layer")]
		public SharedFloat weight;

		[Token(Token = "0x4002F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035B0")]
		[Address(RVA = "0x13386BC", Offset = "0x13386BC", VA = "0x13386BC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035B1")]
		[Address(RVA = "0x13387C0", Offset = "0x13387C0", VA = "0x13387C0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035B2")]
		[Address(RVA = "0x13388E4", Offset = "0x13388E4", VA = "0x13388E4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035B3")]
		[Address(RVA = "0x1338934", Offset = "0x1338934", VA = "0x1338934")]
		public SetLayerWeight()
		{
		}
	}
	[Token(Token = "0x20008B4")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Sets the look at position. Returns Success.")]
	public class SetLookAtPosition : Action
	{
		[Token(Token = "0x4002F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The position to lookAt")]
		public SharedVector3 position;

		[Token(Token = "0x4002F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animator animator;

		[Token(Token = "0x4002F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionSet;

		[Token(Token = "0x60035B4")]
		[Address(RVA = "0x133893C", Offset = "0x133893C", VA = "0x133893C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035B5")]
		[Address(RVA = "0x133899C", Offset = "0x133899C", VA = "0x133899C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035B6")]
		[Address(RVA = "0x1338A60", Offset = "0x1338A60", VA = "0x1338A60", Slot = "27")]
		public override void OnAnimatorIK()
		{
		}

		[Token(Token = "0x60035B7")]
		[Address(RVA = "0x1338B0C", Offset = "0x1338B0C", VA = "0x1338B0C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035B8")]
		[Address(RVA = "0x1338B70", Offset = "0x1338B70", VA = "0x1338B70")]
		public SetLookAtPosition()
		{
		}
	}
	[Token(Token = "0x20008B5")]
	[TaskDescription("Sets the look at weight. Returns success immediately after.")]
	[TaskCategory("Unity/Animator")]
	public class SetLookAtWeight : Action
	{
		[Token(Token = "0x4002F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(0-1) the global weight of the LookAt, multiplier for other parameters.")]
		public SharedFloat weight;

		[Token(Token = "0x4002F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("(0-1) determines how much the body is involved in the LookAt.")]
		public float bodyWeight;

		[Token(Token = "0x4002F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("(0-1) determines how much the head is involved in the LookAt.")]
		public float headWeight;

		[Token(Token = "0x4002F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("(0-1) determines how much the eyes are involved in the LookAt.")]
		public float eyesWeight;

		[Token(Token = "0x4002F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("(0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).")]
		public float clampWeight;

		[Token(Token = "0x4002F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool weightSet;

		[Token(Token = "0x60035B9")]
		[Address(RVA = "0x1338B78", Offset = "0x1338B78", VA = "0x1338B78", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035BA")]
		[Address(RVA = "0x1338BD8", Offset = "0x1338BD8", VA = "0x1338BD8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035BB")]
		[Address(RVA = "0x1338C9C", Offset = "0x1338C9C", VA = "0x1338C9C", Slot = "27")]
		public override void OnAnimatorIK()
		{
		}

		[Token(Token = "0x60035BC")]
		[Address(RVA = "0x1338D50", Offset = "0x1338D50", VA = "0x1338D50", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035BD")]
		[Address(RVA = "0x1338D88", Offset = "0x1338D88", VA = "0x1338D88")]
		public SetLookAtWeight()
		{
		}
	}
	[Token(Token = "0x20008B6")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Sets the playback speed of the Animator. 1 is normal playback speed. Returns Success.")]
	public class SetSpeed : Action
	{
		[Token(Token = "0x4002F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The playback speed of the Animator")]
		public SharedFloat speed;

		[Token(Token = "0x4002F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035BE")]
		[Address(RVA = "0x1338DA0", Offset = "0x1338DA0", VA = "0x1338DA0", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035BF")]
		[Address(RVA = "0x1338EA4", Offset = "0x1338EA4", VA = "0x1338EA4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035C0")]
		[Address(RVA = "0x1338F98", Offset = "0x1338F98", VA = "0x1338F98", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035C1")]
		[Address(RVA = "0x1338FCC", Offset = "0x1338FCC", VA = "0x1338FCC")]
		public SetSpeed()
		{
		}
	}
	[Token(Token = "0x20008B7")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Sets a trigger parameter to active or inactive. Returns Success.")]
	public class SetTrigger : Action
	{
		[Token(Token = "0x4002F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the parameter")]
		public SharedString paramaterName;

		[Token(Token = "0x4002F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035C2")]
		[Address(RVA = "0x1338FD4", Offset = "0x1338FD4", VA = "0x1338FD4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035C3")]
		[Address(RVA = "0x13390D8", Offset = "0x13390D8", VA = "0x13390D8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035C4")]
		[Address(RVA = "0x13391D0", Offset = "0x13391D0", VA = "0x13391D0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035C5")]
		[Address(RVA = "0x1339238", Offset = "0x1339238", VA = "0x1339238")]
		public SetTrigger()
		{
		}
	}
	[Token(Token = "0x20008B8")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Sets the animator in playback mode.")]
	public class StartPlayback : Action
	{
		[Token(Token = "0x4002F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animator animator;

		[Token(Token = "0x4002F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035C6")]
		[Address(RVA = "0x1339240", Offset = "0x1339240", VA = "0x1339240", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035C7")]
		[Address(RVA = "0x1339344", Offset = "0x1339344", VA = "0x1339344", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035C8")]
		[Address(RVA = "0x1339410", Offset = "0x1339410", VA = "0x1339410", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035C9")]
		[Address(RVA = "0x133941C", Offset = "0x133941C", VA = "0x133941C")]
		public StartPlayback()
		{
		}
	}
	[Token(Token = "0x20008B9")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Sets the animator in recording mode. Returns Success.")]
	public class StartRecording : Action
	{
		[Token(Token = "0x4002F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The number of frames (updates) that will be recorded")]
		public int frameCount;

		[Token(Token = "0x4002F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator animator;

		[Token(Token = "0x4002F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035CA")]
		[Address(RVA = "0x1339424", Offset = "0x1339424", VA = "0x1339424", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035CB")]
		[Address(RVA = "0x1339528", Offset = "0x1339528", VA = "0x1339528", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035CC")]
		[Address(RVA = "0x13395F8", Offset = "0x13395F8", VA = "0x13395F8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035CD")]
		[Address(RVA = "0x133961C", Offset = "0x133961C", VA = "0x133961C")]
		public StartRecording()
		{
		}
	}
	[Token(Token = "0x20008BA")]
	[TaskDescription("Stops the animator playback mode. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class StopPlayback : Action
	{
		[Token(Token = "0x4002F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animator animator;

		[Token(Token = "0x4002F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035CE")]
		[Address(RVA = "0x1339624", Offset = "0x1339624", VA = "0x1339624", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035CF")]
		[Address(RVA = "0x1339728", Offset = "0x1339728", VA = "0x1339728", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035D0")]
		[Address(RVA = "0x13397F4", Offset = "0x13397F4", VA = "0x13397F4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035D1")]
		[Address(RVA = "0x1339800", Offset = "0x1339800", VA = "0x1339800")]
		public StopPlayback()
		{
		}
	}
	[Token(Token = "0x20008BB")]
	[TaskDescription("Stops animator record mode. Returns Success.")]
	[TaskCategory("Unity/Animator")]
	public class StopRecording : Action
	{
		[Token(Token = "0x4002F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animator animator;

		[Token(Token = "0x4002F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035D2")]
		[Address(RVA = "0x1339808", Offset = "0x1339808", VA = "0x1339808", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035D3")]
		[Address(RVA = "0x133990C", Offset = "0x133990C", VA = "0x133990C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035D4")]
		[Address(RVA = "0x13399D8", Offset = "0x13399D8", VA = "0x13399D8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035D5")]
		[Address(RVA = "0x13399E4", Offset = "0x13399E4", VA = "0x13399E4")]
		public StopRecording()
		{
		}
	}
	[Token(Token = "0x20008BC")]
	[TaskDescription("Waits for the Animator to reach the specified state.")]
	[TaskCategory("Unity/Animator")]
	public class WaitForState : Action
	{
		[Token(Token = "0x4002F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the state")]
		public SharedString stateName;

		[Token(Token = "0x4002F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The layer where the state is")]
		public SharedInt layer;

		[Token(Token = "0x4002F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x4002F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int stateHash;

		[Token(Token = "0x60035D6")]
		[Address(RVA = "0x13399EC", Offset = "0x13399EC", VA = "0x13399EC", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x60035D7")]
		[Address(RVA = "0x1339A4C", Offset = "0x1339A4C", VA = "0x1339A4C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035D8")]
		[Address(RVA = "0x1339C58", Offset = "0x1339C58", VA = "0x1339C58", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035D9")]
		[Address(RVA = "0x1339D94", Offset = "0x1339D94", VA = "0x1339D94", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035DA")]
		[Address(RVA = "0x1339E18", Offset = "0x1339E18", VA = "0x1339E18")]
		public WaitForState()
		{
		}
	}
	[Token(Token = "0x20008BD")]
	[TaskCategory("Unity/Animator")]
	[TaskDescription("Waits for the Animator to reach the specified state.")]
	public class WaitForStateWithTag : Action
	{
		[Token(Token = "0x4002F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the tag")]
		public SharedString stateTag;

		[Token(Token = "0x4002F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The layer where the state is")]
		public SharedInt layer;

		[Token(Token = "0x4002F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator animator;

		[Token(Token = "0x4002F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035DB")]
		[Address(RVA = "0x1339E4C", Offset = "0x1339E4C", VA = "0x1339E4C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035DC")]
		[Address(RVA = "0x1339F50", Offset = "0x1339F50", VA = "0x1339F50", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035DD")]
		[Address(RVA = "0x133A0B0", Offset = "0x133A0B0", VA = "0x133A0B0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035DE")]
		[Address(RVA = "0x133A134", Offset = "0x133A134", VA = "0x133A134")]
		public WaitForStateWithTag()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Unity.UnityAnimation
{
	[Token(Token = "0x20008BE")]
	[TaskDescription("Blends the animation. Returns Success.")]
	[TaskCategory("Unity/Animation")]
	public class Blend : Action
	{
		[Token(Token = "0x4002F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the animation")]
		public SharedString animationName;

		[Token(Token = "0x4002F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The weight the animation should blend to")]
		public float targetWeight;

		[Token(Token = "0x4002F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The amount of time it takes to blend")]
		public float fadeLength;

		[Token(Token = "0x4002F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animation animation;

		[Token(Token = "0x4002F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035DF")]
		[Address(RVA = "0x133A168", Offset = "0x133A168", VA = "0x133A168", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035E0")]
		[Address(RVA = "0x133A26C", Offset = "0x133A26C", VA = "0x133A26C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035E1")]
		[Address(RVA = "0x133A368", Offset = "0x133A368", VA = "0x133A368", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035E2")]
		[Address(RVA = "0x133A3E0", Offset = "0x133A3E0", VA = "0x133A3E0")]
		public Blend()
		{
		}
	}
	[Token(Token = "0x20008BF")]
	[TaskDescription("Fades the animation over a period of time and fades other animations out. Returns Success.")]
	[TaskCategory("Unity/Animation")]
	public class CrossFade : Action
	{
		[Token(Token = "0x4002F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the animation")]
		public SharedString animationName;

		[Token(Token = "0x4002F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The speed of the animation. Use a negative value to play the animation backwards")]
		public SharedFloat animationSpeed;

		[Token(Token = "0x4002F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The amount of time it takes to blend")]
		public SharedFloat fadeLength;

		[Token(Token = "0x4002F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The play mode of the animation")]
		public PlayMode playMode;

		[Token(Token = "0x4002F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animation animation;

		[Token(Token = "0x4002F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035E3")]
		[Address(RVA = "0x133A3F4", Offset = "0x133A3F4", VA = "0x133A3F4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035E4")]
		[Address(RVA = "0x133A4F8", Offset = "0x133A4F8", VA = "0x133A4F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035E5")]
		[Address(RVA = "0x133A728", Offset = "0x133A728", VA = "0x133A728", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035E6")]
		[Address(RVA = "0x133A7E8", Offset = "0x133A7E8", VA = "0x133A7E8")]
		public CrossFade()
		{
		}
	}
	[Token(Token = "0x20008C0")]
	[TaskCategory("Unity/Animation")]
	[TaskDescription("Cross fades an animation after previous animations has finished playing. Returns Success.")]
	public class CrossFadeQueued : Action
	{
		[Token(Token = "0x4002F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the animation")]
		public SharedString animationName;

		[Token(Token = "0x4002F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The amount of time it takes to blend")]
		public float fadeLength;

		[Token(Token = "0x4002F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Specifies when the animation should start playing")]
		public QueueMode queue;

		[Token(Token = "0x4002F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The play mode of the animation")]
		public PlayMode playMode;

		[Token(Token = "0x4002F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animation animation;

		[Token(Token = "0x4002F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035E7")]
		[Address(RVA = "0x133A83C", Offset = "0x133A83C", VA = "0x133A83C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035E8")]
		[Address(RVA = "0x133A940", Offset = "0x133A940", VA = "0x133A940", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035E9")]
		[Address(RVA = "0x133AA40", Offset = "0x133AA40", VA = "0x133AA40", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035EA")]
		[Address(RVA = "0x133AAD0", Offset = "0x133AAD0", VA = "0x133AAD0")]
		public CrossFadeQueued()
		{
		}
	}
	[Token(Token = "0x20008C1")]
	[TaskCategory("Unity/Animation")]
	[TaskDescription("Stores the animate physics value. Returns Success.")]
	public class GetAnimatePhysics : Action
	{
		[Token(Token = "0x4002F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Are the if animations are executed in the physics loop?")]
		[RequiredField]
		public SharedBool storeValue;

		[Token(Token = "0x4002F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animation animation;

		[Token(Token = "0x4002F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035EB")]
		[Address(RVA = "0x133AAE4", Offset = "0x133AAE4", VA = "0x133AAE4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035EC")]
		[Address(RVA = "0x133ABE8", Offset = "0x133ABE8", VA = "0x133ABE8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035ED")]
		[Address(RVA = "0x133ACE0", Offset = "0x133ACE0", VA = "0x133ACE0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035EE")]
		[Address(RVA = "0x133AD44", Offset = "0x133AD44", VA = "0x133AD44")]
		public GetAnimatePhysics()
		{
		}
	}
	[Token(Token = "0x20008C2")]
	[TaskCategory("Unity/Animation")]
	[TaskDescription("Returns Success if the animation is currently playing.")]
	public class IsPlaying : Conditional
	{
		[Token(Token = "0x4002F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the animation")]
		public SharedString animationName;

		[Token(Token = "0x4002F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animation animation;

		[Token(Token = "0x4002F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035EF")]
		[Address(RVA = "0x133AD4C", Offset = "0x133AD4C", VA = "0x133AD4C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035F0")]
		[Address(RVA = "0x133AE50", Offset = "0x133AE50", VA = "0x133AE50", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035F1")]
		[Address(RVA = "0x133AF80", Offset = "0x133AF80", VA = "0x133AF80", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035F2")]
		[Address(RVA = "0x133AFF8", Offset = "0x133AFF8", VA = "0x133AFF8")]
		public IsPlaying()
		{
		}
	}
	[Token(Token = "0x20008C3")]
	[TaskDescription("Plays animation without any blending. Returns Success.")]
	[TaskCategory("Unity/Animation")]
	public class Play : Action
	{
		[Token(Token = "0x4002F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the animation")]
		public SharedString animationName;

		[Token(Token = "0x4002F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The play mode of the animation")]
		public PlayMode playMode;

		[Token(Token = "0x4002F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animation animation;

		[Token(Token = "0x4002F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035F3")]
		[Address(RVA = "0x133B000", Offset = "0x133B000", VA = "0x133B000", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035F4")]
		[Address(RVA = "0x133B104", Offset = "0x133B104", VA = "0x133B104", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035F5")]
		[Address(RVA = "0x133B230", Offset = "0x133B230", VA = "0x133B230", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035F6")]
		[Address(RVA = "0x133B2B4", Offset = "0x133B2B4", VA = "0x133B2B4")]
		public Play()
		{
		}
	}
	[Token(Token = "0x20008C4")]
	[TaskCategory("Unity/Animation")]
	[TaskDescription("Plays an animation after previous animations has finished playing. Returns Success.")]
	public class PlayQueued : Action
	{
		[Token(Token = "0x4002F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the animation")]
		public SharedString animationName;

		[Token(Token = "0x4002FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Specifies when the animation should start playing")]
		public QueueMode queue;

		[Token(Token = "0x4002FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The play mode of the animation")]
		public PlayMode playMode;

		[Token(Token = "0x4002FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animation animation;

		[Token(Token = "0x4002FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035F7")]
		[Address(RVA = "0x133B2BC", Offset = "0x133B2BC", VA = "0x133B2BC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035F8")]
		[Address(RVA = "0x133B3C0", Offset = "0x133B3C0", VA = "0x133B3C0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035F9")]
		[Address(RVA = "0x133B4BC", Offset = "0x133B4BC", VA = "0x133B4BC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035FA")]
		[Address(RVA = "0x133B540", Offset = "0x133B540", VA = "0x133B540")]
		public PlayQueued()
		{
		}
	}
	[Token(Token = "0x20008C5")]
	[TaskCategory("Unity/Animation")]
	[TaskDescription("Rewinds an animation. Rewinds all animations if animationName is blank. Returns Success.")]
	public class Rewind : Action
	{
		[Token(Token = "0x4002FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the animation")]
		public SharedString animationName;

		[Token(Token = "0x4002FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animation animation;

		[Token(Token = "0x4002FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035FB")]
		[Address(RVA = "0x133B548", Offset = "0x133B548", VA = "0x133B548", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60035FC")]
		[Address(RVA = "0x133B64C", Offset = "0x133B64C", VA = "0x133B64C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60035FD")]
		[Address(RVA = "0x133B774", Offset = "0x133B774", VA = "0x133B774", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60035FE")]
		[Address(RVA = "0x133B7EC", Offset = "0x133B7EC", VA = "0x133B7EC")]
		public Rewind()
		{
		}
	}
	[Token(Token = "0x20008C6")]
	[TaskDescription("Samples animations at the current state. Returns Success.")]
	[TaskCategory("Unity/Animation")]
	public class Sample : Action
	{
		[Token(Token = "0x4002FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animation animation;

		[Token(Token = "0x4002FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject prevGameObject;

		[Token(Token = "0x60035FF")]
		[Address(RVA = "0x133B7F4", Offset = "0x133B7F4", VA = "0x133B7F4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003600")]
		[Address(RVA = "0x133B8F8", Offset = "0x133B8F8", VA = "0x133B8F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003601")]
		[Address(RVA = "0x133B9C4", Offset = "0x133B9C4", VA = "0x133B9C4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003602")]
		[Address(RVA = "0x133B9D0", Offset = "0x133B9D0", VA = "0x133B9D0")]
		public Sample()
		{
		}
	}
	[Token(Token = "0x20008C7")]
	[TaskCategory("Unity/Animation")]
	[TaskDescription("Sets animate physics to the specified value. Returns Success.")]
	public class SetAnimatePhysics : Action
	{
		[Token(Token = "0x4002FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Are animations executed in the physics loop?")]
		public SharedBool animatePhysics;

		[Token(Token = "0x4002FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animation animation;

		[Token(Token = "0x4002FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003603")]
		[Address(RVA = "0x133B9D8", Offset = "0x133B9D8", VA = "0x133B9D8", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003604")]
		[Address(RVA = "0x133BADC", Offset = "0x133BADC", VA = "0x133BADC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003605")]
		[Address(RVA = "0x133BBD4", Offset = "0x133BBD4", VA = "0x133BBD4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003606")]
		[Address(RVA = "0x133BC38", Offset = "0x133BC38", VA = "0x133BC38")]
		public SetAnimatePhysics()
		{
		}
	}
	[Token(Token = "0x20008C8")]
	[TaskDescription("Sets the wrap mode to the specified value. Returns Success.")]
	[TaskCategory("Unity/Animation")]
	public class SetWrapMode : Action
	{
		[Token(Token = "0x4002FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How should time beyond the playback range of the clip be treated?")]
		public WrapMode wrapMode;

		[Token(Token = "0x4002FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animation animation;

		[Token(Token = "0x4002FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x6003607")]
		[Address(RVA = "0x133BC40", Offset = "0x133BC40", VA = "0x133BC40", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003608")]
		[Address(RVA = "0x133BD44", Offset = "0x133BD44", VA = "0x133BD44", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003609")]
		[Address(RVA = "0x133BE14", Offset = "0x133BE14", VA = "0x133BE14", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600360A")]
		[Address(RVA = "0x133BE38", Offset = "0x133BE38", VA = "0x133BE38")]
		public SetWrapMode()
		{
		}
	}
	[Token(Token = "0x20008C9")]
	[TaskCategory("Unity/Animation")]
	[TaskDescription("Stops an animation. Stops all animations if animationName is blank. Returns Success.")]
	public class Stop : Action
	{
		[Token(Token = "0x4002FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the task operates on. If null the task GameObject is used.")]
		public SharedGameObject targetGameObject;

		[Token(Token = "0x4002FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the animation")]
		public SharedString animationName;

		[Token(Token = "0x4002FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animation animation;

		[Token(Token = "0x4002FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject prevGameObject;

		[Token(Token = "0x600360B")]
		[Address(RVA = "0x133BE40", Offset = "0x133BE40", VA = "0x133BE40", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600360C")]
		[Address(RVA = "0x133BF44", Offset = "0x133BF44", VA = "0x133BF44", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600360D")]
		[Address(RVA = "0x133C06C", Offset = "0x133C06C", VA = "0x133C06C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600360E")]
		[Address(RVA = "0x133C0D4", Offset = "0x133C0D4", VA = "0x133C0D4")]
		public Stop()
		{
		}
	}
}
namespace BehaviorDesigner.Runtime.Tasks.Movement
{
	[Token(Token = "0x20008CA")]
	public abstract class GroupMovement : Action
	{
		[Token(Token = "0x600360F")]
		protected abstract bool SetDestination(int index, Vector3 target);

		[Token(Token = "0x6003610")]
		protected abstract Vector3 Velocity(int index);

		[Token(Token = "0x6003611")]
		[Address(RVA = "0x133C0DC", Offset = "0x133C0DC", VA = "0x133C0DC")]
		protected GroupMovement()
		{
		}
	}
	[Token(Token = "0x20008CB")]
	public abstract class Movement : Action
	{
		[Token(Token = "0x6003612")]
		protected abstract bool SetDestination(Vector3 destination);

		[Token(Token = "0x6003613")]
		protected abstract void UpdateRotation(bool update);

		[Token(Token = "0x6003614")]
		protected abstract bool HasPath();

		[Token(Token = "0x6003615")]
		protected abstract Vector3 Velocity();

		[Token(Token = "0x6003616")]
		protected abstract bool HasArrived();

		[Token(Token = "0x6003617")]
		protected abstract void Stop();

		[Token(Token = "0x6003618")]
		[Address(RVA = "0x133C0E4", Offset = "0x133C0E4", VA = "0x133C0E4")]
		protected Movement()
		{
		}
	}
	[Token(Token = "0x20008CC")]
	public static class MovementUtility
	{
		[Token(Token = "0x4002FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<GameObject, Dictionary<Type, Component>> gameObjectComponentMap;

		[Token(Token = "0x4002FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<GameObject, Dictionary<Type, Component>> gameObjectParentComponentMap;

		[Token(Token = "0x4002FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<GameObject, Dictionary<Type, Component[]>> gameObjectComponentsMap;

		[Token(Token = "0x6003619")]
		[Address(RVA = "0x133C0EC", Offset = "0x133C0EC", VA = "0x133C0EC")]
		public static GameObject WithinSight(Transform transform, Vector3 positionOffset, float fieldOfViewAngle, float viewDistance, Collider[] overlapColliders, LayerMask objectLayerMask, Vector3 targetOffset, LayerMask ignoreLayerMask, bool useTargetBone, HumanBodyBones targetBone, bool drawDebugRay)
		{
			return null;
		}

		[Token(Token = "0x600361A")]
		[Address(RVA = "0x133CA68", Offset = "0x133CA68", VA = "0x133CA68")]
		public static GameObject WithinSight2D(Transform transform, Vector3 positionOffset, float fieldOfViewAngle, float viewDistance, Collider2D[] overlapColliders, LayerMask objectLayerMask, Vector3 targetOffset, float angleOffset2D, LayerMask ignoreLayerMask, bool drawDebugRay)
		{
			return null;
		}

		[Token(Token = "0x600361B")]
		[Address(RVA = "0x133CCB8", Offset = "0x133CCB8", VA = "0x133CCB8")]
		public static GameObject WithinSight(Transform transform, Vector3 positionOffset, float fieldOfViewAngle, float viewDistance, GameObject targetObject, Vector3 targetOffset, LayerMask ignoreLayerMask, bool useTargetBone, HumanBodyBones targetBone, bool drawDebugRay)
		{
			return null;
		}

		[Token(Token = "0x600361C")]
		[Address(RVA = "0x133CDDC", Offset = "0x133CDDC", VA = "0x133CDDC")]
		public static GameObject WithinSight2D(Transform transform, Vector3 positionOffset, float fieldOfViewAngle, float viewDistance, GameObject targetObject, Vector3 targetOffset, float angleOffset2D, LayerMask ignoreLayerMask, bool useTargetBone, HumanBodyBones targetBone, bool drawDebugRay)
		{
			return null;
		}

		[Token(Token = "0x600361D")]
		[Address(RVA = "0x133C330", Offset = "0x133C330", VA = "0x133C330")]
		public static GameObject WithinSight(Transform transform, Vector3 positionOffset, float fieldOfViewAngle, float viewDistance, GameObject targetObject, Vector3 targetOffset, bool usePhysics2D, float angleOffset2D, out float angle, int ignoreLayerMask, bool useTargetBone, HumanBodyBones targetBone, bool drawDebugRay)
		{
			return null;
		}

		[Token(Token = "0x600361E")]
		[Address(RVA = "0x133CF04", Offset = "0x133CF04", VA = "0x133CF04")]
		public static Transform LineOfSight(Transform transform, Vector3 positionOffset, GameObject targetObject, Vector3 targetOffset, bool usePhysics2D, int ignoreLayerMask, bool drawDebugRay)
		{
			return null;
		}

		[Token(Token = "0x600361F")]
		[Address(RVA = "0x133D0F4", Offset = "0x133D0F4", VA = "0x133D0F4")]
		public static bool IsAncestor(Transform target, Transform hitTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x6003620")]
		[Address(RVA = "0x133D14C", Offset = "0x133D14C", VA = "0x133D14C")]
		public static GameObject WithinHearingRange(Transform transform, Vector3 positionOffset, float audibilityThreshold, float hearingRadius, Collider[] overlapColliders, LayerMask objectLayerMask)
		{
			return null;
		}

		[Token(Token = "0x6003621")]
		[Address(RVA = "0x133D5B0", Offset = "0x133D5B0", VA = "0x133D5B0")]
		public static GameObject WithinHearingRange2D(Transform transform, Vector3 positionOffset, float audibilityThreshold, float hearingRadius, Collider2D[] overlapColliders, LayerMask objectLayerMask)
		{
			return null;
		}

		[Token(Token = "0x6003622")]
		[Address(RVA = "0x133D7A0", Offset = "0x133D7A0", VA = "0x133D7A0")]
		public static GameObject WithinHearingRange(Transform transform, Vector3 positionOffset, float audibilityThreshold, GameObject targetObject)
		{
			return null;
		}

		[Token(Token = "0x6003623")]
		[Address(RVA = "0x133D31C", Offset = "0x133D31C", VA = "0x133D31C")]
		public static GameObject WithinHearingRange(Transform transform, Vector3 positionOffset, float audibilityThreshold, GameObject targetObject, ref float audibility)
		{
			return null;
		}

		[Token(Token = "0x6003624")]
		[Address(RVA = "0x133D828", Offset = "0x133D828", VA = "0x133D828")]
		public static void DrawLineOfSight(Transform transform, Vector3 positionOffset, float fieldOfViewAngle, float angleOffset, float viewDistance, bool usePhysics2D)
		{
		}

		[Token(Token = "0x6003625")]
		public static T GetComponentForType<T>(GameObject target) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6003626")]
		public static T GetParentComponentForType<T>(GameObject target) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6003627")]
		public static T[] GetComponentsForType<T>(GameObject target) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6003628")]
		[Address(RVA = "0x133D82C", Offset = "0x133D82C", VA = "0x133D82C")]
		public static void ClearCache()
		{
		}
	}
	[Token(Token = "0x20008CD")]
	[TaskDescription("Check to see if the any objects are within hearing range of the current agent.")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}CanHearObjectIcon.png")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskCategory("Movement")]
	public class CanHearObject : Conditional
	{
		[Token(Token = "0x4002FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Should the 2D version be used?")]
		public bool usePhysics2D;

		[Token(Token = "0x4002FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The object that we are searching for")]
		public SharedGameObject targetObject;

		[Token(Token = "0x4002FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The objects that we are searching for")]
		public SharedGameObjectList targetObjects;

		[Token(Token = "0x4002FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The tag of the object that we are searching for")]
		public SharedString targetTag;

		[Token(Token = "0x4002FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The LayerMask of the objects that we are searching for")]
		public LayerMask objectLayerMask;

		[Token(Token = "0x4002FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If using the object layer mask, specifies the maximum number of colliders that the physics cast can collide with")]
		public int maxCollisionCount;

		[Token(Token = "0x4002FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("How far away the unit can hear")]
		public SharedFloat hearingRadius;

		[Token(Token = "0x4002FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The further away a sound source is the less likely the agent will be able to hear it. Set a threshold for the the minimum audibility level that the agent can hear")]
		public SharedFloat audibilityThreshold;

		[Token(Token = "0x4002FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The hearing offset relative to the pivot position")]
		public SharedVector3 offset;

		[Token(Token = "0x4002FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The returned object that is heard")]
		public SharedGameObject returnedObject;

		[Token(Token = "0x4002FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Collider[] overlapColliders;

		[Token(Token = "0x4002FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Collider2D[] overlap2DColliders;

		[Token(Token = "0x600362A")]
		[Address(RVA = "0x133D9F0", Offset = "0x133D9F0", VA = "0x133D9F0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600362B")]
		[Address(RVA = "0x133E2CC", Offset = "0x133E2CC", VA = "0x133E2CC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600362C")]
		[Address(RVA = "0x133E318", Offset = "0x133E318", VA = "0x133E318", Slot = "17")]
		public override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600362D")]
		[Address(RVA = "0x133E31C", Offset = "0x133E31C", VA = "0x133E31C", Slot = "15")]
		public override void OnBehaviorComplete()
		{
		}

		[Token(Token = "0x600362E")]
		[Address(RVA = "0x133E368", Offset = "0x133E368", VA = "0x133E368")]
		public CanHearObject()
		{
		}
	}
	[Token(Token = "0x20008CE")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}CanSeeObjectIcon.png")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskCategory("Movement")]
	[TaskDescription("Check to see if the any objects are within sight of the agent.")]
	public class CanSeeObject : Conditional
	{
		[Token(Token = "0x4002FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Should the 2D version be used?")]
		public bool usePhysics2D;

		[Token(Token = "0x4002FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The object that we are searching for")]
		public SharedGameObject targetObject;

		[Token(Token = "0x4002FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The objects that we are searching for")]
		public SharedGameObjectList targetObjects;

		[Token(Token = "0x4002FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The tag of the object that we are searching for")]
		public SharedString targetTag;

		[Token(Token = "0x4002FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The LayerMask of the objects that we are searching for")]
		public LayerMask objectLayerMask;

		[Token(Token = "0x4002FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If using the object layer mask, specifies the maximum number of colliders that the physics cast can collide with")]
		public int maxCollisionCount;

		[Token(Token = "0x4002FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The LayerMask of the objects to ignore when performing the line of sight check")]
		public LayerMask ignoreLayerMask;

		[Token(Token = "0x4002FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The field of view angle of the agent (in degrees)")]
		public SharedFloat fieldOfViewAngle;

		[Token(Token = "0x4002FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The distance that the agent can see")]
		public SharedFloat viewDistance;

		[Token(Token = "0x4002FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The raycast offset relative to the pivot position")]
		public SharedVector3 offset;

		[Token(Token = "0x4002FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The target raycast offset relative to the pivot position")]
		public SharedVector3 targetOffset;

		[Token(Token = "0x4002FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The offset to apply to 2D angles")]
		public SharedFloat angleOffset2D;

		[Token(Token = "0x4002FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Should the target bone be used?")]
		public SharedBool useTargetBone;

		[Token(Token = "0x4002FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The target's bone if the target is a humanoid")]
		public HumanBodyBones targetBone;

		[Token(Token = "0x4002FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Should a debug look ray be drawn to the scene view?")]
		public SharedBool drawDebugRay;

		[Token(Token = "0x4002FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Should the agent's layer be disabled before the Can See Object check is executed?")]
		public SharedBool disableAgentColliderLayer;

		[Token(Token = "0x4002FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The object that is within sight")]
		public SharedGameObject returnedObject;

		[Token(Token = "0x4002FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GameObject[] agentColliderGameObjects;

		[Token(Token = "0x4002FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int[] originalColliderLayer;

		[Token(Token = "0x4002FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Collider[] overlapColliders;

		[Token(Token = "0x4002FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider2D[] overlap2DColliders;

		[Token(Token = "0x4002FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int ignoreRaycastLayer;

		[Token(Token = "0x600362F")]
		[Address(RVA = "0x133E3C8", Offset = "0x133E3C8", VA = "0x133E3C8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003630")]
		[Address(RVA = "0x133F630", Offset = "0x133F630", VA = "0x133F630", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003631")]
		[Address(RVA = "0x133F7D4", Offset = "0x133F7D4", VA = "0x133F7D4", Slot = "17")]
		public override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6003632")]
		[Address(RVA = "0x133F8D0", Offset = "0x133F8D0", VA = "0x133F8D0", Slot = "15")]
		public override void OnBehaviorComplete()
		{
		}

		[Token(Token = "0x6003633")]
		[Address(RVA = "0x133F91C", Offset = "0x133F91C", VA = "0x133F91C")]
		public CanSeeObject()
		{
		}
	}
	[Token(Token = "0x20008CF")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}CoverIcon.png")]
	[TaskDescription("Find a place to hide and move to it using the Unity NavMesh.")]
	[TaskCategory("Movement")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	public class Cover : NavMeshMovement
	{
		[Token(Token = "0x4002FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The distance to search for cover")]
		public SharedFloat maxCoverDistance;

		[Token(Token = "0x4002FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The layermask of the available cover positions")]
		public LayerMask availableLayerCovers;

		[Token(Token = "0x4002FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The maximum number of raycasts that should be fired before the agent gives up looking for an agent to find cover behind")]
		public SharedInt maxRaycasts;

		[Token(Token = "0x4002FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("How large the step should be between raycasts")]
		public SharedFloat rayStep;

		[Token(Token = "0x4002FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Once a cover point has been found, multiply this offset by the normal to prevent the agent from hugging the wall")]
		public SharedFloat coverOffset;

		[Token(Token = "0x4002FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Should the agent look at the cover point after it has arrived?")]
		public SharedBool lookAtCoverPoint;

		[Token(Token = "0x4002FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The agent is done rotating to the cover point when the square magnitude is less than this value")]
		public SharedFloat rotationEpsilon;

		[Token(Token = "0x4002FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Max rotation delta if lookAtCoverPoint")]
		public SharedFloat maxLookAtRotationDelta;

		[Token(Token = "0x4002FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 coverPoint;

		[Token(Token = "0x4002FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 coverTarget;

		[Token(Token = "0x4002FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool foundCover;

		[Token(Token = "0x6003634")]
		[Address(RVA = "0x13409BC", Offset = "0x13409BC", VA = "0x13409BC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003635")]
		[Address(RVA = "0x1340E84", Offset = "0x1340E84", VA = "0x1340E84", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003636")]
		[Address(RVA = "0x134110C", Offset = "0x134110C", VA = "0x134110C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003637")]
		[Address(RVA = "0x13411C8", Offset = "0x13411C8", VA = "0x13411C8")]
		public Cover()
		{
		}
	}
	[Token(Token = "0x20008D0")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}EvadeIcon.png")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskCategory("Movement")]
	[TaskDescription("Evade the target specified using the Unity NavMesh.")]
	public class Evade : NavMeshMovement
	{
		[Token(Token = "0x4002FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The agent has evaded when the magnitude is greater than this value")]
		public SharedFloat evadeDistance;

		[Token(Token = "0x4002FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The distance to look ahead when evading")]
		public SharedFloat lookAheadDistance;

		[Token(Token = "0x4002FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("How far to predict the distance ahead of the target. Lower values indicate less distance should be predicated")]
		public SharedFloat targetDistPrediction;

		[Token(Token = "0x4002FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Multiplier for predicting the look ahead distance")]
		public SharedFloat targetDistPredictionMult;

		[Token(Token = "0x4002FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The GameObject that the agent is evading")]
		public SharedGameObject target;

		[Token(Token = "0x4002FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Stop when time is over cooldownUntil")]
		public SharedBool useCooldown;

		[Token(Token = "0x4002FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Cooldown until")]
		public SharedFloat cooldownUntil;

		[Token(Token = "0x4002FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public SharedBool requireAnimatorTag;

		[Token(Token = "0x4002FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public SharedGameObject animatorObject;

		[Token(Token = "0x4002FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public SharedString animatorTag;

		[Token(Token = "0x4002FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 targetPosition;

		[Token(Token = "0x4002FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Animator animator;

		[Token(Token = "0x6003638")]
		[Address(RVA = "0x1341334", Offset = "0x1341334", VA = "0x1341334", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003639")]
		[Address(RVA = "0x13419A0", Offset = "0x13419A0", VA = "0x13419A0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600363A")]
		[Address(RVA = "0x1341590", Offset = "0x1341590", VA = "0x1341590")]
		private Vector3 Target()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600363B")]
		[Address(RVA = "0x1341BB8", Offset = "0x1341BB8", VA = "0x1341BB8", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600363C")]
		[Address(RVA = "0x1341CD4", Offset = "0x1341CD4", VA = "0x1341CD4")]
		public Evade()
		{
		}
	}
	[Token(Token = "0x20008D1")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}FleeIcon.png")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskCategory("Movement")]
	[TaskDescription("Flee from the target specified using the Unity NavMesh.")]
	public class Flee : NavMeshMovement
	{
		[Token(Token = "0x4002FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The agent has fleed when the magnitude is greater than this value")]
		public SharedFloat fleedDistance;

		[Token(Token = "0x4002FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The distance to look ahead when fleeing")]
		public SharedFloat lookAheadDistance;

		[Token(Token = "0x4002FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The GameObject that the agent is fleeing from")]
		public SharedGameObject target;

		[Token(Token = "0x4002FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool hasMoved;

		[Token(Token = "0x600363D")]
		[Address(RVA = "0x1341D80", Offset = "0x1341D80", VA = "0x1341D80", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600363E")]
		[Address(RVA = "0x1341F7C", Offset = "0x1341F7C", VA = "0x1341F7C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600363F")]
		[Address(RVA = "0x1341DB0", Offset = "0x1341DB0", VA = "0x1341DB0")]
		private Vector3 Target()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003640")]
		[Address(RVA = "0x1342150", Offset = "0x1342150", VA = "0x1342150", Slot = "30")]
		protected override bool SetDestination(Vector3 destination)
		{
			return default(bool);
		}

		[Token(Token = "0x6003641")]
		[Address(RVA = "0x1342278", Offset = "0x1342278", VA = "0x1342278", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003642")]
		[Address(RVA = "0x13422D0", Offset = "0x13422D0", VA = "0x13422D0")]
		public Flee()
		{
		}
	}
	[Token(Token = "0x20008D2")]
	[TaskCategory("Movement")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}FlockIcon.png")]
	[TaskDescription("Flock around the scene using the Unity NavMesh.")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	public class Flock : NavMeshGroupMovement
	{
		[Token(Token = "0x4002FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Agents less than this distance apart are neighbors")]
		public SharedFloat neighborDistance;

		[Token(Token = "0x4002FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How far the agent should look ahead when determine its pathfinding destination")]
		public SharedFloat lookAheadDistance;

		[Token(Token = "0x4002FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The greater the alignmentWeight is the more likely it is that the agents will be facing the same direction")]
		public SharedFloat alignmentWeight;

		[Token(Token = "0x4002FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The greater the cohesionWeight is the more likely it is that the agents will be moving towards a common position")]
		public SharedFloat cohesionWeight;

		[Token(Token = "0x4002FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The greater the separationWeight is the more likely it is that the agents will be separated")]
		public SharedFloat separationWeight;

		[Token(Token = "0x6003643")]
		[Address(RVA = "0x134231C", Offset = "0x134231C", VA = "0x134231C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003644")]
		[Address(RVA = "0x134256C", Offset = "0x134256C", VA = "0x134256C")]
		private void DetermineFlockParameters(int index, out Vector3 alignment, out Vector3 cohesion, out Vector3 separation)
		{
		}

		[Token(Token = "0x6003645")]
		[Address(RVA = "0x1342A20", Offset = "0x1342A20", VA = "0x1342A20", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003646")]
		[Address(RVA = "0x1342ADC", Offset = "0x1342ADC", VA = "0x1342ADC")]
		public Flock()
		{
		}
	}
	[Token(Token = "0x20008D3")]
	[TaskCategory("Movement")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}FollowIcon.png")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskDescription("Follows the specified target using the Unity NavMesh.")]
	public class Follow : NavMeshMovement
	{
		[Token(Token = "0x4002FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The GameObject that the agent is following")]
		public SharedGameObject target;

		[Token(Token = "0x4002FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Start moving towards the target if the target is further than the specified distance")]
		public SharedFloat moveDistance;

		[Token(Token = "0x4002FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x4002FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool hasMoved;

		[Token(Token = "0x6003647")]
		[Address(RVA = "0x1342BDC", Offset = "0x1342BDC", VA = "0x1342BDC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003648")]
		[Address(RVA = "0x1342D4C", Offset = "0x1342D4C", VA = "0x1342D4C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003649")]
		[Address(RVA = "0x1342FDC", Offset = "0x1342FDC", VA = "0x1342FDC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600364A")]
		[Address(RVA = "0x1343018", Offset = "0x1343018", VA = "0x1343018")]
		public Follow()
		{
		}
	}
	[Token(Token = "0x20008D4")]
	[TaskCategory("Movement")]
	[TaskDescription("Follow the leader using the Unity NavMesh.")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}LeaderFollowIcon.png")]
	public class LeaderFollow : NavMeshGroupMovement
	{
		[Token(Token = "0x4003000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Agents less than this distance apart are neighbors")]
		public SharedFloat neighborDistance;

		[Token(Token = "0x4003001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How far behind the leader the agents should follow the leader")]
		public SharedFloat leaderBehindDistance;

		[Token(Token = "0x4003002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The distance that the agents should be separated")]
		public SharedFloat separationDistance;

		[Token(Token = "0x4003003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The agent is getting too close to the front of the leader if they are within the aheadDistance")]
		public SharedFloat aheadDistance;

		[Token(Token = "0x4003004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The leader to follow")]
		public SharedGameObject leader;

		[Token(Token = "0x4003005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform leaderTransform;

		[Token(Token = "0x4003006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private NavMeshAgent leaderAgent;

		[Token(Token = "0x600364B")]
		[Address(RVA = "0x1343048", Offset = "0x1343048", VA = "0x1343048", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600364C")]
		[Address(RVA = "0x13433A8", Offset = "0x13433A8", VA = "0x13433A8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600364D")]
		[Address(RVA = "0x13436DC", Offset = "0x13436DC", VA = "0x13436DC")]
		private Vector3 LeaderBehindPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600364E")]
		[Address(RVA = "0x13438E4", Offset = "0x13438E4", VA = "0x13438E4")]
		private Vector3 DetermineSeparation(int agentIndex)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600364F")]
		[Address(RVA = "0x134384C", Offset = "0x134384C", VA = "0x134384C")]
		public bool LeaderLookingAtAgent(int agentIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6003650")]
		[Address(RVA = "0x1343BCC", Offset = "0x1343BCC", VA = "0x1343BCC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003651")]
		[Address(RVA = "0x1343C70", Offset = "0x1343C70", VA = "0x1343C70")]
		public LeaderFollow()
		{
		}
	}
	[Token(Token = "0x20008D5")]
	[TaskCategory("Movement")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}MoveTowardsIcon.png")]
	[TaskDescription("Move towards the specified position. The position can either be specified by a transform or position. If the transform is used then the position will not be used.")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	public class MoveTowards : Action
	{
		[Token(Token = "0x4003007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The speed of the agent")]
		public SharedFloat speed;

		[Token(Token = "0x4003008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The agent has arrived when the magnitude is less than this value")]
		public SharedFloat arriveDistance;

		[Token(Token = "0x4003009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should the agent be looking at the target position?")]
		public SharedBool lookAtTarget;

		[Token(Token = "0x400300A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Max rotation delta if lookAtTarget is enabled")]
		public SharedFloat maxLookAtRotationDelta;

		[Token(Token = "0x400300B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The GameObject that the agent is moving towards")]
		public SharedGameObject target;

		[Token(Token = "0x400300C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If target is null then use the target position")]
		public SharedVector3 targetPosition;

		[Token(Token = "0x6003652")]
		[Address(RVA = "0x1343D00", Offset = "0x1343D00", VA = "0x1343D00", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003653")]
		[Address(RVA = "0x13440DC", Offset = "0x13440DC", VA = "0x13440DC")]
		private Vector3 Target()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003654")]
		[Address(RVA = "0x13441C0", Offset = "0x13441C0", VA = "0x13441C0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003655")]
		[Address(RVA = "0x1344208", Offset = "0x1344208", VA = "0x1344208")]
		public MoveTowards()
		{
		}
	}
	[Token(Token = "0x20008D6")]
	public abstract class NavMeshGroupMovement : GroupMovement
	{
		[Token(Token = "0x400300D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("All of the agents")]
		public SharedGameObject[] agents;

		[Token(Token = "0x400300E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The speed of the agents")]
		public SharedFloat speed;

		[Token(Token = "0x400300F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The angular speed of the agents")]
		public SharedFloat angularSpeed;

		[Token(Token = "0x4003010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private NavMeshAgent[] navMeshAgents;

		[Token(Token = "0x4003011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Transform[] transforms;

		[Token(Token = "0x6003656")]
		[Address(RVA = "0x1343100", Offset = "0x1343100", VA = "0x1343100", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003657")]
		[Address(RVA = "0x134425C", Offset = "0x134425C", VA = "0x134425C", Slot = "30")]
		protected override bool SetDestination(int index, Vector3 target)
		{
			return default(bool);
		}

		[Token(Token = "0x6003658")]
		[Address(RVA = "0x1344340", Offset = "0x1344340", VA = "0x1344340", Slot = "31")]
		protected override Vector3 Velocity(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003659")]
		[Address(RVA = "0x1344378", Offset = "0x1344378", VA = "0x1344378", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x600365A")]
		[Address(RVA = "0x1342AD0", Offset = "0x1342AD0", VA = "0x1342AD0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600365B")]
		[Address(RVA = "0x1342B88", Offset = "0x1342B88", VA = "0x1342B88")]
		protected NavMeshGroupMovement()
		{
		}
	}
	[Token(Token = "0x20008D7")]
	public abstract class NavMeshMovement : Movement
	{
		[Token(Token = "0x4003012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The speed of the agent")]
		public SharedFloat speed;

		[Token(Token = "0x4003013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The angular speed of the agent")]
		public SharedFloat angularSpeed;

		[Token(Token = "0x4003014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The agent has arrived when the destination is less than the specified amount. This distance should be greater than or equal to the NavMeshAgent StoppingDistance.")]
		public SharedFloat arriveDistance;

		[Token(Token = "0x4003015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Should the NavMeshAgent be stopped when the task ends?")]
		public SharedBool stopOnTaskEnd;

		[Token(Token = "0x4003016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Should the NavMeshAgent rotation be updated when the task ends?")]
		public SharedBool updateRotation;

		[Token(Token = "0x4003017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected NavMeshAgent navMeshAgent;

		[Token(Token = "0x4003018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool startUpdateRotation;

		[Token(Token = "0x600365C")]
		[Address(RVA = "0x1344448", Offset = "0x1344448", VA = "0x1344448", Slot = "4")]
		public override void OnAwake()
		{
		}

		[Token(Token = "0x600365D")]
		[Address(RVA = "0x1340D7C", Offset = "0x1340D7C", VA = "0x1340D7C", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600365E")]
		[Address(RVA = "0x134221C", Offset = "0x134221C", VA = "0x134221C", Slot = "30")]
		protected override bool SetDestination(Vector3 destination)
		{
			return default(bool);
		}

		[Token(Token = "0x600365F")]
		[Address(RVA = "0x13444A0", Offset = "0x13444A0", VA = "0x13444A0", Slot = "31")]
		protected override void UpdateRotation(bool update)
		{
		}

		[Token(Token = "0x6003660")]
		[Address(RVA = "0x13444E4", Offset = "0x13444E4", VA = "0x13444E4", Slot = "32")]
		protected override bool HasPath()
		{
			return default(bool);
		}

		[Token(Token = "0x6003661")]
		[Address(RVA = "0x1344578", Offset = "0x1344578", VA = "0x1344578", Slot = "33")]
		protected override Vector3 Velocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003662")]
		[Address(RVA = "0x13421A8", Offset = "0x13421A8", VA = "0x13421A8")]
		protected bool SamplePosition(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x6003663")]
		[Address(RVA = "0x1344594", Offset = "0x1344594", VA = "0x1344594", Slot = "34")]
		protected override bool HasArrived()
		{
			return default(bool);
		}

		[Token(Token = "0x6003664")]
		[Address(RVA = "0x1344648", Offset = "0x1344648", VA = "0x1344648", Slot = "35")]
		protected override void Stop()
		{
		}

		[Token(Token = "0x6003665")]
		[Address(RVA = "0x134469C", Offset = "0x134469C", VA = "0x134469C", Slot = "9")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6003666")]
		[Address(RVA = "0x1344724", Offset = "0x1344724", VA = "0x1344724", Slot = "15")]
		public override void OnBehaviorComplete()
		{
		}

		[Token(Token = "0x6003667")]
		[Address(RVA = "0x1341C54", Offset = "0x1341C54", VA = "0x1341C54", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003668")]
		[Address(RVA = "0x1341288", Offset = "0x1341288", VA = "0x1341288")]
		protected NavMeshMovement()
		{
		}
	}
	[Token(Token = "0x20008D8")]
	[TaskDescription("Patrol around the specified waypoints using the Unity NavMesh.")]
	[TaskCategory("Movement")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}PatrolIcon.png")]
	public class Patrol : NavMeshMovement
	{
		[Token(Token = "0x4003019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Should the agent patrol the waypoints randomly?")]
		public SharedBool randomPatrol;

		[Token(Token = "0x400301A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The length of time that the agent should pause when arriving at a waypoint")]
		public SharedFloat waypointPauseDuration;

		[Token(Token = "0x400301B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The waypoints to move to")]
		public SharedGameObjectList waypoints;

		[Token(Token = "0x400301C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int waypointIndex;

		[Token(Token = "0x400301D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float waypointReachedTime;

		[Token(Token = "0x6003669")]
		[Address(RVA = "0x1344734", Offset = "0x1344734", VA = "0x1344734", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600366A")]
		[Address(RVA = "0x13449B4", Offset = "0x13449B4", VA = "0x13449B4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600366B")]
		[Address(RVA = "0x13448F0", Offset = "0x13448F0", VA = "0x13448F0")]
		private Vector3 Target()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600366C")]
		[Address(RVA = "0x1344B80", Offset = "0x1344B80", VA = "0x1344B80", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600366D")]
		[Address(RVA = "0x1344BD8", Offset = "0x1344BD8", VA = "0x1344BD8", Slot = "17")]
		public override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600366E")]
		[Address(RVA = "0x1344BDC", Offset = "0x1344BDC", VA = "0x1344BDC")]
		public Patrol()
		{
		}
	}
	[Token(Token = "0x20008D9")]
	[TaskCategory("Movement")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskDescription("Pursue the target specified using the Unity NavMesh.")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}PursueIcon.png")]
	public class Pursue : NavMeshMovement
	{
		[Token(Token = "0x400301E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public SharedBool usePrediction;

		[Token(Token = "0x400301F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("How far to predict the distance ahead of the target. Lower values indicate less distance should be predicated")]
		public SharedFloat targetDistPrediction;

		[Token(Token = "0x4003020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Multiplier for predicting the look ahead distance")]
		public SharedFloat targetDistPredictionMult;

		[Token(Token = "0x4003021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The GameObject that the agent is pursuing")]
		public SharedGameObject target;

		[Token(Token = "0x4003022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public SharedBool requireAnimatorTag;

		[Token(Token = "0x4003023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public SharedGameObject animatorObject;

		[Token(Token = "0x4003024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public SharedString animatorTag;

		[Token(Token = "0x4003025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 targetPosition;

		[Token(Token = "0x4003026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Animator animator;

		[Token(Token = "0x4003027")]
		private const float MaxPursueTime = 20f;

		[Token(Token = "0x4003028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float pursueStartTime;

		[Token(Token = "0x600366F")]
		[Address(RVA = "0x1344C28", Offset = "0x1344C28", VA = "0x1344C28", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003670")]
		[Address(RVA = "0x1345110", Offset = "0x1345110", VA = "0x1345110", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003671")]
		[Address(RVA = "0x1344E8C", Offset = "0x1344E8C", VA = "0x1344E8C")]
		private Vector3 Target()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003672")]
		[Address(RVA = "0x1345424", Offset = "0x1345424", VA = "0x1345424", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003673")]
		[Address(RVA = "0x1345478", Offset = "0x1345478", VA = "0x1345478", Slot = "17")]
		public override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6003674")]
		[Address(RVA = "0x13454A0", Offset = "0x13454A0", VA = "0x13454A0")]
		public Pursue()
		{
		}
	}
	[Token(Token = "0x20008DA")]
	[TaskDescription("Queue in a line using the Unity NavMesh.")]
	[TaskCategory("Movement")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}QueueIcon.png")]
	public class Queue : NavMeshGroupMovement
	{
		[Token(Token = "0x4003029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Agents less than this distance apart are neighbors")]
		public SharedFloat neighborDistance;

		[Token(Token = "0x400302A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The distance that the agents should be separated")]
		public SharedFloat separationDistance;

		[Token(Token = "0x400302B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The distance the the agent should look ahead to see if another agent is in the way")]
		public SharedFloat maxQueueAheadDistance;

		[Token(Token = "0x400302C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The radius that the agent should check to see if another agent is in the way")]
		public SharedFloat maxQueueRadius;

		[Token(Token = "0x400302D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The multiplier to slow down if an agent is in front of the current agent")]
		public SharedFloat slowDownSpeed;

		[Token(Token = "0x400302E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The target to seek towards")]
		public SharedGameObject target;

		[Token(Token = "0x6003675")]
		[Address(RVA = "0x13454F8", Offset = "0x13454F8", VA = "0x13454F8", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003676")]
		[Address(RVA = "0x134569C", Offset = "0x134569C", VA = "0x134569C")]
		private bool AgentAhead(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6003677")]
		[Address(RVA = "0x13457DC", Offset = "0x13457DC", VA = "0x13457DC")]
		private Vector3 DetermineSeparation(int agentIndex)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003678")]
		[Address(RVA = "0x1345AC4", Offset = "0x1345AC4", VA = "0x1345AC4", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003679")]
		[Address(RVA = "0x1345B78", Offset = "0x1345B78", VA = "0x1345B78")]
		public Queue()
		{
		}
	}
	[Token(Token = "0x20008DB")]
	[TaskDescription("Rotates towards the specified rotation. The rotation can either be specified by a transform or rotation. If the transform is used then the rotation will not be used.")]
	[TaskCategory("Movement")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}RotateTowardsIcon.png")]
	public class RotateTowards : Action
	{
		[Token(Token = "0x400302F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Should the 2D version be used?")]
		public bool usePhysics2D;

		[Token(Token = "0x4003030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The agent is done rotating when the angle is less than this value")]
		public SharedFloat rotationEpsilon;

		[Token(Token = "0x4003031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum number of angles the agent can rotate in a single tick")]
		public SharedFloat maxLookAtRotationDelta;

		[Token(Token = "0x4003032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should the rotation only affect the Y axis?")]
		public SharedBool onlyY;

		[Token(Token = "0x4003033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that the agent is rotating towards")]
		public SharedGameObject target;

		[Token(Token = "0x4003034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If target is null then use the target rotation")]
		public SharedVector3 targetRotation;

		[Token(Token = "0x4003035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SharedBool useDeltaTime;

		[Token(Token = "0x600367A")]
		[Address(RVA = "0x1345C28", Offset = "0x1345C28", VA = "0x1345C28", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600367B")]
		[Address(RVA = "0x1345E54", Offset = "0x1345E54", VA = "0x1345E54")]
		private Quaternion Target()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600367C")]
		[Address(RVA = "0x1346048", Offset = "0x1346048", VA = "0x1346048", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600367D")]
		[Address(RVA = "0x1346114", Offset = "0x1346114", VA = "0x1346114")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x20008DC")]
	[TaskCategory("Movement")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskDescription("Search for a target by combining the wander, within hearing range, and the within seeing range tasks using the Unity NavMesh.")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}SearchIcon.png")]
	public class Search : NavMeshMovement
	{
		[Token(Token = "0x4003036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Minimum distance ahead of the current position to look ahead for a destination")]
		public SharedFloat minWanderDistance;

		[Token(Token = "0x4003037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Maximum distance ahead of the current position to look ahead for a destination")]
		public SharedFloat maxWanderDistance;

		[Token(Token = "0x4003038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The amount that the agent rotates direction")]
		public SharedFloat wanderRate;

		[Token(Token = "0x4003039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The minimum length of time that the agent should pause at each destination")]
		public SharedFloat minPauseDuration;

		[Token(Token = "0x400303A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The maximum length of time that the agent should pause at each destination (zero to disable)")]
		public SharedFloat maxPauseDuration;

		[Token(Token = "0x400303B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The maximum number of retries per tick (set higher if using a slow tick time)")]
		public SharedInt targetRetries;

		[Token(Token = "0x400303C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The field of view angle of the agent (in degrees)")]
		public SharedFloat fieldOfViewAngle;

		[Token(Token = "0x400303D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The distance that the agent can see")]
		public SharedFloat viewDistance;

		[Token(Token = "0x400303E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The LayerMask of the objects to ignore when performing the line of sight check")]
		public LayerMask ignoreLayerMask;

		[Token(Token = "0x400303F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Should the search end if audio was heard?")]
		public SharedBool senseAudio;

		[Token(Token = "0x4003040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("How far away the unit can hear")]
		public SharedFloat hearingRadius;

		[Token(Token = "0x4003041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The raycast offset relative to the pivot position")]
		public SharedVector3 offset;

		[Token(Token = "0x4003042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The target raycast offset relative to the pivot position")]
		public SharedVector3 targetOffset;

		[Token(Token = "0x4003043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The LayerMask of the objects that we are searching for")]
		public LayerMask objectLayerMask;

		[Token(Token = "0x4003044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("Specifies the maximum number of colliders that the physics cast can collide with")]
		public int maxCollisionCount;

		[Token(Token = "0x4003045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Should the target bone be used?")]
		public SharedBool useTargetBone;

		[Token(Token = "0x4003046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The target's bone if the target is a humanoid")]
		public HumanBodyBones targetBone;

		[Token(Token = "0x4003047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Should a debug look ray be drawn to the scene view?")]
		public SharedBool drawDebugRay;

		[Token(Token = "0x4003048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("The further away a sound source is the less likely the agent will be able to hear it. Set a threshold for the the minimum audibility level that the agent can hear")]
		public SharedFloat audibilityThreshold;

		[Token(Token = "0x4003049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("The object that is found")]
		public SharedGameObject returnedObject;

		[Token(Token = "0x400304A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool searchHands;

		[Token(Token = "0x400304B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float pauseTime;

		[Token(Token = "0x400304C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float destinationReachTime;

		[Token(Token = "0x400304D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Collider[] overlapColliders;

		[Token(Token = "0x400304E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float searchCooldownTime;

		[Token(Token = "0x400304F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float distanceCheckTime;

		[Token(Token = "0x600367E")]
		[Address(RVA = "0x1346164", Offset = "0x1346164", VA = "0x1346164", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600367F")]
		[Address(RVA = "0x1346988", Offset = "0x1346988", VA = "0x1346988")]
		private bool TrySetTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x6003680")]
		[Address(RVA = "0x1346C50", Offset = "0x1346C50", VA = "0x1346C50", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003681")]
		[Address(RVA = "0x1346DD8", Offset = "0x1346DD8", VA = "0x1346DD8")]
		public Search()
		{
		}
	}
	[Token(Token = "0x20008DD")]
	[TaskDescription("Seek the target specified using the Unity NavMesh.")]
	[TaskCategory("Movement")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}SeekIcon.png")]
	public class Seek : NavMeshMovement
	{
		[Token(Token = "0x4003050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The GameObject that the agent is seeking")]
		public SharedGameObject target;

		[Token(Token = "0x4003051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("If target is null then use the target position")]
		public SharedVector3 targetPosition;

		[Token(Token = "0x6003682")]
		[Address(RVA = "0x1346F90", Offset = "0x1346F90", VA = "0x1346F90", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003683")]
		[Address(RVA = "0x13470A0", Offset = "0x13470A0", VA = "0x13470A0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003684")]
		[Address(RVA = "0x1346FBC", Offset = "0x1346FBC", VA = "0x1346FBC")]
		private Vector3 Target()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003685")]
		[Address(RVA = "0x13470EC", Offset = "0x13470EC", VA = "0x13470EC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003686")]
		[Address(RVA = "0x1347164", Offset = "0x1347164", VA = "0x1347164")]
		public Seek()
		{
		}
	}
	[Token(Token = "0x20008DE")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}WanderIcon.png")]
	[TaskCategory("Movement")]
	[TaskDescription("Wander using the Unity NavMesh.")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	public class Wander : NavMeshMovement
	{
		[Token(Token = "0x4003052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Minimum distance ahead of the current position to look ahead for a destination")]
		public SharedFloat minWanderDistance;

		[Token(Token = "0x4003053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Maximum distance ahead of the current position to look ahead for a destination")]
		public SharedFloat maxWanderDistance;

		[Token(Token = "0x4003054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The maximum length of time that the agent should pause at each destination (zero to disable)")]
		public SharedFloat maxWanderDuration;

		[Token(Token = "0x4003055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The amount that the agent rotates direction")]
		public SharedFloat wanderRate;

		[Token(Token = "0x4003056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The minimum length of time that the agent should pause at each destination")]
		public SharedFloat minPauseDuration;

		[Token(Token = "0x4003057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The maximum length of time that the agent should pause at each destination (zero to disable)")]
		public SharedFloat maxPauseDuration;

		[Token(Token = "0x4003058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The maximum number of retries per tick (set higher if using a slow tick time)")]
		public SharedInt targetRetries;

		[Token(Token = "0x4003059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Cancel wander if target position is in water")]
		public SharedBool avoidWater;

		[Token(Token = "0x400305A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public SharedLayerMask waterLayer;

		[Token(Token = "0x400305B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public SharedLayerMask goodLayers;

		[Token(Token = "0x400305C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("")]
		public SharedBool stopWhenTargetReached;

		[Token(Token = "0x400305D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("")]
		public SharedBool checkIfInShadows;

		[Token(Token = "0x400305E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float pauseTime;

		[Token(Token = "0x400305F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float destinationReachTime;

		[Token(Token = "0x4003060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float timeToEndWander;

		[Token(Token = "0x6003687")]
		[Address(RVA = "0x1347168", Offset = "0x1347168", VA = "0x1347168", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003688")]
		[Address(RVA = "0x13477A4", Offset = "0x13477A4", VA = "0x13477A4", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003689")]
		[Address(RVA = "0x13471E8", Offset = "0x13471E8", VA = "0x13471E8")]
		private bool TrySetTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x600368A")]
		[Address(RVA = "0x13479D0", Offset = "0x13479D0", VA = "0x13479D0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600368B")]
		[Address(RVA = "0x1347A90", Offset = "0x1347A90", VA = "0x1347A90")]
		public Wander()
		{
		}
	}
	[Token(Token = "0x20008DF")]
	[TaskDescription("Check to see if the any object specified by the object list or tag is within the distance specified of the current agent.")]
	[TaskCategory("Movement")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}WithinDistanceIcon.png")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	public class WithinDistance : Conditional
	{
		[Token(Token = "0x4003061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Should the 2D version be used?")]
		public bool usePhysics2D;

		[Token(Token = "0x4003062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The object that we are searching for")]
		public SharedGameObject targetObject;

		[Token(Token = "0x4003063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The tag of the object that we are searching for")]
		public SharedString targetTag;

		[Token(Token = "0x4003064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The LayerMask of the objects that we are searching for")]
		public LayerMask objectLayerMask;

		[Token(Token = "0x4003065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The distance that the object needs to be within")]
		public SharedFloat magnitude;

		[Token(Token = "0x4003066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, the object must be within line of sight to be within distance. For example, if this option is enabled then an object behind a wall will not be within distance even though it may be physically close to the other object")]
		public SharedBool lineOfSight;

		[Token(Token = "0x4003067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The LayerMask of the objects to ignore when performing the line of sight check")]
		public LayerMask ignoreLayerMask;

		[Token(Token = "0x4003068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The raycast offset relative to the pivot position")]
		public SharedVector3 offset;

		[Token(Token = "0x4003069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The target raycast offset relative to the pivot position")]
		public SharedVector3 targetOffset;

		[Token(Token = "0x400306A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Should a debug look ray be drawn to the scene view?")]
		public SharedBool drawDebugRay;

		[Token(Token = "0x400306B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<GameObject> objects;

		[Token(Token = "0x400306C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float sqrMagnitude;

		[Token(Token = "0x400306D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool overlapCast;

		[Token(Token = "0x600368C")]
		[Address(RVA = "0x1347B74", Offset = "0x1347B74", VA = "0x1347B74", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600368D")]
		[Address(RVA = "0x1347E80", Offset = "0x1347E80", VA = "0x1347E80", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600368E")]
		[Address(RVA = "0x1348540", Offset = "0x1348540", VA = "0x1348540", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600368F")]
		[Address(RVA = "0x13486CC", Offset = "0x13486CC", VA = "0x13486CC", Slot = "17")]
		public override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6003690")]
		[Address(RVA = "0x13486D0", Offset = "0x13486D0", VA = "0x13486D0")]
		public WithinDistance()
		{
		}
	}
	[Token(Token = "0x20008E0")]
	[TaskCategory("Attack")]
	[TaskDescription("Attack the taget")]
	public class FungiShrimpAttack : NavMeshMovement
	{
		[Token(Token = "0x400306E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("How far to predict the distance ahead of the target. Lower values indicate less distance should be predicated")]
		public SharedFloat targetDistPrediction;

		[Token(Token = "0x400306F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Multiplier for predicting the look ahead distance")]
		public SharedFloat targetDistPredictionMult;

		[Token(Token = "0x4003070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The GameObject that the agent is attacking")]
		public SharedGameObject target;

		[Token(Token = "0x4003071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Attack position")]
		public SharedVector3 returnedAttackPosition;

		[Token(Token = "0x4003072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Time to wait")]
		public SharedFloat cooldownTime;

		[Token(Token = "0x4003073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Cooldown until")]
		public SharedFloat cooldownUntil;

		[Token(Token = "0x4003074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 targetPosition;

		[Token(Token = "0x6003691")]
		[Address(RVA = "0x1348754", Offset = "0x1348754", VA = "0x1348754", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6003692")]
		[Address(RVA = "0x1348820", Offset = "0x1348820", VA = "0x1348820", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003693")]
		[Address(RVA = "0x1348C14", Offset = "0x1348C14", VA = "0x1348C14")]
		private Vector3 GetAttackPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003694")]
		[Address(RVA = "0x1348E54", Offset = "0x1348E54", VA = "0x1348E54", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003695")]
		[Address(RVA = "0x1348EA8", Offset = "0x1348EA8", VA = "0x1348EA8")]
		public FungiShrimpAttack()
		{
		}
	}
	[Token(Token = "0x20008E1")]
	[TaskCategory("Utility")]
	[TaskDescription("Is this on cooldown")]
	public class HasCooldown : Conditional
	{
		[Token(Token = "0x4003075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Cooldown until")]
		public SharedFloat cooldownUntil;

		[Token(Token = "0x6003696")]
		[Address(RVA = "0x1348F1C", Offset = "0x1348F1C", VA = "0x1348F1C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x6003697")]
		[Address(RVA = "0x1348F90", Offset = "0x1348F90", VA = "0x1348F90", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6003698")]
		[Address(RVA = "0x1348FC4", Offset = "0x1348FC4", VA = "0x1348FC4")]
		public HasCooldown()
		{
		}
	}
	[Token(Token = "0x20008E2")]
	[TaskDescription("Has the player stuff in hands")]
	[TaskCategory("Utility")]
	public class HasPlayerItemsInHands : Conditional
	{
		[Token(Token = "0x4003076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SharedGameObject playerTargetHead;

		[Token(Token = "0x6003699")]
		[Address(RVA = "0x1348FCC", Offset = "0x1348FCC", VA = "0x1348FCC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600369A")]
		[Address(RVA = "0x134915C", Offset = "0x134915C", VA = "0x134915C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600369B")]
		[Address(RVA = "0x13491BC", Offset = "0x13491BC", VA = "0x13491BC")]
		public HasPlayerItemsInHands()
		{
		}
	}
	[Token(Token = "0x20008E3")]
	[TaskCategory("Attack")]
	[TaskDescription("Attack the taget")]
	public class RangedAttack : Action
	{
		[Token(Token = "0x4003077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that the agent is attacking")]
		public SharedGameObject target;

		[Token(Token = "0x4003078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Attack position")]
		public SharedVector3 returnedAttackPosition;

		[Token(Token = "0x600369C")]
		[Address(RVA = "0x13491C4", Offset = "0x13491C4", VA = "0x13491C4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600369D")]
		[Address(RVA = "0x13491CC", Offset = "0x13491CC", VA = "0x13491CC", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x600369E")]
		[Address(RVA = "0x134939C", Offset = "0x134939C", VA = "0x134939C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x600369F")]
		[Address(RVA = "0x13493A4", Offset = "0x13493A4", VA = "0x13493A4")]
		public RangedAttack()
		{
		}
	}
	[Token(Token = "0x20008E4")]
	[TaskDescription("Rotates towards the specified rotation. The rotation can either be specified by a transform or rotation. If the transform is used then the rotation will not be used.")]
	[TaskCategory("Movement")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}RotateTowardsIcon.png")]
	public class RotateAwayDOTween : Action
	{
		[Token(Token = "0x4003079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The agent is done rotating when the angle is less than this value")]
		public SharedFloat rotationEpsilon;

		[Token(Token = "0x400307A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum number of angles the agent can rotate in a single tick")]
		public SharedFloat rotateTime;

		[Token(Token = "0x400307B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should the rotation only affect the Y axis?")]
		public SharedBool onlyY;

		[Token(Token = "0x400307C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that the agent is rotating towards")]
		public SharedGameObject target;

		[Token(Token = "0x400307D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If target is null then use the target rotation")]
		public SharedVector3 targetRotation;

		[Token(Token = "0x400307E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Ease easeType;

		[Token(Token = "0x400307F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Tweener _tweener;

		[Token(Token = "0x4003080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion _targetRotation;

		[Token(Token = "0x60036A0")]
		[Address(RVA = "0x13493AC", Offset = "0x13493AC", VA = "0x13493AC", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60036A1")]
		[Address(RVA = "0x1349620", Offset = "0x1349620", VA = "0x1349620", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60036A2")]
		[Address(RVA = "0x13494A0", Offset = "0x13494A0", VA = "0x13494A0")]
		private Quaternion Target()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60036A3")]
		[Address(RVA = "0x1349720", Offset = "0x1349720", VA = "0x1349720", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60036A4")]
		[Address(RVA = "0x13497E8", Offset = "0x13497E8", VA = "0x13497E8")]
		public RotateAwayDOTween()
		{
		}
	}
	[Token(Token = "0x20008E5")]
	[TaskDescription("Rotates towards the specified rotation. The rotation can either be specified by a transform or rotation. If the transform is used then the rotation will not be used.")]
	[TaskCategory("Movement")]
	[HelpURL("https://www.opsive.com/support/documentation/behavior-designer-movement-pack/")]
	[TaskIcon("Assets/Behavior Designer Movement/Editor/Icons/{SkinColor}RotateTowardsIcon.png")]
	public class RotateTowardsDOTween : Action
	{
		[Token(Token = "0x4003081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The agent is done rotating when the angle is less than this value")]
		public SharedFloat rotationEpsilon;

		[Token(Token = "0x4003082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum number of angles the agent can rotate in a single tick")]
		public SharedFloat rotateTime;

		[Token(Token = "0x4003083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should the rotation only affect the Y axis?")]
		public SharedBool onlyY;

		[Token(Token = "0x4003084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that the agent is rotating towards")]
		public SharedGameObject target;

		[Token(Token = "0x4003085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If target is null, then use the target position")]
		public SharedVector3 targetPosition;

		[Token(Token = "0x4003086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If target and target position is null then use the target rotation")]
		public SharedVector3 targetRotation;

		[Token(Token = "0x4003087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Ease easeType;

		[Token(Token = "0x4003088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Tweener _tweener;

		[Token(Token = "0x4003089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion _targetRotation;

		[Token(Token = "0x60036A5")]
		[Address(RVA = "0x1349838", Offset = "0x1349838", VA = "0x1349838", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60036A6")]
		[Address(RVA = "0x1349B1C", Offset = "0x1349B1C", VA = "0x1349B1C", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60036A7")]
		[Address(RVA = "0x134992C", Offset = "0x134992C", VA = "0x134992C")]
		private Quaternion Target()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60036A8")]
		[Address(RVA = "0x1349C1C", Offset = "0x1349C1C", VA = "0x1349C1C", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60036A9")]
		[Address(RVA = "0x1349CE4", Offset = "0x1349CE4", VA = "0x1349CE4")]
		public RotateTowardsDOTween()
		{
		}
	}
	[Token(Token = "0x20008E6")]
	[TaskCategory("Utility")]
	[TaskDescription("Sets cooldownUntil to Time.time + cooldownPeriod")]
	public class SetCooldown : Action
	{
		[Token(Token = "0x400308A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Cooldown until time")]
		public SharedFloat cooldownUntil;

		[Token(Token = "0x400308B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How much cooldown")]
		public SharedFloat cooldownPeriod;

		[Token(Token = "0x60036AA")]
		[Address(RVA = "0x1349D34", Offset = "0x1349D34", VA = "0x1349D34", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60036AB")]
		[Address(RVA = "0x1349DCC", Offset = "0x1349DCC", VA = "0x1349DCC", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60036AC")]
		[Address(RVA = "0x1349E1C", Offset = "0x1349E1C", VA = "0x1349E1C")]
		public SetCooldown()
		{
		}
	}
	[Token(Token = "0x20008E7")]
	[TaskCategory("Attack")]
	[TaskDescription("Attack the taget")]
	public class ShrimpAttack : NavMeshMovement
	{
		[Token(Token = "0x400308C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("How far to predict the distance ahead of the target. Lower values indicate less distance should be predicated")]
		public SharedFloat targetDistPrediction;

		[Token(Token = "0x400308D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Multiplier for predicting the look ahead distance")]
		public SharedFloat targetDistPredictionMult;

		[Token(Token = "0x400308E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The GameObject that the agent is attacking")]
		public SharedGameObject target;

		[Token(Token = "0x400308F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Attack position")]
		public SharedVector3 returnedAttackPosition;

		[Token(Token = "0x4003090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Time to wait")]
		public SharedFloat cooldownTime;

		[Token(Token = "0x4003091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Cooldown until")]
		public SharedFloat cooldownUntil;

		[Token(Token = "0x4003092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 targetPosition;

		[Token(Token = "0x60036AD")]
		[Address(RVA = "0x1349E24", Offset = "0x1349E24", VA = "0x1349E24", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60036AE")]
		[Address(RVA = "0x1349EF0", Offset = "0x1349EF0", VA = "0x1349EF0", Slot = "6")]
		public override TaskStatus OnUpdate()
		{
			return default(TaskStatus);
		}

		[Token(Token = "0x60036AF")]
		[Address(RVA = "0x134A370", Offset = "0x134A370", VA = "0x134A370")]
		private Vector3 GetAttackPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60036B0")]
		[Address(RVA = "0x134A5B0", Offset = "0x134A5B0", VA = "0x134A5B0", Slot = "16")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x60036B1")]
		[Address(RVA = "0x134A604", Offset = "0x134A604", VA = "0x134A604")]
		public ShrimpAttack()
		{
		}
	}
}
