using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Security;
using System.Text;
using System.Threading;
using System.Xml;
using AK.Wwise;
using Artngame.GIPROXY;
using Artngame.SKYMASTER;
using Ergo;
using Ergo.Animation;
using GloomyEyes.MaterialProperties;
using Holoville.HOTween;
using Holoville.HOTween.Core;
using Il2CppDummyDll;
using LitJson;
using Pvr_UnitySDKAPI;
using Pvr_UnitySDKAPI.Achievement;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.PostProcessing;
using UnityEngine.SceneManagement;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using VLB;
using VRStandardAssets.Utils;
using Valve.VR;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class ge_fx_sceneControls : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cam1;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject cam2;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject cam3;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject cam4;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject cam5;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject cam6;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject reset;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject q;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject w;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject e;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x160B268", Offset = "0x160B268", VA = "0x160B268")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x160B2FC", Offset = "0x160B2FC", VA = "0x160B2FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x160B7A8", Offset = "0x160B7A8", VA = "0x160B7A8")]
	public ge_fx_sceneControls()
	{
	}
}
[Token(Token = "0x2000003")]
public class UVAnimation : MonoBehaviour
{
	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int uvTileY;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int uvTileX;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int fps;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int index;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 size;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 offset;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer objRenderer;

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xA7B034", Offset = "0xA7B034", VA = "0xA7B034")]
	private void Start()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xA7B08C", Offset = "0xA7B08C", VA = "0xA7B08C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xA7B1D0", Offset = "0xA7B1D0", VA = "0xA7B1D0")]
	public UVAnimation()
	{
	}
}
[Token(Token = "0x2000004")]
public class wasd : MonoBehaviour
{
	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float mainSpeed;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float shiftAdd;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float maxShift;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float camSens;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 lastMouse;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float totalRun;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x160B9D4", Offset = "0x160B9D4", VA = "0x160B9D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x160BDD4", Offset = "0x160BDD4", VA = "0x160BDD4")]
	private Vector3 GetBaseInput()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x160C020", Offset = "0x160C020", VA = "0x160C020")]
	public wasd()
	{
	}
}
[Token(Token = "0x2000005")]
public class StormController : MonoBehaviour
{
	[Token(Token = "0x200039B")]
	public enum State
	{
		[Token(Token = "0x4001EF4")]
		Wait,
		[Token(Token = "0x4001EF5")]
		Storm,
		[Token(Token = "0x4001EF6")]
		Freeze,
		[Token(Token = "0x4001EF7")]
		Ended
	}

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D8EF0", Offset = "0x7D8EF0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7D8EF0", Offset = "0x7D8EF0")]
	public Camera followCamera;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material frozenMaterial;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material frozenMaterialInstanced;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject stormPS;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float time;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float timeWait;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float timeStorm;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float timeFreeze;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private State state;

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xA76090", Offset = "0xA76090", VA = "0xA76090")]
	private void Start()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xA763C0", Offset = "0xA763C0", VA = "0xA763C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xA760B4", Offset = "0xA760B4", VA = "0xA760B4")]
	private void CreateFrozenPlane()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xA764FC", Offset = "0xA764FC", VA = "0xA764FC")]
	private void SetFreezeFactor(float value)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xA76568", Offset = "0xA76568", VA = "0xA76568")]
	public StormController()
	{
	}
}
[Token(Token = "0x2000006")]
public class FireBurstController : MonoBehaviour
{
	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem burstPS;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem firePS;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.EmissionModule burstEM;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.EmissionModule fireEM;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int burstInitialAmount;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int fireInitialAmount;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int burstCurrentAmount;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int fireCurrentAmount;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float time;

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xADD200", Offset = "0xADD200", VA = "0xADD200")]
	private void Start()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xADD254", Offset = "0xADD254", VA = "0xADD254")]
	private void Update()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xADD438", Offset = "0xADD438", VA = "0xADD438")]
	public FireBurstController()
	{
	}
}
[Token(Token = "0x2000007")]
public class FootprintController : MonoBehaviour
{
	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem ps;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float particleOffset;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] feet;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MeshCollider meshColliderToCheck;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3[] lastPosition;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Ray ray;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private RaycastHit info;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private ParticleSystem.EmitParams emitParams;

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xADDC18", Offset = "0xADDC18", VA = "0xADDC18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xADDCD0", Offset = "0xADDCD0", VA = "0xADDCD0")]
	public void EmitFootprint(int footIndex)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xADE024", Offset = "0xADE024", VA = "0xADE024")]
	public FootprintController()
	{
	}
}
[Token(Token = "0x2000008")]
public class ParticleSystemFilter : MonoBehaviour
{
	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool showMain;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[HideInInspector]
	public bool showEmission;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[HideInInspector]
	public bool showShape;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[HideInInspector]
	public bool showVelocityOverLifetime;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public bool showLimitVelocityOverLifetime;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[HideInInspector]
	public bool showInheritVelocity;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[HideInInspector]
	public bool showLifetimeByEmitterSpeed;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[HideInInspector]
	public bool showForceOverLifetime;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public bool showColorOverLifetime;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[HideInInspector]
	public bool showColorBySpeed;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	[HideInInspector]
	public bool showSizeOverLifetime;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	[HideInInspector]
	public bool showSizeBySpeed;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public bool showRotationOverLifetime;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[HideInInspector]
	public bool showRotationBySpeed;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	[HideInInspector]
	public bool showExternalForces;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
	[HideInInspector]
	public bool showNoise;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public bool showCollision;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[HideInInspector]
	public bool showTrigger;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	[HideInInspector]
	public bool showSubEmitters;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	[HideInInspector]
	public bool showTextureSheetAnimation;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public bool showLights;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[HideInInspector]
	public bool showTrail;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	[HideInInspector]
	public bool showCustomData;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	[HideInInspector]
	public bool showRenderer;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public bool showVoLLinear;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[HideInInspector]
	public bool showVoLOrbital;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[HideInInspector]
	public bool showVoLOffset;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9100", Offset = "0x7D9100")]
	public bool duration;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool loop;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool prewarm;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool startDelay;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool startLifetime;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool startSpeed;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool startSize3D;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool startSize;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	public bool startRotation3D;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool startRotation;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool flipRotation;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	public bool startColor;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	public bool gravityModifier;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool simulationSpace;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool simulationSpeed;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool useUnscaledTime;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	public bool scalingMode;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool playOnAwake;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool maxParticles;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	public bool emitterVelocityMode;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	public bool stopAction;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool ringBuffer;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool cullingMode;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9138", Offset = "0x7D9138")]
	public bool bursts;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	public bool emissionEnabled;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool rateOverTime;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool rateOverDistance;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9170", Offset = "0x7D9170")]
	public bool shapeEnabled;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
	public bool shapeType;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool texture;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool position;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	public bool rotation;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	public bool scale;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool alignToDirection;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool randomDirectionAmount;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool sphericalDirectionAmount;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
	public bool randomPositionAmount;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D91A8", Offset = "0x7D91A8")]
	public bool velocityOverLifetimeEnabled;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool linearX;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	public bool linearY;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
	public bool linearZ;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool orbitalX;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool orbitalY;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	public bool orbitalZ;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	public bool orbitalOffsetX;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool orbitalOffsetY;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool orbitalOffsetZ;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool radial;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool speedModifier;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool velocityOverLifetimeSpace;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D91E0", Offset = "0x7D91E0")]
	public bool limitVelocityOverLifetimeEnabled;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool separateAxes;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	public bool limitX;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool limitY;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool limitZ;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool limit;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	public bool dampen;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool limitVelocityOverLifetimeSpace;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	public bool drag;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
	public bool multiplyDragByParticleSize;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
	public bool multiplyDragByParticleVelocity;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9218", Offset = "0x7D9218")]
	public bool inheritVelocityEnabled;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool inheritVelocityMode;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool inheritVelocityCurve;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9250", Offset = "0x7D9250")]
	public bool lifetimeByEmitterSpeedEnabled;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public bool lifetimeByEmitterSpeedCurve;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	public bool lifetimeByEmitterSpeedCurveMultiplier;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
	public bool lifetimeByEmitterSpeedRange;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x77")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9288", Offset = "0x7D9288")]
	public bool forceOverLifetimeEnabled;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool forceOverLifetimeX;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool forceOverLifetimeY;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	public bool forceOverLifetimeZ;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
	public bool forceOverLifetimeSpace;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool randomized;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D92C0", Offset = "0x7D92C0")]
	public bool colorOverLifetimeEnabled;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
	public bool colorOverLifetimeColor;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D92F8", Offset = "0x7D92F8")]
	public bool colorBySpeedEnabled;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool colorBySpeedColor;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	public bool colorBySpeedRange;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9330", Offset = "0x7D9330")]
	public bool sizeOverLifetimeEnabled;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
	public bool sizeOverLifetimeSize;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool sizeOverLifetimeX;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	public bool sizeOverLifetimeY;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x86")]
	public bool sizeOverLifetimeZ;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x87")]
	public bool sizeOverLifetimeSeparateAxes;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9368", Offset = "0x7D9368")]
	public bool sizeBySpeedEnabled;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	public bool sizeBySpeedSize;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
	public bool sizeBySpeedX;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
	public bool sizeBySpeedY;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool sizeBySpeedZ;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	public bool sizeBySpeedSeparateAxes;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8E")]
	public bool sizeBySpeedRange;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8F")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D93A0", Offset = "0x7D93A0")]
	public bool rotationOverLifetimeEnabled;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool rotationOverLifetimeX;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	public bool rotationOverLifetimeY;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
	public bool rotationOverLifetimeZ;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
	public bool rotationOverLifetimeSeparateAxes;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D93D8", Offset = "0x7D93D8")]
	public bool rotationBySpeedEnabled;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	public bool rotationBySpeedX;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
	public bool rotationBySpeedY;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x97")]
	public bool rotationBySpeedZ;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool rotationBySpeedSeparateAxes;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	public bool rotationBySpeedRange;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9410", Offset = "0x7D9410")]
	public bool externalForcesEnabled;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
	public bool externalForcesMultiplierCurve;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool influenceFilter;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	public bool influenceMask;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
	public bool influenceList;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9448", Offset = "0x7D9448")]
	public bool noiseEnabled;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool noiseSeparateAxes;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	public bool noiseStrength;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
	public bool noiseFrequency;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
	public bool noiseDamping;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public bool octaveCount;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
	public bool octaveMultiplier;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
	public bool octaveScale;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA7")]
	public bool noiseQuality;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool scrollSpeed;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	public bool remap;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
	public bool positionAmount;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAB")]
	public bool rotationAmount;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool sizeAmount;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9480", Offset = "0x7D9480")]
	public bool collisionEnabled;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
	public bool collisionType;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
	public bool collisionMode;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool collisionDampen;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	public bool collisionBounce;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	public bool collisionLifetimeLoss;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
	public bool minKillSpeed;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public bool maxKillSpeed;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
	public bool collidesWith;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB6")]
	public bool enableDynamicColliders;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB7")]
	public bool maxCollisionShapes;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public bool collisionQuality;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	public bool voxelSize;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	public bool collisionRadiusScale;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBB")]
	public bool sendCollisionMessages;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public bool colliderForce;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	public bool multiplyColliderForceByCollisionAngle;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
	public bool multiplyColliderForceByParticleSpeed;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBF")]
	public bool multiplyColliderForceByParticleSize;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D94B8", Offset = "0x7D94B8")]
	public bool triggerEnabled;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	public bool triggerColliders;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
	public bool inside;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
	public bool outside;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public bool enter;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
	public bool exit;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC6")]
	public bool triggerRadiusScale;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC7")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D94F0", Offset = "0x7D94F0")]
	public bool subEmittersEnabled;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public bool subEmitters;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9528", Offset = "0x7D9528")]
	public bool textureSheetAnimationEnabled;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	public bool animationMode;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCB")]
	public bool animationTimeMode;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public bool fps;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
	public bool numTiles;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
	public bool animationType;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
	public bool frameOverTime;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public bool startFrame;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	public bool cycleCount;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
	public bool rowIndex;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
	public bool uvChannelMask;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool speedRange;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9560", Offset = "0x7D9560")]
	public bool lightsEnabled;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
	public bool lightsLight;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD7")]
	public bool lightsRatio;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public bool useRandomDistribution;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
	public bool useParticleColor;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
	public bool sizeAffectsRange;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
	public bool alphaAffectsIntensity;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public bool lightsRange;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDD")]
	public bool lightsIntensity;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDE")]
	public bool maxLights;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDF")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9598", Offset = "0x7D9598")]
	public bool trailEnabled;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public bool trailMode;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	public bool trailRatio;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
	public bool trailLifetime;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE3")]
	public bool minVertexDistance;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public bool textureMode;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
	public bool worldSpace;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE6")]
	public bool dieWithParticles;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE7")]
	public bool sizeAffectsWidth;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public bool sizeAffectsLifetime;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
	public bool inheritParticleColor;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEA")]
	public bool colorOverLifetime;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEB")]
	public bool widthOverTrail;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public bool colorOverTrail;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
	public bool generateLightingData;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEE")]
	public bool ribbonCount;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEF")]
	public bool shadowBias;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool splitSubEmitterRibbons;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
	public bool attachRibbonsToTransform;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D95D0", Offset = "0x7D95D0")]
	public bool customDataEnabled;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF3")]
	public bool customData;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9608", Offset = "0x7D9608")]
	public bool rendererEnabled;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
	public bool renderMode;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
	public bool normalDirection;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF7")]
	public bool material;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public bool trailMaterial;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
	public bool sortMode;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
	public bool sortingFudge;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFB")]
	public bool minParticleSize;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public bool maxParticleSize;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
	public bool alignment;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFE")]
	public bool flip;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFF")]
	public bool allowRoll;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool pivot;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	public bool maskInteraction;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
	public bool cameraVelocityScale;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x103")]
	public bool velocityScale;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public bool lengthScale;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
	public bool mesh;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x106")]
	public bool enableGPUInstancing;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x107")]
	public bool shadowCastingMode;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public bool receiveShadows;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	public bool rendererShadowBias;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
	public bool motionVectorGenerationMode;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10B")]
	public bool sortingLayer;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public bool lightProbeUsage;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
	public bool reflectionProbeUsage;

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x9F0840", Offset = "0x9F0840", VA = "0x9F0840")]
	public ParticleSystemFilter()
	{
	}
}
[Token(Token = "0x2000009")]
public class ParticleSystemPackage : ProfilePackage
{
	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public ParticleSystem[] templates;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem[] targets;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem target;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystemFilter filter;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem lastDeterminantTemplate;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Component[] oldColliders;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<SubEmitter> subEmittersList;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float currentInterpolation;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ParticleSystem currentTemplate;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ParticleSystem nextTemplate;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ParticleSystem determinantTemplate;

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x9F0848", Offset = "0x9F0848", VA = "0x9F0848", Slot = "4")]
	public override void Interpolate(float t, int totalInterpolation, float currentInterpolation)
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x9F09EC", Offset = "0x9F09EC", VA = "0x9F09EC")]
	private void InterpolateTarget(ParticleSystem target)
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xA00270", Offset = "0xA00270", VA = "0xA00270")]
	private SubEmitter[] CreateSubEmitters(ParticleSystem ps)
	{
		return null;
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xA00420", Offset = "0xA00420", VA = "0xA00420")]
	private SubEmitter FindSubEmitterSystem(ParticleSystem ps)
	{
		return null;
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xA00558", Offset = "0xA00558", VA = "0xA00558")]
	private void ReturnSubEmitterSystem(SubEmitter subEmitter)
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xA005BC", Offset = "0xA005BC", VA = "0xA005BC")]
	private ParticleSystem GetSubEmitterSystem(ParticleSystem target, SubEmitter subEmitter)
	{
		return null;
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x9FF804", Offset = "0x9FF804", VA = "0x9FF804")]
	private ParticleSystem.MinMaxGradient GetMinMaxGradient(ParticleSystem.MinMaxGradient mainGradient, ParticleSystem.MinMaxGradient currentIndexGradient, ParticleSystem.MinMaxGradient nextIndexGradient)
	{
		return default(ParticleSystem.MinMaxGradient);
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xA00630", Offset = "0xA00630", VA = "0xA00630")]
	private Gradient GetDefaultGradient()
	{
		return null;
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x9FF494", Offset = "0x9FF494", VA = "0x9FF494")]
	private ParticleSystem.MinMaxCurve GetMinMaxCurve(ParticleSystemCurveMode mainCurveMode, ParticleSystem.MinMaxCurve currentIndexCurve, ParticleSystem.MinMaxCurve nextIndexCurve)
	{
		return default(ParticleSystem.MinMaxCurve);
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xA00C90", Offset = "0xA00C90", VA = "0xA00C90")]
	private AnimationCurve LerpCurve(AnimationCurve currentCurve, AnimationCurve nextCurve)
	{
		return null;
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xA00758", Offset = "0xA00758", VA = "0xA00758")]
	private Gradient LerpGradient(Gradient currentGradient, Gradient nextGradient)
	{
		return null;
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x9FFB54", Offset = "0x9FFB54", VA = "0x9FFB54")]
	private void CheckExternalForcesList(ParticleSystem determinantTemplate, ParticleSystem.ExternalForcesModule externalForces)
	{
	}

	[Token(Token = "0x6000022")]
	private bool CompareArray<T>(T[] arrayA, T[] arrayB)
	{
		return default(bool);
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xA00018", Offset = "0xA00018", VA = "0xA00018")]
	private bool CompareCustomData(CustomData dataA, CustomData dataB)
	{
		return default(bool);
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x9FFC64", Offset = "0x9FFC64", VA = "0x9FFC64")]
	private Component[] GetColliders(ParticleSystem.TriggerModule trigger)
	{
		return null;
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x9FFE68", Offset = "0x9FFE68", VA = "0x9FFE68")]
	private CustomData GetCustomData(ParticleSystem.CustomDataModule customData, ParticleSystemCustomData data)
	{
		return null;
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xA00174", Offset = "0xA00174", VA = "0xA00174")]
	private void SetCustomData(ParticleSystem.CustomDataModule customData, ParticleSystemCustomData data, CustomData newCustomData)
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xA00FD0", Offset = "0xA00FD0", VA = "0xA00FD0")]
	public ParticleSystemPackage()
	{
	}
}
[Token(Token = "0x200000A")]
public class SubEmitter
{
	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ParticleSystem parent;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystemSubEmitterType type;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem system;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystemSubEmitterProperties inherit;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float emitProbability;

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xA76570", Offset = "0xA76570", VA = "0xA76570")]
	public SubEmitter()
	{
	}
}
[Token(Token = "0x200000B")]
public class CustomData
{
	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ParticleSystemCustomDataMode mode;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem.MinMaxGradient gradient;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ParticleSystem.MinMaxCurve[] curves;

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x9C1368", Offset = "0x9C1368", VA = "0x9C1368")]
	public CustomData()
	{
	}
}
[Token(Token = "0x200000C")]
public class InterpolationParent : InterpolationData
{
	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InterpolationData[] children;

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xA595D0", Offset = "0xA595D0", VA = "0xA595D0", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xA596C4", Offset = "0xA596C4", VA = "0xA596C4")]
	public InterpolationParent()
	{
	}
}
[Token(Token = "0x200000D")]
public class InterpolationProfileManager : InterpolationData
{
	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ProfilePackage[] packages;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool canInterpolate;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9680", Offset = "0x7D9680")]
	[SerializeField]
	private int totalInterpolation;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float currentInterpolation;

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xA59C08", Offset = "0xA59C08", VA = "0xA59C08", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xA59D24", Offset = "0xA59D24", VA = "0xA59D24")]
	public InterpolationProfileManager()
	{
	}
}
[Token(Token = "0x200000E")]
public abstract class ProfilePackage : MonoBehaviour
{
	[Token(Token = "0x600002E")]
	public abstract void Interpolate(float t, int totalInterpolation, float currentInterpolation);

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x13E8900", Offset = "0x13E8900", VA = "0x13E8900")]
	protected ProfilePackage()
	{
	}
}
[Token(Token = "0x200000F")]
[ExecuteInEditMode]
public class FollowTarget : MonoBehaviour
{
	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D96DC", Offset = "0x7D96DC")]
	public string nameTarget;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Transform> targets;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int currentTarget;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9714", Offset = "0x7D9714")]
	public bool x;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool y;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool z;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public bool useOffset;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 offset;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xADD950", Offset = "0xADD950", VA = "0xADD950")]
	private void Update()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xADDC00", Offset = "0xADDC00", VA = "0xADDC00")]
	public void NextTarget()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xADDC10", Offset = "0xADDC10", VA = "0xADDC10")]
	public FollowTarget()
	{
	}
}
[Token(Token = "0x2000010")]
public class InterpolationMaterialSetterFloat : InterpolationMaterialGetter
{
	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string targetName;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string parameter;

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xA5870C", Offset = "0xA5870C", VA = "0xA5870C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xA5885C", Offset = "0xA5885C", VA = "0xA5885C", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xA58960", Offset = "0xA58960", VA = "0xA58960")]
	public InterpolationMaterialSetterFloat()
	{
	}
}
[Token(Token = "0x2000011")]
[ExecuteInEditMode]
public class InterpolationMaterialSetterVector : InterpolationMaterialGetter
{
	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float B;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float C;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float D;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private string variableName;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector4 vectorResult;

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xA59050", Offset = "0xA59050", VA = "0xA59050", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xA591FC", Offset = "0xA591FC", VA = "0xA591FC")]
	public InterpolationMaterialSetterVector()
	{
	}
}
[Token(Token = "0x2000012")]
[ExecuteInEditMode]
public class Attachment : MonoBehaviour
{
	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected Transform attachedTo;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool doNotAttach;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool forceRotation;

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x9B5C10", Offset = "0x9B5C10", VA = "0x9B5C10")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x9B5C54", Offset = "0x9B5C54", VA = "0x9B5C54")]
	public void Attach()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x9B5C8C", Offset = "0x9B5C8C", VA = "0x9B5C8C")]
	public void ForceAttach()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x9B5DE4", Offset = "0x9B5DE4", VA = "0x9B5DE4")]
	public Attachment()
	{
	}
}
[Token(Token = "0x2000013")]
[ExecuteInEditMode]
public class AttachmentCharacter : Attachment
{
	[Token(Token = "0x600003C")]
	[Address(RVA = "0x9B5DEC", Offset = "0x9B5DEC", VA = "0x9B5DEC")]
	public AttachmentCharacter()
	{
	}
}
[Token(Token = "0x2000014")]
[ExecuteInEditMode]
public class AttachmentFollow : MonoBehaviour
{
	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected Transform attachedTo;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector3 permanentWorldRotation;

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x9B5DF4", Offset = "0x9B5DF4", VA = "0x9B5DF4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x9B5F30", Offset = "0x9B5F30", VA = "0x9B5F30")]
	public AttachmentFollow()
	{
	}
}
[Token(Token = "0x2000015")]
public class AttachmentsForceAwake : MonoBehaviour
{
	[Token(Token = "0x600003F")]
	[Address(RVA = "0x9B5F38", Offset = "0x9B5F38", VA = "0x9B5F38")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x9B60D8", Offset = "0x9B60D8", VA = "0x9B60D8")]
	public AttachmentsForceAwake()
	{
	}
}
[Token(Token = "0x2000016")]
public class AudioManager : MonoBehaviour
{
	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AudioManager Instance;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool paused;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool usingWwise;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool pauseForced;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[SerializeField]
	private bool manualAudioPause;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<AudioSource> sourcesStopped;

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x9B65F0", Offset = "0x9B65F0", VA = "0x9B65F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x9B6644", Offset = "0x9B6644", VA = "0x9B6644")]
	private void Start()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x9B6648", Offset = "0x9B6648", VA = "0x9B6648")]
	public void PauseResume()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x9B6660", Offset = "0x9B6660", VA = "0x9B6660")]
	public void Pause(bool soft = false)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x9B67BC", Offset = "0x9B67BC", VA = "0x9B67BC")]
	public void Resume(bool soft = false)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x9B6970", Offset = "0x9B6970", VA = "0x9B6970")]
	public AudioManager()
	{
	}
}
[Token(Token = "0x2000017")]
public class AudioSourceTrigger : MonoBehaviour
{
	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioSource[] audioSources;

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x9B6978", Offset = "0x9B6978", VA = "0x9B6978")]
	public void Trigger(int index)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x9B6A6C", Offset = "0x9B6A6C", VA = "0x9B6A6C")]
	public AudioSourceTrigger()
	{
	}
}
[Token(Token = "0x2000018")]
public static class Bezier
{
	[Token(Token = "0x6000049")]
	[Address(RVA = "0x9B7308", Offset = "0x9B7308", VA = "0x9B7308")]
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x9B7494", Offset = "0x9B7494", VA = "0x9B7494")]
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x9B75F0", Offset = "0x9B75F0", VA = "0x9B75F0")]
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x9B77E8", Offset = "0x9B77E8", VA = "0x9B77E8")]
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000019")]
public enum BezierControlPointMode
{
	[Token(Token = "0x400015C")]
	Free,
	[Token(Token = "0x400015D")]
	Aligned,
	[Token(Token = "0x400015E")]
	Mirrored
}
[Token(Token = "0x200001A")]
public class BezierSpline : MonoBehaviour
{
	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3[] points;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BezierControlPointMode[] modes;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool loop;

	[Token(Token = "0x17000001")]
	public bool Loop
	{
		[Token(Token = "0x600004D")]
		[Address(RVA = "0x9B7A28", Offset = "0x9B7A28", VA = "0x9B7A28")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600004E")]
		[Address(RVA = "0x9B7A30", Offset = "0x9B7A30", VA = "0x9B7A30")]
		set
		{
		}
	}

	[Token(Token = "0x17000002")]
	public int ControlPointCount
	{
		[Token(Token = "0x600004F")]
		[Address(RVA = "0x9B7F70", Offset = "0x9B7F70", VA = "0x9B7F70")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000003")]
	public int CurveCount
	{
		[Token(Token = "0x6000055")]
		[Address(RVA = "0x9B83E8", Offset = "0x9B83E8", VA = "0x9B83E8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x9B7F90", Offset = "0x9B7F90", VA = "0x9B7F90")]
	public Vector3 GetControlPoint(int index)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x9B7AAC", Offset = "0x9B7AAC", VA = "0x9B7AAC")]
	public void SetControlPoint(int index, Vector3 point)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x9B82D8", Offset = "0x9B82D8", VA = "0x9B82D8")]
	public BezierControlPointMode GetControlPointMode(int index)
	{
		return default(BezierControlPointMode);
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x9B8338", Offset = "0x9B8338", VA = "0x9B8338")]
	public void SetControlPointMode(int index, BezierControlPointMode mode)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x9B7FE0", Offset = "0x9B7FE0", VA = "0x9B7FE0")]
	private void EnforceMode(int index)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x9B8424", Offset = "0x9B8424", VA = "0x9B8424")]
	public Vector3 GetPoint(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x9B85D8", Offset = "0x9B85D8", VA = "0x9B85D8")]
	public void GetPoints(float step, float precision, out Vector3[] pointsArray, out Vector3[] directionsArray)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x9B8A34", Offset = "0x9B8A34", VA = "0x9B8A34")]
	public Vector3 GetVelocity(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x9B8C74", Offset = "0x9B8C74", VA = "0x9B8C74")]
	public Vector3 GetDirection(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x9B8CA4", Offset = "0x9B8CA4", VA = "0x9B8CA4")]
	public void AddCurve()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x9B901C", Offset = "0x9B901C", VA = "0x9B901C")]
	public void RemoveLast()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x9B9144", Offset = "0x9B9144", VA = "0x9B9144")]
	public void Reset()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x9B92C8", Offset = "0x9B92C8", VA = "0x9B92C8")]
	public BezierSpline()
	{
	}
}
[Token(Token = "0x200001B")]
[DisallowMultipleComponent]
public class CameraController : MonoBehaviour
{
	[Token(Token = "0x200039C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D89DC", Offset = "0x7D89DC")]
	private sealed class <CameraNearRoutine>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraController <>4__this;

		[Token(Token = "0x4001EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float distance;

		[Token(Token = "0x4001EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float time;

		[Token(Token = "0x4001EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <finalPos>5__2;

		[Token(Token = "0x4001EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 <iniPos>5__3;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <timer>5__4;

		[Token(Token = "0x1700032E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022B9")]
			[Address(RVA = "0x9BF0F0", Offset = "0x9BF0F0", VA = "0x9BF0F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022BB")]
			[Address(RVA = "0x9BF15C", Offset = "0x9BF15C", VA = "0x9BF15C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022B6")]
		[Address(RVA = "0x9BEE04", Offset = "0x9BEE04", VA = "0x9BEE04")]
		[DebuggerHidden]
		public <CameraNearRoutine>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x60022B7")]
		[Address(RVA = "0x9BEE84", Offset = "0x9BEE84", VA = "0x9BEE84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022B8")]
		[Address(RVA = "0x9BEE88", Offset = "0x9BEE88", VA = "0x9BEE88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022BA")]
		[Address(RVA = "0x9BF0F8", Offset = "0x9BF0F8", VA = "0x9BF0F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CameraController Instance;

	[Token(Token = "0x4000163")]
	public const float cameraScale = 1f;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D982C", Offset = "0x7D982C")]
	[SerializeField]
	private Transform mainCamera;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform cameraRig;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform lookAtParent;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AnimationCurve cameraCloseCurve;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D98A8", Offset = "0x7D98A8")]
	[SerializeField]
	private float moveSpeed;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float rotationSpeed;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float controllerMoveSpeed;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float cameraNearDistance;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float cameraNearTime;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform[] lookAts;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float cameraResetTimer;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 moveVector;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 lastLeftControllerPos;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 lastRightControllerPos;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 lastCenterControllerPos;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 lastLeftToRightHands;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Coroutine coroutine;

	[Token(Token = "0x17000004")]
	private float boostSpeed
	{
		[Token(Token = "0x600005E")]
		[Address(RVA = "0x9BCFE8", Offset = "0x9BCFE8", VA = "0x9BCFE8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000005")]
	private float moveSpd
	{
		[Token(Token = "0x600005F")]
		[Address(RVA = "0x9BD014", Offset = "0x9BD014", VA = "0x9BD014")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000006")]
	private float rotSpd
	{
		[Token(Token = "0x6000060")]
		[Address(RVA = "0x9BD060", Offset = "0x9BD060", VA = "0x9BD060")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000007")]
	private Vector3 leftControllerPos
	{
		[Token(Token = "0x6000061")]
		[Address(RVA = "0x9BD0AC", Offset = "0x9BD0AC", VA = "0x9BD0AC")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000008")]
	private Vector3 rightControllerPos
	{
		[Token(Token = "0x6000062")]
		[Address(RVA = "0x9BD120", Offset = "0x9BD120", VA = "0x9BD120")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000009")]
	private Vector3 centerControllerPos
	{
		[Token(Token = "0x6000063")]
		[Address(RVA = "0x9BD194", Offset = "0x9BD194", VA = "0x9BD194")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700000A")]
	private Vector3 leftToRightControllers
	{
		[Token(Token = "0x6000064")]
		[Address(RVA = "0x9BD208", Offset = "0x9BD208", VA = "0x9BD208")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x9BD27C", Offset = "0x9BD27C", VA = "0x9BD27C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x9BD3F4", Offset = "0x9BD3F4", VA = "0x9BD3F4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x9BD4C8", Offset = "0x9BD4C8", VA = "0x9BD4C8")]
	public void CameraMoveForward()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x9BD5E8", Offset = "0x9BD5E8", VA = "0x9BD5E8")]
	public void CameraMoveBackward()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x9BD708", Offset = "0x9BD708", VA = "0x9BD708")]
	public void CameraMoveRight()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x9BD828", Offset = "0x9BD828", VA = "0x9BD828")]
	public void CameraMoveLeft()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x9BD948", Offset = "0x9BD948", VA = "0x9BD948")]
	public void CameraMoveUp()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x9BDA68", Offset = "0x9BDA68", VA = "0x9BDA68")]
	public void CameraMoveDown()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x9BDB88", Offset = "0x9BDB88", VA = "0x9BDB88")]
	public void CameraMove(Vector3 vector)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x9BDC60", Offset = "0x9BDC60", VA = "0x9BDC60")]
	public void CameraRotationWithMouse()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x9BDE74", Offset = "0x9BDE74", VA = "0x9BDE74")]
	public void CameraRotationWithControllers()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x9BE404", Offset = "0x9BE404", VA = "0x9BE404")]
	public void CameraReset()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x9BE514", Offset = "0x9BE514", VA = "0x9BE514")]
	public void CameraPositionOn(int sceneIndex)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x9BE708", Offset = "0x9BE708", VA = "0x9BE708")]
	public void CameraFocusOn(int index)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x9BE950", Offset = "0x9BE950", VA = "0x9BE950")]
	public void CameraCenterOn(int index)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x9BEB3C", Offset = "0x9BEB3C", VA = "0x9BEB3C")]
	public void CameraHeightOn(int index)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x9BED28", Offset = "0x9BED28", VA = "0x9BED28")]
	public void CameraNear(int sceneIndex)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x9BED7C", Offset = "0x9BED7C", VA = "0x9BED7C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E09E4", Offset = "0x7E09E4")]
	private IEnumerator CameraNearRoutine(int sceneIndex, float time = 1f, float distance = 1f)
	{
		return null;
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x9BEE30", Offset = "0x9BEE30", VA = "0x9BEE30")]
	public CameraController()
	{
	}
}
[Token(Token = "0x200001C")]
public class CameraOrientation : MonoBehaviour
{
	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform baseTransform;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7D9944", Offset = "0x7D9944")]
	private float saturation;

	[Token(Token = "0x4000177")]
	private const float a = 1f;

	[Token(Token = "0x4000178")]
	private const int multiplier = 3;

	[Token(Token = "0x1700000B")]
	private float s
	{
		[Token(Token = "0x6000078")]
		[Address(RVA = "0x9BF164", Offset = "0x9BF164", VA = "0x9BF164")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700000C")]
	private Vector3 p
	{
		[Token(Token = "0x6000079")]
		[Address(RVA = "0x9BF16C", Offset = "0x9BF16C", VA = "0x9BF16C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700000D")]
	private Vector3 f
	{
		[Token(Token = "0x600007A")]
		[Address(RVA = "0x9BF188", Offset = "0x9BF188", VA = "0x9BF188")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700000E")]
	private Vector3 r
	{
		[Token(Token = "0x600007B")]
		[Address(RVA = "0x9BF22C", Offset = "0x9BF22C", VA = "0x9BF22C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700000F")]
	private Vector3 u
	{
		[Token(Token = "0x600007C")]
		[Address(RVA = "0x9BF2D0", Offset = "0x9BF2D0", VA = "0x9BF2D0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000010")]
	private float deg
	{
		[Token(Token = "0x600007D")]
		[Address(RVA = "0x9BF374", Offset = "0x9BF374", VA = "0x9BF374")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x9BF3D8", Offset = "0x9BF3D8", VA = "0x9BF3D8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x9BFA7C", Offset = "0x9BFA7C", VA = "0x9BFA7C")]
	public CameraOrientation()
	{
	}
}
[Token(Token = "0x200001D")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D3870", Offset = "0x7D3870")]
public class AudioFading : MonoBehaviour
{
	[Token(Token = "0x200039D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D89EC", Offset = "0x7D89EC")]
	private sealed class <FadeRoutine>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioFading <>4__this;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve curve;

		[Token(Token = "0x17000330")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022BF")]
			[Address(RVA = "0x9B6470", Offset = "0x9B6470", VA = "0x9B6470", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000331")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022C1")]
			[Address(RVA = "0x9B64DC", Offset = "0x9B64DC", VA = "0x9B64DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022BC")]
		[Address(RVA = "0x9B6294", Offset = "0x9B6294", VA = "0x9B6294")]
		[DebuggerHidden]
		public <FadeRoutine>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60022BD")]
		[Address(RVA = "0x9B632C", Offset = "0x9B632C", VA = "0x9B632C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022BE")]
		[Address(RVA = "0x9B6330", Offset = "0x9B6330", VA = "0x9B6330", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C0")]
		[Address(RVA = "0x9B6478", Offset = "0x9B6478", VA = "0x9B6478", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9984", Offset = "0x7D9984")]
	[SerializeField]
	private AnimationCurve fadeINCurve;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AnimationCurve fadeOUTCurve;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioSource audioSource;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timer;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float totalTime;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine routine;

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x9B60E0", Offset = "0x9B60E0", VA = "0x9B60E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x9B6138", Offset = "0x9B6138", VA = "0x9B6138")]
	public void FadeIN()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x9B6244", Offset = "0x9B6244", VA = "0x9B6244")]
	public void FadeOUT()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x9B61C4", Offset = "0x9B61C4", VA = "0x9B61C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0A48", Offset = "0x7E0A48")]
	private IEnumerator FadeRoutine(AnimationCurve curve)
	{
		return null;
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x9B62C0", Offset = "0x9B62C0", VA = "0x9B62C0")]
	public AudioFading()
	{
	}
}
[Token(Token = "0x200001E")]
public class AudioFadingManager : MonoBehaviour
{
	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioFading[] audioFadings;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _isFadeIn;

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x9B64E4", Offset = "0x9B64E4", VA = "0x9B64E4")]
	public void FadeINAll()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x9B6560", Offset = "0x9B6560", VA = "0x9B6560")]
	public void FadeOUTAll()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x9B65D8", Offset = "0x9B65D8", VA = "0x9B65D8")]
	public void ResumeSound()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x9B65E8", Offset = "0x9B65E8", VA = "0x9B65E8")]
	public AudioFadingManager()
	{
	}
}
[Token(Token = "0x200001F")]
public class Automatic : MonoBehaviour
{
	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool destroy;

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x9B7270", Offset = "0x9B7270", VA = "0x9B7270")]
	private void Start()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x9B7300", Offset = "0x9B7300", VA = "0x9B7300")]
	public Automatic()
	{
	}
}
[Token(Token = "0x2000020")]
public class AutoRotation : MonoBehaviour
{
	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rotationFactor;

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x9B71A8", Offset = "0x9B71A8", VA = "0x9B71A8")]
	private void Update()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x9B7268", Offset = "0x9B7268", VA = "0x9B7268")]
	public AutoRotation()
	{
	}
}
[Token(Token = "0x2000021")]
public class GloomyActivator : MonoBehaviour
{
	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer ren;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer fire;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public float random;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color[] iniEmission;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color[] iniFire;

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xADEE64", Offset = "0xADEE64", VA = "0xADEE64")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xADF0C8", Offset = "0xADF0C8", VA = "0xADF0C8")]
	private void Start()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xADF1C0", Offset = "0xADF1C0", VA = "0xADF1C0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xADEE68", Offset = "0xADEE68", VA = "0xADEE68")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xADF384", Offset = "0xADF384", VA = "0xADF384")]
	public GloomyActivator()
	{
	}
}
[Token(Token = "0x2000022")]
public class IntermittentEmissive : MonoBehaviour
{
	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float[] randomMin;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float[] randomMax;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Renderer[] rens;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Color[] emissiveColor;

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xA555AC", Offset = "0xA555AC", VA = "0xA555AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xA55684", Offset = "0xA55684", VA = "0xA55684")]
	private void Update()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xA55708", Offset = "0xA55708", VA = "0xA55708")]
	private void IntermittentMaterial(Material mat, int index)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xA55818", Offset = "0xA55818", VA = "0xA55818")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xA558E0", Offset = "0xA558E0", VA = "0xA558E0")]
	public IntermittentEmissive()
	{
	}
}
[Token(Token = "0x2000023")]
[ExecuteInEditMode]
public class LayerCheck : MonoBehaviour
{
	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool activate;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int layer;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xA5BEE0", Offset = "0xA5BEE0", VA = "0xA5BEE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xA5C230", Offset = "0xA5C230", VA = "0xA5C230")]
	public LayerCheck()
	{
	}
}
[Token(Token = "0x2000024")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D38E4", Offset = "0x7D38E4")]
public class LightEnableOnMesh : MonoBehaviour
{
	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer target;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light light;

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xA5CBD4", Offset = "0xA5CBD4", VA = "0xA5CBD4")]
	private void Update()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xA5CD70", Offset = "0xA5CD70", VA = "0xA5CD70")]
	public LightEnableOnMesh()
	{
	}
}
[Token(Token = "0x2000025")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D3958", Offset = "0x7D3958")]
public class LightEnableOnRenderer : MonoBehaviour
{
	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer target;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light light;

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xA5CD78", Offset = "0xA5CD78", VA = "0xA5CD78")]
	private void Update()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xA5CF14", Offset = "0xA5CF14", VA = "0xA5CF14")]
	public LightEnableOnRenderer()
	{
	}
}
[Token(Token = "0x2000026")]
public class LoaderAnchor : MonoBehaviour
{
	[Token(Token = "0x600009D")]
	[Address(RVA = "0xA5CF1C", Offset = "0xA5CF1C", VA = "0xA5CF1C")]
	private void Start()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xA5CF20", Offset = "0xA5CF20", VA = "0xA5CF20")]
	private void Update()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xA5CF24", Offset = "0xA5CF24", VA = "0xA5CF24")]
	public LoaderAnchor()
	{
	}
}
[Token(Token = "0x2000027")]
public class MatchVisibilityWithRenderer : MonoBehaviour
{
	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer ren;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] gameObjects;

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xA67D88", Offset = "0xA67D88", VA = "0xA67D88")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xA67ED8", Offset = "0xA67ED8", VA = "0xA67ED8")]
	private void FindRendererRecursivelyUp(Transform parent)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xA67FCC", Offset = "0xA67FCC", VA = "0xA67FCC")]
	public MatchVisibilityWithRenderer()
	{
	}
}
[Token(Token = "0x2000028")]
public class OnParticleCollisionAudioTrigger : MonoBehaviour
{
	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioClip[] audioClips;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject audioSourcesPrefab;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<AudioSource> audioSourcePool;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x9EF1E4", Offset = "0x9EF1E4", VA = "0x9EF1E4")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x9EF36C", Offset = "0x9EF36C", VA = "0x9EF36C")]
	private void PlayAudioOnPosition(Vector3 position)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x9EF430", Offset = "0x9EF430", VA = "0x9EF430")]
	private AudioSource GetAudioSourceFromPool()
	{
		return null;
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x9EF65C", Offset = "0x9EF65C", VA = "0x9EF65C")]
	public OnParticleCollisionAudioTrigger()
	{
	}
}
[Token(Token = "0x2000029")]
public class SavedLanguage : MonoBehaviour
{
	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SavedLanguage Instance;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D9A80", Offset = "0x7D9A80")]
	private LanguageSelector.Language <Language>k__BackingField;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D9A90", Offset = "0x7D9A90")]
	private bool <LanguageSaved>k__BackingField;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D9AA0", Offset = "0x7D9AA0")]
	private bool <ChineseGoberment>k__BackingField;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public int activeHand;

	[Token(Token = "0x17000011")]
	public LanguageSelector.Language Language
	{
		[Token(Token = "0x60000A7")]
		[Address(RVA = "0xCF00B0", Offset = "0xCF00B0", VA = "0xCF00B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E0AAC", Offset = "0x7E0AAC")]
		get
		{
			return default(LanguageSelector.Language);
		}
		[Token(Token = "0x60000A8")]
		[Address(RVA = "0xCF00B8", Offset = "0xCF00B8", VA = "0xCF00B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E0ABC", Offset = "0x7E0ABC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public bool LanguageSaved
	{
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0xCF00C0", Offset = "0xCF00C0", VA = "0xCF00C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E0ACC", Offset = "0x7E0ACC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000AA")]
		[Address(RVA = "0xCF00C8", Offset = "0xCF00C8", VA = "0xCF00C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E0ADC", Offset = "0x7E0ADC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public bool ChineseGoberment
	{
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0xCF00D4", Offset = "0xCF00D4", VA = "0xCF00D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E0AEC", Offset = "0x7E0AEC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000AC")]
		[Address(RVA = "0xCF00DC", Offset = "0xCF00DC", VA = "0xCF00DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E0AFC", Offset = "0x7E0AFC")]
		private set
		{
		}
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xCF00E8", Offset = "0xCF00E8", VA = "0xCF00E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xCF01E4", Offset = "0xCF01E4", VA = "0xCF01E4")]
	public void Save(LanguageSelector.Language newLanguage)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xCF01F4", Offset = "0xCF01F4", VA = "0xCF01F4")]
	public void SetBuildForChineseGoberment()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xCF0200", Offset = "0xCF0200", VA = "0xCF0200")]
	public SavedLanguage()
	{
	}
}
[Token(Token = "0x200002A")]
public class TextureMoving : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200039E")]
	public struct MatWithOffset
	{
		[Token(Token = "0x4001F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Material mat;

		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 offset;
	}

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MatWithOffset[] mats;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MatWithOffset[] normalMats;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 offset;

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xA76634", Offset = "0xA76634", VA = "0xA76634")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xA76948", Offset = "0xA76948", VA = "0xA76948")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xA76B3C", Offset = "0xA76B3C", VA = "0xA76B3C")]
	public TextureMoving()
	{
	}
}
[Token(Token = "0x200002B")]
public static class Vector3Extentions
{
	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x16021C4", Offset = "0x16021C4", VA = "0x16021C4")]
	public static Vector2 XY(this Vector3 v)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x16021F0", Offset = "0x16021F0", VA = "0x16021F0")]
	public static Vector2 XZ(this Vector3 v)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x1602220", Offset = "0x1602220", VA = "0x1602220")]
	public static Vector2 YZ(this Vector3 v)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x1602254", Offset = "0x1602254", VA = "0x1602254")]
	public static Vector2 YX(this Vector3 v)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x160228C", Offset = "0x160228C", VA = "0x160228C")]
	public static Vector2 ZX(this Vector3 v)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x16022C0", Offset = "0x16022C0", VA = "0x16022C0")]
	public static Vector2 ZY(this Vector3 v)
	{
		return default(Vector2);
	}
}
[Token(Token = "0x200002C")]
[ExecuteInEditMode]
public class ForceLayer : MonoBehaviour
{
	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int layer;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Light light;

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xADE038", Offset = "0xADE038", VA = "0xADE038")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xADE0F0", Offset = "0xADE0F0", VA = "0xADE0F0")]
	public ForceLayer()
	{
	}
}
[Token(Token = "0x200002D")]
public class GetPicoKeys : MonoBehaviour
{
	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMesh text;

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xADE62C", Offset = "0xADE62C", VA = "0xADE62C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xADE6CC", Offset = "0xADE6CC", VA = "0xADE6CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xADE7BC", Offset = "0xADE7BC", VA = "0xADE7BC")]
	public GetPicoKeys()
	{
	}
}
[Token(Token = "0x200002E")]
public class HandsCheck : MonoBehaviour
{
	[Token(Token = "0x200039F")]
	public enum TargetInput
	{
		[Token(Token = "0x4001F07")]
		None = -1,
		[Token(Token = "0x4001F08")]
		Left,
		[Token(Token = "0x4001F09")]
		Right
	}

	[Token(Token = "0x20003A0")]
	public enum InputMethod
	{
		[Token(Token = "0x4001F0B")]
		Hands,
		[Token(Token = "0x4001F0C")]
		Controller
	}

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HandsCheck Instance;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9AE0", Offset = "0x7D9AE0")]
	public Color emissionOff;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9B18", Offset = "0x7D9B18")]
	public Color emissionOn;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color _lastEmissionLeft;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color _lastEmissionRight;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9B50", Offset = "0x7D9B50")]
	[SerializeField]
	private GameObject[] controllerPrefabs;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool _enabled;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9B9C", Offset = "0x7D9B9C")]
	[SerializeField]
	private int toolsExpected;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private TargetInput _activeHand;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private InputMethod _activeInputMethod;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool _enabledInteration;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool[] _controllerTracked;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool[] _handTracked;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _isHandTrackingEnabled;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	private bool _isControllerTrackingEnabled;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private SavedLanguage _saved;

	[Token(Token = "0x17000014")]
	public bool enabledInteration
	{
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0xAE5B78", Offset = "0xAE5B78", VA = "0xAE5B78")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0xAE5B80", Offset = "0xAE5B80", VA = "0xAE5B80")]
		set
		{
		}
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xAE5B8C", Offset = "0xAE5B8C", VA = "0xAE5B8C")]
	private bool SetActive(int index, int targetInput)
	{
		return default(bool);
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xAE5B98", Offset = "0xAE5B98", VA = "0xAE5B98")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xAE5C2C", Offset = "0xAE5C2C", VA = "0xAE5C2C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xAE5CC0", Offset = "0xAE5CC0", VA = "0xAE5CC0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xAE5D10", Offset = "0xAE5D10", VA = "0xAE5D10")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xAE5D14", Offset = "0xAE5D14", VA = "0xAE5D14")]
	private void UpdateControllerEnabled()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xAE5D6C", Offset = "0xAE5D6C", VA = "0xAE5D6C")]
	private void UpdateHandTrackingEnabled()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xAE5D70", Offset = "0xAE5D70", VA = "0xAE5D70")]
	private void UpdateHandTrackingInput()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xAE5D74", Offset = "0xAE5D74", VA = "0xAE5D74")]
	private void UpdateControllerInput()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xAE5D78", Offset = "0xAE5D78", VA = "0xAE5D78")]
	private void SetColor(bool isEmissionOn, int h, Renderer r)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xAE5E50", Offset = "0xAE5E50", VA = "0xAE5E50")]
	public void SetControllerVisualization(TargetInput targetInput, bool value = true)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xAE5F24", Offset = "0xAE5F24", VA = "0xAE5F24")]
	public HandsCheck()
	{
	}
}
[Token(Token = "0x200002F")]
public class ItemInteractionScript : MonoBehaviour
{
	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _startStopButton;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent _actionEvents;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent _contactOnEvents;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent _contactOffEvents;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool _contactOffEventOnDisable;

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xA5A4C0", Offset = "0xA5A4C0", VA = "0xA5A4C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xA5A4C4", Offset = "0xA5A4C4", VA = "0xA5A4C4")]
	public ItemInteractionScript()
	{
	}
}
[Token(Token = "0x2000030")]
public class KeyShortcuts : MonoBehaviour
{
	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool DEBUG;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int debugCounter;

	[Token(Token = "0x40001BB")]
	private const bool cameraMoveWithControllers = true;

	[Token(Token = "0x17000015")]
	private bool sceneGoToMain
	{
		[Token(Token = "0x60000CF")]
		[Address(RVA = "0xA5A4CC", Offset = "0xA5A4CC", VA = "0xA5A4CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000016")]
	private bool pauseResume
	{
		[Token(Token = "0x60000D0")]
		[Address(RVA = "0xA5A4D8", Offset = "0xA5A4D8", VA = "0xA5A4D8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000017")]
	private bool headsetOff
	{
		[Token(Token = "0x60000D1")]
		[Address(RVA = "0xA5A574", Offset = "0xA5A574", VA = "0xA5A574")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000018")]
	private bool headsetOn
	{
		[Token(Token = "0x60000D2")]
		[Address(RVA = "0xA5A5E8", Offset = "0xA5A5E8", VA = "0xA5A5E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000019")]
	private bool timelineBackward
	{
		[Token(Token = "0x60000D3")]
		[Address(RVA = "0xA5A65C", Offset = "0xA5A65C", VA = "0xA5A65C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001A")]
	private bool timelineForward
	{
		[Token(Token = "0x60000D4")]
		[Address(RVA = "0xA5A668", Offset = "0xA5A668", VA = "0xA5A668")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001B")]
	private bool timelineBackwardFast
	{
		[Token(Token = "0x60000D5")]
		[Address(RVA = "0xA5A674", Offset = "0xA5A674", VA = "0xA5A674")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001C")]
	private bool timelineForwardFast
	{
		[Token(Token = "0x60000D6")]
		[Address(RVA = "0xA5A680", Offset = "0xA5A680", VA = "0xA5A680")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001D")]
	private bool cameraMoveUp
	{
		[Token(Token = "0x60000D7")]
		[Address(RVA = "0xA5A68C", Offset = "0xA5A68C", VA = "0xA5A68C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001E")]
	private bool cameraMoveDown
	{
		[Token(Token = "0x60000D8")]
		[Address(RVA = "0xA5A698", Offset = "0xA5A698", VA = "0xA5A698")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700001F")]
	private bool cameraMoveForward
	{
		[Token(Token = "0x60000D9")]
		[Address(RVA = "0xA5A6A4", Offset = "0xA5A6A4", VA = "0xA5A6A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000020")]
	private bool cameraMoveBackward
	{
		[Token(Token = "0x60000DA")]
		[Address(RVA = "0xA5A6B0", Offset = "0xA5A6B0", VA = "0xA5A6B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000021")]
	private bool cameraMoveRight
	{
		[Token(Token = "0x60000DB")]
		[Address(RVA = "0xA5A6BC", Offset = "0xA5A6BC", VA = "0xA5A6BC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000022")]
	private bool cameraMoveLeft
	{
		[Token(Token = "0x60000DC")]
		[Address(RVA = "0xA5A6C8", Offset = "0xA5A6C8", VA = "0xA5A6C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000023")]
	private bool cameraRotationWithMouse
	{
		[Token(Token = "0x60000DD")]
		[Address(RVA = "0xA5A6D4", Offset = "0xA5A6D4", VA = "0xA5A6D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000024")]
	private bool cameraReset
	{
		[Token(Token = "0x60000DE")]
		[Address(RVA = "0xA5A6E0", Offset = "0xA5A6E0", VA = "0xA5A6E0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000025")]
	private bool cameraScreenshot
	{
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0xA5A774", Offset = "0xA5A774", VA = "0xA5A774")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000026")]
	private bool cameraRecordingToggle
	{
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0xA5A780", Offset = "0xA5A780", VA = "0xA5A780")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000027")]
	private bool lightingGlobalToggle
	{
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0xA5A78C", Offset = "0xA5A78C", VA = "0xA5A78C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000028")]
	private bool lightingVRController
	{
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0xA5A798", Offset = "0xA5A798", VA = "0xA5A798")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000029")]
	private bool languageSpanish
	{
		[Token(Token = "0x60000E3")]
		[Address(RVA = "0xA5A80C", Offset = "0xA5A80C", VA = "0xA5A80C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002A")]
	private bool languageEnglish
	{
		[Token(Token = "0x60000E4")]
		[Address(RVA = "0xA5A818", Offset = "0xA5A818", VA = "0xA5A818")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002B")]
	private bool languageDeutsch
	{
		[Token(Token = "0x60000E5")]
		[Address(RVA = "0xA5A824", Offset = "0xA5A824", VA = "0xA5A824")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002C")]
	private bool languageChinese
	{
		[Token(Token = "0x60000E6")]
		[Address(RVA = "0xA5A830", Offset = "0xA5A830", VA = "0xA5A830")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002D")]
	private bool languageFrench
	{
		[Token(Token = "0x60000E7")]
		[Address(RVA = "0xA5A83C", Offset = "0xA5A83C", VA = "0xA5A83C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002E")]
	private bool qualityLevel0
	{
		[Token(Token = "0x60000E8")]
		[Address(RVA = "0xA5A848", Offset = "0xA5A848", VA = "0xA5A848")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002F")]
	private bool qualityLevel1
	{
		[Token(Token = "0x60000E9")]
		[Address(RVA = "0xA5A854", Offset = "0xA5A854", VA = "0xA5A854")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000030")]
	private bool qualityLevel2
	{
		[Token(Token = "0x60000EA")]
		[Address(RVA = "0xA5A860", Offset = "0xA5A860", VA = "0xA5A860")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xA5A86C", Offset = "0xA5A86C", VA = "0xA5A86C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xA5AED8", Offset = "0xA5AED8", VA = "0xA5AED8")]
	private void EndUserKeyShortcuts()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xA5A898", Offset = "0xA5A898", VA = "0xA5A898")]
	private void DeveloperKeyShortcuts()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xA5B0A0", Offset = "0xA5B0A0", VA = "0xA5B0A0")]
	public KeyShortcuts()
	{
	}
}
[Token(Token = "0x2000031")]
public class LanguageSelection : MonoBehaviour
{
	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LanguageSet[] sets;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject lastEnabled;

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xA5B0A8", Offset = "0xA5B0A8", VA = "0xA5B0A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xA5B228", Offset = "0xA5B228", VA = "0xA5B228")]
	public LanguageSelection()
	{
	}
}
[Serializable]
[Token(Token = "0x2000032")]
internal class LanguageSet
{
	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LanguageSelector.Language language;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject gameObject;

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xA5BED8", Offset = "0xA5BED8", VA = "0xA5BED8")]
	public LanguageSet()
	{
	}
}
[Token(Token = "0x2000033")]
[DisallowMultipleComponent]
public class LanguageSelector : MonoBehaviour
{
	[Token(Token = "0x20003A1")]
	public enum Language
	{
		[Token(Token = "0x4001F0E")]
		English,
		[Token(Token = "0x4001F0F")]
		Spanish,
		[Token(Token = "0x4001F10")]
		French,
		[Token(Token = "0x4001F11")]
		Chinese,
		[Token(Token = "0x4001F12")]
		Deutsch
	}

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LanguageSelector Instance;

	[Token(Token = "0x40001C1")]
	private const string BANK_NARRATOR = "EP3_Dialog.bnk";

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Language defaultLanguage;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip englishClip;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip spanishClip;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip frenchClip;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioClip chineseClip;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioClip germanClip;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PlayableDirector playableDirector;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool usingWwise;

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xA5B3B0", Offset = "0xA5B3B0", VA = "0xA5B3B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xA5B404", Offset = "0xA5B404", VA = "0xA5B404")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xA5B090", Offset = "0xA5B090", VA = "0xA5B090")]
	public void ChangeLanguage(Language language)
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xA5B4C0", Offset = "0xA5B4C0", VA = "0xA5B4C0")]
	private void ChangeClip(Language language)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xA5B6FC", Offset = "0xA5B6FC", VA = "0xA5B6FC")]
	private void ChangeAudioPlayableAsset(AudioClip clip)
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xA5B59C", Offset = "0xA5B59C", VA = "0xA5B59C")]
	private void ChangeLanguageWwise(Language language)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xA5BED0", Offset = "0xA5BED0", VA = "0xA5BED0")]
	public LanguageSelector()
	{
	}
}
[Token(Token = "0x2000034")]
[ExecuteInEditMode]
public class LayerController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003A2")]
	private class LayerSet
	{
		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] targets;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int layer;

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0xA5C6B8", Offset = "0xA5C6B8", VA = "0xA5C6B8")]
		public LayerSet()
		{
		}
	}

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LayerController Instance;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LayerSet[] layerSets;

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xA5C238", Offset = "0xA5C238", VA = "0xA5C238")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xA5C28C", Offset = "0xA5C28C", VA = "0xA5C28C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xA5C30C", Offset = "0xA5C30C", VA = "0xA5C30C")]
	public void ResetLayers()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xA5C6B0", Offset = "0xA5C6B0", VA = "0xA5C6B0")]
	public LayerController()
	{
	}
}
[Token(Token = "0x2000035")]
public class LightController : MonoBehaviour
{
	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LightController Instance;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Color ambientLightColor;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Light directional;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool toggle;

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xA5C6C0", Offset = "0xA5C6C0", VA = "0xA5C6C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xA5AFD0", Offset = "0xA5AFD0", VA = "0xA5AFD0")]
	public void ToggleAmbientLight()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xA5C778", Offset = "0xA5C778", VA = "0xA5C778")]
	public LightController()
	{
	}
}
[Token(Token = "0x2000036")]
[ExecuteInEditMode]
public class MaterialVectorFeeder : MonoBehaviour
{
	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer renderer;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string variableName;

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xA67FD4", Offset = "0xA67FD4", VA = "0xA67FD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xA6812C", Offset = "0xA6812C", VA = "0xA6812C")]
	public MaterialVectorFeeder()
	{
	}
}
[Token(Token = "0x2000037")]
public class EmptyInteractable : Interactable
{
	[Token(Token = "0x6000102")]
	[Address(RVA = "0x9C3760", Offset = "0x9C3760", VA = "0x9C3760")]
	public EmptyInteractable()
	{
	}
}
[Token(Token = "0x2000038")]
public class ExitInteractable : InteractableLoadingBarWithText
{
	[Token(Token = "0x6000103")]
	[Address(RVA = "0xADCF20", Offset = "0xADCF20", VA = "0xADCF20", Slot = "12")]
	protected override void DoLoad()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xADD034", Offset = "0xADD034", VA = "0xADD034")]
	public void OnOverActions()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xADD040", Offset = "0xADD040", VA = "0xADD040")]
	public void OnOutActions()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xADD050", Offset = "0xADD050", VA = "0xADD050", Slot = "8")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xADD094", Offset = "0xADD094", VA = "0xADD094", Slot = "11")]
	protected override bool OnOutWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xADD09C", Offset = "0xADD09C", VA = "0xADD09C", Slot = "10")]
	protected override bool OnOverWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xADD0A4", Offset = "0xADD0A4", VA = "0xADD0A4")]
	public ExitInteractable()
	{
	}
}
[Token(Token = "0x2000039")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D3A1C", Offset = "0x7D3A1C")]
public abstract class Interactable : MonoBehaviour
{
	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool showPointer;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected VRInteractiveItem VRI;

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xA537D4", Offset = "0xA537D4", VA = "0xA537D4", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xA53910", Offset = "0xA53910", VA = "0xA53910", Slot = "5")]
	protected virtual void MyOnOut()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xA53914", Offset = "0xA53914", VA = "0xA53914", Slot = "6")]
	protected virtual void OnOver()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xA53918", Offset = "0xA53918", VA = "0xA53918")]
	protected Interactable()
	{
	}
}
[Token(Token = "0x200003A")]
public class InteractableChapterSelector : InteractableLoadingBarWithText
{
	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9D28", Offset = "0x7D9D28")]
	[SerializeField]
	protected SceneLoadManager.SceneIndex sceneToLoad;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9D74", Offset = "0x7D9D74")]
	[SerializeField]
	private Renderer[] alternateTextRenderers;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Color greyColor;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private float timeToAlternateText;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9DE0", Offset = "0x7D9DE0")]
	[SerializeField]
	private Animator homeAnimator;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private Transform saturationTargetParent;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private float saturationSpeed;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private ParticleSystem particles;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Renderer[] renderersToDesaturate;

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xA53920", Offset = "0xA53920", VA = "0xA53920", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xA53AD4", Offset = "0xA53AD4", VA = "0xA53AD4", Slot = "9")]
	protected override bool UpdateWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xA53E00", Offset = "0xA53E00", VA = "0xA53E00", Slot = "10")]
	protected override bool OnOverWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xA53F74", Offset = "0xA53F74", VA = "0xA53F74", Slot = "11")]
	protected override bool OnOutWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xA540AC", Offset = "0xA540AC", VA = "0xA540AC", Slot = "12")]
	protected override void DoLoad()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xA541B8", Offset = "0xA541B8", VA = "0xA541B8")]
	public void OnOverActions()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xA541CC", Offset = "0xA541CC", VA = "0xA541CC")]
	public void OnOutActions()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xA541DC", Offset = "0xA541DC", VA = "0xA541DC", Slot = "8")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xA541F4", Offset = "0xA541F4", VA = "0xA541F4")]
	private new void ChangeRendererColor(Renderer[] textRenderers, Color color)
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xA53CC0", Offset = "0xA53CC0", VA = "0xA53CC0")]
	private void ChangeSaturation(float t)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xA539F8", Offset = "0xA539F8", VA = "0xA539F8")]
	private void AlternateText(float t)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xA543AC", Offset = "0xA543AC", VA = "0xA543AC")]
	public InteractableChapterSelector()
	{
	}
}
[Token(Token = "0x200003B")]
public class InteractableLoadingBar : Interactable
{
	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static bool loadingEnabled;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9E5C", Offset = "0x7D9E5C")]
	[SerializeField]
	private Image loadingBar;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected bool canLoad;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected float timeToLoad;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected Color inactiveColor;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected Color activeColor;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9EE8", Offset = "0x7D9EE8")]
	[SerializeField]
	private AudioSource[] audioSourcesOnOver;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioSource[] audioSourcesOnOut;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioSource[] audioSourcesOnLoad;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioSource[] audioSourcesOnOverLoad;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioSource[] audioSourcesOnOutLoad;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float lastFill;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected float timer;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected bool isGazed;

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xA54440", Offset = "0xA54440", VA = "0xA54440")]
	public static void SetLoadingState(bool value)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xA544B0", Offset = "0xA544B0", VA = "0xA544B0", Slot = "7")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xA541E8", Offset = "0xA541E8", VA = "0xA541E8", Slot = "8")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xA5471C", Offset = "0xA5471C", VA = "0xA5471C", Slot = "6")]
	protected override void OnOver()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xA54728", Offset = "0xA54728", VA = "0xA54728", Slot = "5")]
	protected override void MyOnOut()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xA53B8C", Offset = "0xA53B8C", VA = "0xA53B8C", Slot = "9")]
	protected virtual bool UpdateWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xA5484C", Offset = "0xA5484C", VA = "0xA5484C")]
	protected void ResetLoading()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xA5485C", Offset = "0xA5485C", VA = "0xA5485C", Slot = "10")]
	protected virtual bool OnOverWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xA54C20", Offset = "0xA54C20", VA = "0xA54C20", Slot = "11")]
	protected virtual bool OnOutWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xA54734", Offset = "0xA54734", VA = "0xA54734")]
	protected void Load()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xA541B4", Offset = "0xA541B4", VA = "0xA541B4", Slot = "12")]
	protected virtual void DoLoad()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xA544E8", Offset = "0xA544E8", VA = "0xA544E8")]
	protected void ChangeImageColor(Image image, Color color)
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xA54654", Offset = "0xA54654", VA = "0xA54654")]
	protected void ChangeImageFill(Image image, float t)
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xA54EC0", Offset = "0xA54EC0", VA = "0xA54EC0")]
	public void ResetLoadingState()
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xA54F2C", Offset = "0xA54F2C", VA = "0xA54F2C")]
	public InteractableLoadingBar()
	{
	}
}
[Token(Token = "0x200003C")]
public class InteractableLoadingBarWithText : InteractableLoadingBar
{
	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9F74", Offset = "0x7D9F74")]
	[SerializeField]
	protected Renderer[] textRenderers;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7D9FC0", Offset = "0x7D9FC0")]
	[SerializeField]
	private bool setLanguage;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private LanguageSet[] languageSets;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameObject lastEnabled;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected bool _updateOver;

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xA539CC", Offset = "0xA539CC", VA = "0xA539CC", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xA55100", Offset = "0xA55100", VA = "0xA55100")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xA53F2C", Offset = "0xA53F2C", VA = "0xA53F2C", Slot = "10")]
	protected override bool OnOverWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xA54064", Offset = "0xA54064", VA = "0xA54064", Slot = "11")]
	protected override bool OnOutWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xA54F48", Offset = "0xA54F48", VA = "0xA54F48")]
	protected void ChangeRendererColor(Renderer[] textRenderers, Color color)
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xA551C8", Offset = "0xA551C8", VA = "0xA551C8")]
	private void SetLanguage(LanguageSelector.Language lang)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xA543C8", Offset = "0xA543C8", VA = "0xA543C8")]
	public InteractableLoadingBarWithText()
	{
	}
}
[Token(Token = "0x200003D")]
public class InteractablePauseMenuChapterSelector : InteractableChapterSelector
{
	[Token(Token = "0x6000131")]
	[Address(RVA = "0xA55340", Offset = "0xA55340", VA = "0xA55340", Slot = "12")]
	protected override void DoLoad()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xA5540C", Offset = "0xA5540C", VA = "0xA5540C")]
	public InteractablePauseMenuChapterSelector()
	{
	}
}
[Token(Token = "0x200003E")]
public class InteractablePauseMenuResumeSelector : InteractableLoadingBarWithText
{
	[Token(Token = "0x6000133")]
	[Address(RVA = "0xA55428", Offset = "0xA55428", VA = "0xA55428")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xA55468", Offset = "0xA55468", VA = "0xA55468", Slot = "12")]
	protected override void DoLoad()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xA55524", Offset = "0xA55524", VA = "0xA55524")]
	public void OnOverActions()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xA55530", Offset = "0xA55530", VA = "0xA55530")]
	public void OnOutActions()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xA55560", Offset = "0xA55560", VA = "0xA55560", Slot = "8")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xA555A8", Offset = "0xA555A8", VA = "0xA555A8")]
	public InteractablePauseMenuResumeSelector()
	{
	}
}
[Token(Token = "0x200003F")]
public class LanguageSelectionInteractable : InteractableLoadingBarWithText
{
	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	private LanguageSelector.Language language;

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xA5B230", Offset = "0xA5B230", VA = "0xA5B230")]
	public LanguageSelectionInteractable()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xA5B234", Offset = "0xA5B234", VA = "0xA5B234", Slot = "12")]
	protected override void DoLoad()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xA5B344", Offset = "0xA5B344", VA = "0xA5B344")]
	public void OnInActions()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xA5B350", Offset = "0xA5B350", VA = "0xA5B350")]
	public void OnOutActions()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xA5B360", Offset = "0xA5B360", VA = "0xA5B360", Slot = "8")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xA5B3A8", Offset = "0xA5B3A8", VA = "0xA5B3A8", Slot = "11")]
	protected override bool OnOutWithCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xA5B3AC", Offset = "0xA5B3AC", VA = "0xA5B3AC", Slot = "10")]
	protected override bool OnOverWithCheck()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000040")]
[ExecuteInEditMode]
public class TransformHorizontalLayout : MonoBehaviour
{
	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float distanceToCamera;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float angleBetweenChildren;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float inbetweenTextDotElevation;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float textLocalScale;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Camera camera;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform[] children;

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xA78C6C", Offset = "0xA78C6C", VA = "0xA78C6C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xA78F8C", Offset = "0xA78F8C", VA = "0xA78F8C")]
	public TransformHorizontalLayout()
	{
	}
}
[Token(Token = "0x2000041")]
[ExecuteInEditMode]
public class ModelSwitcher : MonoBehaviour
{
	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DA06C", Offset = "0x7DA06C")]
	[SerializeField]
	private Transform transformA;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string pathModelA;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DA0C8", Offset = "0x7DA0C8")]
	[SerializeField]
	private Transform transformB;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string pathModelB;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DA124", Offset = "0x7DA124")]
	[SerializeField]
	private Transform switcher;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string pathSwitcher;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float threshold;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[HideInInspector]
	private Renderer[] renderersA;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[HideInInspector]
	private Renderer[] renderersB;

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x9E4040", Offset = "0x9E4040", VA = "0x9E4040")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x9E41EC", Offset = "0x9E41EC", VA = "0x9E41EC")]
	public ModelSwitcher()
	{
	}
}
[Token(Token = "0x2000042")]
public class MyQualitySettings : MonoBehaviour
{
	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MyQualitySettings Instance;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text text;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PostProcessProfile ppprofile;

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x9EB944", Offset = "0x9EB944", VA = "0x9EB944")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x9EBA54", Offset = "0x9EBA54", VA = "0x9EBA54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x9EBAB0", Offset = "0x9EBAB0", VA = "0x9EBAB0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x9EBB2C", Offset = "0x9EBB2C", VA = "0x9EBB2C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x9EBBA8", Offset = "0x9EBBA8", VA = "0x9EBBA8")]
	private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x9EBCC4", Offset = "0x9EBCC4", VA = "0x9EBCC4")]
	public void SetQualityLevel(int qualityLevel)
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x9EC088", Offset = "0x9EC088", VA = "0x9EC088")]
	private void UpdateText(int qualityLevel)
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x9EBA58", Offset = "0x9EBA58", VA = "0x9EBA58")]
	private void AutomaticQualitySettingsBasedOnVRAM()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x9EBBCC", Offset = "0x9EBBCC", VA = "0x9EBBCC")]
	private void AdjustContrastBasedOnHMD()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x9EC0F4", Offset = "0x9EC0F4", VA = "0x9EC0F4")]
	public MyQualitySettings()
	{
	}
}
[Token(Token = "0x2000043")]
public class Oculus_LoadLevelAntu : MonoBehaviour
{
	[Token(Token = "0x20003A3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D89FC", Offset = "0x7D89FC")]
	private sealed class <LoadLevel>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Oculus_LoadLevelAntu <>4__this;

		[Token(Token = "0x17000332")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022C6")]
			[Address(RVA = "0x9EF170", Offset = "0x9EF170", VA = "0x9EF170", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000333")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022C8")]
			[Address(RVA = "0x9EF1DC", Offset = "0x9EF1DC", VA = "0x9EF1DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0x9EEE54", Offset = "0x9EEE54", VA = "0x9EEE54")]
		[DebuggerHidden]
		public <LoadLevel>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60022C4")]
		[Address(RVA = "0x9EEEB0", Offset = "0x9EEEB0", VA = "0x9EEEB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0x9EEEB4", Offset = "0x9EEEB4", VA = "0x9EEEB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0x9EF178", Offset = "0x9EF178", VA = "0x9EF178", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Oculus_LoadLevelAntu _active;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AsyncOperation async;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int levelIndex;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float loadingScreenDistance;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool loadAdditive;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool loadAsync;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float postLoadSettleTime;

	[Token(Token = "0x17000031")]
	public static bool loading
	{
		[Token(Token = "0x600014E")]
		[Address(RVA = "0x9EEABC", Offset = "0x9EEABC", VA = "0x9EEABC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000032")]
	public static float progress
	{
		[Token(Token = "0x600014F")]
		[Address(RVA = "0x9EEB54", Offset = "0x9EEB54", VA = "0x9EEB54")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x9EEC6C", Offset = "0x9EEC6C", VA = "0x9EEC6C")]
	public static void Begin(int levelIndex, [Optional] Texture loadingScreenTexture, [Optional] Texture backgroundTexture)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x9EED58", Offset = "0x9EED58", VA = "0x9EED58")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x9EEDE0", Offset = "0x9EEDE0", VA = "0x9EEDE0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0B6C", Offset = "0x7E0B6C")]
	private IEnumerator LoadLevel()
	{
		return null;
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x9EEE80", Offset = "0x9EEE80", VA = "0x9EEE80")]
	public Oculus_LoadLevelAntu()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x9EEE94", Offset = "0x9EEE94", VA = "0x9EEE94")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E0BD0", Offset = "0x7E0BD0")]
	private bool <LoadLevel>b__13_0()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000044")]
public class ParticleEmissionController : MonoBehaviour
{
	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ParticleEmissionController Instance;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float[] qualitySettings;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentQualitySetting;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform[] targets;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<ParticleSystemPackage> packagedParticleSystems;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<ParticleSystem> singleParticleSystems;

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x9EFE50", Offset = "0x9EFE50", VA = "0x9EFE50")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x9EFEA4", Offset = "0x9EFEA4", VA = "0x9EFEA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x9EFEA8", Offset = "0x9EFEA8", VA = "0x9EFEA8")]
	public void Search()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x9EBE58", Offset = "0x9EBE58", VA = "0x9EBE58")]
	public void SetQuality(int index)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x9F010C", Offset = "0x9F010C", VA = "0x9F010C")]
	private void SetValues(ParticleSystem ps, bool isPackage)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x9F030C", Offset = "0x9F030C", VA = "0x9F030C")]
	private ParticleSystem.MinMaxCurve UpdateMinMaxCurve(ParticleSystem.MinMaxCurve inputCurve, float multiplier, bool isPackage)
	{
		return default(ParticleSystem.MinMaxCurve);
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x9EFF6C", Offset = "0x9EFF6C", VA = "0x9EFF6C")]
	private void IterateSearch(Transform t)
	{
	}

	[Token(Token = "0x600015D")]
	private void AddToList<T>(T newObject, List<T> list)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x9F063C", Offset = "0x9F063C", VA = "0x9F063C")]
	public ParticleEmissionController()
	{
	}
}
[Token(Token = "0x2000045")]
public class QualityDynamicController : MonoBehaviour
{
	[Token(Token = "0x20003A4")]
	public enum QualitySettingType
	{
		[Token(Token = "0x4001F1A")]
		GameObjects,
		[Token(Token = "0x4001F1B")]
		Events
	}

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static QualityDynamicController Instance;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<QualityDynamicController> controllers;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private QualitySetter[] targets;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private EventQualitySetter[] eventTargets;

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xCDF5D4", Offset = "0xCDF5D4", VA = "0xCDF5D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xCDF69C", Offset = "0xCDF69C", VA = "0xCDF69C")]
	public void SetQuality(int index)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xCDF7A8", Offset = "0xCDF7A8", VA = "0xCDF7A8")]
	private void ActualSetQuality(int index)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xCDF9CC", Offset = "0xCDF9CC", VA = "0xCDF9CC")]
	public QualityDynamicController()
	{
	}
}
[Serializable]
[Token(Token = "0x2000046")]
public class QualitySetter
{
	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject[] high;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] low;

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xCDFA3C", Offset = "0xCDFA3C", VA = "0xCDFA3C")]
	public QualitySetter()
	{
	}
}
[Serializable]
[Token(Token = "0x2000047")]
public class EventQualitySetter
{
	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent highEvents;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent lowEvents;

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xADCF18", Offset = "0xADCF18", VA = "0xADCF18")]
	public EventQualitySetter()
	{
	}
}
[Token(Token = "0x2000048")]
public class RecordingCamerasToggler : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003A5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A0C", Offset = "0x7D8A0C")]
	private sealed class <>c
	{
		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<TrackAsset, bool> <>9__10_0;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<TrackAsset, CinemachineTrack> <>9__10_1;

		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Func<TrackAsset, bool> <>9__11_0;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Func<TrackAsset, CinemachineTrack> <>9__11_1;

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0xCE06CC", Offset = "0xCE06CC", VA = "0xCE06CC")]
		public <>c()
		{
		}

		[Token(Token = "0x60022CB")]
		[Address(RVA = "0xCE06D4", Offset = "0xCE06D4", VA = "0xCE06D4")]
		internal bool <EnableRecordingCameras>b__10_0(TrackAsset o)
		{
			return default(bool);
		}

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0xCE0754", Offset = "0xCE0754", VA = "0xCE0754")]
		internal CinemachineTrack <EnableRecordingCameras>b__10_1(TrackAsset o)
		{
			return null;
		}

		[Token(Token = "0x60022CD")]
		[Address(RVA = "0xCE07D4", Offset = "0xCE07D4", VA = "0xCE07D4")]
		internal bool <OnDestroy>b__11_0(TrackAsset o)
		{
			return default(bool);
		}

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0xCE0854", Offset = "0xCE0854", VA = "0xCE0854")]
		internal CinemachineTrack <OnDestroy>b__11_1(TrackAsset o)
		{
			return null;
		}
	}

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static RecordingCamerasToggler Instance;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text frameCounter;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PlayableDirector mainPlayableDirector;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Camera mainCamera;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Camera recordingCamera;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool toggle;

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xCDFCBC", Offset = "0xCDFCBC", VA = "0xCDFCBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xCDFD10", Offset = "0xCDFD10", VA = "0xCDFD10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xCE025C", Offset = "0xCE025C", VA = "0xCE025C")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xCE0274", Offset = "0xCE0274", VA = "0xCE0274")]
	private void Update()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xCDFD18", Offset = "0xCDFD18", VA = "0xCDFD18")]
	private void EnableRecordingCameras(bool enable)
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xCE0378", Offset = "0xCE0378", VA = "0xCE0378")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xCE0660", Offset = "0xCE0660", VA = "0xCE0660")]
	public RecordingCamerasToggler()
	{
	}
}
[Token(Token = "0x2000049")]
public class ResetCustomRenderTexture : MonoBehaviour
{
	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CustomRenderTexture customRenderTexture;

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xCE08D4", Offset = "0xCE08D4", VA = "0xCE08D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xCE08D8", Offset = "0xCE08D8", VA = "0xCE08D8")]
	public void ResetRenderTexture()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xCE0968", Offset = "0xCE0968", VA = "0xCE0968")]
	public ResetCustomRenderTexture()
	{
	}
}
[Token(Token = "0x200004A")]
public class SceneLoader : MonoBehaviour
{
	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SceneLoadManager.SceneIndex nextScene;

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xA6D78C", Offset = "0xA6D78C", VA = "0xA6D78C")]
	public void LoadNext()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xA6D844", Offset = "0xA6D844", VA = "0xA6D844")]
	public void Load(int sceneIndex)
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xA6D8F8", Offset = "0xA6D8F8", VA = "0xA6D8F8")]
	public void Load(SceneLoadManager.SceneIndex sceneIndex)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xA6D9AC", Offset = "0xA6D9AC", VA = "0xA6D9AC")]
	public void Load()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xA6DA4C", Offset = "0xA6DA4C", VA = "0xA6DA4C")]
	public SceneLoader()
	{
	}
}
[Token(Token = "0x200004B")]
public class SceneLoadManager : MonoBehaviour
{
	[Token(Token = "0x20003A6")]
	public enum SceneIndex
	{
		[Token(Token = "0x4001F22")]
		MainMenu,
		[Token(Token = "0x4001F23")]
		Chapter01,
		[Token(Token = "0x4001F24")]
		Chapter02,
		[Token(Token = "0x4001F25")]
		Chapter03,
		[Token(Token = "0x4001F26")]
		Exit
	}

	[Token(Token = "0x20003A7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A1C", Offset = "0x7D8A1C")]
	private sealed class <ExitApplication>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000334")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60022D2")]
			[Address(RVA = "0xA6D718", Offset = "0xA6D718", VA = "0xA6D718", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000335")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60022D4")]
			[Address(RVA = "0xA6D784", Offset = "0xA6D784", VA = "0xA6D784", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0xA6D690", Offset = "0xA6D690", VA = "0xA6D690")]
		[DebuggerHidden]
		public <ExitApplication>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0xA6D6C4", Offset = "0xA6D6C4", VA = "0xA6D6C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0xA6D6C8", Offset = "0xA6D6C8", VA = "0xA6D6C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60022D3")]
		[Address(RVA = "0xA6D720", Offset = "0xA6D720", VA = "0xA6D720", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SceneLoadManager Instance;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Texture emptyScreen;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Texture blackScreen;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Texture loadScreen;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Texture loadScreenChinese;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int sceneToLoad;

	[Token(Token = "0x17000033")]
	public SceneIndex SceneToLoad
	{
		[Token(Token = "0x6000174")]
		[Address(RVA = "0xA6D3AC", Offset = "0xA6D3AC", VA = "0xA6D3AC")]
		set
		{
		}
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xA6D3B4", Offset = "0xA6D3B4", VA = "0xA6D3B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xA6D4C4", Offset = "0xA6D4C4", VA = "0xA6D4C4")]
	public void Load(int sceneIndex)
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xA6D628", Offset = "0xA6D628", VA = "0xA6D628")]
	public void Load(SceneIndex sceneIndex)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xA6D4CC", Offset = "0xA6D4CC", VA = "0xA6D4CC")]
	public void Load()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xA6D630", Offset = "0xA6D630", VA = "0xA6D630")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0BE0", Offset = "0x7E0BE0")]
	private IEnumerator ExitApplication()
	{
		return null;
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xA6D6BC", Offset = "0xA6D6BC", VA = "0xA6D6BC")]
	public SceneLoadManager()
	{
	}
}
[Token(Token = "0x200004C")]
public class ScreenShooter : MonoBehaviour
{
	[Token(Token = "0x600017B")]
	[Address(RVA = "0xA6DA54", Offset = "0xA6DA54", VA = "0xA6DA54")]
	public ScreenShooter()
	{
	}
}
[Token(Token = "0x200004D")]
public class SoundSnapshotSwitch : MonoBehaviour
{
	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioMixerSnapshot _normalSnapshot;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioMixerSnapshot _underwaterSnapshot;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float _transitionTimeUnderwater;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float _transitionTimeNormal;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string _playerTag;

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xA73D94", Offset = "0xA73D94", VA = "0xA73D94")]
	private void Awake()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xA73DB4", Offset = "0xA73DB4", VA = "0xA73DB4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xA73E10", Offset = "0xA73E10", VA = "0xA73E10")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xA73E6C", Offset = "0xA73E6C", VA = "0xA73E6C")]
	public SoundSnapshotSwitch()
	{
	}
}
[Serializable]
[Token(Token = "0x200004E")]
public class ActivatorBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Behaviour component;

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xC17144", Offset = "0xC17144", VA = "0xC17144", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xC17228", Offset = "0xC17228", VA = "0xC17228", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xC172BC", Offset = "0xC172BC", VA = "0xC172BC")]
	public ActivatorBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200004F")]
public class ActivatorClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ActivatorBehaviour template;

	[Token(Token = "0x17000034")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000183")]
		[Address(RVA = "0xC172C4", Offset = "0xC172C4", VA = "0xC172C4", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xC172CC", Offset = "0xC172CC", VA = "0xC172CC", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xC1736C", Offset = "0xC1736C", VA = "0xC1736C")]
	public ActivatorClip()
	{
	}
}
[Token(Token = "0x2000050")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x7D3AA0", Offset = "0x7D3AA0")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x7D3AA0", Offset = "0x7D3AA0")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x7D3AA0", Offset = "0x7D3AA0")]
public class ActivatorTrack : PlayableTrack
{
	[Token(Token = "0x6000186")]
	[Address(RVA = "0xC17374", Offset = "0xC17374", VA = "0xC17374")]
	public ActivatorTrack()
	{
	}
}
[Token(Token = "0x2000051")]
public class CustomAudioControlAsset : PlayableAsset
{
	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip clip;

	[Token(Token = "0x17000035")]
	public override double duration
	{
		[Token(Token = "0x6000187")]
		[Address(RVA = "0x9C0B40", Offset = "0x9C0B40", VA = "0x9C0B40", Slot = "7")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x9C0C0C", Offset = "0x9C0C0C", VA = "0x9C0C0C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x9C0CE4", Offset = "0x9C0CE4", VA = "0x9C0CE4")]
	public CustomAudioControlAsset()
	{
	}
}
[Token(Token = "0x2000052")]
public class CustomAudioControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioClip clip;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource source;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private double lastFrame;

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x9C0CEC", Offset = "0x9C0CEC", VA = "0x9C0CEC", Slot = "17")]
	public override void OnBehaviourPlay(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x9C0EAC", Offset = "0x9C0EAC", VA = "0x9C0EAC", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x9C0FA4", Offset = "0x9C0FA4", VA = "0x9C0FA4", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x9C12F8", Offset = "0x9C12F8", VA = "0x9C12F8")]
	public CustomAudioControlBehaviour()
	{
	}
}
[Token(Token = "0x2000053")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x7D3B48", Offset = "0x7D3B48")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x7D3B48", Offset = "0x7D3B48")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x7D3B48", Offset = "0x7D3B48")]
public class CustomAudioTrack : TrackAsset
{
	[Token(Token = "0x600018E")]
	[Address(RVA = "0x9C1300", Offset = "0x9C1300", VA = "0x9C1300")]
	public CustomAudioTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000054")]
public class InterpolationBehaviour : TimeBasedBehaviour
{
	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float iniValue;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float endValue;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected InterpolationData data;

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xA55A70", Offset = "0xA55A70", VA = "0xA55A70", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xA55C18", Offset = "0xA55C18", VA = "0xA55C18", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xA55B28", Offset = "0xA55B28", VA = "0xA55B28")]
	private void Interpolate(float t)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xA55C40", Offset = "0xA55C40", VA = "0xA55C40")]
	public InterpolationBehaviour()
	{
	}
}
[Token(Token = "0x2000055")]
public class InterpolationClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private InterpolationBehaviour template;

	[Token(Token = "0x17000036")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000193")]
		[Address(RVA = "0xA55C50", Offset = "0xA55C50", VA = "0xA55C50", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xA55C58", Offset = "0xA55C58", VA = "0xA55C58", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xA55CF8", Offset = "0xA55CF8", VA = "0xA55CF8")]
	public InterpolationClip()
	{
	}
}
[Token(Token = "0x2000056")]
public abstract class InterpolationData : MonoBehaviour
{
	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected float iniValue;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	protected bool setInitValueAtStart;

	[Token(Token = "0x6000196")]
	public abstract void Interpolate(float t);

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xA55D00", Offset = "0xA55D00", VA = "0xA55D00", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xA55D1C", Offset = "0xA55D1C", VA = "0xA55D1C", Slot = "6")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xA55D38", Offset = "0xA55D38", VA = "0xA55D38", Slot = "7")]
	public virtual void OnDestroy()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xA55D48", Offset = "0xA55D48", VA = "0xA55D48")]
	protected InterpolationData()
	{
	}
}
[Token(Token = "0x2000057")]
public class InterpolationLightAngle : InterpolationData
{
	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Light light;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float start;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float end;

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xA55D50", Offset = "0xA55D50", VA = "0xA55D50", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xA55E3C", Offset = "0xA55E3C", VA = "0xA55E3C")]
	public InterpolationLightAngle()
	{
	}
}
[Token(Token = "0x2000058")]
public class InterpolationLightBeamGlare : InterpolationData
{
	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private VolumetricLightBeam lightBeam;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float startValue;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float endValue;

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xA55E44", Offset = "0xA55E44", VA = "0xA55E44", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xA55F18", Offset = "0xA55F18", VA = "0xA55F18")]
	public InterpolationLightBeamGlare()
	{
	}
}
[Token(Token = "0x2000059")]
public class InterpolationLightColor : InterpolationData
{
	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Light light;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Color colorA;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Color colorB;

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xA55F20", Offset = "0xA55F20", VA = "0xA55F20", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xA55FF0", Offset = "0xA55FF0", VA = "0xA55FF0")]
	public InterpolationLightColor()
	{
	}
}
[Token(Token = "0x200005A")]
public class InterpolationLightRange : InterpolationData
{
	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Light light;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float start;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float end;

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xA56034", Offset = "0xA56034", VA = "0xA56034", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xA56120", Offset = "0xA56120", VA = "0xA56120")]
	public InterpolationLightRange()
	{
	}
}
[Token(Token = "0x200005B")]
public class InterpolationLightShadow : InterpolationData
{
	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Light light;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float start;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float end;

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xA56128", Offset = "0xA56128", VA = "0xA56128", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xA56214", Offset = "0xA56214", VA = "0xA56214")]
	public InterpolationLightShadow()
	{
	}
}
[Token(Token = "0x200005C")]
public class InterpolationMaterialAlpha : InterpolationMaterialBase
{
	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float start;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float end;

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xA5621C", Offset = "0xA5621C", VA = "0xA5621C", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xA56348", Offset = "0xA56348", VA = "0xA56348")]
	public InterpolationMaterialAlpha()
	{
	}
}
[Token(Token = "0x200005D")]
public class InterpolationMaterialBase : InterpolationData
{
	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Material mat;

	[Token(Token = "0x17000037")]
	public Material material
	{
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0xA56358", Offset = "0xA56358", VA = "0xA56358")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xA56360", Offset = "0xA56360", VA = "0xA56360", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xA56350", Offset = "0xA56350", VA = "0xA56350")]
	public InterpolationMaterialBase()
	{
	}
}
[Token(Token = "0x200005E")]
public class InterpolationMaterialColor : InterpolationMaterialBase
{
	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA4E0", Offset = "0x7DA4E0")]
	private Color colora;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA520", Offset = "0x7DA520")]
	private Color colorb;

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xA563C4", Offset = "0xA563C4", VA = "0xA563C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xA563D4", Offset = "0xA563D4", VA = "0xA563D4", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xA564B0", Offset = "0xA564B0", VA = "0xA564B0")]
	public InterpolationMaterialColor()
	{
	}
}
[Token(Token = "0x200005F")]
public class InterpolationMaterialColorRGB : InterpolationMaterialBase
{
	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool useTint;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA570", Offset = "0x7DA570")]
	private Color colora;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA5B0", Offset = "0x7DA5B0")]
	private Color colorb;

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xA564F4", Offset = "0xA564F4", VA = "0xA564F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xA56504", Offset = "0xA56504", VA = "0xA56504", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xA56600", Offset = "0xA56600", VA = "0xA56600")]
	public InterpolationMaterialColorRGB()
	{
	}
}
[Token(Token = "0x2000060")]
public class InterpolationMaterialEmissionColor : InterpolationMaterialBase
{
	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DA5F0", Offset = "0x7DA5F0")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA5F0", Offset = "0x7DA5F0")]
	private Color colorA;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DA654", Offset = "0x7DA654")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA654", Offset = "0x7DA654")]
	private Color colorB;

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xA56644", Offset = "0xA56644", VA = "0xA56644", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xA56720", Offset = "0xA56720", VA = "0xA56720")]
	public InterpolationMaterialEmissionColor()
	{
	}
}
[Token(Token = "0x2000061")]
public class InterpolationMaterialFade : InterpolationMaterialBase
{
	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float start;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float end;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float c;

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xA56764", Offset = "0xA56764", VA = "0xA56764", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xA56870", Offset = "0xA56870", VA = "0xA56870")]
	public InterpolationMaterialFade()
	{
	}
}
[Token(Token = "0x2000062")]
[ExecuteInEditMode]
public abstract class InterpolationMaterialGetter : InterpolationData
{
	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool useSharedMaterials;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] extractMaterialsFrom;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] excludeMaterialsFrom;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string[] extractPaths;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string[] excludePaths;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Material[] materials;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private StringBuilder pathStringBuilder;

	[Token(Token = "0x17000038")]
	public Material[] materialArray
	{
		[Token(Token = "0x60001B4")]
		[Address(RVA = "0xA56878", Offset = "0xA56878", VA = "0xA56878")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xA56880", Offset = "0xA56880", VA = "0xA56880", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xA568E4", Offset = "0xA568E4", VA = "0xA568E4")]
	public void GetMaterials(bool forceGet = false)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xA57468", Offset = "0xA57468", VA = "0xA57468")]
	protected bool ValidateMaterial(Material mat)
	{
		return default(bool);
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xA5750C", Offset = "0xA5750C", VA = "0xA5750C", Slot = "8")]
	protected virtual bool DoValidateMaterial(Material mat)
	{
		return default(bool);
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xA57514", Offset = "0xA57514", VA = "0xA57514", Slot = "9")]
	protected virtual void OnMaterialsGetted()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xA57304", Offset = "0xA57304", VA = "0xA57304")]
	private bool ShouldExclude(Renderer renderer, List<Renderer> excludedRenderers)
	{
		return default(bool);
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xA56F2C", Offset = "0xA56F2C", VA = "0xA56F2C")]
	private string GetPath(Transform rootTransform)
	{
		return null;
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xA5706C", Offset = "0xA5706C", VA = "0xA5706C")]
	private Transform GetTransform(string path)
	{
		return null;
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xA57518", Offset = "0xA57518", VA = "0xA57518")]
	public string[] GetextractPaths()
	{
		return null;
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xA57520", Offset = "0xA57520", VA = "0xA57520")]
	protected InterpolationMaterialGetter()
	{
	}
}
[Token(Token = "0x2000063")]
public class InterpolationMaterialGradient : InterpolationMaterialBase
{
	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DA6F8", Offset = "0x7DA6F8")]
	private string variableName;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string[] properties;

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xA575A4", Offset = "0xA575A4", VA = "0xA575A4", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xA576C0", Offset = "0xA576C0", VA = "0xA576C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xA576D0", Offset = "0xA576D0", VA = "0xA576D0")]
	public InterpolationMaterialGradient()
	{
	}
}
[Token(Token = "0x2000064")]
public class InterpolationMaterialLightmap : InterpolationMaterialGetter
{
	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA754", Offset = "0x7DA754")]
	private Color colora;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA794", Offset = "0x7DA794")]
	private Color colorb;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Color[] materialsOriginalColors;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA7D4", Offset = "0x7DA7D4")]
	private Color specularA;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA814", Offset = "0x7DA814")]
	private Color specularB;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Color[] materialsOriginalspecular;

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xA57728", Offset = "0xA57728", VA = "0xA57728", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xA57880", Offset = "0xA57880", VA = "0xA57880")]
	public InterpolationMaterialLightmap()
	{
	}
}
[Token(Token = "0x2000065")]
public class InterpolationMaterialSetterAlphaFader : InterpolationMaterialSetterAlphaFaderBase
{
	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xA578E0", Offset = "0xA578E0", VA = "0xA578E0")]
	public InterpolationMaterialSetterAlphaFader()
	{
	}
}
[Token(Token = "0x2000066")]
public abstract class InterpolationMaterialSetterAlphaFaderBase : InterpolationMaterialGetter
{
	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Color[] materialsOriginalColors;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Color[] materialsFinalColors;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected string materialPropertyName;

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xA57938", Offset = "0xA57938", VA = "0xA57938")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xA57964", Offset = "0xA57964", VA = "0xA57964", Slot = "10")]
	protected virtual string GetMaterialPropertyName()
	{
		return null;
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xA579AC", Offset = "0xA579AC", VA = "0xA579AC", Slot = "8")]
	protected override bool DoValidateMaterial(Material mat)
	{
		return default(bool);
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xA579D4", Offset = "0xA579D4", VA = "0xA579D4", Slot = "9")]
	protected override void OnMaterialsGetted()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xA57B34", Offset = "0xA57B34", VA = "0xA57B34", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xA578E4", Offset = "0xA578E4", VA = "0xA578E4")]
	protected InterpolationMaterialSetterAlphaFaderBase()
	{
	}
}
[Token(Token = "0x2000067")]
public class InterpolationMaterialSetterColor : InterpolationMaterialGetter
{
	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA854", Offset = "0x7DA854")]
	private Color colora;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA894", Offset = "0x7DA894")]
	private Color colorb;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Color[] materialsOriginalColors;

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xA57C98", Offset = "0xA57C98", VA = "0xA57C98", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xA57DB4", Offset = "0xA57DB4", VA = "0xA57DB4")]
	public InterpolationMaterialSetterColor()
	{
	}
}
[Token(Token = "0x2000068")]
public class InterpolationMaterialSetterDissolve : InterpolationMaterialGetter
{
	[Token(Token = "0x20003A8")]
	private enum DissolveType
	{
		[Token(Token = "0x4001F2A")]
		SHOW,
		[Token(Token = "0x4001F2B")]
		HIDE
	}

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform dissolveOrigin;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private DissolveType dissolveType;

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xA57DF4", Offset = "0xA57DF4", VA = "0xA57DF4", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xA57F94", Offset = "0xA57F94", VA = "0xA57F94", Slot = "7")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xA58098", Offset = "0xA58098", VA = "0xA58098")]
	public InterpolationMaterialSetterDissolve()
	{
	}
}
[Token(Token = "0x2000069")]
public class InterpolationMaterialSetterEmission : InterpolationMaterialGetter
{
	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA8F4", Offset = "0x7DA8F4")]
	private Color colorA;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA934", Offset = "0x7DA934")]
	private Color colorB;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private string variableName;

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xA5809C", Offset = "0xA5809C", VA = "0xA5809C", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xA581B4", Offset = "0xA581B4", VA = "0xA581B4")]
	public InterpolationMaterialSetterEmission()
	{
	}
}
[Token(Token = "0x200006A")]
public class InterpolationMaterialSetterEmissionRGB : InterpolationMaterialGetter
{
	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA984", Offset = "0x7DA984")]
	private Color colorA;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DA9C4", Offset = "0x7DA9C4")]
	private Color colorB;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private string variableName;

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xA58208", Offset = "0xA58208", VA = "0xA58208", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xA58320", Offset = "0xA58320", VA = "0xA58320")]
	public InterpolationMaterialSetterEmissionRGB()
	{
	}
}
[Token(Token = "0x200006B")]
[ExecuteInEditMode]
public class InterpolationMaterialSetterEmissionSphere : InterpolationMaterialBase
{
	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform origin;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Vector2 innerRadius;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Vector2 outerRadius;

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xA58374", Offset = "0xA58374", VA = "0xA58374", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xA584D4", Offset = "0xA584D4", VA = "0xA584D4")]
	public InterpolationMaterialSetterEmissionSphere()
	{
	}
}
[Token(Token = "0x200006C")]
public class InterpolationMaterialSetterEmissiveAlphaFader : InterpolationMaterialSetterAlphaFaderBase
{
	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xA58550", Offset = "0xA58550", VA = "0xA58550", Slot = "10")]
	protected override string GetMaterialPropertyName()
	{
		return null;
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xA58598", Offset = "0xA58598", VA = "0xA58598")]
	public InterpolationMaterialSetterEmissiveAlphaFader()
	{
	}
}
[Token(Token = "0x200006D")]
public class InterpolationMaterialSetterFade : InterpolationMaterialGetter
{
	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string propertyName;

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xA5859C", Offset = "0xA5859C", VA = "0xA5859C", Slot = "8")]
	protected override bool DoValidateMaterial(Material mat)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xA585C4", Offset = "0xA585C4", VA = "0xA585C4", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xA586B8", Offset = "0xA586B8", VA = "0xA586B8")]
	public InterpolationMaterialSetterFade()
	{
	}
}
[Token(Token = "0x200006E")]
public class InterpolationMaterialSetterTexture : InterpolationMaterialGetter
{
	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Texture textureA;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Texture textureB;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private string textureName;

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xA589B4", Offset = "0xA589B4", VA = "0xA589B4", Slot = "8")]
	protected override bool DoValidateMaterial(Material mat)
	{
		return default(bool);
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xA58BB0", Offset = "0xA58BB0", VA = "0xA58BB0", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xA58D60", Offset = "0xA58D60", VA = "0xA58D60")]
	public InterpolationMaterialSetterTexture()
	{
	}
}
[Token(Token = "0x200006F")]
public class InterpolationMaterialSetterTextureOffset : InterpolationMaterialGetter
{
	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Vector2 offsetA;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Vector2 offsetB;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private string textureName;

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xA58DB4", Offset = "0xA58DB4", VA = "0xA58DB4", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xA58F04", Offset = "0xA58F04", VA = "0xA58F04")]
	public InterpolationMaterialSetterTextureOffset()
	{
	}
}
[Token(Token = "0x2000070")]
public class InterpolationMaterialSetterVariable : InterpolationMaterialGetter
{
	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private string variableName;

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xA58F58", Offset = "0xA58F58", VA = "0xA58F58", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xA5904C", Offset = "0xA5904C", VA = "0xA5904C")]
	public InterpolationMaterialSetterVariable()
	{
	}
}
[Token(Token = "0x2000071")]
public class InterpolationMaterialSetterVector4 : InterpolationMaterialGetter
{
	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private string variableName;

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xA59220", Offset = "0xA59220", VA = "0xA59220", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xA59350", Offset = "0xA59350", VA = "0xA59350")]
	public InterpolationMaterialSetterVector4()
	{
	}
}
[Token(Token = "0x2000072")]
public class InterpolationMaterialVector : InterpolationMaterialBase
{
	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float B;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float C;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float D;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string variableName;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector4 vectorResult;

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xA59354", Offset = "0xA59354", VA = "0xA59354", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xA5949C", Offset = "0xA5949C", VA = "0xA5949C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xA594AC", Offset = "0xA594AC", VA = "0xA594AC")]
	public InterpolationMaterialVector()
	{
	}
}
[Token(Token = "0x2000073")]
public class InterpolationMaterialVector4 : InterpolationMaterialBase
{
	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string variableName;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector4 vectorResult;

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xA594D4", Offset = "0xA594D4", VA = "0xA594D4", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xA595B8", Offset = "0xA595B8", VA = "0xA595B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xA595C8", Offset = "0xA595C8", VA = "0xA595C8")]
	public InterpolationMaterialVector4()
	{
	}
}
[Token(Token = "0x2000074")]
public class InterpolationParticlePlay : InterpolationData
{
	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem particles;

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xA596CC", Offset = "0xA596CC", VA = "0xA596CC", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xA597D0", Offset = "0xA597D0", VA = "0xA597D0")]
	public InterpolationParticlePlay()
	{
	}
}
[Token(Token = "0x2000075")]
public class InterpolationPostProcessing : InterpolationData
{
	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PostProcessProfile profile;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool bloomIntensity;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SerializeField]
	private bool temperature;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	[SerializeField]
	private bool contrast;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	[SerializeField]
	private bool saturation;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private bool hueShift;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[SerializeField]
	private bool colorFilter;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DAB94", Offset = "0x7DAB94")]
	private Color colorFilterEnd;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ColorGrading colorGrading;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Bloom bloom;

	[Token(Token = "0x17000039")]
	private ColorGrading ColorGrading
	{
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0xA597D8", Offset = "0xA597D8", VA = "0xA597D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003A")]
	private Bloom Bloom
	{
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0xA59898", Offset = "0xA59898", VA = "0xA59898")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xA59958", Offset = "0xA59958", VA = "0xA59958", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xA59BD4", Offset = "0xA59BD4", VA = "0xA59BD4")]
	public InterpolationPostProcessing()
	{
	}
}
[Token(Token = "0x2000076")]
public class InterpolationReflectionProbe : InterpolationData
{
	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ReflectionProbe probe;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform renderersParent;

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xA59D34", Offset = "0xA59D34", VA = "0xA59D34", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xA59DD8", Offset = "0xA59DD8", VA = "0xA59DD8")]
	public void ResetRenderers()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xA59F20", Offset = "0xA59F20", VA = "0xA59F20")]
	public InterpolationReflectionProbe()
	{
	}
}
[Token(Token = "0x2000077")]
public class InterpolationTrailRendererColor : InterpolationData
{
	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TrailRenderer lineRenderer;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Color colorA;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Color colorB;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private string variableName;

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xA59F90", Offset = "0xA59F90", VA = "0xA59F90", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xA5A07C", Offset = "0xA5A07C", VA = "0xA5A07C")]
	public InterpolationTrailRendererColor()
	{
	}
}
[Token(Token = "0x2000078")]
public class InterpolationTrailRendererEmitting : InterpolationData
{
	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TrailRenderer lineRenderer;

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xA5A084", Offset = "0xA5A084", VA = "0xA5A084", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xA5A130", Offset = "0xA5A130", VA = "0xA5A130")]
	public InterpolationTrailRendererEmitting()
	{
	}
}
[Token(Token = "0x2000079")]
public class InterpolationTrailRendererSetter : InterpolationData
{
	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TrailRenderer lineRenderer;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector2 widthFromTo;

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xA5A138", Offset = "0xA5A138", VA = "0xA5A138", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xA5A224", Offset = "0xA5A224", VA = "0xA5A224")]
	public InterpolationTrailRendererSetter()
	{
	}
}
[Token(Token = "0x200007A")]
public class InterpolationVolumetricLightBeamSetter : InterpolationData
{
	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private VolumetricLightBeam lightBeam;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool changeIntensity;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private Vector2 intensityFromTo;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool changeAngle;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AnimationCurve angleCurve;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool changeRange;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AnimationCurve rangeCurve;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool changeColor;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DACE4", Offset = "0x7DACE4")]
	private Color colorA;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x7DAD24", Offset = "0x7DAD24")]
	private Color colorB;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private bool rotate;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform rotateAround;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private float rotationSpeed;

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xA5A22C", Offset = "0xA5A22C", VA = "0xA5A22C", Slot = "4")]
	public override void Interpolate(float t)
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xA5A430", Offset = "0xA5A430", VA = "0xA5A430")]
	public InterpolationVolumetricLightBeamSetter()
	{
	}
}
[Token(Token = "0x200007B")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x7D3C14", Offset = "0x7D3C14")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x7D3C14", Offset = "0x7D3C14")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x7D3C14", Offset = "0x7D3C14")]
public class InterpolationTrack : TrackAsset
{
	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xA59F28", Offset = "0xA59F28", VA = "0xA59F28")]
	public InterpolationTrack()
	{
	}
}
[Token(Token = "0x200007C")]
public class ITimeControlUpdateRenderTexture : MonoBehaviour, ITimeControl
{
	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CustomRenderTexture customRenderTexture;

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xA51B38", Offset = "0xA51B38", VA = "0xA51B38", Slot = "5")]
	public void OnControlTimeStart()
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xA51B3C", Offset = "0xA51B3C", VA = "0xA51B3C", Slot = "6")]
	public void OnControlTimeStop()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xA51B40", Offset = "0xA51B40", VA = "0xA51B40", Slot = "4")]
	public void SetTime(double time)
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xA51BD0", Offset = "0xA51BD0", VA = "0xA51BD0")]
	public ITimeControlUpdateRenderTexture()
	{
	}
}
[Token(Token = "0x200007D")]
public class ITimeControlVideoPlayer : MonoBehaviour, ITimeControl
{
	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xA51BD8", Offset = "0xA51BD8", VA = "0xA51BD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xA51C68", Offset = "0xA51C68", VA = "0xA51C68", Slot = "5")]
	public void OnControlTimeStart()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xA51CF8", Offset = "0xA51CF8", VA = "0xA51CF8", Slot = "6")]
	public void OnControlTimeStop()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xA51D88", Offset = "0xA51D88", VA = "0xA51D88", Slot = "4")]
	public void SetTime(double time)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xA51EB8", Offset = "0xA51EB8", VA = "0xA51EB8")]
	public ITimeControlVideoPlayer()
	{
	}
}
[Serializable]
[Token(Token = "0x200007E")]
public class LightControllerBehaviour : TimeBasedBehaviour
{
	[Serializable]
	[Token(Token = "0x20003A9")]
	private class LightVariables
	{
		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float inten;

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0xA5CAAC", Offset = "0xA5CAAC", VA = "0xA5CAAC")]
		public LightVariables()
		{
		}
	}

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LightVariables dataIN;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private LightVariables dataOUT;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Vector2 randomMultiplier;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Light light;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool initialized;

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xA5C7AC", Offset = "0xA5C7AC", VA = "0xA5C7AC", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xA5C88C", Offset = "0xA5C88C", VA = "0xA5C88C")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xA5CA10", Offset = "0xA5CA10", VA = "0xA5CA10", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xA5C8F8", Offset = "0xA5C8F8", VA = "0xA5C8F8")]
	private void SetLight(float t)
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xA5CA38", Offset = "0xA5CA38", VA = "0xA5CA38")]
	public LightControllerBehaviour()
	{
	}
}
[Token(Token = "0x200007F")]
public class LightControllerClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LightControllerBehaviour template;

	[Token(Token = "0x1700003B")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600020A")]
		[Address(RVA = "0xA5CABC", Offset = "0xA5CABC", VA = "0xA5CABC", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xA5CAC4", Offset = "0xA5CAC4", VA = "0xA5CAC4", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xA5CB64", Offset = "0xA5CB64", VA = "0xA5CB64")]
	public LightControllerClip()
	{
	}
}
[Token(Token = "0x2000080")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x7D3CC0", Offset = "0x7D3CC0")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x7D3CC0", Offset = "0x7D3CC0")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x7D3CC0", Offset = "0x7D3CC0")]
public class LightControllerTrack : TrackAsset
{
	[Token(Token = "0x600020D")]
	[Address(RVA = "0xA5CB6C", Offset = "0xA5CB6C", VA = "0xA5CB6C")]
	public LightControllerTrack()
	{
	}
}
[Token(Token = "0x2000081")]
[ExecuteInEditMode]
public class TimelineAudioControlConverter : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003AA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A2C", Offset = "0x7D8A2C")]
	private sealed class <>c
	{
		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<TrackAsset, bool> <>9__9_0;

		[Token(Token = "0x4001F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<TrackAsset, AudioTrack> <>9__9_1;

		[Token(Token = "0x4001F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Func<TrackAsset, bool> <>9__11_0;

		[Token(Token = "0x4001F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Func<TrackAsset, CustomAudioTrack> <>9__11_1;

		[Token(Token = "0x4001F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static Func<TrackAsset, bool> <>9__13_0;

		[Token(Token = "0x4001F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static Func<TrackAsset, AudioTrack> <>9__13_1;

		[Token(Token = "0x4001F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Func<TrackAsset, bool> <>9__15_0;

		[Token(Token = "0x4001F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static Func<TrackAsset, AudioTrack> <>9__15_1;

		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Func<TrackAsset, bool> <>9__15_2;

		[Token(Token = "0x4001F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static Func<TrackAsset, CustomAudioTrack> <>9__15_3;

		[Token(Token = "0x60022D7")]
		[Address(RVA = "0xA78198", Offset = "0xA78198", VA = "0xA78198")]
		public <>c()
		{
		}

		[Token(Token = "0x60022D8")]
		[Address(RVA = "0xA781A0", Offset = "0xA781A0", VA = "0xA781A0")]
		internal bool <SetCustomTracks>b__9_0(TrackAsset c)
		{
			return default(bool);
		}

		[Token(Token = "0x60022D9")]
		[Address(RVA = "0xA78220", Offset = "0xA78220", VA = "0xA78220")]
		internal AudioTrack <SetCustomTracks>b__9_1(TrackAsset c)
		{
			return null;
		}

		[Token(Token = "0x60022DA")]
		[Address(RVA = "0xA782A0", Offset = "0xA782A0", VA = "0xA782A0")]
		internal bool <CheckRepeatedBindings>b__11_0(TrackAsset c)
		{
			return default(bool);
		}

		[Token(Token = "0x60022DB")]
		[Address(RVA = "0xA78320", Offset = "0xA78320", VA = "0xA78320")]
		internal CustomAudioTrack <CheckRepeatedBindings>b__11_1(TrackAsset c)
		{
			return null;
		}

		[Token(Token = "0x60022DC")]
		[Address(RVA = "0xA783A0", Offset = "0xA783A0", VA = "0xA783A0")]
		internal bool <SetMissingClips>b__13_0(TrackAsset c)
		{
			return default(bool);
		}

		[Token(Token = "0x60022DD")]
		[Address(RVA = "0xA78420", Offset = "0xA78420", VA = "0xA78420")]
		internal AudioTrack <SetMissingClips>b__13_1(TrackAsset c)
		{
			return null;
		}

		[Token(Token = "0x60022DE")]
		[Address(RVA = "0xA784A0", Offset = "0xA784A0", VA = "0xA784A0")]
		internal bool <MuteCustomTracks>b__15_0(TrackAsset c)
		{
			return default(bool);
		}

		[Token(Token = "0x60022DF")]
		[Address(RVA = "0xA78520", Offset = "0xA78520", VA = "0xA78520")]
		internal AudioTrack <MuteCustomTracks>b__15_1(TrackAsset c)
		{
			return null;
		}

		[Token(Token = "0x60022E0")]
		[Address(RVA = "0xA785A0", Offset = "0xA785A0", VA = "0xA785A0")]
		internal bool <MuteCustomTracks>b__15_2(TrackAsset c)
		{
			return default(bool);
		}

		[Token(Token = "0x60022E1")]
		[Address(RVA = "0xA78620", Offset = "0xA78620", VA = "0xA78620")]
		internal CustomAudioTrack <MuteCustomTracks>b__15_3(TrackAsset c)
		{
			return null;
		}
	}

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector[] directors;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PlayableDirector _currentTarget;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DADF4", Offset = "0x7DADF4")]
	public bool setTracks;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool checkBindings;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool setMissingClips;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool useCustomTracks;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool useAudioTracks;

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xA76D38", Offset = "0xA76D38", VA = "0xA76D38")]
	private void Update()
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xA76DD8", Offset = "0xA76DD8", VA = "0xA76DD8")]
	private void SetCustomTracks(PlayableDirector[] targets)
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xA76FE8", Offset = "0xA76FE8", VA = "0xA76FE8")]
	private void SetCustomTracks()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xA76E60", Offset = "0xA76E60", VA = "0xA76E60")]
	private void CheckRepeatedBindings(PlayableDirector[] targets)
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xA7740C", Offset = "0xA7740C", VA = "0xA7740C")]
	private void CheckRepeatedBindings()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xA76EE0", Offset = "0xA76EE0", VA = "0xA76EE0")]
	private void SetMissingClips(PlayableDirector[] targets)
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xA777FC", Offset = "0xA777FC", VA = "0xA777FC")]
	private void SetMissingClips()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xA76F60", Offset = "0xA76F60", VA = "0xA76F60")]
	private void MuteCustomTracks(PlayableDirector[] targets, bool mute)
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xA77CFC", Offset = "0xA77CFC", VA = "0xA77CFC")]
	private void MuteCustomTracks(bool mute)
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xA7812C", Offset = "0xA7812C", VA = "0xA7812C")]
	public TimelineAudioControlConverter()
	{
	}
}
[Token(Token = "0x2000082")]
public class TimeBasedBehaviour : PlayableBehaviour
{
	[Token(Token = "0x20003AB")]
	protected enum CurveType
	{
		[Token(Token = "0x4001F39")]
		linear,
		[Token(Token = "0x4001F3A")]
		ease,
		[Token(Token = "0x4001F3B")]
		raised,
		[Token(Token = "0x4001F3C")]
		sunken
	}

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private CurveType curveType;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AnimationCurve easeInOutCurve;

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xA76B44", Offset = "0xA76B44", VA = "0xA76B44")]
	protected float GetTime(Playable playable)
	{
		return default(float);
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xA76C40", Offset = "0xA76C40", VA = "0xA76C40")]
	private float GetNormalizedTime(Playable playable)
	{
		return default(float);
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xA76CF8", Offset = "0xA76CF8", VA = "0xA76CF8")]
	public TimeBasedBehaviour()
	{
	}
}
[Token(Token = "0x2000083")]
public class TimelineController : MonoBehaviour
{
	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TimelineController Instance;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PlayableDirector playable;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool pauseForced;

	[Token(Token = "0x1700003C")]
	public PlayableDirector mainTimeline
	{
		[Token(Token = "0x600021B")]
		[Address(RVA = "0xA786A0", Offset = "0xA786A0", VA = "0xA786A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xA786A8", Offset = "0xA786A8", VA = "0xA786A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xA786FC", Offset = "0xA786FC", VA = "0xA786FC")]
	public void JumpTo(int frame)
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xA787B8", Offset = "0xA787B8", VA = "0xA787B8")]
	public void ChangeTimeBy(float modifier)
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xA7891C", Offset = "0xA7891C", VA = "0xA7891C")]
	public void Pause(bool soft = false)
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xA789EC", Offset = "0xA789EC", VA = "0xA789EC")]
	public void Resume(bool soft = false)
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xA78A9C", Offset = "0xA78A9C", VA = "0xA78A9C")]
	public void PauseResume()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xA78B54", Offset = "0xA78B54", VA = "0xA78B54")]
	public void Play()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xA78C5C", Offset = "0xA78C5C", VA = "0xA78C5C")]
	public TimelineController()
	{
	}
}
[Token(Token = "0x2000084")]
public class AnimationUVReader : MonoBehaviour
{
	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform proxyEyeL;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform proxyEyeR;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Renderer renEyeL;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Renderer renEyeR;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material matEyeL;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material matEyeR;

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xE0E28C", Offset = "0xE0E28C", VA = "0xE0E28C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xE0E360", Offset = "0xE0E360", VA = "0xE0E360")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xE0E568", Offset = "0xE0E568", VA = "0xE0E568")]
	public AnimationUVReader()
	{
	}
}
[Token(Token = "0x2000085")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D3D78", Offset = "0x7D3D78")]
[ExecuteInEditMode]
public class AutoBinding : MonoBehaviour
{
	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PlayableDirector director;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEngine.Object[] bindings;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<UnityEngine.Object, int> bindingReference;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int index;

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x9B6A74", Offset = "0x9B6A74", VA = "0x9B6A74")]
	private void Update()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x9B7138", Offset = "0x9B7138", VA = "0x9B7138")]
	public AutoBinding()
	{
	}
}
[Token(Token = "0x2000086")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D3DEC", Offset = "0x7D3DEC")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
public class ForceLightCookieUpdate : MonoBehaviour
{
	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Light light;

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xADE0F8", Offset = "0xADE0F8", VA = "0xADE0F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xADE150", Offset = "0xADE150", VA = "0xADE150")]
	private void Update()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xADE17C", Offset = "0xADE17C", VA = "0xADE17C")]
	public ForceLightCookieUpdate()
	{
	}
}
[Token(Token = "0x2000087")]
public class FXController : MonoBehaviour
{
	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FXController Instance;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] effects;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool state;

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xADD0AC", Offset = "0xADD0AC", VA = "0xADD0AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xADD100", Offset = "0xADD100", VA = "0xADD100")]
	public void ChangeState()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xADD1F0", Offset = "0xADD1F0", VA = "0xADD1F0")]
	public FXController()
	{
	}
}
[Token(Token = "0x2000088")]
public class GameObjectEnablerTest : MonoBehaviour
{
	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] gameObjects;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform objectToPaint;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform sphere;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private byte increment;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Mesh mesh;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] vPos;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color32[] vColor;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float sqrRadius;

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xADE184", Offset = "0xADE184", VA = "0xADE184")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xADE2EC", Offset = "0xADE2EC", VA = "0xADE2EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xADE310", Offset = "0xADE310", VA = "0xADE310")]
	private void PressP()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xADE188", Offset = "0xADE188", VA = "0xADE188")]
	private void InitVertexPaint()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xADE40C", Offset = "0xADE40C", VA = "0xADE40C")]
	private void VertexPaint()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xADE624", Offset = "0xADE624", VA = "0xADE624")]
	public GameObjectEnablerTest()
	{
	}
}
[Token(Token = "0x2000089")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D3E70", Offset = "0x7D3E70")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
public class ImageEffects : MonoBehaviour
{
	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ImageEffects Instance;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Material fadeMaterial;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material freezeMaterial;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RenderTexture temp;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float fade;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float freeze;

	[Token(Token = "0x1700003D")]
	public float Fade
	{
		[Token(Token = "0x6000235")]
		[Address(RVA = "0xA51EC0", Offset = "0xA51EC0", VA = "0xA51EC0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000236")]
		[Address(RVA = "0xA51EC8", Offset = "0xA51EC8", VA = "0xA51EC8")]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public float Freeze
	{
		[Token(Token = "0x6000237")]
		[Address(RVA = "0xA51F7C", Offset = "0xA51F7C", VA = "0xA51F7C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000238")]
		[Address(RVA = "0xA51F84", Offset = "0xA51F84", VA = "0xA51F84")]
		set
		{
		}
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xA52038", Offset = "0xA52038", VA = "0xA52038")]
	private void Awake()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xA5208C", Offset = "0xA5208C", VA = "0xA5208C")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xA52228", Offset = "0xA52228", VA = "0xA52228")]
	public ImageEffects()
	{
	}
}
[Token(Token = "0x200008A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D3EF4", Offset = "0x7D3EF4")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
public class ParticleSystemController : MonoBehaviour
{
	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ParticleSystem ps;

	[Token(Token = "0x1700003F")]
	private Vector3 rotation
	{
		[Token(Token = "0x600023C")]
		[Address(RVA = "0x9F06B4", Offset = "0x9F06B4", VA = "0x9F06B4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x9F06FC", Offset = "0x9F06FC", VA = "0x9F06FC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x9F0838", Offset = "0x9F0838", VA = "0x9F0838")]
	public ParticleSystemController()
	{
	}
}
[Token(Token = "0x200008B")]
public class SelfDestruct : MonoBehaviour
{
	[Token(Token = "0x600023F")]
	[Address(RVA = "0xA6DA5C", Offset = "0xA6DA5C", VA = "0xA6DA5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xA6DAD8", Offset = "0xA6DAD8", VA = "0xA6DAD8")]
	public SelfDestruct()
	{
	}
}
[Token(Token = "0x200008C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D3F78", Offset = "0x7D3F78")]
public class VideoPlayerPreparer : MonoBehaviour
{
	[Token(Token = "0x6000241")]
	[Address(RVA = "0x16022F0", Offset = "0x16022F0", VA = "0x16022F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x16022F4", Offset = "0x16022F4", VA = "0x16022F4")]
	public void PrepareVideo()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x1602354", Offset = "0x1602354", VA = "0x1602354")]
	public VideoPlayerPreparer()
	{
	}
}
[Token(Token = "0x200008D")]
public class WaterController : MonoBehaviour
{
	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static WaterController Instance;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer[] renderers;

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x1608C64", Offset = "0x1608C64", VA = "0x1608C64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x1608CB8", Offset = "0x1608CB8", VA = "0x1608CB8")]
	public void SetQuality(int index)
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x1608D0C", Offset = "0x1608D0C", VA = "0x1608D0C")]
	public void EnableTessellation(bool enabled)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x1608E24", Offset = "0x1608E24", VA = "0x1608E24")]
	public void SetTessellationEdgeLength(int amount)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x1608F24", Offset = "0x1608F24", VA = "0x1608F24")]
	public WaterController()
	{
	}
}
[Token(Token = "0x200008E")]
public class WaterSplash : MonoBehaviour
{
	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Transform poolParent;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject waterSplashPrefab;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LayerMask layerMask;

	[Token(Token = "0x17000040")]
	private Transform PoolParent
	{
		[Token(Token = "0x6000249")]
		[Address(RVA = "0x1608F2C", Offset = "0x1608F2C", VA = "0x1608F2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x1609008", Offset = "0x1609008", VA = "0x1609008")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x1609214", Offset = "0x1609214", VA = "0x1609214")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x1609114", Offset = "0x1609114", VA = "0x1609114")]
	private void Splash(Vector3 position)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x16090B8", Offset = "0x16090B8", VA = "0x16090B8")]
	private bool LayerMaskContains(LayerMask mask, int layer)
	{
		return default(bool);
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x16092C4", Offset = "0x16092C4", VA = "0x16092C4")]
	public WaterSplash()
	{
	}
}
[Token(Token = "0x200008F")]
public class MyXRController : MonoBehaviour
{
	[Token(Token = "0x20003AC")]
	private enum XRControllerType
	{
		[Token(Token = "0x4001F3E")]
		None,
		[Token(Token = "0x4001F3F")]
		Vive
	}

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MyXRController Instance;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform cameraRig;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private XRControllerType xRControllerType;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool onlyInEditor;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform leftHand;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform rightHand;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject controller1;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject controller2;

	[Token(Token = "0x17000041")]
	public Transform LeftHand
	{
		[Token(Token = "0x600024F")]
		[Address(RVA = "0x9EC0FC", Offset = "0x9EC0FC", VA = "0x9EC0FC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000250")]
		[Address(RVA = "0x9EC264", Offset = "0x9EC264", VA = "0x9EC264")]
		private set
		{
		}
	}

	[Token(Token = "0x17000042")]
	public Transform RightHand
	{
		[Token(Token = "0x6000251")]
		[Address(RVA = "0x9EC26C", Offset = "0x9EC26C", VA = "0x9EC26C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000252")]
		[Address(RVA = "0x9EC300", Offset = "0x9EC300", VA = "0x9EC300")]
		private set
		{
		}
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x9EC308", Offset = "0x9EC308", VA = "0x9EC308")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x9EC624", Offset = "0x9EC624", VA = "0x9EC624")]
	private void Update()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x9EC190", Offset = "0x9EC190", VA = "0x9EC190")]
	private Transform CreateHandTracker(string name)
	{
		return null;
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x9EC88C", Offset = "0x9EC88C", VA = "0x9EC88C")]
	public void ControllersVisibility(bool enable)
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x9EC3E4", Offset = "0x9EC3E4", VA = "0x9EC3E4")]
	private void InstantiateXRControllers()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x9EC8D4", Offset = "0x9EC8D4", VA = "0x9EC8D4")]
	public MyXRController()
	{
	}
}
[Token(Token = "0x2000090")]
public static class MyXRInput
{
	[Token(Token = "0x20003AD")]
	public class GenericTracker
	{
		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal XRNode node;

		[Token(Token = "0x17000336")]
		public string Name
		{
			[Token(Token = "0x60022E2")]
			[Address(RVA = "0x9EC08C", Offset = "0x9EC08C", VA = "0x9EC08C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000337")]
		public bool isTracked
		{
			[Token(Token = "0x60022E3")]
			[Address(RVA = "0x9ED6A4", Offset = "0x9ED6A4", VA = "0x9ED6A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000338")]
		public Vector3 LocalPosition
		{
			[Token(Token = "0x60022E4")]
			[Address(RVA = "0x9ED404", Offset = "0x9ED404", VA = "0x9ED404")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000339")]
		public Quaternion LocalRotation
		{
			[Token(Token = "0x60022E5")]
			[Address(RVA = "0x9EE71C", Offset = "0x9EE71C", VA = "0x9EE71C")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700033A")]
		public Vector3 Position
		{
			[Token(Token = "0x60022E6")]
			[Address(RVA = "0x9EC764", Offset = "0x9EC764", VA = "0x9EC764")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700033B")]
		public Quaternion Rotation
		{
			[Token(Token = "0x60022E7")]
			[Address(RVA = "0x9EC7F4", Offset = "0x9EC7F4", VA = "0x9EC7F4")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x60022E8")]
		[Address(RVA = "0x9EE784", Offset = "0x9EE784", VA = "0x9EE784")]
		public GenericTracker(XRNode node)
		{
		}
	}

	[Token(Token = "0x20003AE")]
	public class HandTracker : GenericTracker
	{
		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool triggered;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool grip;

		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		private bool menu;

		[Token(Token = "0x1700033C")]
		public bool Trigger
		{
			[Token(Token = "0x60022E9")]
			[Address(RVA = "0x9EDC44", Offset = "0x9EDC44", VA = "0x9EDC44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700033D")]
		public bool TriggerDown
		{
			[Token(Token = "0x60022EA")]
			[Address(RVA = "0x9ED7F8", Offset = "0x9ED7F8", VA = "0x9ED7F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700033E")]
		public bool TriggerUp
		{
			[Token(Token = "0x60022EB")]
			[Address(RVA = "0x9ED914", Offset = "0x9ED914", VA = "0x9ED914")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700033F")]
		public bool Grip
		{
			[Token(Token = "0x60022EC")]
			[Address(RVA = "0x9EDD90", Offset = "0x9EDD90", VA = "0x9EDD90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000340")]
		public bool GripDown
		{
			[Token(Token = "0x60022ED")]
			[Address(RVA = "0x9EDA3C", Offset = "0x9EDA3C", VA = "0x9EDA3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000341")]
		public bool GripUp
		{
			[Token(Token = "0x60022EE")]
			[Address(RVA = "0x9EDB58", Offset = "0x9EDB58", VA = "0x9EDB58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000342")]
		public bool AxisClick
		{
			[Token(Token = "0x60022EF")]
			[Address(RVA = "0x9EDEDC", Offset = "0x9EDEDC", VA = "0x9EDEDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000343")]
		public bool AxisTouch
		{
			[Token(Token = "0x60022F0")]
			[Address(RVA = "0x9EE7B0", Offset = "0x9EE7B0", VA = "0x9EE7B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000344")]
		public bool Menu
		{
			[Token(Token = "0x60022F1")]
			[Address(RVA = "0x9EE028", Offset = "0x9EE028", VA = "0x9EE028")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000345")]
		public bool MenuDown
		{
			[Token(Token = "0x60022F2")]
			[Address(RVA = "0x9EE84C", Offset = "0x9EE84C", VA = "0x9EE84C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000346")]
		public bool MenuUp
		{
			[Token(Token = "0x60022F3")]
			[Address(RVA = "0x9EE894", Offset = "0x9EE894", VA = "0x9EE894")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000347")]
		public Vector2 Axis
		{
			[Token(Token = "0x60022F4")]
			[Address(RVA = "0x9EE8D0", Offset = "0x9EE8D0", VA = "0x9EE8D0")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000348")]
		public float AxisDeg
		{
			[Token(Token = "0x60022F5")]
			[Address(RVA = "0x9EE96C", Offset = "0x9EE96C", VA = "0x9EE96C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60022F6")]
		[Address(RVA = "0x9EEA60", Offset = "0x9EEA60", VA = "0x9EEA60")]
		public HandTracker(XRNode node)
		{
		}
	}

	[Token(Token = "0x20003AF")]
	public class HeadTracker : GenericTracker
	{
		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool active;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GenericTracker LeftEye;

		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GenericTracker RightEye;

		[Token(Token = "0x17000349")]
		public bool isActive
		{
			[Token(Token = "0x60022F7")]
			[Address(RVA = "0x9EEA8C", Offset = "0x9EEA8C", VA = "0x9EEA8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034A")]
		public bool activated
		{
			[Token(Token = "0x60022F8")]
			[Address(RVA = "0x9EEA94", Offset = "0x9EEA94", VA = "0x9EEA94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034B")]
		public bool disabled
		{
			[Token(Token = "0x60022F9")]
			[Address(RVA = "0x9EEAB4", Offset = "0x9EEAB4", VA = "0x9EEAB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60022FA")]
		[Address(RVA = "0x9ED210", Offset = "0x9ED210", VA = "0x9ED210")]
		public HeadTracker()
		{
		}
	}

	[Token(Token = "0x20003B0")]
	public class LeftTracker : HandTracker
	{
		[Token(Token = "0x60022FB")]
		[Address(RVA = "0x9ED2B0", Offset = "0x9ED2B0", VA = "0x9ED2B0")]
		public LeftTracker()
		{
		}
	}

	[Token(Token = "0x20003B1")]
	public class RightTracker : HandTracker
	{
		[Token(Token = "0x60022FC")]
		[Address(RVA = "0x9ED2DC", Offset = "0x9ED2DC", VA = "0x9ED2DC")]
		public RightTracker()
		{
		}
	}

	[Token(Token = "0x20003B2")]
	public class BothTracker
	{
		[Token(Token = "0x1700034C")]
		public Vector3 LeftToRight
		{
			[Token(Token = "0x60022FD")]
			[Address(RVA = "0x9ED310", Offset = "0x9ED310", VA = "0x9ED310")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700034D")]
		public Vector3 LocalCenterPosition
		{
			[Token(Token = "0x60022FE")]
			[Address(RVA = "0x9ED46C", Offset = "0x9ED46C", VA = "0x9ED46C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700034E")]
		public Vector3 CenterPosition
		{
			[Token(Token = "0x60022FF")]
			[Address(RVA = "0x9ED56C", Offset = "0x9ED56C", VA = "0x9ED56C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700034F")]
		public bool EitherAreTracked
		{
			[Token(Token = "0x6002300")]
			[Address(RVA = "0x9ED5F4", Offset = "0x9ED5F4", VA = "0x9ED5F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000350")]
		public bool EitherTriggerDown
		{
			[Token(Token = "0x6002301")]
			[Address(RVA = "0x9ED70C", Offset = "0x9ED70C", VA = "0x9ED70C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000351")]
		public bool EitherTriggerUp
		{
			[Token(Token = "0x6002302")]
			[Address(RVA = "0x9ED840", Offset = "0x9ED840", VA = "0x9ED840")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000352")]
		public bool EitherGripDown
		{
			[Token(Token = "0x6002303")]
			[Address(RVA = "0x9ED950", Offset = "0x9ED950", VA = "0x9ED950")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000353")]
		public bool EitherGripUp
		{
			[Token(Token = "0x6002304")]
			[Address(RVA = "0x9EDA84", Offset = "0x9EDA84", VA = "0x9EDA84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000354")]
		public bool EitherTrigger
		{
			[Token(Token = "0x6002305")]
			[Address(RVA = "0x9EDB94", Offset = "0x9EDB94", VA = "0x9EDB94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000355")]
		public bool EitherGrip
		{
			[Token(Token = "0x6002306")]
			[Address(RVA = "0x9EDCE0", Offset = "0x9EDCE0", VA = "0x9EDCE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000356")]
		public bool EitherAxisClick
		{
			[Token(Token = "0x6002307")]
			[Address(RVA = "0x9EDE2C", Offset = "0x9EDE2C", VA = "0x9EDE2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000357")]
		public bool EitherMenu
		{
			[Token(Token = "0x6002308")]
			[Address(RVA = "0x9EDF78", Offset = "0x9EDF78", VA = "0x9EDF78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000358")]
		public bool BothTriggerDown
		{
			[Token(Token = "0x6002309")]
			[Address(RVA = "0x9EE0C4", Offset = "0x9EE0C4", VA = "0x9EE0C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000359")]
		public bool BothTriggerUp
		{
			[Token(Token = "0x600230A")]
			[Address(RVA = "0x9EE1B8", Offset = "0x9EE1B8", VA = "0x9EE1B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035A")]
		public bool BothGripDown
		{
			[Token(Token = "0x600230B")]
			[Address(RVA = "0x9EE290", Offset = "0x9EE290", VA = "0x9EE290")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035B")]
		public bool BothGripUp
		{
			[Token(Token = "0x600230C")]
			[Address(RVA = "0x9EE384", Offset = "0x9EE384", VA = "0x9EE384")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035C")]
		public bool BothTrigger
		{
			[Token(Token = "0x600230D")]
			[Address(RVA = "0x9EE45C", Offset = "0x9EE45C", VA = "0x9EE45C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035D")]
		public bool BothGrip
		{
			[Token(Token = "0x600230E")]
			[Address(RVA = "0x9EE50C", Offset = "0x9EE50C", VA = "0x9EE50C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035E")]
		public bool BothAxisClick
		{
			[Token(Token = "0x600230F")]
			[Address(RVA = "0x9EE5BC", Offset = "0x9EE5BC", VA = "0x9EE5BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035F")]
		public bool BothMenu
		{
			[Token(Token = "0x6002310")]
			[Address(RVA = "0x9EE66C", Offset = "0x9EE66C", VA = "0x9EE66C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002311")]
		[Address(RVA = "0x9ED308", Offset = "0x9ED308", VA = "0x9ED308")]
		public BothTracker()
		{
		}
	}

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HeadTracker Head;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static HandTracker LeftHand;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static HandTracker RightHand;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static BothTracker BothHands;

	[Token(Token = "0x17000043")]
	private static Transform cameraRig
	{
		[Token(Token = "0x6000259")]
		[Address(RVA = "0x9EC8E4", Offset = "0x9EC8E4", VA = "0x9EC8E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x9EC91C", Offset = "0x9EC91C", VA = "0x9EC91C")]
	private static Vector3 LocalToWorldPosition(Vector3 localPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x9ECB0C", Offset = "0x9ECB0C", VA = "0x9ECB0C")]
	private static Quaternion LocalToWorldRotation(Quaternion localRotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0x9ECC78", Offset = "0x9ECC78", VA = "0x9ECC78")]
	private static bool GetIsTracked(XRNode node)
	{
		return default(bool);
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x9ECD34", Offset = "0x9ECD34", VA = "0x9ECD34")]
	private static string GetName(XRNode node)
	{
		return null;
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x9ECDB8", Offset = "0x9ECDB8", VA = "0x9ECDB8")]
	private static Vector3 GetLocalPosition(XRNode node)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x9ECEC8", Offset = "0x9ECEC8", VA = "0x9ECEC8")]
	private static Quaternion GetLocalRotation(XRNode node)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x9ECFDC", Offset = "0x9ECFDC", VA = "0x9ECFDC")]
	private static bool GetButton(XRNode node, InputFeatureUsage<bool> feature)
	{
		return default(bool);
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x9ED048", Offset = "0x9ED048", VA = "0x9ED048")]
	private static Vector2 GetAxis(XRNode node, InputFeatureUsage<Vector2> feature)
	{
		return default(Vector2);
	}
}
[Token(Token = "0x2000091")]
public class XRLightController : MonoBehaviour
{
	[Token(Token = "0x6000263")]
	[Address(RVA = "0x160A004", Offset = "0x160A004", VA = "0x160A004")]
	public XRLightController()
	{
	}
}
[Token(Token = "0x2000092")]
public class XRLightControllerColorGUI : MonoBehaviour
{
	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RawImage colorWheel;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform pivotRect;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RawImage colorPicker;

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x160A00C", Offset = "0x160A00C", VA = "0x160A00C")]
	public void SetColor(Color color)
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x160A05C", Offset = "0x160A05C", VA = "0x160A05C")]
	public void SetColor(float h, float s, float v)
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x160A250", Offset = "0x160A250", VA = "0x160A250")]
	public void SetVisibility(bool visibility)
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x160A298", Offset = "0x160A298", VA = "0x160A298")]
	public XRLightControllerColorGUI()
	{
	}
}
[Token(Token = "0x2000093")]
public class XRLightControllerForHand : MonoBehaviour
{
	[Token(Token = "0x6000268")]
	[Address(RVA = "0x160A2A0", Offset = "0x160A2A0", VA = "0x160A2A0")]
	public XRLightControllerForHand()
	{
	}
}
[Token(Token = "0x2000094")]
public class XRLightControllerForLights : MonoBehaviour
{
	[Token(Token = "0x6000269")]
	[Address(RVA = "0x160A2A8", Offset = "0x160A2A8", VA = "0x160A2A8")]
	public XRLightControllerForLights()
	{
	}
}
[Token(Token = "0x2000095")]
public class XRLightControllerParameterGUI : MonoBehaviour
{
	[Token(Token = "0x20003B3")]
	private enum Parameters
	{
		[Token(Token = "0x4001F48")]
		Intensity,
		[Token(Token = "0x4001F49")]
		Range,
		[Token(Token = "0x4001F4A")]
		Angle,
		[Token(Token = "0x4001F4B")]
		Type
	}

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text parameterText;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Button arrowUp;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Button arrowDown;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Button arrowLeft;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Button arrowRight;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Parameters parameter;

	[Token(Token = "0x17000044")]
	public Button ArrowUp
	{
		[Token(Token = "0x600026C")]
		[Address(RVA = "0x160A438", Offset = "0x160A438", VA = "0x160A438")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000045")]
	public Button ArrowDown
	{
		[Token(Token = "0x600026D")]
		[Address(RVA = "0x160A440", Offset = "0x160A440", VA = "0x160A440")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000046")]
	public Button ArrowLeft
	{
		[Token(Token = "0x600026E")]
		[Address(RVA = "0x160A448", Offset = "0x160A448", VA = "0x160A448")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000047")]
	public Button ArrowRight
	{
		[Token(Token = "0x600026F")]
		[Address(RVA = "0x160A450", Offset = "0x160A450", VA = "0x160A450")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x160A2B0", Offset = "0x160A2B0", VA = "0x160A2B0")]
	public void NextParameter()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x160A430", Offset = "0x160A430", VA = "0x160A430")]
	public void PrevParameter()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x160A2B8", Offset = "0x160A2B8", VA = "0x160A2B8")]
	private void ChangeParameter(int factor)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x160A458", Offset = "0x160A458", VA = "0x160A458")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x160A45C", Offset = "0x160A45C", VA = "0x160A45C")]
	public void SetVisibility(bool visibility)
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x160A4F0", Offset = "0x160A4F0", VA = "0x160A4F0")]
	public XRLightControllerParameterGUI()
	{
	}
}
[Token(Token = "0x2000096")]
public class FirstPersonFlyingController : MonoBehaviour
{
	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform cameraTransform;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform t;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 movementVectorSmooth;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 rotationVectorSmooth;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject checkSphere;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool dontRequireClick;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool limitPosition;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 minPosition;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 maxPosition;

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xADD44C", Offset = "0xADD44C", VA = "0xADD44C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xADD4A4", Offset = "0xADD4A4", VA = "0xADD4A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xADD4C8", Offset = "0xADD4C8", VA = "0xADD4C8")]
	private void Movement()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xADD788", Offset = "0xADD788", VA = "0xADD788")]
	private void MouseLook()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xADD940", Offset = "0xADD940", VA = "0xADD940")]
	public FirstPersonFlyingController()
	{
	}
}
[Token(Token = "0x2000097")]
public class SEGIDemo : MonoBehaviour
{
	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SEGI segi;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject throwObject;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<GameObject> thrownObjects;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LayerMask grabMask;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text voxelResolution;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text reflections;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text cones;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text coneTraceSteps;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text infiniteBounces;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text gi;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text fpsCounter;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text spawnedObjects;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform heldObject;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform heldObjectParent;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public SEGIPreset low;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public SEGIPreset medium;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public SEGIPreset high;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public SEGIPreset ultra;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float fps;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float prevfps;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int spawnedObjectsCounter;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject infoOverlay;

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xCEEB58", Offset = "0xCEEB58", VA = "0xCEEB58")]
	private void Start()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xCEEBB0", Offset = "0xCEEBB0", VA = "0xCEEBB0")]
	private void UpdateUIText()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xCEEF30", Offset = "0xCEEF30", VA = "0xCEEF30")]
	private void Update()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xCEFB28", Offset = "0xCEFB28", VA = "0xCEFB28")]
	private void RemoveBadAmbient()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xCEFB1C", Offset = "0xCEFB1C", VA = "0xCEFB1C")]
	private void AddBadAmbient()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xCEFB34", Offset = "0xCEFB34", VA = "0xCEFB34")]
	public SEGIDemo()
	{
	}
}
[Token(Token = "0x2000098")]
public class SEGIThrowObject : MonoBehaviour
{
	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color generatedColor;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer r;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float pulseSpeed;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float pulseOffset;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material mat0;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material mat1;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material mat2;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material mat3;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material mat4;

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xCEFC10", Offset = "0xCEFC10", VA = "0xCEFC10")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xCEFCF8", Offset = "0xCEFCF8", VA = "0xCEFCF8")]
	public SEGIThrowObject()
	{
	}
}
[Token(Token = "0x2000099")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D3FDC", Offset = "0x7D3FDC")]
public class SEGIWaterDisplacement : MonoBehaviour
{
	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MeshFilter meshFilter;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Mesh mesh;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3[] initialVertices;

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xCEFD00", Offset = "0xCEFD00", VA = "0xCEFD00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xCEFD7C", Offset = "0xCEFD7C", VA = "0xCEFD7C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xCF00A8", Offset = "0xCF00A8", VA = "0xCF00A8")]
	public SEGIWaterDisplacement()
	{
	}
}
[Token(Token = "0x200009A")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5040", Offset = "0x7D5040")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5040", Offset = "0x7D5040")]
public class SEGI : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003B4")]
	public enum VoxelResolution
	{
		[Token(Token = "0x4001F4D")]
		low = 0x80,
		[Token(Token = "0x4001F4E")]
		high = 0x100
	}

	[Token(Token = "0x20003B5")]
	private enum RenderState
	{
		[Token(Token = "0x4001F50")]
		Voxelize,
		[Token(Token = "0x4001F51")]
		Bounce
	}

	[Token(Token = "0x20003B6")]
	private struct Pass
	{
		[Token(Token = "0x4001F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int DiffuseTrace;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int BilateralBlur;

		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int BlendWithScene;

		[Token(Token = "0x4001F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static int TemporalBlend;

		[Token(Token = "0x4001F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int SpecularTrace;

		[Token(Token = "0x4001F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int GetCameraDepthTexture;

		[Token(Token = "0x4001F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static int GetWorldNormals;

		[Token(Token = "0x4001F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static int VisualizeGI;

		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static int WriteBlack;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static int VisualizeVoxels;

		[Token(Token = "0x4001F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static int BilateralUpsample;
	}

	[Token(Token = "0x20003B7")]
	public struct SystemSupported
	{
		[Token(Token = "0x4001F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool hdrTextures;

		[Token(Token = "0x4001F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool rIntTextures;

		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool dx11;

		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public bool volumeTextures;

		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool postShader;

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool sunDepthShader;

		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public bool voxelizationShader;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public bool tracingShader;

		[Token(Token = "0x17000360")]
		public bool fullFunctionality
		{
			[Token(Token = "0x6002313")]
			[Address(RVA = "0x8703D0", Offset = "0x8703D0", VA = "0x8703D0")]
			get
			{
				return default(bool);
			}
		}
	}

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int updateGIcounter;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int updateGIevery;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool updateGI;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask giCullingMask;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float shadowSpaceSize;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Light sun;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color skyColor;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float voxelSpaceSize;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool useBilateralFiltering;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB00C", Offset = "0x7DB00C")]
	public int innerOcclusionLayers;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB024", Offset = "0x7DB024")]
	public float temporalBlendWeight;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public VoxelResolution voxelResolution;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool visualizeSunDepthTexture;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool visualizeGI;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	public bool visualizeVoxels;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	public bool halfResolution;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool stochasticSampling;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool infiniteBounces;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform followTransform;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB040", Offset = "0x7DB040")]
	public int cones;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB05C", Offset = "0x7DB05C")]
	public int coneTraceSteps;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB078", Offset = "0x7DB078")]
	public float coneLength;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB094", Offset = "0x7DB094")]
	public float coneWidth;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB0AC", Offset = "0x7DB0AC")]
	public float occlusionStrength;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB0C4", Offset = "0x7DB0C4")]
	public float nearOcclusionStrength;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB0DC", Offset = "0x7DB0DC")]
	public float occlusionPower;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB0F8", Offset = "0x7DB0F8")]
	public float coneTraceBias;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB110", Offset = "0x7DB110")]
	public float nearLightGain;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB128", Offset = "0x7DB128")]
	public float giGain;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB140", Offset = "0x7DB140")]
	public float secondaryBounceGain;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB158", Offset = "0x7DB158")]
	public float softSunlight;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB170", Offset = "0x7DB170")]
	public float skyIntensity;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public bool doReflections;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB188", Offset = "0x7DB188")]
	public int reflectionSteps;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB1A4", Offset = "0x7DB1A4")]
	public float reflectionOcclusionPower;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB1C0", Offset = "0x7DB1C0")]
	public float skyReflectionIntensity;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public bool voxelAA;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
	public bool gaussianMipFilter;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB1D8", Offset = "0x7DB1D8")]
	public float farOcclusionStrength;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB1F4", Offset = "0x7DB1F4")]
	public float farthestOcclusionStrength;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB210", Offset = "0x7DB210")]
	public int secondaryCones;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB228", Offset = "0x7DB228")]
	public float secondaryOcclusionStrength;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public bool sphericalSkylight;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private object initChecker;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Material material;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Camera attachedCamera;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform shadowCamTransform;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Camera shadowCam;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private GameObject shadowCamGameObject;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Texture2D[] blueNoise;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private int sunShadowResolution;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private int prevSunShadowResolution;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Shader sunDepthShader;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float shadowSpaceDepthRatio;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private int frameCounter;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private RenderTexture sunDepthTexture;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private RenderTexture previousGIResult;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private RenderTexture previousCameraDepth;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private RenderTexture integerVolume;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private RenderTexture[] volumeTextures;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private RenderTexture secondaryIrradianceVolume;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private RenderTexture volumeTextureB;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private RenderTexture activeVolume;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private RenderTexture previousActiveVolume;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private RenderTexture dummyVoxelTextureAAScaled;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private RenderTexture dummyVoxelTextureFixed;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private bool notReadyToRender;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private Shader voxelizationShader;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private Shader voxelTracingShader;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private ComputeShader clearCompute;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private ComputeShader transferIntsCompute;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private ComputeShader mipFilterCompute;

	[Token(Token = "0x4000365")]
	private const int numMipLevels = 6;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Camera voxelCamera;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private GameObject voxelCameraGO;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private GameObject leftViewPoint;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private GameObject topViewPoint;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private Vector3 voxelSpaceOrigin;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private Vector3 previousVoxelSpaceOrigin;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private Vector3 voxelSpaceOriginDelta;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	private Quaternion rotationFront;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	private Quaternion rotationLeft;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
	private Quaternion rotationTop;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	private int voxelFlipFlop;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private RenderState renderState;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	public SystemSupported systemSupported;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
	private CameraClearFlags prevFlags;

	[Token(Token = "0x17000048")]
	private float voxelScaleFactor
	{
		[Token(Token = "0x6000284")]
		[Address(RVA = "0xCE31B4", Offset = "0xCE31B4", VA = "0xCE31B4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000049")]
	public float vramUsage
	{
		[Token(Token = "0x6000285")]
		[Address(RVA = "0xCE31CC", Offset = "0xCE31CC", VA = "0xCE31CC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700004A")]
	private int mipFilterKernel
	{
		[Token(Token = "0x6000286")]
		[Address(RVA = "0xCE3710", Offset = "0xCE3710", VA = "0xCE3710")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700004B")]
	private int dummyVoxelResolution
	{
		[Token(Token = "0x6000287")]
		[Address(RVA = "0xCE3718", Offset = "0xCE3718", VA = "0xCE3718")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700004C")]
	private int giRenderRes
	{
		[Token(Token = "0x6000288")]
		[Address(RVA = "0xCE3734", Offset = "0xCE3734", VA = "0xCE3734")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xCE3748", Offset = "0xCE3748", VA = "0xCE3748")]
	public void ApplyPreset(SEGIPreset preset)
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xCE3840", Offset = "0xCE3840", VA = "0xCE3840")]
	private void Start()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xCE38E4", Offset = "0xCE38E4", VA = "0xCE38E4")]
	private void InitCheck()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xCE42B8", Offset = "0xCE42B8", VA = "0xCE42B8")]
	private void CreateVolumeTextures()
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xCE49FC", Offset = "0xCE49FC", VA = "0xCE49FC")]
	private void ResizeDummyTexture()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xCE38F4", Offset = "0xCE38F4", VA = "0xCE38F4")]
	private void Init()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xCE4C00", Offset = "0xCE4C00", VA = "0xCE4C00")]
	private void CheckSupport()
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xCE4DD0", Offset = "0xCE4DD0", VA = "0xCE4DD0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xCE4EF4", Offset = "0xCE4EF4", VA = "0xCE4EF4")]
	private void CleanupTexture(ref RenderTexture texture)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xCE4F74", Offset = "0xCE4F74", VA = "0xCE4F74")]
	private void CleanupTextures()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xCE5018", Offset = "0xCE5018", VA = "0xCE5018")]
	private void Cleanup()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xCE50C0", Offset = "0xCE50C0", VA = "0xCE50C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xCE53BC", Offset = "0xCE53BC", VA = "0xCE53BC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xCE50F8", Offset = "0xCE50F8", VA = "0xCE50F8")]
	private void ResizeRenderTextures()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xCE53C0", Offset = "0xCE53C0", VA = "0xCE53C0")]
	private void ResizeSunShadowBuffer()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xCE5510", Offset = "0xCE5510", VA = "0xCE5510")]
	private void Update()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xCE56C0", Offset = "0xCE56C0", VA = "0xCE56C0")]
	private Matrix4x4 TransformViewMatrix(Matrix4x4 mat)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xCE57BC", Offset = "0xCE57BC", VA = "0xCE57BC")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xCE6F18", Offset = "0xCE6F18", VA = "0xCE6F18")]
	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xCE8234", Offset = "0xCE8234", VA = "0xCE8234")]
	public SEGI()
	{
	}
}
[Token(Token = "0x200009B")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D50D8", Offset = "0x7D50D8")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D50D8", Offset = "0x7D50D8")]
public class SEGICascaded : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003B8")]
	public enum VoxelResolution
	{
		[Token(Token = "0x4001F66")]
		low = 0x40,
		[Token(Token = "0x4001F67")]
		high = 0x80
	}

	[Token(Token = "0x20003B9")]
	private enum RenderState
	{
		[Token(Token = "0x4001F69")]
		Voxelize,
		[Token(Token = "0x4001F6A")]
		Bounce
	}

	[Token(Token = "0x20003BA")]
	private struct Pass
	{
		[Token(Token = "0x4001F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int DiffuseTrace;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int BilateralBlur;

		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int BlendWithScene;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static int TemporalBlend;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int SpecularTrace;

		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int GetCameraDepthTexture;

		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static int GetWorldNormals;

		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static int VisualizeGI;

		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static int WriteBlack;

		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static int VisualizeVoxels;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static int BilateralUpsample;
	}

	[Token(Token = "0x20003BB")]
	public struct SystemSupported
	{
		[Token(Token = "0x4001F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool hdrTextures;

		[Token(Token = "0x4001F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool rIntTextures;

		[Token(Token = "0x4001F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool dx11;

		[Token(Token = "0x4001F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public bool volumeTextures;

		[Token(Token = "0x4001F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool postShader;

		[Token(Token = "0x4001F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool sunDepthShader;

		[Token(Token = "0x4001F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public bool voxelizationShader;

		[Token(Token = "0x4001F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public bool tracingShader;

		[Token(Token = "0x17000361")]
		public bool fullFunctionality
		{
			[Token(Token = "0x6002315")]
			[Address(RVA = "0x8704A4", Offset = "0x8704A4", VA = "0x8704A4")]
			get
			{
				return default(bool);
			}
		}
	}

	[Token(Token = "0x20003BC")]
	private class Clipmap
	{
		[Token(Token = "0x4001F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 origin;

		[Token(Token = "0x4001F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 originDelta;

		[Token(Token = "0x4001F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 previousOrigin;

		[Token(Token = "0x4001F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float localScale;

		[Token(Token = "0x4001F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int resolution;

		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RenderTexture volumeTexture0;

		[Token(Token = "0x4001F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FilterMode filterMode;

		[Token(Token = "0x4001F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public RenderTextureFormat renderTextureFormat;

		[Token(Token = "0x6002316")]
		[Address(RVA = "0xCE9944", Offset = "0xCE9944", VA = "0xCE9944")]
		public void UpdateTextures()
		{
		}

		[Token(Token = "0x6002317")]
		[Address(RVA = "0xCEA198", Offset = "0xCEA198", VA = "0xCEA198")]
		public void CleanupTextures()
		{
		}

		[Token(Token = "0x6002318")]
		[Address(RVA = "0xCE9930", Offset = "0xCE9930", VA = "0xCE9930")]
		public Clipmap()
		{
		}
	}

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int updateGIcounter;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int updateGIevery;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VoxelResolution voxelResolution;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool visualizeSunDepthTexture;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool visualizeGI;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Light sun;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LayerMask giCullingMask;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float shadowSpaceSize;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB244", Offset = "0x7DB244")]
	public float temporalBlendWeight;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool visualizeVoxels;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool updateGI;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color skyColor;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float voxelSpaceSize;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool useBilateralFiltering;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB260", Offset = "0x7DB260")]
	public int innerOcclusionLayers;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool halfResolution;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool stochasticSampling;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	public bool infiniteBounces;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform followTransform;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB278", Offset = "0x7DB278")]
	public int cones;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB294", Offset = "0x7DB294")]
	public int coneTraceSteps;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB2B0", Offset = "0x7DB2B0")]
	public float coneLength;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB2CC", Offset = "0x7DB2CC")]
	public float coneWidth;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB2E4", Offset = "0x7DB2E4")]
	public float occlusionStrength;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB2FC", Offset = "0x7DB2FC")]
	public float nearOcclusionStrength;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB314", Offset = "0x7DB314")]
	public float occlusionPower;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB330", Offset = "0x7DB330")]
	public float coneTraceBias;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB348", Offset = "0x7DB348")]
	public float nearLightGain;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB360", Offset = "0x7DB360")]
	public float giGain;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB378", Offset = "0x7DB378")]
	public float secondaryBounceGain;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB390", Offset = "0x7DB390")]
	public float softSunlight;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB3A8", Offset = "0x7DB3A8")]
	public float skyIntensity;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB3C0", Offset = "0x7DB3C0")]
	public int reflectionSteps;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB3DC", Offset = "0x7DB3DC")]
	public float reflectionOcclusionPower;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB3F8", Offset = "0x7DB3F8")]
	public float skyReflectionIntensity;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB410", Offset = "0x7DB410")]
	public float farOcclusionStrength;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB42C", Offset = "0x7DB42C")]
	public float farthestOcclusionStrength;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB448", Offset = "0x7DB448")]
	public int secondaryCones;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB460", Offset = "0x7DB460")]
	public float secondaryOcclusionStrength;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public bool sphericalSkylight;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private object initChecker;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Material material;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Camera attachedCamera;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Transform shadowCamTransform;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Camera shadowCam;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject shadowCamGameObject;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Texture2D[] blueNoise;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int sunShadowResolution;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int prevSunShadowResolution;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Shader sunDepthShader;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float shadowSpaceDepthRatio;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private int frameCounter;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private RenderTexture sunDepthTexture;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private RenderTexture previousGIResult;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private RenderTexture previousDepth;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private RenderTexture integerVolume;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private RenderTexture dummyVoxelTextureAAScaled;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private RenderTexture dummyVoxelTextureFixed;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Clipmap[] clipmaps;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Clipmap[] irradianceClipmaps;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private bool notReadyToRender;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Shader voxelizationShader;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Shader voxelTracingShader;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private ComputeShader clearCompute;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private ComputeShader transferIntsCompute;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private ComputeShader mipFilterCompute;

	[Token(Token = "0x40003B6")]
	private const int numClipmaps = 6;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private int clipmapCounter;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private int currentClipmapIndex;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private Camera voxelCamera;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private GameObject voxelCameraGO;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private GameObject leftViewPoint;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private GameObject topViewPoint;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Vector3 voxelSpaceOrigin;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	private Vector3 previousVoxelSpaceOrigin;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private Vector3 voxelSpaceOriginDelta;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private Quaternion rotationFront;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	private Quaternion rotationLeft;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	private Quaternion rotationTop;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	private RenderState renderState;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public SystemSupported systemSupported;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public bool voxelAA;

	[Token(Token = "0x1700004D")]
	[HideInInspector]
	public bool doReflections
	{
		[Token(Token = "0x600029D")]
		[Address(RVA = "0xCE848C", Offset = "0xCE848C", VA = "0xCE848C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600029E")]
		[Address(RVA = "0xCE8494", Offset = "0xCE8494", VA = "0xCE8494")]
		set
		{
		}
	}

	[Token(Token = "0x1700004E")]
	private float voxelScaleFactor
	{
		[Token(Token = "0x600029F")]
		[Address(RVA = "0xCE8498", Offset = "0xCE8498", VA = "0xCE8498")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700004F")]
	private int giRenderRes
	{
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xCE84B0", Offset = "0xCE84B0", VA = "0xCE84B0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000050")]
	public float vramUsage
	{
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xCE84C4", Offset = "0xCE84C4", VA = "0xCE84C4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000051")]
	public bool gaussianMipFilter
	{
		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xCE88C4", Offset = "0xCE88C4", VA = "0xCE88C4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0xCE88CC", Offset = "0xCE88CC", VA = "0xCE88CC")]
		set
		{
		}
	}

	[Token(Token = "0x17000052")]
	private int mipFilterKernel
	{
		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xCE88D0", Offset = "0xCE88D0", VA = "0xCE88D0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000053")]
	private int dummyVoxelResolution
	{
		[Token(Token = "0x60002A5")]
		[Address(RVA = "0xCE88D8", Offset = "0xCE88D8", VA = "0xCE88D8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xCE88F4", Offset = "0xCE88F4", VA = "0xCE88F4")]
	public void ApplyPreset(SEGICascadedPreset preset)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xCE89DC", Offset = "0xCE89DC", VA = "0xCE89DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xCE89EC", Offset = "0xCE89EC", VA = "0xCE89EC")]
	private void InitCheck()
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xCE921C", Offset = "0xCE921C", VA = "0xCE921C")]
	private void CreateVolumeTextures()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xCE95A0", Offset = "0xCE95A0", VA = "0xCE95A0")]
	private void BuildClipmaps()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xCE939C", Offset = "0xCE939C", VA = "0xCE939C")]
	private void ResizeDummyTexture()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xCE9AFC", Offset = "0xCE9AFC", VA = "0xCE9AFC")]
	private void GetBlueNoiseTextures()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xCE89FC", Offset = "0xCE89FC", VA = "0xCE89FC")]
	private void Init()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xCE9CF0", Offset = "0xCE9CF0", VA = "0xCE9CF0")]
	private void CheckSupport()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xCE9EC0", Offset = "0xCE9EC0", VA = "0xCE9EC0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xCEA02C", Offset = "0xCEA02C", VA = "0xCEA02C")]
	private void CleanupTexture(ref RenderTexture texture)
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xCEA100", Offset = "0xCEA100", VA = "0xCEA100")]
	private void CleanupTextures()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xCEA26C", Offset = "0xCEA26C", VA = "0xCEA26C")]
	private void Cleanup()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xCEA314", Offset = "0xCEA314", VA = "0xCEA314")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xCEA5E8", Offset = "0xCEA5E8", VA = "0xCEA5E8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xCEA34C", Offset = "0xCEA34C", VA = "0xCEA34C")]
	private void ResizeRenderTextures()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xCEA5EC", Offset = "0xCEA5EC", VA = "0xCEA5EC")]
	private void ResizeSunShadowBuffer()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xCEA73C", Offset = "0xCEA73C", VA = "0xCEA73C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xCEA8F8", Offset = "0xCEA8F8", VA = "0xCEA8F8")]
	private Matrix4x4 TransformViewMatrix(Matrix4x4 mat)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xCEA9F4", Offset = "0xCEA9F4", VA = "0xCEA9F4")]
	private int SelectCascadeBinary(int c)
	{
		return default(int);
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xCEAAD0", Offset = "0xCEAAD0", VA = "0xCEAAD0")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xCECDA0", Offset = "0xCECDA0", VA = "0xCECDA0")]
	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xCEE88C", Offset = "0xCEE88C", VA = "0xCEE88C")]
	public SEGICascaded()
	{
	}
}
[Token(Token = "0x200009C")]
public class SEGICascadedPreset : ScriptableObject
{
	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SEGICascaded.VoxelResolution voxelResolution;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool voxelAA;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB47C", Offset = "0x7DB47C")]
	public int innerOcclusionLayers;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool infiniteBounces;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB494", Offset = "0x7DB494")]
	public float temporalBlendWeight;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool useBilateralFiltering;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool halfResolution;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool stochasticSampling;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public bool doReflections;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB4B0", Offset = "0x7DB4B0")]
	public int cones;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB4CC", Offset = "0x7DB4CC")]
	public int coneTraceSteps;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB4E8", Offset = "0x7DB4E8")]
	public float coneLength;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB504", Offset = "0x7DB504")]
	public float coneWidth;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB51C", Offset = "0x7DB51C")]
	public float coneTraceBias;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB534", Offset = "0x7DB534")]
	public float occlusionStrength;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB54C", Offset = "0x7DB54C")]
	public float nearOcclusionStrength;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB564", Offset = "0x7DB564")]
	public float occlusionPower;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB580", Offset = "0x7DB580")]
	public float nearLightGain;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB598", Offset = "0x7DB598")]
	public float giGain;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB5B0", Offset = "0x7DB5B0")]
	public float secondaryBounceGain;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB5C8", Offset = "0x7DB5C8")]
	public int reflectionSteps;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB5E4", Offset = "0x7DB5E4")]
	public float reflectionOcclusionPower;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB600", Offset = "0x7DB600")]
	public float skyReflectionIntensity;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool gaussianMipFilter;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB618", Offset = "0x7DB618")]
	public float farOcclusionStrength;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB634", Offset = "0x7DB634")]
	public float farthestOcclusionStrength;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB650", Offset = "0x7DB650")]
	public int secondaryCones;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB668", Offset = "0x7DB668")]
	public float secondaryOcclusionStrength;

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xCEEAEC", Offset = "0xCEEAEC", VA = "0xCEEAEC")]
	public SEGICascadedPreset()
	{
	}
}
[Token(Token = "0x200009D")]
public class SEGIPreset : ScriptableObject
{
	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SEGI.VoxelResolution voxelResolution;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool voxelAA;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB684", Offset = "0x7DB684")]
	public int innerOcclusionLayers;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool infiniteBounces;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB69C", Offset = "0x7DB69C")]
	public float temporalBlendWeight;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool useBilateralFiltering;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool halfResolution;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool stochasticSampling;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public bool doReflections;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB6B8", Offset = "0x7DB6B8")]
	public int cones;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB6D4", Offset = "0x7DB6D4")]
	public int coneTraceSteps;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB6F0", Offset = "0x7DB6F0")]
	public float coneLength;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB70C", Offset = "0x7DB70C")]
	public float coneWidth;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB724", Offset = "0x7DB724")]
	public float coneTraceBias;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB73C", Offset = "0x7DB73C")]
	public float occlusionStrength;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB754", Offset = "0x7DB754")]
	public float nearOcclusionStrength;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB76C", Offset = "0x7DB76C")]
	public float occlusionPower;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB788", Offset = "0x7DB788")]
	public float nearLightGain;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB7A0", Offset = "0x7DB7A0")]
	public float giGain;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB7B8", Offset = "0x7DB7B8")]
	public float secondaryBounceGain;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB7D0", Offset = "0x7DB7D0")]
	public int reflectionSteps;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB7EC", Offset = "0x7DB7EC")]
	public float reflectionOcclusionPower;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB808", Offset = "0x7DB808")]
	public float skyReflectionIntensity;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool gaussianMipFilter;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB820", Offset = "0x7DB820")]
	public float farOcclusionStrength;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB83C", Offset = "0x7DB83C")]
	public float farthestOcclusionStrength;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB858", Offset = "0x7DB858")]
	public int secondaryCones;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DB870", Offset = "0x7DB870")]
	public float secondaryOcclusionStrength;

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xCEFBA4", Offset = "0xCEFBA4", VA = "0xCEFBA4")]
	public SEGIPreset()
	{
	}
}
[Serializable]
[Token(Token = "0x200009E")]
public class AnimatorData : ScriptableObject
{
	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AMTake> takes;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AMTake playOnStart;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string animatorId;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public bool isAnimatorOpen;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[HideInInspector]
	public bool isInspectorOpen;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[HideInInspector]
	public bool inPlayMode;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public float zoom;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public int currentTake;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public int codeLanguage;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public float gizmo_size;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public float width_track;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public bool autoKey;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[HideInInspector]
	public float elapsedTime;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AMTake nowPlayingTake;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isPaused;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool isLooping;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float takeTime;

	[Token(Token = "0x17000054")]
	[HideInInspector]
	public bool isPlaying
	{
		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xE0E570", Offset = "0xE0E570", VA = "0xE0E570")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000055")]
	[HideInInspector]
	public string takeName
	{
		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xE0E5FC", Offset = "0xE0E5FC", VA = "0xE0E5FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xE0E690", Offset = "0xE0E690", VA = "0xE0E690")]
	public object Invoker(object[] args)
	{
		return null;
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xE0EF8C", Offset = "0xE0EF8C", VA = "0xE0EF8C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xE0F060", Offset = "0xE0F060", VA = "0xE0F060")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xE0F104", Offset = "0xE0F104", VA = "0xE0F104")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xE0EB24", Offset = "0xE0EB24", VA = "0xE0EB24")]
	public void Play(string take_name, bool isFrame, float value, bool loop)
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xE0EE40", Offset = "0xE0EE40", VA = "0xE0EE40")]
	public void PreviewValue(string take_name, bool isFrame, float value)
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xE0F1EC", Offset = "0xE0F1EC", VA = "0xE0F1EC")]
	public void Execute(AMTake take, bool isFrame = true, float value = 0f)
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xE0ECD8", Offset = "0xE0ECD8", VA = "0xE0ECD8")]
	public void PauseLoop()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xE0ED9C", Offset = "0xE0ED9C", VA = "0xE0ED9C")]
	public void ResumeLoop()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xE0EC04", Offset = "0xE0EC04", VA = "0xE0EC04")]
	public void StopLoop()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xE0F49C", Offset = "0xE0F49C", VA = "0xE0F49C")]
	public int getCurrentTakeValue()
	{
		return default(int);
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xE0F4A4", Offset = "0xE0F4A4", VA = "0xE0F4A4")]
	public int getTakeCount()
	{
		return default(int);
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xE0F4F8", Offset = "0xE0F4F8", VA = "0xE0F4F8")]
	public bool setCurrentTakeValue(int _take)
	{
		return default(bool);
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xE0F56C", Offset = "0xE0F56C", VA = "0xE0F56C")]
	public AMTake getCurrentTake()
	{
		return null;
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xE0F30C", Offset = "0xE0F30C", VA = "0xE0F30C")]
	public AMTake getTake(string takeName)
	{
		return null;
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xE0F5E0", Offset = "0xE0F5E0", VA = "0xE0F5E0")]
	public void addTake()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xE0FC10", Offset = "0xE0FC10", VA = "0xE0FC10")]
	public void duplicateTake(MotinTakeData take)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xE0FD10", Offset = "0xE0FD10", VA = "0xE0FD10")]
	public void deleteTake(int index)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xE0FE34", Offset = "0xE0FE34", VA = "0xE0FE34")]
	public void deleteCurrentTake()
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xE0FE3C", Offset = "0xE0FE3C", VA = "0xE0FE3C")]
	public void selectTake(int index)
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xE0FE44", Offset = "0xE0FE44", VA = "0xE0FE44")]
	public void selectTake(string name)
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xE0F7DC", Offset = "0xE0F7DC", VA = "0xE0F7DC")]
	public void makeTakeNameUnique(AMTake take)
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xE0FEF4", Offset = "0xE0FEF4", VA = "0xE0FEF4")]
	public string[] getTakeNames()
	{
		return null;
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xE10040", Offset = "0xE10040", VA = "0xE10040")]
	public int getTakeIndex(AMTake take)
	{
		return default(int);
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xE10118", Offset = "0xE10118", VA = "0xE10118")]
	public bool setCodeLanguage(int codeLanguage)
	{
		return default(bool);
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xE10138", Offset = "0xE10138", VA = "0xE10138")]
	public bool setGizmoSize(float gizmo_size)
	{
		return default(bool);
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xE102D4", Offset = "0xE102D4", VA = "0xE102D4")]
	public void deleteAllTakesExcept(AMTake take)
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xE103B4", Offset = "0xE103B4", VA = "0xE103B4")]
	public void mergeWith(AnimatorData _aData)
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xE104E8", Offset = "0xE104E8", VA = "0xE104E8")]
	public List<GameObject> getDependencies([Optional] AMTake _take)
	{
		return null;
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xE106B0", Offset = "0xE106B0", VA = "0xE106B0")]
	public List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xE1082C", Offset = "0xE1082C", VA = "0xE1082C")]
	public void Load(MotinAnimatorData motinAnimatorData)
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xE10A6C", Offset = "0xE10A6C", VA = "0xE10A6C")]
	public void destroy()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xE10B98", Offset = "0xE10B98", VA = "0xE10B98")]
	public AnimatorData()
	{
	}
}
[Serializable]
[Token(Token = "0x200009F")]
public class AMAction : ScriptableObject
{
	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int startFrame;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int easeType;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<float> customEase;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AnimationCurve _cachedEaseCurve;

	[Token(Token = "0x17000056")]
	public AnimationCurve easeCurve
	{
		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x1306788", Offset = "0x1306788", VA = "0x1306788")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x1306A10", Offset = "0x1306A10", VA = "0x1306A10", Slot = "4")]
	public virtual string ToString(int codeLanguage, int frameRate)
	{
		return null;
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x1306A58", Offset = "0x1306A58", VA = "0x1306A58", Slot = "5")]
	public virtual void execute(int frameRate, float delayModifier, string animatorId)
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x1306AC4", Offset = "0x1306AC4", VA = "0x1306AC4")]
	public float getWaitTime(int frameRate, float delay)
	{
		return default(float);
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x1306AE4", Offset = "0x1306AE4", VA = "0x1306AE4", Slot = "6")]
	public virtual int getNumberOfFrames()
	{
		return default(int);
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x1306AEC", Offset = "0x1306AEC", VA = "0x1306AEC")]
	public void destroy()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x1306B54", Offset = "0x1306B54", VA = "0x1306B54", Slot = "7")]
	public virtual AnimatorTimeline.JSONAction getJSONAction(int frameRate)
	{
		return null;
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x1306B5C", Offset = "0x1306B5C", VA = "0x1306B5C")]
	public void setCustomEase(AnimationCurve curve)
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x13067D8", Offset = "0x13067D8", VA = "0x13067D8")]
	public AnimationCurve getCustomEaseCurve()
	{
		return null;
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x1306CF0", Offset = "0x1306CF0", VA = "0x1306CF0")]
	public bool hasCustomEase()
	{
		return default(bool);
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x1306D00", Offset = "0x1306D00", VA = "0x1306D00")]
	public string getEaseString(int codeLanguage)
	{
		return null;
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x1307264", Offset = "0x1307264", VA = "0x1307264")]
	public void setupJSONActionEase(AnimatorTimeline.JSONAction a)
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0x1307304", Offset = "0x1307304", VA = "0x1307304")]
	public AMAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A0")]
public class AMAnimationAction : AMAction
{
	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationClip amClip;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public WrapMode wrapMode;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject obj;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool crossfade;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float crossfadeTime;

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0x130737C", Offset = "0x130737C", VA = "0x130737C", Slot = "5")]
	public override void execute(int frameRate, float delay, string animatorId)
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x1307728", Offset = "0x1307728", VA = "0x1307728", Slot = "4")]
	public override string ToString(int codeLanguage, int frameRate)
	{
		return null;
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x1307D18", Offset = "0x1307D18", VA = "0x1307D18")]
	public int getNumberOfFrames(int frameRate)
	{
		return default(int);
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x1307E08", Offset = "0x1307E08", VA = "0x1307E08", Slot = "7")]
	public override AnimatorTimeline.JSONAction getJSONAction(int frameRate)
	{
		return null;
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x1308014", Offset = "0x1308014", VA = "0x1308014")]
	public AMAnimationAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A1")]
public class AMAnimationKey : AMKey
{
	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public WrapMode wrapMode;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationClip amClip;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool crossfade;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float crossfadeTime;

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x1308018", Offset = "0x1308018", VA = "0x1308018")]
	public bool setWrapMode(WrapMode wrapMode)
	{
		return default(bool);
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x1308038", Offset = "0x1308038", VA = "0x1308038")]
	public bool setAmClip(AnimationClip clip)
	{
		return default(bool);
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x13080CC", Offset = "0x13080CC", VA = "0x13080CC")]
	public bool setCrossFade(bool crossfade)
	{
		return default(bool);
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x13080F8", Offset = "0x13080F8", VA = "0x13080F8")]
	public bool setCrossfadeTime(float crossfadeTime)
	{
		return default(bool);
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x1308118", Offset = "0x1308118", VA = "0x1308118", Slot = "5")]
	public override AMKey CreateClone()
	{
		return null;
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x1308190", Offset = "0x1308190", VA = "0x1308190")]
	public AMAnimationKey()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A2")]
public class AMAnimationTrack : AMTrack
{
	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject obj;

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x13081AC", Offset = "0x13081AC", VA = "0x13081AC", Slot = "8")]
	public override string getTrackType()
	{
		return null;
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x13081F4", Offset = "0x13081F4", VA = "0x13081F4")]
	public bool setObject(GameObject obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x1308288", Offset = "0x1308288", VA = "0x1308288")]
	public void addKey(int _frame, AnimationClip _clip, WrapMode _wrapMode)
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x1308460", Offset = "0x1308460", VA = "0x1308460", Slot = "6")]
	public override void updateCache()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x1308798", Offset = "0x1308798", VA = "0x1308798")]
	public void previewFrame(float frame, float frameRate)
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x1308AA4", Offset = "0x1308AA4", VA = "0x1308AA4")]
	public float getTime(float frameRate, float numberOfFrames)
	{
		return default(float);
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x1308AAC", Offset = "0x1308AAC", VA = "0x1308AAC", Slot = "7")]
	public override AnimatorTimeline.JSONInit getJSONInit()
	{
		return null;
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x1308AB4", Offset = "0x1308AB4", VA = "0x1308AB4", Slot = "9")]
	public override List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x1308B7C", Offset = "0x1308B7C", VA = "0x1308B7C", Slot = "10")]
	public override List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x1308E2C", Offset = "0x1308E2C", VA = "0x1308E2C")]
	public AMAnimationTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A3")]
public class AMAudioAction : AMAction
{
	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource audioSource;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip audioClip;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool loop;

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x1308E34", Offset = "0x1308E34", VA = "0x1308E34", Slot = "5")]
	public override void execute(int frameRate, float delay, string animatorId)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x1309138", Offset = "0x1309138", VA = "0x1309138")]
	public string ToString(int codeLanguage, int frameRate, string audioClipVarName)
	{
		return null;
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x1309594", Offset = "0x1309594", VA = "0x1309594")]
	public ulong getTimeInSamples(int frequency, float time)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x13095BC", Offset = "0x13095BC", VA = "0x13095BC")]
	public int getNumberOfFrames(int frameRate)
	{
		return default(int);
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x13096A8", Offset = "0x13096A8", VA = "0x13096A8", Slot = "7")]
	public override AnimatorTimeline.JSONAction getJSONAction(int frameRate)
	{
		return null;
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x1309874", Offset = "0x1309874", VA = "0x1309874")]
	public AMAudioAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A4")]
public class AMAudioKey : AMKey
{
	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip audioClip;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool loop;

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x1309878", Offset = "0x1309878", VA = "0x1309878")]
	public bool setAudioClip(AudioClip audioClip)
	{
		return default(bool);
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x130990C", Offset = "0x130990C", VA = "0x130990C")]
	public bool setLoop(bool loop)
	{
		return default(bool);
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x1309938", Offset = "0x1309938", VA = "0x1309938", Slot = "5")]
	public override AMKey CreateClone()
	{
		return null;
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x13099A8", Offset = "0x13099A8", VA = "0x13099A8")]
	public AMAudioKey()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A5")]
public class AMAudioTrack : AMTrack
{
	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource audioSource;

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x13099B0", Offset = "0x13099B0", VA = "0x13099B0", Slot = "8")]
	public override string getTrackType()
	{
		return null;
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x13099F8", Offset = "0x13099F8", VA = "0x13099F8")]
	public bool setAudioSource(AudioSource audioSource)
	{
		return default(bool);
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x1309A8C", Offset = "0x1309A8C", VA = "0x1309A8C", Slot = "6")]
	public override void updateCache()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x1309CCC", Offset = "0x1309CCC", VA = "0x1309CCC")]
	public void addKey(int _frame, AudioClip _clip, bool _loop)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x1309EAC", Offset = "0x1309EAC", VA = "0x1309EAC", Slot = "5")]
	public override void previewFrame(float frame, [Optional] AMTrack extraTrack)
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x1309EB0", Offset = "0x1309EB0", VA = "0x1309EB0")]
	public void sampleAudio(float frame, float speed, int frameRate)
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x130A400", Offset = "0x130A400", VA = "0x130A400")]
	public void sampleAudioAtFrame(int frame, float speed, int frameRate)
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x130A658", Offset = "0x130A658", VA = "0x130A658")]
	public void stopAudio()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x130A6FC", Offset = "0x130A6FC", VA = "0x130A6FC")]
	public ulong getTimeInSamples(int frequency, float time)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x130A724", Offset = "0x130A724", VA = "0x130A724", Slot = "7")]
	public override AnimatorTimeline.JSONInit getJSONInit()
	{
		return null;
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x130A72C", Offset = "0x130A72C", VA = "0x130A72C", Slot = "9")]
	public override List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x130A808", Offset = "0x130A808", VA = "0x130A808", Slot = "10")]
	public override List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x130AAD4", Offset = "0x130AAD4", VA = "0x130AAD4")]
	public AMAudioTrack()
	{
	}
}
[Token(Token = "0x20000A6")]
public class AMCameraSwitcherAction : AMAction
{
	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int endFrame;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int cameraFadeType;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<float> cameraFadeParameters;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture2D irisShape;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool still;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int startTargetType;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int endTargetType;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Camera startCamera;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Camera endCamera;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Color startColor;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Color endColor;

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x1311A80", Offset = "0x1311A80", VA = "0x1311A80", Slot = "4")]
	public override string ToString(int codeLanguage, int frameRate)
	{
		return null;
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x13131A8", Offset = "0x13131A8", VA = "0x13131A8")]
	public void execute(int frameRate, float delay, Camera[] allCameras)
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x1312F54", Offset = "0x1312F54", VA = "0x1312F54")]
	public string getParametersString(int codeLanguage)
	{
		return null;
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x13135B8", Offset = "0x13135B8", VA = "0x13135B8", Slot = "6")]
	public override int getNumberOfFrames()
	{
		return default(int);
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x13130DC", Offset = "0x13130DC", VA = "0x13130DC")]
	public float getTime(int frameRate)
	{
		return default(float);
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x131357C", Offset = "0x131357C", VA = "0x131357C")]
	public bool hasTargets()
	{
		return default(bool);
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x1312E08", Offset = "0x1312E08", VA = "0x1312E08")]
	public bool hasStartTarget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x13135C8", Offset = "0x13135C8", VA = "0x13135C8")]
	public bool hasEndTarget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x1312E90", Offset = "0x1312E90", VA = "0x1312E90")]
	public bool targetsAreEqual()
	{
		return default(bool);
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x131365C", Offset = "0x131365C", VA = "0x131365C")]
	public string getStartTargetName()
	{
		return null;
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x1313718", Offset = "0x1313718", VA = "0x1313718")]
	public string getEndTargetName()
	{
		return null;
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x1313114", Offset = "0x1313114", VA = "0x1313114")]
	public bool isReversed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x13137D4", Offset = "0x13137D4", VA = "0x13137D4", Slot = "7")]
	public override AnimatorTimeline.JSONAction getJSONAction(int frameRate)
	{
		return null;
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x1313C2C", Offset = "0x1313C2C", VA = "0x1313C2C")]
	public AMCameraSwitcherAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A7")]
public class AMCameraSwitcherKey : AMKey
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int type;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Camera camera;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color color;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int cameraFadeType;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<float> cameraFadeParameters;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Texture2D irisShape;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool still;

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x1313C30", Offset = "0x1313C30", VA = "0x1313C30")]
	public bool setCamera(Camera camera)
	{
		return default(bool);
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x1313CC4", Offset = "0x1313CC4", VA = "0x1313CC4")]
	public bool setColor(Color color)
	{
		return default(bool);
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x1313D28", Offset = "0x1313D28", VA = "0x1313D28")]
	public bool setType(int type)
	{
		return default(bool);
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x1313D48", Offset = "0x1313D48", VA = "0x1313D48")]
	public bool setStill(bool still)
	{
		return default(bool);
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x1313D74", Offset = "0x1313D74", VA = "0x1313D74")]
	public bool setCameraFadeType(int cameraFadeType)
	{
		return default(bool);
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x1313D94", Offset = "0x1313D94", VA = "0x1313D94", Slot = "5")]
	public override AMKey CreateClone()
	{
		return null;
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x1313EA4", Offset = "0x1313EA4", VA = "0x1313EA4")]
	public AMCameraSwitcherKey()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A8")]
public class AMCameraSwitcherTrack : AMTrack
{
	[Token(Token = "0x20003BD")]
	public struct cfTuple
	{
		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int frame;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int type1;

		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int type2;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera camera1;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera camera2;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isReversed;

		[Token(Token = "0x6002319")]
		[Address(RVA = "0x87F39C", Offset = "0x87F39C", VA = "0x87F39C")]
		public cfTuple(int _frame, int _type1, int _type2, Camera _camera1, Camera _camera2, bool _isReversed)
		{
		}
	}

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Camera[] _cachedAllCameras;

	[Token(Token = "0x17000057")]
	public Camera[] cachedAllCameras
	{
		[Token(Token = "0x6000330")]
		[Address(RVA = "0x1313F14", Offset = "0x1313F14", VA = "0x1313F14")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000331")]
		[Address(RVA = "0x1314158", Offset = "0x1314158", VA = "0x1314158")]
		set
		{
		}
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x1314160", Offset = "0x1314160", VA = "0x1314160", Slot = "8")]
	public override string getTrackType()
	{
		return null;
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x13141A8", Offset = "0x13141A8", VA = "0x13141A8")]
	public void addKey(int _frame, [Optional] Camera camera, [Optional] AMCameraSwitcherKey keyToClone)
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x13144D0", Offset = "0x13144D0", VA = "0x13144D0", Slot = "6")]
	public override void updateCache()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x1314BCC", Offset = "0x1314BCC", VA = "0x1314BCC", Slot = "5")]
	public override void previewFrame(float frame, [Optional] AMTrack extraTrack)
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x1313F44", Offset = "0x1313F44", VA = "0x1313F44")]
	public Camera[] getAllCameras()
	{
		return null;
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x13158A8", Offset = "0x13158A8", VA = "0x13158A8")]
	public Texture[] getAllTextures()
	{
		return null;
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x1315568", Offset = "0x1315568", VA = "0x1315568")]
	private void previewCameraFade(float frame, AMCameraSwitcherAction action, bool isPreview)
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x1315D7C", Offset = "0x1315D7C", VA = "0x1315D7C")]
	private void setColors(AMCameraFade cf, int firstTargetType, int secondTargetType, bool isReversed, AMCameraSwitcherAction action)
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x1315B00", Offset = "0x1315B00", VA = "0x1315B00")]
	private void setRenderTexture(AMCameraFade cf, float frame, int firstTargetType, int secondTargetType, bool isReversed, AMCameraSwitcherAction action, bool isPreview)
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x1315F20", Offset = "0x1315F20", VA = "0x1315F20")]
	public cfTuple getCameraFadeTupleForFrame(int frame)
	{
		return default(cfTuple);
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x1315390", Offset = "0x1315390", VA = "0x1315390")]
	private void showColor(Color color, bool isPreview)
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x1316384", Offset = "0x1316384", VA = "0x1316384", Slot = "7")]
	public override AnimatorTimeline.JSONInit getJSONInit()
	{
		return null;
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x1316708", Offset = "0x1316708", VA = "0x1316708", Slot = "9")]
	public override List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x1316918", Offset = "0x1316918", VA = "0x1316918", Slot = "10")]
	public override List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x1316DB4", Offset = "0x1316DB4", VA = "0x1316DB4")]
	public AMCameraSwitcherTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A9")]
public class AMEventAction : AMAction
{
	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Component component;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useSendMessage;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<AMEventParameter> parameters;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string methodName;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MethodInfo cachedMethodInfo;

	[Token(Token = "0x17000058")]
	public MethodInfo methodInfo
	{
		[Token(Token = "0x6000341")]
		[Address(RVA = "0x1316DBC", Offset = "0x1316DBC", VA = "0x1316DBC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000342")]
		[Address(RVA = "0x1316E90", Offset = "0x1316E90", VA = "0x1316E90")]
		set
		{
		}
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x1316EEC", Offset = "0x1316EEC", VA = "0x1316EEC", Slot = "5")]
	public override void execute(int frameRate, float delay, string animatorId)
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x1318140", Offset = "0x1318140", VA = "0x1318140")]
	public void setObjectInArray(ref object obj, List<AMEventParameter> lsArray)
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x1318B48", Offset = "0x1318B48", VA = "0x1318B48")]
	public string ToString(int codeLanguage, int frameRate, string methodInfoVarName)
	{
		return null;
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x13192AC", Offset = "0x13192AC", VA = "0x13192AC")]
	private string parametersToString(int codeLanguage)
	{
		return null;
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x13193C8", Offset = "0x13193C8", VA = "0x13193C8")]
	private string declareObjectToString(object obj, int codeLanguage)
	{
		return null;
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x131ABD0", Offset = "0x131ABD0", VA = "0x131ABD0", Slot = "7")]
	public override AnimatorTimeline.JSONAction getJSONAction(int frameRate)
	{
		return null;
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x131B388", Offset = "0x131B388", VA = "0x131B388")]
	public AMEventAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AA")]
public class AMEventKey : AMKey
{
	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Component component;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string methodName;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool useSendMessage;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<AMEventParameter> parameters;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MethodInfo cachedMethodInfo;

	[Token(Token = "0x17000059")]
	public MethodInfo methodInfo
	{
		[Token(Token = "0x600034A")]
		[Address(RVA = "0x131B38C", Offset = "0x131B38C", VA = "0x131B38C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600034B")]
		[Address(RVA = "0x131B778", Offset = "0x131B778", VA = "0x131B778")]
		set
		{
		}
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x131B7D8", Offset = "0x131B7D8", VA = "0x131B7D8")]
	public bool setMethodInfo(Component component, MethodInfo methodInfo, ParameterInfo[] cachedParameterInfos)
	{
		return default(bool);
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x131BEF4", Offset = "0x131BEF4", VA = "0x131BEF4")]
	public bool setUseSendMessage(bool useSendMessage)
	{
		return default(bool);
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x131B974", Offset = "0x131B974", VA = "0x131B974")]
	public void destroyParameters()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x131C048", Offset = "0x131C048", VA = "0x131C048", Slot = "4")]
	public override void destroy()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x131C070", Offset = "0x131C070", VA = "0x131C070", Slot = "5")]
	public override AMKey CreateClone()
	{
		return null;
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x131C3A4", Offset = "0x131C3A4", VA = "0x131C3A4")]
	public List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x131C884", Offset = "0x131C884", VA = "0x131C884")]
	public bool updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences, bool didUpdateObj, GameObject obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x131D250", Offset = "0x131D250", VA = "0x131D250")]
	public void Load(MotinKeyData keyData)
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x131D374", Offset = "0x131D374", VA = "0x131D374")]
	public AMEventKey()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AB")]
public class AMEventParameter : ScriptableObject
{
	[Token(Token = "0x20003BE")]
	public enum ValueType
	{
		[Token(Token = "0x4001F8D")]
		Integer,
		[Token(Token = "0x4001F8E")]
		Long,
		[Token(Token = "0x4001F8F")]
		Float,
		[Token(Token = "0x4001F90")]
		Double,
		[Token(Token = "0x4001F91")]
		Vector2,
		[Token(Token = "0x4001F92")]
		Vector3,
		[Token(Token = "0x4001F93")]
		Vector4,
		[Token(Token = "0x4001F94")]
		Color,
		[Token(Token = "0x4001F95")]
		Rect,
		[Token(Token = "0x4001F96")]
		String,
		[Token(Token = "0x4001F97")]
		Char,
		[Token(Token = "0x4001F98")]
		Object,
		[Token(Token = "0x4001F99")]
		Array,
		[Token(Token = "0x4001F9A")]
		Boolean
	}

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool val_bool;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int valueType;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int val_int;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float val_float;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 val_vect2;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 val_vect3;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector4 val_vect4;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Color val_color;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Rect val_rect;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string val_string;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.Object val_obj;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<AMEventParameter> lsArray;

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x131D3EC", Offset = "0x131D3EC", VA = "0x131D3EC")]
	public AMEventParameter()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x131D45C", Offset = "0x131D45C", VA = "0x131D45C")]
	public bool setBool(bool val_bool)
	{
		return default(bool);
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x131D488", Offset = "0x131D488", VA = "0x131D488")]
	public bool setInt(int val_int)
	{
		return default(bool);
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x131D4A8", Offset = "0x131D4A8", VA = "0x131D4A8")]
	public bool setFloat(float val_float)
	{
		return default(bool);
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x131D4C8", Offset = "0x131D4C8", VA = "0x131D4C8")]
	public bool setVector2(Vector2 val_vect2)
	{
		return default(bool);
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x131D570", Offset = "0x131D570", VA = "0x131D570")]
	public bool setVector3(Vector3 val_vect3)
	{
		return default(bool);
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x131D634", Offset = "0x131D634", VA = "0x131D634")]
	public bool setVector4(Vector4 val_vect4)
	{
		return default(bool);
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x131D70C", Offset = "0x131D70C", VA = "0x131D70C")]
	public bool setColor(Color val_color)
	{
		return default(bool);
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x131D784", Offset = "0x131D784", VA = "0x131D784")]
	public bool setRect(Rect val_rect)
	{
		return default(bool);
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x131D7FC", Offset = "0x131D7FC", VA = "0x131D7FC")]
	public bool setString(string val_string)
	{
		return default(bool);
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x131D83C", Offset = "0x131D83C", VA = "0x131D83C")]
	public bool setObject(UnityEngine.Object val_obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x131B550", Offset = "0x131B550", VA = "0x131B550")]
	public Type getParamType()
	{
		return null;
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x131BF20", Offset = "0x131BF20", VA = "0x131BF20")]
	public void destroy()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x131D8D0", Offset = "0x131D8D0", VA = "0x131D8D0")]
	public string getStringValue()
	{
		return null;
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x131BA6C", Offset = "0x131BA6C", VA = "0x131BA6C")]
	public void setValueType(Type t)
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x13176C8", Offset = "0x13176C8", VA = "0x13176C8")]
	public object toObject()
	{
		return null;
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x131AF60", Offset = "0x131AF60", VA = "0x131AF60")]
	public AnimatorTimeline.JSONEventParameter toJSON()
	{
		return null;
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x131DAE4", Offset = "0x131DAE4", VA = "0x131DAE4")]
	public object[] toArray()
	{
		return null;
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x13180E4", Offset = "0x13180E4", VA = "0x13180E4")]
	public bool isArray()
	{
		return default(bool);
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x131C1F4", Offset = "0x131C1F4", VA = "0x131C1F4")]
	public AMEventParameter CreateClone()
	{
		return null;
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x131C504", Offset = "0x131C504", VA = "0x131C504")]
	public List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x131CBCC", Offset = "0x131CBCC", VA = "0x131CBCC")]
	public bool updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x20000AC")]
public class AMEventTrack : AMTrack
{
	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject obj;

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x131DBF0", Offset = "0x131DBF0", VA = "0x131DBF0", Slot = "8")]
	public override string getTrackType()
	{
		return null;
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x131DC38", Offset = "0x131DC38", VA = "0x131DC38", Slot = "6")]
	public override void updateCache()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x131DF84", Offset = "0x131DF84", VA = "0x131DF84")]
	public void setObject(GameObject obj)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x131DF8C", Offset = "0x131DF8C", VA = "0x131DF8C")]
	public bool isObjectUnique(GameObject obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x131E008", Offset = "0x131E008", VA = "0x131E008")]
	public void addKey(int _frame)
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x131E1DC", Offset = "0x131E1DC", VA = "0x131E1DC")]
	public bool hasSameEventsAs(AMEventTrack _track)
	{
		return default(bool);
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x131E268", Offset = "0x131E268", VA = "0x131E268", Slot = "7")]
	public override AnimatorTimeline.JSONInit getJSONInit()
	{
		return null;
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x131E270", Offset = "0x131E270", VA = "0x131E270", Slot = "9")]
	public override List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x131E468", Offset = "0x131E468", VA = "0x131E468", Slot = "10")]
	public override List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x131EC04", Offset = "0x131EC04", VA = "0x131EC04", Slot = "11")]
	public override void Load(MotinTrackData trackData)
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x131ED6C", Offset = "0x131ED6C", VA = "0x131ED6C")]
	public AMEventTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AD")]
public class AMGroup : ScriptableObject
{
	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string group_name;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int group_id;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<int> elements;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool foldout;

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x10C93FC", Offset = "0x10C93FC", VA = "0x10C93FC")]
	public void init(int group_id = 0, [Optional] string group_name)
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x10C94CC", Offset = "0x10C94CC", VA = "0x10C94CC")]
	public void destroy()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x10C9534", Offset = "0x10C9534", VA = "0x10C9534")]
	public void Load(MotinGroupData grpData)
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x10C955C", Offset = "0x10C955C", VA = "0x10C955C")]
	public AMGroup()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AE")]
public class AMKey : ScriptableObject
{
	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int frame;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int easeType;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<float> customEase;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AnimationCurve _cachedEaseCurve;

	[Token(Token = "0x1700005A")]
	public AnimationCurve easeCurve
	{
		[Token(Token = "0x600037A")]
		[Address(RVA = "0x10C95D4", Offset = "0x10C95D4", VA = "0x10C95D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x10C985C", Offset = "0x10C985C", VA = "0x10C985C", Slot = "4")]
	public virtual void destroy()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x10C98C4", Offset = "0x10C98C4", VA = "0x10C98C4", Slot = "5")]
	public virtual AMKey CreateClone()
	{
		return null;
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x10C9950", Offset = "0x10C9950", VA = "0x10C9950")]
	public bool setEaseType(int easeType)
	{
		return default(bool);
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x10C9A9C", Offset = "0x10C9A9C", VA = "0x10C9A9C")]
	public void setCustomEase(AnimationCurve curve)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x10C9624", Offset = "0x10C9624", VA = "0x10C9624")]
	public AnimationCurve getCustomEaseCurve()
	{
		return null;
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x10C9C34", Offset = "0x10C9C34", VA = "0x10C9C34")]
	public bool hasCustomEase()
	{
		return default(bool);
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x10C9C44", Offset = "0x10C9C44", VA = "0x10C9C44")]
	public AMKey()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AF")]
public class AMOrientationAction : AMAction
{
	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int endFrame;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform obj;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform startTarget;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform endTarget;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isSetStartPosition;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool isSetEndPosition;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 startPosition;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 endPosition;

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x10C9CBC", Offset = "0x10C9CBC", VA = "0x10C9CBC", Slot = "4")]
	public override string ToString(int codeLanguage, int frameRate)
	{
		return null;
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x10CA954", Offset = "0x10CA954", VA = "0x10CA954", Slot = "5")]
	public override void execute(int frameRate, float delay, string animatorId)
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x10CB16C", Offset = "0x10CB16C", VA = "0x10CB16C", Slot = "6")]
	public override int getNumberOfFrames()
	{
		return default(int);
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x10CA91C", Offset = "0x10CA91C", VA = "0x10CA91C")]
	public float getTime(int frameRate)
	{
		return default(float);
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x10CA89C", Offset = "0x10CA89C", VA = "0x10CA89C")]
	public bool isLookFollow()
	{
		return default(bool);
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x10CB17C", Offset = "0x10CB17C", VA = "0x10CB17C")]
	public Quaternion getQuaternionAtPercent(float percentage, [Optional] Vector3? startVector, [Optional] Vector3? endVector)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x10CB54C", Offset = "0x10CB54C", VA = "0x10CB54C", Slot = "7")]
	public override AnimatorTimeline.JSONAction getJSONAction(int frameRate)
	{
		return null;
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x10CB7E0", Offset = "0x10CB7E0", VA = "0x10CB7E0")]
	public AMOrientationAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B0")]
public class AMOrientationKey : AMKey
{
	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform target;

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x10CB7E8", Offset = "0x10CB7E8", VA = "0x10CB7E8")]
	public bool setTarget(Transform target)
	{
		return default(bool);
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x10CB87C", Offset = "0x10CB87C", VA = "0x10CB87C", Slot = "5")]
	public override AMKey CreateClone()
	{
		return null;
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x10CB92C", Offset = "0x10CB92C", VA = "0x10CB92C")]
	public AMOrientationKey()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B1")]
public class AMOrientationTrack : AMTrack
{
	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform obj;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AMTrack cachedTranslationTrackStartTarget;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AMTrack cachedTranslationTrackEndTarget;

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x10CB930", Offset = "0x10CB930", VA = "0x10CB930", Slot = "8")]
	public override string getTrackType()
	{
		return null;
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x10CB978", Offset = "0x10CB978", VA = "0x10CB978")]
	public bool setObject(Transform obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x10CBA0C", Offset = "0x10CBA0C", VA = "0x10CBA0C")]
	public void addKey(int _frame, Transform target)
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x10CBBDC", Offset = "0x10CBBDC", VA = "0x10CBBDC", Slot = "6")]
	public override void updateCache()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x10CBC0C", Offset = "0x10CBC0C", VA = "0x10CBC0C")]
	public void updateOrientationCache(AMTake curTake, bool restoreRotation = false)
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x10CC278", Offset = "0x10CC278", VA = "0x10CC278")]
	public Transform getInitialTarget()
	{
		return null;
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x10CC31C", Offset = "0x10CC31C", VA = "0x10CC31C", Slot = "5")]
	public override void previewFrame(float frame, [Optional] AMTrack extraTrack)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x10CCE24", Offset = "0x10CCE24", VA = "0x10CCE24")]
	public Transform getStartTargetForFrame(float frame)
	{
		return null;
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x10CCF84", Offset = "0x10CCF84", VA = "0x10CCF84")]
	public Transform getEndTargetForFrame(float frame)
	{
		return null;
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x10CD030", Offset = "0x10CD030", VA = "0x10CD030")]
	public Transform getTargetForFrame(float frame)
	{
		return null;
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x10CD10C", Offset = "0x10CD10C", VA = "0x10CD10C")]
	public void drawGizmos(float gizmo_size, bool inPlayMode, int frame)
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x10CD07C", Offset = "0x10CD07C", VA = "0x10CD07C")]
	public bool isFrameBeyondLastKeyFrame(float frame)
	{
		return default(bool);
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x10CD88C", Offset = "0x10CD88C", VA = "0x10CD88C")]
	public bool hasTarget(Transform obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x10CDA54", Offset = "0x10CDA54", VA = "0x10CDA54", Slot = "7")]
	public override AnimatorTimeline.JSONInit getJSONInit()
	{
		return null;
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x10CDCA0", Offset = "0x10CDCA0", VA = "0x10CDCA0", Slot = "9")]
	public override List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x10CDF08", Offset = "0x10CDF08", VA = "0x10CDF08", Slot = "10")]
	public override List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x10CE300", Offset = "0x10CE300", VA = "0x10CE300")]
	public AMOrientationTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B2")]
public class AMPath
{
	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3[] path;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int interp;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int startFrame;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int endFrame;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int startIndex;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int endIndex;

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x10CE308", Offset = "0x10CE308", VA = "0x10CE308")]
	public AMPath()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x10CE310", Offset = "0x10CE310", VA = "0x10CE310")]
	public AMPath(Vector3[] _path, int _interp, int _startFrame, int _endFrame)
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x10CE360", Offset = "0x10CE360", VA = "0x10CE360")]
	public AMPath(Vector3[] _path, int _interp, int _startFrame, int _endFrame, int _startIndex, int _endIndex)
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x10CE3C4", Offset = "0x10CE3C4", VA = "0x10CE3C4")]
	public int getNumberOfFrames()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x20000B3")]
public class AMPropertyAction : AMAction
{
	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int valueType;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Component component;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int endFrame;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string propertyName;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string fieldName;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string methodName;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string[] methodParameterTypes;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private MethodInfo cachedMethodInfo;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private PropertyInfo cachedPropertyInfo;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private FieldInfo cachedFieldInfo;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public double start_val;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector2 start_vect2;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Vector3 start_vect3;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public Color start_color;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public Rect start_rect;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public double end_val;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Vector2 end_vect2;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Vector3 end_vect3;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public Color end_color;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public Rect end_rect;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public List<float> start_morph;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public List<float> end_morph;

	[Token(Token = "0x1700005B")]
	public PropertyInfo propertyInfo
	{
		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x10CE3D0", Offset = "0x10CE3D0", VA = "0x10CE3D0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x10CE4A0", Offset = "0x10CE4A0", VA = "0x10CE4A0")]
		set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public FieldInfo fieldInfo
	{
		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x10CE500", Offset = "0x10CE500", VA = "0x10CE500")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x10CE5D0", Offset = "0x10CE5D0", VA = "0x10CE5D0")]
		set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public MethodInfo methodInfo
	{
		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x10CE630", Offset = "0x10CE630", VA = "0x10CE630")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x10CE80C", Offset = "0x10CE80C", VA = "0x10CE80C")]
		set
		{
		}
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x10CE86C", Offset = "0x10CE86C", VA = "0x10CE86C", Slot = "4")]
	public override string ToString(int codeLanguage, int frameRate)
	{
		return null;
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x10D22CC", Offset = "0x10D22CC", VA = "0x10D22CC", Slot = "6")]
	public override int getNumberOfFrames()
	{
		return default(int);
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x10D2108", Offset = "0x10D2108", VA = "0x10D2108")]
	public float getTime(int frameRate)
	{
		return default(float);
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x10D22DC", Offset = "0x10D22DC", VA = "0x10D22DC", Slot = "5")]
	public override void execute(int frameRate, float delay, string animatorId)
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x10D7360", Offset = "0x10D7360", VA = "0x10D7360")]
	public string getName()
	{
		return null;
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x10D2140", Offset = "0x10D2140", VA = "0x10D2140")]
	public string getFloatArrayString(int codeLanguage, List<float> ls)
	{
		return null;
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x10D743C", Offset = "0x10D743C", VA = "0x10D743C")]
	public string getValueString(bool brief)
	{
		return null;
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x10D7724", Offset = "0x10D7724", VA = "0x10D7724")]
	private string formatNumeric(float input)
	{
		return null;
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x10D7620", Offset = "0x10D7620", VA = "0x10D7620")]
	private string formatNumeric(double input)
	{
		return null;
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x10D7828", Offset = "0x10D7828", VA = "0x10D7828")]
	public int getStartMorphNameIndex(int numChannels)
	{
		return default(int);
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x10D79A8", Offset = "0x10D79A8", VA = "0x10D79A8")]
	public int getEndMorphNameIndex(int numChannels)
	{
		return default(int);
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x10D783C", Offset = "0x10D783C", VA = "0x10D783C")]
	private int getMorphNameIndex(List<float> morph, int count)
	{
		return default(int);
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x10D1E2C", Offset = "0x10D1E2C", VA = "0x10D1E2C")]
	public bool targetsAreEqual()
	{
		return default(bool);
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x10D79BC", Offset = "0x10D79BC", VA = "0x10D79BC")]
	public object getStartValue()
	{
		return null;
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x10D7B88", Offset = "0x10D7B88", VA = "0x10D7B88")]
	public object getEndValue()
	{
		return null;
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x10D7D54", Offset = "0x10D7D54", VA = "0x10D7D54", Slot = "7")]
	public override AnimatorTimeline.JSONAction getJSONAction(int frameRate)
	{
		return null;
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x10D85FC", Offset = "0x10D85FC", VA = "0x10D85FC")]
	public AMPropertyAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B4")]
public class AMPropertyKey : AMKey
{
	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public double val;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2 vect2;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 vect3;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Color color;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Rect rect;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<float> morph;

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x10D8604", Offset = "0x10D8604", VA = "0x10D8604")]
	public bool setValueMegaMorph(List<float> morph)
	{
		return default(bool);
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x10D8724", Offset = "0x10D8724", VA = "0x10D8724")]
	public bool setValue(float val)
	{
		return default(bool);
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x10D8748", Offset = "0x10D8748", VA = "0x10D8748")]
	public bool setValue(Vector3 vect3)
	{
		return default(bool);
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x10D880C", Offset = "0x10D880C", VA = "0x10D880C")]
	public bool setValue(Color color)
	{
		return default(bool);
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x10D8884", Offset = "0x10D8884", VA = "0x10D8884")]
	public bool setValue(Rect rect)
	{
		return default(bool);
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x10D88FC", Offset = "0x10D88FC", VA = "0x10D88FC")]
	public bool setValue(Vector2 vect2)
	{
		return default(bool);
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x10D89A4", Offset = "0x10D89A4", VA = "0x10D89A4")]
	public bool setValue(double val)
	{
		return default(bool);
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x10D89C4", Offset = "0x10D89C4", VA = "0x10D89C4")]
	public bool setValue(int val)
	{
		return default(bool);
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x10D89E8", Offset = "0x10D89E8", VA = "0x10D89E8")]
	public bool setValue(long val)
	{
		return default(bool);
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x10D8A0C", Offset = "0x10D8A0C", VA = "0x10D8A0C", Slot = "5")]
	public override AMKey CreateClone()
	{
		return null;
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x10D8B18", Offset = "0x10D8B18", VA = "0x10D8B18")]
	public void Load(AMPropertyTrack.ValueType valueType, MotinKeyData keyData)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x10D8CE4", Offset = "0x10D8CE4", VA = "0x10D8CE4")]
	public AMPropertyKey()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B5")]
public class AMPropertyTrack : AMTrack
{
	[Token(Token = "0x20003BF")]
	public enum ValueType
	{
		[Token(Token = "0x4001F9C")]
		Integer,
		[Token(Token = "0x4001F9D")]
		Long,
		[Token(Token = "0x4001F9E")]
		Float,
		[Token(Token = "0x4001F9F")]
		Double,
		[Token(Token = "0x4001FA0")]
		Vector2,
		[Token(Token = "0x4001FA1")]
		Vector3,
		[Token(Token = "0x4001FA2")]
		Color,
		[Token(Token = "0x4001FA3")]
		Rect,
		[Token(Token = "0x4001FA4")]
		MorphChannels,
		[Token(Token = "0x4001FA5")]
		String
	}

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int valueType;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject obj;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Component component;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string propertyName;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string fieldName;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string methodName;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string[] methodParameterTypes;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private PropertyInfo cachedPropertyInfo;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private FieldInfo cachedFieldInfo;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private MethodInfo cachedMethodInfo;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private MethodInfo cachedMethodInfoMorphNames;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private object tmpObject;

	[Token(Token = "0x1700005E")]
	public PropertyInfo propertyInfo
	{
		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x10D8CE8", Offset = "0x10D8CE8", VA = "0x10D8CE8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x10D8DF4", Offset = "0x10D8DF4", VA = "0x10D8DF4")]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public FieldInfo fieldInfo
	{
		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x10D8E54", Offset = "0x10D8E54", VA = "0x10D8E54")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x10D8F60", Offset = "0x10D8F60", VA = "0x10D8F60")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public MethodInfo methodInfo
	{
		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x10D8FC0", Offset = "0x10D8FC0", VA = "0x10D8FC0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x10D91D0", Offset = "0x10D91D0", VA = "0x10D91D0")]
		set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public MethodInfo methodInfoMorphNames
	{
		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x10D9230", Offset = "0x10D9230", VA = "0x10D9230")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x10D9348", Offset = "0x10D9348", VA = "0x10D9348", Slot = "8")]
	public override string getTrackType()
	{
		return null;
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x10D9424", Offset = "0x10D9424", VA = "0x10D9424")]
	public string getMemberInfoTypeName()
	{
		return null;
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x10D94DC", Offset = "0x10D94DC", VA = "0x10D94DC")]
	public bool isPropertySet()
	{
		return default(bool);
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x10D9554", Offset = "0x10D9554", VA = "0x10D9554")]
	public void addKey(int _frame)
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x10DA544", Offset = "0x10DA544", VA = "0x10DA544")]
	public void addKeyMegaMorph(int _frame, List<float> channels)
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x10D97D8", Offset = "0x10D97D8", VA = "0x10D97D8")]
	public void addKey(int _frame, double val)
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x10D9AAC", Offset = "0x10D9AAC", VA = "0x10D9AAC")]
	public void addKey(int _frame, Vector2 val)
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x10D9D74", Offset = "0x10D9D74", VA = "0x10D9D74")]
	public void addKey(int _frame, Vector3 val)
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x10DA050", Offset = "0x10DA050", VA = "0x10DA050")]
	public void addKey(int _frame, Color val)
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0x10DA338", Offset = "0x10DA338", VA = "0x10DA338")]
	public void addKey(int _frame, Rect val)
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x10DA724", Offset = "0x10DA724", VA = "0x10DA724")]
	public bool isObjectUnique(GameObject obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x10DA7A0", Offset = "0x10DA7A0", VA = "0x10DA7A0")]
	public bool setObject(GameObject obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x10DA858", Offset = "0x10DA858", VA = "0x10DA858")]
	public bool setComponent(Component component)
	{
		return default(bool);
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x10DA8EC", Offset = "0x10DA8EC", VA = "0x10DA8EC")]
	public bool setPropertyInfo(PropertyInfo propertyInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x10DACB0", Offset = "0x10DACB0", VA = "0x10DACB0")]
	public bool setFieldInfo(FieldInfo fieldInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x10DAD34", Offset = "0x10DAD34", VA = "0x10DAD34")]
	public bool setMethodInfo(MethodInfo methodInfo, string[] parameterTypes, ValueType valueType)
	{
		return default(bool);
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x10DADCC", Offset = "0x10DADCC", VA = "0x10DADCC", Slot = "6")]
	public override void updateCache()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x10D9704", Offset = "0x10D9704", VA = "0x10D9704")]
	public double getPropertyValueNumeric()
	{
		return default(double);
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x10D99D4", Offset = "0x10D99D4", VA = "0x10D99D4")]
	public Vector2 getPropertyValueVector2()
	{
		return default(Vector2);
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x10D9C98", Offset = "0x10D9C98", VA = "0x10D9C98")]
	public Vector3 getPropertyValueVector3()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x10D9F74", Offset = "0x10D9F74", VA = "0x10D9F74")]
	public Color getPropertyValueColor()
	{
		return default(Color);
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x10DA25C", Offset = "0x10DA25C", VA = "0x10DA25C")]
	public Rect getPropertyValueRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x10DB9F8", Offset = "0x10DB9F8", VA = "0x10DB9F8")]
	public static bool isNumeric(Type t)
	{
		return default(bool);
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x10DBB64", Offset = "0x10DBB64", VA = "0x10DBB64")]
	public static bool isValidType(Type t)
	{
		return default(bool);
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x10DBDE0", Offset = "0x10DBDE0", VA = "0x10DBDE0")]
	public void setValueType(int type)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x10DA970", Offset = "0x10DA970", VA = "0x10DA970")]
	public void setValueType(Type t)
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x10DBDE8", Offset = "0x10DBDE8", VA = "0x10DBDE8")]
	public void previewFrame(float frame, bool quickPreview = false)
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x10DD764", Offset = "0x10DD764", VA = "0x10DD764")]
	public void refreshTransform()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x10DD998", Offset = "0x10DD998", VA = "0x10DD998")]
	public void previewMorph(List<float> morph, int count)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x10DDC24", Offset = "0x10DDC24", VA = "0x10DDC24")]
	public string getComponentName()
	{
		return null;
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x10DDD14", Offset = "0x10DDD14", VA = "0x10DDD14")]
	public string getValueInitialization(int codeLanguage, string varName)
	{
		return null;
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x10D22B4", Offset = "0x10D22B4", VA = "0x10D22B4")]
	public static bool isValueTypeNumeric(int valueType)
	{
		return default(bool);
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x10DF21C", Offset = "0x10DF21C", VA = "0x10DF21C")]
	public bool hasSamePropertyAs(AMPropertyTrack _track)
	{
		return default(bool);
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x10DD8A8", Offset = "0x10DD8A8", VA = "0x10DD8A8")]
	public string[] getMorphNames()
	{
		return null;
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x10DF330", Offset = "0x10DF330", VA = "0x10DF330", Slot = "7")]
	public override AnimatorTimeline.JSONInit getJSONInit()
	{
		return null;
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x10DFBFC", Offset = "0x10DFBFC", VA = "0x10DFBFC", Slot = "9")]
	public override List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x10DFCC4", Offset = "0x10DFCC4", VA = "0x10DFCC4", Slot = "10")]
	public override List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x10E0208", Offset = "0x10E0208", VA = "0x10E0208", Slot = "11")]
	public override void Load(MotinTrackData trackData)
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x10E067C", Offset = "0x10E067C", VA = "0x10E067C")]
	public AMPropertyTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B6")]
public class AMRotationAction : AMAction
{
	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int endFrame;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform obj;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Quaternion startRotation;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Quaternion endRotation;

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x10E0684", Offset = "0x10E0684", VA = "0x10E0684", Slot = "4")]
	public override string ToString(int codeLanguage, int frameRate)
	{
		return null;
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x10E0E44", Offset = "0x10E0E44", VA = "0x10E0E44", Slot = "6")]
	public override int getNumberOfFrames()
	{
		return default(int);
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x10E0E0C", Offset = "0x10E0E0C", VA = "0x10E0E0C")]
	public float getTime(int frameRate)
	{
		return default(float);
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x10E0E54", Offset = "0x10E0E54", VA = "0x10E0E54", Slot = "5")]
	public override void execute(int frameRate, float delay, string animatorId)
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x10E1350", Offset = "0x10E1350", VA = "0x10E1350")]
	public Quaternion getStartQuaternion()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x10E135C", Offset = "0x10E135C", VA = "0x10E135C")]
	public Quaternion getEndQuaternion()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x10E1368", Offset = "0x10E1368", VA = "0x10E1368", Slot = "7")]
	public override AnimatorTimeline.JSONAction getJSONAction(int frameRate)
	{
		return null;
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x10E1504", Offset = "0x10E1504", VA = "0x10E1504")]
	public AMRotationAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B7")]
public class AMRotationKey : AMKey
{
	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Quaternion rotation;

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x10E150C", Offset = "0x10E150C", VA = "0x10E150C")]
	public bool setRotation(Vector3 rotation)
	{
		return default(bool);
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x10E1620", Offset = "0x10E1620", VA = "0x10E1620")]
	public Vector3 getRotation()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x10E162C", Offset = "0x10E162C", VA = "0x10E162C")]
	public bool setRotationQuaternion(Vector4 rotation)
	{
		return default(bool);
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x10E1734", Offset = "0x10E1734", VA = "0x10E1734")]
	public Vector4 getRotationQuaternion()
	{
		return default(Vector4);
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x10E176C", Offset = "0x10E176C", VA = "0x10E176C", Slot = "5")]
	public override AMKey CreateClone()
	{
		return null;
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x10E182C", Offset = "0x10E182C", VA = "0x10E182C")]
	public AMRotationKey()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B8")]
public class AMRotationTrack : AMTrack
{
	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform _obj;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Quaternion cachedInitialRotation;

	[Token(Token = "0x17000062")]
	public Transform obj
	{
		[Token(Token = "0x6000401")]
		[Address(RVA = "0x10E1830", Offset = "0x10E1830", VA = "0x10E1830")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000402")]
		[Address(RVA = "0x10E1838", Offset = "0x10E1838", VA = "0x10E1838")]
		set
		{
		}
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x10E18F0", Offset = "0x10E18F0", VA = "0x10E18F0", Slot = "8")]
	public override string getTrackType()
	{
		return null;
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x10E1938", Offset = "0x10E1938", VA = "0x10E1938")]
	public void addKey(int _frame, Quaternion _rotation)
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x10E1B24", Offset = "0x10E1B24", VA = "0x10E1B24", Slot = "6")]
	public override void updateCache()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x10E1EB4", Offset = "0x10E1EB4", VA = "0x10E1EB4", Slot = "5")]
	public override void previewFrame(float frame, [Optional] AMTrack extraTrack)
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x10E24DC", Offset = "0x10E24DC", VA = "0x10E24DC")]
	public bool autoKey(Transform _obj, int frame)
	{
		return default(bool);
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x10E26E8", Offset = "0x10E26E8", VA = "0x10E26E8")]
	public Quaternion getRotationAtFrame(float frame)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x10E2E2C", Offset = "0x10E2E2C", VA = "0x10E2E2C")]
	public Vector4 getInitialRotation()
	{
		return default(Vector4);
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x10E2ECC", Offset = "0x10E2ECC", VA = "0x10E2ECC", Slot = "7")]
	public override AnimatorTimeline.JSONInit getJSONInit()
	{
		return null;
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x10E2FFC", Offset = "0x10E2FFC", VA = "0x10E2FFC", Slot = "9")]
	public override List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x10E30D8", Offset = "0x10E30D8", VA = "0x10E30D8", Slot = "10")]
	public override List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x10E3268", Offset = "0x10E3268", VA = "0x10E3268")]
	public AMRotationTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B9")]
public class AMTake : ScriptableObject
{
	[Token(Token = "0x20003C0")]
	public class Morph
	{
		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject obj;

		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MethodInfo methodInfo;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Component component;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<float> morph;

		[Token(Token = "0x600231A")]
		[Address(RVA = "0xB5D73C", Offset = "0xB5D73C", VA = "0xB5D73C")]
		public Morph(GameObject obj, MethodInfo methodInfo, Component component, List<float> morph)
		{
		}

		[Token(Token = "0x600231B")]
		[Address(RVA = "0xB5D7DC", Offset = "0xB5D7DC", VA = "0xB5D7DC")]
		public void blendMorph(List<float> new_morph)
		{
		}
	}

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string name;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int frameRate;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int numFrames;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float startFrame;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float endFrame;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int playbackSpeedIndex;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int selectedTrack;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int selectedFrame;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int selectedGroup;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<int> trackKeys;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<AMTrack> trackValues;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<int> contextSelection;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<int> ghostSelection;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<int> contextSelectionTracks;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int track_count;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int group_count;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AMGroup rootGroup;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<int> groupKeys;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<AMGroup> groupValues;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isProLicense;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AMCameraSwitcherTrack cameraSwitcher;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<Morph> morphs;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int ghost_selection_total_offset;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float executeActions_delay;

	[Token(Token = "0x600040E")]
	[Address(RVA = "0x10E3270", Offset = "0x10E3270", VA = "0x10E3270")]
	public void selectTrack(int index, bool isShiftDown, bool isControlDown)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x10E3C40", Offset = "0x10E3C40", VA = "0x10E3C40")]
	public AMTrack getSelectedTrack()
	{
		return null;
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0x10E3D7C", Offset = "0x10E3D7C", VA = "0x10E3D7C")]
	public void addTranslationTrack(GameObject obj)
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x10E4080", Offset = "0x10E4080", VA = "0x10E4080")]
	public void addRotationTrack(GameObject obj)
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x10E4164", Offset = "0x10E4164", VA = "0x10E4164")]
	public void addOrientationTrack(GameObject obj)
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x10E4240", Offset = "0x10E4240", VA = "0x10E4240")]
	public void addAnimationTrack(GameObject obj)
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0x10E4390", Offset = "0x10E4390", VA = "0x10E4390")]
	public void addAudioTrack(GameObject obj)
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0x10E4540", Offset = "0x10E4540", VA = "0x10E4540")]
	public void addPropertyTrack(GameObject obj)
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0x10E460C", Offset = "0x10E460C", VA = "0x10E460C")]
	public void addEventTrack(GameObject obj)
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0x10E46D8", Offset = "0x10E46D8", VA = "0x10E46D8")]
	public void addCameraSwitcherTrack(GameObject obj)
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x10E4964", Offset = "0x10E4964", VA = "0x10E4964")]
	public void deleteTrack(int id, bool deleteFromGroup = true)
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0x10E3B08", Offset = "0x10E3B08", VA = "0x10E3B08")]
	public List<int> getTrackIDsForRange(int start_id, int end_id)
	{
		return null;
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x10E4FF4", Offset = "0x10E4FF4", VA = "0x10E4FF4")]
	private List<int> getTrackIDsForGroup(int group_id, int start_id, int end_id, ref bool foundStartID, ref bool foundEndID)
	{
		return null;
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x10E4FB8", Offset = "0x10E4FB8", VA = "0x10E4FB8")]
	public int getElementLocationIndex(int element_id)
	{
		return default(int);
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0x10E5398", Offset = "0x10E5398", VA = "0x10E5398")]
	private void getElementLocationIndexForGroup(int group_id, int element_id, ref int count, ref bool found)
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0x10E38F0", Offset = "0x10E38F0", VA = "0x10E38F0")]
	public void selectGroup(int group_id, bool isShiftDown, bool isControlDown, bool softSelect = false)
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0x10E5504", Offset = "0x10E5504", VA = "0x10E5504")]
	public void contextSelectGroup(int group_id, bool isControlDown)
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0x10E5710", Offset = "0x10E5710", VA = "0x10E5710")]
	public bool isGroupSelected(int group_id, ref int numTracks)
	{
		return default(bool);
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0x10E5874", Offset = "0x10E5874", VA = "0x10E5874")]
	public void deleteGroup(int group_id, bool deleteContents)
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0x10E6220", Offset = "0x10E6220", VA = "0x10E6220")]
	public void deleteSelectedGroup(bool deleteContents)
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0x10E3EB8", Offset = "0x10E3EB8", VA = "0x10E3EB8")]
	public int getUniqueTrackID()
	{
		return default(int);
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x10E6250", Offset = "0x10E6250", VA = "0x10E6250")]
	public int getUniqueGroupID()
	{
		return default(int);
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x10E4B30", Offset = "0x10E4B30", VA = "0x10E4B30")]
	public int getTrackIndex(int id)
	{
		return default(int);
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x10E3C48", Offset = "0x10E3C48", VA = "0x10E3C48")]
	public AMTrack getTrack(int id)
	{
		return null;
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x10E5B1C", Offset = "0x10E5B1C", VA = "0x10E5B1C")]
	public int getElementGroup(int id)
	{
		return default(int);
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x10E636C", Offset = "0x10E636C", VA = "0x10E636C")]
	public bool replaceElement(int source_id, int new_id)
	{
		return default(bool);
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x10E3FD4", Offset = "0x10E3FD4", VA = "0x10E3FD4")]
	public void addTrack(AMTrack track)
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x10E67D0", Offset = "0x10E67D0", VA = "0x10E67D0")]
	public void moveToGroup(int source_id, int dest_group_id, bool first = false, int dest_track_id = -1)
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x10E6A9C", Offset = "0x10E6A9C", VA = "0x10E6A9C")]
	public bool isElementInGroup(int id, int group_id)
	{
		return default(bool);
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x10E6940", Offset = "0x10E6940", VA = "0x10E6940")]
	public int getElementRootGroup(int element_id, int group_id)
	{
		return default(int);
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x10E6BEC", Offset = "0x10E6BEC", VA = "0x10E6BEC")]
	public void moveGroupElement(int source_id, int dest_id)
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x10E6F0C", Offset = "0x10E6F0C", VA = "0x10E6F0C")]
	public void addGroup()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x10E6FF0", Offset = "0x10E6FF0", VA = "0x10E6FF0")]
	public AMTake(string name)
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0x10E3E64", Offset = "0x10E3E64", VA = "0x10E3E64")]
	public int getTrackCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x10E7158", Offset = "0x10E7158", VA = "0x10E7158")]
	public int getGroupIndex(int id)
	{
		return default(int);
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0x10E5254", Offset = "0x10E5254", VA = "0x10E5254")]
	public AMGroup getGroup(int id)
	{
		return null;
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x10E6898", Offset = "0x10E6898", VA = "0x10E6898")]
	public void initGroups()
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x10E3564", Offset = "0x10E3564", VA = "0x10E3564")]
	public int getTrackGroup(int track_id)
	{
		return default(int);
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x10E5EA8", Offset = "0x10E5EA8", VA = "0x10E5EA8")]
	public void removeFromGroup(int source_id)
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x10E64FC", Offset = "0x10E64FC", VA = "0x10E64FC")]
	public void addToGroup(int source_id, int group_id, bool first = false, int dest_track_id = -1)
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x10E4BD4", Offset = "0x10E4BD4", VA = "0x10E4BD4")]
	public void deleteTrackFromGroups(int _id)
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x10E71FC", Offset = "0x10E71FC", VA = "0x10E71FC")]
	public void selectFrame(int track, int num, float numFramesToRender, bool isShiftDown, bool isControlDown)
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x10DDA0C", Offset = "0x10DDA0C", VA = "0x10DDA0C")]
	public void addMorph(GameObject obj, MethodInfo methodInfo, Component component, List<float> morph)
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x10E726C", Offset = "0x10E726C", VA = "0x10E726C")]
	public void previewFrame(float _frame, bool orientationOnly = false, bool renderStill = true, bool skipCameraSwitcher = false, bool quickPreview = false)
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x10E7DD4", Offset = "0x10E7DD4", VA = "0x10E7DD4")]
	public void previewMorph(Morph m)
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x10E7908", Offset = "0x10E7908", VA = "0x10E7908")]
	private void renderCameraSwitcherStill(float _frame)
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x10E8024", Offset = "0x10E8024", VA = "0x10E8024")]
	public void sampleAudioAtFrame(int frame, float speed)
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x10CC0A4", Offset = "0x10CC0A4", VA = "0x10CC0A4")]
	public AMTranslationTrack getTranslationTrackForTransform(Transform obj)
	{
		return null;
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x10E8174", Offset = "0x10E8174", VA = "0x10E8174")]
	public void deleteKeysAfter(int frame)
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x10E83B0", Offset = "0x10E83B0", VA = "0x10E83B0")]
	public void deleteKeysBefore(int frame)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x10E85EC", Offset = "0x10E85EC", VA = "0x10E85EC")]
	public void shiftOutOfBoundsKeysOnSelectedTrack()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x10E87A0", Offset = "0x10E87A0", VA = "0x10E87A0")]
	public void shiftOutOfBoundsKeysOnTrack(AMTrack _track)
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x10E894C", Offset = "0x10E894C", VA = "0x10E894C")]
	public void deleteSelectedKeysFromTrack(int track_id)
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x10E8B9C", Offset = "0x10E8B9C", VA = "0x10E8B9C")]
	public bool hasKeyAfter(int frame)
	{
		return default(bool);
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x10E8CF4", Offset = "0x10E8CF4", VA = "0x10E8CF4")]
	public bool autoKey(Transform obj, int frame)
	{
		return default(bool);
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x10E8AB8", Offset = "0x10E8AB8", VA = "0x10E8AB8")]
	public bool isFrameInContextSelection(int frame)
	{
		return default(bool);
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x10E8ED4", Offset = "0x10E8ED4", VA = "0x10E8ED4")]
	public bool isFrameInGhostSelection(int frame)
	{
		return default(bool);
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x10E8FB8", Offset = "0x10E8FB8", VA = "0x10E8FB8")]
	public bool isFrameSelected(int frame)
	{
		return default(bool);
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x10E9094", Offset = "0x10E9094", VA = "0x10E9094")]
	public void contextSelectFrame(int frame, bool toggle)
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x10E944C", Offset = "0x10E944C", VA = "0x10E944C")]
	public void contextSelectFrameRange(int startFrame, int endFrame)
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x10E9660", Offset = "0x10E9660", VA = "0x10E9660")]
	public void contextSelectAllFrames()
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x10E9704", Offset = "0x10E9704", VA = "0x10E9704")]
	public bool contextSelectionHasKeys()
	{
		return default(bool);
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x10E9924", Offset = "0x10E9924", VA = "0x10E9924")]
	public AMKey[] getContextSelectionKeysForTrack(AMTrack track)
	{
		return null;
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x10E9BA4", Offset = "0x10E9BA4", VA = "0x10E9BA4")]
	public void offsetContextSelectionFramesBy(int offset)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x10EA274", Offset = "0x10EA274", VA = "0x10EA274")]
	public void offsetGhostSelectionBy(int offset)
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x10EA338", Offset = "0x10EA338", VA = "0x10EA338")]
	public void setGhostSelection()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x10E9038", Offset = "0x10E9038", VA = "0x10E9038")]
	public bool hasGhostSelection()
	{
		return default(bool);
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x10EA488", Offset = "0x10EA488", VA = "0x10EA488")]
	public int[] getKeyFramesInGhostSelection(int startFrame, int endFrame, int track_id)
	{
		return null;
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x10EA65C", Offset = "0x10EA65C", VA = "0x10EA65C")]
	public void maintainTake()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x10EA7A0", Offset = "0x10EA7A0", VA = "0x10EA7A0")]
	public void sampleAudio(float frame, float speed)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x10EA8F0", Offset = "0x10EA8F0", VA = "0x10EA8F0")]
	public void stopAudio()
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x10EAA1C", Offset = "0x10EAA1C", VA = "0x10EAA1C")]
	public void stopAnimations()
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x10EAC1C", Offset = "0x10EAC1C", VA = "0x10EAC1C")]
	public void resetScene()
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x10EADF8", Offset = "0x10EADF8", VA = "0x10EADF8")]
	public void drawGizmos(float gizmo_size, bool inPlayMode)
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x10EAF90", Offset = "0x10EAF90", VA = "0x10EAF90")]
	public void maintainCaches()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x10EB218", Offset = "0x10EB218", VA = "0x10EB218")]
	public void previewFrameInvoker(float frame)
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x10EB22C", Offset = "0x10EB22C", VA = "0x10EB22C")]
	public void executeActions(float fromFrame, string animatorId)
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x10EB670", Offset = "0x10EB670", VA = "0x10EB670")]
	public void setupCameraSwitcher(float fromFrame = 0f)
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x10EB880", Offset = "0x10EB880", VA = "0x10EB880")]
	public float getElementsHeight(int group_id, float height_track, float height_track_foldin, float height_group)
	{
		return default(float);
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x10EBA5C", Offset = "0x10EBA5C", VA = "0x10EBA5C")]
	public float getElementsHeight(int element_id, int group_id, float height_track, float height_track_foldin, float height_group, ref bool found)
	{
		return default(float);
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x10EBC94", Offset = "0x10EBC94", VA = "0x10EBC94")]
	public float getElementY(int element_id, float height_track, float height_track_foldin, float height_group)
	{
		return default(float);
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x10EBCBC", Offset = "0x10EBCBC", VA = "0x10EBCBC")]
	public void destroy()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x10EBF44", Offset = "0x10EBF44", VA = "0x10EBF44")]
	public List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x10EC0AC", Offset = "0x10EC0AC", VA = "0x10EC0AC")]
	public List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x10EC258", Offset = "0x10EC258", VA = "0x10EC258")]
	public void Load(MotinTakeData takeData)
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x10EC59C", Offset = "0x10EC59C", VA = "0x10EC59C")]
	public AMTrack LoadTrackData(MotinTrackData trackData)
	{
		return null;
	}
}
[Token(Token = "0x20000BA")]
public class AMTarget : MonoBehaviour
{
	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float gizmo_size;

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xB5D908", Offset = "0xB5D908", VA = "0xB5D908")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xB5D9A8", Offset = "0xB5D9A8", VA = "0xB5D9A8")]
	public AMTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x20000BB")]
public class AMTrack : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x20003C1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A3C", Offset = "0x7D8A3C")]
	private sealed class <>c
	{
		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<AMKey> <>9__15_0;

		[Token(Token = "0x600231D")]
		[Address(RVA = "0xB5F754", Offset = "0xB5F754", VA = "0xB5F754")]
		public <>c()
		{
		}

		[Token(Token = "0x600231E")]
		[Address(RVA = "0xB5F75C", Offset = "0xB5F75C", VA = "0xB5F75C")]
		internal int <sortKeys>b__15_0(AMKey c, AMKey d)
		{
			return default(int);
		}
	}

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int id;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public new string name;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<AMKey> keys;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<AMAction> cache;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool foldout;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AMTake parentTake;

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xB5D9BC", Offset = "0xB5D9BC", VA = "0xB5D9BC")]
	public void setName(int index)
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xB5DA44", Offset = "0xB5DA44", VA = "0xB5DA44")]
	public void setName(string name)
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xB5DA4C", Offset = "0xB5DA4C", VA = "0xB5DA4C")]
	public bool hasKeyOnFrame(int _frame)
	{
		return default(bool);
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xB5DB68", Offset = "0xB5DB68", VA = "0xB5DB68", Slot = "4")]
	public virtual void drawGizmos(float gizmo_size)
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xB5DB6C", Offset = "0xB5DB6C", VA = "0xB5DB6C", Slot = "5")]
	public virtual void previewFrame(float frame, [Optional] AMTrack extraTrack)
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xB5DB70", Offset = "0xB5DB70", VA = "0xB5DB70", Slot = "6")]
	public virtual void updateCache()
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xB5DBD0", Offset = "0xB5DBD0", VA = "0xB5DBD0", Slot = "7")]
	public virtual AnimatorTimeline.JSONInit getJSONInit()
	{
		return null;
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xB5DC60", Offset = "0xB5DC60", VA = "0xB5DC60")]
	public AMKey getKeyOnFrame(int _frame)
	{
		return null;
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xB5DE0C", Offset = "0xB5DE0C", VA = "0xB5DE0C", Slot = "8")]
	public virtual string getTrackType()
	{
		return null;
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xB5DE54", Offset = "0xB5DE54", VA = "0xB5DE54")]
	public void sortKeys()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xB5DF50", Offset = "0xB5DF50", VA = "0xB5DF50")]
	public void deleteKeyOnFrame(int frame)
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xB5E054", Offset = "0xB5E054", VA = "0xB5E054")]
	public void deleteDuplicateKeys()
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xB5E174", Offset = "0xB5E174", VA = "0xB5E174")]
	public void deleteAllKeys()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xB5E3F0", Offset = "0xB5E3F0", VA = "0xB5E3F0")]
	public void deleteKeysAfter(int frame)
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xB5E4F8", Offset = "0xB5E4F8", VA = "0xB5E4F8")]
	public void destroy()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xB5E630", Offset = "0xB5E630", VA = "0xB5E630", Slot = "9")]
	public virtual List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xB5E694", Offset = "0xB5E694", VA = "0xB5E694", Slot = "10")]
	public virtual List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xB5E2A8", Offset = "0xB5E2A8", VA = "0xB5E2A8")]
	public void destroyCache()
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xB5E6F8", Offset = "0xB5E6F8", VA = "0xB5E6F8")]
	public void offsetKeysFromBy(int frame, int amount)
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xB5E814", Offset = "0xB5E814", VA = "0xB5E814")]
	public int shiftOutOfBoundsKeys()
	{
		return default(int);
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xB5E9E8", Offset = "0xB5E9E8", VA = "0xB5E9E8")]
	public AMAction getActionContainingFrame(int frame)
	{
		return null;
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xB5EB50", Offset = "0xB5EB50", VA = "0xB5EB50")]
	public AMAction getActionForFrame(int startFrame)
	{
		return null;
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xB5ECF4", Offset = "0xB5ECF4", VA = "0xB5ECF4")]
	public int getActionIndexForFrame(int startFrame)
	{
		return default(int);
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xB5EDA0", Offset = "0xB5EDA0", VA = "0xB5EDA0")]
	public bool hasActionOnFrame(int _frame)
	{
		return default(bool);
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xB5EEBC", Offset = "0xB5EEBC", VA = "0xB5EEBC")]
	public int getKeyFrameAfterFrame(int frame, bool wholeTake = true)
	{
		return default(int);
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xB5F094", Offset = "0xB5F094", VA = "0xB5F094")]
	public int getKeyFrameBeforeFrame(int frame, bool wholeTake = true)
	{
		return default(int);
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xB5F208", Offset = "0xB5F208", VA = "0xB5F208")]
	public AMKey[] getKeyFramesInBetween(int startFrame, int endFrame)
	{
		return null;
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xB5F3DC", Offset = "0xB5F3DC", VA = "0xB5F3DC")]
	public float[] getKeyFrameRatiosInBetween(int startFrame, int endFrame)
	{
		return null;
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xB5F5C0", Offset = "0xB5F5C0", VA = "0xB5F5C0", Slot = "11")]
	public virtual void Load(MotinTrackData trackData)
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xB5F650", Offset = "0xB5F650", VA = "0xB5F650")]
	public AMTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000BC")]
public class AMTranslationAction : AMAction
{
	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int endFrame;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform obj;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3[] path;

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xB5F78C", Offset = "0xB5F78C", VA = "0xB5F78C", Slot = "4")]
	public override string ToString(int codeLanguage, int frameRate)
	{
		return null;
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xB60588", Offset = "0xB60588", VA = "0xB60588", Slot = "6")]
	public override int getNumberOfFrames()
	{
		return default(int);
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xB60550", Offset = "0xB60550", VA = "0xB60550")]
	public float getTime(int frameRate)
	{
		return default(float);
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xB60598", Offset = "0xB60598", VA = "0xB60598", Slot = "5")]
	public override void execute(int frameRate, float delay, string animatorId)
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xB6125C", Offset = "0xB6125C", VA = "0xB6125C", Slot = "7")]
	public override AnimatorTimeline.JSONAction getJSONAction(int frameRate)
	{
		return null;
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xB6143C", Offset = "0xB6143C", VA = "0xB6143C")]
	public AMTranslationAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20000BD")]
public class AMTranslationKey : AMKey
{
	[Token(Token = "0x20003C2")]
	public enum Interpolation
	{
		[Token(Token = "0x4001FAD")]
		Curve,
		[Token(Token = "0x4001FAE")]
		Linear
	}

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string[] InterpolationNames;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 position;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int interp;

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xB61444", Offset = "0xB61444", VA = "0xB61444")]
	public bool setInterpolation(int _interp)
	{
		return default(bool);
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xB61464", Offset = "0xB61464", VA = "0xB61464")]
	public bool setPosition(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xB61528", Offset = "0xB61528", VA = "0xB61528", Slot = "5")]
	public override AMKey CreateClone()
	{
		return null;
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xB615E8", Offset = "0xB615E8", VA = "0xB615E8")]
	public AMTranslationKey()
	{
	}
}
[Serializable]
[Token(Token = "0x20000BE")]
public class AMTranslationTrack : AMTrack
{
	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform _obj;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 cachedInitialPosition;

	[Token(Token = "0x17000063")]
	public Transform obj
	{
		[Token(Token = "0x6000490")]
		[Address(RVA = "0xB616DC", Offset = "0xB616DC", VA = "0xB616DC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000491")]
		[Address(RVA = "0xB616E4", Offset = "0xB616E4", VA = "0xB616E4")]
		set
		{
		}
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xB6179C", Offset = "0xB6179C", VA = "0xB6179C", Slot = "8")]
	public override string getTrackType()
	{
		return null;
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xB617E4", Offset = "0xB617E4", VA = "0xB617E4")]
	public void addKey(int _frame, Vector3 _position, int _interp, int _easeType)
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xB619E4", Offset = "0xB619E4", VA = "0xB619E4")]
	public void addKey(int _frame, Vector3 _position)
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xB61BC8", Offset = "0xB61BC8", VA = "0xB61BC8", Slot = "5")]
	public override void previewFrame(float frame, [Optional] AMTrack extraTrack)
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xB625AC", Offset = "0xB625AC", VA = "0xB625AC")]
	public bool autoKey(Transform _obj, int frame)
	{
		return default(bool);
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xB62794", Offset = "0xB62794", VA = "0xB62794")]
	public Vector3 getPositionAtFrame(float frame)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xB62F0C", Offset = "0xB62F0C", VA = "0xB62F0C", Slot = "4")]
	public override void drawGizmos(float gizmo_size)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xB63280", Offset = "0xB63280", VA = "0xB63280")]
	private AMPath getPathFromIndex(int startIndex)
	{
		return null;
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xB63618", Offset = "0xB63618", VA = "0xB63618", Slot = "6")]
	public override void updateCache()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xB639F8", Offset = "0xB639F8", VA = "0xB639F8")]
	public AMTranslationKey getActionStartKeyFor(int frame)
	{
		return null;
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xB63C58", Offset = "0xB63C58", VA = "0xB63C58")]
	public Vector3 getInitialPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xB63D00", Offset = "0xB63D00", VA = "0xB63D00", Slot = "7")]
	public override AnimatorTimeline.JSONInit getJSONInit()
	{
		return null;
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xB63E30", Offset = "0xB63E30", VA = "0xB63E30", Slot = "9")]
	public override List<GameObject> getDependencies()
	{
		return null;
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xB63F0C", Offset = "0xB63F0C", VA = "0xB63F0C", Slot = "10")]
	public override List<GameObject> updateDependencies(List<GameObject> newReferences, List<GameObject> oldReferences)
	{
		return null;
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xB6409C", Offset = "0xB6409C", VA = "0xB6409C")]
	public AMTranslationTrack()
	{
	}
}
[Token(Token = "0x20000BF")]
public class ClipboardHelper
{
	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PropertyInfo m_systemCopyBufferProperty;

	[Token(Token = "0x17000064")]
	public static string clipBoard
	{
		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x9BFC08", Offset = "0x9BFC08", VA = "0x9BFC08")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x9BFCA8", Offset = "0x9BFCA8", VA = "0x9BFCA8")]
		set
		{
		}
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x9BFA8C", Offset = "0x9BFA8C", VA = "0x9BFA8C")]
	private static PropertyInfo GetSystemCopyBufferProperty()
	{
		return null;
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x9BFD2C", Offset = "0x9BFD2C", VA = "0x9BFD2C")]
	public ClipboardHelper()
	{
	}
}
[Token(Token = "0x20000C0")]
public class ComboBox
{
	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool forceToUnShow;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int useControlID;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isClickedComboButton;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int selectedItemIndex;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rect rect;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GUIContent buttonContent;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GUIContent[] listContent;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string buttonStyle;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string boxStyle;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GUIStyle listStyle;

	[Token(Token = "0x17000065")]
	public int SelectedItemIndex
	{
		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x9C0250", Offset = "0x9C0250", VA = "0x9C0250")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x9C0258", Offset = "0x9C0258", VA = "0x9C0258")]
		set
		{
		}
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x9BFD38", Offset = "0x9BFD38", VA = "0x9BFD38")]
	public ComboBox(Rect rect, GUIContent buttonContent, GUIContent[] listContent, GUIStyle listStyle)
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x9BFDEC", Offset = "0x9BFDEC", VA = "0x9BFDEC")]
	public ComboBox(Rect rect, GUIContent buttonContent, GUIContent[] listContent, string buttonStyle, string boxStyle, GUIStyle listStyle)
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x9BFE68", Offset = "0x9BFE68", VA = "0x9BFE68")]
	public int Show()
	{
		return default(int);
	}
}
[Token(Token = "0x20000C1")]
public static class ObjectCopier
{
	[Token(Token = "0x60004AC")]
	public static T Clone<T>(T source)
	{
		return (T)null;
	}
}
[Token(Token = "0x20000C2")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5170", Offset = "0x7D5170")]
[ExecuteInEditMode]
public class AMCameraFade : MonoBehaviour
{
	[Token(Token = "0x20003C3")]
	public static class Defaults
	{
		[Token(Token = "0x20004E4")]
		public static class Doors
		{
			[Token(Token = "0x40023DA")]
			public const float layout = 0f;

			[Token(Token = "0x40023DB")]
			public const float type = 0f;

			[Token(Token = "0x40023DC")]
			public const float focalXorY = 0.5f;
		}

		[Token(Token = "0x20004E5")]
		public static class VenetianBlinds
		{
			[Token(Token = "0x40023DD")]
			public const float layout = 0f;

			[Token(Token = "0x40023DE")]
			public const int numberOfBlinds = 5;
		}

		[Token(Token = "0x20004E6")]
		public static class IrisBox
		{
			[Token(Token = "0x40023DF")]
			public const float type = 0f;

			[Token(Token = "0x40023E0")]
			public const float focalX = 0.5f;

			[Token(Token = "0x40023E1")]
			public const float focalY = 0.5f;
		}

		[Token(Token = "0x20004E7")]
		public static class IrisRound
		{
			[Token(Token = "0x40023E2")]
			public const float type = 0f;

			[Token(Token = "0x40023E3")]
			public const float maxScale = 2.5f;

			[Token(Token = "0x40023E4")]
			public const float focalX = 0.5f;

			[Token(Token = "0x40023E5")]
			public const float focalY = 0.5f;
		}

		[Token(Token = "0x20004E8")]
		public static class IrisShape
		{
			[Token(Token = "0x40023E6")]
			public const float type = 0f;

			[Token(Token = "0x40023E7")]
			public const float maxScale = 6f;

			[Token(Token = "0x40023E8")]
			public const int rotateAmount = 50;

			[Token(Token = "0x40023E9")]
			public const float easeRotation = 0f;

			[Token(Token = "0x40023EA")]
			public const float focalX = 0.5f;

			[Token(Token = "0x40023EB")]
			public const float focalY = 0.5f;

			[Token(Token = "0x40023EC")]
			public const float pivotX = 0.5f;

			[Token(Token = "0x40023ED")]
			public const float pivotY = 0.5f;
		}

		[Token(Token = "0x20004E9")]
		public static class ShapeWipe
		{
			[Token(Token = "0x40023EE")]
			public const int angle = 0;

			[Token(Token = "0x40023EF")]
			public const float scale = 6f;

			[Token(Token = "0x40023F0")]
			public const float padding = 0f;

			[Token(Token = "0x40023F1")]
			public const float offsetStart = 3f;

			[Token(Token = "0x40023F2")]
			public const float offsetEnd = -3f;
		}

		[Token(Token = "0x20004EA")]
		public static class LinearWipe
		{
			[Token(Token = "0x40023F3")]
			public const int angle = 0;

			[Token(Token = "0x40023F4")]
			public const float padding = 0.25f;
		}

		[Token(Token = "0x20004EB")]
		public static class RadialWipe
		{
			[Token(Token = "0x40023F5")]
			public const float direction = 0f;

			[Token(Token = "0x40023F6")]
			public const int startingAngle = 0;

			[Token(Token = "0x40023F7")]
			public const float focalX = 0.5f;

			[Token(Token = "0x40023F8")]
			public const float focalY = 0.5f;
		}

		[Token(Token = "0x20004EC")]
		public static class WedgeWipe
		{
			[Token(Token = "0x40023F9")]
			public const int startingAngle = 0;

			[Token(Token = "0x40023FA")]
			public const float focalX = 0.5f;

			[Token(Token = "0x40023FB")]
			public const float focalY = 0.5f;
		}
	}

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AMCameraFade _cf;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Texture2D _blankTexture;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Material _matIris;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool deleteMe;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool updateTexture;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public int keepAlives;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public bool keepAliveColor;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[HideInInspector]
	public bool keepAlivePreview;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	[HideInInspector]
	public bool keepAliveAwake;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public int mode;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public float percent;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float value;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public bool useRenderTexture;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Texture2D tex2d;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public RenderTexture _tex;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public float[] r;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Camera renderTextureCamera;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public bool hasColorTex;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[HideInInspector]
	public bool hasColorBG;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	public Color colorTex;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[HideInInspector]
	public Color colorBG;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[HideInInspector]
	public int width;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public int height;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[HideInInspector]
	public bool placeholder;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[HideInInspector]
	public Texture2D irisShape;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[HideInInspector]
	public Texture background;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	public int cachedStillFrame;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[HideInInspector]
	public bool isReset;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	[HideInInspector]
	public bool shouldUpdateStill;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
	[HideInInspector]
	public bool shouldUpdateRenderTexture;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
	[HideInInspector]
	public bool preview;

	[Token(Token = "0x17000066")]
	public static Texture2D blankTexture
	{
		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x130AADC", Offset = "0x130AADC", VA = "0x130AADC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000067")]
	public static Material matIris
	{
		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x130ACC4", Offset = "0x130ACC4", VA = "0x130ACC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000068")]
	[HideInInspector]
	private RenderTexture tex
	{
		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x130AEB0", Offset = "0x130AEB0", VA = "0x130AEB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x130B160", Offset = "0x130B160", VA = "0x130B160")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x130B3FC", Offset = "0x130B3FC", VA = "0x130B3FC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x130C8FC", Offset = "0x130C8FC", VA = "0x130C8FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0x130C7F0", Offset = "0x130C7F0", VA = "0x130C7F0")]
	private void doForceUpdate(bool showMsg = false)
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x130CA30", Offset = "0x130CA30", VA = "0x130CA30")]
	public void destroyImmediate()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x130B22C", Offset = "0x130B22C", VA = "0x130B22C")]
	public void destroy()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x130B97C", Offset = "0x130B97C", VA = "0x130B97C")]
	public static void processCameraFade(Rect rect, Texture tex, int mode, float value, float percent, float[] r, Texture2D _irisShape, UnityEngine.Event editorEvent)
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x131079C", Offset = "0x131079C", VA = "0x131079C")]
	public void setupMaterials()
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x13108B4", Offset = "0x13108B4", VA = "0x13108B4")]
	public static bool needsTexture(int mode)
	{
		return default(bool);
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x131065C", Offset = "0x131065C", VA = "0x131065C")]
	public static void processAlpha(Rect rect, Texture tex, float value)
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x130CCE4", Offset = "0x130CCE4", VA = "0x130CCE4")]
	public static void processDoorsVerticalOpen(Rect rect, Texture tex, float value, float focalX)
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x130CEF8", Offset = "0x130CEF8", VA = "0x130CEF8")]
	public static void processDoorsVerticalClose(Rect rect, Texture tex, float value, float focalX)
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x130D11C", Offset = "0x130D11C", VA = "0x130D11C")]
	public static void processDoorsHorizontalOpen(Rect rect, Texture tex, float value, float focalY)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x130D330", Offset = "0x130D330", VA = "0x130D330")]
	public static void processDoorsHorizontalClose(Rect rect, Texture tex, float value, float focalY)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x130D55C", Offset = "0x130D55C", VA = "0x130D55C")]
	public static void processVenetianBlindsVertical(Rect rect, Texture tex, float value, int resolution)
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0x130D724", Offset = "0x130D724", VA = "0x130D724")]
	public static void processVenetianBlindsHorizontal(Rect rect, Texture tex, float value, int resolution)
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0x130DA90", Offset = "0x130DA90", VA = "0x130DA90")]
	public static void processIrisBoxGrow(Rect rect, Texture tex, float value, float focalX, float focalY)
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0x130D914", Offset = "0x130D914", VA = "0x130D914")]
	public static void processIrisBoxShrink(Rect rect, Texture tex, float value, float focalX, float focalY)
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0x130DC0C", Offset = "0x130DC0C", VA = "0x130DC0C")]
	public static void processIrisRound(Rect rect, Texture tex, bool shrink, float value, float maxScale, float focalX, float focalY, Texture2D irisShape, UnityEngine.Event editorEvent)
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x130DD0C", Offset = "0x130DD0C", VA = "0x130DD0C")]
	public static void processIrisShape(Rect rect, Texture tex, bool shrink, float value, float percent, float focalX, float focalY, Texture shape, float maxScale, float pivotX, float pivotY, int rotateAmount, bool easeRotation, UnityEngine.Event editorEvent)
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0x130E51C", Offset = "0x130E51C", VA = "0x130E51C")]
	public static void processLinearWipe(Rect rect, Texture tex, float value, int angle, float padding, Texture2D irisShape, UnityEngine.Event editorEvent)
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x130E5F8", Offset = "0x130E5F8", VA = "0x130E5F8")]
	public static void processShapeWipe(Rect rect, Texture tex, float value, Texture shape, int angle, float scale, float padding, float offsetStart, float offsetEnd, UnityEngine.Event editorEvent)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x130EE48", Offset = "0x130EE48", VA = "0x130EE48")]
	public static void processRadialWipe(Rect rect, Texture tex, float value, bool clockwise, int startingAngle, float focalX, float focalY, UnityEngine.Event editorEvent)
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x130F8D8", Offset = "0x130F8D8", VA = "0x130F8D8")]
	public static void processWedgeWipe(Rect rect, Texture tex, float value, int startingAngle, float focalX, float focalY, UnityEngine.Event editorEvent)
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x130ABC8", Offset = "0x130ABC8", VA = "0x130ABC8")]
	private static Texture2D getBlankTexture()
	{
		return null;
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x130ADB4", Offset = "0x130ADB4", VA = "0x130ADB4")]
	private static Material getMaterialIris()
	{
		return null;
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x1310ADC", Offset = "0x1310ADC", VA = "0x1310ADC")]
	private static Material getMaterialRadial()
	{
		return null;
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x1310B68", Offset = "0x1310B68", VA = "0x1310B68")]
	public static AMCameraFade getCameraFade(bool preview = false)
	{
		return null;
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x1310EE0", Offset = "0x1310EE0", VA = "0x1310EE0")]
	public void setupRenderTexture(Camera camera)
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x131104C", Offset = "0x131104C", VA = "0x131104C")]
	public bool isRenderTextureSetupFor(Camera camera)
	{
		return default(bool);
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x131113C", Offset = "0x131113C", VA = "0x131113C")]
	public static void reset()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x1311354", Offset = "0x1311354", VA = "0x1311354")]
	public static void clearRenderTexture()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x13114BC", Offset = "0x13114BC", VA = "0x13114BC")]
	public static void destroyAndReload(bool isPreview)
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x13115C0", Offset = "0x13115C0", VA = "0x13115C0")]
	public static void destroyImmediateInstance()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x1311698", Offset = "0x1311698", VA = "0x1311698")]
	public static bool hasInstance()
	{
		return default(bool);
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x1311730", Offset = "0x1311730", VA = "0x1311730")]
	public static bool isPreview()
	{
		return default(bool);
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x130CC00", Offset = "0x130CC00", VA = "0x130CC00")]
	public static void doShouldUpdateStill()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x13108D4", Offset = "0x13108D4", VA = "0x13108D4")]
	public static Vector2 getPositionAtAngle(int a, float padding)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x1311814", Offset = "0x1311814", VA = "0x1311814")]
	public void repaint()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x1311818", Offset = "0x1311818", VA = "0x1311818")]
	public void incrementKeepAlives()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x131142C", Offset = "0x131142C", VA = "0x131142C")]
	public void clearTexture()
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x131182C", Offset = "0x131182C", VA = "0x131182C")]
	public void clearTexture2D()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x130AEB4", Offset = "0x130AEB4", VA = "0x130AEB4")]
	private RenderTexture getRenderTexture()
	{
		return null;
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x13119B4", Offset = "0x13119B4", VA = "0x13119B4")]
	public static object GetMainGameView()
	{
		return null;
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x13118D4", Offset = "0x13118D4", VA = "0x13118D4")]
	public static Rect GetMainGameViewPosition()
	{
		return default(Rect);
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x1311A6C", Offset = "0x1311A6C", VA = "0x1311A6C")]
	public AMCameraFade()
	{
	}
}
[Token(Token = "0x20000C3")]
public class AMTween : MonoBehaviour
{
	[Token(Token = "0x20003C4")]
	public delegate float EasingFunction(float start, float end, float value, AnimationCurve curve);

	[Token(Token = "0x20003C5")]
	private delegate void ApplyTween();

	[Token(Token = "0x20003C6")]
	public enum EaseType
	{
		[Token(Token = "0x4001FB0")]
		easeInQuad,
		[Token(Token = "0x4001FB1")]
		easeOutQuad,
		[Token(Token = "0x4001FB2")]
		easeInOutQuad,
		[Token(Token = "0x4001FB3")]
		easeInCubic,
		[Token(Token = "0x4001FB4")]
		easeOutCubic,
		[Token(Token = "0x4001FB5")]
		easeInOutCubic,
		[Token(Token = "0x4001FB6")]
		easeInQuart,
		[Token(Token = "0x4001FB7")]
		easeOutQuart,
		[Token(Token = "0x4001FB8")]
		easeInOutQuart,
		[Token(Token = "0x4001FB9")]
		easeInQuint,
		[Token(Token = "0x4001FBA")]
		easeOutQuint,
		[Token(Token = "0x4001FBB")]
		easeInOutQuint,
		[Token(Token = "0x4001FBC")]
		easeInSine,
		[Token(Token = "0x4001FBD")]
		easeOutSine,
		[Token(Token = "0x4001FBE")]
		easeInOutSine,
		[Token(Token = "0x4001FBF")]
		easeInExpo,
		[Token(Token = "0x4001FC0")]
		easeOutExpo,
		[Token(Token = "0x4001FC1")]
		easeInOutExpo,
		[Token(Token = "0x4001FC2")]
		easeInCirc,
		[Token(Token = "0x4001FC3")]
		easeOutCirc,
		[Token(Token = "0x4001FC4")]
		easeInOutCirc,
		[Token(Token = "0x4001FC5")]
		linear,
		[Token(Token = "0x4001FC6")]
		spring,
		[Token(Token = "0x4001FC7")]
		easeInBounce,
		[Token(Token = "0x4001FC8")]
		easeOutBounce,
		[Token(Token = "0x4001FC9")]
		easeInOutBounce,
		[Token(Token = "0x4001FCA")]
		easeInBack,
		[Token(Token = "0x4001FCB")]
		easeOutBack,
		[Token(Token = "0x4001FCC")]
		easeInOutBack,
		[Token(Token = "0x4001FCD")]
		easeInElastic,
		[Token(Token = "0x4001FCE")]
		easeOutElastic,
		[Token(Token = "0x4001FCF")]
		easeInOutElastic,
		[Token(Token = "0x4001FD0")]
		punch
	}

	[Token(Token = "0x20003C7")]
	public enum LoopType
	{
		[Token(Token = "0x4001FD2")]
		none,
		[Token(Token = "0x4001FD3")]
		loop,
		[Token(Token = "0x4001FD4")]
		pingPong
	}

	[Token(Token = "0x20003C8")]
	public enum NamedValueColor
	{
		[Token(Token = "0x4001FD6")]
		_Color,
		[Token(Token = "0x4001FD7")]
		_SpecColor,
		[Token(Token = "0x4001FD8")]
		_Emission,
		[Token(Token = "0x4001FD9")]
		_ReflectColor
	}

	[Token(Token = "0x20003C9")]
	public enum Fade
	{
		[Token(Token = "0x4001FDB")]
		CrossFade,
		[Token(Token = "0x4001FDC")]
		VenetianBlinds,
		[Token(Token = "0x4001FDD")]
		Doors,
		[Token(Token = "0x4001FDE")]
		IrisBox,
		[Token(Token = "0x4001FDF")]
		IrisRound,
		[Token(Token = "0x4001FE0")]
		None,
		[Token(Token = "0x4001FE1")]
		IrisShape,
		[Token(Token = "0x4001FE2")]
		ShapeWipe,
		[Token(Token = "0x4001FE3")]
		LinearWipe,
		[Token(Token = "0x4001FE4")]
		RadialWipe,
		[Token(Token = "0x4001FE5")]
		WedgeWipe
	}

	[Token(Token = "0x20003CA")]
	public static class Defaults
	{
		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float time;

		[Token(Token = "0x4001FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float delay;

		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static NamedValueColor namedColorValue;

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static LoopType loopType;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static EaseType easeType;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float lookSpeed;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static bool isLocal;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static Space space;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static bool orientToPath;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static Color color;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static float updateTimePercentage;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static float updateTime;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static int cameraFadeDepth;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static float lookAhead;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static bool useRealTime;

		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Vector3 up;
	}

	[Token(Token = "0x20003CB")]
	private class CRSpline
	{
		[Token(Token = "0x4001FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] pts;

		[Token(Token = "0x6002328")]
		[Address(RVA = "0xC106D8", Offset = "0xC106D8", VA = "0xC106D8")]
		public CRSpline(params Vector3[] pts)
		{
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0xC10768", Offset = "0xC10768", VA = "0xC10768")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x20003CC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A4C", Offset = "0x7D8A4C")]
	private sealed class <TweenDelay>d__190 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AMTween <>4__this;

		[Token(Token = "0x17000362")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600232D")]
			[Address(RVA = "0xC10274", Offset = "0xC10274", VA = "0xC10274", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000363")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600232F")]
			[Address(RVA = "0xC102E0", Offset = "0xC102E0", VA = "0xC102E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600232A")]
		[Address(RVA = "0xC1016C", Offset = "0xC1016C", VA = "0xC1016C")]
		[DebuggerHidden]
		public <TweenDelay>d__190(int <>1__state)
		{
		}

		[Token(Token = "0x600232B")]
		[Address(RVA = "0xC10198", Offset = "0xC10198", VA = "0xC10198", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0xC1019C", Offset = "0xC1019C", VA = "0xC1019C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600232E")]
		[Address(RVA = "0xC1027C", Offset = "0xC1027C", VA = "0xC1027C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003CD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A5C", Offset = "0x7D8A5C")]
	private sealed class <TweenRestart>d__192 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AMTween <>4__this;

		[Token(Token = "0x17000364")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002333")]
			[Address(RVA = "0xC103F8", Offset = "0xC103F8", VA = "0xC103F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000365")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002335")]
			[Address(RVA = "0xC10464", Offset = "0xC10464", VA = "0xC10464", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002330")]
		[Address(RVA = "0xC102E8", Offset = "0xC102E8", VA = "0xC102E8")]
		[DebuggerHidden]
		public <TweenRestart>d__192(int <>1__state)
		{
		}

		[Token(Token = "0x6002331")]
		[Address(RVA = "0xC10314", Offset = "0xC10314", VA = "0xC10314", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002332")]
		[Address(RVA = "0xC10318", Offset = "0xC10318", VA = "0xC10318", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002334")]
		[Address(RVA = "0xC10400", Offset = "0xC10400", VA = "0xC10400", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003CE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A6C", Offset = "0x7D8A6C")]
	private sealed class <Start>d__300 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AMTween <>4__this;

		[Token(Token = "0x17000366")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002339")]
			[Address(RVA = "0xC100F8", Offset = "0xC100F8", VA = "0xC100F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000367")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600233B")]
			[Address(RVA = "0xC10164", Offset = "0xC10164", VA = "0xC10164", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002336")]
		[Address(RVA = "0xC1001C", Offset = "0xC1001C", VA = "0xC1001C")]
		[DebuggerHidden]
		public <Start>d__300(int <>1__state)
		{
		}

		[Token(Token = "0x6002337")]
		[Address(RVA = "0xC10048", Offset = "0xC10048", VA = "0xC10048", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002338")]
		[Address(RVA = "0xC1004C", Offset = "0xC1004C", VA = "0xC1004C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600233A")]
		[Address(RVA = "0xC10100", Offset = "0xC10100", VA = "0xC10100", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ArrayList tweens;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static ArrayList disabledTweens;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static GameObject cameraFade;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string id;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string type;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string method;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EaseType easeType;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve easeCurve;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float time;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float delay;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LoopType loopType;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool isRunning;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool isPaused;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string _name;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float runningTime;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float percentage;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float delayStarted;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool kinematic;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool isLocal;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	private bool loop;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	private bool reverse;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool wasPaused;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool physics;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Hashtable tweenArguments;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Space space;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private EasingFunction ease;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ApplyTween apply;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private AudioSource audioSource;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3[] vector3s;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector2[] vector2s;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Color[,] colors;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float[] floats;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Rect[] rects;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float[] startMorphs;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float[] endMorphs;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float[] currentMorphs;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private CRSpline path;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Vector3 preUpdate;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private Vector3 postUpdate;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private NamedValueColor namedcolorvalue;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float lastRealTime;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool useRealTime;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string[] TransitionNamesDict;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string[] TransitionNames;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static int[] TransitionOrder;

	[Token(Token = "0x17000069")]
	private static AMCameraFade cf
	{
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xB640A0", Offset = "0xB640A0", VA = "0xB640A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xB64104", Offset = "0xB64104", VA = "0xB64104")]
	public static bool isTransitionReversed(int transition, float[] r)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xB64160", Offset = "0xB64160", VA = "0xB64160")]
	public static void Init(GameObject target)
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xB643E4", Offset = "0xB643E4", VA = "0xB643E4")]
	public static void CameraFade(Fade type, bool useRenderTexture, float[] parameters, Hashtable args)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xB64470", Offset = "0xB64470", VA = "0xB64470")]
	public static void CameraFade(int type, bool useRenderTexture, float[] parameters, Hashtable args)
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xB6584C", Offset = "0xB6584C", VA = "0xB6584C")]
	public static void CameraFadeFrom(float amount, float time)
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xB65A90", Offset = "0xB65A90", VA = "0xB65A90")]
	public static void CameraFadeFrom(Hashtable args)
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xB66834", Offset = "0xB66834", VA = "0xB66834")]
	public static void CameraFadeTo(float amount, float time)
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xB66A78", Offset = "0xB66A78", VA = "0xB66A78")]
	public static void CameraFadeTo(Hashtable args)
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xB670B8", Offset = "0xB670B8", VA = "0xB670B8")]
	public static void ValueTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xB67598", Offset = "0xB67598", VA = "0xB67598")]
	public static void PropertyTo(Component component, Hashtable args)
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xB67EFC", Offset = "0xB67EFC", VA = "0xB67EFC")]
	public static void InvokeMethod(Component component, Hashtable args)
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xB68050", Offset = "0xB68050", VA = "0xB68050")]
	public static void FadeFrom(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xB68200", Offset = "0xB68200", VA = "0xB68200")]
	public static void FadeFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xB68274", Offset = "0xB68274", VA = "0xB68274")]
	public static void FadeTo(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xB68424", Offset = "0xB68424", VA = "0xB68424")]
	public static void FadeTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xB68498", Offset = "0xB68498", VA = "0xB68498")]
	public static void ColorFrom(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xB65BA0", Offset = "0xB65BA0", VA = "0xB65BA0")]
	public static void ColorFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xB68674", Offset = "0xB68674", VA = "0xB68674")]
	public static void ColorTo(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xB66B88", Offset = "0xB66B88", VA = "0xB66B88")]
	public static void ColorTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xB68850", Offset = "0xB68850", VA = "0xB68850")]
	public static void AudioFrom(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xB68A7C", Offset = "0xB68A7C", VA = "0xB68A7C")]
	public static void AudioFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xB68ECC", Offset = "0xB68ECC", VA = "0xB68ECC")]
	public static void AudioTo(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xB690F8", Offset = "0xB690F8", VA = "0xB690F8")]
	public static void AudioTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xB69258", Offset = "0xB69258", VA = "0xB69258")]
	public static void Stab(GameObject target, AudioClip audioclip, float delay)
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xB693EC", Offset = "0xB693EC", VA = "0xB693EC")]
	public static void Stab(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xB694A0", Offset = "0xB694A0", VA = "0xB694A0")]
	public static void LookFrom(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xB6966C", Offset = "0xB6966C", VA = "0xB6966C")]
	public static void LookFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xB69D00", Offset = "0xB69D00", VA = "0xB69D00")]
	public static void LookToFollow(GameObject target, Transform looktarget, float time)
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xB69E94", Offset = "0xB69E94", VA = "0xB69E94")]
	public static void LookToFollow(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xB6A210", Offset = "0xB6A210", VA = "0xB6A210")]
	public static void LookFollow(GameObject target, Transform looktarget, float time)
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xB6A3A4", Offset = "0xB6A3A4", VA = "0xB6A3A4")]
	public static void LookFollow(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xB6A6C8", Offset = "0xB6A6C8", VA = "0xB6A6C8")]
	public static void LookTo(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xB6A894", Offset = "0xB6A894", VA = "0xB6A894")]
	public static void LookTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xB6ABB8", Offset = "0xB6ABB8", VA = "0xB6ABB8")]
	public static void SendMessage(GameObject target, string methodName, object parameter)
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xB6AD2C", Offset = "0xB6AD2C", VA = "0xB6AD2C")]
	public static void SendMessage(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xB6AE88", Offset = "0xB6AE88", VA = "0xB6AE88")]
	public static void PlayAnimation(GameObject target, string animation, WrapMode wrapmode, bool crossfade)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xB6B0A4", Offset = "0xB6B0A4", VA = "0xB6B0A4")]
	public static void PlayAnimation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xB6B17C", Offset = "0xB6B17C", VA = "0xB6B17C")]
	public static void PlayAudio(AudioSource audioSource, AudioClip audioClip, bool loop)
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xB6B370", Offset = "0xB6B370", VA = "0xB6B370")]
	public static void PlayAudio(AudioSource audioSource, Hashtable args)
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xB6B544", Offset = "0xB6B544", VA = "0xB6B544")]
	public static void MoveTo(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xB60EB8", Offset = "0xB60EB8", VA = "0xB60EB8")]
	public static void MoveTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xB6B710", Offset = "0xB6B710", VA = "0xB6B710")]
	public static void MoveFrom(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xB6B8DC", Offset = "0xB6B8DC", VA = "0xB6B8DC")]
	public static void MoveFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xB6C224", Offset = "0xB6C224", VA = "0xB6C224")]
	public static void MoveAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xB6C3F0", Offset = "0xB6C3F0", VA = "0xB6C3F0")]
	public static void MoveAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xB64218", Offset = "0xB64218", VA = "0xB64218")]
	public static void MoveBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xB6C4D0", Offset = "0xB6C4D0", VA = "0xB6C4D0")]
	public static void MoveBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xB6C5B0", Offset = "0xB6C5B0", VA = "0xB6C5B0")]
	public static void ScaleTo(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xB6C77C", Offset = "0xB6C77C", VA = "0xB6C77C")]
	public static void ScaleTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xB6CB18", Offset = "0xB6CB18", VA = "0xB6CB18")]
	public static void ScaleFrom(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xB6CCE4", Offset = "0xB6CCE4", VA = "0xB6CCE4")]
	public static void ScaleFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xB6D1BC", Offset = "0xB6D1BC", VA = "0xB6D1BC")]
	public static void ScaleAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xB6D388", Offset = "0xB6D388", VA = "0xB6D388")]
	public static void ScaleAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xB6D468", Offset = "0xB6D468", VA = "0xB6D468")]
	public static void ScaleBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xB6D634", Offset = "0xB6D634", VA = "0xB6D634")]
	public static void ScaleBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xB6D714", Offset = "0xB6D714", VA = "0xB6D714")]
	public static void RotateTo(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xB6D8E0", Offset = "0xB6D8E0", VA = "0xB6D8E0")]
	public static void RotateTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xB6DC84", Offset = "0xB6DC84", VA = "0xB6DC84")]
	public static void RotateFrom(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xB6DE50", Offset = "0xB6DE50", VA = "0xB6DE50")]
	public static void RotateFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xB6E3EC", Offset = "0xB6E3EC", VA = "0xB6E3EC")]
	public static void RotateAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xB6E5B8", Offset = "0xB6E5B8", VA = "0xB6E5B8")]
	public static void RotateAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xB6E698", Offset = "0xB6E698", VA = "0xB6E698")]
	public static void RotateBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xB6E864", Offset = "0xB6E864", VA = "0xB6E864")]
	public static void RotateBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xB6E944", Offset = "0xB6E944", VA = "0xB6E944")]
	public static void ShakePosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xB6EB10", Offset = "0xB6EB10", VA = "0xB6EB10")]
	public static void ShakePosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xB6EBF0", Offset = "0xB6EBF0", VA = "0xB6EBF0")]
	public static void ShakeScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xB6EDBC", Offset = "0xB6EDBC", VA = "0xB6EDBC")]
	public static void ShakeScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xB6EE9C", Offset = "0xB6EE9C", VA = "0xB6EE9C")]
	public static void ShakeRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xB6F068", Offset = "0xB6F068", VA = "0xB6F068")]
	public static void ShakeRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xB6F148", Offset = "0xB6F148", VA = "0xB6F148")]
	public static void PunchPosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xB6F314", Offset = "0xB6F314", VA = "0xB6F314")]
	public static void PunchPosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xB6F438", Offset = "0xB6F438", VA = "0xB6F438")]
	public static void PunchRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xB6F604", Offset = "0xB6F604", VA = "0xB6F604")]
	public static void PunchRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xB6F728", Offset = "0xB6F728", VA = "0xB6F728")]
	public static void PunchScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xB6F8F4", Offset = "0xB6F8F4", VA = "0xB6F8F4")]
	public static void PunchScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xB6FA18", Offset = "0xB6FA18", VA = "0xB6FA18")]
	private void GenerateTargets()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xB77434", Offset = "0xB77434", VA = "0xB77434")]
	private void GenerateCameraFadeNoneTargets()
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xB77634", Offset = "0xB77634", VA = "0xB77634")]
	private void GenerateCameraFadeTargets()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xB772B8", Offset = "0xB772B8", VA = "0xB772B8")]
	private void GeneratePlayAnimationTargets()
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xB771B4", Offset = "0xB771B4", VA = "0xB771B4")]
	private void GeneratePlayAudioTargets()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xB70F90", Offset = "0xB70F90", VA = "0xB70F90")]
	private void GenerateMorphTargets()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xB70E4C", Offset = "0xB70E4C", VA = "0xB70E4C")]
	private void GenerateRectTargets()
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xB70CC8", Offset = "0xB70CC8", VA = "0xB70CC8")]
	private void GenerateColorTargets()
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xB70A60", Offset = "0xB70A60", VA = "0xB70A60")]
	private void GenerateVector3Targets()
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xB707C4", Offset = "0xB707C4", VA = "0xB707C4")]
	private void GenerateVector2Targets()
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xB705C4", Offset = "0xB705C4", VA = "0xB705C4")]
	private void GenerateFloatTargets()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xB711D0", Offset = "0xB711D0", VA = "0xB711D0")]
	private void GenerateColorToTargets()
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xB71D00", Offset = "0xB71D00", VA = "0xB71D00")]
	private void GenerateAudioToTargets()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xB76E1C", Offset = "0xB76E1C", VA = "0xB76E1C")]
	private void GenerateStabTargets()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xB76CE4", Offset = "0xB76CE4", VA = "0xB76CE4")]
	private void GenerateLookToFollowTargets()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xB76428", Offset = "0xB76428", VA = "0xB76428")]
	private void GenerateLookToTargets()
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xB72050", Offset = "0xB72050", VA = "0xB72050")]
	private void GenerateMoveToPathTargets()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xB727A8", Offset = "0xB727A8", VA = "0xB727A8")]
	private void GenerateMoveToTargets()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xB72E00", Offset = "0xB72E00", VA = "0xB72E00")]
	private void GenerateMoveByTargets()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xB73430", Offset = "0xB73430", VA = "0xB73430")]
	private void GenerateScaleToTargets()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xB73990", Offset = "0xB73990", VA = "0xB73990")]
	private void GenerateScaleByTargets()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xB73DF8", Offset = "0xB73DF8", VA = "0xB73DF8")]
	private void GenerateScaleAddTargets()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xB74254", Offset = "0xB74254", VA = "0xB74254")]
	private void GenerateRotateToTargets()
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xB748B8", Offset = "0xB748B8", VA = "0xB748B8")]
	private void GenerateRotateAddTargets()
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xB74D1C", Offset = "0xB74D1C", VA = "0xB74D1C")]
	private void GenerateRotateByTargets()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xB751EC", Offset = "0xB751EC", VA = "0xB751EC")]
	private void GenerateShakePositionTargets()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xB754F8", Offset = "0xB754F8", VA = "0xB754F8")]
	private void GenerateShakeScaleTargets()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xB757D0", Offset = "0xB757D0", VA = "0xB757D0")]
	private void GenerateShakeRotationTargets()
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xB75AA8", Offset = "0xB75AA8", VA = "0xB75AA8")]
	private void GeneratePunchPositionTargets()
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xB75DF8", Offset = "0xB75DF8", VA = "0xB75DF8")]
	private void GeneratePunchRotationTargets()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xB76114", Offset = "0xB76114", VA = "0xB76114")]
	private void GeneratePunchScaleTargets()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xB784C8", Offset = "0xB784C8", VA = "0xB784C8")]
	private void ApplyPropertyMorphTargets()
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xB78804", Offset = "0xB78804", VA = "0xB78804")]
	private void ApplyRectTargets()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xB78B1C", Offset = "0xB78B1C", VA = "0xB78B1C")]
	private void ApplyPropertyRectTargets()
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xB79050", Offset = "0xB79050", VA = "0xB79050")]
	private void ApplyColorTargets()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xB7929C", Offset = "0xB7929C", VA = "0xB7929C")]
	private void ApplyPropertyColorTargets()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xB7970C", Offset = "0xB7970C", VA = "0xB7970C")]
	private void ApplyVector3Targets()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xB79918", Offset = "0xB79918", VA = "0xB79918")]
	private void ApplyPropertyVector3Targets()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xB79D44", Offset = "0xB79D44", VA = "0xB79D44")]
	private void ApplyVector2Targets()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xB79EF8", Offset = "0xB79EF8", VA = "0xB79EF8")]
	private void ApplyPropertyVector2Targets()
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xB7A2BC", Offset = "0xB7A2BC", VA = "0xB7A2BC")]
	private void ApplyFloatTargets()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xB7A424", Offset = "0xB7A424", VA = "0xB7A424")]
	private void ApplyPropertyFloatTargets()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xB7A99C", Offset = "0xB7A99C", VA = "0xB7A99C")]
	private void ApplyColorToTargets()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xB7B27C", Offset = "0xB7B27C", VA = "0xB7B27C")]
	private void ApplyAudioToTargets()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xB7B3FC", Offset = "0xB7B3FC", VA = "0xB7B3FC")]
	private void ApplyStabTargets()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xB7B400", Offset = "0xB7B400", VA = "0xB7B400")]
	private void ApplyMoveToPathTargets()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xB7B7BC", Offset = "0xB7B7BC", VA = "0xB7B7BC")]
	private void ApplyMoveToTargets()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xB7BA20", Offset = "0xB7BA20", VA = "0xB7BA20")]
	private void ApplyMoveByTargets()
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xB7BDCC", Offset = "0xB7BDCC", VA = "0xB7BDCC")]
	private void ApplyScaleToTargets()
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xB7BF5C", Offset = "0xB7BF5C", VA = "0xB7BF5C")]
	private void ApplyLookToTargets()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xB7C158", Offset = "0xB7C158", VA = "0xB7C158")]
	private void ApplyLookToFollowTargets()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xB7C62C", Offset = "0xB7C62C", VA = "0xB7C62C")]
	private void ApplyLookFollowTargets()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xB7C700", Offset = "0xB7C700", VA = "0xB7C700")]
	private void ApplyRotateToTargets()
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xB7CA90", Offset = "0xB7CA90", VA = "0xB7CA90")]
	private void ApplyRotateAddTargets()
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xB7CD78", Offset = "0xB7CD78", VA = "0xB7CD78")]
	private void ApplyShakePositionTargets()
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xB7D208", Offset = "0xB7D208", VA = "0xB7D208")]
	private void ApplyShakeScaleTargets()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xB7D444", Offset = "0xB7D444", VA = "0xB7D444")]
	private void ApplyShakeRotationTargets()
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xB7D708", Offset = "0xB7D708", VA = "0xB7D708")]
	private void ApplyPunchPositionTargets()
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xB7DD00", Offset = "0xB7DD00", VA = "0xB7DD00")]
	private void ApplyPunchRotationTargets()
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xB7E174", Offset = "0xB7E174", VA = "0xB7E174")]
	private void ApplyPunchScaleTargets()
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xB7E4CC", Offset = "0xB7E4CC", VA = "0xB7E4CC")]
	private void ApplyCameraFadeValueTargets()
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xB7E578", Offset = "0xB7E578", VA = "0xB7E578")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0C64", Offset = "0x7E0C64")]
	private IEnumerator TweenDelay()
	{
		return null;
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xB7E5EC", Offset = "0xB7E5EC", VA = "0xB7E5EC")]
	private void TweenStart()
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xB80224", Offset = "0xB80224", VA = "0xB80224")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0CC8", Offset = "0x7E0CC8")]
	private IEnumerator TweenRestart()
	{
		return null;
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xB80298", Offset = "0xB80298", VA = "0xB80298")]
	private void TweenUpdate()
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xB80378", Offset = "0xB80378", VA = "0xB80378")]
	private void TweenComplete()
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xB804A4", Offset = "0xB804A4", VA = "0xB804A4")]
	private void TweenLoop()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xB80548", Offset = "0xB80548", VA = "0xB80548")]
	private void resumeExtras()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xB808B8", Offset = "0xB808B8", VA = "0xB808B8")]
	private void pauseExtras()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xB7F418", Offset = "0xB7F418", VA = "0xB7F418")]
	private void playAnimation()
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xB7F89C", Offset = "0xB7F89C", VA = "0xB7F89C")]
	private void playAudio()
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xB7EA68", Offset = "0xB7EA68", VA = "0xB7EA68")]
	private void sendMessage()
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xB7ECA8", Offset = "0xB7ECA8", VA = "0xB7ECA8")]
	private void invokeMethod()
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xB80A78", Offset = "0xB80A78", VA = "0xB80A78")]
	public static Rect RectUpdate(Rect currentValue, Rect targetValue, float speed)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xB80C40", Offset = "0xB80C40", VA = "0xB80C40")]
	public static Vector3 Vector3Update(Vector3 currentValue, Vector3 targetValue, float speed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xB80D4C", Offset = "0xB80D4C", VA = "0xB80D4C")]
	public static Vector2 Vector2Update(Vector2 currentValue, Vector2 targetValue, float speed)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xB80C00", Offset = "0xB80C00", VA = "0xB80C00")]
	public static float FloatUpdate(float currentValue, float targetValue, float speed)
	{
		return default(float);
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xB80E30", Offset = "0xB80E30", VA = "0xB80E30")]
	public static void FadeUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xB81B78", Offset = "0xB81B78", VA = "0xB81B78")]
	public static void FadeUpdate(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xB80EF4", Offset = "0xB80EF4", VA = "0xB80EF4")]
	public static void ColorUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xB81D28", Offset = "0xB81D28", VA = "0xB81D28")]
	public static void ColorUpdate(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xB81F04", Offset = "0xB81F04", VA = "0xB81F04")]
	public static void AudioUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xB823E0", Offset = "0xB823E0", VA = "0xB823E0")]
	public static void AudioUpdate(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xB8260C", Offset = "0xB8260C", VA = "0xB8260C")]
	public static void RotateUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xB82C7C", Offset = "0xB82C7C", VA = "0xB82C7C")]
	public static void RotateUpdate(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xB82E48", Offset = "0xB82E48", VA = "0xB82E48")]
	public static void ScaleUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xB83438", Offset = "0xB83438", VA = "0xB83438")]
	public static void ScaleUpdate(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xB83604", Offset = "0xB83604", VA = "0xB83604")]
	public static void MoveUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xB847E0", Offset = "0xB847E0", VA = "0xB847E0")]
	public static void MoveUpdate(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xB83EAC", Offset = "0xB83EAC", VA = "0xB83EAC")]
	public static void LookUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xB849AC", Offset = "0xB849AC", VA = "0xB849AC")]
	public static void LookUpdate(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xB84B78", Offset = "0xB84B78", VA = "0xB84B78")]
	public static void SetMorph(Component component, MethodInfo setPercent, float[] morph)
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xB84CF0", Offset = "0xB84CF0", VA = "0xB84CF0")]
	public static Texture2D LoadTexture2D(string name)
	{
		return null;
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0xB84D5C", Offset = "0xB84D5C", VA = "0xB84D5C")]
	public Vector3 getPositionAfter(float time)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xB84E08", Offset = "0xB84E08", VA = "0xB84E08")]
	public Vector3 getPositionAtPercentage(float percentage)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xB78034", Offset = "0xB78034", VA = "0xB78034")]
	public static void ShowColor(Color color)
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xB84EC8", Offset = "0xB84EC8", VA = "0xB84EC8")]
	public static void SetTopCamera(Camera top, Camera bottom)
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xB77F2C", Offset = "0xB77F2C", VA = "0xB77F2C")]
	public static void SetTopCamera(Camera top, Camera[] all)
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xB84FA8", Offset = "0xB84FA8", VA = "0xB84FA8")]
	private void CameraFadeCleanup()
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xB7817C", Offset = "0xB7817C", VA = "0xB7817C")]
	public static Texture2D GetScreenTexture()
	{
		return null;
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xB854A0", Offset = "0xB854A0", VA = "0xB854A0")]
	public static AnimationCurve GenerateCurve(float[] keyFrameInfo)
	{
		return null;
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xB85618", Offset = "0xB85618", VA = "0xB85618")]
	public static float PathLength(Transform[] path)
	{
		return default(float);
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xB7834C", Offset = "0xB7834C", VA = "0xB7834C")]
	public static float PathLength(Vector3[] path)
	{
		return default(float);
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xB85F20", Offset = "0xB85F20", VA = "0xB85F20")]
	public static Texture2D CameraTexture(Color color)
	{
		return null;
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xB86078", Offset = "0xB86078", VA = "0xB86078")]
	public static void PutOnPath(GameObject target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xB62510", Offset = "0xB62510", VA = "0xB62510")]
	public static void PutOnPath(Transform target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0xB8612C", Offset = "0xB8612C", VA = "0xB8612C")]
	public static Vector3 PositionOnPath(Vector3[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xB861A4", Offset = "0xB861A4", VA = "0xB861A4")]
	public static void PutOnPath(GameObject target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xB862F0", Offset = "0xB862F0", VA = "0xB862F0")]
	public static void PutOnPath(Transform target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xB86424", Offset = "0xB86424", VA = "0xB86424")]
	public static Vector3 PointOnPath(Transform[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xB8653C", Offset = "0xB8653C", VA = "0xB8653C")]
	public static void DrawLine(Vector3[] line)
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xB867B8", Offset = "0xB867B8", VA = "0xB867B8")]
	public static void DrawLine(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0xB86880", Offset = "0xB86880", VA = "0xB86880")]
	public static void DrawLine(Transform[] line)
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xB869FC", Offset = "0xB869FC", VA = "0xB869FC")]
	public static void DrawLine(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xB86B58", Offset = "0xB86B58", VA = "0xB86B58")]
	public static void DrawLineGizmos(Vector3[] line)
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xB86C40", Offset = "0xB86C40", VA = "0xB86C40")]
	public static void DrawLineGizmos(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xB86D08", Offset = "0xB86D08", VA = "0xB86D08")]
	public static void DrawLineGizmos(Transform[] line)
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xB86E84", Offset = "0xB86E84", VA = "0xB86E84")]
	public static void DrawLineGizmos(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xB86FE0", Offset = "0xB86FE0", VA = "0xB86FE0")]
	public static void DrawLineHandles(Vector3[] line)
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xB870C8", Offset = "0xB870C8", VA = "0xB870C8")]
	public static void DrawLineHandles(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xB87190", Offset = "0xB87190", VA = "0xB87190")]
	public static void DrawLineHandles(Transform[] line)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xB8730C", Offset = "0xB8730C", VA = "0xB8730C")]
	public static void DrawLineHandles(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xB62E94", Offset = "0xB62E94", VA = "0xB62E94")]
	public static Vector3 PointOnPath(Vector3[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xB87468", Offset = "0xB87468", VA = "0xB87468")]
	public static void DrawPath(Vector3[] path)
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xB631B8", Offset = "0xB631B8", VA = "0xB631B8")]
	public static void DrawPath(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xB87748", Offset = "0xB87748", VA = "0xB87748")]
	public static void DrawPath(Transform[] path)
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xB878C4", Offset = "0xB878C4", VA = "0xB878C4")]
	public static void DrawPath(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xB87A20", Offset = "0xB87A20", VA = "0xB87A20")]
	public static void DrawPathGizmos(Vector3[] path)
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xB87B08", Offset = "0xB87B08", VA = "0xB87B08")]
	public static void DrawPathGizmos(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xB87BD0", Offset = "0xB87BD0", VA = "0xB87BD0")]
	public static void DrawPathGizmos(Transform[] path)
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xB87D4C", Offset = "0xB87D4C", VA = "0xB87D4C")]
	public static void DrawPathGizmos(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xB87EA8", Offset = "0xB87EA8", VA = "0xB87EA8")]
	public static void DrawPathHandles(Vector3[] path)
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xB87F90", Offset = "0xB87F90", VA = "0xB87F90")]
	public static void DrawPathHandles(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xB88058", Offset = "0xB88058", VA = "0xB88058")]
	public static void DrawPathHandles(Transform[] path)
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xB881D4", Offset = "0xB881D4", VA = "0xB881D4")]
	public static void DrawPathHandles(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xB88330", Offset = "0xB88330", VA = "0xB88330")]
	public static void CameraFadeDepth(int depth)
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xB884AC", Offset = "0xB884AC", VA = "0xB884AC")]
	public static void CameraFadeDestroy()
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xB885A8", Offset = "0xB885A8", VA = "0xB885A8")]
	public static void CameraFadeSwap(Texture2D texture)
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xB886A8", Offset = "0xB886A8", VA = "0xB886A8")]
	public static GameObject CameraFadeAdd(Texture2D texture, int depth)
	{
		return null;
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xB888BC", Offset = "0xB888BC", VA = "0xB888BC")]
	public static GameObject CameraFadeAdd(Texture2D texture)
	{
		return null;
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xB88AFC", Offset = "0xB88AFC", VA = "0xB88AFC")]
	public static GameObject CameraFadeAdd()
	{
		return null;
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xB88D4C", Offset = "0xB88D4C", VA = "0xB88D4C")]
	public static void Resume(GameObject target)
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xB88E8C", Offset = "0xB88E8C", VA = "0xB88E8C")]
	public static void Resume(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xB89180", Offset = "0xB89180", VA = "0xB89180")]
	public static void Resume(GameObject target, string type)
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xB89318", Offset = "0xB89318", VA = "0xB89318")]
	public static void Resume(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xB89728", Offset = "0xB89728", VA = "0xB89728")]
	public static void Resume()
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xB898A4", Offset = "0xB898A4", VA = "0xB898A4")]
	public static void Resume(string type)
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xB89B34", Offset = "0xB89B34", VA = "0xB89B34")]
	public static void Pause(GameObject target)
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xB89CC8", Offset = "0xB89CC8", VA = "0xB89CC8")]
	public static void Pause(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xB89FBC", Offset = "0xB89FBC", VA = "0xB89FBC")]
	public static void Pause(GameObject target, string type)
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xB8A1A8", Offset = "0xB8A1A8", VA = "0xB8A1A8")]
	public static void Pause(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xB8A60C", Offset = "0xB8A60C", VA = "0xB8A60C")]
	public static void Pause(string id, GameObject target)
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xB8A7C0", Offset = "0xB8A7C0", VA = "0xB8A7C0")]
	public static void Pause()
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xB8A980", Offset = "0xB8A980", VA = "0xB8A980")]
	public static void Pause(string type)
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xB8AC10", Offset = "0xB8AC10", VA = "0xB8AC10")]
	public static int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xB8AC8C", Offset = "0xB8AC8C", VA = "0xB8AC8C")]
	public static int Count(string type)
	{
		return default(int);
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xB8AEB4", Offset = "0xB8AEB4", VA = "0xB8AEB4")]
	public static int Count(GameObject target)
	{
		return default(int);
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xB8AF50", Offset = "0xB8AF50", VA = "0xB8AF50")]
	public static int Count(GameObject target, string type)
	{
		return default(int);
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xB8B0EC", Offset = "0xB8B0EC", VA = "0xB8B0EC")]
	public static void StartDisabled()
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xB8B3DC", Offset = "0xB8B3DC", VA = "0xB8B3DC")]
	public static void Stop()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xB8B70C", Offset = "0xB8B70C", VA = "0xB8B70C")]
	public static void Stop(string type)
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xB8BB2C", Offset = "0xB8BB2C", VA = "0xB8BB2C")]
	public static void StopByName(string name)
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xB8B58C", Offset = "0xB8B58C", VA = "0xB8B58C")]
	public static void Stop(GameObject target)
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xB8BF0C", Offset = "0xB8BF0C", VA = "0xB8BF0C")]
	public static void StopById(string tweenId)
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xB8C274", Offset = "0xB8C274", VA = "0xB8C274")]
	public static void Stop(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xB8B99C", Offset = "0xB8B99C", VA = "0xB8B99C")]
	public static void Stop(GameObject target, string type)
	{
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xB8BDBC", Offset = "0xB8BDBC", VA = "0xB8BDBC")]
	public static void StopByName(GameObject target, string name)
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xB8C568", Offset = "0xB8C568", VA = "0xB8C568")]
	public static void Stop(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xB8C970", Offset = "0xB8C970", VA = "0xB8C970")]
	public static void StopByName(GameObject target, string name, bool includechildren)
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xB60D80", Offset = "0xB60D80", VA = "0xB60D80")]
	public static Hashtable Hash(params object[] args)
	{
		return null;
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xB8CD38", Offset = "0xB8CD38", VA = "0xB8CD38")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xB8E204", Offset = "0xB8E204", VA = "0xB8E204")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0D2C", Offset = "0x7E0D2C")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xB8E278", Offset = "0xB8E278", VA = "0xB8E278")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xB8E2B8", Offset = "0xB8E2B8", VA = "0xB8E2B8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xB8E2F8", Offset = "0xB8E2F8", VA = "0xB8E2F8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xB8E40C", Offset = "0xB8E40C", VA = "0xB8E40C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xB8E488", Offset = "0xB8E488", VA = "0xB8E488")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xB86624", Offset = "0xB86624", VA = "0xB86624")]
	private static void DrawLineHelper(Vector3[] line, Color color, string method)
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xB87550", Offset = "0xB87550", VA = "0xB87550")]
	private static void DrawPathHelper(Vector3[] path, Color color, string method)
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xB85820", Offset = "0xB85820", VA = "0xB85820")]
	private static Vector3[] PathControlPointGenerator(Vector3[] path)
	{
		return null;
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xB85AEC", Offset = "0xB85AEC", VA = "0xB85AEC")]
	private static Vector3 Interp(Vector3[] pts, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xB656D0", Offset = "0xB656D0", VA = "0xB656D0")]
	private static void Launch(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xB67D44", Offset = "0xB67D44", VA = "0xB67D44")]
	private static void Launch(Component component, Hashtable args)
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xB64D24", Offset = "0xB64D24", VA = "0xB64D24")]
	private static Hashtable CleanArgs(Hashtable args)
	{
		return null;
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xB8E48C", Offset = "0xB8E48C", VA = "0xB8E48C")]
	public static string GenerateID()
	{
		return null;
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xB8CD64", Offset = "0xB8CD64", VA = "0xB8CD64")]
	private void RetrieveArgs()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xB8E5B8", Offset = "0xB8E5B8", VA = "0xB8E5B8")]
	private void GetEasingFunction()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xB6211C", Offset = "0xB6211C", VA = "0xB6211C")]
	public static EasingFunction GetEasingFunction(EaseType eType)
	{
		return null;
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xB80300", Offset = "0xB80300", VA = "0xB80300")]
	private void UpdatePercentage()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xB84D80", Offset = "0xB84D80", VA = "0xB84D80")]
	private float getIncPercentageBy(float _time)
	{
		return default(float);
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xB7E788", Offset = "0xB7E788", VA = "0xB7E788")]
	private void CallBack(string callbackType)
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xB8E9D0", Offset = "0xB8E9D0", VA = "0xB8E9D0")]
	public static void Dispose(AMTween tweenToKill)
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xB8C0BC", Offset = "0xB8C0BC", VA = "0xB8C0BC")]
	public static void Dispose(int tweenIndex)
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xB78118", Offset = "0xB78118", VA = "0xB78118")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xB7FC64", Offset = "0xB7FC64", VA = "0xB7FC64")]
	private void ConflictCheck()
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xB80220", Offset = "0xB80220", VA = "0xB80220")]
	private void EnableKinematic()
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xB80544", Offset = "0xB80544", VA = "0xB80544")]
	private void DisableKinematic()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xB8E434", Offset = "0xB8E434", VA = "0xB8E434")]
	private void ResumeDelay()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xB8EBE8", Offset = "0xB8EBE8", VA = "0xB8EBE8")]
	public static float customEase(float start, float end, float value, AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xB8EC24", Offset = "0xB8EC24", VA = "0xB8EC24")]
	public static float linear(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xB78280", Offset = "0xB78280", VA = "0xB78280")]
	public static float clerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xB8ECAC", Offset = "0xB8ECAC", VA = "0xB8ECAC")]
	public static float spring(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xB8EDB0", Offset = "0xB8EDB0", VA = "0xB8EDB0")]
	public static float easeInQuad(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xB8EDC4", Offset = "0xB8EDC4", VA = "0xB8EDC4")]
	public static float easeOutQuad(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0xB8EDE0", Offset = "0xB8EDE0", VA = "0xB8EDE0")]
	public static float easeInOutQuad(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xB8EE34", Offset = "0xB8EE34", VA = "0xB8EE34")]
	public static float easeInCubic(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xB8EE4C", Offset = "0xB8EE4C", VA = "0xB8EE4C")]
	public static float easeOutCubic(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xB8EE74", Offset = "0xB8EE74", VA = "0xB8EE74")]
	public static float easeInOutCubic(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xB8EECC", Offset = "0xB8EECC", VA = "0xB8EECC")]
	public static float easeInQuart(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xB8EEE8", Offset = "0xB8EEE8", VA = "0xB8EEE8")]
	public static float easeOutQuart(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xB8EF10", Offset = "0xB8EF10", VA = "0xB8EF10")]
	public static float easeInOutQuart(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xB8EF6C", Offset = "0xB8EF6C", VA = "0xB8EF6C")]
	public static float easeInQuint(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xB8EF8C", Offset = "0xB8EF8C", VA = "0xB8EF8C")]
	public static float easeOutQuint(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xB8EFBC", Offset = "0xB8EFBC", VA = "0xB8EFBC")]
	public static float easeInOutQuint(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xB8F024", Offset = "0xB8F024", VA = "0xB8F024")]
	public static float easeInSine(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xB8F0BC", Offset = "0xB8F0BC", VA = "0xB8F0BC")]
	public static float easeOutSine(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xB8F150", Offset = "0xB8F150", VA = "0xB8F150")]
	public static float easeInOutSine(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xB8F1F4", Offset = "0xB8F1F4", VA = "0xB8F1F4")]
	public static float easeInExpo(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xB8F28C", Offset = "0xB8F28C", VA = "0xB8F28C")]
	public static float easeInExpoReveresed(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xB8F314", Offset = "0xB8F314", VA = "0xB8F314")]
	public static float easeOutExpo(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xB8F3AC", Offset = "0xB8F3AC", VA = "0xB8F3AC")]
	public static float easeInOutExpo(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xB8F49C", Offset = "0xB8F49C", VA = "0xB8F49C")]
	public static float easeInCirc(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xB8F548", Offset = "0xB8F548", VA = "0xB8F548")]
	public static float easeOutCirc(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xB8F5F4", Offset = "0xB8F5F4", VA = "0xB8F5F4")]
	public static float easeInOutCirc(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xB8F6EC", Offset = "0xB8F6EC", VA = "0xB8F6EC")]
	public static float easeInBounce(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xB8F784", Offset = "0xB8F784", VA = "0xB8F784")]
	public static float easeOutBounce(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xB8F854", Offset = "0xB8F854", VA = "0xB8F854")]
	public static float easeInOutBounce(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0xB8F92C", Offset = "0xB8F92C", VA = "0xB8F92C")]
	public static float easeInBack(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0xB8F95C", Offset = "0xB8F95C", VA = "0xB8F95C")]
	public static float easeOutBack(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xB8F99C", Offset = "0xB8F99C", VA = "0xB8F99C")]
	public static float easeInOutBack(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xB7DC40", Offset = "0xB7DC40", VA = "0xB7DC40")]
	public static float punch(float amplitude, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xB8FA20", Offset = "0xB8FA20", VA = "0xB8FA20")]
	public static float easeInElastic(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xB8FB08", Offset = "0xB8FB08", VA = "0xB8FB08")]
	public static float easeOutElastic(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xB8FBEC", Offset = "0xB8FBEC", VA = "0xB8FBEC")]
	public static float easeInOutElastic(float start, float end, float value, [Optional] AnimationCurve curve)
	{
		return default(float);
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xB8FD50", Offset = "0xB8FD50", VA = "0xB8FD50")]
	public AMTween()
	{
	}
}
[Token(Token = "0x20000C4")]
public class AnimatorTimeline : MonoBehaviour
{
	[Token(Token = "0x20003CF")]
	public class JSONTake
	{
		[Token(Token = "0x4002000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string takeName;

		[Token(Token = "0x4002001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public JSONInit[] inits;

		[Token(Token = "0x4002002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public JSONAction[] actions;

		[Token(Token = "0x600233C")]
		[Address(RVA = "0xE17F8C", Offset = "0xE17F8C", VA = "0xE17F8C")]
		public JSONTake()
		{
		}
	}

	[Token(Token = "0x20003D0")]
	public class JSONInit
	{
		[Token(Token = "0x4002003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string type;

		[Token(Token = "0x4002004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string typeExtra;

		[Token(Token = "0x4002005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string go;

		[Token(Token = "0x4002006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public JSONVector3 position;

		[Token(Token = "0x4002007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public JSONQuaternion rotation;

		[Token(Token = "0x4002008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float[] floats;

		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] strings;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string[] stringsExtra;

		[Token(Token = "0x400200B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int _int;

		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public long _long;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public double _double;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public JSONVector2 _vect2;

		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public JSONColor _color;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public JSONRect _rect;

		[Token(Token = "0x600233D")]
		[Address(RVA = "0xE17EFC", Offset = "0xE17EFC", VA = "0xE17EFC")]
		public JSONInit()
		{
		}
	}

	[Token(Token = "0x20003D1")]
	public class JSONAction
	{
		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string method;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string go;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float time;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int easeType;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float[] customEase;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string[] strings;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] stringsExtra;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float[] floats;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float[] floatsExtra;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool[] bools;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int[] ints;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public long[] longs;

		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public double[] doubles;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public JSONVector3[] path;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public JSONVector2[] vect2s;

		[Token(Token = "0x4002021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public JSONColor[] colors;

		[Token(Token = "0x4002022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public JSONRect[] rects;

		[Token(Token = "0x4002023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public JSONEventParameter[] eventParams;

		[Token(Token = "0x600233E")]
		[Address(RVA = "0xE17E28", Offset = "0xE17E28", VA = "0xE17E28")]
		public void setPath(Vector3[] _path)
		{
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0xE17D08", Offset = "0xE17D08", VA = "0xE17D08")]
		public Vector3[] getVector3Path()
		{
			return null;
		}

		[Token(Token = "0x6002340")]
		[Address(RVA = "0xE17EA0", Offset = "0xE17EA0", VA = "0xE17EA0")]
		public JSONAction()
		{
		}
	}

	[Token(Token = "0x20003D2")]
	public class JSONEventParameter
	{
		[Token(Token = "0x20004ED")]
		public enum ValueType
		{
			[Token(Token = "0x40023FD")]
			Integer,
			[Token(Token = "0x40023FE")]
			Long,
			[Token(Token = "0x40023FF")]
			Float,
			[Token(Token = "0x4002400")]
			Double,
			[Token(Token = "0x4002401")]
			Vector2,
			[Token(Token = "0x4002402")]
			Vector3,
			[Token(Token = "0x4002403")]
			Vector4,
			[Token(Token = "0x4002404")]
			Color,
			[Token(Token = "0x4002405")]
			Rect,
			[Token(Token = "0x4002406")]
			String,
			[Token(Token = "0x4002407")]
			Char,
			[Token(Token = "0x4002408")]
			Object,
			[Token(Token = "0x4002409")]
			Array,
			[Token(Token = "0x400240A")]
			Boolean
		}

		[Token(Token = "0x4002024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int valueType;

		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool val_bool;

		[Token(Token = "0x4002026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int val_int;

		[Token(Token = "0x4002027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float val_float;

		[Token(Token = "0x4002028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public JSONVector2 val_vect2;

		[Token(Token = "0x4002029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public JSONVector3 val_vect3;

		[Token(Token = "0x400202A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public JSONVector4 val_vect4;

		[Token(Token = "0x400202B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public JSONColor val_color;

		[Token(Token = "0x400202C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public JSONRect val_rect;

		[Token(Token = "0x400202D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string val_string;

		[Token(Token = "0x400202E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string val_obj;

		[Token(Token = "0x400202F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string val_obj_extra;

		[Token(Token = "0x4002030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public JSONEventParameter[] array;

		[Token(Token = "0x6002341")]
		[Address(RVA = "0xE17328", Offset = "0xE17328", VA = "0xE17328")]
		public object toObject()
		{
			return null;
		}

		[Token(Token = "0x6002342")]
		[Address(RVA = "0xE17EF4", Offset = "0xE17EF4", VA = "0xE17EF4")]
		public JSONEventParameter()
		{
		}
	}

	[Token(Token = "0x20003D3")]
	public class JSONVector4
	{
		[Token(Token = "0x4002031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x4002032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x4002033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float z;

		[Token(Token = "0x4002034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float w;

		[Token(Token = "0x6002343")]
		[Address(RVA = "0xE17FA4", Offset = "0xE17FA4", VA = "0xE17FA4")]
		public void setValue(Vector4 v)
		{
		}

		[Token(Token = "0x6002344")]
		[Address(RVA = "0xE17EBC", Offset = "0xE17EBC", VA = "0xE17EBC")]
		public Vector4 toVector4()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002345")]
		[Address(RVA = "0xE17FB0", Offset = "0xE17FB0", VA = "0xE17FB0")]
		public JSONVector4()
		{
		}
	}

	[Token(Token = "0x20003D4")]
	public class JSONVector3
	{
		[Token(Token = "0x4002035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x4002036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x4002037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float z;

		[Token(Token = "0x6002346")]
		[Address(RVA = "0xE132D4", Offset = "0xE132D4", VA = "0xE132D4")]
		public void setValue(Vector3 v)
		{
		}

		[Token(Token = "0x6002347")]
		[Address(RVA = "0xE13E6C", Offset = "0xE13E6C", VA = "0xE13E6C")]
		public Vector3 toVector3()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002348")]
		[Address(RVA = "0xE132CC", Offset = "0xE132CC", VA = "0xE132CC")]
		public JSONVector3()
		{
		}
	}

	[Token(Token = "0x20003D5")]
	public class JSONVector2
	{
		[Token(Token = "0x4002038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x4002039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x6002349")]
		[Address(RVA = "0xE17F94", Offset = "0xE17F94", VA = "0xE17F94")]
		public void setValue(Vector2 v)
		{
		}

		[Token(Token = "0x600234A")]
		[Address(RVA = "0xE14788", Offset = "0xE14788", VA = "0xE14788")]
		public Vector2 toVector2()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600234B")]
		[Address(RVA = "0xE17F9C", Offset = "0xE17F9C", VA = "0xE17F9C")]
		public JSONVector2()
		{
		}
	}

	[Token(Token = "0x20003D6")]
	public class JSONQuaternion
	{
		[Token(Token = "0x400203A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x400203B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x400203C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float z;

		[Token(Token = "0x400203D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float w;

		[Token(Token = "0x600234C")]
		[Address(RVA = "0xE17F04", Offset = "0xE17F04", VA = "0xE17F04")]
		public void setValue(Vector4 q)
		{
		}

		[Token(Token = "0x600234D")]
		[Address(RVA = "0xE13EA8", Offset = "0xE13EA8", VA = "0xE13EA8")]
		public Quaternion toQuaternion()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600234E")]
		[Address(RVA = "0xE17F10", Offset = "0xE17F10", VA = "0xE17F10")]
		public JSONQuaternion()
		{
		}
	}

	[Token(Token = "0x20003D7")]
	public class JSONColor
	{
		[Token(Token = "0x400203E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float r;

		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float g;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float b;

		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float a;

		[Token(Token = "0x600234F")]
		[Address(RVA = "0xE17EA8", Offset = "0xE17EA8", VA = "0xE17EA8")]
		public void setValue(Color c)
		{
		}

		[Token(Token = "0x6002350")]
		[Address(RVA = "0xE147B8", Offset = "0xE147B8", VA = "0xE147B8")]
		public Color toColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6002351")]
		[Address(RVA = "0xE17EB4", Offset = "0xE17EB4", VA = "0xE17EB4")]
		public JSONColor()
		{
		}
	}

	[Token(Token = "0x20003D8")]
	public class JSONRect
	{
		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x4002044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float width;

		[Token(Token = "0x4002045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float height;

		[Token(Token = "0x6002352")]
		[Address(RVA = "0xE17F18", Offset = "0xE17F18", VA = "0xE17F18")]
		public void setValue(Rect r)
		{
		}

		[Token(Token = "0x6002353")]
		[Address(RVA = "0xE147F0", Offset = "0xE147F0", VA = "0xE147F0")]
		public Rect toRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x6002354")]
		[Address(RVA = "0xE17F84", Offset = "0xE17F84", VA = "0xE17F84")]
		public JSONRect()
		{
		}
	}

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Component _aData;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static MethodInfo cachedInvoker;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<string, GameObject> dictGameObjects;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<string, Component> dictComponents;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<string, MethodInfo> dictMethodInfos;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Dictionary<string, FieldInfo> dictFieldInfos;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Dictionary<string, PropertyInfo> dictPropertyInfos;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static Camera[] allCameras;

	[Token(Token = "0x1700006A")]
	public static Component aData
	{
		[Token(Token = "0x6000617")]
		[Address(RVA = "0xE10C24", Offset = "0xE10C24", VA = "0xE10C24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006B")]
	private static MethodInfo invoker
	{
		[Token(Token = "0x6000618")]
		[Address(RVA = "0xE10E3C", Offset = "0xE10E3C", VA = "0xE10E3C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006C")]
	public static bool isPlaying
	{
		[Token(Token = "0x6000619")]
		[Address(RVA = "0xE10F2C", Offset = "0xE10F2C", VA = "0xE10F2C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600061A")]
		[Address(RVA = "0xE110A8", Offset = "0xE110A8", VA = "0xE110A8")]
		set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public static bool isPaused
	{
		[Token(Token = "0x600061B")]
		[Address(RVA = "0xE11114", Offset = "0xE11114", VA = "0xE11114")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600061C")]
		[Address(RVA = "0xE11294", Offset = "0xE11294", VA = "0xE11294")]
		set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public static string nowPlayingTake
	{
		[Token(Token = "0x600061D")]
		[Address(RVA = "0xE11300", Offset = "0xE11300", VA = "0xE11300")]
		get
		{
			return null;
		}
		[Token(Token = "0x600061E")]
		[Address(RVA = "0xE11470", Offset = "0xE11470", VA = "0xE11470")]
		set
		{
		}
	}

	[Token(Token = "0x1700006F")]
	public static float runningTime
	{
		[Token(Token = "0x600061F")]
		[Address(RVA = "0xE114DC", Offset = "0xE114DC", VA = "0xE114DC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000620")]
		[Address(RVA = "0xE1165C", Offset = "0xE1165C", VA = "0xE1165C")]
		set
		{
		}
	}

	[Token(Token = "0x17000070")]
	public static float totalTime
	{
		[Token(Token = "0x6000621")]
		[Address(RVA = "0xE116C8", Offset = "0xE116C8", VA = "0xE116C8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000622")]
		[Address(RVA = "0xE11848", Offset = "0xE11848", VA = "0xE11848")]
		set
		{
		}
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xE118B4", Offset = "0xE118B4", VA = "0xE118B4")]
	public static void Play(string takeName, bool loop = false)
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xE11AD8", Offset = "0xE11AD8", VA = "0xE11AD8")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xE11C7C", Offset = "0xE11C7C", VA = "0xE11C7C")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xE11E20", Offset = "0xE11E20", VA = "0xE11E20")]
	public static void Resume()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xE11FC4", Offset = "0xE11FC4", VA = "0xE11FC4")]
	public static void PlayFromTime(string takeName, float time, bool loop = false)
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xE12240", Offset = "0xE12240", VA = "0xE12240")]
	public static void PlayFromFrame(string takeName, int frame, bool loop = false)
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xE124B4", Offset = "0xE124B4", VA = "0xE124B4")]
	public static void PreviewFrame(string takeName, float frame)
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xE126D4", Offset = "0xE126D4", VA = "0xE126D4")]
	public static void PreviewTime(string takeName, float time)
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xE128F4", Offset = "0xE128F4", VA = "0xE128F4")]
	public static void ParseJSON(string textAssetName)
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xE12A30", Offset = "0xE12A30", VA = "0xE12A30")]
	private static void ParseJSON(TextAsset json)
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xE12AB8", Offset = "0xE12AB8", VA = "0xE12AB8")]
	public static void ParseJSONString(string json)
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xE13198", Offset = "0xE13198", VA = "0xE13198")]
	private static JSONVector3[] getJSONVector3Array(Vector3[] v)
	{
		return null;
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xE132E0", Offset = "0xE132E0", VA = "0xE132E0")]
	private static bool setInitialValue(JSONInit init)
	{
		return default(bool);
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xE145D0", Offset = "0xE145D0", VA = "0xE145D0")]
	private static bool setInitialValueForProperty(JSONInit init, object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xE12B7C", Offset = "0xE12B7C", VA = "0xE12B7C")]
	private static bool parseJSONTake(JSONTake j)
	{
		return default(bool);
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xE16CD4", Offset = "0xE16CD4", VA = "0xE16CD4")]
	private static bool parseCameraFade(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xE169B0", Offset = "0xE169B0", VA = "0xE169B0")]
	private static bool parseInvokeMethod(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xE16778", Offset = "0xE16778", VA = "0xE16778")]
	private static bool parseSendMessage(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xE15C94", Offset = "0xE15C94", VA = "0xE15C94")]
	private static bool parsePropertyTo(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xE17B70", Offset = "0xE17B70", VA = "0xE17B70")]
	private static void setupHashFieldOrPropertyInfo(Hashtable hash, JSONAction a)
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xE15938", Offset = "0xE15938", VA = "0xE15938")]
	private static bool parsePlayAudio(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xE15608", Offset = "0xE15608", VA = "0xE15608")]
	private static bool parsePlayAnimation(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xE15324", Offset = "0xE15324", VA = "0xE15324")]
	private static bool parseLookToFollow(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xE150C0", Offset = "0xE150C0", VA = "0xE150C0")]
	private static bool parseLookFollow(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xE14BA8", Offset = "0xE14BA8", VA = "0xE14BA8")]
	private static bool parseMoveTo(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xE14E44", Offset = "0xE14E44", VA = "0xE14E44")]
	private static bool parseRotateTo(JSONAction a)
	{
		return default(bool);
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xE1721C", Offset = "0xE1721C", VA = "0xE1721C")]
	private static void setupHashEase(Hashtable hashTable, JSONAction a)
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xE13C74", Offset = "0xE13C74", VA = "0xE13C74")]
	private static GameObject getGO(string name)
	{
		return null;
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xE13EE0", Offset = "0xE13EE0", VA = "0xE13EE0")]
	private static Component getCMP(string goName, string componentName)
	{
		return null;
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xE1425C", Offset = "0xE1425C", VA = "0xE1425C")]
	private static MethodInfo getMethodInfo(string goName, string componentName, string methodName, string[] typeNames)
	{
		return null;
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xE14828", Offset = "0xE14828", VA = "0xE14828")]
	private static FieldInfo getFieldInfo(string goName, string componentName, string fieldName)
	{
		return null;
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xE149E8", Offset = "0xE149E8", VA = "0xE149E8")]
	private static PropertyInfo getPropertyInfo(string goName, string componentName, string propertyName)
	{
		return null;
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xE17E1C", Offset = "0xE17E1C", VA = "0xE17E1C")]
	public AnimatorTimeline()
	{
	}
}
[Serializable]
[Token(Token = "0x20000C5")]
public class MotinActionData
{
	[Token(Token = "0x6000645")]
	[Address(RVA = "0x9E4268", Offset = "0x9E4268", VA = "0x9E4268")]
	public void Save(AMAction action)
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x9E426C", Offset = "0x9E426C", VA = "0x9E426C")]
	public MotinActionData()
	{
	}
}
[Token(Token = "0x20000C6")]
public class MotinAnimator : MonoBehaviour
{
	[Token(Token = "0x20003D9")]
	public delegate void AnimationLoopCompleteDelegate(MotinAnimator motinAnimator, string animationName);

	[Token(Token = "0x20003DA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A7C", Offset = "0x7D8A7C")]
	private sealed class <WaitFrameBeforeRaiseEvent>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotinAnimator <>4__this;

		[Token(Token = "0x4002049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action OnComplete;

		[Token(Token = "0x400204A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string take_name;

		[Token(Token = "0x17000368")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600235C")]
			[Address(RVA = "0x9E638C", Offset = "0x9E638C", VA = "0x9E638C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000369")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600235E")]
			[Address(RVA = "0x9E63F8", Offset = "0x9E63F8", VA = "0x9E63F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002359")]
		[Address(RVA = "0x9E5AE4", Offset = "0x9E5AE4", VA = "0x9E5AE4")]
		[DebuggerHidden]
		public <WaitFrameBeforeRaiseEvent>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x600235A")]
		[Address(RVA = "0x9E62DC", Offset = "0x9E62DC", VA = "0x9E62DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600235B")]
		[Address(RVA = "0x9E62E0", Offset = "0x9E62E0", VA = "0x9E62E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0x9E6394", Offset = "0x9E6394", VA = "0x9E6394", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool useRealTime;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool useUnscaledTime;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MotinAnimatorData animatorData;

	[NonSerialized]
	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<AMTake> takes;

	[NonSerialized]
	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AMTake playOnStart;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool loopPlayOnStart;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected string animatorId;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float tmpStartFrame;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float tmpStartTime;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float tmpLastFrameTime;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action OnAnimationComplete;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action<MotinAnimator, string> OnAnimationCompleteWithAnimatorAndClipName;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AnimationLoopCompleteDelegate OnAnimationLoopComplete;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public int currentTake;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[HideInInspector]
	public float elapsedTime;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private AMTake nowPlayingTake_;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool isPaused_;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool isLooping;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float takeTime;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private string tmpString;

	[Token(Token = "0x17000071")]
	[HideInInspector]
	public bool isPlaying
	{
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x9E4274", Offset = "0x9E4274", VA = "0x9E4274")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000072")]
	[HideInInspector]
	public string takeName
	{
		[Token(Token = "0x6000648")]
		[Address(RVA = "0x9E4300", Offset = "0x9E4300", VA = "0x9E4300")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000073")]
	private AMTake nowPlayingTake
	{
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x9E481C", Offset = "0x9E481C", VA = "0x9E481C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x9E4824", Offset = "0x9E4824", VA = "0x9E4824")]
		set
		{
		}
	}

	[Token(Token = "0x17000074")]
	private bool isPaused
	{
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x9E482C", Offset = "0x9E482C", VA = "0x9E482C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600064E")]
		[Address(RVA = "0x9E4834", Offset = "0x9E4834", VA = "0x9E4834")]
		set
		{
		}
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x9E4394", Offset = "0x9E4394", VA = "0x9E4394")]
	private void RaiseOnAnimationComplete(string animationName)
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x9E441C", Offset = "0x9E441C", VA = "0x9E441C")]
	private void RaiseOnAnimationLoopComplete(string animationName)
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x9E4840", Offset = "0x9E4840", VA = "0x9E4840")]
	public object Invoker(object[] args)
	{
		return null;
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x9E51B0", Offset = "0x9E51B0", VA = "0x9E51B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0x9E545C", Offset = "0x9E545C", VA = "0x9E545C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0x9E5578", Offset = "0x9E5578", VA = "0x9E5578")]
	private void Start()
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0x9E5620", Offset = "0x9E5620", VA = "0x9E5620")]
	private void Update()
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0x9E5964", Offset = "0x9E5964", VA = "0x9E5964")]
	public void Play(string takeName)
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0x9E5978", Offset = "0x9E5978", VA = "0x9E5978")]
	public void Play(string takeName, [Optional] Action OnComplete)
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x9E5990", Offset = "0x9E5990", VA = "0x9E5990")]
	public void Play(string takeName, bool loop, [Optional] Action OnComplete)
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x9E4CD8", Offset = "0x9E4CD8", VA = "0x9E4CD8")]
	public void Play(string take_name, bool isFrame, float value, bool loop, [Optional] Action OnComplete)
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x9E5A5C", Offset = "0x9E5A5C", VA = "0x9E5A5C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0D90", Offset = "0x7E0D90")]
	private IEnumerator WaitFrameBeforeRaiseEvent(string take_name, [Optional] Action OnComplete)
	{
		return null;
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x9E505C", Offset = "0x9E505C", VA = "0x9E505C")]
	public void PreviewValue(string take_name, bool isFrame, float value)
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x9E57E8", Offset = "0x9E57E8", VA = "0x9E57E8")]
	public void Execute(AMTake take, bool isFrame = true, float value = 0f, [Optional] Action OnComplete)
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x9E5C38", Offset = "0x9E5C38", VA = "0x9E5C38")]
	public void Pause()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0x9E4EBC", Offset = "0x9E4EBC", VA = "0x9E4EBC")]
	public void PauseLoop()
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0x9E5C64", Offset = "0x9E5C64", VA = "0x9E5C64")]
	private void PauseGameobject(GameObject go)
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0x9E5D94", Offset = "0x9E5D94", VA = "0x9E5D94")]
	public void Resume()
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0x9E4F9C", Offset = "0x9E4F9C", VA = "0x9E4F9C")]
	public void ResumeLoop()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0x9E5DC0", Offset = "0x9E5DC0", VA = "0x9E5DC0")]
	private void ResumeGameobject(GameObject go)
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0x9E4DE0", Offset = "0x9E4DE0", VA = "0x9E4DE0")]
	public void StopLoop()
	{
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0x9E5EF0", Offset = "0x9E5EF0", VA = "0x9E5EF0")]
	public int getCurrentTakeValue()
	{
		return default(int);
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x9E5EF8", Offset = "0x9E5EF8", VA = "0x9E5EF8")]
	public int getTakeCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0x9E5F4C", Offset = "0x9E5F4C", VA = "0x9E5F4C")]
	public bool setCurrentTakeValue(int _take)
	{
		return default(bool);
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x9E5FC0", Offset = "0x9E5FC0", VA = "0x9E5FC0")]
	public AMTake getCurrentTake()
	{
		return null;
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x9E5B10", Offset = "0x9E5B10", VA = "0x9E5B10")]
	public AMTake getTake(string takeName)
	{
		return null;
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x9E59A8", Offset = "0x9E59A8", VA = "0x9E59A8")]
	public int getTakeIndex(string takeName)
	{
		return default(int);
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x9E6034", Offset = "0x9E6034", VA = "0x9E6034")]
	public string[] getTakeNames()
	{
		return null;
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x9E6180", Offset = "0x9E6180", VA = "0x9E6180")]
	public int getTakeIndex(AMTake take)
	{
		return default(int);
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x9E5224", Offset = "0x9E5224", VA = "0x9E5224")]
	public void Load(MotinAnimatorData motinAnimatorData)
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x9E5460", Offset = "0x9E5460", VA = "0x9E5460")]
	public void destroy()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x9E6258", Offset = "0x9E6258", VA = "0x9E6258")]
	public MotinAnimator()
	{
	}
}
[Serializable]
[Token(Token = "0x20000C7")]
public class MotinAnimatorData
{
	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MotinTakeData[] takes;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string playOnStart;

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x9E644C", Offset = "0x9E644C", VA = "0x9E644C")]
	public void Save(AnimatorData animatorData)
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x9E6A0C", Offset = "0x9E6A0C", VA = "0x9E6A0C")]
	public MotinAnimatorData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000C8")]
public class MotinGroupData
{
	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string group_name;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int group_id;

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x9E6A14", Offset = "0x9E6A14", VA = "0x9E6A14")]
	public void Save(AMGroup grp)
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0x9E6A3C", Offset = "0x9E6A3C", VA = "0x9E6A3C")]
	public MotinGroupData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000C9")]
public class MotinKeyData : MotinPropertyData
{
	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float[] customEase;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] morph;

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x9E76E8", Offset = "0x9E76E8", VA = "0x9E76E8")]
	public void Save(AMPropertyTrack.ValueType valueType, AMPropertyKey key)
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x9E82D4", Offset = "0x9E82D4", VA = "0x9E82D4")]
	public void Save(AMEventKey key)
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x9E88CC", Offset = "0x9E88CC", VA = "0x9E88CC")]
	public MotinKeyData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000CA")]
public class MotinPropertyData
{
	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<MotinValue> motinValues;

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x9E8940", Offset = "0x9E8940", VA = "0x9E8940")]
	public void ClearData()
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x9E8998", Offset = "0x9E8998", VA = "0x9E8998")]
	public bool containsKey(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x9E8AC0", Offset = "0x9E8AC0", VA = "0x9E8AC0")]
	public void deleteMotinValue(string name)
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x9E8B50", Offset = "0x9E8B50", VA = "0x9E8B50")]
	public int getMotinValueIndex(string name)
	{
		return default(int);
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x9E8C80", Offset = "0x9E8C80", VA = "0x9E8C80")]
	public bool addMotinValue(MotinValue motinValue)
	{
		return default(bool);
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x9E7860", Offset = "0x9E7860", VA = "0x9E7860")]
	public bool add(string name, int value)
	{
		return default(bool);
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x9E8704", Offset = "0x9E8704", VA = "0x9E8704")]
	public bool add(string name, bool value)
	{
		return default(bool);
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x9E7A10", Offset = "0x9E7A10", VA = "0x9E7A10")]
	public bool add(string name, double value)
	{
		return default(bool);
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x9E92B4", Offset = "0x9E92B4", VA = "0x9E92B4")]
	public bool add(string name, float value)
	{
		return default(bool);
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x9E8544", Offset = "0x9E8544", VA = "0x9E8544")]
	public bool add(string name, string value)
	{
		return default(bool);
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x9E8110", Offset = "0x9E8110", VA = "0x9E8110")]
	public bool add(string name, Vector3 value)
	{
		return default(bool);
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x9E7F60", Offset = "0x9E7F60", VA = "0x9E7F60")]
	public bool add(string name, Vector2 value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x9E7D90", Offset = "0x9E7D90", VA = "0x9E7D90")]
	public bool add(string name, Rect value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x9E7BC0", Offset = "0x9E7BC0", VA = "0x9E7BC0")]
	public bool add(string name, Color value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x9E83A0", Offset = "0x9E83A0", VA = "0x9E83A0")]
	public bool add(string name, UnityEngine.Object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0x9E97B4", Offset = "0x9E97B4", VA = "0x9E97B4")]
	public MotinValue getMotinValue(string name)
	{
		return null;
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0x9E98DC", Offset = "0x9E98DC", VA = "0x9E98DC")]
	public int getInt(string name)
	{
		return default(int);
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x9E99D0", Offset = "0x9E99D0", VA = "0x9E99D0")]
	public float getFloat(string name)
	{
		return default(float);
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x9E9AC8", Offset = "0x9E9AC8", VA = "0x9E9AC8")]
	public double getDouble(string name)
	{
		return default(double);
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x9E9BC0", Offset = "0x9E9BC0", VA = "0x9E9BC0")]
	public bool getBool(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x9E9CB8", Offset = "0x9E9CB8", VA = "0x9E9CB8")]
	public string getString(string name)
	{
		return null;
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x9E9DB8", Offset = "0x9E9DB8", VA = "0x9E9DB8")]
	public Vector2 getVector2(string name)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x9E9EB0", Offset = "0x9E9EB0", VA = "0x9E9EB0")]
	public Vector3 getVector3(string name)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0x9E9FAC", Offset = "0x9E9FAC", VA = "0x9E9FAC")]
	public Rect getRect(string name)
	{
		return default(Rect);
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0x9EA0A8", Offset = "0x9EA0A8", VA = "0x9EA0A8")]
	public Color getColor(string name)
	{
		return default(Color);
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0x9EA1A4", Offset = "0x9EA1A4", VA = "0x9EA1A4")]
	public UnityEngine.Object getObject(string name)
	{
		return null;
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0x9E88D0", Offset = "0x9E88D0", VA = "0x9E88D0")]
	public MotinPropertyData()
	{
	}
}
[Token(Token = "0x20000CB")]
public class MotinPropertyTrackData : MonoBehaviour
{
	[Token(Token = "0x600068F")]
	[Address(RVA = "0x9EA29C", Offset = "0x9EA29C", VA = "0x9EA29C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0x9EA2A0", Offset = "0x9EA2A0", VA = "0x9EA2A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0x9EA2A4", Offset = "0x9EA2A4", VA = "0x9EA2A4")]
	public MotinPropertyTrackData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000CC")]
public class MotinTakeData
{
	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int frameRate;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int numFrames;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float startFrame;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float endFrame;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int playbackSpeedIndex;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MotinTrackData[] trackValues;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MotinGroupData[] groupValues;

	[Token(Token = "0x6000692")]
	[Address(RVA = "0x9E66B8", Offset = "0x9E66B8", VA = "0x9E66B8")]
	public void Save(AMTake take)
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0x9E6694", Offset = "0x9E6694", VA = "0x9E6694")]
	public MotinTakeData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000CD")]
public class MotinTrackData : MotinPropertyData
{
	[Token(Token = "0x20003DB")]
	public enum TrackTypes
	{
		[Token(Token = "0x400204C")]
		PROPERTY_TRACK,
		[Token(Token = "0x400204D")]
		EVENT_TRACK,
		[Token(Token = "0x400204E")]
		AUDIO_TRACK
	}

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MotinKeyData[] keys;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int groupId;

	[Token(Token = "0x6000694")]
	[Address(RVA = "0x9EA2B0", Offset = "0x9EA2B0", VA = "0x9EA2B0")]
	public void Save(AMTrack track)
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0x9EA4A0", Offset = "0x9EA4A0", VA = "0x9EA4A0")]
	public void Save(AMPropertyTrack track)
	{
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0x9EA768", Offset = "0x9EA768", VA = "0x9EA768")]
	public void Save(AMEventTrack track)
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0x9EA9AC", Offset = "0x9EA9AC", VA = "0x9EA9AC")]
	public void Save(AMAudioTrack track)
	{
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0x9EA2AC", Offset = "0x9EA2AC", VA = "0x9EA2AC")]
	public MotinTrackData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000CE")]
public class MotinValue
{
	[Token(Token = "0x20003DC")]
	public enum ValueType
	{
		[Token(Token = "0x4002050")]
		Integer,
		[Token(Token = "0x4002051")]
		Long,
		[Token(Token = "0x4002052")]
		Float,
		[Token(Token = "0x4002053")]
		Double,
		[Token(Token = "0x4002054")]
		Vector2,
		[Token(Token = "0x4002055")]
		Vector3,
		[Token(Token = "0x4002056")]
		Vector4,
		[Token(Token = "0x4002057")]
		Color,
		[Token(Token = "0x4002058")]
		Rect,
		[Token(Token = "0x4002059")]
		String,
		[Token(Token = "0x400205A")]
		Char,
		[Token(Token = "0x400205B")]
		Object,
		[Token(Token = "0x400205C")]
		Array,
		[Token(Token = "0x400205D")]
		Boolean,
		[Token(Token = "0x400205E")]
		MotinPropertyData
	}

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool val_bool;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int valueType;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int val_int;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float val_float;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public double val_double;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 val_vect2;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 val_vect3;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector4 val_vect4;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Color val_color;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Rect val_rect;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string val_string;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEngine.Object val_obj;

	[Token(Token = "0x6000699")]
	[Address(RVA = "0x9E9268", Offset = "0x9E9268", VA = "0x9E9268")]
	public bool setBool(bool val_bool)
	{
		return default(bool);
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0x9E9248", Offset = "0x9E9248", VA = "0x9E9248")]
	public bool setInt(int val_int)
	{
		return default(bool);
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0x9E9294", Offset = "0x9E9294", VA = "0x9E9294")]
	public bool setDouble(double val_double)
	{
		return default(bool);
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0x9E9464", Offset = "0x9E9464", VA = "0x9E9464")]
	public bool setFloat(float val_float)
	{
		return default(bool);
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0x9E9588", Offset = "0x9E9588", VA = "0x9E9588")]
	public bool setVector2(Vector2 val_vect2)
	{
		return default(bool);
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0x9E94C4", Offset = "0x9E94C4", VA = "0x9E94C4")]
	public bool setVector3(Vector3 val_vect3)
	{
		return default(bool);
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0x9EAA00", Offset = "0x9EAA00", VA = "0x9EAA00")]
	public bool setVector4(Vector4 val_vect4)
	{
		return default(bool);
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0x9E96A8", Offset = "0x9E96A8", VA = "0x9E96A8")]
	public bool setColor(Color val_color)
	{
		return default(bool);
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0x9E9630", Offset = "0x9E9630", VA = "0x9E9630")]
	public bool setRect(Rect val_rect)
	{
		return default(bool);
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0x9E9484", Offset = "0x9E9484", VA = "0x9E9484")]
	public bool setString(string val_string)
	{
		return default(bool);
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0x9E9720", Offset = "0x9E9720", VA = "0x9E9720")]
	public bool setObject(UnityEngine.Object val_obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0x9EAAD8", Offset = "0x9EAAD8", VA = "0x9EAAD8")]
	public Type getValueType()
	{
		return null;
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x9EACC0", Offset = "0x9EACC0", VA = "0x9EACC0")]
	public string getStringValue()
	{
		return null;
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0x9E8D8C", Offset = "0x9E8D8C", VA = "0x9E8D8C")]
	public void setValueType(Type t)
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x9EAEC8", Offset = "0x9EAEC8", VA = "0x9EAEC8")]
	public void setValueType(ValueType t)
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x9EAED0", Offset = "0x9EAED0", VA = "0x9EAED0")]
	public object toObject()
	{
		return null;
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x9EB088", Offset = "0x9EB088", VA = "0x9EB088")]
	public MotinValue CreateClone()
	{
		return null;
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x9E8D34", Offset = "0x9E8D34", VA = "0x9E8D34")]
	public MotinValue()
	{
	}
}
[Token(Token = "0x20000CF")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D51E4", Offset = "0x7D51E4")]
public class ErgoApplicationVersionLabel : MonoBehaviour
{
	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text labelComponent;

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xADCC98", Offset = "0xADCC98", VA = "0xADCC98")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xADCCF0", Offset = "0xADCCF0", VA = "0xADCCF0")]
	private void Start()
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xADCD78", Offset = "0xADCD78", VA = "0xADCD78")]
	public ErgoApplicationVersionLabel()
	{
	}
}
[Token(Token = "0x20000D0")]
public interface IErgoSerializable
{
	[Token(Token = "0x60006AE")]
	string typeName();

	[Token(Token = "0x60006AF")]
	XmlElement Serialize(XmlDocument xmlDom);

	[Token(Token = "0x60006B0")]
	void Deserialize(XmlElement element);

	[Token(Token = "0x60006B1")]
	void OnSerialize(XmlElement element);

	[Token(Token = "0x60006B2")]
	void OnDeserialize(XmlElement element);

	[Token(Token = "0x60006B3")]
	void SetString(XmlElement element, string name, string value);

	[Token(Token = "0x60006B4")]
	string GetString(XmlElement element, string name);

	[Token(Token = "0x60006B5")]
	void SetFloat(XmlElement element, string name, float value);

	[Token(Token = "0x60006B6")]
	float GetFloat(XmlElement element, string name);

	[Token(Token = "0x60006B7")]
	void SetInt(XmlElement element, string name, int value);

	[Token(Token = "0x60006B8")]
	int GetInt(XmlElement element, string name);

	[Token(Token = "0x60006B9")]
	void SetBool(XmlElement element, string name, bool value);

	[Token(Token = "0x60006BA")]
	bool GetBool(XmlElement element, string name);

	[Token(Token = "0x60006BB")]
	void SetLong(XmlElement element, string name, long value);

	[Token(Token = "0x60006BC")]
	long GetLong(XmlElement element, string name);

	[Token(Token = "0x60006BD")]
	void SetVector3(XmlElement element, string name, Vector3 value);

	[Token(Token = "0x60006BE")]
	Vector3 GetVector3(XmlElement element, string name);

	[Token(Token = "0x60006BF")]
	void SetVector2(XmlElement element, string name, Vector2 value);

	[Token(Token = "0x60006C0")]
	Vector2 GetVector2(XmlElement element, string name);

	[Token(Token = "0x60006C1")]
	void SetVector4(XmlElement element, string name, Vector4 value);

	[Token(Token = "0x60006C2")]
	Vector4 GetVector4(XmlElement element, string name);

	[Token(Token = "0x60006C3")]
	void SetColor(XmlElement element, string name, Color value);

	[Token(Token = "0x60006C4")]
	Color GetColor(XmlElement element, string name);

	[Token(Token = "0x60006C5")]
	void SetRect(XmlElement element, string name, Rect value);

	[Token(Token = "0x60006C6")]
	Rect GetRect(XmlElement element, string name);

	[Token(Token = "0x60006C7")]
	void SetObject(XmlElement element, string name, UnityEngine.Object value);

	[Token(Token = "0x60006C8")]
	UnityEngine.Object GetObject(XmlElement element, string name);

	[Token(Token = "0x60006C9")]
	void SetDateTime(XmlElement element, string name, DateTime dateTime);

	[Token(Token = "0x60006CA")]
	void serializeIntArray(XmlElement element, string name, int[] value);

	[Token(Token = "0x60006CB")]
	void serializeStringArray(XmlElement element, string name, string[] value);

	[Token(Token = "0x60006CC")]
	void serializeFloatArray(XmlElement element, string name, float[] value);

	[Token(Token = "0x60006CD")]
	DateTime GetDateTime(XmlElement element, string name);
}
[Token(Token = "0x20000D1")]
public class DuplicateKeyComparer<TKey> : IComparer<TKey> where TKey : IComparable
{
	[Token(Token = "0x60006CE")]
	public int Compare(TKey x, TKey y)
	{
		return default(int);
	}

	[Token(Token = "0x60006CF")]
	public DuplicateKeyComparer()
	{
	}
}
[Token(Token = "0x20000D2")]
public class DuplicateFloatKeyComparer
{
	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x9C25F4", Offset = "0x9C25F4", VA = "0x9C25F4")]
	public int Compare(float x, float y)
	{
		return default(int);
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x9C2628", Offset = "0x9C2628", VA = "0x9C2628")]
	public DuplicateFloatKeyComparer()
	{
	}
}
[Token(Token = "0x20000D3")]
public static class IComparableExtension
{
	[Token(Token = "0x60006D2")]
	public static bool InRange<T>(this T value, T from, T to) where T : IComparable<T>
	{
		return default(bool);
	}
}
[Token(Token = "0x20000D4")]
public class Math3d
{
	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Transform tempChild;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Transform tempParent;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Vector3[] positionRegister;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static float[] posTimeRegister;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int positionSamplesTaken;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Quaternion[] rotationRegister;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static float[] rotTimeRegister;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static int rotationSamplesTaken;

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0xA68184", Offset = "0xA68184", VA = "0xA68184")]
	public static void Init()
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0xA68348", Offset = "0xA68348", VA = "0xA68348")]
	public static Vector3 AddVectorLength(Vector3 vector, float size)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0xA683F0", Offset = "0xA683F0", VA = "0xA683F0")]
	public static Vector3 SetVectorLength(Vector3 vector, float size)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0xA68488", Offset = "0xA68488", VA = "0xA68488")]
	public static Quaternion SubtractRotation(Quaternion B, Quaternion A)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0xA68550", Offset = "0xA68550", VA = "0xA68550")]
	public static Quaternion AddRotation(Quaternion A, Quaternion B)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0xA68610", Offset = "0xA68610", VA = "0xA68610")]
	public static Vector3 TransformDirectionMath(Quaternion rotation, Vector3 vector)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0xA686C8", Offset = "0xA686C8", VA = "0xA686C8")]
	public static Vector3 InverseTransformDirectionMath(Quaternion rotation, Vector3 vector)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0xA68788", Offset = "0xA68788", VA = "0xA68788")]
	public static Vector3 RotateVectorFromTo(Quaternion from, Quaternion to, Vector3 vector)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0xA68904", Offset = "0xA68904", VA = "0xA68904")]
	public static bool PlanePlaneIntersection(out Vector3 linePoint, out Vector3 lineVec, Vector3 plane1Normal, Vector3 plane1Position, Vector3 plane2Normal, Vector3 plane2Position)
	{
		return default(bool);
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xA68B28", Offset = "0xA68B28", VA = "0xA68B28")]
	public static bool LinePlaneIntersection(out Vector3 intersection, Vector3 linePoint, Vector3 lineVec, Vector3 planeNormal, Vector3 planePoint)
	{
		return default(bool);
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0xA68CD0", Offset = "0xA68CD0", VA = "0xA68CD0")]
	public static bool LineLineIntersection(out Vector3 intersection, Vector3 linePoint1, Vector3 lineVec1, Vector3 linePoint2, Vector3 lineVec2)
	{
		return default(bool);
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xA68F3C", Offset = "0xA68F3C", VA = "0xA68F3C")]
	public static bool ClosestPointsOnTwoLines(out Vector3 closestPointLine1, out Vector3 closestPointLine2, Vector3 linePoint1, Vector3 lineVec1, Vector3 linePoint2, Vector3 lineVec2)
	{
		return default(bool);
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xA691F0", Offset = "0xA691F0", VA = "0xA691F0")]
	public static Vector3 ProjectPointOnLine(Vector3 linePoint, Vector3 lineVec, Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xA692F8", Offset = "0xA692F8", VA = "0xA692F8")]
	public static Vector3 ProjectPointOnLineSegment(Vector3 linePoint1, Vector3 linePoint2, Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xA6961C", Offset = "0xA6961C", VA = "0xA6961C")]
	public static Vector3 ProjectPointOnPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xA69860", Offset = "0xA69860", VA = "0xA69860")]
	public static Vector3 ProjectVectorOnPlane(Vector3 planeNormal, Vector3 vector)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xA69788", Offset = "0xA69788", VA = "0xA69788")]
	public static float SignedDistancePlanePoint(Vector3 planeNormal, Vector3 planePoint, Vector3 point)
	{
		return default(float);
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0xA6993C", Offset = "0xA6993C", VA = "0xA6993C")]
	public static float SignedDotProduct(Vector3 vectorA, Vector3 vectorB, Vector3 normal)
	{
		return default(float);
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0xA69A08", Offset = "0xA69A08", VA = "0xA69A08")]
	public static float SignedVectorAngle(Vector3 referenceVector, Vector3 otherVector, Vector3 normal)
	{
		return default(float);
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0xA69B4C", Offset = "0xA69B4C", VA = "0xA69B4C")]
	public static float AngleVectorPlane(Vector3 vector, Vector3 normal)
	{
		return default(float);
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xA69C34", Offset = "0xA69C34", VA = "0xA69C34")]
	public static float DotProductAngle(Vector3 vec1, Vector3 vec2)
	{
		return default(float);
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xA69D20", Offset = "0xA69D20", VA = "0xA69D20")]
	public static void PlaneFrom3Points(out Vector3 planeNormal, out Vector3 planePoint, Vector3 pointA, Vector3 pointB, Vector3 pointC)
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xA69FCC", Offset = "0xA69FCC", VA = "0xA69FCC")]
	public static Vector3 GetForwardVector(Quaternion q)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xA6A0AC", Offset = "0xA6A0AC", VA = "0xA6A0AC")]
	public static Vector3 GetUpVector(Quaternion q)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xA6A18C", Offset = "0xA6A18C", VA = "0xA6A18C")]
	public static Vector3 GetRightVector(Quaternion q)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xA6A26C", Offset = "0xA6A26C", VA = "0xA6A26C")]
	public static Quaternion QuaternionFromMatrix(Matrix4x4 m)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xA6A388", Offset = "0xA6A388", VA = "0xA6A388")]
	public static Vector3 PositionFromMatrix(Matrix4x4 m)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xA6A3C8", Offset = "0xA6A3C8", VA = "0xA6A3C8")]
	public static void LookRotationExtended(ref GameObject gameObjectInOut, Vector3 alignWithVector, Vector3 alignWithNormal, Vector3 customForward, Vector3 customUp)
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xA6A550", Offset = "0xA6A550", VA = "0xA6A550")]
	public static void TransformWithParent(out Quaternion childRotation, out Vector3 childPosition, Quaternion parentRotation, Vector3 parentPosition, Quaternion startParentRotation, Vector3 startParentPosition, Quaternion startChildRotation, Vector3 startChildPosition)
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xA6A7B8", Offset = "0xA6A7B8", VA = "0xA6A7B8")]
	public static void PreciseAlign(ref GameObject gameObjectInOut, Vector3 alignWithVector, Vector3 alignWithNormal, Vector3 alignWithPosition, Vector3 triangleForward, Vector3 triangleNormal, Vector3 trianglePosition)
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xA6A9AC", Offset = "0xA6A9AC", VA = "0xA6A9AC")]
	public static void VectorsToTransform(ref GameObject gameObjectInOut, Vector3 positionVector, Vector3 directionVector, Vector3 normalVector)
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xA694BC", Offset = "0xA694BC", VA = "0xA694BC")]
	public static int PointOnWhichSideOfLineSegment(Vector3 linePoint1, Vector3 linePoint2, Vector3 point)
	{
		return default(int);
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xA6AACC", Offset = "0xA6AACC", VA = "0xA6AACC")]
	public static float MouseDistanceToLine(Vector3 linePoint1, Vector3 linePoint2)
	{
		return default(float);
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xA6AC88", Offset = "0xA6AC88", VA = "0xA6AC88")]
	public static float MouseDistanceToCircle(Vector3 point, float radius)
	{
		return default(float);
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xA6ADC8", Offset = "0xA6ADC8", VA = "0xA6ADC8")]
	public static bool IsLineInRectangle(Vector3 linePoint1, Vector3 linePoint2, Vector3 rectA, Vector3 rectB, Vector3 rectC, Vector3 rectD)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xA6B0B8", Offset = "0xA6B0B8", VA = "0xA6B0B8")]
	public static bool IsPointInRectangle(Vector3 point, Vector3 rectA, Vector3 rectC, Vector3 rectB, Vector3 rectD)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xA6B3A0", Offset = "0xA6B3A0", VA = "0xA6B3A0")]
	public static bool AreLineSegmentsCrossing(Vector3 pointA1, Vector3 pointA2, Vector3 pointB1, Vector3 pointB2)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xA6B5EC", Offset = "0xA6B5EC", VA = "0xA6B5EC")]
	public static bool LinearAcceleration(out Vector3 vector, Vector3 position, int samples)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xA6BC58", Offset = "0xA6BC58", VA = "0xA6BC58")]
	public static bool AngularAcceleration(out Vector3 vector, Quaternion rotation, int samples)
	{
		return default(bool);
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xA6C378", Offset = "0xA6C378", VA = "0xA6C378")]
	public static float LinearFunction2DBasic(float x, float Qx, float Qy)
	{
		return default(float);
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xA6C384", Offset = "0xA6C384", VA = "0xA6C384")]
	public static float LinearFunction2DFull(float x, float Px, float Py, float Qx, float Qy)
	{
		return default(float);
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xA6C28C", Offset = "0xA6C28C", VA = "0xA6C28C")]
	private static Vector3 RotDiffToSpeedVec(Quaternion rotation, float deltaTime)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xA6C3A0", Offset = "0xA6C3A0", VA = "0xA6C3A0")]
	public Math3d()
	{
	}
}
[Token(Token = "0x20000D5")]
public class PoolPreWarmForcer : MonoBehaviour
{
	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<PoolPackReferenceData> packsToLoad;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<PoolReferenceData> poolsToLoad;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool PreWarmOnStart;

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0x13E8584", Offset = "0x13E8584", VA = "0x13E8584")]
	private void Start()
	{
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0x13E88F0", Offset = "0x13E88F0", VA = "0x13E88F0")]
	public PoolPreWarmForcer()
	{
	}
}
[Token(Token = "0x20000D6")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7D5258", Offset = "0x7D5258")]
[AttributeAttribute(Name = "EditorParamsHideFields", RVA = "0x7D5258", Offset = "0x7D5258")]
public class PoolResource : ScriptableObject
{
	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x6000701")]
	[Address(RVA = "0x13E88F8", Offset = "0x13E88F8", VA = "0x13E88F8")]
	public PoolResource()
	{
	}
}
[Token(Token = "0x20000D7")]
public class SpritePoolWrap : MonoBehaviour
{
	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SpritePoolWrap _instance;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpritePool pData;

	[Token(Token = "0x17000075")]
	public static SpritePoolWrap Instance
	{
		[Token(Token = "0x6000702")]
		[Address(RVA = "0xA740C0", Offset = "0xA740C0", VA = "0xA740C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0xA74110", Offset = "0xA74110", VA = "0xA74110")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0xA74164", Offset = "0xA74164", VA = "0xA74164")]
	public Sprite GetSprite(string sprite)
	{
		return null;
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xA742EC", Offset = "0xA742EC", VA = "0xA742EC")]
	public Sprite GetSprite(SPRITES_DEFINED sprite)
	{
		return null;
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xA743B4", Offset = "0xA743B4", VA = "0xA743B4")]
	public SpritePoolWrap()
	{
	}
}
[Token(Token = "0x20000D8")]
public static class TweenUtils
{
	[Token(Token = "0x20003DD")]
	public enum EaseType
	{
		[Token(Token = "0x4002060")]
		None,
		[Token(Token = "0x4002061")]
		InOutSmooth,
		[Token(Token = "0x4002062")]
		InQuad,
		[Token(Token = "0x4002063")]
		OutQuad,
		[Token(Token = "0x4002064")]
		InOutQuad,
		[Token(Token = "0x4002065")]
		InCubic,
		[Token(Token = "0x4002066")]
		OutCubic,
		[Token(Token = "0x4002067")]
		InOutCubic,
		[Token(Token = "0x4002068")]
		InQuart,
		[Token(Token = "0x4002069")]
		OutQuart,
		[Token(Token = "0x400206A")]
		InOutQuart,
		[Token(Token = "0x400206B")]
		InQuint,
		[Token(Token = "0x400206C")]
		OutQuint,
		[Token(Token = "0x400206D")]
		InOutQuint,
		[Token(Token = "0x400206E")]
		InSine,
		[Token(Token = "0x400206F")]
		OutSine,
		[Token(Token = "0x4002070")]
		InOutSine,
		[Token(Token = "0x4002071")]
		InExpo,
		[Token(Token = "0x4002072")]
		OutExpo,
		[Token(Token = "0x4002073")]
		InOutExpo,
		[Token(Token = "0x4002074")]
		InCirc,
		[Token(Token = "0x4002075")]
		OutCirc,
		[Token(Token = "0x4002076")]
		InOutCirc,
		[Token(Token = "0x4002077")]
		Linear,
		[Token(Token = "0x4002078")]
		Spring,
		[Token(Token = "0x4002079")]
		InBounce,
		[Token(Token = "0x400207A")]
		OutBounce,
		[Token(Token = "0x400207B")]
		InOutBounce,
		[Token(Token = "0x400207C")]
		InBack,
		[Token(Token = "0x400207D")]
		OutBack,
		[Token(Token = "0x400207E")]
		InOutBack,
		[Token(Token = "0x400207F")]
		InElastic,
		[Token(Token = "0x4002080")]
		OutElastic,
		[Token(Token = "0x4002081")]
		InOutElastic,
		[Token(Token = "0x4002082")]
		Punch
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xA78FA0", Offset = "0xA78FA0", VA = "0xA78FA0")]
	public static float EaseUsingType(EaseType type, float t)
	{
		return default(float);
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xA79488", Offset = "0xA79488", VA = "0xA79488")]
	public static float InOutSmooth(float t)
	{
		return default(float);
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xA7A420", Offset = "0xA7A420", VA = "0xA7A420")]
	public static float Clerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xA79D68", Offset = "0xA79D68", VA = "0xA79D68")]
	public static float Spring(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xA794B4", Offset = "0xA794B4", VA = "0xA794B4")]
	public static float InQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0xA794C8", Offset = "0xA794C8", VA = "0xA794C8")]
	public static float OutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xA794E4", Offset = "0xA794E4", VA = "0xA794E4")]
	public static float InOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xA79538", Offset = "0xA79538", VA = "0xA79538")]
	public static float InCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xA79550", Offset = "0xA79550", VA = "0xA79550")]
	public static float OutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xA79578", Offset = "0xA79578", VA = "0xA79578")]
	public static float InOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xA795D0", Offset = "0xA795D0", VA = "0xA795D0")]
	public static float InQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xA795EC", Offset = "0xA795EC", VA = "0xA795EC")]
	public static float OutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xA79614", Offset = "0xA79614", VA = "0xA79614")]
	public static float InOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0xA79670", Offset = "0xA79670", VA = "0xA79670")]
	public static float InQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0xA79690", Offset = "0xA79690", VA = "0xA79690")]
	public static float OutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0xA796C0", Offset = "0xA796C0", VA = "0xA796C0")]
	public static float InOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0xA79728", Offset = "0xA79728", VA = "0xA79728")]
	public static float InSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xA797C0", Offset = "0xA797C0", VA = "0xA797C0")]
	public static float OutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0xA79854", Offset = "0xA79854", VA = "0xA79854")]
	public static float InOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xA798F8", Offset = "0xA798F8", VA = "0xA798F8")]
	public static float InExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0xA79990", Offset = "0xA79990", VA = "0xA79990")]
	public static float OutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0xA79A28", Offset = "0xA79A28", VA = "0xA79A28")]
	public static float InOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0xA79B18", Offset = "0xA79B18", VA = "0xA79B18")]
	public static float InCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xA79BC4", Offset = "0xA79BC4", VA = "0xA79BC4")]
	public static float OutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xA79C70", Offset = "0xA79C70", VA = "0xA79C70")]
	public static float InOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xA79E6C", Offset = "0xA79E6C", VA = "0xA79E6C")]
	public static float InBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xA79EA8", Offset = "0xA79EA8", VA = "0xA79EA8")]
	public static float OutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xA79F78", Offset = "0xA79F78", VA = "0xA79F78")]
	public static float InOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xA79FFC", Offset = "0xA79FFC", VA = "0xA79FFC")]
	public static float InBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xA7A02C", Offset = "0xA7A02C", VA = "0xA7A02C")]
	public static float OutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xA7A06C", Offset = "0xA7A06C", VA = "0xA7A06C")]
	public static float InOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xA7A4EC", Offset = "0xA7A4EC", VA = "0xA7A4EC")]
	public static float Punch(float amplitude, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xA7A0F0", Offset = "0xA7A0F0", VA = "0xA7A0F0")]
	public static float InElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xA7A1D8", Offset = "0xA7A1D8", VA = "0xA7A1D8")]
	public static float OutElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xA7A2BC", Offset = "0xA7A2BC", VA = "0xA7A2BC")]
	public static float InOutElastic(float start, float end, float value)
	{
		return default(float);
	}
}
[Token(Token = "0x20000D9")]
public class ErgoFrameworkDefaultSettings
{
	[Token(Token = "0x400055D")]
	public const string MENU_ERGO_FRAMEWORK = "Ergo Framework";

	[Token(Token = "0x400055E")]
	public const string MENU_HIERARCHY_CREATE = "Assets/Create/Ergo";

	[Token(Token = "0x400055F")]
	public const string FOLDERNAME_ERGO_FRAMEWORK = "ErgoFramework";

	[Token(Token = "0x4000560")]
	public const string FOLDERNAME_ERGO_FRAMEWORK_SETUP = "ErgoFrameworkSetup";

	[Token(Token = "0x4000561")]
	public const string FOLDERNAME_ERGO_AUTOGENERATED_CODE = "ErgoAutogeneratedCode";

	[Token(Token = "0x4000562")]
	public const string FOLDERNAME_CORE = "CORE";

	[Token(Token = "0x4000563")]
	public const string FOLDERNAME_GAME = "GAME";

	[Token(Token = "0x4000564")]
	public const string SO_ERGO_FRAMEWORK_SETUP = "ErgoFrameworkSetup";

	[Token(Token = "0x4000565")]
	public const string PATH_ASSETS = "Assets";

	[Token(Token = "0x4000566")]
	public const string PATH_RESOURCES = "Assets/Resources";

	[Token(Token = "0x4000567")]
	public const string PATH_FRAMEWORK = "Assets/ErgoFramework";

	[Token(Token = "0x4000568")]
	public const string PATH_AUTOGENERATED_CODE = "ErgoAutogeneratedCode";

	[Token(Token = "0x4000569")]
	public const string PATH_FRAMEWORK_SETUP = "Assets/ErgoFrameworkSetup";

	[Token(Token = "0x400056A")]
	public const string PATH_FRAMEWORK_SETUP_RESOURCES = "Assets/ErgoFrameworkSetup/Resources";

	[Token(Token = "0x400056B")]
	public const string PATH_FRAMEWORK_SETUP_OBJ = "Assets/ErgoFrameworkSetup/Resources/ErgoFrameworkSetup.asset";

	[Token(Token = "0x400056C")]
	public const string PATH_FRAMEWORK_DATA_TEMPLATES = "Assets/ErgoFramework/DataTemplates";

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string FLAG_DEBUG;

	[Token(Token = "0x400056E")]
	public const string SCN_INIT = "SCN_INIT";

	[Token(Token = "0x400056F")]
	public const string SCN_LOADING = "SCN_LOADING";

	[Token(Token = "0x4000570")]
	public const string SCN_INGAME_INIT = "SCN_INGAME_INIT";

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string[] SCENES_INIT_DEFAULT_ARRAY;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string[] SCENES_COMMON_DEFAULT_ARRAY;

	[Token(Token = "0x4000573")]
	public const string SCN_MAIN_MENU = "SCN_MAINMENU_PROTO";

	[Token(Token = "0x4000574")]
	public const string SCN_SHIP_HQ = "SCN_SHIP_HQ";

	[Token(Token = "0x4000575")]
	public const string SCN_TEMPLATE_GAMELEVEL = "SCN_TEMPLATE_GAMELEVEL";

	[Token(Token = "0x4000576")]
	public const string GAME_LEVELS_PATH = "Assets/ElementSpace_NewFolder/Scenes/GameLevels";

	[Token(Token = "0x4000577")]
	public const string PLAYMAKER_ON_RETURN_TO_MAIN_MENU = "ON_RETURN_TO_MAIN";

	[Token(Token = "0x4000578")]
	public const string PLAYMAKER_ON_LOAD_NEXT_LEVEL = "ON_LOAD_NEXT_LEVEL";

	[Token(Token = "0x4000579")]
	public const string PLAYMAKER_ON_LOAD_STRATEGIC_VIEW = "ON_LOAD_STRATEGIC_VIEW";

	[Token(Token = "0x400057A")]
	public const string PLAYMAKER_ON_GO_TO_LEVEL = "ON_GO_TO_LEVEL";

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xADCD80", Offset = "0xADCD80", VA = "0xADCD80")]
	public ErgoFrameworkDefaultSettings()
	{
	}
}
[Token(Token = "0x20000DA")]
public class GizmoSphere : MonoBehaviour
{
	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool gizmosEnabled;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scaleFactor;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 size;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color shpereColor;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color arrowColor;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 arrowEndPosition;

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xADE988", Offset = "0xADE988", VA = "0xADE988")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xADED60", Offset = "0xADED60", VA = "0xADED60")]
	public GizmoSphere()
	{
	}
}
[Token(Token = "0x20000DB")]
public class MotinGuiLog : MonoBehaviour
{
	[Token(Token = "0x20003DE")]
	private struct ConsoleMessage
	{
		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string message;

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string stackTrace;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly LogType type;

		[Token(Token = "0x600235F")]
		[Address(RVA = "0x86A830", Offset = "0x86A830", VA = "0x86A830")]
		public ConsoleMessage(string message, string stackTrace, LogType type)
		{
		}
	}

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static MotinGuiLog sharedInstance;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly System.Version version;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxMessages;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public KeyCode toggleKey;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<ConsoleMessage> entries;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 scrollPos;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool show;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool collapse;

	[Token(Token = "0x4000589")]
	private const int margin = 20;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Rect windowRect;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GUIContent clearLabel;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GUIContent collapseLabel;

	[Token(Token = "0x600072F")]
	[Address(RVA = "0x9E6A44", Offset = "0x9E6A44", VA = "0x9E6A44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0x9E6C18", Offset = "0x9E6C18", VA = "0x9E6C18")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0x9E6D90", Offset = "0x9E6D90", VA = "0x9E6D90")]
	private void UpdateWindowRect()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x9E6E08", Offset = "0x9E6E08", VA = "0x9E6E08", Slot = "4")]
	protected virtual void OnWillShow()
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x9E6E0C", Offset = "0x9E6E0C", VA = "0x9E6E0C", Slot = "5")]
	protected virtual void OnDismissed()
	{
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x9E6E10", Offset = "0x9E6E10", VA = "0x9E6E10", Slot = "6")]
	protected virtual void DrawTooolbar()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0x9E6E14", Offset = "0x9E6E14", VA = "0x9E6E14")]
	private void ConsoleWindow(int windowID)
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0x9E7448", Offset = "0x9E7448", VA = "0x9E7448")]
	private void HandleLog(string message, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0x9E751C", Offset = "0x9E751C", VA = "0x9E751C")]
	public MotinGuiLog()
	{
	}
}
[Token(Token = "0x20000DC")]
public class ABSHOTweenEditorElement : MonoBehaviour
{
	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<HOTweenManager.HOTweenData> tweenDatas;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float globalDelay;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float globalTimeScale;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int creationTime;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected bool destroyed;

	[Token(Token = "0x6000739")]
	[Address(RVA = "0x1304AC4", Offset = "0x1304AC4", VA = "0x1304AC4", Slot = "4")]
	protected virtual void DoDestroy()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0x1304AE0", Offset = "0x1304AE0", VA = "0x1304AE0")]
	public int TotEmptyTweens()
	{
		return default(int);
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x1304CFC", Offset = "0x1304CFC", VA = "0x1304CFC")]
	public int TotReadyTweens()
	{
		return default(int);
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x1304EF8", Offset = "0x1304EF8", VA = "0x1304EF8")]
	public ABSHOTweenEditorElement()
	{
	}
}
[Token(Token = "0x20000DD")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5308", Offset = "0x7D5308")]
public class HOTweenComponent : ABSHOTweenEditorElement
{
	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool destroyAfterSetup;

	[NonSerialized]
	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Tweener> generatedTweeners;

	[Token(Token = "0x600073D")]
	[Address(RVA = "0xAE3158", Offset = "0xAE3158", VA = "0xAE3158")]
	private void Awake()
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0xAE39B8", Offset = "0xAE39B8", VA = "0xAE39B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xAE39C4", Offset = "0xAE39C4", VA = "0xAE39C4", Slot = "4")]
	protected override void DoDestroy()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0xAE3A50", Offset = "0xAE3A50", VA = "0xAE3A50")]
	public HOTweenComponent()
	{
	}
}
[Token(Token = "0x20000DE")]
public class HOTweenManager : ABSHOTweenEditorElement
{
	[Serializable]
	[Token(Token = "0x20003DF")]
	public class HOTweenData
	{
		[Token(Token = "0x20004EE")]
		public enum OnCompleteActionType
		{
			[Token(Token = "0x400240C")]
			None,
			[Token(Token = "0x400240D")]
			PlayAll,
			[Token(Token = "0x400240E")]
			PlayTweensById,
			[Token(Token = "0x400240F")]
			SendMessage
		}

		[Token(Token = "0x20004EF")]
		public enum ParameterType
		{
			[Token(Token = "0x4002411")]
			None,
			[Token(Token = "0x4002412")]
			Color,
			[Token(Token = "0x4002413")]
			Number,
			[Token(Token = "0x4002414")]
			Object,
			[Token(Token = "0x4002415")]
			Quaternion,
			[Token(Token = "0x4002416")]
			Rect,
			[Token(Token = "0x4002417")]
			String,
			[Token(Token = "0x4002418")]
			Vector2,
			[Token(Token = "0x4002419")]
			Vector3,
			[Token(Token = "0x400241A")]
			Vector4
		}

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string _targetType;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Object target;

		[Token(Token = "0x4002088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject targetRoot;

		[Token(Token = "0x4002089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string _targetPath;

		[Token(Token = "0x400208A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string targetName;

		[Token(Token = "0x400208B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool foldout;

		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isActive;

		[Token(Token = "0x400208D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int creationTime;

		[Token(Token = "0x400208E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<HOPropData> propDatas;

		[Token(Token = "0x400208F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float duration;

		[Token(Token = "0x4002090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool tweenFrom;

		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool paused;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool autoKill;

		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UpdateType updateType;

		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float delay;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string id;

		[Token(Token = "0x4002096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LoopType loopType;

		[Token(Token = "0x4002097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int loops;

		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float timeScale;

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public EaseType easeType;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public OnCompleteActionType onCompleteActionType;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string onCompletePlayId;

		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject onCompleteTarget;

		[Token(Token = "0x400209D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string onCompleteMethodName;

		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ParameterType onCompleteParmType;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Color onCompleteParmColor;

		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float onCompleteParmNumber;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEngine.Object onCompleteParmObject;

		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Quaternion onCompleteParmQuaternion;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Rect onCompleteParmRect;

		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public string onCompleteParmString;

		[Token(Token = "0x40020A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Vector2 onCompleteParmVector2;

		[Token(Token = "0x40020A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Vector3 onCompleteParmVector3;

		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public Vector4 onCompleteParmVector4;

		[Token(Token = "0x1700036A")]
		public Type targetType
		{
			[Token(Token = "0x6002360")]
			[Address(RVA = "0xAE5404", Offset = "0xAE5404", VA = "0xAE5404")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036B")]
		public string targetPath
		{
			[Token(Token = "0x6002361")]
			[Address(RVA = "0xAE5490", Offset = "0xAE5490", VA = "0xAE5490")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036C")]
		public string partialTargetPath
		{
			[Token(Token = "0x6002362")]
			[Address(RVA = "0xAE55D4", Offset = "0xAE55D4", VA = "0xAE55D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002363")]
		[Address(RVA = "0xAE5648", Offset = "0xAE5648", VA = "0xAE5648")]
		public HOTweenData(int p_creationTime, GameObject p_targetRoot, UnityEngine.Object p_target, string p_targetPath)
		{
		}

		[Token(Token = "0x6002364")]
		[Address(RVA = "0xAE587C", Offset = "0xAE587C", VA = "0xAE587C")]
		public HOTweenData Clone(int p_creationTime)
		{
			return null;
		}
	}

	[Serializable]
	[Token(Token = "0x20003E0")]
	public class HOPropData
	{
		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string _propType;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string _pluginType;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string _valueType;

		[Token(Token = "0x40020AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string propName;

		[Token(Token = "0x40020AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string shortPropType;

		[Token(Token = "0x40020AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isRelative;

		[Token(Token = "0x40020AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isActive;

		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector2 endValVector2;

		[Token(Token = "0x40020B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 endValVector3;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector4 endValVector4;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float endValFloat;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int endValInt;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string endValString;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Color endValColor;

		[Token(Token = "0x1700036D")]
		public Type pluginType
		{
			[Token(Token = "0x6002366")]
			[Address(RVA = "0xAE4574", Offset = "0xAE4574", VA = "0xAE4574")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002365")]
			[Address(RVA = "0xAE4A08", Offset = "0xAE4A08", VA = "0xAE4A08")]
			set
			{
			}
		}

		[Token(Token = "0x1700036E")]
		public Type valueType
		{
			[Token(Token = "0x6002368")]
			[Address(RVA = "0xAE4C18", Offset = "0xAE4C18", VA = "0xAE4C18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002367")]
			[Address(RVA = "0xAE4B10", Offset = "0xAE4B10", VA = "0xAE4B10")]
			set
			{
			}
		}

		[Token(Token = "0x1700036F")]
		public Type propType
		{
			[Token(Token = "0x6002369")]
			[Address(RVA = "0xAE4CC8", Offset = "0xAE4CC8", VA = "0xAE4CC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000370")]
		public object endVal
		{
			[Token(Token = "0x600236A")]
			[Address(RVA = "0xAE4624", Offset = "0xAE4624", VA = "0xAE4624")]
			get
			{
				return null;
			}
			[Token(Token = "0x600236B")]
			[Address(RVA = "0xAE4D54", Offset = "0xAE4D54", VA = "0xAE4D54")]
			set
			{
			}
		}

		[Token(Token = "0x600236C")]
		[Address(RVA = "0xAE50F0", Offset = "0xAE50F0", VA = "0xAE50F0")]
		public HOPropData(string p_propName, Type p_propType)
		{
		}

		[Token(Token = "0x600236D")]
		[Address(RVA = "0xAE5290", Offset = "0xAE5290", VA = "0xAE5290")]
		public HOPropData Clone()
		{
			return null;
		}
	}

	[Token(Token = "0x20003E1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A8C", Offset = "0x7D8A8C")]
	private sealed class <>c__DisplayClass2_0
	{
		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HOTweenData p_twData;

		[Token(Token = "0x600236E")]
		[Address(RVA = "0xAE456C", Offset = "0xAE456C", VA = "0xAE456C")]
		public <>c__DisplayClass2_0()
		{
		}

		[Token(Token = "0x600236F")]
		[Address(RVA = "0xAE498C", Offset = "0xAE498C", VA = "0xAE498C")]
		internal void <CreateTween>b__1()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20003E2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8A9C", Offset = "0x7D8A9C")]
	private sealed class <>c
	{
		[Token(Token = "0x40020B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static TweenDelegate.TweenCallback <>9__2_0;

		[Token(Token = "0x6002371")]
		[Address(RVA = "0xAE4924", Offset = "0xAE4924", VA = "0xAE4924")]
		public <>c()
		{
		}

		[Token(Token = "0x6002372")]
		[Address(RVA = "0xAE492C", Offset = "0xAE492C", VA = "0xAE492C")]
		internal void <CreateTween>b__2_0()
		{
		}
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xAE434C", Offset = "0xAE434C", VA = "0xAE434C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xAE4484", Offset = "0xAE4484", VA = "0xAE4484", Slot = "4")]
	protected override void DoDestroy()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xAE32F8", Offset = "0xAE32F8", VA = "0xAE32F8")]
	public static Tweener CreateTween(HOTweenData p_twData, float p_globalDelay, float p_globalTimeScale)
	{
		return null;
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xAE48B8", Offset = "0xAE48B8", VA = "0xAE48B8")]
	public HOTweenManager()
	{
	}
}
[Token(Token = "0x20000DF")]
public class HOTweenDemoBrain : MonoBehaviour
{
	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform CubeTrans1;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform CubeTrans2;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform CubeTrans3;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string SampleString;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float SampleFloat;

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xAE3A60", Offset = "0xAE3A60", VA = "0xAE3A60")]
	private void Start()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xAE4108", Offset = "0xAE4108", VA = "0xAE4108")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xAE42D8", Offset = "0xAE42D8", VA = "0xAE42D8")]
	private void Cube2StepComplete()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xAE4344", Offset = "0xAE4344", VA = "0xAE4344")]
	public HOTweenDemoBrain()
	{
	}
}
[Token(Token = "0x20000E0")]
public class MiniJSON
{
	[Token(Token = "0x4000599")]
	private const int TOKEN_NONE = 0;

	[Token(Token = "0x400059A")]
	private const int TOKEN_CURLY_OPEN = 1;

	[Token(Token = "0x400059B")]
	private const int TOKEN_CURLY_CLOSE = 2;

	[Token(Token = "0x400059C")]
	private const int TOKEN_SQUARED_OPEN = 3;

	[Token(Token = "0x400059D")]
	private const int TOKEN_SQUARED_CLOSE = 4;

	[Token(Token = "0x400059E")]
	private const int TOKEN_COLON = 5;

	[Token(Token = "0x400059F")]
	private const int TOKEN_COMMA = 6;

	[Token(Token = "0x40005A0")]
	private const int TOKEN_STRING = 7;

	[Token(Token = "0x40005A1")]
	private const int TOKEN_NUMBER = 8;

	[Token(Token = "0x40005A2")]
	private const int TOKEN_TRUE = 9;

	[Token(Token = "0x40005A3")]
	private const int TOKEN_FALSE = 10;

	[Token(Token = "0x40005A4")]
	private const int TOKEN_NULL = 11;

	[Token(Token = "0x40005A5")]
	private const int BUILDER_CAPACITY = 2000;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static int lastErrorIndex;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static string lastDecode;

	[Token(Token = "0x6000749")]
	[Address(RVA = "0x9E1BEC", Offset = "0x9E1BEC", VA = "0x9E1BEC")]
	public static object jsonDecode(string json)
	{
		return null;
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0x9E1F88", Offset = "0x9E1F88", VA = "0x9E1F88")]
	public static string jsonEncode(object json)
	{
		return null;
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x9E24D4", Offset = "0x9E24D4", VA = "0x9E24D4")]
	public static bool lastDecodeSuccessful()
	{
		return default(bool);
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x9E2544", Offset = "0x9E2544", VA = "0x9E2544")]
	public static int getLastErrorIndex()
	{
		return default(int);
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x9E25AC", Offset = "0x9E25AC", VA = "0x9E25AC")]
	public static string getLastErrorSnippet()
	{
		return null;
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x9E2704", Offset = "0x9E2704", VA = "0x9E2704")]
	protected static Hashtable parseObject(char[] json, ref int index)
	{
		return null;
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x9E2F64", Offset = "0x9E2F64", VA = "0x9E2F64")]
	protected static ArrayList parseArray(char[] json, ref int index)
	{
		return null;
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x9E1D0C", Offset = "0x9E1D0C", VA = "0x9E1D0C")]
	protected static object parseValue(char[] json, ref int index, ref bool success)
	{
		return null;
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x9E2C48", Offset = "0x9E2C48", VA = "0x9E2C48")]
	protected static string parseString(char[] json, ref int index)
	{
		return null;
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x9E3100", Offset = "0x9E3100", VA = "0x9E3100")]
	protected static double parseNumber(char[] json, ref int index)
	{
		return default(double);
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x9E32E0", Offset = "0x9E32E0", VA = "0x9E32E0")]
	protected static int getLastIndexOfNumber(char[] json, int index)
	{
		return default(int);
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x9E321C", Offset = "0x9E321C", VA = "0x9E321C")]
	protected static void eatWhitespace(char[] json, ref int index)
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x9E2BCC", Offset = "0x9E2BCC", VA = "0x9E2BCC")]
	protected static int lookAhead(char[] json, int index)
	{
		return default(int);
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x9E28FC", Offset = "0x9E28FC", VA = "0x9E28FC")]
	protected static int nextToken(char[] json, ref int index)
	{
		return default(int);
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x9E339C", Offset = "0x9E339C", VA = "0x9E339C")]
	protected static bool serializeObjectOrArray(object objectOrArray, StringBuilder builder)
	{
		return default(bool);
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x9E3520", Offset = "0x9E3520", VA = "0x9E3520")]
	protected static bool serializeObject(Hashtable anObject, StringBuilder builder)
	{
		return default(bool);
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0x9E3B58", Offset = "0x9E3B58", VA = "0x9E3B58")]
	protected static bool serializeDictionary(Dictionary<string, string> dict, StringBuilder builder)
	{
		return default(bool);
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0x9E37B8", Offset = "0x9E37B8", VA = "0x9E37B8")]
	protected static bool serializeArray(ArrayList anArray, StringBuilder builder)
	{
		return default(bool);
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0x9E2040", Offset = "0x9E2040", VA = "0x9E2040")]
	protected static bool serializeValue(object value, StringBuilder builder)
	{
		return default(bool);
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x9E3910", Offset = "0x9E3910", VA = "0x9E3910")]
	protected static void serializeString(string aString, StringBuilder builder)
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0x9E3D24", Offset = "0x9E3D24", VA = "0x9E3D24")]
	protected static void serializeNumber(double number, StringBuilder builder)
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0x9E3DB4", Offset = "0x9E3DB4", VA = "0x9E3DB4")]
	public MiniJSON()
	{
	}
}
[Token(Token = "0x20000E1")]
public static class MiniJsonExtensions
{
	[Token(Token = "0x6000760")]
	[Address(RVA = "0x9E3E28", Offset = "0x9E3E28", VA = "0x9E3E28")]
	public static string toJson(this Hashtable obj)
	{
		return null;
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0x9E3E8C", Offset = "0x9E3E8C", VA = "0x9E3E8C")]
	public static string toJson(this Dictionary<string, string> obj)
	{
		return null;
	}

	[Token(Token = "0x6000762")]
	[Address(RVA = "0x9E3EF0", Offset = "0x9E3EF0", VA = "0x9E3EF0")]
	public static ArrayList arrayListFromJson(this string json)
	{
		return null;
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0x9E3F98", Offset = "0x9E3F98", VA = "0x9E3F98")]
	public static Hashtable hashtableFromJson(this string json)
	{
		return null;
	}
}
[Token(Token = "0x20000E2")]
internal enum MatchState
{
	[Token(Token = "0x40005A9")]
	HasSymbol = 1,
	[Token(Token = "0x40005AA")]
	HasMatch,
	[Token(Token = "0x40005AB")]
	HasSymbolAndMatch
}
[Token(Token = "0x20000E3")]
public class LuxWater_SetToGerstnerHeight : MonoBehaviour
{
	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material WaterMaterial;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 Damping;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TimeOffset;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UpdateWaterMaterialPerFrame;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DBAFC", Offset = "0x7DBAFC")]
	public bool AddCircleAnim;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float Radius;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float Speed;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DBB10", Offset = "0x7DBB10")]
	public Transform[] ManagedWaterProjectors;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DBB24", Offset = "0x7DBB24")]
	public float MaxDisp;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform trans;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LuxWaterUtils.GersterWavesDescription Description;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private bool ObjectIsVisible;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 Offset;

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xA67778", Offset = "0xA67778", VA = "0xA67778")]
	private void Start()
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0xA677AC", Offset = "0xA677AC", VA = "0xA677AC")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0xA677B8", Offset = "0xA677B8", VA = "0xA677B8")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0xA677C0", Offset = "0xA677C0", VA = "0xA677C0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0xA67ABC", Offset = "0xA67ABC", VA = "0xA67ABC")]
	public LuxWater_SetToGerstnerHeight()
	{
	}
}
[Token(Token = "0x20000E4")]
public class LuxWater_WaterVolumeListener : MonoBehaviour
{
	[Token(Token = "0x6000769")]
	[Address(RVA = "0xA67B80", Offset = "0xA67B80", VA = "0xA67B80")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xA67C14", Offset = "0xA67C14", VA = "0xA67C14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xA67CA8", Offset = "0xA67CA8", VA = "0xA67CA8")]
	private void Enter()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0xA67D14", Offset = "0xA67D14", VA = "0xA67D14")]
	private void Exit()
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0xA67D80", Offset = "0xA67D80", VA = "0xA67D80")]
	public LuxWater_WaterVolumeListener()
	{
	}
}
[Token(Token = "0x20000E5")]
public static class LuxWaterUtils
{
	[Token(Token = "0x20003E3")]
	public struct GersterWavesDescription
	{
		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 intensity;

		[Token(Token = "0x40020BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector4 steepness;

		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector4 amp;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector4 freq;

		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector4 speed;

		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector4 dirAB;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector4 dirCD;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector4 secondaryWaveParams;
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0xA66CD4", Offset = "0xA66CD4", VA = "0xA66CD4")]
	public static void GetGersterWavesDescription(ref GersterWavesDescription Description, Material WaterMaterial)
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0xA66E84", Offset = "0xA66E84", VA = "0xA66E84")]
	public static Vector3 InternalGetGestnerDisplacement(Vector2 xzVtx, Vector4 intensity, Vector4 steepness, Vector4 amp, Vector4 freq, Vector4 speed, Vector4 dirAB, Vector4 dirCD, float TimeOffset)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xA6716C", Offset = "0xA6716C", VA = "0xA6716C")]
	public static Vector3 GetGestnerDisplacement(Vector3 WorldPosition, GersterWavesDescription Description, float TimeOffset)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xA67508", Offset = "0xA67508", VA = "0xA67508")]
	public static Vector3 GetGestnerDisplacementSingle(Vector3 WorldPosition, GersterWavesDescription Description, float TimeOffset)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20000E6")]
[ExecuteInEditMode]
public class Water : MonoBehaviour
{
	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float UvRotateSpeed;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float UvRotateDistance;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float UvBumpRotateSpeed;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float UvBumpRotateDistance;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool depthTextureModeOn;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector2 lwVector;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector2 lwNVector;

	[Token(Token = "0x6000772")]
	[Address(RVA = "0x1608954", Offset = "0x1608954", VA = "0x1608954")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0x16089CC", Offset = "0x16089CC", VA = "0x16089CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0x1608A04", Offset = "0x1608A04", VA = "0x1608A04")]
	private void Update()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0x1608C48", Offset = "0x1608C48", VA = "0x1608C48")]
	public Water()
	{
	}
}
[Token(Token = "0x20000E7")]
public class WindZoneRot : MonoBehaviour
{
	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform tr;

	[Token(Token = "0x6000776")]
	[Address(RVA = "0x16092CC", Offset = "0x16092CC", VA = "0x16092CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0x16092F4", Offset = "0x16092F4", VA = "0x16092F4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0x1609474", Offset = "0x1609474", VA = "0x1609474")]
	public WindZoneRot()
	{
	}
}
[Token(Token = "0x20000E8")]
public class DrawVertices : MonoBehaviour
{
	[Token(Token = "0x6000779")]
	[Address(RVA = "0x9C24D4", Offset = "0x9C24D4", VA = "0x9C24D4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0x9C25EC", Offset = "0x9C25EC", VA = "0x9C25EC")]
	public DrawVertices()
	{
	}
}
[Token(Token = "0x20000E9")]
public class GloomyFrameworkConfig
{
	[Token(Token = "0x17000076")]
	public static Gloomy_ErgoFrameworkSetup_SO config
	{
		[Token(Token = "0x600077B")]
		[Address(RVA = "0xAE1318", Offset = "0xAE1318", VA = "0xAE1318")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xAE13C4", Offset = "0xAE13C4", VA = "0xAE13C4")]
	public GloomyFrameworkConfig()
	{
	}
}
[Token(Token = "0x20000EA")]
public class SCN_GLOOMY_BASE_FLOW : ErgoSceneFlow
{
	[Token(Token = "0x20003E4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8AAC", Offset = "0x7D8AAC")]
	private sealed class <DoOnFinishedInitialization>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SCN_GLOOMY_BASE_FLOW <>4__this;

		[Token(Token = "0x17000371")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002376")]
			[Address(RVA = "0xCE0C10", Offset = "0xCE0C10", VA = "0xCE0C10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000372")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002378")]
			[Address(RVA = "0xCE0C7C", Offset = "0xCE0C7C", VA = "0xCE0C7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002373")]
		[Address(RVA = "0xCE0B48", Offset = "0xCE0B48", VA = "0xCE0B48")]
		[DebuggerHidden]
		public <DoOnFinishedInitialization>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6002374")]
		[Address(RVA = "0xCE0B94", Offset = "0xCE0B94", VA = "0xCE0B94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002375")]
		[Address(RVA = "0xCE0B98", Offset = "0xCE0B98", VA = "0xCE0B98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002377")]
		[Address(RVA = "0xCE0C18", Offset = "0xCE0C18", VA = "0xCE0C18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TimelineController timelineController;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected float screenResolutionFactor;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	public int _MSAAFactor;

	[Token(Token = "0x17000077")]
	public float resolutionFactor
	{
		[Token(Token = "0x600077D")]
		[Address(RVA = "0xCE0A14", Offset = "0xCE0A14", VA = "0xCE0A14")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600077E")]
		[Address(RVA = "0xCE0A1C", Offset = "0xCE0A1C", VA = "0xCE0A1C")]
		set
		{
		}
	}

	[Token(Token = "0x17000078")]
	public int MSAAFactor
	{
		[Token(Token = "0x600077F")]
		[Address(RVA = "0xCE0A28", Offset = "0xCE0A28", VA = "0xCE0A28")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000780")]
		[Address(RVA = "0xCE0A30", Offset = "0xCE0A30", VA = "0xCE0A30")]
		set
		{
		}
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0xCE0A40", Offset = "0xCE0A40", VA = "0xCE0A40", Slot = "5")]
	protected override void DoStart()
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xCE0AD4", Offset = "0xCE0AD4", VA = "0xCE0AD4", Slot = "7")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0E44", Offset = "0x7E0E44")]
	protected override IEnumerator DoOnFinishedInitialization()
	{
		return null;
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0xCE0B74", Offset = "0xCE0B74", VA = "0xCE0B74", Slot = "8")]
	protected override void DoStartFlow()
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0xCE0B7C", Offset = "0xCE0B7C", VA = "0xCE0B7C")]
	public SCN_GLOOMY_BASE_FLOW()
	{
	}
}
[Token(Token = "0x20000EB")]
public class SCN_GLOOMY_CHAPTER_FLOW : SCN_GLOOMY_BASE_FLOW
{
	[Token(Token = "0x20003E5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8ABC", Offset = "0x7D8ABC")]
	private sealed class <DoOnFinishedInitialization>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SCN_GLOOMY_CHAPTER_FLOW <>4__this;

		[Token(Token = "0x17000373")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600237C")]
			[Address(RVA = "0xCE1394", Offset = "0xCE1394", VA = "0xCE1394", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000374")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600237E")]
			[Address(RVA = "0xCE1400", Offset = "0xCE1400", VA = "0xCE1400", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002379")]
		[Address(RVA = "0xCE0FC8", Offset = "0xCE0FC8", VA = "0xCE0FC8")]
		[DebuggerHidden]
		public <DoOnFinishedInitialization>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x600237A")]
		[Address(RVA = "0xCE1278", Offset = "0xCE1278", VA = "0xCE1278", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600237B")]
		[Address(RVA = "0xCE127C", Offset = "0xCE127C", VA = "0xCE127C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600237D")]
		[Address(RVA = "0xCE139C", Offset = "0xCE139C", VA = "0xCE139C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003E6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8ACC", Offset = "0x7D8ACC")]
	private sealed class <PrewarmAssets>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SCN_GLOOMY_CHAPTER_FLOW <>4__this;

		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<PlayableDirector> <timelines>5__2;

		[Token(Token = "0x40020CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <wasEnabled>5__3;

		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject[] <>7__wrap3;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int <>7__wrap4;

		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private InterpolationProfileManager[] <>7__wrap5;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int <>7__wrap6;

		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<PlayableDirector>.Enumerator <>7__wrap7;

		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayableDirector <director>5__9;

		[Token(Token = "0x17000375")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002383")]
			[Address(RVA = "0xCE2030", Offset = "0xCE2030", VA = "0xCE2030", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000376")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002385")]
			[Address(RVA = "0xCE209C", Offset = "0xCE209C", VA = "0xCE209C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600237F")]
		[Address(RVA = "0xCE1228", Offset = "0xCE1228", VA = "0xCE1228")]
		[DebuggerHidden]
		public <PrewarmAssets>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6002380")]
		[Address(RVA = "0xCE1408", Offset = "0xCE1408", VA = "0xCE1408", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002381")]
		[Address(RVA = "0xCE147C", Offset = "0xCE147C", VA = "0xCE147C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002382")]
		[Address(RVA = "0xCE1424", Offset = "0xCE1424", VA = "0xCE1424")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6002384")]
		[Address(RVA = "0xCE2038", Offset = "0xCE2038", VA = "0xCE2038", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SCN_GLOOMY_CHAPTER_FLOW instance;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ShaderVariantCollection shaderVariant;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public ShaderPrewarm shaderPrewarm;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool prewarmAssets;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool pauseOnStart;

	[Token(Token = "0x17000079")]
	public static SCN_GLOOMY_CHAPTER_FLOW sharedInstance
	{
		[Token(Token = "0x6000785")]
		[Address(RVA = "0xCE0C84", Offset = "0xCE0C84", VA = "0xCE0C84")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0xCE0CEC", Offset = "0xCE0CEC", VA = "0xCE0CEC", Slot = "4")]
	protected override void DoAwake()
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0xCE0D58", Offset = "0xCE0D58", VA = "0xCE0D58", Slot = "5")]
	protected override void DoStart()
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0xCE0DD0", Offset = "0xCE0DD0", VA = "0xCE0DD0")]
	private void OVRManager_HMDUnmounted()
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xCE0ED4", Offset = "0xCE0ED4", VA = "0xCE0ED4")]
	private void OVRManager_HMDmounted()
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0xCE0F54", Offset = "0xCE0F54", VA = "0xCE0F54", Slot = "7")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0EA8", Offset = "0x7E0EA8")]
	protected override IEnumerator DoOnFinishedInitialization()
	{
		return null;
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xCE0FF4", Offset = "0xCE0FF4", VA = "0xCE0FF4", Slot = "8")]
	protected override void DoStartFlow()
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xCE10E0", Offset = "0xCE10E0", VA = "0xCE10E0", Slot = "9")]
	protected override void DoOnAfterStartFlow()
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0xCE11B4", Offset = "0xCE11B4", VA = "0xCE11B4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0F0C", Offset = "0x7E0F0C")]
	private IEnumerator PrewarmAssets()
	{
		return null;
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0xCE1254", Offset = "0xCE1254", VA = "0xCE1254")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0xCE1258", Offset = "0xCE1258", VA = "0xCE1258")]
	public SCN_GLOOMY_CHAPTER_FLOW()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xCE1274", Offset = "0xCE1274", VA = "0xCE1274")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E0F70", Offset = "0x7E0F70")]
	[DebuggerHidden]
	private IEnumerator <>n__0()
	{
		return null;
	}
}
[Token(Token = "0x20000EC")]
public class SCN_GLOOMY_INIT_FLOW : ErgoApplicationInitFlow
{
	[Token(Token = "0x20003E7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8ADC", Offset = "0x7D8ADC")]
	private sealed class <DoOnFinishedInitialization>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SCN_GLOOMY_INIT_FLOW <>4__this;

		[Token(Token = "0x17000377")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002389")]
			[Address(RVA = "0xCE27C8", Offset = "0xCE27C8", VA = "0xCE27C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000378")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600238B")]
			[Address(RVA = "0xCE2834", Offset = "0xCE2834", VA = "0xCE2834", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002386")]
		[Address(RVA = "0xCE2118", Offset = "0xCE2118", VA = "0xCE2118")]
		[DebuggerHidden]
		public <DoOnFinishedInitialization>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6002387")]
		[Address(RVA = "0xCE2258", Offset = "0xCE2258", VA = "0xCE2258", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002388")]
		[Address(RVA = "0xCE225C", Offset = "0xCE225C", VA = "0xCE225C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600238A")]
		[Address(RVA = "0xCE27D0", Offset = "0xCE27D0", VA = "0xCE27D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isAppEntitlementOk;

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xCE20A4", Offset = "0xCE20A4", VA = "0xCE20A4", Slot = "7")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E0FA8", Offset = "0x7E0FA8")]
	protected override IEnumerator DoOnFinishedInitialization()
	{
		return null;
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xCE2144", Offset = "0xCE2144", VA = "0xCE2144", Slot = "8")]
	protected override void DoStartFlow()
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xCE2248", Offset = "0xCE2248", VA = "0xCE2248")]
	public SCN_GLOOMY_INIT_FLOW()
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xCE2250", Offset = "0xCE2250", VA = "0xCE2250")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E100C", Offset = "0x7E100C")]
	[DebuggerHidden]
	private IEnumerator <>n__0()
	{
		return null;
	}
}
[Token(Token = "0x20000ED")]
public class SCN_GLOOMY_LOADING_FLOW : ErgoLoadingFlow
{
	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform cameraTransform;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform cameraRigTransform;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform cameraStartPos;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 cameraForward;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 cameraPosition;

	[Token(Token = "0x6000796")]
	[Address(RVA = "0xCE283C", Offset = "0xCE283C", VA = "0xCE283C", Slot = "4")]
	protected override void DoAwake()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xCE2844", Offset = "0xCE2844", VA = "0xCE2844", Slot = "5")]
	protected override void DoStart()
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xCE2B24", Offset = "0xCE2B24", VA = "0xCE2B24", Slot = "11")]
	protected override void ShowFadeToBlack([Optional] Action OnComplete)
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xCE2B28", Offset = "0xCE2B28", VA = "0xCE2B28", Slot = "12")]
	protected override void DismissFadeToBlack([Optional] Action OnComplete)
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xCE286C", Offset = "0xCE286C", VA = "0xCE286C")]
	protected void SetCameraToStartPosition()
	{
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0xCE2B2C", Offset = "0xCE2B2C", VA = "0xCE2B2C")]
	protected void FocusCamera(Vector3 position, Vector3 forward)
	{
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xCE2DAC", Offset = "0xCE2DAC", VA = "0xCE2DAC")]
	private void HMDMounted()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xCE2EB0", Offset = "0xCE2EB0", VA = "0xCE2EB0")]
	private void HMDUnmounted()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xCE2FC8", Offset = "0xCE2FC8", VA = "0xCE2FC8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xCE3034", Offset = "0xCE3034", VA = "0xCE3034")]
	public SCN_GLOOMY_LOADING_FLOW()
	{
	}
}
[Token(Token = "0x20000EE")]
public class SCN_GLOOMY_MAINMENU_FLOW : SCN_GLOOMY_BASE_FLOW
{
	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SCN_GLOOMY_MAINMENU_FLOW instance;

	[Token(Token = "0x1700007A")]
	public static SCN_GLOOMY_MAINMENU_FLOW sharedInstance
	{
		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xCE30BC", Offset = "0xCE30BC", VA = "0xCE30BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xCE3124", Offset = "0xCE3124", VA = "0xCE3124", Slot = "4")]
	protected override void DoAwake()
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xCE3198", Offset = "0xCE3198", VA = "0xCE3198")]
	public SCN_GLOOMY_MAINMENU_FLOW()
	{
	}
}
[Token(Token = "0x20000EF")]
public class Gloomy_ErgoFrameworkSetup_SO : ErgoFrameworkSetup_SO
{
	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DBB8C", Offset = "0x7DBB8C")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DBB8C", Offset = "0x7DBB8C")]
	public string SCN_EP1;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string SCN_EP2;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public string SCN_EP3;

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xAE30E0", Offset = "0xAE30E0", VA = "0xAE30E0")]
	public Gloomy_ErgoFrameworkSetup_SO()
	{
	}
}
[Token(Token = "0x20000F0")]
public class GloomyAsset : ErgoBaseObject
{
	[Token(Token = "0x60007A5")]
	[Address(RVA = "0xADF38C", Offset = "0xADF38C", VA = "0xADF38C")]
	public GloomyAsset()
	{
	}
}
[Token(Token = "0x20000F1")]
public class GloomyAssetData : ErgoData
{
	[Token(Token = "0x60007A6")]
	[Address(RVA = "0xADF394", Offset = "0xADF394", VA = "0xADF394")]
	public GloomyAssetData()
	{
	}
}
[Token(Token = "0x20000F2")]
public class GloomyMenuPause : MonoBehaviour
{
	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioFadingManager fadinManager;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioListener audioListener;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isHMDTracking;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool isHMDMounted;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	private bool isPaused;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	private bool hasFocus;

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0xAE13CC", Offset = "0xAE13CC", VA = "0xAE13CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0xAE13D4", Offset = "0xAE13D4", VA = "0xAE13D4")]
	public void Pause()
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0xAE16E0", Offset = "0xAE16E0", VA = "0xAE16E0")]
	public void Resume()
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0xAE1900", Offset = "0xAE1900", VA = "0xAE1900")]
	public void PauseResume()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0xAE1910", Offset = "0xAE1910", VA = "0xAE1910")]
	private void HMDTrackingLost()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xAE1918", Offset = "0xAE1918", VA = "0xAE1918")]
	private void HMDTrackingAcquired()
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xAE19A0", Offset = "0xAE19A0", VA = "0xAE19A0")]
	private void HMDUnmounted()
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xAE1A1C", Offset = "0xAE1A1C", VA = "0xAE1A1C")]
	private void HMDMounted()
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xAE1AE0", Offset = "0xAE1AE0", VA = "0xAE1AE0")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xAE1BDC", Offset = "0xAE1BDC", VA = "0xAE1BDC")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xAE1D0C", Offset = "0xAE1D0C", VA = "0xAE1D0C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0xAE1D10", Offset = "0xAE1D10", VA = "0xAE1D10")]
	public GloomyMenuPause()
	{
	}
}
[Token(Token = "0x20000F3")]
public class GloomyPauseMenu : MonoBehaviour
{
	[Token(Token = "0x20003E8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8AEC", Offset = "0x7D8AEC")]
	private sealed class <DisableControllers>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GloomyPauseMenu <>4__this;

		[Token(Token = "0x17000379")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600238F")]
			[Address(RVA = "0xAE2CDC", Offset = "0xAE2CDC", VA = "0xAE2CDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002391")]
			[Address(RVA = "0xAE2D48", Offset = "0xAE2D48", VA = "0xAE2D48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600238C")]
		[Address(RVA = "0xAE1EA0", Offset = "0xAE1EA0", VA = "0xAE1EA0")]
		[DebuggerHidden]
		public <DisableControllers>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600238D")]
		[Address(RVA = "0xAE2BC4", Offset = "0xAE2BC4", VA = "0xAE2BC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600238E")]
		[Address(RVA = "0xAE2BC8", Offset = "0xAE2BC8", VA = "0xAE2BC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002390")]
		[Address(RVA = "0xAE2CE4", Offset = "0xAE2CE4", VA = "0xAE2CE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GloomyPauseMenu instance;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject player;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject head;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 playerPosition;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 playerRotation;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 initialRotation;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject controller1;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject laser1;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject controller2;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject laser2;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isHMDTracking;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool isHMDMounted;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	private bool isPaused;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float prevResolutionFactor;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool hasFocus;

	[Token(Token = "0x1700007B")]
	public static GloomyPauseMenu sharedInstance
	{
		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xAE1D28", Offset = "0xAE1D28", VA = "0xAE1D28")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xAE1D90", Offset = "0xAE1D90", VA = "0xAE1D90")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xAE1E00", Offset = "0xAE1E00", VA = "0xAE1E00")]
	private void Start()
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0xAE1E2C", Offset = "0xAE1E2C", VA = "0xAE1E2C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E1044", Offset = "0x7E1044")]
	private IEnumerator DisableControllers()
	{
		return null;
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0xAE1ECC", Offset = "0xAE1ECC", VA = "0xAE1ECC")]
	public void Pause()
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0xAE24EC", Offset = "0xAE24EC", VA = "0xAE24EC")]
	protected void RecenterPauseMenu()
	{
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0xAE21F0", Offset = "0xAE21F0", VA = "0xAE21F0")]
	protected void FocusCamera()
	{
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0xAE2618", Offset = "0xAE2618", VA = "0xAE2618")]
	public void Resume()
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0xAE2900", Offset = "0xAE2900", VA = "0xAE2900")]
	public void PauseResume()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xAE2910", Offset = "0xAE2910", VA = "0xAE2910")]
	private void HMDTrackingLost()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xAE2918", Offset = "0xAE2918", VA = "0xAE2918")]
	private void HMDTrackingAcquired()
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xAE2998", Offset = "0xAE2998", VA = "0xAE2998")]
	private void HMDUnmounted()
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0xAE29AC", Offset = "0xAE29AC", VA = "0xAE29AC")]
	private void HMDMounted()
	{
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0xAE2A34", Offset = "0xAE2A34", VA = "0xAE2A34")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0xAE2A50", Offset = "0xAE2A50", VA = "0xAE2A50")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0xAE2B04", Offset = "0xAE2B04", VA = "0xAE2B04")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0xAE2BA8", Offset = "0xAE2BA8", VA = "0xAE2BA8")]
	public GloomyPauseMenu()
	{
	}
}
[Token(Token = "0x20000F4")]
public class LoadingTextAnimator : MonoBehaviour
{
	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro txtPro;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private StringBuilder loadingBuilder;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string loadingText;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string loadingPoint;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int currentPoints;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float currentDelta;

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0xA5CFB4", Offset = "0xA5CFB4", VA = "0xA5CFB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xA5CFF4", Offset = "0xA5CFF4", VA = "0xA5CFF4")]
	private void Update()
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0xA5D0E8", Offset = "0xA5D0E8", VA = "0xA5D0E8")]
	public LoadingTextAnimator()
	{
	}
}
[Token(Token = "0x20000F5")]
public class RuntimeDebugUI : MonoBehaviour
{
	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector mainTimeline;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rigGObj;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject centerGObj;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject trackingGObj;

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0xCE0A0C", Offset = "0xCE0A0C", VA = "0xCE0A0C")]
	public RuntimeDebugUI()
	{
	}
}
[Token(Token = "0x20000F6")]
public class SceneController : MonoBehaviour
{
	[Token(Token = "0x20003E9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8AFC", Offset = "0x7D8AFC")]
	private sealed class <prepareAndStart>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneController <>4__this;

		[Token(Token = "0x40020DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <wasEnabled>5__2;

		[Token(Token = "0x40020DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<PlayableDirector>.Enumerator <>7__wrap2;

		[Token(Token = "0x40020DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PlayableDirector <director>5__4;

		[Token(Token = "0x40020DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform <tmpParent>5__5;

		[Token(Token = "0x40020DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animator[] <>7__wrap5;

		[Token(Token = "0x40020E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int <>7__wrap6;

		[Token(Token = "0x40020E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator <anim>5__8;

		[Token(Token = "0x1700037B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002396")]
			[Address(RVA = "0xCF0B0C", Offset = "0xCF0B0C", VA = "0xCF0B0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002398")]
			[Address(RVA = "0xCF0B78", Offset = "0xCF0B78", VA = "0xCF0B78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002392")]
		[Address(RVA = "0xCF02D8", Offset = "0xCF02D8", VA = "0xCF02D8")]
		[DebuggerHidden]
		public <prepareAndStart>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6002393")]
		[Address(RVA = "0xCF030C", Offset = "0xCF030C", VA = "0xCF030C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002394")]
		[Address(RVA = "0xCF0390", Offset = "0xCF0390", VA = "0xCF0390", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002395")]
		[Address(RVA = "0xCF0338", Offset = "0xCF0338", VA = "0xCF0338")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6002397")]
		[Address(RVA = "0xCF0B14", Offset = "0xCF0B14", VA = "0xCF0B14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector mainTimeline;

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0xCF0210", Offset = "0xCF0210", VA = "0xCF0210")]
	private void Start()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0xCF0264", Offset = "0xCF0264", VA = "0xCF0264")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E10A8", Offset = "0x7E10A8")]
	private IEnumerator prepareAndStart()
	{
		return null;
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xCF0304", Offset = "0xCF0304", VA = "0xCF0304")]
	public SceneController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000F7")]
public class ShaderPrewarm : MonoBehaviour
{
	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Material> allMaterials;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int size;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject cubePrefab;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform contentPivot;

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0xA6DAE0", Offset = "0xA6DAE0", VA = "0xA6DAE0")]
	public void FindAllMaterials()
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xA6DC5C", Offset = "0xA6DC5C", VA = "0xA6DC5C")]
	public void CreateCubes()
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xA6E050", Offset = "0xA6E050", VA = "0xA6E050")]
	public ShaderPrewarm()
	{
	}
}
[Token(Token = "0x20000F8")]
public class TMP_VersionNumber : MonoBehaviour
{
	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_Text txt_version;

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xA76578", Offset = "0xA76578", VA = "0xA76578")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xA7662C", Offset = "0xA7662C", VA = "0xA7662C")]
	public TMP_VersionNumber()
	{
	}
}
[Token(Token = "0x20000F9")]
public class bundle_test_init : MonoBehaviour
{
	[Token(Token = "0x60007D1")]
	[Address(RVA = "0x160AF0C", Offset = "0x160AF0C", VA = "0x160AF0C")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0x160B094", Offset = "0x160B094", VA = "0x160B094")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0x160B098", Offset = "0x160B098", VA = "0x160B098")]
	public bundle_test_init()
	{
	}
}
[Token(Token = "0x20000FA")]
public class buntle_test : MonoBehaviour
{
	[Token(Token = "0x60007D4")]
	[Address(RVA = "0x160B0A0", Offset = "0x160B0A0", VA = "0x160B0A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0x160B10C", Offset = "0x160B10C", VA = "0x160B10C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x160B260", Offset = "0x160B260", VA = "0x160B260")]
	public buntle_test()
	{
	}
}
[Token(Token = "0x20000FB")]
public class SpawnEffect : MonoBehaviour
{
	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float spawnEffectTime;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float pause;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve fadeIn;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timer;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer _renderer;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int shaderProperty;

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xA73ED0", Offset = "0xA73ED0", VA = "0xA73ED0")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xA73F98", Offset = "0xA73F98", VA = "0xA73F98")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xA740AC", Offset = "0xA740AC", VA = "0xA740AC")]
	public SpawnEffect()
	{
	}
}
[Token(Token = "0x20000FC")]
public class AchievementSample : MonoBehaviour
{
	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text dataOutput;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputField getDefinitionsByNameInputField;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public InputField getProgressByNameInputField;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InputField unLockInputField;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public InputField addCountInputField;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public InputField addFieldsInputField;

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xC13E20", Offset = "0xC13E20", VA = "0xC13E20")]
	private void Start()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xC13E80", Offset = "0xC13E80", VA = "0xC13E80")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0xC13EE0", Offset = "0xC13EE0", VA = "0xC13EE0")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xC140C0", Offset = "0xC140C0", VA = "0xC140C0")]
	private void Update()
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0xC140CC", Offset = "0xC140CC", VA = "0xC140CC")]
	public void AsyncInitialize()
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0xC1414C", Offset = "0xC1414C", VA = "0xC1414C")]
	public void GetDefinitionsByName()
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xC14340", Offset = "0xC14340", VA = "0xC14340")]
	public void GetProgressByName()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xC14534", Offset = "0xC14534", VA = "0xC14534")]
	public void GetAllDefinitions()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xC14660", Offset = "0xC14660", VA = "0xC14660")]
	public void GetAllProgress()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0xC1478C", Offset = "0xC1478C", VA = "0xC1478C")]
	public void UnLock()
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0xC14930", Offset = "0xC14930", VA = "0xC14930")]
	public void AddCount()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0xC14C44", Offset = "0xC14C44", VA = "0xC14C44")]
	public void AddFields()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0xC14014", Offset = "0xC14014", VA = "0xC14014")]
	private void achievementInit()
	{
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0xC145B4", Offset = "0xC145B4", VA = "0xC145B4")]
	private void getAchievementAllDefinition()
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0xC146E0", Offset = "0xC146E0", VA = "0xC146E0")]
	private void getAchievementAllProgress()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0xC14D94", Offset = "0xC14D94", VA = "0xC14D94")]
	private void addFieldsAchievement(string achievementName, string fields)
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0xC14B5C", Offset = "0xC14B5C", VA = "0xC14B5C")]
	private void addCountAchievement(string achievementName, string count)
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0xC1487C", Offset = "0xC1487C", VA = "0xC1487C")]
	private void unlockAchievement(string achievementName)
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0xC14480", Offset = "0xC14480", VA = "0xC14480")]
	private void getAchievementProgress(string[] achievementNames)
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0xC1428C", Offset = "0xC1428C", VA = "0xC1428C")]
	private void getAchievementDefinition(string[] achievementNames)
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0xC13F58", Offset = "0xC13F58", VA = "0xC13F58")]
	private void printOutputLine(string newLine)
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0xC14E50", Offset = "0xC14E50", VA = "0xC14E50")]
	private void achievementAllDefinitionCallback(Pvr_Message<Pvr_AchievementDefinitionList> msg)
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0xC1566C", Offset = "0xC1566C", VA = "0xC1566C")]
	private void achievementAllProgressCallback(Pvr_Message<Pvr_AchievementProgressList> msg)
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0xC15C84", Offset = "0xC15C84", VA = "0xC15C84")]
	private void achievementFieldsCallback(Pvr_Message msg)
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0xC15EE4", Offset = "0xC15EE4", VA = "0xC15EE4")]
	private void achievementCountCallback(Pvr_Message msg)
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0xC16144", Offset = "0xC16144", VA = "0xC16144")]
	private void achievementUnlockCallback(Pvr_Message msg)
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0xC163A4", Offset = "0xC163A4", VA = "0xC163A4")]
	private void achievementProgressCallback(Pvr_Message<Pvr_AchievementProgressList> msg)
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0xC168A8", Offset = "0xC168A8", VA = "0xC168A8")]
	private void achievementDefinitionCallback(Pvr_Message<Pvr_AchievementDefinitionList> msg)
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0xC16E24", Offset = "0xC16E24", VA = "0xC16E24")]
	private void initAchievementCallback(Pvr_Message msg)
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0xC17084", Offset = "0xC17084", VA = "0xC17084")]
	private void LoginCallback(string LoginInfo)
	{
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0xC1713C", Offset = "0xC1713C", VA = "0xC1713C")]
	public AchievementSample()
	{
	}
}
[Token(Token = "0x20000FD")]
public class Pvr_Controller : MonoBehaviour
{
	[Token(Token = "0x20003EA")]
	public enum UserHandNess
	{
		[Token(Token = "0x40020E3")]
		Right,
		[Token(Token = "0x40020E4")]
		Left
	}

	[Token(Token = "0x20003EB")]
	public enum GazeType
	{
		[Token(Token = "0x40020E6")]
		Never,
		[Token(Token = "0x40020E7")]
		DuringMotion,
		[Token(Token = "0x40020E8")]
		Always
	}

	[Token(Token = "0x20003EC")]
	public enum ControllerAxis
	{
		[Token(Token = "0x40020EA")]
		Controller,
		[Token(Token = "0x40020EB")]
		Wrist,
		[Token(Token = "0x40020EC")]
		Elbow,
		[Token(Token = "0x40020ED")]
		Shoulder
	}

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject controller0;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject controller1;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static UserHandNess handness;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ControllerAxis Axis;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public GazeType Gazetype;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DBBDC", Offset = "0x7DBBDC")]
	public float ElbowHeight;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DBBF8", Offset = "0x7DBBF8")]
	public float ElbowDepth;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DBC14", Offset = "0x7DBC14")]
	public float PointerTiltAngle;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float mouseX;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float mouseY;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float mouseZ;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3[] inputDirection;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DBC2C", Offset = "0x7DBC2C")]
	private static Vector3 <pointerPosition>k__BackingField;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DBC3C", Offset = "0x7DBC3C")]
	private static Quaternion <pointerRotation>k__BackingField;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DBC4C", Offset = "0x7DBC4C")]
	private static Vector3 <elbowPosition>k__BackingField;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DBC5C", Offset = "0x7DBC5C")]
	private static Quaternion <elbowRotation>k__BackingField;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DBC6C", Offset = "0x7DBC6C")]
	private static Vector3 <wristPosition>k__BackingField;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DBC7C", Offset = "0x7DBC7C")]
	private static Quaternion <wristRotation>k__BackingField;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DBC8C", Offset = "0x7DBC8C")]
	private static Vector3 <shoulderPosition>k__BackingField;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DBC9C", Offset = "0x7DBC9C")]
	private static Quaternion <shoulderRotation>k__BackingField;

	[Token(Token = "0x1700007C")]
	public static Vector3 pointerPosition
	{
		[Token(Token = "0x600080C")]
		[Address(RVA = "0x13EB284", Offset = "0x13EB284", VA = "0x13EB284")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E110C", Offset = "0x7E110C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600080D")]
		[Address(RVA = "0x13EB2D8", Offset = "0x13EB2D8", VA = "0x13EB2D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E111C", Offset = "0x7E111C")]
		set
		{
		}
	}

	[Token(Token = "0x1700007D")]
	public static Quaternion pointerRotation
	{
		[Token(Token = "0x600080E")]
		[Address(RVA = "0x13EB348", Offset = "0x13EB348", VA = "0x13EB348")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E112C", Offset = "0x7E112C")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x600080F")]
		[Address(RVA = "0x13EB39C", Offset = "0x13EB39C", VA = "0x13EB39C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E113C", Offset = "0x7E113C")]
		set
		{
		}
	}

	[Token(Token = "0x1700007E")]
	public static Vector3 elbowPosition
	{
		[Token(Token = "0x6000810")]
		[Address(RVA = "0x13EB410", Offset = "0x13EB410", VA = "0x13EB410")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E114C", Offset = "0x7E114C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000811")]
		[Address(RVA = "0x13EB464", Offset = "0x13EB464", VA = "0x13EB464")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E115C", Offset = "0x7E115C")]
		set
		{
		}
	}

	[Token(Token = "0x1700007F")]
	public static Quaternion elbowRotation
	{
		[Token(Token = "0x6000812")]
		[Address(RVA = "0x13EB4D4", Offset = "0x13EB4D4", VA = "0x13EB4D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E116C", Offset = "0x7E116C")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000813")]
		[Address(RVA = "0x13EB528", Offset = "0x13EB528", VA = "0x13EB528")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E117C", Offset = "0x7E117C")]
		set
		{
		}
	}

	[Token(Token = "0x17000080")]
	public static Vector3 wristPosition
	{
		[Token(Token = "0x6000814")]
		[Address(RVA = "0x13EB59C", Offset = "0x13EB59C", VA = "0x13EB59C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E118C", Offset = "0x7E118C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000815")]
		[Address(RVA = "0x13EB5F0", Offset = "0x13EB5F0", VA = "0x13EB5F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E119C", Offset = "0x7E119C")]
		set
		{
		}
	}

	[Token(Token = "0x17000081")]
	public static Quaternion wristRotation
	{
		[Token(Token = "0x6000816")]
		[Address(RVA = "0x13EB660", Offset = "0x13EB660", VA = "0x13EB660")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E11AC", Offset = "0x7E11AC")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000817")]
		[Address(RVA = "0x13EB6B4", Offset = "0x13EB6B4", VA = "0x13EB6B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E11BC", Offset = "0x7E11BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000082")]
	public static Vector3 shoulderPosition
	{
		[Token(Token = "0x6000818")]
		[Address(RVA = "0x13EB728", Offset = "0x13EB728", VA = "0x13EB728")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E11CC", Offset = "0x7E11CC")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000819")]
		[Address(RVA = "0x13EB77C", Offset = "0x13EB77C", VA = "0x13EB77C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E11DC", Offset = "0x7E11DC")]
		set
		{
		}
	}

	[Token(Token = "0x17000083")]
	public static Quaternion shoulderRotation
	{
		[Token(Token = "0x600081A")]
		[Address(RVA = "0x13EB7EC", Offset = "0x13EB7EC", VA = "0x13EB7EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E11EC", Offset = "0x7E11EC")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x600081B")]
		[Address(RVA = "0x13EB840", Offset = "0x13EB840", VA = "0x13EB840")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E11FC", Offset = "0x7E11FC")]
		set
		{
		}
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x13E8AD8", Offset = "0x13E8AD8", VA = "0x13E8AD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x13E8FD4", Offset = "0x13E8FD4", VA = "0x13E8FD4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x13E9044", Offset = "0x13E9044", VA = "0x13E9044")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x13E9520", Offset = "0x13E9520", VA = "0x13E9520")]
	private void MainControllerChanged(string index)
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0x13E95C8", Offset = "0x13E95C8", VA = "0x13E95C8")]
	private void HandnessChanged(string index)
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x13E95CC", Offset = "0x13E95CC", VA = "0x13E95CC")]
	private void ServiceStartSuccess()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x13E9524", Offset = "0x13E9524", VA = "0x13E9524")]
	private void RefreshHandness()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x13E962C", Offset = "0x13E962C", VA = "0x13E962C")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0x13E97B8", Offset = "0x13E97B8", VA = "0x13E97B8")]
	private void ShowController()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x13E9920", Offset = "0x13E9920", VA = "0x13E9920")]
	private void CheckControllerState(string data)
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x13E99F8", Offset = "0x13E99F8", VA = "0x13E99F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x13E95D0", Offset = "0x13E95D0", VA = "0x13E95D0")]
	public static void ChangeHandNess()
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x13E9C04", Offset = "0x13E9C04", VA = "0x13E9C04")]
	private void DoUpdateControler0()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0x13E9C80", Offset = "0x13E9C80", VA = "0x13E9C80")]
	private void DoUpdateControler1()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x13E9D04", Offset = "0x13E9D04", VA = "0x13E9D04")]
	private void UpdateControlloerRay(bool update0 = true, bool update1 = true)
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x13EB0A0", Offset = "0x13EB0A0", VA = "0x13EB0A0")]
	private Quaternion UpdateSimulatedFrameParams()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x13E9E54", Offset = "0x13E9E54", VA = "0x13E9E54")]
	private void SetArmParaToSo(int hand, int gazeType, float elbowHeight, float elbowDepth, float pointerTiltAngle)
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x13E9E64", Offset = "0x13E9E64", VA = "0x13E9E64")]
	private void CalcArmModelfromSo(int hand)
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x13EA344", Offset = "0x13EA344", VA = "0x13EA344")]
	public void UpdateControllerDataSO(int hand)
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0x13EB8B4", Offset = "0x13EB8B4", VA = "0x13EB8B4")]
	public Pvr_Controller()
	{
	}
}
[Token(Token = "0x20000FE")]
public class Pvr_ControllerDemo : MonoBehaviour
{
	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject HeadSetController;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject controller0;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject controller1;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject cube;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Ray ray;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject currentController;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform lastHit;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform currentHit;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Material normat;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Material gazemat;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Material clickmat;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool noClick;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject referenceObj;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float rayDefaultLength;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool isHasController;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	private bool headcontrolmode;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private RaycastHit hit;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject rayLine;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private GameObject dot;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Transform dragObj;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float disX;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float disY;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float disZ;

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x13EB91C", Offset = "0x13EB91C", VA = "0x13EB91C")]
	private void Start()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x13EBC88", Offset = "0x13EBC88", VA = "0x13EBC88")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x13EBF6C", Offset = "0x13EBF6C", VA = "0x13EBF6C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0x13ED858", Offset = "0x13ED858", VA = "0x13ED858")]
	private void ServiceStartSuccess()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0x13ED8F0", Offset = "0x13ED8F0", VA = "0x13ED8F0")]
	private void ControllerStateListener(string data)
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0x13ED988", Offset = "0x13ED988", VA = "0x13ED988")]
	private void CheckControllerStateForGoblin(string state)
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0x13EDA24", Offset = "0x13EDA24", VA = "0x13EDA24")]
	public void SwitchControlMode()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0x13EDA28", Offset = "0x13EDA28", VA = "0x13EDA28")]
	public Pvr_ControllerDemo()
	{
	}
}
[Token(Token = "0x20000FF")]
public class Pvr_ControllerEventsExamples : MonoBehaviour
{
	[Token(Token = "0x6000825")]
	[Address(RVA = "0x13EDA38", Offset = "0x13EDA38", VA = "0x13EDA38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0x13EDC74", Offset = "0x13EDC74", VA = "0x13EDC74")]
	private void UIPointerElementEnter(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0x13EDD14", Offset = "0x13EDD14", VA = "0x13EDD14")]
	private void UIPointerElementExit(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x13EDDB4", Offset = "0x13EDDB4", VA = "0x13EDDB4")]
	private void UIPointerElementClick(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0x13EDE54", Offset = "0x13EDE54", VA = "0x13EDE54")]
	private void UIPointerElementDragStart(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x13EDEF4", Offset = "0x13EDEF4", VA = "0x13EDEF4")]
	private void UIPointerElementDragEnd(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0x13EDF94", Offset = "0x13EDF94", VA = "0x13EDF94")]
	public Pvr_ControllerEventsExamples()
	{
	}
}
[Token(Token = "0x2000100")]
public class Pvr_ControllerInit : MonoBehaviour
{
	[Token(Token = "0x20003ED")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B0C", Offset = "0x7D8B0C")]
	private sealed class <RefreshController>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int id;

		[Token(Token = "0x40020F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Pvr_ControllerInit <>4__this;

		[Token(Token = "0x1700037D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600239C")]
			[Address(RVA = "0x13EFE58", Offset = "0x13EFE58", VA = "0x13EFE58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600239E")]
			[Address(RVA = "0x13EFEC4", Offset = "0x13EFEC4", VA = "0x13EFEC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002399")]
		[Address(RVA = "0x13EEDDC", Offset = "0x13EEDDC", VA = "0x13EEDDC")]
		[DebuggerHidden]
		public <RefreshController>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x600239A")]
		[Address(RVA = "0x13EFA74", Offset = "0x13EFA74", VA = "0x13EFA74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600239B")]
		[Address(RVA = "0x13EFA78", Offset = "0x13EFA78", VA = "0x13EFA78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600239D")]
		[Address(RVA = "0x13EFE60", Offset = "0x13EFE60", VA = "0x13EFE60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ControllerVariety Variety;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool isCustomModel;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject goblin;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject g2;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject neo2L;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject neo2R;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject neo3L;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject neo3R;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Material standardMat;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Material unlitMat;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int controllerType;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[HideInInspector]
	public bool loadModelSuccess;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int systemOrUnity;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private JsonData curControllerData;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string modelName;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string texFormat;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private string prePath;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private string modelFilePath;

	[Token(Token = "0x4000642")]
	private const string goblinTexbasePath = "Controller/controller1/controller1";

	[Token(Token = "0x4000643")]
	private const string g2TexbasePath = "Controller/controller3/controller3";

	[Token(Token = "0x4000644")]
	private const string neo2TexbasePath = "Controller/controller4/controller4";

	[Token(Token = "0x4000645")]
	private const string neo3TexbasePath = "Controller/controller5/controller5";

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x13EDF9C", Offset = "0x13EDF9C", VA = "0x13EDF9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x13EE100", Offset = "0x13EE100", VA = "0x13EE100")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x13EE1F0", Offset = "0x13EE1F0", VA = "0x13EE1F0")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x13EE4C4", Offset = "0x13EE4C4", VA = "0x13EE4C4")]
	private void ServiceStartSuccess()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x13EE6C0", Offset = "0x13EE6C0", VA = "0x13EE6C0")]
	private void LoadResFromJson()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x13EE8B4", Offset = "0x13EE8B4", VA = "0x13EE8B4")]
	private void CheckControllerStateForGoblin(string state)
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x13EEC74", Offset = "0x13EEC74", VA = "0x13EEC74")]
	private void CheckControllerStateOfAbility(string data)
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x13EE1FC", Offset = "0x13EE1FC", VA = "0x13EE1FC")]
	private void DestroyLocalController()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x13EE9A0", Offset = "0x13EE9A0", VA = "0x13EE9A0")]
	private void DestroySysController()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x13EE830", Offset = "0x13EE830", VA = "0x13EE830")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E120C", Offset = "0x7E120C")]
	private IEnumerator RefreshController(int id)
	{
		return null;
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x13EEE08", Offset = "0x13EEE08", VA = "0x13EEE08")]
	private void LoadControllerFromPrefab()
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x13EF3C4", Offset = "0x13EF3C4", VA = "0x13EF3C4")]
	private void LoadControllerFromSystem(int id)
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x13EF0C8", Offset = "0x13EF0C8", VA = "0x13EF0C8")]
	private void LoadTexture(Pvr_ControllerVisual visual, string controllerName, bool fromRes)
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x13EF7DC", Offset = "0x13EF7DC", VA = "0x13EF7DC")]
	private Texture2D LoadOneTexture(string filepath, bool fromRes)
	{
		return null;
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x13EF8F0", Offset = "0x13EF8F0", VA = "0x13EF8F0")]
	private byte[] ReadPNG(string path)
	{
		return null;
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x13EFA00", Offset = "0x13EFA00", VA = "0x13EFA00")]
	public Pvr_ControllerInit()
	{
	}
}
[Token(Token = "0x2000101")]
public class Pvr_ControllerLink
{
	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AndroidJavaClass javaHummingbirdClass;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AndroidJavaClass javaPico2ReceiverClass;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AndroidJavaClass javaserviceClass;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AndroidJavaClass javavractivityclass;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AndroidJavaClass javaCVClass;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AndroidJavaObject activity;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string gameobjname;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool picoDevice;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string hummingBirdMac;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int hummingBirdRSSI;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool goblinserviceStarted;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool neoserviceStarted;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	public bool controller0Connected;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	public bool controller1Connected;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int mainHandID;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Pvr_Controller.UserHandNess handness;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int controllerType;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ControllerHand Controller0;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ControllerHand Controller1;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int platFormType;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int trackingmode;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public int systemProp;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int enablehand6dofbyhead;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool switchHomeKey;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private int iPhoneHMDModeEnabled;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float[] hbPoseData;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float[] sensorData;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int[] keyData;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int[] neo3TouchValue;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float[] fixedState;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float[] neoposeData;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private int[] goblinKeyArray;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private int[] neoKeyArray;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int[] neotriggerV;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float[] velocity;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float[] angularVelocity;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float[] acceData;

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x13EFECC", Offset = "0x13EFECC", VA = "0x13EFECC")]
	public Pvr_ControllerLink(string name)
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x13F025C", Offset = "0x13F025C", VA = "0x13F025C")]
	private void StartHummingBirdService()
	{
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x13F0CA8", Offset = "0x13F0CA8", VA = "0x13F0CA8")]
	public bool IsServiceExisted()
	{
		return default(bool);
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x13F0A4C", Offset = "0x13F0A4C", VA = "0x13F0A4C")]
	public void SetGameObjectToJar(string name)
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x13F0B5C", Offset = "0x13F0B5C", VA = "0x13F0B5C")]
	public void BindService()
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0x13F0E30", Offset = "0x13F0E30", VA = "0x13F0E30")]
	public void UnBindService()
	{
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0x13F0F7C", Offset = "0x13F0F7C", VA = "0x13F0F7C")]
	public void StopLark2Receiver()
	{
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0x13F10D8", Offset = "0x13F10D8", VA = "0x13F10D8")]
	public void StartLark2Receiver()
	{
	}

	[Token(Token = "0x6000844")]
	[Address(RVA = "0x13F11FC", Offset = "0x13F11FC", VA = "0x13F11FC")]
	public void StopLark2Service()
	{
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0x13F1358", Offset = "0x13F1358", VA = "0x13F1358")]
	public void StartLark2Service()
	{
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0x13F14E0", Offset = "0x13F14E0", VA = "0x13F14E0")]
	public int getHandness()
	{
		return default(int);
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0x13F16F0", Offset = "0x13F16F0", VA = "0x13F16F0")]
	public void setHandness(int hand)
	{
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0x13F184C", Offset = "0x13F184C", VA = "0x13F184C")]
	public void StartScan()
	{
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0x13F1968", Offset = "0x13F1968", VA = "0x13F1968")]
	public void StopScan()
	{
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0x13F08D8", Offset = "0x13F08D8", VA = "0x13F08D8")]
	public int GetSysproc()
	{
		return default(int);
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0x13F1A88", Offset = "0x13F1A88", VA = "0x13F1A88")]
	public void ResetController(int num)
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0x13F1C90", Offset = "0x13F1C90", VA = "0x13F1C90")]
	public void ConnectBLE()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0x13F1DCC", Offset = "0x13F1DCC", VA = "0x13F1DCC")]
	public void DisConnectBLE()
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0x13F1EEC", Offset = "0x13F1EEC", VA = "0x13F1EEC")]
	public bool StartUpgrade()
	{
		return default(bool);
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0x13F2028", Offset = "0x13F2028", VA = "0x13F2028")]
	public void setBinPath(string path, bool isasset)
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0x13F21A0", Offset = "0x13F21A0", VA = "0x13F21A0")]
	public string GetBLEImageType()
	{
		return null;
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x13F2304", Offset = "0x13F2304", VA = "0x13F2304")]
	public long GetBLEVersion()
	{
		return default(long);
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0x13F246C", Offset = "0x13F246C", VA = "0x13F246C")]
	public string GetFileImageType()
	{
		return null;
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0x13F25D0", Offset = "0x13F25D0", VA = "0x13F25D0")]
	public long GetFileVersion()
	{
		return default(long);
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0x13F2738", Offset = "0x13F2738", VA = "0x13F2738")]
	public int GetControllerConnectionState(int num)
	{
		return default(int);
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0x13F2A7C", Offset = "0x13F2A7C", VA = "0x13F2A7C")]
	public void RebackToLauncher()
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0x13F2C64", Offset = "0x13F2C64", VA = "0x13F2C64")]
	public void TurnUpVolume()
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0x13F2DE0", Offset = "0x13F2DE0", VA = "0x13F2DE0")]
	public void TurnDownVolume()
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0x13F2F5C", Offset = "0x13F2F5C", VA = "0x13F2F5C")]
	public float[] GetHBControllerPoseData()
	{
		return null;
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0x13F332C", Offset = "0x13F332C", VA = "0x13F332C")]
	public float[] GetControllerSensorData()
	{
		return null;
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x13F34FC", Offset = "0x13F34FC", VA = "0x13F34FC")]
	public int[] GetControllerKeyData()
	{
		return null;
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x13F3600", Offset = "0x13F3600", VA = "0x13F3600")]
	public int[] GetNeo3TouchData(int hand)
	{
		return null;
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0x13F3D7C", Offset = "0x13F3D7C", VA = "0x13F3D7C")]
	public int GetNeo3GripValue(int hand)
	{
		return default(int);
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0x13F3F10", Offset = "0x13F3F10", VA = "0x13F3F10")]
	public float[] GetControllerFixedSensorState(int hand)
	{
		return null;
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x13F44BC", Offset = "0x13F44BC", VA = "0x13F44BC")]
	public float[] GetCvControllerPoseData(int hand)
	{
		return null;
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x13F4A90", Offset = "0x13F4A90", VA = "0x13F4A90")]
	public int[] GetHBControllerKeyData()
	{
		return null;
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0x13F5D94", Offset = "0x13F5D94", VA = "0x13F5D94")]
	public int GetHBKeyValue()
	{
		return default(int);
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x13F5F34", Offset = "0x13F5F34", VA = "0x13F5F34")]
	public int[] GetCvControllerKeyData(int hand)
	{
		return null;
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x13F79D0", Offset = "0x13F79D0", VA = "0x13F79D0")]
	public int GetCVTriggerValue(int hand)
	{
		return default(int);
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x13F7B8C", Offset = "0x13F7B8C", VA = "0x13F7B8C")]
	public void AutoConnectHbController(int scanTimeMs)
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0x13F7D08", Offset = "0x13F7D08", VA = "0x13F7D08")]
	public void StartControllerThread(int headSensorState, int handSensorState)
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0x13F7ED0", Offset = "0x13F7ED0", VA = "0x13F7ED0")]
	public void StopControllerThread(int headSensorState, int handSensorState)
	{
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x13F8098", Offset = "0x13F8098", VA = "0x13F8098")]
	public void SetUnityVersionToJar(string version)
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0x13F81B8", Offset = "0x13F81B8", VA = "0x13F81B8")]
	public Vector3 GetVelocity(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0x13F852C", Offset = "0x13F852C", VA = "0x13F852C")]
	public Vector3 GetAngularVelocity(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x13F8938", Offset = "0x13F8938", VA = "0x13F8938")]
	public Vector3 GetAcceleration(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x13F8CE4", Offset = "0x13F8CE4", VA = "0x13F8CE4")]
	public string GetConnectedDeviceMac()
	{
		return null;
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x13F8E48", Offset = "0x13F8E48", VA = "0x13F8E48")]
	public void VibrateNeo2Controller(float strength, int time, int hand)
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0x13F9128", Offset = "0x13F9128", VA = "0x13F9128")]
	public int GetMainControllerIndex()
	{
		return default(int);
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0x13F92A0", Offset = "0x13F92A0", VA = "0x13F92A0")]
	public void SetMainController(int index)
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0x13F93F8", Offset = "0x13F93F8", VA = "0x13F93F8")]
	public void ResetHeadSensorForController()
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0x13F9520", Offset = "0x13F9520", VA = "0x13F9520")]
	public void GetDeviceVersion(int deviceType)
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0x13F9680", Offset = "0x13F9680", VA = "0x13F9680")]
	public void GetControllerSnCode(int controllerSerialNum)
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x13F97E0", Offset = "0x13F97E0", VA = "0x13F97E0")]
	public void SetControllerUnbind(int controllerSerialNum)
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0x13F9940", Offset = "0x13F9940", VA = "0x13F9940")]
	public void SetStationRestart()
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0x13F9A68", Offset = "0x13F9A68", VA = "0x13F9A68")]
	public void StartStationOtaUpdate()
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0x13F9B90", Offset = "0x13F9B90", VA = "0x13F9B90")]
	public void StartControllerOtaUpdate(int mode, int controllerSerialNum)
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0x13F9D50", Offset = "0x13F9D50", VA = "0x13F9D50")]
	public void EnterPairMode(int controllerSerialNum)
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x13F9EB0", Offset = "0x13F9EB0", VA = "0x13F9EB0")]
	public void SetControllerShutdown(int controllerSerialNum)
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0x13FA010", Offset = "0x13FA010", VA = "0x13FA010")]
	public int GetStationPairState()
	{
		return default(int);
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0x13FA18C", Offset = "0x13FA18C", VA = "0x13FA18C")]
	public int GetStationOtaUpdateProgress()
	{
		return default(int);
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0x13FA308", Offset = "0x13FA308", VA = "0x13FA308")]
	public int GetControllerOtaUpdateProgress()
	{
		return default(int);
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0x13FA484", Offset = "0x13FA484", VA = "0x13FA484")]
	public void GetControllerVersionAndSN(int controllerSerialNum)
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0x13FA5E4", Offset = "0x13FA5E4", VA = "0x13FA5E4")]
	public void GetControllerUniqueID()
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0x13FA70C", Offset = "0x13FA70C", VA = "0x13FA70C")]
	public void InterruptStationPairMode()
	{
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0x13FA834", Offset = "0x13FA834", VA = "0x13FA834")]
	public int GetControllerAbility(int controllerSerialNum)
	{
		return default(int);
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0x13FA9B0", Offset = "0x13FA9B0", VA = "0x13FA9B0")]
	public void SwitchHomeKey(bool state)
	{
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0x13FAA64", Offset = "0x13FAA64", VA = "0x13FAA64")]
	public void SetBootReconnect()
	{
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0x13FAB84", Offset = "0x13FAB84", VA = "0x13FAB84")]
	public int GetTemperature()
	{
		return default(int);
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0x13FACF8", Offset = "0x13FACF8", VA = "0x13FACF8")]
	public int GetDeviceType()
	{
		return default(int);
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0x13FAE6C", Offset = "0x13FAE6C", VA = "0x13FAE6C")]
	public int GetControllerType()
	{
		return default(int);
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0x13FAF74", Offset = "0x13FAF74", VA = "0x13FAF74")]
	public string GetHummingBird2SN()
	{
		return null;
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0x13FB0D0", Offset = "0x13FB0D0", VA = "0x13FB0D0")]
	public string GetControllerVersion()
	{
		return null;
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x13FB22C", Offset = "0x13FB22C", VA = "0x13FB22C")]
	public bool IsEnbleTrigger()
	{
		return default(bool);
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0x13FB38C", Offset = "0x13FB38C", VA = "0x13FB38C")]
	public void StartCV2PairingMode(int devicetype)
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0x13FB4EC", Offset = "0x13FB4EC", VA = "0x13FB4EC")]
	public void StopCV2PairingMode(int devicetype)
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0x13FB64C", Offset = "0x13FB64C", VA = "0x13FB64C")]
	public int GetControllerBindingState(int id)
	{
		return default(int);
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x13FB7B8", Offset = "0x13FB7B8", VA = "0x13FB7B8")]
	public void setIsEnbleHomeKey(bool state)
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x13FB908", Offset = "0x13FB908", VA = "0x13FB908")]
	public int getControllerSensorStatus(int id)
	{
		return default(int);
	}
}
[Token(Token = "0x2000102")]
public class Pvr_ControllerManager : MonoBehaviour
{
	[Token(Token = "0x20003EE")]
	public delegate void PvrServiceStartSuccess();

	[Token(Token = "0x20003EF")]
	public delegate void PvrControllerStateChanged(string data);

	[Token(Token = "0x20003F0")]
	public delegate void ChangeMainControllerCallBack(string index);

	[Token(Token = "0x20003F1")]
	public delegate void ChangeHandNessCallBack(string index);

	[Token(Token = "0x20003F2")]
	public delegate void SetHbServiceBindState();

	[Token(Token = "0x20003F3")]
	public delegate void ControllerThreadStartedCallback();

	[Token(Token = "0x20003F4")]
	public delegate void SetControllerServiceBindState();

	[Token(Token = "0x20003F5")]
	public delegate void ControllerStatusChange(string isconnect);

	[Token(Token = "0x20003F6")]
	public delegate void SetControllerAbility(string data);

	[Token(Token = "0x20003F7")]
	public delegate void SetControllerStateChanged(string data);

	[Token(Token = "0x20003F8")]
	public delegate void SetHbControllerMac(string mac);

	[Token(Token = "0x20003F9")]
	public delegate void ControllerDeviceVersionCallback(string data);

	[Token(Token = "0x20003FA")]
	public delegate void ControllerSnCodeCallback(string data);

	[Token(Token = "0x20003FB")]
	public delegate void ControllerUnbindCallback(string status);

	[Token(Token = "0x20003FC")]
	public delegate void ControllerStationStatusCallback(string status);

	[Token(Token = "0x20003FD")]
	public delegate void ControllerStationBusyCallback(string status);

	[Token(Token = "0x20003FE")]
	public delegate void ControllerOtaStartCodeCallback(string data);

	[Token(Token = "0x20003FF")]
	public delegate void ControllerDeviceVersionAndSNCallback(string data);

	[Token(Token = "0x2000400")]
	public delegate void ControllerUniqueIDCallback(string data);

	[Token(Token = "0x2000401")]
	public delegate void ControllerCombinedKeyUnbindCallback(string data);

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_ControllerManager instance;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Pvr_ControllerLink controllerlink;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float cTime;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool stopConnect;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text toast;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool controllerServicestate;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float disConnectTime;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool LengthAdaptiveRay;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float[] sensorData;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int[] keyData;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float[] g2SensorData;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int[] g2KeyData;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int keyOffset;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int rotControllerMode;

	[Token(Token = "0x17000084")]
	public static Pvr_ControllerManager Instance
	{
		[Token(Token = "0x600088B")]
		[Address(RVA = "0x13EAE6C", Offset = "0x13EAE6C", VA = "0x13EAE6C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000001")]
	public static event PvrServiceStartSuccess PvrServiceStartSuccessEvent
	{
		[Token(Token = "0x600088C")]
		[Address(RVA = "0x13E8BF4", Offset = "0x13E8BF4", VA = "0x13E8BF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1270", Offset = "0x7E1270")]
		add
		{
		}
		[Token(Token = "0x600088D")]
		[Address(RVA = "0x13E9160", Offset = "0x13E9160", VA = "0x13E9160")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1280", Offset = "0x7E1280")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public static event PvrControllerStateChanged PvrControllerStateChangedEvent
	{
		[Token(Token = "0x600088E")]
		[Address(RVA = "0x13FBA74", Offset = "0x13FBA74", VA = "0x13FBA74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1290", Offset = "0x7E1290")]
		add
		{
		}
		[Token(Token = "0x600088F")]
		[Address(RVA = "0x13FBB64", Offset = "0x13FBB64", VA = "0x13FBB64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E12A0", Offset = "0x7E12A0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public static event ChangeMainControllerCallBack ChangeMainControllerCallBackEvent
	{
		[Token(Token = "0x6000890")]
		[Address(RVA = "0x13E8DE4", Offset = "0x13E8DE4", VA = "0x13E8DE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E12B0", Offset = "0x7E12B0")]
		add
		{
		}
		[Token(Token = "0x6000891")]
		[Address(RVA = "0x13E9340", Offset = "0x13E9340", VA = "0x13E9340")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E12C0", Offset = "0x7E12C0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public static event ChangeHandNessCallBack ChangeHandNessCallBackEvent
	{
		[Token(Token = "0x6000892")]
		[Address(RVA = "0x13E8EE4", Offset = "0x13E8EE4", VA = "0x13E8EE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E12D0", Offset = "0x7E12D0")]
		add
		{
		}
		[Token(Token = "0x6000893")]
		[Address(RVA = "0x13E9430", Offset = "0x13E9430", VA = "0x13E9430")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E12E0", Offset = "0x7E12E0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public static event SetHbServiceBindState SetHbServiceBindStateEvent
	{
		[Token(Token = "0x6000894")]
		[Address(RVA = "0x13FBC54", Offset = "0x13FBC54", VA = "0x13FBC54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E12F0", Offset = "0x7E12F0")]
		add
		{
		}
		[Token(Token = "0x6000895")]
		[Address(RVA = "0x13FBD44", Offset = "0x13FBD44", VA = "0x13FBD44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1300", Offset = "0x7E1300")]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public static event ControllerThreadStartedCallback ControllerThreadStartedCallbackEvent
	{
		[Token(Token = "0x6000896")]
		[Address(RVA = "0x13FBE34", Offset = "0x13FBE34", VA = "0x13FBE34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1310", Offset = "0x7E1310")]
		add
		{
		}
		[Token(Token = "0x6000897")]
		[Address(RVA = "0x13FBF24", Offset = "0x13FBF24", VA = "0x13FBF24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1320", Offset = "0x7E1320")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public static event SetControllerServiceBindState SetControllerServiceBindStateEvent
	{
		[Token(Token = "0x6000898")]
		[Address(RVA = "0x13FC014", Offset = "0x13FC014", VA = "0x13FC014")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1330", Offset = "0x7E1330")]
		add
		{
		}
		[Token(Token = "0x6000899")]
		[Address(RVA = "0x13FC104", Offset = "0x13FC104", VA = "0x13FC104")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1340", Offset = "0x7E1340")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public static event ControllerStatusChange ControllerStatusChangeEvent
	{
		[Token(Token = "0x600089A")]
		[Address(RVA = "0x13EBB98", Offset = "0x13EBB98", VA = "0x13EBB98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1350", Offset = "0x7E1350")]
		add
		{
		}
		[Token(Token = "0x600089B")]
		[Address(RVA = "0x13EBE7C", Offset = "0x13EBE7C", VA = "0x13EBE7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1360", Offset = "0x7E1360")]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public static event SetControllerAbility SetControllerAbilityEvent
	{
		[Token(Token = "0x600089C")]
		[Address(RVA = "0x13E8CE4", Offset = "0x13E8CE4", VA = "0x13E8CE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1370", Offset = "0x7E1370")]
		add
		{
		}
		[Token(Token = "0x600089D")]
		[Address(RVA = "0x13E9250", Offset = "0x13E9250", VA = "0x13E9250")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1380", Offset = "0x7E1380")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public static event SetControllerStateChanged SetControllerStateChangedEvent
	{
		[Token(Token = "0x600089E")]
		[Address(RVA = "0x13EBA98", Offset = "0x13EBA98", VA = "0x13EBA98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1390", Offset = "0x7E1390")]
		add
		{
		}
		[Token(Token = "0x600089F")]
		[Address(RVA = "0x13EBD8C", Offset = "0x13EBD8C", VA = "0x13EBD8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E13A0", Offset = "0x7E13A0")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public static event SetHbControllerMac SetHbControllerMacEvent
	{
		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x13FC1F4", Offset = "0x13FC1F4", VA = "0x13FC1F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E13B0", Offset = "0x7E13B0")]
		add
		{
		}
		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x13FC2E4", Offset = "0x13FC2E4", VA = "0x13FC2E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E13C0", Offset = "0x7E13C0")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public static event ControllerDeviceVersionCallback ControllerDeviceVersionCallbackEvent
	{
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x13FC3D4", Offset = "0x13FC3D4", VA = "0x13FC3D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E13D0", Offset = "0x7E13D0")]
		add
		{
		}
		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x13FC4C4", Offset = "0x13FC4C4", VA = "0x13FC4C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E13E0", Offset = "0x7E13E0")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public static event ControllerSnCodeCallback ControllerSnCodeCallbackEvent
	{
		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x13FC5B4", Offset = "0x13FC5B4", VA = "0x13FC5B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E13F0", Offset = "0x7E13F0")]
		add
		{
		}
		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x13FC6A4", Offset = "0x13FC6A4", VA = "0x13FC6A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1400", Offset = "0x7E1400")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public static event ControllerUnbindCallback ControllerUnbindCallbackEvent
	{
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x13FC794", Offset = "0x13FC794", VA = "0x13FC794")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1410", Offset = "0x7E1410")]
		add
		{
		}
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x13FC884", Offset = "0x13FC884", VA = "0x13FC884")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1420", Offset = "0x7E1420")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public static event ControllerStationStatusCallback ControllerStationStatusCallbackEvent
	{
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x13FC974", Offset = "0x13FC974", VA = "0x13FC974")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1430", Offset = "0x7E1430")]
		add
		{
		}
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x13FCA64", Offset = "0x13FCA64", VA = "0x13FCA64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1440", Offset = "0x7E1440")]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public static event ControllerStationBusyCallback ControllerStationBusyCallbackEvent
	{
		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x13FCB54", Offset = "0x13FCB54", VA = "0x13FCB54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1450", Offset = "0x7E1450")]
		add
		{
		}
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x13FCC44", Offset = "0x13FCC44", VA = "0x13FCC44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1460", Offset = "0x7E1460")]
		remove
		{
		}
	}

	[Token(Token = "0x14000011")]
	public static event ControllerOtaStartCodeCallback ControllerOtaStartCodeCallbackEvent
	{
		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x13FCD34", Offset = "0x13FCD34", VA = "0x13FCD34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1470", Offset = "0x7E1470")]
		add
		{
		}
		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x13FCE24", Offset = "0x13FCE24", VA = "0x13FCE24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1480", Offset = "0x7E1480")]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public static event ControllerDeviceVersionAndSNCallback ControllerDeviceVersionAndSNCallbackEvent
	{
		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x13FCF14", Offset = "0x13FCF14", VA = "0x13FCF14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1490", Offset = "0x7E1490")]
		add
		{
		}
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x13FD004", Offset = "0x13FD004", VA = "0x13FD004")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E14A0", Offset = "0x7E14A0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public static event ControllerUniqueIDCallback ControllerUniqueIDCallbackEvent
	{
		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x13FD0F4", Offset = "0x13FD0F4", VA = "0x13FD0F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E14B0", Offset = "0x7E14B0")]
		add
		{
		}
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x13FD1E4", Offset = "0x13FD1E4", VA = "0x13FD1E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E14C0", Offset = "0x7E14C0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public static event ControllerCombinedKeyUnbindCallback ControllerCombinedKeyUnbindCallbackEvent
	{
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x13FD2D4", Offset = "0x13FD2D4", VA = "0x13FD2D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E14D0", Offset = "0x7E14D0")]
		add
		{
		}
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x13FD3C4", Offset = "0x13FD3C4", VA = "0x13FD3C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E14E0", Offset = "0x7E14E0")]
		remove
		{
		}
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0x13FD4B4", Offset = "0x13FD4B4", VA = "0x13FD4B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0x13FD7AC", Offset = "0x13FD7AC", VA = "0x13FD7AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0x13FD858", Offset = "0x13FD858", VA = "0x13FD858")]
	private void Update()
	{
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0x13FF308", Offset = "0x13FF308", VA = "0x13FF308")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0x13FF768", Offset = "0x13FF768", VA = "0x13FF768")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0x13FF844", Offset = "0x13FF844", VA = "0x13FF844")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0x13FF994", Offset = "0x13FF994", VA = "0x13FF994")]
	public void StopLark2Service()
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0x13FFA3C", Offset = "0x13FFA3C", VA = "0x13FFA3C")]
	public Vector3 GetAngularVelocity(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x13FFB20", Offset = "0x13FFB20", VA = "0x13FFB20")]
	public Vector3 GetAcceleration(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x13FD704", Offset = "0x13FD704", VA = "0x13FD704")]
	public void BindService()
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0x13FFC04", Offset = "0x13FFC04", VA = "0x13FFC04")]
	public void StartScan()
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0x13FFCAC", Offset = "0x13FFCAC", VA = "0x13FFCAC")]
	public void StopScan()
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0x13FFD54", Offset = "0x13FFD54", VA = "0x13FFD54")]
	public void ResetController(int num)
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x13FF6F0", Offset = "0x13FF6F0", VA = "0x13FF6F0")]
	public static int GetControllerConnectionState(int num)
	{
		return default(int);
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x13FFE04", Offset = "0x13FFE04", VA = "0x13FFE04")]
	public void ConnectBLE()
	{
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x13FFEAC", Offset = "0x13FFEAC", VA = "0x13FFEAC")]
	public void DisConnectBLE()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x13FFF54", Offset = "0x13FFF54", VA = "0x13FFF54")]
	public void SetBinPath(string path, bool isAsset)
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0x1400018", Offset = "0x1400018", VA = "0x1400018")]
	public void StartUpgrade()
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0x14000C0", Offset = "0x14000C0", VA = "0x14000C0")]
	public static string GetBLEImageType()
	{
		return null;
	}

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0x1400130", Offset = "0x1400130", VA = "0x1400130")]
	public static long GetBLEVersion()
	{
		return default(long);
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0x14001A0", Offset = "0x14001A0", VA = "0x14001A0")]
	public static string GetFileImageType()
	{
		return null;
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0x1400210", Offset = "0x1400210", VA = "0x1400210")]
	public static long GetFileVersion()
	{
		return default(long);
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0x1400280", Offset = "0x1400280", VA = "0x1400280")]
	public static void AutoConnectHbController(int scans)
	{
	}

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0x1400330", Offset = "0x1400330", VA = "0x1400330")]
	public static string GetConnectedDeviceMac()
	{
		return null;
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0x14003E8", Offset = "0x14003E8", VA = "0x14003E8")]
	public void setHbControllerMac(string mac)
	{
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0x14005AC", Offset = "0x14005AC", VA = "0x14005AC")]
	public int GetControllerRSSI()
	{
		return default(int);
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0x1400624", Offset = "0x1400624", VA = "0x1400624")]
	public void setHbServiceBindState(string state)
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0x14008B4", Offset = "0x14008B4", VA = "0x14008B4")]
	public void setControllerServiceBindState(string state)
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0x1400B48", Offset = "0x1400B48", VA = "0x1400B48")]
	public void setHbControllerConnectState(string isconnect)
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0x1401544", Offset = "0x1401544", VA = "0x1401544")]
	public void setControllerStateChanged(string state)
	{
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0x1401ADC", Offset = "0x1401ADC", VA = "0x1401ADC")]
	public void setControllerAbility(string data)
	{
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0x1401BDC", Offset = "0x1401BDC", VA = "0x1401BDC")]
	public void controllerThreadStartedCallback()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0x1402234", Offset = "0x1402234", VA = "0x1402234")]
	public void controllerDeviceVersionCallback(string data)
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0x14026E4", Offset = "0x14026E4", VA = "0x14026E4")]
	public void controllerSnCodeCallback(string data)
	{
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x1402B94", Offset = "0x1402B94", VA = "0x1402B94")]
	public void controllerUnbindCallback(string status)
	{
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0x1403044", Offset = "0x1403044", VA = "0x1403044")]
	public void controllerStationStatusCallback(string status)
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0x14034F4", Offset = "0x14034F4", VA = "0x14034F4")]
	public void controllerStationBusyCallback(string status)
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0x14039A4", Offset = "0x14039A4", VA = "0x14039A4")]
	public void controllerOTAStartCodeCallback(string data)
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0x1403E54", Offset = "0x1403E54", VA = "0x1403E54")]
	public void controllerDeviceVersionAndSNCallback(string data)
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0x1404304", Offset = "0x1404304", VA = "0x1404304")]
	public void controllerUniqueIDCallback(string data)
	{
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0x14047B4", Offset = "0x14047B4", VA = "0x14047B4")]
	public void controllerCombinedKeyUnbindCallback(string controllerSerialNum)
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x1404C18", Offset = "0x1404C18", VA = "0x1404C18")]
	public void setupdateFailed()
	{
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0x1404C1C", Offset = "0x1404C1C", VA = "0x1404C1C")]
	public void setupdateSuccess()
	{
	}

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0x1404C20", Offset = "0x1404C20", VA = "0x1404C20")]
	public void setupdateProgress(string progress)
	{
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0x1404C24", Offset = "0x1404C24", VA = "0x1404C24")]
	public void setHbAutoConnectState(string state)
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x1404F44", Offset = "0x1404F44", VA = "0x1404F44")]
	public void callbackControllerServiceState(string state)
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x14050A0", Offset = "0x14050A0", VA = "0x14050A0")]
	public void changeMainControllerCallback(string index)
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x14055A4", Offset = "0x14055A4", VA = "0x14055A4")]
	public void changeHandnessCallback(string index)
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x1404D78", Offset = "0x1404D78", VA = "0x1404D78")]
	private void ShowToast(int type)
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x1405AA8", Offset = "0x1405AA8", VA = "0x1405AA8")]
	private void HideToast()
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x1405B50", Offset = "0x1405B50", VA = "0x1405B50")]
	private void CheckControllerService()
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x1401D1C", Offset = "0x1401D1C", VA = "0x1401D1C")]
	private void GetCVControllerState()
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0x13FEBFC", Offset = "0x13FEBFC", VA = "0x13FEBFC")]
	private void SetSystemKey()
	{
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0x13FE824", Offset = "0x13FE824", VA = "0x13FE824")]
	private void TransformData(ControllerHand hand, int handId, int[] data)
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0x1405B64", Offset = "0x1405B64", VA = "0x1405B64")]
	private void TransSingleKey(PvrControllerKey key, int beginIndex, int[] data)
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0x1405CBC", Offset = "0x1405CBC", VA = "0x1405CBC")]
	private void TransformTouchData(ControllerHand hand, int handId, int[] data)
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0x1405D64", Offset = "0x1405D64", VA = "0x1405D64")]
	private void TransSingleTouchValue(PvrControllerKey key, int beginIndex, int[] data)
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x1405E6C", Offset = "0x1405E6C", VA = "0x1405E6C")]
	public Pvr_ControllerManager()
	{
	}
}
[Token(Token = "0x2000103")]
public class Pvr_ControllerModuleInit : MonoBehaviour
{
	[Token(Token = "0x2000402")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B1C", Offset = "0x7D8B1C")]
	private sealed class <ShowOrHideRay>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pvr_ControllerModuleInit <>4__this;

		[Token(Token = "0x40020F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int id;

		[Token(Token = "0x1700037F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60023F2")]
			[Address(RVA = "0xC88950", Offset = "0xC88950", VA = "0xC88950", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000380")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023F4")]
			[Address(RVA = "0xC889BC", Offset = "0xC889BC", VA = "0xC889BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023EF")]
		[Address(RVA = "0xC88338", Offset = "0xC88338", VA = "0xC88338")]
		[DebuggerHidden]
		public <ShowOrHideRay>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60023F0")]
		[Address(RVA = "0xC88704", Offset = "0xC88704", VA = "0xC88704", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0xC88708", Offset = "0xC88708", VA = "0xC88708", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0xC88958", Offset = "0xC88958", VA = "0xC88958", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ControllerVariety Variety;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool IsCustomModel;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject dot;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject rayLine;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject controller;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool moduleState;

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0xC87E88", Offset = "0xC87E88", VA = "0xC87E88")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0xC88030", Offset = "0xC88030", VA = "0xC88030")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0xC88134", Offset = "0xC88134", VA = "0xC88134")]
	private void ServiceStartSuccess()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0xC881A8", Offset = "0xC881A8", VA = "0xC881A8")]
	private void ControllerStateChanged(string data)
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0xC882B0", Offset = "0xC882B0", VA = "0xC882B0")]
	private void MainControllerIDChanged(string data)
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0xC88138", Offset = "0xC88138", VA = "0xC88138")]
	private void RefreshRay()
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0xC882B4", Offset = "0xC882B4", VA = "0xC882B4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E14F0", Offset = "0x7E14F0")]
	private IEnumerator ShowOrHideRay(int id)
	{
		return null;
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0xC88364", Offset = "0xC88364", VA = "0xC88364")]
	public void ForceHideOrShow(bool state)
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0xC88468", Offset = "0xC88468", VA = "0xC88468")]
	public void UpdateRay()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0xC886F4", Offset = "0xC886F4", VA = "0xC886F4")]
	public Pvr_ControllerModuleInit()
	{
	}
}
[Token(Token = "0x2000104")]
public class Pvr_ControllerPower : MonoBehaviour
{
	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Sprite power1;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Sprite power2;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Sprite power3;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Sprite power4;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Sprite power5;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public ControllerVariety variety;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public ControllerDevice currentDevice;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Image powerImage;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int powerValue;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float power;

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xC889C4", Offset = "0xC889C4", VA = "0xC889C4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xC88A8C", Offset = "0xC88A8C", VA = "0xC88A8C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xC88AAC", Offset = "0xC88AAC", VA = "0xC88AAC")]
	private void RefreshPower(int hand)
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xC88C98", Offset = "0xC88C98", VA = "0xC88C98")]
	public Pvr_ControllerPower()
	{
	}
}
[Token(Token = "0x2000105")]
public class Pvr_ControllerVisual : MonoBehaviour
{
	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ControllerDevice currentDevice;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D m_idle;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture2D m_app;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D m_home;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture2D m_touchpad;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture2D m_volUp;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D m_volDn;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Texture2D m_trigger;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Texture2D m_a;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Texture2D m_b;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Texture2D m_x;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture2D m_y;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Texture2D m_grip;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Renderer controllerRenderMat;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[HideInInspector]
	public ControllerVariety variety;

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0xC88CA0", Offset = "0xC88CA0", VA = "0xC88CA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xC88CF8", Offset = "0xC88CF8", VA = "0xC88CF8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xC88D68", Offset = "0xC88D68", VA = "0xC88D68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xC88D88", Offset = "0xC88D88", VA = "0xC88D88")]
	private void ChangeKeyEffects(int hand)
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0xC896A4", Offset = "0xC896A4", VA = "0xC896A4")]
	public Pvr_ControllerVisual()
	{
	}
}
[Token(Token = "0x2000106")]
public class Pvr_ToolTips : MonoBehaviour
{
	[Token(Token = "0x2000403")]
	public enum TipBtn
	{
		[Token(Token = "0x40020F7")]
		app,
		[Token(Token = "0x40020F8")]
		touchpad,
		[Token(Token = "0x40020F9")]
		home,
		[Token(Token = "0x40020FA")]
		volup,
		[Token(Token = "0x40020FB")]
		voldown,
		[Token(Token = "0x40020FC")]
		trigger,
		[Token(Token = "0x40020FD")]
		grip
	}

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ControllerDevice currentDevice;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float tipsAlpha;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Pvr_ToolTips tooltips;

	[Token(Token = "0x6000902")]
	[Address(RVA = "0xC8E364", Offset = "0xC8E364", VA = "0xC8E364")]
	public void ChangeTipsText(TipBtn tip, string key)
	{
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xC8E4DC", Offset = "0xC8E4DC", VA = "0xC8E4DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0xC8E554", Offset = "0xC8E554", VA = "0xC8E554")]
	private void Update()
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0xC8E758", Offset = "0xC8E758", VA = "0xC8E758")]
	private void LoadTextFromJson()
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0xC8EBAC", Offset = "0xC8EBAC", VA = "0xC8EBAC")]
	public static void RefreshTips()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0xC8EC50", Offset = "0xC8EC50", VA = "0xC8EC50")]
	public Pvr_ToolTips()
	{
	}
}
[Token(Token = "0x2000107")]
public class Pvr_TouchPadScroll : MonoBehaviour
{
	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ScrollRect scrollRect;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isHoving;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int mainHand;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SwipeDirection direction;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector2 currPos;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector2 tarPos;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float lerpSpeed;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform tranViewport;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float ignoreDis;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector2 lastTouchDownPos;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector2 lastTouchUpPos;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool isTouching;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool isClosed;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector2 vecOrigin;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector2 vecOriginNeo2;

	[Token(Token = "0x6000908")]
	[Address(RVA = "0xC8EC58", Offset = "0xC8EC58", VA = "0xC8EC58")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0xC8ECE8", Offset = "0xC8ECE8", VA = "0xC8ECE8")]
	private void Update()
	{
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0xC8F188", Offset = "0xC8F188", VA = "0xC8F188")]
	private bool IsControllerConnect()
	{
		return default(bool);
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0xC8EE34", Offset = "0xC8EE34", VA = "0xC8EE34")]
	private void UpdateTargetPos()
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0xC8F898", Offset = "0xC8F898", VA = "0xC8F898")]
	private void ComputeTouchPos()
	{
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0xC8FBE4", Offset = "0xC8FBE4", VA = "0xC8FBE4")]
	private void ComputeRockerPos()
	{
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0xC90064", Offset = "0xC90064", VA = "0xC90064")]
	private bool VerifyNeo2TouchValid(Vector2 nowTouchPos)
	{
		return default(bool);
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0xC8EF80", Offset = "0xC8EF80", VA = "0xC8EF80")]
	private void UpdatePos()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0xC8F7B8", Offset = "0xC8F7B8", VA = "0xC8F7B8")]
	private void ResetParameter()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0xC8ED14", Offset = "0xC8ED14", VA = "0xC8ED14")]
	private void Process()
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0xC900A0", Offset = "0xC900A0", VA = "0xC900A0")]
	private bool IsHovering(Pvr_UIPointer pointer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xC90298", Offset = "0xC90298", VA = "0xC90298")]
	private bool FindTree(Transform tran)
	{
		return default(bool);
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0xC90388", Offset = "0xC90388", VA = "0xC90388")]
	public Pvr_TouchPadScroll()
	{
	}
}
[Token(Token = "0x2000108")]
public class Pvr_TouchVisual : MonoBehaviour
{
	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public ControllerDevice currentDevice;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public ControllerVariety variety;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshRenderer touchRenderer;

	[Token(Token = "0x6000915")]
	[Address(RVA = "0xC90444", Offset = "0xC90444", VA = "0xC90444")]
	private void Start()
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0xC904EC", Offset = "0xC904EC", VA = "0xC904EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0xC9050C", Offset = "0xC9050C", VA = "0xC9050C")]
	private void ChangeEffects(int hand)
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0xC907E4", Offset = "0xC907E4", VA = "0xC907E4")]
	public Pvr_TouchVisual()
	{
	}
}
[Token(Token = "0x2000109")]
public class DemoController : MonoBehaviour
{
	[Token(Token = "0x2000404")]
	public delegate void showLoadingEventHandler();

	[Token(Token = "0x2000405")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B2C", Offset = "0x7D8B2C")]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x40020FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject btnObj;

		[Token(Token = "0x40020FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DemoController <>4__this;

		[Token(Token = "0x60023F9")]
		[Address(RVA = "0x9C1B3C", Offset = "0x9C1B3C", VA = "0x9C1B3C")]
		public <>c__DisplayClass12_0()
		{
		}

		[Token(Token = "0x60023FA")]
		[Address(RVA = "0x9C2374", Offset = "0x9C2374", VA = "0x9C2374")]
		internal void <InitDelegate>b__0()
		{
		}
	}

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Callback callback;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject msg;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Pvr_UnitySDKManager picoVrManager;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string currentOrderID;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject loading;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject BG;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject InputPanel;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static showLoadingEventHandler showLoading;

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x9C1370", Offset = "0x9C1370", VA = "0x9C1370")]
	private void Awake()
	{
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x9C1524", Offset = "0x9C1524", VA = "0x9C1524")]
	private void Start()
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x9C19D8", Offset = "0x9C19D8", VA = "0x9C19D8")]
	private void Update()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x9C15F0", Offset = "0x9C15F0", VA = "0x9C15F0")]
	private void InitDelegate()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x9C1B44", Offset = "0x9C1B44", VA = "0x9C1B44")]
	private void OnClick(GameObject btnObj)
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x9C1E7C", Offset = "0x9C1E7C", VA = "0x9C1E7C")]
	public string getRamdomTestOrderID()
	{
		return null;
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x9C1E38", Offset = "0x9C1E38", VA = "0x9C1E38")]
	private void StartLoading()
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x9C1EC0", Offset = "0x9C1EC0", VA = "0x9C1EC0")]
	public void StopLoading()
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x9C1FD0", Offset = "0x9C1FD0", VA = "0x9C1FD0")]
	public void DoPayByCode()
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x9C229C", Offset = "0x9C229C", VA = "0x9C229C")]
	private bool VerifyLocalToken()
	{
		return default(bool);
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0x9C236C", Offset = "0x9C236C", VA = "0x9C236C")]
	public DemoController()
	{
	}
}
[Token(Token = "0x200010A")]
public class LoadingRatation : MonoBehaviour
{
	[Token(Token = "0x6000924")]
	[Address(RVA = "0xA5CF2C", Offset = "0xA5CF2C", VA = "0xA5CF2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0xA5CF30", Offset = "0xA5CF30", VA = "0xA5CF30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0xA5CFAC", Offset = "0xA5CFAC", VA = "0xA5CFAC")]
	public LoadingRatation()
	{
	}
}
[Token(Token = "0x200010B")]
public class InputManager : MonoBehaviour
{
	[Token(Token = "0x2000406")]
	public delegate void doEnterEventHandler();

	[Token(Token = "0x2000407")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B3C", Offset = "0x7D8B3C")]
	private sealed class <>c__DisplayClass8_0
	{
		[Token(Token = "0x4002100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject btnObj;

		[Token(Token = "0x4002101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputManager <>4__this;

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0xA52B34", Offset = "0xA52B34", VA = "0xA52B34")]
		public <>c__DisplayClass8_0()
		{
		}

		[Token(Token = "0x6002400")]
		[Address(RVA = "0xA53760", Offset = "0xA53760", VA = "0xA53760")]
		internal void <InitKeyBoard>b__0()
		{
		}
	}

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static doEnterEventHandler doEnter;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StringBuilder sb;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ArrayList btnsName;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject enter;

	[Token(Token = "0x6000927")]
	[Address(RVA = "0xA52238", Offset = "0xA52238", VA = "0xA52238")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0xA52B2C", Offset = "0xA52B2C", VA = "0xA52B2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0xA52B30", Offset = "0xA52B30", VA = "0xA52B30")]
	private void Update()
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0xA5223C", Offset = "0xA5223C", VA = "0xA5223C")]
	private void InitKeyBoard()
	{
	}

	[Token(Token = "0x600092B")]
	[Address(RVA = "0xA52B3C", Offset = "0xA52B3C", VA = "0xA52B3C")]
	private void OnClick(GameObject btnObj)
	{
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0xA535E4", Offset = "0xA535E4", VA = "0xA535E4")]
	private void EnterChar(string s)
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0xA52D74", Offset = "0xA52D74", VA = "0xA52D74")]
	private void DoCapslock(bool IsUpper)
	{
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0xA53354", Offset = "0xA53354", VA = "0xA53354")]
	private void ClearBuffer()
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0xA536D8", Offset = "0xA536D8", VA = "0xA536D8")]
	public InputManager()
	{
	}
}
[Token(Token = "0x200010C")]
public class Callback : MonoBehaviour
{
	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string IS_SUCCESS;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string MSG;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string CODE;

	[Token(Token = "0x6000930")]
	[Address(RVA = "0x9BC494", Offset = "0x9BC494", VA = "0x9BC494")]
	public void LoginCallback(string LoginInfo)
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0x9BCA50", Offset = "0x9BCA50", VA = "0x9BCA50")]
	public void QueryOrPayCallback(string queryOrPayInfo)
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x9BCC64", Offset = "0x9BCC64", VA = "0x9BCC64")]
	public void UserInfoCallback(string userInfo)
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x9BC6A8", Offset = "0x9BC6A8", VA = "0x9BC6A8")]
	public void SetMassage(string massage)
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x9BCD30", Offset = "0x9BCD30", VA = "0x9BCD30")]
	public GameObject GetCurrentGameObject()
	{
		return null;
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x9BCD7C", Offset = "0x9BCD7C", VA = "0x9BCD7C")]
	public void ActivityForResultCallback(string activity)
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x9BCEAC", Offset = "0x9BCEAC", VA = "0x9BCEAC")]
	public Callback()
	{
	}
}
[Token(Token = "0x200010D")]
public class CommonDic
{
	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CommonDic dic;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<string, string> mydic;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string _app_ID;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string _app_Key;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string _user_token;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string _access_token;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string _open_id;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string _refresh_token;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string _expires_in;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string _user_info;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string _subject;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string _body;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string _order_id;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string _total;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string _goods_tag;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string _notify_url;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string _trade_type;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private string _pay_code;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private string _order_info;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private string _code;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private string _msg;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private string _merchant_ID;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private string _payKey;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private string _isSuucess;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private string _loginMsg;

	[Token(Token = "0x17000085")]
	public string subject
	{
		[Token(Token = "0x600093C")]
		[Address(RVA = "0x9C09D0", Offset = "0x9C09D0", VA = "0x9C09D0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600093D")]
		[Address(RVA = "0x9C09D8", Offset = "0x9C09D8", VA = "0x9C09D8")]
		set
		{
		}
	}

	[Token(Token = "0x17000086")]
	public string body
	{
		[Token(Token = "0x600093E")]
		[Address(RVA = "0x9C09E0", Offset = "0x9C09E0", VA = "0x9C09E0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600093F")]
		[Address(RVA = "0x9C09E8", Offset = "0x9C09E8", VA = "0x9C09E8")]
		set
		{
		}
	}

	[Token(Token = "0x17000087")]
	public string order_id
	{
		[Token(Token = "0x6000940")]
		[Address(RVA = "0x9C09F0", Offset = "0x9C09F0", VA = "0x9C09F0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000941")]
		[Address(RVA = "0x9C09F8", Offset = "0x9C09F8", VA = "0x9C09F8")]
		set
		{
		}
	}

	[Token(Token = "0x17000088")]
	public string total
	{
		[Token(Token = "0x6000942")]
		[Address(RVA = "0x9C0A00", Offset = "0x9C0A00", VA = "0x9C0A00")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000943")]
		[Address(RVA = "0x9C0A08", Offset = "0x9C0A08", VA = "0x9C0A08")]
		set
		{
		}
	}

	[Token(Token = "0x17000089")]
	public string goods_tag
	{
		[Token(Token = "0x6000944")]
		[Address(RVA = "0x9C0A10", Offset = "0x9C0A10", VA = "0x9C0A10")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000945")]
		[Address(RVA = "0x9C0A18", Offset = "0x9C0A18", VA = "0x9C0A18")]
		set
		{
		}
	}

	[Token(Token = "0x1700008A")]
	public string notify_url
	{
		[Token(Token = "0x6000946")]
		[Address(RVA = "0x9C0A20", Offset = "0x9C0A20", VA = "0x9C0A20")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000947")]
		[Address(RVA = "0x9C0A28", Offset = "0x9C0A28", VA = "0x9C0A28")]
		set
		{
		}
	}

	[Token(Token = "0x1700008B")]
	public string pay_code
	{
		[Token(Token = "0x6000948")]
		[Address(RVA = "0x9C0A30", Offset = "0x9C0A30", VA = "0x9C0A30")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000949")]
		[Address(RVA = "0x9C0A38", Offset = "0x9C0A38", VA = "0x9C0A38")]
		set
		{
		}
	}

	[Token(Token = "0x1700008C")]
	public string trade_type
	{
		[Token(Token = "0x600094A")]
		[Address(RVA = "0x9C0A40", Offset = "0x9C0A40", VA = "0x9C0A40")]
		get
		{
			return null;
		}
		[Token(Token = "0x600094B")]
		[Address(RVA = "0x9C0A48", Offset = "0x9C0A48", VA = "0x9C0A48")]
		set
		{
		}
	}

	[Token(Token = "0x1700008D")]
	public string user_token
	{
		[Token(Token = "0x600094C")]
		[Address(RVA = "0x9C0A50", Offset = "0x9C0A50", VA = "0x9C0A50")]
		get
		{
			return null;
		}
		[Token(Token = "0x600094D")]
		[Address(RVA = "0x9C0A58", Offset = "0x9C0A58", VA = "0x9C0A58")]
		set
		{
		}
	}

	[Token(Token = "0x1700008E")]
	public string access_token
	{
		[Token(Token = "0x600094E")]
		[Address(RVA = "0x9C0A60", Offset = "0x9C0A60", VA = "0x9C0A60")]
		get
		{
			return null;
		}
		[Token(Token = "0x600094F")]
		[Address(RVA = "0x9C0A68", Offset = "0x9C0A68", VA = "0x9C0A68")]
		set
		{
		}
	}

	[Token(Token = "0x1700008F")]
	public string open_id
	{
		[Token(Token = "0x6000950")]
		[Address(RVA = "0x9C0A70", Offset = "0x9C0A70", VA = "0x9C0A70")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000951")]
		[Address(RVA = "0x9C0A78", Offset = "0x9C0A78", VA = "0x9C0A78")]
		set
		{
		}
	}

	[Token(Token = "0x17000090")]
	public string refresh_token
	{
		[Token(Token = "0x6000952")]
		[Address(RVA = "0x9C0A80", Offset = "0x9C0A80", VA = "0x9C0A80")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000953")]
		[Address(RVA = "0x9C0A88", Offset = "0x9C0A88", VA = "0x9C0A88")]
		set
		{
		}
	}

	[Token(Token = "0x17000091")]
	public string expires_in
	{
		[Token(Token = "0x6000954")]
		[Address(RVA = "0x9C0A90", Offset = "0x9C0A90", VA = "0x9C0A90")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000955")]
		[Address(RVA = "0x9C0A98", Offset = "0x9C0A98", VA = "0x9C0A98")]
		set
		{
		}
	}

	[Token(Token = "0x17000092")]
	public string isSuccess
	{
		[Token(Token = "0x6000956")]
		[Address(RVA = "0x9C0AA0", Offset = "0x9C0AA0", VA = "0x9C0AA0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000957")]
		[Address(RVA = "0x9C0AA8", Offset = "0x9C0AA8", VA = "0x9C0AA8")]
		set
		{
		}
	}

	[Token(Token = "0x17000093")]
	public string loginMsg
	{
		[Token(Token = "0x6000958")]
		[Address(RVA = "0x9C0AB0", Offset = "0x9C0AB0", VA = "0x9C0AB0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000959")]
		[Address(RVA = "0x9C0AB8", Offset = "0x9C0AB8", VA = "0x9C0AB8")]
		set
		{
		}
	}

	[Token(Token = "0x17000094")]
	public string user_info
	{
		[Token(Token = "0x600095A")]
		[Address(RVA = "0x9C0AC0", Offset = "0x9C0AC0", VA = "0x9C0AC0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600095B")]
		[Address(RVA = "0x9C0AC8", Offset = "0x9C0AC8", VA = "0x9C0AC8")]
		set
		{
		}
	}

	[Token(Token = "0x17000095")]
	public string order_info
	{
		[Token(Token = "0x600095C")]
		[Address(RVA = "0x9C0AD0", Offset = "0x9C0AD0", VA = "0x9C0AD0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600095D")]
		[Address(RVA = "0x9C0AD8", Offset = "0x9C0AD8", VA = "0x9C0AD8")]
		set
		{
		}
	}

	[Token(Token = "0x17000096")]
	public string code
	{
		[Token(Token = "0x600095E")]
		[Address(RVA = "0x9C0AE0", Offset = "0x9C0AE0", VA = "0x9C0AE0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600095F")]
		[Address(RVA = "0x9C0AE8", Offset = "0x9C0AE8", VA = "0x9C0AE8")]
		set
		{
		}
	}

	[Token(Token = "0x17000097")]
	public string msg
	{
		[Token(Token = "0x6000960")]
		[Address(RVA = "0x9C0AF0", Offset = "0x9C0AF0", VA = "0x9C0AF0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000961")]
		[Address(RVA = "0x9C0AF8", Offset = "0x9C0AF8", VA = "0x9C0AF8")]
		set
		{
		}
	}

	[Token(Token = "0x17000098")]
	public string app_ID
	{
		[Token(Token = "0x6000962")]
		[Address(RVA = "0x9C0B00", Offset = "0x9C0B00", VA = "0x9C0B00")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000963")]
		[Address(RVA = "0x9C0B08", Offset = "0x9C0B08", VA = "0x9C0B08")]
		set
		{
		}
	}

	[Token(Token = "0x17000099")]
	public string app_Key
	{
		[Token(Token = "0x6000964")]
		[Address(RVA = "0x9C0B10", Offset = "0x9C0B10", VA = "0x9C0B10")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000965")]
		[Address(RVA = "0x9C0B18", Offset = "0x9C0B18", VA = "0x9C0B18")]
		set
		{
		}
	}

	[Token(Token = "0x1700009A")]
	public string merchant_ID
	{
		[Token(Token = "0x6000966")]
		[Address(RVA = "0x9C0B20", Offset = "0x9C0B20", VA = "0x9C0B20")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000967")]
		[Address(RVA = "0x9C0B28", Offset = "0x9C0B28", VA = "0x9C0B28")]
		set
		{
		}
	}

	[Token(Token = "0x1700009B")]
	public string paykey
	{
		[Token(Token = "0x6000968")]
		[Address(RVA = "0x9C0B30", Offset = "0x9C0B30", VA = "0x9C0B30")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000969")]
		[Address(RVA = "0x9C0B38", Offset = "0x9C0B38", VA = "0x9C0B38")]
		set
		{
		}
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x9BC98C", Offset = "0x9BC98C", VA = "0x9BC98C")]
	public static CommonDic getInstance()
	{
		return null;
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x9C07B4", Offset = "0x9C07B4", VA = "0x9C07B4")]
	public Dictionary<string, string> getDic()
	{
		return null;
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0x9C0804", Offset = "0x9C0804", VA = "0x9C0804")]
	public void setParameters(string name, string value)
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0x9C0960", Offset = "0x9C0960", VA = "0x9C0960")]
	public string PayOrderString()
	{
		return null;
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0x9C032C", Offset = "0x9C032C", VA = "0x9C032C")]
	public static void InitDicData(Dictionary<string, string> mydic)
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0x9C02C0", Offset = "0x9C02C0", VA = "0x9C02C0")]
	public CommonDic()
	{
	}
}
[Token(Token = "0x200010E")]
public class LoginSDK
{
	[Token(Token = "0x600096C")]
	[Address(RVA = "0xA5D174", Offset = "0xA5D174", VA = "0xA5D174")]
	public static void Login()
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0xA5D1D4", Offset = "0xA5D1D4", VA = "0xA5D1D4")]
	public static void GetUserAPI()
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0xA5D234", Offset = "0xA5D234", VA = "0xA5D234")]
	public LoginSDK()
	{
	}
}
[Token(Token = "0x200010F")]
public class PicoPaymentSDK
{
	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaObject _jo;

	[Token(Token = "0x1700009C")]
	public static AndroidJavaObject jo
	{
		[Token(Token = "0x600096F")]
		[Address(RVA = "0x13E7A68", Offset = "0x13E7A68", VA = "0x13E7A68")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000970")]
		[Address(RVA = "0x13E7AD0", Offset = "0x13E7AD0", VA = "0x13E7AD0")]
		set
		{
		}
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0x13E7B3C", Offset = "0x13E7B3C", VA = "0x13E7B3C")]
	public static void Login()
	{
	}

	[Token(Token = "0x6000972")]
	[Address(RVA = "0x13E7DAC", Offset = "0x13E7DAC", VA = "0x13E7DAC")]
	public static void Pay(string payOrderJson)
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0x13E7FD8", Offset = "0x13E7FD8", VA = "0x13E7FD8")]
	public static void QueryOrder(string orderId)
	{
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0x13E8204", Offset = "0x13E8204", VA = "0x13E8204")]
	public static void GetUserAPI()
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0x13E8474", Offset = "0x13E8474", VA = "0x13E8474")]
	public PicoPaymentSDK()
	{
	}
}
[Token(Token = "0x2000110")]
public class Pvr_ToBService : MonoBehaviour
{
	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text deviceInfoText;

	[Token(Token = "0x6000977")]
	[Address(RVA = "0xC8DE3C", Offset = "0xC8DE3C", VA = "0xC8DE3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0xC8DE74", Offset = "0xC8DE74", VA = "0xC8DE74")]
	private void Start()
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0xC8DE84", Offset = "0xC8DE84", VA = "0xC8DE84")]
	private void OnDestory()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0xC8DE40", Offset = "0xC8DE40", VA = "0xC8DE40")]
	private void InitToBService()
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0xC8DE7C", Offset = "0xC8DE7C", VA = "0xC8DE7C")]
	private void BindToBService()
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0xC8DE8C", Offset = "0xC8DE8C", VA = "0xC8DE8C")]
	private void UnBindToBService()
	{
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0xC8DE94", Offset = "0xC8DE94", VA = "0xC8DE94")]
	private void BoolCallback(string value)
	{
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0xC8DF44", Offset = "0xC8DF44", VA = "0xC8DF44")]
	private void IntCallback(string value)
	{
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0xC8DFD4", Offset = "0xC8DFD4", VA = "0xC8DFD4")]
	private void LongCallback(string value)
	{
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0xC8E064", Offset = "0xC8E064", VA = "0xC8E064")]
	public void StateGetDeviceInfo()
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0xC8E0F0", Offset = "0xC8E0F0", VA = "0xC8E0F0")]
	public void ControlSetDeviceAction()
	{
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0xC8E170", Offset = "0xC8E170", VA = "0xC8E170")]
	private void ControlSetDeviceActionCallBack(int value)
	{
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0xC8E220", Offset = "0xC8E220", VA = "0xC8E220")]
	public void AppManager()
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0xC8E2AC", Offset = "0xC8E2AC", VA = "0xC8E2AC")]
	private void AppManagerCallBack(int value)
	{
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0xC8E35C", Offset = "0xC8E35C", VA = "0xC8E35C")]
	public Pvr_ToBService()
	{
	}
}
[Token(Token = "0x2000111")]
public class PLOG : MonoBehaviour
{
	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int logLevel;

	[Token(Token = "0x6000986")]
	[Address(RVA = "0x9EFB78", Offset = "0x9EFB78", VA = "0x9EFB78")]
	public static void getConfigTraceLevel()
	{
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0x9EFBE4", Offset = "0x9EFBE4", VA = "0x9EFBE4")]
	public static void D(string msg)
	{
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0x9EFC8C", Offset = "0x9EFC8C", VA = "0x9EFC8C")]
	public static void I(string msg)
	{
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0x9EFD34", Offset = "0x9EFD34", VA = "0x9EFD34")]
	public static void W(string msg)
	{
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0x9EFDDC", Offset = "0x9EFDDC", VA = "0x9EFDDC")]
	public static void E(string msg)
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0x9EFE44", Offset = "0x9EFE44", VA = "0x9EFE44")]
	public PLOG()
	{
	}
}
[Token(Token = "0x2000112")]
public class CPicoSDKSettingAsset : ScriptableObject
{
	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IgnoreSDKSetting;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool DontshowBuildWaring;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool AppIDChecked;

	[Token(Token = "0x600098D")]
	[Address(RVA = "0x9BC48C", Offset = "0x9BC48C", VA = "0x9BC48C")]
	public CPicoSDKSettingAsset()
	{
	}
}
[Serializable]
[Token(Token = "0x2000113")]
public class Pvr_UnitySDKProjectSetting : ScriptableObject
{
	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RenderTextureAntiAliasing rtAntiAlising;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public RenderTextureDepth rtBitDepth;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RenderTextureFormat rtFormat;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool usedefaultRenderTexture;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 customRTSize;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool usedefaultfps;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int customfps;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool usesinglepass;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool usecontentprotect;

	[Token(Token = "0x600098E")]
	[Address(RVA = "0xCD6EB0", Offset = "0xCD6EB0", VA = "0xCD6EB0")]
	public static Pvr_UnitySDKProjectSetting GetProjectConfig()
	{
		return null;
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0xCD6F04", Offset = "0xCD6F04", VA = "0xCD6F04")]
	public Pvr_UnitySDKProjectSetting()
	{
	}
}
[Token(Token = "0x2000114")]
public sealed class Pvr_UnitySDKPlatformSetting : ScriptableObject
{
	[Token(Token = "0x2000408")]
	public enum simulationType
	{
		[Token(Token = "0x4002103")]
		Null,
		[Token(Token = "0x4002104")]
		Invalid,
		[Token(Token = "0x4002105")]
		Valid
	}

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool entitlementchecksimulation;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool startTimeEntitlementCheck;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public string appID;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> deviceSN;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_UnitySDKPlatformSetting instance;

	[Token(Token = "0x1700009D")]
	public static bool Entitlementchecksimulation
	{
		[Token(Token = "0x6000990")]
		[Address(RVA = "0xCD6174", Offset = "0xCD6174", VA = "0xCD6174")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000991")]
		[Address(RVA = "0xCD6194", Offset = "0xCD6194", VA = "0xCD6194")]
		set
		{
		}
	}

	[Token(Token = "0x1700009E")]
	public static bool StartTimeEntitlementCheck
	{
		[Token(Token = "0x6000992")]
		[Address(RVA = "0xCD5B60", Offset = "0xCD5B60", VA = "0xCD5B60")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000993")]
		[Address(RVA = "0xCD61E0", Offset = "0xCD61E0", VA = "0xCD61E0")]
		set
		{
		}
	}

	[Token(Token = "0x1700009F")]
	public static Pvr_UnitySDKPlatformSetting Instance
	{
		[Token(Token = "0x6000994")]
		[Address(RVA = "0xCD5B80", Offset = "0xCD5B80", VA = "0xCD5B80")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000995")]
		[Address(RVA = "0xCD622C", Offset = "0xCD622C", VA = "0xCD622C")]
		set
		{
		}
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0xCD6280", Offset = "0xCD6280", VA = "0xCD6280")]
	public Pvr_UnitySDKPlatformSetting()
	{
	}
}
[Token(Token = "0x2000115")]
public class Pvr_UnitySDKManager : MonoBehaviour
{
	[Token(Token = "0x2000409")]
	public delegate void EntitlementCheckResult(int ReturnValue);

	[Token(Token = "0x200040A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B4C", Offset = "0x7D8B4C")]
	private sealed class <ToastManager>d__97 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4002109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int type;

		[Token(Token = "0x400210A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Pvr_UnitySDKManager <>4__this;

		[Token(Token = "0x400210B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool state;

		[Token(Token = "0x17000381")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002408")]
			[Address(RVA = "0xCD5E14", Offset = "0xCD5E14", VA = "0xCD5E14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000382")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600240A")]
			[Address(RVA = "0xCD5E80", Offset = "0xCD5E80", VA = "0xCD5E80", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002405")]
		[Address(RVA = "0xCD5CAC", Offset = "0xCD5CAC", VA = "0xCD5CAC")]
		[DebuggerHidden]
		public <ToastManager>d__97(int <>1__state)
		{
		}

		[Token(Token = "0x6002406")]
		[Address(RVA = "0xCD5CD8", Offset = "0xCD5CD8", VA = "0xCD5CD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0xCD5CDC", Offset = "0xCD5CDC", VA = "0xCD5CDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0xCD5E1C", Offset = "0xCD5E1C", VA = "0xCD5E1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200040B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B5C", Offset = "0x7D8B5C")]
	private sealed class <>c__DisplayClass102_0
	{
		[Token(Token = "0x400210C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Pvr_UnitySDKManager <>4__this;

		[Token(Token = "0x400210D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform trans;

		[Token(Token = "0x600240B")]
		[Address(RVA = "0x11B9260", Offset = "0x11B9260", VA = "0x11B9260")]
		public <>c__DisplayClass102_0()
		{
		}

		[Token(Token = "0x600240C")]
		[Address(RVA = "0x11BB9DC", Offset = "0x11BB9DC", VA = "0x11BB9DC")]
		internal void <SetProperty>b__0()
		{
		}
	}

	[Token(Token = "0x200040C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B6C", Offset = "0x7D8B6C")]
	private sealed class <G3TipsManager>d__106 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400210E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400210F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4002111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject tip;

		[Token(Token = "0x17000383")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002410")]
			[Address(RVA = "0x11BBAF0", Offset = "0x11BBAF0", VA = "0x11BBAF0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000384")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002412")]
			[Address(RVA = "0x11BBB5C", Offset = "0x11BBB5C", VA = "0x11BBB5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600240D")]
		[Address(RVA = "0x11B959C", Offset = "0x11B959C", VA = "0x11B959C")]
		[DebuggerHidden]
		public <G3TipsManager>d__106(int <>1__state)
		{
		}

		[Token(Token = "0x600240E")]
		[Address(RVA = "0x11BBA34", Offset = "0x11BBA34", VA = "0x11BBA34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600240F")]
		[Address(RVA = "0x11BBA38", Offset = "0x11BBA38", VA = "0x11BBA38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002411")]
		[Address(RVA = "0x11BBAF8", Offset = "0x11BBAF8", VA = "0x11BBAF8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200040D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B7C", Offset = "0x7D8B7C")]
	private sealed class <Start>d__118 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pvr_UnitySDKManager <>4__this;

		[Token(Token = "0x17000385")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002416")]
			[Address(RVA = "0xCD5C38", Offset = "0xCD5C38", VA = "0xCD5C38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000386")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002418")]
			[Address(RVA = "0xCD5CA4", Offset = "0xCD5CA4", VA = "0xCD5CA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0xCD57E0", Offset = "0xCD57E0", VA = "0xCD57E0")]
		[DebuggerHidden]
		public <Start>d__118(int <>1__state)
		{
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0xCD580C", Offset = "0xCD580C", VA = "0xCD580C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002415")]
		[Address(RVA = "0xCD5810", Offset = "0xCD5810", VA = "0xCD5810", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002417")]
		[Address(RVA = "0xCD5C40", Offset = "0xCD5C40", VA = "0xCD5C40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200040E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B8C", Offset = "0x7D8B8C")]
	private sealed class <InitRenderThreadRoutine>d__119 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <i>5__2;

		[Token(Token = "0x17000387")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600241C")]
			[Address(RVA = "0x11BBD18", Offset = "0x11BBD18", VA = "0x11BBD18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000388")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600241E")]
			[Address(RVA = "0x11BBD84", Offset = "0x11BBD84", VA = "0x11BBD84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002419")]
		[Address(RVA = "0x11BAEB0", Offset = "0x11BAEB0", VA = "0x11BAEB0")]
		[DebuggerHidden]
		public <InitRenderThreadRoutine>d__119(int <>1__state)
		{
		}

		[Token(Token = "0x600241A")]
		[Address(RVA = "0x11BBB64", Offset = "0x11BBB64", VA = "0x11BBB64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0x11BBB68", Offset = "0x11BBB68", VA = "0x11BBB68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600241D")]
		[Address(RVA = "0x11BBD20", Offset = "0x11BBD20", VA = "0x11BBD20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200040F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8B9C", Offset = "0x7D8B9C")]
	private sealed class <OnResume>d__132 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400211A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pvr_UnitySDKManager <>4__this;

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <ability6dof>5__2;

		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <waitNum>5__3;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <resetNum>5__4;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <i>5__5;

		[Token(Token = "0x17000389")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002422")]
			[Address(RVA = "0x11BC304", Offset = "0x11BC304", VA = "0x11BC304", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002424")]
			[Address(RVA = "0x11BC370", Offset = "0x11BC370", VA = "0x11BC370", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600241F")]
		[Address(RVA = "0x11BB8D0", Offset = "0x11BB8D0", VA = "0x11BB8D0")]
		[DebuggerHidden]
		public <OnResume>d__132(int <>1__state)
		{
		}

		[Token(Token = "0x6002420")]
		[Address(RVA = "0x11BBD8C", Offset = "0x11BBD8C", VA = "0x11BBD8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002421")]
		[Address(RVA = "0x11BBD90", Offset = "0x11BBD90", VA = "0x11BBD90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002423")]
		[Address(RVA = "0x11BC30C", Offset = "0x11BC30C", VA = "0x11BC30C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlatForm platform;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Pvr_UnitySDKManager sdk;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float EyesAspect;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public int posStatus;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public bool ismirroring;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public Vector3 resetBasePos;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public int trackingmode;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public int systemprop;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public bool systemFPS;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public float[] headData;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool rotfoldout;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[SerializeField]
	private bool hmdOnlyrot;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[SerializeField]
	private bool controllerOnlyrot;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private TrackingOrigin trackingOrigin;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool ResetTrackerOnLoad;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[HideInInspector]
	public Vector3 leftEyeOffset;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Vector3 rightEyeOffset;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[HideInInspector]
	public Rect leftEyeRect;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[HideInInspector]
	public Rect rightEyeRect;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[HideInInspector]
	public Matrix4x4 leftEyeView;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[HideInInspector]
	public Matrix4x4 rightEyeView;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[HideInInspector]
	public Pvr_UnitySDKEditor pvr_UnitySDKEditor;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private bool vrModeEnabled;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[HideInInspector]
	public Material Eyematerial;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[HideInInspector]
	public Material Middlematerial;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC10C", Offset = "0x7DC10C")]
	private bool <picovrTriggered>k__BackingField;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
	[HideInInspector]
	public bool newPicovrTriggered;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x132")]
	[SerializeField]
	private bool showFPS;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[HideInInspector]
	public Vector3 neckOffset;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private bool pVRNeck;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
	[HideInInspector]
	public bool UseCustomNeckPara;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x142")]
	[HideInInspector]
	public bool onResume;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x143")]
	[HideInInspector]
	public bool isEnterVRMode;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public bool isHasController;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Pvr_UnitySDKConfigProfile pvr_UnitySDKConfig;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private GameObject calltoast;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private GameObject msgtoast;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private GameObject lowhmdBatterytoast;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private GameObject lowphoneBatterytoast;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private GameObject LowPhoneHealthtoast;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private GameObject LowcontrollerBatterytoast;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private bool lowControllerpowerstate;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float controllerpowershowtime;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool UseToast;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private int iPhoneHMDModeEnabled;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private GameObject G3LiteTips;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	private bool monoscopic;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x199")]
	private bool mIsAndroid7;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Func<bool> eventEnterVRMode;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19A")]
	[HideInInspector]
	public bool ShowVideoSeethrough;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	public int SystemDebugFFRLevel;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public int SystemFFRLevel;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	public int AppCheckResult;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public Action longPressHomeKeyAction;

	[Token(Token = "0x170000A0")]
	public static Pvr_UnitySDKManager SDK
	{
		[Token(Token = "0x6000997")]
		[Address(RVA = "0x11A2CD4", Offset = "0x11A2CD4", VA = "0x11A2CD4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A1")]
	public bool Rotfoldout
	{
		[Token(Token = "0x6000998")]
		[Address(RVA = "0x11B69CC", Offset = "0x11B69CC", VA = "0x11B69CC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000999")]
		[Address(RVA = "0x11B69D4", Offset = "0x11B69D4", VA = "0x11B69D4")]
		set
		{
		}
	}

	[Token(Token = "0x170000A2")]
	public bool HmdOnlyrot
	{
		[Token(Token = "0x600099A")]
		[Address(RVA = "0x11B69F4", Offset = "0x11B69F4", VA = "0x11B69F4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600099B")]
		[Address(RVA = "0x11B69FC", Offset = "0x11B69FC", VA = "0x11B69FC")]
		set
		{
		}
	}

	[Token(Token = "0x170000A3")]
	public bool ControllerOnlyrot
	{
		[Token(Token = "0x600099C")]
		[Address(RVA = "0x11B6A1C", Offset = "0x11B6A1C", VA = "0x11B6A1C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600099D")]
		[Address(RVA = "0x11B6A24", Offset = "0x11B6A24", VA = "0x11B6A24")]
		set
		{
		}
	}

	[Token(Token = "0x170000A4")]
	public TrackingOrigin TrackingOrigin
	{
		[Token(Token = "0x600099E")]
		[Address(RVA = "0x11B6A44", Offset = "0x11B6A44", VA = "0x11B6A44")]
		get
		{
			return default(TrackingOrigin);
		}
		[Token(Token = "0x600099F")]
		[Address(RVA = "0x11B6A4C", Offset = "0x11B6A4C", VA = "0x11B6A4C")]
		set
		{
		}
	}

	[Token(Token = "0x170000A5")]
	[HideInInspector]
	public bool VRModeEnabled
	{
		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x11B6B04", Offset = "0x11B6B04", VA = "0x11B6B04")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x11B0404", Offset = "0x11B0404", VA = "0x11B0404")]
		set
		{
		}
	}

	[Token(Token = "0x170000A6")]
	[HideInInspector]
	public bool picovrTriggered
	{
		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x11B6B0C", Offset = "0x11B6B0C", VA = "0x11B6B0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1554", Offset = "0x7E1554")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x11B6B14", Offset = "0x11B6B14", VA = "0x11B6B14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1564", Offset = "0x7E1564")]
		set
		{
		}
	}

	[Token(Token = "0x170000A7")]
	public bool ShowFPS
	{
		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x11B6B20", Offset = "0x11B6B20", VA = "0x11B6B20")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x11B6B28", Offset = "0x11B6B28", VA = "0x11B6B28")]
		set
		{
		}
	}

	[Token(Token = "0x170000A8")]
	public bool PVRNeck
	{
		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x11B6B48", Offset = "0x11B6B48", VA = "0x11B6B48")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x11B6B50", Offset = "0x11B6B50", VA = "0x11B6B50")]
		set
		{
		}
	}

	[Token(Token = "0x170000A9")]
	[HideInInspector]
	public bool Monoscopic
	{
		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x11B6B70", Offset = "0x11B6B70", VA = "0x11B6B70")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x11B6B78", Offset = "0x11B6B78", VA = "0x11B6B78")]
		set
		{
		}
	}

	[Token(Token = "0x14000015")]
	public static event EntitlementCheckResult EntitlementCheckResultEvent
	{
		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x11B6BA0", Offset = "0x11B6BA0", VA = "0x11B6BA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1574", Offset = "0x7E1574")]
		add
		{
		}
		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x11B6C90", Offset = "0x11B6C90", VA = "0x11B6C90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1584", Offset = "0x7E1584")]
		remove
		{
		}
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0x11B6A68", Offset = "0x11B6A68", VA = "0x11B6A68")]
	public void ChangeDefaultCustomRtSize(int w, int h)
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0x11B1804", Offset = "0x11B1804", VA = "0x11B1804")]
	public Vector3 EyeOffset(Eye eye)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x11B6AC8", Offset = "0x11B6AC8", VA = "0x11B6AC8")]
	public Rect EyeRect(Eye eye)
	{
		return default(Rect);
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0x11B6D80", Offset = "0x11B6D80", VA = "0x11B6D80")]
	private bool SDKManagerInit()
	{
		return default(bool);
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0x11B6ED0", Offset = "0x11B6ED0", VA = "0x11B6ED0")]
	private bool SDKManagerInitCoreAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0x11B7004", Offset = "0x11B7004", VA = "0x11B7004")]
	public void smsReceivedCallback(string msg)
	{
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0x11B7738", Offset = "0x11B7738", VA = "0x11B7738")]
	public void phoneStateCallback(string state)
	{
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0x11B7AC4", Offset = "0x11B7AC4", VA = "0x11B7AC4")]
	public void phoneBatteryStateCallback(string state)
	{
	}

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0x11B7D78", Offset = "0x11B7D78", VA = "0x11B7D78")]
	public void hmdLowBatteryCallback(string level)
	{
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0x11B7390", Offset = "0x11B7390", VA = "0x11B7390")]
	private string TransformNumber(string number)
	{
		return null;
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0x11B7EB0", Offset = "0x11B7EB0", VA = "0x11B7EB0")]
	public void onHmdOrientationReseted()
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0x11B7698", Offset = "0x11B7698", VA = "0x11B7698")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E1594", Offset = "0x7E1594")]
	private IEnumerator ToastManager(int type, bool state, float time)
	{
		return null;
	}

	[Token(Token = "0x60009B8")]
	[Address(RVA = "0x11B7EB4", Offset = "0x11B7EB4", VA = "0x11B7EB4")]
	private void CheckControllerStateForG2(string state)
	{
	}

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0x11B8064", Offset = "0x11B8064", VA = "0x11B8064")]
	public void notificationCallback(string data)
	{
	}

	[Token(Token = "0x60009BA")]
	[Address(RVA = "0x11B8FF8", Offset = "0x11B8FF8", VA = "0x11B8FF8")]
	private Sprite LoadSprite(Vector2 size, string filepath)
	{
		return null;
	}

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0x11B9118", Offset = "0x11B9118", VA = "0x11B9118")]
	private byte[] ReadTex(string path)
	{
		return null;
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0x11B83F4", Offset = "0x11B83F4", VA = "0x11B83F4")]
	private void SetProperty(int type, JsonData data, string value)
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0x11B88F8", Offset = "0x11B88F8", VA = "0x11B88F8")]
	private void SetBaseProperty(Transform trans, JsonData data, string value)
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0x11B8CD8", Offset = "0x11B8CD8", VA = "0x11B8CD8")]
	private void SetImageProperty(Transform image, JsonData data, string value)
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0x11B9268", Offset = "0x11B9268", VA = "0x11B9268")]
	private void SetTextProperty(Transform text, JsonData data, string value)
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0x11B8F74", Offset = "0x11B8F74", VA = "0x11B8F74")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E15F8", Offset = "0x7E15F8")]
	private IEnumerator G3TipsManager(GameObject tip, float time)
	{
		return null;
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0x11B9520", Offset = "0x11B9520", VA = "0x11B9520")]
	private float JsonToFloat(JsonData data)
	{
		return default(float);
	}

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0x11B95C8", Offset = "0x11B95C8", VA = "0x11B95C8")]
	private bool SDKManagerInitFPS()
	{
		return default(bool);
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0x11B6E5C", Offset = "0x11B6E5C", VA = "0x11B6E5C")]
	private bool SDKManagerInitConfigProfile()
	{
		return default(bool);
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0x11B978C", Offset = "0x11B978C", VA = "0x11B978C")]
	private bool SDKManagerInitEditor()
	{
		return default(bool);
	}

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0x11B9838", Offset = "0x11B9838", VA = "0x11B9838")]
	private bool SDKManagerInitPara()
	{
		return default(bool);
	}

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0x11B9840", Offset = "0x11B9840", VA = "0x11B9840")]
	public void SDKManagerLongHomeKey()
	{
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0x11B994C", Offset = "0x11B994C", VA = "0x11B994C")]
	private void setLongHomeKey()
	{
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0x11B9BD0", Offset = "0x11B9BD0", VA = "0x11B9BD0")]
	public void verifyAPPCallback(string code)
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0x11B9D10", Offset = "0x11B9D10", VA = "0x11B9D10")]
	public void IpdRefreshCallBack(string ipd)
	{
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0x11B9E4C", Offset = "0x11B9E4C", VA = "0x11B9E4C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0x11BADDC", Offset = "0x11BADDC", VA = "0x11BADDC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E165C", Offset = "0x7E165C")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0x11BAE50", Offset = "0x11BAE50", VA = "0x11BAE50")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E16C0", Offset = "0x7E16C0")]
	private IEnumerator InitRenderThreadRoutine()
	{
		return null;
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0x11BAEDC", Offset = "0x11BAEDC", VA = "0x11BAEDC")]
	private void Update()
	{
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0x11BB170", Offset = "0x11BB170", VA = "0x11BB170")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0x11BB2D0", Offset = "0x11BB2D0", VA = "0x11BB2D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0x11BB408", Offset = "0x11BB408", VA = "0x11BB408")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0x11BB410", Offset = "0x11BB410", VA = "0x11BB410")]
	private void OnPause()
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x11BB530", Offset = "0x11BB530", VA = "0x11BB530")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x11BB7DC", Offset = "0x11BB7DC", VA = "0x11BB7DC")]
	public void EnterVRMode()
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0x11BB4C0", Offset = "0x11BB4C0", VA = "0x11BB4C0")]
	public void LeaveVRMode()
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0x11BB8C8", Offset = "0x11BB8C8", VA = "0x11BB8C8")]
	public void SixDofForceQuit()
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x11BA82C", Offset = "0x11BA82C", VA = "0x11BA82C")]
	private void InitUI()
	{
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0x11BAA2C", Offset = "0x11BAA2C", VA = "0x11BAA2C")]
	private void RefreshTextByLanguage()
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0x11BA450", Offset = "0x11BA450", VA = "0x11BA450")]
	private void LoadIsMirroringValue()
	{
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0x11BB768", Offset = "0x11BB768", VA = "0x11BB768")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E1724", Offset = "0x7E1724")]
	private IEnumerator OnResume()
	{
		return null;
	}

	[Token(Token = "0x60009DA")]
	[Address(RVA = "0x11BB8FC", Offset = "0x11BB8FC", VA = "0x11BB8FC")]
	public Pvr_UnitySDKManager()
	{
	}
}
[Token(Token = "0x2000116")]
public class QuitGame : MonoBehaviour
{
	[Token(Token = "0x60009DC")]
	[Address(RVA = "0xCDFA44", Offset = "0xCDFA44", VA = "0xCDFA44")]
	private void Start()
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0xCDFA48", Offset = "0xCDFA48", VA = "0xCDFA48")]
	private void Update()
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0xCDFA74", Offset = "0xCDFA74", VA = "0xCDFA74")]
	public QuitGame()
	{
	}
}
[Token(Token = "0x2000117")]
public class Pvr_UnityEyeMask : MonoBehaviour
{
	[Token(Token = "0x2000410")]
	private class EyeMaskData
	{
		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Eye eyeSide;

		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera camera;

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CommandBuffer cmdBuf;

		[Token(Token = "0x6002425")]
		[Address(RVA = "0xC95B10", Offset = "0xC95B10", VA = "0xC95B10")]
		public EyeMaskData()
		{
		}
	}

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Shader eyeMaskShader;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material eyeMaskMaterial;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Mesh eyeMaskMeshLeft;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Mesh eyeMaskMeshRight;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Mesh eyeMaskMeshBoth;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float zDir;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Color eyeMaskColor;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<EyeMaskData> cameraDataList;

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0xC941E0", Offset = "0xC941E0", VA = "0xC941E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0xC9429C", Offset = "0xC9429C", VA = "0xC9429C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0xC94E14", Offset = "0xC94E14", VA = "0xC94E14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0xC9483C", Offset = "0xC9483C", VA = "0xC9483C")]
	private void CreateCommandBuffer()
	{
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0xC9593C", Offset = "0xC9593C", VA = "0xC9593C")]
	private void OnCustomPreRender(Camera cam)
	{
	}

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0xC95198", Offset = "0xC95198", VA = "0xC95198")]
	private Mesh GetStencilMesh(Eye eyeSide)
	{
		return null;
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0xC95500", Offset = "0xC95500", VA = "0xC95500")]
	private Mesh GetStencilMeshBoth(Mesh leftMesh, Mesh rightMesh)
	{
		return null;
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0xC95084", Offset = "0xC95084", VA = "0xC95084")]
	private bool VerifyCommadBuffer()
	{
		return default(bool);
	}

	[Token(Token = "0x60009E7")]
	[Address(RVA = "0xC944F4", Offset = "0xC944F4", VA = "0xC944F4")]
	private void PrepareCameras()
	{
	}

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0xC95AE0", Offset = "0xC95AE0", VA = "0xC95AE0")]
	private void AddCameraCommandBuffer(EyeMaskData data)
	{
	}

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0xC94FE8", Offset = "0xC94FE8", VA = "0xC94FE8")]
	private void RemoveCameraCommandBuffer(EyeMaskData data)
	{
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0xC95018", Offset = "0xC95018", VA = "0xC95018")]
	private void CleanEyeMask()
	{
	}

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0xC95B18", Offset = "0xC95B18", VA = "0xC95B18")]
	public Pvr_UnityEyeMask()
	{
	}
}
[Token(Token = "0x2000118")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5360", Offset = "0x7D5360")]
public class Pvr_UnitySDKEye : MonoBehaviour
{
	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Pvr_UnitySDKEye> Instances;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Eye eyeSide;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC1BC", Offset = "0x7DC1BC")]
	private Camera <eyecamera>k__BackingField;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int eyeCameraOriginCullingMask;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private CameraClearFlags eyeCameraOriginClearFlag;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color eyeCameraOriginBackgroundColor;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int lastBoundaryState;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Matrix4x4 realProj;

	[Token(Token = "0x4000744")]
	private const int bufferSize = 3;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int IDIndex;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private RenderEventType eventType;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int previousId;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool setLevel;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Material mat_Vignette;

	[Token(Token = "0x170000AA")]
	public Camera eyecamera
	{
		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x11B04C0", Offset = "0x11B04C0", VA = "0x11B04C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1788", Offset = "0x7E1788")]
		get
		{
			return null;
		}
		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x11B04C8", Offset = "0x11B04C8", VA = "0x11B04C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1798", Offset = "0x7E1798")]
		private set
		{
		}
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0x11B04D0", Offset = "0x11B04D0", VA = "0x11B04D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0x11B0570", Offset = "0x11B0570", VA = "0x11B0570")]
	private void Start()
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0x11B0B08", Offset = "0x11B0B08", VA = "0x11B0B08")]
	private void Update()
	{
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0x11B0D44", Offset = "0x11B0D44", VA = "0x11B0D44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0x11B0E4C", Offset = "0x11B0E4C", VA = "0x11B0E4C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0x11B0F54", Offset = "0x11B0F54", VA = "0x11B0F54")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0x11B0FD8", Offset = "0x11B0FD8", VA = "0x11B0FD8")]
	public void MyPreRender(Camera camera)
	{
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0x11B11C8", Offset = "0x11B11C8", VA = "0x11B11C8")]
	public void MyPreRender(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0x11B128C", Offset = "0x11B128C", VA = "0x11B128C")]
	public void MyPostRender(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0x11B109C", Offset = "0x11B109C", VA = "0x11B109C")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0x11B1350", Offset = "0x11B1350", VA = "0x11B1350")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0x11B167C", Offset = "0x11B167C", VA = "0x11B167C")]
	public void EyeRender()
	{
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0x11B0650", Offset = "0x11B0650", VA = "0x11B0650")]
	private void Setup(Eye eyeSide)
	{
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0x11B0868", Offset = "0x11B0868", VA = "0x11B0868")]
	private void SetupUpdate()
	{
	}

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0x11A7600", Offset = "0x11A7600", VA = "0x11A7600")]
	public void RefreshCameraPosition(float ipd)
	{
	}

	[Token(Token = "0x60009FD")]
	[Address(RVA = "0x11B183C", Offset = "0x11B183C", VA = "0x11B183C")]
	private void DrawVignetteLine()
	{
	}

	[Token(Token = "0x60009FE")]
	[Address(RVA = "0x11B1968", Offset = "0x11B1968", VA = "0x11B1968")]
	private void vignette()
	{
	}

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0x11B14F4", Offset = "0x11B14F4", VA = "0x11B14F4")]
	private void SetFFRParameter()
	{
	}

	[Token(Token = "0x6000A00")]
	[Address(RVA = "0x11B1BE8", Offset = "0x11B1BE8", VA = "0x11B1BE8")]
	public Pvr_UnitySDKEye()
	{
	}
}
[Token(Token = "0x2000119")]
public class Pvr_UnitySDKEyeManager : MonoBehaviour
{
	[Token(Token = "0x2000411")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8BAC", Offset = "0x7D8BAC")]
	private sealed class <EndOfFrame>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pvr_UnitySDKEyeManager <>4__this;

		[Token(Token = "0x1700038B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002429")]
			[Address(RVA = "0x11B5378", Offset = "0x11B5378", VA = "0x11B5378", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600242B")]
			[Address(RVA = "0x11B53E4", Offset = "0x11B53E4", VA = "0x11B53E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002426")]
		[Address(RVA = "0x11B38E4", Offset = "0x11B38E4", VA = "0x11B38E4")]
		[DebuggerHidden]
		public <EndOfFrame>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0x11B4434", Offset = "0x11B4434", VA = "0x11B4434", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002428")]
		[Address(RVA = "0x11B4438", Offset = "0x11B4438", VA = "0x11B4438", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600242A")]
		[Address(RVA = "0x11B5380", Offset = "0x11B5380", VA = "0x11B5380", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000412")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8BBC", Offset = "0x7D8BBC")]
	private sealed class <ScreenFade>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pvr_UnitySDKEyeManager <>4__this;

		[Token(Token = "0x4002128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startAlpha;

		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float endAlpha;

		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x1700038D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600242F")]
			[Address(RVA = "0x11B5524", Offset = "0x11B5524", VA = "0x11B5524", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002431")]
			[Address(RVA = "0x11B5590", Offset = "0x11B5590", VA = "0x11B5590", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600242C")]
		[Address(RVA = "0x11B4370", Offset = "0x11B4370", VA = "0x11B4370")]
		[DebuggerHidden]
		public <ScreenFade>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x600242D")]
		[Address(RVA = "0x11B53EC", Offset = "0x11B53EC", VA = "0x11B53EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600242E")]
		[Address(RVA = "0x11B53F0", Offset = "0x11B53F0", VA = "0x11B53F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002430")]
		[Address(RVA = "0x11B552C", Offset = "0x11B552C", VA = "0x11B552C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_UnitySDKEyeManager instance;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Pvr_UnitySDKEye[] eyes;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public Camera LeftEyeCamera;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public Camera RightEyeCamera;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Camera MonoEyeCamera;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Camera BothEyeCamera;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int MonoEyeTextureID;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private readonly int WaitSplashScreenFrames;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int frameNum;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[HideInInspector]
	private bool foveatedRendering;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[HideInInspector]
	private EFoveationLevel foveationLevel;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int eyeTextureId;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private RenderEventType eventType;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Pvr_UnitySDKEyeOverlay compositeLayer;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int overlayLayerDepth;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int underlayLayerDepth;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isHeadLocked;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int layerFlags;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public bool EyeTracking;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[HideInInspector]
	public Vector3 eyePoint;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private EyeTrackingData eyePoseData;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[HideInInspector]
	public static bool supportEyeTracking;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC2AC", Offset = "0x7DC2AC")]
	public bool screenFade;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC2E4", Offset = "0x7DC2E4")]
	public float fadeTime;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC31C", Offset = "0x7DC31C")]
	public Color fadeColor;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public int renderQueue;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private MeshRenderer fadeMeshRenderer;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private MeshFilter fadeMeshFilter;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Material fadeMaterial;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private float elapsedTime;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private bool isFading;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float currentAlpha;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float nowFadeAlpha;

	[Token(Token = "0x170000AB")]
	public static Pvr_UnitySDKEyeManager Instance
	{
		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x11A7478", Offset = "0x11A7478", VA = "0x11A7478")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AC")]
	public Pvr_UnitySDKEye[] Eyes
	{
		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x11A7570", Offset = "0x11A7570", VA = "0x11A7570")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AD")]
	[HideInInspector]
	public bool FoveatedRendering
	{
		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x11B1D08", Offset = "0x11B1D08", VA = "0x11B1D08")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x11B1D10", Offset = "0x11B1D10", VA = "0x11B1D10")]
		set
		{
		}
	}

	[Token(Token = "0x170000AE")]
	[HideInInspector]
	public EFoveationLevel FoveationLevel
	{
		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x11B1D74", Offset = "0x11B1D74", VA = "0x11B1D74")]
		get
		{
			return default(EFoveationLevel);
		}
		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x11B1D7C", Offset = "0x11B1D7C", VA = "0x11B1D7C")]
		set
		{
		}
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0x11B1D90", Offset = "0x11B1D90", VA = "0x11B1D90")]
	private void SetCameraEnableEditor()
	{
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0x11B1FC4", Offset = "0x11B1FC4", VA = "0x11B1FC4")]
	private void SetCamerasEnableByStereoRendering()
	{
	}

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0x11B2090", Offset = "0x11B2090", VA = "0x11B2090")]
	private void SetupMonoCamera()
	{
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0x11B21A8", Offset = "0x11B21A8", VA = "0x11B21A8")]
	private void SetupUpdate()
	{
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0x11B228C", Offset = "0x11B228C", VA = "0x11B228C")]
	private void MonoEyeRender()
	{
	}

	[Token(Token = "0x6000A0D")]
	[Address(RVA = "0x11B2414", Offset = "0x11B2414", VA = "0x11B2414")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0x11B2BCC", Offset = "0x11B2BCC", VA = "0x11B2BCC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0x11B3280", Offset = "0x11B3280", VA = "0x11B3280")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0x11B32A4", Offset = "0x11B32A4", VA = "0x11B32A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0x11B3524", Offset = "0x11B3524", VA = "0x11B3524")]
	private void OnPause()
	{
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0x11B3608", Offset = "0x11B3608", VA = "0x11B3608")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0x11B3610", Offset = "0x11B3610", VA = "0x11B3610")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0x11B3778", Offset = "0x11B3778", VA = "0x11B3778")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0x11B3870", Offset = "0x11B3870", VA = "0x11B3870")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E17A8", Offset = "0x7E17A8")]
	private IEnumerator EndOfFrame()
	{
		return null;
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0x11B3910", Offset = "0x11B3910", VA = "0x11B3910")]
	private void CreateExternalSurface(Pvr_UnitySDKEyeOverlay overlayInstance, int layerDepth)
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0x11B3D0C", Offset = "0x11B3D0C", VA = "0x11B3D0C")]
	public bool SetEyeTrackingMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0x11A8448", Offset = "0x11A8448", VA = "0x11A8448")]
	public Vector3 GetEyeTrackingPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0x11B3FBC", Offset = "0x11B3FBC", VA = "0x11B3FBC")]
	private EyeDeviceInfo GetDeviceInfo()
	{
		return default(EyeDeviceInfo);
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0x11B2750", Offset = "0x11B2750", VA = "0x11B2750")]
	private void CreateFadeMesh()
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0x11B3614", Offset = "0x11B3614", VA = "0x11B3614")]
	private void DestoryFadeMesh()
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0x11B2BC4", Offset = "0x11B2BC4", VA = "0x11B2BC4")]
	public void SetCurrentAlpha(float alpha)
	{
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0x11B31F8", Offset = "0x11B31F8", VA = "0x11B31F8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E180C", Offset = "0x7E180C")]
	private IEnumerator ScreenFade(float startAlpha, float endAlpha)
	{
		return null;
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0x11B4218", Offset = "0x11B4218", VA = "0x11B4218")]
	private void SetMaterialAlpha()
	{
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0x11B31F0", Offset = "0x11B31F0", VA = "0x11B31F0")]
	public bool GfxDeviceAdvanceFrameGLES()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0x11B439C", Offset = "0x11B439C", VA = "0x11B439C")]
	public Pvr_UnitySDKEyeManager()
	{
	}
}
[Token(Token = "0x200011A")]
public class Pvr_UnitySDKEyeOverlay : MonoBehaviour, IComparable<Pvr_UnitySDKEyeOverlay>
{
	[Token(Token = "0x2000413")]
	public delegate void ExternalAndroidSurfaceObjectCreated();

	[Token(Token = "0x2000414")]
	public enum OverlayShape
	{
		[Token(Token = "0x400212C")]
		Quad,
		[Token(Token = "0x400212D")]
		Cylinder,
		[Token(Token = "0x400212E")]
		Equirect
	}

	[Token(Token = "0x2000415")]
	public enum OverlayType
	{
		[Token(Token = "0x4002130")]
		Overlay,
		[Token(Token = "0x4002131")]
		Underlay
	}

	[Token(Token = "0x2000416")]
	public enum OverlayTexFilterMode
	{
		[Token(Token = "0x4002133")]
		NotCare,
		[Token(Token = "0x4002134")]
		Nearest,
		[Token(Token = "0x4002135")]
		Linear,
		[Token(Token = "0x4002136")]
		Nearest_Mipmap_Nearest,
		[Token(Token = "0x4002137")]
		Linear_Mipmap_Nearest,
		[Token(Token = "0x4002138")]
		Nearest_Mipmap_Linear,
		[Token(Token = "0x4002139")]
		Linear_Mipmap_Linear
	}

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Pvr_UnitySDKEyeOverlay> Instances;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int layerIndex;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public OverlayType overlayType;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OverlayShape overlayShape;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform layerTransform;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture[] layerTextures;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int[] layerTextureIds;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Matrix4x4[] MVMatrixs;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3[] ModelScales;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Quaternion[] ModelRotations;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3[] ModelTranslations;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Quaternion[] CameraRotations;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector3[] CameraTranslations;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Camera[] layerEyeCamera;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool overrideColorScaleAndOffset;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector4 colorScale;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public Vector4 colorOffset;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector4 overlayLayerColorScaleDefault;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector4 overlayLayerColorOffsetDefault;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public bool isExternalAndroidSurface;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public IntPtr externalAndroidSurfaceObject;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public ExternalAndroidSurfaceObjectCreated externalAndroidSurfaceObjectCreated;

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0x11B5598", Offset = "0x11B5598", VA = "0x11B5598", Slot = "4")]
	public int CompareTo(Pvr_UnitySDKEyeOverlay other)
	{
		return default(int);
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0x11B55BC", Offset = "0x11B55BC", VA = "0x11B55BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0x11B5AB8", Offset = "0x11B5AB8", VA = "0x11B5AB8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0x11B5FA0", Offset = "0x11B5FA0", VA = "0x11B5FA0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0x11B2FB0", Offset = "0x11B2FB0", VA = "0x11B2FB0")]
	public void RefreshCamera()
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0x11B58F4", Offset = "0x11B58F4", VA = "0x11B58F4")]
	private void InitializeBuffer()
	{
	}

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0x11B5ABC", Offset = "0x11B5ABC", VA = "0x11B5ABC")]
	private void UpdateCoords()
	{
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0x11B6024", Offset = "0x11B6024", VA = "0x11B6024")]
	public void SetTexture(Texture texture)
	{
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0x11B60C0", Offset = "0x11B60C0", VA = "0x11B60C0")]
	public void SetLayerColorScaleAndOffset(Vector4 scale, Vector4 offset)
	{
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0x11B52F8", Offset = "0x11B52F8", VA = "0x11B52F8")]
	public Vector4 GetLayerColorScale()
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0x11B5338", Offset = "0x11B5338", VA = "0x11B5338")]
	public Vector4 GetLayerColorOffset()
	{
		return default(Vector4);
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0x11B60D4", Offset = "0x11B60D4", VA = "0x11B60D4")]
	public Pvr_UnitySDKEyeOverlay()
	{
	}
}
[Token(Token = "0x200011B")]
public class Pvr_UnitySDKRender
{
	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_UnitySDKRender instance;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AndroidJavaObject activity;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static AndroidJavaClass javaVrActivityClass;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static AndroidJavaClass javaSysActivityClass;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static AndroidJavaClass javaserviceClass;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static AndroidJavaClass javaVrActivityLongReceiver;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static AndroidJavaClass javaVrActivityClientClass;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool canConnecttoActivity;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool isInitrenderThread;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string model;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 prefinger1;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 prefinger2;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int eyeTextureCount;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RenderTexture[] eyeTextures;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int[] eyeTextureIds;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int currEyeTextureIdx;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int nextEyeTextureIdx;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int lastEyeTextureIdx;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool isSwitchSDK;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int RenderviewNumber;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool isFirstStartup;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool isShellMode;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private StereoRenderingPathPico stereoRenderPath;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC354", Offset = "0x7DC354")]
	private SDKStereoRendering <StereoRendering>k__BackingField;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float rtScaleFactor;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float eyeVFov;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float eyeHFov;

	[Token(Token = "0x170000AF")]
	public static Pvr_UnitySDKRender Instance
	{
		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xCD5A88", Offset = "0xCD5A88", VA = "0xCD5A88")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xCD701C", Offset = "0xCD701C", VA = "0xCD701C")]
		set
		{
		}
	}

	[Token(Token = "0x170000B0")]
	public StereoRenderingPathPico StereoRenderPath
	{
		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xCD79E0", Offset = "0xCD79E0", VA = "0xCD79E0")]
		get
		{
			return default(StereoRenderingPathPico);
		}
	}

	[Token(Token = "0x170000B1")]
	public SDKStereoRendering StereoRendering
	{
		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xCD79E8", Offset = "0xCD79E8", VA = "0xCD79E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1870", Offset = "0x7E1870")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xCD79F0", Offset = "0xCD79F0", VA = "0xCD79F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1880", Offset = "0x7E1880")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B2")]
	public float RtScaleFactor
	{
		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xCD79F8", Offset = "0xCD79F8", VA = "0xCD79F8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xCD7A00", Offset = "0xCD7A00", VA = "0xCD7A00")]
		set
		{
		}
	}

	[Token(Token = "0x170000B3")]
	public float EyeVFoV
	{
		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xCD7B70", Offset = "0xCD7B70", VA = "0xCD7B70")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xCD7B78", Offset = "0xCD7B78", VA = "0xCD7B78")]
		set
		{
		}
	}

	[Token(Token = "0x170000B4")]
	public float EyeHFoV
	{
		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xCD7B8C", Offset = "0xCD7B8C", VA = "0xCD7B8C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xCD7B94", Offset = "0xCD7B94", VA = "0xCD7B94")]
		set
		{
		}
	}

	[Token(Token = "0x6000A31")]
	[Address(RVA = "0xCD6F0C", Offset = "0xCD6F0C", VA = "0xCD6F0C")]
	public Pvr_UnitySDKRender()
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0xCD7088", Offset = "0xCD7088", VA = "0xCD7088")]
	public void ConnectToAndriod()
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0xCD7960", Offset = "0xCD7960", VA = "0xCD7960")]
	public void Init()
	{
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0xCD7FFC", Offset = "0xCD7FFC", VA = "0xCD7FFC")]
	private bool InitRenderAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0xCD811C", Offset = "0xCD811C", VA = "0xCD811C")]
	private bool UpdateRenderParaFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0xCD81C8", Offset = "0xCD81C8", VA = "0xCD81C8")]
	private bool CreateEyeBuffer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0xCD8B20", Offset = "0xCD8B20", VA = "0xCD8B20")]
	private void InitSinglePass()
	{
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0xCD8510", Offset = "0xCD8510", VA = "0xCD8510")]
	public float GetEyeVFOV()
	{
		return default(float);
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0xCD8678", Offset = "0xCD8678", VA = "0xCD8678")]
	public float GetEyeHFOV()
	{
		return default(float);
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0xCD8D38", Offset = "0xCD8D38", VA = "0xCD8D38")]
	private void ConfigureEyeBuffer(int eyeTextureIndex, Vector2 resolution)
	{
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0xCD7A18", Offset = "0xCD7A18", VA = "0xCD7A18")]
	public bool ReCreateEyeBuffer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0xCD5B48", Offset = "0xCD5B48", VA = "0xCD5B48")]
	public void ReInit()
	{
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0xCD925C", Offset = "0xCD925C", VA = "0xCD925C")]
	public void IssueRenderThread()
	{
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0xCD93AC", Offset = "0xCD93AC", VA = "0xCD93AC")]
	private void AutoAdpatForPico1s()
	{
	}

	[Token(Token = "0x6000A48")]
	[Address(RVA = "0xCD87E0", Offset = "0xCD87E0", VA = "0xCD87E0")]
	public Vector2 GetEyeBufferResolution()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000A49")]
	[Address(RVA = "0xCD95F4", Offset = "0xCD95F4", VA = "0xCD95F4")]
	public bool GetUsePredictedMatrix()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0xCD7BA8", Offset = "0xCD7BA8", VA = "0xCD7BA8")]
	public bool GetIsShellMode()
	{
		return default(bool);
	}
}
[Token(Token = "0x200011C")]
public class Pvr_UnitySDKSinglePass : SDKStereoRendering
{
	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Camera bothCamera;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Matrix4x4[] unity_StereoMatrixP;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Matrix4x4[] unity_StereoMatrixInvP;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Matrix4x4[] unity_StereoWorldToCamera;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Matrix4x4[] unity_StereoCameraToWorld;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Matrix4x4[] unity_StereoMatrixVP;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3[] eyesOffset;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Matrix4x4[] eyesOffsetMatrix;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CommandBuffer commandBufferBeforeForwardOpaque;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CommandBuffer commandBufferBeforeSkybox;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CommandBuffer commandBufferAfterSkybox;

	[Token(Token = "0x6000A4C")]
	[Address(RVA = "0xCDCB8C", Offset = "0xCDCB8C", VA = "0xCDCB8C", Slot = "4")]
	public override void InitEye(Camera eye)
	{
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0xCDD440", Offset = "0xCDD440", VA = "0xCDD440", Slot = "5")]
	public override void OnSDKRenderInited()
	{
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0xCDD570", Offset = "0xCDD570", VA = "0xCDD570", Slot = "6")]
	public override void OnSDKPreRender()
	{
	}

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0xCDDE38", Offset = "0xCDDE38", VA = "0xCDDE38", Slot = "7")]
	public override void OnSDKPostRender()
	{
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0xCDD444", Offset = "0xCDD444", VA = "0xCDD444")]
	public void OnSDKRenderInited_SinglePass()
	{
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0xCDDEF0", Offset = "0xCDDEF0", VA = "0xCDDEF0")]
	private void SetAntiAliasing()
	{
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0xCDCEB0", Offset = "0xCDCEB0", VA = "0xCDCEB0")]
	public void SetEyesPosition()
	{
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0xCDD2F8", Offset = "0xCDD2F8", VA = "0xCDD2F8")]
	public void SetEyeProjection()
	{
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0xCDDFF8", Offset = "0xCDDFF8", VA = "0xCDDFF8")]
	private static Matrix4x4 GetProjection(float near, float far)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0xCDE27C", Offset = "0xCDE27C", VA = "0xCDE27C")]
	public static Matrix4x4 MakeProjection(float n, float f)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0xCDE0CC", Offset = "0xCDE0CC", VA = "0xCDE0CC")]
	public void SetStereoProjectionMatrix(Matrix4x4 left, Matrix4x4 right)
	{
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0xCDDE40", Offset = "0xCDDE40", VA = "0xCDDE40")]
	private void SwitchKeywordAndDeviceView(bool enable)
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0xCDE458", Offset = "0xCDE458", VA = "0xCDE458")]
	public static Matrix4x4[] GetStereoWorldToCameraMat()
	{
		return null;
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0xCDD574", Offset = "0xCDD574", VA = "0xCDD574")]
	public void SinglePassPreRender()
	{
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0xCDE740", Offset = "0xCDE740", VA = "0xCDE740")]
	private void SetCommandBuffers()
	{
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0xCDE694", Offset = "0xCDE694", VA = "0xCDE694")]
	private void SetRenderTextureWithDepth()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xCD91B4", Offset = "0xCD91B4", VA = "0xCD91B4")]
	public Pvr_UnitySDKSinglePass()
	{
	}
}
[Token(Token = "0x200011D")]
public abstract class SDKStereoRendering
{
	[Token(Token = "0x6000A5E")]
	public abstract void InitEye(Camera eye);

	[Token(Token = "0x6000A5F")]
	public abstract void OnSDKRenderInited();

	[Token(Token = "0x6000A60")]
	public abstract void OnSDKPreRender();

	[Token(Token = "0x6000A61")]
	public abstract void OnSDKPostRender();

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0xCDEDD0", Offset = "0xCDEDD0", VA = "0xCDEDD0")]
	protected SDKStereoRendering()
	{
	}
}
[Token(Token = "0x200011E")]
public class HighlightAtGaze : MonoBehaviour
{
	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color HighlightColor;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float AnimationTime;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer myRenderer;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color originalColor;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color targetColor;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private EyeTrackingGazeRay gazeRay;

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0xAE5FAC", Offset = "0xAE5FAC", VA = "0xAE5FAC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0xAE6030", Offset = "0xAE6030", VA = "0xAE6030")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0xAE6214", Offset = "0xAE6214", VA = "0xAE6214")]
	public HighlightAtGaze()
	{
	}
}
[Token(Token = "0x200011F")]
public class RayVisualizer : MonoBehaviour
{
	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LineRenderer _line;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EyeTrackingGazeRay gazeRay;

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0xCDFA7C", Offset = "0xCDFA7C", VA = "0xCDFA7C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0xCDFB14", Offset = "0xCDFB14", VA = "0xCDFB14")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0xCDFCB4", Offset = "0xCDFCB4", VA = "0xCDFCB4")]
	public RayVisualizer()
	{
	}
}
[Token(Token = "0x2000120")]
public class GetSeeThroughImage : MonoBehaviour
{
	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RawImage viewImage_left;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RawImage viewImage_right;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int width;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int height;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture cameraTex_left;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RenderTexture cameraTex_right;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool cameraPreview;

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0xADE7C4", Offset = "0xADE7C4", VA = "0xADE7C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0xADE8DC", Offset = "0xADE8DC", VA = "0xADE8DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0xADE968", Offset = "0xADE968", VA = "0xADE968")]
	private void OnDestory()
	{
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0xADE7C8", Offset = "0xADE7C8", VA = "0xADE7C8")]
	private void CreateTexture()
	{
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0xADE918", Offset = "0xADE918", VA = "0xADE918")]
	private void DrawTexture()
	{
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0xADE980", Offset = "0xADE980", VA = "0xADE980")]
	public GetSeeThroughImage()
	{
	}
}
[Token(Token = "0x2000121")]
public class OverlayExternalSurfaceDemo : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000417")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8BCC", Offset = "0x7D8BCC")]
	private sealed class <>c
	{
		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Pvr_UnitySDKEyeOverlay.ExternalAndroidSurfaceObjectCreated <>9__7_0;

		[Token(Token = "0x6002437")]
		[Address(RVA = "0x9EFB04", Offset = "0x9EFB04", VA = "0x9EFB04")]
		public <>c()
		{
		}

		[Token(Token = "0x6002438")]
		[Address(RVA = "0x9EFB0C", Offset = "0x9EFB0C", VA = "0x9EFB0C")]
		internal void <StartPlay>b__7_0()
		{
		}
	}

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string movieName;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Pvr_UnitySDKEyeOverlay.OverlayType overlayType;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Pvr_UnitySDKEyeOverlay.OverlayShape overlayShape;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Pvr_UnitySDKEyeOverlay overlay;

	[Token(Token = "0x40007BA")]
	private const string TAG = "[ExternalSurface]>>>>>>";

	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0x9EF6F4", Offset = "0x9EF6F4", VA = "0x9EF6F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0x9EF820", Offset = "0x9EF820", VA = "0x9EF820")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0x9EF8A4", Offset = "0x9EF8A4", VA = "0x9EF8A4")]
	private void StartPlay(string moviePath, string licenceUrl)
	{
	}

	[Token(Token = "0x6000A72")]
	[Address(RVA = "0x9EFA98", Offset = "0x9EFA98", VA = "0x9EFA98")]
	public OverlayExternalSurfaceDemo()
	{
	}
}
[Token(Token = "0x2000122")]
public class MoveCylinder : MonoBehaviour
{
	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 startingPosition;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion startingRotation;

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0x9EB4E0", Offset = "0x9EB4E0", VA = "0x9EB4E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0x9EB53C", Offset = "0x9EB53C", VA = "0x9EB53C")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0x9EB594", Offset = "0x9EB594", VA = "0x9EB594")]
	public MoveCylinder()
	{
	}
}
[Token(Token = "0x2000123")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D53C4", Offset = "0x7D53C4")]
public class MoveSphere : MonoBehaviour
{
	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 startingPosition;

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0x9EB59C", Offset = "0x9EB59C", VA = "0x9EB59C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0x9EB720", Offset = "0x9EB720", VA = "0x9EB720")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000A78")]
	[Address(RVA = "0x9EB680", Offset = "0x9EB680", VA = "0x9EB680")]
	public void SetGazedAt(bool gazedAt)
	{
	}

	[Token(Token = "0x6000A79")]
	[Address(RVA = "0x9EB724", Offset = "0x9EB724", VA = "0x9EB724")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0x9EB82C", Offset = "0x9EB82C", VA = "0x9EB82C")]
	public void TeleportRandomly()
	{
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0x9EB93C", Offset = "0x9EB93C", VA = "0x9EB93C")]
	public MoveSphere()
	{
	}
}
[Token(Token = "0x2000124")]
public class Resetbutton : MonoBehaviour
{
	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0xCE0970", Offset = "0xCE0970", VA = "0xCE0970")]
	public void DemoResetTracking()
	{
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0xCE0A04", Offset = "0xCE0A04", VA = "0xCE0A04")]
	public Resetbutton()
	{
	}
}
[Token(Token = "0x2000125")]
public class UserEntitlementCheck : MonoBehaviour
{
	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0xA84B40", Offset = "0xA84B40", VA = "0xA84B40")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0xA84BD4", Offset = "0xA84BD4", VA = "0xA84BD4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0xA84C68", Offset = "0xA84C68", VA = "0xA84C68")]
	private void HandelEntitlementCheckResult(int resultCode)
	{
	}

	[Token(Token = "0x6000A81")]
	[Address(RVA = "0xA84F34", Offset = "0xA84F34", VA = "0xA84F34")]
	public UserEntitlementCheck()
	{
	}
}
[Token(Token = "0x2000126")]
public class Pvr_UnitySDKHeadTrack : MonoBehaviour
{
	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC364", Offset = "0x7DC364")]
	public bool trackRotation;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC39C", Offset = "0x7DC39C")]
	public bool trackPosition;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool updated;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool dataClock;

	[Token(Token = "0x170000B5")]
	public Ray Gaze
	{
		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x11B64B4", Offset = "0x11B64B4", VA = "0x11B64B4")]
		get
		{
			return default(Ray);
		}
	}

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x11B69B4", Offset = "0x11B69B4", VA = "0x11B69B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0x11B6550", Offset = "0x11B6550", VA = "0x11B6550")]
	private void UpdateHead()
	{
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0x11B69BC", Offset = "0x11B69BC", VA = "0x11B69BC")]
	public Pvr_UnitySDKHeadTrack()
	{
	}
}
[Token(Token = "0x2000127")]
public class Pvr_UnitySDKPose
{
	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static readonly Matrix4x4 flipZ;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC3D4", Offset = "0x7DC3D4")]
	private Vector3 <Position>k__BackingField;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC3E4", Offset = "0x7DC3E4")]
	private Quaternion <Orientation>k__BackingField;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC3F4", Offset = "0x7DC3F4")]
	private Matrix4x4 <Matrix>k__BackingField;

	[Token(Token = "0x170000B6")]
	public Matrix4x4 RightHandedMatrix
	{
		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xCD6794", Offset = "0xCD6794", VA = "0xCD6794")]
		get
		{
			return default(Matrix4x4);
		}
	}

	[Token(Token = "0x170000B7")]
	public Vector3 Position
	{
		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xCD6900", Offset = "0xCD6900", VA = "0xCD6900")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1890", Offset = "0x7E1890")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xCD690C", Offset = "0xCD690C", VA = "0xCD690C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E18A0", Offset = "0x7E18A0")]
		protected set
		{
		}
	}

	[Token(Token = "0x170000B8")]
	public Quaternion Orientation
	{
		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xCD6918", Offset = "0xCD6918", VA = "0xCD6918")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E18B0", Offset = "0x7E18B0")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xCD6924", Offset = "0xCD6924", VA = "0xCD6924")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E18C0", Offset = "0x7E18C0")]
		protected set
		{
		}
	}

	[Token(Token = "0x170000B9")]
	public Matrix4x4 Matrix
	{
		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xCD6930", Offset = "0xCD6930", VA = "0xCD6930")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E18D0", Offset = "0x7E18D0")]
		get
		{
			return default(Matrix4x4);
		}
		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xCD6954", Offset = "0xCD6954", VA = "0xCD6954")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E18E0", Offset = "0x7E18E0")]
		protected set
		{
		}
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0xCD6970", Offset = "0xCD6970", VA = "0xCD6970")]
	public Pvr_UnitySDKPose(Matrix4x4 matrix)
	{
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0xCD6B38", Offset = "0xCD6B38", VA = "0xCD6B38")]
	public Pvr_UnitySDKPose(Vector3 position, Quaternion orientation)
	{
	}

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0xCD6BB8", Offset = "0xCD6BB8", VA = "0xCD6BB8")]
	public void Set(Vector3 position, Quaternion orientation)
	{
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0xCD69CC", Offset = "0xCD69CC", VA = "0xCD69CC")]
	protected void Set(Matrix4x4 matrix)
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0xCD6CF8", Offset = "0xCD6CF8", VA = "0xCD6CF8")]
	private Quaternion NormalizeQuaternion(ref Quaternion q)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x2000128")]
public class Pvr_UnitySDKSensor
{
	[Token(Token = "0x2000418")]
	public delegate void Enter3DofModel();

	[Token(Token = "0x2000419")]
	public delegate void Exit3DofModel();

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_UnitySDKSensor instance;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool SensorStart;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool SensorInit;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Quaternion UnityQuaternion;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 UnityPosition;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Sensorindex sensorIndex;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool dofClock;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action EyeFovChanged;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Pvr_UnitySDKPose HeadPose;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float vfov;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float hfov;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float w;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float x;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float y;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float z;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float px;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float py;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float pz;

	[Token(Token = "0x170000BA")]
	public static Pvr_UnitySDKSensor Instance
	{
		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xCD9600", Offset = "0xCD9600", VA = "0xCD9600")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xCD977C", Offset = "0xCD977C", VA = "0xCD977C")]
		set
		{
		}
	}

	[Token(Token = "0x14000016")]
	public static event Enter3DofModel Enter3DofModelEvent
	{
		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xCD991C", Offset = "0xCD991C", VA = "0xCD991C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E18F0", Offset = "0x7E18F0")]
		add
		{
		}
		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xCD9A0C", Offset = "0xCD9A0C", VA = "0xCD9A0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1900", Offset = "0x7E1900")]
		remove
		{
		}
	}

	[Token(Token = "0x14000017")]
	public static event Exit3DofModel Exit3DofModelEvent
	{
		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xCD9AFC", Offset = "0xCD9AFC", VA = "0xCD9AFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1910", Offset = "0x7E1910")]
		add
		{
		}
		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xCD9BEC", Offset = "0xCD9BEC", VA = "0xCD9BEC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1920", Offset = "0x7E1920")]
		remove
		{
		}
	}

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0xCD96C0", Offset = "0xCD96C0", VA = "0xCD96C0")]
	public Pvr_UnitySDKSensor()
	{
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0xCD97E8", Offset = "0xCD97E8", VA = "0xCD97E8")]
	public void Init()
	{
	}

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0xCDA1B4", Offset = "0xCDA1B4", VA = "0xCDA1B4")]
	public void SensorUpdate()
	{
	}

	[Token(Token = "0x6000A9C")]
	[Address(RVA = "0xCD9F2C", Offset = "0xCD9F2C", VA = "0xCD9F2C")]
	public bool InitUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A9D")]
	[Address(RVA = "0xCD9CDC", Offset = "0xCD9CDC", VA = "0xCD9CDC")]
	public bool InitUnitySDK6DofSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A9E")]
	[Address(RVA = "0xCDA070", Offset = "0xCDA070", VA = "0xCDA070")]
	public bool StartUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A9F")]
	[Address(RVA = "0xCDB2CC", Offset = "0xCDB2CC", VA = "0xCDB2CC")]
	public bool StopUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0xCDB410", Offset = "0xCDB410", VA = "0xCDB410")]
	public bool ResetUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA1")]
	[Address(RVA = "0xCDB594", Offset = "0xCDB594", VA = "0xCDB594")]
	public bool OptionalResetUnitySDKSensor(int resetRot, int resetPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA2")]
	[Address(RVA = "0xCDA200", Offset = "0xCDA200", VA = "0xCDA200")]
	public bool GetUnitySDKSensorState()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0xCDBD6C", Offset = "0xCDBD6C", VA = "0xCDBD6C")]
	public bool GetUnitySDKPSensorState()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0xCDBBC0", Offset = "0xCDBBC0", VA = "0xCDBBC0")]
	private void RefreshHeadData(float x, float y, float z, float w, float px, float py, float pz)
	{
	}
}
[Token(Token = "0x2000129")]
public class CLoadingAsset : ScriptableObject
{
	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int SplashScreenType;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Texture2D> splashImage;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture2D Inside_background;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UseSplashText;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string DefaultText;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string ChineseText;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string EnglishText;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string JapaneseText;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string KoreanText;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string FontSize;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Color FontColor;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string TextHeight;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool UseCarousel;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int SplashTextAlignment;

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0x9BC41C", Offset = "0x9BC41C", VA = "0x9BC41C")]
	public CLoadingAsset()
	{
	}
}
[Serializable]
[Token(Token = "0x200012A")]
public class Pvr_UnitySDKConfigProfile
{
	[Token(Token = "0x200041A")]
	public struct Lenses
	{
		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float separation;

		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float offset;

		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float distance;

		[Token(Token = "0x400213F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int alignment;

		[Token(Token = "0x4002140")]
		public const int AlignTop = -1;

		[Token(Token = "0x4002141")]
		public const int AlignCenter = 0;

		[Token(Token = "0x4002142")]
		public const int AlignBottom = 1;
	}

	[Token(Token = "0x200041B")]
	public struct MaxFOV
	{
		[Token(Token = "0x4002143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float upper;

		[Token(Token = "0x4002144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float lower;

		[Token(Token = "0x4002145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float inner;

		[Token(Token = "0x4002146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float outer;
	}

	[Token(Token = "0x200041C")]
	public struct Distortion
	{
		[Token(Token = "0x4002147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float k1;

		[Token(Token = "0x4002148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float k2;

		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float k3;

		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float k4;

		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float k5;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float k6;

		[Token(Token = "0x6002441")]
		[Address(RVA = "0x87B890", Offset = "0x87B890", VA = "0x87B890")]
		public float distort(float r)
		{
			return default(float);
		}

		[Token(Token = "0x6002442")]
		[Address(RVA = "0x87B898", Offset = "0x87B898", VA = "0x87B898")]
		public float distort(float r, float dist)
		{
			return default(float);
		}

		[Token(Token = "0x6002443")]
		[Address(RVA = "0x87B8A0", Offset = "0x87B8A0", VA = "0x87B8A0")]
		public float diatortInv(float radious)
		{
			return default(float);
		}
	}

	[Token(Token = "0x200041D")]
	public struct Device
	{
		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Lenses devLenses;

		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MaxFOV devMaxFov;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Distortion devDistortion;

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Distortion devDistortionInv;
	}

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Device SimulateDevice;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Device device;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static readonly Pvr_UnitySDKConfigProfile Default;

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0x11AE810", Offset = "0x11AE810", VA = "0x11AE810")]
	public Pvr_UnitySDKConfigProfile Clone()
	{
		return null;
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0x11AE8AC", Offset = "0x11AE8AC", VA = "0x11AE8AC")]
	public static Pvr_UnitySDKConfigProfile GetPicoProfile()
	{
		return null;
	}

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0x11AE958", Offset = "0x11AE958", VA = "0x11AE958")]
	public float[] GetLeftEyeVisibleTanAngles(float width, float height)
	{
		return null;
	}

	[Token(Token = "0x6000AAA")]
	[Address(RVA = "0x11AECA8", Offset = "0x11AECA8", VA = "0x11AECA8")]
	public float[] GetLeftEyeNoLensTanAngles(float width, float height)
	{
		return null;
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0x11AEED8", Offset = "0x11AEED8", VA = "0x11AEED8")]
	public Rect GetLeftEyeVisibleScreenRect(float[] undistortedFrustum, float width, float height)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0x11AE8A4", Offset = "0x11AE8A4", VA = "0x11AE8A4")]
	public Pvr_UnitySDKConfigProfile()
	{
	}
}
[Token(Token = "0x200012B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5428", Offset = "0x7D5428")]
public class Pvr_UnitySDKFPS : MonoBehaviour
{
	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text fpsText;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float updateInterval;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float accum;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timeLeft;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string strFps;

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0x11B630C", Offset = "0x11B630C", VA = "0x11B630C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x11B6394", Offset = "0x11B6394", VA = "0x11B6394")]
	private void ShowFps()
	{
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0x11B64A4", Offset = "0x11B64A4", VA = "0x11B64A4")]
	public Pvr_UnitySDKFPS()
	{
	}
}
[Token(Token = "0x200012C")]
public class Pvr_GazeFuse : MonoBehaviour
{
	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject gazeGameObject;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Image image;

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0xC896B4", Offset = "0xC896B4", VA = "0xC896B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0xC8970C", Offset = "0xC8970C", VA = "0xC8970C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0xC89840", Offset = "0xC89840", VA = "0xC89840")]
	private void FuseAmountChanged(float fuseAmount)
	{
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0xC898E8", Offset = "0xC898E8", VA = "0xC898E8")]
	public Pvr_GazeFuse()
	{
	}
}
[Token(Token = "0x200012D")]
public class Pvr_GazeInputModule : PointerInputModule
{
	[Token(Token = "0x200041E")]
	public enum Mode
	{
		[Token(Token = "0x4002152")]
		Click,
		[Token(Token = "0x4002153")]
		Gaze
	}

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Mode mode;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DC424", Offset = "0x7DC424")]
	public string ClickInputName;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DC45C", Offset = "0x7DC45C")]
	public float GazeTimeInSeconds;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC494", Offset = "0x7DC494")]
	private static float <gazeFraction>k__BackingField;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC4A4", Offset = "0x7DC4A4")]
	private static GameObject <gazeGameObject>k__BackingField;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public RaycastResult CurrentRaycast;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private PointerEventData pointerEventData;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private GameObject currentLookAtHandler;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float currentLookAtHandlerClickTime;

	[Token(Token = "0x170000BB")]
	public static float gazeFraction
	{
		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xC898F0", Offset = "0xC898F0", VA = "0xC898F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1930", Offset = "0x7E1930")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xC89940", Offset = "0xC89940", VA = "0xC89940")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1940", Offset = "0x7E1940")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BC")]
	public static GameObject gazeGameObject
	{
		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xC8999C", Offset = "0xC8999C", VA = "0xC8999C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1950", Offset = "0x7E1950")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xC899EC", Offset = "0xC899EC", VA = "0xC899EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1960", Offset = "0x7E1960")]
		private set
		{
		}
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0xC89A40", Offset = "0xC89A40", VA = "0xC89A40", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0xC89A64", Offset = "0xC89A64", VA = "0xC89A64")]
	private void HandleLook()
	{
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0xC89C2C", Offset = "0xC89C2C", VA = "0xC89C2C")]
	private void HandleSelection()
	{
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0xC8A0DC", Offset = "0xC8A0DC", VA = "0xC8A0DC")]
	public Pvr_GazeInputModule()
	{
	}
}
[Token(Token = "0x200012E")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D548C", Offset = "0x7D548C")]
public class Pvr_GazeInputModuleCrosshair : MonoBehaviour
{
	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool DisplayCrosshair;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC4B4", Offset = "0x7DC4B4")]
	public Transform Crosshair;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Pvr_GazeInputModule gazeInputModule;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 CrosshairOriginalScale;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float CrosshairOriginalDistance;

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0xC8A13C", Offset = "0xC8A13C", VA = "0xC8A13C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0xC8A194", Offset = "0xC8A194", VA = "0xC8A194")]
	private void Start()
	{
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0xC8A1FC", Offset = "0xC8A1FC", VA = "0xC8A1FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0xC8A314", Offset = "0xC8A314", VA = "0xC8A314")]
	private void SetCrossHairAtDistance(float dist)
	{
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0xC8A414", Offset = "0xC8A414", VA = "0xC8A414")]
	public Pvr_GazeInputModuleCrosshair()
	{
	}
}
[Token(Token = "0x200012F")]
public enum RenderEventType
{
	[Token(Token = "0x4000803")]
	InitRenderThread = 1024,
	[Token(Token = "0x4000804")]
	Pause,
	[Token(Token = "0x4000805")]
	Resume,
	[Token(Token = "0x4000806")]
	LeftEyeEndFrame,
	[Token(Token = "0x4000807")]
	RightEyeEndFrame,
	[Token(Token = "0x4000808")]
	TimeWarp,
	[Token(Token = "0x4000809")]
	ResetVrModeParms,
	[Token(Token = "0x400080A")]
	ShutdownRenderThread,
	[Token(Token = "0x400080B")]
	BeginEye,
	[Token(Token = "0x400080C")]
	EndEye,
	[Token(Token = "0x400080D")]
	BoundaryRenderLeft,
	[Token(Token = "0x400080E")]
	BoundaryRenderRight,
	[Token(Token = "0x400080F")]
	BothEyeEndFrame,
	[Token(Token = "0x4000810")]
	CameraFrameLeft,
	[Token(Token = "0x4000811")]
	CameraFrameRight,
	[Token(Token = "0x4000812")]
	StartCameraFrame,
	[Token(Token = "0x4000813")]
	StopCameraFrame
}
[Token(Token = "0x2000130")]
public static class Pvr_UnitySDKPluginEvent
{
	[Token(Token = "0x200041F")]
	private delegate void RenderEventDelegate(int eventId);

	[Token(Token = "0x4000814")]
	private const uint IS_DATA_FLAG = 2147483648u;

	[Token(Token = "0x4000815")]
	private const uint DATA_POS_MASK = 1073741824u;

	[Token(Token = "0x4000816")]
	private const int DATA_POS_SHIFT = 30;

	[Token(Token = "0x4000817")]
	private const uint EVENT_TYPE_MASK = 1056899072u;

	[Token(Token = "0x4000818")]
	private const int EVENT_TYPE_SHIFT = 17;

	[Token(Token = "0x4000819")]
	private const uint PAYLOAD_MASK = 65535u;

	[Token(Token = "0x400081A")]
	private const int PAYLOAD_SHIFT = 16;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static RenderEventDelegate SetSinglePassBeforeForwardOpaqueHandle;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static IntPtr SetSinglePassBeforeForwardOpaquePtr;

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0xCD62F8", Offset = "0xCD62F8", VA = "0xCD62F8")]
	public static void Issue(RenderEventType eventType)
	{
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0xCD6324", Offset = "0xCD6324", VA = "0xCD6324")]
	private static int EncodeType(int eventType)
	{
		return default(int);
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0xCD632C", Offset = "0xCD632C", VA = "0xCD632C")]
	private static int EncodeData(int eventId, int eventData, int pos)
	{
		return default(int);
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0xCD634C", Offset = "0xCD634C", VA = "0xCD634C")]
	private static int DecodeData(int eventData)
	{
		return default(int);
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0xCD62F0", Offset = "0xCD62F0", VA = "0xCD62F0")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7E1970", Offset = "0x7E1970")]
	private static void SetSinglePassBeforeForwardOpaque(int eventId)
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0xCD6360", Offset = "0xCD6360", VA = "0xCD6360")]
	public static void SetSinglePassBeforeForwardOpaque(CommandBuffer cmd)
	{
	}
}
[Token(Token = "0x2000131")]
public class Pvr_UnitySDKSightInputModule : BaseInputModule
{
	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC4EC", Offset = "0x7DC4EC")]
	public GameObject cursor;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int trigger;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[HideInInspector]
	public float clickTime;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Vector2 hotspot;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private PointerEventData pointerData;

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0xCDBF54", Offset = "0xCDBF54", VA = "0xCDBF54", Slot = "21")]
	public override bool ShouldActivateModule()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0xCDBFE8", Offset = "0xCDBFE8", VA = "0xCDBFE8", Slot = "22")]
	public override void DeactivateModule()
	{
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0xCDC2DC", Offset = "0xCDC2DC", VA = "0xCDC2DC", Slot = "20")]
	public override bool IsPointerOverGameObject(int pointerId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0xCDC364", Offset = "0xCDC364", VA = "0xCDC364", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0xCDC3A0", Offset = "0xCDC3A0", VA = "0xCDC3A0")]
	private void CastRayFromGaze()
	{
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0xCDC4E8", Offset = "0xCDC4E8", VA = "0xCDC4E8")]
	private void UpdateCurrentObject()
	{
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0xCDC68C", Offset = "0xCDC68C", VA = "0xCDC68C")]
	private void PlaceCursor()
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0xCDC0E8", Offset = "0xCDC0E8", VA = "0xCDC0E8")]
	private void HandlePendingClick()
	{
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0xCDC8B8", Offset = "0xCDC8B8", VA = "0xCDC8B8")]
	private void HandleTrigger()
	{
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0xCDCB38", Offset = "0xCDCB38", VA = "0xCDCB38")]
	public Pvr_UnitySDKSightInputModule()
	{
	}
}
[Token(Token = "0x2000132")]
public class Pvr_ObjImporter
{
	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_ObjImporter _instance;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<int> triangles;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Vector3> vertices;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Vector2> uv;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Vector3> normals;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<PvrVector3Int> faceData;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<int> intArray;

	[Token(Token = "0x4000829")]
	private const int MIN_POW_10 = -16;

	[Token(Token = "0x400082A")]
	private const int MAX_POW_10 = 16;

	[Token(Token = "0x400082B")]
	private const int NUM_POWS_10 = 33;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly float[] pow10;

	[Token(Token = "0x170000BD")]
	public static Pvr_ObjImporter Instance
	{
		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xC8CB5C", Offset = "0xC8CB5C", VA = "0xC8CB5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0xC8CC08", Offset = "0xC8CC08", VA = "0xC8CC08")]
	public Mesh ImportFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0xC8D044", Offset = "0xC8D044", VA = "0xC8D044")]
	private void LoadMeshData(string fileName)
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0xC8D720", Offset = "0xC8D720", VA = "0xC8D720")]
	private float GetFloat(StringBuilder sb, ref int start, ref StringBuilder sbFloat)
	{
		return default(float);
	}

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0xC8D89C", Offset = "0xC8D89C", VA = "0xC8D89C")]
	private int GetInt(StringBuilder sb, ref int start, ref StringBuilder sbInt)
	{
		return default(int);
	}

	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0xC8DCC8", Offset = "0xC8DCC8", VA = "0xC8DCC8")]
	private static float[] GenerateLookupTable()
	{
		return null;
	}

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0xC8D9E0", Offset = "0xC8D9E0", VA = "0xC8D9E0")]
	private float ParseFloat(StringBuilder value)
	{
		return default(float);
	}

	[Token(Token = "0x6000ADB")]
	[Address(RVA = "0xC8DC38", Offset = "0xC8DC38", VA = "0xC8DC38")]
	private int IntParseFast(StringBuilder value)
	{
		return default(int);
	}

	[Token(Token = "0x6000ADC")]
	[Address(RVA = "0xC8CC00", Offset = "0xC8CC00", VA = "0xC8CC00")]
	public Pvr_ObjImporter()
	{
	}
}
[Token(Token = "0x2000133")]
public sealed class PvrVector3Int
{
	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC544", Offset = "0x7DC544")]
	private int <x>k__BackingField;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC554", Offset = "0x7DC554")]
	private int <y>k__BackingField;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC564", Offset = "0x7DC564")]
	private int <z>k__BackingField;

	[Token(Token = "0x170000BE")]
	public int x
	{
		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x13E8A60", Offset = "0x13E8A60", VA = "0x13E8A60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E19D4", Offset = "0x7E19D4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x13E8A68", Offset = "0x13E8A68", VA = "0x13E8A68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E19E4", Offset = "0x7E19E4")]
		set
		{
		}
	}

	[Token(Token = "0x170000BF")]
	public int y
	{
		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x13E8A70", Offset = "0x13E8A70", VA = "0x13E8A70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E19F4", Offset = "0x7E19F4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x13E8A78", Offset = "0x13E8A78", VA = "0x13E8A78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1A04", Offset = "0x7E1A04")]
		set
		{
		}
	}

	[Token(Token = "0x170000C0")]
	public int z
	{
		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x13E8A80", Offset = "0x13E8A80", VA = "0x13E8A80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1A14", Offset = "0x7E1A14")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x13E8A88", Offset = "0x13E8A88", VA = "0x13E8A88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1A24", Offset = "0x7E1A24")]
		set
		{
		}
	}

	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0x13E8A90", Offset = "0x13E8A90", VA = "0x13E8A90")]
	public PvrVector3Int()
	{
	}

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0x13E8A98", Offset = "0x13E8A98", VA = "0x13E8A98")]
	public PvrVector3Int(int x, int y, int z)
	{
	}
}
[Token(Token = "0x2000134")]
public class Pvr_EnumFlags : PropertyAttribute
{
	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0xC896AC", Offset = "0xC896AC", VA = "0xC896AC")]
	public Pvr_EnumFlags()
	{
	}
}
[Token(Token = "0x2000135")]
public enum ConfirmBtn
{
	[Token(Token = "0x4000831")]
	App = 1,
	[Token(Token = "0x4000832")]
	TouchPad = 2,
	[Token(Token = "0x4000833")]
	Trigger = 4
}
[Token(Token = "0x2000136")]
public class Pvr_InputModule : PointerInputModule
{
	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Pvr_UIPointer> pointers;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Pvr_EnumFlags]
	public ConfirmBtn confirmBtn;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<RaycastResult> rayCasts;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private RaycastResult rayCastResult;

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0xC8A470", Offset = "0xC8A470", VA = "0xC8A470", Slot = "30")]
	public virtual void Initialise()
	{
	}

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0xC8A4EC", Offset = "0xC8A4EC", VA = "0xC8A4EC")]
	public static void AddPoint(Pvr_UIPointer point)
	{
	}

	[Token(Token = "0x6000AE9")]
	[Address(RVA = "0xC8A5BC", Offset = "0xC8A5BC", VA = "0xC8A5BC")]
	public static void RemovePoint(Pvr_UIPointer point)
	{
	}

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0xC8A68C", Offset = "0xC8A68C", VA = "0xC8A68C", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0xC8A9FC", Offset = "0xC8A9FC", VA = "0xC8A9FC", Slot = "31")]
	protected virtual List<RaycastResult> CheckRaycasts(Pvr_UIPointer pointer)
	{
		return null;
	}

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0xC8AAB0", Offset = "0xC8AAB0", VA = "0xC8AAB0", Slot = "32")]
	protected virtual bool CheckTransformTree(Transform target, Transform source)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0xC8ABA4", Offset = "0xC8ABA4", VA = "0xC8ABA4", Slot = "33")]
	protected virtual bool NoValidCollision(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0xC8AC68", Offset = "0xC8AC68", VA = "0xC8AC68", Slot = "34")]
	protected virtual bool IsHovering(Pvr_UIPointer pointer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0xC8AE80", Offset = "0xC8AE80", VA = "0xC8AE80", Slot = "35")]
	protected virtual bool ValidElement(GameObject obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0xC8AF34", Offset = "0xC8AF34", VA = "0xC8AF34", Slot = "36")]
	protected virtual void CheckPointerHoverClick(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0xC8AFD4", Offset = "0xC8AFD4", VA = "0xC8AFD4", Slot = "37")]
	protected virtual void Hover(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0xC8BC24", Offset = "0xC8BC24", VA = "0xC8BC24", Slot = "38")]
	protected virtual void Click(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0xC8BC70", Offset = "0xC8BC70", VA = "0xC8BC70", Slot = "39")]
	protected virtual void ClickOnUp(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0xC8BD14", Offset = "0xC8BD14", VA = "0xC8BD14", Slot = "40")]
	protected virtual void ClickOnDown(Pvr_UIPointer pointer, List<RaycastResult> results, bool forceClick = false)
	{
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0xC8BDD4", Offset = "0xC8BDD4", VA = "0xC8BDD4", Slot = "41")]
	protected virtual bool IsEligibleClick(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0xC8C0B8", Offset = "0xC8C0B8", VA = "0xC8C0B8", Slot = "42")]
	protected virtual bool AttemptClick(Pvr_UIPointer pointer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0xC8C38C", Offset = "0xC8C38C", VA = "0xC8C38C", Slot = "43")]
	protected virtual void Drag(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0xC8CA70", Offset = "0xC8CA70", VA = "0xC8CA70")]
	public Pvr_InputModule()
	{
	}
}
[Token(Token = "0x2000137")]
public class Pvr_UICanvas : MonoBehaviour
{
	[Token(Token = "0x2000420")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8BDC", Offset = "0x7D8BDC")]
	private sealed class <CreateDraggablePanel>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x4002157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 canvasSize;

		[Token(Token = "0x1700038F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600244B")]
			[Address(RVA = "0xC912CC", Offset = "0xC912CC", VA = "0xC912CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000390")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600244D")]
			[Address(RVA = "0xC91338", Offset = "0xC91338", VA = "0xC91338", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002448")]
		[Address(RVA = "0xC90C28", Offset = "0xC90C28", VA = "0xC90C28")]
		[DebuggerHidden]
		public <CreateDraggablePanel>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6002449")]
		[Address(RVA = "0xC90F40", Offset = "0xC90F40", VA = "0xC90F40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600244A")]
		[Address(RVA = "0xC90F44", Offset = "0xC90F44", VA = "0xC90F44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600244C")]
		[Address(RVA = "0xC912D4", Offset = "0xC912D4", VA = "0xC912D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool clickOnPointerCollision;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float autoActivateWithinDistance;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected BoxCollider canvasBoxCollider;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected Rigidbody canvasRigidBody;

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Coroutine draggablePanelCreation;

	[Token(Token = "0x400083D")]
	protected const string CANVAS_DRAGGABLE_PANEL = "UICANVAS_DRAGGABLE_PANEL";

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0xC907EC", Offset = "0xC907EC", VA = "0xC907EC", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0xC907F8", Offset = "0xC907F8", VA = "0xC907F8", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0xC90804", Offset = "0xC90804", VA = "0xC90804", Slot = "6")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000AFD")]
	[Address(RVA = "0xC90810", Offset = "0xC90810", VA = "0xC90810", Slot = "7")]
	protected virtual void SetupCanvas()
	{
	}

	[Token(Token = "0x6000AFE")]
	[Address(RVA = "0xC90BA0", Offset = "0xC90BA0", VA = "0xC90BA0", Slot = "8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E1A34", Offset = "0x7E1A34")]
	protected virtual IEnumerator CreateDraggablePanel(Canvas canvas, Vector2 canvasSize)
	{
		return null;
	}

	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0xC90C54", Offset = "0xC90C54", VA = "0xC90C54", Slot = "9")]
	protected virtual void RemoveCanvas()
	{
	}

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0xC90F38", Offset = "0xC90F38", VA = "0xC90F38")]
	public Pvr_UICanvas()
	{
	}
}
[Token(Token = "0x2000138")]
public struct UIDraggableItemEventArgs
{
	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public GameObject target;
}
[Token(Token = "0x2000139")]
public delegate void UIDraggableItemEventHandler(object sender, UIDraggableItemEventArgs e);
[Token(Token = "0x200013A")]
public class Pvr_UIDraggableItem : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IDragHandler, IEndDragHandler
{
	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool restrictToDropZone;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool restrictToOriginalCanvas;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float moveOffset;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public GameObject validDropZone;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected RectTransform dragTransform;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Vector3 startPosition;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected Quaternion startRotation;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected GameObject startDropZone;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Transform startParent;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected Canvas startCanvas;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected CanvasGroup canvasGroup;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Pvr_InputModule currentInputmodule;

	[Token(Token = "0x14000018")]
	public event UIDraggableItemEventHandler DraggableItemDropped
	{
		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xC91340", Offset = "0xC91340", VA = "0xC91340")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1A98", Offset = "0x7E1A98")]
		add
		{
		}
		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xC913E4", Offset = "0xC913E4", VA = "0xC913E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1AA8", Offset = "0x7E1AA8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000019")]
	public event UIDraggableItemEventHandler DraggableItemReset
	{
		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xC91488", Offset = "0xC91488", VA = "0xC91488")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1AB8", Offset = "0x7E1AB8")]
		add
		{
		}
		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xC9152C", Offset = "0xC9152C", VA = "0xC9152C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1AC8", Offset = "0x7E1AC8")]
		remove
		{
		}
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0xC915D0", Offset = "0xC915D0", VA = "0xC915D0", Slot = "7")]
	public virtual void OnDraggableItemDropped(UIDraggableItemEventArgs e)
	{
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0xC915F4", Offset = "0xC915F4", VA = "0xC915F4", Slot = "8")]
	public virtual void OnDraggableItemReset(UIDraggableItemEventArgs e)
	{
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0xC91618", Offset = "0xC91618", VA = "0xC91618", Slot = "4")]
	public void OnBeginDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0xC91834", Offset = "0xC91834", VA = "0xC91834", Slot = "5")]
	public void OnDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0xC91840", Offset = "0xC91840", VA = "0xC91840", Slot = "6")]
	public void OnEndDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0xC91C8C", Offset = "0xC91C8C", VA = "0xC91C8C", Slot = "9")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0xC91D80", Offset = "0xC91D80", VA = "0xC91D80", Slot = "10")]
	protected virtual Pvr_UIPointer GetPointer()
	{
		return null;
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0xC91F0C", Offset = "0xC91F0C", VA = "0xC91F0C", Slot = "11")]
	protected virtual void SetDragPosition(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000B11")]
	[Address(RVA = "0xC921D4", Offset = "0xC921D4", VA = "0xC921D4", Slot = "12")]
	protected virtual void ResetElement()
	{
	}

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0xC92284", Offset = "0xC92284", VA = "0xC92284", Slot = "13")]
	protected virtual UIDraggableItemEventArgs SetEventPayload(GameObject target)
	{
		return default(UIDraggableItemEventArgs);
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0xC9228C", Offset = "0xC9228C", VA = "0xC9228C")]
	public Pvr_UIDraggableItem()
	{
	}
}
[Token(Token = "0x200013B")]
public class Pvr_UIDropZone : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Pvr_UIDraggableItem droppableItem;

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0xC922A0", Offset = "0xC922A0", VA = "0xC922A0", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000B15")]
	[Address(RVA = "0xC92394", Offset = "0xC92394", VA = "0xC92394", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000B16")]
	[Address(RVA = "0xC92420", Offset = "0xC92420", VA = "0xC92420")]
	public Pvr_UIDropZone()
	{
	}
}
[Token(Token = "0x200013C")]
public class Pvr_UIGraphicRaycaster : GraphicRaycaster
{
	[Serializable]
	[Token(Token = "0x2000421")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8BEC", Offset = "0x7D8BEC")]
	private sealed class <>c
	{
		[Token(Token = "0x4002158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<RaycastResult> <>9__7_0;

		[Token(Token = "0x600244F")]
		[Address(RVA = "0xC9335C", Offset = "0xC9335C", VA = "0xC9335C")]
		public <>c()
		{
		}

		[Token(Token = "0x6002450")]
		[Address(RVA = "0xC93364", Offset = "0xC93364", VA = "0xC93364")]
		internal int <Raycast>b__7_0(RaycastResult g1, RaycastResult g2)
		{
			return default(int);
		}
	}

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Canvas currentCanvas;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Vector2 lastKnownPosition;

	[Token(Token = "0x4000850")]
	protected const float UI_CONTROL_OFFSET = 1E-05f;

	[NonSerialized]
	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<RaycastResult> s_RaycastResults;

	[Token(Token = "0x170000C1")]
	protected virtual Canvas canvas
	{
		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xC93174", Offset = "0xC93174", VA = "0xC93174", Slot = "25")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B17")]
	[Address(RVA = "0xC92428", Offset = "0xC92428", VA = "0xC92428", Slot = "17")]
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x6000B18")]
	[Address(RVA = "0xC925DC", Offset = "0xC925DC", VA = "0xC925DC", Slot = "22")]
	protected virtual void SetNearestRaycast(ref PointerEventData eventData, ref List<RaycastResult> resultAppendList, ref List<RaycastResult> raycastResults)
	{
	}

	[Token(Token = "0x6000B19")]
	[Address(RVA = "0xC92868", Offset = "0xC92868", VA = "0xC92868", Slot = "23")]
	protected virtual float GetHitDistance(Ray ray)
	{
		return default(float);
	}

	[Token(Token = "0x6000B1A")]
	[Address(RVA = "0xC92B88", Offset = "0xC92B88", VA = "0xC92B88", Slot = "24")]
	protected virtual void Raycast(Canvas canvas, Camera eventCamera, Ray ray, ref List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000B1C")]
	[Address(RVA = "0xC9321C", Offset = "0xC9321C", VA = "0xC9321C")]
	public Pvr_UIGraphicRaycaster()
	{
	}
}
[Token(Token = "0x200013D")]
public struct UIPointerEventArgs
{
	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool isActive;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public GameObject currentTarget;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject previousTarget;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RaycastResult raycastResult;
}
[Token(Token = "0x200013E")]
public delegate void UIPointerEventHandler(object sender, UIPointerEventArgs e);
[Token(Token = "0x200013F")]
public class Pvr_UIPointer : MonoBehaviour
{
	[Token(Token = "0x2000422")]
	public enum ClickMethods
	{
		[Token(Token = "0x400215B")]
		ClickOnButtonUp,
		[Token(Token = "0x400215C")]
		ClickOnButtonDown
	}

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ClickMethods clickMethod;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public bool collisionClick;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[HideInInspector]
	public bool pressToDrag;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public GameObject autoActivatingCanvas;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public PointerEventData pointerEventData;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public GameObject hoveringElement;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public float hoverDurationTimer;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public bool canClickOnHover;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform pointerOriginTransform;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected bool pointerClicked;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	protected bool beamEnabledState;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	protected bool lastPointerPressState;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	protected bool lastPointerClickState;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected GameObject currentTarget;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected EventSystem cachedEventSystem;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Pvr_InputModule cachedVRInputModule;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Transform originalPointerOriginTransform;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool TouchBtnValue;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool AppBtnValue;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool TriggerBtnValue;

	[Token(Token = "0x1400001A")]
	public event UIPointerEventHandler UIPointerElementEnter
	{
		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xC93374", Offset = "0xC93374", VA = "0xC93374")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1AD8", Offset = "0x7E1AD8")]
		add
		{
		}
		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xC93418", Offset = "0xC93418", VA = "0xC93418")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1AE8", Offset = "0x7E1AE8")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001B")]
	public event UIPointerEventHandler UIPointerElementExit
	{
		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xC934BC", Offset = "0xC934BC", VA = "0xC934BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1AF8", Offset = "0x7E1AF8")]
		add
		{
		}
		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xC93560", Offset = "0xC93560", VA = "0xC93560")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B08", Offset = "0x7E1B08")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001C")]
	public event UIPointerEventHandler UIPointerElementClick
	{
		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xC93604", Offset = "0xC93604", VA = "0xC93604")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B18", Offset = "0x7E1B18")]
		add
		{
		}
		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xC936A8", Offset = "0xC936A8", VA = "0xC936A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B28", Offset = "0x7E1B28")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001D")]
	public event UIPointerEventHandler UIPointerElementDragStart
	{
		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xC9374C", Offset = "0xC9374C", VA = "0xC9374C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B38", Offset = "0x7E1B38")]
		add
		{
		}
		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xC937F0", Offset = "0xC937F0", VA = "0xC937F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B48", Offset = "0x7E1B48")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001E")]
	public event UIPointerEventHandler UIPointerElementDragEnd
	{
		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xC93894", Offset = "0xC93894", VA = "0xC93894")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B58", Offset = "0x7E1B58")]
		add
		{
		}
		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xC93938", Offset = "0xC93938", VA = "0xC93938")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B68", Offset = "0x7E1B68")]
		remove
		{
		}
	}

	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0xC939DC", Offset = "0xC939DC", VA = "0xC939DC", Slot = "4")]
	public virtual bool PointerActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0xC939E4", Offset = "0xC939E4", VA = "0xC939E4", Slot = "5")]
	public virtual bool IsSelectionButtonPressed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0xC93AC4", Offset = "0xC93AC4", VA = "0xC93AC4", Slot = "6")]
	public virtual Vector3 GetOriginPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0xC93B58", Offset = "0xC93B58", VA = "0xC93B58", Slot = "7")]
	public virtual Vector3 GetOriginForward()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0xC93BEC", Offset = "0xC93BEC", VA = "0xC93BEC", Slot = "8")]
	public virtual bool ValidClick(bool checkLastClick, bool lastClickState = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0xC93C08", Offset = "0xC93C08", VA = "0xC93C08", Slot = "9")]
	protected virtual void ResetHoverTimer()
	{
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0xC93C14", Offset = "0xC93C14", VA = "0xC93C14", Slot = "10")]
	public virtual void OnUIPointerElementEnter(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0xC93CF8", Offset = "0xC93CF8", VA = "0xC93CF8", Slot = "11")]
	public virtual void OnUIPointerElementExit(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0xC93DC4", Offset = "0xC93DC4", VA = "0xC93DC4", Slot = "12")]
	public virtual void OnUIPointerElementClick(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000B35")]
	[Address(RVA = "0xC93E90", Offset = "0xC93E90", VA = "0xC93E90", Slot = "13")]
	public virtual void OnUIPointerElementDragStart(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0xC93EDC", Offset = "0xC93EDC", VA = "0xC93EDC", Slot = "14")]
	public virtual void OnUIPointerElementDragEnd(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0xC93F28", Offset = "0xC93F28", VA = "0xC93F28", Slot = "15")]
	public virtual UIPointerEventArgs SetUIPointerEvent(RaycastResult currentRaycastResult, GameObject currentTarget, [Optional] GameObject lastTarget)
	{
		return default(UIPointerEventArgs);
	}

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0xC93F8C", Offset = "0xC93F8C", VA = "0xC93F8C", Slot = "16")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0xC93F98", Offset = "0xC93F98", VA = "0xC93F98", Slot = "17")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0xC93FD0", Offset = "0xC93FD0", VA = "0xC93FD0", Slot = "18")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0xC94034", Offset = "0xC94034", VA = "0xC94034", Slot = "19")]
	protected virtual void ConfigureEventSystem()
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0xC941D4", Offset = "0xC941D4", VA = "0xC941D4")]
	public Pvr_UIPointer()
	{
	}
}
[Token(Token = "0x2000140")]
[ExecuteInEditMode]
public class Pvr_UnitySDKEditor : MonoBehaviour
{
	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool vrModeEnabled;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float mouseX;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float mouseY;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mouseZ;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float neckModelScale;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool autoUntiltHead;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 neckOffset;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Matrix4x4 headView;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public Matrix4x4 leftEyeUndistortedProj;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[HideInInspector]
	public Matrix4x4 rightEyeUndistortedProj;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[HideInInspector]
	public Matrix4x4 leftEyeProj;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[HideInInspector]
	public Matrix4x4 rightEyeProj;

	[Token(Token = "0x400087B")]
	private const float TOUCH_TIME_LIMIT = 0.2f;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private float touchStartTime;

	[Token(Token = "0x6000B3E")]
	[Address(RVA = "0x11AF08C", Offset = "0x11AF08C", VA = "0x11AF08C")]
	public Matrix4x4 UndistortedProjection(Eye eye)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B3F")]
	[Address(RVA = "0x11AF0D8", Offset = "0x11AF0D8", VA = "0x11AF0D8")]
	public Matrix4x4 Projection(Eye eye)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B40")]
	[Address(RVA = "0x11AF124", Offset = "0x11AF124", VA = "0x11AF124")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B41")]
	[Address(RVA = "0x11AF314", Offset = "0x11AF314", VA = "0x11AF314")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B42")]
	[Address(RVA = "0x11AF138", Offset = "0x11AF138", VA = "0x11AF138")]
	public void InitEyePara()
	{
	}

	[Token(Token = "0x6000B43")]
	[Address(RVA = "0x11AF284", Offset = "0x11AF284", VA = "0x11AF284")]
	private void InitEditorSensorPara()
	{
	}

	[Token(Token = "0x6000B44")]
	[Address(RVA = "0x11AFBF8", Offset = "0x11AFBF8", VA = "0x11AFBF8")]
	public static Matrix4x4 MakeProjection(float l, float t, float r, float b, float n, float f)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0x11AFD9C", Offset = "0x11AFD9C", VA = "0x11AFD9C")]
	public bool UpdateStatesensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0x11AF4B4", Offset = "0x11AF4B4", VA = "0x11AF4B4")]
	public void ComputeEyesFromProfile()
	{
	}

	[Token(Token = "0x6000B47")]
	[Address(RVA = "0x11B0224", Offset = "0x11B0224", VA = "0x11B0224")]
	public bool ResetUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B48")]
	[Address(RVA = "0x11AF3B0", Offset = "0x11AF3B0", VA = "0x11AF3B0")]
	private void SimulateInput()
	{
	}

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0x11AFB3C", Offset = "0x11AFB3C", VA = "0x11AFB3C")]
	private void FovAdjust()
	{
	}

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0x11B02D4", Offset = "0x11B02D4", VA = "0x11B02D4")]
	private Rect RectAdjust(Rect eyeRect)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0x11AFDB4", Offset = "0x11AFDB4", VA = "0x11AFDB4")]
	private void UpdateSimulatedSensor()
	{
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0x11AF9CC", Offset = "0x11AF9CC", VA = "0x11AF9CC")]
	private void InitForEye(ref Material mat, ref Material mat1)
	{
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0x11B0238", Offset = "0x11B0238", VA = "0x11B0238")]
	private void EnableVEmodel()
	{
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0x11B0424", Offset = "0x11B0424", VA = "0x11B0424")]
	public Pvr_UnitySDKEditor()
	{
	}
}
[Token(Token = "0x2000141")]
public class Pvr_VolumePowerBrightness : MonoBehaviour
{
	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool VolEnable;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool BattEnable;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text showResult;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text setVolumnum;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text setBrightnum;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string MusicPath;

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0xCDEE54", Offset = "0xCDEE54", VA = "0xCDEE54")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0xCDEF24", Offset = "0xCDEF24", VA = "0xCDEF24")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0xCDEF78", Offset = "0xCDEF78", VA = "0xCDEF78")]
	public void GetMaxVolumeNumber()
	{
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0xCDF01C", Offset = "0xCDF01C", VA = "0xCDF01C")]
	public void GetCurrentVolumeNumber()
	{
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0xCDF0C0", Offset = "0xCDF0C0", VA = "0xCDF0C0")]
	public void VolumeUp()
	{
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0xCDF144", Offset = "0xCDF144", VA = "0xCDF144")]
	public void VolumeDown()
	{
	}

	[Token(Token = "0x6000B56")]
	[Address(RVA = "0xCDF1C8", Offset = "0xCDF1C8", VA = "0xCDF1C8")]
	public void SetVolumeNum()
	{
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0xCDF2E4", Offset = "0xCDF2E4", VA = "0xCDF2E4")]
	public void SetBrightness()
	{
	}

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0xCDF400", Offset = "0xCDF400", VA = "0xCDF400")]
	public void GetCurrentBrightness()
	{
	}

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0xCDF4A4", Offset = "0xCDF4A4", VA = "0xCDF4A4")]
	public bool setAudio(string s)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0xCDF538", Offset = "0xCDF538", VA = "0xCDF538")]
	public bool setBattery(string s)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0xCDEEBC", Offset = "0xCDEEBC", VA = "0xCDEEBC")]
	private bool InitBatteryVolClass()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0xCDEEC4", Offset = "0xCDEEC4", VA = "0xCDEEC4")]
	private bool StartBatteryReceiver(string startreceivre)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0xCDEF70", Offset = "0xCDEF70", VA = "0xCDEF70")]
	private bool StopBatteryReceiver()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0xCDEEF4", Offset = "0xCDEEF4", VA = "0xCDEEF4")]
	private bool StartAudioReceiver(string startreceivre)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0xCDEF68", Offset = "0xCDEF68", VA = "0xCDEF68")]
	private bool StopAudioReceiver()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0xCDF5CC", Offset = "0xCDF5CC", VA = "0xCDF5CC")]
	public Pvr_VolumePowerBrightness()
	{
	}
}
[Token(Token = "0x2000142")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5500", Offset = "0x7D5500")]
public class MouseLookSKYMASTER : MonoBehaviour
{
	[Token(Token = "0x2000423")]
	public enum RotationAxes
	{
		[Token(Token = "0x400215E")]
		MouseXAndY,
		[Token(Token = "0x400215F")]
		MouseX,
		[Token(Token = "0x4002160")]
		MouseY
	}

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool Menabled;

	[Token(Token = "0x6000B61")]
	[Address(RVA = "0x9EB170", Offset = "0x9EB170", VA = "0x9EB170")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B62")]
	[Address(RVA = "0x9EB400", Offset = "0x9EB400", VA = "0x9EB400")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B63")]
	[Address(RVA = "0x9EB4C0", Offset = "0x9EB4C0", VA = "0x9EB4C0")]
	public MouseLookSKYMASTER()
	{
	}
}
[Token(Token = "0x2000143")]
public class DestroyAfterSM : MonoBehaviour
{
	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float stayTime;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float currenttime;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool gameStartItem;

	[Token(Token = "0x6000B64")]
	[Address(RVA = "0x9C23D8", Offset = "0x9C23D8", VA = "0x9C23D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B65")]
	[Address(RVA = "0x9C241C", Offset = "0x9C241C", VA = "0x9C241C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B66")]
	[Address(RVA = "0x9C24C4", Offset = "0x9C24C4", VA = "0x9C24C4")]
	public DestroyAfterSM()
	{
	}
}
[Token(Token = "0x2000144")]
public class Camera2WorldSM : MonoBehaviour
{
	[Token(Token = "0x6000B67")]
	[Address(RVA = "0x9BCF3C", Offset = "0x9BCF3C", VA = "0x9BCF3C")]
	private void OnPreCull()
	{
	}

	[Token(Token = "0x6000B68")]
	[Address(RVA = "0x9BCFE0", Offset = "0x9BCFE0", VA = "0x9BCFE0")]
	public Camera2WorldSM()
	{
	}
}
[Token(Token = "0x2000145")]
[ExecuteInEditMode]
public class VolumeParticleShadePDM : MonoBehaviour
{
	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light Sun;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material Particle_Mat;

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0x160235C", Offset = "0x160235C", VA = "0x160235C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0x1602360", Offset = "0x1602360", VA = "0x1602360")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0x1602470", Offset = "0x1602470", VA = "0x1602470")]
	public VolumeParticleShadePDM()
	{
	}
}
[Token(Token = "0x2000146")]
public class ProjectionSKYMASTER : MonoBehaviour
{
	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Projector CausticProjector;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D[] Caustics;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fps;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float start_time;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int currentFrame;

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0x13E8908", Offset = "0x13E8908", VA = "0x13E8908")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0x13E896C", Offset = "0x13E896C", VA = "0x13E896C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0x13E8A50", Offset = "0x13E8A50", VA = "0x13E8A50")]
	public ProjectionSKYMASTER()
	{
	}
}
[Token(Token = "0x2000147")]
public class VolumetricVolcanoSM : MonoBehaviour
{
	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FullVolumeCloudsSkyMaster volumeClouds;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool gui_on;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool growSmoke;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float growWidthMax;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float growHeightMax;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float growWidthMin;

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float growHeightMin;

	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float lerp;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float lerp2;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float growthWidthDuration;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float growthHeightDuration;

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0x1608640", Offset = "0x1608640", VA = "0x1608640")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0x1608738", Offset = "0x1608738", VA = "0x1608738")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0x16088B0", Offset = "0x16088B0", VA = "0x16088B0")]
	private void onGUI()
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0x1608930", Offset = "0x1608930", VA = "0x1608930")]
	public VolumetricVolcanoSM()
	{
	}
}
[Token(Token = "0x2000148")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5548", Offset = "0x7D5548")]
public class VolumetricLight : MonoBehaviour
{
	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Light _light;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material _material;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CommandBuffer _commandBuffer;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CommandBuffer _cascadeShadowCommandBuffer;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DC6D4", Offset = "0x7DC6D4")]
	public int SampleCount;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DC6F0", Offset = "0x7DC6F0")]
	public float ScatteringCoef;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DC708", Offset = "0x7DC708")]
	public float ExtinctionCoef;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DC724", Offset = "0x7DC724")]
	public float SkyboxExtinctionCoef;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DC73C", Offset = "0x7DC73C")]
	public float MieG;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool HeightFog;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DC758", Offset = "0x7DC758")]
	public float HeightScale;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float GroundLevel;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool Noise;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float NoiseScale;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float NoiseIntensity;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float NoiseIntensityOffset;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector2 NoiseVelocity;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC770", Offset = "0x7DC770")]
	public float MaxRayLength;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector4[] _frustumCorners;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _reversedZ;

	[Token(Token = "0x170000C2")]
	public Light Light
	{
		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x16025C0", Offset = "0x16025C0", VA = "0x16025C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C3")]
	public Material VolumetricMaterial
	{
		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x16025C8", Offset = "0x16025C8", VA = "0x16025C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1400001F")]
	public event Action<VolumetricLightRenderer, VolumetricLight, CommandBuffer, Matrix4x4> CustomRenderEvent
	{
		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x1602478", Offset = "0x1602478", VA = "0x1602478")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B78", Offset = "0x7E1B78")]
		add
		{
		}
		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x160251C", Offset = "0x160251C", VA = "0x160251C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B88", Offset = "0x7E1B88")]
		remove
		{
		}
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0x16025D0", Offset = "0x16025D0", VA = "0x16025D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0x1602878", Offset = "0x1602878", VA = "0x1602878")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B79")]
	[Address(RVA = "0x16029A4", Offset = "0x16029A4", VA = "0x16029A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0x1602AD0", Offset = "0x1602AD0", VA = "0x1602AD0")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000B7B")]
	[Address(RVA = "0x1602B3C", Offset = "0x1602B3C", VA = "0x1602B3C")]
	private void VolumetricLightRenderer_PreRenderEvent(VolumetricLightRenderer renderer, Matrix4x4 viewProj)
	{
	}

	[Token(Token = "0x6000B7C")]
	[Address(RVA = "0x1603068", Offset = "0x1603068", VA = "0x1603068")]
	private void SetupPointLight(VolumetricLightRenderer renderer, Matrix4x4 viewProj)
	{
	}

	[Token(Token = "0x6000B7D")]
	[Address(RVA = "0x16039B8", Offset = "0x16039B8", VA = "0x16039B8")]
	private void SetupSpotLight(VolumetricLightRenderer renderer, Matrix4x4 viewProj)
	{
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0x1604AF8", Offset = "0x1604AF8", VA = "0x1604AF8")]
	private void SetupDirectionalLight(VolumetricLightRenderer renderer, Matrix4x4 viewProj)
	{
	}

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0x1605208", Offset = "0x1605208", VA = "0x1605208")]
	private bool IsCameraInPointLightBounds()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0x1605374", Offset = "0x1605374", VA = "0x1605374")]
	private bool IsCameraInSpotLightBounds()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0x1605650", Offset = "0x1605650", VA = "0x1605650")]
	public VolumetricLight()
	{
	}
}
[Token(Token = "0x2000149")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D55AC", Offset = "0x7D55AC")]
public class VolumetricLightRenderer : MonoBehaviour
{
	[Token(Token = "0x2000424")]
	public enum VolumtericResolution
	{
		[Token(Token = "0x4002162")]
		Full,
		[Token(Token = "0x4002163")]
		Half,
		[Token(Token = "0x4002164")]
		Quarter
	}

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Mesh _pointLightMesh;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Mesh _spotLightMesh;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Material _lightMaterial;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera _camera;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CommandBuffer _preLightPass;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Matrix4x4 _viewProj;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Material _blitAddMaterial;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material _bilateralBlurMaterial;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private RenderTexture _volumeLightTexture;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private RenderTexture _halfVolumeLightTexture;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private RenderTexture _quarterVolumeLightTexture;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Texture _defaultSpotCookie;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private RenderTexture _halfDepthBuffer;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private RenderTexture _quarterDepthBuffer;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private VolumtericResolution _currentResolution;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Texture2D _ditheringTexture;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Texture3D _noiseTexture;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public VolumtericResolution Resolution;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Texture DefaultSpotCookie;

	[Token(Token = "0x170000C4")]
	public CommandBuffer GlobalCommandBuffer
	{
		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x1605720", Offset = "0x1605720", VA = "0x1605720")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000020")]
	public static event Action<VolumetricLightRenderer, Matrix4x4> PreRenderEvent
	{
		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x16028F0", Offset = "0x16028F0", VA = "0x16028F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1B98", Offset = "0x7E1B98")]
		add
		{
		}
		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x1602A1C", Offset = "0x1602A1C", VA = "0x1602A1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1BA8", Offset = "0x7E1BA8")]
		remove
		{
		}
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0x1605728", Offset = "0x1605728", VA = "0x1605728")]
	public static Material GetLightMaterial()
	{
		return null;
	}

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0x1605778", Offset = "0x1605778", VA = "0x1605778")]
	public static Mesh GetPointLightMesh()
	{
		return null;
	}

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0x16057C8", Offset = "0x16057C8", VA = "0x16057C8")]
	public static Mesh GetSpotLightMesh()
	{
		return null;
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0x1605344", Offset = "0x1605344", VA = "0x1605344")]
	public RenderTexture GetVolumeLightBuffer()
	{
		return null;
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0x1603038", Offset = "0x1603038", VA = "0x1603038")]
	public RenderTexture GetVolumeLightDepthBuffer()
	{
		return null;
	}

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0x1605818", Offset = "0x1605818", VA = "0x1605818")]
	public static Texture GetDefaultSpotCookie()
	{
		return null;
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0x1605868", Offset = "0x1605868", VA = "0x1605868")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0x1607B44", Offset = "0x1607B44", VA = "0x1607B44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0x1607BA4", Offset = "0x1607BA4", VA = "0x1607BA4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0x1605C8C", Offset = "0x1605C8C", VA = "0x1605C8C")]
	private void ChangeResolution()
	{
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0x1607C04", Offset = "0x1607C04", VA = "0x1607C04")]
	public void OnPreRender()
	{
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0x1608250", Offset = "0x1608250", VA = "0x1608250")]
	[ImageEffectOpaque]
	public void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0x1608160", Offset = "0x1608160", VA = "0x1608160")]
	private void UpdateMaterialParameters()
	{
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0x1608570", Offset = "0x1608570", VA = "0x1608570")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0x1606868", Offset = "0x1606868", VA = "0x1606868")]
	private void LoadNoise3dTexture()
	{
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0x1606D1C", Offset = "0x1606D1C", VA = "0x1606D1C")]
	private void GenerateDitherTexture()
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0x1606128", Offset = "0x1606128", VA = "0x1606128")]
	private Mesh CreateSpotLightMesh()
	{
		return null;
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0x160862C", Offset = "0x160862C", VA = "0x160862C")]
	public VolumetricLightRenderer()
	{
	}
}
[Token(Token = "0x200014A")]
public static class GameObjectTypeLoggingSM
{
}
[Token(Token = "0x200014B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5610", Offset = "0x7D5610")]
public class infiniteParticleLifeSM : MonoBehaviour
{
	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem m_System;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0x160B7B0", Offset = "0x160B7B0", VA = "0x160B7B0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0x160B8BC", Offset = "0x160B8BC", VA = "0x160B8BC")]
	private void InitializeIfNeeded()
	{
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0x160B9CC", Offset = "0x160B9CC", VA = "0x160B9CC")]
	public infiniteParticleLifeSM()
	{
	}
}
[Token(Token = "0x200014C")]
public enum AkAudioAPI
{
	[Token(Token = "0x40008CD")]
	AkAudioAPI_AAudio = 1,
	[Token(Token = "0x40008CE")]
	AkAudioAPI_OpenSL_ES,
	[Token(Token = "0x40008CF")]
	AkAudioAPI_Default
}
[Token(Token = "0x200014D")]
public class AkCommunicationSettings : IDisposable
{
	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000C5")]
	public uint uPoolSize
	{
		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xC26634", Offset = "0xC26634", VA = "0xC26634")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xC25850", Offset = "0xC25850", VA = "0xC25850")]
		set
		{
		}
	}

	[Token(Token = "0x170000C6")]
	public ushort uDiscoveryBroadcastPort
	{
		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xC266A0", Offset = "0xC266A0", VA = "0xC266A0")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xC258CC", Offset = "0xC258CC", VA = "0xC258CC")]
		set
		{
		}
	}

	[Token(Token = "0x170000C7")]
	public ushort uCommandPort
	{
		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xC2670C", Offset = "0xC2670C", VA = "0xC2670C")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xC25948", Offset = "0xC25948", VA = "0xC25948")]
		set
		{
		}
	}

	[Token(Token = "0x170000C8")]
	public ushort uNotificationPort
	{
		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xC26778", Offset = "0xC26778", VA = "0xC26778")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xC259C4", Offset = "0xC259C4", VA = "0xC259C4")]
		set
		{
		}
	}

	[Token(Token = "0x170000C9")]
	public bool bInitSystemLib
	{
		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xC267E4", Offset = "0xC267E4", VA = "0xC267E4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xC25A40", Offset = "0xC25A40", VA = "0xC25A40")]
		set
		{
		}
	}

	[Token(Token = "0x170000CA")]
	public string szAppNetworkName
	{
		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xC26850", Offset = "0xC26850", VA = "0xC26850")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xC25ABC", Offset = "0xC25ABC", VA = "0xC25ABC")]
		set
		{
		}
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0xC263BC", Offset = "0xC263BC", VA = "0xC263BC")]
	internal AkCommunicationSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0xC263FC", Offset = "0xC263FC", VA = "0xC263FC")]
	internal static IntPtr getCPtr(AkCommunicationSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0xC2644C", Offset = "0xC2644C", VA = "0xC2644C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0xC26480", Offset = "0xC26480", VA = "0xC26480", Slot = "1")]
	~AkCommunicationSettings()
	{
	}

	[Token(Token = "0x6000B9E")]
	[Address(RVA = "0xC264F4", Offset = "0xC264F4", VA = "0xC264F4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0xC207DC", Offset = "0xC207DC", VA = "0xC207DC")]
	public AkCommunicationSettings()
	{
	}
}
[Token(Token = "0x200014E")]
public enum AkMemPoolAttributes
{
	[Token(Token = "0x40008D3")]
	AkNoAlloc = 0,
	[Token(Token = "0x40008D4")]
	AkMalloc = 1,
	[Token(Token = "0x40008D5")]
	AkAllocMask = 1,
	[Token(Token = "0x40008D6")]
	AkFixedSizeBlocksMode = 8,
	[Token(Token = "0x40008D7")]
	AkBlockMgmtMask = 8
}
[Token(Token = "0x200014F")]
public class AkPlatformInitSettings : IDisposable
{
	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000CB")]
	public AkThreadProperties threadLEngine
	{
		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xAB4554", Offset = "0xAB4554", VA = "0xAB4554")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xAB44C4", Offset = "0xAB44C4", VA = "0xAB44C4")]
		set
		{
		}
	}

	[Token(Token = "0x170000CC")]
	public AkThreadProperties threadOutputMgr
	{
		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xAB4694", Offset = "0xAB4694", VA = "0xAB4694")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xAB4604", Offset = "0xAB4604", VA = "0xAB4604")]
		set
		{
		}
	}

	[Token(Token = "0x170000CD")]
	public AkThreadProperties threadBankManager
	{
		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xAB47D4", Offset = "0xAB47D4", VA = "0xAB47D4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xAB4744", Offset = "0xAB4744", VA = "0xAB4744")]
		set
		{
		}
	}

	[Token(Token = "0x170000CE")]
	public AkThreadProperties threadMonitor
	{
		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xAB4914", Offset = "0xAB4914", VA = "0xAB4914")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xAB4884", Offset = "0xAB4884", VA = "0xAB4884")]
		set
		{
		}
	}

	[Token(Token = "0x170000CF")]
	public float fLEngineDefaultPoolRatioThreshold
	{
		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xAB4A40", Offset = "0xAB4A40", VA = "0xAB4A40")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xAB49C4", Offset = "0xAB49C4", VA = "0xAB49C4")]
		set
		{
		}
	}

	[Token(Token = "0x170000D0")]
	public uint uLEngineDefaultPoolSize
	{
		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xAB4B28", Offset = "0xAB4B28", VA = "0xAB4B28")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xAB4AAC", Offset = "0xAB4AAC", VA = "0xAB4AAC")]
		set
		{
		}
	}

	[Token(Token = "0x170000D1")]
	public AkAudioAPI eAudioAPI
	{
		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xAB4C10", Offset = "0xAB4C10", VA = "0xAB4C10")]
		get
		{
			return default(AkAudioAPI);
		}
		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xAB4B94", Offset = "0xAB4B94", VA = "0xAB4B94")]
		set
		{
		}
	}

	[Token(Token = "0x170000D2")]
	public uint uSampleRate
	{
		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xAB4CF8", Offset = "0xAB4CF8", VA = "0xAB4CF8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xAB4C7C", Offset = "0xAB4C7C", VA = "0xAB4C7C")]
		set
		{
		}
	}

	[Token(Token = "0x170000D3")]
	public ushort uNumRefillsInVoice
	{
		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xAB4DE0", Offset = "0xAB4DE0", VA = "0xAB4DE0")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xAB4D64", Offset = "0xAB4D64", VA = "0xAB4D64")]
		set
		{
		}
	}

	[Token(Token = "0x170000D4")]
	public uint uChannelMask
	{
		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xAB4EC8", Offset = "0xAB4EC8", VA = "0xAB4EC8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xAB4E4C", Offset = "0xAB4E4C", VA = "0xAB4E4C")]
		set
		{
		}
	}

	[Token(Token = "0x170000D5")]
	public bool bRoundFrameSizeToHWSize
	{
		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xAB4FB0", Offset = "0xAB4FB0", VA = "0xAB4FB0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xAB4F34", Offset = "0xAB4F34", VA = "0xAB4F34")]
		set
		{
		}
	}

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0xAA8320", Offset = "0xAA8320", VA = "0xAA8320")]
	internal AkPlatformInitSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0xAA8220", Offset = "0xAA8220", VA = "0xAA8220")]
	internal static IntPtr getCPtr(AkPlatformInitSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0xAB42DC", Offset = "0xAB42DC", VA = "0xAB42DC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6000BAF")]
	[Address(RVA = "0xAB4310", Offset = "0xAB4310", VA = "0xAB4310", Slot = "1")]
	~AkPlatformInitSettings()
	{
	}

	[Token(Token = "0x6000BB0")]
	[Address(RVA = "0xAB4384", Offset = "0xAB4384", VA = "0xAB4384", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0xAB501C", Offset = "0xAB501C", VA = "0xAB501C")]
	public AkPlatformInitSettings()
	{
	}
}
[Token(Token = "0x2000150")]
public class AkSoundEngine
{
	[Token(Token = "0x2000425")]
	public delegate ulong GameObjectHashFunction(GameObject gameObject);

	[Token(Token = "0x2000426")]
	private class AutoObject
	{
		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameObject gameObject;

		[Token(Token = "0x6002455")]
		[Address(RVA = "0x14AA7F8", Offset = "0x14AA7F8", VA = "0x14AA7F8")]
		public AutoObject(GameObject go)
		{
		}

		[Token(Token = "0x6002456")]
		[Address(RVA = "0x14AA8F8", Offset = "0x14AA8F8", VA = "0x14AA8F8", Slot = "1")]
		~AutoObject()
		{
		}
	}

	[Token(Token = "0x40008DA")]
	public const int AK_SIMD_ALIGNMENT = 16;

	[Token(Token = "0x40008DB")]
	public const int AK_BUFFER_ALIGNMENT = 16;

	[Token(Token = "0x40008DC")]
	public const int AK_MAX_PATH = 260;

	[Token(Token = "0x40008DD")]
	public const int AK_BANK_PLATFORM_DATA_ALIGNMENT = 16;

	[Token(Token = "0x40008DE")]
	public const uint AK_INVALID_PLUGINID = uint.MaxValue;

	[Token(Token = "0x40008DF")]
	public const ulong AK_INVALID_GAME_OBJECT = ulong.MaxValue;

	[Token(Token = "0x40008E0")]
	public const uint AK_INVALID_UNIQUE_ID = 0u;

	[Token(Token = "0x40008E1")]
	public const uint AK_INVALID_RTPC_ID = 0u;

	[Token(Token = "0x40008E2")]
	public const uint AK_INVALID_LISTENER_INDEX = uint.MaxValue;

	[Token(Token = "0x40008E3")]
	public const uint AK_INVALID_PLAYING_ID = 0u;

	[Token(Token = "0x40008E4")]
	public const uint AK_DEFAULT_SWITCH_STATE = 0u;

	[Token(Token = "0x40008E5")]
	public const int AK_INVALID_POOL_ID = -1;

	[Token(Token = "0x40008E6")]
	public const int AK_DEFAULT_POOL_ID = -1;

	[Token(Token = "0x40008E7")]
	public const uint AK_INVALID_AUX_ID = 0u;

	[Token(Token = "0x40008E8")]
	public const uint AK_INVALID_FILE_ID = uint.MaxValue;

	[Token(Token = "0x40008E9")]
	public const uint AK_INVALID_DEVICE_ID = uint.MaxValue;

	[Token(Token = "0x40008EA")]
	public const uint AK_INVALID_BANK_ID = 0u;

	[Token(Token = "0x40008EB")]
	public const uint AK_FALLBACK_ARGUMENTVALUE_ID = 0u;

	[Token(Token = "0x40008EC")]
	public const uint AK_INVALID_CHANNELMASK = 0u;

	[Token(Token = "0x40008ED")]
	public const uint AK_INVALID_OUTPUT_DEVICE_ID = 0u;

	[Token(Token = "0x40008EE")]
	public const uint AK_MIXER_FX_SLOT = uint.MaxValue;

	[Token(Token = "0x40008EF")]
	public const ulong AK_DEFAULT_LISTENER_OBJ = 0uL;

	[Token(Token = "0x40008F0")]
	public const uint AK_DEFAULT_PRIORITY = 50u;

	[Token(Token = "0x40008F1")]
	public const uint AK_MIN_PRIORITY = 0u;

	[Token(Token = "0x40008F2")]
	public const uint AK_MAX_PRIORITY = 100u;

	[Token(Token = "0x40008F3")]
	public const uint AK_DEFAULT_BANK_IO_PRIORITY = 50u;

	[Token(Token = "0x40008F4")]
	public const double AK_DEFAULT_BANK_THROUGHPUT = 1048.576;

	[Token(Token = "0x40008F5")]
	public const uint AKCOMPANYID_AUDIOKINETIC = 0u;

	[Token(Token = "0x40008F6")]
	public const uint AK_LISTENERS_MASK_ALL = uint.MaxValue;

	[Token(Token = "0x40008F7")]
	public const int NULL = 0;

	[Token(Token = "0x40008F8")]
	public const int AKCURVEINTERPOLATION_NUM_STORAGE_BIT = 5;

	[Token(Token = "0x40008F9")]
	public const int AK_MAX_LANGUAGE_NAME_SIZE = 32;

	[Token(Token = "0x40008FA")]
	public const int AKCOMPANYID_PLUGINDEV_MIN = 64;

	[Token(Token = "0x40008FB")]
	public const int AKCOMPANYID_PLUGINDEV_MAX = 255;

	[Token(Token = "0x40008FC")]
	public const int AKCOMPANYID_AUDIOKINETIC_EXTERNAL = 1;

	[Token(Token = "0x40008FD")]
	public const int AKCOMPANYID_MCDSP = 256;

	[Token(Token = "0x40008FE")]
	public const int AKCOMPANYID_WAVEARTS = 257;

	[Token(Token = "0x40008FF")]
	public const int AKCOMPANYID_PHONETICARTS = 258;

	[Token(Token = "0x4000900")]
	public const int AKCOMPANYID_IZOTOPE = 259;

	[Token(Token = "0x4000901")]
	public const int AKCOMPANYID_CRANKCASEAUDIO = 261;

	[Token(Token = "0x4000902")]
	public const int AKCOMPANYID_IOSONO = 262;

	[Token(Token = "0x4000903")]
	public const int AKCOMPANYID_AUROTECHNOLOGIES = 263;

	[Token(Token = "0x4000904")]
	public const int AKCOMPANYID_DOLBY = 264;

	[Token(Token = "0x4000905")]
	public const int AKCOMPANYID_TWOBIGEARS = 265;

	[Token(Token = "0x4000906")]
	public const int AKCOMPANYID_OCULUS = 266;

	[Token(Token = "0x4000907")]
	public const int AKCOMPANYID_BLUERIPPLESOUND = 267;

	[Token(Token = "0x4000908")]
	public const int AKCOMPANYID_ENZIEN = 268;

	[Token(Token = "0x4000909")]
	public const int AKCOMPANYID_KROTOS = 269;

	[Token(Token = "0x400090A")]
	public const int AKCOMPANYID_NURULIZE = 270;

	[Token(Token = "0x400090B")]
	public const int AKCOMPANYID_SUPERPOWERED = 271;

	[Token(Token = "0x400090C")]
	public const int AKCOMPANYID_GOOGLE = 272;

	[Token(Token = "0x400090D")]
	public const int AKCOMPANYID_VISISONICS = 277;

	[Token(Token = "0x400090E")]
	public const int AKCODECID_BANK = 0;

	[Token(Token = "0x400090F")]
	public const int AKCODECID_PCM = 1;

	[Token(Token = "0x4000910")]
	public const int AKCODECID_ADPCM = 2;

	[Token(Token = "0x4000911")]
	public const int AKCODECID_XMA = 3;

	[Token(Token = "0x4000912")]
	public const int AKCODECID_VORBIS = 4;

	[Token(Token = "0x4000913")]
	public const int AKCODECID_WIIADPCM = 5;

	[Token(Token = "0x4000914")]
	public const int AKCODECID_PCMEX = 7;

	[Token(Token = "0x4000915")]
	public const int AKCODECID_EXTERNAL_SOURCE = 8;

	[Token(Token = "0x4000916")]
	public const int AKCODECID_XWMA = 9;

	[Token(Token = "0x4000917")]
	public const int AKCODECID_AAC = 10;

	[Token(Token = "0x4000918")]
	public const int AKCODECID_FILE_PACKAGE = 11;

	[Token(Token = "0x4000919")]
	public const int AKCODECID_ATRAC9 = 12;

	[Token(Token = "0x400091A")]
	public const int AKCODECID_VAG = 13;

	[Token(Token = "0x400091B")]
	public const int AKCODECID_PROFILERCAPTURE = 14;

	[Token(Token = "0x400091C")]
	public const int AKCODECID_ANALYSISFILE = 15;

	[Token(Token = "0x400091D")]
	public const int AKCODECID_MIDI = 16;

	[Token(Token = "0x400091E")]
	public const int AKCODECID_OPUSNX = 17;

	[Token(Token = "0x400091F")]
	public const int AKCODECID_CAF = 18;

	[Token(Token = "0x4000920")]
	public const int AKCODECID_AKOPUS = 19;

	[Token(Token = "0x4000921")]
	public const int AKPLUGINID_METER = 129;

	[Token(Token = "0x4000922")]
	public const int AKPLUGINID_RECORDER = 132;

	[Token(Token = "0x4000923")]
	public const int AKEXTENSIONID_SPATIALAUDIO = 800;

	[Token(Token = "0x4000924")]
	public const int AKEXTENSIONID_INTERACTIVEMUSIC = 801;

	[Token(Token = "0x4000925")]
	public const int AKEXTENSIONID_EVENTMGRTHREAD = 900;

	[Token(Token = "0x4000926")]
	public const int AK_WAVE_FORMAT_VAG = 65531;

	[Token(Token = "0x4000927")]
	public const int AK_WAVE_FORMAT_AT9 = 65532;

	[Token(Token = "0x4000928")]
	public const int AK_WAVE_FORMAT_VORBIS = 65535;

	[Token(Token = "0x4000929")]
	public const int AK_WAVE_FORMAT_AAC = 43712;

	[Token(Token = "0x400092A")]
	public const int AK_WAVE_FORMAT_OPUSNX = 12345;

	[Token(Token = "0x400092B")]
	public const int AK_WAVE_FORMAT_OPUS = 12352;

	[Token(Token = "0x400092C")]
	public const int WAVE_FORMAT_XMA2 = 358;

	[Token(Token = "0x400092D")]
	public const int AK_PANNER_NUM_STORAGE_BITS = 3;

	[Token(Token = "0x400092E")]
	public const int AK_POSSOURCE_NUM_STORAGE_BITS = 3;

	[Token(Token = "0x400092F")]
	public const int AK_SPAT_NUM_STORAGE_BITS = 3;

	[Token(Token = "0x4000930")]
	public const int AK_MAX_BITS_METERING_FLAGS = 5;

	[Token(Token = "0x4000931")]
	public const int AK_OS_STRUCT_ALIGN = 4;

	[Token(Token = "0x4000932")]
	public const int AK_64B_OS_STRUCT_ALIGN = 8;

	[Token(Token = "0x4000933")]
	public const bool AK_ASYNC_OPEN_DEFAULT = false;

	[Token(Token = "0x4000934")]
	public const int AK_COMM_DEFAULT_DISCOVERY_PORT = 24024;

	[Token(Token = "0x4000935")]
	public const int AK_MIDI_EVENT_TYPE_INVALID = 0;

	[Token(Token = "0x4000936")]
	public const int AK_MIDI_EVENT_TYPE_NOTE_OFF = 128;

	[Token(Token = "0x4000937")]
	public const int AK_MIDI_EVENT_TYPE_NOTE_ON = 144;

	[Token(Token = "0x4000938")]
	public const int AK_MIDI_EVENT_TYPE_NOTE_AFTERTOUCH = 160;

	[Token(Token = "0x4000939")]
	public const int AK_MIDI_EVENT_TYPE_CONTROLLER = 176;

	[Token(Token = "0x400093A")]
	public const int AK_MIDI_EVENT_TYPE_PROGRAM_CHANGE = 192;

	[Token(Token = "0x400093B")]
	public const int AK_MIDI_EVENT_TYPE_CHANNEL_AFTERTOUCH = 208;

	[Token(Token = "0x400093C")]
	public const int AK_MIDI_EVENT_TYPE_PITCH_BEND = 224;

	[Token(Token = "0x400093D")]
	public const int AK_MIDI_EVENT_TYPE_SYSEX = 240;

	[Token(Token = "0x400093E")]
	public const int AK_MIDI_EVENT_TYPE_ESCAPE = 247;

	[Token(Token = "0x400093F")]
	public const int AK_MIDI_EVENT_TYPE_META = 255;

	[Token(Token = "0x4000940")]
	public const int AK_MIDI_CC_BANK_SELECT_COARSE = 0;

	[Token(Token = "0x4000941")]
	public const int AK_MIDI_CC_MOD_WHEEL_COARSE = 1;

	[Token(Token = "0x4000942")]
	public const int AK_MIDI_CC_BREATH_CTRL_COARSE = 2;

	[Token(Token = "0x4000943")]
	public const int AK_MIDI_CC_CTRL_3_COARSE = 3;

	[Token(Token = "0x4000944")]
	public const int AK_MIDI_CC_FOOT_PEDAL_COARSE = 4;

	[Token(Token = "0x4000945")]
	public const int AK_MIDI_CC_PORTAMENTO_COARSE = 5;

	[Token(Token = "0x4000946")]
	public const int AK_MIDI_CC_DATA_ENTRY_COARSE = 6;

	[Token(Token = "0x4000947")]
	public const int AK_MIDI_CC_VOLUME_COARSE = 7;

	[Token(Token = "0x4000948")]
	public const int AK_MIDI_CC_BALANCE_COARSE = 8;

	[Token(Token = "0x4000949")]
	public const int AK_MIDI_CC_CTRL_9_COARSE = 9;

	[Token(Token = "0x400094A")]
	public const int AK_MIDI_CC_PAN_POSITION_COARSE = 10;

	[Token(Token = "0x400094B")]
	public const int AK_MIDI_CC_EXPRESSION_COARSE = 11;

	[Token(Token = "0x400094C")]
	public const int AK_MIDI_CC_EFFECT_CTRL_1_COARSE = 12;

	[Token(Token = "0x400094D")]
	public const int AK_MIDI_CC_EFFECT_CTRL_2_COARSE = 13;

	[Token(Token = "0x400094E")]
	public const int AK_MIDI_CC_CTRL_14_COARSE = 14;

	[Token(Token = "0x400094F")]
	public const int AK_MIDI_CC_CTRL_15_COARSE = 15;

	[Token(Token = "0x4000950")]
	public const int AK_MIDI_CC_GEN_SLIDER_1 = 16;

	[Token(Token = "0x4000951")]
	public const int AK_MIDI_CC_GEN_SLIDER_2 = 17;

	[Token(Token = "0x4000952")]
	public const int AK_MIDI_CC_GEN_SLIDER_3 = 18;

	[Token(Token = "0x4000953")]
	public const int AK_MIDI_CC_GEN_SLIDER_4 = 19;

	[Token(Token = "0x4000954")]
	public const int AK_MIDI_CC_CTRL_20_COARSE = 20;

	[Token(Token = "0x4000955")]
	public const int AK_MIDI_CC_CTRL_21_COARSE = 21;

	[Token(Token = "0x4000956")]
	public const int AK_MIDI_CC_CTRL_22_COARSE = 22;

	[Token(Token = "0x4000957")]
	public const int AK_MIDI_CC_CTRL_23_COARSE = 23;

	[Token(Token = "0x4000958")]
	public const int AK_MIDI_CC_CTRL_24_COARSE = 24;

	[Token(Token = "0x4000959")]
	public const int AK_MIDI_CC_CTRL_25_COARSE = 25;

	[Token(Token = "0x400095A")]
	public const int AK_MIDI_CC_CTRL_26_COARSE = 26;

	[Token(Token = "0x400095B")]
	public const int AK_MIDI_CC_CTRL_27_COARSE = 27;

	[Token(Token = "0x400095C")]
	public const int AK_MIDI_CC_CTRL_28_COARSE = 28;

	[Token(Token = "0x400095D")]
	public const int AK_MIDI_CC_CTRL_29_COARSE = 29;

	[Token(Token = "0x400095E")]
	public const int AK_MIDI_CC_CTRL_30_COARSE = 30;

	[Token(Token = "0x400095F")]
	public const int AK_MIDI_CC_CTRL_31_COARSE = 31;

	[Token(Token = "0x4000960")]
	public const int AK_MIDI_CC_BANK_SELECT_FINE = 32;

	[Token(Token = "0x4000961")]
	public const int AK_MIDI_CC_MOD_WHEEL_FINE = 33;

	[Token(Token = "0x4000962")]
	public const int AK_MIDI_CC_BREATH_CTRL_FINE = 34;

	[Token(Token = "0x4000963")]
	public const int AK_MIDI_CC_CTRL_3_FINE = 35;

	[Token(Token = "0x4000964")]
	public const int AK_MIDI_CC_FOOT_PEDAL_FINE = 36;

	[Token(Token = "0x4000965")]
	public const int AK_MIDI_CC_PORTAMENTO_FINE = 37;

	[Token(Token = "0x4000966")]
	public const int AK_MIDI_CC_DATA_ENTRY_FINE = 38;

	[Token(Token = "0x4000967")]
	public const int AK_MIDI_CC_VOLUME_FINE = 39;

	[Token(Token = "0x4000968")]
	public const int AK_MIDI_CC_BALANCE_FINE = 40;

	[Token(Token = "0x4000969")]
	public const int AK_MIDI_CC_CTRL_9_FINE = 41;

	[Token(Token = "0x400096A")]
	public const int AK_MIDI_CC_PAN_POSITION_FINE = 42;

	[Token(Token = "0x400096B")]
	public const int AK_MIDI_CC_EXPRESSION_FINE = 43;

	[Token(Token = "0x400096C")]
	public const int AK_MIDI_CC_EFFECT_CTRL_1_FINE = 44;

	[Token(Token = "0x400096D")]
	public const int AK_MIDI_CC_EFFECT_CTRL_2_FINE = 45;

	[Token(Token = "0x400096E")]
	public const int AK_MIDI_CC_CTRL_14_FINE = 46;

	[Token(Token = "0x400096F")]
	public const int AK_MIDI_CC_CTRL_15_FINE = 47;

	[Token(Token = "0x4000970")]
	public const int AK_MIDI_CC_CTRL_20_FINE = 52;

	[Token(Token = "0x4000971")]
	public const int AK_MIDI_CC_CTRL_21_FINE = 53;

	[Token(Token = "0x4000972")]
	public const int AK_MIDI_CC_CTRL_22_FINE = 54;

	[Token(Token = "0x4000973")]
	public const int AK_MIDI_CC_CTRL_23_FINE = 55;

	[Token(Token = "0x4000974")]
	public const int AK_MIDI_CC_CTRL_24_FINE = 56;

	[Token(Token = "0x4000975")]
	public const int AK_MIDI_CC_CTRL_25_FINE = 57;

	[Token(Token = "0x4000976")]
	public const int AK_MIDI_CC_CTRL_26_FINE = 58;

	[Token(Token = "0x4000977")]
	public const int AK_MIDI_CC_CTRL_27_FINE = 59;

	[Token(Token = "0x4000978")]
	public const int AK_MIDI_CC_CTRL_28_FINE = 60;

	[Token(Token = "0x4000979")]
	public const int AK_MIDI_CC_CTRL_29_FINE = 61;

	[Token(Token = "0x400097A")]
	public const int AK_MIDI_CC_CTRL_30_FINE = 62;

	[Token(Token = "0x400097B")]
	public const int AK_MIDI_CC_CTRL_31_FINE = 63;

	[Token(Token = "0x400097C")]
	public const int AK_MIDI_CC_HOLD_PEDAL = 64;

	[Token(Token = "0x400097D")]
	public const int AK_MIDI_CC_PORTAMENTO_ON_OFF = 65;

	[Token(Token = "0x400097E")]
	public const int AK_MIDI_CC_SUSTENUTO_PEDAL = 66;

	[Token(Token = "0x400097F")]
	public const int AK_MIDI_CC_SOFT_PEDAL = 67;

	[Token(Token = "0x4000980")]
	public const int AK_MIDI_CC_LEGATO_PEDAL = 68;

	[Token(Token = "0x4000981")]
	public const int AK_MIDI_CC_HOLD_PEDAL_2 = 69;

	[Token(Token = "0x4000982")]
	public const int AK_MIDI_CC_SOUND_VARIATION = 70;

	[Token(Token = "0x4000983")]
	public const int AK_MIDI_CC_SOUND_TIMBRE = 71;

	[Token(Token = "0x4000984")]
	public const int AK_MIDI_CC_SOUND_RELEASE_TIME = 72;

	[Token(Token = "0x4000985")]
	public const int AK_MIDI_CC_SOUND_ATTACK_TIME = 73;

	[Token(Token = "0x4000986")]
	public const int AK_MIDI_CC_SOUND_BRIGHTNESS = 74;

	[Token(Token = "0x4000987")]
	public const int AK_MIDI_CC_SOUND_CTRL_6 = 75;

	[Token(Token = "0x4000988")]
	public const int AK_MIDI_CC_SOUND_CTRL_7 = 76;

	[Token(Token = "0x4000989")]
	public const int AK_MIDI_CC_SOUND_CTRL_8 = 77;

	[Token(Token = "0x400098A")]
	public const int AK_MIDI_CC_SOUND_CTRL_9 = 78;

	[Token(Token = "0x400098B")]
	public const int AK_MIDI_CC_SOUND_CTRL_10 = 79;

	[Token(Token = "0x400098C")]
	public const int AK_MIDI_CC_GENERAL_BUTTON_1 = 80;

	[Token(Token = "0x400098D")]
	public const int AK_MIDI_CC_GENERAL_BUTTON_2 = 81;

	[Token(Token = "0x400098E")]
	public const int AK_MIDI_CC_GENERAL_BUTTON_3 = 82;

	[Token(Token = "0x400098F")]
	public const int AK_MIDI_CC_GENERAL_BUTTON_4 = 83;

	[Token(Token = "0x4000990")]
	public const int AK_MIDI_CC_REVERB_LEVEL = 91;

	[Token(Token = "0x4000991")]
	public const int AK_MIDI_CC_TREMOLO_LEVEL = 92;

	[Token(Token = "0x4000992")]
	public const int AK_MIDI_CC_CHORUS_LEVEL = 93;

	[Token(Token = "0x4000993")]
	public const int AK_MIDI_CC_CELESTE_LEVEL = 94;

	[Token(Token = "0x4000994")]
	public const int AK_MIDI_CC_PHASER_LEVEL = 95;

	[Token(Token = "0x4000995")]
	public const int AK_MIDI_CC_DATA_BUTTON_P1 = 96;

	[Token(Token = "0x4000996")]
	public const int AK_MIDI_CC_DATA_BUTTON_M1 = 97;

	[Token(Token = "0x4000997")]
	public const int AK_MIDI_CC_NON_REGISTER_COARSE = 98;

	[Token(Token = "0x4000998")]
	public const int AK_MIDI_CC_NON_REGISTER_FINE = 99;

	[Token(Token = "0x4000999")]
	public const int AK_MIDI_CC_ALL_SOUND_OFF = 120;

	[Token(Token = "0x400099A")]
	public const int AK_MIDI_CC_ALL_CONTROLLERS_OFF = 121;

	[Token(Token = "0x400099B")]
	public const int AK_MIDI_CC_LOCAL_KEYBOARD = 122;

	[Token(Token = "0x400099C")]
	public const int AK_MIDI_CC_ALL_NOTES_OFF = 123;

	[Token(Token = "0x400099D")]
	public const int AK_MIDI_CC_OMNI_MODE_OFF = 124;

	[Token(Token = "0x400099E")]
	public const int AK_MIDI_CC_OMNI_MODE_ON = 125;

	[Token(Token = "0x400099F")]
	public const int AK_MIDI_CC_OMNI_MONOPHONIC_ON = 126;

	[Token(Token = "0x40009A0")]
	public const int AK_MIDI_CC_OMNI_POLYPHONIC_ON = 127;

	[Token(Token = "0x40009A1")]
	public const int AK_SPEAKER_FRONT_LEFT = 1;

	[Token(Token = "0x40009A2")]
	public const int AK_SPEAKER_FRONT_RIGHT = 2;

	[Token(Token = "0x40009A3")]
	public const int AK_SPEAKER_FRONT_CENTER = 4;

	[Token(Token = "0x40009A4")]
	public const int AK_SPEAKER_LOW_FREQUENCY = 8;

	[Token(Token = "0x40009A5")]
	public const int AK_SPEAKER_BACK_LEFT = 16;

	[Token(Token = "0x40009A6")]
	public const int AK_SPEAKER_BACK_RIGHT = 32;

	[Token(Token = "0x40009A7")]
	public const int AK_SPEAKER_BACK_CENTER = 256;

	[Token(Token = "0x40009A8")]
	public const int AK_SPEAKER_SIDE_LEFT = 512;

	[Token(Token = "0x40009A9")]
	public const int AK_SPEAKER_SIDE_RIGHT = 1024;

	[Token(Token = "0x40009AA")]
	public const int AK_SPEAKER_TOP = 2048;

	[Token(Token = "0x40009AB")]
	public const int AK_SPEAKER_HEIGHT_FRONT_LEFT = 4096;

	[Token(Token = "0x40009AC")]
	public const int AK_SPEAKER_HEIGHT_FRONT_CENTER = 8192;

	[Token(Token = "0x40009AD")]
	public const int AK_SPEAKER_HEIGHT_FRONT_RIGHT = 16384;

	[Token(Token = "0x40009AE")]
	public const int AK_SPEAKER_HEIGHT_BACK_LEFT = 32768;

	[Token(Token = "0x40009AF")]
	public const int AK_SPEAKER_HEIGHT_BACK_CENTER = 65536;

	[Token(Token = "0x40009B0")]
	public const int AK_SPEAKER_HEIGHT_BACK_RIGHT = 131072;

	[Token(Token = "0x40009B1")]
	public const int AK_SPEAKER_SETUP_MONO = 4;

	[Token(Token = "0x40009B2")]
	public const int AK_SPEAKER_SETUP_0POINT1 = 8;

	[Token(Token = "0x40009B3")]
	public const int AK_SPEAKER_SETUP_1POINT1 = 12;

	[Token(Token = "0x40009B4")]
	public const int AK_SPEAKER_SETUP_STEREO = 3;

	[Token(Token = "0x40009B5")]
	public const int AK_SPEAKER_SETUP_2POINT1 = 11;

	[Token(Token = "0x40009B6")]
	public const int AK_SPEAKER_SETUP_3STEREO = 7;

	[Token(Token = "0x40009B7")]
	public const int AK_SPEAKER_SETUP_3POINT1 = 15;

	[Token(Token = "0x40009B8")]
	public const int AK_SPEAKER_SETUP_4 = 1539;

	[Token(Token = "0x40009B9")]
	public const int AK_SPEAKER_SETUP_4POINT1 = 1547;

	[Token(Token = "0x40009BA")]
	public const int AK_SPEAKER_SETUP_5 = 1543;

	[Token(Token = "0x40009BB")]
	public const int AK_SPEAKER_SETUP_5POINT1 = 1551;

	[Token(Token = "0x40009BC")]
	public const int AK_SPEAKER_SETUP_6 = 1587;

	[Token(Token = "0x40009BD")]
	public const int AK_SPEAKER_SETUP_6POINT1 = 1595;

	[Token(Token = "0x40009BE")]
	public const int AK_SPEAKER_SETUP_7 = 1591;

	[Token(Token = "0x40009BF")]
	public const int AK_SPEAKER_SETUP_7POINT1 = 1599;

	[Token(Token = "0x40009C0")]
	public const int AK_SPEAKER_SETUP_SURROUND = 259;

	[Token(Token = "0x40009C1")]
	public const int AK_SPEAKER_SETUP_DPL2 = 1539;

	[Token(Token = "0x40009C2")]
	public const int AK_SPEAKER_SETUP_HEIGHT_4 = 184320;

	[Token(Token = "0x40009C3")]
	public const int AK_SPEAKER_SETUP_HEIGHT_5 = 192512;

	[Token(Token = "0x40009C4")]
	public const int AK_SPEAKER_SETUP_HEIGHT_ALL = 258048;

	[Token(Token = "0x40009C5")]
	public const int AK_SPEAKER_SETUP_AURO_222 = 22019;

	[Token(Token = "0x40009C6")]
	public const int AK_SPEAKER_SETUP_AURO_8 = 185859;

	[Token(Token = "0x40009C7")]
	public const int AK_SPEAKER_SETUP_AURO_9 = 185863;

	[Token(Token = "0x40009C8")]
	public const int AK_SPEAKER_SETUP_AURO_9POINT1 = 185871;

	[Token(Token = "0x40009C9")]
	public const int AK_SPEAKER_SETUP_AURO_10 = 187911;

	[Token(Token = "0x40009CA")]
	public const int AK_SPEAKER_SETUP_AURO_10POINT1 = 187919;

	[Token(Token = "0x40009CB")]
	public const int AK_SPEAKER_SETUP_AURO_11 = 196103;

	[Token(Token = "0x40009CC")]
	public const int AK_SPEAKER_SETUP_AURO_11POINT1 = 196111;

	[Token(Token = "0x40009CD")]
	public const int AK_SPEAKER_SETUP_AURO_11_740 = 185911;

	[Token(Token = "0x40009CE")]
	public const int AK_SPEAKER_SETUP_AURO_11POINT1_740 = 185919;

	[Token(Token = "0x40009CF")]
	public const int AK_SPEAKER_SETUP_AURO_13_751 = 196151;

	[Token(Token = "0x40009D0")]
	public const int AK_SPEAKER_SETUP_AURO_13POINT1_751 = 196159;

	[Token(Token = "0x40009D1")]
	public const int AK_SPEAKER_SETUP_DOLBY_5_0_2 = 22023;

	[Token(Token = "0x40009D2")]
	public const int AK_SPEAKER_SETUP_DOLBY_5_1_2 = 22031;

	[Token(Token = "0x40009D3")]
	public const int AK_SPEAKER_SETUP_DOLBY_6_0_2 = 22067;

	[Token(Token = "0x40009D4")]
	public const int AK_SPEAKER_SETUP_DOLBY_6_1_2 = 22075;

	[Token(Token = "0x40009D5")]
	public const int AK_SPEAKER_SETUP_DOLBY_6_0_4 = 185907;

	[Token(Token = "0x40009D6")]
	public const int AK_SPEAKER_SETUP_DOLBY_6_1_4 = 185915;

	[Token(Token = "0x40009D7")]
	public const int AK_SPEAKER_SETUP_DOLBY_7_0_2 = 22071;

	[Token(Token = "0x40009D8")]
	public const int AK_SPEAKER_SETUP_DOLBY_7_1_2 = 22079;

	[Token(Token = "0x40009D9")]
	public const int AK_SPEAKER_SETUP_DOLBY_7_0_4 = 185911;

	[Token(Token = "0x40009DA")]
	public const int AK_SPEAKER_SETUP_DOLBY_7_1_4 = 185919;

	[Token(Token = "0x40009DB")]
	public const int AK_SPEAKER_SETUP_ALL_SPEAKERS = 261951;

	[Token(Token = "0x40009DC")]
	public const int AK_IDX_SETUP_FRONT_LEFT = 0;

	[Token(Token = "0x40009DD")]
	public const int AK_IDX_SETUP_FRONT_RIGHT = 1;

	[Token(Token = "0x40009DE")]
	public const int AK_IDX_SETUP_CENTER = 2;

	[Token(Token = "0x40009DF")]
	public const int AK_IDX_SETUP_NOCENTER_BACK_LEFT = 2;

	[Token(Token = "0x40009E0")]
	public const int AK_IDX_SETUP_NOCENTER_BACK_RIGHT = 3;

	[Token(Token = "0x40009E1")]
	public const int AK_IDX_SETUP_NOCENTER_SIDE_LEFT = 4;

	[Token(Token = "0x40009E2")]
	public const int AK_IDX_SETUP_NOCENTER_SIDE_RIGHT = 5;

	[Token(Token = "0x40009E3")]
	public const int AK_IDX_SETUP_WITHCENTER_BACK_LEFT = 3;

	[Token(Token = "0x40009E4")]
	public const int AK_IDX_SETUP_WITHCENTER_BACK_RIGHT = 4;

	[Token(Token = "0x40009E5")]
	public const int AK_IDX_SETUP_WITHCENTER_SIDE_LEFT = 5;

	[Token(Token = "0x40009E6")]
	public const int AK_IDX_SETUP_WITHCENTER_SIDE_RIGHT = 6;

	[Token(Token = "0x40009E7")]
	public const int AK_IDX_SETUP_0_LFE = 0;

	[Token(Token = "0x40009E8")]
	public const int AK_IDX_SETUP_1_CENTER = 0;

	[Token(Token = "0x40009E9")]
	public const int AK_IDX_SETUP_1_LFE = 1;

	[Token(Token = "0x40009EA")]
	public const int AK_IDX_SETUP_2_LEFT = 0;

	[Token(Token = "0x40009EB")]
	public const int AK_IDX_SETUP_2_RIGHT = 1;

	[Token(Token = "0x40009EC")]
	public const int AK_IDX_SETUP_2_LFE = 2;

	[Token(Token = "0x40009ED")]
	public const int AK_IDX_SETUP_3_LEFT = 0;

	[Token(Token = "0x40009EE")]
	public const int AK_IDX_SETUP_3_RIGHT = 1;

	[Token(Token = "0x40009EF")]
	public const int AK_IDX_SETUP_3_CENTER = 2;

	[Token(Token = "0x40009F0")]
	public const int AK_IDX_SETUP_3_LFE = 3;

	[Token(Token = "0x40009F1")]
	public const int AK_IDX_SETUP_4_FRONTLEFT = 0;

	[Token(Token = "0x40009F2")]
	public const int AK_IDX_SETUP_4_FRONTRIGHT = 1;

	[Token(Token = "0x40009F3")]
	public const int AK_IDX_SETUP_4_REARLEFT = 2;

	[Token(Token = "0x40009F4")]
	public const int AK_IDX_SETUP_4_REARRIGHT = 3;

	[Token(Token = "0x40009F5")]
	public const int AK_IDX_SETUP_4_LFE = 4;

	[Token(Token = "0x40009F6")]
	public const int AK_IDX_SETUP_5_FRONTLEFT = 0;

	[Token(Token = "0x40009F7")]
	public const int AK_IDX_SETUP_5_FRONTRIGHT = 1;

	[Token(Token = "0x40009F8")]
	public const int AK_IDX_SETUP_5_CENTER = 2;

	[Token(Token = "0x40009F9")]
	public const int AK_IDX_SETUP_5_REARLEFT = 3;

	[Token(Token = "0x40009FA")]
	public const int AK_IDX_SETUP_5_REARRIGHT = 4;

	[Token(Token = "0x40009FB")]
	public const int AK_IDX_SETUP_5_LFE = 5;

	[Token(Token = "0x40009FC")]
	public const int AK_IDX_SETUP_6_FRONTLEFT = 0;

	[Token(Token = "0x40009FD")]
	public const int AK_IDX_SETUP_6_FRONTRIGHT = 1;

	[Token(Token = "0x40009FE")]
	public const int AK_IDX_SETUP_6_REARLEFT = 2;

	[Token(Token = "0x40009FF")]
	public const int AK_IDX_SETUP_6_REARRIGHT = 3;

	[Token(Token = "0x4000A00")]
	public const int AK_IDX_SETUP_6_SIDELEFT = 4;

	[Token(Token = "0x4000A01")]
	public const int AK_IDX_SETUP_6_SIDERIGHT = 5;

	[Token(Token = "0x4000A02")]
	public const int AK_IDX_SETUP_6_LFE = 6;

	[Token(Token = "0x4000A03")]
	public const int AK_IDX_SETUP_7_FRONTLEFT = 0;

	[Token(Token = "0x4000A04")]
	public const int AK_IDX_SETUP_7_FRONTRIGHT = 1;

	[Token(Token = "0x4000A05")]
	public const int AK_IDX_SETUP_7_CENTER = 2;

	[Token(Token = "0x4000A06")]
	public const int AK_IDX_SETUP_7_REARLEFT = 3;

	[Token(Token = "0x4000A07")]
	public const int AK_IDX_SETUP_7_REARRIGHT = 4;

	[Token(Token = "0x4000A08")]
	public const int AK_IDX_SETUP_7_SIDELEFT = 5;

	[Token(Token = "0x4000A09")]
	public const int AK_IDX_SETUP_7_SIDERIGHT = 6;

	[Token(Token = "0x4000A0A")]
	public const int AK_IDX_SETUP_7_LFE = 7;

	[Token(Token = "0x4000A0B")]
	public const int AK_SPEAKER_SETUP_0_1 = 8;

	[Token(Token = "0x4000A0C")]
	public const int AK_SPEAKER_SETUP_1_0_CENTER = 4;

	[Token(Token = "0x4000A0D")]
	public const int AK_SPEAKER_SETUP_1_1_CENTER = 12;

	[Token(Token = "0x4000A0E")]
	public const int AK_SPEAKER_SETUP_2_0 = 3;

	[Token(Token = "0x4000A0F")]
	public const int AK_SPEAKER_SETUP_2_1 = 11;

	[Token(Token = "0x4000A10")]
	public const int AK_SPEAKER_SETUP_3_0 = 7;

	[Token(Token = "0x4000A11")]
	public const int AK_SPEAKER_SETUP_3_1 = 15;

	[Token(Token = "0x4000A12")]
	public const int AK_SPEAKER_SETUP_FRONT = 7;

	[Token(Token = "0x4000A13")]
	public const int AK_SPEAKER_SETUP_4_0 = 1539;

	[Token(Token = "0x4000A14")]
	public const int AK_SPEAKER_SETUP_4_1 = 1547;

	[Token(Token = "0x4000A15")]
	public const int AK_SPEAKER_SETUP_5_0 = 1543;

	[Token(Token = "0x4000A16")]
	public const int AK_SPEAKER_SETUP_5_1 = 1551;

	[Token(Token = "0x4000A17")]
	public const int AK_SPEAKER_SETUP_6_0 = 1587;

	[Token(Token = "0x4000A18")]
	public const int AK_SPEAKER_SETUP_6_1 = 1595;

	[Token(Token = "0x4000A19")]
	public const int AK_SPEAKER_SETUP_7_0 = 1591;

	[Token(Token = "0x4000A1A")]
	public const int AK_SPEAKER_SETUP_7_1 = 1599;

	[Token(Token = "0x4000A1B")]
	public const int AK_SPEAKER_SETUP_DEFAULT_PLANE = 1599;

	[Token(Token = "0x4000A1C")]
	public const int AK_SUPPORTED_STANDARD_CHANNEL_MASK = 261951;

	[Token(Token = "0x4000A1D")]
	public const int AK_STANDARD_MAX_NUM_CHANNELS = 8;

	[Token(Token = "0x4000A1E")]
	public const int AK_NUM_SAMPLED_SPHERE_POINTS = 32;

	[Token(Token = "0x4000A1F")]
	public const int AK_MAX_NUM_TEXTURE = 4;

	[Token(Token = "0x4000A20")]
	public const int AK_MAX_REFLECT_ORDER = 4;

	[Token(Token = "0x4000A21")]
	public const int AK_MAX_REFLECTION_PATH_LENGTH = 6;

	[Token(Token = "0x4000A22")]
	public const int AK_MAX_SOUND_PROPAGATION_DEPTH = 8;

	[Token(Token = "0x4000A23")]
	public const double AK_DEFAULT_DIFFR_SHADOW_DEGREES = 30.0;

	[Token(Token = "0x4000A24")]
	public const double AK_DEFAULT_DIFFR_SHADOW_ATTEN = 2.0;

	[Token(Token = "0x4000A25")]
	public const double AK_DEFAULT_MOVEMENT_THRESHOLD = 1.0;

	[Token(Token = "0x4000A26")]
	public const double AK_SA_EPSILON = 0.001;

	[Token(Token = "0x4000A27")]
	public const double AK_SA_DIFFRACTION_EPSILON = 0.1;

	[Token(Token = "0x4000A28")]
	public const double AK_SA_PLANE_THICKNESS_RATIO = 0.005;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameObjectHashFunction gameObjectHash;

	[Token(Token = "0x4000A2A")]
	public const string Deprecation_2018_1_2 = "This functionality is deprecated as of Wwise v2018.1.2 and will be removed in a future release.";

	[Token(Token = "0x4000A2B")]
	public const string Deprecation_2018_1_6 = "This functionality is deprecated as of Wwise v2018.1.6 and will be removed in a future release.";

	[Token(Token = "0x4000A2C")]
	public const string Deprecation_2019_1_1 = "This functionality is deprecated as of Wwise v2019.1.1 and will be removed in a future release.";

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly HashSet<ulong> RegisteredGameObjects;

	[Token(Token = "0x170000D6")]
	public static uint AK_SOUNDBANK_VERSION
	{
		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xABED44", Offset = "0xABED44", VA = "0xABED44")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000D7")]
	public static ushort AK_INT
	{
		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xABEDA4", Offset = "0xABEDA4", VA = "0xABEDA4")]
		get
		{
			return default(ushort);
		}
	}

	[Token(Token = "0x170000D8")]
	public static ushort AK_FLOAT
	{
		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xABEE04", Offset = "0xABEE04", VA = "0xABEE04")]
		get
		{
			return default(ushort);
		}
	}

	[Token(Token = "0x170000D9")]
	public static byte AK_INTERLEAVED
	{
		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xABEE64", Offset = "0xABEE64", VA = "0xABEE64")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170000DA")]
	public static byte AK_NONINTERLEAVED
	{
		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xABEEC4", Offset = "0xABEEC4", VA = "0xABEEC4")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170000DB")]
	public static uint AK_LE_NATIVE_BITSPERSAMPLE
	{
		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xABEF24", Offset = "0xABEF24", VA = "0xABEF24")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000DC")]
	public static uint AK_LE_NATIVE_SAMPLETYPE
	{
		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xABEF84", Offset = "0xABEF84", VA = "0xABEF84")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000DD")]
	public static uint AK_LE_NATIVE_INTERLEAVE
	{
		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xABEFE4", Offset = "0xABEFE4", VA = "0xABEFE4")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000DE")]
	public static byte AK_INVALID_MIDI_CHANNEL
	{
		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xAC79CC", Offset = "0xAC79CC", VA = "0xAC79CC")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170000DF")]
	public static byte AK_INVALID_MIDI_NOTE
	{
		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xAC7A2C", Offset = "0xAC7A2C", VA = "0xAC7A2C")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170000E0")]
	public static float kDefaultMaxPathLength
	{
		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xAC9890", Offset = "0xAC9890", VA = "0xAC9890")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000E1")]
	public static uint kDefaultDiffractionMaxEdges
	{
		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xAC98F0", Offset = "0xAC98F0", VA = "0xAC98F0")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000E2")]
	public static uint kDefaultDiffractionMaxPaths
	{
		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xAC9950", Offset = "0xAC9950", VA = "0xAC9950")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000E3")]
	public static float kMaxDiffraction
	{
		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xAC99B0", Offset = "0xAC99B0", VA = "0xAC99B0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000E4")]
	public static uint kListenerDiffractionMaxEdges
	{
		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xAC9A10", Offset = "0xAC9A10", VA = "0xAC9A10")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000E5")]
	public static uint kListenerDiffractionMaxPaths
	{
		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xAC9A70", Offset = "0xAC9A70", VA = "0xAC9A70")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000E6")]
	public static uint kPortalToPortalDiffractionMaxPaths
	{
		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xAC9AD0", Offset = "0xAC9AD0", VA = "0xAC9AD0")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000E7")]
	public static int g_SpatialAudioPoolId
	{
		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xAC9B98", Offset = "0xAC9B98", VA = "0xAC9B98")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xAC9B30", Offset = "0xAC9B30", VA = "0xAC9B30")]
		set
		{
		}
	}

	[Token(Token = "0x170000E8")]
	public static GameObjectHashFunction GameObjectHash
	{
		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xACB9B0", Offset = "0xACB9B0", VA = "0xACB9B0")]
		set
		{
		}
	}

	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0xABF044", Offset = "0xABF044", VA = "0xABF044")]
	public static uint DynamicSequenceOpen(GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, AkDynamicSequenceType in_eDynamicSequenceType)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0xABF1AC", Offset = "0xABF1AC", VA = "0xABF1AC")]
	public static uint DynamicSequenceOpen(GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0xABF30C", Offset = "0xABF30C", VA = "0xABF30C")]
	public static uint DynamicSequenceOpen(GameObject in_gameObjectID)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0xABF3E8", Offset = "0xABF3E8", VA = "0xABF3E8")]
	public static AKRESULT DynamicSequenceClose(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0xABF450", Offset = "0xABF450", VA = "0xABF450")]
	public static AKRESULT DynamicSequencePlay(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0xABF4D0", Offset = "0xABF4D0", VA = "0xABF4D0")]
	public static AKRESULT DynamicSequencePlay(uint in_playingID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0xABF548", Offset = "0xABF548", VA = "0xABF548")]
	public static AKRESULT DynamicSequencePlay(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0xABF5B0", Offset = "0xABF5B0", VA = "0xABF5B0")]
	public static AKRESULT DynamicSequencePause(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BD8")]
	[Address(RVA = "0xABF630", Offset = "0xABF630", VA = "0xABF630")]
	public static AKRESULT DynamicSequencePause(uint in_playingID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BD9")]
	[Address(RVA = "0xABF6A8", Offset = "0xABF6A8", VA = "0xABF6A8")]
	public static AKRESULT DynamicSequencePause(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BDA")]
	[Address(RVA = "0xABF710", Offset = "0xABF710", VA = "0xABF710")]
	public static AKRESULT DynamicSequenceResume(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0xABF790", Offset = "0xABF790", VA = "0xABF790")]
	public static AKRESULT DynamicSequenceResume(uint in_playingID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0xABF808", Offset = "0xABF808", VA = "0xABF808")]
	public static AKRESULT DynamicSequenceResume(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0xABF870", Offset = "0xABF870", VA = "0xABF870")]
	public static AKRESULT DynamicSequenceStop(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0xABF8F0", Offset = "0xABF8F0", VA = "0xABF8F0")]
	public static AKRESULT DynamicSequenceStop(uint in_playingID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0xABF968", Offset = "0xABF968", VA = "0xABF968")]
	public static AKRESULT DynamicSequenceStop(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0xABF9D0", Offset = "0xABF9D0", VA = "0xABF9D0")]
	public static AKRESULT DynamicSequenceBreak(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0xABFA38", Offset = "0xABFA38", VA = "0xABFA38")]
	public static AKRESULT DynamicSequenceGetPauseTimes(uint in_playingID, out uint out_uTime, out uint out_uDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0xABFAB8", Offset = "0xABFAB8", VA = "0xABFAB8")]
	public static AkPlaylist DynamicSequenceLockPlaylist(uint in_playingID)
	{
		return null;
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0xABFB60", Offset = "0xABFB60", VA = "0xABFB60")]
	public static AKRESULT DynamicSequenceUnlockPlaylist(uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0xAA3EBC", Offset = "0xAA3EBC", VA = "0xAA3EBC")]
	public static bool IsInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0xABFBC8", Offset = "0xABFBC8", VA = "0xABFBC8")]
	public static AKRESULT GetAudioSettings(AkAudioSettings out_audioSettings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0xABFC44", Offset = "0xABFC44", VA = "0xABFC44")]
	public static AkChannelConfig GetSpeakerConfiguration(ulong in_idOutput)
	{
		return null;
	}

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0xABFCE0", Offset = "0xABFCE0", VA = "0xABFCE0")]
	public static AkChannelConfig GetSpeakerConfiguration()
	{
		return null;
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0xABFD74", Offset = "0xABFD74", VA = "0xABFD74")]
	public static AKRESULT GetPanningRule(out int out_ePanningRule, ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0xABFDEC", Offset = "0xABFDEC", VA = "0xABFDEC")]
	public static AKRESULT GetPanningRule(out int out_ePanningRule)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0xABFE54", Offset = "0xABFE54", VA = "0xABFE54")]
	public static AKRESULT SetPanningRule(AkPanningRule in_ePanningRule, ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0xABFECC", Offset = "0xABFECC", VA = "0xABFECC")]
	public static AKRESULT SetPanningRule(AkPanningRule in_ePanningRule)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0xABFF34", Offset = "0xABFF34", VA = "0xABFF34")]
	public static AKRESULT GetSpeakerAngles(float[] io_pfSpeakerAngles, ref uint io_uNumAngles, out float out_fHeightAngle, ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0xABFFC4", Offset = "0xABFFC4", VA = "0xABFFC4")]
	public static AKRESULT GetSpeakerAngles(float[] io_pfSpeakerAngles, ref uint io_uNumAngles, out float out_fHeightAngle)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0xAC0044", Offset = "0xAC0044", VA = "0xAC0044")]
	public static AKRESULT SetSpeakerAngles(float[] in_pfSpeakerAngles, uint in_uNumAngles, float in_fHeightAngle, ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0xAC00D4", Offset = "0xAC00D4", VA = "0xAC00D4")]
	public static AKRESULT SetSpeakerAngles(float[] in_pfSpeakerAngles, uint in_uNumAngles, float in_fHeightAngle)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0xAC015C", Offset = "0xAC015C", VA = "0xAC015C")]
	public static AKRESULT SetVolumeThreshold(float in_fVolumeThresholdDB)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0xAC01CC", Offset = "0xAC01CC", VA = "0xAC01CC")]
	public static AKRESULT SetMaxNumVoicesLimit(ushort in_maxNumberVoices)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0xAC0234", Offset = "0xAC0234", VA = "0xAC0234")]
	public static AKRESULT RenderAudio(bool in_bAllowSyncRender)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BF3")]
	[Address(RVA = "0xAC029C", Offset = "0xAC029C", VA = "0xAC029C")]
	public static AKRESULT RenderAudio()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0xAC02FC", Offset = "0xAC02FC", VA = "0xAC02FC")]
	public static AKRESULT RegisterPluginDLL(string in_DllName, string in_DllPath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0xAC0374", Offset = "0xAC0374", VA = "0xAC0374")]
	public static AKRESULT RegisterPluginDLL(string in_DllName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0xAC03DC", Offset = "0xAC03DC", VA = "0xAC03DC")]
	public static uint GetIDFromString(string in_pszString)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0xAC0444", Offset = "0xAC0444", VA = "0xAC0444")]
	public static uint PostEvent(uint in_eventID, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources, uint in_PlayingID)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0xAC05E4", Offset = "0xAC05E4", VA = "0xAC05E4")]
	public static uint PostEvent(uint in_eventID, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BF9")]
	[Address(RVA = "0xAC0774", Offset = "0xAC0774", VA = "0xAC0774")]
	public static uint PostEvent(uint in_eventID, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BFA")]
	[Address(RVA = "0xAC08DC", Offset = "0xAC08DC", VA = "0xAC08DC")]
	public static uint PostEvent(uint in_eventID, GameObject in_gameObjectID)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BFB")]
	[Address(RVA = "0xAC09C8", Offset = "0xAC09C8", VA = "0xAC09C8")]
	public static uint PostEvent(string in_pszEventName, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources, uint in_PlayingID)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0xAC0B68", Offset = "0xAC0B68", VA = "0xAC0B68")]
	public static uint PostEvent(string in_pszEventName, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BFD")]
	[Address(RVA = "0xAC0CF8", Offset = "0xAC0CF8", VA = "0xAC0CF8")]
	public static uint PostEvent(string in_pszEventName, GameObject in_gameObjectID, uint in_uFlags, AkCallbackManager.EventCallback in_pfnCallback, object in_pCookie)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0xAC0E60", Offset = "0xAC0E60", VA = "0xAC0E60")]
	public static uint PostEvent(string in_pszEventName, GameObject in_gameObjectID)
	{
		return default(uint);
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0xAC0F4C", Offset = "0xAC0F4C", VA = "0xAC0F4C")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0xAC102C", Offset = "0xAC102C", VA = "0xAC102C")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0xAC10FC", Offset = "0xAC10FC", VA = "0xAC10FC")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0xAC11C4", Offset = "0xAC11C4", VA = "0xAC11C4")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0xAC127C", Offset = "0xAC127C", VA = "0xAC127C")]
	public static AKRESULT ExecuteActionOnEvent(uint in_eventID, AkActionOnEventType in_ActionType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C04")]
	[Address(RVA = "0xAC12F4", Offset = "0xAC12F4", VA = "0xAC12F4")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0xAC13D4", Offset = "0xAC13D4", VA = "0xAC13D4")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0xAC14A4", Offset = "0xAC14A4", VA = "0xAC14A4")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType, GameObject in_gameObjectID, int in_uTransitionDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C07")]
	[Address(RVA = "0xAC156C", Offset = "0xAC156C", VA = "0xAC156C")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C08")]
	[Address(RVA = "0xAC1624", Offset = "0xAC1624", VA = "0xAC1624")]
	public static AKRESULT ExecuteActionOnEvent(string in_pszEventName, AkActionOnEventType in_ActionType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C09")]
	[Address(RVA = "0xAC169C", Offset = "0xAC169C", VA = "0xAC169C")]
	public static AKRESULT PostMIDIOnEvent(uint in_eventID, GameObject in_gameObjectID, AkMIDIPostArray in_pPosts, ushort in_uNumPosts)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C0A")]
	[Address(RVA = "0xAC1774", Offset = "0xAC1774", VA = "0xAC1774")]
	public static AKRESULT StopMIDIOnEvent(uint in_eventID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C0B")]
	[Address(RVA = "0xAC1824", Offset = "0xAC1824", VA = "0xAC1824")]
	public static AKRESULT StopMIDIOnEvent(uint in_eventID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C0C")]
	[Address(RVA = "0xAC188C", Offset = "0xAC188C", VA = "0xAC188C")]
	public static AKRESULT StopMIDIOnEvent()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C0D")]
	[Address(RVA = "0xAC18EC", Offset = "0xAC18EC", VA = "0xAC18EC")]
	public static AKRESULT PinEventInStreamCache(uint in_eventID, sbyte in_uActivePriority, sbyte in_uInactivePriority)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C0E")]
	[Address(RVA = "0xAC196C", Offset = "0xAC196C", VA = "0xAC196C")]
	public static AKRESULT PinEventInStreamCache(string in_pszEventName, sbyte in_uActivePriority, sbyte in_uInactivePriority)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C0F")]
	[Address(RVA = "0xAC19EC", Offset = "0xAC19EC", VA = "0xAC19EC")]
	public static AKRESULT UnpinEventInStreamCache(uint in_eventID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C10")]
	[Address(RVA = "0xAC1A54", Offset = "0xAC1A54", VA = "0xAC1A54")]
	public static AKRESULT UnpinEventInStreamCache(string in_pszEventName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C11")]
	[Address(RVA = "0xAC1ABC", Offset = "0xAC1ABC", VA = "0xAC1ABC")]
	public static AKRESULT GetBufferStatusForPinnedEvent(uint in_eventID, out float out_fPercentBuffered, out int out_bCachePinnedMemoryFull)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0xAC1B3C", Offset = "0xAC1B3C", VA = "0xAC1B3C")]
	public static AKRESULT GetBufferStatusForPinnedEvent(string in_pszEventName, out float out_fPercentBuffered, out int out_bCachePinnedMemoryFull)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C13")]
	[Address(RVA = "0xAC1BBC", Offset = "0xAC1BBC", VA = "0xAC1BBC")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, int in_iPosition, bool in_bSeekToNearestMarker, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C14")]
	[Address(RVA = "0xAC1C8C", Offset = "0xAC1C8C", VA = "0xAC1C8C")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, int in_iPosition, bool in_bSeekToNearestMarker)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C15")]
	[Address(RVA = "0xAC1D54", Offset = "0xAC1D54", VA = "0xAC1D54")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, int in_iPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C16")]
	[Address(RVA = "0xAC1E0C", Offset = "0xAC1E0C", VA = "0xAC1E0C")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, int in_iPosition, bool in_bSeekToNearestMarker, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C17")]
	[Address(RVA = "0xAC1EDC", Offset = "0xAC1EDC", VA = "0xAC1EDC")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, int in_iPosition, bool in_bSeekToNearestMarker)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C18")]
	[Address(RVA = "0xAC1FA4", Offset = "0xAC1FA4", VA = "0xAC1FA4")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, int in_iPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C19")]
	[Address(RVA = "0xAC205C", Offset = "0xAC205C", VA = "0xAC205C")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, float in_fPercent, bool in_bSeekToNearestMarker, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0xAC2134", Offset = "0xAC2134", VA = "0xAC2134")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, float in_fPercent, bool in_bSeekToNearestMarker)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C1B")]
	[Address(RVA = "0xAC21FC", Offset = "0xAC21FC", VA = "0xAC21FC")]
	public static AKRESULT SeekOnEvent(uint in_eventID, GameObject in_gameObjectID, float in_fPercent)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0xAC22BC", Offset = "0xAC22BC", VA = "0xAC22BC")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, float in_fPercent, bool in_bSeekToNearestMarker, uint in_PlayingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0xAC2394", Offset = "0xAC2394", VA = "0xAC2394")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, float in_fPercent, bool in_bSeekToNearestMarker)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0xAC245C", Offset = "0xAC245C", VA = "0xAC245C")]
	public static AKRESULT SeekOnEvent(string in_pszEventName, GameObject in_gameObjectID, float in_fPercent)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0xAC251C", Offset = "0xAC251C", VA = "0xAC251C")]
	public static void CancelEventCallbackCookie(object in_pCookie)
	{
	}

	[Token(Token = "0x6000C20")]
	[Address(RVA = "0xAC2584", Offset = "0xAC2584", VA = "0xAC2584")]
	public static void CancelEventCallbackGameObject(GameObject in_gameObjectID)
	{
	}

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0xAC2624", Offset = "0xAC2624", VA = "0xAC2624")]
	public static void CancelEventCallback(uint in_playingID)
	{
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0xAC268C", Offset = "0xAC268C", VA = "0xAC268C")]
	public static AKRESULT GetSourcePlayPosition(uint in_PlayingID, out int out_puPosition, bool in_bExtrapolate)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0xAC270C", Offset = "0xAC270C", VA = "0xAC270C")]
	public static AKRESULT GetSourcePlayPosition(uint in_PlayingID, out int out_puPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0xAC2784", Offset = "0xAC2784", VA = "0xAC2784")]
	public static AKRESULT GetSourceStreamBuffering(uint in_PlayingID, out int out_buffering, out int out_bIsBuffering)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0xAC2804", Offset = "0xAC2804", VA = "0xAC2804")]
	public static void StopAll(GameObject in_gameObjectID)
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0xAC28A4", Offset = "0xAC28A4", VA = "0xAC28A4")]
	public static void StopAll()
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0xAC2904", Offset = "0xAC2904", VA = "0xAC2904")]
	public static void StopPlayingID(uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0xAC2984", Offset = "0xAC2984", VA = "0xAC2984")]
	public static void StopPlayingID(uint in_playingID, int in_uTransitionDuration)
	{
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0xAC29FC", Offset = "0xAC29FC", VA = "0xAC29FC")]
	public static void StopPlayingID(uint in_playingID)
	{
	}

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0xAC2A64", Offset = "0xAC2A64", VA = "0xAC2A64")]
	public static void ExecuteActionOnPlayingID(AkActionOnEventType in_ActionType, uint in_playingID, int in_uTransitionDuration, AkCurveInterpolation in_eFadeCurve)
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0xAC2AF4", Offset = "0xAC2AF4", VA = "0xAC2AF4")]
	public static void ExecuteActionOnPlayingID(AkActionOnEventType in_ActionType, uint in_playingID, int in_uTransitionDuration)
	{
	}

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0xAC2B74", Offset = "0xAC2B74", VA = "0xAC2B74")]
	public static void ExecuteActionOnPlayingID(AkActionOnEventType in_ActionType, uint in_playingID)
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0xAC2BEC", Offset = "0xAC2BEC", VA = "0xAC2BEC")]
	public static void SetRandomSeed(uint in_uSeed)
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0xAC2C54", Offset = "0xAC2C54", VA = "0xAC2C54")]
	public static void MuteBackgroundMusic(bool in_bMute)
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0xAC2CBC", Offset = "0xAC2CBC", VA = "0xAC2CBC")]
	public static bool GetBackgroundMusicMute()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0xAC2D1C", Offset = "0xAC2D1C", VA = "0xAC2D1C")]
	public static AKRESULT SendPluginCustomGameData(uint in_busID, GameObject in_busObjectID, AkPluginType in_eType, uint in_uCompanyID, uint in_uPluginID, IntPtr in_pData, uint in_uSizeInBytes)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0xAC2E04", Offset = "0xAC2E04", VA = "0xAC2E04")]
	public static AKRESULT UnregisterAllGameObj()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0xAC2E64", Offset = "0xAC2E64", VA = "0xAC2E64")]
	public static AKRESULT SetMultiplePositions(GameObject in_GameObjectID, AkPositionArray in_pPositions, ushort in_NumPositions, AkMultiPositionType in_eMultiPositionType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0xAC2F30", Offset = "0xAC2F30", VA = "0xAC2F30")]
	public static AKRESULT SetMultiplePositions(GameObject in_GameObjectID, AkPositionArray in_pPositions, ushort in_NumPositions)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0xAC2FEC", Offset = "0xAC2FEC", VA = "0xAC2FEC")]
	public static AKRESULT SetMultiplePositions(GameObject in_GameObjectID, AkChannelEmitterArray in_pPositions, ushort in_NumPositions, AkMultiPositionType in_eMultiPositionType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0xAC30B8", Offset = "0xAC30B8", VA = "0xAC30B8")]
	public static AKRESULT SetMultiplePositions(GameObject in_GameObjectID, AkChannelEmitterArray in_pPositions, ushort in_NumPositions)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0xAC3174", Offset = "0xAC3174", VA = "0xAC3174")]
	public static AKRESULT SetScalingFactor(GameObject in_GameObjectID, float in_fAttenuationScalingFactor)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0xAC321C", Offset = "0xAC321C", VA = "0xAC321C")]
	public static AKRESULT ClearBanks()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0xAC327C", Offset = "0xAC327C", VA = "0xAC327C")]
	public static AKRESULT SetBankLoadIOSettings(float in_fThroughput, sbyte in_priority)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0xAC32F4", Offset = "0xAC32F4", VA = "0xAC32F4")]
	public static AKRESULT LoadBank(string in_pszString, int in_memPoolId, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0xAC3374", Offset = "0xAC3374", VA = "0xAC3374")]
	public static AKRESULT LoadBank(uint in_bankID, int in_memPoolId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C3B")]
	[Address(RVA = "0xAAFBAC", Offset = "0xAAFBAC", VA = "0xAAFBAC")]
	public static AKRESULT LoadBank(IntPtr in_pInMemoryBankPtr, uint in_uInMemoryBankSize, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C3C")]
	[Address(RVA = "0xAC33EC", Offset = "0xAC33EC", VA = "0xAC33EC")]
	public static AKRESULT LoadBank(IntPtr in_pInMemoryBankPtr, uint in_uInMemoryBankSize, int in_uPoolForBankMedia, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C3D")]
	[Address(RVA = "0xAC347C", Offset = "0xAC347C", VA = "0xAC347C")]
	public static AKRESULT LoadBank(string in_pszString, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, int in_memPoolId, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C3E")]
	[Address(RVA = "0xAC3560", Offset = "0xAC3560", VA = "0xAC3560")]
	public static AKRESULT LoadBank(uint in_bankID, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, int in_memPoolId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C3F")]
	[Address(RVA = "0xAC363C", Offset = "0xAC363C", VA = "0xAC363C")]
	public static AKRESULT LoadBank(IntPtr in_pInMemoryBankPtr, uint in_uInMemoryBankSize, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0xAC3720", Offset = "0xAC3720", VA = "0xAC3720")]
	public static AKRESULT LoadBank(IntPtr in_pInMemoryBankPtr, uint in_uInMemoryBankSize, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, int in_uPoolForBankMedia, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C41")]
	[Address(RVA = "0xAC3814", Offset = "0xAC3814", VA = "0xAC3814")]
	public static AKRESULT UnloadBank(string in_pszString, IntPtr in_pInMemoryBankPtr, out int out_pMemPoolId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0xAC3894", Offset = "0xAC3894", VA = "0xAC3894")]
	public static AKRESULT UnloadBank(string in_pszString, IntPtr in_pInMemoryBankPtr)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0xAC390C", Offset = "0xAC390C", VA = "0xAC390C")]
	public static AKRESULT UnloadBank(uint in_bankID, IntPtr in_pInMemoryBankPtr, out int out_pMemPoolId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0xAAF950", Offset = "0xAAF950", VA = "0xAAF950")]
	public static AKRESULT UnloadBank(uint in_bankID, IntPtr in_pInMemoryBankPtr)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C45")]
	[Address(RVA = "0xAC398C", Offset = "0xAC398C", VA = "0xAC398C")]
	public static AKRESULT UnloadBank(string in_pszString, IntPtr in_pInMemoryBankPtr, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C46")]
	[Address(RVA = "0xAC3A68", Offset = "0xAC3A68", VA = "0xAC3A68")]
	public static AKRESULT UnloadBank(uint in_bankID, IntPtr in_pInMemoryBankPtr, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C47")]
	[Address(RVA = "0xAC3B44", Offset = "0xAC3B44", VA = "0xAC3B44")]
	public static void CancelBankCallbackCookie(object in_pCookie)
	{
	}

	[Token(Token = "0x6000C48")]
	[Address(RVA = "0xAC3BAC", Offset = "0xAC3BAC", VA = "0xAC3BAC")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, string in_pszString, AkBankContent in_uFlags)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C49")]
	[Address(RVA = "0xAC3C2C", Offset = "0xAC3C2C", VA = "0xAC3C2C")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, string in_pszString)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C4A")]
	[Address(RVA = "0xAC3CA4", Offset = "0xAC3CA4", VA = "0xAC3CA4")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, uint in_bankID, AkBankContent in_uFlags)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0xAC3D24", Offset = "0xAC3D24", VA = "0xAC3D24")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, uint in_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C4C")]
	[Address(RVA = "0xAC3D9C", Offset = "0xAC3D9C", VA = "0xAC3D9C")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, string in_pszString, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, AkBankContent in_uFlags)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C4D")]
	[Address(RVA = "0xAC3E80", Offset = "0xAC3E80", VA = "0xAC3E80")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, string in_pszString, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C4E")]
	[Address(RVA = "0xAC3F5C", Offset = "0xAC3F5C", VA = "0xAC3F5C")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, uint in_bankID, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie, AkBankContent in_uFlags)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0xAC4040", Offset = "0xAC4040", VA = "0xAC4040")]
	public static AKRESULT PrepareBank(AkPreparationType in_PreparationType, uint in_bankID, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C50")]
	[Address(RVA = "0xAC411C", Offset = "0xAC411C", VA = "0xAC411C")]
	public static AKRESULT ClearPreparedEvents()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C51")]
	[Address(RVA = "0xAC417C", Offset = "0xAC417C", VA = "0xAC417C")]
	public static AKRESULT PrepareEvent(AkPreparationType in_PreparationType, string[] in_ppszString, uint in_uNumEvent)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C52")]
	[Address(RVA = "0xAC442C", Offset = "0xAC442C", VA = "0xAC442C")]
	public static AKRESULT PrepareEvent(AkPreparationType in_PreparationType, uint[] in_pEventID, uint in_uNumEvent)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C53")]
	[Address(RVA = "0xAC44AC", Offset = "0xAC44AC", VA = "0xAC44AC")]
	public static AKRESULT PrepareEvent(AkPreparationType in_PreparationType, string[] in_ppszString, uint in_uNumEvent, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C54")]
	[Address(RVA = "0xAC47C0", Offset = "0xAC47C0", VA = "0xAC47C0")]
	public static AKRESULT PrepareEvent(AkPreparationType in_PreparationType, uint[] in_pEventID, uint in_uNumEvent, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C55")]
	[Address(RVA = "0xAC48A4", Offset = "0xAC48A4", VA = "0xAC48A4")]
	public static AKRESULT SetMedia(AkSourceSettingsArray in_pSourceSettings, uint in_uNumSourceSettings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C56")]
	[Address(RVA = "0xAC492C", Offset = "0xAC492C", VA = "0xAC492C")]
	public static AKRESULT UnsetMedia(AkSourceSettingsArray in_pSourceSettings, uint in_uNumSourceSettings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C57")]
	[Address(RVA = "0xAC49B4", Offset = "0xAC49B4", VA = "0xAC49B4")]
	public static AKRESULT PrepareGameSyncs(AkPreparationType in_PreparationType, AkGroupType in_eGameSyncType, string in_pszGroupName, string[] in_ppszGameSyncName, uint in_uNumGameSyncs)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C58")]
	[Address(RVA = "0xAC4C74", Offset = "0xAC4C74", VA = "0xAC4C74")]
	public static AKRESULT PrepareGameSyncs(AkPreparationType in_PreparationType, AkGroupType in_eGameSyncType, uint in_GroupID, uint[] in_paGameSyncID, uint in_uNumGameSyncs)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C59")]
	[Address(RVA = "0xAC4D0C", Offset = "0xAC4D0C", VA = "0xAC4D0C")]
	public static AKRESULT PrepareGameSyncs(AkPreparationType in_PreparationType, AkGroupType in_eGameSyncType, string in_pszGroupName, string[] in_ppszGameSyncName, uint in_uNumGameSyncs, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0xAC5038", Offset = "0xAC5038", VA = "0xAC5038")]
	public static AKRESULT PrepareGameSyncs(AkPreparationType in_PreparationType, AkGroupType in_eGameSyncType, uint in_GroupID, uint[] in_paGameSyncID, uint in_uNumGameSyncs, AkCallbackManager.BankCallback in_pfnBankCallback, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0xAA5220", Offset = "0xAA5220", VA = "0xAA5220")]
	public static AKRESULT AddListener(GameObject in_emitterGameObj, GameObject in_listenerGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0xAA5580", Offset = "0xAA5580", VA = "0xAA5580")]
	public static AKRESULT RemoveListener(GameObject in_emitterGameObj, GameObject in_listenerGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0xAC5134", Offset = "0xAC5134", VA = "0xAC5134")]
	public static AKRESULT AddDefaultListener(GameObject in_listenerGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0xAC51D4", Offset = "0xAC51D4", VA = "0xAC51D4")]
	public static AKRESULT RemoveDefaultListener(GameObject in_listenerGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0xAA5180", Offset = "0xAA5180", VA = "0xAA5180")]
	public static AKRESULT ResetListenersToDefault(GameObject in_emitterGameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C60")]
	[Address(RVA = "0xAC5274", Offset = "0xAC5274", VA = "0xAC5274")]
	public static AKRESULT SetListenerSpatialization(GameObject in_uListenerID, bool in_bSpatialized, AkChannelConfig in_channelConfig, float[] in_pVolumeOffsets)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0xAC5350", Offset = "0xAC5350", VA = "0xAC5350")]
	public static AKRESULT SetListenerSpatialization(GameObject in_uListenerID, bool in_bSpatialized, AkChannelConfig in_channelConfig)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C62")]
	[Address(RVA = "0xAC541C", Offset = "0xAC541C", VA = "0xAC541C")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C63")]
	[Address(RVA = "0xAC54FC", Offset = "0xAC54FC", VA = "0xAC54FC")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0xAC55D4", Offset = "0xAC55D4", VA = "0xAC55D4")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0xAC569C", Offset = "0xAC569C", VA = "0xAC569C")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C66")]
	[Address(RVA = "0xAC575C", Offset = "0xAC575C", VA = "0xAC575C")]
	public static AKRESULT SetRTPCValue(uint in_rtpcID, float in_value)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0xAC57D4", Offset = "0xAC57D4", VA = "0xAC57D4")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0xAC58B4", Offset = "0xAC58B4", VA = "0xAC58B4")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0xAC598C", Offset = "0xAC598C", VA = "0xAC598C")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value, GameObject in_gameObjectID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0xAC5A54", Offset = "0xAC5A54", VA = "0xAC5A54")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0xAC5B14", Offset = "0xAC5B14", VA = "0xAC5B14")]
	public static AKRESULT SetRTPCValue(string in_pszRtpcName, float in_value)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0xAC5B8C", Offset = "0xAC5B8C", VA = "0xAC5B8C")]
	public static AKRESULT SetRTPCValueByPlayingID(uint in_rtpcID, float in_value, uint in_playingID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0xAC5C34", Offset = "0xAC5C34", VA = "0xAC5C34")]
	public static AKRESULT SetRTPCValueByPlayingID(uint in_rtpcID, float in_value, uint in_playingID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0xAC5CD4", Offset = "0xAC5CD4", VA = "0xAC5CD4")]
	public static AKRESULT SetRTPCValueByPlayingID(uint in_rtpcID, float in_value, uint in_playingID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0xAC5D64", Offset = "0xAC5D64", VA = "0xAC5D64")]
	public static AKRESULT SetRTPCValueByPlayingID(uint in_rtpcID, float in_value, uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0xAC5DEC", Offset = "0xAC5DEC", VA = "0xAC5DEC")]
	public static AKRESULT SetRTPCValueByPlayingID(string in_pszRtpcName, float in_value, uint in_playingID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0xAC5E94", Offset = "0xAC5E94", VA = "0xAC5E94")]
	public static AKRESULT SetRTPCValueByPlayingID(string in_pszRtpcName, float in_value, uint in_playingID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0xAC5F34", Offset = "0xAC5F34", VA = "0xAC5F34")]
	public static AKRESULT SetRTPCValueByPlayingID(string in_pszRtpcName, float in_value, uint in_playingID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0xAC5FC4", Offset = "0xAC5FC4", VA = "0xAC5FC4")]
	public static AKRESULT SetRTPCValueByPlayingID(string in_pszRtpcName, float in_value, uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0xAC604C", Offset = "0xAC604C", VA = "0xAC604C")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0xAC611C", Offset = "0xAC611C", VA = "0xAC611C")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0xAC61E4", Offset = "0xAC61E4", VA = "0xAC61E4")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0xAC629C", Offset = "0xAC629C", VA = "0xAC629C")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0xAC634C", Offset = "0xAC634C", VA = "0xAC634C")]
	public static AKRESULT ResetRTPCValue(uint in_rtpcID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C79")]
	[Address(RVA = "0xAC63B4", Offset = "0xAC63B4", VA = "0xAC63B4")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve, bool in_bBypassInternalValueInterpolation)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0xAC6484", Offset = "0xAC6484", VA = "0xAC6484")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID, int in_uValueChangeDuration, AkCurveInterpolation in_eFadeCurve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C7B")]
	[Address(RVA = "0xAC654C", Offset = "0xAC654C", VA = "0xAC654C")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID, int in_uValueChangeDuration)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C7C")]
	[Address(RVA = "0xAC6604", Offset = "0xAC6604", VA = "0xAC6604")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C7D")]
	[Address(RVA = "0xAC66B4", Offset = "0xAC66B4", VA = "0xAC66B4")]
	public static AKRESULT ResetRTPCValue(string in_pszRtpcName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0xAC671C", Offset = "0xAC671C", VA = "0xAC671C")]
	public static AKRESULT SetSwitch(uint in_switchGroup, uint in_switchState, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C7F")]
	[Address(RVA = "0xAC67D4", Offset = "0xAC67D4", VA = "0xAC67D4")]
	public static AKRESULT SetSwitch(string in_pszSwitchGroup, string in_pszSwitchState, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C80")]
	[Address(RVA = "0xAC688C", Offset = "0xAC688C", VA = "0xAC688C")]
	public static AKRESULT PostTrigger(uint in_triggerID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C81")]
	[Address(RVA = "0xAC693C", Offset = "0xAC693C", VA = "0xAC693C")]
	public static AKRESULT PostTrigger(string in_pszTrigger, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C82")]
	[Address(RVA = "0xAC69EC", Offset = "0xAC69EC", VA = "0xAC69EC")]
	public static AKRESULT SetState(uint in_stateGroup, uint in_state)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C83")]
	[Address(RVA = "0xAC6A64", Offset = "0xAC6A64", VA = "0xAC6A64")]
	public static AKRESULT SetState(string in_pszStateGroup, string in_pszState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0xAC6ADC", Offset = "0xAC6ADC", VA = "0xAC6ADC")]
	public static AKRESULT SetGameObjectAuxSendValues(GameObject in_gameObjectID, AkAuxSendArray in_aAuxSendValues, uint in_uNumSendValues)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0xAC6BA4", Offset = "0xAC6BA4", VA = "0xAC6BA4")]
	public static AKRESULT SetGameObjectOutputBusVolume(GameObject in_emitterObjID, GameObject in_listenerObjID, float in_fControlValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0xAC6C7C", Offset = "0xAC6C7C", VA = "0xAC6C7C")]
	public static AKRESULT SetActorMixerEffect(uint in_audioNodeID, uint in_uFXIndex, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0xAC6CFC", Offset = "0xAC6CFC", VA = "0xAC6CFC")]
	public static AKRESULT SetBusEffect(uint in_audioNodeID, uint in_uFXIndex, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0xAC6D7C", Offset = "0xAC6D7C", VA = "0xAC6D7C")]
	public static AKRESULT SetBusEffect(string in_pszBusName, uint in_uFXIndex, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0xAC6DFC", Offset = "0xAC6DFC", VA = "0xAC6DFC")]
	public static AKRESULT SetMixer(uint in_audioNodeID, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C8A")]
	[Address(RVA = "0xAC6E74", Offset = "0xAC6E74", VA = "0xAC6E74")]
	public static AKRESULT SetMixer(string in_pszBusName, uint in_shareSetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C8B")]
	[Address(RVA = "0xAC6EEC", Offset = "0xAC6EEC", VA = "0xAC6EEC")]
	public static AKRESULT SetBusConfig(uint in_audioNodeID, AkChannelConfig in_channelConfig)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C8C")]
	[Address(RVA = "0xAC6F78", Offset = "0xAC6F78", VA = "0xAC6F78")]
	public static AKRESULT SetBusConfig(string in_pszBusName, AkChannelConfig in_channelConfig)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C8D")]
	[Address(RVA = "0xAC7004", Offset = "0xAC7004", VA = "0xAC7004")]
	public static AKRESULT SetObjectObstructionAndOcclusion(GameObject in_EmitterID, GameObject in_ListenerID, float in_fObstructionLevel, float in_fOcclusionLevel)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C8E")]
	[Address(RVA = "0xAC70E4", Offset = "0xAC70E4", VA = "0xAC70E4")]
	public static AKRESULT SetMultipleObstructionAndOcclusion(GameObject in_EmitterID, GameObject in_uListenerID, AkObstructionOcclusionValuesArray in_fObstructionOcclusionValues, uint in_uNumOcclusionObstruction)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C8F")]
	[Address(RVA = "0xAC71D4", Offset = "0xAC71D4", VA = "0xAC71D4")]
	public static AKRESULT StartOutputCapture(string in_CaptureFileName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C90")]
	[Address(RVA = "0xAC723C", Offset = "0xAC723C", VA = "0xAC723C")]
	public static AKRESULT StopOutputCapture()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C91")]
	[Address(RVA = "0xAC729C", Offset = "0xAC729C", VA = "0xAC729C")]
	public static AKRESULT AddOutputCaptureMarker(string in_MarkerText)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C92")]
	[Address(RVA = "0xAC7304", Offset = "0xAC7304", VA = "0xAC7304")]
	public static AKRESULT StartProfilerCapture(string in_CaptureFileName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C93")]
	[Address(RVA = "0xAC736C", Offset = "0xAC736C", VA = "0xAC736C")]
	public static AKRESULT StopProfilerCapture()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C94")]
	[Address(RVA = "0xAC73CC", Offset = "0xAC73CC", VA = "0xAC73CC")]
	public static AKRESULT RemoveOutput(ulong in_idOutput)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C95")]
	[Address(RVA = "0xAC7434", Offset = "0xAC7434", VA = "0xAC7434")]
	public static AKRESULT ReplaceOutput(AkOutputSettings in_Settings, ulong in_outputDeviceId, out ulong out_pOutputDeviceId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C96")]
	[Address(RVA = "0xAC74E0", Offset = "0xAC74E0", VA = "0xAC74E0")]
	public static AKRESULT ReplaceOutput(AkOutputSettings in_Settings, ulong in_outputDeviceId)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C97")]
	[Address(RVA = "0xAC7584", Offset = "0xAC7584", VA = "0xAC7584")]
	public static ulong GetOutputID(uint in_idShareset, uint in_idDevice)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000C98")]
	[Address(RVA = "0xAC75FC", Offset = "0xAC75FC", VA = "0xAC75FC")]
	public static ulong GetOutputID(string in_szShareSet, uint in_idDevice)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000C99")]
	[Address(RVA = "0xAC7674", Offset = "0xAC7674", VA = "0xAC7674")]
	public static AKRESULT SetBusDevice(uint in_idBus, uint in_idNewDevice)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C9A")]
	[Address(RVA = "0xAC76EC", Offset = "0xAC76EC", VA = "0xAC76EC")]
	public static AKRESULT SetBusDevice(string in_BusName, string in_DeviceName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C9B")]
	[Address(RVA = "0xAC7764", Offset = "0xAC7764", VA = "0xAC7764")]
	public static AKRESULT SetOutputVolume(ulong in_idOutput, float in_fVolume)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C9C")]
	[Address(RVA = "0xAC77DC", Offset = "0xAC77DC", VA = "0xAC77DC")]
	public static AKRESULT GetDeviceSpatialAudioSupport(uint in_idDevice)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C9D")]
	[Address(RVA = "0xAC7844", Offset = "0xAC7844", VA = "0xAC7844")]
	public static AKRESULT Suspend(bool in_bRenderAnyway)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C9E")]
	[Address(RVA = "0xAC78AC", Offset = "0xAC78AC", VA = "0xAC78AC")]
	public static AKRESULT Suspend()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000C9F")]
	[Address(RVA = "0xAC790C", Offset = "0xAC790C", VA = "0xAC790C")]
	public static AKRESULT WakeupFromSuspend()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CA0")]
	[Address(RVA = "0xAC796C", Offset = "0xAC796C", VA = "0xAC796C")]
	public static uint GetBufferTick()
	{
		return default(uint);
	}

	[Token(Token = "0x6000CA3")]
	[Address(RVA = "0xAC7A8C", Offset = "0xAC7A8C", VA = "0xAC7A8C")]
	public static AKRESULT GetPlayingSegmentInfo(uint in_PlayingID, AkSegmentInfo out_segmentInfo, bool in_bExtrapolate)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CA4")]
	[Address(RVA = "0xAC7B38", Offset = "0xAC7B38", VA = "0xAC7B38")]
	public static AKRESULT GetPlayingSegmentInfo(uint in_PlayingID, AkSegmentInfo out_segmentInfo)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CA5")]
	[Address(RVA = "0xAC7BDC", Offset = "0xAC7BDC", VA = "0xAC7BDC")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID, uint in_audioNodeID, bool in_bIsBus)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CA6")]
	[Address(RVA = "0xAC7CBC", Offset = "0xAC7CBC", VA = "0xAC7CBC")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID, uint in_audioNodeID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CA7")]
	[Address(RVA = "0xAC7D8C", Offset = "0xAC7D8C", VA = "0xAC7D8C")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CA8")]
	[Address(RVA = "0xAC7E54", Offset = "0xAC7E54", VA = "0xAC7E54")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0xAC7ED4", Offset = "0xAC7ED4", VA = "0xAC7ED4")]
	public static AKRESULT PostCode(AkMonitorErrorCode in_eError, AkMonitorErrorLevel in_eErrorLevel)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0xAC7F4C", Offset = "0xAC7F4C", VA = "0xAC7F4C")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID, uint in_audioNodeID, bool in_bIsBus)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0xAC802C", Offset = "0xAC802C", VA = "0xAC802C")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID, uint in_audioNodeID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0xAC80FC", Offset = "0xAC80FC", VA = "0xAC80FC")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID, GameObject in_gameObjID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0xAC81C4", Offset = "0xAC81C4", VA = "0xAC81C4")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel, uint in_playingID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CAE")]
	[Address(RVA = "0xAC8244", Offset = "0xAC8244", VA = "0xAC8244")]
	public static AKRESULT PostString(string in_pszError, AkMonitorErrorLevel in_eErrorLevel)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CAF")]
	[Address(RVA = "0xAC82BC", Offset = "0xAC82BC", VA = "0xAC82BC")]
	public static int GetTimeStamp()
	{
		return default(int);
	}

	[Token(Token = "0x6000CB0")]
	[Address(RVA = "0xAC831C", Offset = "0xAC831C", VA = "0xAC831C")]
	public static uint GetNumNonZeroBits(uint in_uWord)
	{
		return default(uint);
	}

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0xAC8384", Offset = "0xAC8384", VA = "0xAC8384")]
	public static void AkGetDefaultHighPriorityThreadProperties(AkThreadProperties out_threadProperties)
	{
	}

	[Token(Token = "0x6000CB2")]
	[Address(RVA = "0xAC8400", Offset = "0xAC8400", VA = "0xAC8400")]
	public static uint ResolveDialogueEvent(uint in_eventID, uint[] in_aArgumentValues, uint in_uNumArguments, uint in_idSequence)
	{
		return default(uint);
	}

	[Token(Token = "0x6000CB3")]
	[Address(RVA = "0xAC8490", Offset = "0xAC8490", VA = "0xAC8490")]
	public static uint ResolveDialogueEvent(uint in_eventID, uint[] in_aArgumentValues, uint in_uNumArguments)
	{
		return default(uint);
	}

	[Token(Token = "0x6000CB4")]
	[Address(RVA = "0xAC8510", Offset = "0xAC8510", VA = "0xAC8510")]
	public static AKRESULT GetDialogueEventCustomPropertyValue(uint in_eventID, uint in_uPropID, out int out_iValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CB5")]
	[Address(RVA = "0xAC8590", Offset = "0xAC8590", VA = "0xAC8590")]
	public static AKRESULT GetDialogueEventCustomPropertyValue(uint in_eventID, uint in_uPropID, out float out_fValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CB6")]
	[Address(RVA = "0xAC8610", Offset = "0xAC8610", VA = "0xAC8610")]
	public static AKRESULT GetPosition(GameObject in_GameObjectID, AkTransform out_rPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CB7")]
	[Address(RVA = "0xAC86C8", Offset = "0xAC86C8", VA = "0xAC86C8")]
	public static AKRESULT GetListenerPosition(GameObject in_uIndex, AkTransform out_rPosition)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CB8")]
	[Address(RVA = "0xAC878C", Offset = "0xAC878C", VA = "0xAC878C")]
	public static AKRESULT GetRTPCValue(uint in_rtpcID, GameObject in_gameObjectID, uint in_playingID, out float out_rValue, ref int io_rValueType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CB9")]
	[Address(RVA = "0xAC885C", Offset = "0xAC885C", VA = "0xAC885C")]
	public static AKRESULT GetRTPCValue(string in_pszRtpcName, GameObject in_gameObjectID, uint in_playingID, out float out_rValue, ref int io_rValueType)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CBA")]
	[Address(RVA = "0xAC892C", Offset = "0xAC892C", VA = "0xAC892C")]
	public static AKRESULT GetSwitch(uint in_switchGroup, GameObject in_gameObjectID, out uint out_rSwitchState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CBB")]
	[Address(RVA = "0xAC89E4", Offset = "0xAC89E4", VA = "0xAC89E4")]
	public static AKRESULT GetSwitch(string in_pstrSwitchGroupName, GameObject in_GameObj, out uint out_rSwitchState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0xAC8A94", Offset = "0xAC8A94", VA = "0xAC8A94")]
	public static AKRESULT GetState(uint in_stateGroup, out uint out_rState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CBD")]
	[Address(RVA = "0xAC8B0C", Offset = "0xAC8B0C", VA = "0xAC8B0C")]
	public static AKRESULT GetState(string in_pstrStateGroupName, out uint out_rState)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CBE")]
	[Address(RVA = "0xAC8B84", Offset = "0xAC8B84", VA = "0xAC8B84")]
	public static AKRESULT GetGameObjectAuxSendValues(GameObject in_gameObjectID, AkAuxSendArray out_paAuxSendValues, ref uint io_ruNumSendValues)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CBF")]
	[Address(RVA = "0xAC8C4C", Offset = "0xAC8C4C", VA = "0xAC8C4C")]
	public static AKRESULT GetGameObjectDryLevelValue(GameObject in_EmitterID, GameObject in_ListenerID, out float out_rfControlValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CC0")]
	[Address(RVA = "0xAC8D1C", Offset = "0xAC8D1C", VA = "0xAC8D1C")]
	public static AKRESULT GetObjectObstructionAndOcclusion(GameObject in_EmitterID, GameObject in_ListenerID, out float out_rfObstructionLevel, out float out_rfOcclusionLevel)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CC1")]
	[Address(RVA = "0xAC8DFC", Offset = "0xAC8DFC", VA = "0xAC8DFC")]
	public static AKRESULT QueryAudioObjectIDs(uint in_eventID, ref uint io_ruNumItems, AkObjectInfoArray out_aObjectInfos)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CC2")]
	[Address(RVA = "0xAC8E8C", Offset = "0xAC8E8C", VA = "0xAC8E8C")]
	public static AKRESULT QueryAudioObjectIDs(string in_pszEventName, ref uint io_ruNumItems, AkObjectInfoArray out_aObjectInfos)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CC3")]
	[Address(RVA = "0xAC8F1C", Offset = "0xAC8F1C", VA = "0xAC8F1C")]
	public static AKRESULT GetPositioningInfo(uint in_ObjectID, AkPositioningInfo out_rPositioningInfo)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CC4")]
	[Address(RVA = "0xAC8FC0", Offset = "0xAC8FC0", VA = "0xAC8FC0")]
	public static bool GetIsGameObjectActive(GameObject in_GameObjId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CC5")]
	[Address(RVA = "0xAC9060", Offset = "0xAC9060", VA = "0xAC9060")]
	public static float GetMaxRadius(GameObject in_GameObjId)
	{
		return default(float);
	}

	[Token(Token = "0x6000CC6")]
	[Address(RVA = "0xAC9100", Offset = "0xAC9100", VA = "0xAC9100")]
	public static uint GetEventIDFromPlayingID(uint in_playingID)
	{
		return default(uint);
	}

	[Token(Token = "0x6000CC7")]
	[Address(RVA = "0xAC9168", Offset = "0xAC9168", VA = "0xAC9168")]
	public static ulong GetGameObjectFromPlayingID(uint in_playingID)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000CC8")]
	[Address(RVA = "0xAC91D0", Offset = "0xAC91D0", VA = "0xAC91D0")]
	public static AKRESULT GetPlayingIDsFromGameObject(GameObject in_GameObjId, ref uint io_ruNumIDs, uint[] out_aPlayingIDs)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CC9")]
	[Address(RVA = "0xAC9288", Offset = "0xAC9288", VA = "0xAC9288")]
	public static AKRESULT GetCustomPropertyValue(uint in_ObjectID, uint in_uPropID, out int out_iValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CCA")]
	[Address(RVA = "0xAC9308", Offset = "0xAC9308", VA = "0xAC9308")]
	public static AKRESULT GetCustomPropertyValue(uint in_ObjectID, uint in_uPropID, out float out_fValue)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CCB")]
	[Address(RVA = "0xAC9388", Offset = "0xAC9388", VA = "0xAC9388")]
	public static void AK_SPEAKER_SETUP_FIX_LEFT_TO_CENTER(ref uint io_uChannelMask)
	{
	}

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0xAC93F0", Offset = "0xAC93F0", VA = "0xAC93F0")]
	public static void AK_SPEAKER_SETUP_FIX_REAR_TO_SIDE(ref uint io_uChannelMask)
	{
	}

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0xAC9458", Offset = "0xAC9458", VA = "0xAC9458")]
	public static void AK_SPEAKER_SETUP_CONVERT_TO_SUPPORTED(ref uint io_uChannelMask)
	{
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0xAC94C0", Offset = "0xAC94C0", VA = "0xAC94C0")]
	public static byte ChannelMaskToNumChannels(uint in_uChannelMask)
	{
		return default(byte);
	}

	[Token(Token = "0x6000CCF")]
	[Address(RVA = "0xAC9528", Offset = "0xAC9528", VA = "0xAC9528")]
	public static uint ChannelMaskFromNumChannels(uint in_uNumChannels)
	{
		return default(uint);
	}

	[Token(Token = "0x6000CD0")]
	[Address(RVA = "0xAC9590", Offset = "0xAC9590", VA = "0xAC9590")]
	public static byte ChannelBitToIndex(uint in_uChannelBit, uint in_uChannelMask)
	{
		return default(byte);
	}

	[Token(Token = "0x6000CD1")]
	[Address(RVA = "0xAC9608", Offset = "0xAC9608", VA = "0xAC9608")]
	public static bool HasSurroundChannels(uint in_uChannelMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CD2")]
	[Address(RVA = "0xAC9670", Offset = "0xAC9670", VA = "0xAC9670")]
	public static bool HasStrictlyOnePairOfSurroundChannels(uint in_uChannelMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CD3")]
	[Address(RVA = "0xAC96D8", Offset = "0xAC96D8", VA = "0xAC96D8")]
	public static bool HasSideAndRearChannels(uint in_uChannelMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CD4")]
	[Address(RVA = "0xAC9740", Offset = "0xAC9740", VA = "0xAC9740")]
	public static bool HasHeightChannels(uint in_uChannelMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CD5")]
	[Address(RVA = "0xAC97A8", Offset = "0xAC97A8", VA = "0xAC97A8")]
	public static uint BackToSideChannels(uint in_uChannelMask)
	{
		return default(uint);
	}

	[Token(Token = "0x6000CD6")]
	[Address(RVA = "0xAC9810", Offset = "0xAC9810", VA = "0xAC9810")]
	public static uint StdChannelIndexToDisplayIndex(AkChannelOrdering in_eOrdering, uint in_uChannelMask, uint in_uChannelIdx)
	{
		return default(uint);
	}

	[Token(Token = "0x6000CE0")]
	[Address(RVA = "0xAC9BF8", Offset = "0xAC9BF8", VA = "0xAC9BF8")]
	public static int GetPoolID()
	{
		return default(int);
	}

	[Token(Token = "0x6000CE1")]
	[Address(RVA = "0xAC9C58", Offset = "0xAC9C58", VA = "0xAC9C58")]
	public static AKRESULT RegisterEmitter(GameObject in_gameObjectID, AkEmitterSettings in_settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CE2")]
	[Address(RVA = "0xAC9D1C", Offset = "0xAC9D1C", VA = "0xAC9D1C")]
	public static AKRESULT UnregisterEmitter(GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CE3")]
	[Address(RVA = "0xAA4BB4", Offset = "0xAA4BB4", VA = "0xAA4BB4")]
	public static AKRESULT SetEmitterAuxSendValues(GameObject in_gameObjectID, AkAuxSendArray in_pAuxSends, uint in_uNumAux)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CE4")]
	[Address(RVA = "0xAC9DBC", Offset = "0xAC9DBC", VA = "0xAC9DBC")]
	public static AKRESULT SetImageSource(uint in_srcID, AkImageSourceSettings in_info, uint in_AuxBusID, ulong in_roomID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CE5")]
	[Address(RVA = "0xAC9EB8", Offset = "0xAC9EB8", VA = "0xAC9EB8")]
	public static AKRESULT SetImageSource(uint in_srcID, AkImageSourceSettings in_info, uint in_AuxBusID, ulong in_roomID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CE6")]
	[Address(RVA = "0xAC9F74", Offset = "0xAC9F74", VA = "0xAC9F74")]
	public static AKRESULT RemoveImageSource(uint in_srcID, uint in_AuxBusID, GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CE7")]
	[Address(RVA = "0xACA02C", Offset = "0xACA02C", VA = "0xACA02C")]
	public static AKRESULT RemoveImageSource(uint in_srcID, uint in_AuxBusID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CE8")]
	[Address(RVA = "0xACA0A4", Offset = "0xACA0A4", VA = "0xACA0A4")]
	public static AKRESULT RemoveGeometry(ulong in_SetID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0xACA10C", Offset = "0xACA10C", VA = "0xACA10C")]
	public static AKRESULT QueryReflectionPaths(GameObject in_gameObjectID, AkVector out_listenerPos, AkVector out_emitterPos, AkReflectionPathInfoArray out_aPaths, out uint io_uArraySize)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0xABB564", Offset = "0xABB564", VA = "0xABB564")]
	public static AKRESULT RemoveRoom(ulong in_RoomID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0xACA20C", Offset = "0xACA20C", VA = "0xACA20C")]
	public static AKRESULT RemovePortal(ulong in_PortalID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0xACA274", Offset = "0xACA274", VA = "0xACA274")]
	public static AKRESULT SetGameObjectInRoom(GameObject in_gameObjectID, ulong in_CurrentRoomID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0xACA324", Offset = "0xACA324", VA = "0xACA324")]
	public static AKRESULT SetEmitterObstructionAndOcclusion(GameObject in_gameObjectID, float in_fObstruction, float in_fOcclusion)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0xABDC98", Offset = "0xABDC98", VA = "0xABDC98")]
	public static AKRESULT SetPortalObstructionAndOcclusion(ulong in_PortalID, float in_fObstruction, float in_fOcclusion)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0xACA3DC", Offset = "0xACA3DC", VA = "0xACA3DC")]
	public static AKRESULT QueryWetDiffraction(ulong in_portal, out float out_wetDiffraction)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0xACA454", Offset = "0xACA454", VA = "0xACA454")]
	public static AKRESULT GetFastPathSettings(AkInitSettings in_settings, AkPlatformInitSettings in_pfSettings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0xAA97D4", Offset = "0xAA97D4", VA = "0xAA97D4")]
	public static void SetErrorLogger(AkLogger.ErrorLoggerInteropDelegate logger)
	{
	}

	[Token(Token = "0x6000CF2")]
	[Address(RVA = "0xAA99AC", Offset = "0xAA99AC", VA = "0xAA99AC")]
	public static void SetErrorLogger()
	{
	}

	[Token(Token = "0x6000CF3")]
	[Address(RVA = "0xACA524", Offset = "0xACA524", VA = "0xACA524")]
	public static void SetAudioInputCallbacks(AkAudioInputManager.AudioSamplesInteropDelegate getAudioSamples, AkAudioInputManager.AudioFormatInteropDelegate getAudioFormat)
	{
	}

	[Token(Token = "0x6000CF4")]
	[Address(RVA = "0xACA59C", Offset = "0xACA59C", VA = "0xACA59C")]
	public static AKRESULT Init(AkInitializationSettings settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CF5")]
	[Address(RVA = "0xACA630", Offset = "0xACA630", VA = "0xACA630")]
	public static AKRESULT InitSpatialAudio(AkSpatialAudioInitSettings settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CF6")]
	[Address(RVA = "0xACA6AC", Offset = "0xACA6AC", VA = "0xACA6AC")]
	public static AKRESULT InitCommunication(AkCommunicationSettings settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CF7")]
	[Address(RVA = "0xACA728", Offset = "0xACA728", VA = "0xACA728")]
	public static void Term()
	{
	}

	[Token(Token = "0x6000CF8")]
	[Address(RVA = "0xACA788", Offset = "0xACA788", VA = "0xACA788")]
	public static AKRESULT RegisterGameObjInternal(GameObject in_GameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CF9")]
	[Address(RVA = "0xACA820", Offset = "0xACA820", VA = "0xACA820")]
	public static AKRESULT UnregisterGameObjInternal(GameObject in_GameObj)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CFA")]
	[Address(RVA = "0xACA8B8", Offset = "0xACA8B8", VA = "0xACA8B8")]
	public static AKRESULT RegisterGameObjInternal_WithName(GameObject in_GameObj, string in_pszObjName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CFB")]
	[Address(RVA = "0xACA960", Offset = "0xACA960", VA = "0xACA960")]
	public static AKRESULT SetBasePath(string in_pszBasePath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CFC")]
	[Address(RVA = "0xACA9C8", Offset = "0xACA9C8", VA = "0xACA9C8")]
	public static AKRESULT SetCurrentLanguage(string in_pszAudioSrcPath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CFD")]
	[Address(RVA = "0xACAA30", Offset = "0xACAA30", VA = "0xACAA30")]
	public static AKRESULT LoadFilePackage(string in_pszFilePackageName, out uint out_uPackageID, int in_memPoolID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CFE")]
	[Address(RVA = "0xACAAB0", Offset = "0xACAAB0", VA = "0xACAAB0")]
	public static AKRESULT AddBasePath(string in_pszBasePath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000CFF")]
	[Address(RVA = "0xACAB18", Offset = "0xACAB18", VA = "0xACAB18")]
	public static AKRESULT SetGameName(string in_GameName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D00")]
	[Address(RVA = "0xACAB80", Offset = "0xACAB80", VA = "0xACAB80")]
	public static AKRESULT SetDecodedBankPath(string in_DecodedPath)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D01")]
	[Address(RVA = "0xACABE8", Offset = "0xACABE8", VA = "0xACABE8")]
	public static AKRESULT LoadAndDecodeBank(string in_pszString, bool in_bSaveDecodedBank, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D02")]
	[Address(RVA = "0xACAC68", Offset = "0xACAC68", VA = "0xACAC68")]
	public static AKRESULT LoadAndDecodeBankFromMemory(IntPtr in_BankData, uint in_BankDataSize, bool in_bSaveDecodedBank, string in_DecodedBankName, bool in_bIsLanguageSpecific, out uint out_bankID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0xAAF53C", Offset = "0xAAF53C", VA = "0xAAF53C")]
	public static string GetCurrentLanguage()
	{
		return null;
	}

	[Token(Token = "0x6000D04")]
	[Address(RVA = "0xACAD10", Offset = "0xACAD10", VA = "0xACAD10")]
	public static AKRESULT UnloadFilePackage(uint in_uPackageID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D05")]
	[Address(RVA = "0xACAD78", Offset = "0xACAD78", VA = "0xACAD78")]
	public static AKRESULT UnloadAllFilePackages()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D06")]
	[Address(RVA = "0xACADD8", Offset = "0xACADD8", VA = "0xACADD8")]
	public static AKRESULT SetObjectPosition(GameObject in_GameObjectID, float PosX, float PosY, float PosZ, float FrontX, float FrontY, float FrontZ, float TopX, float TopY, float TopZ)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D07")]
	[Address(RVA = "0xACAEE0", Offset = "0xACAEE0", VA = "0xACAEE0")]
	public static AKRESULT GetSourceMultiplePlayPositions(uint in_PlayingID, uint[] out_audioNodeID, uint[] out_mediaID, int[] out_msTime, ref uint io_pcPositions, bool in_bExtrapolate)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D08")]
	[Address(RVA = "0xAA52E8", Offset = "0xAA52E8", VA = "0xAA52E8")]
	public static AKRESULT SetListeners(GameObject in_emitterGameObj, ulong[] in_pListenerGameObjs, uint in_uNumListeners)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D09")]
	[Address(RVA = "0xACAF88", Offset = "0xACAF88", VA = "0xACAF88")]
	public static AKRESULT SetDefaultListeners(ulong[] in_pListenerObjs, uint in_uNumListeners)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D0A")]
	[Address(RVA = "0xACB000", Offset = "0xACB000", VA = "0xACB000")]
	public static AKRESULT AddOutput(AkOutputSettings in_Settings, out ulong out_pDeviceID, ulong[] in_pListenerIDs, uint in_uNumListeners)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D0B")]
	[Address(RVA = "0xACB0BC", Offset = "0xACB0BC", VA = "0xACB0BC")]
	public static void GetDefaultStreamSettings(AkStreamMgrSettings out_settings)
	{
	}

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0xACB138", Offset = "0xACB138", VA = "0xACB138")]
	public static void GetDefaultDeviceSettings(AkDeviceSettings out_settings)
	{
	}

	[Token(Token = "0x6000D0D")]
	[Address(RVA = "0xACB1B4", Offset = "0xACB1B4", VA = "0xACB1B4")]
	public static void GetDefaultMusicSettings(AkMusicSettings out_settings)
	{
	}

	[Token(Token = "0x6000D0E")]
	[Address(RVA = "0xACB248", Offset = "0xACB248", VA = "0xACB248")]
	public static void GetDefaultInitSettings(AkInitSettings out_settings)
	{
	}

	[Token(Token = "0x6000D0F")]
	[Address(RVA = "0xACB2DC", Offset = "0xACB2DC", VA = "0xACB2DC")]
	public static void GetDefaultPlatformInitSettings(AkPlatformInitSettings out_settings)
	{
	}

	[Token(Token = "0x6000D10")]
	[Address(RVA = "0xACB370", Offset = "0xACB370", VA = "0xACB370")]
	public static uint GetMajorMinorVersion()
	{
		return default(uint);
	}

	[Token(Token = "0x6000D11")]
	[Address(RVA = "0xACB3D0", Offset = "0xACB3D0", VA = "0xACB3D0")]
	public static uint GetSubminorBuildVersion()
	{
		return default(uint);
	}

	[Token(Token = "0x6000D12")]
	[Address(RVA = "0xACB430", Offset = "0xACB430", VA = "0xACB430")]
	public static AKRESULT QueryIndirectPaths(GameObject in_gameObjectID, AkPathParams arg1, AkReflectionPathInfoArray paths, uint numPaths)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D13")]
	[Address(RVA = "0xACB534", Offset = "0xACB534", VA = "0xACB534")]
	public static AKRESULT QueryDiffractionPaths(GameObject in_gameObjectID, AkPathParams arg1, AkDiffractionPathInfoArray paths, uint numPaths)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D14")]
	[Address(RVA = "0xABC994", Offset = "0xABC994", VA = "0xABC994")]
	public static AKRESULT SetRoomPortal(ulong in_PortalID, AkTransform Transform, AkVector Extent, bool bEnabled, ulong FrontRoom, ulong BackRoom)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D15")]
	[Address(RVA = "0xABB120", Offset = "0xABB120", VA = "0xABB120")]
	public static AKRESULT SetRoom(ulong in_RoomID, AkRoomParams in_roomParams, string in_pName)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D16")]
	[Address(RVA = "0xACB638", Offset = "0xACB638", VA = "0xACB638")]
	public static AKRESULT RegisterSpatialAudioListener(GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D17")]
	[Address(RVA = "0xACB6D8", Offset = "0xACB6D8", VA = "0xACB6D8")]
	public static AKRESULT UnregisterSpatialAudioListener(GameObject in_gameObjectID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D18")]
	[Address(RVA = "0xACB778", Offset = "0xACB778", VA = "0xACB778")]
	public static AKRESULT SetGeometry(ulong in_GeomSetID, AkTriangleArray Triangles, uint NumTriangles, AkVertexArray Vertices, uint NumVertices, AkAcousticSurfaceArray Surfaces, uint NumSurfaces, ulong RoomID, bool EnableDiffraction, bool EnableDiffractionOnBoundaryEdges)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D19")]
	[Address(RVA = "0xAAF224", Offset = "0xAAF224", VA = "0xAAF224")]
	public static string StringFromIntPtrString(IntPtr ptr)
	{
		return null;
	}

	[Token(Token = "0x6000D1A")]
	[Address(RVA = "0xACB8B0", Offset = "0xACB8B0", VA = "0xACB8B0")]
	public static string StringFromIntPtrWString(IntPtr ptr)
	{
		return null;
	}

	[Token(Token = "0x6000D1B")]
	[Address(RVA = "0xAA2D84", Offset = "0xAA2D84", VA = "0xAA2D84")]
	public static string StringFromIntPtrOSString(IntPtr ptr)
	{
		return null;
	}

	[Token(Token = "0x6000D1C")]
	[Address(RVA = "0xACB918", Offset = "0xACB918", VA = "0xACB918")]
	private static ulong InternalGameObjectHash(GameObject gameObject)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000D1E")]
	[Address(RVA = "0xAAE568", Offset = "0xAAE568", VA = "0xAAE568")]
	public static ulong GetAkGameObjectID(GameObject gameObject)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000D1F")]
	[Address(RVA = "0xACBA4C", Offset = "0xACBA4C", VA = "0xACBA4C")]
	public static AKRESULT RegisterGameObj(GameObject gameObject)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0xAA347C", Offset = "0xAA347C", VA = "0xAA347C")]
	public static AKRESULT RegisterGameObj(GameObject gameObject, string name)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0xAA3F1C", Offset = "0xAA3F1C", VA = "0xAA3F1C")]
	public static AKRESULT UnregisterGameObj(GameObject gameObject)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D22")]
	[Address(RVA = "0xACBC48", Offset = "0xACBC48", VA = "0xACBC48")]
	public static AKRESULT SetObjectPosition(GameObject gameObject, Transform transform)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D23")]
	[Address(RVA = "0xAA378C", Offset = "0xAA378C", VA = "0xAA378C")]
	public static AKRESULT SetObjectPosition(GameObject gameObject, Vector3 position, Vector3 forward, Vector3 up)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6000D24")]
	[Address(RVA = "0xACBDD4", Offset = "0xACBDD4", VA = "0xACBDD4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E1BC8", Offset = "0x7E1BC8")]
	public static uint PostEvent(uint eventId, GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, object cookie, uint numSources, AkExternalSourceInfo externalSources, uint playingId)
	{
		return default(uint);
	}

	[Token(Token = "0x6000D25")]
	[Address(RVA = "0xACBF18", Offset = "0xACBF18", VA = "0xACBF18")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E1C00", Offset = "0x7E1C00")]
	public static uint PostEvent(uint eventId, GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, object cookie, uint numSources, AkExternalSourceInfo externalSources)
	{
		return default(uint);
	}

	[Token(Token = "0x6000D26")]
	[Address(RVA = "0xACC098", Offset = "0xACC098", VA = "0xACC098")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E1C38", Offset = "0x7E1C38")]
	public static uint PostEvent(string eventName, GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, object cookie, uint numSources, AkExternalSourceInfo externalSources, uint playingId)
	{
		return default(uint);
	}

	[Token(Token = "0x6000D27")]
	[Address(RVA = "0xACC1DC", Offset = "0xACC1DC", VA = "0xACC1DC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E1C70", Offset = "0x7E1C70")]
	public static uint PostEvent(string eventName, GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, object cookie, uint numSources, AkExternalSourceInfo externalSources)
	{
		return default(uint);
	}

	[Token(Token = "0x6000D28")]
	[Address(RVA = "0xAAE5E4", Offset = "0xAAE5E4", VA = "0xAAE5E4")]
	public static void PreGameObjectAPICall(GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6000D29")]
	[Address(RVA = "0xACC35C", Offset = "0xACC35C", VA = "0xACC35C")]
	private static void PreGameObjectAPICallUserHook(GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6000D2A")]
	[Address(RVA = "0xACBAF8", Offset = "0xACBAF8", VA = "0xACBAF8")]
	private static void PostRegisterGameObjUserHook(AKRESULT result, GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6000D2B")]
	[Address(RVA = "0xACBBA0", Offset = "0xACBBA0", VA = "0xACBBA0")]
	private static void PostUnregisterGameObjUserHook(AKRESULT result, GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6000D2C")]
	[Address(RVA = "0xACC4A4", Offset = "0xACC4A4", VA = "0xACC4A4")]
	private static void AutoRegister(GameObject gameObject, ulong id)
	{
	}

	[Token(Token = "0x6000D2D")]
	[Address(RVA = "0xACC420", Offset = "0xACC420", VA = "0xACC420")]
	private static bool IsInRegisteredList(ulong id)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0xACC5BC", Offset = "0xACC5BC", VA = "0xACC5BC")]
	public static bool IsGameObjectRegistered(GameObject in_gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D2F")]
	[Address(RVA = "0xACC624", Offset = "0xACC624", VA = "0xACC624")]
	public AkSoundEngine()
	{
	}
}
[Token(Token = "0x2000151")]
internal class AkSoundEnginePINVOKE
{
	[Token(Token = "0x6000D31")]
	[Address(RVA = "0x14AB41C", Offset = "0x14AB41C", VA = "0x14AB41C")]
	static AkSoundEnginePINVOKE()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000D32")]
	[Address(RVA = "0x14AB420", Offset = "0x14AB420", VA = "0x14AB420")]
	public static extern uint CSharp_AK_SOUNDBANK_VERSION_get();

	[PreserveSig]
	[Token(Token = "0x6000D33")]
	[Address(RVA = "0x14AB4A8", Offset = "0x14AB4A8", VA = "0x14AB4A8")]
	public static extern void CSharp_AkAudioSettings_uNumSamplesPerFrame_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D34")]
	[Address(RVA = "0x14AB550", Offset = "0x14AB550", VA = "0x14AB550")]
	public static extern uint CSharp_AkAudioSettings_uNumSamplesPerFrame_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D35")]
	[Address(RVA = "0x14AB5E8", Offset = "0x14AB5E8", VA = "0x14AB5E8")]
	public static extern void CSharp_AkAudioSettings_uNumSamplesPerSecond_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D36")]
	[Address(RVA = "0x14AB690", Offset = "0x14AB690", VA = "0x14AB690")]
	public static extern uint CSharp_AkAudioSettings_uNumSamplesPerSecond_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D37")]
	[Address(RVA = "0x14AB728", Offset = "0x14AB728", VA = "0x14AB728")]
	public static extern IntPtr CSharp_new_AkAudioSettings();

	[PreserveSig]
	[Token(Token = "0x6000D38")]
	[Address(RVA = "0x14AB7B0", Offset = "0x14AB7B0", VA = "0x14AB7B0")]
	public static extern void CSharp_delete_AkAudioSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D39")]
	[Address(RVA = "0x14AB848", Offset = "0x14AB848", VA = "0x14AB848")]
	public static extern void CSharp_AkVector_Zero(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0x14AB8E0", Offset = "0x14AB8E0", VA = "0x14AB8E0")]
	public static extern void CSharp_AkVector_X_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D3B")]
	[Address(RVA = "0x14AB988", Offset = "0x14AB988", VA = "0x14AB988")]
	public static extern float CSharp_AkVector_X_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D3C")]
	[Address(RVA = "0x14ABA20", Offset = "0x14ABA20", VA = "0x14ABA20")]
	public static extern void CSharp_AkVector_Y_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D3D")]
	[Address(RVA = "0x14ABAC8", Offset = "0x14ABAC8", VA = "0x14ABAC8")]
	public static extern float CSharp_AkVector_Y_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D3E")]
	[Address(RVA = "0x14ABB60", Offset = "0x14ABB60", VA = "0x14ABB60")]
	public static extern void CSharp_AkVector_Z_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D3F")]
	[Address(RVA = "0x14ABC08", Offset = "0x14ABC08", VA = "0x14ABC08")]
	public static extern float CSharp_AkVector_Z_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D40")]
	[Address(RVA = "0x14ABCA0", Offset = "0x14ABCA0", VA = "0x14ABCA0")]
	public static extern IntPtr CSharp_new_AkVector();

	[PreserveSig]
	[Token(Token = "0x6000D41")]
	[Address(RVA = "0x14ABD28", Offset = "0x14ABD28", VA = "0x14ABD28")]
	public static extern void CSharp_delete_AkVector(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D42")]
	[Address(RVA = "0x14ABDC0", Offset = "0x14ABDC0", VA = "0x14ABDC0")]
	public static extern IntPtr CSharp_AkTransform_Position(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D43")]
	[Address(RVA = "0x14ABE58", Offset = "0x14ABE58", VA = "0x14ABE58")]
	public static extern IntPtr CSharp_AkTransform_OrientationFront(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D44")]
	[Address(RVA = "0x14ABEF0", Offset = "0x14ABEF0", VA = "0x14ABEF0")]
	public static extern IntPtr CSharp_AkTransform_OrientationTop(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D45")]
	[Address(RVA = "0x14ABF88", Offset = "0x14ABF88", VA = "0x14ABF88")]
	public static extern void CSharp_AkTransform_Set__SWIG_0(IntPtr jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6000D46")]
	[Address(RVA = "0x14AC048", Offset = "0x14AC048", VA = "0x14AC048")]
	public static extern void CSharp_AkTransform_Set__SWIG_1(IntPtr jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10);

	[PreserveSig]
	[Token(Token = "0x6000D47")]
	[Address(RVA = "0x14AC148", Offset = "0x14AC148", VA = "0x14AC148")]
	public static extern void CSharp_AkTransform_SetPosition__SWIG_0(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D48")]
	[Address(RVA = "0x14AC1F0", Offset = "0x14AC1F0", VA = "0x14AC1F0")]
	public static extern void CSharp_AkTransform_SetPosition__SWIG_1(IntPtr jarg1, float jarg2, float jarg3, float jarg4);

	[PreserveSig]
	[Token(Token = "0x6000D49")]
	[Address(RVA = "0x14AC2B0", Offset = "0x14AC2B0", VA = "0x14AC2B0")]
	public static extern void CSharp_AkTransform_SetOrientation__SWIG_0(IntPtr jarg1, IntPtr jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x6000D4A")]
	[Address(RVA = "0x14AC360", Offset = "0x14AC360", VA = "0x14AC360")]
	public static extern void CSharp_AkTransform_SetOrientation__SWIG_1(IntPtr jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);

	[PreserveSig]
	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0x14AC440", Offset = "0x14AC440", VA = "0x14AC440")]
	public static extern IntPtr CSharp_new_AkTransform();

	[PreserveSig]
	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0x14AC4C8", Offset = "0x14AC4C8", VA = "0x14AC4C8")]
	public static extern void CSharp_delete_AkTransform(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D4D")]
	[Address(RVA = "0x14AC560", Offset = "0x14AC560", VA = "0x14AC560")]
	public static extern void CSharp_AkObstructionOcclusionValues_occlusion_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0x14AC608", Offset = "0x14AC608", VA = "0x14AC608")]
	public static extern float CSharp_AkObstructionOcclusionValues_occlusion_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D4F")]
	[Address(RVA = "0x14AC6A0", Offset = "0x14AC6A0", VA = "0x14AC6A0")]
	public static extern void CSharp_AkObstructionOcclusionValues_obstruction_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D50")]
	[Address(RVA = "0x14AC748", Offset = "0x14AC748", VA = "0x14AC748")]
	public static extern float CSharp_AkObstructionOcclusionValues_obstruction_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D51")]
	[Address(RVA = "0x14AC7E0", Offset = "0x14AC7E0", VA = "0x14AC7E0")]
	public static extern void CSharp_AkObstructionOcclusionValues_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D52")]
	[Address(RVA = "0x14AC878", Offset = "0x14AC878", VA = "0x14AC878")]
	public static extern int CSharp_AkObstructionOcclusionValues_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6000D53")]
	[Address(RVA = "0x14AC900", Offset = "0x14AC900", VA = "0x14AC900")]
	public static extern void CSharp_AkObstructionOcclusionValues_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D54")]
	[Address(RVA = "0x14AC9A8", Offset = "0x14AC9A8", VA = "0x14AC9A8")]
	public static extern IntPtr CSharp_new_AkObstructionOcclusionValues();

	[PreserveSig]
	[Token(Token = "0x6000D55")]
	[Address(RVA = "0x14ACA30", Offset = "0x14ACA30", VA = "0x14ACA30")]
	public static extern void CSharp_delete_AkObstructionOcclusionValues(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D56")]
	[Address(RVA = "0x14ACAC8", Offset = "0x14ACAC8", VA = "0x14ACAC8")]
	public static extern void CSharp_AkChannelEmitter_position_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D57")]
	[Address(RVA = "0x14ACB70", Offset = "0x14ACB70", VA = "0x14ACB70")]
	public static extern IntPtr CSharp_AkChannelEmitter_position_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D58")]
	[Address(RVA = "0x14ACC08", Offset = "0x14ACC08", VA = "0x14ACC08")]
	public static extern void CSharp_AkChannelEmitter_uInputChannels_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D59")]
	[Address(RVA = "0x14ACCB0", Offset = "0x14ACCB0", VA = "0x14ACCB0")]
	public static extern uint CSharp_AkChannelEmitter_uInputChannels_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D5A")]
	[Address(RVA = "0x14ACD48", Offset = "0x14ACD48", VA = "0x14ACD48")]
	public static extern void CSharp_delete_AkChannelEmitter(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0x14ACDE0", Offset = "0x14ACDE0", VA = "0x14ACDE0")]
	public static extern void CSharp_AkAuxSendValue_listenerID_set(IntPtr jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0x14ACE88", Offset = "0x14ACE88", VA = "0x14ACE88")]
	public static extern ulong CSharp_AkAuxSendValue_listenerID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0x14ACF20", Offset = "0x14ACF20", VA = "0x14ACF20")]
	public static extern void CSharp_AkAuxSendValue_auxBusID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0x14ACFC8", Offset = "0x14ACFC8", VA = "0x14ACFC8")]
	public static extern uint CSharp_AkAuxSendValue_auxBusID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0x14AD060", Offset = "0x14AD060", VA = "0x14AD060")]
	public static extern void CSharp_AkAuxSendValue_fControlValue_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D60")]
	[Address(RVA = "0x14AD108", Offset = "0x14AD108", VA = "0x14AD108")]
	public static extern float CSharp_AkAuxSendValue_fControlValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D61")]
	[Address(RVA = "0x14AD1A0", Offset = "0x14AD1A0", VA = "0x14AD1A0")]
	public static extern void CSharp_AkAuxSendValue_Set(IntPtr jarg1, ulong jarg2, uint jarg3, float jarg4);

	[PreserveSig]
	[Token(Token = "0x6000D62")]
	[Address(RVA = "0x14AD260", Offset = "0x14AD260", VA = "0x14AD260")]
	public static extern bool CSharp_AkAuxSendValue_IsSame(IntPtr jarg1, ulong jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000D63")]
	[Address(RVA = "0x14AD318", Offset = "0x14AD318", VA = "0x14AD318")]
	public static extern int CSharp_AkAuxSendValue_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6000D64")]
	[Address(RVA = "0x14AD3A0", Offset = "0x14AD3A0", VA = "0x14AD3A0")]
	public static extern void CSharp_delete_AkAuxSendValue(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D65")]
	[Address(RVA = "0x14AD438", Offset = "0x14AD438", VA = "0x14AD438")]
	public static extern IntPtr CSharp_new_AkRamp__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6000D66")]
	[Address(RVA = "0x14AD4C0", Offset = "0x14AD4C0", VA = "0x14AD4C0")]
	public static extern IntPtr CSharp_new_AkRamp__SWIG_1(float jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D67")]
	[Address(RVA = "0x14AD564", Offset = "0x14AD564", VA = "0x14AD564")]
	public static extern void CSharp_AkRamp_fPrev_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D68")]
	[Address(RVA = "0x14AD60C", Offset = "0x14AD60C", VA = "0x14AD60C")]
	public static extern float CSharp_AkRamp_fPrev_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D69")]
	[Address(RVA = "0x14AD6A4", Offset = "0x14AD6A4", VA = "0x14AD6A4")]
	public static extern void CSharp_AkRamp_fNext_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0x14AD74C", Offset = "0x14AD74C", VA = "0x14AD74C")]
	public static extern float CSharp_AkRamp_fNext_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D6B")]
	[Address(RVA = "0x14AD7E4", Offset = "0x14AD7E4", VA = "0x14AD7E4")]
	public static extern void CSharp_delete_AkRamp(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0x14AD87C", Offset = "0x14AD87C", VA = "0x14AD87C")]
	public static extern ushort CSharp_AK_INT_get();

	[PreserveSig]
	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0x14AD904", Offset = "0x14AD904", VA = "0x14AD904")]
	public static extern ushort CSharp_AK_FLOAT_get();

	[PreserveSig]
	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0x14AD98C", Offset = "0x14AD98C", VA = "0x14AD98C")]
	public static extern byte CSharp_AK_INTERLEAVED_get();

	[PreserveSig]
	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0x14ADA14", Offset = "0x14ADA14", VA = "0x14ADA14")]
	public static extern byte CSharp_AK_NONINTERLEAVED_get();

	[PreserveSig]
	[Token(Token = "0x6000D70")]
	[Address(RVA = "0x14ADA9C", Offset = "0x14ADA9C", VA = "0x14ADA9C")]
	public static extern uint CSharp_AK_LE_NATIVE_BITSPERSAMPLE_get();

	[PreserveSig]
	[Token(Token = "0x6000D71")]
	[Address(RVA = "0x14ADB24", Offset = "0x14ADB24", VA = "0x14ADB24")]
	public static extern uint CSharp_AK_LE_NATIVE_SAMPLETYPE_get();

	[PreserveSig]
	[Token(Token = "0x6000D72")]
	[Address(RVA = "0x14ADBAC", Offset = "0x14ADBAC", VA = "0x14ADBAC")]
	public static extern uint CSharp_AK_LE_NATIVE_INTERLEAVE_get();

	[PreserveSig]
	[Token(Token = "0x6000D73")]
	[Address(RVA = "0x14ADC34", Offset = "0x14ADC34", VA = "0x14ADC34")]
	public static extern void CSharp_AkAudioFormat_uSampleRate_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D74")]
	[Address(RVA = "0x14ADCDC", Offset = "0x14ADCDC", VA = "0x14ADCDC")]
	public static extern uint CSharp_AkAudioFormat_uSampleRate_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D75")]
	[Address(RVA = "0x14ADD74", Offset = "0x14ADD74", VA = "0x14ADD74")]
	public static extern void CSharp_AkAudioFormat_channelConfig_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D76")]
	[Address(RVA = "0x14ADE1C", Offset = "0x14ADE1C", VA = "0x14ADE1C")]
	public static extern IntPtr CSharp_AkAudioFormat_channelConfig_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D77")]
	[Address(RVA = "0x14ADEB4", Offset = "0x14ADEB4", VA = "0x14ADEB4")]
	public static extern void CSharp_AkAudioFormat_uBitsPerSample_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D78")]
	[Address(RVA = "0x14ADF5C", Offset = "0x14ADF5C", VA = "0x14ADF5C")]
	public static extern uint CSharp_AkAudioFormat_uBitsPerSample_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D79")]
	[Address(RVA = "0x14ADFF4", Offset = "0x14ADFF4", VA = "0x14ADFF4")]
	public static extern void CSharp_AkAudioFormat_uBlockAlign_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0x14AE09C", Offset = "0x14AE09C", VA = "0x14AE09C")]
	public static extern uint CSharp_AkAudioFormat_uBlockAlign_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0x14AE134", Offset = "0x14AE134", VA = "0x14AE134")]
	public static extern void CSharp_AkAudioFormat_uTypeID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0x14AE1DC", Offset = "0x14AE1DC", VA = "0x14AE1DC")]
	public static extern uint CSharp_AkAudioFormat_uTypeID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0x14AE274", Offset = "0x14AE274", VA = "0x14AE274")]
	public static extern void CSharp_AkAudioFormat_uInterleaveID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D7E")]
	[Address(RVA = "0x14AE31C", Offset = "0x14AE31C", VA = "0x14AE31C")]
	public static extern uint CSharp_AkAudioFormat_uInterleaveID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0x14AE3B4", Offset = "0x14AE3B4", VA = "0x14AE3B4")]
	public static extern uint CSharp_AkAudioFormat_GetNumChannels(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D80")]
	[Address(RVA = "0x14AE44C", Offset = "0x14AE44C", VA = "0x14AE44C")]
	public static extern uint CSharp_AkAudioFormat_GetBitsPerSample(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D81")]
	[Address(RVA = "0x14AE4E4", Offset = "0x14AE4E4", VA = "0x14AE4E4")]
	public static extern uint CSharp_AkAudioFormat_GetBlockAlign(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D82")]
	[Address(RVA = "0x14AE57C", Offset = "0x14AE57C", VA = "0x14AE57C")]
	public static extern uint CSharp_AkAudioFormat_GetTypeID(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D83")]
	[Address(RVA = "0x14AE614", Offset = "0x14AE614", VA = "0x14AE614")]
	public static extern uint CSharp_AkAudioFormat_GetInterleaveID(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D84")]
	[Address(RVA = "0x14AE6AC", Offset = "0x14AE6AC", VA = "0x14AE6AC")]
	public static extern void CSharp_AkAudioFormat_SetAll(IntPtr jarg1, uint jarg2, IntPtr jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7);

	[PreserveSig]
	[Token(Token = "0x6000D85")]
	[Address(RVA = "0x14AE78C", Offset = "0x14AE78C", VA = "0x14AE78C")]
	public static extern bool CSharp_AkAudioFormat_IsChannelConfigSupported(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D86")]
	[Address(RVA = "0x14AE82C", Offset = "0x14AE82C", VA = "0x14AE82C")]
	public static extern IntPtr CSharp_new_AkAudioFormat();

	[PreserveSig]
	[Token(Token = "0x6000D87")]
	[Address(RVA = "0x14AE8B4", Offset = "0x14AE8B4", VA = "0x14AE8B4")]
	public static extern void CSharp_delete_AkAudioFormat(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D88")]
	[Address(RVA = "0x14AE94C", Offset = "0x14AE94C", VA = "0x14AE94C")]
	public static extern void CSharp_AkIterator_pItem_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D89")]
	[Address(RVA = "0x14AE9F4", Offset = "0x14AE9F4", VA = "0x14AE9F4")]
	public static extern IntPtr CSharp_AkIterator_pItem_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D8A")]
	[Address(RVA = "0x14AEA8C", Offset = "0x14AEA8C", VA = "0x14AEA8C")]
	public static extern IntPtr CSharp_AkIterator_NextIter(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D8B")]
	[Address(RVA = "0x14AEB24", Offset = "0x14AEB24", VA = "0x14AEB24")]
	public static extern IntPtr CSharp_AkIterator_PrevIter(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D8C")]
	[Address(RVA = "0x14AEBBC", Offset = "0x14AEBBC", VA = "0x14AEBBC")]
	public static extern IntPtr CSharp_AkIterator_GetItem(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D8D")]
	[Address(RVA = "0x14AEC54", Offset = "0x14AEC54", VA = "0x14AEC54")]
	public static extern bool CSharp_AkIterator_IsEqualTo(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D8E")]
	[Address(RVA = "0x14AED04", Offset = "0x14AED04", VA = "0x14AED04")]
	public static extern bool CSharp_AkIterator_IsDifferentFrom(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D8F")]
	[Address(RVA = "0x14AEDB4", Offset = "0x14AEDB4", VA = "0x14AEDB4")]
	public static extern IntPtr CSharp_new_AkIterator();

	[PreserveSig]
	[Token(Token = "0x6000D90")]
	[Address(RVA = "0x14AEE3C", Offset = "0x14AEE3C", VA = "0x14AEE3C")]
	public static extern void CSharp_delete_AkIterator(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D91")]
	[Address(RVA = "0x14AEED4", Offset = "0x14AEED4", VA = "0x14AEED4")]
	public static extern int CSharp__ArrayPoolDefault_Get();

	[PreserveSig]
	[Token(Token = "0x6000D92")]
	[Address(RVA = "0x14AEF5C", Offset = "0x14AEF5C", VA = "0x14AEF5C")]
	public static extern IntPtr CSharp_new__ArrayPoolDefault();

	[PreserveSig]
	[Token(Token = "0x6000D93")]
	[Address(RVA = "0x14AEFE4", Offset = "0x14AEFE4", VA = "0x14AEFE4")]
	public static extern void CSharp_delete__ArrayPoolDefault(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D94")]
	[Address(RVA = "0x14AF07C", Offset = "0x14AF07C", VA = "0x14AF07C")]
	public static extern int CSharp__ArrayPoolLEngineDefault_Get();

	[PreserveSig]
	[Token(Token = "0x6000D95")]
	[Address(RVA = "0x14AF104", Offset = "0x14AF104", VA = "0x14AF104")]
	public static extern IntPtr CSharp_new__ArrayPoolLEngineDefault();

	[PreserveSig]
	[Token(Token = "0x6000D96")]
	[Address(RVA = "0x14AF18C", Offset = "0x14AF18C", VA = "0x14AF18C")]
	public static extern void CSharp_delete__ArrayPoolLEngineDefault(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D97")]
	[Address(RVA = "0x14AF224", Offset = "0x14AF224", VA = "0x14AF224")]
	public static extern IntPtr CSharp_new_AkPlaylistItem__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6000D98")]
	[Address(RVA = "0x14AF2AC", Offset = "0x14AF2AC", VA = "0x14AF2AC")]
	public static extern IntPtr CSharp_new_AkPlaylistItem__SWIG_1(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D99")]
	[Address(RVA = "0x14AF344", Offset = "0x14AF344", VA = "0x14AF344")]
	public static extern void CSharp_delete_AkPlaylistItem(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0x14AF3DC", Offset = "0x14AF3DC", VA = "0x14AF3DC")]
	public static extern IntPtr CSharp_AkPlaylistItem_Assign(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0x14AF484", Offset = "0x14AF484", VA = "0x14AF484")]
	public static extern bool CSharp_AkPlaylistItem_IsEqualTo(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0x14AF534", Offset = "0x14AF534", VA = "0x14AF534")]
	public static extern int CSharp_AkPlaylistItem_SetExternalSources(IntPtr jarg1, uint jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0x14AF5E4", Offset = "0x14AF5E4", VA = "0x14AF5E4")]
	public static extern void CSharp_AkPlaylistItem_audioNodeID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000D9E")]
	[Address(RVA = "0x14AF68C", Offset = "0x14AF68C", VA = "0x14AF68C")]
	public static extern uint CSharp_AkPlaylistItem_audioNodeID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000D9F")]
	[Address(RVA = "0x14AF724", Offset = "0x14AF724", VA = "0x14AF724")]
	public static extern void CSharp_AkPlaylistItem_msDelay_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0x14AF7CC", Offset = "0x14AF7CC", VA = "0x14AF7CC")]
	public static extern int CSharp_AkPlaylistItem_msDelay_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0x14AF864", Offset = "0x14AF864", VA = "0x14AF864")]
	public static extern void CSharp_AkPlaylistItem_pCustomInfo_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0x14AF90C", Offset = "0x14AF90C", VA = "0x14AF90C")]
	public static extern IntPtr CSharp_AkPlaylistItem_pCustomInfo_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0x14AF9A4", Offset = "0x14AF9A4", VA = "0x14AF9A4")]
	public static extern IntPtr CSharp_new_AkPlaylistArray();

	[PreserveSig]
	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0x14AFA2C", Offset = "0x14AFA2C", VA = "0x14AFA2C")]
	public static extern void CSharp_delete_AkPlaylistArray(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0x14AFAC4", Offset = "0x14AFAC4", VA = "0x14AFAC4")]
	public static extern IntPtr CSharp_AkPlaylistArray_Begin(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0x14AFB5C", Offset = "0x14AFB5C", VA = "0x14AFB5C")]
	public static extern IntPtr CSharp_AkPlaylistArray_End(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0x14AFBF4", Offset = "0x14AFBF4", VA = "0x14AFBF4")]
	public static extern IntPtr CSharp_AkPlaylistArray_FindEx(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0x14AFC9C", Offset = "0x14AFC9C", VA = "0x14AFC9C")]
	public static extern IntPtr CSharp_AkPlaylistArray_Erase__SWIG_0(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DA9")]
	[Address(RVA = "0x14AFD44", Offset = "0x14AFD44", VA = "0x14AFD44")]
	public static extern void CSharp_AkPlaylistArray_Erase__SWIG_1(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0x14AFDEC", Offset = "0x14AFDEC", VA = "0x14AFDEC")]
	public static extern IntPtr CSharp_AkPlaylistArray_EraseSwap(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0x14AFE94", Offset = "0x14AFE94", VA = "0x14AFE94")]
	public static extern int CSharp_AkPlaylistArray_Reserve(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0x14AFF3C", Offset = "0x14AFF3C", VA = "0x14AFF3C")]
	public static extern uint CSharp_AkPlaylistArray_Reserved(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DAD")]
	[Address(RVA = "0x14AFFD4", Offset = "0x14AFFD4", VA = "0x14AFFD4")]
	public static extern void CSharp_AkPlaylistArray_Term(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DAE")]
	[Address(RVA = "0x14B006C", Offset = "0x14B006C", VA = "0x14B006C")]
	public static extern uint CSharp_AkPlaylistArray_Length(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DAF")]
	[Address(RVA = "0x14B0104", Offset = "0x14B0104", VA = "0x14B0104")]
	public static extern IntPtr CSharp_AkPlaylistArray_Data(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DB0")]
	[Address(RVA = "0x14B019C", Offset = "0x14B019C", VA = "0x14B019C")]
	public static extern bool CSharp_AkPlaylistArray_IsEmpty(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DB1")]
	[Address(RVA = "0x14B023C", Offset = "0x14B023C", VA = "0x14B023C")]
	public static extern IntPtr CSharp_AkPlaylistArray_Exists(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DB2")]
	[Address(RVA = "0x14B02E4", Offset = "0x14B02E4", VA = "0x14B02E4")]
	public static extern IntPtr CSharp_AkPlaylistArray_AddLast__SWIG_0(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DB3")]
	[Address(RVA = "0x14B037C", Offset = "0x14B037C", VA = "0x14B037C")]
	public static extern IntPtr CSharp_AkPlaylistArray_AddLast__SWIG_1(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DB4")]
	[Address(RVA = "0x14B0424", Offset = "0x14B0424", VA = "0x14B0424")]
	public static extern IntPtr CSharp_AkPlaylistArray_Last(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DB5")]
	[Address(RVA = "0x14B04BC", Offset = "0x14B04BC", VA = "0x14B04BC")]
	public static extern void CSharp_AkPlaylistArray_RemoveLast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DB6")]
	[Address(RVA = "0x14B0554", Offset = "0x14B0554", VA = "0x14B0554")]
	public static extern int CSharp_AkPlaylistArray_Remove(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0x14B05FC", Offset = "0x14B05FC", VA = "0x14B05FC")]
	public static extern int CSharp_AkPlaylistArray_RemoveSwap(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0x14B06A4", Offset = "0x14B06A4", VA = "0x14B06A4")]
	public static extern void CSharp_AkPlaylistArray_RemoveAll(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0x14B073C", Offset = "0x14B073C", VA = "0x14B073C")]
	public static extern IntPtr CSharp_AkPlaylistArray_ItemAtIndex(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0x14B07E4", Offset = "0x14B07E4", VA = "0x14B07E4")]
	public static extern IntPtr CSharp_AkPlaylistArray_Insert(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0x14B088C", Offset = "0x14B088C", VA = "0x14B088C")]
	public static extern bool CSharp_AkPlaylistArray_GrowArray__SWIG_0(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0x14B093C", Offset = "0x14B093C", VA = "0x14B093C")]
	public static extern bool CSharp_AkPlaylistArray_GrowArray__SWIG_1(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0x14B09DC", Offset = "0x14B09DC", VA = "0x14B09DC")]
	public static extern bool CSharp_AkPlaylistArray_Resize(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0x14B0A8C", Offset = "0x14B0A8C", VA = "0x14B0A8C")]
	public static extern void CSharp_AkPlaylistArray_Transfer(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0x14B0B34", Offset = "0x14B0B34", VA = "0x14B0B34")]
	public static extern int CSharp_AkPlaylistArray_Copy(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DC0")]
	[Address(RVA = "0x14B0BDC", Offset = "0x14B0BDC", VA = "0x14B0BDC")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_0(IntPtr jarg1, uint jarg2, int jarg3, IntPtr jarg4, uint jarg5, IntPtr jarg6);

	[PreserveSig]
	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0x14B0CB4", Offset = "0x14B0CB4", VA = "0x14B0CB4")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_1(IntPtr jarg1, uint jarg2, int jarg3, IntPtr jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0x14B0D7C", Offset = "0x14B0D7C", VA = "0x14B0D7C")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_2(IntPtr jarg1, uint jarg2, int jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0x14B0E3C", Offset = "0x14B0E3C", VA = "0x14B0E3C")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_3(IntPtr jarg1, uint jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000DC4")]
	[Address(RVA = "0x14B0EEC", Offset = "0x14B0EEC", VA = "0x14B0EEC")]
	public static extern int CSharp_AkPlaylist_Enqueue__SWIG_4(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DC5")]
	[Address(RVA = "0x14B0F94", Offset = "0x14B0F94", VA = "0x14B0F94")]
	public static extern IntPtr CSharp_new_AkPlaylist();

	[PreserveSig]
	[Token(Token = "0x6000DC6")]
	[Address(RVA = "0x14B101C", Offset = "0x14B101C", VA = "0x14B101C")]
	public static extern void CSharp_delete_AkPlaylist(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DC7")]
	[Address(RVA = "0x14B10B4", Offset = "0x14B10B4", VA = "0x14B10B4")]
	public static extern uint CSharp_DynamicSequenceOpen__SWIG_0(ulong jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0x14B117C", Offset = "0x14B117C", VA = "0x14B117C")]
	public static extern uint CSharp_DynamicSequenceOpen__SWIG_1(ulong jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6000DC9")]
	[Address(RVA = "0x14B123C", Offset = "0x14B123C", VA = "0x14B123C")]
	public static extern uint CSharp_DynamicSequenceOpen__SWIG_2(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DCA")]
	[Address(RVA = "0x14B12D4", Offset = "0x14B12D4", VA = "0x14B12D4")]
	public static extern int CSharp_DynamicSequenceClose(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DCB")]
	[Address(RVA = "0x14B136C", Offset = "0x14B136C", VA = "0x14B136C")]
	public static extern int CSharp_DynamicSequencePlay__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000DCC")]
	[Address(RVA = "0x14B141C", Offset = "0x14B141C", VA = "0x14B141C")]
	public static extern int CSharp_DynamicSequencePlay__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DCD")]
	[Address(RVA = "0x14B14C4", Offset = "0x14B14C4", VA = "0x14B14C4")]
	public static extern int CSharp_DynamicSequencePlay__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DCE")]
	[Address(RVA = "0x14B155C", Offset = "0x14B155C", VA = "0x14B155C")]
	public static extern int CSharp_DynamicSequencePause__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000DCF")]
	[Address(RVA = "0x14B160C", Offset = "0x14B160C", VA = "0x14B160C")]
	public static extern int CSharp_DynamicSequencePause__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0x14B16B4", Offset = "0x14B16B4", VA = "0x14B16B4")]
	public static extern int CSharp_DynamicSequencePause__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DD1")]
	[Address(RVA = "0x14B174C", Offset = "0x14B174C", VA = "0x14B174C")]
	public static extern int CSharp_DynamicSequenceResume__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0x14B17FC", Offset = "0x14B17FC", VA = "0x14B17FC")]
	public static extern int CSharp_DynamicSequenceResume__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0x14B18A4", Offset = "0x14B18A4", VA = "0x14B18A4")]
	public static extern int CSharp_DynamicSequenceResume__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0x14B193C", Offset = "0x14B193C", VA = "0x14B193C")]
	public static extern int CSharp_DynamicSequenceStop__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0x14B19EC", Offset = "0x14B19EC", VA = "0x14B19EC")]
	public static extern int CSharp_DynamicSequenceStop__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DD6")]
	[Address(RVA = "0x14B1A94", Offset = "0x14B1A94", VA = "0x14B1A94")]
	public static extern int CSharp_DynamicSequenceStop__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DD7")]
	[Address(RVA = "0x14B1B2C", Offset = "0x14B1B2C", VA = "0x14B1B2C")]
	public static extern int CSharp_DynamicSequenceBreak(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DD8")]
	[Address(RVA = "0x14B1BC4", Offset = "0x14B1BC4", VA = "0x14B1BC4")]
	public static extern int CSharp_DynamicSequenceGetPauseTimes(uint jarg1, out uint jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000DD9")]
	[Address(RVA = "0x14B1C74", Offset = "0x14B1C74", VA = "0x14B1C74")]
	public static extern IntPtr CSharp_DynamicSequenceLockPlaylist(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DDA")]
	[Address(RVA = "0x14B1D0C", Offset = "0x14B1D0C", VA = "0x14B1D0C")]
	public static extern int CSharp_DynamicSequenceUnlockPlaylist(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DDB")]
	[Address(RVA = "0x14B1DA4", Offset = "0x14B1DA4", VA = "0x14B1DA4")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6000DDC")]
	[Address(RVA = "0x14B1E2C", Offset = "0x14B1E2C", VA = "0x14B1E2C")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_1(string jarg1, uint jarg2, IntPtr jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000DDD")]
	[Address(RVA = "0x14B1F04", Offset = "0x14B1F04", VA = "0x14B1F04")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_2(string jarg1, uint jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x6000DDE")]
	[Address(RVA = "0x14B1FCC", Offset = "0x14B1FCC", VA = "0x14B1FCC")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_3(string jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DDF")]
	[Address(RVA = "0x14B208C", Offset = "0x14B208C", VA = "0x14B208C")]
	public static extern IntPtr CSharp_new_AkOutputSettings__SWIG_4(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DE0")]
	[Address(RVA = "0x14B213C", Offset = "0x14B213C", VA = "0x14B213C")]
	public static extern void CSharp_AkOutputSettings_audioDeviceShareset_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DE1")]
	[Address(RVA = "0x14B21E4", Offset = "0x14B21E4", VA = "0x14B21E4")]
	public static extern uint CSharp_AkOutputSettings_audioDeviceShareset_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DE2")]
	[Address(RVA = "0x14B227C", Offset = "0x14B227C", VA = "0x14B227C")]
	public static extern void CSharp_AkOutputSettings_idDevice_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DE3")]
	[Address(RVA = "0x14B2324", Offset = "0x14B2324", VA = "0x14B2324")]
	public static extern uint CSharp_AkOutputSettings_idDevice_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DE4")]
	[Address(RVA = "0x14B23BC", Offset = "0x14B23BC", VA = "0x14B23BC")]
	public static extern void CSharp_AkOutputSettings_ePanningRule_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DE5")]
	[Address(RVA = "0x14B2464", Offset = "0x14B2464", VA = "0x14B2464")]
	public static extern int CSharp_AkOutputSettings_ePanningRule_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DE6")]
	[Address(RVA = "0x14B24FC", Offset = "0x14B24FC", VA = "0x14B24FC")]
	public static extern void CSharp_AkOutputSettings_channelConfig_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DE7")]
	[Address(RVA = "0x14B25A4", Offset = "0x14B25A4", VA = "0x14B25A4")]
	public static extern IntPtr CSharp_AkOutputSettings_channelConfig_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DE8")]
	[Address(RVA = "0x14B263C", Offset = "0x14B263C", VA = "0x14B263C")]
	public static extern void CSharp_delete_AkOutputSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DE9")]
	[Address(RVA = "0x14B26D4", Offset = "0x14B26D4", VA = "0x14B26D4")]
	public static extern void CSharp_AkTaskContext_uIdxThread_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DEA")]
	[Address(RVA = "0x14B277C", Offset = "0x14B277C", VA = "0x14B277C")]
	public static extern uint CSharp_AkTaskContext_uIdxThread_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DEB")]
	[Address(RVA = "0x14B2814", Offset = "0x14B2814", VA = "0x14B2814")]
	public static extern IntPtr CSharp_new_AkTaskContext();

	[PreserveSig]
	[Token(Token = "0x6000DEC")]
	[Address(RVA = "0x14B289C", Offset = "0x14B289C", VA = "0x14B289C")]
	public static extern void CSharp_delete_AkTaskContext(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DED")]
	[Address(RVA = "0x14B2934", Offset = "0x14B2934", VA = "0x14B2934")]
	public static extern void CSharp_AkInitSettings_uMaxNumPaths_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DEE")]
	[Address(RVA = "0x14B29DC", Offset = "0x14B29DC", VA = "0x14B29DC")]
	public static extern uint CSharp_AkInitSettings_uMaxNumPaths_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DEF")]
	[Address(RVA = "0x14B2A74", Offset = "0x14B2A74", VA = "0x14B2A74")]
	public static extern void CSharp_AkInitSettings_uDefaultPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DF0")]
	[Address(RVA = "0x14B2B1C", Offset = "0x14B2B1C", VA = "0x14B2B1C")]
	public static extern uint CSharp_AkInitSettings_uDefaultPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DF1")]
	[Address(RVA = "0x14B2BB4", Offset = "0x14B2BB4", VA = "0x14B2BB4")]
	public static extern void CSharp_AkInitSettings_fDefaultPoolRatioThreshold_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DF2")]
	[Address(RVA = "0x14B2C5C", Offset = "0x14B2C5C", VA = "0x14B2C5C")]
	public static extern float CSharp_AkInitSettings_fDefaultPoolRatioThreshold_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DF3")]
	[Address(RVA = "0x14B2CF4", Offset = "0x14B2CF4", VA = "0x14B2CF4")]
	public static extern void CSharp_AkInitSettings_uCommandQueueSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DF4")]
	[Address(RVA = "0x14B2D9C", Offset = "0x14B2D9C", VA = "0x14B2D9C")]
	public static extern uint CSharp_AkInitSettings_uCommandQueueSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DF5")]
	[Address(RVA = "0x14B2E34", Offset = "0x14B2E34", VA = "0x14B2E34")]
	public static extern void CSharp_AkInitSettings_uPrepareEventMemoryPoolID_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DF6")]
	[Address(RVA = "0x14B2EDC", Offset = "0x14B2EDC", VA = "0x14B2EDC")]
	public static extern int CSharp_AkInitSettings_uPrepareEventMemoryPoolID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DF7")]
	[Address(RVA = "0x14B2F74", Offset = "0x14B2F74", VA = "0x14B2F74")]
	public static extern void CSharp_AkInitSettings_bEnableGameSyncPreparation_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DF8")]
	[Address(RVA = "0x14B301C", Offset = "0x14B301C", VA = "0x14B301C")]
	public static extern bool CSharp_AkInitSettings_bEnableGameSyncPreparation_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DF9")]
	[Address(RVA = "0x14B30BC", Offset = "0x14B30BC", VA = "0x14B30BC")]
	public static extern void CSharp_AkInitSettings_uContinuousPlaybackLookAhead_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DFA")]
	[Address(RVA = "0x14B3164", Offset = "0x14B3164", VA = "0x14B3164")]
	public static extern uint CSharp_AkInitSettings_uContinuousPlaybackLookAhead_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DFB")]
	[Address(RVA = "0x14B31FC", Offset = "0x14B31FC", VA = "0x14B31FC")]
	public static extern void CSharp_AkInitSettings_uNumSamplesPerFrame_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DFC")]
	[Address(RVA = "0x14B32A4", Offset = "0x14B32A4", VA = "0x14B32A4")]
	public static extern uint CSharp_AkInitSettings_uNumSamplesPerFrame_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DFD")]
	[Address(RVA = "0x14B333C", Offset = "0x14B333C", VA = "0x14B333C")]
	public static extern void CSharp_AkInitSettings_uMonitorPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000DFE")]
	[Address(RVA = "0x14B33E4", Offset = "0x14B33E4", VA = "0x14B33E4")]
	public static extern uint CSharp_AkInitSettings_uMonitorPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000DFF")]
	[Address(RVA = "0x14B347C", Offset = "0x14B347C", VA = "0x14B347C")]
	public static extern void CSharp_AkInitSettings_uMonitorQueuePoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E00")]
	[Address(RVA = "0x14B3524", Offset = "0x14B3524", VA = "0x14B3524")]
	public static extern uint CSharp_AkInitSettings_uMonitorQueuePoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E01")]
	[Address(RVA = "0x14B35BC", Offset = "0x14B35BC", VA = "0x14B35BC")]
	public static extern void CSharp_AkInitSettings_settingsMainOutput_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E02")]
	[Address(RVA = "0x14B3664", Offset = "0x14B3664", VA = "0x14B3664")]
	public static extern IntPtr CSharp_AkInitSettings_settingsMainOutput_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E03")]
	[Address(RVA = "0x14B36FC", Offset = "0x14B36FC", VA = "0x14B36FC")]
	public static extern void CSharp_AkInitSettings_uMaxHardwareTimeoutMs_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E04")]
	[Address(RVA = "0x14B37A4", Offset = "0x14B37A4", VA = "0x14B37A4")]
	public static extern uint CSharp_AkInitSettings_uMaxHardwareTimeoutMs_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E05")]
	[Address(RVA = "0x14B383C", Offset = "0x14B383C", VA = "0x14B383C")]
	public static extern void CSharp_AkInitSettings_bUseSoundBankMgrThread_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E06")]
	[Address(RVA = "0x14B38E4", Offset = "0x14B38E4", VA = "0x14B38E4")]
	public static extern bool CSharp_AkInitSettings_bUseSoundBankMgrThread_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E07")]
	[Address(RVA = "0x14B3984", Offset = "0x14B3984", VA = "0x14B3984")]
	public static extern void CSharp_AkInitSettings_bUseLEngineThread_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E08")]
	[Address(RVA = "0x14B3A2C", Offset = "0x14B3A2C", VA = "0x14B3A2C")]
	public static extern bool CSharp_AkInitSettings_bUseLEngineThread_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E09")]
	[Address(RVA = "0x14B3ACC", Offset = "0x14B3ACC", VA = "0x14B3ACC")]
	public static extern void CSharp_AkInitSettings_szPluginDLLPath_set(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E0A")]
	[Address(RVA = "0x14B3B88", Offset = "0x14B3B88", VA = "0x14B3B88")]
	public static extern IntPtr CSharp_AkInitSettings_szPluginDLLPath_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E0B")]
	[Address(RVA = "0x14B3C20", Offset = "0x14B3C20", VA = "0x14B3C20")]
	public static extern void CSharp_AkInitSettings_eFloorPlane_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E0C")]
	[Address(RVA = "0x14B3CC8", Offset = "0x14B3CC8", VA = "0x14B3CC8")]
	public static extern int CSharp_AkInitSettings_eFloorPlane_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0x14B3D60", Offset = "0x14B3D60", VA = "0x14B3D60")]
	public static extern IntPtr CSharp_new_AkInitSettings();

	[PreserveSig]
	[Token(Token = "0x6000E0E")]
	[Address(RVA = "0x14B3DE8", Offset = "0x14B3DE8", VA = "0x14B3DE8")]
	public static extern void CSharp_delete_AkInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0x14B3E80", Offset = "0x14B3E80", VA = "0x14B3E80")]
	public static extern void CSharp_AkSourceSettings_sourceID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E10")]
	[Address(RVA = "0x14B3F28", Offset = "0x14B3F28", VA = "0x14B3F28")]
	public static extern uint CSharp_AkSourceSettings_sourceID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E11")]
	[Address(RVA = "0x14B3FC0", Offset = "0x14B3FC0", VA = "0x14B3FC0")]
	public static extern void CSharp_AkSourceSettings_pMediaMemory_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E12")]
	[Address(RVA = "0x14B4068", Offset = "0x14B4068", VA = "0x14B4068")]
	public static extern IntPtr CSharp_AkSourceSettings_pMediaMemory_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E13")]
	[Address(RVA = "0x14B4100", Offset = "0x14B4100", VA = "0x14B4100")]
	public static extern void CSharp_AkSourceSettings_uMediaSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E14")]
	[Address(RVA = "0x14B41A8", Offset = "0x14B41A8", VA = "0x14B41A8")]
	public static extern uint CSharp_AkSourceSettings_uMediaSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E15")]
	[Address(RVA = "0x14B4240", Offset = "0x14B4240", VA = "0x14B4240")]
	public static extern void CSharp_AkSourceSettings_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E16")]
	[Address(RVA = "0x14B42D8", Offset = "0x14B42D8", VA = "0x14B42D8")]
	public static extern int CSharp_AkSourceSettings_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6000E17")]
	[Address(RVA = "0x14B4360", Offset = "0x14B4360", VA = "0x14B4360")]
	public static extern void CSharp_AkSourceSettings_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E18")]
	[Address(RVA = "0x14B4408", Offset = "0x14B4408", VA = "0x14B4408")]
	public static extern IntPtr CSharp_new_AkSourceSettings();

	[PreserveSig]
	[Token(Token = "0x6000E19")]
	[Address(RVA = "0x14B4490", Offset = "0x14B4490", VA = "0x14B4490")]
	public static extern void CSharp_delete_AkSourceSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E1A")]
	[Address(RVA = "0x14B4528", Offset = "0x14B4528", VA = "0x14B4528")]
	public static extern bool CSharp_IsInitialized();

	[PreserveSig]
	[Token(Token = "0x6000E1B")]
	[Address(RVA = "0x14B45B8", Offset = "0x14B45B8", VA = "0x14B45B8")]
	public static extern int CSharp_GetAudioSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E1C")]
	[Address(RVA = "0x14B4650", Offset = "0x14B4650", VA = "0x14B4650")]
	public static extern IntPtr CSharp_GetSpeakerConfiguration__SWIG_0(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E1D")]
	[Address(RVA = "0x14B46E8", Offset = "0x14B46E8", VA = "0x14B46E8")]
	public static extern IntPtr CSharp_GetSpeakerConfiguration__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x6000E1E")]
	[Address(RVA = "0x14B4770", Offset = "0x14B4770", VA = "0x14B4770")]
	public static extern int CSharp_GetPanningRule__SWIG_0(out int jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E1F")]
	[Address(RVA = "0x14B4818", Offset = "0x14B4818", VA = "0x14B4818")]
	public static extern int CSharp_GetPanningRule__SWIG_1(out int jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E20")]
	[Address(RVA = "0x14B48B0", Offset = "0x14B48B0", VA = "0x14B48B0")]
	public static extern int CSharp_SetPanningRule__SWIG_0(int jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E21")]
	[Address(RVA = "0x14B4958", Offset = "0x14B4958", VA = "0x14B4958")]
	public static extern int CSharp_SetPanningRule__SWIG_1(int jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E22")]
	[Address(RVA = "0x14B49F0", Offset = "0x14B49F0", VA = "0x14B49F0")]
	public static extern int CSharp_GetSpeakerAngles__SWIG_0([In][Out] float[] jarg1, ref uint jarg2, out float jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E23")]
	[Address(RVA = "0x14B4AB8", Offset = "0x14B4AB8", VA = "0x14B4AB8")]
	public static extern int CSharp_GetSpeakerAngles__SWIG_1([In][Out] float[] jarg1, ref uint jarg2, out float jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E24")]
	[Address(RVA = "0x14B4B70", Offset = "0x14B4B70", VA = "0x14B4B70")]
	public static extern int CSharp_SetSpeakerAngles__SWIG_0([In] float[] jarg1, uint jarg2, float jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E25")]
	[Address(RVA = "0x14B4C38", Offset = "0x14B4C38", VA = "0x14B4C38")]
	public static extern int CSharp_SetSpeakerAngles__SWIG_1([In] float[] jarg1, uint jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E26")]
	[Address(RVA = "0x14B4CF8", Offset = "0x14B4CF8", VA = "0x14B4CF8")]
	public static extern int CSharp_SetVolumeThreshold(float jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E27")]
	[Address(RVA = "0x14B4D94", Offset = "0x14B4D94", VA = "0x14B4D94")]
	public static extern int CSharp_SetMaxNumVoicesLimit(ushort jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E28")]
	[Address(RVA = "0x14B4E2C", Offset = "0x14B4E2C", VA = "0x14B4E2C")]
	public static extern int CSharp_RenderAudio__SWIG_0(bool jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E29")]
	[Address(RVA = "0x14B4EC4", Offset = "0x14B4EC4", VA = "0x14B4EC4")]
	public static extern int CSharp_RenderAudio__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x6000E2A")]
	[Address(RVA = "0x14B4F4C", Offset = "0x14B4F4C", VA = "0x14B4F4C")]
	public static extern int CSharp_RegisterPluginDLL__SWIG_0(string jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E2B")]
	[Address(RVA = "0x14B5024", Offset = "0x14B5024", VA = "0x14B5024")]
	public static extern int CSharp_RegisterPluginDLL__SWIG_1(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E2C")]
	[Address(RVA = "0x14B50D4", Offset = "0x14B50D4", VA = "0x14B50D4")]
	public static extern uint CSharp_GetIDFromString(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E2D")]
	[Address(RVA = "0x14B5184", Offset = "0x14B5184", VA = "0x14B5184")]
	public static extern uint CSharp_PostEvent__SWIG_0(uint jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5, uint jarg6, IntPtr jarg7, uint jarg8);

	[PreserveSig]
	[Token(Token = "0x6000E2E")]
	[Address(RVA = "0x14B5274", Offset = "0x14B5274", VA = "0x14B5274")]
	public static extern uint CSharp_PostEvent__SWIG_1(uint jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5, uint jarg6, IntPtr jarg7);

	[PreserveSig]
	[Token(Token = "0x6000E2F")]
	[Address(RVA = "0x14B5354", Offset = "0x14B5354", VA = "0x14B5354")]
	public static extern uint CSharp_PostEvent__SWIG_2(uint jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E30")]
	[Address(RVA = "0x14B541C", Offset = "0x14B541C", VA = "0x14B541C")]
	public static extern uint CSharp_PostEvent__SWIG_3(uint jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E31")]
	[Address(RVA = "0x14B54C4", Offset = "0x14B54C4", VA = "0x14B54C4")]
	public static extern uint CSharp_PostEvent__SWIG_4(string jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5, uint jarg6, IntPtr jarg7, uint jarg8);

	[PreserveSig]
	[Token(Token = "0x6000E32")]
	[Address(RVA = "0x14B55CC", Offset = "0x14B55CC", VA = "0x14B55CC")]
	public static extern uint CSharp_PostEvent__SWIG_5(string jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5, uint jarg6, IntPtr jarg7);

	[PreserveSig]
	[Token(Token = "0x6000E33")]
	[Address(RVA = "0x14B56C4", Offset = "0x14B56C4", VA = "0x14B56C4")]
	public static extern uint CSharp_PostEvent__SWIG_6(string jarg1, ulong jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E34")]
	[Address(RVA = "0x14B57A4", Offset = "0x14B57A4", VA = "0x14B57A4")]
	public static extern uint CSharp_PostEvent__SWIG_7(string jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E35")]
	[Address(RVA = "0x14B5864", Offset = "0x14B5864", VA = "0x14B5864")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_0(uint jarg1, int jarg2, ulong jarg3, int jarg4, int jarg5, uint jarg6);

	[PreserveSig]
	[Token(Token = "0x6000E36")]
	[Address(RVA = "0x14B593C", Offset = "0x14B593C", VA = "0x14B593C")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_1(uint jarg1, int jarg2, ulong jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E37")]
	[Address(RVA = "0x14B5A04", Offset = "0x14B5A04", VA = "0x14B5A04")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_2(uint jarg1, int jarg2, ulong jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E38")]
	[Address(RVA = "0x14B5AC4", Offset = "0x14B5AC4", VA = "0x14B5AC4")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_3(uint jarg1, int jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E39")]
	[Address(RVA = "0x14B5B74", Offset = "0x14B5B74", VA = "0x14B5B74")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_4(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E3A")]
	[Address(RVA = "0x14B5C1C", Offset = "0x14B5C1C", VA = "0x14B5C1C")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_5(string jarg1, int jarg2, ulong jarg3, int jarg4, int jarg5, uint jarg6);

	[PreserveSig]
	[Token(Token = "0x6000E3B")]
	[Address(RVA = "0x14B5D0C", Offset = "0x14B5D0C", VA = "0x14B5D0C")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_6(string jarg1, int jarg2, ulong jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0x14B5DEC", Offset = "0x14B5DEC", VA = "0x14B5DEC")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_7(string jarg1, int jarg2, ulong jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E3D")]
	[Address(RVA = "0x14B5EC4", Offset = "0x14B5EC4", VA = "0x14B5EC4")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_8(string jarg1, int jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0x14B5F8C", Offset = "0x14B5F8C", VA = "0x14B5F8C")]
	public static extern int CSharp_ExecuteActionOnEvent__SWIG_9(string jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E3F")]
	[Address(RVA = "0x14B604C", Offset = "0x14B604C", VA = "0x14B604C")]
	public static extern int CSharp_PostMIDIOnEvent(uint jarg1, ulong jarg2, IntPtr jarg3, ushort jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E40")]
	[Address(RVA = "0x14B610C", Offset = "0x14B610C", VA = "0x14B610C")]
	public static extern int CSharp_StopMIDIOnEvent__SWIG_0(uint jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E41")]
	[Address(RVA = "0x14B61B4", Offset = "0x14B61B4", VA = "0x14B61B4")]
	public static extern int CSharp_StopMIDIOnEvent__SWIG_1(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E42")]
	[Address(RVA = "0x14B624C", Offset = "0x14B624C", VA = "0x14B624C")]
	public static extern int CSharp_StopMIDIOnEvent__SWIG_2();

	[PreserveSig]
	[Token(Token = "0x6000E43")]
	[Address(RVA = "0x14B62D4", Offset = "0x14B62D4", VA = "0x14B62D4")]
	public static extern int CSharp_PinEventInStreamCache__SWIG_0(uint jarg1, sbyte jarg2, sbyte jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E44")]
	[Address(RVA = "0x14B6384", Offset = "0x14B6384", VA = "0x14B6384")]
	public static extern int CSharp_PinEventInStreamCache__SWIG_1(string jarg1, sbyte jarg2, sbyte jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E45")]
	[Address(RVA = "0x14B644C", Offset = "0x14B644C", VA = "0x14B644C")]
	public static extern int CSharp_UnpinEventInStreamCache__SWIG_0(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E46")]
	[Address(RVA = "0x14B64E4", Offset = "0x14B64E4", VA = "0x14B64E4")]
	public static extern int CSharp_UnpinEventInStreamCache__SWIG_1(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E47")]
	[Address(RVA = "0x14B6594", Offset = "0x14B6594", VA = "0x14B6594")]
	public static extern int CSharp_GetBufferStatusForPinnedEvent__SWIG_0(uint jarg1, out float jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E48")]
	[Address(RVA = "0x14B6644", Offset = "0x14B6644", VA = "0x14B6644")]
	public static extern int CSharp_GetBufferStatusForPinnedEvent__SWIG_1(string jarg1, out float jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E49")]
	[Address(RVA = "0x14B670C", Offset = "0x14B670C", VA = "0x14B670C")]
	public static extern int CSharp_SeekOnEvent__SWIG_0(uint jarg1, ulong jarg2, int jarg3, bool jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E4A")]
	[Address(RVA = "0x14B67D4", Offset = "0x14B67D4", VA = "0x14B67D4")]
	public static extern int CSharp_SeekOnEvent__SWIG_1(uint jarg1, ulong jarg2, int jarg3, bool jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0x14B6894", Offset = "0x14B6894", VA = "0x14B6894")]
	public static extern int CSharp_SeekOnEvent__SWIG_2(uint jarg1, ulong jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0x14B6944", Offset = "0x14B6944", VA = "0x14B6944")]
	public static extern int CSharp_SeekOnEvent__SWIG_3(string jarg1, ulong jarg2, int jarg3, bool jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E4D")]
	[Address(RVA = "0x14B6A24", Offset = "0x14B6A24", VA = "0x14B6A24")]
	public static extern int CSharp_SeekOnEvent__SWIG_4(string jarg1, ulong jarg2, int jarg3, bool jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E4E")]
	[Address(RVA = "0x14B6AFC", Offset = "0x14B6AFC", VA = "0x14B6AFC")]
	public static extern int CSharp_SeekOnEvent__SWIG_5(string jarg1, ulong jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E4F")]
	[Address(RVA = "0x14B6BC4", Offset = "0x14B6BC4", VA = "0x14B6BC4")]
	public static extern int CSharp_SeekOnEvent__SWIG_6(uint jarg1, ulong jarg2, float jarg3, bool jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E50")]
	[Address(RVA = "0x14B6C94", Offset = "0x14B6C94", VA = "0x14B6C94")]
	public static extern int CSharp_SeekOnEvent__SWIG_7(uint jarg1, ulong jarg2, float jarg3, bool jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E51")]
	[Address(RVA = "0x14B6D54", Offset = "0x14B6D54", VA = "0x14B6D54")]
	public static extern int CSharp_SeekOnEvent__SWIG_8(uint jarg1, ulong jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E52")]
	[Address(RVA = "0x14B6E0C", Offset = "0x14B6E0C", VA = "0x14B6E0C")]
	public static extern int CSharp_SeekOnEvent__SWIG_9(string jarg1, ulong jarg2, float jarg3, bool jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E53")]
	[Address(RVA = "0x14B6EF4", Offset = "0x14B6EF4", VA = "0x14B6EF4")]
	public static extern int CSharp_SeekOnEvent__SWIG_10(string jarg1, ulong jarg2, float jarg3, bool jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E54")]
	[Address(RVA = "0x14B6FCC", Offset = "0x14B6FCC", VA = "0x14B6FCC")]
	public static extern int CSharp_SeekOnEvent__SWIG_11(string jarg1, ulong jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E55")]
	[Address(RVA = "0x14B709C", Offset = "0x14B709C", VA = "0x14B709C")]
	public static extern void CSharp_CancelEventCallbackCookie(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E56")]
	[Address(RVA = "0x14B7134", Offset = "0x14B7134", VA = "0x14B7134")]
	public static extern void CSharp_CancelEventCallbackGameObject(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E57")]
	[Address(RVA = "0x14B71CC", Offset = "0x14B71CC", VA = "0x14B71CC")]
	public static extern void CSharp_CancelEventCallback(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E58")]
	[Address(RVA = "0x14B7264", Offset = "0x14B7264", VA = "0x14B7264")]
	public static extern int CSharp_GetSourcePlayPosition__SWIG_0(uint jarg1, out int jarg2, bool jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E59")]
	[Address(RVA = "0x14B7314", Offset = "0x14B7314", VA = "0x14B7314")]
	public static extern int CSharp_GetSourcePlayPosition__SWIG_1(uint jarg1, out int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0x14B73BC", Offset = "0x14B73BC", VA = "0x14B73BC")]
	public static extern int CSharp_GetSourceStreamBuffering(uint jarg1, out int jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0x14B746C", Offset = "0x14B746C", VA = "0x14B746C")]
	public static extern void CSharp_StopAll__SWIG_0(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0x14B7504", Offset = "0x14B7504", VA = "0x14B7504")]
	public static extern void CSharp_StopAll__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0x14B758C", Offset = "0x14B758C", VA = "0x14B758C")]
	public static extern void CSharp_StopPlayingID__SWIG_0(uint jarg1, int jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0x14B763C", Offset = "0x14B763C", VA = "0x14B763C")]
	public static extern void CSharp_StopPlayingID__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0x14B76E4", Offset = "0x14B76E4", VA = "0x14B76E4")]
	public static extern void CSharp_StopPlayingID__SWIG_2(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E60")]
	[Address(RVA = "0x14B777C", Offset = "0x14B777C", VA = "0x14B777C")]
	public static extern void CSharp_ExecuteActionOnPlayingID__SWIG_0(int jarg1, uint jarg2, int jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E61")]
	[Address(RVA = "0x14B783C", Offset = "0x14B783C", VA = "0x14B783C")]
	public static extern void CSharp_ExecuteActionOnPlayingID__SWIG_1(int jarg1, uint jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E62")]
	[Address(RVA = "0x14B78EC", Offset = "0x14B78EC", VA = "0x14B78EC")]
	public static extern void CSharp_ExecuteActionOnPlayingID__SWIG_2(int jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E63")]
	[Address(RVA = "0x14B7994", Offset = "0x14B7994", VA = "0x14B7994")]
	public static extern void CSharp_SetRandomSeed(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E64")]
	[Address(RVA = "0x14B7A2C", Offset = "0x14B7A2C", VA = "0x14B7A2C")]
	public static extern void CSharp_MuteBackgroundMusic(bool jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E65")]
	[Address(RVA = "0x14B7AC4", Offset = "0x14B7AC4", VA = "0x14B7AC4")]
	public static extern bool CSharp_GetBackgroundMusicMute();

	[PreserveSig]
	[Token(Token = "0x6000E66")]
	[Address(RVA = "0x14B7B54", Offset = "0x14B7B54", VA = "0x14B7B54")]
	public static extern int CSharp_SendPluginCustomGameData(uint jarg1, ulong jarg2, int jarg3, uint jarg4, uint jarg5, IntPtr jarg6, uint jarg7);

	[PreserveSig]
	[Token(Token = "0x6000E67")]
	[Address(RVA = "0x14B7C34", Offset = "0x14B7C34", VA = "0x14B7C34")]
	public static extern int CSharp_UnregisterAllGameObj();

	[PreserveSig]
	[Token(Token = "0x6000E68")]
	[Address(RVA = "0x14B7CBC", Offset = "0x14B7CBC", VA = "0x14B7CBC")]
	public static extern int CSharp_SetMultiplePositions__SWIG_0(ulong jarg1, IntPtr jarg2, ushort jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E69")]
	[Address(RVA = "0x14B7D7C", Offset = "0x14B7D7C", VA = "0x14B7D7C")]
	public static extern int CSharp_SetMultiplePositions__SWIG_1(ulong jarg1, IntPtr jarg2, ushort jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0x14B7E2C", Offset = "0x14B7E2C", VA = "0x14B7E2C")]
	public static extern int CSharp_SetMultiplePositions__SWIG_2(ulong jarg1, IntPtr jarg2, ushort jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0x14B7EEC", Offset = "0x14B7EEC", VA = "0x14B7EEC")]
	public static extern int CSharp_SetMultiplePositions__SWIG_3(ulong jarg1, IntPtr jarg2, ushort jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E6C")]
	[Address(RVA = "0x14B7F9C", Offset = "0x14B7F9C", VA = "0x14B7F9C")]
	public static extern int CSharp_SetScalingFactor(ulong jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0x14B8044", Offset = "0x14B8044", VA = "0x14B8044")]
	public static extern int CSharp_ClearBanks();

	[PreserveSig]
	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0x14B80CC", Offset = "0x14B80CC", VA = "0x14B80CC")]
	public static extern int CSharp_SetBankLoadIOSettings(float jarg1, sbyte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0x14B8174", Offset = "0x14B8174", VA = "0x14B8174")]
	public static extern int CSharp_LoadBank__SWIG_0(string jarg1, int jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E70")]
	[Address(RVA = "0x14B823C", Offset = "0x14B823C", VA = "0x14B823C")]
	public static extern int CSharp_LoadBank__SWIG_1(uint jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E71")]
	[Address(RVA = "0x14B82E4", Offset = "0x14B82E4", VA = "0x14B82E4")]
	public static extern int CSharp_LoadBank__SWIG_2(IntPtr jarg1, uint jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E72")]
	[Address(RVA = "0x14B8394", Offset = "0x14B8394", VA = "0x14B8394")]
	public static extern int CSharp_LoadBank__SWIG_3(IntPtr jarg1, uint jarg2, int jarg3, out uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E73")]
	[Address(RVA = "0x14B8454", Offset = "0x14B8454", VA = "0x14B8454")]
	public static extern int CSharp_LoadBank__SWIG_4(string jarg1, IntPtr jarg2, IntPtr jarg3, int jarg4, out uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E74")]
	[Address(RVA = "0x14B8534", Offset = "0x14B8534", VA = "0x14B8534")]
	public static extern int CSharp_LoadBank__SWIG_5(uint jarg1, IntPtr jarg2, IntPtr jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E75")]
	[Address(RVA = "0x14B85F4", Offset = "0x14B85F4", VA = "0x14B85F4")]
	public static extern int CSharp_LoadBank__SWIG_6(IntPtr jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4, out uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E76")]
	[Address(RVA = "0x14B86BC", Offset = "0x14B86BC", VA = "0x14B86BC")]
	public static extern int CSharp_LoadBank__SWIG_7(IntPtr jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4, int jarg5, out uint jarg6);

	[PreserveSig]
	[Token(Token = "0x6000E77")]
	[Address(RVA = "0x14B8794", Offset = "0x14B8794", VA = "0x14B8794")]
	public static extern int CSharp_UnloadBank__SWIG_0(string jarg1, IntPtr jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E78")]
	[Address(RVA = "0x14B885C", Offset = "0x14B885C", VA = "0x14B885C")]
	public static extern int CSharp_UnloadBank__SWIG_1(string jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E79")]
	[Address(RVA = "0x14B891C", Offset = "0x14B891C", VA = "0x14B891C")]
	public static extern int CSharp_UnloadBank__SWIG_2(uint jarg1, IntPtr jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E7A")]
	[Address(RVA = "0x14B89CC", Offset = "0x14B89CC", VA = "0x14B89CC")]
	public static extern int CSharp_UnloadBank__SWIG_3(uint jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E7B")]
	[Address(RVA = "0x14B8A74", Offset = "0x14B8A74", VA = "0x14B8A74")]
	public static extern int CSharp_UnloadBank__SWIG_4(string jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E7C")]
	[Address(RVA = "0x14B8B4C", Offset = "0x14B8B4C", VA = "0x14B8B4C")]
	public static extern int CSharp_UnloadBank__SWIG_5(uint jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E7D")]
	[Address(RVA = "0x14B8C0C", Offset = "0x14B8C0C", VA = "0x14B8C0C")]
	public static extern void CSharp_CancelBankCallbackCookie(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0x14B8CA4", Offset = "0x14B8CA4", VA = "0x14B8CA4")]
	public static extern int CSharp_PrepareBank__SWIG_0(int jarg1, string jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0x14B8D70", Offset = "0x14B8D70", VA = "0x14B8D70")]
	public static extern int CSharp_PrepareBank__SWIG_1(int jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E80")]
	[Address(RVA = "0x14B8E34", Offset = "0x14B8E34", VA = "0x14B8E34")]
	public static extern int CSharp_PrepareBank__SWIG_2(int jarg1, uint jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E81")]
	[Address(RVA = "0x14B8EE4", Offset = "0x14B8EE4", VA = "0x14B8EE4")]
	public static extern int CSharp_PrepareBank__SWIG_3(int jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E82")]
	[Address(RVA = "0x14B8F8C", Offset = "0x14B8F8C", VA = "0x14B8F8C")]
	public static extern int CSharp_PrepareBank__SWIG_4(int jarg1, string jarg2, IntPtr jarg3, IntPtr jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E83")]
	[Address(RVA = "0x14B9070", Offset = "0x14B9070", VA = "0x14B9070")]
	public static extern int CSharp_PrepareBank__SWIG_5(int jarg1, string jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E84")]
	[Address(RVA = "0x14B914C", Offset = "0x14B914C", VA = "0x14B914C")]
	public static extern int CSharp_PrepareBank__SWIG_6(int jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E85")]
	[Address(RVA = "0x14B9214", Offset = "0x14B9214", VA = "0x14B9214")]
	public static extern int CSharp_PrepareBank__SWIG_7(int jarg1, uint jarg2, IntPtr jarg3, IntPtr jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E86")]
	[Address(RVA = "0x14B92D4", Offset = "0x14B92D4", VA = "0x14B92D4")]
	public static extern int CSharp_ClearPreparedEvents();

	[PreserveSig]
	[Token(Token = "0x6000E87")]
	[Address(RVA = "0x14B935C", Offset = "0x14B935C", VA = "0x14B935C")]
	public static extern int CSharp_PrepareEvent__SWIG_0(int jarg1, IntPtr jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E88")]
	[Address(RVA = "0x14B940C", Offset = "0x14B940C", VA = "0x14B940C")]
	public static extern int CSharp_PrepareEvent__SWIG_1(int jarg1, [In] uint[] jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E89")]
	[Address(RVA = "0x14B94C4", Offset = "0x14B94C4", VA = "0x14B94C4")]
	public static extern int CSharp_PrepareEvent__SWIG_2(int jarg1, IntPtr jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0x14B958C", Offset = "0x14B958C", VA = "0x14B958C")]
	public static extern int CSharp_PrepareEvent__SWIG_3(int jarg1, [In] uint[] jarg2, uint jarg3, IntPtr jarg4, IntPtr jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0x14B965C", Offset = "0x14B965C", VA = "0x14B965C")]
	public static extern int CSharp_SetMedia(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0x14B9704", Offset = "0x14B9704", VA = "0x14B9704")]
	public static extern int CSharp_UnsetMedia(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E8D")]
	[Address(RVA = "0x14B97AC", Offset = "0x14B97AC", VA = "0x14B97AC")]
	public static extern int CSharp_PrepareGameSyncs__SWIG_0(int jarg1, int jarg2, string jarg3, IntPtr jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E8E")]
	[Address(RVA = "0x14B9890", Offset = "0x14B9890", VA = "0x14B9890")]
	public static extern int CSharp_PrepareGameSyncs__SWIG_1(int jarg1, int jarg2, uint jarg3, [In] uint[] jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E8F")]
	[Address(RVA = "0x14B9960", Offset = "0x14B9960", VA = "0x14B9960")]
	public static extern int CSharp_PrepareGameSyncs__SWIG_2(int jarg1, int jarg2, string jarg3, IntPtr jarg4, uint jarg5, IntPtr jarg6, IntPtr jarg7);

	[PreserveSig]
	[Token(Token = "0x6000E90")]
	[Address(RVA = "0x14B9A5C", Offset = "0x14B9A5C", VA = "0x14B9A5C")]
	public static extern int CSharp_PrepareGameSyncs__SWIG_3(int jarg1, int jarg2, uint jarg3, [In] uint[] jarg4, uint jarg5, IntPtr jarg6, IntPtr jarg7);

	[PreserveSig]
	[Token(Token = "0x6000E91")]
	[Address(RVA = "0x14B9B44", Offset = "0x14B9B44", VA = "0x14B9B44")]
	public static extern int CSharp_AddListener(ulong jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E92")]
	[Address(RVA = "0x14B9BEC", Offset = "0x14B9BEC", VA = "0x14B9BEC")]
	public static extern int CSharp_RemoveListener(ulong jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E93")]
	[Address(RVA = "0x14B9C94", Offset = "0x14B9C94", VA = "0x14B9C94")]
	public static extern int CSharp_AddDefaultListener(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E94")]
	[Address(RVA = "0x14B9D2C", Offset = "0x14B9D2C", VA = "0x14B9D2C")]
	public static extern int CSharp_RemoveDefaultListener(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E95")]
	[Address(RVA = "0x14B9DC4", Offset = "0x14B9DC4", VA = "0x14B9DC4")]
	public static extern int CSharp_ResetListenersToDefault(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000E96")]
	[Address(RVA = "0x14B9E5C", Offset = "0x14B9E5C", VA = "0x14B9E5C")]
	public static extern int CSharp_SetListenerSpatialization__SWIG_0(ulong jarg1, bool jarg2, IntPtr jarg3, [In] float[] jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E97")]
	[Address(RVA = "0x14B9F24", Offset = "0x14B9F24", VA = "0x14B9F24")]
	public static extern int CSharp_SetListenerSpatialization__SWIG_1(ulong jarg1, bool jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E98")]
	[Address(RVA = "0x14B9FD4", Offset = "0x14B9FD4", VA = "0x14B9FD4")]
	public static extern int CSharp_SetRTPCValue__SWIG_0(uint jarg1, float jarg2, ulong jarg3, int jarg4, int jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x6000E99")]
	[Address(RVA = "0x14BA0AC", Offset = "0x14BA0AC", VA = "0x14BA0AC")]
	public static extern int CSharp_SetRTPCValue__SWIG_1(uint jarg1, float jarg2, ulong jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E9A")]
	[Address(RVA = "0x14BA17C", Offset = "0x14BA17C", VA = "0x14BA17C")]
	public static extern int CSharp_SetRTPCValue__SWIG_2(uint jarg1, float jarg2, ulong jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000E9B")]
	[Address(RVA = "0x14BA23C", Offset = "0x14BA23C", VA = "0x14BA23C")]
	public static extern int CSharp_SetRTPCValue__SWIG_3(uint jarg1, float jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x6000E9C")]
	[Address(RVA = "0x14BA2F4", Offset = "0x14BA2F4", VA = "0x14BA2F4")]
	public static extern int CSharp_SetRTPCValue__SWIG_4(uint jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000E9D")]
	[Address(RVA = "0x14BA39C", Offset = "0x14BA39C", VA = "0x14BA39C")]
	public static extern int CSharp_SetRTPCValue__SWIG_5(string jarg1, float jarg2, ulong jarg3, int jarg4, int jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x6000E9E")]
	[Address(RVA = "0x14BA48C", Offset = "0x14BA48C", VA = "0x14BA48C")]
	public static extern int CSharp_SetRTPCValue__SWIG_6(string jarg1, float jarg2, ulong jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000E9F")]
	[Address(RVA = "0x14BA574", Offset = "0x14BA574", VA = "0x14BA574")]
	public static extern int CSharp_SetRTPCValue__SWIG_7(string jarg1, float jarg2, ulong jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000EA0")]
	[Address(RVA = "0x14BA64C", Offset = "0x14BA64C", VA = "0x14BA64C")]
	public static extern int CSharp_SetRTPCValue__SWIG_8(string jarg1, float jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EA1")]
	[Address(RVA = "0x14BA71C", Offset = "0x14BA71C", VA = "0x14BA71C")]
	public static extern int CSharp_SetRTPCValue__SWIG_9(string jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EA2")]
	[Address(RVA = "0x14BA7DC", Offset = "0x14BA7DC", VA = "0x14BA7DC")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_0(uint jarg1, float jarg2, uint jarg3, int jarg4, int jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x6000EA3")]
	[Address(RVA = "0x14BA8B4", Offset = "0x14BA8B4", VA = "0x14BA8B4")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_1(uint jarg1, float jarg2, uint jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000EA4")]
	[Address(RVA = "0x14BA984", Offset = "0x14BA984", VA = "0x14BA984")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_2(uint jarg1, float jarg2, uint jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000EA5")]
	[Address(RVA = "0x14BAA44", Offset = "0x14BAA44", VA = "0x14BAA44")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_3(uint jarg1, float jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EA6")]
	[Address(RVA = "0x14BAAFC", Offset = "0x14BAAFC", VA = "0x14BAAFC")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_4(string jarg1, float jarg2, uint jarg3, int jarg4, int jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x6000EA7")]
	[Address(RVA = "0x14BABEC", Offset = "0x14BABEC", VA = "0x14BABEC")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_5(string jarg1, float jarg2, uint jarg3, int jarg4, int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000EA8")]
	[Address(RVA = "0x14BACD4", Offset = "0x14BACD4", VA = "0x14BACD4")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_6(string jarg1, float jarg2, uint jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000EA9")]
	[Address(RVA = "0x14BADAC", Offset = "0x14BADAC", VA = "0x14BADAC")]
	public static extern int CSharp_SetRTPCValueByPlayingID__SWIG_7(string jarg1, float jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EAA")]
	[Address(RVA = "0x14BAE7C", Offset = "0x14BAE7C", VA = "0x14BAE7C")]
	public static extern int CSharp_ResetRTPCValue__SWIG_0(uint jarg1, ulong jarg2, int jarg3, int jarg4, bool jarg5);

	[PreserveSig]
	[Token(Token = "0x6000EAB")]
	[Address(RVA = "0x14BAF44", Offset = "0x14BAF44", VA = "0x14BAF44")]
	public static extern int CSharp_ResetRTPCValue__SWIG_1(uint jarg1, ulong jarg2, int jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000EAC")]
	[Address(RVA = "0x14BB004", Offset = "0x14BB004", VA = "0x14BB004")]
	public static extern int CSharp_ResetRTPCValue__SWIG_2(uint jarg1, ulong jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EAD")]
	[Address(RVA = "0x14BB0B4", Offset = "0x14BB0B4", VA = "0x14BB0B4")]
	public static extern int CSharp_ResetRTPCValue__SWIG_3(uint jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EAE")]
	[Address(RVA = "0x14BB15C", Offset = "0x14BB15C", VA = "0x14BB15C")]
	public static extern int CSharp_ResetRTPCValue__SWIG_4(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EAF")]
	[Address(RVA = "0x14BB1F4", Offset = "0x14BB1F4", VA = "0x14BB1F4")]
	public static extern int CSharp_ResetRTPCValue__SWIG_5(string jarg1, ulong jarg2, int jarg3, int jarg4, bool jarg5);

	[PreserveSig]
	[Token(Token = "0x6000EB0")]
	[Address(RVA = "0x14BB2D4", Offset = "0x14BB2D4", VA = "0x14BB2D4")]
	public static extern int CSharp_ResetRTPCValue__SWIG_6(string jarg1, ulong jarg2, int jarg3, int jarg4);

	[PreserveSig]
	[Token(Token = "0x6000EB1")]
	[Address(RVA = "0x14BB3AC", Offset = "0x14BB3AC", VA = "0x14BB3AC")]
	public static extern int CSharp_ResetRTPCValue__SWIG_7(string jarg1, ulong jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EB2")]
	[Address(RVA = "0x14BB474", Offset = "0x14BB474", VA = "0x14BB474")]
	public static extern int CSharp_ResetRTPCValue__SWIG_8(string jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EB3")]
	[Address(RVA = "0x14BB534", Offset = "0x14BB534", VA = "0x14BB534")]
	public static extern int CSharp_ResetRTPCValue__SWIG_9(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EB4")]
	[Address(RVA = "0x14BB5E4", Offset = "0x14BB5E4", VA = "0x14BB5E4")]
	public static extern int CSharp_SetSwitch__SWIG_0(uint jarg1, uint jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EB5")]
	[Address(RVA = "0x14BB694", Offset = "0x14BB694", VA = "0x14BB694")]
	public static extern int CSharp_SetSwitch__SWIG_1(string jarg1, string jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EB6")]
	[Address(RVA = "0x14BB770", Offset = "0x14BB770", VA = "0x14BB770")]
	public static extern int CSharp_PostTrigger__SWIG_0(uint jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EB7")]
	[Address(RVA = "0x14BB818", Offset = "0x14BB818", VA = "0x14BB818")]
	public static extern int CSharp_PostTrigger__SWIG_1(string jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EB8")]
	[Address(RVA = "0x14BB8D8", Offset = "0x14BB8D8", VA = "0x14BB8D8")]
	public static extern int CSharp_SetState__SWIG_0(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EB9")]
	[Address(RVA = "0x14BB980", Offset = "0x14BB980", VA = "0x14BB980")]
	public static extern int CSharp_SetState__SWIG_1(string jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0x14BBA58", Offset = "0x14BBA58", VA = "0x14BBA58")]
	public static extern int CSharp_SetGameObjectAuxSendValues(ulong jarg1, IntPtr jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EBB")]
	[Address(RVA = "0x14BBB08", Offset = "0x14BBB08", VA = "0x14BBB08")]
	public static extern int CSharp_SetGameObjectOutputBusVolume(ulong jarg1, ulong jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EBC")]
	[Address(RVA = "0x14BBBC0", Offset = "0x14BBBC0", VA = "0x14BBBC0")]
	public static extern int CSharp_SetActorMixerEffect(uint jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EBD")]
	[Address(RVA = "0x14BBC70", Offset = "0x14BBC70", VA = "0x14BBC70")]
	public static extern int CSharp_SetBusEffect__SWIG_0(uint jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EBE")]
	[Address(RVA = "0x14BBD20", Offset = "0x14BBD20", VA = "0x14BBD20")]
	public static extern int CSharp_SetBusEffect__SWIG_1(string jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000EBF")]
	[Address(RVA = "0x14BBDE8", Offset = "0x14BBDE8", VA = "0x14BBDE8")]
	public static extern int CSharp_SetMixer__SWIG_0(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EC0")]
	[Address(RVA = "0x14BBE90", Offset = "0x14BBE90", VA = "0x14BBE90")]
	public static extern int CSharp_SetMixer__SWIG_1(string jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EC1")]
	[Address(RVA = "0x14BBF50", Offset = "0x14BBF50", VA = "0x14BBF50")]
	public static extern int CSharp_SetBusConfig__SWIG_0(uint jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EC2")]
	[Address(RVA = "0x14BBFF8", Offset = "0x14BBFF8", VA = "0x14BBFF8")]
	public static extern int CSharp_SetBusConfig__SWIG_1(string jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EC3")]
	[Address(RVA = "0x14BC0B8", Offset = "0x14BC0B8", VA = "0x14BC0B8")]
	public static extern int CSharp_SetObjectObstructionAndOcclusion(ulong jarg1, ulong jarg2, float jarg3, float jarg4);

	[PreserveSig]
	[Token(Token = "0x6000EC4")]
	[Address(RVA = "0x14BC178", Offset = "0x14BC178", VA = "0x14BC178")]
	public static extern int CSharp_SetMultipleObstructionAndOcclusion(ulong jarg1, ulong jarg2, IntPtr jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6000EC5")]
	[Address(RVA = "0x14BC238", Offset = "0x14BC238", VA = "0x14BC238")]
	public static extern int CSharp_StartOutputCapture(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EC6")]
	[Address(RVA = "0x14BC2E8", Offset = "0x14BC2E8", VA = "0x14BC2E8")]
	public static extern int CSharp_StopOutputCapture();

	[PreserveSig]
	[Token(Token = "0x6000EC7")]
	[Address(RVA = "0x14BC370", Offset = "0x14BC370", VA = "0x14BC370")]
	public static extern int CSharp_AddOutputCaptureMarker(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EC8")]
	[Address(RVA = "0x14BC420", Offset = "0x14BC420", VA = "0x14BC420")]
	public static extern int CSharp_StartProfilerCapture(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EC9")]
	[Address(RVA = "0x14BC4D0", Offset = "0x14BC4D0", VA = "0x14BC4D0")]
	public static extern int CSharp_StopProfilerCapture();

	[PreserveSig]
	[Token(Token = "0x6000ECA")]
	[Address(RVA = "0x14BC558", Offset = "0x14BC558", VA = "0x14BC558")]
	public static extern int CSharp_RemoveOutput(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0x14BC5F0", Offset = "0x14BC5F0", VA = "0x14BC5F0")]
	public static extern int CSharp_ReplaceOutput__SWIG_0(IntPtr jarg1, ulong jarg2, out ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0x14BC6A0", Offset = "0x14BC6A0", VA = "0x14BC6A0")]
	public static extern int CSharp_ReplaceOutput__SWIG_1(IntPtr jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0x14BC748", Offset = "0x14BC748", VA = "0x14BC748")]
	public static extern ulong CSharp_GetOutputID__SWIG_0(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000ECE")]
	[Address(RVA = "0x14BC7F0", Offset = "0x14BC7F0", VA = "0x14BC7F0")]
	public static extern ulong CSharp_GetOutputID__SWIG_1(string jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000ECF")]
	[Address(RVA = "0x14BC8B0", Offset = "0x14BC8B0", VA = "0x14BC8B0")]
	public static extern int CSharp_SetBusDevice__SWIG_0(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000ED0")]
	[Address(RVA = "0x14BC958", Offset = "0x14BC958", VA = "0x14BC958")]
	public static extern int CSharp_SetBusDevice__SWIG_1(string jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6000ED1")]
	[Address(RVA = "0x14BCA30", Offset = "0x14BCA30", VA = "0x14BCA30")]
	public static extern int CSharp_SetOutputVolume(ulong jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0x14BCAD8", Offset = "0x14BCAD8", VA = "0x14BCAD8")]
	public static extern int CSharp_GetDeviceSpatialAudioSupport(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0x14BCB70", Offset = "0x14BCB70", VA = "0x14BCB70")]
	public static extern int CSharp_Suspend__SWIG_0(bool jarg1);

	[PreserveSig]
	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0x14BCC08", Offset = "0x14BCC08", VA = "0x14BCC08")]
	public static extern int CSharp_Suspend__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0x14BCC90", Offset = "0x14BCC90", VA = "0x14BCC90")]
	public static extern int CSharp_WakeupFromSuspend();

	[PreserveSig]
	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0x14BCD18", Offset = "0x14BCD18", VA = "0x14BCD18")]
	public static extern uint CSharp_GetBufferTick();

	[PreserveSig]
	[Token(Token = "0x6000ED7")]
	[Address(RVA = "0x14BCDA0", Offset = "0x14BCDA0", VA = "0x14BCDA0")]
	public static extern void CSharp_AkSegmentInfo_iCurrentPosition_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000ED8")]
	[Address(RVA = "0x14BCE48", Offset = "0x14BCE48", VA = "0x14BCE48")]
	public static extern int CSharp_AkSegmentInfo_iCurrentPosition_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000ED9")]
	[Address(RVA = "0x14BCEE0", Offset = "0x14BCEE0", VA = "0x14BCEE0")]
	public static extern void CSharp_AkSegmentInfo_iPreEntryDuration_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EDA")]
	[Address(RVA = "0x14BCF88", Offset = "0x14BCF88", VA = "0x14BCF88")]
	public static extern int CSharp_AkSegmentInfo_iPreEntryDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EDB")]
	[Address(RVA = "0x14BD020", Offset = "0x14BD020", VA = "0x14BD020")]
	public static extern void CSharp_AkSegmentInfo_iActiveDuration_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EDC")]
	[Address(RVA = "0x14BD0C8", Offset = "0x14BD0C8", VA = "0x14BD0C8")]
	public static extern int CSharp_AkSegmentInfo_iActiveDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EDD")]
	[Address(RVA = "0x14BD160", Offset = "0x14BD160", VA = "0x14BD160")]
	public static extern void CSharp_AkSegmentInfo_iPostExitDuration_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EDE")]
	[Address(RVA = "0x14BD208", Offset = "0x14BD208", VA = "0x14BD208")]
	public static extern int CSharp_AkSegmentInfo_iPostExitDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EDF")]
	[Address(RVA = "0x14BD2A0", Offset = "0x14BD2A0", VA = "0x14BD2A0")]
	public static extern void CSharp_AkSegmentInfo_iRemainingLookAheadTime_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EE0")]
	[Address(RVA = "0x14BD348", Offset = "0x14BD348", VA = "0x14BD348")]
	public static extern int CSharp_AkSegmentInfo_iRemainingLookAheadTime_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EE1")]
	[Address(RVA = "0x14BD3E0", Offset = "0x14BD3E0", VA = "0x14BD3E0")]
	public static extern void CSharp_AkSegmentInfo_fBeatDuration_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0x14BD488", Offset = "0x14BD488", VA = "0x14BD488")]
	public static extern float CSharp_AkSegmentInfo_fBeatDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0x14BD520", Offset = "0x14BD520", VA = "0x14BD520")]
	public static extern void CSharp_AkSegmentInfo_fBarDuration_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EE4")]
	[Address(RVA = "0x14BD5C8", Offset = "0x14BD5C8", VA = "0x14BD5C8")]
	public static extern float CSharp_AkSegmentInfo_fBarDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EE5")]
	[Address(RVA = "0x14BD660", Offset = "0x14BD660", VA = "0x14BD660")]
	public static extern void CSharp_AkSegmentInfo_fGridDuration_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EE6")]
	[Address(RVA = "0x14BD708", Offset = "0x14BD708", VA = "0x14BD708")]
	public static extern float CSharp_AkSegmentInfo_fGridDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EE7")]
	[Address(RVA = "0x14BD7A0", Offset = "0x14BD7A0", VA = "0x14BD7A0")]
	public static extern void CSharp_AkSegmentInfo_fGridOffset_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EE8")]
	[Address(RVA = "0x14BD848", Offset = "0x14BD848", VA = "0x14BD848")]
	public static extern float CSharp_AkSegmentInfo_fGridOffset_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EE9")]
	[Address(RVA = "0x14BD8E0", Offset = "0x14BD8E0", VA = "0x14BD8E0")]
	public static extern IntPtr CSharp_new_AkSegmentInfo();

	[PreserveSig]
	[Token(Token = "0x6000EEA")]
	[Address(RVA = "0x14BD968", Offset = "0x14BD968", VA = "0x14BD968")]
	public static extern void CSharp_delete_AkSegmentInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EEB")]
	[Address(RVA = "0x14BDA00", Offset = "0x14BDA00", VA = "0x14BDA00")]
	public static extern byte CSharp_AK_INVALID_MIDI_CHANNEL_get();

	[PreserveSig]
	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0x14BDA88", Offset = "0x14BDA88", VA = "0x14BDA88")]
	public static extern byte CSharp_AK_INVALID_MIDI_NOTE_get();

	[PreserveSig]
	[Token(Token = "0x6000EED")]
	[Address(RVA = "0x14BDB10", Offset = "0x14BDB10", VA = "0x14BDB10")]
	public static extern void CSharp_AkMIDIEvent_byChan_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0x14BDBB8", Offset = "0x14BDBB8", VA = "0x14BDBB8")]
	public static extern byte CSharp_AkMIDIEvent_byChan_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0x14BDC50", Offset = "0x14BDC50", VA = "0x14BDC50")]
	public static extern void CSharp_AkMIDIEvent_tGen_byParam1_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0x14BDCF8", Offset = "0x14BDCF8", VA = "0x14BDCF8")]
	public static extern byte CSharp_AkMIDIEvent_tGen_byParam1_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0x14BDD90", Offset = "0x14BDD90", VA = "0x14BDD90")]
	public static extern void CSharp_AkMIDIEvent_tGen_byParam2_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EF2")]
	[Address(RVA = "0x14BDE38", Offset = "0x14BDE38", VA = "0x14BDE38")]
	public static extern byte CSharp_AkMIDIEvent_tGen_byParam2_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EF3")]
	[Address(RVA = "0x14BDED0", Offset = "0x14BDED0", VA = "0x14BDED0")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tGen();

	[PreserveSig]
	[Token(Token = "0x6000EF4")]
	[Address(RVA = "0x14BDF58", Offset = "0x14BDF58", VA = "0x14BDF58")]
	public static extern void CSharp_delete_AkMIDIEvent_tGen(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EF5")]
	[Address(RVA = "0x14BDFF0", Offset = "0x14BDFF0", VA = "0x14BDFF0")]
	public static extern void CSharp_AkMIDIEvent_tNoteOnOff_byNote_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0x14BE098", Offset = "0x14BE098", VA = "0x14BE098")]
	public static extern byte CSharp_AkMIDIEvent_tNoteOnOff_byNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0x14BE130", Offset = "0x14BE130", VA = "0x14BE130")]
	public static extern void CSharp_AkMIDIEvent_tNoteOnOff_byVelocity_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0x14BE1D8", Offset = "0x14BE1D8", VA = "0x14BE1D8")]
	public static extern byte CSharp_AkMIDIEvent_tNoteOnOff_byVelocity_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0x14BE270", Offset = "0x14BE270", VA = "0x14BE270")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tNoteOnOff();

	[PreserveSig]
	[Token(Token = "0x6000EFA")]
	[Address(RVA = "0x14BE2F8", Offset = "0x14BE2F8", VA = "0x14BE2F8")]
	public static extern void CSharp_delete_AkMIDIEvent_tNoteOnOff(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EFB")]
	[Address(RVA = "0x14BE390", Offset = "0x14BE390", VA = "0x14BE390")]
	public static extern void CSharp_AkMIDIEvent_tCc_byCc_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EFC")]
	[Address(RVA = "0x14BE438", Offset = "0x14BE438", VA = "0x14BE438")]
	public static extern byte CSharp_AkMIDIEvent_tCc_byCc_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EFD")]
	[Address(RVA = "0x14BE4D0", Offset = "0x14BE4D0", VA = "0x14BE4D0")]
	public static extern void CSharp_AkMIDIEvent_tCc_byValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0x14BE578", Offset = "0x14BE578", VA = "0x14BE578")]
	public static extern byte CSharp_AkMIDIEvent_tCc_byValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0x14BE610", Offset = "0x14BE610", VA = "0x14BE610")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tCc();

	[PreserveSig]
	[Token(Token = "0x6000F00")]
	[Address(RVA = "0x14BE698", Offset = "0x14BE698", VA = "0x14BE698")]
	public static extern void CSharp_delete_AkMIDIEvent_tCc(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F01")]
	[Address(RVA = "0x14BE730", Offset = "0x14BE730", VA = "0x14BE730")]
	public static extern void CSharp_AkMIDIEvent_tPitchBend_byValueLsb_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F02")]
	[Address(RVA = "0x14BE7D8", Offset = "0x14BE7D8", VA = "0x14BE7D8")]
	public static extern byte CSharp_AkMIDIEvent_tPitchBend_byValueLsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F03")]
	[Address(RVA = "0x14BE870", Offset = "0x14BE870", VA = "0x14BE870")]
	public static extern void CSharp_AkMIDIEvent_tPitchBend_byValueMsb_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F04")]
	[Address(RVA = "0x14BE918", Offset = "0x14BE918", VA = "0x14BE918")]
	public static extern byte CSharp_AkMIDIEvent_tPitchBend_byValueMsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F05")]
	[Address(RVA = "0x14BE9B0", Offset = "0x14BE9B0", VA = "0x14BE9B0")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tPitchBend();

	[PreserveSig]
	[Token(Token = "0x6000F06")]
	[Address(RVA = "0x14BEA38", Offset = "0x14BEA38", VA = "0x14BEA38")]
	public static extern void CSharp_delete_AkMIDIEvent_tPitchBend(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F07")]
	[Address(RVA = "0x14BEAD0", Offset = "0x14BEAD0", VA = "0x14BEAD0")]
	public static extern void CSharp_AkMIDIEvent_tNoteAftertouch_byNote_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F08")]
	[Address(RVA = "0x14BEB78", Offset = "0x14BEB78", VA = "0x14BEB78")]
	public static extern byte CSharp_AkMIDIEvent_tNoteAftertouch_byNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F09")]
	[Address(RVA = "0x14BEC10", Offset = "0x14BEC10", VA = "0x14BEC10")]
	public static extern void CSharp_AkMIDIEvent_tNoteAftertouch_byValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F0A")]
	[Address(RVA = "0x14BECB8", Offset = "0x14BECB8", VA = "0x14BECB8")]
	public static extern byte CSharp_AkMIDIEvent_tNoteAftertouch_byValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F0B")]
	[Address(RVA = "0x14BED50", Offset = "0x14BED50", VA = "0x14BED50")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tNoteAftertouch();

	[PreserveSig]
	[Token(Token = "0x6000F0C")]
	[Address(RVA = "0x14BEDD8", Offset = "0x14BEDD8", VA = "0x14BEDD8")]
	public static extern void CSharp_delete_AkMIDIEvent_tNoteAftertouch(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F0D")]
	[Address(RVA = "0x14BEE70", Offset = "0x14BEE70", VA = "0x14BEE70")]
	public static extern void CSharp_AkMIDIEvent_tChanAftertouch_byValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F0E")]
	[Address(RVA = "0x14BEF18", Offset = "0x14BEF18", VA = "0x14BEF18")]
	public static extern byte CSharp_AkMIDIEvent_tChanAftertouch_byValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F0F")]
	[Address(RVA = "0x14BEFB0", Offset = "0x14BEFB0", VA = "0x14BEFB0")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tChanAftertouch();

	[PreserveSig]
	[Token(Token = "0x6000F10")]
	[Address(RVA = "0x14BF038", Offset = "0x14BF038", VA = "0x14BF038")]
	public static extern void CSharp_delete_AkMIDIEvent_tChanAftertouch(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F11")]
	[Address(RVA = "0x14BF0D0", Offset = "0x14BF0D0", VA = "0x14BF0D0")]
	public static extern void CSharp_AkMIDIEvent_tProgramChange_byProgramNum_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F12")]
	[Address(RVA = "0x14BF178", Offset = "0x14BF178", VA = "0x14BF178")]
	public static extern byte CSharp_AkMIDIEvent_tProgramChange_byProgramNum_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F13")]
	[Address(RVA = "0x14BF210", Offset = "0x14BF210", VA = "0x14BF210")]
	public static extern IntPtr CSharp_new_AkMIDIEvent_tProgramChange();

	[PreserveSig]
	[Token(Token = "0x6000F14")]
	[Address(RVA = "0x14BF298", Offset = "0x14BF298", VA = "0x14BF298")]
	public static extern void CSharp_delete_AkMIDIEvent_tProgramChange(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F15")]
	[Address(RVA = "0x14BF330", Offset = "0x14BF330", VA = "0x14BF330")]
	public static extern void CSharp_AkMIDIEvent_Gen_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F16")]
	[Address(RVA = "0x14BF3D8", Offset = "0x14BF3D8", VA = "0x14BF3D8")]
	public static extern IntPtr CSharp_AkMIDIEvent_Gen_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F17")]
	[Address(RVA = "0x14BF470", Offset = "0x14BF470", VA = "0x14BF470")]
	public static extern void CSharp_AkMIDIEvent_Cc_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F18")]
	[Address(RVA = "0x14BF518", Offset = "0x14BF518", VA = "0x14BF518")]
	public static extern IntPtr CSharp_AkMIDIEvent_Cc_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F19")]
	[Address(RVA = "0x14BF5B0", Offset = "0x14BF5B0", VA = "0x14BF5B0")]
	public static extern void CSharp_AkMIDIEvent_NoteOnOff_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F1A")]
	[Address(RVA = "0x14BF658", Offset = "0x14BF658", VA = "0x14BF658")]
	public static extern IntPtr CSharp_AkMIDIEvent_NoteOnOff_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F1B")]
	[Address(RVA = "0x14BF6F0", Offset = "0x14BF6F0", VA = "0x14BF6F0")]
	public static extern void CSharp_AkMIDIEvent_PitchBend_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F1C")]
	[Address(RVA = "0x14BF798", Offset = "0x14BF798", VA = "0x14BF798")]
	public static extern IntPtr CSharp_AkMIDIEvent_PitchBend_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F1D")]
	[Address(RVA = "0x14BF830", Offset = "0x14BF830", VA = "0x14BF830")]
	public static extern void CSharp_AkMIDIEvent_NoteAftertouch_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F1E")]
	[Address(RVA = "0x14BF8D8", Offset = "0x14BF8D8", VA = "0x14BF8D8")]
	public static extern IntPtr CSharp_AkMIDIEvent_NoteAftertouch_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F1F")]
	[Address(RVA = "0x14BF970", Offset = "0x14BF970", VA = "0x14BF970")]
	public static extern void CSharp_AkMIDIEvent_ChanAftertouch_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F20")]
	[Address(RVA = "0x14BFA18", Offset = "0x14BFA18", VA = "0x14BFA18")]
	public static extern IntPtr CSharp_AkMIDIEvent_ChanAftertouch_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F21")]
	[Address(RVA = "0x14BFAB0", Offset = "0x14BFAB0", VA = "0x14BFAB0")]
	public static extern void CSharp_AkMIDIEvent_ProgramChange_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F22")]
	[Address(RVA = "0x14BFB58", Offset = "0x14BFB58", VA = "0x14BFB58")]
	public static extern IntPtr CSharp_AkMIDIEvent_ProgramChange_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F23")]
	[Address(RVA = "0x14BFBF0", Offset = "0x14BFBF0", VA = "0x14BFBF0")]
	public static extern void CSharp_AkMIDIEvent_byType_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F24")]
	[Address(RVA = "0x14BFC98", Offset = "0x14BFC98", VA = "0x14BFC98")]
	public static extern int CSharp_AkMIDIEvent_byType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F25")]
	[Address(RVA = "0x14BFD30", Offset = "0x14BFD30", VA = "0x14BFD30")]
	public static extern void CSharp_AkMIDIEvent_byOnOffNote_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F26")]
	[Address(RVA = "0x14BFDD8", Offset = "0x14BFDD8", VA = "0x14BFDD8")]
	public static extern byte CSharp_AkMIDIEvent_byOnOffNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F27")]
	[Address(RVA = "0x14BFE70", Offset = "0x14BFE70", VA = "0x14BFE70")]
	public static extern void CSharp_AkMIDIEvent_byVelocity_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F28")]
	[Address(RVA = "0x14BFF18", Offset = "0x14BFF18", VA = "0x14BFF18")]
	public static extern byte CSharp_AkMIDIEvent_byVelocity_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F29")]
	[Address(RVA = "0x14BFFB0", Offset = "0x14BFFB0", VA = "0x14BFFB0")]
	public static extern void CSharp_AkMIDIEvent_byCc_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F2A")]
	[Address(RVA = "0x14C0058", Offset = "0x14C0058", VA = "0x14C0058")]
	public static extern int CSharp_AkMIDIEvent_byCc_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F2B")]
	[Address(RVA = "0x14C00F0", Offset = "0x14C00F0", VA = "0x14C00F0")]
	public static extern void CSharp_AkMIDIEvent_byCcValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F2C")]
	[Address(RVA = "0x14C0198", Offset = "0x14C0198", VA = "0x14C0198")]
	public static extern byte CSharp_AkMIDIEvent_byCcValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F2D")]
	[Address(RVA = "0x14C0230", Offset = "0x14C0230", VA = "0x14C0230")]
	public static extern void CSharp_AkMIDIEvent_byValueLsb_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F2E")]
	[Address(RVA = "0x14C02D8", Offset = "0x14C02D8", VA = "0x14C02D8")]
	public static extern byte CSharp_AkMIDIEvent_byValueLsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F2F")]
	[Address(RVA = "0x14C0370", Offset = "0x14C0370", VA = "0x14C0370")]
	public static extern void CSharp_AkMIDIEvent_byValueMsb_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F30")]
	[Address(RVA = "0x14C0418", Offset = "0x14C0418", VA = "0x14C0418")]
	public static extern byte CSharp_AkMIDIEvent_byValueMsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F31")]
	[Address(RVA = "0x14C04B0", Offset = "0x14C04B0", VA = "0x14C04B0")]
	public static extern void CSharp_AkMIDIEvent_byAftertouchNote_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F32")]
	[Address(RVA = "0x14C0558", Offset = "0x14C0558", VA = "0x14C0558")]
	public static extern byte CSharp_AkMIDIEvent_byAftertouchNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F33")]
	[Address(RVA = "0x14C05F0", Offset = "0x14C05F0", VA = "0x14C05F0")]
	public static extern void CSharp_AkMIDIEvent_byNoteAftertouchValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F34")]
	[Address(RVA = "0x14C0698", Offset = "0x14C0698", VA = "0x14C0698")]
	public static extern byte CSharp_AkMIDIEvent_byNoteAftertouchValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F35")]
	[Address(RVA = "0x14C0730", Offset = "0x14C0730", VA = "0x14C0730")]
	public static extern void CSharp_AkMIDIEvent_byChanAftertouchValue_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F36")]
	[Address(RVA = "0x14C07D8", Offset = "0x14C07D8", VA = "0x14C07D8")]
	public static extern byte CSharp_AkMIDIEvent_byChanAftertouchValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F37")]
	[Address(RVA = "0x14C0870", Offset = "0x14C0870", VA = "0x14C0870")]
	public static extern void CSharp_AkMIDIEvent_byProgramNum_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F38")]
	[Address(RVA = "0x14C0918", Offset = "0x14C0918", VA = "0x14C0918")]
	public static extern byte CSharp_AkMIDIEvent_byProgramNum_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F39")]
	[Address(RVA = "0x14C09B0", Offset = "0x14C09B0", VA = "0x14C09B0")]
	public static extern IntPtr CSharp_new_AkMIDIEvent();

	[PreserveSig]
	[Token(Token = "0x6000F3A")]
	[Address(RVA = "0x14C0A38", Offset = "0x14C0A38", VA = "0x14C0A38")]
	public static extern void CSharp_delete_AkMIDIEvent(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F3B")]
	[Address(RVA = "0x14C0AD0", Offset = "0x14C0AD0", VA = "0x14C0AD0")]
	public static extern void CSharp_AkMIDIPost_uOffset_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F3C")]
	[Address(RVA = "0x14C0B78", Offset = "0x14C0B78", VA = "0x14C0B78")]
	public static extern uint CSharp_AkMIDIPost_uOffset_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F3D")]
	[Address(RVA = "0x14C0C10", Offset = "0x14C0C10", VA = "0x14C0C10")]
	public static extern int CSharp_AkMIDIPost_PostOnEvent(IntPtr jarg1, uint jarg2, ulong jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6000F3E")]
	[Address(RVA = "0x14C0CD0", Offset = "0x14C0CD0", VA = "0x14C0CD0")]
	public static extern void CSharp_AkMIDIPost_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F3F")]
	[Address(RVA = "0x14C0D78", Offset = "0x14C0D78", VA = "0x14C0D78")]
	public static extern int CSharp_AkMIDIPost_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6000F40")]
	[Address(RVA = "0x14C0E00", Offset = "0x14C0E00", VA = "0x14C0E00")]
	public static extern IntPtr CSharp_new_AkMIDIPost();

	[PreserveSig]
	[Token(Token = "0x6000F41")]
	[Address(RVA = "0x14C0E88", Offset = "0x14C0E88", VA = "0x14C0E88")]
	public static extern void CSharp_delete_AkMIDIPost(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F42")]
	[Address(RVA = "0x14C0F20", Offset = "0x14C0F20", VA = "0x14C0F20")]
	public static extern IntPtr CSharp_new_AkMemSettings();

	[PreserveSig]
	[Token(Token = "0x6000F43")]
	[Address(RVA = "0x14C0FA8", Offset = "0x14C0FA8", VA = "0x14C0FA8")]
	public static extern void CSharp_AkMemSettings_uMaxNumPools_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F44")]
	[Address(RVA = "0x14C1050", Offset = "0x14C1050", VA = "0x14C1050")]
	public static extern uint CSharp_AkMemSettings_uMaxNumPools_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F45")]
	[Address(RVA = "0x14C10E8", Offset = "0x14C10E8", VA = "0x14C10E8")]
	public static extern void CSharp_AkMemSettings_uDebugFlags_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F46")]
	[Address(RVA = "0x14C1190", Offset = "0x14C1190", VA = "0x14C1190")]
	public static extern uint CSharp_AkMemSettings_uDebugFlags_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F47")]
	[Address(RVA = "0x14C1228", Offset = "0x14C1228", VA = "0x14C1228")]
	public static extern void CSharp_delete_AkMemSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F48")]
	[Address(RVA = "0x14C12C0", Offset = "0x14C12C0", VA = "0x14C12C0")]
	public static extern void CSharp_AkMusicSettings_fStreamingLookAheadRatio_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F49")]
	[Address(RVA = "0x14C1368", Offset = "0x14C1368", VA = "0x14C1368")]
	public static extern float CSharp_AkMusicSettings_fStreamingLookAheadRatio_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F4A")]
	[Address(RVA = "0x14C1400", Offset = "0x14C1400", VA = "0x14C1400")]
	public static extern IntPtr CSharp_new_AkMusicSettings();

	[PreserveSig]
	[Token(Token = "0x6000F4B")]
	[Address(RVA = "0x14C1488", Offset = "0x14C1488", VA = "0x14C1488")]
	public static extern void CSharp_delete_AkMusicSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0x14C1520", Offset = "0x14C1520", VA = "0x14C1520")]
	public static extern int CSharp_GetPlayingSegmentInfo__SWIG_0(uint jarg1, IntPtr jarg2, bool jarg3);

	[PreserveSig]
	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0x14C15D0", Offset = "0x14C15D0", VA = "0x14C15D0")]
	public static extern int CSharp_GetPlayingSegmentInfo__SWIG_1(uint jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000F4E")]
	[Address(RVA = "0x14C1678", Offset = "0x14C1678", VA = "0x14C1678")]
	public static extern IntPtr CSharp_AkSerializedCallbackHeader_pPackage_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0x14C1710", Offset = "0x14C1710", VA = "0x14C1710")]
	public static extern IntPtr CSharp_AkSerializedCallbackHeader_pNext_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F50")]
	[Address(RVA = "0x14C17A8", Offset = "0x14C17A8", VA = "0x14C17A8")]
	public static extern int CSharp_AkSerializedCallbackHeader_eType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F51")]
	[Address(RVA = "0x14C1840", Offset = "0x14C1840", VA = "0x14C1840")]
	public static extern IntPtr CSharp_AkSerializedCallbackHeader_GetData(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F52")]
	[Address(RVA = "0x14C18D8", Offset = "0x14C18D8", VA = "0x14C18D8")]
	public static extern IntPtr CSharp_new_AkSerializedCallbackHeader();

	[PreserveSig]
	[Token(Token = "0x6000F53")]
	[Address(RVA = "0x14C1960", Offset = "0x14C1960", VA = "0x14C1960")]
	public static extern void CSharp_delete_AkSerializedCallbackHeader(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F54")]
	[Address(RVA = "0x14C19F8", Offset = "0x14C19F8", VA = "0x14C19F8")]
	public static extern IntPtr CSharp_AkCallbackInfo_pCookie_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F55")]
	[Address(RVA = "0x14C1A90", Offset = "0x14C1A90", VA = "0x14C1A90")]
	public static extern ulong CSharp_AkCallbackInfo_gameObjID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F56")]
	[Address(RVA = "0x14C1B28", Offset = "0x14C1B28", VA = "0x14C1B28")]
	public static extern IntPtr CSharp_new_AkCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F57")]
	[Address(RVA = "0x14C1BB0", Offset = "0x14C1BB0", VA = "0x14C1BB0")]
	public static extern void CSharp_delete_AkCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F58")]
	[Address(RVA = "0x14C1C48", Offset = "0x14C1C48", VA = "0x14C1C48")]
	public static extern uint CSharp_AkEventCallbackInfo_playingID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F59")]
	[Address(RVA = "0x14C1CE0", Offset = "0x14C1CE0", VA = "0x14C1CE0")]
	public static extern uint CSharp_AkEventCallbackInfo_eventID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0x14C1D78", Offset = "0x14C1D78", VA = "0x14C1D78")]
	public static extern IntPtr CSharp_new_AkEventCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0x14C1E00", Offset = "0x14C1E00", VA = "0x14C1E00")]
	public static extern void CSharp_delete_AkEventCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F5C")]
	[Address(RVA = "0x14C1E98", Offset = "0x14C1E98", VA = "0x14C1E98")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byChan_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F5D")]
	[Address(RVA = "0x14C1F30", Offset = "0x14C1F30", VA = "0x14C1F30")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byParam1_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F5E")]
	[Address(RVA = "0x14C1FC8", Offset = "0x14C1FC8", VA = "0x14C1FC8")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byParam2_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F5F")]
	[Address(RVA = "0x14C2060", Offset = "0x14C2060", VA = "0x14C2060")]
	public static extern int CSharp_AkMIDIEventCallbackInfo_byType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F60")]
	[Address(RVA = "0x14C20F8", Offset = "0x14C20F8", VA = "0x14C20F8")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byOnOffNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F61")]
	[Address(RVA = "0x14C2190", Offset = "0x14C2190", VA = "0x14C2190")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byVelocity_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F62")]
	[Address(RVA = "0x14C2228", Offset = "0x14C2228", VA = "0x14C2228")]
	public static extern int CSharp_AkMIDIEventCallbackInfo_byCc_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F63")]
	[Address(RVA = "0x14C22C0", Offset = "0x14C22C0", VA = "0x14C22C0")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byCcValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F64")]
	[Address(RVA = "0x14C2358", Offset = "0x14C2358", VA = "0x14C2358")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byValueLsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F65")]
	[Address(RVA = "0x14C23F0", Offset = "0x14C23F0", VA = "0x14C23F0")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byValueMsb_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F66")]
	[Address(RVA = "0x14C2488", Offset = "0x14C2488", VA = "0x14C2488")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byAftertouchNote_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F67")]
	[Address(RVA = "0x14C2520", Offset = "0x14C2520", VA = "0x14C2520")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byNoteAftertouchValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F68")]
	[Address(RVA = "0x14C25B8", Offset = "0x14C25B8", VA = "0x14C25B8")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byChanAftertouchValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F69")]
	[Address(RVA = "0x14C2650", Offset = "0x14C2650", VA = "0x14C2650")]
	public static extern byte CSharp_AkMIDIEventCallbackInfo_byProgramNum_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F6A")]
	[Address(RVA = "0x14C26E8", Offset = "0x14C26E8", VA = "0x14C26E8")]
	public static extern IntPtr CSharp_new_AkMIDIEventCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F6B")]
	[Address(RVA = "0x14C2770", Offset = "0x14C2770", VA = "0x14C2770")]
	public static extern void CSharp_delete_AkMIDIEventCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F6C")]
	[Address(RVA = "0x14C2808", Offset = "0x14C2808", VA = "0x14C2808")]
	public static extern uint CSharp_AkMarkerCallbackInfo_uIdentifier_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F6D")]
	[Address(RVA = "0x14C28A0", Offset = "0x14C28A0", VA = "0x14C28A0")]
	public static extern uint CSharp_AkMarkerCallbackInfo_uPosition_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F6E")]
	[Address(RVA = "0x14C2938", Offset = "0x14C2938", VA = "0x14C2938")]
	public static extern IntPtr CSharp_AkMarkerCallbackInfo_strLabel_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F6F")]
	[Address(RVA = "0x14C29D0", Offset = "0x14C29D0", VA = "0x14C29D0")]
	public static extern IntPtr CSharp_new_AkMarkerCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F70")]
	[Address(RVA = "0x14C2A58", Offset = "0x14C2A58", VA = "0x14C2A58")]
	public static extern void CSharp_delete_AkMarkerCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F71")]
	[Address(RVA = "0x14C2AF0", Offset = "0x14C2AF0", VA = "0x14C2AF0")]
	public static extern float CSharp_AkDurationCallbackInfo_fDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F72")]
	[Address(RVA = "0x14C2B88", Offset = "0x14C2B88", VA = "0x14C2B88")]
	public static extern float CSharp_AkDurationCallbackInfo_fEstimatedDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F73")]
	[Address(RVA = "0x14C2C20", Offset = "0x14C2C20", VA = "0x14C2C20")]
	public static extern uint CSharp_AkDurationCallbackInfo_audioNodeID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F74")]
	[Address(RVA = "0x14C2CB8", Offset = "0x14C2CB8", VA = "0x14C2CB8")]
	public static extern uint CSharp_AkDurationCallbackInfo_mediaID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F75")]
	[Address(RVA = "0x14C2D50", Offset = "0x14C2D50", VA = "0x14C2D50")]
	public static extern bool CSharp_AkDurationCallbackInfo_bStreaming_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F76")]
	[Address(RVA = "0x14C2DF0", Offset = "0x14C2DF0", VA = "0x14C2DF0")]
	public static extern IntPtr CSharp_new_AkDurationCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F77")]
	[Address(RVA = "0x14C2E78", Offset = "0x14C2E78", VA = "0x14C2E78")]
	public static extern void CSharp_delete_AkDurationCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F78")]
	[Address(RVA = "0x14C2F10", Offset = "0x14C2F10", VA = "0x14C2F10")]
	public static extern uint CSharp_AkDynamicSequenceItemCallbackInfo_playingID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F79")]
	[Address(RVA = "0x14C2FA8", Offset = "0x14C2FA8", VA = "0x14C2FA8")]
	public static extern uint CSharp_AkDynamicSequenceItemCallbackInfo_audioNodeID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0x14C3040", Offset = "0x14C3040", VA = "0x14C3040")]
	public static extern IntPtr CSharp_AkDynamicSequenceItemCallbackInfo_pCustomInfo_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0x14C30D8", Offset = "0x14C30D8", VA = "0x14C30D8")]
	public static extern IntPtr CSharp_new_AkDynamicSequenceItemCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0x14C3160", Offset = "0x14C3160", VA = "0x14C3160")]
	public static extern void CSharp_delete_AkDynamicSequenceItemCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F7D")]
	[Address(RVA = "0x14C31F8", Offset = "0x14C31F8", VA = "0x14C31F8")]
	public static extern uint CSharp_AkMusicSyncCallbackInfo_playingID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F7E")]
	[Address(RVA = "0x14C3290", Offset = "0x14C3290", VA = "0x14C3290")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iCurrentPosition_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F7F")]
	[Address(RVA = "0x14C3328", Offset = "0x14C3328", VA = "0x14C3328")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iPreEntryDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F80")]
	[Address(RVA = "0x14C33C0", Offset = "0x14C33C0", VA = "0x14C33C0")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iActiveDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F81")]
	[Address(RVA = "0x14C3458", Offset = "0x14C3458", VA = "0x14C3458")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iPostExitDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F82")]
	[Address(RVA = "0x14C34F0", Offset = "0x14C34F0", VA = "0x14C34F0")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_segmentInfo_iRemainingLookAheadTime_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F83")]
	[Address(RVA = "0x14C3588", Offset = "0x14C3588", VA = "0x14C3588")]
	public static extern float CSharp_AkMusicSyncCallbackInfo_segmentInfo_fBeatDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F84")]
	[Address(RVA = "0x14C3620", Offset = "0x14C3620", VA = "0x14C3620")]
	public static extern float CSharp_AkMusicSyncCallbackInfo_segmentInfo_fBarDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F85")]
	[Address(RVA = "0x14C36B8", Offset = "0x14C36B8", VA = "0x14C36B8")]
	public static extern float CSharp_AkMusicSyncCallbackInfo_segmentInfo_fGridDuration_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F86")]
	[Address(RVA = "0x14C3750", Offset = "0x14C3750", VA = "0x14C3750")]
	public static extern float CSharp_AkMusicSyncCallbackInfo_segmentInfo_fGridOffset_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F87")]
	[Address(RVA = "0x14C37E8", Offset = "0x14C37E8", VA = "0x14C37E8")]
	public static extern int CSharp_AkMusicSyncCallbackInfo_musicSyncType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F88")]
	[Address(RVA = "0x14C3880", Offset = "0x14C3880", VA = "0x14C3880")]
	public static extern IntPtr CSharp_AkMusicSyncCallbackInfo_userCueName_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F89")]
	[Address(RVA = "0x14C3918", Offset = "0x14C3918", VA = "0x14C3918")]
	public static extern IntPtr CSharp_new_AkMusicSyncCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F8A")]
	[Address(RVA = "0x14C39A0", Offset = "0x14C39A0", VA = "0x14C39A0")]
	public static extern void CSharp_delete_AkMusicSyncCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F8B")]
	[Address(RVA = "0x14C3A38", Offset = "0x14C3A38", VA = "0x14C3A38")]
	public static extern uint CSharp_AkMusicPlaylistCallbackInfo_playlistID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F8C")]
	[Address(RVA = "0x14C3AD0", Offset = "0x14C3AD0", VA = "0x14C3AD0")]
	public static extern uint CSharp_AkMusicPlaylistCallbackInfo_uNumPlaylistItems_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F8D")]
	[Address(RVA = "0x14C3B68", Offset = "0x14C3B68", VA = "0x14C3B68")]
	public static extern uint CSharp_AkMusicPlaylistCallbackInfo_uPlaylistSelection_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F8E")]
	[Address(RVA = "0x14C3C00", Offset = "0x14C3C00", VA = "0x14C3C00")]
	public static extern uint CSharp_AkMusicPlaylistCallbackInfo_uPlaylistItemDone_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F8F")]
	[Address(RVA = "0x14C3C98", Offset = "0x14C3C98", VA = "0x14C3C98")]
	public static extern IntPtr CSharp_new_AkMusicPlaylistCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F90")]
	[Address(RVA = "0x14C3D20", Offset = "0x14C3D20", VA = "0x14C3D20")]
	public static extern void CSharp_delete_AkMusicPlaylistCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F91")]
	[Address(RVA = "0x14C3DB8", Offset = "0x14C3DB8", VA = "0x14C3DB8")]
	public static extern uint CSharp_AkBankCallbackInfo_bankID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F92")]
	[Address(RVA = "0x14C3E50", Offset = "0x14C3E50", VA = "0x14C3E50")]
	public static extern IntPtr CSharp_AkBankCallbackInfo_inMemoryBankPtr_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F93")]
	[Address(RVA = "0x14C3EE8", Offset = "0x14C3EE8", VA = "0x14C3EE8")]
	public static extern int CSharp_AkBankCallbackInfo_loadResult_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F94")]
	[Address(RVA = "0x14C3F80", Offset = "0x14C3F80", VA = "0x14C3F80")]
	public static extern int CSharp_AkBankCallbackInfo_memPoolId_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F95")]
	[Address(RVA = "0x14C4018", Offset = "0x14C4018", VA = "0x14C4018")]
	public static extern IntPtr CSharp_new_AkBankCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F96")]
	[Address(RVA = "0x14C40A0", Offset = "0x14C40A0", VA = "0x14C40A0")]
	public static extern void CSharp_delete_AkBankCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F97")]
	[Address(RVA = "0x14C4138", Offset = "0x14C4138", VA = "0x14C4138")]
	public static extern int CSharp_AkMonitoringCallbackInfo_errorCode_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F98")]
	[Address(RVA = "0x14C41D0", Offset = "0x14C41D0", VA = "0x14C41D0")]
	public static extern int CSharp_AkMonitoringCallbackInfo_errorLevel_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F99")]
	[Address(RVA = "0x14C4268", Offset = "0x14C4268", VA = "0x14C4268")]
	public static extern uint CSharp_AkMonitoringCallbackInfo_playingID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F9A")]
	[Address(RVA = "0x14C4300", Offset = "0x14C4300", VA = "0x14C4300")]
	public static extern ulong CSharp_AkMonitoringCallbackInfo_gameObjID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F9B")]
	[Address(RVA = "0x14C4398", Offset = "0x14C4398", VA = "0x14C4398")]
	public static extern IntPtr CSharp_AkMonitoringCallbackInfo_message_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F9C")]
	[Address(RVA = "0x14C4430", Offset = "0x14C4430", VA = "0x14C4430")]
	public static extern IntPtr CSharp_new_AkMonitoringCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000F9D")]
	[Address(RVA = "0x14C44B8", Offset = "0x14C44B8", VA = "0x14C44B8")]
	public static extern void CSharp_delete_AkMonitoringCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F9E")]
	[Address(RVA = "0x14C4550", Offset = "0x14C4550", VA = "0x14C4550")]
	public static extern bool CSharp_AkAudioInterruptionCallbackInfo_bEnterInterruption_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000F9F")]
	[Address(RVA = "0x14C45F0", Offset = "0x14C45F0", VA = "0x14C45F0")]
	public static extern IntPtr CSharp_new_AkAudioInterruptionCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000FA0")]
	[Address(RVA = "0x14C4678", Offset = "0x14C4678", VA = "0x14C4678")]
	public static extern void CSharp_delete_AkAudioInterruptionCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FA1")]
	[Address(RVA = "0x14C4710", Offset = "0x14C4710", VA = "0x14C4710")]
	public static extern bool CSharp_AkAudioSourceChangeCallbackInfo_bOtherAudioPlaying_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FA2")]
	[Address(RVA = "0x14C47B0", Offset = "0x14C47B0", VA = "0x14C47B0")]
	public static extern IntPtr CSharp_new_AkAudioSourceChangeCallbackInfo();

	[PreserveSig]
	[Token(Token = "0x6000FA3")]
	[Address(RVA = "0x14C4838", Offset = "0x14C4838", VA = "0x14C4838")]
	public static extern void CSharp_delete_AkAudioSourceChangeCallbackInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FA4")]
	[Address(RVA = "0x14C48D0", Offset = "0x14C48D0", VA = "0x14C48D0")]
	public static extern int CSharp_AkCallbackSerializer_Init(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FA5")]
	[Address(RVA = "0x14C4978", Offset = "0x14C4978", VA = "0x14C4978")]
	public static extern void CSharp_AkCallbackSerializer_Term();

	[PreserveSig]
	[Token(Token = "0x6000FA6")]
	[Address(RVA = "0x14C4A00", Offset = "0x14C4A00", VA = "0x14C4A00")]
	public static extern IntPtr CSharp_AkCallbackSerializer_Lock();

	[PreserveSig]
	[Token(Token = "0x6000FA7")]
	[Address(RVA = "0x14C4A88", Offset = "0x14C4A88", VA = "0x14C4A88")]
	public static extern void CSharp_AkCallbackSerializer_SetLocalOutput(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FA8")]
	[Address(RVA = "0x14C4B20", Offset = "0x14C4B20", VA = "0x14C4B20")]
	public static extern void CSharp_AkCallbackSerializer_Unlock();

	[PreserveSig]
	[Token(Token = "0x6000FA9")]
	[Address(RVA = "0x14C4BA8", Offset = "0x14C4BA8", VA = "0x14C4BA8")]
	public static extern int CSharp_AkCallbackSerializer_AudioSourceChangeCallbackFunc(bool jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FAA")]
	[Address(RVA = "0x14C4C50", Offset = "0x14C4C50", VA = "0x14C4C50")]
	public static extern IntPtr CSharp_new_AkCallbackSerializer();

	[PreserveSig]
	[Token(Token = "0x6000FAB")]
	[Address(RVA = "0x14C4CD8", Offset = "0x14C4CD8", VA = "0x14C4CD8")]
	public static extern void CSharp_delete_AkCallbackSerializer(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FAC")]
	[Address(RVA = "0x14C4D70", Offset = "0x14C4D70", VA = "0x14C4D70")]
	public static extern int CSharp_PostCode__SWIG_0(int jarg1, int jarg2, uint jarg3, ulong jarg4, uint jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x6000FAD")]
	[Address(RVA = "0x14C4E48", Offset = "0x14C4E48", VA = "0x14C4E48")]
	public static extern int CSharp_PostCode__SWIG_1(int jarg1, int jarg2, uint jarg3, ulong jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000FAE")]
	[Address(RVA = "0x14C4F10", Offset = "0x14C4F10", VA = "0x14C4F10")]
	public static extern int CSharp_PostCode__SWIG_2(int jarg1, int jarg2, uint jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x6000FAF")]
	[Address(RVA = "0x14C4FD0", Offset = "0x14C4FD0", VA = "0x14C4FD0")]
	public static extern int CSharp_PostCode__SWIG_3(int jarg1, int jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FB0")]
	[Address(RVA = "0x14C5080", Offset = "0x14C5080", VA = "0x14C5080")]
	public static extern int CSharp_PostCode__SWIG_4(int jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FB1")]
	[Address(RVA = "0x14C5128", Offset = "0x14C5128", VA = "0x14C5128")]
	public static extern int CSharp_PostString__SWIG_0(string jarg1, int jarg2, uint jarg3, ulong jarg4, uint jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x6000FB2")]
	[Address(RVA = "0x14C5218", Offset = "0x14C5218", VA = "0x14C5218")]
	public static extern int CSharp_PostString__SWIG_1(string jarg1, int jarg2, uint jarg3, ulong jarg4, uint jarg5);

	[PreserveSig]
	[Token(Token = "0x6000FB3")]
	[Address(RVA = "0x14C52F8", Offset = "0x14C52F8", VA = "0x14C52F8")]
	public static extern int CSharp_PostString__SWIG_2(string jarg1, int jarg2, uint jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x6000FB4")]
	[Address(RVA = "0x14C53D0", Offset = "0x14C53D0", VA = "0x14C53D0")]
	public static extern int CSharp_PostString__SWIG_3(string jarg1, int jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FB5")]
	[Address(RVA = "0x14C5498", Offset = "0x14C5498", VA = "0x14C5498")]
	public static extern int CSharp_PostString__SWIG_4(string jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FB6")]
	[Address(RVA = "0x14C5558", Offset = "0x14C5558", VA = "0x14C5558")]
	public static extern int CSharp_GetTimeStamp();

	[PreserveSig]
	[Token(Token = "0x6000FB7")]
	[Address(RVA = "0x14C55E0", Offset = "0x14C55E0", VA = "0x14C55E0")]
	public static extern uint CSharp_GetNumNonZeroBits(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FB8")]
	[Address(RVA = "0x14C5678", Offset = "0x14C5678", VA = "0x14C5678")]
	public static extern void CSharp_AkGetDefaultHighPriorityThreadProperties(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FB9")]
	[Address(RVA = "0x14C5710", Offset = "0x14C5710", VA = "0x14C5710")]
	public static extern uint CSharp_ResolveDialogueEvent__SWIG_0(uint jarg1, [In] uint[] jarg2, uint jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6000FBA")]
	[Address(RVA = "0x14C57D8", Offset = "0x14C57D8", VA = "0x14C57D8")]
	public static extern uint CSharp_ResolveDialogueEvent__SWIG_1(uint jarg1, [In] uint[] jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FBB")]
	[Address(RVA = "0x14C5890", Offset = "0x14C5890", VA = "0x14C5890")]
	public static extern int CSharp_GetDialogueEventCustomPropertyValue__SWIG_0(uint jarg1, uint jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FBC")]
	[Address(RVA = "0x14C5940", Offset = "0x14C5940", VA = "0x14C5940")]
	public static extern int CSharp_GetDialogueEventCustomPropertyValue__SWIG_1(uint jarg1, uint jarg2, out float jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FBD")]
	[Address(RVA = "0x14C59F0", Offset = "0x14C59F0", VA = "0x14C59F0")]
	public static extern void CSharp_AkPositioningInfo_fCenterPct_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FBE")]
	[Address(RVA = "0x14C5A98", Offset = "0x14C5A98", VA = "0x14C5A98")]
	public static extern float CSharp_AkPositioningInfo_fCenterPct_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FBF")]
	[Address(RVA = "0x14C5B30", Offset = "0x14C5B30", VA = "0x14C5B30")]
	public static extern void CSharp_AkPositioningInfo_pannerType_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FC0")]
	[Address(RVA = "0x14C5BD8", Offset = "0x14C5BD8", VA = "0x14C5BD8")]
	public static extern int CSharp_AkPositioningInfo_pannerType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FC1")]
	[Address(RVA = "0x14C5C70", Offset = "0x14C5C70", VA = "0x14C5C70")]
	public static extern void CSharp_AkPositioningInfo_e3dPositioningType_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FC2")]
	[Address(RVA = "0x14C5D18", Offset = "0x14C5D18", VA = "0x14C5D18")]
	public static extern int CSharp_AkPositioningInfo_e3dPositioningType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FC3")]
	[Address(RVA = "0x14C5DB0", Offset = "0x14C5DB0", VA = "0x14C5DB0")]
	public static extern void CSharp_AkPositioningInfo_bHoldEmitterPosAndOrient_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FC4")]
	[Address(RVA = "0x14C5E58", Offset = "0x14C5E58", VA = "0x14C5E58")]
	public static extern bool CSharp_AkPositioningInfo_bHoldEmitterPosAndOrient_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FC5")]
	[Address(RVA = "0x14C5EF8", Offset = "0x14C5EF8", VA = "0x14C5EF8")]
	public static extern void CSharp_AkPositioningInfo_e3DSpatializationMode_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FC6")]
	[Address(RVA = "0x14C5FA0", Offset = "0x14C5FA0", VA = "0x14C5FA0")]
	public static extern int CSharp_AkPositioningInfo_e3DSpatializationMode_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FC7")]
	[Address(RVA = "0x14C6038", Offset = "0x14C6038", VA = "0x14C6038")]
	public static extern void CSharp_AkPositioningInfo_bEnableAttenuation_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FC8")]
	[Address(RVA = "0x14C60E0", Offset = "0x14C60E0", VA = "0x14C60E0")]
	public static extern bool CSharp_AkPositioningInfo_bEnableAttenuation_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FC9")]
	[Address(RVA = "0x14C6180", Offset = "0x14C6180", VA = "0x14C6180")]
	public static extern void CSharp_AkPositioningInfo_bUseConeAttenuation_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FCA")]
	[Address(RVA = "0x14C6228", Offset = "0x14C6228", VA = "0x14C6228")]
	public static extern bool CSharp_AkPositioningInfo_bUseConeAttenuation_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FCB")]
	[Address(RVA = "0x14C62C8", Offset = "0x14C62C8", VA = "0x14C62C8")]
	public static extern void CSharp_AkPositioningInfo_fInnerAngle_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FCC")]
	[Address(RVA = "0x14C6370", Offset = "0x14C6370", VA = "0x14C6370")]
	public static extern float CSharp_AkPositioningInfo_fInnerAngle_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FCD")]
	[Address(RVA = "0x14C6408", Offset = "0x14C6408", VA = "0x14C6408")]
	public static extern void CSharp_AkPositioningInfo_fOuterAngle_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FCE")]
	[Address(RVA = "0x14C64B0", Offset = "0x14C64B0", VA = "0x14C64B0")]
	public static extern float CSharp_AkPositioningInfo_fOuterAngle_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FCF")]
	[Address(RVA = "0x14C6548", Offset = "0x14C6548", VA = "0x14C6548")]
	public static extern void CSharp_AkPositioningInfo_fConeMaxAttenuation_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FD0")]
	[Address(RVA = "0x14C65F0", Offset = "0x14C65F0", VA = "0x14C65F0")]
	public static extern float CSharp_AkPositioningInfo_fConeMaxAttenuation_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FD1")]
	[Address(RVA = "0x14C6688", Offset = "0x14C6688", VA = "0x14C6688")]
	public static extern void CSharp_AkPositioningInfo_LPFCone_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FD2")]
	[Address(RVA = "0x14C6730", Offset = "0x14C6730", VA = "0x14C6730")]
	public static extern float CSharp_AkPositioningInfo_LPFCone_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FD3")]
	[Address(RVA = "0x14C67C8", Offset = "0x14C67C8", VA = "0x14C67C8")]
	public static extern void CSharp_AkPositioningInfo_HPFCone_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0x14C6870", Offset = "0x14C6870", VA = "0x14C6870")]
	public static extern float CSharp_AkPositioningInfo_HPFCone_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0x14C6908", Offset = "0x14C6908", VA = "0x14C6908")]
	public static extern void CSharp_AkPositioningInfo_fMaxDistance_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0x14C69B0", Offset = "0x14C69B0", VA = "0x14C69B0")]
	public static extern float CSharp_AkPositioningInfo_fMaxDistance_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FD7")]
	[Address(RVA = "0x14C6A48", Offset = "0x14C6A48", VA = "0x14C6A48")]
	public static extern void CSharp_AkPositioningInfo_fVolDryAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FD8")]
	[Address(RVA = "0x14C6AF0", Offset = "0x14C6AF0", VA = "0x14C6AF0")]
	public static extern float CSharp_AkPositioningInfo_fVolDryAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FD9")]
	[Address(RVA = "0x14C6B88", Offset = "0x14C6B88", VA = "0x14C6B88")]
	public static extern void CSharp_AkPositioningInfo_fVolAuxGameDefAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FDA")]
	[Address(RVA = "0x14C6C30", Offset = "0x14C6C30", VA = "0x14C6C30")]
	public static extern float CSharp_AkPositioningInfo_fVolAuxGameDefAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FDB")]
	[Address(RVA = "0x14C6CC8", Offset = "0x14C6CC8", VA = "0x14C6CC8")]
	public static extern void CSharp_AkPositioningInfo_fVolAuxUserDefAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FDC")]
	[Address(RVA = "0x14C6D70", Offset = "0x14C6D70", VA = "0x14C6D70")]
	public static extern float CSharp_AkPositioningInfo_fVolAuxUserDefAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FDD")]
	[Address(RVA = "0x14C6E08", Offset = "0x14C6E08", VA = "0x14C6E08")]
	public static extern void CSharp_AkPositioningInfo_LPFValueAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FDE")]
	[Address(RVA = "0x14C6EB0", Offset = "0x14C6EB0", VA = "0x14C6EB0")]
	public static extern float CSharp_AkPositioningInfo_LPFValueAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FDF")]
	[Address(RVA = "0x14C6F48", Offset = "0x14C6F48", VA = "0x14C6F48")]
	public static extern void CSharp_AkPositioningInfo_HPFValueAtMaxDist_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FE0")]
	[Address(RVA = "0x14C6FF0", Offset = "0x14C6FF0", VA = "0x14C6FF0")]
	public static extern float CSharp_AkPositioningInfo_HPFValueAtMaxDist_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FE1")]
	[Address(RVA = "0x14C7088", Offset = "0x14C7088", VA = "0x14C7088")]
	public static extern IntPtr CSharp_new_AkPositioningInfo();

	[PreserveSig]
	[Token(Token = "0x6000FE2")]
	[Address(RVA = "0x14C7110", Offset = "0x14C7110", VA = "0x14C7110")]
	public static extern void CSharp_delete_AkPositioningInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FE3")]
	[Address(RVA = "0x14C71A8", Offset = "0x14C71A8", VA = "0x14C71A8")]
	public static extern void CSharp_AkObjectInfo_objID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FE4")]
	[Address(RVA = "0x14C7250", Offset = "0x14C7250", VA = "0x14C7250")]
	public static extern uint CSharp_AkObjectInfo_objID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FE5")]
	[Address(RVA = "0x14C72E8", Offset = "0x14C72E8", VA = "0x14C72E8")]
	public static extern void CSharp_AkObjectInfo_parentID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FE6")]
	[Address(RVA = "0x14C7390", Offset = "0x14C7390", VA = "0x14C7390")]
	public static extern uint CSharp_AkObjectInfo_parentID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FE7")]
	[Address(RVA = "0x14C7428", Offset = "0x14C7428", VA = "0x14C7428")]
	public static extern void CSharp_AkObjectInfo_iDepth_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FE8")]
	[Address(RVA = "0x14C74D0", Offset = "0x14C74D0", VA = "0x14C74D0")]
	public static extern int CSharp_AkObjectInfo_iDepth_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FE9")]
	[Address(RVA = "0x14C7568", Offset = "0x14C7568", VA = "0x14C7568")]
	public static extern void CSharp_AkObjectInfo_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FEA")]
	[Address(RVA = "0x14C7600", Offset = "0x14C7600", VA = "0x14C7600")]
	public static extern int CSharp_AkObjectInfo_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6000FEB")]
	[Address(RVA = "0x14C7688", Offset = "0x14C7688", VA = "0x14C7688")]
	public static extern void CSharp_AkObjectInfo_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FEC")]
	[Address(RVA = "0x14C7730", Offset = "0x14C7730", VA = "0x14C7730")]
	public static extern IntPtr CSharp_new_AkObjectInfo();

	[PreserveSig]
	[Token(Token = "0x6000FED")]
	[Address(RVA = "0x14C77B8", Offset = "0x14C77B8", VA = "0x14C77B8")]
	public static extern void CSharp_delete_AkObjectInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FEE")]
	[Address(RVA = "0x14C7850", Offset = "0x14C7850", VA = "0x14C7850")]
	public static extern int CSharp_GetPosition(ulong jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FEF")]
	[Address(RVA = "0x14C78F8", Offset = "0x14C78F8", VA = "0x14C78F8")]
	public static extern int CSharp_GetListenerPosition(ulong jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FF0")]
	[Address(RVA = "0x14C79A0", Offset = "0x14C79A0", VA = "0x14C79A0")]
	public static extern int CSharp_GetRTPCValue__SWIG_0(uint jarg1, ulong jarg2, uint jarg3, out float jarg4, ref int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000FF1")]
	[Address(RVA = "0x14C7A68", Offset = "0x14C7A68", VA = "0x14C7A68")]
	public static extern int CSharp_GetRTPCValue__SWIG_1(string jarg1, ulong jarg2, uint jarg3, out float jarg4, ref int jarg5);

	[PreserveSig]
	[Token(Token = "0x6000FF2")]
	[Address(RVA = "0x14C7B48", Offset = "0x14C7B48", VA = "0x14C7B48")]
	public static extern int CSharp_GetSwitch__SWIG_0(uint jarg1, ulong jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FF3")]
	[Address(RVA = "0x14C7BF8", Offset = "0x14C7BF8", VA = "0x14C7BF8")]
	public static extern int CSharp_GetSwitch__SWIG_1(string jarg1, ulong jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FF4")]
	[Address(RVA = "0x14C7CBC", Offset = "0x14C7CBC", VA = "0x14C7CBC")]
	public static extern int CSharp_GetState__SWIG_0(uint jarg1, out uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FF5")]
	[Address(RVA = "0x14C7D64", Offset = "0x14C7D64", VA = "0x14C7D64")]
	public static extern int CSharp_GetState__SWIG_1(string jarg1, out uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FF6")]
	[Address(RVA = "0x14C7E24", Offset = "0x14C7E24", VA = "0x14C7E24")]
	public static extern int CSharp_GetGameObjectAuxSendValues(ulong jarg1, IntPtr jarg2, ref uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FF7")]
	[Address(RVA = "0x14C7ED4", Offset = "0x14C7ED4", VA = "0x14C7ED4")]
	public static extern int CSharp_GetGameObjectDryLevelValue(ulong jarg1, ulong jarg2, out float jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FF8")]
	[Address(RVA = "0x14C7F84", Offset = "0x14C7F84", VA = "0x14C7F84")]
	public static extern int CSharp_GetObjectObstructionAndOcclusion(ulong jarg1, ulong jarg2, out float jarg3, out float jarg4);

	[PreserveSig]
	[Token(Token = "0x6000FF9")]
	[Address(RVA = "0x14C8044", Offset = "0x14C8044", VA = "0x14C8044")]
	public static extern int CSharp_QueryAudioObjectIDs__SWIG_0(uint jarg1, ref uint jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FFA")]
	[Address(RVA = "0x14C80F4", Offset = "0x14C80F4", VA = "0x14C80F4")]
	public static extern int CSharp_QueryAudioObjectIDs__SWIG_1(string jarg1, ref uint jarg2, IntPtr jarg3);

	[PreserveSig]
	[Token(Token = "0x6000FFB")]
	[Address(RVA = "0x14C81BC", Offset = "0x14C81BC", VA = "0x14C81BC")]
	public static extern int CSharp_GetPositioningInfo(uint jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6000FFC")]
	[Address(RVA = "0x14C8264", Offset = "0x14C8264", VA = "0x14C8264")]
	public static extern bool CSharp_GetIsGameObjectActive(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FFD")]
	[Address(RVA = "0x14C8304", Offset = "0x14C8304", VA = "0x14C8304")]
	public static extern float CSharp_GetMaxRadius(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FFE")]
	[Address(RVA = "0x14C839C", Offset = "0x14C839C", VA = "0x14C839C")]
	public static extern uint CSharp_GetEventIDFromPlayingID(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6000FFF")]
	[Address(RVA = "0x14C8434", Offset = "0x14C8434", VA = "0x14C8434")]
	public static extern ulong CSharp_GetGameObjectFromPlayingID(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001000")]
	[Address(RVA = "0x14C84CC", Offset = "0x14C84CC", VA = "0x14C84CC")]
	public static extern int CSharp_GetPlayingIDsFromGameObject(ulong jarg1, ref uint jarg2, [Out] uint[] jarg3);

	[PreserveSig]
	[Token(Token = "0x6001001")]
	[Address(RVA = "0x14C8608", Offset = "0x14C8608", VA = "0x14C8608")]
	public static extern int CSharp_GetCustomPropertyValue__SWIG_0(uint jarg1, uint jarg2, out int jarg3);

	[PreserveSig]
	[Token(Token = "0x6001002")]
	[Address(RVA = "0x14C86B8", Offset = "0x14C86B8", VA = "0x14C86B8")]
	public static extern int CSharp_GetCustomPropertyValue__SWIG_1(uint jarg1, uint jarg2, out float jarg3);

	[PreserveSig]
	[Token(Token = "0x6001003")]
	[Address(RVA = "0x14C8768", Offset = "0x14C8768", VA = "0x14C8768")]
	public static extern void CSharp_AK_SPEAKER_SETUP_FIX_LEFT_TO_CENTER(ref uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001004")]
	[Address(RVA = "0x14C8800", Offset = "0x14C8800", VA = "0x14C8800")]
	public static extern void CSharp_AK_SPEAKER_SETUP_FIX_REAR_TO_SIDE(ref uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001005")]
	[Address(RVA = "0x14C8898", Offset = "0x14C8898", VA = "0x14C8898")]
	public static extern void CSharp_AK_SPEAKER_SETUP_CONVERT_TO_SUPPORTED(ref uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001006")]
	[Address(RVA = "0x14C8930", Offset = "0x14C8930", VA = "0x14C8930")]
	public static extern byte CSharp_ChannelMaskToNumChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001007")]
	[Address(RVA = "0x14C89C8", Offset = "0x14C89C8", VA = "0x14C89C8")]
	public static extern uint CSharp_ChannelMaskFromNumChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001008")]
	[Address(RVA = "0x14C8A60", Offset = "0x14C8A60", VA = "0x14C8A60")]
	public static extern byte CSharp_ChannelBitToIndex(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001009")]
	[Address(RVA = "0x14C8B08", Offset = "0x14C8B08", VA = "0x14C8B08")]
	public static extern bool CSharp_HasSurroundChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600100A")]
	[Address(RVA = "0x14C8BA8", Offset = "0x14C8BA8", VA = "0x14C8BA8")]
	public static extern bool CSharp_HasStrictlyOnePairOfSurroundChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600100B")]
	[Address(RVA = "0x14C8C48", Offset = "0x14C8C48", VA = "0x14C8C48")]
	public static extern bool CSharp_HasSideAndRearChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600100C")]
	[Address(RVA = "0x14C8CE8", Offset = "0x14C8CE8", VA = "0x14C8CE8")]
	public static extern bool CSharp_HasHeightChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600100D")]
	[Address(RVA = "0x14C8D88", Offset = "0x14C8D88", VA = "0x14C8D88")]
	public static extern uint CSharp_BackToSideChannels(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x600100E")]
	[Address(RVA = "0x14C8E20", Offset = "0x14C8E20", VA = "0x14C8E20")]
	public static extern uint CSharp_StdChannelIndexToDisplayIndex(int jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x600100F")]
	[Address(RVA = "0x14C8ED0", Offset = "0x14C8ED0", VA = "0x14C8ED0")]
	public static extern void CSharp_AkChannelConfig_uNumChannels_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001010")]
	[Address(RVA = "0x14C8F78", Offset = "0x14C8F78", VA = "0x14C8F78")]
	public static extern uint CSharp_AkChannelConfig_uNumChannels_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001011")]
	[Address(RVA = "0x14C9010", Offset = "0x14C9010", VA = "0x14C9010")]
	public static extern void CSharp_AkChannelConfig_eConfigType_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001012")]
	[Address(RVA = "0x14C90B8", Offset = "0x14C90B8", VA = "0x14C90B8")]
	public static extern uint CSharp_AkChannelConfig_eConfigType_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001013")]
	[Address(RVA = "0x14C9150", Offset = "0x14C9150", VA = "0x14C9150")]
	public static extern void CSharp_AkChannelConfig_uChannelMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001014")]
	[Address(RVA = "0x14C91F8", Offset = "0x14C91F8", VA = "0x14C91F8")]
	public static extern uint CSharp_AkChannelConfig_uChannelMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001015")]
	[Address(RVA = "0x14C9290", Offset = "0x14C9290", VA = "0x14C9290")]
	public static extern IntPtr CSharp_new_AkChannelConfig__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6001016")]
	[Address(RVA = "0x14C9318", Offset = "0x14C9318", VA = "0x14C9318")]
	public static extern IntPtr CSharp_new_AkChannelConfig__SWIG_1(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001017")]
	[Address(RVA = "0x14C93C0", Offset = "0x14C93C0", VA = "0x14C93C0")]
	public static extern void CSharp_AkChannelConfig_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001018")]
	[Address(RVA = "0x14C9458", Offset = "0x14C9458", VA = "0x14C9458")]
	public static extern void CSharp_AkChannelConfig_SetStandard(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001019")]
	[Address(RVA = "0x14C9500", Offset = "0x14C9500", VA = "0x14C9500")]
	public static extern void CSharp_AkChannelConfig_SetStandardOrAnonymous(IntPtr jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x600101A")]
	[Address(RVA = "0x14C95B0", Offset = "0x14C95B0", VA = "0x14C95B0")]
	public static extern void CSharp_AkChannelConfig_SetAnonymous(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600101B")]
	[Address(RVA = "0x14C9658", Offset = "0x14C9658", VA = "0x14C9658")]
	public static extern void CSharp_AkChannelConfig_SetAmbisonic(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600101C")]
	[Address(RVA = "0x14C9700", Offset = "0x14C9700", VA = "0x14C9700")]
	public static extern bool CSharp_AkChannelConfig_IsValid(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600101D")]
	[Address(RVA = "0x14C97A0", Offset = "0x14C97A0", VA = "0x14C97A0")]
	public static extern uint CSharp_AkChannelConfig_Serialize(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600101E")]
	[Address(RVA = "0x14C9838", Offset = "0x14C9838", VA = "0x14C9838")]
	public static extern void CSharp_AkChannelConfig_Deserialize(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600101F")]
	[Address(RVA = "0x14C98E0", Offset = "0x14C98E0", VA = "0x14C98E0")]
	public static extern IntPtr CSharp_AkChannelConfig_RemoveLFE(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001020")]
	[Address(RVA = "0x14C9978", Offset = "0x14C9978", VA = "0x14C9978")]
	public static extern IntPtr CSharp_AkChannelConfig_RemoveCenter(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001021")]
	[Address(RVA = "0x14C9A10", Offset = "0x14C9A10", VA = "0x14C9A10")]
	public static extern bool CSharp_AkChannelConfig_IsChannelConfigSupported(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001022")]
	[Address(RVA = "0x14C9AB0", Offset = "0x14C9AB0", VA = "0x14C9AB0")]
	public static extern void CSharp_delete_AkChannelConfig(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001023")]
	[Address(RVA = "0x14C9B48", Offset = "0x14C9B48", VA = "0x14C9B48")]
	public static extern IntPtr CSharp_new_AkImageSourceParams__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6001024")]
	[Address(RVA = "0x14C9BD0", Offset = "0x14C9BD0", VA = "0x14C9BD0")]
	public static extern IntPtr CSharp_new_AkImageSourceParams__SWIG_1(IntPtr jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6001025")]
	[Address(RVA = "0x14C9C80", Offset = "0x14C9C80", VA = "0x14C9C80")]
	public static extern void CSharp_AkImageSourceParams_sourcePosition_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001026")]
	[Address(RVA = "0x14C9D28", Offset = "0x14C9D28", VA = "0x14C9D28")]
	public static extern IntPtr CSharp_AkImageSourceParams_sourcePosition_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001027")]
	[Address(RVA = "0x14C9DC0", Offset = "0x14C9DC0", VA = "0x14C9DC0")]
	public static extern void CSharp_AkImageSourceParams_fDistanceScalingFactor_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001028")]
	[Address(RVA = "0x14C9E68", Offset = "0x14C9E68", VA = "0x14C9E68")]
	public static extern float CSharp_AkImageSourceParams_fDistanceScalingFactor_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001029")]
	[Address(RVA = "0x14C9F00", Offset = "0x14C9F00", VA = "0x14C9F00")]
	public static extern void CSharp_AkImageSourceParams_fLevel_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600102A")]
	[Address(RVA = "0x14C9FA8", Offset = "0x14C9FA8", VA = "0x14C9FA8")]
	public static extern float CSharp_AkImageSourceParams_fLevel_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600102B")]
	[Address(RVA = "0x14CA040", Offset = "0x14CA040", VA = "0x14CA040")]
	public static extern void CSharp_AkImageSourceParams_fDiffraction_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600102C")]
	[Address(RVA = "0x14CA0E8", Offset = "0x14CA0E8", VA = "0x14CA0E8")]
	public static extern float CSharp_AkImageSourceParams_fDiffraction_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600102D")]
	[Address(RVA = "0x14CA180", Offset = "0x14CA180", VA = "0x14CA180")]
	public static extern void CSharp_AkImageSourceParams_uDiffractionEmitterSide_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x600102E")]
	[Address(RVA = "0x14CA228", Offset = "0x14CA228", VA = "0x14CA228")]
	public static extern byte CSharp_AkImageSourceParams_uDiffractionEmitterSide_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600102F")]
	[Address(RVA = "0x14CA2C0", Offset = "0x14CA2C0", VA = "0x14CA2C0")]
	public static extern void CSharp_AkImageSourceParams_uDiffractionListenerSide_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001030")]
	[Address(RVA = "0x14CA368", Offset = "0x14CA368", VA = "0x14CA368")]
	public static extern byte CSharp_AkImageSourceParams_uDiffractionListenerSide_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001031")]
	[Address(RVA = "0x14CA400", Offset = "0x14CA400", VA = "0x14CA400")]
	public static extern void CSharp_delete_AkImageSourceParams(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001032")]
	[Address(RVA = "0x14CA498", Offset = "0x14CA498", VA = "0x14CA498")]
	public static extern float CSharp_kDefaultMaxPathLength_get();

	[PreserveSig]
	[Token(Token = "0x6001033")]
	[Address(RVA = "0x14CA520", Offset = "0x14CA520", VA = "0x14CA520")]
	public static extern uint CSharp_kDefaultDiffractionMaxEdges_get();

	[PreserveSig]
	[Token(Token = "0x6001034")]
	[Address(RVA = "0x14CA5A8", Offset = "0x14CA5A8", VA = "0x14CA5A8")]
	public static extern uint CSharp_kDefaultDiffractionMaxPaths_get();

	[PreserveSig]
	[Token(Token = "0x6001035")]
	[Address(RVA = "0x14CA630", Offset = "0x14CA630", VA = "0x14CA630")]
	public static extern float CSharp_kMaxDiffraction_get();

	[PreserveSig]
	[Token(Token = "0x6001036")]
	[Address(RVA = "0x14CA6B8", Offset = "0x14CA6B8", VA = "0x14CA6B8")]
	public static extern uint CSharp_kListenerDiffractionMaxEdges_get();

	[PreserveSig]
	[Token(Token = "0x6001037")]
	[Address(RVA = "0x14CA740", Offset = "0x14CA740", VA = "0x14CA740")]
	public static extern uint CSharp_kListenerDiffractionMaxPaths_get();

	[PreserveSig]
	[Token(Token = "0x6001038")]
	[Address(RVA = "0x14CA7C8", Offset = "0x14CA7C8", VA = "0x14CA7C8")]
	public static extern uint CSharp_kPortalToPortalDiffractionMaxPaths_get();

	[PreserveSig]
	[Token(Token = "0x6001039")]
	[Address(RVA = "0x14CA850", Offset = "0x14CA850", VA = "0x14CA850")]
	public static extern void CSharp_g_SpatialAudioPoolId_set(int jarg1);

	[PreserveSig]
	[Token(Token = "0x600103A")]
	[Address(RVA = "0x14CA8E8", Offset = "0x14CA8E8", VA = "0x14CA8E8")]
	public static extern int CSharp_g_SpatialAudioPoolId_get();

	[PreserveSig]
	[Token(Token = "0x600103B")]
	[Address(RVA = "0x14CA970", Offset = "0x14CA970", VA = "0x14CA970")]
	public static extern int CSharp__ArrayPoolSpatialAudio_Get();

	[PreserveSig]
	[Token(Token = "0x600103C")]
	[Address(RVA = "0x14CA9F8", Offset = "0x14CA9F8", VA = "0x14CA9F8")]
	public static extern IntPtr CSharp_new__ArrayPoolSpatialAudio();

	[PreserveSig]
	[Token(Token = "0x600103D")]
	[Address(RVA = "0x14CAA80", Offset = "0x14CAA80", VA = "0x14CAA80")]
	public static extern void CSharp_delete__ArrayPoolSpatialAudio(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600103E")]
	[Address(RVA = "0x14CAB18", Offset = "0x14CAB18", VA = "0x14CAB18")]
	public static extern IntPtr CSharp_new_AkSpatialAudioInitSettings();

	[PreserveSig]
	[Token(Token = "0x600103F")]
	[Address(RVA = "0x14CABA0", Offset = "0x14CABA0", VA = "0x14CABA0")]
	public static extern void CSharp_AkSpatialAudioInitSettings_uPoolID_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x6001040")]
	[Address(RVA = "0x14CAC48", Offset = "0x14CAC48", VA = "0x14CAC48")]
	public static extern int CSharp_AkSpatialAudioInitSettings_uPoolID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001041")]
	[Address(RVA = "0x14CACE0", Offset = "0x14CACE0", VA = "0x14CACE0")]
	public static extern void CSharp_AkSpatialAudioInitSettings_uPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001042")]
	[Address(RVA = "0x14CAD88", Offset = "0x14CAD88", VA = "0x14CAD88")]
	public static extern uint CSharp_AkSpatialAudioInitSettings_uPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001043")]
	[Address(RVA = "0x14CAE20", Offset = "0x14CAE20", VA = "0x14CAE20")]
	public static extern void CSharp_AkSpatialAudioInitSettings_uMaxSoundPropagationDepth_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001044")]
	[Address(RVA = "0x14CAEC8", Offset = "0x14CAEC8", VA = "0x14CAEC8")]
	public static extern uint CSharp_AkSpatialAudioInitSettings_uMaxSoundPropagationDepth_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001045")]
	[Address(RVA = "0x14CAF60", Offset = "0x14CAF60", VA = "0x14CAF60")]
	public static extern void CSharp_AkSpatialAudioInitSettings_uDiffractionFlags_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001046")]
	[Address(RVA = "0x14CB008", Offset = "0x14CB008", VA = "0x14CB008")]
	public static extern uint CSharp_AkSpatialAudioInitSettings_uDiffractionFlags_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001047")]
	[Address(RVA = "0x14CB0A0", Offset = "0x14CB0A0", VA = "0x14CB0A0")]
	public static extern void CSharp_AkSpatialAudioInitSettings_fDiffractionShadowAttenFactor_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001048")]
	[Address(RVA = "0x14CB148", Offset = "0x14CB148", VA = "0x14CB148")]
	public static extern float CSharp_AkSpatialAudioInitSettings_fDiffractionShadowAttenFactor_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001049")]
	[Address(RVA = "0x14CB1E0", Offset = "0x14CB1E0", VA = "0x14CB1E0")]
	public static extern void CSharp_AkSpatialAudioInitSettings_fDiffractionShadowDegrees_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600104A")]
	[Address(RVA = "0x14CB288", Offset = "0x14CB288", VA = "0x14CB288")]
	public static extern float CSharp_AkSpatialAudioInitSettings_fDiffractionShadowDegrees_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600104B")]
	[Address(RVA = "0x14CB320", Offset = "0x14CB320", VA = "0x14CB320")]
	public static extern void CSharp_AkSpatialAudioInitSettings_fMovementThreshold_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600104C")]
	[Address(RVA = "0x14CB3C8", Offset = "0x14CB3C8", VA = "0x14CB3C8")]
	public static extern float CSharp_AkSpatialAudioInitSettings_fMovementThreshold_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600104D")]
	[Address(RVA = "0x14CB460", Offset = "0x14CB460", VA = "0x14CB460")]
	public static extern void CSharp_delete_AkSpatialAudioInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600104E")]
	[Address(RVA = "0x14CB4F8", Offset = "0x14CB4F8", VA = "0x14CB4F8")]
	public static extern IntPtr CSharp_new_AkImageSourceSettings__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x600104F")]
	[Address(RVA = "0x14CB580", Offset = "0x14CB580", VA = "0x14CB580")]
	public static extern IntPtr CSharp_new_AkImageSourceSettings__SWIG_1(IntPtr jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x6001050")]
	[Address(RVA = "0x14CB630", Offset = "0x14CB630", VA = "0x14CB630")]
	public static extern void CSharp_delete_AkImageSourceSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001051")]
	[Address(RVA = "0x14CB6C8", Offset = "0x14CB6C8", VA = "0x14CB6C8")]
	public static extern void CSharp_AkImageSourceSettings_SetOneTexture(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001052")]
	[Address(RVA = "0x14CB770", Offset = "0x14CB770", VA = "0x14CB770")]
	public static extern void CSharp_AkImageSourceSettings_SetName(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x6001053")]
	[Address(RVA = "0x14CB82C", Offset = "0x14CB82C", VA = "0x14CB82C")]
	public static extern void CSharp_AkImageSourceSettings_params__set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001054")]
	[Address(RVA = "0x14CB8D4", Offset = "0x14CB8D4", VA = "0x14CB8D4")]
	public static extern IntPtr CSharp_AkImageSourceSettings_params__get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001055")]
	[Address(RVA = "0x14CB96C", Offset = "0x14CB96C", VA = "0x14CB96C")]
	public static extern IntPtr CSharp_new_AkEmitterSettings();

	[PreserveSig]
	[Token(Token = "0x6001056")]
	[Address(RVA = "0x14CB9F4", Offset = "0x14CB9F4", VA = "0x14CB9F4")]
	public static extern void CSharp_AkEmitterSettings_reflectAuxBusID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001057")]
	[Address(RVA = "0x14CBA9C", Offset = "0x14CBA9C", VA = "0x14CBA9C")]
	public static extern uint CSharp_AkEmitterSettings_reflectAuxBusID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001058")]
	[Address(RVA = "0x14CBB34", Offset = "0x14CBB34", VA = "0x14CBB34")]
	public static extern void CSharp_AkEmitterSettings_reflectionMaxPathLength_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001059")]
	[Address(RVA = "0x14CBBDC", Offset = "0x14CBBDC", VA = "0x14CBBDC")]
	public static extern float CSharp_AkEmitterSettings_reflectionMaxPathLength_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600105A")]
	[Address(RVA = "0x14CBC74", Offset = "0x14CBC74", VA = "0x14CBC74")]
	public static extern void CSharp_AkEmitterSettings_reflectionsAuxBusGain_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600105B")]
	[Address(RVA = "0x14CBD1C", Offset = "0x14CBD1C", VA = "0x14CBD1C")]
	public static extern float CSharp_AkEmitterSettings_reflectionsAuxBusGain_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600105C")]
	[Address(RVA = "0x14CBDB4", Offset = "0x14CBDB4", VA = "0x14CBDB4")]
	public static extern void CSharp_AkEmitterSettings_reflectionsOrder_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600105D")]
	[Address(RVA = "0x14CBE5C", Offset = "0x14CBE5C", VA = "0x14CBE5C")]
	public static extern uint CSharp_AkEmitterSettings_reflectionsOrder_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600105E")]
	[Address(RVA = "0x14CBEF4", Offset = "0x14CBEF4", VA = "0x14CBEF4")]
	public static extern void CSharp_AkEmitterSettings_reflectorFilterMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600105F")]
	[Address(RVA = "0x14CBF9C", Offset = "0x14CBF9C", VA = "0x14CBF9C")]
	public static extern uint CSharp_AkEmitterSettings_reflectorFilterMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001060")]
	[Address(RVA = "0x14CC034", Offset = "0x14CC034", VA = "0x14CC034")]
	public static extern void CSharp_AkEmitterSettings_roomReverbAuxBusGain_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001061")]
	[Address(RVA = "0x14CC0DC", Offset = "0x14CC0DC", VA = "0x14CC0DC")]
	public static extern float CSharp_AkEmitterSettings_roomReverbAuxBusGain_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001062")]
	[Address(RVA = "0x14CC174", Offset = "0x14CC174", VA = "0x14CC174")]
	public static extern void CSharp_AkEmitterSettings_diffractionMaxEdges_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001063")]
	[Address(RVA = "0x14CC21C", Offset = "0x14CC21C", VA = "0x14CC21C")]
	public static extern uint CSharp_AkEmitterSettings_diffractionMaxEdges_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001064")]
	[Address(RVA = "0x14CC2B4", Offset = "0x14CC2B4", VA = "0x14CC2B4")]
	public static extern void CSharp_AkEmitterSettings_diffractionMaxPaths_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001065")]
	[Address(RVA = "0x14CC35C", Offset = "0x14CC35C", VA = "0x14CC35C")]
	public static extern uint CSharp_AkEmitterSettings_diffractionMaxPaths_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001066")]
	[Address(RVA = "0x14CC3F4", Offset = "0x14CC3F4", VA = "0x14CC3F4")]
	public static extern void CSharp_AkEmitterSettings_diffractionMaxPathLength_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001067")]
	[Address(RVA = "0x14CC49C", Offset = "0x14CC49C", VA = "0x14CC49C")]
	public static extern float CSharp_AkEmitterSettings_diffractionMaxPathLength_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001068")]
	[Address(RVA = "0x14CC534", Offset = "0x14CC534", VA = "0x14CC534")]
	public static extern void CSharp_AkEmitterSettings_useImageSources_set(IntPtr jarg1, byte jarg2);

	[PreserveSig]
	[Token(Token = "0x6001069")]
	[Address(RVA = "0x14CC5DC", Offset = "0x14CC5DC", VA = "0x14CC5DC")]
	public static extern byte CSharp_AkEmitterSettings_useImageSources_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600106A")]
	[Address(RVA = "0x14CC674", Offset = "0x14CC674", VA = "0x14CC674")]
	public static extern void CSharp_delete_AkEmitterSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600106B")]
	[Address(RVA = "0x14CC70C", Offset = "0x14CC70C", VA = "0x14CC70C")]
	public static extern IntPtr CSharp_new_AkVertex__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x600106C")]
	[Address(RVA = "0x14CC794", Offset = "0x14CC794", VA = "0x14CC794")]
	public static extern IntPtr CSharp_new_AkVertex__SWIG_1(float jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x600106D")]
	[Address(RVA = "0x14CC848", Offset = "0x14CC848", VA = "0x14CC848")]
	public static extern void CSharp_AkVertex_X_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x600106E")]
	[Address(RVA = "0x14CC8F0", Offset = "0x14CC8F0", VA = "0x14CC8F0")]
	public static extern float CSharp_AkVertex_X_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600106F")]
	[Address(RVA = "0x14CC988", Offset = "0x14CC988", VA = "0x14CC988")]
	public static extern void CSharp_AkVertex_Y_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001070")]
	[Address(RVA = "0x14CCA30", Offset = "0x14CCA30", VA = "0x14CCA30")]
	public static extern float CSharp_AkVertex_Y_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001071")]
	[Address(RVA = "0x14CCAC8", Offset = "0x14CCAC8", VA = "0x14CCAC8")]
	public static extern void CSharp_AkVertex_Z_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001072")]
	[Address(RVA = "0x14CCB70", Offset = "0x14CCB70", VA = "0x14CCB70")]
	public static extern float CSharp_AkVertex_Z_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001073")]
	[Address(RVA = "0x14CCC08", Offset = "0x14CCC08", VA = "0x14CCC08")]
	public static extern void CSharp_AkVertex_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001074")]
	[Address(RVA = "0x14CCCA0", Offset = "0x14CCCA0", VA = "0x14CCCA0")]
	public static extern int CSharp_AkVertex_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6001075")]
	[Address(RVA = "0x14CCD28", Offset = "0x14CCD28", VA = "0x14CCD28")]
	public static extern void CSharp_AkVertex_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001076")]
	[Address(RVA = "0x14CCDD0", Offset = "0x14CCDD0", VA = "0x14CCDD0")]
	public static extern void CSharp_delete_AkVertex(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001077")]
	[Address(RVA = "0x14CCE68", Offset = "0x14CCE68", VA = "0x14CCE68")]
	public static extern IntPtr CSharp_new_AkTriangle__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6001078")]
	[Address(RVA = "0x14CCEF0", Offset = "0x14CCEF0", VA = "0x14CCEF0")]
	public static extern IntPtr CSharp_new_AkTriangle__SWIG_1(ushort jarg1, ushort jarg2, ushort jarg3, ushort jarg4);

	[PreserveSig]
	[Token(Token = "0x6001079")]
	[Address(RVA = "0x14CCFB0", Offset = "0x14CCFB0", VA = "0x14CCFB0")]
	public static extern void CSharp_AkTriangle_point0_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x600107A")]
	[Address(RVA = "0x14CD058", Offset = "0x14CD058", VA = "0x14CD058")]
	public static extern ushort CSharp_AkTriangle_point0_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600107B")]
	[Address(RVA = "0x14CD0F0", Offset = "0x14CD0F0", VA = "0x14CD0F0")]
	public static extern void CSharp_AkTriangle_point1_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x600107C")]
	[Address(RVA = "0x14CD198", Offset = "0x14CD198", VA = "0x14CD198")]
	public static extern ushort CSharp_AkTriangle_point1_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600107D")]
	[Address(RVA = "0x14CD230", Offset = "0x14CD230", VA = "0x14CD230")]
	public static extern void CSharp_AkTriangle_point2_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x600107E")]
	[Address(RVA = "0x14CD2D8", Offset = "0x14CD2D8", VA = "0x14CD2D8")]
	public static extern ushort CSharp_AkTriangle_point2_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600107F")]
	[Address(RVA = "0x14CD370", Offset = "0x14CD370", VA = "0x14CD370")]
	public static extern void CSharp_AkTriangle_surface_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x6001080")]
	[Address(RVA = "0x14CD418", Offset = "0x14CD418", VA = "0x14CD418")]
	public static extern ushort CSharp_AkTriangle_surface_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001081")]
	[Address(RVA = "0x14CD4B0", Offset = "0x14CD4B0", VA = "0x14CD4B0")]
	public static extern void CSharp_AkTriangle_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001082")]
	[Address(RVA = "0x14CD548", Offset = "0x14CD548", VA = "0x14CD548")]
	public static extern int CSharp_AkTriangle_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x6001083")]
	[Address(RVA = "0x14CD5D0", Offset = "0x14CD5D0", VA = "0x14CD5D0")]
	public static extern void CSharp_AkTriangle_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001084")]
	[Address(RVA = "0x14CD678", Offset = "0x14CD678", VA = "0x14CD678")]
	public static extern void CSharp_delete_AkTriangle(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001085")]
	[Address(RVA = "0x14CD710", Offset = "0x14CD710", VA = "0x14CD710")]
	public static extern IntPtr CSharp_new_AkAcousticSurface();

	[PreserveSig]
	[Token(Token = "0x6001086")]
	[Address(RVA = "0x14CD798", Offset = "0x14CD798", VA = "0x14CD798")]
	public static extern void CSharp_AkAcousticSurface_textureID_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001087")]
	[Address(RVA = "0x14CD840", Offset = "0x14CD840", VA = "0x14CD840")]
	public static extern uint CSharp_AkAcousticSurface_textureID_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001088")]
	[Address(RVA = "0x14CD8D8", Offset = "0x14CD8D8", VA = "0x14CD8D8")]
	public static extern void CSharp_AkAcousticSurface_reflectorChannelMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001089")]
	[Address(RVA = "0x14CD980", Offset = "0x14CD980", VA = "0x14CD980")]
	public static extern uint CSharp_AkAcousticSurface_reflectorChannelMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600108A")]
	[Address(RVA = "0x14CDA18", Offset = "0x14CDA18", VA = "0x14CDA18")]
	public static extern void CSharp_AkAcousticSurface_strName_set(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x600108B")]
	[Address(RVA = "0x14CDAD4", Offset = "0x14CDAD4", VA = "0x14CDAD4")]
	public static extern IntPtr CSharp_AkAcousticSurface_strName_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600108C")]
	[Address(RVA = "0x14CDB6C", Offset = "0x14CDB6C", VA = "0x14CDB6C")]
	public static extern void CSharp_AkAcousticSurface_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600108D")]
	[Address(RVA = "0x14CDC04", Offset = "0x14CDC04", VA = "0x14CDC04")]
	public static extern void CSharp_AkAcousticSurface_DeleteName(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600108E")]
	[Address(RVA = "0x14CDC9C", Offset = "0x14CDC9C", VA = "0x14CDC9C")]
	public static extern int CSharp_AkAcousticSurface_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x600108F")]
	[Address(RVA = "0x14CDD24", Offset = "0x14CDD24", VA = "0x14CDD24")]
	public static extern void CSharp_AkAcousticSurface_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001090")]
	[Address(RVA = "0x14CDDCC", Offset = "0x14CDDCC", VA = "0x14CDDCC")]
	public static extern void CSharp_delete_AkAcousticSurface(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001091")]
	[Address(RVA = "0x14CDE64", Offset = "0x14CDE64", VA = "0x14CDE64")]
	public static extern void CSharp_AkReflectionPathInfo_imageSource_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001092")]
	[Address(RVA = "0x14CDF0C", Offset = "0x14CDF0C", VA = "0x14CDF0C")]
	public static extern IntPtr CSharp_AkReflectionPathInfo_imageSource_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001093")]
	[Address(RVA = "0x14CDFA4", Offset = "0x14CDFA4", VA = "0x14CDFA4")]
	public static extern void CSharp_AkReflectionPathInfo_numPathPoints_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001094")]
	[Address(RVA = "0x14CE04C", Offset = "0x14CE04C", VA = "0x14CE04C")]
	public static extern uint CSharp_AkReflectionPathInfo_numPathPoints_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001095")]
	[Address(RVA = "0x14CE0E4", Offset = "0x14CE0E4", VA = "0x14CE0E4")]
	public static extern void CSharp_AkReflectionPathInfo_numReflections_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001096")]
	[Address(RVA = "0x14CE18C", Offset = "0x14CE18C", VA = "0x14CE18C")]
	public static extern uint CSharp_AkReflectionPathInfo_numReflections_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001097")]
	[Address(RVA = "0x14CE224", Offset = "0x14CE224", VA = "0x14CE224")]
	public static extern void CSharp_AkReflectionPathInfo_level_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001098")]
	[Address(RVA = "0x14CE2CC", Offset = "0x14CE2CC", VA = "0x14CE2CC")]
	public static extern float CSharp_AkReflectionPathInfo_level_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001099")]
	[Address(RVA = "0x14CE364", Offset = "0x14CE364", VA = "0x14CE364")]
	public static extern void CSharp_AkReflectionPathInfo_isOccluded_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x600109A")]
	[Address(RVA = "0x14CE40C", Offset = "0x14CE40C", VA = "0x14CE40C")]
	public static extern bool CSharp_AkReflectionPathInfo_isOccluded_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600109B")]
	[Address(RVA = "0x14CE4AC", Offset = "0x14CE4AC", VA = "0x14CE4AC")]
	public static extern int CSharp_AkReflectionPathInfo_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x600109C")]
	[Address(RVA = "0x14CE534", Offset = "0x14CE534", VA = "0x14CE534")]
	public static extern IntPtr CSharp_AkReflectionPathInfo_GetPathPoint(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600109D")]
	[Address(RVA = "0x14CE5DC", Offset = "0x14CE5DC", VA = "0x14CE5DC")]
	public static extern IntPtr CSharp_AkReflectionPathInfo_GetAcousticSurface(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600109E")]
	[Address(RVA = "0x14CE684", Offset = "0x14CE684", VA = "0x14CE684")]
	public static extern float CSharp_AkReflectionPathInfo_GetDiffraction(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600109F")]
	[Address(RVA = "0x14CE72C", Offset = "0x14CE72C", VA = "0x14CE72C")]
	public static extern void CSharp_AkReflectionPathInfo_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010A0")]
	[Address(RVA = "0x14CE7D4", Offset = "0x14CE7D4", VA = "0x14CE7D4")]
	public static extern IntPtr CSharp_new_AkReflectionPathInfo();

	[PreserveSig]
	[Token(Token = "0x60010A1")]
	[Address(RVA = "0x14CE85C", Offset = "0x14CE85C", VA = "0x14CE85C")]
	public static extern void CSharp_delete_AkReflectionPathInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010A2")]
	[Address(RVA = "0x14CE8F4", Offset = "0x14CE8F4", VA = "0x14CE8F4")]
	public static extern void CSharp_AkDiffractionPathInfo_virtualPos_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010A3")]
	[Address(RVA = "0x14CE99C", Offset = "0x14CE99C", VA = "0x14CE99C")]
	public static extern IntPtr CSharp_AkDiffractionPathInfo_virtualPos_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010A4")]
	[Address(RVA = "0x14CEA34", Offset = "0x14CEA34", VA = "0x14CEA34")]
	public static extern void CSharp_AkDiffractionPathInfo_nodeCount_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010A5")]
	[Address(RVA = "0x14CEADC", Offset = "0x14CEADC", VA = "0x14CEADC")]
	public static extern uint CSharp_AkDiffractionPathInfo_nodeCount_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010A6")]
	[Address(RVA = "0x14CEB74", Offset = "0x14CEB74", VA = "0x14CEB74")]
	public static extern void CSharp_AkDiffractionPathInfo_diffraction_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60010A7")]
	[Address(RVA = "0x14CEC1C", Offset = "0x14CEC1C", VA = "0x14CEC1C")]
	public static extern float CSharp_AkDiffractionPathInfo_diffraction_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010A8")]
	[Address(RVA = "0x14CECB4", Offset = "0x14CECB4", VA = "0x14CECB4")]
	public static extern void CSharp_AkDiffractionPathInfo_totLength_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60010A9")]
	[Address(RVA = "0x14CED5C", Offset = "0x14CED5C", VA = "0x14CED5C")]
	public static extern float CSharp_AkDiffractionPathInfo_totLength_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010AA")]
	[Address(RVA = "0x14CEDF4", Offset = "0x14CEDF4", VA = "0x14CEDF4")]
	public static extern void CSharp_AkDiffractionPathInfo_obstructionValue_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60010AB")]
	[Address(RVA = "0x14CEE9C", Offset = "0x14CEE9C", VA = "0x14CEE9C")]
	public static extern float CSharp_AkDiffractionPathInfo_obstructionValue_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010AC")]
	[Address(RVA = "0x14CEF34", Offset = "0x14CEF34", VA = "0x14CEF34")]
	public static extern int CSharp_AkDiffractionPathInfo_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x60010AD")]
	[Address(RVA = "0x14CEFBC", Offset = "0x14CEFBC", VA = "0x14CEFBC")]
	public static extern IntPtr CSharp_AkDiffractionPathInfo_GetNodes(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010AE")]
	[Address(RVA = "0x14CF064", Offset = "0x14CF064", VA = "0x14CF064")]
	public static extern float CSharp_AkDiffractionPathInfo_GetAngles(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010AF")]
	[Address(RVA = "0x14CF10C", Offset = "0x14CF10C", VA = "0x14CF10C")]
	public static extern ulong CSharp_AkDiffractionPathInfo_GetPortals(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010B0")]
	[Address(RVA = "0x14CF1B4", Offset = "0x14CF1B4", VA = "0x14CF1B4")]
	public static extern ulong CSharp_AkDiffractionPathInfo_GetRooms(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010B1")]
	[Address(RVA = "0x14CF25C", Offset = "0x14CF25C", VA = "0x14CF25C")]
	public static extern void CSharp_AkDiffractionPathInfo_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010B2")]
	[Address(RVA = "0x14CF304", Offset = "0x14CF304", VA = "0x14CF304")]
	public static extern IntPtr CSharp_new_AkDiffractionPathInfo();

	[PreserveSig]
	[Token(Token = "0x60010B3")]
	[Address(RVA = "0x14CF38C", Offset = "0x14CF38C", VA = "0x14CF38C")]
	public static extern void CSharp_delete_AkDiffractionPathInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010B4")]
	[Address(RVA = "0x14CF424", Offset = "0x14CF424", VA = "0x14CF424")]
	public static extern IntPtr CSharp_new_AkRoomParams();

	[PreserveSig]
	[Token(Token = "0x60010B5")]
	[Address(RVA = "0x14CF4AC", Offset = "0x14CF4AC", VA = "0x14CF4AC")]
	public static extern void CSharp_AkRoomParams_Up_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010B6")]
	[Address(RVA = "0x14CF554", Offset = "0x14CF554", VA = "0x14CF554")]
	public static extern IntPtr CSharp_AkRoomParams_Up_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010B7")]
	[Address(RVA = "0x14CF5EC", Offset = "0x14CF5EC", VA = "0x14CF5EC")]
	public static extern void CSharp_AkRoomParams_Front_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010B8")]
	[Address(RVA = "0x14CF694", Offset = "0x14CF694", VA = "0x14CF694")]
	public static extern IntPtr CSharp_AkRoomParams_Front_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010B9")]
	[Address(RVA = "0x14CF72C", Offset = "0x14CF72C", VA = "0x14CF72C")]
	public static extern void CSharp_AkRoomParams_ReverbAuxBus_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010BA")]
	[Address(RVA = "0x14CF7D4", Offset = "0x14CF7D4", VA = "0x14CF7D4")]
	public static extern uint CSharp_AkRoomParams_ReverbAuxBus_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010BB")]
	[Address(RVA = "0x14CF86C", Offset = "0x14CF86C", VA = "0x14CF86C")]
	public static extern void CSharp_AkRoomParams_ReverbLevel_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60010BC")]
	[Address(RVA = "0x14CF914", Offset = "0x14CF914", VA = "0x14CF914")]
	public static extern float CSharp_AkRoomParams_ReverbLevel_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010BD")]
	[Address(RVA = "0x14CF9AC", Offset = "0x14CF9AC", VA = "0x14CF9AC")]
	public static extern void CSharp_AkRoomParams_WallOcclusion_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60010BE")]
	[Address(RVA = "0x14CFA54", Offset = "0x14CFA54", VA = "0x14CFA54")]
	public static extern float CSharp_AkRoomParams_WallOcclusion_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010BF")]
	[Address(RVA = "0x14CFAEC", Offset = "0x14CFAEC", VA = "0x14CFAEC")]
	public static extern void CSharp_AkRoomParams_RoomGameObj_AuxSendLevelToSelf_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60010C0")]
	[Address(RVA = "0x14CFB94", Offset = "0x14CFB94", VA = "0x14CFB94")]
	public static extern float CSharp_AkRoomParams_RoomGameObj_AuxSendLevelToSelf_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010C1")]
	[Address(RVA = "0x14CFC2C", Offset = "0x14CFC2C", VA = "0x14CFC2C")]
	public static extern void CSharp_AkRoomParams_RoomGameObj_KeepRegistered_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x60010C2")]
	[Address(RVA = "0x14CFCD4", Offset = "0x14CFCD4", VA = "0x14CFCD4")]
	public static extern bool CSharp_AkRoomParams_RoomGameObj_KeepRegistered_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010C3")]
	[Address(RVA = "0x14CFD74", Offset = "0x14CFD74", VA = "0x14CFD74")]
	public static extern void CSharp_delete_AkRoomParams(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010C4")]
	[Address(RVA = "0x14CFE0C", Offset = "0x14CFE0C", VA = "0x14CFE0C")]
	public static extern int CSharp_GetPoolID();

	[PreserveSig]
	[Token(Token = "0x60010C5")]
	[Address(RVA = "0x14CFE94", Offset = "0x14CFE94", VA = "0x14CFE94")]
	public static extern int CSharp_RegisterEmitter(ulong jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010C6")]
	[Address(RVA = "0x14CFF3C", Offset = "0x14CFF3C", VA = "0x14CFF3C")]
	public static extern int CSharp_UnregisterEmitter(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60010C7")]
	[Address(RVA = "0x14CFFD4", Offset = "0x14CFFD4", VA = "0x14CFFD4")]
	public static extern int CSharp_SetEmitterAuxSendValues(ulong jarg1, IntPtr jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x60010C8")]
	[Address(RVA = "0x14D0084", Offset = "0x14D0084", VA = "0x14D0084")]
	public static extern int CSharp_SetImageSource__SWIG_0(uint jarg1, IntPtr jarg2, uint jarg3, ulong jarg4, ulong jarg5);

	[PreserveSig]
	[Token(Token = "0x60010C9")]
	[Address(RVA = "0x14D014C", Offset = "0x14D014C", VA = "0x14D014C")]
	public static extern int CSharp_SetImageSource__SWIG_1(uint jarg1, IntPtr jarg2, uint jarg3, ulong jarg4);

	[PreserveSig]
	[Token(Token = "0x60010CA")]
	[Address(RVA = "0x14D020C", Offset = "0x14D020C", VA = "0x14D020C")]
	public static extern int CSharp_RemoveImageSource__SWIG_0(uint jarg1, uint jarg2, ulong jarg3);

	[PreserveSig]
	[Token(Token = "0x60010CB")]
	[Address(RVA = "0x14D02BC", Offset = "0x14D02BC", VA = "0x14D02BC")]
	public static extern int CSharp_RemoveImageSource__SWIG_1(uint jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010CC")]
	[Address(RVA = "0x14D0364", Offset = "0x14D0364", VA = "0x14D0364")]
	public static extern int CSharp_RemoveGeometry(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60010CD")]
	[Address(RVA = "0x14D03FC", Offset = "0x14D03FC", VA = "0x14D03FC")]
	public static extern int CSharp_QueryReflectionPaths(ulong jarg1, IntPtr jarg2, IntPtr jarg3, IntPtr jarg4, out uint jarg5);

	[PreserveSig]
	[Token(Token = "0x60010CE")]
	[Address(RVA = "0x14D04C4", Offset = "0x14D04C4", VA = "0x14D04C4")]
	public static extern int CSharp_RemoveRoom(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60010CF")]
	[Address(RVA = "0x14D055C", Offset = "0x14D055C", VA = "0x14D055C")]
	public static extern int CSharp_RemovePortal(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x60010D0")]
	[Address(RVA = "0x14D05F4", Offset = "0x14D05F4", VA = "0x14D05F4")]
	public static extern int CSharp_SetGameObjectInRoom(ulong jarg1, ulong jarg2);

	[PreserveSig]
	[Token(Token = "0x60010D1")]
	[Address(RVA = "0x14D069C", Offset = "0x14D069C", VA = "0x14D069C")]
	public static extern int CSharp_SetEmitterObstructionAndOcclusion(ulong jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x60010D2")]
	[Address(RVA = "0x14D074C", Offset = "0x14D074C", VA = "0x14D074C")]
	public static extern int CSharp_SetPortalObstructionAndOcclusion(ulong jarg1, float jarg2, float jarg3);

	[PreserveSig]
	[Token(Token = "0x60010D3")]
	[Address(RVA = "0x14D07FC", Offset = "0x14D07FC", VA = "0x14D07FC")]
	public static extern int CSharp_QueryWetDiffraction(ulong jarg1, out float jarg2);

	[PreserveSig]
	[Token(Token = "0x60010D4")]
	[Address(RVA = "0x14D08A4", Offset = "0x14D08A4", VA = "0x14D08A4")]
	public static extern void CSharp_AkPlatformInitSettings_threadLEngine_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010D5")]
	[Address(RVA = "0x14D094C", Offset = "0x14D094C", VA = "0x14D094C")]
	public static extern IntPtr CSharp_AkPlatformInitSettings_threadLEngine_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010D6")]
	[Address(RVA = "0x14D09E4", Offset = "0x14D09E4", VA = "0x14D09E4")]
	public static extern void CSharp_AkPlatformInitSettings_threadOutputMgr_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010D7")]
	[Address(RVA = "0x14D0A8C", Offset = "0x14D0A8C", VA = "0x14D0A8C")]
	public static extern IntPtr CSharp_AkPlatformInitSettings_threadOutputMgr_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010D8")]
	[Address(RVA = "0x14D0B24", Offset = "0x14D0B24", VA = "0x14D0B24")]
	public static extern void CSharp_AkPlatformInitSettings_threadBankManager_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010D9")]
	[Address(RVA = "0x14D0BCC", Offset = "0x14D0BCC", VA = "0x14D0BCC")]
	public static extern IntPtr CSharp_AkPlatformInitSettings_threadBankManager_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010DA")]
	[Address(RVA = "0x14D0C64", Offset = "0x14D0C64", VA = "0x14D0C64")]
	public static extern void CSharp_AkPlatformInitSettings_threadMonitor_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010DB")]
	[Address(RVA = "0x14D0D0C", Offset = "0x14D0D0C", VA = "0x14D0D0C")]
	public static extern IntPtr CSharp_AkPlatformInitSettings_threadMonitor_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010DC")]
	[Address(RVA = "0x14D0DA4", Offset = "0x14D0DA4", VA = "0x14D0DA4")]
	public static extern void CSharp_AkPlatformInitSettings_fLEngineDefaultPoolRatioThreshold_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x60010DD")]
	[Address(RVA = "0x14D0E4C", Offset = "0x14D0E4C", VA = "0x14D0E4C")]
	public static extern float CSharp_AkPlatformInitSettings_fLEngineDefaultPoolRatioThreshold_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010DE")]
	[Address(RVA = "0x14D0EE4", Offset = "0x14D0EE4", VA = "0x14D0EE4")]
	public static extern void CSharp_AkPlatformInitSettings_uLEngineDefaultPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010DF")]
	[Address(RVA = "0x14D0F8C", Offset = "0x14D0F8C", VA = "0x14D0F8C")]
	public static extern uint CSharp_AkPlatformInitSettings_uLEngineDefaultPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010E0")]
	[Address(RVA = "0x14D1024", Offset = "0x14D1024", VA = "0x14D1024")]
	public static extern void CSharp_AkPlatformInitSettings_eAudioAPI_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60010E1")]
	[Address(RVA = "0x14D10CC", Offset = "0x14D10CC", VA = "0x14D10CC")]
	public static extern int CSharp_AkPlatformInitSettings_eAudioAPI_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010E2")]
	[Address(RVA = "0x14D1164", Offset = "0x14D1164", VA = "0x14D1164")]
	public static extern void CSharp_AkPlatformInitSettings_uSampleRate_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010E3")]
	[Address(RVA = "0x14D120C", Offset = "0x14D120C", VA = "0x14D120C")]
	public static extern uint CSharp_AkPlatformInitSettings_uSampleRate_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010E4")]
	[Address(RVA = "0x14D12A4", Offset = "0x14D12A4", VA = "0x14D12A4")]
	public static extern void CSharp_AkPlatformInitSettings_uNumRefillsInVoice_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x60010E5")]
	[Address(RVA = "0x14D134C", Offset = "0x14D134C", VA = "0x14D134C")]
	public static extern ushort CSharp_AkPlatformInitSettings_uNumRefillsInVoice_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010E6")]
	[Address(RVA = "0x14D13E4", Offset = "0x14D13E4", VA = "0x14D13E4")]
	public static extern void CSharp_AkPlatformInitSettings_uChannelMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010E7")]
	[Address(RVA = "0x14D148C", Offset = "0x14D148C", VA = "0x14D148C")]
	public static extern uint CSharp_AkPlatformInitSettings_uChannelMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010E8")]
	[Address(RVA = "0x14D1524", Offset = "0x14D1524", VA = "0x14D1524")]
	public static extern void CSharp_AkPlatformInitSettings_bRoundFrameSizeToHWSize_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x60010E9")]
	[Address(RVA = "0x14D15CC", Offset = "0x14D15CC", VA = "0x14D15CC")]
	public static extern bool CSharp_AkPlatformInitSettings_bRoundFrameSizeToHWSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010EA")]
	[Address(RVA = "0x14D166C", Offset = "0x14D166C", VA = "0x14D166C")]
	public static extern IntPtr CSharp_new_AkPlatformInitSettings();

	[PreserveSig]
	[Token(Token = "0x60010EB")]
	[Address(RVA = "0x14D16F4", Offset = "0x14D16F4", VA = "0x14D16F4")]
	public static extern void CSharp_delete_AkPlatformInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010EC")]
	[Address(RVA = "0x14D178C", Offset = "0x14D178C", VA = "0x14D178C")]
	public static extern int CSharp_GetFastPathSettings(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010ED")]
	[Address(RVA = "0x14D1834", Offset = "0x14D1834", VA = "0x14D1834")]
	public static extern void CSharp_AkStreamMgrSettings_uMemorySize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010EE")]
	[Address(RVA = "0x14D18DC", Offset = "0x14D18DC", VA = "0x14D18DC")]
	public static extern uint CSharp_AkStreamMgrSettings_uMemorySize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010EF")]
	[Address(RVA = "0x14D1974", Offset = "0x14D1974", VA = "0x14D1974")]
	public static extern IntPtr CSharp_new_AkStreamMgrSettings();

	[PreserveSig]
	[Token(Token = "0x60010F0")]
	[Address(RVA = "0x14D19FC", Offset = "0x14D19FC", VA = "0x14D19FC")]
	public static extern void CSharp_delete_AkStreamMgrSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010F1")]
	[Address(RVA = "0x14D1A94", Offset = "0x14D1A94", VA = "0x14D1A94")]
	public static extern void CSharp_AkDeviceSettings_pIOMemory_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010F2")]
	[Address(RVA = "0x14D1B3C", Offset = "0x14D1B3C", VA = "0x14D1B3C")]
	public static extern IntPtr CSharp_AkDeviceSettings_pIOMemory_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010F3")]
	[Address(RVA = "0x14D1BD4", Offset = "0x14D1BD4", VA = "0x14D1BD4")]
	public static extern void CSharp_AkDeviceSettings_uIOMemorySize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010F4")]
	[Address(RVA = "0x14D1C7C", Offset = "0x14D1C7C", VA = "0x14D1C7C")]
	public static extern uint CSharp_AkDeviceSettings_uIOMemorySize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010F5")]
	[Address(RVA = "0x14D1D14", Offset = "0x14D1D14", VA = "0x14D1D14")]
	public static extern void CSharp_AkDeviceSettings_uIOMemoryAlignment_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010F6")]
	[Address(RVA = "0x14D1DBC", Offset = "0x14D1DBC", VA = "0x14D1DBC")]
	public static extern uint CSharp_AkDeviceSettings_uIOMemoryAlignment_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010F7")]
	[Address(RVA = "0x14D1E54", Offset = "0x14D1E54", VA = "0x14D1E54")]
	public static extern void CSharp_AkDeviceSettings_ePoolAttributes_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x60010F8")]
	[Address(RVA = "0x14D1EFC", Offset = "0x14D1EFC", VA = "0x14D1EFC")]
	public static extern int CSharp_AkDeviceSettings_ePoolAttributes_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010F9")]
	[Address(RVA = "0x14D1F94", Offset = "0x14D1F94", VA = "0x14D1F94")]
	public static extern void CSharp_AkDeviceSettings_uGranularity_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010FA")]
	[Address(RVA = "0x14D203C", Offset = "0x14D203C", VA = "0x14D203C")]
	public static extern uint CSharp_AkDeviceSettings_uGranularity_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010FB")]
	[Address(RVA = "0x14D20D4", Offset = "0x14D20D4", VA = "0x14D20D4")]
	public static extern void CSharp_AkDeviceSettings_uSchedulerTypeFlags_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x60010FC")]
	[Address(RVA = "0x14D217C", Offset = "0x14D217C", VA = "0x14D217C")]
	public static extern uint CSharp_AkDeviceSettings_uSchedulerTypeFlags_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010FD")]
	[Address(RVA = "0x14D2214", Offset = "0x14D2214", VA = "0x14D2214")]
	public static extern void CSharp_AkDeviceSettings_threadProperties_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x60010FE")]
	[Address(RVA = "0x14D22BC", Offset = "0x14D22BC", VA = "0x14D22BC")]
	public static extern IntPtr CSharp_AkDeviceSettings_threadProperties_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x60010FF")]
	[Address(RVA = "0x14D2354", Offset = "0x14D2354", VA = "0x14D2354")]
	public static extern void CSharp_AkDeviceSettings_fTargetAutoStmBufferLength_set(IntPtr jarg1, float jarg2);

	[PreserveSig]
	[Token(Token = "0x6001100")]
	[Address(RVA = "0x14D23FC", Offset = "0x14D23FC", VA = "0x14D23FC")]
	public static extern float CSharp_AkDeviceSettings_fTargetAutoStmBufferLength_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001101")]
	[Address(RVA = "0x14D2494", Offset = "0x14D2494", VA = "0x14D2494")]
	public static extern void CSharp_AkDeviceSettings_uMaxConcurrentIO_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001102")]
	[Address(RVA = "0x14D253C", Offset = "0x14D253C", VA = "0x14D253C")]
	public static extern uint CSharp_AkDeviceSettings_uMaxConcurrentIO_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001103")]
	[Address(RVA = "0x14D25D4", Offset = "0x14D25D4", VA = "0x14D25D4")]
	public static extern void CSharp_AkDeviceSettings_bUseStreamCache_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6001104")]
	[Address(RVA = "0x14D267C", Offset = "0x14D267C", VA = "0x14D267C")]
	public static extern bool CSharp_AkDeviceSettings_bUseStreamCache_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001105")]
	[Address(RVA = "0x14D271C", Offset = "0x14D271C", VA = "0x14D271C")]
	public static extern void CSharp_AkDeviceSettings_uMaxCachePinnedBytes_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001106")]
	[Address(RVA = "0x14D27C4", Offset = "0x14D27C4", VA = "0x14D27C4")]
	public static extern uint CSharp_AkDeviceSettings_uMaxCachePinnedBytes_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001107")]
	[Address(RVA = "0x14D285C", Offset = "0x14D285C", VA = "0x14D285C")]
	public static extern IntPtr CSharp_new_AkDeviceSettings();

	[PreserveSig]
	[Token(Token = "0x6001108")]
	[Address(RVA = "0x14D28E4", Offset = "0x14D28E4", VA = "0x14D28E4")]
	public static extern void CSharp_delete_AkDeviceSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001109")]
	[Address(RVA = "0x14D297C", Offset = "0x14D297C", VA = "0x14D297C")]
	public static extern void CSharp_AkThreadProperties_nPriority_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x600110A")]
	[Address(RVA = "0x14D2A24", Offset = "0x14D2A24", VA = "0x14D2A24")]
	public static extern int CSharp_AkThreadProperties_nPriority_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600110B")]
	[Address(RVA = "0x14D2ABC", Offset = "0x14D2ABC", VA = "0x14D2ABC")]
	public static extern void CSharp_AkThreadProperties_uStackSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600110C")]
	[Address(RVA = "0x14D2B64", Offset = "0x14D2B64", VA = "0x14D2B64")]
	public static extern uint CSharp_AkThreadProperties_uStackSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600110D")]
	[Address(RVA = "0x14D2BFC", Offset = "0x14D2BFC", VA = "0x14D2BFC")]
	public static extern void CSharp_AkThreadProperties_uSchedPolicy_set(IntPtr jarg1, int jarg2);

	[PreserveSig]
	[Token(Token = "0x600110E")]
	[Address(RVA = "0x14D2CA4", Offset = "0x14D2CA4", VA = "0x14D2CA4")]
	public static extern int CSharp_AkThreadProperties_uSchedPolicy_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600110F")]
	[Address(RVA = "0x14D2D3C", Offset = "0x14D2D3C", VA = "0x14D2D3C")]
	public static extern void CSharp_AkThreadProperties_dwAffinityMask_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001110")]
	[Address(RVA = "0x14D2DE4", Offset = "0x14D2DE4", VA = "0x14D2DE4")]
	public static extern uint CSharp_AkThreadProperties_dwAffinityMask_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001111")]
	[Address(RVA = "0x14D2E7C", Offset = "0x14D2E7C", VA = "0x14D2E7C")]
	public static extern IntPtr CSharp_new_AkThreadProperties();

	[PreserveSig]
	[Token(Token = "0x6001112")]
	[Address(RVA = "0x14D2F04", Offset = "0x14D2F04", VA = "0x14D2F04")]
	public static extern void CSharp_delete_AkThreadProperties(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001113")]
	[Address(RVA = "0x14D2F9C", Offset = "0x14D2F9C", VA = "0x14D2F9C")]
	public static extern void CSharp_SetErrorLogger__SWIG_0(AkLogger.ErrorLoggerInteropDelegate jarg1);

	[PreserveSig]
	[Token(Token = "0x6001114")]
	[Address(RVA = "0x14D3038", Offset = "0x14D3038", VA = "0x14D3038")]
	public static extern void CSharp_SetErrorLogger__SWIG_1();

	[PreserveSig]
	[Token(Token = "0x6001115")]
	[Address(RVA = "0x14D30C0", Offset = "0x14D30C0", VA = "0x14D30C0")]
	public static extern void CSharp_SetAudioInputCallbacks(AkAudioInputManager.AudioSamplesInteropDelegate jarg1, AkAudioInputManager.AudioFormatInteropDelegate jarg2);

	[PreserveSig]
	[Token(Token = "0x6001116")]
	[Address(RVA = "0x14D317C", Offset = "0x14D317C", VA = "0x14D317C")]
	public static extern void CSharp_AkPathParams_listenerPos_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001117")]
	[Address(RVA = "0x14D3224", Offset = "0x14D3224", VA = "0x14D3224")]
	public static extern IntPtr CSharp_AkPathParams_listenerPos_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001118")]
	[Address(RVA = "0x14D32BC", Offset = "0x14D32BC", VA = "0x14D32BC")]
	public static extern void CSharp_AkPathParams_emitterPos_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001119")]
	[Address(RVA = "0x14D3364", Offset = "0x14D3364", VA = "0x14D3364")]
	public static extern IntPtr CSharp_AkPathParams_emitterPos_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600111A")]
	[Address(RVA = "0x14D33FC", Offset = "0x14D33FC", VA = "0x14D33FC")]
	public static extern void CSharp_AkPathParams_numValidPaths_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600111B")]
	[Address(RVA = "0x14D34A4", Offset = "0x14D34A4", VA = "0x14D34A4")]
	public static extern uint CSharp_AkPathParams_numValidPaths_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600111C")]
	[Address(RVA = "0x14D353C", Offset = "0x14D353C", VA = "0x14D353C")]
	public static extern IntPtr CSharp_new_AkPathParams();

	[PreserveSig]
	[Token(Token = "0x600111D")]
	[Address(RVA = "0x14D35C4", Offset = "0x14D35C4", VA = "0x14D35C4")]
	public static extern void CSharp_delete_AkPathParams(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600111E")]
	[Address(RVA = "0x14D365C", Offset = "0x14D365C", VA = "0x14D365C")]
	public static extern IntPtr CSharp_new_AkUnityPlatformSpecificSettings();

	[PreserveSig]
	[Token(Token = "0x600111F")]
	[Address(RVA = "0x14D36E4", Offset = "0x14D36E4", VA = "0x14D36E4")]
	public static extern void CSharp_delete_AkUnityPlatformSpecificSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001120")]
	[Address(RVA = "0x14D377C", Offset = "0x14D377C", VA = "0x14D377C")]
	public static extern IntPtr CSharp_new_AkCommunicationSettings();

	[PreserveSig]
	[Token(Token = "0x6001121")]
	[Address(RVA = "0x14D3804", Offset = "0x14D3804", VA = "0x14D3804")]
	public static extern void CSharp_AkCommunicationSettings_uPoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001122")]
	[Address(RVA = "0x14D38AC", Offset = "0x14D38AC", VA = "0x14D38AC")]
	public static extern uint CSharp_AkCommunicationSettings_uPoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001123")]
	[Address(RVA = "0x14D3944", Offset = "0x14D3944", VA = "0x14D3944")]
	public static extern void CSharp_AkCommunicationSettings_uDiscoveryBroadcastPort_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x6001124")]
	[Address(RVA = "0x14D39EC", Offset = "0x14D39EC", VA = "0x14D39EC")]
	public static extern ushort CSharp_AkCommunicationSettings_uDiscoveryBroadcastPort_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001125")]
	[Address(RVA = "0x14D3A84", Offset = "0x14D3A84", VA = "0x14D3A84")]
	public static extern void CSharp_AkCommunicationSettings_uCommandPort_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x6001126")]
	[Address(RVA = "0x14D3B2C", Offset = "0x14D3B2C", VA = "0x14D3B2C")]
	public static extern ushort CSharp_AkCommunicationSettings_uCommandPort_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001127")]
	[Address(RVA = "0x14D3BC4", Offset = "0x14D3BC4", VA = "0x14D3BC4")]
	public static extern void CSharp_AkCommunicationSettings_uNotificationPort_set(IntPtr jarg1, ushort jarg2);

	[PreserveSig]
	[Token(Token = "0x6001128")]
	[Address(RVA = "0x14D3C6C", Offset = "0x14D3C6C", VA = "0x14D3C6C")]
	public static extern ushort CSharp_AkCommunicationSettings_uNotificationPort_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001129")]
	[Address(RVA = "0x14D3D04", Offset = "0x14D3D04", VA = "0x14D3D04")]
	public static extern void CSharp_AkCommunicationSettings_bInitSystemLib_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x600112A")]
	[Address(RVA = "0x14D3DAC", Offset = "0x14D3DAC", VA = "0x14D3DAC")]
	public static extern bool CSharp_AkCommunicationSettings_bInitSystemLib_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600112B")]
	[Address(RVA = "0x14D3E4C", Offset = "0x14D3E4C", VA = "0x14D3E4C")]
	public static extern void CSharp_AkCommunicationSettings_szAppNetworkName_set(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x600112C")]
	[Address(RVA = "0x14D3F08", Offset = "0x14D3F08", VA = "0x14D3F08")]
	public static extern IntPtr CSharp_AkCommunicationSettings_szAppNetworkName_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600112D")]
	[Address(RVA = "0x14D3FA0", Offset = "0x14D3FA0", VA = "0x14D3FA0")]
	public static extern void CSharp_delete_AkCommunicationSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600112E")]
	[Address(RVA = "0x14D4038", Offset = "0x14D4038", VA = "0x14D4038")]
	public static extern IntPtr CSharp_new_AkInitializationSettings();

	[PreserveSig]
	[Token(Token = "0x600112F")]
	[Address(RVA = "0x14D40C0", Offset = "0x14D40C0", VA = "0x14D40C0")]
	public static extern void CSharp_delete_AkInitializationSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001130")]
	[Address(RVA = "0x14D4158", Offset = "0x14D4158", VA = "0x14D4158")]
	public static extern void CSharp_AkInitializationSettings_memSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001131")]
	[Address(RVA = "0x14D4200", Offset = "0x14D4200", VA = "0x14D4200")]
	public static extern IntPtr CSharp_AkInitializationSettings_memSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001132")]
	[Address(RVA = "0x14D4298", Offset = "0x14D4298", VA = "0x14D4298")]
	public static extern void CSharp_AkInitializationSettings_streamMgrSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001133")]
	[Address(RVA = "0x14D4340", Offset = "0x14D4340", VA = "0x14D4340")]
	public static extern IntPtr CSharp_AkInitializationSettings_streamMgrSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001134")]
	[Address(RVA = "0x14D43D8", Offset = "0x14D43D8", VA = "0x14D43D8")]
	public static extern void CSharp_AkInitializationSettings_deviceSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001135")]
	[Address(RVA = "0x14D4480", Offset = "0x14D4480", VA = "0x14D4480")]
	public static extern IntPtr CSharp_AkInitializationSettings_deviceSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001136")]
	[Address(RVA = "0x14D4518", Offset = "0x14D4518", VA = "0x14D4518")]
	public static extern void CSharp_AkInitializationSettings_initSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001137")]
	[Address(RVA = "0x14D45C0", Offset = "0x14D45C0", VA = "0x14D45C0")]
	public static extern IntPtr CSharp_AkInitializationSettings_initSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001138")]
	[Address(RVA = "0x14D4658", Offset = "0x14D4658", VA = "0x14D4658")]
	public static extern void CSharp_AkInitializationSettings_platformSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001139")]
	[Address(RVA = "0x14D4700", Offset = "0x14D4700", VA = "0x14D4700")]
	public static extern IntPtr CSharp_AkInitializationSettings_platformSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600113A")]
	[Address(RVA = "0x14D4798", Offset = "0x14D4798", VA = "0x14D4798")]
	public static extern void CSharp_AkInitializationSettings_musicSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600113B")]
	[Address(RVA = "0x14D4840", Offset = "0x14D4840", VA = "0x14D4840")]
	public static extern IntPtr CSharp_AkInitializationSettings_musicSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600113C")]
	[Address(RVA = "0x14D48D8", Offset = "0x14D48D8", VA = "0x14D48D8")]
	public static extern void CSharp_AkInitializationSettings_preparePoolSize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600113D")]
	[Address(RVA = "0x14D4980", Offset = "0x14D4980", VA = "0x14D4980")]
	public static extern uint CSharp_AkInitializationSettings_preparePoolSize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600113E")]
	[Address(RVA = "0x14D4A18", Offset = "0x14D4A18", VA = "0x14D4A18")]
	public static extern void CSharp_AkInitializationSettings_unityPlatformSpecificSettings_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x600113F")]
	[Address(RVA = "0x14D4AC0", Offset = "0x14D4AC0", VA = "0x14D4AC0")]
	public static extern IntPtr CSharp_AkInitializationSettings_unityPlatformSpecificSettings_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001140")]
	[Address(RVA = "0x14D4B58", Offset = "0x14D4B58", VA = "0x14D4B58")]
	public static extern void CSharp_AkInitializationSettings_useAsyncOpen_set(IntPtr jarg1, bool jarg2);

	[PreserveSig]
	[Token(Token = "0x6001141")]
	[Address(RVA = "0x14D4C00", Offset = "0x14D4C00", VA = "0x14D4C00")]
	public static extern bool CSharp_AkInitializationSettings_useAsyncOpen_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001142")]
	[Address(RVA = "0x14D4CA0", Offset = "0x14D4CA0", VA = "0x14D4CA0")]
	public static extern IntPtr CSharp_new_AkExternalSourceInfo__SWIG_0();

	[PreserveSig]
	[Token(Token = "0x6001143")]
	[Address(RVA = "0x14D4D28", Offset = "0x14D4D28", VA = "0x14D4D28")]
	public static extern void CSharp_delete_AkExternalSourceInfo(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001144")]
	[Address(RVA = "0x14D4DC0", Offset = "0x14D4DC0", VA = "0x14D4DC0")]
	public static extern IntPtr CSharp_new_AkExternalSourceInfo__SWIG_1(IntPtr jarg1, uint jarg2, uint jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6001145")]
	[Address(RVA = "0x14D4E80", Offset = "0x14D4E80", VA = "0x14D4E80")]
	public static extern IntPtr CSharp_new_AkExternalSourceInfo__SWIG_2(string jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001146")]
	[Address(RVA = "0x14D4F48", Offset = "0x14D4F48", VA = "0x14D4F48")]
	public static extern IntPtr CSharp_new_AkExternalSourceInfo__SWIG_3(uint jarg1, uint jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001147")]
	[Address(RVA = "0x14D4FF8", Offset = "0x14D4FF8", VA = "0x14D4FF8")]
	public static extern void CSharp_AkExternalSourceInfo_Clear(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001148")]
	[Address(RVA = "0x14D5090", Offset = "0x14D5090", VA = "0x14D5090")]
	public static extern void CSharp_AkExternalSourceInfo_Clone(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001149")]
	[Address(RVA = "0x14D5138", Offset = "0x14D5138", VA = "0x14D5138")]
	public static extern int CSharp_AkExternalSourceInfo_GetSizeOf();

	[PreserveSig]
	[Token(Token = "0x600114A")]
	[Address(RVA = "0x14D51C0", Offset = "0x14D51C0", VA = "0x14D51C0")]
	public static extern void CSharp_AkExternalSourceInfo_iExternalSrcCookie_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600114B")]
	[Address(RVA = "0x14D5268", Offset = "0x14D5268", VA = "0x14D5268")]
	public static extern uint CSharp_AkExternalSourceInfo_iExternalSrcCookie_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600114C")]
	[Address(RVA = "0x14D5300", Offset = "0x14D5300", VA = "0x14D5300")]
	public static extern void CSharp_AkExternalSourceInfo_idCodec_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600114D")]
	[Address(RVA = "0x14D53A8", Offset = "0x14D53A8", VA = "0x14D53A8")]
	public static extern uint CSharp_AkExternalSourceInfo_idCodec_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600114E")]
	[Address(RVA = "0x14D5440", Offset = "0x14D5440", VA = "0x14D5440")]
	public static extern void CSharp_AkExternalSourceInfo_szFile_set(IntPtr jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x600114F")]
	[Address(RVA = "0x14D54FC", Offset = "0x14D54FC", VA = "0x14D54FC")]
	public static extern IntPtr CSharp_AkExternalSourceInfo_szFile_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001150")]
	[Address(RVA = "0x14D5594", Offset = "0x14D5594", VA = "0x14D5594")]
	public static extern void CSharp_AkExternalSourceInfo_pInMemory_set(IntPtr jarg1, IntPtr jarg2);

	[PreserveSig]
	[Token(Token = "0x6001151")]
	[Address(RVA = "0x14D563C", Offset = "0x14D563C", VA = "0x14D563C")]
	public static extern IntPtr CSharp_AkExternalSourceInfo_pInMemory_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001152")]
	[Address(RVA = "0x14D56D4", Offset = "0x14D56D4", VA = "0x14D56D4")]
	public static extern void CSharp_AkExternalSourceInfo_uiMemorySize_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001153")]
	[Address(RVA = "0x14D577C", Offset = "0x14D577C", VA = "0x14D577C")]
	public static extern uint CSharp_AkExternalSourceInfo_uiMemorySize_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001154")]
	[Address(RVA = "0x14D5814", Offset = "0x14D5814", VA = "0x14D5814")]
	public static extern void CSharp_AkExternalSourceInfo_idFile_set(IntPtr jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x6001155")]
	[Address(RVA = "0x14D58BC", Offset = "0x14D58BC", VA = "0x14D58BC")]
	public static extern uint CSharp_AkExternalSourceInfo_idFile_get(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001156")]
	[Address(RVA = "0x14D5954", Offset = "0x14D5954", VA = "0x14D5954")]
	public static extern int CSharp_Init(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001157")]
	[Address(RVA = "0x14D59EC", Offset = "0x14D59EC", VA = "0x14D59EC")]
	public static extern int CSharp_InitSpatialAudio(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001158")]
	[Address(RVA = "0x14D5A84", Offset = "0x14D5A84", VA = "0x14D5A84")]
	public static extern int CSharp_InitCommunication(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001159")]
	[Address(RVA = "0x14D5B1C", Offset = "0x14D5B1C", VA = "0x14D5B1C")]
	public static extern void CSharp_Term();

	[PreserveSig]
	[Token(Token = "0x600115A")]
	[Address(RVA = "0x14D5BA4", Offset = "0x14D5BA4", VA = "0x14D5BA4")]
	public static extern int CSharp_RegisterGameObjInternal(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x600115B")]
	[Address(RVA = "0x14D5C3C", Offset = "0x14D5C3C", VA = "0x14D5C3C")]
	public static extern int CSharp_UnregisterGameObjInternal(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x600115C")]
	[Address(RVA = "0x14D5CD4", Offset = "0x14D5CD4", VA = "0x14D5CD4")]
	public static extern int CSharp_RegisterGameObjInternal_WithName(ulong jarg1, string jarg2);

	[PreserveSig]
	[Token(Token = "0x600115D")]
	[Address(RVA = "0x14D5D98", Offset = "0x14D5D98", VA = "0x14D5D98")]
	public static extern int CSharp_SetBasePath(string jarg1);

	[PreserveSig]
	[Token(Token = "0x600115E")]
	[Address(RVA = "0x14D5E48", Offset = "0x14D5E48", VA = "0x14D5E48")]
	public static extern int CSharp_SetCurrentLanguage(string jarg1);

	[PreserveSig]
	[Token(Token = "0x600115F")]
	[Address(RVA = "0x14D5EF8", Offset = "0x14D5EF8", VA = "0x14D5EF8")]
	public static extern int CSharp_LoadFilePackage(string jarg1, out uint jarg2, int jarg3);

	[PreserveSig]
	[Token(Token = "0x6001160")]
	[Address(RVA = "0x14D5FC0", Offset = "0x14D5FC0", VA = "0x14D5FC0")]
	public static extern int CSharp_AddBasePath(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6001161")]
	[Address(RVA = "0x14D6070", Offset = "0x14D6070", VA = "0x14D6070")]
	public static extern int CSharp_SetGameName(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6001162")]
	[Address(RVA = "0x14D6120", Offset = "0x14D6120", VA = "0x14D6120")]
	public static extern int CSharp_SetDecodedBankPath(string jarg1);

	[PreserveSig]
	[Token(Token = "0x6001163")]
	[Address(RVA = "0x14D61D0", Offset = "0x14D61D0", VA = "0x14D61D0")]
	public static extern int CSharp_LoadAndDecodeBank(string jarg1, bool jarg2, out uint jarg3);

	[PreserveSig]
	[Token(Token = "0x6001164")]
	[Address(RVA = "0x14D6298", Offset = "0x14D6298", VA = "0x14D6298")]
	public static extern int CSharp_LoadAndDecodeBankFromMemory(IntPtr jarg1, uint jarg2, bool jarg3, string jarg4, bool jarg5, out uint jarg6);

	[PreserveSig]
	[Token(Token = "0x6001165")]
	[Address(RVA = "0x14D638C", Offset = "0x14D638C", VA = "0x14D638C")]
	public static extern IntPtr CSharp_GetCurrentLanguage();

	[PreserveSig]
	[Token(Token = "0x6001166")]
	[Address(RVA = "0x14D6414", Offset = "0x14D6414", VA = "0x14D6414")]
	public static extern int CSharp_UnloadFilePackage(uint jarg1);

	[PreserveSig]
	[Token(Token = "0x6001167")]
	[Address(RVA = "0x14D64AC", Offset = "0x14D64AC", VA = "0x14D64AC")]
	public static extern int CSharp_UnloadAllFilePackages();

	[PreserveSig]
	[Token(Token = "0x6001168")]
	[Address(RVA = "0x14D6534", Offset = "0x14D6534", VA = "0x14D6534")]
	public static extern int CSharp_SetObjectPosition(ulong jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10);

	[PreserveSig]
	[Token(Token = "0x6001169")]
	[Address(RVA = "0x14D6634", Offset = "0x14D6634", VA = "0x14D6634")]
	public static extern int CSharp_GetSourceMultiplePlayPositions(uint jarg1, [Out] uint[] jarg2, [Out] uint[] jarg3, [Out] int[] jarg4, ref uint jarg5, bool jarg6);

	[PreserveSig]
	[Token(Token = "0x600116A")]
	[Address(RVA = "0x14D6858", Offset = "0x14D6858", VA = "0x14D6858")]
	public static extern int CSharp_SetListeners(ulong jarg1, ulong[] jarg2, uint jarg3);

	[PreserveSig]
	[Token(Token = "0x600116B")]
	[Address(RVA = "0x14D6910", Offset = "0x14D6910", VA = "0x14D6910")]
	public static extern int CSharp_SetDefaultListeners(ulong[] jarg1, uint jarg2);

	[PreserveSig]
	[Token(Token = "0x600116C")]
	[Address(RVA = "0x14D69C0", Offset = "0x14D69C0", VA = "0x14D69C0")]
	public static extern int CSharp_AddOutput(IntPtr jarg1, out ulong jarg2, ulong[] jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x600116D")]
	[Address(RVA = "0x14D6A88", Offset = "0x14D6A88", VA = "0x14D6A88")]
	public static extern void CSharp_GetDefaultStreamSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600116E")]
	[Address(RVA = "0x14D6B20", Offset = "0x14D6B20", VA = "0x14D6B20")]
	public static extern void CSharp_GetDefaultDeviceSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600116F")]
	[Address(RVA = "0x14D6BB8", Offset = "0x14D6BB8", VA = "0x14D6BB8")]
	public static extern void CSharp_GetDefaultMusicSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001170")]
	[Address(RVA = "0x14D6C50", Offset = "0x14D6C50", VA = "0x14D6C50")]
	public static extern void CSharp_GetDefaultInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001171")]
	[Address(RVA = "0x14D6CE8", Offset = "0x14D6CE8", VA = "0x14D6CE8")]
	public static extern void CSharp_GetDefaultPlatformInitSettings(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001172")]
	[Address(RVA = "0x14D6D80", Offset = "0x14D6D80", VA = "0x14D6D80")]
	public static extern uint CSharp_GetMajorMinorVersion();

	[PreserveSig]
	[Token(Token = "0x6001173")]
	[Address(RVA = "0x14D6E08", Offset = "0x14D6E08", VA = "0x14D6E08")]
	public static extern uint CSharp_GetSubminorBuildVersion();

	[PreserveSig]
	[Token(Token = "0x6001174")]
	[Address(RVA = "0x14D6E90", Offset = "0x14D6E90", VA = "0x14D6E90")]
	public static extern int CSharp_QueryIndirectPaths(ulong jarg1, IntPtr jarg2, IntPtr jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6001175")]
	[Address(RVA = "0x14D6F50", Offset = "0x14D6F50", VA = "0x14D6F50")]
	public static extern int CSharp_QueryDiffractionPaths(ulong jarg1, IntPtr jarg2, IntPtr jarg3, uint jarg4);

	[PreserveSig]
	[Token(Token = "0x6001176")]
	[Address(RVA = "0x14D700C", Offset = "0x14D700C", VA = "0x14D700C")]
	public static extern int CSharp_SetRoomPortal(ulong jarg1, IntPtr jarg2, IntPtr jarg3, bool jarg4, ulong jarg5, ulong jarg6);

	[PreserveSig]
	[Token(Token = "0x6001177")]
	[Address(RVA = "0x14D70E4", Offset = "0x14D70E4", VA = "0x14D70E4")]
	public static extern int CSharp_SetRoom(ulong jarg1, IntPtr jarg2, string jarg3);

	[PreserveSig]
	[Token(Token = "0x6001178")]
	[Address(RVA = "0x14D71B0", Offset = "0x14D71B0", VA = "0x14D71B0")]
	public static extern int CSharp_RegisterSpatialAudioListener(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x6001179")]
	[Address(RVA = "0x14D7248", Offset = "0x14D7248", VA = "0x14D7248")]
	public static extern int CSharp_UnregisterSpatialAudioListener(ulong jarg1);

	[PreserveSig]
	[Token(Token = "0x600117A")]
	[Address(RVA = "0x14D72E0", Offset = "0x14D72E0", VA = "0x14D72E0")]
	public static extern int CSharp_SetGeometry(ulong jarg1, IntPtr jarg2, uint jarg3, IntPtr jarg4, uint jarg5, IntPtr jarg6, uint jarg7, ulong jarg8, bool jarg9, bool jarg10);

	[PreserveSig]
	[Token(Token = "0x600117B")]
	[Address(RVA = "0x14D73E8", Offset = "0x14D73E8", VA = "0x14D73E8")]
	public static extern IntPtr CSharp_AkPlaylist_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600117C")]
	[Address(RVA = "0x14D7480", Offset = "0x14D7480", VA = "0x14D7480")]
	public static extern IntPtr CSharp_AkMIDIPost_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600117D")]
	[Address(RVA = "0x14D7518", Offset = "0x14D7518", VA = "0x14D7518")]
	public static extern IntPtr CSharp_AkEventCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600117E")]
	[Address(RVA = "0x14D75B0", Offset = "0x14D75B0", VA = "0x14D75B0")]
	public static extern IntPtr CSharp_AkMIDIEventCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x600117F")]
	[Address(RVA = "0x14D7648", Offset = "0x14D7648", VA = "0x14D7648")]
	public static extern IntPtr CSharp_AkMarkerCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001180")]
	[Address(RVA = "0x14D76E0", Offset = "0x14D76E0", VA = "0x14D76E0")]
	public static extern IntPtr CSharp_AkDurationCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001181")]
	[Address(RVA = "0x14D7778", Offset = "0x14D7778", VA = "0x14D7778")]
	public static extern IntPtr CSharp_AkDynamicSequenceItemCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001182")]
	[Address(RVA = "0x14D7810", Offset = "0x14D7810", VA = "0x14D7810")]
	public static extern IntPtr CSharp_AkMusicSyncCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[PreserveSig]
	[Token(Token = "0x6001183")]
	[Address(RVA = "0x14D78A8", Offset = "0x14D78A8", VA = "0x14D78A8")]
	public static extern IntPtr CSharp_AkMusicPlaylistCallbackInfo_SWIGUpcast(IntPtr jarg1);

	[Token(Token = "0x6001184")]
	[Address(RVA = "0x14D7940", Offset = "0x14D7940", VA = "0x14D7940")]
	public AkSoundEnginePINVOKE()
	{
	}
}
[Token(Token = "0x2000152")]
public class AkThreadProperties : IDisposable
{
	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000E9")]
	public int nPriority
	{
		[Token(Token = "0x600118B")]
		[Address(RVA = "0xE07F64", Offset = "0xE07F64", VA = "0xE07F64")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600118A")]
		[Address(RVA = "0xE07EE8", Offset = "0xE07EE8", VA = "0xE07EE8")]
		set
		{
		}
	}

	[Token(Token = "0x170000EA")]
	public uint uStackSize
	{
		[Token(Token = "0x600118D")]
		[Address(RVA = "0xE0804C", Offset = "0xE0804C", VA = "0xE0804C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600118C")]
		[Address(RVA = "0xE07FD0", Offset = "0xE07FD0", VA = "0xE07FD0")]
		set
		{
		}
	}

	[Token(Token = "0x170000EB")]
	public int uSchedPolicy
	{
		[Token(Token = "0x600118F")]
		[Address(RVA = "0xE08134", Offset = "0xE08134", VA = "0xE08134")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600118E")]
		[Address(RVA = "0xE080B8", Offset = "0xE080B8", VA = "0xE080B8")]
		set
		{
		}
	}

	[Token(Token = "0x170000EC")]
	public uint dwAffinityMask
	{
		[Token(Token = "0x6001191")]
		[Address(RVA = "0xE0821C", Offset = "0xE0821C", VA = "0xE0821C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001190")]
		[Address(RVA = "0xE081A0", Offset = "0xE081A0", VA = "0xE081A0")]
		set
		{
		}
	}

	[Token(Token = "0x6001185")]
	[Address(RVA = "0xE07C70", Offset = "0xE07C70", VA = "0xE07C70")]
	internal AkThreadProperties(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001186")]
	[Address(RVA = "0xE07CB0", Offset = "0xE07CB0", VA = "0xE07CB0")]
	internal static IntPtr getCPtr(AkThreadProperties obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001187")]
	[Address(RVA = "0xE07D00", Offset = "0xE07D00", VA = "0xE07D00", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001188")]
	[Address(RVA = "0xE07D34", Offset = "0xE07D34", VA = "0xE07D34", Slot = "1")]
	~AkThreadProperties()
	{
	}

	[Token(Token = "0x6001189")]
	[Address(RVA = "0xE07DA8", Offset = "0xE07DA8", VA = "0xE07DA8", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001192")]
	[Address(RVA = "0xE08288", Offset = "0xE08288", VA = "0xE08288")]
	public AkThreadProperties()
	{
	}
}
[Token(Token = "0x2000153")]
public class AkUnityPlatformSpecificSettings : IDisposable
{
	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x6001193")]
	[Address(RVA = "0xE0AE9C", Offset = "0xE0AE9C", VA = "0xE0AE9C")]
	internal AkUnityPlatformSpecificSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001194")]
	[Address(RVA = "0xE0AEDC", Offset = "0xE0AEDC", VA = "0xE0AEDC")]
	internal static IntPtr getCPtr(AkUnityPlatformSpecificSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001195")]
	[Address(RVA = "0xE0AF2C", Offset = "0xE0AF2C", VA = "0xE0AF2C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001196")]
	[Address(RVA = "0xE0AF60", Offset = "0xE0AF60", VA = "0xE0AF60", Slot = "1")]
	~AkUnityPlatformSpecificSettings()
	{
	}

	[Token(Token = "0x6001197")]
	[Address(RVA = "0xE0AFD4", Offset = "0xE0AFD4", VA = "0xE0AFD4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001198")]
	[Address(RVA = "0xE0B114", Offset = "0xE0B114", VA = "0xE0B114")]
	public AkUnityPlatformSpecificSettings()
	{
	}
}
[Token(Token = "0x2000154")]
public class _ArrayPoolDefault : IDisposable
{
	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x6001199")]
	[Address(RVA = "0x160A4F8", Offset = "0x160A4F8", VA = "0x160A4F8")]
	internal _ArrayPoolDefault(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600119A")]
	[Address(RVA = "0x160A538", Offset = "0x160A538", VA = "0x160A538")]
	internal static IntPtr getCPtr(_ArrayPoolDefault obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600119B")]
	[Address(RVA = "0x160A588", Offset = "0x160A588", VA = "0x160A588", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600119C")]
	[Address(RVA = "0x160A5BC", Offset = "0x160A5BC", VA = "0x160A5BC", Slot = "1")]
	~_ArrayPoolDefault()
	{
	}

	[Token(Token = "0x600119D")]
	[Address(RVA = "0x160A630", Offset = "0x160A630", VA = "0x160A630", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600119E")]
	[Address(RVA = "0x160A770", Offset = "0x160A770", VA = "0x160A770")]
	public static int Get()
	{
		return default(int);
	}

	[Token(Token = "0x600119F")]
	[Address(RVA = "0x160A7D0", Offset = "0x160A7D0", VA = "0x160A7D0")]
	public _ArrayPoolDefault()
	{
	}
}
[Token(Token = "0x2000155")]
public class _ArrayPoolLEngineDefault : IDisposable
{
	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x60011A0")]
	[Address(RVA = "0x160A854", Offset = "0x160A854", VA = "0x160A854")]
	internal _ArrayPoolLEngineDefault(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60011A1")]
	[Address(RVA = "0x160A894", Offset = "0x160A894", VA = "0x160A894")]
	internal static IntPtr getCPtr(_ArrayPoolLEngineDefault obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60011A2")]
	[Address(RVA = "0x160A8E4", Offset = "0x160A8E4", VA = "0x160A8E4", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60011A3")]
	[Address(RVA = "0x160A918", Offset = "0x160A918", VA = "0x160A918", Slot = "1")]
	~_ArrayPoolLEngineDefault()
	{
	}

	[Token(Token = "0x60011A4")]
	[Address(RVA = "0x160A98C", Offset = "0x160A98C", VA = "0x160A98C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60011A5")]
	[Address(RVA = "0x160AACC", Offset = "0x160AACC", VA = "0x160AACC")]
	public static int Get()
	{
		return default(int);
	}

	[Token(Token = "0x60011A6")]
	[Address(RVA = "0x160AB2C", Offset = "0x160AB2C", VA = "0x160AB2C")]
	public _ArrayPoolLEngineDefault()
	{
	}
}
[Token(Token = "0x2000156")]
public class _ArrayPoolSpatialAudio : IDisposable
{
	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x60011A7")]
	[Address(RVA = "0x160ABB0", Offset = "0x160ABB0", VA = "0x160ABB0")]
	internal _ArrayPoolSpatialAudio(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60011A8")]
	[Address(RVA = "0x160ABF0", Offset = "0x160ABF0", VA = "0x160ABF0")]
	internal static IntPtr getCPtr(_ArrayPoolSpatialAudio obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60011A9")]
	[Address(RVA = "0x160AC40", Offset = "0x160AC40", VA = "0x160AC40", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60011AA")]
	[Address(RVA = "0x160AC74", Offset = "0x160AC74", VA = "0x160AC74", Slot = "1")]
	~_ArrayPoolSpatialAudio()
	{
	}

	[Token(Token = "0x60011AB")]
	[Address(RVA = "0x160ACE8", Offset = "0x160ACE8", VA = "0x160ACE8", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60011AC")]
	[Address(RVA = "0x160AE28", Offset = "0x160AE28", VA = "0x160AE28")]
	public static int Get()
	{
		return default(int);
	}

	[Token(Token = "0x60011AD")]
	[Address(RVA = "0x160AE88", Offset = "0x160AE88", VA = "0x160AE88")]
	public _ArrayPoolSpatialAudio()
	{
	}
}
[Token(Token = "0x2000157")]
public enum Ak3DPositionType
{
	[Token(Token = "0x4000A39")]
	AK_3DPositionType_Emitter,
	[Token(Token = "0x4000A3A")]
	AK_3DPositionType_EmitterWithAutomation,
	[Token(Token = "0x4000A3B")]
	AK_3DPositionType_ListenerWithAutomation
}
[Token(Token = "0x2000158")]
public enum Ak3DSpatializationMode
{
	[Token(Token = "0x4000A3D")]
	AK_SpatializationMode_None,
	[Token(Token = "0x4000A3E")]
	AK_SpatializationMode_PositionOnly,
	[Token(Token = "0x4000A3F")]
	AK_SpatializationMode_PositionAndOrientation
}
[Token(Token = "0x2000159")]
public class AkAcousticSurface : IDisposable
{
	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000ED")]
	public uint textureID
	{
		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xC176F4", Offset = "0xC176F4", VA = "0xC176F4")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xC17678", Offset = "0xC17678", VA = "0xC17678")]
		set
		{
		}
	}

	[Token(Token = "0x170000EE")]
	public uint reflectorChannelMask
	{
		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xC177DC", Offset = "0xC177DC", VA = "0xC177DC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xC17760", Offset = "0xC17760", VA = "0xC17760")]
		set
		{
		}
	}

	[Token(Token = "0x170000EF")]
	public string strName
	{
		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xC178C4", Offset = "0xC178C4", VA = "0xC178C4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xC17848", Offset = "0xC17848", VA = "0xC17848")]
		set
		{
		}
	}

	[Token(Token = "0x60011AE")]
	[Address(RVA = "0xC1737C", Offset = "0xC1737C", VA = "0xC1737C")]
	internal AkAcousticSurface(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60011AF")]
	[Address(RVA = "0xC173BC", Offset = "0xC173BC", VA = "0xC173BC")]
	internal static IntPtr getCPtr(AkAcousticSurface obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60011B0")]
	[Address(RVA = "0xC1740C", Offset = "0xC1740C", VA = "0xC1740C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60011B1")]
	[Address(RVA = "0xC17440", Offset = "0xC17440", VA = "0xC17440", Slot = "1")]
	~AkAcousticSurface()
	{
	}

	[Token(Token = "0x60011B2")]
	[Address(RVA = "0xC174B4", Offset = "0xC174B4", VA = "0xC174B4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60011B3")]
	[Address(RVA = "0xC175F4", Offset = "0xC175F4", VA = "0xC175F4")]
	public AkAcousticSurface()
	{
	}

	[Token(Token = "0x60011BA")]
	[Address(RVA = "0xC17964", Offset = "0xC17964", VA = "0xC17964")]
	public void Clear()
	{
	}

	[Token(Token = "0x60011BB")]
	[Address(RVA = "0xC179D0", Offset = "0xC179D0", VA = "0xC179D0")]
	public void DeleteName()
	{
	}

	[Token(Token = "0x60011BC")]
	[Address(RVA = "0xC17A3C", Offset = "0xC17A3C", VA = "0xC17A3C")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x60011BD")]
	[Address(RVA = "0xC17A9C", Offset = "0xC17A9C", VA = "0xC17A9C")]
	public void Clone(AkAcousticSurface other)
	{
	}
}
[Token(Token = "0x200015A")]
public enum AkActionOnEventType
{
	[Token(Token = "0x4000A43")]
	AkActionOnEventType_Stop,
	[Token(Token = "0x4000A44")]
	AkActionOnEventType_Pause,
	[Token(Token = "0x4000A45")]
	AkActionOnEventType_Resume,
	[Token(Token = "0x4000A46")]
	AkActionOnEventType_Break,
	[Token(Token = "0x4000A47")]
	AkActionOnEventType_ReleaseEnvelope
}
[Token(Token = "0x200015B")]
public enum AkAudioDeviceState
{
	[Token(Token = "0x4000A49")]
	AkDeviceState_Active = 1,
	[Token(Token = "0x4000A4A")]
	AkDeviceState_Disabled = 2,
	[Token(Token = "0x4000A4B")]
	AkDeviceState_NotPresent = 4,
	[Token(Token = "0x4000A4C")]
	AkDeviceState_Unplugged = 8,
	[Token(Token = "0x4000A4D")]
	AkDeviceState_All = 15
}
[Token(Token = "0x200015C")]
public class AkAudioFormat : IDisposable
{
	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000F0")]
	public uint uSampleRate
	{
		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xC19544", Offset = "0xC19544", VA = "0xC19544")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xC194C8", Offset = "0xC194C8", VA = "0xC194C8")]
		set
		{
		}
	}

	[Token(Token = "0x170000F1")]
	public AkChannelConfig channelConfig
	{
		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xC196A8", Offset = "0xC196A8", VA = "0xC196A8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xC195B0", Offset = "0xC195B0", VA = "0xC195B0")]
		set
		{
		}
	}

	[Token(Token = "0x170000F2")]
	public uint uBitsPerSample
	{
		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xC19814", Offset = "0xC19814", VA = "0xC19814")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xC19798", Offset = "0xC19798", VA = "0xC19798")]
		set
		{
		}
	}

	[Token(Token = "0x170000F3")]
	public uint uBlockAlign
	{
		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xC198FC", Offset = "0xC198FC", VA = "0xC198FC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xC19880", Offset = "0xC19880", VA = "0xC19880")]
		set
		{
		}
	}

	[Token(Token = "0x170000F4")]
	public uint uTypeID
	{
		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xC199E4", Offset = "0xC199E4", VA = "0xC199E4")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xC19968", Offset = "0xC19968", VA = "0xC19968")]
		set
		{
		}
	}

	[Token(Token = "0x170000F5")]
	public uint uInterleaveID
	{
		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xC19ACC", Offset = "0xC19ACC", VA = "0xC19ACC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xC19A50", Offset = "0xC19A50", VA = "0xC19A50")]
		set
		{
		}
	}

	[Token(Token = "0x60011BE")]
	[Address(RVA = "0xC19250", Offset = "0xC19250", VA = "0xC19250")]
	internal AkAudioFormat(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60011BF")]
	[Address(RVA = "0xC19290", Offset = "0xC19290", VA = "0xC19290")]
	internal static IntPtr getCPtr(AkAudioFormat obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60011C0")]
	[Address(RVA = "0xC192E0", Offset = "0xC192E0", VA = "0xC192E0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60011C1")]
	[Address(RVA = "0xC19314", Offset = "0xC19314", VA = "0xC19314", Slot = "1")]
	~AkAudioFormat()
	{
	}

	[Token(Token = "0x60011C2")]
	[Address(RVA = "0xC19388", Offset = "0xC19388", VA = "0xC19388", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60011CF")]
	[Address(RVA = "0xC19B38", Offset = "0xC19B38", VA = "0xC19B38")]
	public uint GetNumChannels()
	{
		return default(uint);
	}

	[Token(Token = "0x60011D0")]
	[Address(RVA = "0xC19BA4", Offset = "0xC19BA4", VA = "0xC19BA4")]
	public uint GetBitsPerSample()
	{
		return default(uint);
	}

	[Token(Token = "0x60011D1")]
	[Address(RVA = "0xC19C10", Offset = "0xC19C10", VA = "0xC19C10")]
	public uint GetBlockAlign()
	{
		return default(uint);
	}

	[Token(Token = "0x60011D2")]
	[Address(RVA = "0xC19C7C", Offset = "0xC19C7C", VA = "0xC19C7C")]
	public uint GetTypeID()
	{
		return default(uint);
	}

	[Token(Token = "0x60011D3")]
	[Address(RVA = "0xC19CE8", Offset = "0xC19CE8", VA = "0xC19CE8")]
	public uint GetInterleaveID()
	{
		return default(uint);
	}

	[Token(Token = "0x60011D4")]
	[Address(RVA = "0xC19D54", Offset = "0xC19D54", VA = "0xC19D54")]
	public void SetAll(uint in_uSampleRate, AkChannelConfig in_channelConfig, uint in_uBitsPerSample, uint in_uBlockAlign, uint in_uTypeID, uint in_uInterleaveID)
	{
	}

	[Token(Token = "0x60011D5")]
	[Address(RVA = "0xC19E34", Offset = "0xC19E34", VA = "0xC19E34")]
	public bool IsChannelConfigSupported()
	{
		return default(bool);
	}

	[Token(Token = "0x60011D6")]
	[Address(RVA = "0xC19EA0", Offset = "0xC19EA0", VA = "0xC19EA0")]
	public AkAudioFormat()
	{
	}
}
[Token(Token = "0x200015D")]
public class AkAudioInterruptionCallbackInfo : IDisposable
{
	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000F6")]
	public bool bEnterInterruption
	{
		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xC1B864", Offset = "0xC1B864", VA = "0xC1B864")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60011D7")]
	[Address(RVA = "0xC1B5EC", Offset = "0xC1B5EC", VA = "0xC1B5EC")]
	internal AkAudioInterruptionCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60011D8")]
	[Address(RVA = "0xC1B62C", Offset = "0xC1B62C", VA = "0xC1B62C")]
	internal static IntPtr getCPtr(AkAudioInterruptionCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60011D9")]
	[Address(RVA = "0xC1B67C", Offset = "0xC1B67C", VA = "0xC1B67C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60011DA")]
	[Address(RVA = "0xC1B6B0", Offset = "0xC1B6B0", VA = "0xC1B6B0", Slot = "1")]
	~AkAudioInterruptionCallbackInfo()
	{
	}

	[Token(Token = "0x60011DB")]
	[Address(RVA = "0xC1B724", Offset = "0xC1B724", VA = "0xC1B724", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60011DD")]
	[Address(RVA = "0xC1B8D0", Offset = "0xC1B8D0", VA = "0xC1B8D0")]
	public AkAudioInterruptionCallbackInfo()
	{
	}
}
[Token(Token = "0x200015E")]
public class AkAudioSettings : IDisposable
{
	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000F7")]
	public uint uNumSamplesPerFrame
	{
		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xC1C934", Offset = "0xC1C934", VA = "0xC1C934")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xC1C8B8", Offset = "0xC1C8B8", VA = "0xC1C8B8")]
		set
		{
		}
	}

	[Token(Token = "0x170000F8")]
	public uint uNumSamplesPerSecond
	{
		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xC1CA1C", Offset = "0xC1CA1C", VA = "0xC1CA1C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xC1C9A0", Offset = "0xC1C9A0", VA = "0xC1C9A0")]
		set
		{
		}
	}

	[Token(Token = "0x60011DE")]
	[Address(RVA = "0xC1C640", Offset = "0xC1C640", VA = "0xC1C640")]
	internal AkAudioSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60011DF")]
	[Address(RVA = "0xC1C680", Offset = "0xC1C680", VA = "0xC1C680")]
	internal static IntPtr getCPtr(AkAudioSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60011E0")]
	[Address(RVA = "0xC1C6D0", Offset = "0xC1C6D0", VA = "0xC1C6D0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60011E1")]
	[Address(RVA = "0xC1C704", Offset = "0xC1C704", VA = "0xC1C704", Slot = "1")]
	~AkAudioSettings()
	{
	}

	[Token(Token = "0x60011E2")]
	[Address(RVA = "0xC1C778", Offset = "0xC1C778", VA = "0xC1C778", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60011E7")]
	[Address(RVA = "0xC1CA88", Offset = "0xC1CA88", VA = "0xC1CA88")]
	public AkAudioSettings()
	{
	}
}
[Token(Token = "0x200015F")]
public class AkAudioSourceChangeCallbackInfo : IDisposable
{
	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000F9")]
	public bool bOtherAudioPlaying
	{
		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xC1CD84", Offset = "0xC1CD84", VA = "0xC1CD84")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60011E8")]
	[Address(RVA = "0xC1CB0C", Offset = "0xC1CB0C", VA = "0xC1CB0C")]
	internal AkAudioSourceChangeCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60011E9")]
	[Address(RVA = "0xC1CB4C", Offset = "0xC1CB4C", VA = "0xC1CB4C")]
	internal static IntPtr getCPtr(AkAudioSourceChangeCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60011EA")]
	[Address(RVA = "0xC1CB9C", Offset = "0xC1CB9C", VA = "0xC1CB9C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60011EB")]
	[Address(RVA = "0xC1CBD0", Offset = "0xC1CBD0", VA = "0xC1CBD0", Slot = "1")]
	~AkAudioSourceChangeCallbackInfo()
	{
	}

	[Token(Token = "0x60011EC")]
	[Address(RVA = "0xC1CC44", Offset = "0xC1CC44", VA = "0xC1CC44", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60011EE")]
	[Address(RVA = "0xC1CDF0", Offset = "0xC1CDF0", VA = "0xC1CDF0")]
	public AkAudioSourceChangeCallbackInfo()
	{
	}
}
[Token(Token = "0x2000160")]
public class AkAuxSendValue : IDisposable
{
	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000FA")]
	public ulong listenerID
	{
		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xC1DA64", Offset = "0xC1DA64", VA = "0xC1DA64")]
		get
		{
			return default(ulong);
		}
		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xC1D9E8", Offset = "0xC1D9E8", VA = "0xC1D9E8")]
		set
		{
		}
	}

	[Token(Token = "0x170000FB")]
	public uint auxBusID
	{
		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xC1DB4C", Offset = "0xC1DB4C", VA = "0xC1DB4C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xC1DAD0", Offset = "0xC1DAD0", VA = "0xC1DAD0")]
		set
		{
		}
	}

	[Token(Token = "0x170000FC")]
	public float fControlValue
	{
		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xC1DC34", Offset = "0xC1DC34", VA = "0xC1DC34")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xC1DBB8", Offset = "0xC1DBB8", VA = "0xC1DBB8")]
		set
		{
		}
	}

	[Token(Token = "0x60011EF")]
	[Address(RVA = "0xC1D048", Offset = "0xC1D048", VA = "0xC1D048")]
	internal AkAuxSendValue(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60011F0")]
	[Address(RVA = "0xC1D7B0", Offset = "0xC1D7B0", VA = "0xC1D7B0")]
	internal static IntPtr getCPtr(AkAuxSendValue obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60011F1")]
	[Address(RVA = "0xC1D800", Offset = "0xC1D800", VA = "0xC1D800", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60011F2")]
	[Address(RVA = "0xC1D834", Offset = "0xC1D834", VA = "0xC1D834", Slot = "1")]
	~AkAuxSendValue()
	{
	}

	[Token(Token = "0x60011F3")]
	[Address(RVA = "0xC1D8A8", Offset = "0xC1D8A8", VA = "0xC1D8A8", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60011FA")]
	[Address(RVA = "0xC1DCA0", Offset = "0xC1DCA0", VA = "0xC1DCA0")]
	public void Set(GameObject listener, uint id, float value)
	{
	}

	[Token(Token = "0x60011FB")]
	[Address(RVA = "0xC1DD74", Offset = "0xC1DD74", VA = "0xC1DD74")]
	public bool IsSame(GameObject listener, uint id)
	{
		return default(bool);
	}

	[Token(Token = "0x60011FC")]
	[Address(RVA = "0xC1DE38", Offset = "0xC1DE38", VA = "0xC1DE38")]
	public static int GetSizeOf()
	{
		return default(int);
	}
}
[Token(Token = "0x2000161")]
public class AkBankCallbackInfo : IDisposable
{
	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170000FD")]
	public uint bankID
	{
		[Token(Token = "0x6001202")]
		[Address(RVA = "0xC1E5C8", Offset = "0xC1E5C8", VA = "0xC1E5C8")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x170000FE")]
	public IntPtr inMemoryBankPtr
	{
		[Token(Token = "0x6001203")]
		[Address(RVA = "0xC1E634", Offset = "0xC1E634", VA = "0xC1E634")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x170000FF")]
	public AKRESULT loadResult
	{
		[Token(Token = "0x6001204")]
		[Address(RVA = "0xC1E6A0", Offset = "0xC1E6A0", VA = "0xC1E6A0")]
		get
		{
			return default(AKRESULT);
		}
	}

	[Token(Token = "0x17000100")]
	public int memPoolId
	{
		[Token(Token = "0x6001205")]
		[Address(RVA = "0xC1E70C", Offset = "0xC1E70C", VA = "0xC1E70C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60011FD")]
	[Address(RVA = "0xC1E350", Offset = "0xC1E350", VA = "0xC1E350")]
	internal AkBankCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60011FE")]
	[Address(RVA = "0xC1E390", Offset = "0xC1E390", VA = "0xC1E390")]
	internal static IntPtr getCPtr(AkBankCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60011FF")]
	[Address(RVA = "0xC1E3E0", Offset = "0xC1E3E0", VA = "0xC1E3E0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001200")]
	[Address(RVA = "0xC1E414", Offset = "0xC1E414", VA = "0xC1E414", Slot = "1")]
	~AkBankCallbackInfo()
	{
	}

	[Token(Token = "0x6001201")]
	[Address(RVA = "0xC1E488", Offset = "0xC1E488", VA = "0xC1E488", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001206")]
	[Address(RVA = "0xC1E778", Offset = "0xC1E778", VA = "0xC1E778")]
	public AkBankCallbackInfo()
	{
	}
}
[Token(Token = "0x2000162")]
public enum AkBankContent
{
	[Token(Token = "0x4000A5B")]
	AkBankContent_StructureOnly,
	[Token(Token = "0x4000A5C")]
	AkBankContent_All
}
[Token(Token = "0x2000163")]
public enum AkBusHierarchyFlags
{
	[Token(Token = "0x4000A5E")]
	AkBusHierarchy_Primary = 1,
	[Token(Token = "0x4000A5F")]
	AkBusHierarchy_Secondary = 2,
	[Token(Token = "0x4000A60")]
	AkBusHierarchy_IsMaster = 0x80
}
[Token(Token = "0x2000164")]
public class AkCallbackInfo : IDisposable
{
	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000101")]
	public IntPtr pCookie
	{
		[Token(Token = "0x600120C")]
		[Address(RVA = "0xC20AE8", Offset = "0xC20AE8", VA = "0xC20AE8")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000102")]
	public ulong gameObjID
	{
		[Token(Token = "0x600120D")]
		[Address(RVA = "0xC20B54", Offset = "0xC20B54", VA = "0xC20B54")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x6001207")]
	[Address(RVA = "0xC20870", Offset = "0xC20870", VA = "0xC20870")]
	internal AkCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001208")]
	[Address(RVA = "0xC208B0", Offset = "0xC208B0", VA = "0xC208B0")]
	internal static IntPtr getCPtr(AkCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001209")]
	[Address(RVA = "0xC20900", Offset = "0xC20900", VA = "0xC20900", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600120A")]
	[Address(RVA = "0xC20934", Offset = "0xC20934", VA = "0xC20934", Slot = "1")]
	~AkCallbackInfo()
	{
	}

	[Token(Token = "0x600120B")]
	[Address(RVA = "0xC209A8", Offset = "0xC209A8", VA = "0xC209A8", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600120E")]
	[Address(RVA = "0xC20BC0", Offset = "0xC20BC0", VA = "0xC20BC0")]
	public AkCallbackInfo()
	{
	}
}
[Token(Token = "0x2000165")]
public class AkCallbackSerializer : IDisposable
{
	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x600120F")]
	[Address(RVA = "0xC23A90", Offset = "0xC23A90", VA = "0xC23A90")]
	internal AkCallbackSerializer(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001210")]
	[Address(RVA = "0xC23AD0", Offset = "0xC23AD0", VA = "0xC23AD0")]
	internal static IntPtr getCPtr(AkCallbackSerializer obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001211")]
	[Address(RVA = "0xC23B20", Offset = "0xC23B20", VA = "0xC23B20", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001212")]
	[Address(RVA = "0xC23B54", Offset = "0xC23B54", VA = "0xC23B54", Slot = "1")]
	~AkCallbackSerializer()
	{
	}

	[Token(Token = "0x6001213")]
	[Address(RVA = "0xC23BC8", Offset = "0xC23BC8", VA = "0xC23BC8", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001214")]
	[Address(RVA = "0xC2166C", Offset = "0xC2166C", VA = "0xC2166C")]
	public static AKRESULT Init(IntPtr in_pMemory, uint in_uSize)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001215")]
	[Address(RVA = "0xC217C0", Offset = "0xC217C0", VA = "0xC217C0")]
	public static void Term()
	{
	}

	[Token(Token = "0x6001216")]
	[Address(RVA = "0xC225E8", Offset = "0xC225E8", VA = "0xC225E8")]
	public static IntPtr Lock()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001217")]
	[Address(RVA = "0xC218A4", Offset = "0xC218A4", VA = "0xC218A4")]
	public static void SetLocalOutput(uint in_uErrorLevel)
	{
	}

	[Token(Token = "0x6001218")]
	[Address(RVA = "0xC22F60", Offset = "0xC22F60", VA = "0xC22F60")]
	public static void Unlock()
	{
	}

	[Token(Token = "0x6001219")]
	[Address(RVA = "0xC23D08", Offset = "0xC23D08", VA = "0xC23D08")]
	public static AKRESULT AudioSourceChangeCallbackFunc(bool in_bOtherAudioPlaying, object in_pCookie)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600121A")]
	[Address(RVA = "0xC23DA0", Offset = "0xC23DA0", VA = "0xC23DA0")]
	public AkCallbackSerializer()
	{
	}
}
[Token(Token = "0x2000166")]
public enum AkCallbackType
{
	[Token(Token = "0x4000A66")]
	AK_EndOfEvent = 1,
	[Token(Token = "0x4000A67")]
	AK_EndOfDynamicSequenceItem = 2,
	[Token(Token = "0x4000A68")]
	AK_Marker = 4,
	[Token(Token = "0x4000A69")]
	AK_Duration = 8,
	[Token(Token = "0x4000A6A")]
	AK_SpeakerVolumeMatrix = 16,
	[Token(Token = "0x4000A6B")]
	AK_Starvation = 32,
	[Token(Token = "0x4000A6C")]
	AK_MusicPlaylistSelect = 64,
	[Token(Token = "0x4000A6D")]
	AK_MusicPlayStarted = 128,
	[Token(Token = "0x4000A6E")]
	AK_MusicSyncBeat = 256,
	[Token(Token = "0x4000A6F")]
	AK_MusicSyncBar = 512,
	[Token(Token = "0x4000A70")]
	AK_MusicSyncEntry = 1024,
	[Token(Token = "0x4000A71")]
	AK_MusicSyncExit = 2048,
	[Token(Token = "0x4000A72")]
	AK_MusicSyncGrid = 4096,
	[Token(Token = "0x4000A73")]
	AK_MusicSyncUserCue = 8192,
	[Token(Token = "0x4000A74")]
	AK_MusicSyncPoint = 16384,
	[Token(Token = "0x4000A75")]
	AK_MusicSyncAll = 32512,
	[Token(Token = "0x4000A76")]
	AK_MIDIEvent = 65536,
	[Token(Token = "0x4000A77")]
	AK_CallbackBits = 1048575,
	[Token(Token = "0x4000A78")]
	AK_EnableGetSourcePlayPosition = 1048576,
	[Token(Token = "0x4000A79")]
	AK_EnableGetMusicPlayPosition = 2097152,
	[Token(Token = "0x4000A7A")]
	AK_EnableGetSourceStreamBuffering = 4194304,
	[Token(Token = "0x4000A7B")]
	AK_Monitoring = 536870912,
	[Token(Token = "0x4000A7C")]
	AK_AudioSourceChange = 587202560,
	[Token(Token = "0x4000A7D")]
	AK_Bank = 1073741824,
	[Token(Token = "0x4000A7E")]
	AK_AudioInterruption = 570425344
}
[Token(Token = "0x2000167")]
public class AkChannelConfig : IDisposable
{
	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000103")]
	public uint uNumChannels
	{
		[Token(Token = "0x6001221")]
		[Address(RVA = "0xC24088", Offset = "0xC24088", VA = "0xC24088")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001220")]
		[Address(RVA = "0xC2400C", Offset = "0xC2400C", VA = "0xC2400C")]
		set
		{
		}
	}

	[Token(Token = "0x17000104")]
	public uint eConfigType
	{
		[Token(Token = "0x6001223")]
		[Address(RVA = "0xC24170", Offset = "0xC24170", VA = "0xC24170")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001222")]
		[Address(RVA = "0xC240F4", Offset = "0xC240F4", VA = "0xC240F4")]
		set
		{
		}
	}

	[Token(Token = "0x17000105")]
	public uint uChannelMask
	{
		[Token(Token = "0x6001225")]
		[Address(RVA = "0xC24258", Offset = "0xC24258", VA = "0xC24258")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001224")]
		[Address(RVA = "0xC241DC", Offset = "0xC241DC", VA = "0xC241DC")]
		set
		{
		}
	}

	[Token(Token = "0x600121B")]
	[Address(RVA = "0xC19758", Offset = "0xC19758", VA = "0xC19758")]
	internal AkChannelConfig(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600121C")]
	[Address(RVA = "0xC19658", Offset = "0xC19658", VA = "0xC19658")]
	internal static IntPtr getCPtr(AkChannelConfig obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600121D")]
	[Address(RVA = "0xC23E24", Offset = "0xC23E24", VA = "0xC23E24", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600121E")]
	[Address(RVA = "0xC23E58", Offset = "0xC23E58", VA = "0xC23E58", Slot = "1")]
	~AkChannelConfig()
	{
	}

	[Token(Token = "0x600121F")]
	[Address(RVA = "0xC23ECC", Offset = "0xC23ECC", VA = "0xC23ECC", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001226")]
	[Address(RVA = "0xC242C4", Offset = "0xC242C4", VA = "0xC242C4")]
	public AkChannelConfig()
	{
	}

	[Token(Token = "0x6001227")]
	[Address(RVA = "0xC24348", Offset = "0xC24348", VA = "0xC24348")]
	public AkChannelConfig(uint in_uNumChannels, uint in_uChannelMask)
	{
	}

	[Token(Token = "0x6001228")]
	[Address(RVA = "0xC243E4", Offset = "0xC243E4", VA = "0xC243E4")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001229")]
	[Address(RVA = "0xC24450", Offset = "0xC24450", VA = "0xC24450")]
	public void SetStandard(uint in_uChannelMask)
	{
	}

	[Token(Token = "0x600122A")]
	[Address(RVA = "0xC244CC", Offset = "0xC244CC", VA = "0xC244CC")]
	public void SetStandardOrAnonymous(uint in_uNumChannels, uint in_uChannelMask)
	{
	}

	[Token(Token = "0x600122B")]
	[Address(RVA = "0xC24550", Offset = "0xC24550", VA = "0xC24550")]
	public void SetAnonymous(uint in_uNumChannels)
	{
	}

	[Token(Token = "0x600122C")]
	[Address(RVA = "0xC245CC", Offset = "0xC245CC", VA = "0xC245CC")]
	public void SetAmbisonic(uint in_uNumChannels)
	{
	}

	[Token(Token = "0x600122D")]
	[Address(RVA = "0xC24648", Offset = "0xC24648", VA = "0xC24648")]
	public bool IsValid()
	{
		return default(bool);
	}

	[Token(Token = "0x600122E")]
	[Address(RVA = "0xC246B4", Offset = "0xC246B4", VA = "0xC246B4")]
	public uint Serialize()
	{
		return default(uint);
	}

	[Token(Token = "0x600122F")]
	[Address(RVA = "0xC24720", Offset = "0xC24720", VA = "0xC24720")]
	public void Deserialize(uint in_uChannelConfig)
	{
	}

	[Token(Token = "0x6001230")]
	[Address(RVA = "0xC2479C", Offset = "0xC2479C", VA = "0xC2479C")]
	public AkChannelConfig RemoveLFE()
	{
		return null;
	}

	[Token(Token = "0x6001231")]
	[Address(RVA = "0xC24840", Offset = "0xC24840", VA = "0xC24840")]
	public AkChannelConfig RemoveCenter()
	{
		return null;
	}

	[Token(Token = "0x6001232")]
	[Address(RVA = "0xC248E4", Offset = "0xC248E4", VA = "0xC248E4")]
	public bool IsChannelConfigSupported()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000168")]
public enum AkChannelConfigType
{
	[Token(Token = "0x4000A82")]
	AK_ChannelConfigType_Anonymous,
	[Token(Token = "0x4000A83")]
	AK_ChannelConfigType_Standard,
	[Token(Token = "0x4000A84")]
	AK_ChannelConfigType_Ambisonic
}
[Token(Token = "0x2000169")]
public class AkChannelEmitter : IDisposable
{
	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000106")]
	public AkTransform position
	{
		[Token(Token = "0x6001239")]
		[Address(RVA = "0xC24C58", Offset = "0xC24C58", VA = "0xC24C58")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001238")]
		[Address(RVA = "0xC24BC8", Offset = "0xC24BC8", VA = "0xC24BC8")]
		set
		{
		}
	}

	[Token(Token = "0x17000107")]
	public uint uInputChannels
	{
		[Token(Token = "0x600123B")]
		[Address(RVA = "0xC24D84", Offset = "0xC24D84", VA = "0xC24D84")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600123A")]
		[Address(RVA = "0xC24D08", Offset = "0xC24D08", VA = "0xC24D08")]
		set
		{
		}
	}

	[Token(Token = "0x6001233")]
	[Address(RVA = "0xC24950", Offset = "0xC24950", VA = "0xC24950")]
	internal AkChannelEmitter(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001234")]
	[Address(RVA = "0xC24990", Offset = "0xC24990", VA = "0xC24990")]
	internal static IntPtr getCPtr(AkChannelEmitter obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001235")]
	[Address(RVA = "0xC249E0", Offset = "0xC249E0", VA = "0xC249E0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001236")]
	[Address(RVA = "0xC24A14", Offset = "0xC24A14", VA = "0xC24A14", Slot = "1")]
	~AkChannelEmitter()
	{
	}

	[Token(Token = "0x6001237")]
	[Address(RVA = "0xC24A88", Offset = "0xC24A88", VA = "0xC24A88", Slot = "6")]
	public virtual void Dispose()
	{
	}
}
[Token(Token = "0x200016A")]
public enum AkChannelOrdering
{
	[Token(Token = "0x4000A88")]
	ChannelOrdering_Standard,
	[Token(Token = "0x4000A89")]
	ChannelOrdering_RunTime
}
[Token(Token = "0x200016B")]
public enum AkConnectionType
{
	[Token(Token = "0x4000A8B")]
	ConnectionType_Direct,
	[Token(Token = "0x4000A8C")]
	ConnectionType_GameDefSend,
	[Token(Token = "0x4000A8D")]
	ConnectionType_UserDefSend
}
[Token(Token = "0x200016C")]
public enum AkCurveInterpolation
{
	[Token(Token = "0x4000A8F")]
	AkCurveInterpolation_Log3 = 0,
	[Token(Token = "0x4000A90")]
	AkCurveInterpolation_Sine = 1,
	[Token(Token = "0x4000A91")]
	AkCurveInterpolation_Log1 = 2,
	[Token(Token = "0x4000A92")]
	AkCurveInterpolation_InvSCurve = 3,
	[Token(Token = "0x4000A93")]
	AkCurveInterpolation_Linear = 4,
	[Token(Token = "0x4000A94")]
	AkCurveInterpolation_SCurve = 5,
	[Token(Token = "0x4000A95")]
	AkCurveInterpolation_Exp1 = 6,
	[Token(Token = "0x4000A96")]
	AkCurveInterpolation_SineRecip = 7,
	[Token(Token = "0x4000A97")]
	AkCurveInterpolation_Exp3 = 8,
	[Token(Token = "0x4000A98")]
	AkCurveInterpolation_LastFadeCurve = 8,
	[Token(Token = "0x4000A99")]
	AkCurveInterpolation_Constant = 9
}
[Token(Token = "0x200016D")]
public class AkDeviceSettings : IDisposable
{
	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000108")]
	public IntPtr pIOMemory
	{
		[Token(Token = "0x6001242")]
		[Address(RVA = "0xC26BE4", Offset = "0xC26BE4", VA = "0xC26BE4")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x6001241")]
		[Address(RVA = "0xC26B68", Offset = "0xC26B68", VA = "0xC26B68")]
		set
		{
		}
	}

	[Token(Token = "0x17000109")]
	public uint uIOMemorySize
	{
		[Token(Token = "0x6001244")]
		[Address(RVA = "0xC26C50", Offset = "0xC26C50", VA = "0xC26C50")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001243")]
		[Address(RVA = "0xC253DC", Offset = "0xC253DC", VA = "0xC253DC")]
		set
		{
		}
	}

	[Token(Token = "0x1700010A")]
	public uint uIOMemoryAlignment
	{
		[Token(Token = "0x6001246")]
		[Address(RVA = "0xC26D38", Offset = "0xC26D38", VA = "0xC26D38")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001245")]
		[Address(RVA = "0xC26CBC", Offset = "0xC26CBC", VA = "0xC26CBC")]
		set
		{
		}
	}

	[Token(Token = "0x1700010B")]
	public int ePoolAttributes
	{
		[Token(Token = "0x6001248")]
		[Address(RVA = "0xC26E20", Offset = "0xC26E20", VA = "0xC26E20")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001247")]
		[Address(RVA = "0xC26DA4", Offset = "0xC26DA4", VA = "0xC26DA4")]
		set
		{
		}
	}

	[Token(Token = "0x1700010C")]
	public uint uGranularity
	{
		[Token(Token = "0x600124A")]
		[Address(RVA = "0xC26F08", Offset = "0xC26F08", VA = "0xC26F08")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001249")]
		[Address(RVA = "0xC26E8C", Offset = "0xC26E8C", VA = "0xC26E8C")]
		set
		{
		}
	}

	[Token(Token = "0x1700010D")]
	public uint uSchedulerTypeFlags
	{
		[Token(Token = "0x600124C")]
		[Address(RVA = "0xC26FF0", Offset = "0xC26FF0", VA = "0xC26FF0")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600124B")]
		[Address(RVA = "0xC26F74", Offset = "0xC26F74", VA = "0xC26F74")]
		set
		{
		}
	}

	[Token(Token = "0x1700010E")]
	public AkThreadProperties threadProperties
	{
		[Token(Token = "0x600124E")]
		[Address(RVA = "0xC270EC", Offset = "0xC270EC", VA = "0xC270EC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600124D")]
		[Address(RVA = "0xC2705C", Offset = "0xC2705C", VA = "0xC2705C")]
		set
		{
		}
	}

	[Token(Token = "0x1700010F")]
	public float fTargetAutoStmBufferLength
	{
		[Token(Token = "0x6001250")]
		[Address(RVA = "0xC2719C", Offset = "0xC2719C", VA = "0xC2719C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600124F")]
		[Address(RVA = "0xC25458", Offset = "0xC25458", VA = "0xC25458")]
		set
		{
		}
	}

	[Token(Token = "0x17000110")]
	public uint uMaxConcurrentIO
	{
		[Token(Token = "0x6001252")]
		[Address(RVA = "0xC27284", Offset = "0xC27284", VA = "0xC27284")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001251")]
		[Address(RVA = "0xC27208", Offset = "0xC27208", VA = "0xC27208")]
		set
		{
		}
	}

	[Token(Token = "0x17000111")]
	public bool bUseStreamCache
	{
		[Token(Token = "0x6001254")]
		[Address(RVA = "0xC272F0", Offset = "0xC272F0", VA = "0xC272F0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001253")]
		[Address(RVA = "0xC254D4", Offset = "0xC254D4", VA = "0xC254D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000112")]
	public uint uMaxCachePinnedBytes
	{
		[Token(Token = "0x6001256")]
		[Address(RVA = "0xC2735C", Offset = "0xC2735C", VA = "0xC2735C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001255")]
		[Address(RVA = "0xC25550", Offset = "0xC25550", VA = "0xC25550")]
		set
		{
		}
	}

	[Token(Token = "0x600123C")]
	[Address(RVA = "0xC268F0", Offset = "0xC268F0", VA = "0xC268F0")]
	internal AkDeviceSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600123D")]
	[Address(RVA = "0xC26930", Offset = "0xC26930", VA = "0xC26930")]
	internal static IntPtr getCPtr(AkDeviceSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600123E")]
	[Address(RVA = "0xC26980", Offset = "0xC26980", VA = "0xC26980", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600123F")]
	[Address(RVA = "0xC269B4", Offset = "0xC269B4", VA = "0xC269B4", Slot = "1")]
	~AkDeviceSettings()
	{
	}

	[Token(Token = "0x6001240")]
	[Address(RVA = "0xC26A28", Offset = "0xC26A28", VA = "0xC26A28", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001257")]
	[Address(RVA = "0xC273C8", Offset = "0xC273C8", VA = "0xC273C8")]
	public AkDeviceSettings()
	{
	}
}
[Token(Token = "0x200016E")]
public enum AkDiffractionFlags
{
	[Token(Token = "0x4000A9D")]
	DiffractionFlags_UseBuiltInParam = 1,
	[Token(Token = "0x4000A9E")]
	DiffractionFlags_UseObstruction = 2,
	[Token(Token = "0x4000A9F")]
	DiffractionFlags_CalcEmitterVirtualPosition = 8,
	[Token(Token = "0x4000AA0")]
	DefaultDiffractionFlags = 11
}
[Token(Token = "0x200016F")]
public class AkDiffractionPathInfo : IDisposable
{
	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x4000AA3")]
	public const uint kMaxNodes = 8u;

	[Token(Token = "0x17000113")]
	public AkTransform virtualPos
	{
		[Token(Token = "0x600125E")]
		[Address(RVA = "0xC27754", Offset = "0xC27754", VA = "0xC27754")]
		get
		{
			return null;
		}
		[Token(Token = "0x600125D")]
		[Address(RVA = "0xC276C4", Offset = "0xC276C4", VA = "0xC276C4")]
		set
		{
		}
	}

	[Token(Token = "0x17000114")]
	public uint nodeCount
	{
		[Token(Token = "0x6001260")]
		[Address(RVA = "0xC27880", Offset = "0xC27880", VA = "0xC27880")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600125F")]
		[Address(RVA = "0xC27804", Offset = "0xC27804", VA = "0xC27804")]
		set
		{
		}
	}

	[Token(Token = "0x17000115")]
	public float diffraction
	{
		[Token(Token = "0x6001262")]
		[Address(RVA = "0xC27968", Offset = "0xC27968", VA = "0xC27968")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001261")]
		[Address(RVA = "0xC278EC", Offset = "0xC278EC", VA = "0xC278EC")]
		set
		{
		}
	}

	[Token(Token = "0x17000116")]
	public float totLength
	{
		[Token(Token = "0x6001264")]
		[Address(RVA = "0xC27A50", Offset = "0xC27A50", VA = "0xC27A50")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001263")]
		[Address(RVA = "0xC279D4", Offset = "0xC279D4", VA = "0xC279D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000117")]
	public float obstructionValue
	{
		[Token(Token = "0x6001266")]
		[Address(RVA = "0xC27B38", Offset = "0xC27B38", VA = "0xC27B38")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001265")]
		[Address(RVA = "0xC27ABC", Offset = "0xC27ABC", VA = "0xC27ABC")]
		set
		{
		}
	}

	[Token(Token = "0x6001258")]
	[Address(RVA = "0xC2744C", Offset = "0xC2744C", VA = "0xC2744C")]
	internal AkDiffractionPathInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001259")]
	[Address(RVA = "0xC2748C", Offset = "0xC2748C", VA = "0xC2748C")]
	internal static IntPtr getCPtr(AkDiffractionPathInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600125A")]
	[Address(RVA = "0xC274DC", Offset = "0xC274DC", VA = "0xC274DC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600125B")]
	[Address(RVA = "0xC27510", Offset = "0xC27510", VA = "0xC27510", Slot = "1")]
	~AkDiffractionPathInfo()
	{
	}

	[Token(Token = "0x600125C")]
	[Address(RVA = "0xC27584", Offset = "0xC27584", VA = "0xC27584", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001267")]
	[Address(RVA = "0xC27BA4", Offset = "0xC27BA4", VA = "0xC27BA4")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x6001268")]
	[Address(RVA = "0xC27C04", Offset = "0xC27C04", VA = "0xC27C04")]
	public AkVector GetNodes(uint idx)
	{
		return null;
	}

	[Token(Token = "0x6001269")]
	[Address(RVA = "0xC27CC4", Offset = "0xC27CC4", VA = "0xC27CC4")]
	public float GetAngles(uint idx)
	{
		return default(float);
	}

	[Token(Token = "0x600126A")]
	[Address(RVA = "0xC27D40", Offset = "0xC27D40", VA = "0xC27D40")]
	public ulong GetPortals(uint idx)
	{
		return default(ulong);
	}

	[Token(Token = "0x600126B")]
	[Address(RVA = "0xC27DBC", Offset = "0xC27DBC", VA = "0xC27DBC")]
	public ulong GetRooms(uint idx)
	{
		return default(ulong);
	}

	[Token(Token = "0x600126C")]
	[Address(RVA = "0xC27E38", Offset = "0xC27E38", VA = "0xC27E38")]
	public void Clone(AkDiffractionPathInfo other)
	{
	}

	[Token(Token = "0x600126D")]
	[Address(RVA = "0xC27EE0", Offset = "0xC27EE0", VA = "0xC27EE0")]
	public AkDiffractionPathInfo()
	{
	}
}
[Token(Token = "0x2000170")]
public class AkDurationCallbackInfo : AkEventCallbackInfo
{
	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr swigCPtr;

	[Token(Token = "0x17000118")]
	public float fDuration
	{
		[Token(Token = "0x6001273")]
		[Address(RVA = "0xC28684", Offset = "0xC28684", VA = "0xC28684")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000119")]
	public float fEstimatedDuration
	{
		[Token(Token = "0x6001274")]
		[Address(RVA = "0xC286F0", Offset = "0xC286F0", VA = "0xC286F0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700011A")]
	public uint audioNodeID
	{
		[Token(Token = "0x6001275")]
		[Address(RVA = "0xC2875C", Offset = "0xC2875C", VA = "0xC2875C")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700011B")]
	public uint mediaID
	{
		[Token(Token = "0x6001276")]
		[Address(RVA = "0xC287C8", Offset = "0xC287C8", VA = "0xC287C8")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700011C")]
	public bool bStreaming
	{
		[Token(Token = "0x6001277")]
		[Address(RVA = "0xC28834", Offset = "0xC28834", VA = "0xC28834")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600126E")]
	[Address(RVA = "0xC23378", Offset = "0xC23378", VA = "0xC23378")]
	internal AkDurationCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600126F")]
	[Address(RVA = "0xC281B0", Offset = "0xC281B0", VA = "0xC281B0")]
	internal static IntPtr getCPtr(AkDurationCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001270")]
	[Address(RVA = "0xC28200", Offset = "0xC28200", VA = "0xC28200", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001271")]
	[Address(RVA = "0xC2831C", Offset = "0xC2831C", VA = "0xC2831C", Slot = "1")]
	~AkDurationCallbackInfo()
	{
	}

	[Token(Token = "0x6001272")]
	[Address(RVA = "0xC283F4", Offset = "0xC283F4", VA = "0xC283F4", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6001278")]
	[Address(RVA = "0xC288A0", Offset = "0xC288A0", VA = "0xC288A0")]
	public AkDurationCallbackInfo()
	{
	}
}
[Token(Token = "0x2000171")]
public class AkDynamicSequenceItemCallbackInfo : AkCallbackInfo
{
	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x1700011D")]
	public uint playingID
	{
		[Token(Token = "0x600127E")]
		[Address(RVA = "0xC28BAC", Offset = "0xC28BAC", VA = "0xC28BAC")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700011E")]
	public uint audioNodeID
	{
		[Token(Token = "0x600127F")]
		[Address(RVA = "0xC28C18", Offset = "0xC28C18", VA = "0xC28C18")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700011F")]
	public IntPtr pCustomInfo
	{
		[Token(Token = "0x6001280")]
		[Address(RVA = "0xC28C84", Offset = "0xC28C84", VA = "0xC28C84")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x6001279")]
	[Address(RVA = "0xC232DC", Offset = "0xC232DC", VA = "0xC232DC")]
	internal AkDynamicSequenceItemCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600127A")]
	[Address(RVA = "0xC28914", Offset = "0xC28914", VA = "0xC28914")]
	internal static IntPtr getCPtr(AkDynamicSequenceItemCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600127B")]
	[Address(RVA = "0xC28964", Offset = "0xC28964", VA = "0xC28964", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600127C")]
	[Address(RVA = "0xC289F8", Offset = "0xC289F8", VA = "0xC289F8", Slot = "1")]
	~AkDynamicSequenceItemCallbackInfo()
	{
	}

	[Token(Token = "0x600127D")]
	[Address(RVA = "0xC28A64", Offset = "0xC28A64", VA = "0xC28A64", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6001281")]
	[Address(RVA = "0xC28CF0", Offset = "0xC28CF0", VA = "0xC28CF0")]
	public AkDynamicSequenceItemCallbackInfo()
	{
	}
}
[Token(Token = "0x2000172")]
public enum AkDynamicSequenceType
{
	[Token(Token = "0x4000AA7")]
	DynamicSequenceType_SampleAccurate,
	[Token(Token = "0x4000AA8")]
	DynamicSequenceType_NormalTransition
}
[Token(Token = "0x2000173")]
public class AkEmitterSettings : IDisposable
{
	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000120")]
	public uint reflectAuxBusID
	{
		[Token(Token = "0x6001289")]
		[Address(RVA = "0xC29420", Offset = "0xC29420", VA = "0xC29420")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001288")]
		[Address(RVA = "0xC293A4", Offset = "0xC293A4", VA = "0xC293A4")]
		set
		{
		}
	}

	[Token(Token = "0x17000121")]
	public float reflectionMaxPathLength
	{
		[Token(Token = "0x600128B")]
		[Address(RVA = "0xC29508", Offset = "0xC29508", VA = "0xC29508")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600128A")]
		[Address(RVA = "0xC2948C", Offset = "0xC2948C", VA = "0xC2948C")]
		set
		{
		}
	}

	[Token(Token = "0x17000122")]
	public float reflectionsAuxBusGain
	{
		[Token(Token = "0x600128D")]
		[Address(RVA = "0xC295F0", Offset = "0xC295F0", VA = "0xC295F0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600128C")]
		[Address(RVA = "0xC29574", Offset = "0xC29574", VA = "0xC29574")]
		set
		{
		}
	}

	[Token(Token = "0x17000123")]
	public uint reflectionsOrder
	{
		[Token(Token = "0x600128F")]
		[Address(RVA = "0xC296D8", Offset = "0xC296D8", VA = "0xC296D8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600128E")]
		[Address(RVA = "0xC2965C", Offset = "0xC2965C", VA = "0xC2965C")]
		set
		{
		}
	}

	[Token(Token = "0x17000124")]
	public uint reflectorFilterMask
	{
		[Token(Token = "0x6001291")]
		[Address(RVA = "0xC297C0", Offset = "0xC297C0", VA = "0xC297C0")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001290")]
		[Address(RVA = "0xC29744", Offset = "0xC29744", VA = "0xC29744")]
		set
		{
		}
	}

	[Token(Token = "0x17000125")]
	public float roomReverbAuxBusGain
	{
		[Token(Token = "0x6001293")]
		[Address(RVA = "0xC298A8", Offset = "0xC298A8", VA = "0xC298A8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001292")]
		[Address(RVA = "0xC2982C", Offset = "0xC2982C", VA = "0xC2982C")]
		set
		{
		}
	}

	[Token(Token = "0x17000126")]
	public uint diffractionMaxEdges
	{
		[Token(Token = "0x6001295")]
		[Address(RVA = "0xC29990", Offset = "0xC29990", VA = "0xC29990")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001294")]
		[Address(RVA = "0xC29914", Offset = "0xC29914", VA = "0xC29914")]
		set
		{
		}
	}

	[Token(Token = "0x17000127")]
	public uint diffractionMaxPaths
	{
		[Token(Token = "0x6001297")]
		[Address(RVA = "0xC29A78", Offset = "0xC29A78", VA = "0xC29A78")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001296")]
		[Address(RVA = "0xC299FC", Offset = "0xC299FC", VA = "0xC299FC")]
		set
		{
		}
	}

	[Token(Token = "0x17000128")]
	public float diffractionMaxPathLength
	{
		[Token(Token = "0x6001299")]
		[Address(RVA = "0xC29B60", Offset = "0xC29B60", VA = "0xC29B60")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001298")]
		[Address(RVA = "0xC29AE4", Offset = "0xC29AE4", VA = "0xC29AE4")]
		set
		{
		}
	}

	[Token(Token = "0x17000129")]
	public byte useImageSources
	{
		[Token(Token = "0x600129B")]
		[Address(RVA = "0xC29C48", Offset = "0xC29C48", VA = "0xC29C48")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600129A")]
		[Address(RVA = "0xC29BCC", Offset = "0xC29BCC", VA = "0xC29BCC")]
		set
		{
		}
	}

	[Token(Token = "0x6001282")]
	[Address(RVA = "0xC290A8", Offset = "0xC290A8", VA = "0xC290A8")]
	internal AkEmitterSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001283")]
	[Address(RVA = "0xC290E8", Offset = "0xC290E8", VA = "0xC290E8")]
	internal static IntPtr getCPtr(AkEmitterSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001284")]
	[Address(RVA = "0xC29138", Offset = "0xC29138", VA = "0xC29138", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001285")]
	[Address(RVA = "0xC2916C", Offset = "0xC2916C", VA = "0xC2916C", Slot = "1")]
	~AkEmitterSettings()
	{
	}

	[Token(Token = "0x6001286")]
	[Address(RVA = "0xC291E0", Offset = "0xC291E0", VA = "0xC291E0", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001287")]
	[Address(RVA = "0xC29320", Offset = "0xC29320", VA = "0xC29320")]
	public AkEmitterSettings()
	{
	}
}
[Token(Token = "0x2000174")]
public class AkEventCallbackInfo : AkCallbackInfo
{
	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x1700012A")]
	public uint playingID
	{
		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xC1ABEC", Offset = "0xC1ABEC", VA = "0xC1ABEC")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700012B")]
	public uint eventID
	{
		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xC2A98C", Offset = "0xC2A98C", VA = "0xC2A98C")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x600129C")]
	[Address(RVA = "0xC23240", Offset = "0xC23240", VA = "0xC23240")]
	internal AkEventCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600129D")]
	[Address(RVA = "0xC2A93C", Offset = "0xC2A93C", VA = "0xC2A93C")]
	internal static IntPtr getCPtr(AkEventCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600129E")]
	[Address(RVA = "0xC28288", Offset = "0xC28288", VA = "0xC28288", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600129F")]
	[Address(RVA = "0xC28388", Offset = "0xC28388", VA = "0xC28388", Slot = "1")]
	~AkEventCallbackInfo()
	{
	}

	[Token(Token = "0x60012A0")]
	[Address(RVA = "0xC2853C", Offset = "0xC2853C", VA = "0xC2853C", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60012A3")]
	[Address(RVA = "0xC2A9F8", Offset = "0xC2A9F8", VA = "0xC2A9F8")]
	public AkEventCallbackInfo()
	{
	}
}
[Token(Token = "0x2000175")]
public class AkExternalSourceInfo : IDisposable
{
	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700012C")]
	public uint iExternalSrcCookie
	{
		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xAA2B18", Offset = "0xAA2B18", VA = "0xAA2B18")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xAA2A9C", Offset = "0xAA2A9C", VA = "0xAA2A9C")]
		set
		{
		}
	}

	[Token(Token = "0x1700012D")]
	public uint idCodec
	{
		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xAA2C00", Offset = "0xAA2C00", VA = "0xAA2C00")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xAA2B84", Offset = "0xAA2B84", VA = "0xAA2B84")]
		set
		{
		}
	}

	[Token(Token = "0x1700012E")]
	public string szFile
	{
		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xAA2CE8", Offset = "0xAA2CE8", VA = "0xAA2CE8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xAA2C6C", Offset = "0xAA2C6C", VA = "0xAA2C6C")]
		set
		{
		}
	}

	[Token(Token = "0x1700012F")]
	public IntPtr pInMemory
	{
		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xAA2E64", Offset = "0xAA2E64", VA = "0xAA2E64")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xAA2DE8", Offset = "0xAA2DE8", VA = "0xAA2DE8")]
		set
		{
		}
	}

	[Token(Token = "0x17000130")]
	public uint uiMemorySize
	{
		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xAA2F4C", Offset = "0xAA2F4C", VA = "0xAA2F4C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xAA2ED0", Offset = "0xAA2ED0", VA = "0xAA2ED0")]
		set
		{
		}
	}

	[Token(Token = "0x17000131")]
	public uint idFile
	{
		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xAA3034", Offset = "0xAA3034", VA = "0xAA3034")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xAA2FB8", Offset = "0xAA2FB8", VA = "0xAA2FB8")]
		set
		{
		}
	}

	[Token(Token = "0x60012A4")]
	[Address(RVA = "0xAA2420", Offset = "0xAA2420", VA = "0xAA2420")]
	internal AkExternalSourceInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60012A5")]
	[Address(RVA = "0xAA2460", Offset = "0xAA2460", VA = "0xAA2460")]
	internal static IntPtr getCPtr(AkExternalSourceInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60012A6")]
	[Address(RVA = "0xAA24B0", Offset = "0xAA24B0", VA = "0xAA24B0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60012A7")]
	[Address(RVA = "0xAA24E4", Offset = "0xAA24E4", VA = "0xAA24E4", Slot = "1")]
	~AkExternalSourceInfo()
	{
	}

	[Token(Token = "0x60012A8")]
	[Address(RVA = "0xAA2558", Offset = "0xAA2558", VA = "0xAA2558", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60012A9")]
	[Address(RVA = "0xAA2698", Offset = "0xAA2698", VA = "0xAA2698")]
	public AkExternalSourceInfo()
	{
	}

	[Token(Token = "0x60012AA")]
	[Address(RVA = "0xAA271C", Offset = "0xAA271C", VA = "0xAA271C")]
	public AkExternalSourceInfo(IntPtr in_pInMemory, uint in_uiMemorySize, uint in_iExternalSrcCookie, uint in_idCodec)
	{
	}

	[Token(Token = "0x60012AB")]
	[Address(RVA = "0xAA27D0", Offset = "0xAA27D0", VA = "0xAA27D0")]
	public AkExternalSourceInfo(string in_pszFileName, uint in_iExternalSrcCookie, uint in_idCodec)
	{
	}

	[Token(Token = "0x60012AC")]
	[Address(RVA = "0xAA287C", Offset = "0xAA287C", VA = "0xAA287C")]
	public AkExternalSourceInfo(uint in_idFile, uint in_iExternalSrcCookie, uint in_idCodec)
	{
	}

	[Token(Token = "0x60012AD")]
	[Address(RVA = "0xAA2928", Offset = "0xAA2928", VA = "0xAA2928")]
	public void Clear()
	{
	}

	[Token(Token = "0x60012AE")]
	[Address(RVA = "0xAA2994", Offset = "0xAA2994", VA = "0xAA2994")]
	public void Clone(AkExternalSourceInfo other)
	{
	}

	[Token(Token = "0x60012AF")]
	[Address(RVA = "0xAA2A3C", Offset = "0xAA2A3C", VA = "0xAA2A3C")]
	public static int GetSizeOf()
	{
		return default(int);
	}
}
[Token(Token = "0x2000176")]
public enum AkFloorPlane
{
	[Token(Token = "0x4000AAF")]
	AkFloorPlane_XZ = 0,
	[Token(Token = "0x4000AB0")]
	AkFloorPlane_XY = 1,
	[Token(Token = "0x4000AB1")]
	AkFloorPlane_YZ = 2,
	[Token(Token = "0x4000AB2")]
	AkFloorPlane_Default = 0
}
[Token(Token = "0x2000177")]
public enum AkGlobalCallbackLocation
{
	[Token(Token = "0x4000AB4")]
	AkGlobalCallbackLocation_Register = 1,
	[Token(Token = "0x4000AB5")]
	AkGlobalCallbackLocation_Begin = 2,
	[Token(Token = "0x4000AB6")]
	AkGlobalCallbackLocation_PreProcessMessageQueueForRender = 4,
	[Token(Token = "0x4000AB7")]
	AkGlobalCallbackLocation_PostMessagesProcessed = 8,
	[Token(Token = "0x4000AB8")]
	AkGlobalCallbackLocation_BeginRender = 16,
	[Token(Token = "0x4000AB9")]
	AkGlobalCallbackLocation_EndRender = 32,
	[Token(Token = "0x4000ABA")]
	AkGlobalCallbackLocation_End = 64,
	[Token(Token = "0x4000ABB")]
	AkGlobalCallbackLocation_Term = 128,
	[Token(Token = "0x4000ABC")]
	AkGlobalCallbackLocation_Monitor = 256,
	[Token(Token = "0x4000ABD")]
	AkGlobalCallbackLocation_MonitorRecap = 512,
	[Token(Token = "0x4000ABE")]
	AkGlobalCallbackLocation_Num = 10
}
[Token(Token = "0x2000178")]
public enum AkGroupType
{
	[Token(Token = "0x4000AC0")]
	AkGroupType_Switch,
	[Token(Token = "0x4000AC1")]
	AkGroupType_State
}
[Token(Token = "0x2000179")]
public class AkImageSourceParams : IDisposable
{
	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000132")]
	public AkVector sourcePosition
	{
		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xAA5ACC", Offset = "0xAA5ACC", VA = "0xAA5ACC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xAA5A3C", Offset = "0xAA5A3C", VA = "0xAA5A3C")]
		set
		{
		}
	}

	[Token(Token = "0x17000133")]
	public float fDistanceScalingFactor
	{
		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xAA5BF8", Offset = "0xAA5BF8", VA = "0xAA5BF8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xAA5B7C", Offset = "0xAA5B7C", VA = "0xAA5B7C")]
		set
		{
		}
	}

	[Token(Token = "0x17000134")]
	public float fLevel
	{
		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xAA5CE0", Offset = "0xAA5CE0", VA = "0xAA5CE0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xAA5C64", Offset = "0xAA5C64", VA = "0xAA5C64")]
		set
		{
		}
	}

	[Token(Token = "0x17000135")]
	public float fDiffraction
	{
		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xAA5DC8", Offset = "0xAA5DC8", VA = "0xAA5DC8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xAA5D4C", Offset = "0xAA5D4C", VA = "0xAA5D4C")]
		set
		{
		}
	}

	[Token(Token = "0x17000136")]
	public byte uDiffractionEmitterSide
	{
		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xAA5EB0", Offset = "0xAA5EB0", VA = "0xAA5EB0")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xAA5E34", Offset = "0xAA5E34", VA = "0xAA5E34")]
		set
		{
		}
	}

	[Token(Token = "0x17000137")]
	public byte uDiffractionListenerSide
	{
		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xAA5F98", Offset = "0xAA5F98", VA = "0xAA5F98")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xAA5F1C", Offset = "0xAA5F1C", VA = "0xAA5F1C")]
		set
		{
		}
	}

	[Token(Token = "0x60012BC")]
	[Address(RVA = "0xAA5680", Offset = "0xAA5680", VA = "0xAA5680")]
	internal AkImageSourceParams(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60012BD")]
	[Address(RVA = "0xAA56C0", Offset = "0xAA56C0", VA = "0xAA56C0")]
	internal static IntPtr getCPtr(AkImageSourceParams obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60012BE")]
	[Address(RVA = "0xAA5710", Offset = "0xAA5710", VA = "0xAA5710", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60012BF")]
	[Address(RVA = "0xAA5744", Offset = "0xAA5744", VA = "0xAA5744", Slot = "1")]
	~AkImageSourceParams()
	{
	}

	[Token(Token = "0x60012C0")]
	[Address(RVA = "0xAA57B8", Offset = "0xAA57B8", VA = "0xAA57B8", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60012C1")]
	[Address(RVA = "0xAA58F8", Offset = "0xAA58F8", VA = "0xAA58F8")]
	public AkImageSourceParams()
	{
	}

	[Token(Token = "0x60012C2")]
	[Address(RVA = "0xAA597C", Offset = "0xAA597C", VA = "0xAA597C")]
	public AkImageSourceParams(AkVector in_sourcePosition, float in_fDistanceScalingFactor, float in_fLevel)
	{
	}
}
[Token(Token = "0x200017A")]
public class AkImageSourceSettings : IDisposable
{
	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000138")]
	public AkImageSourceParams params_
	{
		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xAA6560", Offset = "0xAA6560", VA = "0xAA6560")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xAA64B8", Offset = "0xAA64B8", VA = "0xAA64B8")]
		set
		{
		}
	}

	[Token(Token = "0x60012CF")]
	[Address(RVA = "0xAA6004", Offset = "0xAA6004", VA = "0xAA6004")]
	internal AkImageSourceSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60012D0")]
	[Address(RVA = "0xAA6044", Offset = "0xAA6044", VA = "0xAA6044")]
	internal static IntPtr getCPtr(AkImageSourceSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60012D1")]
	[Address(RVA = "0xAA6094", Offset = "0xAA6094", VA = "0xAA6094", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60012D2")]
	[Address(RVA = "0xAA60C8", Offset = "0xAA60C8", VA = "0xAA60C8", Slot = "1")]
	~AkImageSourceSettings()
	{
	}

	[Token(Token = "0x60012D3")]
	[Address(RVA = "0xAA613C", Offset = "0xAA613C", VA = "0xAA613C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60012D4")]
	[Address(RVA = "0xAA627C", Offset = "0xAA627C", VA = "0xAA627C")]
	public AkImageSourceSettings()
	{
	}

	[Token(Token = "0x60012D5")]
	[Address(RVA = "0xAA6300", Offset = "0xAA6300", VA = "0xAA6300")]
	public AkImageSourceSettings(AkVector in_sourcePosition, float in_fDistanceScalingFactor, float in_fLevel)
	{
	}

	[Token(Token = "0x60012D6")]
	[Address(RVA = "0xAA63C0", Offset = "0xAA63C0", VA = "0xAA63C0")]
	public void SetOneTexture(uint in_texture)
	{
	}

	[Token(Token = "0x60012D7")]
	[Address(RVA = "0xAA643C", Offset = "0xAA643C", VA = "0xAA643C")]
	public void SetName(string in_pName)
	{
	}
}
[Token(Token = "0x200017B")]
public class AkInitializationSettings : IDisposable
{
	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000139")]
	public AkMemSettings memSettings
	{
		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xAA7CB0", Offset = "0xAA7CB0", VA = "0xAA7CB0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xAA7BB8", Offset = "0xAA7BB8", VA = "0xAA7BB8")]
		set
		{
		}
	}

	[Token(Token = "0x1700013A")]
	public AkStreamMgrSettings streamMgrSettings
	{
		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xAA7E30", Offset = "0xAA7E30", VA = "0xAA7E30")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xAA7DA0", Offset = "0xAA7DA0", VA = "0xAA7DA0")]
		set
		{
		}
	}

	[Token(Token = "0x1700013B")]
	public AkDeviceSettings deviceSettings
	{
		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xAA7F70", Offset = "0xAA7F70", VA = "0xAA7F70")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xAA7EE0", Offset = "0xAA7EE0", VA = "0xAA7EE0")]
		set
		{
		}
	}

	[Token(Token = "0x1700013C")]
	public AkInitSettings initSettings
	{
		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xAA80C8", Offset = "0xAA80C8", VA = "0xAA80C8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xAA8020", Offset = "0xAA8020", VA = "0xAA8020")]
		set
		{
		}
	}

	[Token(Token = "0x1700013D")]
	public AkPlatformInitSettings platformSettings
	{
		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xAA8270", Offset = "0xAA8270", VA = "0xAA8270")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xAA8178", Offset = "0xAA8178", VA = "0xAA8178")]
		set
		{
		}
	}

	[Token(Token = "0x1700013E")]
	public AkMusicSettings musicSettings
	{
		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xAA8458", Offset = "0xAA8458", VA = "0xAA8458")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xAA8360", Offset = "0xAA8360", VA = "0xAA8360")]
		set
		{
		}
	}

	[Token(Token = "0x1700013F")]
	public uint preparePoolSize
	{
		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xAA85C4", Offset = "0xAA85C4", VA = "0xAA85C4")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xAA8548", Offset = "0xAA8548", VA = "0xAA8548")]
		set
		{
		}
	}

	[Token(Token = "0x17000140")]
	public AkUnityPlatformSpecificSettings unityPlatformSpecificSettings
	{
		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xAA86C0", Offset = "0xAA86C0", VA = "0xAA86C0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xAA8630", Offset = "0xAA8630", VA = "0xAA8630")]
		set
		{
		}
	}

	[Token(Token = "0x17000141")]
	public bool useAsyncOpen
	{
		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xAA87EC", Offset = "0xAA87EC", VA = "0xAA87EC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xAA8770", Offset = "0xAA8770", VA = "0xAA8770")]
		set
		{
		}
	}

	[Token(Token = "0x60012DA")]
	[Address(RVA = "0xAA78BC", Offset = "0xAA78BC", VA = "0xAA78BC")]
	internal AkInitializationSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60012DB")]
	[Address(RVA = "0xAA78FC", Offset = "0xAA78FC", VA = "0xAA78FC")]
	internal static IntPtr getCPtr(AkInitializationSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60012DC")]
	[Address(RVA = "0xAA794C", Offset = "0xAA794C", VA = "0xAA794C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60012DD")]
	[Address(RVA = "0xAA7980", Offset = "0xAA7980", VA = "0xAA7980", Slot = "1")]
	~AkInitializationSettings()
	{
	}

	[Token(Token = "0x60012DE")]
	[Address(RVA = "0xAA79F4", Offset = "0xAA79F4", VA = "0xAA79F4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60012DF")]
	[Address(RVA = "0xAA7B34", Offset = "0xAA7B34", VA = "0xAA7B34")]
	public AkInitializationSettings()
	{
	}
}
[Token(Token = "0x200017C")]
public class AkInitSettings : IDisposable
{
	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000142")]
	public uint uMaxNumPaths
	{
		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xAA6904", Offset = "0xAA6904", VA = "0xAA6904")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xAA6888", Offset = "0xAA6888", VA = "0xAA6888")]
		set
		{
		}
	}

	[Token(Token = "0x17000143")]
	public uint uDefaultPoolSize
	{
		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xAA69EC", Offset = "0xAA69EC", VA = "0xAA69EC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xAA6970", Offset = "0xAA6970", VA = "0xAA6970")]
		set
		{
		}
	}

	[Token(Token = "0x17000144")]
	public float fDefaultPoolRatioThreshold
	{
		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xAA6AD4", Offset = "0xAA6AD4", VA = "0xAA6AD4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xAA6A58", Offset = "0xAA6A58", VA = "0xAA6A58")]
		set
		{
		}
	}

	[Token(Token = "0x17000145")]
	public uint uCommandQueueSize
	{
		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xAA6BBC", Offset = "0xAA6BBC", VA = "0xAA6BBC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xAA6B40", Offset = "0xAA6B40", VA = "0xAA6B40")]
		set
		{
		}
	}

	[Token(Token = "0x17000146")]
	public int uPrepareEventMemoryPoolID
	{
		[Token(Token = "0x6001300")]
		[Address(RVA = "0xAA6CA4", Offset = "0xAA6CA4", VA = "0xAA6CA4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xAA6C28", Offset = "0xAA6C28", VA = "0xAA6C28")]
		set
		{
		}
	}

	[Token(Token = "0x17000147")]
	public bool bEnableGameSyncPreparation
	{
		[Token(Token = "0x6001302")]
		[Address(RVA = "0xAA6D8C", Offset = "0xAA6D8C", VA = "0xAA6D8C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001301")]
		[Address(RVA = "0xAA6D10", Offset = "0xAA6D10", VA = "0xAA6D10")]
		set
		{
		}
	}

	[Token(Token = "0x17000148")]
	public uint uContinuousPlaybackLookAhead
	{
		[Token(Token = "0x6001304")]
		[Address(RVA = "0xAA6E74", Offset = "0xAA6E74", VA = "0xAA6E74")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001303")]
		[Address(RVA = "0xAA6DF8", Offset = "0xAA6DF8", VA = "0xAA6DF8")]
		set
		{
		}
	}

	[Token(Token = "0x17000149")]
	public uint uNumSamplesPerFrame
	{
		[Token(Token = "0x6001306")]
		[Address(RVA = "0xAA6F5C", Offset = "0xAA6F5C", VA = "0xAA6F5C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001305")]
		[Address(RVA = "0xAA6EE0", Offset = "0xAA6EE0", VA = "0xAA6EE0")]
		set
		{
		}
	}

	[Token(Token = "0x1700014A")]
	public uint uMonitorPoolSize
	{
		[Token(Token = "0x6001308")]
		[Address(RVA = "0xAA7044", Offset = "0xAA7044", VA = "0xAA7044")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001307")]
		[Address(RVA = "0xAA6FC8", Offset = "0xAA6FC8", VA = "0xAA6FC8")]
		set
		{
		}
	}

	[Token(Token = "0x1700014B")]
	public uint uMonitorQueuePoolSize
	{
		[Token(Token = "0x600130A")]
		[Address(RVA = "0xAA712C", Offset = "0xAA712C", VA = "0xAA712C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001309")]
		[Address(RVA = "0xAA70B0", Offset = "0xAA70B0", VA = "0xAA70B0")]
		set
		{
		}
	}

	[Token(Token = "0x1700014C")]
	public AkOutputSettings settingsMainOutput
	{
		[Token(Token = "0x600130C")]
		[Address(RVA = "0xAA7290", Offset = "0xAA7290", VA = "0xAA7290")]
		get
		{
			return null;
		}
		[Token(Token = "0x600130B")]
		[Address(RVA = "0xAA7198", Offset = "0xAA7198", VA = "0xAA7198")]
		set
		{
		}
	}

	[Token(Token = "0x1700014D")]
	public uint uMaxHardwareTimeoutMs
	{
		[Token(Token = "0x600130E")]
		[Address(RVA = "0xAA73FC", Offset = "0xAA73FC", VA = "0xAA73FC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600130D")]
		[Address(RVA = "0xAA7380", Offset = "0xAA7380", VA = "0xAA7380")]
		set
		{
		}
	}

	[Token(Token = "0x1700014E")]
	public bool bUseSoundBankMgrThread
	{
		[Token(Token = "0x6001310")]
		[Address(RVA = "0xAA74E4", Offset = "0xAA74E4", VA = "0xAA74E4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600130F")]
		[Address(RVA = "0xAA7468", Offset = "0xAA7468", VA = "0xAA7468")]
		set
		{
		}
	}

	[Token(Token = "0x1700014F")]
	public bool bUseLEngineThread
	{
		[Token(Token = "0x6001312")]
		[Address(RVA = "0xAA75CC", Offset = "0xAA75CC", VA = "0xAA75CC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001311")]
		[Address(RVA = "0xAA7550", Offset = "0xAA7550", VA = "0xAA7550")]
		set
		{
		}
	}

	[Token(Token = "0x17000150")]
	public string szPluginDLLPath
	{
		[Token(Token = "0x6001314")]
		[Address(RVA = "0xAA76B4", Offset = "0xAA76B4", VA = "0xAA76B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001313")]
		[Address(RVA = "0xAA7638", Offset = "0xAA7638", VA = "0xAA7638")]
		set
		{
		}
	}

	[Token(Token = "0x17000151")]
	public AkFloorPlane eFloorPlane
	{
		[Token(Token = "0x6001316")]
		[Address(RVA = "0xAA77CC", Offset = "0xAA77CC", VA = "0xAA77CC")]
		get
		{
			return default(AkFloorPlane);
		}
		[Token(Token = "0x6001315")]
		[Address(RVA = "0xAA7750", Offset = "0xAA7750", VA = "0xAA7750")]
		set
		{
		}
	}

	[Token(Token = "0x60012F2")]
	[Address(RVA = "0xAA6610", Offset = "0xAA6610", VA = "0xAA6610")]
	internal AkInitSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60012F3")]
	[Address(RVA = "0xAA6650", Offset = "0xAA6650", VA = "0xAA6650")]
	internal static IntPtr getCPtr(AkInitSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60012F4")]
	[Address(RVA = "0xAA66A0", Offset = "0xAA66A0", VA = "0xAA66A0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60012F5")]
	[Address(RVA = "0xAA66D4", Offset = "0xAA66D4", VA = "0xAA66D4", Slot = "1")]
	~AkInitSettings()
	{
	}

	[Token(Token = "0x60012F6")]
	[Address(RVA = "0xAA6748", Offset = "0xAA6748", VA = "0xAA6748", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001317")]
	[Address(RVA = "0xAA7838", Offset = "0xAA7838", VA = "0xAA7838")]
	public AkInitSettings()
	{
	}
}
[Token(Token = "0x200017D")]
public class AkIterator : IDisposable
{
	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000152")]
	public AkPlaylistItem pItem
	{
		[Token(Token = "0x600131E")]
		[Address(RVA = "0xAA919C", Offset = "0xAA919C", VA = "0xAA919C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600131D")]
		[Address(RVA = "0xAA90A4", Offset = "0xAA90A4", VA = "0xAA90A4")]
		set
		{
		}
	}

	[Token(Token = "0x6001318")]
	[Address(RVA = "0xAA8E2C", Offset = "0xAA8E2C", VA = "0xAA8E2C")]
	internal AkIterator(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001319")]
	[Address(RVA = "0xAA8E6C", Offset = "0xAA8E6C", VA = "0xAA8E6C")]
	internal static IntPtr getCPtr(AkIterator obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600131A")]
	[Address(RVA = "0xAA8EBC", Offset = "0xAA8EBC", VA = "0xAA8EBC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600131B")]
	[Address(RVA = "0xAA8EF0", Offset = "0xAA8EF0", VA = "0xAA8EF0", Slot = "1")]
	~AkIterator()
	{
	}

	[Token(Token = "0x600131C")]
	[Address(RVA = "0xAA8F64", Offset = "0xAA8F64", VA = "0xAA8F64", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600131F")]
	[Address(RVA = "0xAA928C", Offset = "0xAA928C", VA = "0xAA928C")]
	public AkIterator NextIter()
	{
		return null;
	}

	[Token(Token = "0x6001320")]
	[Address(RVA = "0xAA932C", Offset = "0xAA932C", VA = "0xAA932C")]
	public AkIterator PrevIter()
	{
		return null;
	}

	[Token(Token = "0x6001321")]
	[Address(RVA = "0xAA93CC", Offset = "0xAA93CC", VA = "0xAA93CC")]
	public AkPlaylistItem GetItem()
	{
		return null;
	}

	[Token(Token = "0x6001322")]
	[Address(RVA = "0xAA946C", Offset = "0xAA946C", VA = "0xAA946C")]
	public bool IsEqualTo(AkIterator in_rOp)
	{
		return default(bool);
	}

	[Token(Token = "0x6001323")]
	[Address(RVA = "0xAA9514", Offset = "0xAA9514", VA = "0xAA9514")]
	public bool IsDifferentFrom(AkIterator in_rOp)
	{
		return default(bool);
	}

	[Token(Token = "0x6001324")]
	[Address(RVA = "0xAA95BC", Offset = "0xAA95BC", VA = "0xAA95BC")]
	public AkIterator()
	{
	}
}
[Token(Token = "0x200017E")]
public class AkMarkerCallbackInfo : AkEventCallbackInfo
{
	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr swigCPtr;

	[Token(Token = "0x17000153")]
	public uint uIdentifier
	{
		[Token(Token = "0x600132A")]
		[Address(RVA = "0xAAF0B0", Offset = "0xAAF0B0", VA = "0xAAF0B0")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000154")]
	public uint uPosition
	{
		[Token(Token = "0x600132B")]
		[Address(RVA = "0xAAF11C", Offset = "0xAAF11C", VA = "0xAAF11C")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000155")]
	public string strLabel
	{
		[Token(Token = "0x600132C")]
		[Address(RVA = "0xAAF188", Offset = "0xAAF188", VA = "0xAAF188")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001325")]
	[Address(RVA = "0xAAED80", Offset = "0xAAED80", VA = "0xAAED80")]
	internal AkMarkerCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001326")]
	[Address(RVA = "0xAAEE14", Offset = "0xAAEE14", VA = "0xAAEE14")]
	internal static IntPtr getCPtr(AkMarkerCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001327")]
	[Address(RVA = "0xAAEE64", Offset = "0xAAEE64", VA = "0xAAEE64", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001328")]
	[Address(RVA = "0xAAEEF0", Offset = "0xAAEEF0", VA = "0xAAEEF0", Slot = "1")]
	~AkMarkerCallbackInfo()
	{
	}

	[Token(Token = "0x6001329")]
	[Address(RVA = "0xAAEF64", Offset = "0xAAEF64", VA = "0xAAEF64", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x600132D")]
	[Address(RVA = "0xAAF28C", Offset = "0xAAF28C", VA = "0xAAF28C")]
	public AkMarkerCallbackInfo()
	{
	}
}
[Token(Token = "0x200017F")]
public class AkMemSettings : IDisposable
{
	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000156")]
	public uint uMaxNumPools
	{
		[Token(Token = "0x6001335")]
		[Address(RVA = "0xAAFF88", Offset = "0xAAFF88", VA = "0xAAFF88")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001334")]
		[Address(RVA = "0xAAFF0C", Offset = "0xAAFF0C", VA = "0xAAFF0C")]
		set
		{
		}
	}

	[Token(Token = "0x17000157")]
	public uint uDebugFlags
	{
		[Token(Token = "0x6001337")]
		[Address(RVA = "0xAB0070", Offset = "0xAB0070", VA = "0xAB0070")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001336")]
		[Address(RVA = "0xAAFFF4", Offset = "0xAAFFF4", VA = "0xAAFFF4")]
		set
		{
		}
	}

	[Token(Token = "0x600132E")]
	[Address(RVA = "0xAA7D60", Offset = "0xAA7D60", VA = "0xAA7D60")]
	internal AkMemSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600132F")]
	[Address(RVA = "0xAA7C60", Offset = "0xAA7C60", VA = "0xAA7C60")]
	internal static IntPtr getCPtr(AkMemSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001330")]
	[Address(RVA = "0xAAFCA0", Offset = "0xAAFCA0", VA = "0xAAFCA0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001331")]
	[Address(RVA = "0xAAFCD4", Offset = "0xAAFCD4", VA = "0xAAFCD4", Slot = "1")]
	~AkMemSettings()
	{
	}

	[Token(Token = "0x6001332")]
	[Address(RVA = "0xAAFD48", Offset = "0xAAFD48", VA = "0xAAFD48", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001333")]
	[Address(RVA = "0xAAFE88", Offset = "0xAAFE88", VA = "0xAAFE88")]
	public AkMemSettings()
	{
	}
}
[Token(Token = "0x2000180")]
public enum AkMeteringFlags
{
	[Token(Token = "0x4000AD0")]
	AK_NoMetering = 0,
	[Token(Token = "0x4000AD1")]
	AK_EnableBusMeter_Peak = 1,
	[Token(Token = "0x4000AD2")]
	AK_EnableBusMeter_TruePeak = 2,
	[Token(Token = "0x4000AD3")]
	AK_EnableBusMeter_RMS = 4,
	[Token(Token = "0x4000AD4")]
	AK_EnableBusMeter_KPower = 0x10,
	[Token(Token = "0x4000AD5")]
	AK_EnableBusMeter_3DMeter = 0x20
}
[Token(Token = "0x2000181")]
public enum AkMIDICcTypes
{
	[Token(Token = "0x4000AD7")]
	BANK_SELECT_COARSE = 0,
	[Token(Token = "0x4000AD8")]
	MOD_WHEEL_COARSE = 1,
	[Token(Token = "0x4000AD9")]
	BREATH_CTRL_COARSE = 2,
	[Token(Token = "0x4000ADA")]
	CTRL_3_COARSE = 3,
	[Token(Token = "0x4000ADB")]
	FOOT_PEDAL_COARSE = 4,
	[Token(Token = "0x4000ADC")]
	PORTAMENTO_COARSE = 5,
	[Token(Token = "0x4000ADD")]
	DATA_ENTRY_COARSE = 6,
	[Token(Token = "0x4000ADE")]
	VOLUME_COARSE = 7,
	[Token(Token = "0x4000ADF")]
	BALANCE_COARSE = 8,
	[Token(Token = "0x4000AE0")]
	CTRL_9_COARSE = 9,
	[Token(Token = "0x4000AE1")]
	PAN_POSITION_COARSE = 10,
	[Token(Token = "0x4000AE2")]
	EXPRESSION_COARSE = 11,
	[Token(Token = "0x4000AE3")]
	EFFECT_CTRL_1_COARSE = 12,
	[Token(Token = "0x4000AE4")]
	EFFECT_CTRL_2_COARSE = 13,
	[Token(Token = "0x4000AE5")]
	CTRL_14_COARSE = 14,
	[Token(Token = "0x4000AE6")]
	CTRL_15_COARSE = 15,
	[Token(Token = "0x4000AE7")]
	GEN_SLIDER_1 = 16,
	[Token(Token = "0x4000AE8")]
	GEN_SLIDER_2 = 17,
	[Token(Token = "0x4000AE9")]
	GEN_SLIDER_3 = 18,
	[Token(Token = "0x4000AEA")]
	GEN_SLIDER_4 = 19,
	[Token(Token = "0x4000AEB")]
	CTRL_20_COARSE = 20,
	[Token(Token = "0x4000AEC")]
	CTRL_21_COARSE = 21,
	[Token(Token = "0x4000AED")]
	CTRL_22_COARSE = 22,
	[Token(Token = "0x4000AEE")]
	CTRL_23_COARSE = 23,
	[Token(Token = "0x4000AEF")]
	CTRL_24_COARSE = 24,
	[Token(Token = "0x4000AF0")]
	CTRL_25_COARSE = 25,
	[Token(Token = "0x4000AF1")]
	CTRL_26_COARSE = 26,
	[Token(Token = "0x4000AF2")]
	CTRL_27_COARSE = 27,
	[Token(Token = "0x4000AF3")]
	CTRL_28_COARSE = 28,
	[Token(Token = "0x4000AF4")]
	CTRL_29_COARSE = 29,
	[Token(Token = "0x4000AF5")]
	CTRL_30_COARSE = 30,
	[Token(Token = "0x4000AF6")]
	CTRL_31_COARSE = 31,
	[Token(Token = "0x4000AF7")]
	BANK_SELECT_FINE = 32,
	[Token(Token = "0x4000AF8")]
	MOD_WHEEL_FINE = 33,
	[Token(Token = "0x4000AF9")]
	BREATH_CTRL_FINE = 34,
	[Token(Token = "0x4000AFA")]
	CTRL_3_FINE = 35,
	[Token(Token = "0x4000AFB")]
	FOOT_PEDAL_FINE = 36,
	[Token(Token = "0x4000AFC")]
	PORTAMENTO_FINE = 37,
	[Token(Token = "0x4000AFD")]
	DATA_ENTRY_FINE = 38,
	[Token(Token = "0x4000AFE")]
	VOLUME_FINE = 39,
	[Token(Token = "0x4000AFF")]
	BALANCE_FINE = 40,
	[Token(Token = "0x4000B00")]
	CTRL_9_FINE = 41,
	[Token(Token = "0x4000B01")]
	PAN_POSITION_FINE = 42,
	[Token(Token = "0x4000B02")]
	EXPRESSION_FINE = 43,
	[Token(Token = "0x4000B03")]
	EFFECT_CTRL_1_FINE = 44,
	[Token(Token = "0x4000B04")]
	EFFECT_CTRL_2_FINE = 45,
	[Token(Token = "0x4000B05")]
	CTRL_14_FINE = 46,
	[Token(Token = "0x4000B06")]
	CTRL_15_FINE = 47,
	[Token(Token = "0x4000B07")]
	CTRL_20_FINE = 52,
	[Token(Token = "0x4000B08")]
	CTRL_21_FINE = 53,
	[Token(Token = "0x4000B09")]
	CTRL_22_FINE = 54,
	[Token(Token = "0x4000B0A")]
	CTRL_23_FINE = 55,
	[Token(Token = "0x4000B0B")]
	CTRL_24_FINE = 56,
	[Token(Token = "0x4000B0C")]
	CTRL_25_FINE = 57,
	[Token(Token = "0x4000B0D")]
	CTRL_26_FINE = 58,
	[Token(Token = "0x4000B0E")]
	CTRL_27_FINE = 59,
	[Token(Token = "0x4000B0F")]
	CTRL_28_FINE = 60,
	[Token(Token = "0x4000B10")]
	CTRL_29_FINE = 61,
	[Token(Token = "0x4000B11")]
	CTRL_30_FINE = 62,
	[Token(Token = "0x4000B12")]
	CTRL_31_FINE = 63,
	[Token(Token = "0x4000B13")]
	HOLD_PEDAL = 64,
	[Token(Token = "0x4000B14")]
	PORTAMENTO_ON_OFF = 65,
	[Token(Token = "0x4000B15")]
	SUSTENUTO_PEDAL = 66,
	[Token(Token = "0x4000B16")]
	SOFT_PEDAL = 67,
	[Token(Token = "0x4000B17")]
	LEGATO_PEDAL = 68,
	[Token(Token = "0x4000B18")]
	HOLD_PEDAL_2 = 69,
	[Token(Token = "0x4000B19")]
	SOUND_VARIATION = 70,
	[Token(Token = "0x4000B1A")]
	SOUND_TIMBRE = 71,
	[Token(Token = "0x4000B1B")]
	SOUND_RELEASE_TIME = 72,
	[Token(Token = "0x4000B1C")]
	SOUND_ATTACK_TIME = 73,
	[Token(Token = "0x4000B1D")]
	SOUND_BRIGHTNESS = 74,
	[Token(Token = "0x4000B1E")]
	SOUND_CTRL_6 = 75,
	[Token(Token = "0x4000B1F")]
	SOUND_CTRL_7 = 76,
	[Token(Token = "0x4000B20")]
	SOUND_CTRL_8 = 77,
	[Token(Token = "0x4000B21")]
	SOUND_CTRL_9 = 78,
	[Token(Token = "0x4000B22")]
	SOUND_CTRL_10 = 79,
	[Token(Token = "0x4000B23")]
	GENERAL_BUTTON_1 = 80,
	[Token(Token = "0x4000B24")]
	GENERAL_BUTTON_2 = 81,
	[Token(Token = "0x4000B25")]
	GENERAL_BUTTON_3 = 82,
	[Token(Token = "0x4000B26")]
	GENERAL_BUTTON_4 = 83,
	[Token(Token = "0x4000B27")]
	REVERB_LEVEL = 91,
	[Token(Token = "0x4000B28")]
	TREMOLO_LEVEL = 92,
	[Token(Token = "0x4000B29")]
	CHORUS_LEVEL = 93,
	[Token(Token = "0x4000B2A")]
	CELESTE_LEVEL = 94,
	[Token(Token = "0x4000B2B")]
	PHASER_LEVEL = 95,
	[Token(Token = "0x4000B2C")]
	DATA_BUTTON_P1 = 96,
	[Token(Token = "0x4000B2D")]
	DATA_BUTTON_M1 = 97,
	[Token(Token = "0x4000B2E")]
	NON_REGISTER_COARSE = 98,
	[Token(Token = "0x4000B2F")]
	NON_REGISTER_FINE = 99,
	[Token(Token = "0x4000B30")]
	ALL_SOUND_OFF = 120,
	[Token(Token = "0x4000B31")]
	ALL_CONTROLLERS_OFF = 121,
	[Token(Token = "0x4000B32")]
	LOCAL_KEYBOARD = 122,
	[Token(Token = "0x4000B33")]
	ALL_NOTES_OFF = 123,
	[Token(Token = "0x4000B34")]
	OMNI_MODE_OFF = 124,
	[Token(Token = "0x4000B35")]
	OMNI_MODE_ON = 125,
	[Token(Token = "0x4000B36")]
	OMNI_MONOPHONIC_ON = 126,
	[Token(Token = "0x4000B37")]
	OMNI_POLYPHONIC_ON = 127
}
[Token(Token = "0x2000182")]
public class AkMIDIEvent : IDisposable
{
	[Token(Token = "0x2000427")]
	public class tGen : IDisposable
	{
		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x17000391")]
		public byte byParam1
		{
			[Token(Token = "0x600245D")]
			[Address(RVA = "0xAAC514", Offset = "0xAAC514", VA = "0xAAC514")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600245C")]
			[Address(RVA = "0xAAC498", Offset = "0xAAC498", VA = "0xAAC498")]
			set
			{
			}
		}

		[Token(Token = "0x17000392")]
		public byte byParam2
		{
			[Token(Token = "0x600245F")]
			[Address(RVA = "0xAAC5FC", Offset = "0xAAC5FC", VA = "0xAAC5FC")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600245E")]
			[Address(RVA = "0xAAC580", Offset = "0xAAC580", VA = "0xAAC580")]
			set
			{
			}
		}

		[Token(Token = "0x6002457")]
		[Address(RVA = "0xAAA4F4", Offset = "0xAAA4F4", VA = "0xAAA4F4")]
		internal tGen(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x6002458")]
		[Address(RVA = "0xAAA3F4", Offset = "0xAAA3F4", VA = "0xAAA3F4")]
		internal static IntPtr getCPtr(tGen obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002459")]
		[Address(RVA = "0xAAC2B0", Offset = "0xAAC2B0", VA = "0xAAC2B0", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x600245A")]
		[Address(RVA = "0xAAC2E4", Offset = "0xAAC2E4", VA = "0xAAC2E4", Slot = "1")]
		~tGen()
		{
		}

		[Token(Token = "0x600245B")]
		[Address(RVA = "0xAAC358", Offset = "0xAAC358", VA = "0xAAC358", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002460")]
		[Address(RVA = "0xAAC668", Offset = "0xAAC668", VA = "0xAAC668")]
		public tGen()
		{
		}
	}

	[Token(Token = "0x2000428")]
	public class tNoteOnOff : IDisposable
	{
		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x17000393")]
		public byte byNote
		{
			[Token(Token = "0x6002467")]
			[Address(RVA = "0xAACD8C", Offset = "0xAACD8C", VA = "0xAACD8C")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002466")]
			[Address(RVA = "0xAACD10", Offset = "0xAACD10", VA = "0xAACD10")]
			set
			{
			}
		}

		[Token(Token = "0x17000394")]
		public byte byVelocity
		{
			[Token(Token = "0x6002469")]
			[Address(RVA = "0xAACE74", Offset = "0xAACE74", VA = "0xAACE74")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002468")]
			[Address(RVA = "0xAACDF8", Offset = "0xAACDF8", VA = "0xAACDF8")]
			set
			{
			}
		}

		[Token(Token = "0x6002461")]
		[Address(RVA = "0xAAA8C4", Offset = "0xAAA8C4", VA = "0xAAA8C4")]
		internal tNoteOnOff(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x6002462")]
		[Address(RVA = "0xAAA7C4", Offset = "0xAAA7C4", VA = "0xAAA7C4")]
		internal static IntPtr getCPtr(tNoteOnOff obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002463")]
		[Address(RVA = "0xAACB28", Offset = "0xAACB28", VA = "0xAACB28", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x6002464")]
		[Address(RVA = "0xAACB5C", Offset = "0xAACB5C", VA = "0xAACB5C", Slot = "1")]
		~tNoteOnOff()
		{
		}

		[Token(Token = "0x6002465")]
		[Address(RVA = "0xAACBD0", Offset = "0xAACBD0", VA = "0xAACBD0", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x600246A")]
		[Address(RVA = "0xAACEE0", Offset = "0xAACEE0", VA = "0xAACEE0")]
		public tNoteOnOff()
		{
		}
	}

	[Token(Token = "0x2000429")]
	public class tCc : IDisposable
	{
		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x17000395")]
		public byte byCc
		{
			[Token(Token = "0x6002471")]
			[Address(RVA = "0xAABD84", Offset = "0xAABD84", VA = "0xAABD84")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002470")]
			[Address(RVA = "0xAABD08", Offset = "0xAABD08", VA = "0xAABD08")]
			set
			{
			}
		}

		[Token(Token = "0x17000396")]
		public byte byValue
		{
			[Token(Token = "0x6002473")]
			[Address(RVA = "0xAABE6C", Offset = "0xAABE6C", VA = "0xAABE6C")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002472")]
			[Address(RVA = "0xAABDF0", Offset = "0xAABDF0", VA = "0xAABDF0")]
			set
			{
			}
		}

		[Token(Token = "0x600246B")]
		[Address(RVA = "0xAAA6DC", Offset = "0xAAA6DC", VA = "0xAAA6DC")]
		internal tCc(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x600246C")]
		[Address(RVA = "0xAAA5DC", Offset = "0xAAA5DC", VA = "0xAAA5DC")]
		internal static IntPtr getCPtr(tCc obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600246D")]
		[Address(RVA = "0xAABB20", Offset = "0xAABB20", VA = "0xAABB20", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x600246E")]
		[Address(RVA = "0xAABB54", Offset = "0xAABB54", VA = "0xAABB54", Slot = "1")]
		~tCc()
		{
		}

		[Token(Token = "0x600246F")]
		[Address(RVA = "0xAABBC8", Offset = "0xAABBC8", VA = "0xAABBC8", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002474")]
		[Address(RVA = "0xAABED8", Offset = "0xAABED8", VA = "0xAABED8")]
		public tCc()
		{
		}
	}

	[Token(Token = "0x200042A")]
	public class tPitchBend : IDisposable
	{
		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x17000397")]
		public byte byValueLsb
		{
			[Token(Token = "0x600247B")]
			[Address(RVA = "0xAAD1C8", Offset = "0xAAD1C8", VA = "0xAAD1C8")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600247A")]
			[Address(RVA = "0xAAD14C", Offset = "0xAAD14C", VA = "0xAAD14C")]
			set
			{
			}
		}

		[Token(Token = "0x17000398")]
		public byte byValueMsb
		{
			[Token(Token = "0x600247D")]
			[Address(RVA = "0xAAD2B0", Offset = "0xAAD2B0", VA = "0xAAD2B0")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600247C")]
			[Address(RVA = "0xAAD234", Offset = "0xAAD234", VA = "0xAAD234")]
			set
			{
			}
		}

		[Token(Token = "0x6002475")]
		[Address(RVA = "0xAAAAAC", Offset = "0xAAAAAC", VA = "0xAAAAAC")]
		internal tPitchBend(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x6002476")]
		[Address(RVA = "0xAAA9AC", Offset = "0xAAA9AC", VA = "0xAAA9AC")]
		internal static IntPtr getCPtr(tPitchBend obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002477")]
		[Address(RVA = "0xAACF64", Offset = "0xAACF64", VA = "0xAACF64", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x6002478")]
		[Address(RVA = "0xAACF98", Offset = "0xAACF98", VA = "0xAACF98", Slot = "1")]
		~tPitchBend()
		{
		}

		[Token(Token = "0x6002479")]
		[Address(RVA = "0xAAD00C", Offset = "0xAAD00C", VA = "0xAAD00C", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x600247E")]
		[Address(RVA = "0xAAD31C", Offset = "0xAAD31C", VA = "0xAAD31C")]
		public tPitchBend()
		{
		}
	}

	[Token(Token = "0x200042B")]
	public class tNoteAftertouch : IDisposable
	{
		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x17000399")]
		public byte byNote
		{
			[Token(Token = "0x6002485")]
			[Address(RVA = "0xAAC950", Offset = "0xAAC950", VA = "0xAAC950")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002484")]
			[Address(RVA = "0xAAC8D4", Offset = "0xAAC8D4", VA = "0xAAC8D4")]
			set
			{
			}
		}

		[Token(Token = "0x1700039A")]
		public byte byValue
		{
			[Token(Token = "0x6002487")]
			[Address(RVA = "0xAACA38", Offset = "0xAACA38", VA = "0xAACA38")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002486")]
			[Address(RVA = "0xAAC9BC", Offset = "0xAAC9BC", VA = "0xAAC9BC")]
			set
			{
			}
		}

		[Token(Token = "0x600247F")]
		[Address(RVA = "0xAAAC94", Offset = "0xAAAC94", VA = "0xAAAC94")]
		internal tNoteAftertouch(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x6002480")]
		[Address(RVA = "0xAAAB94", Offset = "0xAAAB94", VA = "0xAAAB94")]
		internal static IntPtr getCPtr(tNoteAftertouch obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002481")]
		[Address(RVA = "0xAAC6EC", Offset = "0xAAC6EC", VA = "0xAAC6EC", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x6002482")]
		[Address(RVA = "0xAAC720", Offset = "0xAAC720", VA = "0xAAC720", Slot = "1")]
		~tNoteAftertouch()
		{
		}

		[Token(Token = "0x6002483")]
		[Address(RVA = "0xAAC794", Offset = "0xAAC794", VA = "0xAAC794", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002488")]
		[Address(RVA = "0xAACAA4", Offset = "0xAACAA4", VA = "0xAACAA4")]
		public tNoteAftertouch()
		{
		}
	}

	[Token(Token = "0x200042C")]
	public class tChanAftertouch : IDisposable
	{
		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x1700039B")]
		public byte byValue
		{
			[Token(Token = "0x600248F")]
			[Address(RVA = "0xAAC1C0", Offset = "0xAAC1C0", VA = "0xAAC1C0")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600248E")]
			[Address(RVA = "0xAAC144", Offset = "0xAAC144", VA = "0xAAC144")]
			set
			{
			}
		}

		[Token(Token = "0x6002489")]
		[Address(RVA = "0xAAAE7C", Offset = "0xAAAE7C", VA = "0xAAAE7C")]
		internal tChanAftertouch(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x600248A")]
		[Address(RVA = "0xAAAD7C", Offset = "0xAAAD7C", VA = "0xAAAD7C")]
		internal static IntPtr getCPtr(tChanAftertouch obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600248B")]
		[Address(RVA = "0xAABF5C", Offset = "0xAABF5C", VA = "0xAABF5C", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x600248C")]
		[Address(RVA = "0xAABF90", Offset = "0xAABF90", VA = "0xAABF90", Slot = "1")]
		~tChanAftertouch()
		{
		}

		[Token(Token = "0x600248D")]
		[Address(RVA = "0xAAC004", Offset = "0xAAC004", VA = "0xAAC004", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002490")]
		[Address(RVA = "0xAAC22C", Offset = "0xAAC22C", VA = "0xAAC22C")]
		public tChanAftertouch()
		{
		}
	}

	[Token(Token = "0x200042D")]
	public class tProgramChange : IDisposable
	{
		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr swigCPtr;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool swigCMemOwn;

		[Token(Token = "0x1700039C")]
		public byte byProgramNum
		{
			[Token(Token = "0x6002497")]
			[Address(RVA = "0xAAD604", Offset = "0xAAD604", VA = "0xAAD604")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6002496")]
			[Address(RVA = "0xAAD588", Offset = "0xAAD588", VA = "0xAAD588")]
			set
			{
			}
		}

		[Token(Token = "0x6002491")]
		[Address(RVA = "0xAAB064", Offset = "0xAAB064", VA = "0xAAB064")]
		internal tProgramChange(IntPtr cPtr, bool cMemoryOwn)
		{
		}

		[Token(Token = "0x6002492")]
		[Address(RVA = "0xAAAF64", Offset = "0xAAAF64", VA = "0xAAAF64")]
		internal static IntPtr getCPtr(tProgramChange obj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6002493")]
		[Address(RVA = "0xAAD3A0", Offset = "0xAAD3A0", VA = "0xAAD3A0", Slot = "5")]
		internal virtual void setCPtr(IntPtr cPtr)
		{
		}

		[Token(Token = "0x6002494")]
		[Address(RVA = "0xAAD3D4", Offset = "0xAAD3D4", VA = "0xAAD3D4", Slot = "1")]
		~tProgramChange()
		{
		}

		[Token(Token = "0x6002495")]
		[Address(RVA = "0xAAD448", Offset = "0xAAD448", VA = "0xAAD448", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6002498")]
		[Address(RVA = "0xAAD670", Offset = "0xAAD670", VA = "0xAAD670")]
		public tProgramChange()
		{
		}
	}

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000158")]
	public byte byChan
	{
		[Token(Token = "0x600133E")]
		[Address(RVA = "0xAAA2E0", Offset = "0xAAA2E0", VA = "0xAAA2E0")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600133D")]
		[Address(RVA = "0xAAA264", Offset = "0xAAA264", VA = "0xAAA264")]
		set
		{
		}
	}

	[Token(Token = "0x17000159")]
	public tGen Gen
	{
		[Token(Token = "0x6001340")]
		[Address(RVA = "0xAAA444", Offset = "0xAAA444", VA = "0xAAA444")]
		get
		{
			return null;
		}
		[Token(Token = "0x600133F")]
		[Address(RVA = "0xAAA34C", Offset = "0xAAA34C", VA = "0xAAA34C")]
		set
		{
		}
	}

	[Token(Token = "0x1700015A")]
	public tCc Cc
	{
		[Token(Token = "0x6001342")]
		[Address(RVA = "0xAAA62C", Offset = "0xAAA62C", VA = "0xAAA62C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001341")]
		[Address(RVA = "0xAAA534", Offset = "0xAAA534", VA = "0xAAA534")]
		set
		{
		}
	}

	[Token(Token = "0x1700015B")]
	public tNoteOnOff NoteOnOff
	{
		[Token(Token = "0x6001344")]
		[Address(RVA = "0xAAA814", Offset = "0xAAA814", VA = "0xAAA814")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001343")]
		[Address(RVA = "0xAAA71C", Offset = "0xAAA71C", VA = "0xAAA71C")]
		set
		{
		}
	}

	[Token(Token = "0x1700015C")]
	public tPitchBend PitchBend
	{
		[Token(Token = "0x6001346")]
		[Address(RVA = "0xAAA9FC", Offset = "0xAAA9FC", VA = "0xAAA9FC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001345")]
		[Address(RVA = "0xAAA904", Offset = "0xAAA904", VA = "0xAAA904")]
		set
		{
		}
	}

	[Token(Token = "0x1700015D")]
	public tNoteAftertouch NoteAftertouch
	{
		[Token(Token = "0x6001348")]
		[Address(RVA = "0xAAABE4", Offset = "0xAAABE4", VA = "0xAAABE4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001347")]
		[Address(RVA = "0xAAAAEC", Offset = "0xAAAAEC", VA = "0xAAAAEC")]
		set
		{
		}
	}

	[Token(Token = "0x1700015E")]
	public tChanAftertouch ChanAftertouch
	{
		[Token(Token = "0x600134A")]
		[Address(RVA = "0xAAADCC", Offset = "0xAAADCC", VA = "0xAAADCC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001349")]
		[Address(RVA = "0xAAACD4", Offset = "0xAAACD4", VA = "0xAAACD4")]
		set
		{
		}
	}

	[Token(Token = "0x1700015F")]
	public tProgramChange ProgramChange
	{
		[Token(Token = "0x600134C")]
		[Address(RVA = "0xAAAFB4", Offset = "0xAAAFB4", VA = "0xAAAFB4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600134B")]
		[Address(RVA = "0xAAAEBC", Offset = "0xAAAEBC", VA = "0xAAAEBC")]
		set
		{
		}
	}

	[Token(Token = "0x17000160")]
	public AkMIDIEventTypes byType
	{
		[Token(Token = "0x600134E")]
		[Address(RVA = "0xAAB120", Offset = "0xAAB120", VA = "0xAAB120")]
		get
		{
			return default(AkMIDIEventTypes);
		}
		[Token(Token = "0x600134D")]
		[Address(RVA = "0xAAB0A4", Offset = "0xAAB0A4", VA = "0xAAB0A4")]
		set
		{
		}
	}

	[Token(Token = "0x17000161")]
	public byte byOnOffNote
	{
		[Token(Token = "0x6001350")]
		[Address(RVA = "0xAAB208", Offset = "0xAAB208", VA = "0xAAB208")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600134F")]
		[Address(RVA = "0xAAB18C", Offset = "0xAAB18C", VA = "0xAAB18C")]
		set
		{
		}
	}

	[Token(Token = "0x17000162")]
	public byte byVelocity
	{
		[Token(Token = "0x6001352")]
		[Address(RVA = "0xAAB2F0", Offset = "0xAAB2F0", VA = "0xAAB2F0")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001351")]
		[Address(RVA = "0xAAB274", Offset = "0xAAB274", VA = "0xAAB274")]
		set
		{
		}
	}

	[Token(Token = "0x17000163")]
	public AkMIDICcTypes byCc
	{
		[Token(Token = "0x6001354")]
		[Address(RVA = "0xAAB3D8", Offset = "0xAAB3D8", VA = "0xAAB3D8")]
		get
		{
			return default(AkMIDICcTypes);
		}
		[Token(Token = "0x6001353")]
		[Address(RVA = "0xAAB35C", Offset = "0xAAB35C", VA = "0xAAB35C")]
		set
		{
		}
	}

	[Token(Token = "0x17000164")]
	public byte byCcValue
	{
		[Token(Token = "0x6001356")]
		[Address(RVA = "0xAAB4C0", Offset = "0xAAB4C0", VA = "0xAAB4C0")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001355")]
		[Address(RVA = "0xAAB444", Offset = "0xAAB444", VA = "0xAAB444")]
		set
		{
		}
	}

	[Token(Token = "0x17000165")]
	public byte byValueLsb
	{
		[Token(Token = "0x6001358")]
		[Address(RVA = "0xAAB5A8", Offset = "0xAAB5A8", VA = "0xAAB5A8")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001357")]
		[Address(RVA = "0xAAB52C", Offset = "0xAAB52C", VA = "0xAAB52C")]
		set
		{
		}
	}

	[Token(Token = "0x17000166")]
	public byte byValueMsb
	{
		[Token(Token = "0x600135A")]
		[Address(RVA = "0xAAB690", Offset = "0xAAB690", VA = "0xAAB690")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001359")]
		[Address(RVA = "0xAAB614", Offset = "0xAAB614", VA = "0xAAB614")]
		set
		{
		}
	}

	[Token(Token = "0x17000167")]
	public byte byAftertouchNote
	{
		[Token(Token = "0x600135C")]
		[Address(RVA = "0xAAB778", Offset = "0xAAB778", VA = "0xAAB778")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600135B")]
		[Address(RVA = "0xAAB6FC", Offset = "0xAAB6FC", VA = "0xAAB6FC")]
		set
		{
		}
	}

	[Token(Token = "0x17000168")]
	public byte byNoteAftertouchValue
	{
		[Token(Token = "0x600135E")]
		[Address(RVA = "0xAAB860", Offset = "0xAAB860", VA = "0xAAB860")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600135D")]
		[Address(RVA = "0xAAB7E4", Offset = "0xAAB7E4", VA = "0xAAB7E4")]
		set
		{
		}
	}

	[Token(Token = "0x17000169")]
	public byte byChanAftertouchValue
	{
		[Token(Token = "0x6001360")]
		[Address(RVA = "0xAAB948", Offset = "0xAAB948", VA = "0xAAB948")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600135F")]
		[Address(RVA = "0xAAB8CC", Offset = "0xAAB8CC", VA = "0xAAB8CC")]
		set
		{
		}
	}

	[Token(Token = "0x1700016A")]
	public byte byProgramNum
	{
		[Token(Token = "0x6001362")]
		[Address(RVA = "0xAABA30", Offset = "0xAABA30", VA = "0xAABA30")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x6001361")]
		[Address(RVA = "0xAAB9B4", Offset = "0xAAB9B4", VA = "0xAAB9B4")]
		set
		{
		}
	}

	[Token(Token = "0x6001338")]
	[Address(RVA = "0xAA9FEC", Offset = "0xAA9FEC", VA = "0xAA9FEC")]
	internal AkMIDIEvent(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001339")]
	[Address(RVA = "0xAAA02C", Offset = "0xAAA02C", VA = "0xAAA02C")]
	internal static IntPtr getCPtr(AkMIDIEvent obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600133A")]
	[Address(RVA = "0xAAA07C", Offset = "0xAAA07C", VA = "0xAAA07C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600133B")]
	[Address(RVA = "0xAAA0B0", Offset = "0xAAA0B0", VA = "0xAAA0B0", Slot = "1")]
	~AkMIDIEvent()
	{
	}

	[Token(Token = "0x600133C")]
	[Address(RVA = "0xAAA124", Offset = "0xAAA124", VA = "0xAAA124", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001363")]
	[Address(RVA = "0xAABA9C", Offset = "0xAABA9C", VA = "0xAABA9C")]
	public AkMIDIEvent()
	{
	}
}
[Token(Token = "0x2000183")]
public class AkMIDIEventCallbackInfo : AkEventCallbackInfo
{
	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr swigCPtr;

	[Token(Token = "0x1700016B")]
	public byte byChan
	{
		[Token(Token = "0x6001369")]
		[Address(RVA = "0xAADA24", Offset = "0xAADA24", VA = "0xAADA24")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x1700016C")]
	public byte byParam1
	{
		[Token(Token = "0x600136A")]
		[Address(RVA = "0xAADA90", Offset = "0xAADA90", VA = "0xAADA90")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x1700016D")]
	public byte byParam2
	{
		[Token(Token = "0x600136B")]
		[Address(RVA = "0xAADAFC", Offset = "0xAADAFC", VA = "0xAADAFC")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x1700016E")]
	public AkMIDIEventTypes byType
	{
		[Token(Token = "0x600136C")]
		[Address(RVA = "0xAADB68", Offset = "0xAADB68", VA = "0xAADB68")]
		get
		{
			return default(AkMIDIEventTypes);
		}
	}

	[Token(Token = "0x1700016F")]
	public byte byOnOffNote
	{
		[Token(Token = "0x600136D")]
		[Address(RVA = "0xAADBD4", Offset = "0xAADBD4", VA = "0xAADBD4")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000170")]
	public byte byVelocity
	{
		[Token(Token = "0x600136E")]
		[Address(RVA = "0xAADC40", Offset = "0xAADC40", VA = "0xAADC40")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000171")]
	public AkMIDICcTypes byCc
	{
		[Token(Token = "0x600136F")]
		[Address(RVA = "0xAADCAC", Offset = "0xAADCAC", VA = "0xAADCAC")]
		get
		{
			return default(AkMIDICcTypes);
		}
	}

	[Token(Token = "0x17000172")]
	public byte byCcValue
	{
		[Token(Token = "0x6001370")]
		[Address(RVA = "0xAADD18", Offset = "0xAADD18", VA = "0xAADD18")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000173")]
	public byte byValueLsb
	{
		[Token(Token = "0x6001371")]
		[Address(RVA = "0xAADD84", Offset = "0xAADD84", VA = "0xAADD84")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000174")]
	public byte byValueMsb
	{
		[Token(Token = "0x6001372")]
		[Address(RVA = "0xAADDF0", Offset = "0xAADDF0", VA = "0xAADDF0")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000175")]
	public byte byAftertouchNote
	{
		[Token(Token = "0x6001373")]
		[Address(RVA = "0xAADE5C", Offset = "0xAADE5C", VA = "0xAADE5C")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000176")]
	public byte byNoteAftertouchValue
	{
		[Token(Token = "0x6001374")]
		[Address(RVA = "0xAADEC8", Offset = "0xAADEC8", VA = "0xAADEC8")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000177")]
	public byte byChanAftertouchValue
	{
		[Token(Token = "0x6001375")]
		[Address(RVA = "0xAADF34", Offset = "0xAADF34", VA = "0xAADF34")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x17000178")]
	public byte byProgramNum
	{
		[Token(Token = "0x6001376")]
		[Address(RVA = "0xAADFA0", Offset = "0xAADFA0", VA = "0xAADFA0")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x6001364")]
	[Address(RVA = "0xAAD6F4", Offset = "0xAAD6F4", VA = "0xAAD6F4")]
	internal AkMIDIEventCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001365")]
	[Address(RVA = "0xAAD788", Offset = "0xAAD788", VA = "0xAAD788")]
	internal static IntPtr getCPtr(AkMIDIEventCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001366")]
	[Address(RVA = "0xAAD7D8", Offset = "0xAAD7D8", VA = "0xAAD7D8", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001367")]
	[Address(RVA = "0xAAD864", Offset = "0xAAD864", VA = "0xAAD864", Slot = "1")]
	~AkMIDIEventCallbackInfo()
	{
	}

	[Token(Token = "0x6001368")]
	[Address(RVA = "0xAAD8D8", Offset = "0xAAD8D8", VA = "0xAAD8D8", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6001377")]
	[Address(RVA = "0xAAE00C", Offset = "0xAAE00C", VA = "0xAAE00C")]
	public AkMIDIEventCallbackInfo()
	{
	}
}
[Token(Token = "0x2000184")]
public enum AkMIDIEventTypes
{
	[Token(Token = "0x4000B3C")]
	NOTE_OFF = 128,
	[Token(Token = "0x4000B3D")]
	NOTE_ON = 144,
	[Token(Token = "0x4000B3E")]
	NOTE_AFTERTOUCH = 160,
	[Token(Token = "0x4000B3F")]
	CONTROLLER = 176,
	[Token(Token = "0x4000B40")]
	PROGRAM_CHANGE = 192,
	[Token(Token = "0x4000B41")]
	CHANNEL_AFTERTOUCH = 208,
	[Token(Token = "0x4000B42")]
	PITCH_BEND = 224,
	[Token(Token = "0x4000B43")]
	SYSEX = 240,
	[Token(Token = "0x4000B44")]
	ESCAPE = 247,
	[Token(Token = "0x4000B45")]
	META = 255
}
[Token(Token = "0x2000185")]
public class AkMIDIPost : AkMIDIEvent
{
	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x17000179")]
	public uint uOffset
	{
		[Token(Token = "0x600137E")]
		[Address(RVA = "0xAAE430", Offset = "0xAAE430", VA = "0xAAE430")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600137D")]
		[Address(RVA = "0xAAE3B4", Offset = "0xAAE3B4", VA = "0xAAE3B4")]
		set
		{
		}
	}

	[Token(Token = "0x6001378")]
	[Address(RVA = "0xAAE080", Offset = "0xAAE080", VA = "0xAAE080")]
	internal AkMIDIPost(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001379")]
	[Address(RVA = "0xAAE11C", Offset = "0xAAE11C", VA = "0xAAE11C")]
	internal static IntPtr getCPtr(AkMIDIPost obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600137A")]
	[Address(RVA = "0xAAE16C", Offset = "0xAAE16C", VA = "0xAAE16C", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600137B")]
	[Address(RVA = "0xAAE200", Offset = "0xAAE200", VA = "0xAAE200", Slot = "1")]
	~AkMIDIPost()
	{
	}

	[Token(Token = "0x600137C")]
	[Address(RVA = "0xAAE26C", Offset = "0xAAE26C", VA = "0xAAE26C", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x600137F")]
	[Address(RVA = "0xAAE49C", Offset = "0xAAE49C", VA = "0xAAE49C")]
	public AKRESULT PostOnEvent(uint in_eventID, GameObject in_gameObjectID, uint in_uNumPosts)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001380")]
	[Address(RVA = "0xAAE658", Offset = "0xAAE658", VA = "0xAAE658")]
	public void Clone(AkMIDIPost other)
	{
	}

	[Token(Token = "0x6001381")]
	[Address(RVA = "0xAAE700", Offset = "0xAAE700", VA = "0xAAE700")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x6001382")]
	[Address(RVA = "0xAAE760", Offset = "0xAAE760", VA = "0xAAE760")]
	public AkMIDIPost()
	{
	}
}
[Token(Token = "0x2000186")]
public enum AkMonitorErrorCode
{
	[Token(Token = "0x4000B48")]
	ErrorCode_NoError,
	[Token(Token = "0x4000B49")]
	ErrorCode_FileNotFound,
	[Token(Token = "0x4000B4A")]
	ErrorCode_CannotOpenFile,
	[Token(Token = "0x4000B4B")]
	ErrorCode_CannotStartStreamNoMemory,
	[Token(Token = "0x4000B4C")]
	ErrorCode_IODevice,
	[Token(Token = "0x4000B4D")]
	ErrorCode_IncompatibleIOSettings,
	[Token(Token = "0x4000B4E")]
	ErrorCode_PluginUnsupportedChannelConfiguration,
	[Token(Token = "0x4000B4F")]
	ErrorCode_PluginMediaUnavailable,
	[Token(Token = "0x4000B50")]
	ErrorCode_PluginInitialisationFailed,
	[Token(Token = "0x4000B51")]
	ErrorCode_PluginProcessingFailed,
	[Token(Token = "0x4000B52")]
	ErrorCode_PluginExecutionInvalid,
	[Token(Token = "0x4000B53")]
	ErrorCode_PluginAllocationFailed,
	[Token(Token = "0x4000B54")]
	ErrorCode_VorbisRequireSeekTable,
	[Token(Token = "0x4000B55")]
	ErrorCode_VorbisDecodeError,
	[Token(Token = "0x4000B56")]
	ErrorCode_AACDecodeError,
	[Token(Token = "0x4000B57")]
	ErrorCode_xWMACreateDecoderFailed,
	[Token(Token = "0x4000B58")]
	ErrorCode_ATRAC9CreateDecoderFailed,
	[Token(Token = "0x4000B59")]
	ErrorCode_ATRAC9CreateDecoderFailedChShortage,
	[Token(Token = "0x4000B5A")]
	ErrorCode_ATRAC9DecodeFailed,
	[Token(Token = "0x4000B5B")]
	ErrorCode_ATRAC9ClearContextFailed,
	[Token(Token = "0x4000B5C")]
	ErrorCode_ATRAC9LoopSectionTooSmall,
	[Token(Token = "0x4000B5D")]
	ErrorCode_InvalidAudioFileHeader,
	[Token(Token = "0x4000B5E")]
	ErrorCode_AudioFileHeaderTooLarge,
	[Token(Token = "0x4000B5F")]
	ErrorCode_FileTooSmall,
	[Token(Token = "0x4000B60")]
	ErrorCode_TransitionNotAccurateChannel,
	[Token(Token = "0x4000B61")]
	ErrorCode_TransitionNotAccurateStarvation,
	[Token(Token = "0x4000B62")]
	ErrorCode_NothingToPlay,
	[Token(Token = "0x4000B63")]
	ErrorCode_PlayFailed,
	[Token(Token = "0x4000B64")]
	ErrorCode_StingerCouldNotBeScheduled,
	[Token(Token = "0x4000B65")]
	ErrorCode_TooLongSegmentLookAhead,
	[Token(Token = "0x4000B66")]
	ErrorCode_CannotScheduleMusicSwitch,
	[Token(Token = "0x4000B67")]
	ErrorCode_TooManySimultaneousMusicSegments,
	[Token(Token = "0x4000B68")]
	ErrorCode_PlaylistStoppedForEditing,
	[Token(Token = "0x4000B69")]
	ErrorCode_MusicClipsRescheduledAfterTrackEdit,
	[Token(Token = "0x4000B6A")]
	ErrorCode_CannotPlaySource_Create,
	[Token(Token = "0x4000B6B")]
	ErrorCode_CannotPlaySource_VirtualOff,
	[Token(Token = "0x4000B6C")]
	ErrorCode_CannotPlaySource_TimeSkip,
	[Token(Token = "0x4000B6D")]
	ErrorCode_CannotPlaySource_InconsistentState,
	[Token(Token = "0x4000B6E")]
	ErrorCode_MediaNotLoaded,
	[Token(Token = "0x4000B6F")]
	ErrorCode_VoiceStarving,
	[Token(Token = "0x4000B70")]
	ErrorCode_StreamingSourceStarving,
	[Token(Token = "0x4000B71")]
	ErrorCode_XMADecoderSourceStarving,
	[Token(Token = "0x4000B72")]
	ErrorCode_XMADecodingError,
	[Token(Token = "0x4000B73")]
	ErrorCode_InvalidXMAData,
	[Token(Token = "0x4000B74")]
	ErrorCode_PluginNotRegistered,
	[Token(Token = "0x4000B75")]
	ErrorCode_CodecNotRegistered,
	[Token(Token = "0x4000B76")]
	ErrorCode_PluginVersionMismatch,
	[Token(Token = "0x4000B77")]
	ErrorCode_EventIDNotFound,
	[Token(Token = "0x4000B78")]
	ErrorCode_InvalidGroupID,
	[Token(Token = "0x4000B79")]
	ErrorCode_SelectedChildNotAvailable,
	[Token(Token = "0x4000B7A")]
	ErrorCode_SelectedNodeNotAvailable,
	[Token(Token = "0x4000B7B")]
	ErrorCode_SelectedMediaNotAvailable,
	[Token(Token = "0x4000B7C")]
	ErrorCode_NoValidSwitch,
	[Token(Token = "0x4000B7D")]
	ErrorCode_SelectedNodeNotAvailablePlay,
	[Token(Token = "0x4000B7E")]
	ErrorCode_FeedbackVoiceStarving,
	[Token(Token = "0x4000B7F")]
	ErrorCode_BankLoadFailed,
	[Token(Token = "0x4000B80")]
	ErrorCode_BankUnloadFailed,
	[Token(Token = "0x4000B81")]
	ErrorCode_ErrorWhileLoadingBank,
	[Token(Token = "0x4000B82")]
	ErrorCode_InsufficientSpaceToLoadBank,
	[Token(Token = "0x4000B83")]
	ErrorCode_LowerEngineCommandListFull,
	[Token(Token = "0x4000B84")]
	ErrorCode_SeekNoMarker,
	[Token(Token = "0x4000B85")]
	ErrorCode_CannotSeekContinuous,
	[Token(Token = "0x4000B86")]
	ErrorCode_SeekAfterEof,
	[Token(Token = "0x4000B87")]
	ErrorCode_UnknownGameObject,
	[Token(Token = "0x4000B88")]
	ErrorCode_UnknownEmitter,
	[Token(Token = "0x4000B89")]
	ErrorCode_UnknownListener,
	[Token(Token = "0x4000B8A")]
	ErrorCode_GameObjectIsNotListener,
	[Token(Token = "0x4000B8B")]
	ErrorCode_GameObjectIsNotEmitter,
	[Token(Token = "0x4000B8C")]
	ErrorCode_UnknownGameObjectEvent,
	[Token(Token = "0x4000B8D")]
	ErrorCode_GameObjectIsNotEmitterEvent,
	[Token(Token = "0x4000B8E")]
	ErrorCode_ExternalSourceNotResolved,
	[Token(Token = "0x4000B8F")]
	ErrorCode_FileFormatMismatch,
	[Token(Token = "0x4000B90")]
	ErrorCode_CommandQueueFull,
	[Token(Token = "0x4000B91")]
	ErrorCode_CommandTooLarge,
	[Token(Token = "0x4000B92")]
	ErrorCode_XMACreateDecoderLimitReached,
	[Token(Token = "0x4000B93")]
	ErrorCode_XMAStreamBufferTooSmall,
	[Token(Token = "0x4000B94")]
	ErrorCode_ModulatorScopeError_Inst,
	[Token(Token = "0x4000B95")]
	ErrorCode_ModulatorScopeError_Obj,
	[Token(Token = "0x4000B96")]
	ErrorCode_SeekAfterEndOfPlaylist,
	[Token(Token = "0x4000B97")]
	ErrorCode_OpusRequireSeekTable,
	[Token(Token = "0x4000B98")]
	ErrorCode_OpusDecodeError,
	[Token(Token = "0x4000B99")]
	ErrorCode_OpusCreateDecoderFailed,
	[Token(Token = "0x4000B9A")]
	ErrorCode_SourcePluginNotFound,
	[Token(Token = "0x4000B9B")]
	ErrorCode_VirtualVoiceLimit,
	[Token(Token = "0x4000B9C")]
	ErrorCode_AudioDeviceShareSetNotFound,
	[Token(Token = "0x4000B9D")]
	ErrorCode_NotEnoughMemoryToStart,
	[Token(Token = "0x4000B9E")]
	ErrorCode_UnkownOpusError,
	[Token(Token = "0x4000B9F")]
	ErrorCode_AudioDeviceInitFailure,
	[Token(Token = "0x4000BA0")]
	ErrorCode_AudioDeviceRemoveFailure,
	[Token(Token = "0x4000BA1")]
	ErrorCode_AudioDeviceNotFound,
	[Token(Token = "0x4000BA2")]
	ErrorCode_AudioDeviceNotValid,
	[Token(Token = "0x4000BA3")]
	ErrorCode_MediaDuplicationLength,
	[Token(Token = "0x4000BA4")]
	Num_ErrorCodes
}
[Token(Token = "0x2000187")]
public enum AkMonitorErrorLevel
{
	[Token(Token = "0x4000BA6")]
	ErrorLevel_Message = 1,
	[Token(Token = "0x4000BA7")]
	ErrorLevel_Error,
	[Token(Token = "0x4000BA8")]
	ErrorLevel_All
}
[Token(Token = "0x2000188")]
public class AkMonitoringCallbackInfo : IDisposable
{
	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700017A")]
	public AkMonitorErrorCode errorCode
	{
		[Token(Token = "0x6001388")]
		[Address(RVA = "0xAB0354", Offset = "0xAB0354", VA = "0xAB0354")]
		get
		{
			return default(AkMonitorErrorCode);
		}
	}

	[Token(Token = "0x1700017B")]
	public AkMonitorErrorLevel errorLevel
	{
		[Token(Token = "0x6001389")]
		[Address(RVA = "0xAB03C0", Offset = "0xAB03C0", VA = "0xAB03C0")]
		get
		{
			return default(AkMonitorErrorLevel);
		}
	}

	[Token(Token = "0x1700017C")]
	public uint playingID
	{
		[Token(Token = "0x600138A")]
		[Address(RVA = "0xAB042C", Offset = "0xAB042C", VA = "0xAB042C")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700017D")]
	public ulong gameObjID
	{
		[Token(Token = "0x600138B")]
		[Address(RVA = "0xAB0498", Offset = "0xAB0498", VA = "0xAB0498")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x1700017E")]
	public string message
	{
		[Token(Token = "0x600138C")]
		[Address(RVA = "0xAB0504", Offset = "0xAB0504", VA = "0xAB0504")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001383")]
	[Address(RVA = "0xAB00DC", Offset = "0xAB00DC", VA = "0xAB00DC")]
	internal AkMonitoringCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001384")]
	[Address(RVA = "0xAB011C", Offset = "0xAB011C", VA = "0xAB011C")]
	internal static IntPtr getCPtr(AkMonitoringCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001385")]
	[Address(RVA = "0xAB016C", Offset = "0xAB016C", VA = "0xAB016C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001386")]
	[Address(RVA = "0xAB01A0", Offset = "0xAB01A0", VA = "0xAB01A0", Slot = "1")]
	~AkMonitoringCallbackInfo()
	{
	}

	[Token(Token = "0x6001387")]
	[Address(RVA = "0xAB0214", Offset = "0xAB0214", VA = "0xAB0214", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600138D")]
	[Address(RVA = "0xAB05A0", Offset = "0xAB05A0", VA = "0xAB05A0")]
	public AkMonitoringCallbackInfo()
	{
	}
}
[Token(Token = "0x2000189")]
public enum AkMultiPositionType
{
	[Token(Token = "0x4000BAC")]
	MultiPositionType_SingleSource,
	[Token(Token = "0x4000BAD")]
	MultiPositionType_MultiSources,
	[Token(Token = "0x4000BAE")]
	MultiPositionType_MultiDirections
}
[Token(Token = "0x200018A")]
public class AkMusicPlaylistCallbackInfo : AkEventCallbackInfo
{
	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr swigCPtr;

	[Token(Token = "0x1700017F")]
	public uint playlistID
	{
		[Token(Token = "0x6001393")]
		[Address(RVA = "0xAB09CC", Offset = "0xAB09CC", VA = "0xAB09CC")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000180")]
	public uint uNumPlaylistItems
	{
		[Token(Token = "0x6001394")]
		[Address(RVA = "0xAB0A38", Offset = "0xAB0A38", VA = "0xAB0A38")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000181")]
	public uint uPlaylistSelection
	{
		[Token(Token = "0x6001395")]
		[Address(RVA = "0xAB0AA4", Offset = "0xAB0AA4", VA = "0xAB0AA4")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000182")]
	public uint uPlaylistItemDone
	{
		[Token(Token = "0x6001396")]
		[Address(RVA = "0xAB0B10", Offset = "0xAB0B10", VA = "0xAB0B10")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x600138E")]
	[Address(RVA = "0xAB069C", Offset = "0xAB069C", VA = "0xAB069C")]
	internal AkMusicPlaylistCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600138F")]
	[Address(RVA = "0xAB0730", Offset = "0xAB0730", VA = "0xAB0730")]
	internal static IntPtr getCPtr(AkMusicPlaylistCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001390")]
	[Address(RVA = "0xAB0780", Offset = "0xAB0780", VA = "0xAB0780", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001391")]
	[Address(RVA = "0xAB080C", Offset = "0xAB080C", VA = "0xAB080C", Slot = "1")]
	~AkMusicPlaylistCallbackInfo()
	{
	}

	[Token(Token = "0x6001392")]
	[Address(RVA = "0xAB0880", Offset = "0xAB0880", VA = "0xAB0880", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x6001397")]
	[Address(RVA = "0xAB0B7C", Offset = "0xAB0B7C", VA = "0xAB0B7C")]
	public AkMusicPlaylistCallbackInfo()
	{
	}
}
[Token(Token = "0x200018B")]
public class AkMusicSettings : IDisposable
{
	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000183")]
	public float fStreamingLookAheadRatio
	{
		[Token(Token = "0x600139E")]
		[Address(RVA = "0xAB0E54", Offset = "0xAB0E54", VA = "0xAB0E54")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600139D")]
		[Address(RVA = "0xAB0DD8", Offset = "0xAB0DD8", VA = "0xAB0DD8")]
		set
		{
		}
	}

	[Token(Token = "0x6001398")]
	[Address(RVA = "0xAA8508", Offset = "0xAA8508", VA = "0xAA8508")]
	internal AkMusicSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001399")]
	[Address(RVA = "0xAA8408", Offset = "0xAA8408", VA = "0xAA8408")]
	internal static IntPtr getCPtr(AkMusicSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600139A")]
	[Address(RVA = "0xAB0BF0", Offset = "0xAB0BF0", VA = "0xAB0BF0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600139B")]
	[Address(RVA = "0xAB0C24", Offset = "0xAB0C24", VA = "0xAB0C24", Slot = "1")]
	~AkMusicSettings()
	{
	}

	[Token(Token = "0x600139C")]
	[Address(RVA = "0xAB0C98", Offset = "0xAB0C98", VA = "0xAB0C98", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600139F")]
	[Address(RVA = "0xAB0EC0", Offset = "0xAB0EC0", VA = "0xAB0EC0")]
	public AkMusicSettings()
	{
	}
}
[Token(Token = "0x200018C")]
public class AkMusicSyncCallbackInfo : AkCallbackInfo
{
	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x17000184")]
	public uint playingID
	{
		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xAB1274", Offset = "0xAB1274", VA = "0xAB1274")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000185")]
	public int segmentInfo_iCurrentPosition
	{
		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xAB12E0", Offset = "0xAB12E0", VA = "0xAB12E0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000186")]
	public int segmentInfo_iPreEntryDuration
	{
		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xAB134C", Offset = "0xAB134C", VA = "0xAB134C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000187")]
	public int segmentInfo_iActiveDuration
	{
		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xAB13B8", Offset = "0xAB13B8", VA = "0xAB13B8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000188")]
	public int segmentInfo_iPostExitDuration
	{
		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xAB1424", Offset = "0xAB1424", VA = "0xAB1424")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000189")]
	public int segmentInfo_iRemainingLookAheadTime
	{
		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xAB1490", Offset = "0xAB1490", VA = "0xAB1490")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700018A")]
	public float segmentInfo_fBeatDuration
	{
		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xAB14FC", Offset = "0xAB14FC", VA = "0xAB14FC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700018B")]
	public float segmentInfo_fBarDuration
	{
		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xAB1568", Offset = "0xAB1568", VA = "0xAB1568")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700018C")]
	public float segmentInfo_fGridDuration
	{
		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xAB15D4", Offset = "0xAB15D4", VA = "0xAB15D4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700018D")]
	public float segmentInfo_fGridOffset
	{
		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xAB1640", Offset = "0xAB1640", VA = "0xAB1640")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700018E")]
	public AkCallbackType musicSyncType
	{
		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xAB16AC", Offset = "0xAB16AC", VA = "0xAB16AC")]
		get
		{
			return default(AkCallbackType);
		}
	}

	[Token(Token = "0x1700018F")]
	public string userCueName
	{
		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xAB1718", Offset = "0xAB1718", VA = "0xAB1718")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013A0")]
	[Address(RVA = "0xAB0F44", Offset = "0xAB0F44", VA = "0xAB0F44")]
	internal AkMusicSyncCallbackInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60013A1")]
	[Address(RVA = "0xAB0FD8", Offset = "0xAB0FD8", VA = "0xAB0FD8")]
	internal static IntPtr getCPtr(AkMusicSyncCallbackInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60013A2")]
	[Address(RVA = "0xAB1028", Offset = "0xAB1028", VA = "0xAB1028", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60013A3")]
	[Address(RVA = "0xAB10B4", Offset = "0xAB10B4", VA = "0xAB10B4", Slot = "1")]
	~AkMusicSyncCallbackInfo()
	{
	}

	[Token(Token = "0x60013A4")]
	[Address(RVA = "0xAB1128", Offset = "0xAB1128", VA = "0xAB1128", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60013B1")]
	[Address(RVA = "0xAB17B4", Offset = "0xAB17B4", VA = "0xAB17B4")]
	public AkMusicSyncCallbackInfo()
	{
	}
}
[Token(Token = "0x200018D")]
public class AkObjectInfo : IDisposable
{
	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000190")]
	public uint objID
	{
		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xAB1B1C", Offset = "0xAB1B1C", VA = "0xAB1B1C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xAB1AA0", Offset = "0xAB1AA0", VA = "0xAB1AA0")]
		set
		{
		}
	}

	[Token(Token = "0x17000191")]
	public uint parentID
	{
		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xAB1C04", Offset = "0xAB1C04", VA = "0xAB1C04")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xAB1B88", Offset = "0xAB1B88", VA = "0xAB1B88")]
		set
		{
		}
	}

	[Token(Token = "0x17000192")]
	public int iDepth
	{
		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xAB1CEC", Offset = "0xAB1CEC", VA = "0xAB1CEC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xAB1C70", Offset = "0xAB1C70", VA = "0xAB1C70")]
		set
		{
		}
	}

	[Token(Token = "0x60013B2")]
	[Address(RVA = "0xAB1828", Offset = "0xAB1828", VA = "0xAB1828")]
	internal AkObjectInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60013B3")]
	[Address(RVA = "0xAB1868", Offset = "0xAB1868", VA = "0xAB1868")]
	internal static IntPtr getCPtr(AkObjectInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60013B4")]
	[Address(RVA = "0xAB18B8", Offset = "0xAB18B8", VA = "0xAB18B8", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60013B5")]
	[Address(RVA = "0xAB18EC", Offset = "0xAB18EC", VA = "0xAB18EC", Slot = "1")]
	~AkObjectInfo()
	{
	}

	[Token(Token = "0x60013B6")]
	[Address(RVA = "0xAB1960", Offset = "0xAB1960", VA = "0xAB1960", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60013BD")]
	[Address(RVA = "0xAB1D58", Offset = "0xAB1D58", VA = "0xAB1D58")]
	public void Clear()
	{
	}

	[Token(Token = "0x60013BE")]
	[Address(RVA = "0xAB1DC4", Offset = "0xAB1DC4", VA = "0xAB1DC4")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x60013BF")]
	[Address(RVA = "0xAB1E24", Offset = "0xAB1E24", VA = "0xAB1E24")]
	public void Clone(AkObjectInfo other)
	{
	}

	[Token(Token = "0x60013C0")]
	[Address(RVA = "0xAB1ECC", Offset = "0xAB1ECC", VA = "0xAB1ECC")]
	public AkObjectInfo()
	{
	}
}
[Token(Token = "0x200018E")]
public class AkObstructionOcclusionValues : IDisposable
{
	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000193")]
	public float occlusion
	{
		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xAB2DDC", Offset = "0xAB2DDC", VA = "0xAB2DDC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xAB2D60", Offset = "0xAB2D60", VA = "0xAB2D60")]
		set
		{
		}
	}

	[Token(Token = "0x17000194")]
	public float obstruction
	{
		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xAB2EC4", Offset = "0xAB2EC4", VA = "0xAB2EC4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xAB2E48", Offset = "0xAB2E48", VA = "0xAB2E48")]
		set
		{
		}
	}

	[Token(Token = "0x60013C1")]
	[Address(RVA = "0xAB2AE8", Offset = "0xAB2AE8", VA = "0xAB2AE8")]
	internal AkObstructionOcclusionValues(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60013C2")]
	[Address(RVA = "0xAB2B28", Offset = "0xAB2B28", VA = "0xAB2B28")]
	internal static IntPtr getCPtr(AkObstructionOcclusionValues obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60013C3")]
	[Address(RVA = "0xAB2B78", Offset = "0xAB2B78", VA = "0xAB2B78", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60013C4")]
	[Address(RVA = "0xAB2BAC", Offset = "0xAB2BAC", VA = "0xAB2BAC", Slot = "1")]
	~AkObstructionOcclusionValues()
	{
	}

	[Token(Token = "0x60013C5")]
	[Address(RVA = "0xAB2C20", Offset = "0xAB2C20", VA = "0xAB2C20", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60013CA")]
	[Address(RVA = "0xAB2F30", Offset = "0xAB2F30", VA = "0xAB2F30")]
	public void Clear()
	{
	}

	[Token(Token = "0x60013CB")]
	[Address(RVA = "0xAB2F9C", Offset = "0xAB2F9C", VA = "0xAB2F9C")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x60013CC")]
	[Address(RVA = "0xAB2FFC", Offset = "0xAB2FFC", VA = "0xAB2FFC")]
	public void Clone(AkObstructionOcclusionValues other)
	{
	}

	[Token(Token = "0x60013CD")]
	[Address(RVA = "0xAB30A4", Offset = "0xAB30A4", VA = "0xAB30A4")]
	public AkObstructionOcclusionValues()
	{
	}
}
[Token(Token = "0x200018F")]
public class AkOutputSettings : IDisposable
{
	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000195")]
	public uint audioDeviceShareset
	{
		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xAB38FC", Offset = "0xAB38FC", VA = "0xAB38FC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xAB3880", Offset = "0xAB3880", VA = "0xAB3880")]
		set
		{
		}
	}

	[Token(Token = "0x17000196")]
	public uint idDevice
	{
		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xAB39E4", Offset = "0xAB39E4", VA = "0xAB39E4")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xAB3968", Offset = "0xAB3968", VA = "0xAB3968")]
		set
		{
		}
	}

	[Token(Token = "0x17000197")]
	public AkPanningRule ePanningRule
	{
		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xAB3ACC", Offset = "0xAB3ACC", VA = "0xAB3ACC")]
		get
		{
			return default(AkPanningRule);
		}
		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xAB3A50", Offset = "0xAB3A50", VA = "0xAB3A50")]
		set
		{
		}
	}

	[Token(Token = "0x17000198")]
	public AkChannelConfig channelConfig
	{
		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xAB3BC8", Offset = "0xAB3BC8", VA = "0xAB3BC8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xAB3B38", Offset = "0xAB3B38", VA = "0xAB3B38")]
		set
		{
		}
	}

	[Token(Token = "0x60013CE")]
	[Address(RVA = "0xAA7340", Offset = "0xAA7340", VA = "0xAA7340")]
	internal AkOutputSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60013CF")]
	[Address(RVA = "0xAA7240", Offset = "0xAA7240", VA = "0xAA7240")]
	internal static IntPtr getCPtr(AkOutputSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60013D0")]
	[Address(RVA = "0xAB335C", Offset = "0xAB335C", VA = "0xAB335C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60013D1")]
	[Address(RVA = "0xAB3390", Offset = "0xAB3390", VA = "0xAB3390", Slot = "1")]
	~AkOutputSettings()
	{
	}

	[Token(Token = "0x60013D2")]
	[Address(RVA = "0xAB3404", Offset = "0xAB3404", VA = "0xAB3404", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60013D3")]
	[Address(RVA = "0xAB3544", Offset = "0xAB3544", VA = "0xAB3544")]
	public AkOutputSettings()
	{
	}

	[Token(Token = "0x60013D4")]
	[Address(RVA = "0xAB35C8", Offset = "0xAB35C8", VA = "0xAB35C8")]
	public AkOutputSettings(string in_szDeviceShareSet, uint in_idDevice, AkChannelConfig in_channelConfig, AkPanningRule in_ePanning)
	{
	}

	[Token(Token = "0x60013D5")]
	[Address(RVA = "0xAB3690", Offset = "0xAB3690", VA = "0xAB3690")]
	public AkOutputSettings(string in_szDeviceShareSet, uint in_idDevice, AkChannelConfig in_channelConfig)
	{
	}

	[Token(Token = "0x60013D6")]
	[Address(RVA = "0xAB3750", Offset = "0xAB3750", VA = "0xAB3750")]
	public AkOutputSettings(string in_szDeviceShareSet, uint in_idDevice)
	{
	}

	[Token(Token = "0x60013D7")]
	[Address(RVA = "0xAB37EC", Offset = "0xAB37EC", VA = "0xAB37EC")]
	public AkOutputSettings(string in_szDeviceShareSet)
	{
	}
}
[Token(Token = "0x2000190")]
public enum AkPanningRule
{
	[Token(Token = "0x4000BBA")]
	AkPanningRule_Speakers,
	[Token(Token = "0x4000BBB")]
	AkPanningRule_Headphones
}
[Token(Token = "0x2000191")]
public class AkPathParams : IDisposable
{
	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x17000199")]
	public AkVector listenerPos
	{
		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xAB3F80", Offset = "0xAB3F80", VA = "0xAB3F80")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xAB3EF0", Offset = "0xAB3EF0", VA = "0xAB3EF0")]
		set
		{
		}
	}

	[Token(Token = "0x1700019A")]
	public AkVector emitterPos
	{
		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xAB40C0", Offset = "0xAB40C0", VA = "0xAB40C0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xAB4030", Offset = "0xAB4030", VA = "0xAB4030")]
		set
		{
		}
	}

	[Token(Token = "0x1700019B")]
	public uint numValidPaths
	{
		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xAB41EC", Offset = "0xAB41EC", VA = "0xAB41EC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xAB4170", Offset = "0xAB4170", VA = "0xAB4170")]
		set
		{
		}
	}

	[Token(Token = "0x60013E0")]
	[Address(RVA = "0xAB3C78", Offset = "0xAB3C78", VA = "0xAB3C78")]
	internal AkPathParams(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60013E1")]
	[Address(RVA = "0xAB3CB8", Offset = "0xAB3CB8", VA = "0xAB3CB8")]
	internal static IntPtr getCPtr(AkPathParams obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60013E2")]
	[Address(RVA = "0xAB3D08", Offset = "0xAB3D08", VA = "0xAB3D08", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60013E3")]
	[Address(RVA = "0xAB3D3C", Offset = "0xAB3D3C", VA = "0xAB3D3C", Slot = "1")]
	~AkPathParams()
	{
	}

	[Token(Token = "0x60013E4")]
	[Address(RVA = "0xAB3DB0", Offset = "0xAB3DB0", VA = "0xAB3DB0", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60013EB")]
	[Address(RVA = "0xAB4258", Offset = "0xAB4258", VA = "0xAB4258")]
	public AkPathParams()
	{
	}
}
[Token(Token = "0x2000192")]
public class AkPlaylist : AkPlaylistArray
{
	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr swigCPtr;

	[Token(Token = "0x60013EC")]
	[Address(RVA = "0xAB50A0", Offset = "0xAB50A0", VA = "0xAB50A0")]
	internal AkPlaylist(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60013ED")]
	[Address(RVA = "0xAB517C", Offset = "0xAB517C", VA = "0xAB517C")]
	internal static IntPtr getCPtr(AkPlaylist obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60013EE")]
	[Address(RVA = "0xAB51CC", Offset = "0xAB51CC", VA = "0xAB51CC", Slot = "5")]
	internal override void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60013EF")]
	[Address(RVA = "0xAB5294", Offset = "0xAB5294", VA = "0xAB5294", Slot = "1")]
	~AkPlaylist()
	{
	}

	[Token(Token = "0x60013F0")]
	[Address(RVA = "0xAB5374", Offset = "0xAB5374", VA = "0xAB5374", Slot = "6")]
	public override void Dispose()
	{
	}

	[Token(Token = "0x60013F1")]
	[Address(RVA = "0xAB55FC", Offset = "0xAB55FC", VA = "0xAB55FC")]
	public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay, IntPtr in_pCustomInfo, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60013F2")]
	[Address(RVA = "0xAB56B8", Offset = "0xAB56B8", VA = "0xAB56B8")]
	public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay, IntPtr in_pCustomInfo, uint in_cExternals)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60013F3")]
	[Address(RVA = "0xAB5754", Offset = "0xAB5754", VA = "0xAB5754")]
	public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay, IntPtr in_pCustomInfo)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60013F4")]
	[Address(RVA = "0xAB57E8", Offset = "0xAB57E8", VA = "0xAB57E8")]
	public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60013F5")]
	[Address(RVA = "0xAB586C", Offset = "0xAB586C", VA = "0xAB586C")]
	public AKRESULT Enqueue(uint in_audioNodeID)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60013F6")]
	[Address(RVA = "0xAB58E8", Offset = "0xAB58E8", VA = "0xAB58E8")]
	public AkPlaylist()
	{
	}
}
[Token(Token = "0x2000193")]
public class AkPlaylistArray : IDisposable
{
	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x60013F7")]
	[Address(RVA = "0xAB513C", Offset = "0xAB513C", VA = "0xAB513C")]
	internal AkPlaylistArray(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60013F8")]
	[Address(RVA = "0xAB595C", Offset = "0xAB595C", VA = "0xAB595C")]
	internal static IntPtr getCPtr(AkPlaylistArray obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60013F9")]
	[Address(RVA = "0xAB5260", Offset = "0xAB5260", VA = "0xAB5260", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60013FA")]
	[Address(RVA = "0xAB5300", Offset = "0xAB5300", VA = "0xAB5300", Slot = "1")]
	~AkPlaylistArray()
	{
	}

	[Token(Token = "0x60013FB")]
	[Address(RVA = "0xAB54BC", Offset = "0xAB54BC", VA = "0xAB54BC", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60013FC")]
	[Address(RVA = "0xAB59AC", Offset = "0xAB59AC", VA = "0xAB59AC")]
	public AkPlaylistArray()
	{
	}

	[Token(Token = "0x60013FD")]
	[Address(RVA = "0xAB5A30", Offset = "0xAB5A30", VA = "0xAB5A30")]
	public AkIterator Begin()
	{
		return null;
	}

	[Token(Token = "0x60013FE")]
	[Address(RVA = "0xAB5AD4", Offset = "0xAB5AD4", VA = "0xAB5AD4")]
	public AkIterator End()
	{
		return null;
	}

	[Token(Token = "0x60013FF")]
	[Address(RVA = "0xAB5B78", Offset = "0xAB5B78", VA = "0xAB5B78")]
	public AkIterator FindEx(AkPlaylistItem in_Item)
	{
		return null;
	}

	[Token(Token = "0x6001400")]
	[Address(RVA = "0xAB5C58", Offset = "0xAB5C58", VA = "0xAB5C58")]
	public AkIterator Erase(AkIterator in_rIter)
	{
		return null;
	}

	[Token(Token = "0x6001401")]
	[Address(RVA = "0xAB5D38", Offset = "0xAB5D38", VA = "0xAB5D38")]
	public void Erase(uint in_uIndex)
	{
	}

	[Token(Token = "0x6001402")]
	[Address(RVA = "0xAB5DB4", Offset = "0xAB5DB4", VA = "0xAB5DB4")]
	public AkIterator EraseSwap(AkIterator in_rIter)
	{
		return null;
	}

	[Token(Token = "0x6001403")]
	[Address(RVA = "0xAB5E94", Offset = "0xAB5E94", VA = "0xAB5E94")]
	public AKRESULT Reserve(uint in_ulReserve)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001404")]
	[Address(RVA = "0xAB5F10", Offset = "0xAB5F10", VA = "0xAB5F10")]
	public uint Reserved()
	{
		return default(uint);
	}

	[Token(Token = "0x6001405")]
	[Address(RVA = "0xAB5F7C", Offset = "0xAB5F7C", VA = "0xAB5F7C")]
	public void Term()
	{
	}

	[Token(Token = "0x6001406")]
	[Address(RVA = "0xAB5FE8", Offset = "0xAB5FE8", VA = "0xAB5FE8")]
	public uint Length()
	{
		return default(uint);
	}

	[Token(Token = "0x6001407")]
	[Address(RVA = "0xAB6054", Offset = "0xAB6054", VA = "0xAB6054")]
	public AkPlaylistItem Data()
	{
		return null;
	}

	[Token(Token = "0x6001408")]
	[Address(RVA = "0xAB6104", Offset = "0xAB6104", VA = "0xAB6104")]
	public bool IsEmpty()
	{
		return default(bool);
	}

	[Token(Token = "0x6001409")]
	[Address(RVA = "0xAB6170", Offset = "0xAB6170", VA = "0xAB6170")]
	public AkPlaylistItem Exists(AkPlaylistItem in_Item)
	{
		return null;
	}

	[Token(Token = "0x600140A")]
	[Address(RVA = "0xAB625C", Offset = "0xAB625C", VA = "0xAB625C")]
	public AkPlaylistItem AddLast()
	{
		return null;
	}

	[Token(Token = "0x600140B")]
	[Address(RVA = "0xAB630C", Offset = "0xAB630C", VA = "0xAB630C")]
	public AkPlaylistItem AddLast(AkPlaylistItem in_rItem)
	{
		return null;
	}

	[Token(Token = "0x600140C")]
	[Address(RVA = "0xAB63F8", Offset = "0xAB63F8", VA = "0xAB63F8")]
	public AkPlaylistItem Last()
	{
		return null;
	}

	[Token(Token = "0x600140D")]
	[Address(RVA = "0xAB6498", Offset = "0xAB6498", VA = "0xAB6498")]
	public void RemoveLast()
	{
	}

	[Token(Token = "0x600140E")]
	[Address(RVA = "0xAB6504", Offset = "0xAB6504", VA = "0xAB6504")]
	public AKRESULT Remove(AkPlaylistItem in_rItem)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600140F")]
	[Address(RVA = "0xAB65AC", Offset = "0xAB65AC", VA = "0xAB65AC")]
	public AKRESULT RemoveSwap(AkPlaylistItem in_rItem)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001410")]
	[Address(RVA = "0xAB6654", Offset = "0xAB6654", VA = "0xAB6654")]
	public void RemoveAll()
	{
	}

	[Token(Token = "0x6001411")]
	[Address(RVA = "0xAB66C0", Offset = "0xAB66C0", VA = "0xAB66C0")]
	public AkPlaylistItem ItemAtIndex(uint uiIndex)
	{
		return null;
	}

	[Token(Token = "0x6001412")]
	[Address(RVA = "0xAB6770", Offset = "0xAB6770", VA = "0xAB6770")]
	public AkPlaylistItem Insert(uint in_uIndex)
	{
		return null;
	}

	[Token(Token = "0x6001413")]
	[Address(RVA = "0xAB6830", Offset = "0xAB6830", VA = "0xAB6830")]
	public bool GrowArray(uint in_uGrowBy)
	{
		return default(bool);
	}

	[Token(Token = "0x6001414")]
	[Address(RVA = "0xAB68AC", Offset = "0xAB68AC", VA = "0xAB68AC")]
	public bool GrowArray()
	{
		return default(bool);
	}

	[Token(Token = "0x6001415")]
	[Address(RVA = "0xAB6918", Offset = "0xAB6918", VA = "0xAB6918")]
	public bool Resize(uint in_uiSize)
	{
		return default(bool);
	}

	[Token(Token = "0x6001416")]
	[Address(RVA = "0xAB6994", Offset = "0xAB6994", VA = "0xAB6994")]
	public void Transfer(AkPlaylistArray in_rSource)
	{
	}

	[Token(Token = "0x6001417")]
	[Address(RVA = "0xAB6A3C", Offset = "0xAB6A3C", VA = "0xAB6A3C")]
	public AKRESULT Copy(AkPlaylistArray in_rSource)
	{
		return default(AKRESULT);
	}
}
[Token(Token = "0x2000194")]
public class AkPlaylistItem : IDisposable
{
	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700019C")]
	public uint audioNodeID
	{
		[Token(Token = "0x6001423")]
		[Address(RVA = "0xAB70A4", Offset = "0xAB70A4", VA = "0xAB70A4")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001422")]
		[Address(RVA = "0xAB7028", Offset = "0xAB7028", VA = "0xAB7028")]
		set
		{
		}
	}

	[Token(Token = "0x1700019D")]
	public int msDelay
	{
		[Token(Token = "0x6001425")]
		[Address(RVA = "0xAB718C", Offset = "0xAB718C", VA = "0xAB718C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001424")]
		[Address(RVA = "0xAB7110", Offset = "0xAB7110", VA = "0xAB7110")]
		set
		{
		}
	}

	[Token(Token = "0x1700019E")]
	public IntPtr pCustomInfo
	{
		[Token(Token = "0x6001427")]
		[Address(RVA = "0xAB7274", Offset = "0xAB7274", VA = "0xAB7274")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x6001426")]
		[Address(RVA = "0xAB71F8", Offset = "0xAB71F8", VA = "0xAB71F8")]
		set
		{
		}
	}

	[Token(Token = "0x6001418")]
	[Address(RVA = "0xAA924C", Offset = "0xAA924C", VA = "0xAA924C")]
	internal AkPlaylistItem(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001419")]
	[Address(RVA = "0xAA914C", Offset = "0xAA914C", VA = "0xAA914C")]
	internal static IntPtr getCPtr(AkPlaylistItem obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600141A")]
	[Address(RVA = "0xAB6AE4", Offset = "0xAB6AE4", VA = "0xAB6AE4", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600141B")]
	[Address(RVA = "0xAB6B18", Offset = "0xAB6B18", VA = "0xAB6B18", Slot = "1")]
	~AkPlaylistItem()
	{
	}

	[Token(Token = "0x600141C")]
	[Address(RVA = "0xAB6B8C", Offset = "0xAB6B8C", VA = "0xAB6B8C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600141D")]
	[Address(RVA = "0xAB6CCC", Offset = "0xAB6CCC", VA = "0xAB6CCC")]
	public AkPlaylistItem()
	{
	}

	[Token(Token = "0x600141E")]
	[Address(RVA = "0xAB6D50", Offset = "0xAB6D50", VA = "0xAB6D50")]
	public AkPlaylistItem(AkPlaylistItem in_rCopy)
	{
	}

	[Token(Token = "0x600141F")]
	[Address(RVA = "0xAB6E10", Offset = "0xAB6E10", VA = "0xAB6E10")]
	public AkPlaylistItem Assign(AkPlaylistItem in_rCopy)
	{
		return null;
	}

	[Token(Token = "0x6001420")]
	[Address(RVA = "0xAB6EEC", Offset = "0xAB6EEC", VA = "0xAB6EEC")]
	public bool IsEqualTo(AkPlaylistItem in_rCopy)
	{
		return default(bool);
	}

	[Token(Token = "0x6001421")]
	[Address(RVA = "0xAB6F94", Offset = "0xAB6F94", VA = "0xAB6F94")]
	public AKRESULT SetExternalSources(uint in_nExternalSrc, AkExternalSourceInfoArray in_pExternalSrc)
	{
		return default(AKRESULT);
	}
}
[Token(Token = "0x2000195")]
public enum AkPluginType
{
	[Token(Token = "0x4000BC4")]
	AkPluginTypeNone = 0,
	[Token(Token = "0x4000BC5")]
	AkPluginTypeCodec = 1,
	[Token(Token = "0x4000BC6")]
	AkPluginTypeSource = 2,
	[Token(Token = "0x4000BC7")]
	AkPluginTypeEffect = 3,
	[Token(Token = "0x4000BC8")]
	AkPluginTypeMixer = 6,
	[Token(Token = "0x4000BC9")]
	AkPluginTypeSink = 7,
	[Token(Token = "0x4000BCA")]
	AkPluginTypeGlobalExtension = 8,
	[Token(Token = "0x4000BCB")]
	AkPluginTypeMask = 15
}
[Token(Token = "0x2000196")]
public class AkPositioningInfo : IDisposable
{
	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x1700019F")]
	public float fCenterPct
	{
		[Token(Token = "0x600142E")]
		[Address(RVA = "0xAB7B3C", Offset = "0xAB7B3C", VA = "0xAB7B3C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600142D")]
		[Address(RVA = "0xAB7AC0", Offset = "0xAB7AC0", VA = "0xAB7AC0")]
		set
		{
		}
	}

	[Token(Token = "0x170001A0")]
	public AkSpeakerPanningType pannerType
	{
		[Token(Token = "0x6001430")]
		[Address(RVA = "0xAB7C24", Offset = "0xAB7C24", VA = "0xAB7C24")]
		get
		{
			return default(AkSpeakerPanningType);
		}
		[Token(Token = "0x600142F")]
		[Address(RVA = "0xAB7BA8", Offset = "0xAB7BA8", VA = "0xAB7BA8")]
		set
		{
		}
	}

	[Token(Token = "0x170001A1")]
	public Ak3DPositionType e3dPositioningType
	{
		[Token(Token = "0x6001432")]
		[Address(RVA = "0xAB7D0C", Offset = "0xAB7D0C", VA = "0xAB7D0C")]
		get
		{
			return default(Ak3DPositionType);
		}
		[Token(Token = "0x6001431")]
		[Address(RVA = "0xAB7C90", Offset = "0xAB7C90", VA = "0xAB7C90")]
		set
		{
		}
	}

	[Token(Token = "0x170001A2")]
	public bool bHoldEmitterPosAndOrient
	{
		[Token(Token = "0x6001434")]
		[Address(RVA = "0xAB7DF4", Offset = "0xAB7DF4", VA = "0xAB7DF4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001433")]
		[Address(RVA = "0xAB7D78", Offset = "0xAB7D78", VA = "0xAB7D78")]
		set
		{
		}
	}

	[Token(Token = "0x170001A3")]
	public Ak3DSpatializationMode e3DSpatializationMode
	{
		[Token(Token = "0x6001436")]
		[Address(RVA = "0xAB7EDC", Offset = "0xAB7EDC", VA = "0xAB7EDC")]
		get
		{
			return default(Ak3DSpatializationMode);
		}
		[Token(Token = "0x6001435")]
		[Address(RVA = "0xAB7E60", Offset = "0xAB7E60", VA = "0xAB7E60")]
		set
		{
		}
	}

	[Token(Token = "0x170001A4")]
	public bool bEnableAttenuation
	{
		[Token(Token = "0x6001438")]
		[Address(RVA = "0xAB7FC4", Offset = "0xAB7FC4", VA = "0xAB7FC4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001437")]
		[Address(RVA = "0xAB7F48", Offset = "0xAB7F48", VA = "0xAB7F48")]
		set
		{
		}
	}

	[Token(Token = "0x170001A5")]
	public bool bUseConeAttenuation
	{
		[Token(Token = "0x600143A")]
		[Address(RVA = "0xAB80AC", Offset = "0xAB80AC", VA = "0xAB80AC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001439")]
		[Address(RVA = "0xAB8030", Offset = "0xAB8030", VA = "0xAB8030")]
		set
		{
		}
	}

	[Token(Token = "0x170001A6")]
	public float fInnerAngle
	{
		[Token(Token = "0x600143C")]
		[Address(RVA = "0xAB8194", Offset = "0xAB8194", VA = "0xAB8194")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600143B")]
		[Address(RVA = "0xAB8118", Offset = "0xAB8118", VA = "0xAB8118")]
		set
		{
		}
	}

	[Token(Token = "0x170001A7")]
	public float fOuterAngle
	{
		[Token(Token = "0x600143E")]
		[Address(RVA = "0xAB827C", Offset = "0xAB827C", VA = "0xAB827C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600143D")]
		[Address(RVA = "0xAB8200", Offset = "0xAB8200", VA = "0xAB8200")]
		set
		{
		}
	}

	[Token(Token = "0x170001A8")]
	public float fConeMaxAttenuation
	{
		[Token(Token = "0x6001440")]
		[Address(RVA = "0xAB8364", Offset = "0xAB8364", VA = "0xAB8364")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600143F")]
		[Address(RVA = "0xAB82E8", Offset = "0xAB82E8", VA = "0xAB82E8")]
		set
		{
		}
	}

	[Token(Token = "0x170001A9")]
	public float LPFCone
	{
		[Token(Token = "0x6001442")]
		[Address(RVA = "0xAB844C", Offset = "0xAB844C", VA = "0xAB844C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001441")]
		[Address(RVA = "0xAB83D0", Offset = "0xAB83D0", VA = "0xAB83D0")]
		set
		{
		}
	}

	[Token(Token = "0x170001AA")]
	public float HPFCone
	{
		[Token(Token = "0x6001444")]
		[Address(RVA = "0xAB8534", Offset = "0xAB8534", VA = "0xAB8534")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001443")]
		[Address(RVA = "0xAB84B8", Offset = "0xAB84B8", VA = "0xAB84B8")]
		set
		{
		}
	}

	[Token(Token = "0x170001AB")]
	public float fMaxDistance
	{
		[Token(Token = "0x6001446")]
		[Address(RVA = "0xAB861C", Offset = "0xAB861C", VA = "0xAB861C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001445")]
		[Address(RVA = "0xAB85A0", Offset = "0xAB85A0", VA = "0xAB85A0")]
		set
		{
		}
	}

	[Token(Token = "0x170001AC")]
	public float fVolDryAtMaxDist
	{
		[Token(Token = "0x6001448")]
		[Address(RVA = "0xAB8704", Offset = "0xAB8704", VA = "0xAB8704")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001447")]
		[Address(RVA = "0xAB8688", Offset = "0xAB8688", VA = "0xAB8688")]
		set
		{
		}
	}

	[Token(Token = "0x170001AD")]
	public float fVolAuxGameDefAtMaxDist
	{
		[Token(Token = "0x600144A")]
		[Address(RVA = "0xAB87EC", Offset = "0xAB87EC", VA = "0xAB87EC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001449")]
		[Address(RVA = "0xAB8770", Offset = "0xAB8770", VA = "0xAB8770")]
		set
		{
		}
	}

	[Token(Token = "0x170001AE")]
	public float fVolAuxUserDefAtMaxDist
	{
		[Token(Token = "0x600144C")]
		[Address(RVA = "0xAB88D4", Offset = "0xAB88D4", VA = "0xAB88D4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600144B")]
		[Address(RVA = "0xAB8858", Offset = "0xAB8858", VA = "0xAB8858")]
		set
		{
		}
	}

	[Token(Token = "0x170001AF")]
	public float LPFValueAtMaxDist
	{
		[Token(Token = "0x600144E")]
		[Address(RVA = "0xAB89BC", Offset = "0xAB89BC", VA = "0xAB89BC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600144D")]
		[Address(RVA = "0xAB8940", Offset = "0xAB8940", VA = "0xAB8940")]
		set
		{
		}
	}

	[Token(Token = "0x170001B0")]
	public float HPFValueAtMaxDist
	{
		[Token(Token = "0x6001450")]
		[Address(RVA = "0xAB8AA4", Offset = "0xAB8AA4", VA = "0xAB8AA4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600144F")]
		[Address(RVA = "0xAB8A28", Offset = "0xAB8A28", VA = "0xAB8A28")]
		set
		{
		}
	}

	[Token(Token = "0x6001428")]
	[Address(RVA = "0xAB7848", Offset = "0xAB7848", VA = "0xAB7848")]
	internal AkPositioningInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001429")]
	[Address(RVA = "0xAB7888", Offset = "0xAB7888", VA = "0xAB7888")]
	internal static IntPtr getCPtr(AkPositioningInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600142A")]
	[Address(RVA = "0xAB78D8", Offset = "0xAB78D8", VA = "0xAB78D8", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600142B")]
	[Address(RVA = "0xAB790C", Offset = "0xAB790C", VA = "0xAB790C", Slot = "1")]
	~AkPositioningInfo()
	{
	}

	[Token(Token = "0x600142C")]
	[Address(RVA = "0xAB7980", Offset = "0xAB7980", VA = "0xAB7980", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001451")]
	[Address(RVA = "0xAB8B10", Offset = "0xAB8B10", VA = "0xAB8B10")]
	public AkPositioningInfo()
	{
	}
}
[Token(Token = "0x2000197")]
public enum AkPreparationType
{
	[Token(Token = "0x4000BCF")]
	Preparation_Load,
	[Token(Token = "0x4000BD0")]
	Preparation_Unload,
	[Token(Token = "0x4000BD1")]
	Preparation_LoadAndDecode
}
[Token(Token = "0x2000198")]
public enum AkQueryRTPCValue
{
	[Token(Token = "0x4000BD3")]
	RTPCValue_Default,
	[Token(Token = "0x4000BD4")]
	RTPCValue_Global,
	[Token(Token = "0x4000BD5")]
	RTPCValue_GameObject,
	[Token(Token = "0x4000BD6")]
	RTPCValue_PlayingID,
	[Token(Token = "0x4000BD7")]
	RTPCValue_Unavailable
}
[Token(Token = "0x2000199")]
public class AkRamp : IDisposable
{
	[Token(Token = "0x4000BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001B1")]
	public float fPrev
	{
		[Token(Token = "0x600145A")]
		[Address(RVA = "0xAB9AD0", Offset = "0xAB9AD0", VA = "0xAB9AD0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001459")]
		[Address(RVA = "0xAB9A54", Offset = "0xAB9A54", VA = "0xAB9A54")]
		set
		{
		}
	}

	[Token(Token = "0x170001B2")]
	public float fNext
	{
		[Token(Token = "0x600145C")]
		[Address(RVA = "0xAB9BB8", Offset = "0xAB9BB8", VA = "0xAB9BB8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600145B")]
		[Address(RVA = "0xAB9B3C", Offset = "0xAB9B3C", VA = "0xAB9B3C")]
		set
		{
		}
	}

	[Token(Token = "0x6001452")]
	[Address(RVA = "0xAB96BC", Offset = "0xAB96BC", VA = "0xAB96BC")]
	internal AkRamp(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001453")]
	[Address(RVA = "0xAB96FC", Offset = "0xAB96FC", VA = "0xAB96FC")]
	internal static IntPtr getCPtr(AkRamp obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001454")]
	[Address(RVA = "0xAB974C", Offset = "0xAB974C", VA = "0xAB974C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001455")]
	[Address(RVA = "0xAB9780", Offset = "0xAB9780", VA = "0xAB9780", Slot = "1")]
	~AkRamp()
	{
	}

	[Token(Token = "0x6001456")]
	[Address(RVA = "0xAB97F4", Offset = "0xAB97F4", VA = "0xAB97F4", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001457")]
	[Address(RVA = "0xAB9934", Offset = "0xAB9934", VA = "0xAB9934")]
	public AkRamp()
	{
	}

	[Token(Token = "0x6001458")]
	[Address(RVA = "0xAB99B8", Offset = "0xAB99B8", VA = "0xAB99B8")]
	public AkRamp(float in_fPrev, float in_fNext)
	{
	}
}
[Token(Token = "0x200019A")]
public class AkReflectionPathInfo : IDisposable
{
	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001B3")]
	public AkVector imageSource
	{
		[Token(Token = "0x6001463")]
		[Address(RVA = "0xAB9F2C", Offset = "0xAB9F2C", VA = "0xAB9F2C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001462")]
		[Address(RVA = "0xAB9E9C", Offset = "0xAB9E9C", VA = "0xAB9E9C")]
		set
		{
		}
	}

	[Token(Token = "0x170001B4")]
	public uint numPathPoints
	{
		[Token(Token = "0x6001465")]
		[Address(RVA = "0xABA058", Offset = "0xABA058", VA = "0xABA058")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001464")]
		[Address(RVA = "0xAB9FDC", Offset = "0xAB9FDC", VA = "0xAB9FDC")]
		set
		{
		}
	}

	[Token(Token = "0x170001B5")]
	public uint numReflections
	{
		[Token(Token = "0x6001467")]
		[Address(RVA = "0xABA140", Offset = "0xABA140", VA = "0xABA140")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6001466")]
		[Address(RVA = "0xABA0C4", Offset = "0xABA0C4", VA = "0xABA0C4")]
		set
		{
		}
	}

	[Token(Token = "0x170001B6")]
	public float level
	{
		[Token(Token = "0x6001469")]
		[Address(RVA = "0xABA228", Offset = "0xABA228", VA = "0xABA228")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001468")]
		[Address(RVA = "0xABA1AC", Offset = "0xABA1AC", VA = "0xABA1AC")]
		set
		{
		}
	}

	[Token(Token = "0x170001B7")]
	public bool isOccluded
	{
		[Token(Token = "0x600146B")]
		[Address(RVA = "0xABA310", Offset = "0xABA310", VA = "0xABA310")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600146A")]
		[Address(RVA = "0xABA294", Offset = "0xABA294", VA = "0xABA294")]
		set
		{
		}
	}

	[Token(Token = "0x600145D")]
	[Address(RVA = "0xAB9C24", Offset = "0xAB9C24", VA = "0xAB9C24")]
	internal AkReflectionPathInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600145E")]
	[Address(RVA = "0xAB9C64", Offset = "0xAB9C64", VA = "0xAB9C64")]
	internal static IntPtr getCPtr(AkReflectionPathInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600145F")]
	[Address(RVA = "0xAB9CB4", Offset = "0xAB9CB4", VA = "0xAB9CB4", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001460")]
	[Address(RVA = "0xAB9CE8", Offset = "0xAB9CE8", VA = "0xAB9CE8", Slot = "1")]
	~AkReflectionPathInfo()
	{
	}

	[Token(Token = "0x6001461")]
	[Address(RVA = "0xAB9D5C", Offset = "0xAB9D5C", VA = "0xAB9D5C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600146C")]
	[Address(RVA = "0xABA37C", Offset = "0xABA37C", VA = "0xABA37C")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x600146D")]
	[Address(RVA = "0xABA3DC", Offset = "0xABA3DC", VA = "0xABA3DC")]
	public AkVector GetPathPoint(uint idx)
	{
		return null;
	}

	[Token(Token = "0x600146E")]
	[Address(RVA = "0xABA49C", Offset = "0xABA49C", VA = "0xABA49C")]
	public AkAcousticSurface GetAcousticSurface(uint idx)
	{
		return null;
	}

	[Token(Token = "0x600146F")]
	[Address(RVA = "0xABA54C", Offset = "0xABA54C", VA = "0xABA54C")]
	public float GetDiffraction(uint idx)
	{
		return default(float);
	}

	[Token(Token = "0x6001470")]
	[Address(RVA = "0xABA5C8", Offset = "0xABA5C8", VA = "0xABA5C8")]
	public void Clone(AkReflectionPathInfo other)
	{
	}

	[Token(Token = "0x6001471")]
	[Address(RVA = "0xABA670", Offset = "0xABA670", VA = "0xABA670")]
	public AkReflectionPathInfo()
	{
	}
}
[Token(Token = "0x200019B")]
public enum AKRESULT
{
	[Token(Token = "0x4000BDD")]
	AK_NotImplemented = 0,
	[Token(Token = "0x4000BDE")]
	AK_Success = 1,
	[Token(Token = "0x4000BDF")]
	AK_Fail = 2,
	[Token(Token = "0x4000BE0")]
	AK_PartialSuccess = 3,
	[Token(Token = "0x4000BE1")]
	AK_NotCompatible = 4,
	[Token(Token = "0x4000BE2")]
	AK_AlreadyConnected = 5,
	[Token(Token = "0x4000BE3")]
	AK_InvalidFile = 7,
	[Token(Token = "0x4000BE4")]
	AK_AudioFileHeaderTooLarge = 8,
	[Token(Token = "0x4000BE5")]
	AK_MaxReached = 9,
	[Token(Token = "0x4000BE6")]
	AK_InvalidID = 14,
	[Token(Token = "0x4000BE7")]
	AK_IDNotFound = 15,
	[Token(Token = "0x4000BE8")]
	AK_InvalidInstanceID = 16,
	[Token(Token = "0x4000BE9")]
	AK_NoMoreData = 17,
	[Token(Token = "0x4000BEA")]
	AK_InvalidStateGroup = 20,
	[Token(Token = "0x4000BEB")]
	AK_ChildAlreadyHasAParent = 21,
	[Token(Token = "0x4000BEC")]
	AK_InvalidLanguage = 22,
	[Token(Token = "0x4000BED")]
	AK_CannotAddItseflAsAChild = 23,
	[Token(Token = "0x4000BEE")]
	AK_InvalidParameter = 31,
	[Token(Token = "0x4000BEF")]
	AK_ElementAlreadyInList = 35,
	[Token(Token = "0x4000BF0")]
	AK_PathNotFound = 36,
	[Token(Token = "0x4000BF1")]
	AK_PathNoVertices = 37,
	[Token(Token = "0x4000BF2")]
	AK_PathNotRunning = 38,
	[Token(Token = "0x4000BF3")]
	AK_PathNotPaused = 39,
	[Token(Token = "0x4000BF4")]
	AK_PathNodeAlreadyInList = 40,
	[Token(Token = "0x4000BF5")]
	AK_PathNodeNotInList = 41,
	[Token(Token = "0x4000BF6")]
	AK_DataNeeded = 43,
	[Token(Token = "0x4000BF7")]
	AK_NoDataNeeded = 44,
	[Token(Token = "0x4000BF8")]
	AK_DataReady = 45,
	[Token(Token = "0x4000BF9")]
	AK_NoDataReady = 46,
	[Token(Token = "0x4000BFA")]
	AK_InsufficientMemory = 52,
	[Token(Token = "0x4000BFB")]
	AK_Cancelled = 53,
	[Token(Token = "0x4000BFC")]
	AK_UnknownBankID = 54,
	[Token(Token = "0x4000BFD")]
	AK_BankReadError = 56,
	[Token(Token = "0x4000BFE")]
	AK_InvalidSwitchType = 57,
	[Token(Token = "0x4000BFF")]
	AK_FormatNotReady = 63,
	[Token(Token = "0x4000C00")]
	AK_WrongBankVersion = 64,
	[Token(Token = "0x4000C01")]
	AK_FileNotFound = 66,
	[Token(Token = "0x4000C02")]
	AK_DeviceNotReady = 67,
	[Token(Token = "0x4000C03")]
	AK_BankAlreadyLoaded = 69,
	[Token(Token = "0x4000C04")]
	AK_RenderedFX = 71,
	[Token(Token = "0x4000C05")]
	AK_ProcessNeeded = 72,
	[Token(Token = "0x4000C06")]
	AK_ProcessDone = 73,
	[Token(Token = "0x4000C07")]
	AK_MemManagerNotInitialized = 74,
	[Token(Token = "0x4000C08")]
	AK_StreamMgrNotInitialized = 75,
	[Token(Token = "0x4000C09")]
	AK_SSEInstructionsNotSupported = 76,
	[Token(Token = "0x4000C0A")]
	AK_Busy = 77,
	[Token(Token = "0x4000C0B")]
	AK_UnsupportedChannelConfig = 78,
	[Token(Token = "0x4000C0C")]
	AK_PluginMediaNotAvailable = 79,
	[Token(Token = "0x4000C0D")]
	AK_MustBeVirtualized = 80,
	[Token(Token = "0x4000C0E")]
	AK_CommandTooLarge = 81,
	[Token(Token = "0x4000C0F")]
	AK_RejectedByFilter = 82,
	[Token(Token = "0x4000C10")]
	AK_InvalidCustomPlatformName = 83,
	[Token(Token = "0x4000C11")]
	AK_DLLCannotLoad = 84,
	[Token(Token = "0x4000C12")]
	AK_DLLPathNotFound = 85,
	[Token(Token = "0x4000C13")]
	AK_NoJavaVM = 86,
	[Token(Token = "0x4000C14")]
	AK_OpenSLError = 87,
	[Token(Token = "0x4000C15")]
	AK_PluginNotRegistered = 88,
	[Token(Token = "0x4000C16")]
	AK_DataAlignmentError = 89,
	[Token(Token = "0x4000C17")]
	AK_DeviceNotCompatible = 90,
	[Token(Token = "0x4000C18")]
	AK_DuplicateUniqueID = 91,
	[Token(Token = "0x4000C19")]
	AK_InitBankNotLoaded = 92,
	[Token(Token = "0x4000C1A")]
	AK_DeviceNotFound = 93
}
[Token(Token = "0x200019C")]
public class AkRoomParams : IDisposable
{
	[Token(Token = "0x4000C1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001B8")]
	public AkVector Up
	{
		[Token(Token = "0x6001479")]
		[Address(RVA = "0xABAD54", Offset = "0xABAD54", VA = "0xABAD54")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001478")]
		[Address(RVA = "0xABBFD8", Offset = "0xABBFD8", VA = "0xABBFD8")]
		set
		{
		}
	}

	[Token(Token = "0x170001B9")]
	public AkVector Front
	{
		[Token(Token = "0x600147B")]
		[Address(RVA = "0xABAE04", Offset = "0xABAE04", VA = "0xABAE04")]
		get
		{
			return null;
		}
		[Token(Token = "0x600147A")]
		[Address(RVA = "0xABC068", Offset = "0xABC068", VA = "0xABC068")]
		set
		{
		}
	}

	[Token(Token = "0x170001BA")]
	public uint ReverbAuxBus
	{
		[Token(Token = "0x600147D")]
		[Address(RVA = "0xABC0F8", Offset = "0xABC0F8", VA = "0xABC0F8")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600147C")]
		[Address(RVA = "0xABAEB4", Offset = "0xABAEB4", VA = "0xABAEB4")]
		set
		{
		}
	}

	[Token(Token = "0x170001BB")]
	public float ReverbLevel
	{
		[Token(Token = "0x600147F")]
		[Address(RVA = "0xABC164", Offset = "0xABC164", VA = "0xABC164")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600147E")]
		[Address(RVA = "0xABAF30", Offset = "0xABAF30", VA = "0xABAF30")]
		set
		{
		}
	}

	[Token(Token = "0x170001BC")]
	public float WallOcclusion
	{
		[Token(Token = "0x6001481")]
		[Address(RVA = "0xABC1D0", Offset = "0xABC1D0", VA = "0xABC1D0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001480")]
		[Address(RVA = "0xABAFAC", Offset = "0xABAFAC", VA = "0xABAFAC")]
		set
		{
		}
	}

	[Token(Token = "0x170001BD")]
	public float RoomGameObj_AuxSendLevelToSelf
	{
		[Token(Token = "0x6001483")]
		[Address(RVA = "0xABC23C", Offset = "0xABC23C", VA = "0xABC23C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001482")]
		[Address(RVA = "0xABB028", Offset = "0xABB028", VA = "0xABB028")]
		set
		{
		}
	}

	[Token(Token = "0x170001BE")]
	public bool RoomGameObj_KeepRegistered
	{
		[Token(Token = "0x6001485")]
		[Address(RVA = "0xABC2A8", Offset = "0xABC2A8", VA = "0xABC2A8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001484")]
		[Address(RVA = "0xABB0A4", Offset = "0xABB0A4", VA = "0xABB0A4")]
		set
		{
		}
	}

	[Token(Token = "0x6001472")]
	[Address(RVA = "0xABBD60", Offset = "0xABBD60", VA = "0xABBD60")]
	internal AkRoomParams(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001473")]
	[Address(RVA = "0xABBDA0", Offset = "0xABBDA0", VA = "0xABBDA0")]
	internal static IntPtr getCPtr(AkRoomParams obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001474")]
	[Address(RVA = "0xABBDF0", Offset = "0xABBDF0", VA = "0xABBDF0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001475")]
	[Address(RVA = "0xABBE24", Offset = "0xABBE24", VA = "0xABBE24", Slot = "1")]
	~AkRoomParams()
	{
	}

	[Token(Token = "0x6001476")]
	[Address(RVA = "0xABBE98", Offset = "0xABBE98", VA = "0xABBE98", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001477")]
	[Address(RVA = "0xABACD0", Offset = "0xABACD0", VA = "0xABACD0")]
	public AkRoomParams()
	{
	}
}
[Token(Token = "0x200019D")]
public class AkSegmentInfo : IDisposable
{
	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001BF")]
	public int iCurrentPosition
	{
		[Token(Token = "0x600148C")]
		[Address(RVA = "0xABE010", Offset = "0xABE010", VA = "0xABE010")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600148B")]
		[Address(RVA = "0xABDF94", Offset = "0xABDF94", VA = "0xABDF94")]
		set
		{
		}
	}

	[Token(Token = "0x170001C0")]
	public int iPreEntryDuration
	{
		[Token(Token = "0x600148E")]
		[Address(RVA = "0xABE0F8", Offset = "0xABE0F8", VA = "0xABE0F8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600148D")]
		[Address(RVA = "0xABE07C", Offset = "0xABE07C", VA = "0xABE07C")]
		set
		{
		}
	}

	[Token(Token = "0x170001C1")]
	public int iActiveDuration
	{
		[Token(Token = "0x6001490")]
		[Address(RVA = "0xABE1E0", Offset = "0xABE1E0", VA = "0xABE1E0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600148F")]
		[Address(RVA = "0xABE164", Offset = "0xABE164", VA = "0xABE164")]
		set
		{
		}
	}

	[Token(Token = "0x170001C2")]
	public int iPostExitDuration
	{
		[Token(Token = "0x6001492")]
		[Address(RVA = "0xABE2C8", Offset = "0xABE2C8", VA = "0xABE2C8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001491")]
		[Address(RVA = "0xABE24C", Offset = "0xABE24C", VA = "0xABE24C")]
		set
		{
		}
	}

	[Token(Token = "0x170001C3")]
	public int iRemainingLookAheadTime
	{
		[Token(Token = "0x6001494")]
		[Address(RVA = "0xABE3B0", Offset = "0xABE3B0", VA = "0xABE3B0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001493")]
		[Address(RVA = "0xABE334", Offset = "0xABE334", VA = "0xABE334")]
		set
		{
		}
	}

	[Token(Token = "0x170001C4")]
	public float fBeatDuration
	{
		[Token(Token = "0x6001496")]
		[Address(RVA = "0xABE498", Offset = "0xABE498", VA = "0xABE498")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001495")]
		[Address(RVA = "0xABE41C", Offset = "0xABE41C", VA = "0xABE41C")]
		set
		{
		}
	}

	[Token(Token = "0x170001C5")]
	public float fBarDuration
	{
		[Token(Token = "0x6001498")]
		[Address(RVA = "0xABE580", Offset = "0xABE580", VA = "0xABE580")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001497")]
		[Address(RVA = "0xABE504", Offset = "0xABE504", VA = "0xABE504")]
		set
		{
		}
	}

	[Token(Token = "0x170001C6")]
	public float fGridDuration
	{
		[Token(Token = "0x600149A")]
		[Address(RVA = "0xABE668", Offset = "0xABE668", VA = "0xABE668")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001499")]
		[Address(RVA = "0xABE5EC", Offset = "0xABE5EC", VA = "0xABE5EC")]
		set
		{
		}
	}

	[Token(Token = "0x170001C7")]
	public float fGridOffset
	{
		[Token(Token = "0x600149C")]
		[Address(RVA = "0xABE750", Offset = "0xABE750", VA = "0xABE750")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600149B")]
		[Address(RVA = "0xABE6D4", Offset = "0xABE6D4", VA = "0xABE6D4")]
		set
		{
		}
	}

	[Token(Token = "0x6001486")]
	[Address(RVA = "0xABDD1C", Offset = "0xABDD1C", VA = "0xABDD1C")]
	internal AkSegmentInfo(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x6001487")]
	[Address(RVA = "0xABDD5C", Offset = "0xABDD5C", VA = "0xABDD5C")]
	internal static IntPtr getCPtr(AkSegmentInfo obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6001488")]
	[Address(RVA = "0xABDDAC", Offset = "0xABDDAC", VA = "0xABDDAC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x6001489")]
	[Address(RVA = "0xABDDE0", Offset = "0xABDDE0", VA = "0xABDDE0", Slot = "1")]
	~AkSegmentInfo()
	{
	}

	[Token(Token = "0x600148A")]
	[Address(RVA = "0xABDE54", Offset = "0xABDE54", VA = "0xABDE54", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600149D")]
	[Address(RVA = "0xABE7BC", Offset = "0xABE7BC", VA = "0xABE7BC")]
	public AkSegmentInfo()
	{
	}
}
[Token(Token = "0x200019E")]
public class AkSerializedCallbackHeader : IDisposable
{
	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001C8")]
	public IntPtr pPackage
	{
		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xABEAB8", Offset = "0xABEAB8", VA = "0xABEAB8")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x170001C9")]
	public AkSerializedCallbackHeader pNext
	{
		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xABEB24", Offset = "0xABEB24", VA = "0xABEB24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001CA")]
	public AkCallbackType eType
	{
		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xABEBD4", Offset = "0xABEBD4", VA = "0xABEBD4")]
		get
		{
			return default(AkCallbackType);
		}
	}

	[Token(Token = "0x600149E")]
	[Address(RVA = "0xABE840", Offset = "0xABE840", VA = "0xABE840")]
	internal AkSerializedCallbackHeader(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600149F")]
	[Address(RVA = "0xABE880", Offset = "0xABE880", VA = "0xABE880")]
	internal static IntPtr getCPtr(AkSerializedCallbackHeader obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60014A0")]
	[Address(RVA = "0xABE8D0", Offset = "0xABE8D0", VA = "0xABE8D0", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60014A1")]
	[Address(RVA = "0xABE904", Offset = "0xABE904", VA = "0xABE904", Slot = "1")]
	~AkSerializedCallbackHeader()
	{
	}

	[Token(Token = "0x60014A2")]
	[Address(RVA = "0xABE978", Offset = "0xABE978", VA = "0xABE978", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60014A6")]
	[Address(RVA = "0xABEC40", Offset = "0xABEC40", VA = "0xABEC40")]
	public IntPtr GetData()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60014A7")]
	[Address(RVA = "0xABECAC", Offset = "0xABECAC", VA = "0xABECAC")]
	public AkSerializedCallbackHeader()
	{
	}
}
[Token(Token = "0x200019F")]
public enum AkSourceChannelOrdering
{
	[Token(Token = "0x4000C22")]
	SourceChannelOrdering_Standard,
	[Token(Token = "0x4000C23")]
	SourceChannelOrdering_Film,
	[Token(Token = "0x4000C24")]
	SourceChannelOrdering_FuMa
}
[Token(Token = "0x20001A0")]
public class AkSourceSettings : IDisposable
{
	[Token(Token = "0x4000C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001CB")]
	public uint sourceID
	{
		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xE03F64", Offset = "0xE03F64", VA = "0xE03F64")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xE03EE8", Offset = "0xE03EE8", VA = "0xE03EE8")]
		set
		{
		}
	}

	[Token(Token = "0x170001CC")]
	public IntPtr pMediaMemory
	{
		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xE0404C", Offset = "0xE0404C", VA = "0xE0404C")]
		get
		{
			return default(IntPtr);
		}
		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xE03FD0", Offset = "0xE03FD0", VA = "0xE03FD0")]
		set
		{
		}
	}

	[Token(Token = "0x170001CD")]
	public uint uMediaSize
	{
		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xE04134", Offset = "0xE04134", VA = "0xE04134")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xE040B8", Offset = "0xE040B8", VA = "0xE040B8")]
		set
		{
		}
	}

	[Token(Token = "0x60014A8")]
	[Address(RVA = "0xE03C70", Offset = "0xE03C70", VA = "0xE03C70")]
	internal AkSourceSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60014A9")]
	[Address(RVA = "0xE03CB0", Offset = "0xE03CB0", VA = "0xE03CB0")]
	internal static IntPtr getCPtr(AkSourceSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60014AA")]
	[Address(RVA = "0xE03D00", Offset = "0xE03D00", VA = "0xE03D00", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60014AB")]
	[Address(RVA = "0xE03D34", Offset = "0xE03D34", VA = "0xE03D34", Slot = "1")]
	~AkSourceSettings()
	{
	}

	[Token(Token = "0x60014AC")]
	[Address(RVA = "0xE03DA8", Offset = "0xE03DA8", VA = "0xE03DA8", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60014B3")]
	[Address(RVA = "0xE041A0", Offset = "0xE041A0", VA = "0xE041A0")]
	public void Clear()
	{
	}

	[Token(Token = "0x60014B4")]
	[Address(RVA = "0xE0420C", Offset = "0xE0420C", VA = "0xE0420C")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x60014B5")]
	[Address(RVA = "0xE0426C", Offset = "0xE0426C", VA = "0xE0426C")]
	public void Clone(AkSourceSettings other)
	{
	}

	[Token(Token = "0x60014B6")]
	[Address(RVA = "0xE04314", Offset = "0xE04314", VA = "0xE04314")]
	public AkSourceSettings()
	{
	}
}
[Token(Token = "0x20001A1")]
public class AkSpatialAudioInitSettings : IDisposable
{
	[Token(Token = "0x4000C27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001CE")]
	public int uPoolID
	{
		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xE04E60", Offset = "0xE04E60", VA = "0xE04E60")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xE04DE4", Offset = "0xE04DE4", VA = "0xE04DE4")]
		set
		{
		}
	}

	[Token(Token = "0x170001CF")]
	public uint uPoolSize
	{
		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xE04F48", Offset = "0xE04F48", VA = "0xE04F48")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xE04ECC", Offset = "0xE04ECC", VA = "0xE04ECC")]
		set
		{
		}
	}

	[Token(Token = "0x170001D0")]
	public uint uMaxSoundPropagationDepth
	{
		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xE05030", Offset = "0xE05030", VA = "0xE05030")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xE04FB4", Offset = "0xE04FB4", VA = "0xE04FB4")]
		set
		{
		}
	}

	[Token(Token = "0x170001D1")]
	public uint uDiffractionFlags
	{
		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xE05118", Offset = "0xE05118", VA = "0xE05118")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xE0509C", Offset = "0xE0509C", VA = "0xE0509C")]
		set
		{
		}
	}

	[Token(Token = "0x170001D2")]
	public float fDiffractionShadowAttenFactor
	{
		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xE05200", Offset = "0xE05200", VA = "0xE05200")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xE05184", Offset = "0xE05184", VA = "0xE05184")]
		set
		{
		}
	}

	[Token(Token = "0x170001D3")]
	public float fDiffractionShadowDegrees
	{
		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xE052E8", Offset = "0xE052E8", VA = "0xE052E8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xE0526C", Offset = "0xE0526C", VA = "0xE0526C")]
		set
		{
		}
	}

	[Token(Token = "0x170001D4")]
	public float fMovementThreshold
	{
		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xE053D0", Offset = "0xE053D0", VA = "0xE053D0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xE05354", Offset = "0xE05354", VA = "0xE05354")]
		set
		{
		}
	}

	[Token(Token = "0x60014B7")]
	[Address(RVA = "0xE04AE8", Offset = "0xE04AE8", VA = "0xE04AE8")]
	internal AkSpatialAudioInitSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60014B8")]
	[Address(RVA = "0xE04B28", Offset = "0xE04B28", VA = "0xE04B28")]
	internal static IntPtr getCPtr(AkSpatialAudioInitSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60014B9")]
	[Address(RVA = "0xE04B78", Offset = "0xE04B78", VA = "0xE04B78", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60014BA")]
	[Address(RVA = "0xE04BAC", Offset = "0xE04BAC", VA = "0xE04BAC", Slot = "1")]
	~AkSpatialAudioInitSettings()
	{
	}

	[Token(Token = "0x60014BB")]
	[Address(RVA = "0xE04C20", Offset = "0xE04C20", VA = "0xE04C20", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60014BC")]
	[Address(RVA = "0xE04D60", Offset = "0xE04D60", VA = "0xE04D60")]
	public AkSpatialAudioInitSettings()
	{
	}
}
[Token(Token = "0x20001A2")]
public enum AkSpeakerPanningType
{
	[Token(Token = "0x4000C2A")]
	AK_DirectSpeakerAssignment,
	[Token(Token = "0x4000C2B")]
	AK_BalanceFadeHeight
}
[Token(Token = "0x20001A3")]
public class AkStreamMgrSettings : IDisposable
{
	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001D5")]
	public uint uMemorySize
	{
		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xE0615C", Offset = "0xE0615C", VA = "0xE0615C")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xE060E0", Offset = "0xE060E0", VA = "0xE060E0")]
		set
		{
		}
	}

	[Token(Token = "0x60014CB")]
	[Address(RVA = "0xE05E68", Offset = "0xE05E68", VA = "0xE05E68")]
	internal AkStreamMgrSettings(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60014CC")]
	[Address(RVA = "0xE05EA8", Offset = "0xE05EA8", VA = "0xE05EA8")]
	internal static IntPtr getCPtr(AkStreamMgrSettings obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60014CD")]
	[Address(RVA = "0xE05EF8", Offset = "0xE05EF8", VA = "0xE05EF8", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60014CE")]
	[Address(RVA = "0xE05F2C", Offset = "0xE05F2C", VA = "0xE05F2C", Slot = "1")]
	~AkStreamMgrSettings()
	{
	}

	[Token(Token = "0x60014CF")]
	[Address(RVA = "0xE05FA0", Offset = "0xE05FA0", VA = "0xE05FA0", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60014D2")]
	[Address(RVA = "0xE061C8", Offset = "0xE061C8", VA = "0xE061C8")]
	public AkStreamMgrSettings()
	{
	}
}
[Token(Token = "0x20001A4")]
public class AkTaskContext : IDisposable
{
	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001D6")]
	public uint uIdxThread
	{
		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xE07B78", Offset = "0xE07B78", VA = "0xE07B78")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xE07AFC", Offset = "0xE07AFC", VA = "0xE07AFC")]
		set
		{
		}
	}

	[Token(Token = "0x60014D3")]
	[Address(RVA = "0xE07884", Offset = "0xE07884", VA = "0xE07884")]
	internal AkTaskContext(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60014D4")]
	[Address(RVA = "0xE078C4", Offset = "0xE078C4", VA = "0xE078C4")]
	internal static IntPtr getCPtr(AkTaskContext obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60014D5")]
	[Address(RVA = "0xE07914", Offset = "0xE07914", VA = "0xE07914", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60014D6")]
	[Address(RVA = "0xE07948", Offset = "0xE07948", VA = "0xE07948", Slot = "1")]
	~AkTaskContext()
	{
	}

	[Token(Token = "0x60014D7")]
	[Address(RVA = "0xE079BC", Offset = "0xE079BC", VA = "0xE079BC", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60014DA")]
	[Address(RVA = "0xE07BE4", Offset = "0xE07BE4", VA = "0xE07BE4")]
	public AkTaskContext()
	{
	}
}
[Token(Token = "0x20001A5")]
public class AkTransform : IDisposable
{
	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x60014DB")]
	[Address(RVA = "0xE0830C", Offset = "0xE0830C", VA = "0xE0830C")]
	internal AkTransform(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60014DC")]
	[Address(RVA = "0xE0834C", Offset = "0xE0834C", VA = "0xE0834C")]
	internal static IntPtr getCPtr(AkTransform obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60014DD")]
	[Address(RVA = "0xE0839C", Offset = "0xE0839C", VA = "0xE0839C", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60014DE")]
	[Address(RVA = "0xE083D0", Offset = "0xE083D0", VA = "0xE083D0", Slot = "1")]
	~AkTransform()
	{
	}

	[Token(Token = "0x60014DF")]
	[Address(RVA = "0xE08444", Offset = "0xE08444", VA = "0xE08444", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60014E0")]
	[Address(RVA = "0xE08584", Offset = "0xE08584", VA = "0xE08584")]
	public AkVector Position()
	{
		return null;
	}

	[Token(Token = "0x60014E1")]
	[Address(RVA = "0xE08664", Offset = "0xE08664", VA = "0xE08664")]
	public AkVector OrientationFront()
	{
		return null;
	}

	[Token(Token = "0x60014E2")]
	[Address(RVA = "0xE08704", Offset = "0xE08704", VA = "0xE08704")]
	public AkVector OrientationTop()
	{
		return null;
	}

	[Token(Token = "0x60014E3")]
	[Address(RVA = "0xE087A4", Offset = "0xE087A4", VA = "0xE087A4")]
	public void Set(AkVector in_position, AkVector in_orientationFront, AkVector in_orientationTop)
	{
	}

	[Token(Token = "0x60014E4")]
	[Address(RVA = "0xE088C4", Offset = "0xE088C4", VA = "0xE088C4")]
	public void Set(float in_positionX, float in_positionY, float in_positionZ, float in_orientFrontX, float in_orientFrontY, float in_orientFrontZ, float in_orientTopX, float in_orientTopY, float in_orientTopZ)
	{
	}

	[Token(Token = "0x60014E5")]
	[Address(RVA = "0xE089F0", Offset = "0xE089F0", VA = "0xE089F0")]
	public void SetPosition(AkVector in_position)
	{
	}

	[Token(Token = "0x60014E6")]
	[Address(RVA = "0xE08A98", Offset = "0xE08A98", VA = "0xE08A98")]
	public void SetPosition(float in_x, float in_y, float in_z)
	{
	}

	[Token(Token = "0x60014E7")]
	[Address(RVA = "0xE08B2C", Offset = "0xE08B2C", VA = "0xE08B2C")]
	public void SetOrientation(AkVector in_orientationFront, AkVector in_orientationTop)
	{
	}

	[Token(Token = "0x60014E8")]
	[Address(RVA = "0xE08BE4", Offset = "0xE08BE4", VA = "0xE08BE4")]
	public void SetOrientation(float in_orientFrontX, float in_orientFrontY, float in_orientFrontZ, float in_orientTopX, float in_orientTopY, float in_orientTopZ)
	{
	}

	[Token(Token = "0x60014E9")]
	[Address(RVA = "0xE08C98", Offset = "0xE08C98", VA = "0xE08C98")]
	public AkTransform()
	{
	}
}
[Token(Token = "0x20001A6")]
public class AkTriangle : IDisposable
{
	[Token(Token = "0x4000C32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001D7")]
	public ushort point0
	{
		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xE090CC", Offset = "0xE090CC", VA = "0xE090CC")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xE07164", Offset = "0xE07164", VA = "0xE07164")]
		set
		{
		}
	}

	[Token(Token = "0x170001D8")]
	public ushort point1
	{
		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xE09138", Offset = "0xE09138", VA = "0xE09138")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xE071E0", Offset = "0xE071E0", VA = "0xE071E0")]
		set
		{
		}
	}

	[Token(Token = "0x170001D9")]
	public ushort point2
	{
		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xE091A4", Offset = "0xE091A4", VA = "0xE091A4")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xE0725C", Offset = "0xE0725C", VA = "0xE0725C")]
		set
		{
		}
	}

	[Token(Token = "0x170001DA")]
	public ushort surface
	{
		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xE09210", Offset = "0xE09210", VA = "0xE09210")]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xE072D8", Offset = "0xE072D8", VA = "0xE072D8")]
		set
		{
		}
	}

	[Token(Token = "0x60014EA")]
	[Address(RVA = "0xE08D1C", Offset = "0xE08D1C", VA = "0xE08D1C")]
	internal AkTriangle(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60014EB")]
	[Address(RVA = "0xE08D5C", Offset = "0xE08D5C", VA = "0xE08D5C")]
	internal static IntPtr getCPtr(AkTriangle obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60014EC")]
	[Address(RVA = "0xE08DAC", Offset = "0xE08DAC", VA = "0xE08DAC", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60014ED")]
	[Address(RVA = "0xE08DE0", Offset = "0xE08DE0", VA = "0xE08DE0", Slot = "1")]
	~AkTriangle()
	{
	}

	[Token(Token = "0x60014EE")]
	[Address(RVA = "0xE08E54", Offset = "0xE08E54", VA = "0xE08E54", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x60014EF")]
	[Address(RVA = "0xE08F94", Offset = "0xE08F94", VA = "0xE08F94")]
	public AkTriangle()
	{
	}

	[Token(Token = "0x60014F0")]
	[Address(RVA = "0xE09018", Offset = "0xE09018", VA = "0xE09018")]
	public AkTriangle(ushort in_pt0, ushort in_pt1, ushort in_pt2, ushort in_surfaceInfo)
	{
	}

	[Token(Token = "0x60014F9")]
	[Address(RVA = "0xE0927C", Offset = "0xE0927C", VA = "0xE0927C")]
	public void Clear()
	{
	}

	[Token(Token = "0x60014FA")]
	[Address(RVA = "0xE092E8", Offset = "0xE092E8", VA = "0xE092E8")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x60014FB")]
	[Address(RVA = "0xE09348", Offset = "0xE09348", VA = "0xE09348")]
	public void Clone(AkTriangle other)
	{
	}
}
[Token(Token = "0x20001A7")]
public class AkVector : IDisposable
{
	[Token(Token = "0x4000C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001DB")]
	public float X
	{
		[Token(Token = "0x6001503")]
		[Address(RVA = "0xE0B574", Offset = "0xE0B574", VA = "0xE0B574")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001502")]
		[Address(RVA = "0xE0B4F8", Offset = "0xE0B4F8", VA = "0xE0B4F8")]
		set
		{
		}
	}

	[Token(Token = "0x170001DC")]
	public float Y
	{
		[Token(Token = "0x6001505")]
		[Address(RVA = "0xE0B65C", Offset = "0xE0B65C", VA = "0xE0B65C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001504")]
		[Address(RVA = "0xE0B5E0", Offset = "0xE0B5E0", VA = "0xE0B5E0")]
		set
		{
		}
	}

	[Token(Token = "0x170001DD")]
	public float Z
	{
		[Token(Token = "0x6001507")]
		[Address(RVA = "0xE0B744", Offset = "0xE0B744", VA = "0xE0B744")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001506")]
		[Address(RVA = "0xE0B6C8", Offset = "0xE0B6C8", VA = "0xE0B6C8")]
		set
		{
		}
	}

	[Token(Token = "0x60014FC")]
	[Address(RVA = "0xE08624", Offset = "0xE08624", VA = "0xE08624")]
	internal AkVector(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x60014FD")]
	[Address(RVA = "0xE08874", Offset = "0xE08874", VA = "0xE08874")]
	internal static IntPtr getCPtr(AkVector obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60014FE")]
	[Address(RVA = "0xE0B2A4", Offset = "0xE0B2A4", VA = "0xE0B2A4", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x60014FF")]
	[Address(RVA = "0xE0B2D8", Offset = "0xE0B2D8", VA = "0xE0B2D8", Slot = "1")]
	~AkVector()
	{
	}

	[Token(Token = "0x6001500")]
	[Address(RVA = "0xE0B34C", Offset = "0xE0B34C", VA = "0xE0B34C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x6001501")]
	[Address(RVA = "0xE0B48C", Offset = "0xE0B48C", VA = "0xE0B48C")]
	public void Zero()
	{
	}

	[Token(Token = "0x6001508")]
	[Address(RVA = "0xE0B7B0", Offset = "0xE0B7B0", VA = "0xE0B7B0")]
	public AkVector()
	{
	}
}
[Token(Token = "0x20001A8")]
public class AkVertex : IDisposable
{
	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr swigCPtr;

	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool swigCMemOwn;

	[Token(Token = "0x170001DE")]
	public float X
	{
		[Token(Token = "0x6001511")]
		[Address(RVA = "0xE0BBDC", Offset = "0xE0BBDC", VA = "0xE0BBDC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001510")]
		[Address(RVA = "0xE06F90", Offset = "0xE06F90", VA = "0xE06F90")]
		set
		{
		}
	}

	[Token(Token = "0x170001DF")]
	public float Y
	{
		[Token(Token = "0x6001513")]
		[Address(RVA = "0xE0BC48", Offset = "0xE0BC48", VA = "0xE0BC48")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001512")]
		[Address(RVA = "0xE0700C", Offset = "0xE0700C", VA = "0xE0700C")]
		set
		{
		}
	}

	[Token(Token = "0x170001E0")]
	public float Z
	{
		[Token(Token = "0x6001515")]
		[Address(RVA = "0xE0BCB4", Offset = "0xE0BCB4", VA = "0xE0BCB4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001514")]
		[Address(RVA = "0xE07088", Offset = "0xE07088", VA = "0xE07088")]
		set
		{
		}
	}

	[Token(Token = "0x6001509")]
	[Address(RVA = "0xE0B834", Offset = "0xE0B834", VA = "0xE0B834")]
	internal AkVertex(IntPtr cPtr, bool cMemoryOwn)
	{
	}

	[Token(Token = "0x600150A")]
	[Address(RVA = "0xE0B874", Offset = "0xE0B874", VA = "0xE0B874")]
	internal static IntPtr getCPtr(AkVertex obj)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600150B")]
	[Address(RVA = "0xE0B8C4", Offset = "0xE0B8C4", VA = "0xE0B8C4", Slot = "5")]
	internal virtual void setCPtr(IntPtr cPtr)
	{
	}

	[Token(Token = "0x600150C")]
	[Address(RVA = "0xE0B8F8", Offset = "0xE0B8F8", VA = "0xE0B8F8", Slot = "1")]
	~AkVertex()
	{
	}

	[Token(Token = "0x600150D")]
	[Address(RVA = "0xE0B96C", Offset = "0xE0B96C", VA = "0xE0B96C", Slot = "6")]
	public virtual void Dispose()
	{
	}

	[Token(Token = "0x600150E")]
	[Address(RVA = "0xE0BAAC", Offset = "0xE0BAAC", VA = "0xE0BAAC")]
	public AkVertex()
	{
	}

	[Token(Token = "0x600150F")]
	[Address(RVA = "0xE0BB30", Offset = "0xE0BB30", VA = "0xE0BB30")]
	public AkVertex(float in_X, float in_Y, float in_Z)
	{
	}

	[Token(Token = "0x6001516")]
	[Address(RVA = "0xE0BD20", Offset = "0xE0BD20", VA = "0xE0BD20")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001517")]
	[Address(RVA = "0xE0BD8C", Offset = "0xE0BD8C", VA = "0xE0BD8C")]
	public static int GetSizeOf()
	{
		return default(int);
	}

	[Token(Token = "0x6001518")]
	[Address(RVA = "0xE0BDEC", Offset = "0xE0BDEC", VA = "0xE0BDEC")]
	public void Clone(AkVertex other)
	{
	}
}
[Token(Token = "0x20001A9")]
public class AkAndroidSettings : AkWwiseInitializationSettings.PlatformSettings
{
	[Serializable]
	[Token(Token = "0x200042E")]
	public class PlatformAdvancedSettings : AkCommonAdvancedSettings
	{
		[Token(Token = "0x20004F0")]
		public enum AudioAPI
		{
			[Token(Token = "0x400241C")]
			None = 0,
			[Token(Token = "0x400241D")]
			AAudio = 1,
			[Token(Token = "0x400241E")]
			OpenSL_ES = 2,
			[Token(Token = "0x400241F")]
			Default = -1
		}

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E0460", Offset = "0x7E0460")]
		[AttributeAttribute(Name = "AkEnumFlagAttribute", RVA = "0x7E0460", Offset = "0x7E0460")]
		public AudioAPI m_AudioAPI;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E04E8", Offset = "0x7E04E8")]
		public bool m_RoundFrameSizeToHardwareSize;

		[Token(Token = "0x6002499")]
		[Address(RVA = "0xC191A8", Offset = "0xC191A8", VA = "0xC191A8", Slot = "7")]
		public override void CopyTo(AkPlatformInitSettings settings)
		{
		}

		[Token(Token = "0x600249A")]
		[Address(RVA = "0xC191F0", Offset = "0xC191F0", VA = "0xC191F0")]
		public PlatformAdvancedSettings()
		{
		}
	}

	[Token(Token = "0x4000C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public AkCommonUserSettings UserSettings;

	[Token(Token = "0x4000C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public PlatformAdvancedSettings AdvancedSettings;

	[Token(Token = "0x4000C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public AkCommonCommSettings CommsSettings;

	[Token(Token = "0x6001519")]
	[Address(RVA = "0xC18ED8", Offset = "0xC18ED8", VA = "0xC18ED8")]
	public AkAndroidSettings()
	{
	}

	[Token(Token = "0x600151A")]
	[Address(RVA = "0xC19190", Offset = "0xC19190", VA = "0xC19190", Slot = "12")]
	protected override AkCommonUserSettings GetUserSettings()
	{
		return null;
	}

	[Token(Token = "0x600151B")]
	[Address(RVA = "0xC19198", Offset = "0xC19198", VA = "0xC19198", Slot = "13")]
	protected override AkCommonAdvancedSettings GetAdvancedSettings()
	{
		return null;
	}

	[Token(Token = "0x600151C")]
	[Address(RVA = "0xC191A0", Offset = "0xC191A0", VA = "0xC191A0", Slot = "14")]
	protected override AkCommonCommSettings GetCommsSettings()
	{
		return null;
	}
}
[Token(Token = "0x20001AA")]
public static class AkAudioInputManager
{
	[Token(Token = "0x200042F")]
	public delegate void AudioFormatDelegate(uint playingID, AkAudioFormat format);

	[Token(Token = "0x2000430")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7D8BFC", Offset = "0x7D8BFC")]
	public delegate void AudioFormatInteropDelegate(uint playingID, IntPtr format);

	[Token(Token = "0x2000431")]
	public delegate bool AudioSamplesDelegate(uint playingID, uint channelIndex, float[] samples);

	[Token(Token = "0x2000432")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7D8C10", Offset = "0x7D8C10")]
	public delegate bool AudioSamplesInteropDelegate(uint playingID, [In][Out] float[] samples, uint channelIndex, uint frames);

	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool initialized;

	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly Dictionary<uint, AudioSamplesDelegate> audioSamplesDelegates;

	[Token(Token = "0x4000C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly Dictionary<uint, AudioFormatDelegate> audioFormatDelegates;

	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly AkAudioFormat audioFormat;

	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly AudioSamplesInteropDelegate audioSamplesDelegate;

	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly AudioFormatInteropDelegate audioFormatDelegate;

	[Token(Token = "0x600151D")]
	[Address(RVA = "0xC1A138", Offset = "0xC1A138", VA = "0xC1A138")]
	public static uint PostAudioInputEvent(AK.Wwise.Event akEvent, GameObject gameObject, AudioSamplesDelegate sampleDelegate, [Optional] AudioFormatDelegate formatDelegate)
	{
		return default(uint);
	}

	[Token(Token = "0x600151E")]
	[Address(RVA = "0xC1A3E8", Offset = "0xC1A3E8", VA = "0xC1A3E8")]
	public static uint PostAudioInputEvent(uint akEventID, GameObject gameObject, AudioSamplesDelegate sampleDelegate, [Optional] AudioFormatDelegate formatDelegate)
	{
		return default(uint);
	}

	[Token(Token = "0x600151F")]
	[Address(RVA = "0xC1A4E4", Offset = "0xC1A4E4", VA = "0xC1A4E4")]
	public static uint PostAudioInputEvent(string akEventName, GameObject gameObject, AudioSamplesDelegate sampleDelegate, [Optional] AudioFormatDelegate formatDelegate)
	{
		return default(uint);
	}

	[Token(Token = "0x6001520")]
	[Address(RVA = "0xC19F24", Offset = "0xC19F24", VA = "0xC19F24")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7E1CA8", Offset = "0x7E1CA8")]
	private static bool InternalAudioSamplesDelegate(uint playingID, float[] samples, uint channelIndex, uint frames)
	{
		return default(bool);
	}

	[Token(Token = "0x6001521")]
	[Address(RVA = "0xC1A020", Offset = "0xC1A020", VA = "0xC1A020")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7E1D0C", Offset = "0x7E1D0C")]
	private static void InternalAudioFormatDelegate(uint playingID, IntPtr format)
	{
	}

	[Token(Token = "0x6001522")]
	[Address(RVA = "0xC1A220", Offset = "0xC1A220", VA = "0xC1A220")]
	private static void TryInitialize()
	{
	}

	[Token(Token = "0x6001523")]
	[Address(RVA = "0xC1A2F4", Offset = "0xC1A2F4", VA = "0xC1A2F4")]
	private static void AddPlayingID(uint playingID, AudioSamplesDelegate sampleDelegate, AudioFormatDelegate formatDelegate)
	{
	}

	[Token(Token = "0x6001524")]
	[Address(RVA = "0xC1AAC4", Offset = "0xC1AAC4", VA = "0xC1AAC4")]
	private static void EventCallback(object cookie, AkCallbackType type, AkCallbackInfo callbackInfo)
	{
	}
}
[Token(Token = "0x20001AB")]
public static class AkBankManager
{
	[Token(Token = "0x2000433")]
	private class BankHandle
	{
		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly string bankName;

		[Token(Token = "0x4002177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected uint m_BankID;

		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E0520", Offset = "0x7E0520")]
		private int <RefCount>k__BackingField;

		[Token(Token = "0x1700039D")]
		public int RefCount
		{
			[Token(Token = "0x60024AC")]
			[Address(RVA = "0xC1FC9C", Offset = "0xC1FC9C", VA = "0xC1FC9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3AE8", Offset = "0x7E3AE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60024AD")]
			[Address(RVA = "0xC1FCA4", Offset = "0xC1FCA4", VA = "0xC1FCA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3AF8", Offset = "0x7E3AF8")]
			private set
			{
			}
		}

		[Token(Token = "0x60024AB")]
		[Address(RVA = "0xC1ED20", Offset = "0xC1ED20", VA = "0xC1ED20")]
		public BankHandle(string name)
		{
		}

		[Token(Token = "0x60024AE")]
		[Address(RVA = "0xC1FCAC", Offset = "0xC1FCAC", VA = "0xC1FCAC", Slot = "4")]
		public virtual AKRESULT DoLoadBank()
		{
			return default(AKRESULT);
		}

		[Token(Token = "0x60024AF")]
		[Address(RVA = "0xC1EFDC", Offset = "0xC1EFDC", VA = "0xC1EFDC")]
		public void LoadBank()
		{
		}

		[Token(Token = "0x60024B0")]
		[Address(RVA = "0xC1FD24", Offset = "0xC1FD24", VA = "0xC1FD24", Slot = "5")]
		public virtual void UnloadBank()
		{
		}

		[Token(Token = "0x60024B1")]
		[Address(RVA = "0xC1F0D8", Offset = "0xC1F0D8", VA = "0xC1F0D8")]
		public void IncRef()
		{
		}

		[Token(Token = "0x60024B2")]
		[Address(RVA = "0xC1F410", Offset = "0xC1F410", VA = "0xC1F410")]
		public void DecRef()
		{
		}

		[Token(Token = "0x60024B3")]
		[Address(RVA = "0xC1F724", Offset = "0xC1F724", VA = "0xC1F724")]
		protected void LogLoadResult(AKRESULT result)
		{
		}
	}

	[Token(Token = "0x2000434")]
	private class AsyncBankHandle : BankHandle
	{
		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AkCallbackManager.BankCallback bankCallback;

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0xC1F288", Offset = "0xC1F288", VA = "0xC1F288")]
		public AsyncBankHandle(string name, AkCallbackManager.BankCallback callback)
		{
		}

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0xC1F57C", Offset = "0xC1F57C", VA = "0xC1F57C")]
		private static void GlobalBankCallback(uint in_bankID, IntPtr in_pInMemoryBankPtr, AKRESULT in_eLoadResult, uint in_memPoolId, object in_Cookie)
		{
		}

		[Token(Token = "0x60024B6")]
		[Address(RVA = "0xC1FBD8", Offset = "0xC1FBD8", VA = "0xC1FBD8", Slot = "4")]
		public override AKRESULT DoLoadBank()
		{
			return default(AKRESULT);
		}
	}

	[Token(Token = "0x2000435")]
	private class DecodableBankHandle : BankHandle
	{
		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly bool decodeBank;

		[Token(Token = "0x400217B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly string decodedBankPath;

		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly bool saveDecodedBank;

		[Token(Token = "0x60024B7")]
		[Address(RVA = "0xC1ED4C", Offset = "0xC1ED4C", VA = "0xC1ED4C")]
		public DecodableBankHandle(string name, bool save)
		{
		}

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0xC1FE84", Offset = "0xC1FE84", VA = "0xC1FE84", Slot = "4")]
		public override AKRESULT DoLoadBank()
		{
			return default(AKRESULT);
		}

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0xC20018", Offset = "0xC20018", VA = "0xC20018", Slot = "5")]
		public override void UnloadBank()
		{
		}
	}

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Dictionary<string, BankHandle> m_BankHandles;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly List<BankHandle> BanksToUnload;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly Mutex m_Mutex;

	[Token(Token = "0x6001526")]
	[Address(RVA = "0xC1E7FC", Offset = "0xC1E7FC", VA = "0xC1E7FC")]
	internal static void DoUnloadBanks()
	{
	}

	[Token(Token = "0x6001527")]
	[Address(RVA = "0xC1E924", Offset = "0xC1E924", VA = "0xC1E924")]
	internal static void Reset()
	{
	}

	[Token(Token = "0x6001528")]
	[Address(RVA = "0xC1E9C0", Offset = "0xC1E9C0", VA = "0xC1E9C0")]
	public static void LoadInitBank(bool doReset = true)
	{
	}

	[Token(Token = "0x6001529")]
	[Address(RVA = "0xC1EAE4", Offset = "0xC1EAE4", VA = "0xC1EAE4")]
	public static void UnloadInitBank()
	{
	}

	[Token(Token = "0x600152A")]
	[Address(RVA = "0xC1EB54", Offset = "0xC1EB54", VA = "0xC1EB54")]
	public static void LoadBank(string name, bool decodeBank, bool saveDecodedBank)
	{
	}

	[Token(Token = "0x600152B")]
	[Address(RVA = "0xC1F0E8", Offset = "0xC1F0E8", VA = "0xC1F0E8")]
	public static void LoadBankAsync(string name, [Optional] AkCallbackManager.BankCallback callback)
	{
	}

	[Token(Token = "0x600152C")]
	[Address(RVA = "0xC1F2C4", Offset = "0xC1F2C4", VA = "0xC1F2C4")]
	public static void UnloadBank(string name)
	{
	}
}
[Token(Token = "0x20001AC")]
public class AkBasePathGetter
{
	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string DefaultBasePath;

	[Token(Token = "0x600152E")]
	[Address(RVA = "0xC200A8", Offset = "0xC200A8", VA = "0xC200A8")]
	public static string GetPlatformName()
	{
		return null;
	}

	[Token(Token = "0x600152F")]
	[Address(RVA = "0xC20118", Offset = "0xC20118", VA = "0xC20118")]
	public static string GetPlatformBasePath()
	{
		return null;
	}

	[Token(Token = "0x6001530")]
	[Address(RVA = "0xC201D4", Offset = "0xC201D4", VA = "0xC201D4")]
	public static string GetFullSoundBankPath()
	{
		return null;
	}

	[Token(Token = "0x6001531")]
	[Address(RVA = "0xC20354", Offset = "0xC20354", VA = "0xC20354")]
	public static void FixSlashes(ref string path, char separatorChar, char badChar, bool addTrailingSlash)
	{
	}

	[Token(Token = "0x6001532")]
	[Address(RVA = "0xC202A0", Offset = "0xC202A0", VA = "0xC202A0")]
	public static void FixSlashes(ref string path)
	{
	}

	[Token(Token = "0x6001533")]
	[Address(RVA = "0xC1FD9C", Offset = "0xC1FD9C", VA = "0xC1FD9C")]
	public static string GetSoundbankBasePath()
	{
		return null;
	}

	[Token(Token = "0x6001534")]
	[Address(RVA = "0xC204A0", Offset = "0xC204A0", VA = "0xC204A0")]
	public AkBasePathGetter()
	{
	}
}
[Token(Token = "0x20001AD")]
public static class AkCallbackManager
{
	[Token(Token = "0x2000436")]
	public delegate void EventCallback(object in_cookie, AkCallbackType in_type, AkCallbackInfo in_info);

	[Token(Token = "0x2000437")]
	public delegate void MonitoringCallback(AkMonitorErrorCode in_errorCode, AkMonitorErrorLevel in_errorLevel, uint in_playingID, ulong in_gameObjID, string in_msg);

	[Token(Token = "0x2000438")]
	public delegate void BankCallback(uint in_bankID, IntPtr in_InMemoryBankPtr, AKRESULT in_eLoadResult, uint in_memPoolId, object in_Cookie);

	[Token(Token = "0x2000439")]
	public class EventCallbackPackage
	{
		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bNotifyEndOfEvent;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EventCallback m_Callback;

		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object m_Cookie;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_playingID;

		[Token(Token = "0x60024C6")]
		[Address(RVA = "0xC23740", Offset = "0xC23740", VA = "0xC23740")]
		public static EventCallbackPackage Create(EventCallback in_cb, object in_cookie, ref uint io_Flags)
		{
			return null;
		}

		[Token(Token = "0x60024C7")]
		[Address(RVA = "0xC23860", Offset = "0xC23860", VA = "0xC23860", Slot = "1")]
		~EventCallbackPackage()
		{
		}

		[Token(Token = "0x60024C8")]
		[Address(RVA = "0xC23858", Offset = "0xC23858", VA = "0xC23858")]
		public EventCallbackPackage()
		{
		}
	}

	[Token(Token = "0x200043A")]
	public class BankCallbackPackage
	{
		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BankCallback m_Callback;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object m_Cookie;

		[Token(Token = "0x60024C9")]
		[Address(RVA = "0xC235D4", Offset = "0xC235D4", VA = "0xC235D4")]
		public BankCallbackPackage(BankCallback in_cb, object in_cookie)
		{
		}
	}

	[Token(Token = "0x200043B")]
	public delegate AKRESULT BGMCallback(bool in_bOtherAudioPlaying, object in_Cookie);

	[Token(Token = "0x200043C")]
	public class BGMCallbackPackage
	{
		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BGMCallback m_Callback;

		[Token(Token = "0x4002184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object m_Cookie;

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0xC219B0", Offset = "0xC219B0", VA = "0xC219B0")]
		public BGMCallbackPackage()
		{
		}
	}

	[Token(Token = "0x200043D")]
	public class InitializationSettings
	{
		[Token(Token = "0x4002185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int DefaultBufferSize;

		[Token(Token = "0x4002186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static bool DefaultIsLoggingEnabled;

		[Token(Token = "0x4002187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int BufferSize;

		[Token(Token = "0x4002188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool IsLoggingEnabled;

		[Token(Token = "0x60024CF")]
		[Address(RVA = "0xC20648", Offset = "0xC20648", VA = "0xC20648")]
		public InitializationSettings()
		{
		}
	}

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DC7E8", Offset = "0x7DC7E8")]
	private static bool <IsLoggingEnabled>k__BackingField;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly AkEventCallbackInfo AkEventCallbackInfo;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly AkDynamicSequenceItemCallbackInfo AkDynamicSequenceItemCallbackInfo;

	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly AkMIDIEventCallbackInfo AkMIDIEventCallbackInfo;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly AkMarkerCallbackInfo AkMarkerCallbackInfo;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly AkDurationCallbackInfo AkDurationCallbackInfo;

	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly AkMusicSyncCallbackInfo AkMusicSyncCallbackInfo;

	[Token(Token = "0x4000C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static readonly AkMusicPlaylistCallbackInfo AkMusicPlaylistCallbackInfo;

	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static readonly AkAudioSourceChangeCallbackInfo AkAudioSourceChangeCallbackInfo;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly AkMonitoringCallbackInfo AkMonitoringCallbackInfo;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static readonly AkBankCallbackInfo AkBankCallbackInfo;

	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static readonly Dictionary<int, EventCallbackPackage> m_mapEventCallbacks;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly Dictionary<int, BankCallbackPackage> m_mapBankCallbacks;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static EventCallbackPackage m_LastAddedEventPackage;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr m_pNotifMem;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static MonitoringCallback m_MonitoringCB;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static BGMCallbackPackage ms_sourceChangeCallbackPkg;

	[Token(Token = "0x170001E1")]
	private static bool IsLoggingEnabled
	{
		[Token(Token = "0x6001536")]
		[Address(RVA = "0xC20C44", Offset = "0xC20C44", VA = "0xC20C44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1D70", Offset = "0x7E1D70")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001537")]
		[Address(RVA = "0xC20CAC", Offset = "0xC20CAC", VA = "0xC20CAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1D80", Offset = "0x7E1D80")]
		set
		{
		}
	}

	[Token(Token = "0x6001538")]
	[Address(RVA = "0xC20D1C", Offset = "0xC20D1C", VA = "0xC20D1C")]
	public static void RemoveEventCallback(uint in_playingID)
	{
	}

	[Token(Token = "0x6001539")]
	[Address(RVA = "0xC20F74", Offset = "0xC20F74", VA = "0xC20F74")]
	public static void RemoveEventCallbackCookie(object in_cookie)
	{
	}

	[Token(Token = "0x600153A")]
	[Address(RVA = "0xC211F0", Offset = "0xC211F0", VA = "0xC211F0")]
	public static void RemoveBankCallback(object in_cookie)
	{
	}

	[Token(Token = "0x600153B")]
	[Address(RVA = "0xC2146C", Offset = "0xC2146C", VA = "0xC2146C")]
	public static void SetLastAddedPlayingID(uint in_playingID)
	{
	}

	[Token(Token = "0x600153C")]
	[Address(RVA = "0xC21538", Offset = "0xC21538", VA = "0xC21538")]
	public static AKRESULT Init(InitializationSettings settings)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x600153D")]
	[Address(RVA = "0xC216E4", Offset = "0xC216E4", VA = "0xC216E4")]
	public static void Term()
	{
	}

	[Token(Token = "0x600153E")]
	[Address(RVA = "0xC21820", Offset = "0xC21820", VA = "0xC21820")]
	public static void SetMonitoringCallback(AkMonitorErrorLevel in_Level, MonitoringCallback in_CB)
	{
	}

	[Token(Token = "0x600153F")]
	[Address(RVA = "0xC2190C", Offset = "0xC2190C", VA = "0xC2190C")]
	public static void SetBGMCallback(BGMCallback in_CB, object in_cookie)
	{
	}

	[Token(Token = "0x6001540")]
	[Address(RVA = "0xC219B8", Offset = "0xC219B8", VA = "0xC219B8")]
	public static int PostCallbacks()
	{
		return default(int);
	}
}
[Token(Token = "0x20001AE")]
public class AkBasePlatformSettings : ScriptableObject
{
	[Token(Token = "0x170001E2")]
	public virtual AkInitializationSettings AkInitializationSettings
	{
		[Token(Token = "0x6001542")]
		[Address(RVA = "0xC20538", Offset = "0xC20538", VA = "0xC20538", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001E3")]
	public virtual AkSpatialAudioInitSettings AkSpatialAudioInitSettings
	{
		[Token(Token = "0x6001543")]
		[Address(RVA = "0xC20594", Offset = "0xC20594", VA = "0xC20594", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001E4")]
	public virtual AkCallbackManager.InitializationSettings CallbackManagerInitializationSettings
	{
		[Token(Token = "0x6001544")]
		[Address(RVA = "0xC205F0", Offset = "0xC205F0", VA = "0xC205F0", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001E5")]
	public virtual string InitialLanguage
	{
		[Token(Token = "0x6001545")]
		[Address(RVA = "0xC206CC", Offset = "0xC206CC", VA = "0xC206CC", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001E6")]
	public virtual bool RenderDuringFocusLoss
	{
		[Token(Token = "0x6001546")]
		[Address(RVA = "0xC20714", Offset = "0xC20714", VA = "0xC20714", Slot = "8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E7")]
	public virtual string SoundbankPath
	{
		[Token(Token = "0x6001547")]
		[Address(RVA = "0xC2071C", Offset = "0xC2071C", VA = "0xC2071C", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001E8")]
	public virtual AkCommunicationSettings AkCommunicationSettings
	{
		[Token(Token = "0x6001548")]
		[Address(RVA = "0xC20784", Offset = "0xC20784", VA = "0xC20784", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001E9")]
	public virtual bool UseAsyncOpen
	{
		[Token(Token = "0x6001549")]
		[Address(RVA = "0xC20860", Offset = "0xC20860", VA = "0xC20860", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600154A")]
	[Address(RVA = "0xC20868", Offset = "0xC20868", VA = "0xC20868")]
	public AkBasePlatformSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x20001AF")]
public class AkCommonOutputSettings
{
	[Token(Token = "0x200043E")]
	public enum PanningRule
	{
		[Token(Token = "0x400218A")]
		Speakers,
		[Token(Token = "0x400218B")]
		Headphones
	}

	[Serializable]
	[Token(Token = "0x200043F")]
	public class ChannelConfiguration
	{
		[Token(Token = "0x20004F1")]
		public enum ChannelConfigType
		{
			[Token(Token = "0x4002421")]
			Anonymous,
			[Token(Token = "0x4002422")]
			Standard,
			[Token(Token = "0x4002423")]
			Ambisonic
		}

		[Token(Token = "0x20004F2")]
		public enum ChannelMask
		{
			[Token(Token = "0x4002425")]
			NONE = 0,
			[Token(Token = "0x4002426")]
			FRONT_LEFT = 1,
			[Token(Token = "0x4002427")]
			FRONT_RIGHT = 2,
			[Token(Token = "0x4002428")]
			FRONT_CENTER = 4,
			[Token(Token = "0x4002429")]
			LOW_FREQUENCY = 8,
			[Token(Token = "0x400242A")]
			BACK_LEFT = 16,
			[Token(Token = "0x400242B")]
			BACK_RIGHT = 32,
			[Token(Token = "0x400242C")]
			BACK_CENTER = 256,
			[Token(Token = "0x400242D")]
			SIDE_LEFT = 512,
			[Token(Token = "0x400242E")]
			SIDE_RIGHT = 1024,
			[Token(Token = "0x400242F")]
			TOP = 2048,
			[Token(Token = "0x4002430")]
			HEIGHT_FRONT_LEFT = 4096,
			[Token(Token = "0x4002431")]
			HEIGHT_FRONT_CENTER = 8192,
			[Token(Token = "0x4002432")]
			HEIGHT_FRONT_RIGHT = 16384,
			[Token(Token = "0x4002433")]
			HEIGHT_BACK_LEFT = 32768,
			[Token(Token = "0x4002434")]
			HEIGHT_BACK_CENTER = 65536,
			[Token(Token = "0x4002435")]
			HEIGHT_BACK_RIGHT = 131072,
			[Token(Token = "0x4002436")]
			SETUP_MONO = 4,
			[Token(Token = "0x4002437")]
			SETUP_0POINT1 = 8,
			[Token(Token = "0x4002438")]
			SETUP_1POINT1 = 12,
			[Token(Token = "0x4002439")]
			SETUP_STEREO = 3,
			[Token(Token = "0x400243A")]
			SETUP_2POINT1 = 11,
			[Token(Token = "0x400243B")]
			SETUP_3STEREO = 7,
			[Token(Token = "0x400243C")]
			SETUP_3POINT1 = 15,
			[Token(Token = "0x400243D")]
			SETUP_4 = 1539,
			[Token(Token = "0x400243E")]
			SETUP_4POINT1 = 1547,
			[Token(Token = "0x400243F")]
			SETUP_5 = 1543,
			[Token(Token = "0x4002440")]
			SETUP_5POINT1 = 1551,
			[Token(Token = "0x4002441")]
			SETUP_6 = 1587,
			[Token(Token = "0x4002442")]
			SETUP_6POINT1 = 1595,
			[Token(Token = "0x4002443")]
			SETUP_7 = 1591,
			[Token(Token = "0x4002444")]
			SETUP_7POINT1 = 1599,
			[Token(Token = "0x4002445")]
			SETUP_SURROUND = 259,
			[Token(Token = "0x4002446")]
			SETUP_DPL2 = 1539,
			[Token(Token = "0x4002447")]
			SETUP_HEIGHT_4 = 184320,
			[Token(Token = "0x4002448")]
			SETUP_HEIGHT_5 = 192512,
			[Token(Token = "0x4002449")]
			SETUP_HEIGHT_ALL = 258048,
			[Token(Token = "0x400244A")]
			SETUP_AURO_222 = 22019,
			[Token(Token = "0x400244B")]
			SETUP_AURO_8 = 185859,
			[Token(Token = "0x400244C")]
			SETUP_AURO_9 = 185863,
			[Token(Token = "0x400244D")]
			SETUP_AURO_9POINT1 = 185871,
			[Token(Token = "0x400244E")]
			SETUP_AURO_10 = 187911,
			[Token(Token = "0x400244F")]
			SETUP_AURO_10POINT1 = 187919,
			[Token(Token = "0x4002450")]
			SETUP_AURO_11 = 196103,
			[Token(Token = "0x4002451")]
			SETUP_AURO_11POINT1 = 196111,
			[Token(Token = "0x4002452")]
			SETUP_AURO_11_740 = 185911,
			[Token(Token = "0x4002453")]
			SETUP_AURO_11POINT1_740 = 185919,
			[Token(Token = "0x4002454")]
			SETUP_AURO_13_751 = 196151,
			[Token(Token = "0x4002455")]
			SETUP_AURO_13POINT1_751 = 196159,
			[Token(Token = "0x4002456")]
			SETUP_DOLBY_5_0_2 = 22023,
			[Token(Token = "0x4002457")]
			SETUP_DOLBY_5_1_2 = 22031,
			[Token(Token = "0x4002458")]
			SETUP_DOLBY_6_0_2 = 22067,
			[Token(Token = "0x4002459")]
			SETUP_DOLBY_6_1_2 = 22075,
			[Token(Token = "0x400245A")]
			SETUP_DOLBY_6_0_4 = 185907,
			[Token(Token = "0x400245B")]
			SETUP_DOLBY_6_1_4 = 185915,
			[Token(Token = "0x400245C")]
			SETUP_DOLBY_7_0_2 = 22071,
			[Token(Token = "0x400245D")]
			SETUP_DOLBY_7_1_2 = 22079,
			[Token(Token = "0x400245E")]
			SETUP_DOLBY_7_0_4 = 185911,
			[Token(Token = "0x400245F")]
			SETUP_DOLBY_7_1_4 = 185919,
			[Token(Token = "0x4002460")]
			SETUP_ALL_SPEAKERS = 261951
		}

		[Token(Token = "0x400218C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E0530", Offset = "0x7E0530")]
		public ChannelConfigType m_ChannelConfigType;

		[Token(Token = "0x400218D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E0568", Offset = "0x7E0568")]
		[AttributeAttribute(Name = "AkEnumFlagAttribute", RVA = "0x7E0568", Offset = "0x7E0568")]
		public ChannelMask m_ChannelMask;

		[Token(Token = "0x400218E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E05F0", Offset = "0x7E05F0")]
		public uint m_NumberOfChannels;

		[Token(Token = "0x60024D1")]
		[Address(RVA = "0xC25D04", Offset = "0xC25D04", VA = "0xC25D04")]
		public void CopyTo(AkChannelConfig config)
		{
		}

		[Token(Token = "0x60024D2")]
		[Address(RVA = "0xC19188", Offset = "0xC19188", VA = "0xC19188")]
		public ChannelConfiguration()
		{
		}
	}

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC7F8", Offset = "0x7DC7F8")]
	public string m_AudioDeviceShareset;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC830", Offset = "0x7DC830")]
	public uint m_DeviceID;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC868", Offset = "0x7DC868")]
	public PanningRule m_PanningRule;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC8A0", Offset = "0x7DC8A0")]
	public ChannelConfiguration m_ChannelConfig;

	[Token(Token = "0x600154B")]
	[Address(RVA = "0xC25C14", Offset = "0xC25C14", VA = "0xC25C14")]
	public void CopyTo(AkOutputSettings settings)
	{
	}

	[Token(Token = "0x600154C")]
	[Address(RVA = "0xC19108", Offset = "0xC19108", VA = "0xC19108")]
	public AkCommonOutputSettings()
	{
	}
}
[Token(Token = "0x20001B0")]
public class AkSettingsValidationHandler
{
	[Token(Token = "0x600154D")]
	[Address(RVA = "0xABED30", Offset = "0xABED30", VA = "0xABED30", Slot = "4")]
	public virtual void Validate()
	{
	}

	[Token(Token = "0x600154E")]
	[Address(RVA = "0xABED34", Offset = "0xABED34", VA = "0xABED34")]
	public AkSettingsValidationHandler()
	{
	}
}
[Serializable]
[Token(Token = "0x20001B1")]
public class AkCommonUserSettings : AkSettingsValidationHandler
{
	[Serializable]
	[Token(Token = "0x2000440")]
	public class SpatialAudioSettings
	{
		[Token(Token = "0x20004F3")]
		public enum DiffractionFlags
		{
			[Token(Token = "0x4002462")]
			UseBuiltInParam = 1,
			[Token(Token = "0x4002463")]
			UseObstruction = 2,
			[Token(Token = "0x4002464")]
			CalcEmitterVirtualPosition = 8
		}

		[Token(Token = "0x400218F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E0628", Offset = "0x7E0628")]
		public uint m_PoolSize;

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E0660", Offset = "0x7E0660")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7E0660", Offset = "0x7E0660")]
		public uint m_MaxSoundPropagationDepth;

		[Token(Token = "0x4002191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E06B4", Offset = "0x7E06B4")]
		[AttributeAttribute(Name = "AkEnumFlagAttribute", RVA = "0x7E06B4", Offset = "0x7E06B4")]
		public DiffractionFlags m_DiffractionFlags;

		[Token(Token = "0x4002192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E073C", Offset = "0x7E073C")]
		public float m_MovementThreshold;

		[Token(Token = "0x60024D3")]
		[Address(RVA = "0xC263A0", Offset = "0xC263A0", VA = "0xC263A0")]
		public SpatialAudioSettings()
		{
		}
	}

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC8D8", Offset = "0x7DC8D8")]
	public string m_BasePath;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC910", Offset = "0x7DC910")]
	public string m_StartupLanguage;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC948", Offset = "0x7DC948")]
	public uint m_PreparePoolSize;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC980", Offset = "0x7DC980")]
	public int m_CallbackManagerBufferSize;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC9B8", Offset = "0x7DC9B8")]
	public bool m_EngineLogging;

	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DC9F0", Offset = "0x7DC9F0")]
	public uint m_MaximumNumberOfMemoryPools;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCA28", Offset = "0x7DCA28")]
	public uint m_MaximumNumberOfPositioningPaths;

	[Token(Token = "0x4000C61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCA60", Offset = "0x7DCA60")]
	public uint m_DefaultPoolSize;

	[Token(Token = "0x4000C62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCA98", Offset = "0x7DCA98")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DCA98", Offset = "0x7DCA98")]
	public float m_MemoryCutoffThreshold;

	[Token(Token = "0x4000C63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCAEC", Offset = "0x7DCAEC")]
	public uint m_CommandQueueSize;

	[Token(Token = "0x4000C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCB24", Offset = "0x7DCB24")]
	public uint m_SamplesPerFrame;

	[Token(Token = "0x4000C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCB5C", Offset = "0x7DCB5C")]
	public AkCommonOutputSettings m_MainOutputSettings;

	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCB94", Offset = "0x7DCB94")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DCB94", Offset = "0x7DCB94")]
	public float m_StreamingLookAheadRatio;

	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCBE8", Offset = "0x7DCBE8")]
	public uint m_StreamManagerPoolSize;

	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCC20", Offset = "0x7DCC20")]
	public uint m_SampleRate;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCC58", Offset = "0x7DCC58")]
	public uint m_LowerEnginePoolSize;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCC90", Offset = "0x7DCC90")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DCC90", Offset = "0x7DCC90")]
	public float m_LowerEngineMemoryCutoffThreshold;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCCE4", Offset = "0x7DCCE4")]
	public ushort m_NumberOfRefillsInVoice;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCD1C", Offset = "0x7DCD1C")]
	public SpatialAudioSettings m_SpatialAudioSettings;

	[Token(Token = "0x600154F")]
	[Address(RVA = "0xC25F54", Offset = "0xC25F54", VA = "0xC25F54")]
	public void CopyTo(AkMemSettings settings)
	{
	}

	[Token(Token = "0x6001550")]
	[Address(RVA = "0xC261D8", Offset = "0xC261D8", VA = "0xC261D8")]
	protected static string GetPluginPath()
	{
		return null;
	}

	[Token(Token = "0x6001551")]
	[Address(RVA = "0xC261E0", Offset = "0xC261E0", VA = "0xC261E0", Slot = "5")]
	public virtual void CopyTo(AkInitSettings settings)
	{
	}

	[Token(Token = "0x6001552")]
	[Address(RVA = "0xC25FA4", Offset = "0xC25FA4", VA = "0xC25FA4")]
	public void CopyTo(AkMusicSettings settings)
	{
	}

	[Token(Token = "0x6001553")]
	[Address(RVA = "0xC25F7C", Offset = "0xC25F7C", VA = "0xC25F7C")]
	public void CopyTo(AkStreamMgrSettings settings)
	{
	}

	[Token(Token = "0x6001554")]
	[Address(RVA = "0xC26288", Offset = "0xC26288", VA = "0xC26288", Slot = "6")]
	public virtual void CopyTo(AkDeviceSettings settings)
	{
	}

	[Token(Token = "0x6001555")]
	[Address(RVA = "0xC2628C", Offset = "0xC2628C", VA = "0xC2628C", Slot = "7")]
	public virtual void CopyTo(AkPlatformInitSettings settings)
	{
	}

	[Token(Token = "0x6001556")]
	[Address(RVA = "0xC262F4", Offset = "0xC262F4", VA = "0xC262F4", Slot = "8")]
	public virtual void CopyTo(AkSpatialAudioInitSettings settings)
	{
	}

	[Token(Token = "0x6001557")]
	[Address(RVA = "0xC2637C", Offset = "0xC2637C", VA = "0xC2637C", Slot = "9")]
	public virtual void CopyTo(AkUnityPlatformSpecificSettings settings)
	{
	}

	[Token(Token = "0x6001558")]
	[Address(RVA = "0xC26380", Offset = "0xC26380", VA = "0xC26380", Slot = "4")]
	public override void Validate()
	{
	}

	[Token(Token = "0x6001559")]
	[Address(RVA = "0xC18FFC", Offset = "0xC18FFC", VA = "0xC18FFC")]
	public AkCommonUserSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x20001B2")]
public class AkCommonAdvancedSettings : AkSettingsValidationHandler
{
	[Serializable]
	[Token(Token = "0x2000441")]
	public class SpatialAudioSettings
	{
		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E0774", Offset = "0x7E0774")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7E0774", Offset = "0x7E0774")]
		public float m_DiffractionShadowAttenuationFactor;

		[Token(Token = "0x4002194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E07C8", Offset = "0x7E07C8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7E07C8", Offset = "0x7E07C8")]
		public float m_DiffractionShadowDegrees;

		[Token(Token = "0x60024D4")]
		[Address(RVA = "0xC257AC", Offset = "0xC257AC", VA = "0xC257AC")]
		public SpatialAudioSettings()
		{
		}
	}

	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCD54", Offset = "0x7DCD54")]
	public uint m_IOMemorySize;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCD8C", Offset = "0x7DCD8C")]
	public float m_TargetAutoStreamBufferLengthMs;

	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCDC4", Offset = "0x7DCDC4")]
	public bool m_UseStreamCache;

	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCDFC", Offset = "0x7DCDFC")]
	public uint m_MaximumPinnedBytesInCache;

	[Token(Token = "0x4000C71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCE34", Offset = "0x7DCE34")]
	public int m_PrepareEventMemoryPoolID;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCE6C", Offset = "0x7DCE6C")]
	public bool m_EnableGameSyncPreparation;

	[Token(Token = "0x4000C73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCEA4", Offset = "0x7DCEA4")]
	public uint m_ContinuousPlaybackLookAhead;

	[Token(Token = "0x4000C74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCEDC", Offset = "0x7DCEDC")]
	public uint m_MonitorPoolSize;

	[Token(Token = "0x4000C75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCF14", Offset = "0x7DCF14")]
	public uint m_MonitorQueuePoolSize;

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCF4C", Offset = "0x7DCF4C")]
	public uint m_MaximumHardwareTimeoutMs;

	[Token(Token = "0x4000C77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCF84", Offset = "0x7DCF84")]
	public SpatialAudioSettings m_SpatialAudioSettings;

	[Token(Token = "0x4000C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCFBC", Offset = "0x7DCFBC")]
	public bool m_RenderDuringFocusLoss;

	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DCFF4", Offset = "0x7DCFF4")]
	public bool m_UseAsyncOpen;

	[Token(Token = "0x600155A")]
	[Address(RVA = "0xC25384", Offset = "0xC25384", VA = "0xC25384", Slot = "5")]
	public virtual void CopyTo(AkDeviceSettings settings)
	{
	}

	[Token(Token = "0x600155B")]
	[Address(RVA = "0xC255CC", Offset = "0xC255CC", VA = "0xC255CC", Slot = "6")]
	public virtual void CopyTo(AkInitSettings settings)
	{
	}

	[Token(Token = "0x600155C")]
	[Address(RVA = "0xC25654", Offset = "0xC25654", VA = "0xC25654", Slot = "7")]
	public virtual void CopyTo(AkPlatformInitSettings settings)
	{
	}

	[Token(Token = "0x600155D")]
	[Address(RVA = "0xC25658", Offset = "0xC25658", VA = "0xC25658", Slot = "8")]
	public virtual void CopyTo(AkSpatialAudioInitSettings settings)
	{
	}

	[Token(Token = "0x600155E")]
	[Address(RVA = "0xC256B0", Offset = "0xC256B0", VA = "0xC256B0", Slot = "9")]
	public virtual void CopyTo(AkUnityPlatformSpecificSettings settings)
	{
	}

	[Token(Token = "0x600155F")]
	[Address(RVA = "0xC256B4", Offset = "0xC256B4", VA = "0xC256B4", Slot = "4")]
	public override void Validate()
	{
	}

	[Token(Token = "0x6001560")]
	[Address(RVA = "0xC19228", Offset = "0xC19228", VA = "0xC19228")]
	public AkCommonAdvancedSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x20001B3")]
public class AkCommonCommSettings : AkSettingsValidationHandler
{
	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD02C", Offset = "0x7DD02C")]
	public uint m_PoolSize;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ushort DefaultDiscoveryBroadcastPort;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD064", Offset = "0x7DD064")]
	public ushort m_DiscoveryBroadcastPort;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD09C", Offset = "0x7DD09C")]
	public ushort m_CommandPort;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD0D4", Offset = "0x7DD0D4")]
	public ushort m_NotificationPort;

	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD10C", Offset = "0x7DD10C")]
	public bool m_InitializeSystemComms;

	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD144", Offset = "0x7DD144")]
	public string m_NetworkName;

	[Token(Token = "0x6001561")]
	[Address(RVA = "0xC257C0", Offset = "0xC257C0", VA = "0xC257C0", Slot = "5")]
	public virtual void CopyTo(AkCommunicationSettings settings)
	{
	}

	[Token(Token = "0x6001562")]
	[Address(RVA = "0xC25B38", Offset = "0xC25B38", VA = "0xC25B38")]
	public AkCommonCommSettings()
	{
	}
}
[Token(Token = "0x20001B4")]
public abstract class AkCommonPlatformSettings : AkBasePlatformSettings
{
	[Token(Token = "0x170001EA")]
	public override AkInitializationSettings AkInitializationSettings
	{
		[Token(Token = "0x6001567")]
		[Address(RVA = "0xC25D7C", Offset = "0xC25D7C", VA = "0xC25D7C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001EB")]
	public override AkSpatialAudioInitSettings AkSpatialAudioInitSettings
	{
		[Token(Token = "0x6001568")]
		[Address(RVA = "0xC25FC8", Offset = "0xC25FC8", VA = "0xC25FC8", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001EC")]
	public override AkCallbackManager.InitializationSettings CallbackManagerInitializationSettings
	{
		[Token(Token = "0x6001569")]
		[Address(RVA = "0xC26040", Offset = "0xC26040", VA = "0xC26040", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001ED")]
	public override string InitialLanguage
	{
		[Token(Token = "0x600156A")]
		[Address(RVA = "0xC260D4", Offset = "0xC260D4", VA = "0xC260D4", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001EE")]
	public override bool RenderDuringFocusLoss
	{
		[Token(Token = "0x600156B")]
		[Address(RVA = "0xC260FC", Offset = "0xC260FC", VA = "0xC260FC", Slot = "8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001EF")]
	public override string SoundbankPath
	{
		[Token(Token = "0x600156C")]
		[Address(RVA = "0xC26128", Offset = "0xC26128", VA = "0xC26128", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F0")]
	public override bool UseAsyncOpen
	{
		[Token(Token = "0x600156D")]
		[Address(RVA = "0xC26150", Offset = "0xC26150", VA = "0xC26150", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001F1")]
	public override AkCommunicationSettings AkCommunicationSettings
	{
		[Token(Token = "0x600156E")]
		[Address(RVA = "0xC2617C", Offset = "0xC2617C", VA = "0xC2617C", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001564")]
	protected abstract AkCommonUserSettings GetUserSettings();

	[Token(Token = "0x6001565")]
	protected abstract AkCommonAdvancedSettings GetAdvancedSettings();

	[Token(Token = "0x6001566")]
	protected abstract AkCommonCommSettings GetCommsSettings();

	[Token(Token = "0x600156F")]
	[Address(RVA = "0xC261D0", Offset = "0xC261D0", VA = "0xC261D0")]
	protected AkCommonPlatformSettings()
	{
	}
}
[Token(Token = "0x20001B5")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x7D5674", Offset = "0x7D5674")]
public class AkEnumFlagAttribute : PropertyAttribute
{
	[Token(Token = "0x4000C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Type Type;

	[Token(Token = "0x6001570")]
	[Address(RVA = "0xC29CB4", Offset = "0xC29CB4", VA = "0xC29CB4")]
	public AkEnumFlagAttribute(Type type)
	{
	}
}
[Token(Token = "0x20001B6")]
public class AkLogger
{
	[Token(Token = "0x2000442")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7D8C24", Offset = "0x7D8C24")]
	public delegate void ErrorLoggerInteropDelegate(string message);

	[Token(Token = "0x4000C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AkLogger ms_Instance;

	[Token(Token = "0x4000C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ErrorLoggerInteropDelegate errorLoggerDelegate;

	[Token(Token = "0x170001F2")]
	public static AkLogger Instance
	{
		[Token(Token = "0x6001572")]
		[Address(RVA = "0xAA983C", Offset = "0xAA983C", VA = "0xAA983C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001571")]
	[Address(RVA = "0xAA96C8", Offset = "0xAA96C8", VA = "0xAA96C8")]
	private AkLogger()
	{
	}

	[Token(Token = "0x6001573")]
	[Address(RVA = "0xAA98A4", Offset = "0xAA98A4", VA = "0xAA98A4", Slot = "1")]
	~AkLogger()
	{
	}

	[Token(Token = "0x6001574")]
	[Address(RVA = "0xAA9A0C", Offset = "0xAA9A0C", VA = "0xAA9A0C")]
	public void Init()
	{
	}

	[Token(Token = "0x6001575")]
	[Address(RVA = "0xAA9640", Offset = "0xAA9640", VA = "0xAA9640")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7E1D90", Offset = "0x7E1D90")]
	public static void WwiseInternalLogError(string message)
	{
	}

	[Token(Token = "0x6001576")]
	[Address(RVA = "0xAA9A10", Offset = "0xAA9A10", VA = "0xAA9A10")]
	public static void Message(string message)
	{
	}

	[Token(Token = "0x6001577")]
	[Address(RVA = "0xAA9A98", Offset = "0xAA9A98", VA = "0xAA9A98")]
	public static void Warning(string message)
	{
	}

	[Token(Token = "0x6001578")]
	[Address(RVA = "0xAA9B20", Offset = "0xAA9B20", VA = "0xAA9B20")]
	public static void Error(string message)
	{
	}
}
[Token(Token = "0x20001B7")]
public static class AkRoomPortalManager
{
	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly List<AkRoom> m_UpdatedRooms;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly List<AkRoomPortal> m_Portals;

	[Token(Token = "0x4000C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly List<AkRoomPortal> m_PortalsToUpdate;

	[Token(Token = "0x600157A")]
	[Address(RVA = "0xABCFF8", Offset = "0xABCFF8", VA = "0xABCFF8")]
	public static void RegisterPortal(AkRoomPortal portal)
	{
	}

	[Token(Token = "0x600157B")]
	[Address(RVA = "0xABD260", Offset = "0xABD260", VA = "0xABD260")]
	public static void UnregisterPortal(AkRoomPortal portal)
	{
	}

	[Token(Token = "0x600157C")]
	[Address(RVA = "0xABC394", Offset = "0xABC394", VA = "0xABC394")]
	public static void RegisterPortalUpdate(AkRoomPortal portal)
	{
	}

	[Token(Token = "0x600157D")]
	[Address(RVA = "0xABB1CC", Offset = "0xABB1CC", VA = "0xABB1CC")]
	public static void RegisterRoomUpdate(AkRoom room)
	{
	}

	[Token(Token = "0x600157E")]
	[Address(RVA = "0xABD86C", Offset = "0xABD86C", VA = "0xABD86C")]
	public static void UpdatePortals()
	{
	}
}
[Token(Token = "0x20001B8")]
public class AkShowOnlyAttribute : PropertyAttribute
{
	[Token(Token = "0x6001580")]
	[Address(RVA = "0xABED3C", Offset = "0xABED3C", VA = "0xABED3C")]
	public AkShowOnlyAttribute()
	{
	}
}
[Token(Token = "0x20001B9")]
public class AkUtilities
{
	[Token(Token = "0x2000443")]
	public class ShortIDGenerator
	{
		[Token(Token = "0x4002195")]
		private const uint s_prime32 = 16777619u;

		[Token(Token = "0x4002196")]
		private const uint s_offsetBasis32 = 2166136261u;

		[Token(Token = "0x4002197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte s_hashSize;

		[Token(Token = "0x4002198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static uint s_mask;

		[Token(Token = "0x1700039E")]
		public static byte HashSize
		{
			[Token(Token = "0x60024DA")]
			[Address(RVA = "0xE0B234", Offset = "0xE0B234", VA = "0xE0B234")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x60024DB")]
			[Address(RVA = "0xE0B1A8", Offset = "0xE0B1A8", VA = "0xE0B1A8")]
			set
			{
			}
		}

		[Token(Token = "0x60024D9")]
		[Address(RVA = "0xE0B1A0", Offset = "0xE0B1A0", VA = "0xE0B1A0")]
		static ShortIDGenerator()
		{
		}

		[Token(Token = "0x60024DC")]
		[Address(RVA = "0xE098B0", Offset = "0xE098B0", VA = "0xE098B0")]
		public static uint Compute(string in_name)
		{
			return default(uint);
		}

		[Token(Token = "0x60024DD")]
		[Address(RVA = "0xE0B29C", Offset = "0xE0B29C", VA = "0xE0B29C")]
		public ShortIDGenerator()
		{
		}
	}

	[Token(Token = "0x6001581")]
	[Address(RVA = "0xE0B198", Offset = "0xE0B198", VA = "0xE0B198")]
	public AkUtilities()
	{
	}
}
[Token(Token = "0x20001BA")]
public class AkWwiseInitializationSettings : AkCommonPlatformSettings
{
	[Token(Token = "0x2000444")]
	public abstract class PlatformSettings : AkCommonPlatformSettings
	{
		[Token(Token = "0x4002199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private List<string> IgnorePropertyNameList;

		[Token(Token = "0x400219A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private List<string> GlobalPropertyNameList;

		[Token(Token = "0x400219B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<string> _GlobalPropertyHashSet;

		[Token(Token = "0x1700039F")]
		public HashSet<string> GlobalPropertyHashSet
		{
			[Token(Token = "0x60024E4")]
			[Address(RVA = "0xE0E200", Offset = "0xE0E200", VA = "0xE0E200")]
			get
			{
				return null;
			}
			[Token(Token = "0x60024E5")]
			[Address(RVA = "0xE0E284", Offset = "0xE0E284", VA = "0xE0E284")]
			set
			{
			}
		}

		[Token(Token = "0x60024DE")]
		[Address(RVA = "0xE0DD24", Offset = "0xE0DD24", VA = "0xE0DD24")]
		public void IgnorePropertyValue(string propertyPath)
		{
		}

		[Token(Token = "0x60024DF")]
		[Address(RVA = "0xE0DDBC", Offset = "0xE0DDBC", VA = "0xE0DDBC")]
		public bool IsPropertyIgnored(string propertyPath)
		{
			return default(bool);
		}

		[Token(Token = "0x60024E0")]
		[Address(RVA = "0xE0C084", Offset = "0xE0C084", VA = "0xE0C084")]
		protected PlatformSettings()
		{
		}

		[Token(Token = "0x60024E1")]
		[Address(RVA = "0xE0DE24", Offset = "0xE0DE24", VA = "0xE0DE24")]
		public void SetUseGlobalPropertyValue(string propertyPath, bool use)
		{
		}

		[Token(Token = "0x60024E2")]
		[Address(RVA = "0xE0DEC8", Offset = "0xE0DEC8", VA = "0xE0DEC8")]
		public void SetGlobalPropertyValues(IEnumerable enumerable)
		{
		}

		[Token(Token = "0x60024E3")]
		[Address(RVA = "0xE0E198", Offset = "0xE0E198", VA = "0xE0E198")]
		private bool IsUsingGlobalPropertyValue(string propertyPath)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000445")]
	public class CommonPlatformSettings : PlatformSettings
	{
		[Token(Token = "0x400219C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public AkCommonUserSettings UserSettings;

		[Token(Token = "0x400219D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public AkCommonAdvancedSettings AdvancedSettings;

		[Token(Token = "0x400219E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public AkCommonCommSettings CommsSettings;

		[Token(Token = "0x60024E6")]
		[Address(RVA = "0xE0DD08", Offset = "0xE0DD08", VA = "0xE0DD08", Slot = "12")]
		protected override AkCommonUserSettings GetUserSettings()
		{
			return null;
		}

		[Token(Token = "0x60024E7")]
		[Address(RVA = "0xE0DD10", Offset = "0xE0DD10", VA = "0xE0DD10", Slot = "13")]
		protected override AkCommonAdvancedSettings GetAdvancedSettings()
		{
			return null;
		}

		[Token(Token = "0x60024E8")]
		[Address(RVA = "0xE0DD18", Offset = "0xE0DD18", VA = "0xE0DD18", Slot = "14")]
		protected override AkCommonCommSettings GetCommsSettings()
		{
			return null;
		}

		[Token(Token = "0x60024E9")]
		[Address(RVA = "0xE0DD20", Offset = "0xE0DD20", VA = "0xE0DD20")]
		public CommonPlatformSettings()
		{
		}
	}

	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public List<string> PlatformSettingsNameList;

	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public List<PlatformSettings> PlatformSettingsList;

	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public List<string> InvalidReferencePlatforms;

	[Token(Token = "0x4000C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public AkCommonUserSettings UserSettings;

	[Token(Token = "0x4000C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public AkCommonAdvancedSettings AdvancedSettings;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public AkCommonCommSettings CommsSettings;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string[] AllGlobalValues;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static AkWwiseInitializationSettings m_Instance;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static AkBasePlatformSettings m_ActivePlatformSettings;

	[Token(Token = "0x170001F3")]
	public bool IsValid
	{
		[Token(Token = "0x6001582")]
		[Address(RVA = "0xE0C164", Offset = "0xE0C164", VA = "0xE0C164")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001F4")]
	public int Count
	{
		[Token(Token = "0x6001583")]
		[Address(RVA = "0xE0C1CC", Offset = "0xE0C1CC", VA = "0xE0C1CC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001F5")]
	public static AkWwiseInitializationSettings Instance
	{
		[Token(Token = "0x6001587")]
		[Address(RVA = "0xE0C238", Offset = "0xE0C238", VA = "0xE0C238")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F6")]
	public static AkBasePlatformSettings ActivePlatformSettings
	{
		[Token(Token = "0x6001589")]
		[Address(RVA = "0xE0C52C", Offset = "0xE0C52C", VA = "0xE0C52C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001584")]
	[Address(RVA = "0xE0C220", Offset = "0xE0C220", VA = "0xE0C220", Slot = "12")]
	protected override AkCommonUserSettings GetUserSettings()
	{
		return null;
	}

	[Token(Token = "0x6001585")]
	[Address(RVA = "0xE0C228", Offset = "0xE0C228", VA = "0xE0C228", Slot = "13")]
	protected override AkCommonAdvancedSettings GetAdvancedSettings()
	{
		return null;
	}

	[Token(Token = "0x6001586")]
	[Address(RVA = "0xE0C230", Offset = "0xE0C230", VA = "0xE0C230", Slot = "14")]
	protected override AkCommonCommSettings GetCommsSettings()
	{
		return null;
	}

	[Token(Token = "0x6001588")]
	[Address(RVA = "0xE0C36C", Offset = "0xE0C36C", VA = "0xE0C36C")]
	private static AkBasePlatformSettings GetPlatformSettings(string platformName)
	{
		return null;
	}

	[Token(Token = "0x600158A")]
	[Address(RVA = "0xE0C654", Offset = "0xE0C654", VA = "0xE0C654")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600158B")]
	[Address(RVA = "0xE0C7B8", Offset = "0xE0C7B8", VA = "0xE0C7B8")]
	public static bool InitializeSoundEngine()
	{
		return default(bool);
	}

	[Token(Token = "0x600158C")]
	[Address(RVA = "0xE0CDFC", Offset = "0xE0CDFC", VA = "0xE0CDFC")]
	public static bool ResetSoundEngine(bool isPlaying)
	{
		return default(bool);
	}

	[Token(Token = "0x600158D")]
	[Address(RVA = "0xE0CF04", Offset = "0xE0CF04", VA = "0xE0CF04")]
	public static void TerminateSoundEngine()
	{
	}

	[Token(Token = "0x600158E")]
	[Address(RVA = "0xE0D0B8", Offset = "0xE0D0B8", VA = "0xE0D0B8")]
	private static void SleepForMilliseconds(double milliseconds)
	{
	}

	[Token(Token = "0x600158F")]
	[Address(RVA = "0xE0D22C", Offset = "0xE0D22C", VA = "0xE0D22C")]
	public AkWwiseInitializationSettings()
	{
	}
}
[Token(Token = "0x20001BB")]
public class AkAcousticSurfaceArray : AkBaseArray<AkAcousticSurface>
{
	[Token(Token = "0x170001F7")]
	protected override int StructureSize
	{
		[Token(Token = "0x6001592")]
		[Address(RVA = "0xC17BA4", Offset = "0xC17BA4", VA = "0xC17BA4", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001591")]
	[Address(RVA = "0xC17B44", Offset = "0xC17B44", VA = "0xC17B44")]
	public AkAcousticSurfaceArray(int count)
	{
	}

	[Token(Token = "0x6001593")]
	[Address(RVA = "0xC17C04", Offset = "0xC17C04", VA = "0xC17C04", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x6001594")]
	[Address(RVA = "0xC17C6C", Offset = "0xC17C6C", VA = "0xC17C6C", Slot = "9")]
	protected override AkAcousticSurface CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x6001595")]
	[Address(RVA = "0xC17CD4", Offset = "0xC17CD4", VA = "0xC17CD4", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkAcousticSurface other)
	{
	}
}
[Token(Token = "0x20001BC")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7D56AC", Offset = "0x7D56AC")]
public class AkAuxSendArray : IDisposable
{
	[Token(Token = "0x4000C90")]
	private const int MAX_COUNT = 4;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly int SIZE_OF_AKAUXSENDVALUE;

	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr m_Buffer;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_Count;

	[Token(Token = "0x170001F8")]
	public AkAuxSendValue Item
	{
		[Token(Token = "0x6001597")]
		[Address(RVA = "0xC1CF24", Offset = "0xC1CF24", VA = "0xC1CF24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F9")]
	public bool isFull
	{
		[Token(Token = "0x6001598")]
		[Address(RVA = "0xC1D088", Offset = "0xC1D088", VA = "0xC1D088")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001596")]
	[Address(RVA = "0xC1CE74", Offset = "0xC1CE74", VA = "0xC1CE74")]
	public AkAuxSendArray()
	{
	}

	[Token(Token = "0x6001599")]
	[Address(RVA = "0xC1D0F0", Offset = "0xC1D0F0", VA = "0xC1D0F0", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x600159A")]
	[Address(RVA = "0xC1D17C", Offset = "0xC1D17C", VA = "0xC1D17C", Slot = "1")]
	~AkAuxSendArray()
	{
	}

	[Token(Token = "0x600159B")]
	[Address(RVA = "0xC1D1E8", Offset = "0xC1D1E8", VA = "0xC1D1E8")]
	public void Reset()
	{
	}

	[Token(Token = "0x600159C")]
	[Address(RVA = "0xC1D1F0", Offset = "0xC1D1F0", VA = "0xC1D1F0")]
	public bool Add(GameObject in_listenerGameObj, uint in_AuxBusID, float in_fValue)
	{
		return default(bool);
	}

	[Token(Token = "0x600159D")]
	[Address(RVA = "0xC1D308", Offset = "0xC1D308", VA = "0xC1D308")]
	public bool Add(uint in_AuxBusID, float in_fValue)
	{
		return default(bool);
	}

	[Token(Token = "0x600159E")]
	[Address(RVA = "0xC1D3E8", Offset = "0xC1D3E8", VA = "0xC1D3E8")]
	public bool Contains(GameObject in_listenerGameObj, uint in_AuxBusID)
	{
		return default(bool);
	}

	[Token(Token = "0x600159F")]
	[Address(RVA = "0xC1D528", Offset = "0xC1D528", VA = "0xC1D528")]
	public bool Contains(uint in_AuxBusID)
	{
		return default(bool);
	}

	[Token(Token = "0x60015A0")]
	[Address(RVA = "0xC1D620", Offset = "0xC1D620", VA = "0xC1D620")]
	public AKRESULT SetValues(GameObject gameObject)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60015A1")]
	[Address(RVA = "0xC1D6D8", Offset = "0xC1D6D8", VA = "0xC1D6D8")]
	public AKRESULT GetValues(GameObject gameObject)
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x60015A2")]
	[Address(RVA = "0xC1D7A0", Offset = "0xC1D7A0", VA = "0xC1D7A0")]
	public IntPtr GetBuffer()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015A3")]
	[Address(RVA = "0xC1D7A8", Offset = "0xC1D7A8", VA = "0xC1D7A8")]
	public int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60015A4")]
	[Address(RVA = "0xC1D00C", Offset = "0xC1D00C", VA = "0xC1D00C")]
	private IntPtr GetObjectPtr(int index)
	{
		return default(IntPtr);
	}
}
[Token(Token = "0x20001BD")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7D56E4", Offset = "0x7D56E4")]
public abstract class AkBaseArray<T> : IDisposable
{
	[Token(Token = "0x4000C94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD1DC", Offset = "0x7DD1DC")]
	private int <Capacity>k__BackingField;

	[Token(Token = "0x4000C95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private IntPtr m_Buffer;

	[Token(Token = "0x170001FA")]
	public int Capacity
	{
		[Token(Token = "0x60015A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1DF4", Offset = "0x7E1DF4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60015A9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1E04", Offset = "0x7E1E04")]
		private set
		{
		}
	}

	[Token(Token = "0x170001FB")]
	protected abstract int StructureSize
	{
		[Token(Token = "0x60015AB")]
		get;
	}

	[Token(Token = "0x170001FC")]
	public T Item
	{
		[Token(Token = "0x60015B0")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x60015B1")]
		set
		{
		}
	}

	[Token(Token = "0x60015A5")]
	public AkBaseArray(int capacity)
	{
	}

	[Token(Token = "0x60015A6")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60015A7")]
	~AkBaseArray()
	{
	}

	[Token(Token = "0x60015AA")]
	public virtual int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60015AC")]
	protected virtual void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60015AD")]
	protected virtual void ReleaseAllocatedMemoryFromReferenceAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60015AE")]
	protected abstract T CreateNewReferenceFromIntPtr(IntPtr address);

	[Token(Token = "0x60015AF")]
	protected abstract void CloneIntoReferenceFromIntPtr(IntPtr address, T other);

	[Token(Token = "0x60015B2")]
	public IntPtr GetBuffer()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015B3")]
	protected IntPtr GetObjectPtr(int index)
	{
		return default(IntPtr);
	}
}
[Token(Token = "0x20001BE")]
public class AkChannelEmitterArray : IDisposable
{
	[Token(Token = "0x4000C96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr m_Buffer;

	[Token(Token = "0x4000C97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr m_Current;

	[Token(Token = "0x4000C98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private uint m_MaxCount;

	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD1EC", Offset = "0x7DD1EC")]
	private uint <Count>k__BackingField;

	[Token(Token = "0x170001FD")]
	public uint Count
	{
		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xC24E80", Offset = "0xC24E80", VA = "0xC24E80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1E14", Offset = "0x7E1E14")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xC24E88", Offset = "0xC24E88", VA = "0xC24E88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1E24", Offset = "0x7E1E24")]
		private set
		{
		}
	}

	[Token(Token = "0x60015B4")]
	[Address(RVA = "0xC24DF0", Offset = "0xC24DF0", VA = "0xC24DF0")]
	public AkChannelEmitterArray(uint in_Count)
	{
	}

	[Token(Token = "0x60015B7")]
	[Address(RVA = "0xC24E90", Offset = "0xC24E90", VA = "0xC24E90", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60015B8")]
	[Address(RVA = "0xC24F1C", Offset = "0xC24F1C", VA = "0xC24F1C", Slot = "1")]
	~AkChannelEmitterArray()
	{
	}

	[Token(Token = "0x60015B9")]
	[Address(RVA = "0xC24F88", Offset = "0xC24F88", VA = "0xC24F88")]
	public void Reset()
	{
	}

	[Token(Token = "0x60015BA")]
	[Address(RVA = "0xC24F98", Offset = "0xC24F98", VA = "0xC24F98")]
	public void Add(Vector3 in_Pos, Vector3 in_Forward, Vector3 in_Top, uint in_ChannelMask)
	{
	}
}
[Token(Token = "0x20001BF")]
public class AkDiffractionPathInfoArray : AkBaseArray<AkDiffractionPathInfo>
{
	[Token(Token = "0x170001FE")]
	protected override int StructureSize
	{
		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xC27FC4", Offset = "0xC27FC4", VA = "0xC27FC4", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60015BB")]
	[Address(RVA = "0xC27F64", Offset = "0xC27F64", VA = "0xC27F64")]
	public AkDiffractionPathInfoArray(int count)
	{
	}

	[Token(Token = "0x60015BD")]
	[Address(RVA = "0xC28024", Offset = "0xC28024", VA = "0xC28024", Slot = "9")]
	protected override AkDiffractionPathInfo CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60015BE")]
	[Address(RVA = "0xC2808C", Offset = "0xC2808C", VA = "0xC2808C", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkDiffractionPathInfo other)
	{
	}
}
[Token(Token = "0x20001C0")]
public class AkExternalSourceInfoArray : AkBaseArray<AkExternalSourceInfo>
{
	[Token(Token = "0x170001FF")]
	protected override int StructureSize
	{
		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xAA3100", Offset = "0xAA3100", VA = "0xAA3100", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60015BF")]
	[Address(RVA = "0xAA30A0", Offset = "0xAA30A0", VA = "0xAA30A0")]
	public AkExternalSourceInfoArray(int count)
	{
	}

	[Token(Token = "0x60015C1")]
	[Address(RVA = "0xAA3160", Offset = "0xAA3160", VA = "0xAA3160", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60015C2")]
	[Address(RVA = "0xAA31C8", Offset = "0xAA31C8", VA = "0xAA31C8", Slot = "8")]
	protected override void ReleaseAllocatedMemoryFromReferenceAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60015C3")]
	[Address(RVA = "0xAA3234", Offset = "0xAA3234", VA = "0xAA3234", Slot = "9")]
	protected override AkExternalSourceInfo CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60015C4")]
	[Address(RVA = "0xAA329C", Offset = "0xAA329C", VA = "0xAA329C", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkExternalSourceInfo other)
	{
	}
}
[Token(Token = "0x20001C1")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7D571C", Offset = "0x7D571C")]
public class AkMIDIPostArray
{
	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly int m_Count;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private readonly int SIZE_OF;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr m_Buffer;

	[Token(Token = "0x17000200")]
	public AkMIDIPost Item
	{
		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xAAE894", Offset = "0xAAE894", VA = "0xAAE894")]
		get
		{
			return null;
		}
		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xAAE9B4", Offset = "0xAAE9B4", VA = "0xAAE9B4")]
		set
		{
		}
	}

	[Token(Token = "0x60015C5")]
	[Address(RVA = "0xAAE7D4", Offset = "0xAAE7D4", VA = "0xAAE7D4")]
	public AkMIDIPostArray(int size)
	{
	}

	[Token(Token = "0x60015C8")]
	[Address(RVA = "0xAAEACC", Offset = "0xAAEACC", VA = "0xAAEACC", Slot = "1")]
	~AkMIDIPostArray()
	{
	}

	[Token(Token = "0x60015C9")]
	[Address(RVA = "0xAAEB8C", Offset = "0xAAEB8C", VA = "0xAAEB8C")]
	public void PostOnEvent(uint in_eventID, GameObject gameObject)
	{
	}

	[Token(Token = "0x60015CA")]
	[Address(RVA = "0xAAEC50", Offset = "0xAAEC50", VA = "0xAAEC50")]
	public void PostOnEvent(uint in_eventID, GameObject gameObject, int count)
	{
	}

	[Token(Token = "0x60015CB")]
	[Address(RVA = "0xAAED68", Offset = "0xAAED68", VA = "0xAAED68")]
	public IntPtr GetBuffer()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60015CC")]
	[Address(RVA = "0xAAED70", Offset = "0xAAED70", VA = "0xAAED70")]
	public int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60015CD")]
	[Address(RVA = "0xAAE978", Offset = "0xAAE978", VA = "0xAAE978")]
	private IntPtr GetObjectPtr(int index)
	{
		return default(IntPtr);
	}
}
[Token(Token = "0x20001C2")]
public class AkObjectInfoArray : AkBaseArray<AkObjectInfo>
{
	[Token(Token = "0x17000201")]
	protected override int StructureSize
	{
		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xAB1FB0", Offset = "0xAB1FB0", VA = "0xAB1FB0", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60015CE")]
	[Address(RVA = "0xAB1F50", Offset = "0xAB1F50", VA = "0xAB1F50")]
	public AkObjectInfoArray(int count)
	{
	}

	[Token(Token = "0x60015D0")]
	[Address(RVA = "0xAB2010", Offset = "0xAB2010", VA = "0xAB2010", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60015D1")]
	[Address(RVA = "0xAB2078", Offset = "0xAB2078", VA = "0xAB2078", Slot = "9")]
	protected override AkObjectInfo CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60015D2")]
	[Address(RVA = "0xAB20E0", Offset = "0xAB20E0", VA = "0xAB20E0", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkObjectInfo other)
	{
	}
}
[Token(Token = "0x20001C3")]
public class AkObstructionOcclusionValuesArray : AkBaseArray<AkObstructionOcclusionValues>
{
	[Token(Token = "0x17000202")]
	protected override int StructureSize
	{
		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xAB3188", Offset = "0xAB3188", VA = "0xAB3188", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60015D3")]
	[Address(RVA = "0xAB3128", Offset = "0xAB3128", VA = "0xAB3128")]
	public AkObstructionOcclusionValuesArray(int count)
	{
	}

	[Token(Token = "0x60015D5")]
	[Address(RVA = "0xAB31E8", Offset = "0xAB31E8", VA = "0xAB31E8", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60015D6")]
	[Address(RVA = "0xAB3250", Offset = "0xAB3250", VA = "0xAB3250", Slot = "9")]
	protected override AkObstructionOcclusionValues CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60015D7")]
	[Address(RVA = "0xAB32B8", Offset = "0xAB32B8", VA = "0xAB32B8", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkObstructionOcclusionValues other)
	{
	}
}
[Token(Token = "0x20001C4")]
public class AkPositionArray : IDisposable
{
	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr m_Buffer;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr m_Current;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private uint m_MaxCount;

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD1FC", Offset = "0x7DD1FC")]
	private uint <Count>k__BackingField;

	[Token(Token = "0x17000203")]
	public uint Count
	{
		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xAB7370", Offset = "0xAB7370", VA = "0xAB7370")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1E34", Offset = "0x7E1E34")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xAB7378", Offset = "0xAB7378", VA = "0xAB7378")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1E44", Offset = "0x7E1E44")]
		private set
		{
		}
	}

	[Token(Token = "0x60015D8")]
	[Address(RVA = "0xAB72E0", Offset = "0xAB72E0", VA = "0xAB72E0")]
	public AkPositionArray(uint in_Count)
	{
	}

	[Token(Token = "0x60015DB")]
	[Address(RVA = "0xAB7380", Offset = "0xAB7380", VA = "0xAB7380", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60015DC")]
	[Address(RVA = "0xAB740C", Offset = "0xAB740C", VA = "0xAB740C", Slot = "1")]
	~AkPositionArray()
	{
	}

	[Token(Token = "0x60015DD")]
	[Address(RVA = "0xAB7478", Offset = "0xAB7478", VA = "0xAB7478")]
	public void Reset()
	{
	}

	[Token(Token = "0x60015DE")]
	[Address(RVA = "0xAB7488", Offset = "0xAB7488", VA = "0xAB7488")]
	public void Add(Vector3 in_Pos, Vector3 in_Forward, Vector3 in_Top)
	{
	}
}
[Token(Token = "0x20001C5")]
public class AkReflectionPathInfoArray : AkBaseArray<AkReflectionPathInfo>
{
	[Token(Token = "0x17000204")]
	protected override int StructureSize
	{
		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xABA754", Offset = "0xABA754", VA = "0xABA754", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60015DF")]
	[Address(RVA = "0xABA6F4", Offset = "0xABA6F4", VA = "0xABA6F4")]
	public AkReflectionPathInfoArray(int count)
	{
	}

	[Token(Token = "0x60015E1")]
	[Address(RVA = "0xABA7B4", Offset = "0xABA7B4", VA = "0xABA7B4", Slot = "9")]
	protected override AkReflectionPathInfo CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60015E2")]
	[Address(RVA = "0xABA81C", Offset = "0xABA81C", VA = "0xABA81C", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkReflectionPathInfo other)
	{
	}
}
[Token(Token = "0x20001C6")]
public class AkSourceSettingsArray : AkBaseArray<AkSourceSettings>
{
	[Token(Token = "0x17000205")]
	protected override int StructureSize
	{
		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xE043F8", Offset = "0xE043F8", VA = "0xE043F8", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60015E3")]
	[Address(RVA = "0xE04398", Offset = "0xE04398", VA = "0xE04398")]
	public AkSourceSettingsArray(int count)
	{
	}

	[Token(Token = "0x60015E5")]
	[Address(RVA = "0xE04458", Offset = "0xE04458", VA = "0xE04458", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60015E6")]
	[Address(RVA = "0xE044C0", Offset = "0xE044C0", VA = "0xE044C0", Slot = "9")]
	protected override AkSourceSettings CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60015E7")]
	[Address(RVA = "0xE04528", Offset = "0xE04528", VA = "0xE04528", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkSourceSettings other)
	{
	}
}
[Token(Token = "0x20001C7")]
public class AkTriangleArray : AkBaseArray<AkTriangle>
{
	[Token(Token = "0x17000206")]
	protected override int StructureSize
	{
		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xE093F0", Offset = "0xE093F0", VA = "0xE093F0", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60015E8")]
	[Address(RVA = "0xE07104", Offset = "0xE07104", VA = "0xE07104")]
	public AkTriangleArray(int count)
	{
	}

	[Token(Token = "0x60015EA")]
	[Address(RVA = "0xE09450", Offset = "0xE09450", VA = "0xE09450", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60015EB")]
	[Address(RVA = "0xE094B8", Offset = "0xE094B8", VA = "0xE094B8", Slot = "9")]
	protected override AkTriangle CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60015EC")]
	[Address(RVA = "0xE09520", Offset = "0xE09520", VA = "0xE09520", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkTriangle other)
	{
	}
}
[Token(Token = "0x20001C8")]
public class AkVertexArray : AkBaseArray<AkVertex>
{
	[Token(Token = "0x17000207")]
	protected override int StructureSize
	{
		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xE0BE94", Offset = "0xE0BE94", VA = "0xE0BE94", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60015ED")]
	[Address(RVA = "0xE06F30", Offset = "0xE06F30", VA = "0xE06F30")]
	public AkVertexArray(int count)
	{
	}

	[Token(Token = "0x60015EF")]
	[Address(RVA = "0xE0BEF4", Offset = "0xE0BEF4", VA = "0xE0BEF4", Slot = "7")]
	protected override void DefaultConstructAtIntPtr(IntPtr address)
	{
	}

	[Token(Token = "0x60015F0")]
	[Address(RVA = "0xE0BF5C", Offset = "0xE0BF5C", VA = "0xE0BF5C", Slot = "9")]
	protected override AkVertex CreateNewReferenceFromIntPtr(IntPtr address)
	{
		return null;
	}

	[Token(Token = "0x60015F1")]
	[Address(RVA = "0xE0BFC4", Offset = "0xE0BFC4", VA = "0xE0BFC4", Slot = "10")]
	protected override void CloneIntoReferenceFromIntPtr(IntPtr address, AkVertex other)
	{
	}
}
[Token(Token = "0x20001C9")]
public class WwiseAcousticTextureReference : WwiseObjectReference
{
	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x17000208")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x60015F2")]
		[Address(RVA = "0x160947C", Offset = "0x160947C", VA = "0x160947C", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x60015F3")]
	[Address(RVA = "0x16094E4", Offset = "0x16094E4", VA = "0x16094E4")]
	public WwiseAcousticTextureReference()
	{
	}
}
[Token(Token = "0x20001CA")]
public class WwiseAuxBusReference : WwiseObjectReference
{
	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x17000209")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x60015F5")]
		[Address(RVA = "0x16095A8", Offset = "0x16095A8", VA = "0x16095A8", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x60015F6")]
	[Address(RVA = "0x1609610", Offset = "0x1609610", VA = "0x1609610")]
	public WwiseAuxBusReference()
	{
	}
}
[Token(Token = "0x20001CB")]
public class WwiseBankReference : WwiseObjectReference
{
	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x1700020A")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x60015F8")]
		[Address(RVA = "0x1609668", Offset = "0x1609668", VA = "0x1609668", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x60015F9")]
	[Address(RVA = "0x16096D0", Offset = "0x16096D0", VA = "0x16096D0")]
	public WwiseBankReference()
	{
	}
}
[Token(Token = "0x20001CC")]
public class WwiseEventReference : WwiseObjectReference
{
	[Token(Token = "0x4000CA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x1700020B")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x60015FB")]
		[Address(RVA = "0x1609728", Offset = "0x1609728", VA = "0x1609728", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x60015FC")]
	[Address(RVA = "0x1609790", Offset = "0x1609790", VA = "0x1609790")]
	public WwiseEventReference()
	{
	}
}
[Token(Token = "0x20001CD")]
public abstract class WwiseObjectReference : ScriptableObject
{
	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AkShowOnly]
	[SerializeField]
	private string objectName;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AkShowOnly]
	[SerializeField]
	private uint id;

	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AkShowOnly]
	[SerializeField]
	private string guid;

	[Token(Token = "0x1700020C")]
	public Guid Guid
	{
		[Token(Token = "0x60015FE")]
		[Address(RVA = "0x16098A8", Offset = "0x16098A8", VA = "0x16098A8")]
		get
		{
			return default(Guid);
		}
	}

	[Token(Token = "0x1700020D")]
	public string ObjectName
	{
		[Token(Token = "0x60015FF")]
		[Address(RVA = "0x160994C", Offset = "0x160994C", VA = "0x160994C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700020E")]
	public virtual string DisplayName
	{
		[Token(Token = "0x6001600")]
		[Address(RVA = "0x1609954", Offset = "0x1609954", VA = "0x1609954", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700020F")]
	public uint Id
	{
		[Token(Token = "0x6001601")]
		[Address(RVA = "0x160995C", Offset = "0x160995C", VA = "0x160995C")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000210")]
	public abstract WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001602")]
		get;
	}

	[Token(Token = "0x6001603")]
	[Address(RVA = "0x16094E8", Offset = "0x16094E8", VA = "0x16094E8")]
	protected WwiseObjectReference()
	{
	}
}
[Token(Token = "0x20001CE")]
public abstract class WwiseGroupValueObjectReference : WwiseObjectReference
{
	[Token(Token = "0x17000211")]
	public abstract WwiseObjectReference GroupObjectReference
	{
		[Token(Token = "0x6001604")]
		get;
		[Token(Token = "0x6001605")]
		set;
	}

	[Token(Token = "0x17000212")]
	public abstract WwiseObjectType GroupWwiseObjectType
	{
		[Token(Token = "0x6001606")]
		get;
	}

	[Token(Token = "0x17000213")]
	public override string DisplayName
	{
		[Token(Token = "0x6001607")]
		[Address(RVA = "0x16097E8", Offset = "0x16097E8", VA = "0x16097E8", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001608")]
	[Address(RVA = "0x16098A4", Offset = "0x16098A4", VA = "0x16098A4")]
	protected WwiseGroupValueObjectReference()
	{
	}
}
[Token(Token = "0x20001CF")]
public enum WwiseObjectType
{
	[Token(Token = "0x4000CA9")]
	None,
	[Token(Token = "0x4000CAA")]
	AuxBus,
	[Token(Token = "0x4000CAB")]
	Bus,
	[Token(Token = "0x4000CAC")]
	Event,
	[Token(Token = "0x4000CAD")]
	Folder,
	[Token(Token = "0x4000CAE")]
	PhysicalFolder,
	[Token(Token = "0x4000CAF")]
	Project,
	[Token(Token = "0x4000CB0")]
	Soundbank,
	[Token(Token = "0x4000CB1")]
	State,
	[Token(Token = "0x4000CB2")]
	StateGroup,
	[Token(Token = "0x4000CB3")]
	Switch,
	[Token(Token = "0x4000CB4")]
	SwitchGroup,
	[Token(Token = "0x4000CB5")]
	WorkUnit,
	[Token(Token = "0x4000CB6")]
	GameParameter,
	[Token(Token = "0x4000CB7")]
	Trigger,
	[Token(Token = "0x4000CB8")]
	AcousticTexture
}
[Token(Token = "0x20001D0")]
public class WwiseRtpcReference : WwiseObjectReference
{
	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x17000214")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001609")]
		[Address(RVA = "0x1609964", Offset = "0x1609964", VA = "0x1609964", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x600160A")]
	[Address(RVA = "0x16099CC", Offset = "0x16099CC", VA = "0x16099CC")]
	public WwiseRtpcReference()
	{
	}
}
[Token(Token = "0x20001D1")]
public class WwiseStateGroupReference : WwiseObjectReference
{
	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x17000215")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x600160C")]
		[Address(RVA = "0x1609A24", Offset = "0x1609A24", VA = "0x1609A24", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x600160D")]
	[Address(RVA = "0x1609A8C", Offset = "0x1609A8C", VA = "0x1609A8C")]
	public WwiseStateGroupReference()
	{
	}
}
[Token(Token = "0x20001D2")]
public class WwiseStateReference : WwiseGroupValueObjectReference
{
	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly WwiseObjectType MyGroupWwiseObjectType;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AkShowOnly]
	[SerializeField]
	private WwiseStateGroupReference WwiseStateGroupReference;

	[Token(Token = "0x17000216")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x600160F")]
		[Address(RVA = "0x1609AE4", Offset = "0x1609AE4", VA = "0x1609AE4", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x17000217")]
	public override WwiseObjectReference GroupObjectReference
	{
		[Token(Token = "0x6001610")]
		[Address(RVA = "0x1609B4C", Offset = "0x1609B4C", VA = "0x1609B4C", Slot = "6")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001611")]
		[Address(RVA = "0x1609B54", Offset = "0x1609B54", VA = "0x1609B54", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x17000218")]
	public override WwiseObjectType GroupWwiseObjectType
	{
		[Token(Token = "0x6001612")]
		[Address(RVA = "0x1609BE4", Offset = "0x1609BE4", VA = "0x1609BE4", Slot = "8")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x6001613")]
	[Address(RVA = "0x1609C4C", Offset = "0x1609C4C", VA = "0x1609C4C")]
	public WwiseStateReference()
	{
	}
}
[Token(Token = "0x20001D3")]
public class WwiseSwitchGroupReference : WwiseObjectReference
{
	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x17000219")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001615")]
		[Address(RVA = "0x1609CB4", Offset = "0x1609CB4", VA = "0x1609CB4", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x6001616")]
	[Address(RVA = "0x1609D1C", Offset = "0x1609D1C", VA = "0x1609D1C")]
	public WwiseSwitchGroupReference()
	{
	}
}
[Token(Token = "0x20001D4")]
public class WwiseSwitchReference : WwiseGroupValueObjectReference
{
	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly WwiseObjectType MyGroupWwiseObjectType;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AkShowOnly]
	[SerializeField]
	private WwiseSwitchGroupReference WwiseSwitchGroupReference;

	[Token(Token = "0x1700021A")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x6001618")]
		[Address(RVA = "0x1609D74", Offset = "0x1609D74", VA = "0x1609D74", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x1700021B")]
	public override WwiseObjectReference GroupObjectReference
	{
		[Token(Token = "0x6001619")]
		[Address(RVA = "0x1609DDC", Offset = "0x1609DDC", VA = "0x1609DDC", Slot = "6")]
		get
		{
			return null;
		}
		[Token(Token = "0x600161A")]
		[Address(RVA = "0x1609DE4", Offset = "0x1609DE4", VA = "0x1609DE4", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x1700021C")]
	public override WwiseObjectType GroupWwiseObjectType
	{
		[Token(Token = "0x600161B")]
		[Address(RVA = "0x1609E74", Offset = "0x1609E74", VA = "0x1609E74", Slot = "8")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x600161C")]
	[Address(RVA = "0x1609EDC", Offset = "0x1609EDC", VA = "0x1609EDC")]
	public WwiseSwitchReference()
	{
	}
}
[Token(Token = "0x20001D5")]
public class WwiseTriggerReference : WwiseObjectReference
{
	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly WwiseObjectType MyWwiseObjectType;

	[Token(Token = "0x1700021D")]
	public override WwiseObjectType WwiseObjectType
	{
		[Token(Token = "0x600161E")]
		[Address(RVA = "0x1609F44", Offset = "0x1609F44", VA = "0x1609F44", Slot = "5")]
		get
		{
			return default(WwiseObjectType);
		}
	}

	[Token(Token = "0x600161F")]
	[Address(RVA = "0x1609FAC", Offset = "0x1609FAC", VA = "0x1609FAC")]
	public WwiseTriggerReference()
	{
	}
}
[Token(Token = "0x20001D6")]
public class AkMacSettings : AkWwiseInitializationSettings.CommonPlatformSettings
{
	[Token(Token = "0x6001621")]
	[Address(RVA = "0xAAED78", Offset = "0xAAED78", VA = "0xAAED78")]
	public AkMacSettings()
	{
	}
}
[Token(Token = "0x20001D7")]
public class AkWindowsSettings : AkWwiseInitializationSettings.PlatformSettings
{
	[Serializable]
	[Token(Token = "0x2000446")]
	public class PlatformAdvancedSettings : AkCommonAdvancedSettings
	{
		[Token(Token = "0x20004F4")]
		public enum AudioAPI
		{
			[Token(Token = "0x4002466")]
			None = 0,
			[Token(Token = "0x4002467")]
			Wasapi = 1,
			[Token(Token = "0x4002468")]
			XAudio2 = 2,
			[Token(Token = "0x4002469")]
			DirectSound = 4,
			[Token(Token = "0x400246A")]
			Default = -1
		}

		[Token(Token = "0x400219F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E08C4", Offset = "0x7E08C4")]
		[AttributeAttribute(Name = "AkEnumFlagAttribute", RVA = "0x7E08C4", Offset = "0x7E08C4")]
		public AudioAPI m_AudioAPI;

		[Token(Token = "0x40021A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7E094C", Offset = "0x7E094C")]
		public bool m_GlobalFocus;

		[Token(Token = "0x60024EA")]
		[Address(RVA = "0xE0C148", Offset = "0xE0C148", VA = "0xE0C148", Slot = "7")]
		public override void CopyTo(AkPlatformInitSettings settings)
		{
		}

		[Token(Token = "0x60024EB")]
		[Address(RVA = "0xE0C14C", Offset = "0xE0C14C", VA = "0xE0C14C")]
		public PlatformAdvancedSettings()
		{
		}
	}

	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public AkCommonUserSettings UserSettings;

	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public PlatformAdvancedSettings AdvancedSettings;

	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public AkCommonCommSettings CommsSettings;

	[Token(Token = "0x6001622")]
	[Address(RVA = "0xE0C068", Offset = "0xE0C068", VA = "0xE0C068", Slot = "12")]
	protected override AkCommonUserSettings GetUserSettings()
	{
		return null;
	}

	[Token(Token = "0x6001623")]
	[Address(RVA = "0xE0C070", Offset = "0xE0C070", VA = "0xE0C070", Slot = "13")]
	protected override AkCommonAdvancedSettings GetAdvancedSettings()
	{
		return null;
	}

	[Token(Token = "0x6001624")]
	[Address(RVA = "0xE0C078", Offset = "0xE0C078", VA = "0xE0C078", Slot = "14")]
	protected override AkCommonCommSettings GetCommsSettings()
	{
		return null;
	}

	[Token(Token = "0x6001625")]
	[Address(RVA = "0xE0C080", Offset = "0xE0C080", VA = "0xE0C080")]
	public AkWindowsSettings()
	{
	}
}
[Token(Token = "0x20001D8")]
public enum MultiPositionTypeLabel
{
	[Token(Token = "0x4000CC7")]
	Simple_Mode,
	[Token(Token = "0x4000CC8")]
	Large_Mode,
	[Token(Token = "0x4000CC9")]
	MultiPosition_Mode
}
[Token(Token = "0x20001D9")]
public class AkMultiPosEvent
{
	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool eventIsPlaying;

	[Token(Token = "0x4000CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AkAmbient> list;

	[Token(Token = "0x6001626")]
	[Address(RVA = "0xAB0624", Offset = "0xAB0624", VA = "0xAB0624")]
	public void FinishedPlaying(object in_cookie, AkCallbackType in_type, object in_info)
	{
	}

	[Token(Token = "0x6001627")]
	[Address(RVA = "0xAB062C", Offset = "0xAB062C", VA = "0xAB062C")]
	public AkMultiPosEvent()
	{
	}
}
[Token(Token = "0x20001DA")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5754", Offset = "0x7D5754")]
public class AkAmbient : AkEvent
{
	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<uint, AkMultiPosEvent> multiPosEventTree;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AkMultiPositionType MultiPositionType;

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public MultiPositionTypeLabel multiPositionTypeLabel;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AkAmbientLargeModePositioner[] LargeModePositions;

	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	[SerializeField]
	public List<Vector3> multiPositionArray;

	[Token(Token = "0x6001628")]
	[Address(RVA = "0xC17D78", Offset = "0xC17D78", VA = "0xC17D78")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001629")]
	[Address(RVA = "0xC18200", Offset = "0xC18200", VA = "0xC18200", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600162A")]
	[Address(RVA = "0xC186DC", Offset = "0xC186DC", VA = "0xC186DC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600162B")]
	[Address(RVA = "0xC188B0", Offset = "0xC188B0", VA = "0xC188B0", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x600162C")]
	[Address(RVA = "0xC18CE0", Offset = "0xC18CE0", VA = "0xC18CE0")]
	public void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600162D")]
	[Address(RVA = "0xC18030", Offset = "0xC18030", VA = "0xC18030")]
	public AkPositionArray BuildMultiDirectionArray(AkMultiPosEvent eventPosList)
	{
		return null;
	}

	[Token(Token = "0x600162E")]
	[Address(RVA = "0xC18444", Offset = "0xC18444", VA = "0xC18444")]
	private AkPositionArray BuildAkPositionArray()
	{
		return null;
	}

	[Token(Token = "0x600162F")]
	[Address(RVA = "0xC18DBC", Offset = "0xC18DBC", VA = "0xC18DBC")]
	public AkAmbient()
	{
	}
}
[Token(Token = "0x20001DB")]
public class AkAmbientLargeModePositioner : MonoBehaviour
{
	[Token(Token = "0x1700021E")]
	public Vector3 Position
	{
		[Token(Token = "0x6001631")]
		[Address(RVA = "0xC18D50", Offset = "0xC18D50", VA = "0xC18D50")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700021F")]
	public Vector3 Forward
	{
		[Token(Token = "0x6001632")]
		[Address(RVA = "0xC18D74", Offset = "0xC18D74", VA = "0xC18D74")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000220")]
	public Vector3 Up
	{
		[Token(Token = "0x6001633")]
		[Address(RVA = "0xC18D98", Offset = "0xC18D98", VA = "0xC18D98")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6001634")]
	[Address(RVA = "0xC18ED0", Offset = "0xC18ED0", VA = "0xC18ED0")]
	public AkAmbientLargeModePositioner()
	{
	}
}
[Token(Token = "0x20001DC")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D578C", Offset = "0x7D578C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D578C", Offset = "0x7D578C")]
[DisallowMultipleComponent]
public class AkAudioListener : MonoBehaviour
{
	[Token(Token = "0x2000447")]
	public class BaseListenerList
	{
		[Token(Token = "0x40021A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<ulong> listenerIdList;

		[Token(Token = "0x40021A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<AkAudioListener> listenerList;

		[Token(Token = "0x170003A0")]
		public List<AkAudioListener> ListenerList
		{
			[Token(Token = "0x60024EC")]
			[Address(RVA = "0xC1C1B0", Offset = "0xC1C1B0", VA = "0xC1C1B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024ED")]
		[Address(RVA = "0xC1C1B8", Offset = "0xC1C1B8", VA = "0xC1C1B8", Slot = "4")]
		public virtual bool Add(AkAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x60024EE")]
		[Address(RVA = "0xC1C2AC", Offset = "0xC1C2AC", VA = "0xC1C2AC", Slot = "5")]
		public virtual bool Remove(AkAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x60024EF")]
		[Address(RVA = "0xC1C3A0", Offset = "0xC1C3A0", VA = "0xC1C3A0")]
		public ulong[] GetListenerIds()
		{
			return null;
		}

		[Token(Token = "0x60024F0")]
		[Address(RVA = "0xC1C3F8", Offset = "0xC1C3F8", VA = "0xC1C3F8")]
		public BaseListenerList()
		{
		}
	}

	[Token(Token = "0x2000448")]
	public class DefaultListenerList : BaseListenerList
	{
		[Token(Token = "0x60024F1")]
		[Address(RVA = "0xC1C490", Offset = "0xC1C490", VA = "0xC1C490", Slot = "4")]
		public override bool Add(AkAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F2")]
		[Address(RVA = "0xC1C568", Offset = "0xC1C568", VA = "0xC1C568", Slot = "5")]
		public override bool Remove(AkAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F3")]
		[Address(RVA = "0xC1C1AC", Offset = "0xC1C1AC", VA = "0xC1C1AC")]
		public DefaultListenerList()
		{
		}
	}

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly DefaultListenerList defaultListeners;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong akGameObjectID;

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<AkGameObj> EmittersToStartListeningTo;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<AkGameObj> EmittersToStopListeningTo;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isDefaultListener;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	public int listenerId;

	[Token(Token = "0x17000221")]
	public static DefaultListenerList DefaultListeners
	{
		[Token(Token = "0x6001635")]
		[Address(RVA = "0xC1B954", Offset = "0xC1B954", VA = "0xC1B954")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001636")]
	[Address(RVA = "0xC1B9BC", Offset = "0xC1B9BC", VA = "0xC1B9BC")]
	public void StartListeningToEmitter(AkGameObj emitter)
	{
	}

	[Token(Token = "0x6001637")]
	[Address(RVA = "0xC1BA40", Offset = "0xC1BA40", VA = "0xC1BA40")]
	public void StopListeningToEmitter(AkGameObj emitter)
	{
	}

	[Token(Token = "0x6001638")]
	[Address(RVA = "0xC1BAC4", Offset = "0xC1BAC4", VA = "0xC1BAC4")]
	public void SetIsDefaultListener(bool isDefault)
	{
	}

	[Token(Token = "0x6001639")]
	[Address(RVA = "0xC1BC24", Offset = "0xC1BC24", VA = "0xC1BC24")]
	private void Awake()
	{
	}

	[Token(Token = "0x600163A")]
	[Address(RVA = "0xC1BD0C", Offset = "0xC1BD0C", VA = "0xC1BD0C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600163B")]
	[Address(RVA = "0xC1BDE8", Offset = "0xC1BDE8", VA = "0xC1BDE8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600163C")]
	[Address(RVA = "0xC1BEC4", Offset = "0xC1BEC4", VA = "0xC1BEC4")]
	private void Update()
	{
	}

	[Token(Token = "0x600163D")]
	[Address(RVA = "0xC1BFD8", Offset = "0xC1BFD8", VA = "0xC1BFD8")]
	public ulong GetAkGameObjectID()
	{
		return default(ulong);
	}

	[Token(Token = "0x600163E")]
	[Address(RVA = "0xC1BFE0", Offset = "0xC1BFE0", VA = "0xC1BFE0")]
	public void Migrate14()
	{
	}

	[Token(Token = "0x600163F")]
	[Address(RVA = "0xC1C0A4", Offset = "0xC1C0A4", VA = "0xC1C0A4")]
	public AkAudioListener()
	{
	}
}
[Token(Token = "0x20001DD")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5824", Offset = "0x7D5824")]
[ExecuteInEditMode]
public class AkBank : AkTriggerHandler
{
	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Bank data;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool decodeBank;

	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool loadAsynchronous;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool saveDecodedBank;

	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<int> unloadTriggerList;

	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DD39C", Offset = "0x7DD39C")]
	private string bankNameInternal;

	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DD3F8", Offset = "0x7DD3F8")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x17000222")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E44E8", Offset = "0x7E44E8")]
	public string bankName
	{
		[Token(Token = "0x6001646")]
		[Address(RVA = "0xC1E140", Offset = "0xC1E140", VA = "0xC1E140")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000223")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4520", Offset = "0x7E4520")]
	public byte[] valueGuid
	{
		[Token(Token = "0x6001647")]
		[Address(RVA = "0xC1E1B0", Offset = "0xC1E1B0", VA = "0xC1E1B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001641")]
	[Address(RVA = "0xC1DE98", Offset = "0xC1DE98", VA = "0xC1DE98", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001642")]
	[Address(RVA = "0xC1DF90", Offset = "0xC1DF90", VA = "0xC1DF90", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001643")]
	[Address(RVA = "0xC1E01C", Offset = "0xC1E01C", VA = "0xC1E01C", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001644")]
	[Address(RVA = "0xC1DF74", Offset = "0xC1DF74", VA = "0xC1DF74")]
	public void UnloadBank(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001645")]
	[Address(RVA = "0xC1E064", Offset = "0xC1E064", VA = "0xC1E064", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001648")]
	[Address(RVA = "0xC1E278", Offset = "0xC1E278", VA = "0xC1E278")]
	public AkBank()
	{
	}
}
[Token(Token = "0x20001DE")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5870", Offset = "0x7D5870")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5870", Offset = "0x7D5870")]
public class AkEmitterObstructionOcclusion : AkObstructionOcclusion
{
	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AkGameObj m_gameObj;

	[Token(Token = "0x6001649")]
	[Address(RVA = "0xC28D64", Offset = "0xC28D64", VA = "0xC28D64")]
	private void Awake()
	{
	}

	[Token(Token = "0x600164A")]
	[Address(RVA = "0xC28DC8", Offset = "0xC28DC8", VA = "0xC28DC8", Slot = "4")]
	protected override void UpdateCurrentListenerList()
	{
	}

	[Token(Token = "0x600164B")]
	[Address(RVA = "0xC28F64", Offset = "0xC28F64", VA = "0xC28F64", Slot = "5")]
	protected override void SetObstructionOcclusion(KeyValuePair<AkAudioListener, ObstructionOcclusionValue> ObsOccPair)
	{
	}

	[Token(Token = "0x600164C")]
	[Address(RVA = "0xC290A0", Offset = "0xC290A0", VA = "0xC290A0")]
	public AkEmitterObstructionOcclusion()
	{
	}
}
[Token(Token = "0x20001DF")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D58F8", Offset = "0x7D58F8")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D58F8", Offset = "0x7D58F8")]
[ExecuteInEditMode]
public class AkEnvironment : MonoBehaviour
{
	[Token(Token = "0x2000449")]
	public class AkEnvironment_CompareByPriority : IComparer<AkEnvironment>
	{
		[Token(Token = "0x60024F4")]
		[Address(RVA = "0xC29F54", Offset = "0xC29F54", VA = "0xC29F54", Slot = "5")]
		public virtual int Compare(AkEnvironment a, AkEnvironment b)
		{
			return default(int);
		}

		[Token(Token = "0x60024F5")]
		[Address(RVA = "0xC29F44", Offset = "0xC29F44", VA = "0xC29F44")]
		public AkEnvironment_CompareByPriority()
		{
		}
	}

	[Token(Token = "0x200044A")]
	public class AkEnvironment_CompareBySelectionAlgorithm : AkEnvironment_CompareByPriority
	{
		[Token(Token = "0x60024F6")]
		[Address(RVA = "0xC29FF8", Offset = "0xC29FF8", VA = "0xC29FF8", Slot = "5")]
		public override int Compare(AkEnvironment a, AkEnvironment b)
		{
			return default(int);
		}

		[Token(Token = "0x60024F7")]
		[Address(RVA = "0xC29F4C", Offset = "0xC29F4C", VA = "0xC29F4C")]
		public AkEnvironment_CompareBySelectionAlgorithm()
		{
		}
	}

	[Token(Token = "0x4000CDF")]
	public const int MAX_NB_ENVIRONMENTS = 4;

	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AkEnvironment_CompareByPriority s_compareByPriority;

	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static AkEnvironment_CompareBySelectionAlgorithm s_compareBySelectionAlgorithm;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool excludeOthers;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isDefault;

	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AuxBus data;

	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD454", Offset = "0x7DD454")]
	private Collider <Collider>k__BackingField;

	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int priority;

	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DD464", Offset = "0x7DD464")]
	private int auxBusIdInternal;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DD4C0", Offset = "0x7DD4C0")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x17000224")]
	public Collider Collider
	{
		[Token(Token = "0x600164D")]
		[Address(RVA = "0xC29CE0", Offset = "0xC29CE0", VA = "0xC29CE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1E54", Offset = "0x7E1E54")]
		get
		{
			return null;
		}
		[Token(Token = "0x600164E")]
		[Address(RVA = "0xC29CE8", Offset = "0xC29CE8", VA = "0xC29CE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1E64", Offset = "0x7E1E64")]
		private set
		{
		}
	}

	[Token(Token = "0x17000225")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4558", Offset = "0x7E4558")]
	public int m_auxBusID
	{
		[Token(Token = "0x6001650")]
		[Address(RVA = "0xC29D48", Offset = "0xC29D48", VA = "0xC29D48")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000226")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4590", Offset = "0x7E4590")]
	public byte[] valueGuid
	{
		[Token(Token = "0x6001651")]
		[Address(RVA = "0xC29D5C", Offset = "0xC29D5C", VA = "0xC29D5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600164F")]
	[Address(RVA = "0xC29CF0", Offset = "0xC29CF0", VA = "0xC29CF0")]
	public void Awake()
	{
	}

	[Token(Token = "0x6001652")]
	[Address(RVA = "0xC29E24", Offset = "0xC29E24", VA = "0xC29E24")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E1E74", Offset = "0x7E1E74")]
	public uint GetAuxBusID()
	{
		return default(uint);
	}

	[Token(Token = "0x6001653")]
	[Address(RVA = "0xC29E40", Offset = "0xC29E40", VA = "0xC29E40")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E1EAC", Offset = "0x7E1EAC")]
	public Collider GetCollider()
	{
		return null;
	}

	[Token(Token = "0x6001654")]
	[Address(RVA = "0xC29E48", Offset = "0xC29E48", VA = "0xC29E48")]
	public AkEnvironment()
	{
	}
}
[Token(Token = "0x20001E0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5990", Offset = "0x7D5990")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5990", Offset = "0x7D5990")]
[ExecuteInEditMode]
public class AkEnvironmentPortal : MonoBehaviour
{
	[Token(Token = "0x4000CE9")]
	public const int MAX_ENVIRONMENTS_PER_PORTAL = 2;

	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 axis;

	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AkEnvironment[] environments;

	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BoxCollider m_BoxCollider;

	[Token(Token = "0x17000227")]
	private BoxCollider BoxCollider
	{
		[Token(Token = "0x6001656")]
		[Address(RVA = "0xC2A058", Offset = "0xC2A058", VA = "0xC2A058")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000228")]
	public bool EnvironmentsShareAuxBus
	{
		[Token(Token = "0x6001657")]
		[Address(RVA = "0xC2A0EC", Offset = "0xC2A0EC", VA = "0xC2A0EC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001658")]
	[Address(RVA = "0xC2A29C", Offset = "0xC2A29C", VA = "0xC2A29C")]
	public float GetAuxSendValueForPosition(Vector3 in_position, int index)
	{
		return default(float);
	}

	[Token(Token = "0x6001659")]
	[Address(RVA = "0xC2A530", Offset = "0xC2A530", VA = "0xC2A530")]
	public AkEnvironmentPortal()
	{
	}
}
[Token(Token = "0x20001E1")]
public class AkEventCallbackMsg
{
	[Token(Token = "0x4000CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AkCallbackInfo info;

	[Token(Token = "0x4000CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject sender;

	[Token(Token = "0x4000CEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AkCallbackType type;

	[Token(Token = "0x600165A")]
	[Address(RVA = "0xC2A5C8", Offset = "0xC2A5C8", VA = "0xC2A5C8")]
	public AkEventCallbackMsg()
	{
	}
}
[Token(Token = "0x20001E2")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5A28", Offset = "0x7D5A28")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5A28", Offset = "0x7D5A28")]
public class AkEvent : AkDragDropTriggerHandler
{
	[Serializable]
	[Token(Token = "0x200044B")]
	public class CallbackData
	{
		[Token(Token = "0x40021A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CallbackFlags Flags;

		[Token(Token = "0x40021A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string FunctionName;

		[Token(Token = "0x40021A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject GameObject;

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0xC2A68C", Offset = "0xC2A68C", VA = "0xC2A68C")]
		public void CallFunction(AkEventCallbackMsg eventCallbackMsg)
		{
		}

		[Token(Token = "0x60024F9")]
		[Address(RVA = "0xC2A874", Offset = "0xC2A874", VA = "0xC2A874")]
		public CallbackData()
		{
		}
	}

	[Token(Token = "0x4000CF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public AkActionOnEventType actionOnEventType;

	[Token(Token = "0x4000CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AkCurveInterpolation curveInterpolation;

	[Token(Token = "0x4000CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool enableActionOnEvent;

	[Token(Token = "0x4000CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AK.Wwise.Event data;

	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool useCallbacks;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<CallbackData> Callbacks;

	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public uint playingId;

	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject soundEmitterObject;

	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float transitionDuration;

	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AkEventCallbackMsg EventCallbackMsg;

	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DD51C", Offset = "0x7DD51C")]
	private int eventIdInternal;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DD578", Offset = "0x7DD578")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DD5D4", Offset = "0x7DD5D4")]
	private AkEventCallbackData m_callbackDataInternal;

	[Token(Token = "0x17000229")]
	protected override BaseType WwiseType
	{
		[Token(Token = "0x600165B")]
		[Address(RVA = "0xC2A5C0", Offset = "0xC2A5C0", VA = "0xC2A5C0", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022A")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E45C8", Offset = "0x7E45C8")]
	public int eventID
	{
		[Token(Token = "0x6001661")]
		[Address(RVA = "0xC2A790", Offset = "0xC2A790", VA = "0xC2A790")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700022B")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4600", Offset = "0x7E4600")]
	public byte[] valueGuid
	{
		[Token(Token = "0x6001662")]
		[Address(RVA = "0xC2A7A4", Offset = "0xC2A7A4", VA = "0xC2A7A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4638", Offset = "0x7E4638")]
	public AkEventCallbackData m_callbackData
	{
		[Token(Token = "0x6001663")]
		[Address(RVA = "0xC2A86C", Offset = "0xC2A86C", VA = "0xC2A86C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600165C")]
	[Address(RVA = "0xC183B8", Offset = "0xC183B8", VA = "0xC183B8", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600165D")]
	[Address(RVA = "0xC2A5D0", Offset = "0xC2A5D0", VA = "0xC2A5D0")]
	private void Callback(object in_cookie, AkCallbackType in_type, AkCallbackInfo in_info)
	{
	}

	[Token(Token = "0x600165E")]
	[Address(RVA = "0xC18A64", Offset = "0xC18A64", VA = "0xC18A64", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x600165F")]
	[Address(RVA = "0xC2A754", Offset = "0xC2A754", VA = "0xC2A754")]
	public void Stop(int _transitionDuration)
	{
	}

	[Token(Token = "0x6001660")]
	[Address(RVA = "0xC2A75C", Offset = "0xC2A75C", VA = "0xC2A75C")]
	public void Stop(int _transitionDuration, AkCurveInterpolation _curveInterpolation)
	{
	}

	[Token(Token = "0x6001664")]
	[Address(RVA = "0xC18DC8", Offset = "0xC18DC8", VA = "0xC18DC8")]
	public AkEvent()
	{
	}
}
[Token(Token = "0x20001E3")]
public class AkEventCallbackData : ScriptableObject
{
	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<int> callbackFlags;

	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> callbackFunc;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> callbackGameObj;

	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int uFlags;

	[Token(Token = "0x6001665")]
	[Address(RVA = "0xC2A87C", Offset = "0xC2A87C", VA = "0xC2A87C")]
	public AkEventCallbackData()
	{
	}
}
[Token(Token = "0x20001E4")]
public class AkEventPlayable : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AK.Wwise.Event akEvent;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AkCurveInterpolation blendInCurve;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private AkCurveInterpolation blendOutCurve;

	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ExposedReference<GameObject> emitterObjectRef;

	[Token(Token = "0x4000D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float eventDurationMax;

	[Token(Token = "0x4000D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float eventDurationMin;

	[NonSerialized]
	[Token(Token = "0x4000D07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TimelineClip owningClip;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool retriggerEvent;

	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool UseWwiseEventDuration;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[SerializeField]
	private bool StopEventAtClipEnd;

	[Token(Token = "0x1700022D")]
	private ClipCaps UnityEngine.Timeline.ITimelineClipAsset.clipCaps
	{
		[Token(Token = "0x6001666")]
		[Address(RVA = "0xC2AA6C", Offset = "0xC2AA6C", VA = "0xC2AA6C", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6001667")]
	[Address(RVA = "0xC2AA74", Offset = "0xC2AA74", VA = "0xC2AA74", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6001668")]
	[Address(RVA = "0xC2ACE8", Offset = "0xC2ACE8", VA = "0xC2ACE8")]
	public AkEventPlayable()
	{
	}
}
[Token(Token = "0x20001E5")]
public class AkEventPlayableBehavior : PlayableBehaviour
{
	[Token(Token = "0x200044C")]
	[Flags]
	private enum Actions
	{
		[Token(Token = "0x40021A7")]
		None = 0,
		[Token(Token = "0x40021A8")]
		Playback = 1,
		[Token(Token = "0x40021A9")]
		Retrigger = 2,
		[Token(Token = "0x40021AA")]
		DelayedStop = 4,
		[Token(Token = "0x40021AB")]
		Seek = 8,
		[Token(Token = "0x40021AC")]
		FadeIn = 0x10,
		[Token(Token = "0x40021AD")]
		FadeOut = 0x20
	}

	[Token(Token = "0x4000D0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float currentDuration;

	[Token(Token = "0x4000D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float currentDurationProportion;

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool eventIsPlaying;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool fadeinTriggered;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool fadeoutTriggered;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float previousEventStartTime;

	[Token(Token = "0x4000D11")]
	private const uint CallbackFlags = 9u;

	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Actions requiredActions;

	[Token(Token = "0x4000D13")]
	private const int scrubPlaybackLengthMs = 100;

	[Token(Token = "0x4000D14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AK.Wwise.Event akEvent;

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float eventDurationMax;

	[Token(Token = "0x4000D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float eventDurationMin;

	[Token(Token = "0x4000D17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float blendInDuration;

	[Token(Token = "0x4000D18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float blendOutDuration;

	[Token(Token = "0x4000D19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float easeInDuration;

	[Token(Token = "0x4000D1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float easeOutDuration;

	[Token(Token = "0x4000D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AkCurveInterpolation blendInCurve;

	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public AkCurveInterpolation blendOutCurve;

	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject eventObject;

	[Token(Token = "0x4000D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool retriggerEvent;

	[Token(Token = "0x4000D1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool wasScrubbingAndRequiresRetrigger;

	[Token(Token = "0x4000D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	public bool StopEventAtClipEnd;

	[Token(Token = "0x4000D21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
	public bool overrideTrackEmitterObject;

	[Token(Token = "0x4000D22")]
	private const float alph = 0.05f;

	[Token(Token = "0x6001669")]
	[Address(RVA = "0xC2AD68", Offset = "0xC2AD68", VA = "0xC2AD68")]
	private void CallbackHandler(object in_cookie, AkCallbackType in_type, AkCallbackInfo in_info)
	{
	}

	[Token(Token = "0x600166A")]
	[Address(RVA = "0xC2AE34", Offset = "0xC2AE34", VA = "0xC2AE34")]
	private bool IsScrubbing(FrameData info)
	{
		return default(bool);
	}

	[Token(Token = "0x600166B")]
	[Address(RVA = "0xC2AE58", Offset = "0xC2AE58", VA = "0xC2AE58", Slot = "19")]
	public override void PrepareFrame(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x600166C")]
	[Address(RVA = "0xC2B23C", Offset = "0xC2B23C", VA = "0xC2B23C", Slot = "17")]
	public override void OnBehaviourPlay(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x600166D")]
	[Address(RVA = "0xC2B424", Offset = "0xC2B424", VA = "0xC2B424", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x600166E")]
	[Address(RVA = "0xC2B554", Offset = "0xC2B554", VA = "0xC2B554", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600166F")]
	[Address(RVA = "0xC2AFB8", Offset = "0xC2AFB8", VA = "0xC2AFB8")]
	private bool ShouldPlay(Playable playable)
	{
		return default(bool);
	}

	[Token(Token = "0x6001670")]
	[Address(RVA = "0xC2B0F8", Offset = "0xC2B0F8", VA = "0xC2B0F8")]
	private void CheckForFadeInFadeOut(Playable playable)
	{
	}

	[Token(Token = "0x6001671")]
	[Address(RVA = "0xC2B198", Offset = "0xC2B198", VA = "0xC2B198")]
	private void CheckForFadeOut(Playable playable, double currentClipTime)
	{
	}

	[Token(Token = "0x6001672")]
	[Address(RVA = "0xC2B8F0", Offset = "0xC2B8F0", VA = "0xC2B8F0")]
	private void TriggerFadeIn(Playable playable)
	{
	}

	[Token(Token = "0x6001673")]
	[Address(RVA = "0xC2BA20", Offset = "0xC2BA20", VA = "0xC2BA20")]
	private void TriggerFadeOut(Playable playable)
	{
	}

	[Token(Token = "0x6001674")]
	[Address(RVA = "0xC2B518", Offset = "0xC2B518", VA = "0xC2B518")]
	private void StopEvent(int transition = 0)
	{
	}

	[Token(Token = "0x6001675")]
	[Address(RVA = "0xC2BAE4", Offset = "0xC2BAE4", VA = "0xC2BAE4")]
	private bool PostEvent()
	{
		return default(bool);
	}

	[Token(Token = "0x6001676")]
	[Address(RVA = "0xC2B74C", Offset = "0xC2B74C", VA = "0xC2B74C")]
	private void PlayEvent()
	{
	}

	[Token(Token = "0x6001677")]
	[Address(RVA = "0xC2B854", Offset = "0xC2B854", VA = "0xC2B854")]
	private void RetriggerEvent(Playable playable)
	{
	}

	[Token(Token = "0x6001678")]
	[Address(RVA = "0xC2B348", Offset = "0xC2B348", VA = "0xC2B348")]
	private float GetProportionalTime(Playable playable)
	{
		return default(float);
	}

	[Token(Token = "0x6001679")]
	[Address(RVA = "0xC2B77C", Offset = "0xC2B77C", VA = "0xC2B77C")]
	private float SeekToTime(Playable playable)
	{
		return default(float);
	}

	[Token(Token = "0x600167A")]
	[Address(RVA = "0xC2BB98", Offset = "0xC2BB98", VA = "0xC2BB98")]
	public AkEventPlayableBehavior()
	{
	}
}
[Token(Token = "0x20001E6")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x7D5AB0", Offset = "0x7D5AB0")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x7D5AB0", Offset = "0x7D5AB0")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x7D5AB0", Offset = "0x7D5AB0")]
public class AkEventTrack : TrackAsset
{
	[Token(Token = "0x600167B")]
	[Address(RVA = "0xAA203C", Offset = "0xAA203C", VA = "0xAA203C", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600167C")]
	[Address(RVA = "0xAA23B8", Offset = "0xAA23B8", VA = "0xAA23B8")]
	public AkEventTrack()
	{
	}
}
[Token(Token = "0x20001E7")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5B64", Offset = "0x7D5B64")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
public class AkGameObj : MonoBehaviour
{
	[Token(Token = "0x4000D23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AkGameObjListenerList m_listeners;

	[Token(Token = "0x4000D24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isEnvironmentAware;

	[Token(Token = "0x4000D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool isStaticObject;

	[Token(Token = "0x4000D26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider m_Collider;

	[Token(Token = "0x4000D27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AkGameObjEnvironmentData m_envData;

	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AkGameObjPositionData m_posData;

	[Token(Token = "0x4000D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AkGameObjPositionOffsetData m_positionOffsetData;

	[Token(Token = "0x4000D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isRegistered;

	[Token(Token = "0x4000D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	[SerializeField]
	private AkGameObjPosOffsetData m_posOffsetData;

	[Token(Token = "0x4000D2C")]
	private const int AK_NUM_LISTENERS = 8;

	[Token(Token = "0x4000D2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	[SerializeField]
	private int listenerMask;

	[Token(Token = "0x1700022E")]
	public bool IsUsingDefaultListeners
	{
		[Token(Token = "0x600167D")]
		[Address(RVA = "0xAA3340", Offset = "0xAA3340", VA = "0xAA3340")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700022F")]
	public List<AkAudioListener> ListenerList
	{
		[Token(Token = "0x600167E")]
		[Address(RVA = "0xAA3360", Offset = "0xAA3360", VA = "0xAA3360")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600167F")]
	[Address(RVA = "0xAA3380", Offset = "0xAA3380", VA = "0xAA3380")]
	internal void AddListener(AkAudioListener listener)
	{
	}

	[Token(Token = "0x6001680")]
	[Address(RVA = "0xAA33A0", Offset = "0xAA33A0", VA = "0xAA33A0")]
	internal void RemoveListener(AkAudioListener listener)
	{
	}

	[Token(Token = "0x6001681")]
	[Address(RVA = "0xAA33C0", Offset = "0xAA33C0", VA = "0xAA33C0")]
	public AKRESULT Register()
	{
		return default(AKRESULT);
	}

	[Token(Token = "0x6001682")]
	[Address(RVA = "0xAA3538", Offset = "0xAA3538", VA = "0xAA3538")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001683")]
	[Address(RVA = "0xAA3D40", Offset = "0xAA3D40", VA = "0xAA3D40")]
	private void CheckStaticStatus()
	{
	}

	[Token(Token = "0x6001684")]
	[Address(RVA = "0xAA3D44", Offset = "0xAA3D44", VA = "0xAA3D44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001685")]
	[Address(RVA = "0xAA3D58", Offset = "0xAA3D58", VA = "0xAA3D58")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001686")]
	[Address(RVA = "0xAA3FC8", Offset = "0xAA3FC8", VA = "0xAA3FC8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001687")]
	[Address(RVA = "0xAA4258", Offset = "0xAA4258", VA = "0xAA4258", Slot = "4")]
	public virtual Vector3 GetPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001688")]
	[Address(RVA = "0xAA43D4", Offset = "0xAA43D4", VA = "0xAA43D4", Slot = "5")]
	public virtual Vector3 GetForward()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001689")]
	[Address(RVA = "0xAA43F8", Offset = "0xAA43F8", VA = "0xAA43F8", Slot = "6")]
	public virtual Vector3 GetUpward()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600168A")]
	[Address(RVA = "0xAA441C", Offset = "0xAA441C", VA = "0xAA441C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600168B")]
	[Address(RVA = "0xAA4434", Offset = "0xAA4434", VA = "0xAA4434")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600168C")]
	[Address(RVA = "0xAA4680", Offset = "0xAA4680", VA = "0xAA4680")]
	public AkGameObj()
	{
	}
}
[Token(Token = "0x20001E8")]
public class AkGameObjEnvironmentData
{
	[Token(Token = "0x4000D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly List<AkEnvironment> activeEnvironments;

	[Token(Token = "0x4000D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly List<AkEnvironment> activeEnvironmentsFromPortals;

	[Token(Token = "0x4000D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly List<AkEnvironmentPortal> activePortals;

	[Token(Token = "0x4000D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly AkAuxSendArray auxSendValues;

	[Token(Token = "0x4000D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool hasEnvironmentListChanged;

	[Token(Token = "0x4000D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool hasActivePortalListChanged;

	[Token(Token = "0x4000D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	private bool hasSentZero;

	[Token(Token = "0x600168D")]
	[Address(RVA = "0xAA4768", Offset = "0xAA4768", VA = "0xAA4768")]
	private void AddHighestPriorityEnvironmentsFromPortals(Vector3 position)
	{
	}

	[Token(Token = "0x600168E")]
	[Address(RVA = "0xAA4A70", Offset = "0xAA4A70", VA = "0xAA4A70")]
	private void AddHighestPriorityEnvironments(Vector3 position)
	{
	}

	[Token(Token = "0x600168F")]
	[Address(RVA = "0xAA3AE4", Offset = "0xAA3AE4", VA = "0xAA3AE4")]
	public void UpdateAuxSend(GameObject gameObject, Vector3 position)
	{
	}

	[Token(Token = "0x6001690")]
	[Address(RVA = "0xAA4C7C", Offset = "0xAA4C7C", VA = "0xAA4C7C")]
	private void TryAddEnvironment(AkEnvironment env)
	{
	}

	[Token(Token = "0x6001691")]
	[Address(RVA = "0xAA4DE4", Offset = "0xAA4DE4", VA = "0xAA4DE4")]
	private void RemoveEnvironment(AkEnvironment env)
	{
	}

	[Token(Token = "0x6001692")]
	[Address(RVA = "0xAA39A0", Offset = "0xAA39A0", VA = "0xAA39A0")]
	public void AddAkEnvironment(Collider environmentCollider, Collider gameObjectCollider)
	{
	}

	[Token(Token = "0x6001693")]
	[Address(RVA = "0xAA4E6C", Offset = "0xAA4E6C", VA = "0xAA4E6C")]
	private bool AkEnvironmentBelongsToActivePortals(AkEnvironment env)
	{
		return default(bool);
	}

	[Token(Token = "0x6001694")]
	[Address(RVA = "0xAA4454", Offset = "0xAA4454", VA = "0xAA4454")]
	public void RemoveAkEnvironment(Collider environmentCollider, Collider gameObjectCollider)
	{
	}

	[Token(Token = "0x6001695")]
	[Address(RVA = "0xAA3890", Offset = "0xAA3890", VA = "0xAA3890")]
	public AkGameObjEnvironmentData()
	{
	}
}
[Serializable]
[Token(Token = "0x20001E9")]
public class AkGameObjListenerList : AkAudioListener.BaseListenerList
{
	[NonSerialized]
	[Token(Token = "0x4000D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AkGameObj akGameObj;

	[Token(Token = "0x4000D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public List<AkAudioListener> initialListenerList;

	[Token(Token = "0x4000D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public bool useDefaultListeners;

	[Token(Token = "0x6001696")]
	[Address(RVA = "0xAA4FAC", Offset = "0xAA4FAC", VA = "0xAA4FAC")]
	public void SetUseDefaultListeners(bool useDefault)
	{
	}

	[Token(Token = "0x6001697")]
	[Address(RVA = "0xAA3C48", Offset = "0xAA3C48", VA = "0xAA3C48")]
	public void Init(AkGameObj akGameObj)
	{
	}

	[Token(Token = "0x6001698")]
	[Address(RVA = "0xAA53A0", Offset = "0xAA53A0", VA = "0xAA53A0", Slot = "4")]
	public override bool Add(AkAudioListener listener)
	{
		return default(bool);
	}

	[Token(Token = "0x6001699")]
	[Address(RVA = "0xAA5490", Offset = "0xAA5490", VA = "0xAA5490", Slot = "5")]
	public override bool Remove(AkAudioListener listener)
	{
		return default(bool);
	}

	[Token(Token = "0x600169A")]
	[Address(RVA = "0xAA46F0", Offset = "0xAA46F0", VA = "0xAA46F0")]
	public AkGameObjListenerList()
	{
	}
}
[Token(Token = "0x20001EA")]
public class AkGameObjPositionData
{
	[Token(Token = "0x4000D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 forward;

	[Token(Token = "0x4000D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 position;

	[Token(Token = "0x4000D3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 up;

	[Token(Token = "0x600169B")]
	[Address(RVA = "0xAA3784", Offset = "0xAA3784", VA = "0xAA3784")]
	public AkGameObjPositionData()
	{
	}
}
[Serializable]
[Token(Token = "0x20001EB")]
public class AkGameObjPositionOffsetData
{
	[Token(Token = "0x4000D3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool KeepMe;

	[Token(Token = "0x4000D3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 positionOffset;

	[Token(Token = "0x600169C")]
	[Address(RVA = "0xAA5650", Offset = "0xAA5650", VA = "0xAA5650")]
	public AkGameObjPositionOffsetData(bool IReallyWantToBeConstructed = false)
	{
	}
}
[Token(Token = "0x20001EC")]
public class AkGameObjPosOffsetData : ScriptableObject
{
	[Token(Token = "0x4000D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 positionOffset;

	[Token(Token = "0x600169D")]
	[Address(RVA = "0xAA5648", Offset = "0xAA5648", VA = "0xAA5648")]
	public AkGameObjPosOffsetData()
	{
	}
}
[Token(Token = "0x20001ED")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5BC0", Offset = "0x7D5BC0")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
public class AkInitializer : MonoBehaviour
{
	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AkInitializer ms_Instance;

	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AkWwiseInitializationSettings InitializationSettings;

	[Token(Token = "0x600169E")]
	[Address(RVA = "0xAA8858", Offset = "0xAA8858", VA = "0xAA8858")]
	private void Awake()
	{
	}

	[Token(Token = "0x600169F")]
	[Address(RVA = "0xAA8940", Offset = "0xAA8940", VA = "0xAA8940")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60016A0")]
	[Address(RVA = "0xAA8A18", Offset = "0xAA8A18", VA = "0xAA8A18")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60016A1")]
	[Address(RVA = "0xAA8AC0", Offset = "0xAA8AC0", VA = "0xAA8AC0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60016A2")]
	[Address(RVA = "0xAA8B5C", Offset = "0xAA8B5C", VA = "0xAA8B5C")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x60016A3")]
	[Address(RVA = "0xAA8C18", Offset = "0xAA8C18", VA = "0xAA8C18")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x60016A4")]
	[Address(RVA = "0xAA8CD4", Offset = "0xAA8CD4", VA = "0xAA8CD4")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60016A5")]
	[Address(RVA = "0xAA8D7C", Offset = "0xAA8D7C", VA = "0xAA8D7C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60016A6")]
	[Address(RVA = "0xAA8E24", Offset = "0xAA8E24", VA = "0xAA8E24")]
	public AkInitializer()
	{
	}
}
[Token(Token = "0x20001EE")]
public class AkMemBankLoader : MonoBehaviour
{
	[Token(Token = "0x200044D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8C48", Offset = "0x7D8C48")]
	private sealed class <LoadFile>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40021AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40021AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40021B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AkMemBankLoader <>4__this;

		[Token(Token = "0x170003A1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024FD")]
			[Address(RVA = "0xAAFC2C", Offset = "0xAAFC2C", VA = "0xAAFC2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024FF")]
			[Address(RVA = "0xAAFC98", Offset = "0xAAFC98", VA = "0xAAFC98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0xAAF874", Offset = "0xAAF874", VA = "0xAAF874")]
		[DebuggerHidden]
		public <LoadFile>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0xAAFA24", Offset = "0xAAFA24", VA = "0xAAFA24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0xAAFA28", Offset = "0xAAFA28", VA = "0xAAFA28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024FE")]
		[Address(RVA = "0xAAFC34", Offset = "0xAAFC34", VA = "0xAAFC34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D41")]
	private const int WaitMs = 50;

	[Token(Token = "0x4000D42")]
	private const long AK_BANK_PLATFORM_DATA_ALIGNMENT = 16L;

	[Token(Token = "0x4000D43")]
	private const long AK_BANK_PLATFORM_DATA_ALIGNMENT_MASK = 15L;

	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string bankName;

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isLocalizedBank;

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string m_bankPath;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public uint ms_bankID;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IntPtr ms_pInMemoryBankPtr;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GCHandle ms_pinnedArray;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityWebRequest ms_www;

	[Token(Token = "0x60016A7")]
	[Address(RVA = "0xAAF300", Offset = "0xAAF300", VA = "0xAAF300")]
	private void Start()
	{
	}

	[Token(Token = "0x60016A8")]
	[Address(RVA = "0xAAF42C", Offset = "0xAAF42C", VA = "0xAAF42C")]
	public void LoadNonLocalizedBank(string in_bankFilename)
	{
	}

	[Token(Token = "0x60016A9")]
	[Address(RVA = "0xAAF314", Offset = "0xAAF314", VA = "0xAAF314")]
	public void LoadLocalizedBank(string in_bankFilename)
	{
	}

	[Token(Token = "0x60016AA")]
	[Address(RVA = "0xAAF5CC", Offset = "0xAAF5CC", VA = "0xAAF5CC")]
	private uint AllocateAlignedBuffer(byte[] data)
	{
		return default(uint);
	}

	[Token(Token = "0x60016AB")]
	[Address(RVA = "0xAAF800", Offset = "0xAAF800", VA = "0xAAF800")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E1EE4", Offset = "0x7E1EE4")]
	private IEnumerator LoadFile()
	{
		return null;
	}

	[Token(Token = "0x60016AC")]
	[Address(RVA = "0xAAF50C", Offset = "0xAAF50C", VA = "0xAAF50C")]
	private void DoLoadBank(string in_bankPath)
	{
	}

	[Token(Token = "0x60016AD")]
	[Address(RVA = "0xAAF8A0", Offset = "0xAAF8A0", VA = "0xAAF8A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60016AE")]
	[Address(RVA = "0xAAF9C8", Offset = "0xAAF9C8", VA = "0xAAF9C8")]
	public AkMemBankLoader()
	{
	}
}
[Token(Token = "0x20001EF")]
public abstract class AkObstructionOcclusion : MonoBehaviour
{
	[Token(Token = "0x200044E")]
	protected class ObstructionOcclusionValue
	{
		[Token(Token = "0x40021B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float currentValue;

		[Token(Token = "0x40021B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float targetValue;

		[Token(Token = "0x6002500")]
		[Address(RVA = "0xAB291C", Offset = "0xAB291C", VA = "0xAB291C")]
		public bool Update(float fadeRate)
		{
			return default(bool);
		}

		[Token(Token = "0x6002501")]
		[Address(RVA = "0xAB2460", Offset = "0xAB2460", VA = "0xAB2460")]
		public ObstructionOcclusionValue()
		{
		}
	}

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly List<AkAudioListener> listenersToRemove;

	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected readonly List<AkAudioListener> currentListenerList;

	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Dictionary<AkAudioListener, ObstructionOcclusionValue> ObstructionOcclusionValues;

	[Token(Token = "0x4000D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected float fadeRate;

	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD740", Offset = "0x7DD740")]
	public float fadeTime;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD778", Offset = "0x7DD778")]
	public LayerMask LayerMask;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD7B0", Offset = "0x7DD7B0")]
	public float maxDistance;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD7E8", Offset = "0x7DD7E8")]
	public float refreshInterval;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float refreshTime;

	[Token(Token = "0x60016AF")]
	[Address(RVA = "0xAB2184", Offset = "0xAB2184", VA = "0xAB2184")]
	protected void InitIntervalsAndFadeRates()
	{
	}

	[Token(Token = "0x60016B0")]
	protected abstract void UpdateCurrentListenerList();

	[Token(Token = "0x60016B1")]
	[Address(RVA = "0xAB21C4", Offset = "0xAB21C4", VA = "0xAB21C4")]
	private void UpdateObstructionOcclusionValues()
	{
	}

	[Token(Token = "0x60016B2")]
	[Address(RVA = "0xAB2468", Offset = "0xAB2468", VA = "0xAB2468")]
	private void CastRays()
	{
	}

	[Token(Token = "0x60016B3")]
	protected abstract void SetObstructionOcclusion(KeyValuePair<AkAudioListener, ObstructionOcclusionValue> ObsOccPair);

	[Token(Token = "0x60016B4")]
	[Address(RVA = "0xAB27A8", Offset = "0xAB27A8", VA = "0xAB27A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60016B5")]
	[Address(RVA = "0xAB2A0C", Offset = "0xAB2A0C", VA = "0xAB2A0C")]
	protected AkObstructionOcclusion()
	{
	}
}
[Token(Token = "0x20001F0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5C1C", Offset = "0x7D5C1C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5C1C", Offset = "0x7D5C1C")]
[DisallowMultipleComponent]
public class AkRoom : AkTriggerHandler
{
	[Token(Token = "0x200044F")]
	public class PriorityList
	{
		[Token(Token = "0x20004F5")]
		private class CompareByPriority : IComparer<AkRoom>
		{
			[Token(Token = "0x600261B")]
			[Address(RVA = "0xABBCAC", Offset = "0xABBCAC", VA = "0xABBCAC", Slot = "5")]
			public virtual int Compare(AkRoom a, AkRoom b)
			{
				return default(int);
			}

			[Token(Token = "0x600261C")]
			[Address(RVA = "0xABBCA4", Offset = "0xABBCA4", VA = "0xABBCA4")]
			public CompareByPriority()
			{
			}
		}

		[Token(Token = "0x40021B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly CompareByPriority s_compareByPriority;

		[Token(Token = "0x40021B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<AkRoom> rooms;

		[Token(Token = "0x6002502")]
		[Address(RVA = "0xABB89C", Offset = "0xABB89C", VA = "0xABB89C")]
		public ulong GetHighestPriorityRoomID()
		{
			return default(ulong);
		}

		[Token(Token = "0x6002503")]
		[Address(RVA = "0xABB968", Offset = "0xABB968", VA = "0xABB968")]
		public AkRoom GetHighestPriorityRoom()
		{
			return null;
		}

		[Token(Token = "0x6002504")]
		[Address(RVA = "0xABB9D0", Offset = "0xABB9D0", VA = "0xABB9D0")]
		public void Add(AkRoom room)
		{
		}

		[Token(Token = "0x6002505")]
		[Address(RVA = "0xABBB44", Offset = "0xABBB44", VA = "0xABBB44")]
		public void Remove(AkRoom room)
		{
		}

		[Token(Token = "0x6002506")]
		[Address(RVA = "0xABBBAC", Offset = "0xABBBAC", VA = "0xABBBAC")]
		public bool Contains(AkRoom room)
		{
			return default(bool);
		}

		[Token(Token = "0x6002507")]
		[Address(RVA = "0xABBA64", Offset = "0xABBA64", VA = "0xABBA64")]
		public int BinarySearch(AkRoom room)
		{
			return default(int);
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0xABBBC8", Offset = "0xABBBC8", VA = "0xABBBC8")]
		public PriorityList()
		{
		}
	}

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ulong INVALID_ROOM_ID;

	[Token(Token = "0x4000D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int RoomCount;

	[Token(Token = "0x4000D56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD820", Offset = "0x7DD820")]
	public int priority;

	[Token(Token = "0x4000D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AuxBus reverbAuxBus;

	[Token(Token = "0x4000D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DD858", Offset = "0x7DD858")]
	public float reverbLevel;

	[Token(Token = "0x4000D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DD870", Offset = "0x7DD870")]
	public float wallOcclusion;

	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AK.Wwise.Event roomToneEvent;

	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DD888", Offset = "0x7DD888")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD888", Offset = "0x7DD888")]
	public float roomToneAuxSend;

	[Token(Token = "0x17000230")]
	public static bool IsSpatialAudioEnabled
	{
		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xABA8C0", Offset = "0xABA8C0", VA = "0xABA8C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60016B7")]
	[Address(RVA = "0xABA99C", Offset = "0xABA99C", VA = "0xABA99C")]
	public ulong GetID()
	{
		return default(ulong);
	}

	[Token(Token = "0x60016B8")]
	[Address(RVA = "0xABAA14", Offset = "0xABAA14", VA = "0xABAA14")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60016B9")]
	[Address(RVA = "0xABB458", Offset = "0xABB458", VA = "0xABB458", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x60016BA")]
	[Address(RVA = "0xABB494", Offset = "0xABB494", VA = "0xABB494")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60016BB")]
	[Address(RVA = "0xABB5CC", Offset = "0xABB5CC", VA = "0xABB5CC")]
	private void OnTriggerEnter(Collider in_other)
	{
	}

	[Token(Token = "0x60016BC")]
	[Address(RVA = "0xABB6B4", Offset = "0xABB6B4", VA = "0xABB6B4")]
	private void OnTriggerExit(Collider in_other)
	{
	}

	[Token(Token = "0x60016BD")]
	[Address(RVA = "0xABB79C", Offset = "0xABB79C", VA = "0xABB79C")]
	public AkRoom()
	{
	}
}
[Token(Token = "0x20001F1")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5CB4", Offset = "0x7D5CB4")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5CB4", Offset = "0x7D5CB4")]
[DisallowMultipleComponent]
public class AkRoomPortal : AkTriggerHandler
{
	[Token(Token = "0x2000450")]
	public enum State
	{
		[Token(Token = "0x40021B6")]
		Closed,
		[Token(Token = "0x40021B7")]
		Open
	}

	[Token(Token = "0x4000D5C")]
	public const int MAX_ROOMS_PER_PORTAL = 2;

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public State initialState;

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AkVector extent;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AkTransform portalTransform;

	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool active;

	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<int> closePortalTriggerList;

	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AkRoom[] rooms;

	[Token(Token = "0x17000231")]
	public bool portalActive
	{
		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xABC314", Offset = "0xABC314", VA = "0xABC314")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xABC31C", Offset = "0xABC31C", VA = "0xABC31C")]
		set
		{
		}
	}

	[Token(Token = "0x17000232")]
	private ulong frontRoomID
	{
		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xABC464", Offset = "0xABC464", VA = "0xABC464")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x17000233")]
	private ulong backRoomID
	{
		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xABC5D8", Offset = "0xABC5D8", VA = "0xABC5D8")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x17000234")]
	public AkRoom frontRoom
	{
		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xABC500", Offset = "0xABC500", VA = "0xABC500")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000235")]
	public AkRoom backRoom
	{
		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xABC674", Offset = "0xABC674", VA = "0xABC674")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000236")]
	public bool IsValid
	{
		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xABCA60", Offset = "0xABCA60", VA = "0xABCA60")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60016C3")]
	[Address(RVA = "0xABC6B0", Offset = "0xABC6B0", VA = "0xABC6B0")]
	public void SetRoom(int in_roomIndex, AkRoom in_room)
	{
	}

	[Token(Token = "0x60016C4")]
	[Address(RVA = "0xABC7B0", Offset = "0xABC7B0", VA = "0xABC7B0")]
	public void SetFrontRoom(AkRoom room)
	{
	}

	[Token(Token = "0x60016C5")]
	[Address(RVA = "0xABC7C0", Offset = "0xABC7C0", VA = "0xABC7C0")]
	public void SetBackRoom(AkRoom room)
	{
	}

	[Token(Token = "0x60016C6")]
	[Address(RVA = "0xABC7D0", Offset = "0xABC7D0", VA = "0xABC7D0")]
	public AkRoom GetRoom(int index)
	{
		return null;
	}

	[Token(Token = "0x60016C9")]
	[Address(RVA = "0xABC814", Offset = "0xABC814", VA = "0xABC814")]
	public void UpdateSoundEngineRoomIDs()
	{
	}

	[Token(Token = "0x60016CB")]
	[Address(RVA = "0xABC978", Offset = "0xABC978", VA = "0xABC978")]
	public ulong GetID()
	{
		return default(ulong);
	}

	[Token(Token = "0x60016CC")]
	[Address(RVA = "0xABCA94", Offset = "0xABCA94", VA = "0xABCA94", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60016CD")]
	[Address(RVA = "0xABD0D0", Offset = "0xABD0D0", VA = "0xABD0D0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60016CE")]
	[Address(RVA = "0xABD158", Offset = "0xABD158", VA = "0xABD158", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x60016CF")]
	[Address(RVA = "0xABD0C8", Offset = "0xABD0C8", VA = "0xABD0C8")]
	public void ClosePortal(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x60016D0")]
	[Address(RVA = "0xABD170", Offset = "0xABD170", VA = "0xABD170", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60016D1")]
	[Address(RVA = "0xABC540", Offset = "0xABC540", VA = "0xABC540")]
	private bool IsRoomActive(AkRoom in_room)
	{
		return default(bool);
	}

	[Token(Token = "0x60016D2")]
	[Address(RVA = "0xABD160", Offset = "0xABD160", VA = "0xABD160")]
	public void Open()
	{
	}

	[Token(Token = "0x60016D3")]
	[Address(RVA = "0xABD168", Offset = "0xABD168", VA = "0xABD168")]
	public void Close()
	{
	}

	[Token(Token = "0x60016D4")]
	[Address(RVA = "0xABD3B0", Offset = "0xABD3B0", VA = "0xABD3B0")]
	public void FindOverlappingRooms(AkRoom.PriorityList[] roomList)
	{
	}

	[Token(Token = "0x60016D5")]
	[Address(RVA = "0xABD5D4", Offset = "0xABD5D4", VA = "0xABD5D4")]
	private void FillRoomList(Vector3 center, Vector3 halfExtents, AkRoom.PriorityList list)
	{
	}

	[Token(Token = "0x60016D6")]
	[Address(RVA = "0xABCE7C", Offset = "0xABCE7C", VA = "0xABCE7C")]
	public void UpdateOverlappingRooms()
	{
	}

	[Token(Token = "0x60016D7")]
	[Address(RVA = "0xABD7BC", Offset = "0xABD7BC", VA = "0xABD7BC")]
	public AkRoomPortal()
	{
	}
}
[Token(Token = "0x20001F2")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5D4C", Offset = "0x7D5D4C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5D4C", Offset = "0x7D5D4C")]
public class AkRoomPortalObstruction : AkObstructionOcclusion
{
	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AkRoomPortal m_portal;

	[Token(Token = "0x60016D8")]
	[Address(RVA = "0xABDAB0", Offset = "0xABDAB0", VA = "0xABDAB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016D9")]
	[Address(RVA = "0xABDB2C", Offset = "0xABDB2C", VA = "0xABDB2C", Slot = "4")]
	protected override void UpdateCurrentListenerList()
	{
	}

	[Token(Token = "0x60016DA")]
	[Address(RVA = "0xABDBB8", Offset = "0xABDBB8", VA = "0xABDBB8", Slot = "5")]
	protected override void SetObstructionOcclusion(KeyValuePair<AkAudioListener, ObstructionOcclusionValue> ObsOccPair)
	{
	}

	[Token(Token = "0x60016DB")]
	[Address(RVA = "0xABDD18", Offset = "0xABDD18", VA = "0xABDD18")]
	public AkRoomPortalObstruction()
	{
	}
}
[Serializable]
[Token(Token = "0x20001F3")]
public class AkRTPCPlayable : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool overrideTrackObject;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ExposedReference<GameObject> RTPCObject;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool setRTPCGlobally;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AkRTPCPlayableBehaviour template;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD8EC", Offset = "0x7DD8EC")]
	private RTPC <Parameter>k__BackingField;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD8FC", Offset = "0x7DD8FC")]
	private TimelineClip <OwningClip>k__BackingField;

	[Token(Token = "0x17000237")]
	public RTPC Parameter
	{
		[Token(Token = "0x60016DC")]
		[Address(RVA = "0xAB8B94", Offset = "0xAB8B94", VA = "0xAB8B94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1F48", Offset = "0x7E1F48")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016DD")]
		[Address(RVA = "0xAB8B9C", Offset = "0xAB8B9C", VA = "0xAB8B9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1F58", Offset = "0x7E1F58")]
		set
		{
		}
	}

	[Token(Token = "0x17000238")]
	public TimelineClip OwningClip
	{
		[Token(Token = "0x60016DE")]
		[Address(RVA = "0xAB8BA4", Offset = "0xAB8BA4", VA = "0xAB8BA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1F68", Offset = "0x7E1F68")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xAB8BAC", Offset = "0xAB8BAC", VA = "0xAB8BAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1F78", Offset = "0x7E1F78")]
		set
		{
		}
	}

	[Token(Token = "0x17000239")]
	private ClipCaps UnityEngine.Timeline.ITimelineClipAsset.clipCaps
	{
		[Token(Token = "0x60016E0")]
		[Address(RVA = "0xAB8BB4", Offset = "0xAB8BB4", VA = "0xAB8BB4", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60016E1")]
	[Address(RVA = "0xAB8BBC", Offset = "0xAB8BBC", VA = "0xAB8BBC", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
	{
		return default(Playable);
	}

	[Token(Token = "0x60016E2")]
	[Address(RVA = "0xAB8CB8", Offset = "0xAB8CB8", VA = "0xAB8CB8")]
	public void InitializeBehavior(PlayableGraph graph, ref AkRTPCPlayableBehaviour b, GameObject owner)
	{
	}

	[Token(Token = "0x60016E3")]
	[Address(RVA = "0xAB8D8C", Offset = "0xAB8D8C", VA = "0xAB8D8C")]
	public AkRTPCPlayable()
	{
	}
}
[Serializable]
[Token(Token = "0x20001F4")]
public class AkRTPCPlayableBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private float RTPCValue;

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD91C", Offset = "0x7DD91C")]
	private bool <setRTPCGlobally>k__BackingField;

	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD92C", Offset = "0x7DD92C")]
	private bool <overrideTrackObject>k__BackingField;

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD93C", Offset = "0x7DD93C")]
	private GameObject <rtpcObject>k__BackingField;

	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DD94C", Offset = "0x7DD94C")]
	private RTPC <parameter>k__BackingField;

	[Token(Token = "0x1700023A")]
	public bool setRTPCGlobally
	{
		[Token(Token = "0x60016E5")]
		[Address(RVA = "0xAB8E08", Offset = "0xAB8E08", VA = "0xAB8E08")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1F98", Offset = "0x7E1F98")]
		private get
		{
			return default(bool);
		}
		[Token(Token = "0x60016E4")]
		[Address(RVA = "0xAB8DFC", Offset = "0xAB8DFC", VA = "0xAB8DFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1F88", Offset = "0x7E1F88")]
		set
		{
		}
	}

	[Token(Token = "0x1700023B")]
	public bool overrideTrackObject
	{
		[Token(Token = "0x60016E7")]
		[Address(RVA = "0xAB8E1C", Offset = "0xAB8E1C", VA = "0xAB8E1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1FB8", Offset = "0x7E1FB8")]
		private get
		{
			return default(bool);
		}
		[Token(Token = "0x60016E6")]
		[Address(RVA = "0xAB8E10", Offset = "0xAB8E10", VA = "0xAB8E10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1FA8", Offset = "0x7E1FA8")]
		set
		{
		}
	}

	[Token(Token = "0x1700023C")]
	public GameObject rtpcObject
	{
		[Token(Token = "0x60016E9")]
		[Address(RVA = "0xAB8E2C", Offset = "0xAB8E2C", VA = "0xAB8E2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1FD8", Offset = "0x7E1FD8")]
		private get
		{
			return null;
		}
		[Token(Token = "0x60016E8")]
		[Address(RVA = "0xAB8E24", Offset = "0xAB8E24", VA = "0xAB8E24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1FC8", Offset = "0x7E1FC8")]
		set
		{
		}
	}

	[Token(Token = "0x1700023D")]
	public RTPC parameter
	{
		[Token(Token = "0x60016EB")]
		[Address(RVA = "0xAB8E3C", Offset = "0xAB8E3C", VA = "0xAB8E3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1FF8", Offset = "0x7E1FF8")]
		private get
		{
			return null;
		}
		[Token(Token = "0x60016EA")]
		[Address(RVA = "0xAB8E34", Offset = "0xAB8E34", VA = "0xAB8E34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E1FE8", Offset = "0x7E1FE8")]
		set
		{
		}
	}

	[Token(Token = "0x60016EC")]
	[Address(RVA = "0xAB8E44", Offset = "0xAB8E44", VA = "0xAB8E44", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60016ED")]
	[Address(RVA = "0xAB8DF4", Offset = "0xAB8DF4", VA = "0xAB8DF4")]
	public AkRTPCPlayableBehaviour()
	{
	}
}
[Token(Token = "0x20001F5")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x7D5DD4", Offset = "0x7D5DD4")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x7D5DD4", Offset = "0x7D5DD4")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x7D5DD4", Offset = "0x7D5DD4")]
public class AkRTPCTrack : TrackAsset
{
	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public RTPC Parameter;

	[Token(Token = "0x60016EE")]
	[Address(RVA = "0xAB8FC8", Offset = "0xAB8FC8", VA = "0xAB8FC8", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60016EF")]
	[Address(RVA = "0xAB9084", Offset = "0xAB9084", VA = "0xAB9084")]
	public void setPlayableProperties()
	{
	}

	[Token(Token = "0x60016F0")]
	[Address(RVA = "0xAB935C", Offset = "0xAB935C", VA = "0xAB935C")]
	public void OnValidate()
	{
	}

	[Token(Token = "0x60016F1")]
	[Address(RVA = "0xAB9654", Offset = "0xAB9654", VA = "0xAB9654")]
	public AkRTPCTrack()
	{
	}
}
[Token(Token = "0x20001F6")]
public class AkSoundEngineController
{
	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AkSoundEngineController ms_Instance;

	[Token(Token = "0x1700023E")]
	public static AkSoundEngineController Instance
	{
		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x14AADD0", Offset = "0x14AADD0", VA = "0x14AADD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60016F3")]
	[Address(RVA = "0x14AAE50", Offset = "0x14AAE50", VA = "0x14AAE50")]
	private AkSoundEngineController()
	{
	}

	[Token(Token = "0x60016F4")]
	[Address(RVA = "0x14AAE58", Offset = "0x14AAE58", VA = "0x14AAE58", Slot = "1")]
	~AkSoundEngineController()
	{
	}

	[Token(Token = "0x60016F5")]
	[Address(RVA = "0x14AAEC0", Offset = "0x14AAEC0", VA = "0x14AAEC0")]
	public static string GetDecodedBankFolder()
	{
		return null;
	}

	[Token(Token = "0x60016F6")]
	[Address(RVA = "0x14AAF08", Offset = "0x14AAF08", VA = "0x14AAF08")]
	public static string GetDecodedBankFullPath()
	{
		return null;
	}

	[Token(Token = "0x60016F7")]
	[Address(RVA = "0x14AAFAC", Offset = "0x14AAFAC", VA = "0x14AAFAC")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x60016F8")]
	[Address(RVA = "0x14AB084", Offset = "0x14AB084", VA = "0x14AB084")]
	public void Init(AkInitializer akInitializer)
	{
	}

	[Token(Token = "0x60016F9")]
	[Address(RVA = "0x14AB23C", Offset = "0x14AB23C", VA = "0x14AB23C")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60016FA")]
	[Address(RVA = "0x14AB240", Offset = "0x14AB240", VA = "0x14AB240")]
	public void Terminate()
	{
	}

	[Token(Token = "0x60016FB")]
	[Address(RVA = "0x14AB2A0", Offset = "0x14AB2A0", VA = "0x14AB2A0")]
	public void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x60016FC")]
	[Address(RVA = "0x14AB398", Offset = "0x14AB398", VA = "0x14AB398")]
	public void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x60016FD")]
	[Address(RVA = "0x14AB2B0", Offset = "0x14AB2B0", VA = "0x14AB2B0")]
	private void ActivateAudio(bool activate, bool renderAnyway = false)
	{
	}
}
[Token(Token = "0x20001F7")]
public abstract class AkSpatialAudioBase : MonoBehaviour
{
	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly AkRoom.PriorityList roomPriorityList;

	[Token(Token = "0x60016FE")]
	[Address(RVA = "0xE045CC", Offset = "0xE045CC", VA = "0xE045CC")]
	protected void SetGameObjectInHighestPriorityRoom()
	{
	}

	[Token(Token = "0x60016FF")]
	[Address(RVA = "0xE04664", Offset = "0xE04664", VA = "0xE04664")]
	public void EnteredRoom(AkRoom room)
	{
	}

	[Token(Token = "0x6001700")]
	[Address(RVA = "0xE04698", Offset = "0xE04698", VA = "0xE04698")]
	public void ExitedRoom(AkRoom room)
	{
	}

	[Token(Token = "0x6001701")]
	[Address(RVA = "0xE046CC", Offset = "0xE046CC", VA = "0xE046CC")]
	public void SetGameObjectInRoom()
	{
	}

	[Token(Token = "0x6001702")]
	[Address(RVA = "0xE04800", Offset = "0xE04800", VA = "0xE04800")]
	protected AkSpatialAudioBase()
	{
	}
}
[Token(Token = "0x20001F8")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5E84", Offset = "0x7D5E84")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5E84", Offset = "0x7D5E84")]
public class AkSpatialAudioEmitter : AkSpatialAudioBase
{
	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DD95C", Offset = "0x7DD95C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD95C", Offset = "0x7DD95C")]
	public AuxBus reflectAuxBus;

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD9BC", Offset = "0x7DD9BC")]
	public float reflectionMaxPathLength;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DD9F4", Offset = "0x7DD9F4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DD9F4", Offset = "0x7DD9F4")]
	public float reflectionsAuxBusGain;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DDA48", Offset = "0x7DDA48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DDA48", Offset = "0x7DDA48")]
	public uint reflectionsOrder;

	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DDA9C", Offset = "0x7DDA9C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DDA9C", Offset = "0x7DDA9C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DDA9C", Offset = "0x7DDA9C")]
	public float roomReverbAuxBusGain;

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DDB14", Offset = "0x7DDB14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DDB14", Offset = "0x7DDB14")]
	public uint diffractionMaxEdges;

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DDB74", Offset = "0x7DDB74")]
	public uint diffractionMaxPaths;

	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DDBAC", Offset = "0x7DDBAC")]
	public uint diffractionMaxPathLength;

	[Token(Token = "0x6001703")]
	[Address(RVA = "0xE04868", Offset = "0xE04868", VA = "0xE04868")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001704")]
	[Address(RVA = "0xE049F4", Offset = "0xE049F4", VA = "0xE049F4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001705")]
	[Address(RVA = "0xE04A70", Offset = "0xE04A70", VA = "0xE04A70")]
	public AkSpatialAudioEmitter()
	{
	}
}
[Token(Token = "0x20001F9")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5F0C", Offset = "0x7D5F0C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5F0C", Offset = "0x7D5F0C")]
[DisallowMultipleComponent]
public class AkSpatialAudioListener : AkSpatialAudioBase
{
	[Token(Token = "0x2000451")]
	public class SpatialAudioListenerList
	{
		[Token(Token = "0x40021B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<AkSpatialAudioListener> listenerList;

		[Token(Token = "0x170003A3")]
		public List<AkSpatialAudioListener> ListenerList
		{
			[Token(Token = "0x600250A")]
			[Address(RVA = "0xE0594C", Offset = "0xE0594C", VA = "0xE0594C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600250B")]
		[Address(RVA = "0xE05650", Offset = "0xE05650", VA = "0xE05650")]
		public bool Add(AkSpatialAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x600250C")]
		[Address(RVA = "0xE0579C", Offset = "0xE0579C", VA = "0xE0579C")]
		public bool Remove(AkSpatialAudioListener listener)
		{
			return default(bool);
		}

		[Token(Token = "0x600250D")]
		[Address(RVA = "0xE05954", Offset = "0xE05954", VA = "0xE05954")]
		private void Refresh()
		{
		}

		[Token(Token = "0x600250E")]
		[Address(RVA = "0xE058DC", Offset = "0xE058DC", VA = "0xE058DC")]
		public SpatialAudioListenerList()
		{
		}
	}

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AkSpatialAudioListener s_SpatialAudioListener;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly SpatialAudioListenerList spatialAudioListeners;

	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AkAudioListener AkAudioListener;

	[Token(Token = "0x1700023F")]
	public static AkAudioListener TheSpatialAudioListener
	{
		[Token(Token = "0x6001706")]
		[Address(RVA = "0xE0543C", Offset = "0xE0543C", VA = "0xE0543C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000240")]
	public static SpatialAudioListenerList SpatialAudioListeners
	{
		[Token(Token = "0x6001707")]
		[Address(RVA = "0xE05518", Offset = "0xE05518", VA = "0xE05518")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001708")]
	[Address(RVA = "0xE05580", Offset = "0xE05580", VA = "0xE05580")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001709")]
	[Address(RVA = "0xE055D8", Offset = "0xE055D8", VA = "0xE055D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600170A")]
	[Address(RVA = "0xE05724", Offset = "0xE05724", VA = "0xE05724")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600170B")]
	[Address(RVA = "0xE05870", Offset = "0xE05870", VA = "0xE05870")]
	public AkSpatialAudioListener()
	{
	}
}
[Token(Token = "0x20001FA")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5FA4", Offset = "0x7D5FA4")]
public class AkState : AkDragDropTriggerHandler
{
	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public State data;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DDBE4", Offset = "0x7DDBE4")]
	private int valueIdInternal;

	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DDC40", Offset = "0x7DDC40")]
	private int groupIdInternal;

	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DDC9C", Offset = "0x7DDC9C")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DDCF8", Offset = "0x7DDCF8")]
	private byte[] groupGuidInternal;

	[Token(Token = "0x17000241")]
	protected override BaseType WwiseType
	{
		[Token(Token = "0x600170D")]
		[Address(RVA = "0xE05C28", Offset = "0xE05C28", VA = "0xE05C28", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000242")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4670", Offset = "0x7E4670")]
	public int valueID
	{
		[Token(Token = "0x600170F")]
		[Address(RVA = "0xE05C4C", Offset = "0xE05C4C", VA = "0xE05C4C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000243")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E46A8", Offset = "0x7E46A8")]
	public int groupID
	{
		[Token(Token = "0x6001710")]
		[Address(RVA = "0xE05C60", Offset = "0xE05C60", VA = "0xE05C60")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000244")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E46E0", Offset = "0x7E46E0")]
	public byte[] valueGuid
	{
		[Token(Token = "0x6001711")]
		[Address(RVA = "0xE05C74", Offset = "0xE05C74", VA = "0xE05C74")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000245")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4718", Offset = "0x7E4718")]
	public byte[] groupGuid
	{
		[Token(Token = "0x6001712")]
		[Address(RVA = "0xE05D3C", Offset = "0xE05D3C", VA = "0xE05D3C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600170E")]
	[Address(RVA = "0xE05C30", Offset = "0xE05C30", VA = "0xE05C30", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001713")]
	[Address(RVA = "0xE05E00", Offset = "0xE05E00", VA = "0xE05E00")]
	public AkState()
	{
	}
}
[Token(Token = "0x20001FB")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D5FDC", Offset = "0x7D5FDC")]
[DisallowMultipleComponent]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D5FDC", Offset = "0x7D5FDC")]
[ExecuteInEditMode]
public class AkSurfaceReflector : MonoBehaviour
{
	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DDD54", Offset = "0x7DDD54")]
	public AcousticTexture AcousticTexture;

	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DDD8C", Offset = "0x7DDD8C")]
	public bool EnableDiffraction;

	[Token(Token = "0x4000D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DDDC4", Offset = "0x7DDDC4")]
	public bool EnableDiffractionOnBoundaryEdges;

	[Token(Token = "0x4000D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DDDFC", Offset = "0x7DDDFC")]
	public AkRoom AssociatedRoom;

	[Token(Token = "0x4000D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshFilter MeshFilter;

	[Token(Token = "0x6001714")]
	[Address(RVA = "0xE0624C", Offset = "0xE0624C", VA = "0xE0624C")]
	public static ulong GetAkGeometrySetID(MeshFilter meshFilter)
	{
		return default(ulong);
	}

	[Token(Token = "0x6001715")]
	[Address(RVA = "0xE06270", Offset = "0xE06270", VA = "0xE06270")]
	public static void AddGeometrySet(AcousticTexture acousticTexture, MeshFilter meshFilter, ulong roomID, bool enableDiffraction, bool enableDiffractionOnBoundaryEdges)
	{
	}

	[Token(Token = "0x6001716")]
	[Address(RVA = "0xE07354", Offset = "0xE07354", VA = "0xE07354")]
	public static void RemoveGeometrySet(MeshFilter meshFilter)
	{
	}

	[Token(Token = "0x6001717")]
	[Address(RVA = "0xE0740C", Offset = "0xE0740C", VA = "0xE0740C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001718")]
	[Address(RVA = "0xE07464", Offset = "0xE07464", VA = "0xE07464")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001719")]
	[Address(RVA = "0xE0753C", Offset = "0xE0753C", VA = "0xE0753C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600171A")]
	[Address(RVA = "0xE07544", Offset = "0xE07544", VA = "0xE07544")]
	public AkSurfaceReflector()
	{
	}
}
[Token(Token = "0x20001FC")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D7084", Offset = "0x7D7084")]
public class AkSwitch : AkDragDropTriggerHandler
{
	[Token(Token = "0x4000D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AK.Wwise.Switch data;

	[Token(Token = "0x4000D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DDE34", Offset = "0x7DDE34")]
	private int valueIdInternal;

	[Token(Token = "0x4000D89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DDE90", Offset = "0x7DDE90")]
	private int groupIdInternal;

	[Token(Token = "0x4000D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DDEEC", Offset = "0x7DDEEC")]
	private byte[] valueGuidInternal;

	[Token(Token = "0x4000D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DDF48", Offset = "0x7DDF48")]
	private byte[] groupGuidInternal;

	[Token(Token = "0x17000246")]
	protected override BaseType WwiseType
	{
		[Token(Token = "0x600171B")]
		[Address(RVA = "0xE075AC", Offset = "0xE075AC", VA = "0xE075AC", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000247")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4750", Offset = "0x7E4750")]
	public int valueID
	{
		[Token(Token = "0x600171D")]
		[Address(RVA = "0xE07668", Offset = "0xE07668", VA = "0xE07668")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000248")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4788", Offset = "0x7E4788")]
	public int groupID
	{
		[Token(Token = "0x600171E")]
		[Address(RVA = "0xE0767C", Offset = "0xE0767C", VA = "0xE0767C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000249")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E47C0", Offset = "0x7E47C0")]
	public byte[] valueGuid
	{
		[Token(Token = "0x600171F")]
		[Address(RVA = "0xE07690", Offset = "0xE07690", VA = "0xE07690")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700024A")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E47F8", Offset = "0x7E47F8")]
	public byte[] groupGuid
	{
		[Token(Token = "0x6001720")]
		[Address(RVA = "0xE07758", Offset = "0xE07758", VA = "0xE07758")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600171C")]
	[Address(RVA = "0xE075B4", Offset = "0xE075B4", VA = "0xE075B4", Slot = "4")]
	public override void HandleEvent(GameObject in_gameObject)
	{
	}

	[Token(Token = "0x6001721")]
	[Address(RVA = "0xE0781C", Offset = "0xE0781C", VA = "0xE0781C")]
	public AkSwitch()
	{
	}
}
[Token(Token = "0x20001FD")]
[DisallowMultipleComponent]
public class AkTerminator : MonoBehaviour
{
	[Token(Token = "0x6001722")]
	[Address(RVA = "0xE07C68", Offset = "0xE07C68", VA = "0xE07C68")]
	public AkTerminator()
	{
	}
}
[Token(Token = "0x20001FE")]
public abstract class AkTriggerBase : MonoBehaviour
{
	[Token(Token = "0x2000452")]
	public delegate void Trigger(GameObject in_gameObject);

	[Token(Token = "0x4000D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Trigger triggerDelegate;

	[Token(Token = "0x6001723")]
	[Address(RVA = "0xE095C4", Offset = "0xE095C4", VA = "0xE095C4")]
	public static Dictionary<uint, string> GetAllDerivedTypes()
	{
		return null;
	}

	[Token(Token = "0x6001724")]
	[Address(RVA = "0xE09A00", Offset = "0xE09A00", VA = "0xE09A00")]
	protected AkTriggerBase()
	{
	}
}
[Token(Token = "0x20001FF")]
public class AkTriggerCollisionEnter : AkTriggerBase
{
	[Token(Token = "0x4000D8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject triggerObject;

	[Token(Token = "0x6001725")]
	[Address(RVA = "0xE09DFC", Offset = "0xE09DFC", VA = "0xE09DFC")]
	private void OnCollisionEnter(Collision in_other)
	{
	}

	[Token(Token = "0x6001726")]
	[Address(RVA = "0xE09F0C", Offset = "0xE09F0C", VA = "0xE09F0C")]
	private void OnTriggerEnter(Collider in_other)
	{
	}

	[Token(Token = "0x6001727")]
	[Address(RVA = "0xE0A01C", Offset = "0xE0A01C", VA = "0xE0A01C")]
	public AkTriggerCollisionEnter()
	{
	}
}
[Token(Token = "0x2000200")]
public class AkTriggerCollisionExit : AkTriggerBase
{
	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject triggerObject;

	[Token(Token = "0x6001728")]
	[Address(RVA = "0xE0A024", Offset = "0xE0A024", VA = "0xE0A024")]
	private void OnCollisionExit(Collision in_other)
	{
	}

	[Token(Token = "0x6001729")]
	[Address(RVA = "0xE0A134", Offset = "0xE0A134", VA = "0xE0A134")]
	public AkTriggerCollisionExit()
	{
	}
}
[Token(Token = "0x2000201")]
public class AkTriggerDisable : AkTriggerBase
{
	[Token(Token = "0x600172A")]
	[Address(RVA = "0xE0A13C", Offset = "0xE0A13C", VA = "0xE0A13C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600172B")]
	[Address(RVA = "0xE0A150", Offset = "0xE0A150", VA = "0xE0A150")]
	public AkTriggerDisable()
	{
	}
}
[Token(Token = "0x2000202")]
public class AkTriggerEnable : AkTriggerBase
{
	[Token(Token = "0x600172C")]
	[Address(RVA = "0xE0A158", Offset = "0xE0A158", VA = "0xE0A158")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600172D")]
	[Address(RVA = "0xE0A16C", Offset = "0xE0A16C", VA = "0xE0A16C")]
	public AkTriggerEnable()
	{
	}
}
[Token(Token = "0x2000203")]
public class AkTriggerEnter : AkTriggerBase
{
	[Token(Token = "0x4000D8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject triggerObject;

	[Token(Token = "0x600172E")]
	[Address(RVA = "0xE0A174", Offset = "0xE0A174", VA = "0xE0A174")]
	private void OnTriggerEnter(Collider in_other)
	{
	}

	[Token(Token = "0x600172F")]
	[Address(RVA = "0xE0A284", Offset = "0xE0A284", VA = "0xE0A284")]
	public AkTriggerEnter()
	{
	}
}
[Token(Token = "0x2000204")]
public class AkTriggerExit : AkTriggerBase
{
	[Token(Token = "0x4000D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject triggerObject;

	[Token(Token = "0x6001730")]
	[Address(RVA = "0xE0A28C", Offset = "0xE0A28C", VA = "0xE0A28C")]
	private void OnTriggerExit(Collider in_other)
	{
	}

	[Token(Token = "0x6001731")]
	[Address(RVA = "0xE0A39C", Offset = "0xE0A39C", VA = "0xE0A39C")]
	public AkTriggerExit()
	{
	}
}
[Token(Token = "0x2000205")]
public abstract class AkTriggerHandler : MonoBehaviour
{
	[Token(Token = "0x4000D91")]
	public const int AWAKE_TRIGGER_ID = 1151176110;

	[Token(Token = "0x4000D92")]
	public const int START_TRIGGER_ID = 1281810935;

	[Token(Token = "0x4000D93")]
	public const int DESTROY_TRIGGER_ID = -358577003;

	[Token(Token = "0x4000D94")]
	public const int MAX_NB_TRIGGERS = 32;

	[Token(Token = "0x4000D95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<uint, string> triggerTypes;

	[Token(Token = "0x4000D96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool didDestroy;

	[Token(Token = "0x4000D97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<int> triggerList;

	[Token(Token = "0x4000D98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useOtherObject;

	[Token(Token = "0x6001732")]
	public abstract void HandleEvent(GameObject in_gameObject);

	[Token(Token = "0x6001733")]
	[Address(RVA = "0xE0A3A4", Offset = "0xE0A3A4", VA = "0xE0A3A4", Slot = "5")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001734")]
	[Address(RVA = "0xE0A87C", Offset = "0xE0A87C", VA = "0xE0A87C", Slot = "6")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6001735")]
	[Address(RVA = "0xE0A900", Offset = "0xE0A900", VA = "0xE0A900", Slot = "7")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6001736")]
	[Address(RVA = "0xE0A910", Offset = "0xE0A910", VA = "0xE0A910")]
	public void DoDestroy()
	{
	}

	[Token(Token = "0x6001737")]
	[Address(RVA = "0xE0A46C", Offset = "0xE0A46C", VA = "0xE0A46C")]
	protected void RegisterTriggers(List<int> in_triggerList, AkTriggerBase.Trigger in_delegate)
	{
	}

	[Token(Token = "0x6001738")]
	[Address(RVA = "0xE0A9E0", Offset = "0xE0A9E0", VA = "0xE0A9E0")]
	protected void UnregisterTriggers(List<int> in_triggerList, AkTriggerBase.Trigger in_delegate)
	{
	}

	[Token(Token = "0x6001739")]
	[Address(RVA = "0xE0AD40", Offset = "0xE0AD40", VA = "0xE0AD40")]
	protected AkTriggerHandler()
	{
	}
}
[Token(Token = "0x2000206")]
[ExecuteInEditMode]
public abstract class AkDragDropTriggerHandler : AkTriggerHandler
{
	[Token(Token = "0x1700024B")]
	protected abstract BaseType WwiseType
	{
		[Token(Token = "0x600173B")]
		get;
	}

	[Token(Token = "0x600173C")]
	[Address(RVA = "0xC28130", Offset = "0xC28130", VA = "0xC28130", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600173D")]
	[Address(RVA = "0xC28138", Offset = "0xC28138", VA = "0xC28138", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600173E")]
	[Address(RVA = "0xC28140", Offset = "0xC28140", VA = "0xC28140", Slot = "7")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600173F")]
	[Address(RVA = "0xC28148", Offset = "0xC28148", VA = "0xC28148")]
	protected AkDragDropTriggerHandler()
	{
	}
}
[Token(Token = "0x2000207")]
public class AkTriggerMouseDown : AkTriggerBase
{
	[Token(Token = "0x6001740")]
	[Address(RVA = "0xE0AE2C", Offset = "0xE0AE2C", VA = "0xE0AE2C")]
	private void OnMouseDown()
	{
	}

	[Token(Token = "0x6001741")]
	[Address(RVA = "0xE0AE40", Offset = "0xE0AE40", VA = "0xE0AE40")]
	public AkTriggerMouseDown()
	{
	}
}
[Token(Token = "0x2000208")]
public class AkTriggerMouseEnter : AkTriggerBase
{
	[Token(Token = "0x6001742")]
	[Address(RVA = "0xE0AE48", Offset = "0xE0AE48", VA = "0xE0AE48")]
	private void OnMouseEnter()
	{
	}

	[Token(Token = "0x6001743")]
	[Address(RVA = "0xE0AE5C", Offset = "0xE0AE5C", VA = "0xE0AE5C")]
	public AkTriggerMouseEnter()
	{
	}
}
[Token(Token = "0x2000209")]
public class AkTriggerMouseExit : AkTriggerBase
{
	[Token(Token = "0x6001744")]
	[Address(RVA = "0xE0AE64", Offset = "0xE0AE64", VA = "0xE0AE64")]
	private void OnMouseExit()
	{
	}

	[Token(Token = "0x6001745")]
	[Address(RVA = "0xE0AE78", Offset = "0xE0AE78", VA = "0xE0AE78")]
	public AkTriggerMouseExit()
	{
	}
}
[Token(Token = "0x200020A")]
public class AkTriggerMouseUp : AkTriggerBase
{
	[Token(Token = "0x6001746")]
	[Address(RVA = "0xE0AE80", Offset = "0xE0AE80", VA = "0xE0AE80")]
	private void OnMouseUp()
	{
	}

	[Token(Token = "0x6001747")]
	[Address(RVA = "0xE0AE94", Offset = "0xE0AE94", VA = "0xE0AE94")]
	public AkTriggerMouseUp()
	{
	}
}
namespace AK.Wwise
{
	[Serializable]
	[Token(Token = "0x200020B")]
	public class AcousticTexture : BaseType
	{
		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseAcousticTextureReference WwiseObjectReference;

		[Token(Token = "0x1700024C")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001748")]
			[Address(RVA = "0x1304F70", Offset = "0x1304F70", VA = "0x1304F70", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001749")]
			[Address(RVA = "0x1304F78", Offset = "0x1304F78", VA = "0x1304F78", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x600174A")]
			[Address(RVA = "0x1305008", Offset = "0x1305008", VA = "0x1305008", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x1305010", Offset = "0x1305010", VA = "0x1305010")]
		public AcousticTexture()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200020C")]
	public class AuxBus : BaseType
	{
		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseAuxBusReference WwiseObjectReference;

		[Token(Token = "0x1700024E")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x600174C")]
			[Address(RVA = "0x1305020", Offset = "0x1305020", VA = "0x1305020", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600174D")]
			[Address(RVA = "0x1305028", Offset = "0x1305028", VA = "0x1305028", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x600174E")]
			[Address(RVA = "0x13050B8", Offset = "0x13050B8", VA = "0x13050B8", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0x13050C0", Offset = "0x13050C0", VA = "0x13050C0")]
		public AuxBus()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200020D")]
	public class Bank : BaseType
	{
		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseBankReference WwiseObjectReference;

		[Token(Token = "0x17000250")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001750")]
			[Address(RVA = "0x13050C8", Offset = "0x13050C8", VA = "0x13050C8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001751")]
			[Address(RVA = "0x13050D0", Offset = "0x13050D0", VA = "0x13050D0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001752")]
			[Address(RVA = "0x1305160", Offset = "0x1305160", VA = "0x1305160", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0x1305168", Offset = "0x1305168", VA = "0x1305168")]
		public void Load(bool decodeBank = false, bool saveDecodedBank = false)
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x1305224", Offset = "0x1305224", VA = "0x1305224")]
		public void LoadAsync([Optional] AkCallbackManager.BankCallback callback)
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x13052D8", Offset = "0x13052D8", VA = "0x13052D8")]
		public void Unload()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x1305378", Offset = "0x1305378", VA = "0x1305378")]
		public Bank()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200020E")]
	public abstract class BaseGroupType : BaseType
	{
		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DDFA4", Offset = "0x7DDFA4")]
		private int groupIdInternal;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DE000", Offset = "0x7DE000")]
		private byte[] groupGuidInternal;

		[Token(Token = "0x17000252")]
		public WwiseObjectReference GroupWwiseObjectReference
		{
			[Token(Token = "0x6001757")]
			[Address(RVA = "0x1305380", Offset = "0x1305380", VA = "0x1305380")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000253")]
		public abstract WwiseObjectType WwiseObjectGroupType
		{
			[Token(Token = "0x6001758")]
			get;
		}

		[Token(Token = "0x17000254")]
		public uint GroupId
		{
			[Token(Token = "0x6001759")]
			[Address(RVA = "0x1305468", Offset = "0x1305468", VA = "0x1305468")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000255")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4830", Offset = "0x7E4830")]
		public int groupID
		{
			[Token(Token = "0x600175B")]
			[Address(RVA = "0x1305620", Offset = "0x1305620", VA = "0x1305620")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000256")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E4868", Offset = "0x7E4868")]
		public byte[] groupGuid
		{
			[Token(Token = "0x600175C")]
			[Address(RVA = "0x1305624", Offset = "0x1305624", VA = "0x1305624")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x1305504", Offset = "0x1305504", VA = "0x1305504", Slot = "8")]
		public override bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x13056E8", Offset = "0x13056E8", VA = "0x13056E8")]
		protected BaseGroupType()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200020F")]
	public abstract class BaseType
	{
		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DE05C", Offset = "0x7DE05C")]
		private int idInternal;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7DE0B8", Offset = "0x7DE0B8")]
		private byte[] valueGuidInternal;

		[Token(Token = "0x17000257")]
		public abstract WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x600175E")]
			get;
			[Token(Token = "0x600175F")]
			set;
		}

		[Token(Token = "0x17000258")]
		public abstract WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001760")]
			get;
		}

		[Token(Token = "0x17000259")]
		public virtual string Name
		{
			[Token(Token = "0x6001761")]
			[Address(RVA = "0x13056F0", Offset = "0x13056F0", VA = "0x13056F0", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025A")]
		public uint Id
		{
			[Token(Token = "0x6001762")]
			[Address(RVA = "0x1305784", Offset = "0x1305784", VA = "0x1305784")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x1700025B")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E48A0", Offset = "0x7E48A0")]
		public int ID
		{
			[Token(Token = "0x6001767")]
			[Address(RVA = "0x1305964", Offset = "0x1305964", VA = "0x1305964")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700025C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E48D8", Offset = "0x7E48D8")]
		public byte[] valueGuid
		{
			[Token(Token = "0x6001768")]
			[Address(RVA = "0x1305968", Offset = "0x1305968", VA = "0x1305968")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x130559C", Offset = "0x130559C", VA = "0x130559C", Slot = "8")]
		public virtual bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0x13057D4", Offset = "0x13057D4", VA = "0x13057D4")]
		public bool Validate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0x13058B0", Offset = "0x13058B0", VA = "0x13058B0")]
		protected void Verify(AKRESULT result)
		{
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0x13058B4", Offset = "0x13058B4", VA = "0x13058B4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0x1305018", Offset = "0x1305018", VA = "0x1305018")]
		protected BaseType()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000210")]
	public class CallbackFlags
	{
		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint value;

		[Token(Token = "0x600176A")]
		[Address(RVA = "0x1305A2C", Offset = "0x1305A2C", VA = "0x1305A2C")]
		public CallbackFlags()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000211")]
	public class Event : BaseType
	{
		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseEventReference WwiseObjectReference;

		[Token(Token = "0x1700025D")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x600176B")]
			[Address(RVA = "0x1305A34", Offset = "0x1305A34", VA = "0x1305A34", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600176C")]
			[Address(RVA = "0x1305A3C", Offset = "0x1305A3C", VA = "0x1305A3C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700025E")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x600176D")]
			[Address(RVA = "0x1305ACC", Offset = "0x1305ACC", VA = "0x1305ACC", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0x1305AD4", Offset = "0x1305AD4", VA = "0x1305AD4")]
		private void VerifyPlayingID(uint playingId)
		{
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0x1305AD8", Offset = "0x1305AD8", VA = "0x1305AD8")]
		public uint Post(GameObject gameObject)
		{
			return default(uint);
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0x1305B88", Offset = "0x1305B88", VA = "0x1305B88")]
		public uint Post(GameObject gameObject, CallbackFlags flags, AkCallbackManager.EventCallback callback, [Optional] object cookie)
		{
			return default(uint);
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0x1305C68", Offset = "0x1305C68", VA = "0x1305C68")]
		public uint Post(GameObject gameObject, uint flags, AkCallbackManager.EventCallback callback, [Optional] object cookie)
		{
			return default(uint);
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0x1305D3C", Offset = "0x1305D3C", VA = "0x1305D3C")]
		public void Stop(GameObject gameObject, int transitionDuration = 0, AkCurveInterpolation curveInterpolation = AkCurveInterpolation.AkCurveInterpolation_Linear)
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0x1305D54", Offset = "0x1305D54", VA = "0x1305D54")]
		public void ExecuteAction(GameObject gameObject, AkActionOnEventType actionOnEventType, int transitionDuration, AkCurveInterpolation curveInterpolation)
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x1305E24", Offset = "0x1305E24", VA = "0x1305E24")]
		public void PostMIDI(GameObject gameObject, AkMIDIPostArray array)
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x1305E98", Offset = "0x1305E98", VA = "0x1305E98")]
		public void PostMIDI(GameObject gameObject, AkMIDIPostArray array, int count)
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x1305F14", Offset = "0x1305F14", VA = "0x1305F14")]
		public void StopMIDI(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0x1305FC0", Offset = "0x1305FC0", VA = "0x1305FC0")]
		public void StopMIDI()
		{
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0x1306058", Offset = "0x1306058", VA = "0x1306058")]
		public Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000212")]
	public class RTPC : BaseType
	{
		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseRtpcReference WwiseObjectReference;

		[Token(Token = "0x1700025F")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001779")]
			[Address(RVA = "0x1306060", Offset = "0x1306060", VA = "0x1306060", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600177A")]
			[Address(RVA = "0x1306068", Offset = "0x1306068", VA = "0x1306068", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000260")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x600177B")]
			[Address(RVA = "0x13060F8", Offset = "0x13060F8", VA = "0x13060F8", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0x1306100", Offset = "0x1306100", VA = "0x1306100")]
		public void SetValue(GameObject gameObject, float value)
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0x13061C0", Offset = "0x13061C0", VA = "0x13061C0")]
		public float GetValue(GameObject gameObject)
		{
			return default(float);
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0x13062B4", Offset = "0x13062B4", VA = "0x13062B4")]
		public void SetGlobalValue(float value)
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0x1306360", Offset = "0x1306360", VA = "0x1306360")]
		public float GetGlobalValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0x1306368", Offset = "0x1306368", VA = "0x1306368")]
		public RTPC()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000213")]
	public class State : BaseGroupType
	{
		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WwiseStateReference WwiseObjectReference;

		[Token(Token = "0x17000261")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001781")]
			[Address(RVA = "0x1306370", Offset = "0x1306370", VA = "0x1306370", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001782")]
			[Address(RVA = "0x1306378", Offset = "0x1306378", VA = "0x1306378", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000262")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001783")]
			[Address(RVA = "0x1306408", Offset = "0x1306408", VA = "0x1306408", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x17000263")]
		public override WwiseObjectType WwiseObjectGroupType
		{
			[Token(Token = "0x6001784")]
			[Address(RVA = "0x1306410", Offset = "0x1306410", VA = "0x1306410", Slot = "9")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0x1306418", Offset = "0x1306418", VA = "0x1306418")]
		public void SetValue()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0x13064C0", Offset = "0x13064C0", VA = "0x13064C0")]
		public State()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000214")]
	public class Switch : BaseGroupType
	{
		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WwiseSwitchReference WwiseObjectReference;

		[Token(Token = "0x17000264")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x6001787")]
			[Address(RVA = "0x13064C8", Offset = "0x13064C8", VA = "0x13064C8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001788")]
			[Address(RVA = "0x13064D0", Offset = "0x13064D0", VA = "0x13064D0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x6001789")]
			[Address(RVA = "0x1306560", Offset = "0x1306560", VA = "0x1306560", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x17000266")]
		public override WwiseObjectType WwiseObjectGroupType
		{
			[Token(Token = "0x600178A")]
			[Address(RVA = "0x1306568", Offset = "0x1306568", VA = "0x1306568", Slot = "9")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0x1306570", Offset = "0x1306570", VA = "0x1306570")]
		public void SetValue(GameObject gameObject)
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0x130662C", Offset = "0x130662C", VA = "0x130662C")]
		public Switch()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000215")]
	public class Trigger : BaseType
	{
		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WwiseTriggerReference WwiseObjectReference;

		[Token(Token = "0x17000267")]
		public override WwiseObjectReference ObjectReference
		{
			[Token(Token = "0x600178D")]
			[Address(RVA = "0x1306634", Offset = "0x1306634", VA = "0x1306634", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600178E")]
			[Address(RVA = "0x130663C", Offset = "0x130663C", VA = "0x130663C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public override WwiseObjectType WwiseObjectType
		{
			[Token(Token = "0x600178F")]
			[Address(RVA = "0x13066CC", Offset = "0x13066CC", VA = "0x13066CC", Slot = "6")]
			get
			{
				return default(WwiseObjectType);
			}
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0x13066D4", Offset = "0x13066D4", VA = "0x13066D4")]
		public void Post(GameObject gameObject)
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0x1306780", Offset = "0x1306780", VA = "0x1306780")]
		public Trigger()
		{
		}
	}
}
namespace ARTNGAME.Skymaster
{
	[Token(Token = "0x2000216")]
	public abstract class AbstractTargetFollowerSM : MonoBehaviour
	{
		[Token(Token = "0x2000453")]
		public enum UpdateType
		{
			[Token(Token = "0x40021BA")]
			FixedUpdate,
			[Token(Token = "0x40021BB")]
			LateUpdate,
			[Token(Token = "0x40021BC")]
			ManualUpdate
		}

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform m_Target;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_AutoTargetPlayer;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private UpdateType m_UpdateType;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Rigidbody targetRigidbody;

		[Token(Token = "0x17000269")]
		public Transform Target
		{
			[Token(Token = "0x6001799")]
			[Address(RVA = "0xC1146C", Offset = "0xC1146C", VA = "0xC1146C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xC11078", Offset = "0xC11078", VA = "0xC11078", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xC111E0", Offset = "0xC111E0", VA = "0xC111E0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xC112B4", Offset = "0xC112B4", VA = "0xC112B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xC1138C", Offset = "0xC1138C", VA = "0xC1138C")]
		public void ManualUpdate()
		{
		}

		[Token(Token = "0x6001796")]
		protected abstract void FollowTarget(float deltaTime);

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xC11120", Offset = "0xC11120", VA = "0xC11120")]
		public void FindAndTargetPlayer()
		{
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xC11464", Offset = "0xC11464", VA = "0xC11464", Slot = "6")]
		public virtual void SetTarget(Transform newTransform)
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xC11474", Offset = "0xC11474", VA = "0xC11474")]
		protected AbstractTargetFollowerSM()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class AeroplaneAudioSM : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000454")]
		public class AdvancedSetttings
		{
			[Token(Token = "0x40021BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float engineMinDistance;

			[Token(Token = "0x40021BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float engineMaxDistance;

			[Token(Token = "0x40021BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float engineDopplerLevel;

			[Token(Token = "0x40021C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7E0984", Offset = "0x7E0984")]
			public float engineMasterVolume;

			[Token(Token = "0x40021C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float windMinDistance;

			[Token(Token = "0x40021C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float windMaxDistance;

			[Token(Token = "0x40021C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float windDopplerLevel;

			[Token(Token = "0x40021C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7E099C", Offset = "0x7E099C")]
			public float windMasterVolume;

			[Token(Token = "0x6002513")]
			[Address(RVA = "0xC118F4", Offset = "0xC118F4", VA = "0xC118F4")]
			public AdvancedSetttings()
			{
			}
		}

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioClip m_EngineSound;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_EngineMinThrottlePitch;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_EngineMaxThrottlePitch;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_EngineFwdSpeedMultiplier;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip m_WindSound;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_WindBasePitch;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float m_WindSpeedPitchFactor;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_WindMaxSpeedVolume;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AdvancedSetttings m_AdvancedSetttings;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource m_EngineSoundSource;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource m_WindSoundSource;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AeroplaneControllerSM m_Plane;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xC11484", Offset = "0xC11484", VA = "0xC11484")]
		private void Awake()
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xC1167C", Offset = "0xC1167C", VA = "0xC1167C")]
		private void Update()
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xC11840", Offset = "0xC11840", VA = "0xC11840")]
		public AeroplaneAudioSM()
		{
		}
	}
	[Token(Token = "0x2000218")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D70DC", Offset = "0x7D70DC")]
	public class AeroplaneControllerSM : MonoBehaviour
	{
		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_MaxEnginePower;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_Lift;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_ZeroLiftSpeed;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_RollEffect;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_PitchEffect;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_YawEffect;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_BankedTurnEffect;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_AerodynamicEffect;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_AutoTurnPitch;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float m_AutoRollLevel;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_AutoPitchLevel;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float m_AirBrakesEffect;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_ThrottleChangeSpeed;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_DragIncreaseFactor;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE2B4", Offset = "0x7DE2B4")]
		private float <Altitude>k__BackingField;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE2C4", Offset = "0x7DE2C4")]
		private float <Throttle>k__BackingField;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE2D4", Offset = "0x7DE2D4")]
		private bool <AirBrakes>k__BackingField;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE2E4", Offset = "0x7DE2E4")]
		private float <ForwardSpeed>k__BackingField;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE2F4", Offset = "0x7DE2F4")]
		private float <EnginePower>k__BackingField;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE304", Offset = "0x7DE304")]
		private float <RollAngle>k__BackingField;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE314", Offset = "0x7DE314")]
		private float <PitchAngle>k__BackingField;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE324", Offset = "0x7DE324")]
		private float <RollInput>k__BackingField;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE334", Offset = "0x7DE334")]
		private float <PitchInput>k__BackingField;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE344", Offset = "0x7DE344")]
		private float <YawInput>k__BackingField;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE354", Offset = "0x7DE354")]
		private float <ThrottleInput>k__BackingField;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float m_OriginalDrag;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float m_OriginalAngularDrag;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float m_AeroFactor;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool m_Immobilized;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float m_BankedTurnAmount;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private WheelCollider[] m_WheelColliders;

		[Token(Token = "0x1700026A")]
		public float Altitude
		{
			[Token(Token = "0x600179E")]
			[Address(RVA = "0xC11D2C", Offset = "0xC11D2C", VA = "0xC11D2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2008", Offset = "0x7E2008")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600179F")]
			[Address(RVA = "0xC11D34", Offset = "0xC11D34", VA = "0xC11D34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2018", Offset = "0x7E2018")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026B")]
		public float Throttle
		{
			[Token(Token = "0x60017A0")]
			[Address(RVA = "0xC11D3C", Offset = "0xC11D3C", VA = "0xC11D3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2028", Offset = "0x7E2028")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017A1")]
			[Address(RVA = "0xC11D44", Offset = "0xC11D44", VA = "0xC11D44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2038", Offset = "0x7E2038")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026C")]
		public bool AirBrakes
		{
			[Token(Token = "0x60017A2")]
			[Address(RVA = "0xC11D4C", Offset = "0xC11D4C", VA = "0xC11D4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2048", Offset = "0x7E2048")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017A3")]
			[Address(RVA = "0xC11D54", Offset = "0xC11D54", VA = "0xC11D54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2058", Offset = "0x7E2058")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026D")]
		public float ForwardSpeed
		{
			[Token(Token = "0x60017A4")]
			[Address(RVA = "0xC11D60", Offset = "0xC11D60", VA = "0xC11D60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2068", Offset = "0x7E2068")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017A5")]
			[Address(RVA = "0xC11D68", Offset = "0xC11D68", VA = "0xC11D68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2078", Offset = "0x7E2078")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026E")]
		public float EnginePower
		{
			[Token(Token = "0x60017A6")]
			[Address(RVA = "0xC11D70", Offset = "0xC11D70", VA = "0xC11D70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2088", Offset = "0x7E2088")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017A7")]
			[Address(RVA = "0xC11D78", Offset = "0xC11D78", VA = "0xC11D78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2098", Offset = "0x7E2098")]
			private set
			{
			}
		}

		[Token(Token = "0x1700026F")]
		public float MaxEnginePower
		{
			[Token(Token = "0x60017A8")]
			[Address(RVA = "0xC11D80", Offset = "0xC11D80", VA = "0xC11D80")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000270")]
		public float RollAngle
		{
			[Token(Token = "0x60017A9")]
			[Address(RVA = "0xC11D88", Offset = "0xC11D88", VA = "0xC11D88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E20A8", Offset = "0x7E20A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017AA")]
			[Address(RVA = "0xC11D90", Offset = "0xC11D90", VA = "0xC11D90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E20B8", Offset = "0x7E20B8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000271")]
		public float PitchAngle
		{
			[Token(Token = "0x60017AB")]
			[Address(RVA = "0xC11D98", Offset = "0xC11D98", VA = "0xC11D98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E20C8", Offset = "0x7E20C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017AC")]
			[Address(RVA = "0xC11DA0", Offset = "0xC11DA0", VA = "0xC11DA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E20D8", Offset = "0x7E20D8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public float RollInput
		{
			[Token(Token = "0x60017AD")]
			[Address(RVA = "0xC11DA8", Offset = "0xC11DA8", VA = "0xC11DA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E20E8", Offset = "0x7E20E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017AE")]
			[Address(RVA = "0xC11DB0", Offset = "0xC11DB0", VA = "0xC11DB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E20F8", Offset = "0x7E20F8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000273")]
		public float PitchInput
		{
			[Token(Token = "0x60017AF")]
			[Address(RVA = "0xC11DB8", Offset = "0xC11DB8", VA = "0xC11DB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2108", Offset = "0x7E2108")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017B0")]
			[Address(RVA = "0xC11DC0", Offset = "0xC11DC0", VA = "0xC11DC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2118", Offset = "0x7E2118")]
			private set
			{
			}
		}

		[Token(Token = "0x17000274")]
		public float YawInput
		{
			[Token(Token = "0x60017B1")]
			[Address(RVA = "0xC11DC8", Offset = "0xC11DC8", VA = "0xC11DC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2128", Offset = "0x7E2128")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017B2")]
			[Address(RVA = "0xC11DD0", Offset = "0xC11DD0", VA = "0xC11DD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2138", Offset = "0x7E2138")]
			private set
			{
			}
		}

		[Token(Token = "0x17000275")]
		public float ThrottleInput
		{
			[Token(Token = "0x60017B3")]
			[Address(RVA = "0xC11DD8", Offset = "0xC11DD8", VA = "0xC11DD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2148", Offset = "0x7E2148")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017B4")]
			[Address(RVA = "0xC11DE0", Offset = "0xC11DE0", VA = "0xC11DE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2158", Offset = "0x7E2158")]
			private set
			{
			}
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xC11DE8", Offset = "0xC11DE8", VA = "0xC11DE8")]
		private void Start()
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xC11F50", Offset = "0xC11F50", VA = "0xC11F50")]
		public void Move(float rollInput, float pitchInput, float yawInput, float throttleInput, bool airBrakes)
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xC11FC4", Offset = "0xC11FC4", VA = "0xC11FC4")]
		private void ClampInputs()
		{
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xC120AC", Offset = "0xC120AC", VA = "0xC120AC")]
		private void CalculateRollAndPitchAngles()
		{
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xC12228", Offset = "0xC12228", VA = "0xC12228")]
		private void AutoLevel()
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xC12314", Offset = "0xC12314", VA = "0xC12314")]
		private void CalculateForwardSpeed()
		{
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xC123D0", Offset = "0xC123D0", VA = "0xC123D0")]
		private void ControlThrottle()
		{
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xC12494", Offset = "0xC12494", VA = "0xC12494")]
		private void CalculateDrag()
		{
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xC12540", Offset = "0xC12540", VA = "0xC12540")]
		private void CaluclateAerodynamicEffect()
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xC12814", Offset = "0xC12814", VA = "0xC12814")]
		private void CalculateLinearForces()
		{
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xC12A38", Offset = "0xC12A38", VA = "0xC12A38")]
		private void CalculateTorque()
		{
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xC12CAC", Offset = "0xC12CAC", VA = "0xC12CAC")]
		private void CalculateAltitude()
		{
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xC12E44", Offset = "0xC12E44", VA = "0xC12E44")]
		public void Immobilize()
		{
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xC12E50", Offset = "0xC12E50", VA = "0xC12E50")]
		public void Reset()
		{
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xC12E58", Offset = "0xC12E58", VA = "0xC12E58")]
		public AeroplaneControllerSM()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class AeroplaneControlSurfaceAnimatorSM : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000455")]
		public class ControlSurface
		{
			[Token(Token = "0x20004F6")]
			public enum Type
			{
				[Token(Token = "0x400246C")]
				Aileron,
				[Token(Token = "0x400246D")]
				Elevator,
				[Token(Token = "0x400246E")]
				Rudder,
				[Token(Token = "0x400246F")]
				RuddervatorNegative,
				[Token(Token = "0x4002470")]
				RuddervatorPositive
			}

			[Token(Token = "0x40021C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x40021C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float amount;

			[Token(Token = "0x40021C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Type type;

			[Token(Token = "0x40021C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[HideInInspector]
			public Quaternion originalLocalRotation;

			[Token(Token = "0x6002514")]
			[Address(RVA = "0xC11D24", Offset = "0xC11D24", VA = "0xC11D24")]
			public ControlSurface()
			{
			}
		}

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_Smoothing;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ControlSurface[] m_ControlSurfaces;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AeroplaneControllerSM m_Plane;

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xC11910", Offset = "0xC11910", VA = "0xC11910")]
		private void Start()
		{
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xC119DC", Offset = "0xC119DC", VA = "0xC119DC")]
		private void Update()
		{
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xC11BBC", Offset = "0xC11BBC", VA = "0xC11BBC")]
		private void RotateSurface(ControlSurface surface, Quaternion rotation)
		{
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xC11D14", Offset = "0xC11D14", VA = "0xC11D14")]
		public AeroplaneControlSurfaceAnimatorSM()
		{
		}
	}
	[Token(Token = "0x200021A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7140", Offset = "0x7D7140")]
	public class AeroplaneUserControl2AxisSM : MonoBehaviour
	{
		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxRollAngle;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxPitchAngle;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AeroplaneControllerSM m_Aeroplane;

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xC12E98", Offset = "0xC12E98", VA = "0xC12E98")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xC12EF0", Offset = "0xC12EF0", VA = "0xC12EF0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xC12FB0", Offset = "0xC12FB0", VA = "0xC12FB0")]
		private void AdjustInputForMobileControls(ref float roll, ref float pitch, ref float throttle)
		{
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xC130EC", Offset = "0xC130EC", VA = "0xC130EC")]
		public AeroplaneUserControl2AxisSM()
		{
		}
	}
	[Token(Token = "0x200021B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D71A4", Offset = "0x7D71A4")]
	public class AeroplaneUserControl4AxisSM : MonoBehaviour
	{
		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxRollAngle;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxPitchAngle;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AeroplaneControllerSM m_Aeroplane;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_Throttle;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool m_AirBrakes;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_Yaw;

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xC13100", Offset = "0xC13100", VA = "0xC13100")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xC13158", Offset = "0xC13158", VA = "0xC13158")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xC1323C", Offset = "0xC1323C", VA = "0xC1323C")]
		private void AdjustInputForMobileControls(ref float roll, ref float pitch, ref float throttle)
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xC13338", Offset = "0xC13338", VA = "0xC13338")]
		public AeroplaneUserControl4AxisSM()
		{
		}
	}
	[Token(Token = "0x200021C")]
	[ExecuteInEditMode]
	public class AutoCamSM : PivotBasedCameraRigSM
	{
		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_MoveSpeed;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float m_TurnSpeed;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float m_RollSpeed;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool m_FollowVelocity;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[SerializeField]
		private bool m_FollowTilt;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float m_SpinTurnLimit;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float m_TargetVelocityLowerLimit;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float m_SmoothTurnTime;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_LastFlatAngle;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_CurrentTurnAmount;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_TurnSpeedVelocityChange;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 m_RollUp;

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xC1334C", Offset = "0xC1334C", VA = "0xC1334C", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xC138D0", Offset = "0xC138D0", VA = "0xC138D0")]
		public AutoCamSM()
		{
		}
	}
	[Token(Token = "0x200021D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7218", Offset = "0x7D7218")]
	public class JetParticleEffectSM : MonoBehaviour
	{
		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color minColour;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AeroplaneControllerSM m_Jet;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem m_System;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_OriginalStartSize;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_OriginalLifetime;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color m_OriginalStartColor;

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xC1398C", Offset = "0xC1398C", VA = "0xC1398C")]
		private void Start()
		{
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xC13BF8", Offset = "0xC13BF8", VA = "0xC13BF8")]
		private void Update()
		{
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xC13AC0", Offset = "0xC13AC0", VA = "0xC13AC0")]
		private AeroplaneControllerSM FindAeroplaneParent()
		{
			return null;
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xC13DA0", Offset = "0xC13DA0", VA = "0xC13DA0")]
		public JetParticleEffectSM()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public abstract class PivotBasedCameraRigSM : AbstractTargetFollowerSM
	{
		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform m_Cam;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform m_Pivot;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector3 m_LastTargetPosition;

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xC13DA8", Offset = "0xC13DA8", VA = "0xC13DA8", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xC1397C", Offset = "0xC1397C", VA = "0xC1397C")]
		protected PivotBasedCameraRigSM()
		{
		}
	}
}
namespace BoundarySystem_Ext
{
	[Token(Token = "0x200021F")]
	internal static class Pvr_BoundaryAPI
	{
		[Token(Token = "0x4000DF8")]
		private const string LibFileName = "Pvr_UnitySDK";

		[PreserveSig]
		[Token(Token = "0x60017D8")]
		[Address(RVA = "0x9B92D0", Offset = "0x9B92D0", VA = "0x9B92D0")]
		public static extern void Pvr_StartSDKBoundary();

		[PreserveSig]
		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x9B935C", Offset = "0x9B935C", VA = "0x9B935C")]
		public static extern void Pvr_ShutdownSDKBoundary();

		[PreserveSig]
		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x9B93E8", Offset = "0x9B93E8", VA = "0x9B93E8")]
		private static extern int Pvr_GetMainSensorStateExt(ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz, ref float vfov, ref float hfov, ref int viewNumber);

		[PreserveSig]
		[Token(Token = "0x60017DB")]
		[Address(RVA = "0x9B94E4", Offset = "0x9B94E4", VA = "0x9B94E4")]
		private static extern IntPtr Pvr_GetCameraData_Ext();

		[PreserveSig]
		[Token(Token = "0x60017DC")]
		[Address(RVA = "0x9B9570", Offset = "0x9B9570", VA = "0x9B9570")]
		public static extern void Pvr_ResetVrModebyForce();

		[PreserveSig]
		[Token(Token = "0x60017DD")]
		[Address(RVA = "0x9B95FC", Offset = "0x9B95FC", VA = "0x9B95FC")]
		private static extern bool Pvr_ResumeBoundaryForSTS();

		[PreserveSig]
		[Token(Token = "0x60017DE")]
		[Address(RVA = "0x9B9690", Offset = "0x9B9690", VA = "0x9B9690")]
		private static extern void Pvr_PauseBoundaryForSTS();

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0x9B971C", Offset = "0x9B971C", VA = "0x9B971C")]
		public static int UPvr_GetMainSensorStateExt(ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz, ref float vfov, ref float hfov, ref int viewNumber)
		{
			return default(int);
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0x9B9728", Offset = "0x9B9728", VA = "0x9B9728")]
		public static IntPtr UPvr_GetCameraData_Ext()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0x9B9764", Offset = "0x9B9764", VA = "0x9B9764")]
		public static bool UPvr_ResumeBoundaryForSTS()
		{
			return default(bool);
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0x9B9768", Offset = "0x9B9768", VA = "0x9B9768")]
		public static void UPvr_PauseBoundaryForSTS()
		{
		}

		[Token(Token = "0x60017E3")]
		public static IntPtr StructToIntPtr<T>(T info)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60017E4")]
		public static T IntPtrToStruct<T>(IntPtr info)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x2000220")]
	internal static class Pvr_SafeAreaAlgoAPI
	{
		[Token(Token = "0x2000456")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7D8C58", Offset = "0x7D8C58")]
		public delegate void SafeAreaCallback(IntPtr lineCollectionPtr, IntPtr safeAreaRectPtr);

		[Token(Token = "0x2000457")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x7D8C6C", Offset = "0x7D8C6C")]
		public delegate void SafeAreaCallbackShrink(IntPtr lineCollectionPtr, IntPtr safeAreaDetailRectPtr);

		[Token(Token = "0x2000458")]
		public struct GSAPoint3i
		{
			[Token(Token = "0x40021C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int x;

			[Token(Token = "0x40021CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int y;

			[Token(Token = "0x40021CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int z;
		}

		[Token(Token = "0x2000459")]
		public struct GSALine
		{
			[Token(Token = "0x40021CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntPtr pointArray;

			[Token(Token = "0x40021CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int pointCount;
		}

		[Token(Token = "0x200045A")]
		public struct GSALineCollection
		{
			[Token(Token = "0x40021CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntPtr lineArray;

			[Token(Token = "0x40021CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int lineCount;
		}

		[Token(Token = "0x200045B")]
		public struct GSALegalData
		{
			[Token(Token = "0x40021D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int overMaxRange;

			[Token(Token = "0x40021D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int includeBigGrap;

			[Token(Token = "0x40021D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int bigGapNum;

			[Token(Token = "0x40021D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int centerOut;

			[Token(Token = "0x40021D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int removeNarrow;

			[Token(Token = "0x40021D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int overMaxRange_more;

			[Token(Token = "0x40021D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int validShrinkArea;
		}

		[Token(Token = "0x200045C")]
		public struct GSARect
		{
			[Token(Token = "0x40021D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GSAPoint3i leftup;

			[Token(Token = "0x40021D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public GSAPoint3i leftdown;

			[Token(Token = "0x40021D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GSAPoint3i rightup;

			[Token(Token = "0x40021DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public GSAPoint3i rightdown;

			[Token(Token = "0x40021DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GSAPoint3i center;

			[Token(Token = "0x40021DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public uint width;

			[Token(Token = "0x40021DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public uint height;

			[Token(Token = "0x40021DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int isLegal;

			[Token(Token = "0x40021DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public GSALegalData legalData;
		}

		[Token(Token = "0x4000DF9")]
		private const string LibFileName = "SafetyArea";

		[PreserveSig]
		[Token(Token = "0x60017E5")]
		[Address(RVA = "0x9B9A08", Offset = "0x9B9A08", VA = "0x9B9A08")]
		private static extern int GSAInit(int width, int height);

		[PreserveSig]
		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x9B9AB4", Offset = "0x9B9AB4", VA = "0x9B9AB4")]
		private static extern int GSAShutDown();

		[PreserveSig]
		[Token(Token = "0x60017E7")]
		[Address(RVA = "0x9B9B40", Offset = "0x9B9B40", VA = "0x9B9B40")]
		private static extern int GSASetCallback(SafeAreaCallback cb);

		[PreserveSig]
		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x9B9BE0", Offset = "0x9B9BE0", VA = "0x9B9BE0")]
		private static extern int GSASetCallbackShrink(SafeAreaCallbackShrink cb);

		[PreserveSig]
		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x9B9C80", Offset = "0x9B9C80", VA = "0x9B9C80")]
		private static extern int GSAUpDateData(IntPtr lineCollectionPtr);

		[PreserveSig]
		[Token(Token = "0x60017EA")]
		[Address(RVA = "0x9B9D1C", Offset = "0x9B9D1C", VA = "0x9B9D1C")]
		private static extern int GSASetConfigFilePath(IntPtr configPath);

		[PreserveSig]
		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x9B9DB8", Offset = "0x9B9DB8", VA = "0x9B9DB8")]
		private static extern bool GSAGetClosedAreaUpdateFlag();

		[PreserveSig]
		[Token(Token = "0x60017EC")]
		[Address(RVA = "0x9B9E4C", Offset = "0x9B9E4C", VA = "0x9B9E4C")]
		private static extern int GSALoadSafetyArea(IntPtr lineCollectionPtr);

		[PreserveSig]
		[Token(Token = "0x60017ED")]
		[Address(RVA = "0x9B9EE8", Offset = "0x9B9EE8", VA = "0x9B9EE8")]
		private static extern double GSABoundaryDetector(ref GSAPoint3i pointPtr);

		[PreserveSig]
		[Token(Token = "0x60017EE")]
		[Address(RVA = "0x9B9F84", Offset = "0x9B9F84", VA = "0x9B9F84")]
		private static extern int GSALoadSafetyArea2(IntPtr lineCollectionPtr, bool isPlayArea);

		[PreserveSig]
		[Token(Token = "0x60017EF")]
		[Address(RVA = "0x9BA030", Offset = "0x9BA030", VA = "0x9BA030")]
		private static extern double GSABoundaryDetector2(ref GSAPoint3i point, bool isPlayArea, ref GSAPoint3i closestPoint, ref GSAPoint3i normalDir);

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0x9BA0F4", Offset = "0x9BA0F4", VA = "0x9BA0F4")]
		public static int Pvr_GSAInit(int width, int height)
		{
			return default(int);
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0x9BA0F8", Offset = "0x9BA0F8", VA = "0x9BA0F8")]
		public static int Pvr_GSASetCallback(SafeAreaCallback cb)
		{
			return default(int);
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x9BA0FC", Offset = "0x9BA0FC", VA = "0x9BA0FC")]
		public static int Pvr_GSASetCallbackShrink(SafeAreaCallbackShrink cb)
		{
			return default(int);
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0x9BA100", Offset = "0x9BA100", VA = "0x9BA100")]
		public static int Pvr_GSAUpDateData(IntPtr lineCollectionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x9BA104", Offset = "0x9BA104", VA = "0x9BA104")]
		public static bool Pvr_GSAGetClosedAreaUpdateFlag()
		{
			return default(bool);
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x9BA108", Offset = "0x9BA108", VA = "0x9BA108")]
		public static int Pvr_GSASetConfigFilePath(string configPath)
		{
			return default(int);
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x9BA190", Offset = "0x9BA190", VA = "0x9BA190")]
		public static int Pvr_GSALoadSafetyArea(IntPtr lineCollectionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x9BA194", Offset = "0x9BA194", VA = "0x9BA194")]
		public static double Pvr_GSABoundaryDetector(ref GSAPoint3i point)
		{
			return default(double);
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x9BA198", Offset = "0x9BA198", VA = "0x9BA198")]
		public static int Pvr_GSAShutDown()
		{
			return default(int);
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x9BA19C", Offset = "0x9BA19C", VA = "0x9BA19C")]
		public static int Pvr_GSALoadSafetyArea2(IntPtr lineCollectionPtr, bool isPlayArea)
		{
			return default(int);
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x9BA1A4", Offset = "0x9BA1A4", VA = "0x9BA1A4")]
		public static double Pvr_GSABoundaryDetector2(ref GSAPoint3i point, bool isPlayArea, ref GSAPoint3i closestPoint, ref GSAPoint3i normalDir)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000221")]
	public class Pvr_BoundarySystem
	{
		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Pvr_BoundarySystem instance;

		[Token(Token = "0x4000DFB")]
		public const int CameraImageWidth = 1280;

		[Token(Token = "0x4000DFC")]
		public const int CameraImageHeight = 400;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr CameraFramePtr;

		[Token(Token = "0x17000276")]
		public static Pvr_BoundarySystem Instance
		{
			[Token(Token = "0x60017FB")]
			[Address(RVA = "0x9B976C", Offset = "0x9B976C", VA = "0x9B976C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x9B9834", Offset = "0x9B9834", VA = "0x9B9834")]
		public void OpenBoundary()
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x9B9838", Offset = "0x9B9838", VA = "0x9B9838")]
		public void CloseBoundary()
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x9B983C", Offset = "0x9B983C", VA = "0x9B983C")]
		public void Reset6Dof()
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x9B9840", Offset = "0x9B9840", VA = "0x9B9840")]
		public float[] GetControllerFixedPoseData(int hand)
		{
			return null;
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x9B97E8", Offset = "0x9B97E8", VA = "0x9B97E8")]
		public Pvr_BoundarySystem()
		{
		}
	}
	[Token(Token = "0x2000222")]
	public class Pvr_SafeAreaAlgoModule
	{
		[Token(Token = "0x200045D")]
		public struct ExtraInfo
		{
			[Token(Token = "0x40021E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool overMaxRange;

			[Token(Token = "0x40021E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeBigGap;

			[Token(Token = "0x40021E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int bigGapNum;

			[Token(Token = "0x40021E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool centerOut;

			[Token(Token = "0x40021E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool removeNarrow;

			[Token(Token = "0x40021E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			public bool overMaxRange_more;

			[Token(Token = "0x40021E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int validShrinkArea;
		}

		[Token(Token = "0x200045E")]
		public struct BoundaryPlayerArea
		{
			[Token(Token = "0x40021E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 lowerleft;

			[Token(Token = "0x40021E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 upperleft;

			[Token(Token = "0x40021E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 upperRight;

			[Token(Token = "0x40021EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 lowerRight;

			[Token(Token = "0x40021EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 center;

			[Token(Token = "0x40021EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public uint width;

			[Token(Token = "0x40021ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public uint height;

			[Token(Token = "0x40021EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool isLegal;

			[Token(Token = "0x40021EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public ExtraInfo extraInfo;
		}

		[Token(Token = "0x200045F")]
		public delegate void BoundarySystemCallback(BoundaryPlayerArea playAreaInfo, List<Vector3> boundaryPoints, List<List<Vector3>> unusedLines);

		[Token(Token = "0x2000460")]
		public delegate void BoundarySystemCallbackShrink(List<Vector3> rectPoints, List<Vector3> boundaryPoints, List<List<Vector3>> unusedLines);

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Pvr_SafeAreaAlgoModule instance;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BoundarySystemCallback boundarySystemCallback;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BoundarySystemCallbackShrink boundarySystemCallbackShrink;

		[Token(Token = "0x17000277")]
		public static Pvr_SafeAreaAlgoModule Instance
		{
			[Token(Token = "0x6001801")]
			[Address(RVA = "0x9BB5C0", Offset = "0x9BB5C0", VA = "0x9BB5C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x9BB648", Offset = "0x9BB648", VA = "0x9BB648")]
		public void RegisterCallBack(BoundarySystemCallback callback)
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x9BB650", Offset = "0x9BB650", VA = "0x9BB650")]
		public void RegisterCallBackShrink(BoundarySystemCallbackShrink callback)
		{
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0x9BB658", Offset = "0x9BB658", VA = "0x9BB658")]
		public bool Start()
		{
			return default(bool);
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x9BB778", Offset = "0x9BB778", VA = "0x9BB778")]
		public bool CommitNewLineData(bool isFistLine, Vector3[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0x9BBA0C", Offset = "0x9BBA0C", VA = "0x9BBA0C")]
		public bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x9BBA90", Offset = "0x9BBA90", VA = "0x9BBA90")]
		public double QueryDistanceOfPoint(Vector3 point)
		{
			return default(double);
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x9BBAE4", Offset = "0x9BBAE4", VA = "0x9BBAE4")]
		public double QueryDistanceOfPoint(Vector3 point, bool isPlayArea, ref Vector3 closestPoint, ref Vector3 normalDir)
		{
			return default(double);
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x9BA7DC", Offset = "0x9BA7DC", VA = "0x9BA7DC")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7E2168", Offset = "0x7E2168")]
		private static void _SafeAreaCallback(IntPtr lineCollectionPtr, IntPtr safeAreaRectPtr)
		{
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x9BAF00", Offset = "0x9BAF00", VA = "0x9BAF00")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7E21CC", Offset = "0x7E21CC")]
		private static void _SafeAreaCallbackShrink(IntPtr lineCollectionPtr, IntPtr safeAreaDetailRectPtr)
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x9BB640", Offset = "0x9BB640", VA = "0x9BB640")]
		public Pvr_SafeAreaAlgoModule()
		{
		}
	}
}
namespace Pvr_UnitySDKAPI
{
	[Token(Token = "0x2000223")]
	public class PvrControllerKey
	{
		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool State;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool PressedDown;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool PressedUp;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool LongPressed;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool Click;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool Touch;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool TouchDown;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		public bool TouchUp;

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x11A0A84", Offset = "0x11A0A84", VA = "0x11A0A84")]
		public PvrControllerKey()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class ControllerHand
	{
		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PvrControllerKey App;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PvrControllerKey Touch;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PvrControllerKey Home;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PvrControllerKey VolumeDown;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PvrControllerKey VolumeUp;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PvrControllerKey Trigger;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PvrControllerKey X;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public PvrControllerKey Y;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public PvrControllerKey A;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PvrControllerKey B;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public PvrControllerKey Left;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public PvrControllerKey Right;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public PvrControllerKey Thumbrest;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector2 TouchPadPosition;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int TriggerNum;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int GripValue;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Quaternion Rotation;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Vector3 Position;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int Battery;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ControllerState ConnectState;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public SwipeDirection SwipeDirection;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TouchPadClick TouchPadClick;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool isShowBoundary;

		[Token(Token = "0x600180D")]
		[Address(RVA = "0x11A089C", Offset = "0x11A089C", VA = "0x11A089C")]
		public ControllerHand()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public enum ControllerState
	{
		[Token(Token = "0x4000E21")]
		Error = -1,
		[Token(Token = "0x4000E22")]
		DisConnected,
		[Token(Token = "0x4000E23")]
		Connected
	}
	[Token(Token = "0x2000226")]
	public enum Pvr_KeyCode
	{
		[Token(Token = "0x4000E25")]
		APP = 1,
		[Token(Token = "0x4000E26")]
		TOUCHPAD,
		[Token(Token = "0x4000E27")]
		HOME,
		[Token(Token = "0x4000E28")]
		VOLUMEUP,
		[Token(Token = "0x4000E29")]
		VOLUMEDOWN,
		[Token(Token = "0x4000E2A")]
		TRIGGER,
		[Token(Token = "0x4000E2B")]
		A,
		[Token(Token = "0x4000E2C")]
		B,
		[Token(Token = "0x4000E2D")]
		X,
		[Token(Token = "0x4000E2E")]
		Y,
		[Token(Token = "0x4000E2F")]
		Left,
		[Token(Token = "0x4000E30")]
		Right,
		[Token(Token = "0x4000E31")]
		Thumbrest
	}
	[Token(Token = "0x2000227")]
	public enum SwipeDirection
	{
		[Token(Token = "0x4000E33")]
		No,
		[Token(Token = "0x4000E34")]
		SwipeUp,
		[Token(Token = "0x4000E35")]
		SwipeDown,
		[Token(Token = "0x4000E36")]
		SwipeLeft,
		[Token(Token = "0x4000E37")]
		SwipeRight
	}
	[Token(Token = "0x2000228")]
	public enum TouchPadClick
	{
		[Token(Token = "0x4000E39")]
		No,
		[Token(Token = "0x4000E3A")]
		ClickUp,
		[Token(Token = "0x4000E3B")]
		ClickDown,
		[Token(Token = "0x4000E3C")]
		ClickLeft,
		[Token(Token = "0x4000E3D")]
		ClickRight
	}
	[Token(Token = "0x2000229")]
	public struct Controller
	{
		[Token(Token = "0x4000E3E")]
		public const string LibFileName = "Pvr_UnitySDK";

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xC8FF64", Offset = "0xC8FF64", VA = "0xC8FF64")]
		public static Vector2 UPvr_GetTouchPadPosition(int hand)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xC9DB38", Offset = "0xC9DB38", VA = "0xC9DB38")]
		public static float UPvr_GetAxis1D(int hand, Pvr_KeyCode key)
		{
			return default(float);
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xC9DCC0", Offset = "0xC9DCC0", VA = "0xC9DCC0")]
		public static Vector2 UPvr_GetAxis2D(int hand)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xC88848", Offset = "0xC88848", VA = "0xC88848")]
		public static ControllerState UPvr_GetControllerState(int hand)
		{
			return default(ControllerState);
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xC9DEF4", Offset = "0xC9DEF4", VA = "0xC9DEF4")]
		public static Quaternion UPvr_GetControllerQUA(int hand)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xC9E010", Offset = "0xC9E010", VA = "0xC9E010")]
		public static Vector3 UPvr_GetControllerPOS(int hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xC895D0", Offset = "0xC895D0", VA = "0xC895D0")]
		public static int UPvr_GetControllerTriggerValue(int hand)
		{
			return default(int);
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xC88BC4", Offset = "0xC88BC4", VA = "0xC88BC4")]
		public static int UPvr_GetControllerPower(int hand)
		{
			return default(int);
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xC9E128", Offset = "0xC9E128", VA = "0xC9E128")]
		public static SwipeDirection UPvr_GetSwipeDirection(int hand)
		{
			return default(SwipeDirection);
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xC9E1FC", Offset = "0xC9E1FC", VA = "0xC9E1FC")]
		public static TouchPadClick UPvr_GetTouchPadClick(int hand)
		{
			return default(TouchPadClick);
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xC89080", Offset = "0xC89080", VA = "0xC89080")]
		public static bool UPvr_GetKey(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xC8F268", Offset = "0xC8F268", VA = "0xC8F268")]
		public static bool UPvr_GetKeyDown(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xC9E2D0", Offset = "0xC9E2D0", VA = "0xC9E2D0")]
		public static bool UPvr_GetKeyUp(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xC9E820", Offset = "0xC9E820", VA = "0xC9E820")]
		public static bool UPvr_GetTouch(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xC9EB68", Offset = "0xC9EB68", VA = "0xC9EB68")]
		public static bool UPvr_GetTouchDown(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xC9EEB0", Offset = "0xC9EEB0", VA = "0xC9EEB0")]
		public static bool UPvr_GetTouchUp(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xC9F1F8", Offset = "0xC9F1F8", VA = "0xC9F1F8")]
		public static bool UPvr_GetKeyClick(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xC9F748", Offset = "0xC9F748", VA = "0xC9F748")]
		public static bool UPvr_GetKeyLongPressed(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xC90614", Offset = "0xC90614", VA = "0xC90614")]
		public static bool UPvr_IsTouching(int hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xC9FC98", Offset = "0xC9FC98", VA = "0xC9FC98")]
		public static void UPvr_SetHandNess(Pvr_Controller.UserHandNess hand)
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xC9FD58", Offset = "0xC9FD58", VA = "0xC9FD58")]
		public static Pvr_Controller.UserHandNess UPvr_GetHandNess()
		{
			return default(Pvr_Controller.UserHandNess);
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xC9FDD0", Offset = "0xC9FDD0", VA = "0xC9FDD0")]
		public static int UPvr_GetPreferenceDevice()
		{
			return default(int);
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xC9FE90", Offset = "0xC9FE90", VA = "0xC9FE90")]
		public static bool UPvr_IsEnbleTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xC8867C", Offset = "0xC8867C", VA = "0xC8867C")]
		public static int UPvr_GetDeviceType()
		{
			return default(int);
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xC887D0", Offset = "0xC887D0", VA = "0xC887D0")]
		public static int UPvr_GetMainHandNess()
		{
			return default(int);
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xC9FF04", Offset = "0xC9FF04", VA = "0xC9FF04")]
		public static void UPvr_SetMainHandNess(int hand)
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xC9FF80", Offset = "0xC9FF80", VA = "0xC9FF80")]
		public static int UPvr_GetControllerAbility(int hand)
		{
			return default(int);
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xC9FFFC", Offset = "0xC9FFFC", VA = "0xC9FFFC")]
		public static void UPvr_VibrateNeo2Controller(float strength, int time, int hand)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xCA0098", Offset = "0xCA0098", VA = "0xCA0098")]
		public static int UPvr_GetControllerBindingState(int hand)
		{
			return default(int);
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xCA0114", Offset = "0xCA0114", VA = "0xCA0114")]
		public static Vector3 UPvr_GetVelocity(int hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xCA0190", Offset = "0xCA0190", VA = "0xCA0190")]
		public static Vector3 UPvr_GetAngularVelocity(int hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xCA020C", Offset = "0xCA020C", VA = "0xCA020C")]
		public static Vector3 UPvr_GetAcceleration(int hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xCA0288", Offset = "0xCA0288", VA = "0xCA0288")]
		public static void UPvr_ScanController()
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xCA02FC", Offset = "0xCA02FC", VA = "0xCA02FC")]
		public static void UPvr_StopScanController()
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xCA0370", Offset = "0xCA0370", VA = "0xCA0370")]
		public static void UPvr_ConnectController(string mac)
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xCA0438", Offset = "0xCA0438", VA = "0xCA0438")]
		public static void UPvr_DisConnectController()
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xCA04AC", Offset = "0xCA04AC", VA = "0xCA04AC")]
		public static void UPvr_ResetController(int hand)
		{
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xCA0528", Offset = "0xCA0528", VA = "0xCA0528")]
		public static string UPvr_GetControllerVersion()
		{
			return null;
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xCA059C", Offset = "0xCA059C", VA = "0xCA059C")]
		public static void UPvr_GetDeviceVersion(int deviceType)
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xCA0618", Offset = "0xCA0618", VA = "0xCA0618")]
		public static void UPvr_GetControllerSnCode(int controllerSerialNum)
		{
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xCA0694", Offset = "0xCA0694", VA = "0xCA0694")]
		public static void UPvr_SetControllerUnbind(int controllerSerialNum)
		{
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xCA0710", Offset = "0xCA0710", VA = "0xCA0710")]
		public static void UPvr_SetStationRestart()
		{
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xCA0784", Offset = "0xCA0784", VA = "0xCA0784")]
		public static void UPvr_StartStationOtaUpdate()
		{
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xCA07F8", Offset = "0xCA07F8", VA = "0xCA07F8")]
		public static void UPvr_StartControllerOtaUpdate(int mode, int controllerSerialNum)
		{
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xCA0884", Offset = "0xCA0884", VA = "0xCA0884")]
		public static void UPvr_EnterPairMode(int controllerSerialNum)
		{
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xCA0900", Offset = "0xCA0900", VA = "0xCA0900")]
		public static void UPvr_SetControllerShutdown(int controllerSerialNum)
		{
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xCA097C", Offset = "0xCA097C", VA = "0xCA097C")]
		public static int UPvr_GetStationPairState()
		{
			return default(int);
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xCA09F0", Offset = "0xCA09F0", VA = "0xCA09F0")]
		public static int UPvr_GetStationOtaUpdateProgress()
		{
			return default(int);
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xCA0A64", Offset = "0xCA0A64", VA = "0xCA0A64")]
		public static int UPvr_GetControllerOtaUpdateProgress()
		{
			return default(int);
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xCA0AD8", Offset = "0xCA0AD8", VA = "0xCA0AD8")]
		public static void UPvr_GetControllerVersionAndSN(int controllerSerialNum)
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xCA0B54", Offset = "0xCA0B54", VA = "0xCA0B54")]
		public static void UPvr_GetControllerUniqueID()
		{
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0x86DE04", Offset = "0x86DE04", VA = "0x86DE04")]
		public void UPvr_InterruptStationPairMode()
		{
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0x86DE08", Offset = "0x86DE08", VA = "0x86DE08")]
		public void UPvr_StartCV2PairingMode(int deviceType)
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0x86DE0C", Offset = "0x86DE0C", VA = "0x86DE0C")]
		public void UPvr_StopCV2PairingMode(int deviceType)
		{
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xCA0D34", Offset = "0xCA0D34", VA = "0xCA0D34")]
		public static void UPvr_SetArmModelParameters(int hand, int gazeType, float elbowHeight, float elbowDepth, float pointerTiltAngle)
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xCA0E0C", Offset = "0xCA0E0C", VA = "0xCA0E0C")]
		public static void UPvr_CalcArmModelParameters(float[] headOrientation, float[] controllerOrientation, float[] controllerPrimary)
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xCA0EDC", Offset = "0xCA0EDC", VA = "0xCA0EDC")]
		public static void UPvr_GetPointerPose(float[] rotation, float[] position)
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xCA0F9C", Offset = "0xCA0F9C", VA = "0xCA0F9C")]
		public static void UPvr_GetElbowPose(float[] rotation, float[] position)
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xCA1058", Offset = "0xCA1058", VA = "0xCA1058")]
		public static void UPvr_GetWristPose(float[] rotation, float[] position)
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xCA1114", Offset = "0xCA1114", VA = "0xCA1114")]
		public static void UPvr_GetShoulderPose(float[] rotation, float[] position)
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xCA11D4", Offset = "0xCA11D4", VA = "0xCA11D4")]
		public static void UPvr_IsEnbleHomeKey(bool state)
		{
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xCA1250", Offset = "0xCA1250", VA = "0xCA1250")]
		public static void UPvr_SwitchHomeKey(bool state)
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xCA12CC", Offset = "0xCA12CC", VA = "0xCA12CC")]
		public static int UPvr_GetControllerSensorStatus(int id)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600184D")]
		[Address(RVA = "0xCA0E10", Offset = "0xCA0E10", VA = "0xCA0E10")]
		private static extern void Pvr_CalcArmModelParameters(float[] headOrientation, float[] controllerOrientation, float[] gyro);

		[PreserveSig]
		[Token(Token = "0x600184E")]
		[Address(RVA = "0xCA0EE0", Offset = "0xCA0EE0", VA = "0xCA0EE0")]
		private static extern void Pvr_GetPointerPose(float[] rotation, float[] position);

		[PreserveSig]
		[Token(Token = "0x600184F")]
		[Address(RVA = "0xCA0FA0", Offset = "0xCA0FA0", VA = "0xCA0FA0")]
		private static extern void Pvr_GetElbowPose(float[] rotation, float[] position);

		[PreserveSig]
		[Token(Token = "0x6001850")]
		[Address(RVA = "0xCA105C", Offset = "0xCA105C", VA = "0xCA105C")]
		private static extern void Pvr_GetWristPose(float[] rotation, float[] position);

		[PreserveSig]
		[Token(Token = "0x6001851")]
		[Address(RVA = "0xCA1118", Offset = "0xCA1118", VA = "0xCA1118")]
		private static extern void Pvr_GetShoulderPose(float[] rotation, float[] position);

		[PreserveSig]
		[Token(Token = "0x6001852")]
		[Address(RVA = "0xCA0D38", Offset = "0xCA0D38", VA = "0xCA0D38")]
		private static extern void Pvr_SetArmModelParameters(int hand, int gazeType, float elbowHeight, float elbowDepth, float pointerTiltAngle);
	}
	[Token(Token = "0x200022A")]
	public enum ControllerVariety
	{
		[Token(Token = "0x4000E40")]
		Controller0,
		[Token(Token = "0x4000E41")]
		Controller1
	}
	[Token(Token = "0x200022B")]
	public enum ControllerDevice
	{
		[Token(Token = "0x4000E43")]
		Goblin,
		[Token(Token = "0x4000E44")]
		Neo,
		[Token(Token = "0x4000E45")]
		G2,
		[Token(Token = "0x4000E46")]
		Neo2,
		[Token(Token = "0x4000E47")]
		Neo3,
		[Token(Token = "0x4000E48")]
		NewController
	}
	[Token(Token = "0x200022C")]
	public enum PBS_SystemInfoEnum
	{
		[Token(Token = "0x4000E4A")]
		ELECTRIC_QUANTITY,
		[Token(Token = "0x4000E4B")]
		PUI_VERSION,
		[Token(Token = "0x4000E4C")]
		EQUIPMENT_MODEL,
		[Token(Token = "0x4000E4D")]
		EQUIPMENT_SN,
		[Token(Token = "0x4000E4E")]
		CUSTOMER_SN,
		[Token(Token = "0x4000E4F")]
		INTERNAL_STORAGE_SPACE_OF_THE_DEVICE,
		[Token(Token = "0x4000E50")]
		DEVICE_BLUETOOTH_STATUS,
		[Token(Token = "0x4000E51")]
		BLUETOOTH_NAME_CONNECTED,
		[Token(Token = "0x4000E52")]
		BLUETOOTH_MAC_ADDRESS,
		[Token(Token = "0x4000E53")]
		DEVICE_WIFI_STATUS,
		[Token(Token = "0x4000E54")]
		WIFI_NAME_CONNECTED,
		[Token(Token = "0x4000E55")]
		WLAN_MAC_ADDRESS,
		[Token(Token = "0x4000E56")]
		DEVICE_IP
	}
	[Token(Token = "0x200022D")]
	public enum PBS_DeviceControlEnum
	{
		[Token(Token = "0x4000E58")]
		DEVICE_CONTROL_REBOOT,
		[Token(Token = "0x4000E59")]
		DEVICE_CONTROL_SHUTDOWN
	}
	[Token(Token = "0x200022E")]
	public enum PBS_PackageControlEnum
	{
		[Token(Token = "0x4000E5B")]
		PACKAGE_SILENCE_INSTALL,
		[Token(Token = "0x4000E5C")]
		PACKAGE_SILENCE_UNINSTALL
	}
	[Token(Token = "0x200022F")]
	public enum PBS_SwitchEnum
	{
		[Token(Token = "0x4000E5E")]
		S_ON,
		[Token(Token = "0x4000E5F")]
		S_OFF
	}
	[Token(Token = "0x2000230")]
	public enum PBS_HomeEventEnum
	{
		[Token(Token = "0x4000E61")]
		SINGLE_CLICK,
		[Token(Token = "0x4000E62")]
		DOUBLE_CLICK,
		[Token(Token = "0x4000E63")]
		LONG_PRESS
	}
	[Token(Token = "0x2000231")]
	public enum PBS_HomeFunctionEnum
	{
		[Token(Token = "0x4000E65")]
		VALUE_HOME_GO_TO_SETTING,
		[Token(Token = "0x4000E66")]
		VALUE_HOME_BACK,
		[Token(Token = "0x4000E67")]
		VALUE_HOME_RECENTER,
		[Token(Token = "0x4000E68")]
		VALUE_HOME_OPEN_APP,
		[Token(Token = "0x4000E69")]
		VALUE_HOME_DISABLE,
		[Token(Token = "0x4000E6A")]
		VALUE_HOME_GO_TO_HOME,
		[Token(Token = "0x4000E6B")]
		VALUE_HOME_SEND_BROADCAST,
		[Token(Token = "0x4000E6C")]
		VALUE_HOME_CLEAN_MEMORY
	}
	[Token(Token = "0x2000232")]
	public enum PBS_ScreenOffDelayTimeEnum
	{
		[Token(Token = "0x4000E6E")]
		THREE = 3,
		[Token(Token = "0x4000E6F")]
		TEN = 10,
		[Token(Token = "0x4000E70")]
		THIRTY = 30,
		[Token(Token = "0x4000E71")]
		SIXTY = 60,
		[Token(Token = "0x4000E72")]
		THREE_HUNDRED = 300,
		[Token(Token = "0x4000E73")]
		SIX_HUNDRED = 600,
		[Token(Token = "0x4000E74")]
		NEVER = -1
	}
	[Token(Token = "0x2000233")]
	public enum PBS_SleepDelayTimeEnum
	{
		[Token(Token = "0x4000E76")]
		FIFTEEN = 15,
		[Token(Token = "0x4000E77")]
		THIRTY = 30,
		[Token(Token = "0x4000E78")]
		SIXTY = 60,
		[Token(Token = "0x4000E79")]
		THREE_HUNDRED = 300,
		[Token(Token = "0x4000E7A")]
		SIX_HUNDRED = 600,
		[Token(Token = "0x4000E7B")]
		ONE_THOUSAND_AND_EIGHT_HUNDRED = 1800,
		[Token(Token = "0x4000E7C")]
		NEVER = -1
	}
	[Token(Token = "0x2000234")]
	public enum PBS_SystemFunctionSwitchEnum
	{
		[Token(Token = "0x4000E7E")]
		SFS_USB,
		[Token(Token = "0x4000E7F")]
		SFS_AUTOSLEEP,
		[Token(Token = "0x4000E80")]
		SFS_SCREENON_CHARGING,
		[Token(Token = "0x4000E81")]
		SFS_OTG_CHARGING,
		[Token(Token = "0x4000E82")]
		SFS_RETURN_MENU_IN_2DMODE,
		[Token(Token = "0x4000E83")]
		SFS_COMBINATION_KEY,
		[Token(Token = "0x4000E84")]
		SFS_CALIBRATION_WITH_POWER_ON,
		[Token(Token = "0x4000E85")]
		SFS_SYSTEM_UPDATE,
		[Token(Token = "0x4000E86")]
		SFS_CAST_SERVICE,
		[Token(Token = "0x4000E87")]
		SFS_EYE_PROTECTION,
		[Token(Token = "0x4000E88")]
		SFS_SECURITY_ZONE_PERMANENTLY,
		[Token(Token = "0x4000E89")]
		SFS_GLOBAL_CALIBRATION,
		[Token(Token = "0x4000E8A")]
		SFS_Auto_Calibration,
		[Token(Token = "0x4000E8B")]
		SFS_USB_BOOT
	}
	[Token(Token = "0x2000235")]
	public enum PBS_USBConfigModeEnum
	{
		[Token(Token = "0x4000E8D")]
		MTP,
		[Token(Token = "0x4000E8E")]
		CHARGE
	}
	[Token(Token = "0x2000236")]
	public struct ToBService
	{
		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<bool> BoolCallback;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action<int> IntCallback;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Action<long> LongCallback;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static AndroidJavaClass unityPlayer;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static AndroidJavaObject currentActivity;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static AndroidJavaObject tobHelper;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static AndroidJavaClass tobHelperClass;

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x11AA34C", Offset = "0x11AA34C", VA = "0x11AA34C")]
		public static void UPvr_InitToBService()
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0x11AA500", Offset = "0x11AA500", VA = "0x11AA500")]
		public static void UPvr_SetUnityObjectName(string obj)
		{
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0x11AA5CC", Offset = "0x11AA5CC", VA = "0x11AA5CC")]
		public static void UPvr_BindToBService()
		{
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0x11AA6A0", Offset = "0x11AA6A0", VA = "0x11AA6A0")]
		public static void UPvr_UnBindToBService()
		{
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x11AA774", Offset = "0x11AA774", VA = "0x11AA774")]
		private static AndroidJavaObject GetEnumType(Enum enumType)
		{
			return null;
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x11AA874", Offset = "0x11AA874", VA = "0x11AA874")]
		public static string UPvr_StateGetDeviceInfo(PBS_SystemInfoEnum type)
		{
			return null;
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x11AA9D4", Offset = "0x11AA9D4", VA = "0x11AA9D4")]
		public static void UPvr_ControlSetDeviceAction(PBS_DeviceControlEnum deviceControl, Action<int> callback)
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x11AAAD8", Offset = "0x11AAAD8", VA = "0x11AAAD8")]
		public static void UPvr_ControlAPPManger(PBS_PackageControlEnum packageControl, string path, Action<int> callback)
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x11AAC54", Offset = "0x11AAC54", VA = "0x11AAC54")]
		public static void UPvr_ControlSetAutoConnectWIFI(string ssid, string pwd, Action<bool> callback)
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x11AADB8", Offset = "0x11AADB8", VA = "0x11AADB8")]
		public static void UPvr_ControlClearAutoConnectWIFI(Action<bool> callback)
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x11AAE34", Offset = "0x11AAE34", VA = "0x11AAE34")]
		public static void UPvr_PropertySetHomeKey(PBS_HomeEventEnum eventEnum, PBS_HomeFunctionEnum function, Action<bool> callback)
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x11AAF98", Offset = "0x11AAF98", VA = "0x11AAF98")]
		public static void UPvr_PropertySetHomeKeyAll(PBS_HomeEventEnum eventEnum, PBS_HomeFunctionEnum function, int timesetup, string pkg, string className, Action<bool> callback)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x11AB1AC", Offset = "0x11AB1AC", VA = "0x11AB1AC")]
		public static void UPvr_PropertyDisablePowerKey(bool isSingleTap, bool enable, Action<int> callback)
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x11AB2F8", Offset = "0x11AB2F8", VA = "0x11AB2F8")]
		public static void UPvr_PropertySetScreenOffDelay(PBS_ScreenOffDelayTimeEnum timeEnum, Action<int> callback)
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x11AB3FC", Offset = "0x11AB3FC", VA = "0x11AB3FC")]
		public static void UPvr_PropertySetSleepDelay(PBS_SleepDelayTimeEnum timeEnum)
		{
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x11AB4F0", Offset = "0x11AB4F0", VA = "0x11AB4F0")]
		public static void UPvr_SwitchSystemFunction(PBS_SystemFunctionSwitchEnum systemFunction, PBS_SwitchEnum switchEnum)
		{
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x11AB67C", Offset = "0x11AB67C", VA = "0x11AB67C")]
		public static void UPvr_SwitchSetUsbConfigurationOption(PBS_USBConfigModeEnum uSBConfigModeEnum)
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0x11AB7B4", Offset = "0x11AB7B4", VA = "0x11AB7B4")]
		public static void UPvr_ScreenOn()
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0x11AB8A8", Offset = "0x11AB8A8", VA = "0x11AB8A8")]
		public static void UPvr_ScreenOff()
		{
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0x11AB99C", Offset = "0x11AB99C", VA = "0x11AB99C")]
		public static void UPvr_AcquireWakeLock()
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x11ABA90", Offset = "0x11ABA90", VA = "0x11ABA90")]
		public static void UPvr_ReleaseWakeLock()
		{
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0x11ABB84", Offset = "0x11ABB84", VA = "0x11ABB84")]
		public static void UPvr_EnableEnterKey()
		{
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0x11ABC78", Offset = "0x11ABC78", VA = "0x11ABC78")]
		public static void UPvr_DisableEnterKey()
		{
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0x11ABD6C", Offset = "0x11ABD6C", VA = "0x11ABD6C")]
		public static void UPvr_EnableVolumeKey()
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0x11ABE60", Offset = "0x11ABE60", VA = "0x11ABE60")]
		public static void UPvr_DisableVolumeKey()
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x11ABF54", Offset = "0x11ABF54", VA = "0x11ABF54")]
		public static void UPvr_EnableBackKey()
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x11AC048", Offset = "0x11AC048", VA = "0x11AC048")]
		public static void UPvr_DisableBackKey()
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0x11AC13C", Offset = "0x11AC13C", VA = "0x11AC13C")]
		public static void UPvr_WriteConfigFileToDataLocal(string path, string content, Action<bool> callback)
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x11AC250", Offset = "0x11AC250", VA = "0x11AC250")]
		public static void UPvr_ResetAllKeyToDefault(Action<bool> callback)
		{
		}
	}
	[Token(Token = "0x2000237")]
	public enum GlobalIntConfigs
	{
		[Token(Token = "0x4000E97")]
		EYE_TEXTURE_RESOLUTION0,
		[Token(Token = "0x4000E98")]
		EYE_TEXTURE_RESOLUTION1,
		[Token(Token = "0x4000E99")]
		SEENSOR_COUNT,
		[Token(Token = "0x4000E9A")]
		ABILITY6DOF,
		[Token(Token = "0x4000E9B")]
		PLATFORM_TYPE,
		[Token(Token = "0x4000E9C")]
		TRACKING_MODE,
		[Token(Token = "0x4000E9D")]
		LOG_LEVEL,
		[Token(Token = "0x4000E9E")]
		ENBLE_HAND6DOF_BY_HEAD,
		[Token(Token = "0x4000E9F")]
		ENBLE_6DOF_GLOBAL_TRACKING,
		[Token(Token = "0x4000EA0")]
		TARGET_FRAME_RATE,
		[Token(Token = "0x4000EA1")]
		iShowFPS,
		[Token(Token = "0x4000EA2")]
		SensorMode,
		[Token(Token = "0x4000EA3")]
		LOGICFLOW,
		[Token(Token = "0x4000EA4")]
		EYE_TEXTURE_RES_HIGH,
		[Token(Token = "0x4000EA5")]
		EYE_TEXTURE_RES_NORMAL,
		[Token(Token = "0x4000EA6")]
		iCtrlModelLoadingPri,
		[Token(Token = "0x4000EA7")]
		iPhoneHMDModeEnabled,
		[Token(Token = "0x4000EA8")]
		isEnableBoundary,
		[Token(Token = "0x4000EA9")]
		Enable_Activity_Rotation,
		[Token(Token = "0x4000EAA")]
		GetDisplay_Orientation,
		[Token(Token = "0x4000EAB")]
		GetWaitFrameNum,
		[Token(Token = "0x4000EAC")]
		GetResetFrameNum,
		[Token(Token = "0x4000EAD")]
		EnableFFRBYSYS,
		[Token(Token = "0x4000EAE")]
		RotControllerMode
	}
	[Token(Token = "0x2000238")]
	public enum GlobalFloatConfigs
	{
		[Token(Token = "0x4000EB0")]
		IPD,
		[Token(Token = "0x4000EB1")]
		VFOV,
		[Token(Token = "0x4000EB2")]
		HFOV,
		[Token(Token = "0x4000EB3")]
		NECK_MODEL_X,
		[Token(Token = "0x4000EB4")]
		NECK_MODEL_Y,
		[Token(Token = "0x4000EB5")]
		NECK_MODEL_Z,
		[Token(Token = "0x4000EB6")]
		DISPLAY_REFRESH_RATE
	}
	[Token(Token = "0x2000239")]
	public enum RenderTextureAntiAliasing
	{
		[Token(Token = "0x4000EB8")]
		X_1 = 1,
		[Token(Token = "0x4000EB9")]
		X_2 = 2,
		[Token(Token = "0x4000EBA")]
		X_4 = 4,
		[Token(Token = "0x4000EBB")]
		X_8 = 8
	}
	[Token(Token = "0x200023A")]
	public enum PlatForm
	{
		[Token(Token = "0x4000EBD")]
		Android = 1,
		[Token(Token = "0x4000EBE")]
		IOS,
		[Token(Token = "0x4000EBF")]
		Win,
		[Token(Token = "0x4000EC0")]
		Notsupport
	}
	[Token(Token = "0x200023B")]
	public enum RenderTextureDepth
	{
		[Token(Token = "0x4000EC2")]
		BD_0 = 0,
		[Token(Token = "0x4000EC3")]
		BD_16 = 16,
		[Token(Token = "0x4000EC4")]
		BD_24 = 24
	}
	[Token(Token = "0x200023C")]
	public enum RenderTextureLevel
	{
		[Token(Token = "0x4000EC6")]
		Normal,
		[Token(Token = "0x4000EC7")]
		High
	}
	[Token(Token = "0x200023D")]
	public enum Sensorindex
	{
		[Token(Token = "0x4000EC9")]
		Default,
		[Token(Token = "0x4000ECA")]
		FirstSensor,
		[Token(Token = "0x4000ECB")]
		SecondSensor
	}
	[Token(Token = "0x200023E")]
	public enum Eye
	{
		[Token(Token = "0x4000ECD")]
		LeftEye,
		[Token(Token = "0x4000ECE")]
		RightEye,
		[Token(Token = "0x4000ECF")]
		BothEye
	}
	[Token(Token = "0x200023F")]
	public enum ResUtilsType
	{
		[Token(Token = "0x4000ED1")]
		TYPE_TEXTSIZE,
		[Token(Token = "0x4000ED2")]
		TYPE_COLOR,
		[Token(Token = "0x4000ED3")]
		TYPE_TEXT,
		[Token(Token = "0x4000ED4")]
		TYPE_FONT,
		[Token(Token = "0x4000ED5")]
		TYPE_VALUE,
		[Token(Token = "0x4000ED6")]
		TYPE_DRAWABLE,
		[Token(Token = "0x4000ED7")]
		TYPE_OBJECT,
		[Token(Token = "0x4000ED8")]
		TYPR_OBJECTARRAY
	}
	[Token(Token = "0x2000240")]
	public enum TrackingOrigin
	{
		[Token(Token = "0x4000EDA")]
		EyeLevel,
		[Token(Token = "0x4000EDB")]
		FloorLevel,
		[Token(Token = "0x4000EDC")]
		StageLevel
	}
	[Token(Token = "0x2000241")]
	public enum EFoveationLevel
	{
		[Token(Token = "0x4000EDE")]
		Low,
		[Token(Token = "0x4000EDF")]
		Med,
		[Token(Token = "0x4000EE0")]
		High,
		[Token(Token = "0x4000EE1")]
		Top_High
	}
	[Token(Token = "0x2000242")]
	public enum StereoRenderingPathPico
	{
		[Token(Token = "0x4000EE3")]
		MultiPass,
		[Token(Token = "0x4000EE4")]
		SinglePass
	}
	[Token(Token = "0x2000243")]
	public enum pvrEyePoseStatus
	{
		[Token(Token = "0x4000EE6")]
		kGazePointValid = 1,
		[Token(Token = "0x4000EE7")]
		kGazeVectorValid = 2,
		[Token(Token = "0x4000EE8")]
		kEyeOpennessValid = 4,
		[Token(Token = "0x4000EE9")]
		kEyePupilDilationValid = 8,
		[Token(Token = "0x4000EEA")]
		kEyePositionGuideValid = 0x10
	}
	[Token(Token = "0x2000244")]
	public enum TrackingMode
	{
		[Token(Token = "0x4000EEC")]
		PVR_TRACKING_MODE_ROTATION = 1,
		[Token(Token = "0x4000EED")]
		PVR_TRACKING_MODE_POSITION = 2,
		[Token(Token = "0x4000EEE")]
		PVR_TRACKING_MODE_EYE = 4
	}
	[Token(Token = "0x2000245")]
	public struct EyeTrackingData
	{
		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int leftEyePoseStatus;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int rightEyePoseStatus;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int combinedEyePoseStatus;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 leftEyeGazePoint;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rightEyeGazePoint;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 combinedEyeGazePoint;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 leftEyeGazeVector;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rightEyeGazeVector;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 combinedEyeGazeVector;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float leftEyeOpenness;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float rightEyeOpenness;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float leftEyePupilDilation;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float rightEyePupilDilation;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 leftEyePositionGuide;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 rightEyePositionGuide;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector3 foveatedGazeDirection;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int foveatedGazeTrackingState;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public byte[] reserved;
	}
	[Token(Token = "0x2000246")]
	public struct EyeTrackingGazeRay
	{
		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Direction;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool IsValid;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Origin;
	}
	[Token(Token = "0x2000247")]
	public struct EyeDeviceInfo
	{
		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ViewFrustum targetFrustumLeft;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ViewFrustum targetFrustumRight;
	}
	[Token(Token = "0x2000248")]
	public struct ViewFrustum
	{
		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float left;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float right;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float top;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float bottom;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float near;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float far;
	}
	[Token(Token = "0x2000249")]
	public struct EyeSetting
	{
		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Transform eyelocalPosition;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Rect eyeRect;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float eyeFov;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float eyeAspect;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Matrix4x4 eyeProjectionMatrix;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader eyeShader;
	}
	[Token(Token = "0x200024A")]
	public struct Sensor
	{
		[Token(Token = "0x4000F12")]
		public const string LibFileName = "Pvr_UnitySDK";

		[PreserveSig]
		[Token(Token = "0x6001870")]
		[Address(RVA = "0x11A36E4", Offset = "0x11A36E4", VA = "0x11A36E4")]
		private static extern int Pvr_Enable6DofModule(bool enable);

		[PreserveSig]
		[Token(Token = "0x6001871")]
		[Address(RVA = "0x11A3780", Offset = "0x11A3780", VA = "0x11A3780")]
		private static extern int Pvr_OptionalResetSensor(int index, int resetRot, int resetPos);

		[PreserveSig]
		[Token(Token = "0x6001872")]
		[Address(RVA = "0x11A3830", Offset = "0x11A3830", VA = "0x11A3830")]
		private static extern int Pvr_Init(int index);

		[PreserveSig]
		[Token(Token = "0x6001873")]
		[Address(RVA = "0x11A38CC", Offset = "0x11A38CC", VA = "0x11A38CC")]
		private static extern int Pvr_StartSensor(int index);

		[PreserveSig]
		[Token(Token = "0x6001874")]
		[Address(RVA = "0x11A3968", Offset = "0x11A3968", VA = "0x11A3968")]
		private static extern int Pvr_StopSensor(int index);

		[PreserveSig]
		[Token(Token = "0x6001875")]
		[Address(RVA = "0x11A3A04", Offset = "0x11A3A04", VA = "0x11A3A04")]
		private static extern int Pvr_ResetSensor(int index);

		[PreserveSig]
		[Token(Token = "0x6001876")]
		[Address(RVA = "0x11A3AA0", Offset = "0x11A3AA0", VA = "0x11A3AA0")]
		private static extern int Pvr_ResetSensorAll(int index);

		[PreserveSig]
		[Token(Token = "0x6001877")]
		[Address(RVA = "0x11A3B3C", Offset = "0x11A3B3C", VA = "0x11A3B3C")]
		private static extern int Pvr_GetSensorState(int index, ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz);

		[PreserveSig]
		[Token(Token = "0x6001878")]
		[Address(RVA = "0x11A3C30", Offset = "0x11A3C30", VA = "0x11A3C30")]
		private static extern int Pvr_GetMainSensorState(ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz, ref float vfov, ref float hfov, ref int viewNumber);

		[PreserveSig]
		[Token(Token = "0x6001879")]
		[Address(RVA = "0x11A3D2C", Offset = "0x11A3D2C", VA = "0x11A3D2C")]
		private static extern int Pvr_GetPsensorState();

		[PreserveSig]
		[Token(Token = "0x600187A")]
		[Address(RVA = "0x11A3DB8", Offset = "0x11A3DB8", VA = "0x11A3DB8")]
		private static extern int Pvr_GetHmdPSensorStatus();

		[PreserveSig]
		[Token(Token = "0x600187B")]
		[Address(RVA = "0x11A3E44", Offset = "0x11A3E44", VA = "0x11A3E44")]
		private static extern int Pvr_GetSensorGyroscope(int index, ref float x, ref float y, ref float z);

		[PreserveSig]
		[Token(Token = "0x600187C")]
		[Address(RVA = "0x11A3F08", Offset = "0x11A3F08", VA = "0x11A3F08")]
		private static extern int Pvr_GetSensorMagnet(int index, ref float x, ref float y, ref float z);

		[PreserveSig]
		[Token(Token = "0x600187D")]
		[Address(RVA = "0x11A3FCC", Offset = "0x11A3FCC", VA = "0x11A3FCC")]
		private static extern int Pvr_Get6DofSensorQualityStatus();

		[PreserveSig]
		[Token(Token = "0x600187E")]
		[Address(RVA = "0x11A4058", Offset = "0x11A4058", VA = "0x11A4058")]
		private static extern bool Pvr_Get6DofSafePanelFlag();

		[PreserveSig]
		[Token(Token = "0x600187F")]
		[Address(RVA = "0x11A40EC", Offset = "0x11A40EC", VA = "0x11A40EC")]
		private static extern void Pvr_SetReinPosition(float x, float y, float z, float w, float px, float py, float pz, int hand, bool valid, int key);

		[PreserveSig]
		[Token(Token = "0x6001880")]
		[Address(RVA = "0x11A41F8", Offset = "0x11A41F8", VA = "0x11A41F8")]
		private static extern bool Pvr_SetTrackingOriginType(TrackingOrigin trackingOriginType);

		[Token(Token = "0x6001881")]
		[Address(RVA = "0x11A429C", Offset = "0x11A429C", VA = "0x11A429C")]
		public static bool UPvr_Pvr_Get6DofSafePanelFlag()
		{
			return default(bool);
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0x11A42A0", Offset = "0x11A42A0", VA = "0x11A42A0")]
		public static int UPvr_Init(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0x11A42A4", Offset = "0x11A42A4", VA = "0x11A42A4")]
		public static void UPvr_InitPsensor()
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0x11A44A0", Offset = "0x11A44A0", VA = "0x11A44A0")]
		public static int UPvr_GetPsensorState()
		{
			return default(int);
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x11A4704", Offset = "0x11A4704", VA = "0x11A4704")]
		public static int UPvr_GetPSensorStatus()
		{
			return default(int);
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0x11A4708", Offset = "0x11A4708", VA = "0x11A4708")]
		public static void UPvr_UnregisterPsensor()
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x11A4908", Offset = "0x11A4908", VA = "0x11A4908")]
		public static int UPvr_StartSensor(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0x11A490C", Offset = "0x11A490C", VA = "0x11A490C")]
		public static int UPvr_StopSensor(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0x11A4910", Offset = "0x11A4910", VA = "0x11A4910")]
		public static int UPvr_ResetSensor(int index)
		{
			return default(int);
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0x11A4988", Offset = "0x11A4988", VA = "0x11A4988")]
		public static int UPvr_OptionalResetSensor(int index, int resetRot, int resetPos)
		{
			return default(int);
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0x11A498C", Offset = "0x11A498C", VA = "0x11A498C")]
		public static int UPvr_GetSensorState(int index, ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz)
		{
			return default(int);
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0x11A4990", Offset = "0x11A4990", VA = "0x11A4990")]
		public static int UPvr_GetMainSensorState(ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz, ref float vfov, ref float hfov, ref int viewNumber)
		{
			return default(int);
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0x11A499C", Offset = "0x11A499C", VA = "0x11A499C")]
		public static int UPvr_GetSensorGyroscope(int index, ref float x, ref float y, ref float z)
		{
			return default(int);
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0x11A49A0", Offset = "0x11A49A0", VA = "0x11A49A0")]
		public static int UPvr_GetSensorMagnet(int index, ref float x, ref float y, ref float z)
		{
			return default(int);
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0x11A49A4", Offset = "0x11A49A4", VA = "0x11A49A4")]
		public static int UPvr_Get6DofSensorQualityStatus()
		{
			return default(int);
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x11A49A8", Offset = "0x11A49A8", VA = "0x11A49A8")]
		public static int UPvr_Enable6DofModule(bool enable)
		{
			return default(int);
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0x11A42A8", Offset = "0x11A42A8", VA = "0x11A42A8")]
		public static void Pvr_InitPsensor()
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0x11A4BC4", Offset = "0x11A4BC4", VA = "0x11A4BC4")]
		public static bool Pvr_IsHead6dofReset()
		{
			return default(bool);
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0x11A44F4", Offset = "0x11A44F4", VA = "0x11A44F4")]
		public static int Pvr_GetAndroidPsensorState()
		{
			return default(int);
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0x11A470C", Offset = "0x11A470C", VA = "0x11A470C")]
		public static void Pvr_UnregisterPsensor()
		{
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0x11A4DF8", Offset = "0x11A4DF8", VA = "0x11A4DF8")]
		public static int UPvr_ResetSensorAll(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0x11A4DFC", Offset = "0x11A4DFC", VA = "0x11A4DFC")]
		public static void UPvr_SetReinPosition(float x, float y, float z, float w, float px, float py, float pz, int hand, bool valid, int key)
		{
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0x11A5208", Offset = "0x11A5208", VA = "0x11A5208")]
		public static bool UPvr_SetTrackingOriginType(TrackingOrigin trackingOriginType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200024B")]
	public struct Render
	{
		[Token(Token = "0x4000F13")]
		public const string LibFileName = "Pvr_UnitySDK";

		[PreserveSig]
		[Token(Token = "0x6001898")]
		[Address(RVA = "0x11A1B2C", Offset = "0x11A1B2C", VA = "0x11A1B2C")]
		private static extern void Pvr_ChangeScreenParameters(string model, int width, int height, double xppi, double yppi, double densityDpi);

		[PreserveSig]
		[Token(Token = "0x6001899")]
		[Address(RVA = "0x11A1C18", Offset = "0x11A1C18", VA = "0x11A1C18")]
		private static extern int Pvr_SetRatio(float midH, float midV);

		[PreserveSig]
		[Token(Token = "0x600189A")]
		[Address(RVA = "0x11A1CBC", Offset = "0x11A1CBC", VA = "0x11A1CBC")]
		private static extern int Pvr_SetPupillaryPoint(bool enable);

		[PreserveSig]
		[Token(Token = "0x600189B")]
		[Address(RVA = "0x11A1D58", Offset = "0x11A1D58", VA = "0x11A1D58")]
		private static extern IntPtr Pvr_GetSupportHMDTypes();

		[PreserveSig]
		[Token(Token = "0x600189C")]
		[Address(RVA = "0x11A1DE4", Offset = "0x11A1DE4", VA = "0x11A1DE4")]
		private static extern void Pvr_SetCurrentHMDType(string type);

		[PreserveSig]
		[Token(Token = "0x600189D")]
		[Address(RVA = "0x11A1E90", Offset = "0x11A1E90", VA = "0x11A1E90")]
		private static extern int Pvr_GetIntConfig(int configsenum, ref int res);

		[PreserveSig]
		[Token(Token = "0x600189E")]
		[Address(RVA = "0x11A1F38", Offset = "0x11A1F38", VA = "0x11A1F38")]
		private static extern int Pvr_GetFloatConfig(int configsenum, ref float res);

		[PreserveSig]
		[Token(Token = "0x600189F")]
		[Address(RVA = "0x11A1FE0", Offset = "0x11A1FE0", VA = "0x11A1FE0")]
		private static extern void Pvr_SetupLayerData(int layerIndex, int sideMask, int textureId, int textureType, int layerFlags, float[] colorScaleAndOffset);

		[PreserveSig]
		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x11A20C4", Offset = "0x11A20C4", VA = "0x11A20C4")]
		private static extern void Pvr_SetupLayerCoords(int layerIndex, int sideMask, float[] lowerLeft, float[] lowerRight, float[] upperLeft, float[] upperRight);

		[PreserveSig]
		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x11A21C0", Offset = "0x11A21C0", VA = "0x11A21C0")]
		private static extern void Pvr_SetOverlayModelViewMatrix(int overlayType, int overlayShape, int texId, int eyeSide, int layerIndex, bool isHeadLocked, int layerFlags, float[] mvMatrix, float[] modelS, float[] modelR, float[] modelT, float[] cameraR, float[] cameraT, float[] colorScaleAndOffset);

		[PreserveSig]
		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x11A231C", Offset = "0x11A231C", VA = "0x11A231C")]
		private static extern bool Pvr_EnableFoveation(bool enable);

		[PreserveSig]
		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x11A23C0", Offset = "0x11A23C0", VA = "0x11A23C0")]
		private static extern void Pvr_SetFoveationParameters(int textureId, int previousId, float focalPointX, float focalPointY, float foveationGainX, float foveationGainY, float foveationArea, float foveationMinimum);

		[PreserveSig]
		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x11A24B4", Offset = "0x11A24B4", VA = "0x11A24B4")]
		private static extern void Pvr_SetFoveationResource(int textureId, int previousId, float focalPointX, float focalPointY);

		[PreserveSig]
		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x11A2578", Offset = "0x11A2578", VA = "0x11A2578")]
		private static extern void Pvr_SetFoveationParameters2(float foveationGainX, float foveationGainY, float foveationArea, float foveationMinimum);

		[PreserveSig]
		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x11A2638", Offset = "0x11A2638", VA = "0x11A2638")]
		private static extern void Pvr_SetFoveationLevel(EFoveationLevel level);

		[PreserveSig]
		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x11A26D4", Offset = "0x11A26D4", VA = "0x11A26D4")]
		private static extern EFoveationLevel Pvr_GetFoveationLevel();

		[PreserveSig]
		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x11A2760", Offset = "0x11A2760", VA = "0x11A2760")]
		private static extern bool Pvr_GetIntSysProc(string property, ref int res);

		[PreserveSig]
		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x11A2828", Offset = "0x11A2828", VA = "0x11A2828")]
		private static extern void Pvr_SetColorspaceType(int colorspaceType);

		[PreserveSig]
		[Token(Token = "0x60018AA")]
		[Address(RVA = "0x11A28C4", Offset = "0x11A28C4", VA = "0x11A28C4")]
		private static extern void Pvr_SetCastingColorspaceType(int colorspaceType);

		[PreserveSig]
		[Token(Token = "0x60018AB")]
		[Address(RVA = "0x11A2960", Offset = "0x11A2960", VA = "0x11A2960")]
		private static extern IntPtr Pvr_CreateLayerAndroidSurface(int layerType, int layerIndex);

		[PreserveSig]
		[Token(Token = "0x60018AC")]
		[Address(RVA = "0x11A2A0C", Offset = "0x11A2A0C", VA = "0x11A2A0C")]
		private static extern IntPtr Pvr_GetLayerAndroidSurface(int layerType, int layerIndex);

		[PreserveSig]
		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x11A2AB8", Offset = "0x11A2AB8", VA = "0x11A2AB8")]
		private static extern void Pvr_SetMonoMode(bool openMono);

		[PreserveSig]
		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x11A2B54", Offset = "0x11A2B54", VA = "0x11A2B54")]
		private static extern void Pvr_GetStencilMesh(int eye, ref int vertexCount, ref int triangleCount, ref IntPtr vertexData, ref IntPtr indexData);

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x11A2C20", Offset = "0x11A2C20", VA = "0x11A2C20")]
		public static void UPvr_ChangeScreenParameters(string model, int width, int height, double xppi, double yppi, double densityDpi)
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x11A2C24", Offset = "0x11A2C24", VA = "0x11A2C24")]
		public static int UPvr_SetRatio(float midH, float midV)
		{
			return default(int);
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x11A2C28", Offset = "0x11A2C28", VA = "0x11A2C28")]
		public static void UPvr_EnableFoveation(bool enable)
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x11A2DFC", Offset = "0x11A2DFC", VA = "0x11A2DFC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E2230", Offset = "0x7E2230")]
		public static void UPvr_SetFoveationParameters(int textureId, int previousId, float focalPointX, float focalPointY, float foveationGainX, float foveationGainY, float foveationArea, float foveationMinimum)
		{
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x11A2E00", Offset = "0x11A2E00", VA = "0x11A2E00")]
		public static void UPvr_SetFoveationResource(int textureId, int previousId, float focalPointX, float focalPointY)
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x11A2E04", Offset = "0x11A2E04", VA = "0x11A2E04")]
		public static void SetFoveatedRenderingLevel(EFoveationLevel level)
		{
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x11A2EF8", Offset = "0x11A2EF8", VA = "0x11A2EF8")]
		public static EFoveationLevel GetFoveatedRenderingLevel()
		{
			return default(EFoveationLevel);
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x11A2EFC", Offset = "0x11A2EFC", VA = "0x11A2EFC")]
		public static void SetFoveatedRenderingParameters(Vector2 ffrGainValue, float ffrAreaValue, float ffrMinimumValue)
		{
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0x11A3028", Offset = "0x11A3028", VA = "0x11A3028")]
		public static bool UPvr_GetIntSysProc(string property, ref int res)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x11A302C", Offset = "0x11A302C", VA = "0x11A302C")]
		public static int UPvr_GetIntConfig(int configsenum, ref int res)
		{
			return default(int);
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x11A3030", Offset = "0x11A3030", VA = "0x11A3030")]
		public static int UPvr_GetFloatConfig(int configsenum, ref float res)
		{
			return default(int);
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x11A3034", Offset = "0x11A3034", VA = "0x11A3034")]
		public static string UPvr_GetSupportHMDTypes()
		{
			return null;
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x11A30C0", Offset = "0x11A30C0", VA = "0x11A30C0")]
		public static void UPvr_SetCurrentHMDType(string type)
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x11A30C4", Offset = "0x11A30C4", VA = "0x11A30C4")]
		public static void UPvr_SetupLayerData(int layerIndex, int sideMask, int textureId, int textureType, int layerFlags, Vector4 colorScale, Vector4 colorOffset)
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x11A320C", Offset = "0x11A320C", VA = "0x11A320C")]
		public static void UPvr_SetupLayerCoords(int layerIndex, int sideMask, float[] lowerLeft, float[] lowerRight, float[] upperLeft, float[] upperRight)
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x11A3210", Offset = "0x11A3210", VA = "0x11A3210")]
		public static void UPvr_SetOverlayModelViewMatrix(int overlayType, int overlayShape, int texId, int eyeSide, int layerIndex, bool isHeadLocked, int layerFlags, Matrix4x4 mvMatrix, Vector3 modelS, Quaternion modelR, Vector3 modelT, Quaternion cameraR, Vector3 cameraT, Vector4 colorScale, Vector4 colorOffset)
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x11A36C8", Offset = "0x11A36C8", VA = "0x11A36C8")]
		public static void UPvr_SetColorspaceType(int colorspaceType)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x11A36CC", Offset = "0x11A36CC", VA = "0x11A36CC")]
		public static void UPvr_SetCastingColorspaceType(int colorspaceType)
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x11A36D0", Offset = "0x11A36D0", VA = "0x11A36D0")]
		public static IntPtr UPvr_CreateLayerAndroidSurface(int layerType, int layerIndex)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x11A36D4", Offset = "0x11A36D4", VA = "0x11A36D4")]
		public static IntPtr UPvr_GetLayerAndroidSurface(int layerType, int layerIndex)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x11A36D8", Offset = "0x11A36D8", VA = "0x11A36D8")]
		public static void UPvr_SetMonoMode(bool openMono)
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x11A36E0", Offset = "0x11A36E0", VA = "0x11A36E0")]
		public static void UPvr_GetStencilMesh(int eye, ref int vertexCount, ref int triangleCount, ref IntPtr vertexDataPtr, ref IntPtr indexDataPtr)
		{
		}
	}
	[Token(Token = "0x200024C")]
	public struct System
	{
		[Token(Token = "0x4000F14")]
		public const string LibFileName = "Pvr_UnitySDK";

		[Token(Token = "0x4000F15")]
		public const string UnitySDKVersion = "2.8.9.12";

		[PreserveSig]
		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x11A520C", Offset = "0x11A520C", VA = "0x11A520C")]
		public static extern void Pvr_SetInitActivity(IntPtr activity, IntPtr vrActivityClass);

		[PreserveSig]
		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x11A52B8", Offset = "0x11A52B8", VA = "0x11A52B8")]
		private static extern IntPtr Pvr_GetSDKVersion();

		[PreserveSig]
		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x11A5344", Offset = "0x11A5344", VA = "0x11A5344")]
		public static extern int Pvr_GetHmdHardwareVersion();

		[PreserveSig]
		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x11A53D0", Offset = "0x11A53D0", VA = "0x11A53D0")]
		public static extern IntPtr Pvr_GetHmdFirmwareVersion();

		[PreserveSig]
		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x11A545C", Offset = "0x11A545C", VA = "0x11A545C")]
		public static extern IntPtr Pvr_GetHmdSerialNumber();

		[PreserveSig]
		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x11A54E8", Offset = "0x11A54E8", VA = "0x11A54E8")]
		public static extern int PVR_GetHmdBatteryStatus();

		[PreserveSig]
		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x11A5574", Offset = "0x11A5574", VA = "0x11A5574")]
		public static extern float PVR_GetHmdBatteryTemperature();

		[PreserveSig]
		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x11A5600", Offset = "0x11A5600", VA = "0x11A5600")]
		public static extern int PVR_SetHmdAudioStatus(bool enable);

		[PreserveSig]
		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x11A569C", Offset = "0x11A569C", VA = "0x11A569C")]
		public static extern bool Pvr_GetEyeTrackingData(ref int leftEyePoseStatus, ref int rightEyePoseStatus, ref int combinedEyePoseStatus, ref float leftEyeGazePointX, ref float leftEyeGazePointY, ref float leftEyeGazePointZ, ref float rightEyeGazePointX, ref float rightEyeGazePointY, ref float rightEyeGazePointZ, ref float combinedEyeGazePointX, ref float combinedEyeGazePointY, ref float combinedEyeGazePointZ, ref float leftEyeGazeVectorX, ref float leftEyeGazeVectorY, ref float leftEyeGazeVectorZ, ref float rightEyeGazeVectorX, ref float rightEyeGazeVectorY, ref float rightEyeGazeVectorZ, ref float combinedEyeGazeVectorX, ref float combinedEyeGazeVectorY, ref float combinedEyeGazeVectorZ, ref float leftEyeOpenness, ref float rightEyeOpenness, ref float leftEyePupilDilation, ref float rightEyePupilDilation, ref float leftEyePositionGuideX, ref float leftEyePositionGuideY, ref float leftEyePositionGuideZ, ref float rightEyePositionGuideX, ref float rightEyePositionGuideY, ref float rightEyePositionGuideZ, ref float foveatedGazeDirectionX, ref float foveatedGazeDirectionY, ref float foveatedGazeDirectionZ, ref int foveatedGazeTrackingState);

		[PreserveSig]
		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x11A57F0", Offset = "0x11A57F0", VA = "0x11A57F0")]
		public static extern bool Pvr_SetTrackingMode(int trackingMode);

		[PreserveSig]
		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x11A5894", Offset = "0x11A5894", VA = "0x11A5894")]
		public static extern int Pvr_GetTrackingMode();

		[PreserveSig]
		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x11A5920", Offset = "0x11A5920", VA = "0x11A5920")]
		public static extern IntPtr GetRenderEventFunc();

		[PreserveSig]
		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x11A59AC", Offset = "0x11A59AC", VA = "0x11A59AC")]
		public static extern void UnityEventData(long data);

		[PreserveSig]
		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x11A5A48", Offset = "0x11A5A48", VA = "0x11A5A48")]
		public static extern bool Pvr_EnableSinglePass(bool enable);

		[PreserveSig]
		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x11A5AEC", Offset = "0x11A5AEC", VA = "0x11A5AEC")]
		public static extern void Pvr_SetAntiAliasing(int antiAliasing);

		[PreserveSig]
		[Token(Token = "0x60018D4")]
		[Address(RVA = "0x11A5B88", Offset = "0x11A5B88", VA = "0x11A5B88")]
		public static extern void Pvr_SinglePassBeforeForwardOpaque();

		[PreserveSig]
		[Token(Token = "0x60018D5")]
		[Address(RVA = "0x11A5C14", Offset = "0x11A5C14", VA = "0x11A5C14")]
		public static extern void Pvr_SetCurrentRenderTexture(uint textureId);

		[PreserveSig]
		[Token(Token = "0x60018D6")]
		[Address(RVA = "0x11A5CB0", Offset = "0x11A5CB0", VA = "0x11A5CB0")]
		public static extern bool Pvr_SetSinglePassDepthBufferWidthHeight(int width, int height);

		[PreserveSig]
		[Token(Token = "0x60018D7")]
		[Address(RVA = "0x11A5D64", Offset = "0x11A5D64", VA = "0x11A5D64")]
		public static extern int PVR_setPerformanceLevels(int cpuLevel, int gpuLevel);

		[PreserveSig]
		[Token(Token = "0x60018D8")]
		[Address(RVA = "0x11A5E10", Offset = "0x11A5E10", VA = "0x11A5E10")]
		public static extern bool Pvr_SetIPD(float distance);

		[PreserveSig]
		[Token(Token = "0x60018D9")]
		[Address(RVA = "0x11A5EB8", Offset = "0x11A5EB8", VA = "0x11A5EB8")]
		public static extern float Pvr_GetIPD();

		[PreserveSig]
		[Token(Token = "0x60018DA")]
		[Address(RVA = "0x11A5F44", Offset = "0x11A5F44", VA = "0x11A5F44")]
		public static extern bool Pvr_SetTrackingIPDEnabled(bool enable);

		[PreserveSig]
		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x11A5FE8", Offset = "0x11A5FE8", VA = "0x11A5FE8")]
		public static extern bool Pvr_GetTrackingIPDEnabled();

		[PreserveSig]
		[Token(Token = "0x60018DC")]
		[Address(RVA = "0x11A607C", Offset = "0x11A607C", VA = "0x11A607C")]
		public static extern bool Pvr_GetEyeTrackingAutoIPD(ref float autoIPD);

		[PreserveSig]
		[Token(Token = "0x60018DD")]
		[Address(RVA = "0x11A1AA0", Offset = "0x11A1AA0", VA = "0x11A1AA0")]
		public static extern int PVR_GetHmdAudioStatus();

		[Token(Token = "0x60018DE")]
		public static bool UPvr_CallStaticMethod<T>(ref T result, AndroidJavaClass jclass, string name, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0x11A49B0", Offset = "0x11A49B0", VA = "0x11A49B0")]
		public static bool UPvr_CallStaticMethod(AndroidJavaObject jobj, string name, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E0")]
		public static bool UPvr_CallMethod<T>(ref T result, AndroidJavaObject jobj, string name, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0x11A6120", Offset = "0x11A6120", VA = "0x11A6120")]
		public static bool UPvr_CallMethod(AndroidJavaObject jobj, string name, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0x11A6334", Offset = "0x11A6334", VA = "0x11A6334")]
		public static string UPvr_GetSDKVersion()
		{
			return null;
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x11A63C8", Offset = "0x11A63C8", VA = "0x11A63C8")]
		public static string UPvr_GetUnitySDKVersion()
		{
			return null;
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0x11A6410", Offset = "0x11A6410", VA = "0x11A6410")]
		public static string UPvr_GetDeviceMode()
		{
			return null;
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0x11A6418", Offset = "0x11A6418", VA = "0x11A6418")]
		public static string UPvr_GetDeviceModel()
		{
			return null;
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0x11A0CA4", Offset = "0x11A0CA4", VA = "0x11A0CA4")]
		public static string UPvr_GetDeviceSN()
		{
			return null;
		}

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0x11A10DC", Offset = "0x11A10DC", VA = "0x11A10DC")]
		public static AndroidJavaObject UPvr_GetCurrentActivity()
		{
			return null;
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0x11A6420", Offset = "0x11A6420", VA = "0x11A6420")]
		public static bool UPvr_SetMonoPresentation()
		{
			return default(bool);
		}

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0x11A6508", Offset = "0x11A6508", VA = "0x11A6508")]
		public static bool UPvr_IsPresentationExisted()
		{
			return default(bool);
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0x11A6614", Offset = "0x11A6614", VA = "0x11A6614")]
		public static bool UPvr_GetMainActivityPauseStatus()
		{
			return default(bool);
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0x11A6720", Offset = "0x11A6720", VA = "0x11A6720")]
		public static void UPvr_Sleep()
		{
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0x11A682C", Offset = "0x11A682C", VA = "0x11A682C")]
		public static bool UPvr_StartHomeKeyReceiver(string startreceivre)
		{
			return default(bool);
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0x11A6ACC", Offset = "0x11A6ACC", VA = "0x11A6ACC")]
		public static bool UPvr_StopHomeKeyReceiver()
		{
			return default(bool);
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0x11A6D1C", Offset = "0x11A6D1C", VA = "0x11A6D1C")]
		public static void UPvr_StartVRModel()
		{
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0x11A6E28", Offset = "0x11A6E28", VA = "0x11A6E28")]
		public static void UPvr_RemovePlatformLogo()
		{
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x11A6F34", Offset = "0x11A6F34", VA = "0x11A6F34")]
		public static void UPvr_ShowPlatformLogo()
		{
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x11A7040", Offset = "0x11A7040", VA = "0x11A7040")]
		public static bool UPvr_IsPicoActivity()
		{
			return default(bool);
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x11A7150", Offset = "0x11A7150", VA = "0x11A7150")]
		public static void UPvr_StopVRModel()
		{
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x11A725C", Offset = "0x11A725C", VA = "0x11A725C")]
		public static string UPvr_GetCountryCode()
		{
			return null;
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0x11A7370", Offset = "0x11A7370", VA = "0x11A7370")]
		public static bool UPvr_SetIPD(float distance)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0x11A77A8", Offset = "0x11A77A8", VA = "0x11A77A8")]
		public static float UPvr_GetIPD()
		{
			return default(float);
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x11A7868", Offset = "0x11A7868", VA = "0x11A7868")]
		public static bool UPvr_SetTrackingIPDEnabled(bool enable)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x11A7870", Offset = "0x11A7870", VA = "0x11A7870")]
		public static bool UPvr_GetTrackingIPDEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x11A7874", Offset = "0x11A7874", VA = "0x11A7874")]
		public static bool UPvr_GetEyeTrackingAutoIPD(ref float autoipd)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0x11A7878", Offset = "0x11A7878", VA = "0x11A7878")]
		public static void UPvr_UnityEventData(long data)
		{
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0x11A787C", Offset = "0x11A787C", VA = "0x11A787C")]
		public static long UPvr_GetEyeBufferData(int id)
		{
			return default(long);
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0x11A78F8", Offset = "0x11A78F8", VA = "0x11A78F8")]
		public static bool UPvr_checkDevice(string packagename)
		{
			return default(bool);
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x11A7A28", Offset = "0x11A7A28", VA = "0x11A7A28")]
		public static int UPvr_GetHmdHardwareVersion()
		{
			return default(int);
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x11A7A2C", Offset = "0x11A7A2C", VA = "0x11A7A2C")]
		public static string UPvr_GetHmdFirmwareVersion()
		{
			return null;
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x11A7AC0", Offset = "0x11A7AC0", VA = "0x11A7AC0")]
		public static string UPvr_GetHmdSerialNumber()
		{
			return null;
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x11A7B54", Offset = "0x11A7B54", VA = "0x11A7B54")]
		public static int UPvr_GetHmdBatteryStatus()
		{
			return default(int);
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x11A7B58", Offset = "0x11A7B58", VA = "0x11A7B58")]
		public static float UPvr_GetHmdBatteryTemperature()
		{
			return default(float);
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x11A7B5C", Offset = "0x11A7B5C", VA = "0x11A7B5C")]
		public static int UPvr_SetHmdAudioStatus(bool enable)
		{
			return default(int);
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x11A7B64", Offset = "0x11A7B64", VA = "0x11A7B64")]
		public static int UPvr_GetTrackingMode()
		{
			return default(int);
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x11A7B68", Offset = "0x11A7B68", VA = "0x11A7B68")]
		public static bool UPvr_setTrackingMode(int trackingMode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x11A7B6C", Offset = "0x11A7B6C", VA = "0x11A7B6C")]
		public static bool UPvr_getEyeTrackingData(ref EyeTrackingData trackingData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x11A7DD4", Offset = "0x11A7DD4", VA = "0x11A7DD4")]
		public static bool UPvr_getEyeTrackingGazeRay(ref EyeTrackingGazeRay gazeRay)
		{
			return default(bool);
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x11A8018", Offset = "0x11A8018", VA = "0x11A8018")]
		public static bool UPvr_getEyeTrackingGazeRayWorld(ref EyeTrackingGazeRay gazeRay)
		{
			return default(bool);
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x11A8304", Offset = "0x11A8304", VA = "0x11A8304")]
		public static Vector3 UPvr_getEyeTrackingPos()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x11A8674", Offset = "0x11A8674", VA = "0x11A8674")]
		public static int UPvr_GetPhoneScreenBrightness()
		{
			return default(int);
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x11A877C", Offset = "0x11A877C", VA = "0x11A877C")]
		public static void UPvr_SetPhoneScreenBrightness(int level)
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x11A88BC", Offset = "0x11A88BC", VA = "0x11A88BC")]
		public static bool UPvr_IsPicoDefaultActivity()
		{
			return default(bool);
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x11A8C24", Offset = "0x11A8C24", VA = "0x11A8C24")]
		public static bool UPvr_EnableSinglePass(bool enable)
		{
			return default(bool);
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0x11A8C2C", Offset = "0x11A8C2C", VA = "0x11A8C2C")]
		public static void UPvr_SetAntiAliasing(int antiAliasing)
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0x11A8C30", Offset = "0x11A8C30", VA = "0x11A8C30")]
		public static void UPvr_SinglePassBeforeForwardOpaque()
		{
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0x11A8C34", Offset = "0x11A8C34", VA = "0x11A8C34")]
		public static void UPvr_SetCurrentRenderTexture(uint textureId)
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0x11A8C38", Offset = "0x11A8C38", VA = "0x11A8C38")]
		public static bool UPvr_SetSinglePassDepthBufferWidthHeight(int width, int height)
		{
			return default(bool);
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0x11A8C3C", Offset = "0x11A8C3C", VA = "0x11A8C3C")]
		public static int UPVR_setPerformanceLevels(int cpuLevel, int gpuLevel)
		{
			return default(int);
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0x11A8C40", Offset = "0x11A8C40", VA = "0x11A8C40")]
		public static int UPvr_GetColorRes(string name)
		{
			return default(int);
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0x11A8E34", Offset = "0x11A8E34", VA = "0x11A8E34")]
		public static int UPvr_GetConfigInt(string name)
		{
			return default(int);
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0x11A9028", Offset = "0x11A9028", VA = "0x11A9028")]
		public static string UPvr_GetConfigString(string name)
		{
			return null;
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0x11A9224", Offset = "0x11A9224", VA = "0x11A9224")]
		public static string UPvr_GetDrawableLocation(string name)
		{
			return null;
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0x11A9420", Offset = "0x11A9420", VA = "0x11A9420")]
		public static int UPvr_GetTextSize(string name)
		{
			return default(int);
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0x11A9614", Offset = "0x11A9614", VA = "0x11A9614")]
		public static string UPvr_GetLangString(string name)
		{
			return null;
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0x11A9810", Offset = "0x11A9810", VA = "0x11A9810")]
		public static string UPvr_GetStringValue(string id, int type)
		{
			return null;
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0x11A9A84", Offset = "0x11A9A84", VA = "0x11A9A84")]
		public static int UPvr_GetIntValue(string id, int type)
		{
			return default(int);
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x11A9CF0", Offset = "0x11A9CF0", VA = "0x11A9CF0")]
		public static float UPvr_GetFloatValue(string id)
		{
			return default(float);
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x11A9EE4", Offset = "0x11A9EE4", VA = "0x11A9EE4")]
		public static string UPvr_GetObjectOrArray(string id, int type)
		{
			return null;
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x11AA158", Offset = "0x11AA158", VA = "0x11AA158")]
		public static int UPvr_GetCharSpace(string id)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200024D")]
	public struct BoundarySystem
	{
		[Token(Token = "0x2000461")]
		public enum BoundaryType
		{
			[Token(Token = "0x40021F1")]
			OuterBoundary,
			[Token(Token = "0x40021F2")]
			PlayArea
		}

		[Token(Token = "0x2000462")]
		public struct BoundaryTestResult
		{
			[Token(Token = "0x40021F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool IsTriggering;

			[Token(Token = "0x40021F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float ClosestDistance;

			[Token(Token = "0x40021F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 ClosestPoint;

			[Token(Token = "0x40021F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 ClosestPointNormal;
		}

		[Token(Token = "0x2000463")]
		public enum BoundaryTrackingNode
		{
			[Token(Token = "0x40021F8")]
			HandLeft,
			[Token(Token = "0x40021F9")]
			HandRight,
			[Token(Token = "0x40021FA")]
			Head
		}

		[Token(Token = "0x2000464")]
		public enum BoundaryTrackingState
		{
			[Token(Token = "0x40021FC")]
			PVR_NOREASON,
			[Token(Token = "0x40021FD")]
			PVRRELOCATION_IN_PROGRESS,
			[Token(Token = "0x40021FE")]
			PVRLOW_FEATURE_COUNT_ERROR,
			[Token(Token = "0x40021FF")]
			PVRLOW_LIGHT_ERROR,
			[Token(Token = "0x4002200")]
			PVRBRIGHT_LIGHT_ERROR,
			[Token(Token = "0x4002201")]
			PVRSTEREO_CAMERA_CALIBRATION_ERROR
		}

		[Token(Token = "0x4000F16")]
		public const string LibFileName = "Pvr_UnitySDK";

		[PreserveSig]
		[Token(Token = "0x600191C")]
		[Address(RVA = "0xC9BFAC", Offset = "0xC9BFAC", VA = "0xC9BFAC")]
		private static extern float Pvr_GetFloorHeight();

		[PreserveSig]
		[Token(Token = "0x600191D")]
		[Address(RVA = "0xC9C038", Offset = "0xC9C038", VA = "0xC9C038")]
		private static extern int Pvr_GetSeeThroughState();

		[PreserveSig]
		[Token(Token = "0x600191E")]
		[Address(RVA = "0xC9C0C4", Offset = "0xC9C0C4", VA = "0xC9C0C4")]
		private static extern void Pvr_BoundarySetSTBackground(bool value);

		[PreserveSig]
		[Token(Token = "0x600191F")]
		[Address(RVA = "0xC9C160", Offset = "0xC9C160", VA = "0xC9C160")]
		private static extern int Pvr_GetTrackingState();

		[PreserveSig]
		[Token(Token = "0x6001920")]
		[Address(RVA = "0xC9C1EC", Offset = "0xC9C1EC", VA = "0xC9C1EC")]
		private static extern bool Pvr_GetFrameRateLimit();

		[PreserveSig]
		[Token(Token = "0x6001921")]
		[Address(RVA = "0xC9C280", Offset = "0xC9C280", VA = "0xC9C280")]
		private static extern bool Pvr_IsBoundaryEnable();

		[PreserveSig]
		[Token(Token = "0x6001922")]
		[Address(RVA = "0xC9C314", Offset = "0xC9C314", VA = "0xC9C314")]
		private static extern bool Pvr_BoundaryGetConfigured();

		[PreserveSig]
		[Token(Token = "0x6001923")]
		[Address(RVA = "0xC9C3A8", Offset = "0xC9C3A8", VA = "0xC9C3A8")]
		private static extern bool Pvr_BoundaryTestNode(int node, bool isPlayArea, ref bool isTriggering, ref float closestDistance, ref float px, ref float py, ref float pz, ref float nx, ref float ny, ref float nz);

		[PreserveSig]
		[Token(Token = "0x6001924")]
		[Address(RVA = "0xC9C4C4", Offset = "0xC9C4C4", VA = "0xC9C4C4")]
		private static extern bool Pvr_BoundaryTestPoint(float x, float y, float z, bool isPlayArea, ref bool isTriggering, ref float closestDistance, ref float px, ref float py, ref float pz, ref float nx, ref float ny, ref float nz);

		[PreserveSig]
		[Token(Token = "0x6001925")]
		[Address(RVA = "0xC9C608", Offset = "0xC9C608", VA = "0xC9C608")]
		private static extern int Pvr_BoundaryGetGeometry(out IntPtr handle, bool isPlayArea);

		[PreserveSig]
		[Token(Token = "0x6001926")]
		[Address(RVA = "0xC9C6B0", Offset = "0xC9C6B0", VA = "0xC9C6B0")]
		private static extern int Pvr_BoundaryGetDimensions(ref float x, ref float y, ref float z, bool isPlayArea);

		[PreserveSig]
		[Token(Token = "0x6001927")]
		[Address(RVA = "0xC9C774", Offset = "0xC9C774", VA = "0xC9C774")]
		private static extern bool Pvr_BoundaryGetEnabled();

		[PreserveSig]
		[Token(Token = "0x6001928")]
		[Address(RVA = "0xC9C808", Offset = "0xC9C808", VA = "0xC9C808")]
		private static extern void Pvr_BoundarySetVisible(bool value);

		[PreserveSig]
		[Token(Token = "0x6001929")]
		[Address(RVA = "0xC9C8A4", Offset = "0xC9C8A4", VA = "0xC9C8A4")]
		private static extern bool Pvr_BoundaryGetVisible();

		[PreserveSig]
		[Token(Token = "0x600192A")]
		[Address(RVA = "0xC9C938", Offset = "0xC9C938", VA = "0xC9C938")]
		private static extern bool Pvr_EnableLWRP(bool enable);

		[PreserveSig]
		[Token(Token = "0x600192B")]
		[Address(RVA = "0xC9C9DC", Offset = "0xC9C9DC", VA = "0xC9C9DC")]
		private static extern bool Pvr_SetViewportSize(int w, int h);

		[PreserveSig]
		[Token(Token = "0x600192C")]
		[Address(RVA = "0xC9CA90", Offset = "0xC9CA90", VA = "0xC9CA90")]
		private static extern void Pvr_BoundarySetSeeThroughVisible(bool value);

		[PreserveSig]
		[Token(Token = "0x600192D")]
		[Address(RVA = "0xC9CB2C", Offset = "0xC9CB2C", VA = "0xC9CB2C")]
		private static extern void PVR_SetCameraImageRect(int width, int height);

		[PreserveSig]
		[Token(Token = "0x600192E")]
		[Address(RVA = "0xC9CBD8", Offset = "0xC9CBD8", VA = "0xC9CBD8")]
		private static extern void Pvr_SetGuardianSystemDisable(bool value);

		[PreserveSig]
		[Token(Token = "0x600192F")]
		[Address(RVA = "0xC9CC74", Offset = "0xC9CC74", VA = "0xC9CC74")]
		private static extern int Pvr_GetDialogState();

		[Token(Token = "0x6001930")]
		[Address(RVA = "0xC9CD00", Offset = "0xC9CD00", VA = "0xC9CD00")]
		public static float UPvr_GetFloorHeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0xC9CD04", Offset = "0xC9CD04", VA = "0xC9CD04")]
		public static int UPvr_GetSeeThroughState()
		{
			return default(int);
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0xC9CD08", Offset = "0xC9CD08", VA = "0xC9CD08")]
		public static void UPvr_EnableSeeThroughManual(bool enable)
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0xC9CD10", Offset = "0xC9CD10", VA = "0xC9CD10")]
		public static BoundaryTrackingState UPvr_GetTrackingState()
		{
			return default(BoundaryTrackingState);
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0xC9CD14", Offset = "0xC9CD14", VA = "0xC9CD14")]
		public static bool UPvr_GetFrameRateLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0xC9CD18", Offset = "0xC9CD18", VA = "0xC9CD18")]
		public static bool UPvr_IsBoundaryEnable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0xC9CD1C", Offset = "0xC9CD1C", VA = "0xC9CD1C")]
		public static bool UPvr_BoundaryGetConfigured()
		{
			return default(bool);
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0xC9CD20", Offset = "0xC9CD20", VA = "0xC9CD20")]
		public static BoundaryTestResult UPvr_BoundaryTestNode(BoundaryTrackingNode node, BoundaryType boundaryType)
		{
			return default(BoundaryTestResult);
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0xC9CE64", Offset = "0xC9CE64", VA = "0xC9CE64")]
		public static BoundaryTestResult UPvr_BoundaryTestPoint(Vector3 point, BoundaryType boundaryType)
		{
			return default(BoundaryTestResult);
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0xC9CFB4", Offset = "0xC9CFB4", VA = "0xC9CFB4")]
		public static Vector3[] UPvr_BoundaryGetGeometry(BoundaryType boundaryType)
		{
			return null;
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0xC9D19C", Offset = "0xC9D19C", VA = "0xC9D19C")]
		public static Vector3 UPvr_BoundaryGetDimensions(BoundaryType boundaryType)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0xC9D1F8", Offset = "0xC9D1F8", VA = "0xC9D1F8")]
		public static bool UPvr_BoundaryGetEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xC9D1FC", Offset = "0xC9D1FC", VA = "0xC9D1FC")]
		public static void UPvr_BoundarySetVisible(bool value)
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0xC9D204", Offset = "0xC9D204", VA = "0xC9D204")]
		public static bool UPvr_BoundaryGetVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0xC9D208", Offset = "0xC9D208", VA = "0xC9D208")]
		public static bool UPvr_EnableLWRP(bool enable)
		{
			return default(bool);
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0xC9D210", Offset = "0xC9D210", VA = "0xC9D210")]
		public static bool UPvr_SetViewportSize(int width, int height)
		{
			return default(bool);
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0xC9D214", Offset = "0xC9D214", VA = "0xC9D214")]
		public static void UPvr_StartCameraFrame()
		{
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0xC9D35C", Offset = "0xC9D35C", VA = "0xC9D35C")]
		public static void UPvr_StopCameraFrame()
		{
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0xC9D4A4", Offset = "0xC9D4A4", VA = "0xC9D4A4")]
		public static void UPvr_BoundaryGetSeeThroughData(int cameraIndex, RenderTexture renderTexture)
		{
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0xC9D68C", Offset = "0xC9D68C", VA = "0xC9D68C")]
		public static void UPvr_BoundarySetCameraImageRect(int width, int height)
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0xC9D7C8", Offset = "0xC9D7C8", VA = "0xC9D7C8")]
		public static void UPvr_BoundarySetSeeThroughVisible(bool value)
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0xC9D8F0", Offset = "0xC9D8F0", VA = "0xC9D8F0")]
		public static void UPvr_SetGuardianSystemDisable(bool value)
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0xC9DA18", Offset = "0xC9DA18", VA = "0xC9DA18")]
		public static int UPvr_GetDialogState()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200024E")]
	public struct PlatformSettings
	{
		[Token(Token = "0x6001947")]
		[Address(RVA = "0x11A0AAC", Offset = "0x11A0AAC", VA = "0x11A0AAC")]
		public static Pvr_UnitySDKPlatformSetting.simulationType UPvr_IsCurrentDeviceValid()
		{
			return default(Pvr_UnitySDKPlatformSetting.simulationType);
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0x11A0DD8", Offset = "0x11A0DD8", VA = "0x11A0DD8")]
		public static bool UPvr_AppEntitlementCheck(string appid)
		{
			return default(bool);
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x11A1168", Offset = "0x11A1168", VA = "0x11A1168")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7E2268", Offset = "0x7E2268")]
		public static bool UPvr_KeyEntitlementCheck(string publicKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0x11A146C", Offset = "0x11A146C", VA = "0x11A146C")]
		public static int UPvr_AppEntitlementCheckExtra(string appid)
		{
			return default(int);
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0x11A1784", Offset = "0x11A1784", VA = "0x11A1784")]
		public static int UPvr_KeyEntitlementCheckExtra(string publicKey)
		{
			return default(int);
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0x11A1A9C", Offset = "0x11A1A9C", VA = "0x11A1A9C")]
		public static int UPvr_GetHmdAudioStatus()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200024F")]
	public enum DeviceCommand
	{
		[Token(Token = "0x4000F18")]
		SET_PICO_NEO_HMD_BRIGHTNESS = 12,
		[Token(Token = "0x4000F19")]
		SET_PICO_NEO_HMD_SLEEPDELAY
	}
	[Token(Token = "0x2000250")]
	public enum BrightnessLevel
	{
		[Token(Token = "0x4000F1B")]
		VR_BRIGHTNESS_LEVEL_MIN = 1,
		[Token(Token = "0x4000F1C")]
		VR_BRIGHTNESS_LEVEL_MAX = 100,
		[Token(Token = "0x4000F1D")]
		VR_BRIGHTNESS_LEVEL_DOWN = 1000,
		[Token(Token = "0x4000F1E")]
		VR_BRIGHTNESS_LEVEL_UP = 1001,
		[Token(Token = "0x4000F1F")]
		VR_BRIGHTNESS_LEVEL_SCREEN_OFF = -100
	}
	[Token(Token = "0x2000251")]
	public struct VolumePowerBrightness
	{
		[Token(Token = "0x4000F20")]
		public const string LibFileName = "Pvr_UnitySDK";

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AndroidJavaObject activity;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static AndroidJavaClass javaSysActivityClass;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static AndroidJavaClass batteryjavaVrActivityClass;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AndroidJavaClass volumejavaVrActivityClass;

		[PreserveSig]
		[Token(Token = "0x600194D")]
		[Address(RVA = "0x11AC2CC", Offset = "0x11AC2CC", VA = "0x11AC2CC")]
		public static extern void Pvr_SetInitActivity(IntPtr activity, IntPtr vrActivityClass);

		[PreserveSig]
		[Token(Token = "0x600194E")]
		[Address(RVA = "0x11AC378", Offset = "0x11AC378", VA = "0x11AC378")]
		private static extern bool Pvr_IsHmdExist();

		[PreserveSig]
		[Token(Token = "0x600194F")]
		[Address(RVA = "0x11AC40C", Offset = "0x11AC40C", VA = "0x11AC40C")]
		private static extern int Pvr_GetHmdScreenBrightness();

		[PreserveSig]
		[Token(Token = "0x6001950")]
		[Address(RVA = "0x11AC498", Offset = "0x11AC498", VA = "0x11AC498")]
		private static extern bool Pvr_SetHmdScreenBrightness(int brightness);

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x11AC53C", Offset = "0x11AC53C", VA = "0x11AC53C")]
		public static bool UPvr_IsHmdExist()
		{
			return default(bool);
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0x11AC540", Offset = "0x11AC540", VA = "0x11AC540")]
		public static int UPvr_GetHmdScreenBrightness()
		{
			return default(int);
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0x11AC544", Offset = "0x11AC544", VA = "0x11AC544")]
		public static bool UPvr_SetHmdScreenBrightness(int brightness)
		{
			return default(bool);
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0x11AC548", Offset = "0x11AC548", VA = "0x11AC548")]
		public static bool UPvr_SetCommonBrightness(int brightness)
		{
			return default(bool);
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0x11AC7EC", Offset = "0x11AC7EC", VA = "0x11AC7EC")]
		public static int UPvr_GetCommonBrightness()
		{
			return default(int);
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x11ACA18", Offset = "0x11ACA18", VA = "0x11ACA18")]
		public static int[] UPvr_GetScreenBrightnessLevel()
		{
			return null;
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0x11ACC20", Offset = "0x11ACC20", VA = "0x11ACC20")]
		public static void UPvr_SetScreenBrightnessLevel(int vrBrightness, int level)
		{
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x11ACE70", Offset = "0x11ACE70", VA = "0x11ACE70")]
		public static bool UPvr_SetDevicePropForUser(DeviceCommand deviceid, string number)
		{
			return default(bool);
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x11ACFC8", Offset = "0x11ACFC8", VA = "0x11ACFC8")]
		public static string UPvr_GetDevicePropForUser(DeviceCommand deviceid)
		{
			return null;
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x11AD0FC", Offset = "0x11AD0FC", VA = "0x11AD0FC")]
		public static bool UPvr_InitBatteryClass()
		{
			return default(bool);
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x11AD308", Offset = "0x11AD308", VA = "0x11AD308")]
		public static bool UPvr_InitBatteryVolClass()
		{
			return default(bool);
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x11AD5EC", Offset = "0x11AD5EC", VA = "0x11AD5EC")]
		public static bool UPvr_StartBatteryReceiver(string startreceivre)
		{
			return default(bool);
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0x11AD838", Offset = "0x11AD838", VA = "0x11AD838")]
		public static bool UPvr_StopBatteryReceiver()
		{
			return default(bool);
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0x11AC580", Offset = "0x11AC580", VA = "0x11AC580")]
		public static bool UPvr_SetBrightness(int brightness)
		{
			return default(bool);
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0x11AC80C", Offset = "0x11AC80C", VA = "0x11AC80C")]
		public static int UPvr_GetCurrentBrightness()
		{
			return default(int);
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0x11ACA1C", Offset = "0x11ACA1C", VA = "0x11ACA1C")]
		public static int[] Pvr_GetScreenBrightnessLevel()
		{
			return null;
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x11ACC24", Offset = "0x11ACC24", VA = "0x11ACC24")]
		public static void Pvr_SetScreenBrightnessLevel(int vrBrightness, int level)
		{
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x11ADA34", Offset = "0x11ADA34", VA = "0x11ADA34")]
		public static bool UPvr_StartAudioReceiver(string startreceivre)
		{
			return default(bool);
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x11ADC80", Offset = "0x11ADC80", VA = "0x11ADC80")]
		public static bool UPvr_StopAudioReceiver()
		{
			return default(bool);
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0x11ADE7C", Offset = "0x11ADE7C", VA = "0x11ADE7C")]
		public static int UPvr_GetMaxVolumeNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0x11AE06C", Offset = "0x11AE06C", VA = "0x11AE06C")]
		public static int UPvr_GetCurrentVolumeNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x11AE25C", Offset = "0x11AE25C", VA = "0x11AE25C")]
		public static bool UPvr_VolumeUp()
		{
			return default(bool);
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x11AE43C", Offset = "0x11AE43C", VA = "0x11AE43C")]
		public static bool UPvr_VolumeDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x11AE61C", Offset = "0x11AE61C", VA = "0x11AE61C")]
		public static bool UPvr_SetVolumeNum(int volume)
		{
			return default(bool);
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x11AE800", Offset = "0x11AE800", VA = "0x11AE800")]
		public static bool UPvr_SetAudio(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x11AE808", Offset = "0x11AE808", VA = "0x11AE808")]
		public static bool UPvr_SetBattery(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x11ACFCC", Offset = "0x11ACFCC", VA = "0x11ACFCC")]
		private static string getDevicePropForUser(DeviceCommand deviceid)
		{
			return null;
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x11ACE74", Offset = "0x11ACE74", VA = "0x11ACE74")]
		private static bool setDevicePropForUser(DeviceCommand deviceid, string number)
		{
			return default(bool);
		}
	}
}
namespace Pvr_UnitySDKAPI.Achievement
{
	[Token(Token = "0x2000252")]
	public sealed class AchievementCore
	{
		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool IsPlatformInitialized;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool LogMessages;

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xC95BA0", Offset = "0xC95BA0", VA = "0xC95BA0")]
		public static bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xC95C08", Offset = "0xC95C08", VA = "0xC95C08")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0xC95C0C", Offset = "0xC95C0C", VA = "0xC95C0C")]
		public static void RegisterNetwork()
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0xC95DA8", Offset = "0xC95DA8", VA = "0xC95DA8")]
		public static void UnRegisterNetwork()
		{
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0xC95F20", Offset = "0xC95F20", VA = "0xC95F20")]
		public AchievementCore()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public static class Achievements
	{
		[Token(Token = "0x6001973")]
		[Address(RVA = "0xC95F88", Offset = "0xC95F88", VA = "0xC95F88")]
		public static Pvr_Request<Pvr_AchievementUpdate> Init()
		{
			return null;
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0xC96544", Offset = "0xC96544", VA = "0xC96544")]
		public static Pvr_Request<Pvr_AchievementUpdate> AddCount(string name, long count)
		{
			return null;
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0xC967E8", Offset = "0xC967E8", VA = "0xC967E8")]
		public static Pvr_Request<Pvr_AchievementUpdate> AddFields(string name, string fields)
		{
			return null;
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0xC96A6C", Offset = "0xC96A6C", VA = "0xC96A6C")]
		public static Pvr_Request<Pvr_AchievementDefinitionList> GetAllDefinitions()
		{
			return null;
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0xC96CF0", Offset = "0xC96CF0", VA = "0xC96CF0")]
		public static Pvr_Request<Pvr_AchievementProgressList> GetAllProgress()
		{
			return null;
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0xC96EFC", Offset = "0xC96EFC", VA = "0xC96EFC")]
		public static Pvr_Request<Pvr_AchievementDefinitionList> GetDefinitionsByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0xC97188", Offset = "0xC97188", VA = "0xC97188")]
		public static Pvr_Request<Pvr_AchievementProgressList> GetProgressByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0xC973D0", Offset = "0xC973D0", VA = "0xC973D0")]
		public static Pvr_Request<Pvr_AchievementUpdate> Unlock(string name)
		{
			return null;
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0xC97618", Offset = "0xC97618", VA = "0xC97618")]
		public static Pvr_Request<Pvr_AchievementDefinitionList> GetNextAchievementDefinitionListPage(Pvr_AchievementDefinitionList list)
		{
			return null;
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0xC979BC", Offset = "0xC979BC", VA = "0xC979BC")]
		public static Pvr_Request<Pvr_AchievementProgressList> GetNextAchievementProgressListPage(Pvr_AchievementProgressList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000254")]
	public enum AchievementType
	{
		[Token(Token = "0x4000F28")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x7DE404", Offset = "0x7DE404")]
		Unknown,
		[Token(Token = "0x4000F29")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x7DE43C", Offset = "0x7DE43C")]
		Simple,
		[Token(Token = "0x4000F2A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x7DE474", Offset = "0x7DE474")]
		Bitfield,
		[Token(Token = "0x4000F2B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x7DE4AC", Offset = "0x7DE4AC")]
		Count
	}
	[Token(Token = "0x2000255")]
	public class Pvr_AchievementAPI
	{
		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AndroidJavaClass achievementAPI;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static AndroidJavaClass definitionArrayHandle;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AndroidJavaClass definitionHandle;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static AndroidJavaClass progressArrayHandle;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static AndroidJavaClass progressHandle;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static AndroidJavaClass updateHandle;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static AndroidJavaObject errorHandle;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static AndroidJavaObject unityInterface;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string openId;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static string accessToken;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static string appId;

		[Token(Token = "0x600197D")]
		[Address(RVA = "0xC96090", Offset = "0xC96090", VA = "0xC96090")]
		internal static long Init()
		{
			return default(long);
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0xC95C68", Offset = "0xC95C68", VA = "0xC95C68")]
		internal static void RegisterNetwork()
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xC95E04", Offset = "0xC95E04", VA = "0xC95E04")]
		internal static void UnRegisterNetwork()
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0xC98424", Offset = "0xC98424", VA = "0xC98424")]
		internal static AndroidJavaObject PopMessage()
		{
			return null;
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0xC98548", Offset = "0xC98548", VA = "0xC98548")]
		internal static string pvr_Error_GetMessage(AndroidJavaObject popMessage)
		{
			return null;
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xC98644", Offset = "0xC98644", VA = "0xC98644")]
		internal static int pvr_Error_GetHttpCode(AndroidJavaObject popMessage)
		{
			return default(int);
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0xC98740", Offset = "0xC98740", VA = "0xC98740")]
		internal static int pvr_Error_GetCode(AndroidJavaObject popMessage)
		{
			return default(int);
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0xC96664", Offset = "0xC96664", VA = "0xC96664")]
		internal static long pvr_Achievements_AddCount(string name, long count)
		{
			return default(long);
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xC96908", Offset = "0xC96908", VA = "0xC96908")]
		internal static long pvr_Achievements_AddFields(string name, string fields)
		{
			return default(long);
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xC96B74", Offset = "0xC96B74", VA = "0xC96B74")]
		internal static long pvr_Achievements_GetAllDefinitions()
		{
			return default(long);
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xC96DF8", Offset = "0xC96DF8", VA = "0xC96DF8")]
		internal static long pvr_Achievements_GetAllProgress()
		{
			return default(long);
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0xC97014", Offset = "0xC97014", VA = "0xC97014")]
		internal static long pvr_Achievements_GetDefinitionsByName(string[] names, int v)
		{
			return default(long);
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xC972A0", Offset = "0xC972A0", VA = "0xC972A0")]
		internal static long pvr_Achievements_GetProgressByName(string[] names, int v)
		{
			return default(long);
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0xC974E8", Offset = "0xC974E8", VA = "0xC974E8")]
		internal static long pvr_Achievements_Unlock(string name)
		{
			return default(long);
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0xC97794", Offset = "0xC97794", VA = "0xC97794")]
		internal static long pvr_HTTP_GetWithMessageType(string nextUrl, Pvr_Message.MessageType messageType)
		{
			return default(long);
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xC9883C", Offset = "0xC9883C", VA = "0xC9883C")]
		internal static long pvr_Message_GetType(AndroidJavaObject popMessage)
		{
			return default(long);
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0xC989E4", Offset = "0xC989E4", VA = "0xC989E4")]
		internal static bool pvr_Message_IsError(AndroidJavaObject popMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0xC98AE0", Offset = "0xC98AE0", VA = "0xC98AE0")]
		internal static long pvr_Message_GetRequestID(AndroidJavaObject popMessage)
		{
			return default(long);
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xC98328", Offset = "0xC98328", VA = "0xC98328")]
		internal static string pvr_Message_GetString(AndroidJavaObject popMessage)
		{
			return null;
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xC98BDC", Offset = "0xC98BDC", VA = "0xC98BDC")]
		internal static bool pvr_AchievementUpdate_GetJustUnlocked(AndroidJavaObject popMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xC98CD8", Offset = "0xC98CD8", VA = "0xC98CD8")]
		internal static string pvr_AchievementUpdate_GetName(AndroidJavaObject popMessage)
		{
			return null;
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xC98DD4", Offset = "0xC98DD4", VA = "0xC98DD4")]
		internal static int pvr_AchievementProgressArray_GetSize(AndroidJavaObject msg)
		{
			return default(int);
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xC98ED0", Offset = "0xC98ED0", VA = "0xC98ED0")]
		internal static AndroidJavaObject pvr_AchievementProgressArray_GetElement(AndroidJavaObject msg, int index)
		{
			return null;
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0xC99020", Offset = "0xC99020", VA = "0xC99020")]
		internal static string pvr_AchievementProgressArray_GetNextUrl(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0xC9911C", Offset = "0xC9911C", VA = "0xC9911C")]
		internal static string pvr_AchievementProgress_GetBitfield(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0xC99218", Offset = "0xC99218", VA = "0xC99218")]
		internal static long pvr_AchievementProgress_GetCount(AndroidJavaObject msg)
		{
			return default(long);
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xC99314", Offset = "0xC99314", VA = "0xC99314")]
		internal static bool pvr_AchievementProgress_GetIsUnlocked(AndroidJavaObject msg)
		{
			return default(bool);
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xC99410", Offset = "0xC99410", VA = "0xC99410")]
		internal static string pvr_AchievementProgress_GetName(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xC9950C", Offset = "0xC9950C", VA = "0xC9950C")]
		internal static DateTime pvr_AchievementProgress_GetUnlockTime(AndroidJavaObject msg)
		{
			return default(DateTime);
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0xC99644", Offset = "0xC99644", VA = "0xC99644")]
		internal static DateTime DateTimeFromNative(long seconds_since_the_one_true_epoch)
		{
			return default(DateTime);
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xC996B4", Offset = "0xC996B4", VA = "0xC996B4")]
		internal static int pvr_AchievementDefinitionArray_GetSize(AndroidJavaObject msg)
		{
			return default(int);
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xC997B0", Offset = "0xC997B0", VA = "0xC997B0")]
		internal static AndroidJavaObject pvr_AchievementDefinitionArray_GetElement(AndroidJavaObject msg, int index)
		{
			return null;
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0xC99900", Offset = "0xC99900", VA = "0xC99900")]
		internal static string pvr_AchievementDefinitionArray_GetNextUrl(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0xC999FC", Offset = "0xC999FC", VA = "0xC999FC")]
		internal static AchievementType pvr_AchievementDefinition_GetType(AndroidJavaObject msg)
		{
			return default(AchievementType);
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0xC99BAC", Offset = "0xC99BAC", VA = "0xC99BAC")]
		internal static string pvr_AchievementDefinition_GetName(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0xC99CA8", Offset = "0xC99CA8", VA = "0xC99CA8")]
		internal static int pvr_AchievementDefinition_GetBitfieldLength(AndroidJavaObject msg)
		{
			return default(int);
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0xC99DA4", Offset = "0xC99DA4", VA = "0xC99DA4")]
		internal static long pvr_AchievementDefinition_GetTarget(AndroidJavaObject msg)
		{
			return default(long);
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0xC99EA0", Offset = "0xC99EA0", VA = "0xC99EA0")]
		internal static string pvr_AchievementDefinition_GetTitle(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0xC99F9C", Offset = "0xC99F9C", VA = "0xC99F9C")]
		internal static string pvr_AchievementDefinition_GetUnlockedDescription(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0xC9A098", Offset = "0xC9A098", VA = "0xC9A098")]
		internal static string pvr_AchievementDefinition_GetLockedIcon(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0xC9A194", Offset = "0xC9A194", VA = "0xC9A194")]
		internal static bool pvr_AchievementDefinition_GetIsSecrect(AndroidJavaObject msg)
		{
			return default(bool);
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0xC9A290", Offset = "0xC9A290", VA = "0xC9A290")]
		internal static string pvr_AchievementDefinition_GetUnlockedIcon(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0xC9A38C", Offset = "0xC9A38C", VA = "0xC9A38C")]
		internal static string pvr_AchievementDefinition_GetDescription(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0xC9A488", Offset = "0xC9A488", VA = "0xC9A488")]
		public Pvr_AchievementAPI()
		{
		}
	}
	[Token(Token = "0x2000256")]
	public class Pvr_AchievementDefinition
	{
		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly AchievementType Type;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Name;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly int BitfieldLength;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly long Target;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string Title;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly string Description;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string UnlockedDescription;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string UnlockedIcon;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly string LockedIcon;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly bool IsSecrect;

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xC9A78C", Offset = "0xC9A78C", VA = "0xC9A78C")]
		public Pvr_AchievementDefinition(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x2000257")]
	public class Pvr_AchievementDefinitionList : Pvr_DeserializableList<Pvr_AchievementDefinition>
	{
		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xC97C7C", Offset = "0xC97C7C", VA = "0xC97C7C")]
		public Pvr_AchievementDefinitionList(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class Pvr_AchievementProgress
	{
		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Bitfield;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly long Count;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool IsUnlocked;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Name;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly DateTime UnlockTime;

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xC9A880", Offset = "0xC9A880", VA = "0xC9A880")]
		public Pvr_AchievementProgress(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class Pvr_AchievementProgressList : Pvr_DeserializableList<Pvr_AchievementProgress>
	{
		[Token(Token = "0x60019AD")]
		[Address(RVA = "0xC97F04", Offset = "0xC97F04", VA = "0xC97F04")]
		public Pvr_AchievementProgressList(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class Pvr_AchievementUpdate
	{
		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool JustUnlocked;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Name;

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xC9818C", Offset = "0xC9818C", VA = "0xC9818C")]
		public Pvr_AchievementUpdate(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x200025B")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7D727C", Offset = "0x7D727C")]
	public class Pvr_DeserializableList<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<T> data;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string nextUrl;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string previousUrl;

		[Token(Token = "0x17000278")]
		public int Count
		{
			[Token(Token = "0x60019AF")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000279")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x60019B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027A")]
		public T Item
		{
			[Token(Token = "0x60019B2")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60019B3")]
			set
			{
			}
		}

		[Token(Token = "0x1700027B")]
		public bool HasNextPage
		{
			[Token(Token = "0x60019BE")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027C")]
		public bool HasPreviousPage
		{
			[Token(Token = "0x60019BF")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027D")]
		public string NextUrl
		{
			[Token(Token = "0x60019C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027E")]
		public string PreviousUrl
		{
			[Token(Token = "0x60019C1")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019B1")]
		public int IndexOf(T obj)
		{
			return default(int);
		}

		[Token(Token = "0x60019B4")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x60019B5")]
		public void Clear()
		{
		}

		[Token(Token = "0x60019B6")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60019B7")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60019B8")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60019B9")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x60019BA")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60019BB")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x60019BC")]
		private IEnumerator GetEnumerator1()
		{
			return null;
		}

		[Token(Token = "0x60019BD")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60019C2")]
		public Pvr_DeserializableList()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public static class Pvr_Callback
	{
		[Token(Token = "0x2000465")]
		private class RequestCallback
		{
			[Token(Token = "0x4002202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Pvr_Message.Callback messageCallback;

			[Token(Token = "0x6002525")]
			[Address(RVA = "0xC9AF14", Offset = "0xC9AF14", VA = "0xC9AF14")]
			public RequestCallback()
			{
			}

			[Token(Token = "0x6002526")]
			[Address(RVA = "0xC9AF1C", Offset = "0xC9AF1C", VA = "0xC9AF1C")]
			public RequestCallback(Pvr_Message.Callback callback)
			{
			}

			[Token(Token = "0x6002527")]
			[Address(RVA = "0xC9AF48", Offset = "0xC9AF48", VA = "0xC9AF48", Slot = "4")]
			public virtual void HandleMessage(Pvr_Message msg)
			{
			}
		}

		[Token(Token = "0x2000466")]
		private sealed class RequestCallback<T> : RequestCallback
		{
			[Token(Token = "0x4002203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Pvr_Message<T>.Callback callback;

			[Token(Token = "0x6002528")]
			public RequestCallback(Pvr_Message<T>.Callback callback)
			{
			}

			[Token(Token = "0x6002529")]
			public override void HandleMessage(Pvr_Message msg)
			{
			}
		}

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<long, Request> requestIDsToRequests;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Pvr_Message.MessageType, RequestCallback> notificationCallbacks;

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0xC9A938", Offset = "0xC9A938", VA = "0xC9A938")]
		internal static void AddRequest(Request request)
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0xC9AAAC", Offset = "0xC9AAAC", VA = "0xC9AAAC")]
		internal static void RunCallbacks()
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xC9AD3C", Offset = "0xC9AD3C", VA = "0xC9AD3C")]
		internal static void RunLimitedCallbacks(uint limit)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xC9ADD4", Offset = "0xC9ADD4", VA = "0xC9ADD4")]
		internal static void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0xC9AB88", Offset = "0xC9AB88", VA = "0xC9AB88")]
		internal static void HandleMessage(Pvr_Message msg)
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class Pvr_CallbackRunner : MonoBehaviour
	{
		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsPersistantBetweenSceneLoads;

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0xC9B30C", Offset = "0xC9B30C", VA = "0xC9B30C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0xC9B408", Offset = "0xC9B408", VA = "0xC9B408")]
		private void Update()
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xC9B494", Offset = "0xC9B494", VA = "0xC9B494")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0xC9B4F0", Offset = "0xC9B4F0", VA = "0xC9B4F0")]
		public Pvr_CallbackRunner()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public abstract class Pvr_Message<T> : Pvr_Message
	{
		[Token(Token = "0x2000467")]
		public new delegate void Callback(Pvr_Message<T> message);

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T data;

		[Token(Token = "0x1700027F")]
		public T Data
		{
			[Token(Token = "0x60019CE")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x60019CD")]
		public Pvr_Message(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60019CF")]
		protected abstract T GetDataFromMessage(AndroidJavaObject msg);
	}
	[Token(Token = "0x200025F")]
	public class Pvr_Message
	{
		[Token(Token = "0x2000468")]
		public delegate void Callback(Pvr_Message message);

		[Token(Token = "0x2000469")]
		public enum MessageType : uint
		{
			[Token(Token = "0x4002205")]
			Unknown = 0u,
			[Token(Token = "0x4002206")]
			Achievements_AddCount = 65495601u,
			[Token(Token = "0x4002207")]
			Achievements_AddFields = 346693929u,
			[Token(Token = "0x4002208")]
			Achievements_GetAllDefinitions = 64177549u,
			[Token(Token = "0x4002209")]
			Achievements_GetAllProgress = 1335877149u,
			[Token(Token = "0x400220A")]
			Achievements_GetDefinitionsByName = 1653670332u,
			[Token(Token = "0x400220B")]
			Achievements_GetNextAchievementDefinitionArrayPage = 712888917u,
			[Token(Token = "0x400220C")]
			Achievements_GetNextAchievementProgressArrayPage = 792913703u,
			[Token(Token = "0x400220D")]
			Achievements_GetProgressByName = 354837425u,
			[Token(Token = "0x400220E")]
			Achievements_Unlock = 1497156573u,
			[Token(Token = "0x400220F")]
			Achievements_WriteAchievementProgress = 121027549u,
			[Token(Token = "0x4002210")]
			Achievements_VerifyAccessToken = 53284924u
		}

		[Token(Token = "0x200046A")]
		internal delegate Pvr_Message ExtraMessageTypesHandler(AndroidJavaObject messageHandle, MessageType message_type);

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MessageType type;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long requestID;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Error error;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE4E4", Offset = "0x7DE4E4")]
		private static ExtraMessageTypesHandler <HandleExtraMessageTypes>k__BackingField;

		[Token(Token = "0x17000280")]
		public MessageType Type
		{
			[Token(Token = "0x60019D1")]
			[Address(RVA = "0xC9B6F0", Offset = "0xC9B6F0", VA = "0xC9B6F0")]
			get
			{
				return default(MessageType);
			}
		}

		[Token(Token = "0x17000281")]
		public bool IsError
		{
			[Token(Token = "0x60019D2")]
			[Address(RVA = "0xC9B6F8", Offset = "0xC9B6F8", VA = "0xC9B6F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000282")]
		public long RequestID
		{
			[Token(Token = "0x60019D3")]
			[Address(RVA = "0xC9B708", Offset = "0xC9B708", VA = "0xC9B708")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000283")]
		internal static ExtraMessageTypesHandler HandleExtraMessageTypes
		{
			[Token(Token = "0x60019DC")]
			[Address(RVA = "0xC9B92C", Offset = "0xC9B92C", VA = "0xC9B92C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E22B0", Offset = "0x7E22B0")]
			private get
			{
				return null;
			}
			[Token(Token = "0x60019DB")]
			[Address(RVA = "0xC9B8D8", Offset = "0xC9B8D8", VA = "0xC9B8D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E22A0", Offset = "0x7E22A0")]
			set
			{
			}
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0xC9B500", Offset = "0xC9B500", VA = "0xC9B500")]
		public Pvr_Message(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0xC9B710", Offset = "0xC9B710", VA = "0xC9B710", Slot = "4")]
		public virtual Error GetError()
		{
			return null;
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0xC9B718", Offset = "0xC9B718", VA = "0xC9B718", Slot = "5")]
		public virtual Pvr_AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0xC9B720", Offset = "0xC9B720", VA = "0xC9B720", Slot = "6")]
		public virtual Pvr_AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0xC9B728", Offset = "0xC9B728", VA = "0xC9B728", Slot = "7")]
		public virtual Pvr_AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0xC9B730", Offset = "0xC9B730", VA = "0xC9B730", Slot = "8")]
		public virtual string GetString()
		{
			return null;
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0xC9B738", Offset = "0xC9B738", VA = "0xC9B738")]
		internal static Pvr_Message ParseMessageHandle(AndroidJavaObject messageHandle)
		{
			return null;
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0xC9AB28", Offset = "0xC9AB28", VA = "0xC9AB28")]
		public static Pvr_Message PopMessage()
		{
			return null;
		}
	}
	[Token(Token = "0x2000260")]
	public class MessageWithAchievementDefinitions : Pvr_Message<Pvr_AchievementDefinitionList>
	{
		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xC97B78", Offset = "0xC97B78", VA = "0xC97B78")]
		public MessageWithAchievementDefinitions(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0xC97BD8", Offset = "0xC97BD8", VA = "0xC97BD8", Slot = "5")]
		public override Pvr_AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0xC97C1C", Offset = "0xC97C1C", VA = "0xC97C1C", Slot = "9")]
		protected override Pvr_AchievementDefinitionList GetDataFromMessage(AndroidJavaObject msg)
		{
			return null;
		}
	}
	[Token(Token = "0x2000261")]
	public class MessageWithAchievementProgressList : Pvr_Message<Pvr_AchievementProgressList>
	{
		[Token(Token = "0x60019E0")]
		[Address(RVA = "0xC97E00", Offset = "0xC97E00", VA = "0xC97E00")]
		public MessageWithAchievementProgressList(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0xC97E60", Offset = "0xC97E60", VA = "0xC97E60", Slot = "6")]
		public override Pvr_AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0xC97EA4", Offset = "0xC97EA4", VA = "0xC97EA4", Slot = "9")]
		protected override Pvr_AchievementProgressList GetDataFromMessage(AndroidJavaObject msg)
		{
			return null;
		}
	}
	[Token(Token = "0x2000262")]
	public class MessageWithAchievementUpdate : Pvr_Message<Pvr_AchievementUpdate>
	{
		[Token(Token = "0x60019E3")]
		[Address(RVA = "0xC98088", Offset = "0xC98088", VA = "0xC98088")]
		public MessageWithAchievementUpdate(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0xC980E8", Offset = "0xC980E8", VA = "0xC980E8", Slot = "7")]
		public override Pvr_AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0xC9812C", Offset = "0xC9812C", VA = "0xC9812C", Slot = "9")]
		protected override Pvr_AchievementUpdate GetDataFromMessage(AndroidJavaObject msg)
		{
			return null;
		}
	}
	[Token(Token = "0x2000263")]
	public class MessageWithString : Pvr_Message<string>
	{
		[Token(Token = "0x60019E6")]
		[Address(RVA = "0xC98220", Offset = "0xC98220", VA = "0xC98220")]
		public MessageWithString(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0xC98280", Offset = "0xC98280", VA = "0xC98280", Slot = "8")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0xC982C4", Offset = "0xC982C4", VA = "0xC982C4", Slot = "9")]
		protected override string GetDataFromMessage(AndroidJavaObject msg)
		{
			return null;
		}
	}
	[Token(Token = "0x2000264")]
	public class Error
	{
		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int Code;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int HttpCode;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Message;

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0xC97B38", Offset = "0xC97B38", VA = "0xC97B38")]
		public Error(int code, string message, int httpCode)
		{
		}
	}
	[Token(Token = "0x2000265")]
	public sealed class Pvr_Request<T> : Request
	{
		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Pvr_Message<T>.Callback callback_;

		[Token(Token = "0x60019EA")]
		public Pvr_Request(long requestID)
		{
		}

		[Token(Token = "0x60019EB")]
		public Pvr_Request<T> OnComplete(Pvr_Message<T>.Callback callback)
		{
			return null;
		}

		[Token(Token = "0x60019EC")]
		public override void HandleMessage(Pvr_Message msg)
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class Request
	{
		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Pvr_Message.Callback callback_;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DE4F4", Offset = "0x7DE4F4")]
		private long <RequestID>k__BackingField;

		[Token(Token = "0x17000284")]
		public long RequestID
		{
			[Token(Token = "0x60019EE")]
			[Address(RVA = "0xC9BE88", Offset = "0xC9BE88", VA = "0xC9BE88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E22C0", Offset = "0x7E22C0")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60019EF")]
			[Address(RVA = "0xC9BE90", Offset = "0xC9BE90", VA = "0xC9BE90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E22D0", Offset = "0x7E22D0")]
			set
			{
			}
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0xC9BE5C", Offset = "0xC9BE5C", VA = "0xC9BE5C")]
		public Request(long requestID)
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0xC9BE98", Offset = "0xC9BE98", VA = "0xC9BE98")]
		public Request OnComplete(Pvr_Message.Callback callback)
		{
			return null;
		}

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0xC9BF14", Offset = "0xC9BF14", VA = "0xC9BF14", Slot = "4")]
		public virtual void HandleMessage(Pvr_Message msg)
		{
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0xC9B410", Offset = "0xC9B410", VA = "0xC9B410")]
		public static void RunCallbacks(uint limit = 0u)
		{
		}
	}
}
namespace GloomyTest
{
	[Token(Token = "0x2000267")]
	public class buntle_test_namespace : MonoBehaviour
	{
		[Token(Token = "0x60019F3")]
		[Address(RVA = "0xAE2D50", Offset = "0xAE2D50", VA = "0xAE2D50")]
		private void Start()
		{
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0xAE2DBC", Offset = "0xAE2DBC", VA = "0xAE2DBC")]
		private void Update()
		{
		}

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0xAE2F10", Offset = "0xAE2F10", VA = "0xAE2F10")]
		public buntle_test_namespace()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class buntle_test_prefab : MonoBehaviour
	{
		[Token(Token = "0x60019F6")]
		[Address(RVA = "0xAE2F18", Offset = "0xAE2F18", VA = "0xAE2F18")]
		private void Start()
		{
		}

		[Token(Token = "0x60019F7")]
		[Address(RVA = "0xAE2F84", Offset = "0xAE2F84", VA = "0xAE2F84")]
		private void Update()
		{
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0xAE30D8", Offset = "0xAE30D8", VA = "0xAE30D8")]
		public buntle_test_prefab()
		{
		}
	}
}
namespace GloomyEyes
{
	[Serializable]
	[Token(Token = "0x2000269")]
	[AttributeAttribute(Name = "EditorParamsHideFields", RVA = "0x7D72B4", Offset = "0x7D72B4")]
	public class SceneErrorCheckerData : ErgoData
	{
		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DE504", Offset = "0x7DE504")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE504", Offset = "0x7DE504")]
		public List<GameObject> nullMaterials;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DE554", Offset = "0x7DE554")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE554", Offset = "0x7DE554")]
		public Dictionary<Material, List<Renderer>> usedMaterials;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DE5A4", Offset = "0x7DE5A4")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE5A4", Offset = "0x7DE5A4")]
		public Dictionary<Shader, List<Material>> usedShaders;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DE5F4", Offset = "0x7DE5F4")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE5F4", Offset = "0x7DE5F4")]
		public List<GameObject> moreMaterials;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DE644", Offset = "0x7DE644")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE644", Offset = "0x7DE644")]
		public List<GameObject> missingLayers;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DE694", Offset = "0x7DE694")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE694", Offset = "0x7DE694")]
		public List<GameObject> enabledShadows;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DE6E4", Offset = "0x7DE6E4")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE6E4", Offset = "0x7DE6E4")]
		public List<GameObject> missingInterpolationRef;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DE734", Offset = "0x7DE734")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE734", Offset = "0x7DE734")]
		public List<GameObject> missingAttachments;

		[Token(Token = "0x60019F9")]
		[Address(RVA = "0xAE0040", Offset = "0xAE0040", VA = "0xAE0040")]
		public SceneErrorCheckerData()
		{
		}
	}
	[Token(Token = "0x200026A")]
	[AttributeAttribute(Name = "EditorParamsReadonlyFields", RVA = "0x7D733C", Offset = "0x7D733C")]
	public class SceneNodeAnimatorData : SceneNodeData
	{
		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int frameToBake;

		[Token(Token = "0x60019FA")]
		[Address(RVA = "0xAE0180", Offset = "0xAE0180", VA = "0xAE0180")]
		public SceneNodeAnimatorData()
		{
		}

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0xAE021C", Offset = "0xAE021C", VA = "0xAE021C")]
		public SceneNodeAnimatorData(Component sceneInstance)
		{
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0xAE02D0", Offset = "0xAE02D0", VA = "0xAE02D0", Slot = "13")]
		protected override Component GetComponentFromGameobject(GameObject gObj)
		{
			return null;
		}
	}
	[Token(Token = "0x200026B")]
	[AttributeAttribute(Name = "EditorParamsReadonlyFields", RVA = "0x7D73C4", Offset = "0x7D73C4")]
	public class SceneNodeAttachmentData : SceneNodeData
	{
		[Token(Token = "0x60019FD")]
		[Address(RVA = "0xAE032C", Offset = "0xAE032C", VA = "0xAE032C")]
		public SceneNodeAttachmentData()
		{
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0xAE0330", Offset = "0xAE0330", VA = "0xAE0330")]
		public SceneNodeAttachmentData(Component sceneInstance)
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0xAE0334", Offset = "0xAE0334", VA = "0xAE0334", Slot = "13")]
		protected override Component GetComponentFromGameobject(GameObject gObj)
		{
			return null;
		}
	}
	[Token(Token = "0x200026C")]
	public abstract class SceneNodeComponent : ErgoBaseObject
	{
		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public SceneNodeData nodeData;

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0xAE0390", Offset = "0xAE0390", VA = "0xAE0390", Slot = "17")]
		protected override void DoAwake()
		{
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0xAE03B8", Offset = "0xAE03B8", VA = "0xAE03B8")]
		protected void RrefreshNodeData()
		{
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0xAE0438", Offset = "0xAE0438", VA = "0xAE0438", Slot = "34")]
		protected virtual SceneNodeData DoCreateNodeData()
		{
			return null;
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0xAE0718", Offset = "0xAE0718", VA = "0xAE0718")]
		protected SceneNodeComponent()
		{
		}
	}
	[Token(Token = "0x200026D")]
	[ExecuteInEditMode]
	public class SceneNodeComponentTransform : SceneNodeComponent
	{
		[Token(Token = "0x6001A04")]
		[Address(RVA = "0xAE0720", Offset = "0xAE0720", VA = "0xAE0720", Slot = "34")]
		protected override SceneNodeData DoCreateNodeData()
		{
			return null;
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0xAE074C", Offset = "0xAE074C", VA = "0xAE074C")]
		public SceneNodeComponentTransform()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public enum SceneNodeType
	{
		[Token(Token = "0x4000F64")]
		NONE = -1,
		[Token(Token = "0x4000F65")]
		SCENE_ROOT,
		[Token(Token = "0x4000F66")]
		TRANSFORM,
		[Token(Token = "0x4000F67")]
		TIMELINE,
		[Token(Token = "0x4000F68")]
		ANIMATOR,
		[Token(Token = "0x4000F69")]
		ATTACHMENT,
		[Token(Token = "0x4000F6A")]
		ASSET,
		[Token(Token = "0x4000F6B")]
		MESH_RENDERER
	}
	[Serializable]
	[Token(Token = "0x200026F")]
	[AttributeAttribute(Name = "EditorParamsReadonlyFields", RVA = "0x7D745C", Offset = "0x7D745C")]
	public class SceneNodeData : ErgoData
	{
		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "EditorParams", RVA = "0x7DE784", Offset = "0x7DE784")]
		public List<SceneNodeData> childNodes;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool enabled;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string path;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Component instance;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SceneNodeType nodeType;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SceneNodeData _parent;

		[Token(Token = "0x17000285")]
		public Component target
		{
			[Token(Token = "0x6001A08")]
			[Address(RVA = "0xAE0A6C", Offset = "0xAE0A6C", VA = "0xAE0A6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A09")]
			[Address(RVA = "0xAE0A74", Offset = "0xAE0A74", VA = "0xAE0A74")]
			set
			{
			}
		}

		[Token(Token = "0x17000286")]
		public SceneNodeData parent
		{
			[Token(Token = "0x6001A0B")]
			[Address(RVA = "0xAE0A80", Offset = "0xAE0A80", VA = "0xAE0A80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A0C")]
			[Address(RVA = "0xAE0A88", Offset = "0xAE0A88", VA = "0xAE0A88")]
			set
			{
			}
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0xAE0754", Offset = "0xAE0754", VA = "0xAE0754")]
		public static SceneNodeData CreateFromGameobject(GameObject gObj)
		{
			return null;
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0xAE0464", Offset = "0xAE0464", VA = "0xAE0464")]
		public static SceneNodeData CreateFromComponent(Component component)
		{
			return null;
		}

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0xAE0A7C", Offset = "0xAE0A7C", VA = "0xAE0A7C", Slot = "12")]
		protected virtual void DoOnTargetUpdated()
		{
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0xAE0184", Offset = "0xAE0184", VA = "0xAE0184")]
		public SceneNodeData()
		{
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0xAE0220", Offset = "0xAE0220", VA = "0xAE0220")]
		public SceneNodeData(Component sceneInstance)
		{
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0xAE0A90", Offset = "0xAE0A90", VA = "0xAE0A90")]
		public void SetWithInstance(Component sceneInstance)
		{
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0xAE0B6C", Offset = "0xAE0B6C", VA = "0xAE0B6C")]
		public void RefreshInstanceReference(bool recursive = false)
		{
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0xAE0D28", Offset = "0xAE0D28", VA = "0xAE0D28", Slot = "13")]
		protected virtual Component GetComponentFromGameobject(GameObject gObj)
		{
			return null;
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0xAE0D30", Offset = "0xAE0D30", VA = "0xAE0D30", Slot = "14")]
		public virtual void RefreshFromInstance()
		{
		}

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0xAE0DDC", Offset = "0xAE0DDC", VA = "0xAE0DDC", Slot = "15")]
		public virtual void ApplyValuesToInstance()
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0xAE08F8", Offset = "0xAE08F8", VA = "0xAE08F8")]
		public void ParseHierarchy()
		{
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0xAE0E00", Offset = "0xAE0E00", VA = "0xAE0E00")]
		public void processGameObject(SceneNodeData parent, GameObject gobj)
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xAE0F0C", Offset = "0xAE0F0C", VA = "0xAE0F0C", Slot = "4")]
		public override void SetDefaultValues()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class SceneNodeLightData : SceneNodeData
	{
		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LightRenderMode renderMode;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public LightShadows shadows;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color color;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LightType type;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Light lightInstance;

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0xAE0F84", Offset = "0xAE0F84", VA = "0xAE0F84")]
		public SceneNodeLightData()
		{
		}

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0xAE0A20", Offset = "0xAE0A20", VA = "0xAE0A20")]
		public SceneNodeLightData(Component sceneInstance)
		{
		}

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0xAE0FC4", Offset = "0xAE0FC4", VA = "0xAE0FC4", Slot = "13")]
		protected override Component GetComponentFromGameobject(GameObject gObj)
		{
			return null;
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0xAE1020", Offset = "0xAE1020", VA = "0xAE1020", Slot = "12")]
		protected override void DoOnTargetUpdated()
		{
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0xAE10C0", Offset = "0xAE10C0", VA = "0xAE10C0", Slot = "14")]
		public override void RefreshFromInstance()
		{
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0xAE11A8", Offset = "0xAE11A8", VA = "0xAE11A8", Slot = "15")]
		public override void ApplyValuesToInstance()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public class SceneNodeMeshRendererData : SceneNodeData
	{
		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0xAE121C", Offset = "0xAE121C", VA = "0xAE121C")]
		public SceneNodeMeshRendererData()
		{
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0xAE0A68", Offset = "0xAE0A68", VA = "0xAE0A68")]
		public SceneNodeMeshRendererData(Component sceneInstance)
		{
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0xAE1220", Offset = "0xAE1220", VA = "0xAE1220", Slot = "13")]
		protected override Component GetComponentFromGameobject(GameObject gObj)
		{
			return null;
		}
	}
	[Token(Token = "0x2000272")]
	[AttributeAttribute(Name = "EditorParamsReadonlyFields", RVA = "0x7D74E4", Offset = "0x7D74E4")]
	public class SceneNodeRootData : SceneNodeData
	{
		[Token(Token = "0x6001A20")]
		[Address(RVA = "0xAE127C", Offset = "0xAE127C", VA = "0xAE127C")]
		public SceneNodeRootData()
		{
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0xAE1280", Offset = "0xAE1280", VA = "0xAE1280")]
		public SceneNodeRootData(Component sceneInstance)
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0xAE1284", Offset = "0xAE1284", VA = "0xAE1284", Slot = "10")]
		public override void OnFinishedDeserializing()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class SceneNodeTimelineData : SceneNodeData
	{
		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int frameToBake;

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0xAE12B0", Offset = "0xAE12B0", VA = "0xAE12B0")]
		public SceneNodeTimelineData()
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xAE0A1C", Offset = "0xAE0A1C", VA = "0xAE0A1C")]
		public SceneNodeTimelineData(Component sceneInstance)
		{
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0xAE12B4", Offset = "0xAE12B4", VA = "0xAE12B4", Slot = "13")]
		protected override Component GetComponentFromGameobject(GameObject gObj)
		{
			return null;
		}
	}
	[Token(Token = "0x2000274")]
	public class SceneNodeTransformData : SceneNodeData
	{
		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int frameToBake;

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xAE1310", Offset = "0xAE1310", VA = "0xAE1310")]
		public SceneNodeTransformData()
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0xAE1314", Offset = "0xAE1314", VA = "0xAE1314")]
		public SceneNodeTransformData(Component sceneInstance)
		{
		}
	}
	[Token(Token = "0x2000275")]
	public class GloomyEyesSettings
	{
		[Token(Token = "0x4000F79")]
		public const string MENU_GLOOMY_EYES = "Gloomy Eyes";

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0xADF39C", Offset = "0xADF39C", VA = "0xADF39C")]
		public GloomyEyesSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000276")]
	public class GloomyMaterialReset : MonoBehaviour
	{
		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "EditorParams", RVA = "0x7DE7D4", Offset = "0x7DE7D4")]
		public List<MaterialResetData> materialList;

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0xADF3A4", Offset = "0xADF3A4", VA = "0xADF3A4")]
		public void ApplyAllProperties()
		{
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0xADF94C", Offset = "0xADF94C", VA = "0xADF94C")]
		public void ClearAllData()
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0xADF9A4", Offset = "0xADF9A4", VA = "0xADF9A4")]
		public void FindAllMaterials()
		{
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0xADFE38", Offset = "0xADFE38", VA = "0xADFE38")]
		public GloomyMaterialReset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000277")]
	public abstract class MaterialPropertyData : ErgoData
	{
		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0xADF7D4", Offset = "0xADF7D4", VA = "0xADF7D4")]
		public void ApplyPropertyToMaterial(Material material)
		{
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0xADFF7C", Offset = "0xADFF7C", VA = "0xADFF7C", Slot = "12")]
		protected virtual void DoApplyProperty(Material material)
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0xADFF0C", Offset = "0xADFF0C", VA = "0xADFF0C")]
		protected MaterialPropertyData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000278")]
	[AttributeAttribute(Name = "EditorParamsHideFields", RVA = "0x7D755C", Offset = "0x7D755C")]
	public class MaterialResetData : ErgoData
	{
		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<MaterialPropertyColorData> colorProperties;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<MaterialPropertyIntData> intProperties;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<MaterialPropertyFloatData> floatProperties;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material material;

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0xADFF80", Offset = "0xADFF80", VA = "0xADFF80")]
		public MaterialResetData()
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0xADFD48", Offset = "0xADFD48", VA = "0xADFD48")]
		public MaterialResetData(Material mat)
		{
		}
	}
}
namespace GloomyEyes.MaterialProperties
{
	[Serializable]
	[Token(Token = "0x2000279")]
	public class MaterialPropertyColorData : MaterialPropertyData
	{
		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Color value;

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0xADFEA8", Offset = "0xADFEA8", VA = "0xADFEA8", Slot = "12")]
		protected override void DoApplyProperty(Material material)
		{
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0xADFED8", Offset = "0xADFED8", VA = "0xADFED8")]
		public MaterialPropertyColorData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027A")]
	public class MaterialPropertyFloatData : MaterialPropertyData
	{
		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float value;

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xADFF14", Offset = "0xADFF14", VA = "0xADFF14", Slot = "12")]
		protected override void DoApplyProperty(Material material)
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xADFF40", Offset = "0xADFF40", VA = "0xADFF40")]
		public MaterialPropertyFloatData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027B")]
	public class MaterialPropertyIntData : MaterialPropertyData
	{
		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int value;

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xADFF48", Offset = "0xADFF48", VA = "0xADFF48", Slot = "12")]
		protected override void DoApplyProperty(Material material)
		{
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0xADFF74", Offset = "0xADFF74", VA = "0xADFF74")]
		public MaterialPropertyIntData()
		{
		}
	}
}
namespace LuxWater
{
	[Token(Token = "0x200027C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D75E4", Offset = "0x7D75E4")]
	public class LuxWater_CameraDepthMode : MonoBehaviour
	{
		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool GrabDepthTexture;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera cam;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material CopyDepthMat;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTextureFormat format;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, CommandBuffer> m_cmdBuffer;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool CamCallBackAdded;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[HideInInspector]
		public bool ShowShaderWarning;

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xA5DF14", Offset = "0xA5DF14", VA = "0xA5DF14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0xA5E0AC", Offset = "0xA5E0AC", VA = "0xA5E0AC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0xA5E2A8", Offset = "0xA5E2A8", VA = "0xA5E2A8")]
		private void OnPrecull(Camera camera)
		{
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0xA5E5FC", Offset = "0xA5E5FC", VA = "0xA5E5FC")]
		public LuxWater_CameraDepthMode()
		{
		}
	}
	[Token(Token = "0x200027D")]
	public class LuxWater_HelpBtn : PropertyAttribute
	{
		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string URL;

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0xA5E674", Offset = "0xA5E674", VA = "0xA5E674")]
		public LuxWater_HelpBtn(string URL)
		{
		}
	}
	[Token(Token = "0x200027E")]
	public class LuxWater_InfiniteOcean : MonoBehaviour
	{
		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE834", Offset = "0x7DE834")]
		[AttributeAttribute(Name = "LuxWater_HelpBtn", RVA = "0x7DE834", Offset = "0x7DE834")]
		public Camera MainCam;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float GridSize;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform trans;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform camTrans;

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0xA5E6A0", Offset = "0xA5E6A0", VA = "0xA5E6A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0xA5E6F8", Offset = "0xA5E6F8", VA = "0xA5E6F8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0xA5E9E0", Offset = "0xA5E9E0", VA = "0xA5E9E0")]
		public LuxWater_InfiniteOcean()
		{
		}
	}
	[Token(Token = "0x200027F")]
	[ExecuteInEditMode]
	public class LuxWater_PlanarReflection : MonoBehaviour
	{
		[Token(Token = "0x200046B")]
		public enum ReflectionResolution
		{
			[Token(Token = "0x4002212")]
			Full = 1,
			[Token(Token = "0x4002213")]
			Half = 2,
			[Token(Token = "0x4002214")]
			Quarter = 4,
			[Token(Token = "0x4002215")]
			Eighth = 8
		}

		[Token(Token = "0x200046C")]
		public enum NumberOfShadowCascades
		{
			[Token(Token = "0x4002217")]
			One = 1,
			[Token(Token = "0x4002218")]
			Two = 2,
			[Token(Token = "0x4002219")]
			Four = 4
		}

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE884", Offset = "0x7DE884")]
		[AttributeAttribute(Name = "LuxWater_HelpBtn", RVA = "0x7DE884", Offset = "0x7DE884")]
		public bool UpdateSceneView;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE8D4", Offset = "0x7DE8D4")]
		public bool isMaster;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] WaterMaterials;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE8E8", Offset = "0x7DE8E8")]
		public LayerMask reflectionMask;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ReflectionResolution Resolution;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color clearColor;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool reflectSkybox;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE8FC", Offset = "0x7DE8FC")]
		public bool disablePixelLights;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE910", Offset = "0x7DE910")]
		public bool renderShadows;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float shadowDistance;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public NumberOfShadowCascades ShadowCascades;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE924", Offset = "0x7DE924")]
		public float WaterSurfaceOffset;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float clipPlaneOffset;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string reflectionSampler;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material m_SharedMaterial;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RenderTexture m_reflectionMap;

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0xA5E9F0", Offset = "0xA5E9F0", VA = "0xA5E9F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0xA5EAE8", Offset = "0xA5EAE8", VA = "0xA5EAE8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0xA5EBD8", Offset = "0xA5EBD8", VA = "0xA5EBD8")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0xA5EF04", Offset = "0xA5EF04", VA = "0xA5EF04")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0xA5EFC0", Offset = "0xA5EFC0", VA = "0xA5EFC0")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0xA5F0CC", Offset = "0xA5F0CC", VA = "0xA5F0CC")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0xA5F91C", Offset = "0xA5F91C", VA = "0xA5F91C")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0xA5F97C", Offset = "0xA5F97C", VA = "0xA5F97C")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0xA5FA7C", Offset = "0xA5FA7C", VA = "0xA5FA7C")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0xA5F264", Offset = "0xA5F264", VA = "0xA5F264")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0xA5FAB4", Offset = "0xA5FAB4", VA = "0xA5FAB4")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0xA5FFC8", Offset = "0xA5FFC8", VA = "0xA5FFC8")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0xA5FB1C", Offset = "0xA5FB1C", VA = "0xA5FB1C")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0xA60210", Offset = "0xA60210", VA = "0xA60210")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0xA5FDE0", Offset = "0xA5FDE0", VA = "0xA5FDE0")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0xA60230", Offset = "0xA60230", VA = "0xA60230")]
		public LuxWater_PlanarReflection()
		{
		}
	}
	[Token(Token = "0x2000280")]
	[ExecuteInEditMode]
	public class LuxWater_PlanarWaterTile : MonoBehaviour
	{
		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE938", Offset = "0x7DE938")]
		[AttributeAttribute(Name = "LuxWater_HelpBtn", RVA = "0x7DE938", Offset = "0x7DE938")]
		public LuxWater_PlanarReflection reflection;

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0xA602CC", Offset = "0xA602CC", VA = "0xA602CC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0xA602D0", Offset = "0xA602D0", VA = "0xA602D0")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0xA603CC", Offset = "0xA603CC", VA = "0xA603CC")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0xA6047C", Offset = "0xA6047C", VA = "0xA6047C")]
		public LuxWater_PlanarWaterTile()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class LuxWater_Projector : MonoBehaviour
	{
		[Token(Token = "0x200046D")]
		public enum ProjectorType
		{
			[Token(Token = "0x400221B")]
			FoamProjector,
			[Token(Token = "0x400221C")]
			NormalProjector
		}

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE988", Offset = "0x7DE988")]
		public ProjectorType Type;

		[NonSerialized]
		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<LuxWater_Projector> FoamProjectors;

		[NonSerialized]
		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<LuxWater_Projector> NormalProjectors;

		[NonSerialized]
		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer m_Rend;

		[NonSerialized]
		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material m_Mat;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool added;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 origPos;

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0xA60484", Offset = "0xA60484", VA = "0xA60484")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0xA604A8", Offset = "0xA604A8", VA = "0xA604A8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0xA6062C", Offset = "0xA6062C", VA = "0xA6062C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0xA60704", Offset = "0xA60704", VA = "0xA60704")]
		public LuxWater_Projector()
		{
		}
	}
	[Token(Token = "0x2000282")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7678", Offset = "0x7D7678")]
	[ExecuteInEditMode]
	public class LuxWater_ProjectorRenderer : MonoBehaviour
	{
		[Token(Token = "0x200046E")]
		public enum BufferResolution
		{
			[Token(Token = "0x400221E")]
			Full = 1,
			[Token(Token = "0x400221F")]
			Half = 2,
			[Token(Token = "0x4002220")]
			Quarter = 4,
			[Token(Token = "0x4002221")]
			Eighth = 8
		}

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE99C", Offset = "0x7DE99C")]
		public BufferResolution FoamBufferResolution;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public BufferResolution NormalBufferResolution;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE9B0", Offset = "0x7DE9B0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DE9B0", Offset = "0x7DE9B0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DE9B0", Offset = "0x7DE9B0")]
		public bool DebugFoamBuffer;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool DebugNormalBuffer;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool DebugStats;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int drawnFoamProjectors;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int drawnNormalProjectors;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CommandBuffer cb_Foam;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static CommandBuffer cb_Normals;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera cam;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform camTransform;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture ProjectedFoam;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture ProjectedNormals;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Texture2D defaultBump;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Bounds tempBounds;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int _LuxWater_FoamOverlayPID;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _LuxWater_NormalOverlayPID;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Plane[] frustumPlanes;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material DebugMat;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material DebugNormalMat;

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0xA607A8", Offset = "0xA607A8", VA = "0xA607A8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0xA608B4", Offset = "0xA608B4", VA = "0xA608B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0xA60B20", Offset = "0xA60B20", VA = "0xA60B20")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0xA61438", Offset = "0xA61438", VA = "0xA61438")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0xA61768", Offset = "0xA61768", VA = "0xA61768")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0xA61B3C", Offset = "0xA61B3C", VA = "0xA61B3C")]
		public LuxWater_ProjectorRenderer()
		{
		}
	}
	[Token(Token = "0x2000283")]
	public static class GeomUtil
	{
		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Action<Plane[], Matrix4x4> _calculateFrustumPlanes_Imp;

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0xA5DC58", Offset = "0xA5DC58", VA = "0xA5DC58")]
		public static void CalculateFrustumPlanes(Plane[] planes, Matrix4x4 worldToProjectMatrix)
		{
		}
	}
	[Token(Token = "0x2000284")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D76EC", Offset = "0x7D76EC")]
	public class LuxWater_UnderWaterBlur : MonoBehaviour
	{
		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEA14", Offset = "0x7DEA14")]
		[AttributeAttribute(Name = "LuxWater_HelpBtn", RVA = "0x7DEA14", Offset = "0x7DEA14")]
		public float blurSpread;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int blurDownSample;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int blurIterations;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2[] m_offsets;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material blurMaterial;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material blitMaterial;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LuxWater_UnderWaterRendering waterrendermanager;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool doBlur;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool initBlur;

		[Token(Token = "0x6001A60")]
		[Address(RVA = "0xA61F4C", Offset = "0xA61F4C", VA = "0xA61F4C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0xA62024", Offset = "0xA62024", VA = "0xA62024")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0xA62128", Offset = "0xA62128", VA = "0xA62128")]
		private void GetWaterrendermanagerInstance()
		{
		}

		[Token(Token = "0x6001A63")]
		[Address(RVA = "0xA62180", Offset = "0xA62180", VA = "0xA62180")]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0xA62528", Offset = "0xA62528", VA = "0xA62528")]
		private void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0xA623B0", Offset = "0xA623B0", VA = "0xA623B0")]
		private void DownSample(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0xA626A4", Offset = "0xA626A4", VA = "0xA626A4")]
		public LuxWater_UnderWaterBlur()
		{
		}
	}
	[Token(Token = "0x2000285")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7750", Offset = "0x7D7750")]
	public class LuxWater_UnderWaterRendering : MonoBehaviour
	{
		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static LuxWater_UnderWaterRendering instance;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEA64", Offset = "0x7DEA64")]
		[AttributeAttribute(Name = "LuxWater_HelpBtn", RVA = "0x7DEA64", Offset = "0x7DEA64")]
		public Transform Sun;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEAB4", Offset = "0x7DEAB4")]
		public bool FindSunOnEnable;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string SunGoName;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string SunTagName;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Light SunLight;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEAC8", Offset = "0x7DEAC8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DEAC8", Offset = "0x7DEAC8")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEAC8", Offset = "0x7DEAC8")]
		public bool EnableDeepwaterLighting;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float DefaultWaterSurfacePosition;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float DirectionalLightingFadeRange;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float FogLightingFadeRange;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEB2C", Offset = "0x7DEB2C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DEB2C", Offset = "0x7DEB2C")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEB2C", Offset = "0x7DEB2C")]
		public bool EnableAdvancedDeferredFog;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float FogDepthShift;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float FogEdgeBlending;

		[NonSerialized]
		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEB90", Offset = "0x7DEB90")]
		public int activeWaterVolume;

		[NonSerialized]
		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Camera> activeWaterVolumeCameras;

		[NonSerialized]
		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float activeGridSize;

		[NonSerialized]
		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float WaterSurfacePos;

		[NonSerialized]
		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEBA4", Offset = "0x7DEBA4")]
		public List<int> RegisteredWaterVolumesIDs;

		[NonSerialized]
		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<LuxWater_WaterVolume> RegisteredWaterVolumes;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Mesh> WaterMeshes;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Transform> WaterTransforms;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<Material> WaterMaterials;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<bool> WaterIsOnScreen;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<bool> WaterUsesSlidingVolume;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RenderTexture UnderWaterMask;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEBB8", Offset = "0x7DEBB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DEBB8", Offset = "0x7DEBB8")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEBB8", Offset = "0x7DEBB8")]
		public List<Material> m_aboveWatersurface;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<Material> m_belowWatersurface;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEC1C", Offset = "0x7DEC1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DEC1C", Offset = "0x7DEC1C")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEC1C", Offset = "0x7DEC1C")]
		public ShaderVariantCollection PrewarmedShaders;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int ListCapacity;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEC80", Offset = "0x7DEC80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DEC80", Offset = "0x7DEC80")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEC80", Offset = "0x7DEC80")]
		public bool enableDebug;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DECE4", Offset = "0x7DECE4")]
		private Material mat;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material blurMaterial;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material blitMaterial;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Camera cam;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool UnderwaterIsSetUp;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform camTransform;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Matrix4x4 frustumCornersArray;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private SphericalHarmonicsL2 ambientProbe;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Vector3[] directions;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Color[] AmbientLightingSamples;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool DoUnderWaterRendering;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private Matrix4x4 camProj;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Vector3[] frustumCorners;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private float Projection;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private bool islinear;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Matrix4x4 WatervolumeMatrix;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private int UnderWaterMaskPID;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private int Lux_FrustumCornersWSPID;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private int Lux_CameraWSPID;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private int GerstnerEnabledPID;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private int LuxWaterMask_GerstnerVertexIntensityPID;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private int GerstnerVertexIntensityPID;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private int LuxWaterMask_GAmplitudePID;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private int GAmplitudePID;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private int LuxWaterMask_GFinalFrequencyPID;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		private int GFinalFrequencyPID;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private int LuxWaterMask_GSteepnessPID;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		private int GSteepnessPID;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private int LuxWaterMask_GFinalSpeedPID;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		private int GFinalSpeedPID;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private int LuxWaterMask_GDirectionABPID;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		private int GDirectionABPID;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private int LuxWaterMask_GDirectionCDPID;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private int GDirectionCDPID;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private int LuxWaterMask_GerstnerSecondaryWaves;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		private int GerstnerSecondaryWaves;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private int Lux_UnderWaterAmbientSkyLightPID;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private int Lux_UnderWaterSunColorPID;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private int Lux_UnderWaterSunDirPID;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		private int Lux_UnderWaterSunDirViewSpacePID;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private int Lux_EdgeLengthPID;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private int Lux_CausticsEnabledPID;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private int Lux_CausticModePID;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
		private int Lux_UnderWaterFogColorPID;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private int Lux_UnderWaterFogDensityPID;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		private int Lux_UnderWaterFogAbsorptionCancellationPID;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private int Lux_UnderWaterAbsorptionHeightPID;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		private int Lux_UnderWaterAbsorptionMaxHeightPID;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private int Lux_MaxDirLightDepthPID;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		private int Lux_MaxFogLightDepthPID;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private int Lux_UnderWaterAbsorptionDepthPID;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		private int Lux_UnderWaterAbsorptionColorStrengthPID;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private int Lux_UnderWaterAbsorptionStrengthPID;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		private int Lux_UnderWaterUnderwaterScatteringPowerPID;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private int Lux_UnderWaterUnderwaterScatteringIntensityPID;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		private int Lux_UnderWaterUnderwaterScatteringColorPID;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private int Lux_UnderWaterUnderwaterScatteringOcclusionPID;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
		private int Lux_UnderWaterCausticsPID;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private int Lux_UnderWaterDeferredFogParams;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
		private int CausticTexPID;

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0xA62724", Offset = "0xA62724", VA = "0xA62724")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0xA630E0", Offset = "0xA630E0", VA = "0xA630E0")]
		private void CleanUp()
		{
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0xA632D0", Offset = "0xA632D0", VA = "0xA632D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0xA632D4", Offset = "0xA632D4", VA = "0xA632D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A6B")]
		[Address(RVA = "0xA632D8", Offset = "0xA632D8", VA = "0xA632D8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0xA63034", Offset = "0xA63034", VA = "0xA63034")]
		public void SetDeferredFogParams()
		{
		}

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0xA62F74", Offset = "0xA62F74", VA = "0xA62F74")]
		public void SetDeepwaterLighting()
		{
		}

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0xA632FC", Offset = "0xA632FC", VA = "0xA632FC")]
		public void RegisterWaterVolume(LuxWater_WaterVolume item, int ID, bool visible, bool SlidingVolume)
		{
		}

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0xA6382C", Offset = "0xA6382C", VA = "0xA6382C")]
		public void DeRegisterWaterVolume(LuxWater_WaterVolume item, int ID)
		{
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0xA63968", Offset = "0xA63968", VA = "0xA63968")]
		public void SetWaterVisible(int ID)
		{
		}

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0xA639FC", Offset = "0xA639FC", VA = "0xA639FC")]
		public void SetWaterInvisible(int ID)
		{
		}

		[Token(Token = "0x6001A72")]
		[Address(RVA = "0xA63A90", Offset = "0xA63A90", VA = "0xA63A90")]
		public void EnteredWaterVolume(LuxWater_WaterVolume item, int ID, Camera triggerCam, float GridSize)
		{
		}

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0xA63C5C", Offset = "0xA63C5C", VA = "0xA63C5C")]
		public void LeftWaterVolume(LuxWater_WaterVolume item, int ID, Camera triggerCam)
		{
		}

		[Token(Token = "0x6001A74")]
		[Address(RVA = "0xA63DD8", Offset = "0xA63DD8", VA = "0xA63DD8")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6001A75")]
		[Address(RVA = "0xA64CAC", Offset = "0xA64CAC", VA = "0xA64CAC")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x6001A76")]
		[Address(RVA = "0xA634BC", Offset = "0xA634BC", VA = "0xA634BC")]
		public void SetGerstnerWaves(int index)
		{
		}

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0xA63E04", Offset = "0xA63E04", VA = "0xA63E04")]
		public void RenderWaterMask(Camera currentCamera, bool SecondaryCameraRendering)
		{
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0xA64CB8", Offset = "0xA64CB8", VA = "0xA64CB8")]
		public void RenderUnderWater(RenderTexture src, RenderTexture dest, Camera currentCamera, bool SecondaryCameraRendering)
		{
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0xA65854", Offset = "0xA65854", VA = "0xA65854")]
		public LuxWater_UnderWaterRendering()
		{
		}
	}
	[Token(Token = "0x2000286")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D77B4", Offset = "0x7D77B4")]
	public class LuxWater_UnderwaterRenderingSlave : MonoBehaviour
	{
		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LuxWater_UnderWaterRendering waterrendermanager;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool readyToGo;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera cam;

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0xA65B34", Offset = "0xA65B34", VA = "0xA65B34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0xA65BA4", Offset = "0xA65BA4", VA = "0xA65BA4")]
		private void GetWaterrendermanager()
		{
		}

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0xA65C38", Offset = "0xA65C38", VA = "0xA65C38")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0xA65C6C", Offset = "0xA65C6C", VA = "0xA65C6C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0xA65D1C", Offset = "0xA65D1C", VA = "0xA65D1C")]
		public LuxWater_UnderwaterRenderingSlave()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class LuxWater_WaterVolume : MonoBehaviour
	{
		[Token(Token = "0x200046F")]
		public delegate void TriggerEnter();

		[Token(Token = "0x2000470")]
		public delegate void TriggerExit();

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DED18", Offset = "0x7DED18")]
		[AttributeAttribute(Name = "LuxWater_HelpBtn", RVA = "0x7DED18", Offset = "0x7DED18")]
		public Mesh WaterVolumeMesh;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DED68", Offset = "0x7DED68")]
		public bool SlidingVolume;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float GridSize;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LuxWater_UnderWaterRendering waterrendermanager;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool readyToGo;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int ID;

		[Token(Token = "0x14000021")]
		public static event TriggerEnter OnEnterWaterVolume
		{
			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0xA65D24", Offset = "0xA65D24", VA = "0xA65D24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2300", Offset = "0x7E2300")]
			add
			{
			}
			[Token(Token = "0x6001A80")]
			[Address(RVA = "0xA65DD8", Offset = "0xA65DD8", VA = "0xA65DD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2310", Offset = "0x7E2310")]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public static event TriggerExit OnExitWaterVolume
		{
			[Token(Token = "0x6001A81")]
			[Address(RVA = "0xA65E8C", Offset = "0xA65E8C", VA = "0xA65E8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2320", Offset = "0x7E2320")]
			add
			{
			}
			[Token(Token = "0x6001A82")]
			[Address(RVA = "0xA65F44", Offset = "0xA65F44", VA = "0xA65F44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2330", Offset = "0x7E2330")]
			remove
			{
			}
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0xA65FFC", Offset = "0xA65FFC", VA = "0xA65FFC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0xA66168", Offset = "0xA66168", VA = "0xA66168")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0xA66228", Offset = "0xA66228", VA = "0xA66228")]
		private void Register()
		{
		}

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0xA66344", Offset = "0xA66344", VA = "0xA66344")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0xA66374", Offset = "0xA66374", VA = "0xA66374")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0xA663A4", Offset = "0xA663A4", VA = "0xA663A4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0xA666EC", Offset = "0xA666EC", VA = "0xA666EC")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0xA667FC", Offset = "0xA667FC", VA = "0xA667FC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0xA66B40", Offset = "0xA66B40", VA = "0xA66B40")]
		public LuxWater_WaterVolume()
		{
		}
	}
	[Token(Token = "0x2000288")]
	public class LuxWater_WaterVolumeTrigger : MonoBehaviour
	{
		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DED7C", Offset = "0x7DED7C")]
		[AttributeAttribute(Name = "LuxWater_HelpBtn", RVA = "0x7DED7C", Offset = "0x7DED7C")]
		public Camera cam;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool active;

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0xA66BF0", Offset = "0xA66BF0", VA = "0xA66BF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0xA66CC4", Offset = "0xA66CC4", VA = "0xA66CC4")]
		public LuxWater_WaterVolumeTrigger()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class LuxWater_SetMeshBounds : MonoBehaviour
	{
		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DEDCC", Offset = "0x7DEDCC")]
		[AttributeAttribute(Name = "LuxWater_HelpBtn", RVA = "0x7DEDCC", Offset = "0x7DEDCC")]
		public float Expand_XZ;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Expand_Y;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer rend;

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0xA61BA4", Offset = "0xA61BA4", VA = "0xA61BA4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0xA61C9C", Offset = "0xA61C9C", VA = "0xA61C9C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0xA61D08", Offset = "0xA61D08", VA = "0xA61D08")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0xA61E00", Offset = "0xA61E00", VA = "0xA61E00")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0xA61F44", Offset = "0xA61F44", VA = "0xA61F44")]
		public LuxWater_SetMeshBounds()
		{
		}
	}
}
namespace LuxWater.Demo
{
	[Token(Token = "0x200028A")]
	public class LuxWater_ExtendedFlycam : MonoBehaviour
	{
		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float cameraSensitivity;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float climbSpeed;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float normalMoveSpeed;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slowMoveFactor;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fastMoveFactor;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float rotationX;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float rotationY;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool isOrtho;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Camera cam;

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0xA5D23C", Offset = "0xA5D23C", VA = "0xA5D23C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0xA5D304", Offset = "0xA5D304", VA = "0xA5D304")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0xA5DC3C", Offset = "0xA5DC3C", VA = "0xA5DC3C")]
		public LuxWater_ExtendedFlycam()
		{
		}
	}
}
namespace Unity.IO.Compression
{
	[Token(Token = "0x200028B")]
	internal enum BlockType
	{
		[Token(Token = "0x400103B")]
		Uncompressed,
		[Token(Token = "0x400103C")]
		Static,
		[Token(Token = "0x400103D")]
		Dynamic
	}
	[Token(Token = "0x200028C")]
	public enum CompressionMode
	{
		[Token(Token = "0x400103F")]
		Decompress,
		[Token(Token = "0x4001040")]
		Compress
	}
	[Token(Token = "0x200028D")]
	internal class CopyEncoder
	{
		[Token(Token = "0x4001041")]
		private const int PaddingSize = 5;

		[Token(Token = "0x4001042")]
		private const int MaxUncompressedBlockSize = 65536;

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0xA7B1E8", Offset = "0xA7B1E8", VA = "0xA7B1E8")]
		public void GetBlock(DeflateInput input, OutputBuffer output, bool isFinal)
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0xA7B4D8", Offset = "0xA7B4D8", VA = "0xA7B4D8")]
		private void WriteLenNLen(ushort len, OutputBuffer output)
		{
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0xA7B610", Offset = "0xA7B610", VA = "0xA7B610")]
		public CopyEncoder()
		{
		}
	}
	[Token(Token = "0x200028E")]
	internal static class Crc32Helper
	{
		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] crcTable;

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0xA7B618", Offset = "0xA7B618", VA = "0xA7B618")]
		public static uint UpdateCrc32(uint crc32, byte[] buffer, int offset, int length)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x200028F")]
	internal class DeflateInput
	{
		[Token(Token = "0x2000471")]
		internal struct InputState
		{
			[Token(Token = "0x4002222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int count;

			[Token(Token = "0x4002223")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal int startIndex;
		}

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] buffer;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int count;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int startIndex;

		[Token(Token = "0x17000287")]
		internal byte[] Buffer
		{
			[Token(Token = "0x6001A9B")]
			[Address(RVA = "0xA7B78C", Offset = "0xA7B78C", VA = "0xA7B78C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A9C")]
			[Address(RVA = "0xA7B794", Offset = "0xA7B794", VA = "0xA7B794")]
			set
			{
			}
		}

		[Token(Token = "0x17000288")]
		internal int Count
		{
			[Token(Token = "0x6001A9D")]
			[Address(RVA = "0xA7B79C", Offset = "0xA7B79C", VA = "0xA7B79C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A9E")]
			[Address(RVA = "0xA7B7A4", Offset = "0xA7B7A4", VA = "0xA7B7A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000289")]
		internal int StartIndex
		{
			[Token(Token = "0x6001A9F")]
			[Address(RVA = "0xA7B7AC", Offset = "0xA7B7AC", VA = "0xA7B7AC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001AA0")]
			[Address(RVA = "0xA7B7B4", Offset = "0xA7B7B4", VA = "0xA7B7B4")]
			set
			{
			}
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0xA7B580", Offset = "0xA7B580", VA = "0xA7B580")]
		internal void ConsumeBytes(int n)
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0xA7B7BC", Offset = "0xA7B7BC", VA = "0xA7B7BC")]
		internal InputState DumpState()
		{
			return default(InputState);
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0xA7B7C4", Offset = "0xA7B7C4", VA = "0xA7B7C4")]
		internal void RestoreState(InputState state)
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0xA7B7D0", Offset = "0xA7B7D0", VA = "0xA7B7D0")]
		public DeflateInput()
		{
		}
	}
	[Token(Token = "0x2000290")]
	internal class DeflaterManaged : IDeflater, IDisposable
	{
		[Token(Token = "0x2000472")]
		private enum DeflaterState
		{
			[Token(Token = "0x4002225")]
			NotStarted,
			[Token(Token = "0x4002226")]
			SlowDownForIncompressible1,
			[Token(Token = "0x4002227")]
			SlowDownForIncompressible2,
			[Token(Token = "0x4002228")]
			StartingSmallData,
			[Token(Token = "0x4002229")]
			CompressThenCheck,
			[Token(Token = "0x400222A")]
			CheckingForIncompressible,
			[Token(Token = "0x400222B")]
			HandlingSmallData
		}

		[Token(Token = "0x4001047")]
		private const int MinBlockSize = 256;

		[Token(Token = "0x4001048")]
		private const int MaxHeaderFooterGoo = 120;

		[Token(Token = "0x4001049")]
		private const int CleanCopySize = 8072;

		[Token(Token = "0x400104A")]
		private const double BadCompressionThreshold = 1.0;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FastEncoder deflateEncoder;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CopyEncoder copyEncoder;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DeflateInput input;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OutputBuffer output;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DeflaterState processingState;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DeflateInput inputFromHistory;

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0xA7BBB0", Offset = "0xA7BBB0", VA = "0xA7BBB0")]
		internal DeflaterManaged()
		{
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0xA7E5B4", Offset = "0xA7E5B4", VA = "0xA7E5B4")]
		private bool NeedsInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xA7E658", Offset = "0xA7E658", VA = "0xA7E658", Slot = "4")]
		private bool Unity.IO.Compression.IDeflater.NeedsInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xA7E6C8", Offset = "0xA7E6C8", VA = "0xA7E6C8", Slot = "5")]
		private void Unity.IO.Compression.IDeflater.SetInput(byte[] inputBuffer, int startIndex, int count)
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xA7E738", Offset = "0xA7E738", VA = "0xA7E738", Slot = "6")]
		private int Unity.IO.Compression.IDeflater.GetDeflateOutput(byte[] outputBuffer)
		{
			return default(int);
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xA7EA88", Offset = "0xA7EA88", VA = "0xA7EA88", Slot = "7")]
		private bool Unity.IO.Compression.IDeflater.Finish(byte[] outputBuffer, out int bytesRead)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xA7EB3C", Offset = "0xA7EB3C", VA = "0xA7EB3C", Slot = "8")]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xA7EB40", Offset = "0xA7EB40", VA = "0xA7EB40")]
		protected void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xA7E9CC", Offset = "0xA7E9CC", VA = "0xA7E9CC")]
		private bool UseCompressed(double ratio)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0xA7E9EC", Offset = "0xA7E9EC", VA = "0xA7E9EC")]
		private void FlushInputWindows()
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xA7EB14", Offset = "0xA7EB14", VA = "0xA7EB14")]
		private void WriteFinal()
		{
		}
	}
	[Token(Token = "0x2000291")]
	public class DeflateStream : Stream
	{
		[Token(Token = "0x2000473")]
		internal delegate void AsyncWriteDelegate(byte[] array, int offset, int count, bool isAsync);

		[Token(Token = "0x2000474")]
		private enum WorkerType : byte
		{
			[Token(Token = "0x400222D")]
			Managed,
			[Token(Token = "0x400222E")]
			Unknown
		}

		[Token(Token = "0x4001051")]
		internal const int DefaultBufferSize = 8192;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stream _stream;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CompressionMode _mode;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool _leaveOpen;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Inflater inflater;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IDeflater deflater;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] buffer;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int asyncOperations;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly AsyncCallback m_CallBack;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly AsyncWriteDelegate m_AsyncWriterDelegate;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IFileFormatWriter formatWriter;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool wroteHeader;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool wroteBytes;

		[Token(Token = "0x1700028A")]
		public Stream BaseStream
		{
			[Token(Token = "0x6001AB6")]
			[Address(RVA = "0xA7BCCC", Offset = "0xA7BCCC", VA = "0xA7BCCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028B")]
		public override bool CanRead
		{
			[Token(Token = "0x6001AB7")]
			[Address(RVA = "0xA7BCD4", Offset = "0xA7BCD4", VA = "0xA7BCD4", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028C")]
		public override bool CanWrite
		{
			[Token(Token = "0x6001AB8")]
			[Address(RVA = "0xA7BCFC", Offset = "0xA7BCFC", VA = "0xA7BCFC", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028D")]
		public override bool CanSeek
		{
			[Token(Token = "0x6001AB9")]
			[Address(RVA = "0xA7BD28", Offset = "0xA7BD28", VA = "0xA7BD28", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028E")]
		public override long Length
		{
			[Token(Token = "0x6001ABA")]
			[Address(RVA = "0xA7BD30", Offset = "0xA7BD30", VA = "0xA7BD30", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700028F")]
		public override long Position
		{
			[Token(Token = "0x6001ABB")]
			[Address(RVA = "0xA7BDA4", Offset = "0xA7BDA4", VA = "0xA7BDA4", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6001ABC")]
			[Address(RVA = "0xA7BE18", Offset = "0xA7BE18", VA = "0xA7BE18", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0xA7B7D8", Offset = "0xA7B7D8", VA = "0xA7B7D8")]
		public DeflateStream(Stream stream, CompressionMode mode)
		{
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0xA7B7E0", Offset = "0xA7B7E0", VA = "0xA7B7E0")]
		public DeflateStream(Stream stream, CompressionMode mode, bool leaveOpen)
		{
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0xA7BB40", Offset = "0xA7BB40", VA = "0xA7BB40")]
		private static IDeflater CreateDeflater()
		{
			return null;
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0xA7BBA8", Offset = "0xA7BBA8", VA = "0xA7BBA8")]
		[SecuritySafeCritical]
		private static WorkerType GetDeflaterType()
		{
			return default(WorkerType);
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0xA7BC7C", Offset = "0xA7BC7C", VA = "0xA7BC7C")]
		internal void SetFileFormatReader(IFileFormatReader reader)
		{
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0xA7BCC0", Offset = "0xA7BCC0", VA = "0xA7BCC0")]
		internal void SetFileFormatWriter(IFileFormatWriter writer)
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0xA7BE8C", Offset = "0xA7BE8C", VA = "0xA7BE8C", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xA7BF20", Offset = "0xA7BF20", VA = "0xA7BF20", Slot = "24")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0xA7BF94", Offset = "0xA7BF94", VA = "0xA7BF94", Slot = "25")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0xA7C008", Offset = "0xA7C008", VA = "0xA7C008", Slot = "26")]
		public override int Read(byte[] array, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0xA7C18C", Offset = "0xA7C18C", VA = "0xA7C18C")]
		private void ValidateParameters(byte[] array, int offset, int count)
		{
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0xA7BE90", Offset = "0xA7BE90", VA = "0xA7BE90")]
		private void EnsureNotDisposed()
		{
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0xA7C100", Offset = "0xA7C100", VA = "0xA7C100")]
		private void EnsureDecompressionMode()
		{
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0xA7C4D8", Offset = "0xA7C4D8", VA = "0xA7C4D8")]
		private void EnsureCompressionMode()
		{
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0xA7C568", Offset = "0xA7C568", VA = "0xA7C568", Slot = "18")]
		public override IAsyncResult BeginRead(byte[] array, int offset, int count, AsyncCallback asyncCallback, object asyncState)
		{
			return null;
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0xA7C8D4", Offset = "0xA7C8D4", VA = "0xA7C8D4")]
		private void ReadCallback(IAsyncResult baseStreamResult)
		{
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0xA7CC34", Offset = "0xA7CC34", VA = "0xA7CC34", Slot = "19")]
		public override int EndRead(IAsyncResult asyncResult)
		{
			return default(int);
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0xA7CF58", Offset = "0xA7CF58", VA = "0xA7CF58", Slot = "28")]
		public override void Write(byte[] array, int offset, int count)
		{
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0xA7CFB8", Offset = "0xA7CFB8", VA = "0xA7CFB8")]
		internal void InternalWrite(byte[] array, int offset, int count, bool isAsync)
		{
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0xA7D27C", Offset = "0xA7D27C", VA = "0xA7D27C")]
		private void WriteDeflaterOutput(bool isAsync)
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0xA7D3F0", Offset = "0xA7D3F0", VA = "0xA7D3F0")]
		private void DoWrite(byte[] array, int offset, int count, bool isAsync)
		{
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0xA7D0C8", Offset = "0xA7D0C8", VA = "0xA7D0C8")]
		private void DoMaintenance(byte[] array, int offset, int count)
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0xA7D46C", Offset = "0xA7D46C", VA = "0xA7D46C")]
		private void PurgeBuffers(bool disposing)
		{
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0xA7D668", Offset = "0xA7D668", VA = "0xA7D668", Slot = "16")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0xA7D888", Offset = "0xA7D888", VA = "0xA7D888", Slot = "21")]
		public override IAsyncResult BeginWrite(byte[] array, int offset, int count, AsyncCallback asyncCallback, object asyncState)
		{
			return null;
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0xA7DB60", Offset = "0xA7DB60", VA = "0xA7DB60")]
		private void WriteCallback(IAsyncResult asyncResult)
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0xA7DD94", Offset = "0xA7DD94", VA = "0xA7DD94", Slot = "22")]
		public override void EndWrite(IAsyncResult asyncResult)
		{
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0xA7CD70", Offset = "0xA7CD70", VA = "0xA7CD70")]
		private void CheckEndXxxxLegalStateAndParams(IAsyncResult asyncResult)
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0xA7CE8C", Offset = "0xA7CE8C", VA = "0xA7CE8C")]
		private void AwaitAsyncResultCompletion(DeflateStreamAsyncResult asyncResult)
		{
		}
	}
	[Token(Token = "0x2000292")]
	internal class DeflateStreamAsyncResult : IAsyncResult
	{
		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] buffer;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int offset;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int count;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isWrite;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private object m_AsyncObject;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private object m_AsyncState;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncCallback m_AsyncCallback;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private object m_Result;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal bool m_CompletedSynchronously;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int m_InvokedCallback;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_Completed;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private object m_Event;

		[Token(Token = "0x17000290")]
		public object AsyncState
		{
			[Token(Token = "0x6001AD5")]
			[Address(RVA = "0xA7E434", Offset = "0xA7E434", VA = "0xA7E434", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000291")]
		public WaitHandle AsyncWaitHandle
		{
			[Token(Token = "0x6001AD6")]
			[Address(RVA = "0xA7DEA4", Offset = "0xA7DEA4", VA = "0xA7DEA4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000292")]
		public bool CompletedSynchronously
		{
			[Token(Token = "0x6001AD7")]
			[Address(RVA = "0xA7E43C", Offset = "0xA7E43C", VA = "0xA7E43C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000293")]
		public bool IsCompleted
		{
			[Token(Token = "0x6001AD8")]
			[Address(RVA = "0xA7C8C4", Offset = "0xA7C8C4", VA = "0xA7C8C4", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000294")]
		internal object Result
		{
			[Token(Token = "0x6001AD9")]
			[Address(RVA = "0xA7E444", Offset = "0xA7E444", VA = "0xA7E444")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0xA7C848", Offset = "0xA7C848", VA = "0xA7C848")]
		public DeflateStreamAsyncResult(object asyncObject, object asyncState, AsyncCallback asyncCallback, byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xA7DF8C", Offset = "0xA7DF8C", VA = "0xA7DF8C")]
		internal void Close()
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0xA7C8B4", Offset = "0xA7C8B4", VA = "0xA7C8B4")]
		internal void InvokeCallback(bool completedSynchronously, object result)
		{
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0xA7CC30", Offset = "0xA7CC30", VA = "0xA7CC30")]
		internal void InvokeCallback(object result)
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0xA7E44C", Offset = "0xA7E44C", VA = "0xA7E44C")]
		private void Complete(bool completedSynchronously, object result)
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0xA7E45C", Offset = "0xA7E45C", VA = "0xA7E45C")]
		private void Complete(object result)
		{
		}
	}
	[Token(Token = "0x2000293")]
	internal class FastEncoder
	{
		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FastEncoderWindow inputWindow;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Match currentMatch;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double lastCompressionRatio;

		[Token(Token = "0x17000295")]
		internal int BytesInHistory
		{
			[Token(Token = "0x6001AE0")]
			[Address(RVA = "0xA7E6A4", Offset = "0xA7E6A4", VA = "0xA7E6A4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000296")]
		internal DeflateInput UnprocessedInput
		{
			[Token(Token = "0x6001AE1")]
			[Address(RVA = "0xA7EA04", Offset = "0xA7EA04", VA = "0xA7EA04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000297")]
		internal double LastCompressionRatio
		{
			[Token(Token = "0x6001AE3")]
			[Address(RVA = "0xA7EC0C", Offset = "0xA7EC0C", VA = "0xA7EC0C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0xA7E518", Offset = "0xA7E518", VA = "0xA7E518")]
		public FastEncoder()
		{
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0xA7EA20", Offset = "0xA7EA20", VA = "0xA7EA20")]
		internal void FlushInput()
		{
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0xA7EA38", Offset = "0xA7EA38", VA = "0xA7EA38")]
		internal void GetBlock(DeflateInput input, OutputBuffer output, int maxBytesToCopy)
		{
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0xA7E9C4", Offset = "0xA7E9C4", VA = "0xA7E9C4")]
		internal void GetCompressedData(DeflateInput input, OutputBuffer output)
		{
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0xA7E9BC", Offset = "0xA7E9BC", VA = "0xA7E9BC")]
		internal void GetBlockHeader(OutputBuffer output)
		{
		}

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0xA7EA1C", Offset = "0xA7EA1C", VA = "0xA7EA1C")]
		internal void GetBlockFooter(OutputBuffer output)
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0xA7ECAC", Offset = "0xA7ECAC", VA = "0xA7ECAC")]
		private void GetCompressedOutput(DeflateInput input, OutputBuffer output, int maxBytesToCopy)
		{
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0xA7EF88", Offset = "0xA7EF88", VA = "0xA7EF88")]
		private void GetCompressedOutput(OutputBuffer output)
		{
		}

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0xA7F074", Offset = "0xA7F074", VA = "0xA7F074")]
		private bool InputAvailable(DeflateInput input)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0xA7F03C", Offset = "0xA7F03C", VA = "0xA7F03C")]
		private bool SafeToWriteTo(OutputBuffer output)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0xA7EE84", Offset = "0xA7EE84", VA = "0xA7EE84")]
		private void WriteEndOfBlock(OutputBuffer output)
		{
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0xA7F3BC", Offset = "0xA7F3BC", VA = "0xA7F3BC")]
		internal static void WriteMatch(int matchLen, int matchPos, OutputBuffer output)
		{
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0xA7F300", Offset = "0xA7F300", VA = "0xA7F300")]
		internal static void WriteChar(byte b, OutputBuffer output)
		{
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0xA7EC14", Offset = "0xA7EC14", VA = "0xA7EC14")]
		internal static void WriteDeflatePreamble(OutputBuffer output)
		{
		}
	}
	[Token(Token = "0x2000294")]
	internal static class FastEncoderStatics
	{
		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly byte[] FastEncoderTreeStructureData;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly byte[] BFinalFastEncoderTreeStructureData;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly uint[] FastEncoderLiteralCodeInfo;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly uint[] FastEncoderDistanceCodeInfo;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly uint[] BitMask;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal static readonly byte[] ExtraLengthBits;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal static readonly byte[] ExtraDistanceBits;

		[Token(Token = "0x4001074")]
		internal const int NumChars = 256;

		[Token(Token = "0x4001075")]
		internal const int NumLengthBaseCodes = 29;

		[Token(Token = "0x4001076")]
		internal const int NumDistBaseCodes = 30;

		[Token(Token = "0x4001077")]
		internal const uint FastEncoderPostTreeBitBuf = 34u;

		[Token(Token = "0x4001078")]
		internal const int FastEncoderPostTreeBitCount = 9;

		[Token(Token = "0x4001079")]
		internal const uint NoCompressionHeader = 0u;

		[Token(Token = "0x400107A")]
		internal const int NoCompressionHeaderBitCount = 3;

		[Token(Token = "0x400107B")]
		internal const uint BFinalNoCompressionHeader = 1u;

		[Token(Token = "0x400107C")]
		internal const int BFinalNoCompressionHeaderBitCount = 3;

		[Token(Token = "0x400107D")]
		internal const int MaxCodeLen = 16;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static byte[] distLookup;

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0xA7F614", Offset = "0xA7F614", VA = "0xA7F614")]
		static FastEncoderStatics()
		{
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0xA7F568", Offset = "0xA7F568", VA = "0xA7F568")]
		internal static int GetSlot(int pos)
		{
			return default(int);
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0xA7F914", Offset = "0xA7F914", VA = "0xA7F914")]
		public static uint BitReverse(uint code, int length)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000295")]
	internal class FastEncoderWindow
	{
		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] window;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int bufPos;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int bufEnd;

		[Token(Token = "0x4001082")]
		private const int FastEncoderHashShift = 4;

		[Token(Token = "0x4001083")]
		private const int FastEncoderHashtableSize = 2048;

		[Token(Token = "0x4001084")]
		private const int FastEncoderHashMask = 2047;

		[Token(Token = "0x4001085")]
		private const int FastEncoderWindowSize = 8192;

		[Token(Token = "0x4001086")]
		private const int FastEncoderWindowMask = 8191;

		[Token(Token = "0x4001087")]
		private const int FastEncoderMatch3DistThreshold = 16384;

		[Token(Token = "0x4001088")]
		internal const int MaxMatch = 258;

		[Token(Token = "0x4001089")]
		internal const int MinMatch = 3;

		[Token(Token = "0x400108A")]
		private const int SearchDepth = 32;

		[Token(Token = "0x400108B")]
		private const int GoodLength = 4;

		[Token(Token = "0x400108C")]
		private const int NiceLength = 32;

		[Token(Token = "0x400108D")]
		private const int LazyMatchThreshold = 6;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ushort[] prev;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ushort[] lookup;

		[Token(Token = "0x17000298")]
		public int BytesAvailable
		{
			[Token(Token = "0x6001AF4")]
			[Address(RVA = "0xA7EB74", Offset = "0xA7EB74", VA = "0xA7EB74")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000299")]
		public DeflateInput UnprocessedInput
		{
			[Token(Token = "0x6001AF5")]
			[Address(RVA = "0xA7EB80", Offset = "0xA7EB80", VA = "0xA7EB80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029A")]
		public int FreeWindowSpace
		{
			[Token(Token = "0x6001AF8")]
			[Address(RVA = "0xA7EF2C", Offset = "0xA7EF2C", VA = "0xA7EF2C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0xA7EB44", Offset = "0xA7EB44", VA = "0xA7EB44")]
		public FastEncoderWindow()
		{
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0xA7EC08", Offset = "0xA7EC08", VA = "0xA7EC08")]
		public void FlushWindow()
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0xA7F93C", Offset = "0xA7F93C", VA = "0xA7F93C")]
		private void ResetWindow()
		{
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0xA7EF3C", Offset = "0xA7EF3C", VA = "0xA7EF3C")]
		public void CopyBytes(byte[] inputBuffer, int startIndex, int count)
		{
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0xA7F9C4", Offset = "0xA7F9C4", VA = "0xA7F9C4")]
		public void MoveWindows()
		{
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0xA7FA9C", Offset = "0xA7FA9C", VA = "0xA7FA9C")]
		private uint HashValue(uint hash, byte b)
		{
			return default(uint);
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0xA7FAA8", Offset = "0xA7FAA8", VA = "0xA7FAA8")]
		private uint InsertString(ref uint hash)
		{
			return default(uint);
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0xA7FB50", Offset = "0xA7FB50", VA = "0xA7FB50")]
		private void InsertStrings(ref uint hash, int matchLen)
		{
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0xA7F0BC", Offset = "0xA7F0BC", VA = "0xA7F0BC")]
		internal bool GetNextSymbolOrMatch(Match match)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0xA7FBC4", Offset = "0xA7FBC4", VA = "0xA7FBC4")]
		private int FindMatch(int search, out int matchPos, int searchDepth, int niceLength)
		{
			return default(int);
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0xA7FD4C", Offset = "0xA7FD4C", VA = "0xA7FD4C")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7E2350", Offset = "0x7E2350")]
		private void VerifyHashes()
		{
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0xA7FDE4", Offset = "0xA7FDE4", VA = "0xA7FDE4")]
		private uint RecalculateHash(int position)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000296")]
	internal interface IFileFormatWriter
	{
		[Token(Token = "0x6001B02")]
		byte[] GetHeader();

		[Token(Token = "0x6001B03")]
		void UpdateWithBytesRead(byte[] buffer, int offset, int bytesToCopy);

		[Token(Token = "0x6001B04")]
		byte[] GetFooter();
	}
	[Token(Token = "0x2000297")]
	internal interface IFileFormatReader
	{
		[Token(Token = "0x6001B05")]
		bool ReadHeader(InputBuffer input);

		[Token(Token = "0x6001B06")]
		bool ReadFooter(InputBuffer input);

		[Token(Token = "0x6001B07")]
		void UpdateWithBytesRead(byte[] buffer, int offset, int bytesToCopy);

		[Token(Token = "0x6001B08")]
		void Validate();
	}
	[Token(Token = "0x2000298")]
	internal class GZipDecoder : IFileFormatReader
	{
		[Token(Token = "0x2000475")]
		internal enum GzipHeaderState
		{
			[Token(Token = "0x4002230")]
			ReadingID1,
			[Token(Token = "0x4002231")]
			ReadingID2,
			[Token(Token = "0x4002232")]
			ReadingCM,
			[Token(Token = "0x4002233")]
			ReadingFLG,
			[Token(Token = "0x4002234")]
			ReadingMMTime,
			[Token(Token = "0x4002235")]
			ReadingXFL,
			[Token(Token = "0x4002236")]
			ReadingOS,
			[Token(Token = "0x4002237")]
			ReadingXLen1,
			[Token(Token = "0x4002238")]
			ReadingXLen2,
			[Token(Token = "0x4002239")]
			ReadingXLenData,
			[Token(Token = "0x400223A")]
			ReadingFileName,
			[Token(Token = "0x400223B")]
			ReadingComment,
			[Token(Token = "0x400223C")]
			ReadingCRC16Part1,
			[Token(Token = "0x400223D")]
			ReadingCRC16Part2,
			[Token(Token = "0x400223E")]
			Done,
			[Token(Token = "0x400223F")]
			ReadingCRC,
			[Token(Token = "0x4002240")]
			ReadingFileSize
		}

		[Token(Token = "0x2000476")]
		[Flags]
		internal enum GZipOptionalHeaderFlags
		{
			[Token(Token = "0x4002242")]
			CRCFlag = 2,
			[Token(Token = "0x4002243")]
			ExtraFieldsFlag = 4,
			[Token(Token = "0x4002244")]
			FileNameFlag = 8,
			[Token(Token = "0x4002245")]
			CommentFlag = 0x10
		}

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GzipHeaderState gzipHeaderSubstate;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private GzipHeaderState gzipFooterSubstate;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int gzip_header_flag;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int gzip_header_xlen;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint expectedCrc32;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private uint expectedOutputStreamSizeModulo;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int loopCounter;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint actualCrc32;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long actualStreamSizeModulo;

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0xA7FE5C", Offset = "0xA7FE5C", VA = "0xA7FE5C")]
		public GZipDecoder()
		{
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0xA7FE8C", Offset = "0xA7FE8C", VA = "0xA7FE8C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0xA7FE9C", Offset = "0xA7FE9C", VA = "0xA7FE9C", Slot = "4")]
		public bool ReadHeader(InputBuffer input)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0xA80368", Offset = "0xA80368", VA = "0xA80368", Slot = "5")]
		public bool ReadFooter(InputBuffer input)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0xA804DC", Offset = "0xA804DC", VA = "0xA804DC", Slot = "6")]
		public void UpdateWithBytesRead(byte[] buffer, int offset, int copied)
		{
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0xA805A4", Offset = "0xA805A4", VA = "0xA805A4", Slot = "7")]
		public void Validate()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class GZipStream : Stream
	{
		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DeflateStream deflateStream;

		[Token(Token = "0x1700029B")]
		public override bool CanRead
		{
			[Token(Token = "0x6001B12")]
			[Address(RVA = "0xA80A98", Offset = "0xA80A98", VA = "0xA80A98", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029C")]
		public override bool CanWrite
		{
			[Token(Token = "0x6001B13")]
			[Address(RVA = "0xA80AB0", Offset = "0xA80AB0", VA = "0xA80AB0", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029D")]
		public override bool CanSeek
		{
			[Token(Token = "0x6001B14")]
			[Address(RVA = "0xA80AC8", Offset = "0xA80AC8", VA = "0xA80AC8", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029E")]
		public override long Length
		{
			[Token(Token = "0x6001B15")]
			[Address(RVA = "0xA80AE0", Offset = "0xA80AE0", VA = "0xA80AE0", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700029F")]
		public override long Position
		{
			[Token(Token = "0x6001B16")]
			[Address(RVA = "0xA80B54", Offset = "0xA80B54", VA = "0xA80B54", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6001B17")]
			[Address(RVA = "0xA80BC8", Offset = "0xA80BC8", VA = "0xA80BC8", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x170002A0")]
		public Stream BaseStream
		{
			[Token(Token = "0x6001B22")]
			[Address(RVA = "0xA812D4", Offset = "0xA812D4", VA = "0xA812D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0xA80900", Offset = "0xA80900", VA = "0xA80900")]
		public GZipStream(Stream stream, CompressionMode mode)
		{
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0xA80908", Offset = "0xA80908", VA = "0xA80908")]
		public GZipStream(Stream stream, CompressionMode mode, bool leaveOpen)
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0xA809C0", Offset = "0xA809C0", VA = "0xA809C0")]
		private void SetDeflateStreamFileFormatter(CompressionMode mode)
		{
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0xA80C3C", Offset = "0xA80C3C", VA = "0xA80C3C", Slot = "17")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0xA80CD8", Offset = "0xA80CD8", VA = "0xA80CD8", Slot = "24")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0xA80D4C", Offset = "0xA80D4C", VA = "0xA80D4C", Slot = "25")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0xA80DC0", Offset = "0xA80DC0", VA = "0xA80DC0", Slot = "18")]
		public override IAsyncResult BeginRead(byte[] array, int offset, int count, AsyncCallback asyncCallback, object asyncState)
		{
			return null;
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0xA80E98", Offset = "0xA80E98", VA = "0xA80E98", Slot = "19")]
		public override int EndRead(IAsyncResult asyncResult)
		{
			return default(int);
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0xA80F40", Offset = "0xA80F40", VA = "0xA80F40", Slot = "21")]
		public override IAsyncResult BeginWrite(byte[] array, int offset, int count, AsyncCallback asyncCallback, object asyncState)
		{
			return null;
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0xA81018", Offset = "0xA81018", VA = "0xA81018", Slot = "22")]
		public override void EndWrite(IAsyncResult asyncResult)
		{
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0xA810C0", Offset = "0xA810C0", VA = "0xA810C0", Slot = "26")]
		public override int Read(byte[] array, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0xA81184", Offset = "0xA81184", VA = "0xA81184", Slot = "28")]
		public override void Write(byte[] array, int offset, int count)
		{
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0xA81248", Offset = "0xA81248", VA = "0xA81248", Slot = "16")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200029A")]
	internal static class GZipConstants
	{
		[Token(Token = "0x400109A")]
		internal const int CompressionLevel_3 = 3;

		[Token(Token = "0x400109B")]
		internal const int CompressionLevel_10 = 10;

		[Token(Token = "0x400109C")]
		internal const long FileLengthModulo = 4294967296L;

		[Token(Token = "0x400109D")]
		internal const byte ID1 = 31;

		[Token(Token = "0x400109E")]
		internal const byte ID2 = 139;

		[Token(Token = "0x400109F")]
		internal const byte Deflate = 8;

		[Token(Token = "0x40010A0")]
		internal const int Xfl_HeaderPos = 8;

		[Token(Token = "0x40010A1")]
		internal const byte Xfl_FastestAlgorithm = 4;

		[Token(Token = "0x40010A2")]
		internal const byte Xfl_MaxCompressionSlowestAlgorithm = 2;
	}
	[Token(Token = "0x200029B")]
	internal class GZipFormatter : IFileFormatWriter
	{
		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] headerBytes;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint _crc32;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private long _inputStreamSizeModulo;

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0xA80654", Offset = "0xA80654", VA = "0xA80654")]
		internal GZipFormatter()
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0xA8065C", Offset = "0xA8065C", VA = "0xA8065C")]
		internal GZipFormatter(int compressionLevel)
		{
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0xA80720", Offset = "0xA80720", VA = "0xA80720", Slot = "4")]
		public byte[] GetHeader()
		{
			return null;
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0xA80728", Offset = "0xA80728", VA = "0xA80728", Slot = "5")]
		public void UpdateWithBytesRead(byte[] buffer, int offset, int bytesToCopy)
		{
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0xA807F0", Offset = "0xA807F0", VA = "0xA807F0", Slot = "6")]
		public byte[] GetFooter()
		{
			return null;
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0xA8086C", Offset = "0xA8086C", VA = "0xA8086C")]
		internal void WriteUInt32(byte[] b, uint value, int startIndex)
		{
		}
	}
	[Token(Token = "0x200029C")]
	internal class HuffmanTree
	{
		[Token(Token = "0x40010A6")]
		internal const int MaxLiteralTreeElements = 288;

		[Token(Token = "0x40010A7")]
		internal const int MaxDistTreeElements = 32;

		[Token(Token = "0x40010A8")]
		internal const int EndOfBlockCode = 256;

		[Token(Token = "0x40010A9")]
		internal const int NumberOfCodeLengthTreeElements = 19;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int tableBits;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private short[] table;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private short[] left;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private short[] right;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] codeLengthArray;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int tableMask;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HuffmanTree staticLiteralLengthTree;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static HuffmanTree staticDistanceTree;

		[Token(Token = "0x170002A1")]
		public static HuffmanTree StaticLiteralLengthTree
		{
			[Token(Token = "0x6001B2A")]
			[Address(RVA = "0xA81598", Offset = "0xA81598", VA = "0xA81598")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A2")]
		public static HuffmanTree StaticDistanceTree
		{
			[Token(Token = "0x6001B2B")]
			[Address(RVA = "0xA81600", Offset = "0xA81600", VA = "0xA81600")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0xA812EC", Offset = "0xA812EC", VA = "0xA812EC")]
		static HuffmanTree()
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0xA814A0", Offset = "0xA814A0", VA = "0xA814A0")]
		public HuffmanTree(byte[] codeLengths)
		{
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0xA81390", Offset = "0xA81390", VA = "0xA81390")]
		private static byte[] GetStaticLiteralTreeLength()
		{
			return null;
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0xA81504", Offset = "0xA81504", VA = "0xA81504")]
		private static byte[] GetStaticDistanceTreeLength()
		{
			return null;
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0xA818C8", Offset = "0xA818C8", VA = "0xA818C8")]
		private uint[] CalculateHuffmanCode()
		{
			return null;
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0xA81668", Offset = "0xA81668", VA = "0xA81668")]
		private void CreateTable()
		{
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0xA81AF8", Offset = "0xA81AF8", VA = "0xA81AF8")]
		public int GetNextSymbol(InputBuffer input)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200029D")]
	internal interface IDeflater : IDisposable
	{
		[Token(Token = "0x6001B32")]
		bool NeedsInput();

		[Token(Token = "0x6001B33")]
		void SetInput(byte[] inputBuffer, int startIndex, int count);

		[Token(Token = "0x6001B34")]
		int GetDeflateOutput(byte[] outputBuffer);

		[Token(Token = "0x6001B35")]
		bool Finish(byte[] outputBuffer, out int bytesRead);
	}
	[Token(Token = "0x200029E")]
	internal class Inflater
	{
		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly byte[] extraLengthBits;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] lengthBase;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] distanceBasePosition;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly byte[] codeOrder;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly byte[] staticDistanceTreeTable;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private OutputWindow output;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputBuffer input;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HuffmanTree literalLengthTree;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HuffmanTree distanceTree;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InflaterState state;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool hasFormatReader;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int bfinal;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private BlockType blockType;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] blockLengthBuffer;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int blockLength;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int length;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int distanceCode;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int extraBits;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int loopCounter;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int literalLengthCodeCount;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int distanceCodeCount;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int codeLengthCodeCount;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int codeArraySize;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int lengthCode;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private byte[] codeList;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private byte[] codeLengthTreeCodeLength;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private HuffmanTree codeLengthTree;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private IFileFormatReader formatReader;

		[Token(Token = "0x170002A3")]
		public int AvailableOutput
		{
			[Token(Token = "0x6001B3B")]
			[Address(RVA = "0xA81E24", Offset = "0xA81E24", VA = "0xA81E24")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0xA7BA64", Offset = "0xA7BA64", VA = "0xA7BA64")]
		public Inflater()
		{
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0xA7BCAC", Offset = "0xA7BCAC", VA = "0xA7BCAC")]
		internal void SetFileFormatReader(IFileFormatReader reader)
		{
		}

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0xA81DFC", Offset = "0xA81DFC", VA = "0xA81DFC")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0xA7C4B0", Offset = "0xA7C4B0", VA = "0xA7C4B0")]
		public void SetInput(byte[] inputBytes, int offset, int length)
		{
		}

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0xA7C49C", Offset = "0xA7C49C", VA = "0xA7C49C")]
		public bool Finished()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0xA81E44", Offset = "0xA81E44", VA = "0xA81E44")]
		public bool NeedsInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0xA7C2C4", Offset = "0xA7C2C4", VA = "0xA7C2C4")]
		public int Inflate(byte[] bytes, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0xA81F38", Offset = "0xA81F38", VA = "0xA81F38")]
		private bool Decode()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0xA82F60", Offset = "0xA82F60", VA = "0xA82F60")]
		private bool DecodeUncompressedBlock(out bool end_of_block)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0xA82B38", Offset = "0xA82B38", VA = "0xA82B38")]
		private bool DecodeBlock(out bool end_of_block_code_seen)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0xA82424", Offset = "0xA82424", VA = "0xA82424")]
		private bool DecodeDynamicBlockHeader()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200029F")]
	internal enum InflaterState
	{
		[Token(Token = "0x40010CF")]
		ReadingHeader = 0,
		[Token(Token = "0x40010D0")]
		ReadingBFinal = 2,
		[Token(Token = "0x40010D1")]
		ReadingBType = 3,
		[Token(Token = "0x40010D2")]
		ReadingNumLitCodes = 4,
		[Token(Token = "0x40010D3")]
		ReadingNumDistCodes = 5,
		[Token(Token = "0x40010D4")]
		ReadingNumCodeLengthCodes = 6,
		[Token(Token = "0x40010D5")]
		ReadingCodeLengthCodes = 7,
		[Token(Token = "0x40010D6")]
		ReadingTreeCodesBefore = 8,
		[Token(Token = "0x40010D7")]
		ReadingTreeCodesAfter = 9,
		[Token(Token = "0x40010D8")]
		DecodeTop = 10,
		[Token(Token = "0x40010D9")]
		HaveInitialLength = 11,
		[Token(Token = "0x40010DA")]
		HaveFullLength = 12,
		[Token(Token = "0x40010DB")]
		HaveDistCode = 13,
		[Token(Token = "0x40010DC")]
		UncompressedAligning = 15,
		[Token(Token = "0x40010DD")]
		UncompressedByte1 = 16,
		[Token(Token = "0x40010DE")]
		UncompressedByte2 = 17,
		[Token(Token = "0x40010DF")]
		UncompressedByte3 = 18,
		[Token(Token = "0x40010E0")]
		UncompressedByte4 = 19,
		[Token(Token = "0x40010E1")]
		DecodingUncompressed = 20,
		[Token(Token = "0x40010E2")]
		StartReadingFooter = 21,
		[Token(Token = "0x40010E3")]
		ReadingFooter = 22,
		[Token(Token = "0x40010E4")]
		VerifyingFooter = 23,
		[Token(Token = "0x40010E5")]
		Done = 24
	}
	[Token(Token = "0x20002A0")]
	internal class InputBuffer
	{
		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] buffer;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int start;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int end;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint bitBuffer;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int bitsInBuffer;

		[Token(Token = "0x170002A4")]
		public int AvailableBits
		{
			[Token(Token = "0x6001B43")]
			[Address(RVA = "0xA83600", Offset = "0xA83600", VA = "0xA83600")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002A5")]
		public int AvailableBytes
		{
			[Token(Token = "0x6001B44")]
			[Address(RVA = "0xA83608", Offset = "0xA83608", VA = "0xA83608")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0xA82358", Offset = "0xA82358", VA = "0xA82358")]
		public bool EnsureBitsAvailable(int count)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0xA81C70", Offset = "0xA81C70", VA = "0xA81C70")]
		public uint TryLoad16Bits()
		{
			return default(uint);
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0xA83628", Offset = "0xA83628", VA = "0xA83628")]
		private uint GetBitMask(int count)
		{
			return default(uint);
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0xA8030C", Offset = "0xA8030C", VA = "0xA8030C")]
		public int GetBits(int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0xA8363C", Offset = "0xA8363C", VA = "0xA8363C")]
		public int CopyTo(byte[] output, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0xA81E6C", Offset = "0xA81E6C", VA = "0xA81E6C")]
		public bool NeedsInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0xA81E14", Offset = "0xA81E14", VA = "0xA81E14")]
		public void SetInput(byte[] buffer, int offset, int length)
		{
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0xA81D7C", Offset = "0xA81D7C", VA = "0xA81D7C")]
		public void SkipBits(int n)
		{
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0xA804B4", Offset = "0xA804B4", VA = "0xA804B4")]
		public void SkipToByteBoundary()
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0xA81DF4", Offset = "0xA81DF4", VA = "0xA81DF4")]
		public InputBuffer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002A1")]
	public sealed class InvalidDataException : SystemException
	{
		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0xA83460", Offset = "0xA83460", VA = "0xA83460")]
		public InvalidDataException()
		{
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0xA80360", Offset = "0xA80360", VA = "0xA80360")]
		public InvalidDataException(string message)
		{
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0xA83738", Offset = "0xA83738", VA = "0xA83738")]
		public InvalidDataException(string message, Exception innerException)
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0xA83740", Offset = "0xA83740", VA = "0xA83740")]
		internal InvalidDataException(SerializationInfo info, StreamingContext context)
		{
		}
	}
	[Token(Token = "0x20002A2")]
	internal class Match
	{
		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MatchState state;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int pos;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int len;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private byte symbol;

		[Token(Token = "0x170002A6")]
		internal MatchState State
		{
			[Token(Token = "0x6001B53")]
			[Address(RVA = "0xA83748", Offset = "0xA83748", VA = "0xA83748")]
			get
			{
				return default(MatchState);
			}
			[Token(Token = "0x6001B54")]
			[Address(RVA = "0xA83750", Offset = "0xA83750", VA = "0xA83750")]
			set
			{
			}
		}

		[Token(Token = "0x170002A7")]
		internal int Position
		{
			[Token(Token = "0x6001B55")]
			[Address(RVA = "0xA83758", Offset = "0xA83758", VA = "0xA83758")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001B56")]
			[Address(RVA = "0xA83760", Offset = "0xA83760", VA = "0xA83760")]
			set
			{
			}
		}

		[Token(Token = "0x170002A8")]
		internal int Length
		{
			[Token(Token = "0x6001B57")]
			[Address(RVA = "0xA83768", Offset = "0xA83768", VA = "0xA83768")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001B58")]
			[Address(RVA = "0xA83770", Offset = "0xA83770", VA = "0xA83770")]
			set
			{
			}
		}

		[Token(Token = "0x170002A9")]
		internal byte Symbol
		{
			[Token(Token = "0x6001B59")]
			[Address(RVA = "0xA83778", Offset = "0xA83778", VA = "0xA83778")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6001B5A")]
			[Address(RVA = "0xA83780", Offset = "0xA83780", VA = "0xA83780")]
			set
			{
			}
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0xA7EB6C", Offset = "0xA7EB6C", VA = "0xA7EB6C")]
		public Match()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	internal class OutputBuffer
	{
		[Token(Token = "0x2000477")]
		internal struct BufferState
		{
			[Token(Token = "0x4002246")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int pos;

			[Token(Token = "0x4002247")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal uint bitBuf;

			[Token(Token = "0x4002248")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int bitCount;
		}

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] byteBuffer;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int pos;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private uint bitBuf;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int bitCount;

		[Token(Token = "0x170002AA")]
		internal int BytesWritten
		{
			[Token(Token = "0x6001B5D")]
			[Address(RVA = "0xA83788", Offset = "0xA83788", VA = "0xA83788")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002AB")]
		internal int FreeBytes
		{
			[Token(Token = "0x6001B5E")]
			[Address(RVA = "0xA7B334", Offset = "0xA7B334", VA = "0xA7B334")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002AC")]
		internal int BitsInBuffer
		{
			[Token(Token = "0x6001B65")]
			[Address(RVA = "0xA7B35C", Offset = "0xA7B35C", VA = "0xA7B35C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0xA7E9A0", Offset = "0xA7E9A0", VA = "0xA7E9A0")]
		internal void UpdateBuffer(byte[] output)
		{
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0xA7B594", Offset = "0xA7B594", VA = "0xA7B594")]
		internal void WriteUInt16(ushort value)
		{
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0xA7B378", Offset = "0xA7B378", VA = "0xA7B378")]
		internal void WriteBits(int n, uint bits)
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0xA7B428", Offset = "0xA7B428", VA = "0xA7B428")]
		internal void FlushBits()
		{
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0xA7B518", Offset = "0xA7B518", VA = "0xA7B518")]
		internal void WriteBytes(byte[] byteArray, int offset, int count)
		{
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0xA83790", Offset = "0xA83790", VA = "0xA83790")]
		private void WriteBytesUnaligned(byte[] byteArray, int offset, int count)
		{
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0xA83834", Offset = "0xA83834", VA = "0xA83834")]
		private void WriteByteUnaligned(byte b)
		{
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0xA7E9AC", Offset = "0xA7E9AC", VA = "0xA7E9AC")]
		internal BufferState DumpState()
		{
			return default(BufferState);
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0xA7E9DC", Offset = "0xA7E9DC", VA = "0xA7E9DC")]
		internal void RestoreState(BufferState state)
		{
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0xA7E5AC", Offset = "0xA7E5AC", VA = "0xA7E5AC")]
		public OutputBuffer()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	internal class OutputWindow
	{
		[Token(Token = "0x40010F3")]
		private const int WindowSize = 32768;

		[Token(Token = "0x40010F4")]
		private const int WindowMask = 32767;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] window;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int end;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int bytesUsed;

		[Token(Token = "0x170002AD")]
		public int FreeBytes
		{
			[Token(Token = "0x6001B6C")]
			[Address(RVA = "0xA832AC", Offset = "0xA832AC", VA = "0xA832AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002AE")]
		public int AvailableBytes
		{
			[Token(Token = "0x6001B6D")]
			[Address(RVA = "0xA83840", Offset = "0xA83840", VA = "0xA83840")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0xA832BC", Offset = "0xA832BC", VA = "0xA832BC")]
		public void Write(byte b)
		{
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0xA8331C", Offset = "0xA8331C", VA = "0xA8331C")]
		public void WriteLengthDistance(int length, int distance)
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0xA83184", Offset = "0xA83184", VA = "0xA83184")]
		public int CopyFrom(InputBuffer input, int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0xA81E7C", Offset = "0xA81E7C", VA = "0xA81E7C")]
		public int CopyTo(byte[] output, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0xA81D94", Offset = "0xA81D94", VA = "0xA81D94")]
		public OutputWindow()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	internal class SR
	{
		[Token(Token = "0x40010F8")]
		public const string ArgumentOutOfRange_Enum = "Argument out of range";

		[Token(Token = "0x40010F9")]
		public const string CorruptedGZipHeader = "Corrupted gzip header";

		[Token(Token = "0x40010FA")]
		public const string CannotReadFromDeflateStream = "Cannot read from deflate stream";

		[Token(Token = "0x40010FB")]
		public const string CannotWriteToDeflateStream = "Cannot write to deflate stream";

		[Token(Token = "0x40010FC")]
		public const string GenericInvalidData = "Invalid data";

		[Token(Token = "0x40010FD")]
		public const string InvalidCRC = "Invalid CRC";

		[Token(Token = "0x40010FE")]
		public const string InvalidStreamSize = "Invalid stream size";

		[Token(Token = "0x40010FF")]
		public const string InvalidHuffmanData = "Invalid Huffman data";

		[Token(Token = "0x4001100")]
		public const string InvalidBeginCall = "Invalid begin call";

		[Token(Token = "0x4001101")]
		public const string InvalidEndCall = "Invalid end call";

		[Token(Token = "0x4001102")]
		public const string InvalidBlockLength = "Invalid block length";

		[Token(Token = "0x4001103")]
		public const string InvalidArgumentOffsetCount = "Invalid argument offset count";

		[Token(Token = "0x4001104")]
		public const string NotSupported = "Not supported";

		[Token(Token = "0x4001105")]
		public const string NotWriteableStream = "Not a writeable stream";

		[Token(Token = "0x4001106")]
		public const string NotReadableStream = "Not a readable stream";

		[Token(Token = "0x4001107")]
		public const string ObjectDisposed_StreamClosed = "Object disposed";

		[Token(Token = "0x4001108")]
		public const string UnknownState = "Unknown state";

		[Token(Token = "0x4001109")]
		public const string UnknownCompressionMode = "Unknown compression mode";

		[Token(Token = "0x400110A")]
		public const string UnknownBlockType = "Unknown block type";

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0xA83848", Offset = "0xA83848", VA = "0xA83848")]
		private SR()
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0xA7BA60", Offset = "0xA7BA60", VA = "0xA7BA60")]
		internal static string GetString(string p)
		{
			return null;
		}
	}
}
namespace SimpleJSON
{
	[Token(Token = "0x20002A6")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x400110C")]
		Array = 1,
		[Token(Token = "0x400110D")]
		Class,
		[Token(Token = "0x400110E")]
		Value,
		[Token(Token = "0x400110F")]
		IntValue,
		[Token(Token = "0x4001110")]
		DoubleValue,
		[Token(Token = "0x4001111")]
		BoolValue,
		[Token(Token = "0x4001112")]
		FloatValue
	}
	[Token(Token = "0x20002A7")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7D7818", Offset = "0x7D7818")]
	public class JSONNode
	{
		[Token(Token = "0x2000478")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8C90", Offset = "0x7D8C90")]
		private sealed class <get_Childs>d__17 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002249")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400224A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x400224B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x170003A4")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002545")]
				[Address(RVA = "0xA73540", Offset = "0xA73540", VA = "0xA73540", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002547")]
				[Address(RVA = "0xA735AC", Offset = "0xA735AC", VA = "0xA735AC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002542")]
			[Address(RVA = "0xA72150", Offset = "0xA72150", VA = "0xA72150")]
			[DebuggerHidden]
			public <get_Childs>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6002543")]
			[Address(RVA = "0xA73524", Offset = "0xA73524", VA = "0xA73524", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002544")]
			[Address(RVA = "0xA73528", Offset = "0xA73528", VA = "0xA73528", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002546")]
			[Address(RVA = "0xA73548", Offset = "0xA73548", VA = "0xA73548", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002548")]
			[Address(RVA = "0xA735B4", Offset = "0xA735B4", VA = "0xA735B4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002549")]
			[Address(RVA = "0xA7364C", Offset = "0xA7364C", VA = "0xA7364C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000479")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8CA0", Offset = "0x7D8CA0")]
		private sealed class <get_DeepChilds>d__19 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400224C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400224D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x400224E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400224F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONNode <>4__this;

			[Token(Token = "0x4002250")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x4002251")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x170003A6")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x600254F")]
				[Address(RVA = "0xA73C6C", Offset = "0xA73C6C", VA = "0xA73C6C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002551")]
				[Address(RVA = "0xA73CD8", Offset = "0xA73CD8", VA = "0xA73CD8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600254A")]
			[Address(RVA = "0xA7220C", Offset = "0xA7220C", VA = "0xA7220C")]
			[DebuggerHidden]
			public <get_DeepChilds>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x600254B")]
			[Address(RVA = "0xA73650", Offset = "0xA73650", VA = "0xA73650", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600254C")]
			[Address(RVA = "0xA73848", Offset = "0xA73848", VA = "0xA73848", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600254D")]
			[Address(RVA = "0xA73788", Offset = "0xA73788", VA = "0xA73788")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600254E")]
			[Address(RVA = "0xA736C8", Offset = "0xA736C8", VA = "0xA736C8")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6002550")]
			[Address(RVA = "0xA73C74", Offset = "0xA73C74", VA = "0xA73C74", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002552")]
			[Address(RVA = "0xA73CE0", Offset = "0xA73CE0", VA = "0xA73CE0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002553")]
			[Address(RVA = "0xA73D90", Offset = "0xA73D90", VA = "0xA73D90", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x170002AF")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6001B73")]
			[Address(RVA = "0xA71FF4", Offset = "0xA71FF4", VA = "0xA71FF4", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B74")]
			[Address(RVA = "0xA71FFC", Offset = "0xA71FFC", VA = "0xA71FFC", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170002B0")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6001B75")]
			[Address(RVA = "0xA72000", Offset = "0xA72000", VA = "0xA72000", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B76")]
			[Address(RVA = "0xA72008", Offset = "0xA72008", VA = "0xA72008", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public virtual string Value
		{
			[Token(Token = "0x6001B77")]
			[Address(RVA = "0xA7200C", Offset = "0xA7200C", VA = "0xA7200C", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B78")]
			[Address(RVA = "0xA72054", Offset = "0xA72054", VA = "0xA72054", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x170002B2")]
		public virtual int Count
		{
			[Token(Token = "0x6001B79")]
			[Address(RVA = "0xA72058", Offset = "0xA72058", VA = "0xA72058", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002B3")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6001B7E")]
			[Address(RVA = "0xA720E0", Offset = "0xA720E0", VA = "0xA720E0", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2388", Offset = "0x7E2388")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B4")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x6001B7F")]
			[Address(RVA = "0xA72188", Offset = "0xA72188", VA = "0xA72188")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E23EC", Offset = "0x7E23EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B5")]
		public virtual int AsInt
		{
			[Token(Token = "0x6001B82")]
			[Address(RVA = "0xA722D4", Offset = "0xA722D4", VA = "0xA722D4", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001B83")]
			[Address(RVA = "0xA72314", Offset = "0xA72314", VA = "0xA72314", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170002B6")]
		public virtual long AsLong
		{
			[Token(Token = "0x6001B84")]
			[Address(RVA = "0xA72354", Offset = "0xA72354", VA = "0xA72354", Slot = "20")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6001B85")]
			[Address(RVA = "0xA72394", Offset = "0xA72394", VA = "0xA72394", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6001B86")]
			[Address(RVA = "0xA723D4", Offset = "0xA723D4", VA = "0xA723D4", Slot = "22")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B87")]
			[Address(RVA = "0xA72418", Offset = "0xA72418", VA = "0xA72418", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x170002B8")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6001B88")]
			[Address(RVA = "0xA72458", Offset = "0xA72458", VA = "0xA72458", Slot = "24")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001B89")]
			[Address(RVA = "0xA724FC", Offset = "0xA724FC", VA = "0xA724FC", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170002B9")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6001B8A")]
			[Address(RVA = "0xA7253C", Offset = "0xA7253C", VA = "0xA7253C", Slot = "26")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B8B")]
			[Address(RVA = "0xA72604", Offset = "0xA72604", VA = "0xA72604", Slot = "27")]
			set
			{
			}
		}

		[Token(Token = "0x170002BA")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x6001B8C")]
			[Address(RVA = "0xA72684", Offset = "0xA72684", VA = "0xA72684", Slot = "28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BB")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x6001B8D")]
			[Address(RVA = "0xA72704", Offset = "0xA72704", VA = "0xA72704", Slot = "29")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0xA71FF0", Offset = "0xA71FF0", VA = "0xA71FF0", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0xA72060", Offset = "0xA72060", VA = "0xA72060", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0xA720C8", Offset = "0xA720C8", VA = "0xA720C8", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0xA720D0", Offset = "0xA720D0", VA = "0xA720D0", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0xA720D8", Offset = "0xA720D8", VA = "0xA720D8", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0xA72244", Offset = "0xA72244", VA = "0xA72244", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0xA7228C", Offset = "0xA7228C", VA = "0xA7228C", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0xA72784", Offset = "0xA72784", VA = "0xA72784")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0xA727E8", Offset = "0xA727E8", VA = "0xA727E8")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0xA70BD0", Offset = "0xA70BD0", VA = "0xA70BD0")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0xA72838", Offset = "0xA72838", VA = "0xA72838")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0xA72854", Offset = "0xA72854", VA = "0xA72854", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0xA71A58", Offset = "0xA71A58", VA = "0xA71A58", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0xA703C0", Offset = "0xA703C0", VA = "0xA703C0")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0xA6E0CC", Offset = "0xA6E0CC", VA = "0xA6E0CC")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0xA72860", Offset = "0xA72860", VA = "0xA72860", Slot = "30")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0xA72864", Offset = "0xA72864", VA = "0xA72864")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0xA728E4", Offset = "0xA728E4", VA = "0xA728E4")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0xA72954", Offset = "0xA72954", VA = "0xA72954")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0xA729C4", Offset = "0xA729C4", VA = "0xA729C4")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0xA72A34", Offset = "0xA72A34", VA = "0xA72A34")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0xA72BA0", Offset = "0xA72BA0", VA = "0xA72BA0")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0xA72D3C", Offset = "0xA72D3C", VA = "0xA72D3C")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0xA730D0", Offset = "0xA730D0", VA = "0xA730D0")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0xA73140", Offset = "0xA73140", VA = "0xA73140")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0xA731B0", Offset = "0xA731B0", VA = "0xA731B0")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0xA73220", Offset = "0xA73220", VA = "0xA73220")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0xA73350", Offset = "0xA73350", VA = "0xA73350")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0xA7346C", Offset = "0xA7346C", VA = "0xA7346C")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0xA6F1D8", Offset = "0xA6F1D8", VA = "0xA6F1D8")]
		public JSONNode()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7D7850", Offset = "0x7D7850")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x200047A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8CB0", Offset = "0x7D8CB0")]
		private sealed class <get_Childs>d__13 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002252")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4002254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4002255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONArray <>4__this;

			[Token(Token = "0x4002256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003A8")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002558")]
				[Address(RVA = "0xA6F5EC", Offset = "0xA6F5EC", VA = "0xA6F5EC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600255A")]
				[Address(RVA = "0xA6F658", Offset = "0xA6F658", VA = "0xA6F658", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002554")]
			[Address(RVA = "0xA6EC08", Offset = "0xA6EC08", VA = "0xA6EC08")]
			[DebuggerHidden]
			public <get_Childs>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002555")]
			[Address(RVA = "0xA6F420", Offset = "0xA6F420", VA = "0xA6F420", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002556")]
			[Address(RVA = "0xA6F494", Offset = "0xA6F494", VA = "0xA6F494", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002557")]
			[Address(RVA = "0xA6F43C", Offset = "0xA6F43C", VA = "0xA6F43C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002559")]
			[Address(RVA = "0xA6F5F4", Offset = "0xA6F5F4", VA = "0xA6F5F4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600255B")]
			[Address(RVA = "0xA6F660", Offset = "0xA6F660", VA = "0xA6F660", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600255C")]
			[Address(RVA = "0xA6F710", Offset = "0xA6F710", VA = "0xA6F710", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200047B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8CC0", Offset = "0x7D8CC0")]
		private sealed class <GetEnumerator>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONArray <>4__this;

			[Token(Token = "0x400225A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002561")]
				[Address(RVA = "0xA6F3AC", Offset = "0xA6F3AC", VA = "0xA6F3AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002563")]
				[Address(RVA = "0xA6F418", Offset = "0xA6F418", VA = "0xA6F418", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600255D")]
			[Address(RVA = "0xA6ECB4", Offset = "0xA6ECB4", VA = "0xA6ECB4")]
			[DebuggerHidden]
			public <GetEnumerator>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x600255E")]
			[Address(RVA = "0xA6F1E0", Offset = "0xA6F1E0", VA = "0xA6F1E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600255F")]
			[Address(RVA = "0xA6F254", Offset = "0xA6F254", VA = "0xA6F254", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002560")]
			[Address(RVA = "0xA6F1FC", Offset = "0xA6F1FC", VA = "0xA6F1FC")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002562")]
			[Address(RVA = "0xA6F3B4", Offset = "0xA6F3B4", VA = "0xA6F3B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x170002BC")]
		public override JSONNode Item
		{
			[Token(Token = "0x6001BA5")]
			[Address(RVA = "0xA6E760", Offset = "0xA6E760", VA = "0xA6E760", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BA6")]
			[Address(RVA = "0xA6E838", Offset = "0xA6E838", VA = "0xA6E838", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170002BD")]
		public override JSONNode Item
		{
			[Token(Token = "0x6001BA7")]
			[Address(RVA = "0xA6E8DC", Offset = "0xA6E8DC", VA = "0xA6E8DC", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BA8")]
			[Address(RVA = "0xA6E940", Offset = "0xA6E940", VA = "0xA6E940", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002BE")]
		public override int Count
		{
			[Token(Token = "0x6001BA9")]
			[Address(RVA = "0xA6E9A8", Offset = "0xA6E9A8", VA = "0xA6E9A8", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002BF")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6001BAD")]
			[Address(RVA = "0xA6EB84", Offset = "0xA6EB84", VA = "0xA6EB84", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2450", Offset = "0x7E2450")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0xA6E9FC", Offset = "0xA6E9FC", VA = "0xA6E9FC", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0xA6EA64", Offset = "0xA6EA64", VA = "0xA6EA64", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0xA6EB14", Offset = "0xA6EB14", VA = "0xA6EB14", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0xA6EC40", Offset = "0xA6EC40", VA = "0xA6EC40", Slot = "31")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E24B4", Offset = "0x7E24B4")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0xA6ECE0", Offset = "0xA6ECE0", VA = "0xA6ECE0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0xA6EE88", Offset = "0xA6EE88", VA = "0xA6EE88", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0xA6F084", Offset = "0xA6F084", VA = "0xA6F084", Slot = "30")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0xA6F168", Offset = "0xA6F168", VA = "0xA6F168")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7D7888", Offset = "0x7D7888")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x200047C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8CD0", Offset = "0x7D8CD0")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x400225B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public JSONNode aNode;

			[Token(Token = "0x6002564")]
			[Address(RVA = "0xA6FEB4", Offset = "0xA6FEB4", VA = "0xA6FEB4")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x6002565")]
			[Address(RVA = "0xA70B7C", Offset = "0xA70B7C", VA = "0xA70B7C")]
			internal bool <Remove>b__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200047D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8CE0", Offset = "0x7D8CE0")]
		private sealed class <get_Childs>d__14 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400225C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400225D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x400225E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400225F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONClass <>4__this;

			[Token(Token = "0x4002260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003AC")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x600256A")]
				[Address(RVA = "0xA710A8", Offset = "0xA710A8", VA = "0xA710A8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600256C")]
				[Address(RVA = "0xA71114", Offset = "0xA71114", VA = "0xA71114", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002566")]
			[Address(RVA = "0xA6FF40", Offset = "0xA6FF40", VA = "0xA6FF40")]
			[DebuggerHidden]
			public <get_Childs>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002567")]
			[Address(RVA = "0xA70ED0", Offset = "0xA70ED0", VA = "0xA70ED0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002568")]
			[Address(RVA = "0xA70F44", Offset = "0xA70F44", VA = "0xA70F44", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002569")]
			[Address(RVA = "0xA70EEC", Offset = "0xA70EEC", VA = "0xA70EEC")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600256B")]
			[Address(RVA = "0xA710B0", Offset = "0xA710B0", VA = "0xA710B0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600256D")]
			[Address(RVA = "0xA7111C", Offset = "0xA7111C", VA = "0xA7111C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600256E")]
			[Address(RVA = "0xA711CC", Offset = "0xA711CC", VA = "0xA711CC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200047E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8CF0", Offset = "0x7D8CF0")]
		private sealed class <GetEnumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONClass <>4__this;

			[Token(Token = "0x4002264")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003AE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002573")]
				[Address(RVA = "0xA70E5C", Offset = "0xA70E5C", VA = "0xA70E5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002575")]
				[Address(RVA = "0xA70EC8", Offset = "0xA70EC8", VA = "0xA70EC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600256F")]
			[Address(RVA = "0xA6FFEC", Offset = "0xA6FFEC", VA = "0xA6FFEC")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002570")]
			[Address(RVA = "0xA70C68", Offset = "0xA70C68", VA = "0xA70C68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002571")]
			[Address(RVA = "0xA70CDC", Offset = "0xA70CDC", VA = "0xA70CDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002572")]
			[Address(RVA = "0xA70C84", Offset = "0xA70C84", VA = "0xA70C84")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002574")]
			[Address(RVA = "0xA70E64", Offset = "0xA70E64", VA = "0xA70E64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x170002C0")]
		public override JSONNode Item
		{
			[Token(Token = "0x6001BB3")]
			[Address(RVA = "0xA6F714", Offset = "0xA6F714", VA = "0xA6F714", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0xA6F808", Offset = "0xA6F808", VA = "0xA6F808", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C1")]
		public override JSONNode Item
		{
			[Token(Token = "0x6001BB5")]
			[Address(RVA = "0xA6F8CC", Offset = "0xA6F8CC", VA = "0xA6F8CC", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BB6")]
			[Address(RVA = "0xA6F964", Offset = "0xA6F964", VA = "0xA6F964", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170002C2")]
		public override int Count
		{
			[Token(Token = "0x6001BB7")]
			[Address(RVA = "0xA6FA2C", Offset = "0xA6FA2C", VA = "0xA6FA2C", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002C3")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6001BBC")]
			[Address(RVA = "0xA6FEBC", Offset = "0xA6FEBC", VA = "0xA6FEBC", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2518", Offset = "0x7E2518")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0xA6FA84", Offset = "0xA6FA84", VA = "0xA6FA84", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0xA6FBB4", Offset = "0xA6FBB4", VA = "0xA6FBB4", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0xA6FC78", Offset = "0xA6FC78", VA = "0xA6FC78", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0xA6FD34", Offset = "0xA6FD34", VA = "0xA6FD34", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0xA6FF78", Offset = "0xA6FF78", VA = "0xA6FF78", Slot = "31")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E257C", Offset = "0x7E257C")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0xA70018", Offset = "0xA70018", VA = "0xA70018", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0xA70540", Offset = "0xA70540", VA = "0xA70540", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0xA70948", Offset = "0xA70948", VA = "0xA70948", Slot = "30")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0xA70B0C", Offset = "0xA70B0C", VA = "0xA70B0C")]
		public JSONClass()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x170002C4")]
		public override string Value
		{
			[Token(Token = "0x6001BC2")]
			[Address(RVA = "0xA711D0", Offset = "0xA711D0", VA = "0xA711D0", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BC3")]
			[Address(RVA = "0xA711D8", Offset = "0xA711D8", VA = "0xA711D8", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0xA711E0", Offset = "0xA711E0", VA = "0xA711E0")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0xA7120C", Offset = "0xA7120C", VA = "0xA7120C")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0xA71250", Offset = "0xA71250", VA = "0xA71250")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0xA71294", Offset = "0xA71294", VA = "0xA71294")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0xA712D0", Offset = "0xA712D0", VA = "0xA712D0")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0xA7130C", Offset = "0xA7130C", VA = "0xA7130C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001BCA")]
		[Address(RVA = "0xA71370", Offset = "0xA71370", VA = "0xA71370", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0xA713D4", Offset = "0xA713D4", VA = "0xA713D4", Slot = "30")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x20002AB")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7D78C0", Offset = "0x7D78C0")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x170002C5")]
		public override JSONNode Item
		{
			[Token(Token = "0x6001BCF")]
			[Address(RVA = "0xA716F4", Offset = "0xA716F4", VA = "0xA716F4", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BD0")]
			[Address(RVA = "0xA71758", Offset = "0xA71758", VA = "0xA71758", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170002C6")]
		public override JSONNode Item
		{
			[Token(Token = "0x6001BD1")]
			[Address(RVA = "0xA717E4", Offset = "0xA717E4", VA = "0xA717E4", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BD2")]
			[Address(RVA = "0xA71854", Offset = "0xA71854", VA = "0xA71854", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C7")]
		public override int AsInt
		{
			[Token(Token = "0x6001BDB")]
			[Address(RVA = "0xA71AF0", Offset = "0xA71AF0", VA = "0xA71AF0", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001BDC")]
			[Address(RVA = "0xA71B74", Offset = "0xA71B74", VA = "0xA71B74", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170002C8")]
		public override float AsFloat
		{
			[Token(Token = "0x6001BDD")]
			[Address(RVA = "0xA71BFC", Offset = "0xA71BFC", VA = "0xA71BFC", Slot = "22")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BDE")]
			[Address(RVA = "0xA71C80", Offset = "0xA71C80", VA = "0xA71C80", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x170002C9")]
		public override double AsDouble
		{
			[Token(Token = "0x6001BDF")]
			[Address(RVA = "0xA71D08", Offset = "0xA71D08", VA = "0xA71D08", Slot = "24")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001BE0")]
			[Address(RVA = "0xA71D8C", Offset = "0xA71D8C", VA = "0xA71D8C", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170002CA")]
		public override bool AsBool
		{
			[Token(Token = "0x6001BE1")]
			[Address(RVA = "0xA71E14", Offset = "0xA71E14", VA = "0xA71E14", Slot = "26")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BE2")]
			[Address(RVA = "0xA71E98", Offset = "0xA71E98", VA = "0xA71E98", Slot = "27")]
			set
			{
			}
		}

		[Token(Token = "0x170002CB")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6001BE3")]
			[Address(RVA = "0xA71F20", Offset = "0xA71F20", VA = "0xA71F20", Slot = "28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CC")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x6001BE4")]
			[Address(RVA = "0xA71F88", Offset = "0xA71F88", VA = "0xA71F88", Slot = "29")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0xA6E80C", Offset = "0xA6E80C", VA = "0xA6E80C")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0xA6F7D0", Offset = "0xA6F7D0", VA = "0xA6F7D0")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0xA71694", Offset = "0xA71694", VA = "0xA71694")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0xA718E8", Offset = "0xA718E8", VA = "0xA718E8", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0xA71974", Offset = "0xA71974", VA = "0xA71974", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0xA71A08", Offset = "0xA71A08", VA = "0xA71A08")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xA71A20", Offset = "0xA71A20", VA = "0xA71A20")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0xA71A38", Offset = "0xA71A38", VA = "0xA71A38", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0xA71A50", Offset = "0xA71A50", VA = "0xA71A50", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0xA71A60", Offset = "0xA71A60", VA = "0xA71A60", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0xA71AA8", Offset = "0xA71AA8", VA = "0xA71AA8", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AC")]
	public static class JSON
	{
		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0xA6E0C8", Offset = "0xA6E0C8", VA = "0xA6E0C8")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace ElementSpace
{
	[Token(Token = "0x20002AD")]
	public class MeshExtrusion
	{
		[Token(Token = "0x200047F")]
		public class Edge
		{
			[Token(Token = "0x4002265")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int[] vertexIndex;

			[Token(Token = "0x4002266")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] faceIndex;

			[Token(Token = "0x6002576")]
			[Address(RVA = "0x9C36E8", Offset = "0x9C36E8", VA = "0x9C36E8")]
			public Edge()
			{
			}
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x9C2630", Offset = "0x9C2630", VA = "0x9C2630")]
		public static void ExtrudeMesh(Mesh srcMesh, Mesh extrudedMesh, Matrix4x4[] extrusion, bool invertFaces)
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x9C27FC", Offset = "0x9C27FC", VA = "0x9C27FC")]
		public static void ExtrudeMesh(Mesh srcMesh, Mesh extrudedMesh, Matrix4x4[] extrusion, Edge[] edges, bool invertFaces)
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x9C2678", Offset = "0x9C2678", VA = "0x9C2678")]
		public static Edge[] BuildManifoldEdges(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x9C31B4", Offset = "0x9C31B4", VA = "0x9C31B4")]
		public static Edge[] BuildEdges(int vertexCount, int[] triangleArray)
		{
			return null;
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x9C3758", Offset = "0x9C3758", VA = "0x9C3758")]
		public MeshExtrusion()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public enum GAME_LEVELS_DEFINES
	{
		[Token(Token = "0x4001119")]
		NONE = -1,
		[Token(Token = "0x400111A")]
		COUNT
	}
}
namespace Ergo
{
	[Token(Token = "0x20002AF")]
	public enum POOL_PACKS_ENUM
	{
		[Token(Token = "0x400111C")]
		NONE = -1,
		[Token(Token = "0x400111D")]
		COUNT
	}
	[Token(Token = "0x20002B0")]
	public class PoolPacksDataManager : BaseDataManager<PoolPackData>
	{
		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PoolPacksDataManager sharedInstance;

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0xAD7A78", Offset = "0xAD7A78", VA = "0xAD7A78")]
		public static PoolPacksDataManager sharedManager()
		{
			return null;
		}

		[Token(Token = "0x6001BEC")]
		public static T GetData<T>(POOL_PACKS_ENUM id) where T : PoolPackData
		{
			return null;
		}

		[Token(Token = "0x6001BED")]
		public static T GetDataByType<T>() where T : PoolPackData
		{
			return null;
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0xAD7B38", Offset = "0xAD7B38", VA = "0xAD7B38")]
		protected PoolPacksDataManager()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public enum POOLS_ENUM
	{
		[Token(Token = "0x4001120")]
		NONE = -1,
		[Token(Token = "0x4001121")]
		COUNT
	}
	[Token(Token = "0x20002B2")]
	public class PoolsDataManager : BaseDataManager<GameObjectPoolData>
	{
		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PoolsDataManager sharedInstance;

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0xAD7C28", Offset = "0xAD7C28", VA = "0xAD7C28")]
		public static PoolsDataManager sharedManager()
		{
			return null;
		}

		[Token(Token = "0x6001BF1")]
		public static T GetData<T>(POOLS_ENUM id) where T : GameObjectPoolData
		{
			return null;
		}

		[Token(Token = "0x6001BF2")]
		public static T GetDataByType<T>() where T : GameObjectPoolData
		{
			return null;
		}

		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0xAD7CE8", Offset = "0xAD7CE8", VA = "0xAD7CE8")]
		protected PoolsDataManager()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	public enum SPRITES_DEFINED
	{
		[Token(Token = "0x4001124")]
		NONE = -1,
		[Token(Token = "0x4001125")]
		COUNT
	}
	[Serializable]
	[Token(Token = "0x20002B4")]
	[AttributeAttribute(Name = "EditorParamsHideFields", RVA = "0x7D78F8", Offset = "0x7D78F8")]
	public class BuildPresetData : ErgoData
	{
		[Token(Token = "0x2000480")]
		public enum BuildPresetInitScene
		{
			[Token(Token = "0x4002268")]
			SCN_INIT,
			[Token(Token = "0x4002269")]
			SCN_INIT_LEVEL_DESIGN,
			[Token(Token = "0x400226A")]
			NONE
		}

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<UnitySceneReferenceData> scenesToBuild;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BuildPresetInitScene initScene;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "ShowFieldIf", RVA = "0x7DEE1C", Offset = "0x7DEE1C")]
		public int bundleVersionCode;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "ShowFieldIf", RVA = "0x7DEE58", Offset = "0x7DEE58")]
		public string bundleVersion;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ShowFieldIf", RVA = "0x7DEE94", Offset = "0x7DEE94")]
		public bool split_app_binary;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "ShowFieldIf", RVA = "0x7DEED0", Offset = "0x7DEED0")]
		public string package_name;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DEF0C", Offset = "0x7DEF0C")]
		[AttributeAttribute(Name = "ShowFieldIf", RVA = "0x7DEF0C", Offset = "0x7DEF0C")]
		public bool export_project;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool build_asset_bundles;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string productName;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool usePlayerLog;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[AttributeAttribute(Name = "ShowFieldIf", RVA = "0x7DEF70", Offset = "0x7DEF70")]
		public bool scriptDebugging;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		[AttributeAttribute(Name = "ShowFieldIf", RVA = "0x7DEFAC", Offset = "0x7DEFAC")]
		public bool scriptsOnly;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		[AttributeAttribute(Name = "ShowFieldIf", RVA = "0x7DEFE8", Offset = "0x7DEFE8")]
		public bool autoConnectProfiler;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool developmentBuild;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string displayResolutionDialog;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DF024", Offset = "0x7DF024")]
		public string defines;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int buildTarget;

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x9C3A94", Offset = "0x9C3A94", VA = "0x9C3A94", Slot = "4")]
		public override void SetDefaultValues()
		{
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x9C3B04", Offset = "0x9C3B04", VA = "0x9C3B04", Slot = "10")]
		public override void OnFinishedDeserializing()
		{
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x9C3B6C", Offset = "0x9C3B6C", VA = "0x9C3B6C")]
		public BuildPresetData()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	public class BuildVersioningData : ErgoData
	{
		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int majorNumber;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int minorNumber;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int patchNumber;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string commitHash;

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x9C3C44", Offset = "0x9C3C44", VA = "0x9C3C44")]
		public BuildVersioningData()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public class ErgoApplicationSettings_SO : ScriptableObject
	{
		[Token(Token = "0x400113B")]
		public const string GAMEDATA_FOLDER_NAME = "GameData";

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DF05C", Offset = "0x7DF05C")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DF05C", Offset = "0x7DF05C")]
		public string application_name;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string application_prefix_name;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string application_folder_name;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string path_application;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string path_resources;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string path_autogenerated_code;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string path_generated_data_files;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string pathResources_generated_data_files;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DF0AC", Offset = "0x7DF0AC")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DF0AC", Offset = "0x7DF0AC")]
		public string SCN_INIT;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string SCN_LOADING;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string SCN_INGAME_INIT;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string SCN_MAIN_MENU;

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x9C5148", Offset = "0x9C5148", VA = "0x9C5148")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x9C514C", Offset = "0x9C514C", VA = "0x9C514C")]
		public void RefreshPaths()
		{
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x9C5264", Offset = "0x9C5264", VA = "0x9C5264")]
		public ErgoApplicationSettings_SO()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	public class ErgoFrameworkConfig
	{
		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ErgoFrameworkSetup_SO setupData;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ErgoFrameworkConfig _instance;

		[Token(Token = "0x170002CD")]
		public static ErgoFrameworkConfig instance
		{
			[Token(Token = "0x6001BFC")]
			[Address(RVA = "0xFF5460", Offset = "0xFF5460", VA = "0xFF5460")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CE")]
		public bool isLoaded
		{
			[Token(Token = "0x6001BFD")]
			[Address(RVA = "0x1004C7C", Offset = "0x1004C7C", VA = "0x1004C7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002CF")]
		public ErgoFrameworkSetup_SO config
		{
			[Token(Token = "0x6001BFE")]
			[Address(RVA = "0x1004CEC", Offset = "0x1004CEC", VA = "0x1004CEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x1004C54", Offset = "0x1004C54", VA = "0x1004C54")]
		private ErgoFrameworkConfig()
		{
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x1004CF4", Offset = "0x1004CF4", VA = "0x1004CF4")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x1004D54", Offset = "0x1004D54", VA = "0x1004D54")]
		public string GetPathRelativeToFrameworkFolder(string path)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B8")]
	public class ErgoFrameworkSetup_SO : ScriptableObject
	{
		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DF0FC", Offset = "0x7DF0FC")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DF0FC", Offset = "0x7DF0FC")]
		public string path_framework;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string path_resources;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string path_autogenerated_code;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string generated_data_folder_name;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DF14C", Offset = "0x7DF14C")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x7DF14C", Offset = "0x7DF14C")]
		public string SCN_INIT;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string SCN_LOADING;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string SCN_INGAME_INIT;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string SCN_MAIN_MENU;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string _path_code_templates;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string _path_generated_data_files;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string _pathResources_generated_data_files;

		[Token(Token = "0x170002D0")]
		public string path_code_templates
		{
			[Token(Token = "0x6001C03")]
			[Address(RVA = "0x1004DF8", Offset = "0x1004DF8", VA = "0x1004DF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D1")]
		public string path_generated_data_files
		{
			[Token(Token = "0x6001C04")]
			[Address(RVA = "0x1004E00", Offset = "0x1004E00", VA = "0x1004E00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D2")]
		public string pathResources_generated_data_files
		{
			[Token(Token = "0x6001C05")]
			[Address(RVA = "0x1004E08", Offset = "0x1004E08", VA = "0x1004E08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x1004E10", Offset = "0x1004E10", VA = "0x1004E10")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x1004F84", Offset = "0x1004F84", VA = "0x1004F84")]
		public ErgoFrameworkSetup_SO()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class ErgoApplicationData : ErgoData
	{
		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int buildTarget;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string bundleVersion;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BuildPresetData buildPreset;

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0x9C4E28", Offset = "0x9C4E28", VA = "0x9C4E28")]
		public ErgoApplicationData()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class ErgoApplication
	{
		[Token(Token = "0x4001158")]
		public const string FILE_APPLICATION_DATA = "ErgoApplicationData.xml";

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ErgoApplication _instance;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string path_applicationData;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ErgoApplicationData _applicationData;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _isPaused;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action OnGamePaused;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action OnGameResumed;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action OnGameRestartLevel;

		[Token(Token = "0x170002D3")]
		public static ErgoApplication sharedInstance
		{
			[Token(Token = "0x6001C09")]
			[Address(RVA = "0x9C4A68", Offset = "0x9C4A68", VA = "0x9C4A68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D4")]
		public ErgoApplicationData applicationData
		{
			[Token(Token = "0x6001C0B")]
			[Address(RVA = "0x9C4E9C", Offset = "0x9C4E9C", VA = "0x9C4E9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D5")]
		public bool isPaused
		{
			[Token(Token = "0x6001C0E")]
			[Address(RVA = "0x9C4F24", Offset = "0x9C4F24", VA = "0x9C4F24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C0F")]
			[Address(RVA = "0x9C4F2C", Offset = "0x9C4F2C", VA = "0x9C4F2C")]
			protected set
			{
			}
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x9C4CF0", Offset = "0x9C4CF0", VA = "0x9C4CF0")]
		public static void SaveApplicationData(BuildPresetData buildPreset)
		{
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0x9C4B28", Offset = "0x9C4B28", VA = "0x9C4B28")]
		protected ErgoApplication()
		{
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0x9C4EA4", Offset = "0x9C4EA4", VA = "0x9C4EA4", Slot = "4")]
		protected virtual ErgoApplicationData DoLoadApplicationData()
		{
			return null;
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0x9C4F38", Offset = "0x9C4F38", VA = "0x9C4F38")]
		public void PauseGame()
		{
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0x9C4F58", Offset = "0x9C4F58", VA = "0x9C4F58")]
		public void ResumeGame()
		{
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0x9C4F74", Offset = "0x9C4F74", VA = "0x9C4F74")]
		public void RestartLevel()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class ErgoApplicationInitFlow : ErgoBaseSceneFlow
	{
		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x9C4F8C", Offset = "0x9C4F8C", VA = "0x9C4F8C", Slot = "7")]
		protected override IEnumerator DoOnFinishedInitialization()
		{
			return null;
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x9C5004", Offset = "0x9C5004", VA = "0x9C5004", Slot = "4")]
		protected override void DoAwake()
		{
		}

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x9C50A4", Offset = "0x9C50A4", VA = "0x9C50A4", Slot = "5")]
		protected override void DoStart()
		{
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x9C50E0", Offset = "0x9C50E0", VA = "0x9C50E0")]
		public ErgoApplicationInitFlow()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	public abstract class ErgoBaseSceneFlow : MonoBehaviour
	{
		[Token(Token = "0x2000481")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D00", Offset = "0x7D8D00")]
		private sealed class <InitializeAndStart>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400226B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400226C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400226D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ErgoBaseSceneFlow <>4__this;

			[Token(Token = "0x170003B0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600257A")]
				[Address(RVA = "0xFF5CF0", Offset = "0xFF5CF0", VA = "0xFF5CF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600257C")]
				[Address(RVA = "0xFF5D5C", Offset = "0xFF5D5C", VA = "0xFF5D5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002577")]
			[Address(RVA = "0xFF55F4", Offset = "0xFF55F4", VA = "0xFF55F4")]
			[DebuggerHidden]
			public <InitializeAndStart>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6002578")]
			[Address(RVA = "0xFF5C14", Offset = "0xFF5C14", VA = "0xFF5C14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002579")]
			[Address(RVA = "0xFF5C18", Offset = "0xFF5C18", VA = "0xFF5C18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600257B")]
			[Address(RVA = "0xFF5CF8", Offset = "0xFF5CF8", VA = "0xFF5CF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000482")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D10", Offset = "0x7D8D10")]
		private sealed class <InitializeSceneFlow>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400226E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400226F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002270")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ErgoBaseSceneFlow <>4__this;

			[Token(Token = "0x170003B2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002580")]
				[Address(RVA = "0xFF616C", Offset = "0xFF616C", VA = "0xFF616C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002582")]
				[Address(RVA = "0xFF61D8", Offset = "0xFF61D8", VA = "0xFF61D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600257D")]
			[Address(RVA = "0xFF5694", Offset = "0xFF5694", VA = "0xFF5694")]
			[DebuggerHidden]
			public <InitializeSceneFlow>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x600257E")]
			[Address(RVA = "0xFF60F0", Offset = "0xFF60F0", VA = "0xFF60F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600257F")]
			[Address(RVA = "0xFF60F4", Offset = "0xFF60F4", VA = "0xFF60F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002581")]
			[Address(RVA = "0xFF6174", Offset = "0xFF6174", VA = "0xFF6174", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000483")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D20", Offset = "0x7D8D20")]
		private sealed class <WaitAndStart>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002271")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002272")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002273")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ErgoBaseSceneFlow <>4__this;

			[Token(Token = "0x170003B4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002586")]
				[Address(RVA = "0xFF650C", Offset = "0xFF650C", VA = "0xFF650C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002588")]
				[Address(RVA = "0xFF6578", Offset = "0xFF6578", VA = "0xFF6578", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002583")]
			[Address(RVA = "0xFF5734", Offset = "0xFF5734", VA = "0xFF5734")]
			[DebuggerHidden]
			public <WaitAndStart>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6002584")]
			[Address(RVA = "0xFF62EC", Offset = "0xFF62EC", VA = "0xFF62EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002585")]
			[Address(RVA = "0xFF62F0", Offset = "0xFF62F0", VA = "0xFF62F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002587")]
			[Address(RVA = "0xFF6514", Offset = "0xFF6514", VA = "0xFF6514", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000484")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D30", Offset = "0x7D8D30")]
		private sealed class <InitializeSceneCoroutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002274")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002275")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002276")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ErgoBaseSceneFlow <>4__this;

			[Token(Token = "0x170003B6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600258C")]
				[Address(RVA = "0xFF607C", Offset = "0xFF607C", VA = "0xFF607C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600258E")]
				[Address(RVA = "0xFF60E8", Offset = "0xFF60E8", VA = "0xFF60E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002589")]
			[Address(RVA = "0xFF57D4", Offset = "0xFF57D4", VA = "0xFF57D4")]
			[DebuggerHidden]
			public <InitializeSceneCoroutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x600258A")]
			[Address(RVA = "0xFF5D64", Offset = "0xFF5D64", VA = "0xFF5D64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600258B")]
			[Address(RVA = "0xFF5D68", Offset = "0xFF5D68", VA = "0xFF5D68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600258D")]
			[Address(RVA = "0xFF6084", Offset = "0xFF6084", VA = "0xFF6084", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000485")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D40", Offset = "0x7D8D40")]
		private sealed class <DoCustomSceneAdditiveLoading>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002277")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002278")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170003B8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002592")]
				[Address(RVA = "0xFF5AEC", Offset = "0xFF5AEC", VA = "0xFF5AEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002594")]
				[Address(RVA = "0xFF5B58", Offset = "0xFF5B58", VA = "0xFF5B58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600258F")]
			[Address(RVA = "0xFF5870", Offset = "0xFF5870", VA = "0xFF5870")]
			[DebuggerHidden]
			public <DoCustomSceneAdditiveLoading>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6002590")]
			[Address(RVA = "0xFF5AAC", Offset = "0xFF5AAC", VA = "0xFF5AAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002591")]
			[Address(RVA = "0xFF5AB0", Offset = "0xFF5AB0", VA = "0xFF5AB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002593")]
			[Address(RVA = "0xFF5AF4", Offset = "0xFF5AF4", VA = "0xFF5AF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000486")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D50", Offset = "0x7D8D50")]
		private sealed class <DoOnFinishedInitialization>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002279")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400227A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170003BA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002598")]
				[Address(RVA = "0xFF5BA0", Offset = "0xFF5BA0", VA = "0xFF5BA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600259A")]
				[Address(RVA = "0xFF5C0C", Offset = "0xFF5C0C", VA = "0xFF5C0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002595")]
			[Address(RVA = "0xFF58FC", Offset = "0xFF58FC", VA = "0xFF58FC")]
			[DebuggerHidden]
			public <DoOnFinishedInitialization>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6002596")]
			[Address(RVA = "0xFF5B60", Offset = "0xFF5B60", VA = "0xFF5B60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002597")]
			[Address(RVA = "0xFF5B64", Offset = "0xFF5B64", VA = "0xFF5B64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002599")]
			[Address(RVA = "0xFF5BA8", Offset = "0xFF5BA8", VA = "0xFF5BA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000487")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D60", Offset = "0x7D8D60")]
		private sealed class <LoadSceneAsync>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400227B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400227C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400227D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sceneName;

			[Token(Token = "0x400227E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action OnComplete;

			[Token(Token = "0x400227F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AsyncOperation <ao>5__2;

			[Token(Token = "0x170003BC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600259E")]
				[Address(RVA = "0xFF6278", Offset = "0xFF6278", VA = "0xFF6278", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025A0")]
				[Address(RVA = "0xFF62E4", Offset = "0xFF62E4", VA = "0xFF62E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600259B")]
			[Address(RVA = "0xFF59B0", Offset = "0xFF59B0", VA = "0xFF59B0")]
			[DebuggerHidden]
			public <LoadSceneAsync>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x600259C")]
			[Address(RVA = "0xFF61E0", Offset = "0xFF61E0", VA = "0xFF61E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600259D")]
			[Address(RVA = "0xFF61E4", Offset = "0xFF61E4", VA = "0xFF61E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600259F")]
			[Address(RVA = "0xFF6280", Offset = "0xFF6280", VA = "0xFF6280", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001160")]
		public const string PREF_MAIN_MENU_SCENE = "pref_main_menu_scene";

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool IS_APP_INITIALIZED;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string NEXT_SCENE_TO_LOAD;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string LEVEL_TO_LOAD;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string CURRENT_LOADED_LEVEL;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool disableInFastInitMode;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] additiveScenesToLoad;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool alreadyInitialized;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF19C", Offset = "0x7DF19C")]
		private bool <isFlowStarted>k__BackingField;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected int scenesLoadingCount;

		[Token(Token = "0x170002D6")]
		public bool isFlowStarted
		{
			[Token(Token = "0x6001C18")]
			[Address(RVA = "0xFF5310", Offset = "0xFF5310", VA = "0xFF5310")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E25E0", Offset = "0x7E25E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C19")]
			[Address(RVA = "0xFF5318", Offset = "0xFF5318", VA = "0xFF5318")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E25F0", Offset = "0x7E25F0")]
			private set
			{
			}
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0xFF5324", Offset = "0xFF5324", VA = "0xFF5324")]
		public static void LoadScene(string sceneToLoad, bool isIngameLevel = false)
		{
		}

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0xFF552C", Offset = "0xFF552C", VA = "0xFF552C")]
		public static void QuitApplication()
		{
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0xFF5534", Offset = "0xFF5534", VA = "0xFF5534")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0xFF5544", Offset = "0xFF5544", VA = "0xFF5544", Slot = "4")]
		protected virtual void DoAwake()
		{
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0xFF5548", Offset = "0xFF5548", VA = "0xFF5548")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0xFF5554", Offset = "0xFF5554", VA = "0xFF5554", Slot = "5")]
		protected virtual void DoStart()
		{
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0xFF5580", Offset = "0xFF5580", VA = "0xFF5580")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2600", Offset = "0x7E2600")]
		public IEnumerator InitializeAndStart()
		{
			return null;
		}

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0xFF5620", Offset = "0xFF5620", VA = "0xFF5620")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2664", Offset = "0x7E2664")]
		public IEnumerator InitializeSceneFlow()
		{
			return null;
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0xFF56C0", Offset = "0xFF56C0", VA = "0xFF56C0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E26C8", Offset = "0x7E26C8")]
		public IEnumerator WaitAndStart()
		{
			return null;
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0xFF5760", Offset = "0xFF5760", VA = "0xFF5760")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E272C", Offset = "0x7E272C")]
		private IEnumerator InitializeSceneCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0xFF5800", Offset = "0xFF5800", VA = "0xFF5800")]
		protected void OnFinishedLoadScene()
		{
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0xFF5810", Offset = "0xFF5810", VA = "0xFF5810", Slot = "6")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2790", Offset = "0x7E2790")]
		protected virtual IEnumerator DoCustomSceneAdditiveLoading()
		{
			return null;
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0xFF589C", Offset = "0xFF589C", VA = "0xFF589C", Slot = "7")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E27F4", Offset = "0x7E27F4")]
		protected virtual IEnumerator DoOnFinishedInitialization()
		{
			return null;
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0xFF5928", Offset = "0xFF5928", VA = "0xFF5928", Slot = "8")]
		protected virtual void DoStartFlow()
		{
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0xFF592C", Offset = "0xFF592C", VA = "0xFF592C", Slot = "9")]
		protected virtual void DoOnAfterStartFlow()
		{
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0xFF5930", Offset = "0xFF5930", VA = "0xFF5930")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2858", Offset = "0x7E2858")]
		protected IEnumerator LoadSceneAsync(string sceneName, [Optional] Action OnComplete)
		{
			return null;
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0xFF59DC", Offset = "0xFF59DC", VA = "0xFF59DC")]
		protected ErgoBaseSceneFlow()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	[ExecuteInEditMode]
	public class ErgoInitializationChecker : MonoBehaviour
	{
		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF1AC", Offset = "0x7DF1AC")]
		private static ErgoInitializationChecker <sharedInstance>k__BackingField;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool fastInitMode;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool isLevelScene;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool addInitScenes;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool removeInitScenes;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string saveGameToLoad;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string gameStateToLoad;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] initScenes;

		[Token(Token = "0x170002D7")]
		public static ErgoInitializationChecker sharedInstance
		{
			[Token(Token = "0x6001C2C")]
			[Address(RVA = "0x100507C", Offset = "0x100507C", VA = "0x100507C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E28BC", Offset = "0x7E28BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C2D")]
			[Address(RVA = "0x10050E4", Offset = "0x10050E4", VA = "0x10050E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E28CC", Offset = "0x7E28CC")]
			private set
			{
			}
		}

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0x1005150", Offset = "0x1005150", VA = "0x1005150")]
		private bool CheckInitScenesPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0x1005238", Offset = "0x1005238", VA = "0x1005238")]
		private void RemoveInitScenes()
		{
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x100529C", Offset = "0x100529C", VA = "0x100529C")]
		private void LoadInitScenes()
		{
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0x1005300", Offset = "0x1005300", VA = "0x1005300")]
		public ErgoInitializationChecker()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	public class ErgoLoadingFlow : ErgoBaseSceneFlow
	{
		[Token(Token = "0x2000488")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D70", Offset = "0x7D8D70")]
		private sealed class <DoOnFinishedInitialization>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002280")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170003BE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025A4")]
				[Address(RVA = "0x10057B8", Offset = "0x10057B8", VA = "0x10057B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025A6")]
				[Address(RVA = "0x1005824", Offset = "0x1005824", VA = "0x1005824", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025A1")]
			[Address(RVA = "0x10054B4", Offset = "0x10054B4", VA = "0x10054B4")]
			[DebuggerHidden]
			public <DoOnFinishedInitialization>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60025A2")]
			[Address(RVA = "0x100571C", Offset = "0x100571C", VA = "0x100571C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025A3")]
			[Address(RVA = "0x1005720", Offset = "0x1005720", VA = "0x1005720", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025A5")]
			[Address(RVA = "0x10057C0", Offset = "0x10057C0", VA = "0x10057C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000489")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D80", Offset = "0x7D8D80")]
		private sealed class <LoadSceneAsync>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ErgoLoadingFlow <>4__this;

			[Token(Token = "0x4002285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AsyncOperation <ao>5__2;

			[Token(Token = "0x4002286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private ErgoSceneFlow <newFlow>5__3;

			[Token(Token = "0x170003C0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025AA")]
				[Address(RVA = "0x1005BB4", Offset = "0x1005BB4", VA = "0x1005BB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025AC")]
				[Address(RVA = "0x1005C20", Offset = "0x1005C20", VA = "0x1005C20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025A7")]
			[Address(RVA = "0x1005628", Offset = "0x1005628", VA = "0x1005628")]
			[DebuggerHidden]
			public <LoadSceneAsync>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60025A8")]
			[Address(RVA = "0x100582C", Offset = "0x100582C", VA = "0x100582C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025A9")]
			[Address(RVA = "0x1005830", Offset = "0x1005830", VA = "0x1005830", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025AB")]
			[Address(RVA = "0x1005BBC", Offset = "0x1005BBC", VA = "0x1005BBC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string WINDOW_UI_LOADING;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string WINDOW_UI_FADE_BLACK;

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0x1005410", Offset = "0x1005410", VA = "0x1005410", Slot = "5")]
		protected override void DoStart()
		{
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0x1005454", Offset = "0x1005454", VA = "0x1005454", Slot = "7")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E28DC", Offset = "0x7E28DC")]
		protected override IEnumerator DoOnFinishedInitialization()
		{
			return null;
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0x10054E0", Offset = "0x10054E0", VA = "0x10054E0", Slot = "8")]
		protected override void DoStartFlow()
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0x10055B0", Offset = "0x10055B0", VA = "0x10055B0", Slot = "10")]
		protected virtual void ShowLoadingScreen()
		{
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x1005584", Offset = "0x1005584", VA = "0x1005584")]
		private void OnFadeDismissed()
		{
		}

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0x10055B4", Offset = "0x10055B4", VA = "0x10055B4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2940", Offset = "0x7E2940")]
		private IEnumerator LoadSceneAsync()
		{
			return null;
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x1005654", Offset = "0x1005654", VA = "0x1005654", Slot = "11")]
		protected virtual void ShowFadeToBlack([Optional] Action OnComplete)
		{
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x1005674", Offset = "0x1005674", VA = "0x1005674", Slot = "12")]
		protected virtual void DismissFadeToBlack([Optional] Action OnComplete)
		{
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x1005694", Offset = "0x1005694", VA = "0x1005694")]
		private void OnFadeShowComplete()
		{
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x1005698", Offset = "0x1005698", VA = "0x1005698")]
		public ErgoLoadingFlow()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public class ErgoSceneFlow : ErgoBaseSceneFlow
	{
		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x1006644", Offset = "0x1006644", VA = "0x1006644", Slot = "4")]
		protected override void DoAwake()
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x1006758", Offset = "0x1006758", VA = "0x1006758")]
		public ErgoSceneFlow()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002C0")]
	public class ErgoBaseObjectData : ErgoData
	{
		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string prefabPoolName;

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0xFF5254", Offset = "0xFF5254", VA = "0xFF5254")]
		public ErgoBaseObjectData()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	public class ErgoAnimatorObject : ErgoBaseObject
	{
		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Animator animator;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Action<AnimationEvent> OnAnimationEvent;

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0x9C48E8", Offset = "0x9C48E8", VA = "0x9C48E8")]
		private void RaiseOnAnimationEvent(AnimationEvent evt)
		{
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x9C495C", Offset = "0x9C495C", VA = "0x9C495C", Slot = "17")]
		protected override void DoAwake()
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x9C49F0", Offset = "0x9C49F0", VA = "0x9C49F0", Slot = "34")]
		protected virtual void AnimationEvent(AnimationEvent evt)
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x9C49F4", Offset = "0x9C49F4", VA = "0x9C49F4")]
		public ErgoAnimatorObject()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public abstract class ErgoBaseFx : ErgoBaseObject
	{
		[Token(Token = "0x200048A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8D90", Offset = "0x7D8D90")]
		private sealed class <PlayCoroutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ErgoBaseFx <>4__this;

			[Token(Token = "0x400228A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action callback;

			[Token(Token = "0x170003C2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025B0")]
				[Address(RVA = "0x9C5AC0", Offset = "0x9C5AC0", VA = "0x9C5AC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025B2")]
				[Address(RVA = "0x9C5B2C", Offset = "0x9C5B2C", VA = "0x9C5B2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025AD")]
			[Address(RVA = "0x9C5744", Offset = "0x9C5744", VA = "0x9C5744")]
			[DebuggerHidden]
			public <PlayCoroutine>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x60025AE")]
			[Address(RVA = "0x9C58D8", Offset = "0x9C58D8", VA = "0x9C58D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025AF")]
			[Address(RVA = "0x9C58DC", Offset = "0x9C58DC", VA = "0x9C58DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025B1")]
			[Address(RVA = "0x9C5AC8", Offset = "0x9C5AC8", VA = "0x9C5AC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200048B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8DA0", Offset = "0x7D8DA0")]
		private sealed class <PlayCoroutine>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400228B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400228C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400228D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ErgoBaseFx <>4__this;

			[Token(Token = "0x400228E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<ErgoBaseFx> callback;

			[Token(Token = "0x170003C4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025B6")]
				[Address(RVA = "0x9C5CDC", Offset = "0x9C5CDC", VA = "0x9C5CDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025B8")]
				[Address(RVA = "0x9C5D48", Offset = "0x9C5D48", VA = "0x9C5D48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025B3")]
			[Address(RVA = "0x9C5770", Offset = "0x9C5770", VA = "0x9C5770")]
			[DebuggerHidden]
			public <PlayCoroutine>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x60025B4")]
			[Address(RVA = "0x9C5B34", Offset = "0x9C5B34", VA = "0x9C5B34", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025B5")]
			[Address(RVA = "0x9C5B38", Offset = "0x9C5B38", VA = "0x9C5B38", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025B7")]
			[Address(RVA = "0x9C5CE4", Offset = "0x9C5CE4", VA = "0x9C5CE4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200048C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8DB0", Offset = "0x7D8DB0")]
		private sealed class <PlayCoroutine>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400228F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ErgoBaseFx <>4__this;

			[Token(Token = "0x170003C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025BC")]
				[Address(RVA = "0x9C5EB8", Offset = "0x9C5EB8", VA = "0x9C5EB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025BE")]
				[Address(RVA = "0x9C5F24", Offset = "0x9C5F24", VA = "0x9C5F24", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025B9")]
			[Address(RVA = "0x9C579C", Offset = "0x9C579C", VA = "0x9C579C")]
			[DebuggerHidden]
			public <PlayCoroutine>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x60025BA")]
			[Address(RVA = "0x9C5D50", Offset = "0x9C5D50", VA = "0x9C5D50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025BB")]
			[Address(RVA = "0x9C5D54", Offset = "0x9C5D54", VA = "0x9C5D54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025BD")]
			[Address(RVA = "0x9C5EC0", Offset = "0x9C5EC0", VA = "0x9C5EC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Action<ErgoBaseFx> OnElementFinished;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "ShowFieldIf", RVA = "0x7DF1CC", Offset = "0x7DF1CC")]
		public float endTime;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool endAfterTime;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		public bool unspawnOnEnd;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		public bool autoPlay;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x97")]
		private bool _isPlaying;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF208", Offset = "0x7DF208")]
		private float <startTime>k__BackingField;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _elapsedTime;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF218", Offset = "0x7DF218")]
		private float <elapsedTime>k__BackingField;

		[Token(Token = "0x170002D8")]
		public virtual bool isPlaying
		{
			[Token(Token = "0x6001C45")]
			[Address(RVA = "0x9C53B8", Offset = "0x9C53B8", VA = "0x9C53B8", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C46")]
			[Address(RVA = "0x9C53C0", Offset = "0x9C53C0", VA = "0x9C53C0")]
			private set
			{
			}
		}

		[Token(Token = "0x170002D9")]
		public float startTime
		{
			[Token(Token = "0x6001C47")]
			[Address(RVA = "0x9C5404", Offset = "0x9C5404", VA = "0x9C5404")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E29A4", Offset = "0x7E29A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C48")]
			[Address(RVA = "0x9C540C", Offset = "0x9C540C", VA = "0x9C540C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E29B4", Offset = "0x7E29B4")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002DA")]
		public float elapsedTime
		{
			[Token(Token = "0x6001C49")]
			[Address(RVA = "0x9C5414", Offset = "0x9C5414", VA = "0x9C5414")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E29C4", Offset = "0x7E29C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C4A")]
			[Address(RVA = "0x9C541C", Offset = "0x9C541C", VA = "0x9C541C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E29D4", Offset = "0x7E29D4")]
			private set
			{
			}
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0x9C5354", Offset = "0x9C5354", VA = "0x9C5354", Slot = "34")]
		public virtual void RaiseOnFinished()
		{
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x9C5424", Offset = "0x9C5424", VA = "0x9C5424", Slot = "18")]
		protected override void DoStart()
		{
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x9C5438", Offset = "0x9C5438", VA = "0x9C5438", Slot = "24")]
		protected override void DoOnUnspawned()
		{
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x9C54C8", Offset = "0x9C54C8", VA = "0x9C54C8", Slot = "33")]
		protected override void DoReset()
		{
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0x9C54F4", Offset = "0x9C54F4", VA = "0x9C54F4", Slot = "19")]
		protected override void DoOnEnable()
		{
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x9C5568", Offset = "0x9C5568", VA = "0x9C5568", Slot = "36")]
		protected virtual void DoOnAutoplayChanged()
		{
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0x9C556C", Offset = "0x9C556C", VA = "0x9C556C", Slot = "37")]
		public virtual void SetValue(string key, float value)
		{
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0x9C5570", Offset = "0x9C5570", VA = "0x9C5570", Slot = "38")]
		public virtual void SetValueAndApply(string key, float value)
		{
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x9C5574", Offset = "0x9C5574", VA = "0x9C5574", Slot = "39")]
		public virtual void ApplyAll()
		{
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x9C553C", Offset = "0x9C553C", VA = "0x9C553C")]
		public void Play()
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x9C55EC", Offset = "0x9C55EC", VA = "0x9C55EC")]
		public void Play(Action callback)
		{
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0x9C5698", Offset = "0x9C5698", VA = "0x9C5698")]
		public void Play(Action<ErgoBaseFx> callback)
		{
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0x9C5618", Offset = "0x9C5618", VA = "0x9C5618")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E29E4", Offset = "0x7E29E4")]
		public IEnumerator PlayCoroutine(Action callback)
		{
			return null;
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0x9C56C4", Offset = "0x9C56C4", VA = "0x9C56C4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2A48", Offset = "0x7E2A48")]
		public IEnumerator PlayCoroutine(Action<ErgoBaseFx> callback)
		{
			return null;
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0x9C5578", Offset = "0x9C5578", VA = "0x9C5578")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2AAC", Offset = "0x7E2AAC")]
		public IEnumerator PlayCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001C59")]
		[Address(RVA = "0x9C57C8", Offset = "0x9C57C8", VA = "0x9C57C8", Slot = "40")]
		protected virtual bool canUnspawn()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0x9C57D0", Offset = "0x9C57D0", VA = "0x9C57D0")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0x9C5818", Offset = "0x9C5818", VA = "0x9C5818")]
		private void UpdateEffect()
		{
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0x9C58B4", Offset = "0x9C58B4", VA = "0x9C58B4", Slot = "41")]
		protected virtual void OnStartPlay()
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x9C58B8", Offset = "0x9C58B8", VA = "0x9C58B8", Slot = "42")]
		protected virtual void OnUpdatePlay()
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0x9C58BC", Offset = "0x9C58BC", VA = "0x9C58BC", Slot = "43")]
		public virtual void OnWillStop()
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0x9C58C0", Offset = "0x9C58C0", VA = "0x9C58C0", Slot = "44")]
		protected virtual void OnEndPlay()
		{
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0x9C58C4", Offset = "0x9C58C4", VA = "0x9C58C4")]
		protected ErgoBaseFx()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public class ErgoBaseObject : MonoBehaviour
	{
		[Token(Token = "0x200048D")]
		public enum BaseObjectStates
		{
			[Token(Token = "0x4002293")]
			UNSPAWNED,
			[Token(Token = "0x4002294")]
			RUNNING,
			[Token(Token = "0x4002295")]
			PAUSED
		}

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string entityTag;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool EnableDebug;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool startAsSpawned;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public TimeManager timeManager;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF238", Offset = "0x7DF238")]
		private GameObjectPool <pool>k__BackingField;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF248", Offset = "0x7DF248")]
		private bool <isSpawned>k__BackingField;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		protected int _uniqueId;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF268", Offset = "0x7DF268")]
		private BaseObjectStates <baseObjectState>k__BackingField;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected bool doFirstUpdate;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		protected bool doFirstFixedUpdate;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		protected bool doFirstLateUpdate;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		protected bool isInitialized;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool isRegisteredToTimeEvents;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action OnStartCalled;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action<ErgoBaseObject> OnStartCalledWithObject;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action OnWillUnspawn;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Action<ErgoBaseObject> OnWillUnspawnWithObject;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool logInmediate;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string logText;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected ErgoData _objectData;

		[Token(Token = "0x170002DB")]
		public GameObjectPool pool
		{
			[Token(Token = "0x6001C61")]
			[Address(RVA = "0x9C5F2C", Offset = "0x9C5F2C", VA = "0x9C5F2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2B10", Offset = "0x7E2B10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C62")]
			[Address(RVA = "0x9C5F34", Offset = "0x9C5F34", VA = "0x9C5F34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2B20", Offset = "0x7E2B20")]
			set
			{
			}
		}

		[Token(Token = "0x170002DC")]
		public bool isSpawned
		{
			[Token(Token = "0x6001C63")]
			[Address(RVA = "0x9C5F3C", Offset = "0x9C5F3C", VA = "0x9C5F3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2B30", Offset = "0x7E2B30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C64")]
			[Address(RVA = "0x9C5F44", Offset = "0x9C5F44", VA = "0x9C5F44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2B40", Offset = "0x7E2B40")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002DD")]
		public virtual int uniqueId
		{
			[Token(Token = "0x6001C65")]
			[Address(RVA = "0x9C5F50", Offset = "0x9C5F50", VA = "0x9C5F50", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C66")]
			[Address(RVA = "0x9C5F58", Offset = "0x9C5F58", VA = "0x9C5F58", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170002DE")]
		public virtual BaseObjectStates baseObjectState
		{
			[Token(Token = "0x6001C67")]
			[Address(RVA = "0x9C5F60", Offset = "0x9C5F60", VA = "0x9C5F60", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2B50", Offset = "0x7E2B50")]
			get
			{
				return default(BaseObjectStates);
			}
			[Token(Token = "0x6001C68")]
			[Address(RVA = "0x9C5F68", Offset = "0x9C5F68", VA = "0x9C5F68", Slot = "7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2B60", Offset = "0x7E2B60")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002DF")]
		public virtual string debugName
		{
			[Token(Token = "0x6001C6E")]
			[Address(RVA = "0x9C6174", Offset = "0x9C6174", VA = "0x9C6174", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E0")]
		public ErgoData objectData
		{
			[Token(Token = "0x6001C6F")]
			[Address(RVA = "0x9C6214", Offset = "0x9C6214", VA = "0x9C6214")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x9C5F70", Offset = "0x9C5F70", VA = "0x9C5F70")]
		protected void RaiseOnStartCalled()
		{
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x9C5FE4", Offset = "0x9C5FE4", VA = "0x9C5FE4")]
		public void RaiseOnWillUnspawn()
		{
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x9C605C", Offset = "0x9C605C", VA = "0x9C605C", Slot = "8")]
		protected virtual void DoRaiseOnWillUnspawn()
		{
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0x9C6060", Offset = "0x9C6060", VA = "0x9C6060")]
		public void Log(string text)
		{
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0x9C611C", Offset = "0x9C611C", VA = "0x9C611C")]
		public void PrintLog()
		{
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0x9C621C", Offset = "0x9C621C", VA = "0x9C621C")]
		public void SetObjectData(ErgoData newData)
		{
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0x9C622C", Offset = "0x9C622C", VA = "0x9C622C", Slot = "10")]
		protected virtual void OnObjectDataUpdated()
		{
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0x9C6230", Offset = "0x9C6230", VA = "0x9C6230", Slot = "11")]
		public virtual Bounds GetBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0x9C623C", Offset = "0x9C623C", VA = "0x9C623C")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0x9C62F0", Offset = "0x9C62F0", VA = "0x9C62F0")]
		public void RenewId()
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0x9C6368", Offset = "0x9C6368", VA = "0x9C6368")]
		public void AssignId(int id)
		{
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0x9C63B8", Offset = "0x9C63B8", VA = "0x9C63B8")]
		protected void Start()
		{
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0x9C63E8", Offset = "0x9C63E8", VA = "0x9C63E8")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x9C6498", Offset = "0x9C6498", VA = "0x9C6498")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0x9C6580", Offset = "0x9C6580", VA = "0x9C6580")]
		protected void OnDestroy()
		{
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0x9C65E0", Offset = "0x9C65E0", VA = "0x9C65E0", Slot = "12")]
		protected virtual void DoOnDestroy()
		{
		}

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0x9C65E4", Offset = "0x9C65E4", VA = "0x9C65E4")]
		public void Initialize([Optional] TimeManager tm)
		{
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0x9C662C", Offset = "0x9C662C", VA = "0x9C662C")]
		public void DeInitialize()
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0x9C666C", Offset = "0x9C666C", VA = "0x9C666C", Slot = "13")]
		protected virtual void DoInitialize()
		{
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0x9C6670", Offset = "0x9C6670", VA = "0x9C6670", Slot = "14")]
		protected virtual void DoDeInitialize()
		{
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0x9C5A50", Offset = "0x9C5A50", VA = "0x9C5A50")]
		public void Unspawn()
		{
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0x9C6674", Offset = "0x9C6674", VA = "0x9C6674")]
		public void ExecuteOnWillUnspawn()
		{
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0x9C66AC", Offset = "0x9C66AC", VA = "0x9C66AC")]
		public void ExecuteOnWillSpawn()
		{
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0x9C66BC", Offset = "0x9C66BC", VA = "0x9C66BC")]
		public void OnSpawned()
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0x9C675C", Offset = "0x9C675C", VA = "0x9C675C")]
		public void OnUnspawned()
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0x9C67B4", Offset = "0x9C67B4", VA = "0x9C67B4")]
		public void SetTag(string tag)
		{
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x9C62BC", Offset = "0x9C62BC", VA = "0x9C62BC")]
		private void RegisterToTagsManager()
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0x9C65AC", Offset = "0x9C65AC", VA = "0x9C65AC")]
		private void UnregisterFromTagsManager()
		{
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x9C6448", Offset = "0x9C6448", VA = "0x9C6448")]
		protected void RegisterTimeEvents()
		{
		}

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0x9C67EC", Offset = "0x9C67EC", VA = "0x9C67EC", Slot = "15")]
		protected virtual void DoRegisterTimeEvents()
		{
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0x9C64C8", Offset = "0x9C64C8", VA = "0x9C64C8")]
		protected void UnregisterTimeEvents()
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0x9C6910", Offset = "0x9C6910", VA = "0x9C6910", Slot = "16")]
		protected virtual void DoUnregisterTimeEvents()
		{
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0x9C6A34", Offset = "0x9C6A34", VA = "0x9C6A34")]
		protected void UpdateInternal()
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0x9C6A9C", Offset = "0x9C6A9C", VA = "0x9C6A9C")]
		private void FixedUpdateInternal()
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0x9C6AA0", Offset = "0x9C6AA0", VA = "0x9C6AA0")]
		protected void LateUpdateInternal()
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0x9C6B08", Offset = "0x9C6B08", VA = "0x9C6B08")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0x9C6B44", Offset = "0x9C6B44", VA = "0x9C6B44")]
		public void Resume()
		{
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0x9C543C", Offset = "0x9C543C", VA = "0x9C543C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0x9C49EC", Offset = "0x9C49EC", VA = "0x9C49EC", Slot = "17")]
		protected virtual void DoAwake()
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x9C5434", Offset = "0x9C5434", VA = "0x9C5434", Slot = "18")]
		protected virtual void DoStart()
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x9C5538", Offset = "0x9C5538", VA = "0x9C5538", Slot = "19")]
		protected virtual void DoOnEnable()
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x9C6B80", Offset = "0x9C6B80", VA = "0x9C6B80", Slot = "20")]
		protected virtual void DoOnDisable()
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x9C6B84", Offset = "0x9C6B84", VA = "0x9C6B84", Slot = "21")]
		protected virtual void DoOnWillSpawn()
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0x9C6B88", Offset = "0x9C6B88", VA = "0x9C6B88", Slot = "22")]
		protected virtual void DoOnSpawned()
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x9C6B8C", Offset = "0x9C6B8C", VA = "0x9C6B8C", Slot = "23")]
		protected virtual void DoUpdateStart()
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x9C54C4", Offset = "0x9C54C4", VA = "0x9C54C4", Slot = "24")]
		protected virtual void DoOnUnspawned()
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x9C6B90", Offset = "0x9C6B90", VA = "0x9C6B90", Slot = "25")]
		protected virtual void DoOnWillUnspawn()
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0x9C6B94", Offset = "0x9C6B94", VA = "0x9C6B94", Slot = "26")]
		protected virtual void DoUpdate()
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0x9C6B98", Offset = "0x9C6B98", VA = "0x9C6B98", Slot = "27")]
		protected virtual void DoFixedUpdateStart()
		{
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0x9C6B9C", Offset = "0x9C6B9C", VA = "0x9C6B9C", Slot = "28")]
		protected virtual void DoFixedUpdate()
		{
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x9C6BA0", Offset = "0x9C6BA0", VA = "0x9C6BA0", Slot = "29")]
		protected virtual void DoLateUpdateStart()
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0x9C6BA4", Offset = "0x9C6BA4", VA = "0x9C6BA4", Slot = "30")]
		protected virtual void DoLateUpdate()
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0x9C6BA8", Offset = "0x9C6BA8", VA = "0x9C6BA8", Slot = "31")]
		protected virtual void DoPause()
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x9C6BAC", Offset = "0x9C6BAC", VA = "0x9C6BAC", Slot = "32")]
		protected virtual void DoResume()
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0x9C54F0", Offset = "0x9C54F0", VA = "0x9C54F0", Slot = "33")]
		protected virtual void DoReset()
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0x9C49F8", Offset = "0x9C49F8", VA = "0x9C49F8")]
		public ErgoBaseObject()
		{
		}
	}
	[Token(Token = "0x20002C4")]
	public class ErgoErgoBaseAnimatorObject : ErgoBaseObject
	{
		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool unspawnOnComplete;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ErgoBaseAnimator motinAnimator;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool playOnSpawn;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string clipName;

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0x10033B4", Offset = "0x10033B4", VA = "0x10033B4", Slot = "17")]
		protected override void DoAwake()
		{
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0x1003418", Offset = "0x1003418", VA = "0x1003418", Slot = "22")]
		protected override void DoOnSpawned()
		{
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0x1003458", Offset = "0x1003458", VA = "0x1003458")]
		public void Play(string clipName)
		{
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0x10034F0", Offset = "0x10034F0", VA = "0x10034F0")]
		private void AnimationCompleteDelegate()
		{
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0x1003504", Offset = "0x1003504", VA = "0x1003504")]
		public ErgoErgoBaseAnimatorObject()
		{
		}
	}
	[Token(Token = "0x20002C5")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7980", Offset = "0x7D7980")]
	public class ErgoParticleSystem : ErgoBaseFx
	{
		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ParticleSystem pSys;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool markedForStop;

		[Token(Token = "0x170002E1")]
		public ParticleSystem PSys
		{
			[Token(Token = "0x6001CA8")]
			[Address(RVA = "0x1006158", Offset = "0x1006158", VA = "0x1006158")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0x1006200", Offset = "0x1006200", VA = "0x1006200", Slot = "41")]
		protected override void OnStartPlay()
		{
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0x10062AC", Offset = "0x10062AC", VA = "0x10062AC")]
		public void StopEmission()
		{
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0x1006350", Offset = "0x1006350", VA = "0x1006350")]
		public void StopEmissionInstant()
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0x1006448", Offset = "0x1006448", VA = "0x1006448", Slot = "26")]
		protected override void DoUpdate()
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0x1006450", Offset = "0x1006450", VA = "0x1006450", Slot = "42")]
		protected override void OnUpdatePlay()
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0x10065C8", Offset = "0x10065C8", VA = "0x10065C8")]
		public ErgoParticleSystem()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class ErgoUnspawnByTime : ErgoBaseObject
	{
		[Token(Token = "0x200048E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8DC0", Offset = "0x7D8DC0")]
		private sealed class <UpdateCoroutine>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ErgoUnspawnByTime <>4__this;

			[Token(Token = "0x170003C8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025C2")]
				[Address(RVA = "0x1006930", Offset = "0x1006930", VA = "0x1006930", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025C4")]
				[Address(RVA = "0x100699C", Offset = "0x100699C", VA = "0x100699C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025BF")]
			[Address(RVA = "0x100686C", Offset = "0x100686C", VA = "0x100686C")]
			[DebuggerHidden]
			public <UpdateCoroutine>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60025C0")]
			[Address(RVA = "0x10068A8", Offset = "0x10068A8", VA = "0x10068A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025C1")]
			[Address(RVA = "0x10068AC", Offset = "0x10068AC", VA = "0x10068AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025C3")]
			[Address(RVA = "0x1006938", Offset = "0x1006938", VA = "0x1006938", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lifeTime;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float elapsedTime;

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0x10067BC", Offset = "0x10067BC", VA = "0x10067BC", Slot = "22")]
		protected override void DoOnSpawned()
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0x10067F8", Offset = "0x10067F8", VA = "0x10067F8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2B70", Offset = "0x7E2B70")]
		private IEnumerator UpdateCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0x1006898", Offset = "0x1006898", VA = "0x1006898")]
		public ErgoUnspawnByTime()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class ErgoUpdateManager : MonoBehaviour
	{
		[Token(Token = "0x200048F")]
		public class ErgoUpdateData
		{
			[Token(Token = "0x4002299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ErgoBaseObject ergoObject;

			[Token(Token = "0x400229A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isDestroyed;

			[Token(Token = "0x60025C5")]
			[Address(RVA = "0x1006BB4", Offset = "0x1006BB4", VA = "0x1006BB4")]
			public ErgoUpdateData()
			{
			}
		}

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ErgoUpdateManager sharedInstance;

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0x10069A4", Offset = "0x10069A4", VA = "0x10069A4")]
		public static ErgoUpdateManager sharedManager()
		{
			return null;
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0x1006A0C", Offset = "0x1006A0C", VA = "0x1006A0C")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0x1006B40", Offset = "0x1006B40", VA = "0x1006B40")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0x1006BA8", Offset = "0x1006BA8", VA = "0x1006BA8")]
		public ErgoUpdateManager()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class TaggedObjectsManager
	{
		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool VERBOSE;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TaggedObjectsManager instance;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, List<GameObject>> _taggedObjects;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF278", Offset = "0x7DF278")]
		private Dictionary<string, List<GameObject>> <taggedObjects>k__BackingField;

		[Token(Token = "0x170002E2")]
		public static TaggedObjectsManager Instance
		{
			[Token(Token = "0x6001CB8")]
			[Address(RVA = "0xAD9284", Offset = "0xAD9284", VA = "0xAD9284")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E3")]
		public Dictionary<string, List<GameObject>> taggedObjects
		{
			[Token(Token = "0x6001CB9")]
			[Address(RVA = "0xAD9300", Offset = "0xAD9300", VA = "0xAD9300")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2BD4", Offset = "0x7E2BD4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CBA")]
			[Address(RVA = "0xAD9308", Offset = "0xAD9308", VA = "0xAD9308")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2BE4", Offset = "0x7E2BE4")]
			protected set
			{
			}
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0xAD91B4", Offset = "0xAD91B4", VA = "0xAD91B4")]
		private TaggedObjectsManager()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0xAD9310", Offset = "0xAD9310", VA = "0xAD9310")]
		public void RegisterObject(ErgoBaseObject obj)
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0xAD94F4", Offset = "0xAD94F4", VA = "0xAD94F4")]
		public void RegisterObjectWithTag(ErgoBaseObject obj, string tag)
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0xAD9724", Offset = "0xAD9724", VA = "0xAD9724")]
		public void UnregisterObject(ErgoBaseObject obj)
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0xAD9964", Offset = "0xAD9964", VA = "0xAD9964")]
		public List<GameObject> GetObjectsByEntityTag(string tag = "")
		{
			return null;
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0xAD9C0C", Offset = "0xAD9C0C", VA = "0xAD9C0C")]
		public List<GameObject> GetObjectsByEntityTags(string[] tags)
		{
			return null;
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0xAD9D24", Offset = "0xAD9D24", VA = "0xAD9D24")]
		public void ClearObjectsWithTag(string tag)
		{
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0xAD9DE0", Offset = "0xAD9DE0", VA = "0xAD9DE0")]
		public void UnregisterAll()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public static class ErgoOperations
	{
		[Token(Token = "0x2000490")]
		public enum CompareMethod
		{
			[Token(Token = "0x400229C")]
			EqualTo,
			[Token(Token = "0x400229D")]
			GreaterThan,
			[Token(Token = "0x400229E")]
			LessThan,
			[Token(Token = "0x400229F")]
			GreaterOrEqualTo,
			[Token(Token = "0x40022A0")]
			LessOrEqualTo
		}

		[Token(Token = "0x2000491")]
		public enum OperationMethod
		{
			[Token(Token = "0x40022A2")]
			Set,
			[Token(Token = "0x40022A3")]
			Add,
			[Token(Token = "0x40022A4")]
			Subtract,
			[Token(Token = "0x40022A5")]
			Multiply,
			[Token(Token = "0x40022A6")]
			Divide
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0x1005CD4", Offset = "0x1005CD4", VA = "0x1005CD4")]
		public static string GetOperationString(OperationMethod om)
		{
			return null;
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x1005D40", Offset = "0x1005D40", VA = "0x1005D40")]
		public static float Operate(float a, float b, OperationMethod om)
		{
			return default(float);
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0x1005D8C", Offset = "0x1005D8C", VA = "0x1005D8C")]
		public static int Operate(int a, int b, OperationMethod om)
		{
			return default(int);
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0x1005DD8", Offset = "0x1005DD8", VA = "0x1005DD8")]
		public static Vector3 Operate(Vector3 a, Vector3 b, OperationMethod om)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x1005F9C", Offset = "0x1005F9C", VA = "0x1005F9C")]
		public static string GetCompareString(CompareMethod cm)
		{
			return null;
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x1006008", Offset = "0x1006008", VA = "0x1006008")]
		public static bool Compare(float a, float b, CompareMethod cm, float floatingPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x10060F0", Offset = "0x10060F0", VA = "0x10060F0")]
		public static bool Compare(int a, int b, CompareMethod cm)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002CA")]
	public class BaseDataManager<K> where K : ErgoData
	{
		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Action OnDataUpdated;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected bool saveInCloud;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected bool saveAsDistributedFiles;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<K> dataList;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<string> namesListlookup;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<int> idsListlookup;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string currentFilePath;

		[Token(Token = "0x6001CC9")]
		protected void RaiseOndataUpdated()
		{
		}

		[Token(Token = "0x6001CCA")]
		protected BaseDataManager()
		{
		}

		[Token(Token = "0x6001CCB")]
		protected void Initialize(string filePath)
		{
		}

		[Token(Token = "0x6001CCC")]
		protected void RefreshLoockups()
		{
		}

		[Token(Token = "0x6001CCD")]
		public virtual void ReloadDatas()
		{
		}

		[Token(Token = "0x6001CCE")]
		public void Save()
		{
		}

		[Token(Token = "0x6001CCF")]
		protected virtual void OnWillSave()
		{
		}

		[Token(Token = "0x6001CD0")]
		protected virtual void OnFinishedSave()
		{
		}

		[Token(Token = "0x6001CD1")]
		public void AddData(K data, bool replaceById = true)
		{
		}

		[Token(Token = "0x6001CD2")]
		public void RemoveData(K data)
		{
		}

		[Token(Token = "0x6001CD3")]
		public int GetIndexById(int dataId)
		{
			return default(int);
		}

		[Token(Token = "0x6001CD4")]
		public K GetByType<T>()
		{
			return null;
		}

		[Token(Token = "0x6001CD5")]
		public K GetById(int dataId)
		{
			return null;
		}

		[Token(Token = "0x6001CD6")]
		public K GetByName(string dataName)
		{
			return null;
		}

		[Token(Token = "0x6001CD7")]
		public int GetIdByName(string dataName)
		{
			return default(int);
		}

		[Token(Token = "0x6001CD8")]
		public K[] GetDataArrayByIds(int[] ids)
		{
			return null;
		}

		[Token(Token = "0x6001CD9")]
		public K[] GetDataArray()
		{
			return null;
		}

		[Token(Token = "0x6001CDA")]
		public string[] GetNamesArray()
		{
			return null;
		}

		[Token(Token = "0x6001CDB")]
		public List<string> GetNamesList()
		{
			return null;
		}

		[Token(Token = "0x6001CDC")]
		public int[] GetIdsArray()
		{
			return null;
		}

		[Token(Token = "0x6001CDD")]
		public List<int> GetIdsList()
		{
			return null;
		}

		[Token(Token = "0x6001CDE")]
		public K GetDataByIndex(int index)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002CB")]
	[AttributeAttribute(Name = "EditorParamsHideFields", RVA = "0x7D79E4", Offset = "0x7D79E4")]
	public class UnitySceneReferenceData : ErgoData
	{
		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scenePath;

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0xADC8BC", Offset = "0xADC8BC", VA = "0xADC8BC")]
		public UnitySceneReferenceData()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class ErgoBinnaryDataSerializer
	{
		[Token(Token = "0x2000492")]
		protected class JsonContainerData : ErgoData
		{
			[Token(Token = "0x40022A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string classType;

			[Token(Token = "0x40022A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string jsonString;

			[Token(Token = "0x60025C6")]
			[Address(RVA = "0xFF6B64", Offset = "0xFF6B64", VA = "0xFF6B64")]
			public JsonContainerData()
			{
			}
		}

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string resourcesPath;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static BindingFlags fieldBindingFlags;

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0xFF6580", Offset = "0xFF6580", VA = "0xFF6580")]
		public static Type GetSerializableDataType(string name)
		{
			return null;
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0xFF6628", Offset = "0xFF6628", VA = "0xFF6628")]
		public static ErgoData InstanceDataFromName(string name)
		{
			return null;
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0xFF670C", Offset = "0xFF670C", VA = "0xFF670C")]
		public static object InstanceFromName(string name)
		{
			return null;
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0xFF67B0", Offset = "0xFF67B0", VA = "0xFF67B0")]
		public static void Save(string filePath, ErgoData data, bool saveToResources = true, bool useCompression = false)
		{
		}

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0xFF6AB0", Offset = "0xFF6AB0", VA = "0xFF6AB0")]
		public static void Save(string filePath, List<ErgoData> datas, bool saveToResources = true, bool useCompression = false)
		{
		}

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0xFF6898", Offset = "0xFF6898", VA = "0xFF6898")]
		public static void Save(string filePath, ErgoData[] datas, bool saveToResources = true, bool useCompression = false)
		{
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0xFF70B0", Offset = "0xFF70B0", VA = "0xFF70B0")]
		public static string[] GetDataNames(string filePath)
		{
			return null;
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0xFF7808", Offset = "0xFF7808", VA = "0xFF7808")]
		public static int[] GetDataIntUniqueIds(string filePath)
		{
			return null;
		}

		[Token(Token = "0x6001CE8")]
		public static T GetDataById<T>(int id, string filePath) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001CE9")]
		public static T GetDataByName<T>(string name, string filePath) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001CEA")]
		public static T[] Load<T>(string filePath, bool loadFromResources = true, bool useCompression = false) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0xFF727C", Offset = "0xFF727C", VA = "0xFF727C")]
		public static ErgoData[] Load(string filePath, bool loadFromResources = true, bool useCompression = false)
		{
			return null;
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0xFF7E8C", Offset = "0xFF7E8C", VA = "0xFF7E8C")]
		public static ErgoData Deserialize(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0xFF8150", Offset = "0xFF8150", VA = "0xFF8150")]
		public static void DeserializeFields(BinaryReader reader, ErgoData dataInstance)
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0xFF8404", Offset = "0xFF8404", VA = "0xFF8404")]
		protected static void DeserializeField(BinaryReader reader, object value, FieldInfo field)
		{
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0xFFB820", Offset = "0xFFB820", VA = "0xFFB820")]
		public static void Serialize(BinaryWriter writer, ErgoData dataInstance)
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0xFFB97C", Offset = "0xFFB97C", VA = "0xFFB97C")]
		public static void SerializeFields(BinaryWriter writer, ErgoData dataInstance)
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0xFFBC34", Offset = "0xFFBC34", VA = "0xFFBC34")]
		protected static void SerializeField(BinaryWriter writer, object value, FieldInfo field)
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0xFFB954", Offset = "0xFFB954", VA = "0xFFB954")]
		public static void SetString(BinaryWriter writer, string name, string value)
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0xFF8130", Offset = "0xFF8130", VA = "0xFF8130")]
		public static string GetString(BinaryReader reader, string name)
		{
			return null;
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0xFFD00C", Offset = "0xFFD00C", VA = "0xFFD00C")]
		public static void SetFloat(BinaryWriter writer, string name, float value)
		{
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0xFF95AC", Offset = "0xFF95AC", VA = "0xFF95AC")]
		public static float GetFloat(BinaryReader reader, string name)
		{
			return default(float);
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0xFFCFC0", Offset = "0xFFCFC0", VA = "0xFFCFC0")]
		public static void SetInt(BinaryWriter writer, string name, int value)
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0xFF9570", Offset = "0xFF9570", VA = "0xFF9570")]
		public static int GetInt(BinaryReader reader, string name)
		{
			return default(int);
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0xFFCFE8", Offset = "0xFFCFE8", VA = "0xFFCFE8")]
		public static void SetBool(BinaryWriter writer, string name, bool value)
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0xFF9590", Offset = "0xFF9590", VA = "0xFF9590")]
		public static bool GetBool(BinaryReader reader, string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0xFFF5A4", Offset = "0xFFF5A4", VA = "0xFFF5A4")]
		public static void SetLong(BinaryWriter writer, string name, long value)
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0xFFF5CC", Offset = "0xFFF5CC", VA = "0xFFF5CC")]
		public static long GetLong(BinaryReader reader, string name)
		{
			return default(long);
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0xFFD110", Offset = "0xFFD110", VA = "0xFFD110")]
		public static void SetVector3(BinaryWriter writer, string name, Vector3 value)
		{
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0xFF96D8", Offset = "0xFF96D8", VA = "0xFF96D8")]
		public static Vector3 GetVector3(BinaryReader reader, string name)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0xFFD02C", Offset = "0xFFD02C", VA = "0xFFD02C")]
		public static void SetVector2(BinaryWriter writer, string name, Vector2 value)
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0xFF95CC", Offset = "0xFF95CC", VA = "0xFF95CC")]
		public static Vector2 GetVector2(BinaryReader reader, string name)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0xFFD230", Offset = "0xFFD230", VA = "0xFFD230")]
		public static void SetVector4(BinaryWriter writer, string name, Vector4 value)
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0xFF9818", Offset = "0xFF9818", VA = "0xFF9818")]
		public static Vector4 GetVector4(BinaryReader reader, string name)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0xFFF65C", Offset = "0xFFF65C", VA = "0xFFF65C")]
		public static void SetQuaternion(BinaryWriter writer, string name, Quaternion value)
		{
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0xFFF7B0", Offset = "0xFFF7B0", VA = "0xFFF7B0")]
		public static Quaternion GetQuaternion(BinaryReader reader, string name)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0xFFD4FC", Offset = "0xFFD4FC", VA = "0xFFD4FC")]
		public static void SetColor(BinaryWriter writer, string name, Color value)
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0xFF9B1C", Offset = "0xFF9B1C", VA = "0xFF9B1C")]
		public static Color GetColor(BinaryReader reader, string name)
		{
			return default(Color);
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0xFFD384", Offset = "0xFFD384", VA = "0xFFD384")]
		public static void SetRect(BinaryWriter writer, string name, Rect value)
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0xFF9994", Offset = "0xFF9994", VA = "0xFF9994")]
		public static Rect GetRect(BinaryReader reader, string name)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0xFFD650", Offset = "0xFFD650", VA = "0xFFD650")]
		public static void SetCurve(BinaryWriter writer, string name, AnimationCurve value)
		{
		}

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0xFF9C78", Offset = "0xFF9C78", VA = "0xFF9C78")]
		public static AnimationCurve GetCurve(BinaryReader reader, string name)
		{
			return null;
		}

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0xFFF92C", Offset = "0xFFF92C", VA = "0xFFF92C")]
		public static void SetObject(BinaryWriter writer, string name, UnityEngine.Object value)
		{
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0xFFF930", Offset = "0xFFF930", VA = "0xFFF930")]
		public static UnityEngine.Object GetObject(BinaryReader reader, string name)
		{
			return null;
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0xFFF938", Offset = "0xFFF938", VA = "0xFFF938")]
		public static void SetDateTime(BinaryWriter writer, string name, DateTime dateTime)
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0xFFF9DC", Offset = "0xFFF9DC", VA = "0xFFF9DC")]
		public static DateTime GetDateTime(BinaryReader reader, string name)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0xFFA370", Offset = "0xFFA370", VA = "0xFFA370")]
		public static ErgoData GetMotinData(BinaryReader reader, string name)
		{
			return null;
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0xFFDDBC", Offset = "0xFFDDBC", VA = "0xFFDDBC")]
		public static void serializeMotinData(BinaryWriter writer, string name, ErgoData value)
		{
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0xFFFA64", Offset = "0xFFFA64", VA = "0xFFFA64")]
		public static void serializeIntArray(BinaryWriter writer, string name, int[] value)
		{
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0xFFFBD4", Offset = "0xFFFBD4", VA = "0xFFFBD4")]
		public static void serializeStringArray(BinaryWriter wirter, string name, string[] value)
		{
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0xFFFD44", Offset = "0xFFFD44", VA = "0xFFFD44")]
		public static void serializeFloatArray(BinaryWriter writer, string name, float[] value)
		{
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0xFFFEBC", Offset = "0xFFFEBC", VA = "0xFFFEBC")]
		public static int[] GetIntArray(BinaryReader reader, string name)
		{
			return null;
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0x1000044", Offset = "0x1000044", VA = "0x1000044")]
		public static float[] GetFloatArray(BinaryReader reader, string name)
		{
			return null;
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0x10001CC", Offset = "0x10001CC", VA = "0x10001CC")]
		public static string[] GetStringArray(BinaryReader reader, string name)
		{
			return null;
		}

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0xFFE600", Offset = "0xFFE600", VA = "0xFFE600")]
		public static void serializeFloatArrayField(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0xFFE060", Offset = "0xFFE060", VA = "0xFFE060")]
		public static void serializeEnumArrayField(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0xFFE408", Offset = "0xFFE408", VA = "0xFFE408")]
		public static void serializeStringArrayField(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0xFFE228", Offset = "0xFFE228", VA = "0xFFE228")]
		public static void serializeIntArrayField(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0xFFED44", Offset = "0xFFED44", VA = "0xFFED44")]
		public static void serializeIntListField(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0xFFF000", Offset = "0xFFF000", VA = "0xFFF000")]
		public static void serializeStringListField(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D1C")]
		[Address(RVA = "0xFFEA88", Offset = "0xFFEA88", VA = "0xFFEA88")]
		public static void serializeEnumListField(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0xFFF2E8", Offset = "0xFFF2E8", VA = "0xFFF2E8")]
		public static void serializeFloatListField(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0xFFDE94", Offset = "0xFFDE94", VA = "0xFFDE94")]
		public static void serializeErgoDataArrayField(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0xFFE7C8", Offset = "0xFFE7C8", VA = "0xFFE7C8")]
		public static void serializeMotinDataList(BinaryWriter writer, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0xFFA97C", Offset = "0xFFA97C", VA = "0xFFA97C")]
		public static void deserializeMotinDataListField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0xFFAFFC", Offset = "0xFFAFFC", VA = "0xFFAFFC")]
		public static void deserializeIntListField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0xFFB2C0", Offset = "0xFFB2C0", VA = "0xFFB2C0")]
		public static void deserializeStringListField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0xFFAD24", Offset = "0xFFAD24", VA = "0xFFAD24")]
		public static void deserializeEnumListField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0xFFB55C", Offset = "0xFFB55C", VA = "0xFFB55C")]
		public static void deserializeFloatListField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0xFFA76C", Offset = "0xFFA76C", VA = "0xFFA76C")]
		public static void deserializeIntArrayField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0xFFA8CC", Offset = "0xFFA8CC", VA = "0xFFA8CC")]
		public static void deserializeFloatArrayField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0xFFA528", Offset = "0xFFA528", VA = "0xFFA528")]
		public static void deserializeEnumArrayField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0xFFA81C", Offset = "0xFFA81C", VA = "0xFFA81C")]
		public static void deserializeStringArrayField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0xFFA3D4", Offset = "0xFFA3D4", VA = "0xFFA3D4")]
		public static void deserializeErgoDataArrayField(BinaryReader reader, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x1000380", Offset = "0x1000380", VA = "0x1000380")]
		public static ErgoData[] deserializeErgoDataArray(BinaryReader reader, string name)
		{
			return null;
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0x10004A4", Offset = "0x10004A4", VA = "0x10004A4")]
		public ErgoBinnaryDataSerializer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002CD")]
	public class ErgoData
	{
		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[EditorReadonlyField]
		public int intUniqueId;

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0xFF52A8", Offset = "0xFF52A8", VA = "0xFF52A8")]
		public ErgoData()
		{
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0x1000518", Offset = "0x1000518", VA = "0x1000518")]
		public ErgoData(string json)
		{
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0x1000688", Offset = "0x1000688", VA = "0x1000688", Slot = "4")]
		public virtual void SetDefaultValues()
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x1000730", Offset = "0x1000730", VA = "0x1000730", Slot = "5")]
		public virtual void OnWillSaveToDisk()
		{
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0x1000734", Offset = "0x1000734", VA = "0x1000734", Slot = "6")]
		public virtual void OnSavedToDisk()
		{
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0x1000738", Offset = "0x1000738", VA = "0x1000738", Slot = "7")]
		public virtual void OnWillSerialize()
		{
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0x100073C", Offset = "0x100073C", VA = "0x100073C", Slot = "8")]
		public virtual void OnFinishedSerializing()
		{
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0x1000740", Offset = "0x1000740", VA = "0x1000740", Slot = "9")]
		public virtual void OnWillDeserialize()
		{
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0x1000744", Offset = "0x1000744", VA = "0x1000744", Slot = "10")]
		public virtual void OnFinishedDeserializing()
		{
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0x10006C8", Offset = "0x10006C8", VA = "0x10006C8")]
		public void ResetUnitqueId()
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0xFF83C4", Offset = "0xFF83C4", VA = "0xFF83C4")]
		public void LoadLookups()
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0x1000898", Offset = "0x1000898", VA = "0x1000898", Slot = "11")]
		protected virtual void DoLoadLookups()
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0x100089C", Offset = "0x100089C", VA = "0x100089C")]
		public void CopyFromData(ErgoData sourceData)
		{
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0x10009E0", Offset = "0x10009E0", VA = "0x10009E0")]
		public string GetJson()
		{
			return null;
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0x100058C", Offset = "0x100058C", VA = "0x100058C")]
		public void SetJson(string json, bool generateNewID = false)
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class ErgoDataSerializer
	{
		[Token(Token = "0x2000493")]
		public enum SerializerFileVersions
		{
			[Token(Token = "0x40022AA")]
			V1,
			[Token(Token = "0x40022AB")]
			V2
		}

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string resourcesPath;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static BindingFlags fieldBindingFlags;

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0x10009E8", Offset = "0x10009E8", VA = "0x10009E8")]
		public static Type GetSerializableDataType(string name)
		{
			return null;
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0x1000A90", Offset = "0x1000A90", VA = "0x1000A90")]
		public static ErgoData InstanceDataFromName(string name)
		{
			return null;
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0x1000B74", Offset = "0x1000B74", VA = "0x1000B74")]
		public static object InstanceFromName(string name)
		{
			return null;
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0x1000C18", Offset = "0x1000C18", VA = "0x1000C18")]
		public static byte[] ZipString(string inString)
		{
			return null;
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0x1000FD8", Offset = "0x1000FD8", VA = "0x1000FD8")]
		public static string UnZipString(byte[] inBuffer)
		{
			return null;
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0x1001338", Offset = "0x1001338", VA = "0x1001338")]
		public static string[] GetDataNames(string filePath)
		{
			return null;
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0x100182C", Offset = "0x100182C", VA = "0x100182C")]
		public static int[] GetDataIntUniqueIds(string filePath)
		{
			return null;
		}

		[Token(Token = "0x6001D43")]
		public static T[] GetDataArray<T>(string filePath) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D44")]
		public static T GetDataById<T>(int id, string filePath) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D45")]
		public static T GetDataByName<T>(string name, string filePath) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0xFF6BC0", Offset = "0xFF6BC0", VA = "0xFF6BC0")]
		public static void SaveStringToFile(string filePath, string inString, bool useCompresion)
		{
		}

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0x1001980", Offset = "0x1001980", VA = "0x1001980")]
		public static string LoadStringFromFile(string filePath, bool useCompresion = false)
		{
			return null;
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0xFF7954", Offset = "0xFF7954", VA = "0xFF7954")]
		public static string LoadStringFromBuffer(byte[] buffer, bool useCompresion = false)
		{
			return null;
		}

		[Token(Token = "0x6001D49")]
		public static T CloneErgoData<T>(ErgoData objectToClone) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0x1001EB8", Offset = "0x1001EB8", VA = "0x1001EB8")]
		public static void Save(string filePath, ErgoData data, bool saveToResources = true, bool useCompression = false, SerializerFileVersions fileVersion = SerializerFileVersions.V2, bool saveAsDistributedFiles = false)
		{
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0x100234C", Offset = "0x100234C", VA = "0x100234C")]
		public static void Save(string filePath, List<ErgoData> datas, bool saveToResources = true, bool useCompression = false, SerializerFileVersions fileVersion = SerializerFileVersions.V2, bool saveAsDistributedFiles = false)
		{
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0x1002418", Offset = "0x1002418", VA = "0x1002418")]
		public static void Save(string filePath, List<ErgoData> datas, bool saveAsDistributedFiles)
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0x10024C8", Offset = "0x10024C8", VA = "0x10024C8")]
		public static void Save(string filePath, ErgoData[] datas, bool saveAsDistributedFiles)
		{
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0x1002550", Offset = "0x1002550", VA = "0x1002550")]
		public static void SaveToCloud(string filePath, ErgoData[] datas)
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0x1001FB8", Offset = "0x1001FB8", VA = "0x1001FB8")]
		public static void Save(string filePath, ErgoData[] datas, bool saveToResources = true, bool useCompression = false, SerializerFileVersions fileVersion = SerializerFileVersions.V2, bool saveAsDistributedFiles = false)
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0x1002778", Offset = "0x1002778", VA = "0x1002778")]
		public static string SaveAsString(ErgoData data, SerializerFileVersions fileVersion = SerializerFileVersions.V2)
		{
			return null;
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0x100298C", Offset = "0x100298C", VA = "0x100298C")]
		public static string SaveAsString(List<ErgoData> datas, SerializerFileVersions fileVersion = SerializerFileVersions.V2)
		{
			return null;
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0x1002848", Offset = "0x1002848", VA = "0x1002848")]
		public static string SaveAsString(ErgoData[] datas, SerializerFileVersions fileVersion = SerializerFileVersions.V2)
		{
			return null;
		}

		[Token(Token = "0x6001D53")]
		public static T LoadSingle<T>(string filePath, bool loadFromResources = true, bool useCompression = false, bool returnErgoFile = false) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D54")]
		public static T LoadAndGet<T>(string filePath, int dataId, bool loadFromResources = true, bool useCompression = false, bool returnErgoFile = false) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D55")]
		public static List<T> LoadList<T>(string filePath, bool loadFromResources = true, bool useCompression = false, bool returnErgoFile = false) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D56")]
		public static T[] Load<T>(string filePath, bool loadFromResources = true, bool useCompression = false, bool returnErgoFile = false, bool loadFromStreamingAssets = false) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0x1002A28", Offset = "0x1002A28", VA = "0x1002A28")]
		public static ErgoData[] LoadFromCloud(string filepath, bool returnErgoFile = false)
		{
			return null;
		}

		[Token(Token = "0x6001D58")]
		public static T[] LoadFromCloud<T>(string filePath, bool returnErgoFile = false) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0x100150C", Offset = "0x100150C", VA = "0x100150C")]
		public static ErgoData[] Load(string filePath, bool loadFromResources = true, bool useCompression = false, bool returnErgoFile = false, bool loadFromStreamingAssets = false)
		{
			return null;
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0x1002A98", Offset = "0x1002A98", VA = "0x1002A98")]
		public static ErgoData[] LoadFromXmlDom(XmlDocument xmlDom, bool returnErgoFile = false)
		{
			return null;
		}

		[Token(Token = "0x6001D5B")]
		public static T[] LoadFromString<T>(string xmlString) where T : ErgoData
		{
			return null;
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0x1002D74", Offset = "0x1002D74", VA = "0x1002D74")]
		public static ErgoData[] LoadFromString(string xmlString)
		{
			return null;
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0x1002EF8", Offset = "0x1002EF8", VA = "0x1002EF8")]
		public ErgoDataSerializer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002CF")]
	public class ErgoEnumAsFlag : ErgoData
	{
		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Type enumType;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int storedFlags;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] storedEnumNames;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string displayName;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<string> selectedValues;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] bits;

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0x1002F74", Offset = "0x1002F74", VA = "0x1002F74")]
		public ErgoEnumAsFlag()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0x1003028", Offset = "0x1003028", VA = "0x1003028")]
		public ErgoEnumAsFlag(string name, Type newEnumType)
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0x10030FC", Offset = "0x10030FC", VA = "0x10030FC")]
		private void StoreNewEnum()
		{
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0x1003174", Offset = "0x1003174", VA = "0x1003174")]
		public void UpdateFlag()
		{
		}

		[Token(Token = "0x6001D63")]
		public T[] GetSelectedValues<T>()
		{
			return null;
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0x100334C", Offset = "0x100334C", VA = "0x100334C")]
		public bool IsOptionSelected(string option)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002D0")]
	public class ErgoFileData : ErgoData
	{
		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ErgoFileIndexData> indexDataList;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ErgoData[] dataList;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected ErgoFileData previousSavedFile;

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0x1003EAC", Offset = "0x1003EAC", VA = "0x1003EAC")]
		public ErgoFileData()
		{
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0x10025C0", Offset = "0x10025C0", VA = "0x10025C0")]
		public ErgoFileData(string filePath, ErgoData[] list)
		{
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0x1003F38", Offset = "0x1003F38", VA = "0x1003F38")]
		public ErgoFileData(string filePath, List<ErgoData> list)
		{
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0x1003F30", Offset = "0x1003F30", VA = "0x1003F30")]
		public void SetErgoDatas(ErgoData[] list)
		{
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0x1004108", Offset = "0x1004108", VA = "0x1004108")]
		public ErgoData[] GetErgoDatas()
		{
			return null;
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0x1004110", Offset = "0x1004110", VA = "0x1004110", Slot = "5")]
		public override void OnWillSaveToDisk()
		{
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0x100417C", Offset = "0x100417C", VA = "0x100417C", Slot = "7")]
		public override void OnWillSerialize()
		{
		}

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0x1004218", Offset = "0x1004218", VA = "0x1004218", Slot = "9")]
		public override void OnWillDeserialize()
		{
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0x100421C", Offset = "0x100421C", VA = "0x100421C", Slot = "10")]
		public override void OnFinishedDeserializing()
		{
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0x1003FF0", Offset = "0x1003FF0", VA = "0x1003FF0")]
		protected void UpdateIndex()
		{
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0x1004240", Offset = "0x1004240", VA = "0x1004240")]
		protected void LoadChilDatas()
		{
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0x100491C", Offset = "0x100491C", VA = "0x100491C")]
		protected string GetChildFilePath(int unitqueID)
		{
			return null;
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0x1004B10", Offset = "0x1004B10", VA = "0x1004B10")]
		protected string GetChildsSubfolderPath()
		{
			return null;
		}
	}
	[Token(Token = "0x20002D1")]
	public class ErgoFileIndexData : ErgoData
	{
		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int referencedDataId;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string referencedDataName;

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0x1004BF0", Offset = "0x1004BF0", VA = "0x1004BF0")]
		public ErgoFileIndexData()
		{
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0x1004898", Offset = "0x1004898", VA = "0x1004898")]
		public ErgoFileIndexData(int refId, string refName)
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public abstract class ErgoXmlSerializer
	{
		[Token(Token = "0x6001D74")]
		[Address(RVA = "0x100266C", Offset = "0x100266C", VA = "0x100266C")]
		public void Serialize(XmlDocument xmlDoc, ErgoData[] dataArray)
		{
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0x100BF10", Offset = "0x100BF10", VA = "0x100BF10")]
		protected void Serialize(XmlElement rootElement, ErgoData[] dataInstance)
		{
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0x1002C54", Offset = "0x1002C54", VA = "0x1002C54")]
		public ErgoData[] Deserialize(XmlDocument xmlDoc)
		{
			return null;
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0x100C134", Offset = "0x100C134", VA = "0x100C134")]
		protected ErgoData[] Deserialize(XmlElement rootElement)
		{
			return null;
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0x100C574", Offset = "0x100C574", VA = "0x100C574", Slot = "4")]
		protected virtual string SerializerVersion()
		{
			return null;
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0x100C5BC", Offset = "0x100C5BC", VA = "0x100C5BC")]
		protected string GetDocumentVersion(XmlElement documentRootElement)
		{
			return null;
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0x100BE88", Offset = "0x100BE88", VA = "0x100BE88")]
		protected void SetDocumentVersion(XmlElement documentRootElement)
		{
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0x100BE00", Offset = "0x100BE00", VA = "0x100BE00")]
		protected void CreateXmlDeclaration(XmlDocument xmlDoc)
		{
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0x100C624", Offset = "0x100C624", VA = "0x100C624", Slot = "5")]
		protected virtual void SetString(XmlElement element, string name, string value)
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0x100C690", Offset = "0x100C690", VA = "0x100C690", Slot = "6")]
		protected virtual void SetFloat(XmlElement element, string name, float value)
		{
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0x100C6E8", Offset = "0x100C6E8", VA = "0x100C6E8", Slot = "7")]
		protected virtual void SetInt(XmlElement element, string name, int value)
		{
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0x100C740", Offset = "0x100C740", VA = "0x100C740", Slot = "8")]
		protected virtual void SetByte(XmlElement element, string name, byte value)
		{
		}

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0x100C798", Offset = "0x100C798", VA = "0x100C798", Slot = "9")]
		protected virtual void SetBool(XmlElement element, string name, bool value)
		{
		}

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0x100C7F4", Offset = "0x100C7F4", VA = "0x100C7F4", Slot = "10")]
		protected virtual void SetLong(XmlElement element, string name, long value)
		{
		}

		[Token(Token = "0x6001D82")]
		[Address(RVA = "0x100C84C", Offset = "0x100C84C", VA = "0x100C84C", Slot = "11")]
		protected virtual void SetVector3(XmlElement element, string name, Vector3 value)
		{
		}

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0x100C850", Offset = "0x100C850", VA = "0x100C850", Slot = "12")]
		protected virtual void SetVector2(XmlElement element, string name, Vector2 value)
		{
		}

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0x100C854", Offset = "0x100C854", VA = "0x100C854", Slot = "13")]
		protected virtual void SetBounds(XmlElement element, string name, Bounds value)
		{
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0x100C9EC", Offset = "0x100C9EC", VA = "0x100C9EC", Slot = "14")]
		protected virtual void SetVector4(XmlElement element, string name, Vector4 value)
		{
		}

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0x100C9F0", Offset = "0x100C9F0", VA = "0x100C9F0", Slot = "15")]
		protected virtual void SetQuaternion(XmlElement element, string name, Quaternion value)
		{
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0x100C9F4", Offset = "0x100C9F4", VA = "0x100C9F4", Slot = "16")]
		protected virtual void SetColor(XmlElement element, string name, Color value)
		{
		}

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0x100C9F8", Offset = "0x100C9F8", VA = "0x100C9F8", Slot = "17")]
		protected virtual void SetRect(XmlElement element, string name, Rect value)
		{
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0x100C9FC", Offset = "0x100C9FC", VA = "0x100C9FC", Slot = "18")]
		protected virtual void SetCurve(XmlElement element, string name, AnimationCurve value)
		{
		}

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0x100CA00", Offset = "0x100CA00", VA = "0x100CA00", Slot = "19")]
		protected virtual void SetDateTime(XmlElement element, string name, DateTime dateTime)
		{
		}

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0x100C004", Offset = "0x100C004", VA = "0x100C004")]
		protected void SetErgoData(XmlElement element, string name, ErgoData value)
		{
		}

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0x100CC54", Offset = "0x100CC54", VA = "0x100CC54", Slot = "20")]
		protected virtual void serializeIntArray(XmlElement element, string name, int[] value)
		{
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0x100CC58", Offset = "0x100CC58", VA = "0x100CC58", Slot = "21")]
		protected virtual void serializeByteArray(XmlElement element, string name, byte[] value)
		{
		}

		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0x100CC5C", Offset = "0x100CC5C", VA = "0x100CC5C", Slot = "22")]
		protected virtual void serializeStringArray(XmlElement element, string name, string[] value)
		{
		}

		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0x100CC60", Offset = "0x100CC60", VA = "0x100CC60", Slot = "23")]
		protected virtual void serializeFloatArray(XmlElement element, string name, float[] value)
		{
		}

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0x100CC64", Offset = "0x100CC64", VA = "0x100CC64", Slot = "24")]
		protected virtual void serializeErgoDataArray(XmlElement element, string name, ErgoData[] value)
		{
		}

		[Token(Token = "0x6001D91")]
		[Address(RVA = "0x100CC68", Offset = "0x100CC68", VA = "0x100CC68")]
		protected void serializeFloatArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0x100CE24", Offset = "0x100CE24", VA = "0x100CE24")]
		protected void serializeEnumArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0x100CFE0", Offset = "0x100CFE0", VA = "0x100CFE0")]
		protected void serializeStringArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D94")]
		[Address(RVA = "0x100D1C4", Offset = "0x100D1C4", VA = "0x100D1C4")]
		protected void serializeIntArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D95")]
		[Address(RVA = "0x100D39C", Offset = "0x100D39C", VA = "0x100D39C")]
		protected void serializeByteArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0x100D574", Offset = "0x100D574", VA = "0x100D574")]
		protected void serializeIntListField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0x100D824", Offset = "0x100D824", VA = "0x100D824")]
		protected void serializeStringListField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0x100DAF8", Offset = "0x100DAF8", VA = "0x100DAF8")]
		protected void serializeEnumListField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0x100DDA8", Offset = "0x100DDA8", VA = "0x100DDA8")]
		protected void serializeFloatListField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0x100E058", Offset = "0x100E058", VA = "0x100E058")]
		protected void serializeErgoDataArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0x100E284", Offset = "0x100E284", VA = "0x100E284")]
		protected void serializeMotinDataList(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0x100E5EC", Offset = "0x100E5EC", VA = "0x100E5EC", Slot = "25")]
		protected virtual string GetString(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0x100E63C", Offset = "0x100E63C", VA = "0x100E63C")]
		protected float GetFloat(XmlElement element, string name)
		{
			return default(float);
		}

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0x100E67C", Offset = "0x100E67C", VA = "0x100E67C")]
		protected int GetInt(XmlElement element, string name)
		{
			return default(int);
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0x100E7F0", Offset = "0x100E7F0", VA = "0x100E7F0")]
		protected byte GetByte(XmlElement element, string name)
		{
			return default(byte);
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0x100E830", Offset = "0x100E830", VA = "0x100E830")]
		protected bool GetBool(XmlElement element, string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0x100E8EC", Offset = "0x100E8EC", VA = "0x100E8EC")]
		protected long GetLong(XmlElement element, string name)
		{
			return default(long);
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0x100EA60", Offset = "0x100EA60", VA = "0x100EA60", Slot = "26")]
		protected virtual Vector3 GetVector3(XmlElement element, string name)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0x100EAC0", Offset = "0x100EAC0", VA = "0x100EAC0", Slot = "27")]
		protected virtual Vector2 GetVector2(XmlElement element, string name)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0x100EB20", Offset = "0x100EB20", VA = "0x100EB20", Slot = "28")]
		protected virtual Vector4 GetVector4(XmlElement element, string name)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0x100EB80", Offset = "0x100EB80", VA = "0x100EB80", Slot = "29")]
		protected virtual Bounds GetBounds(XmlElement element, string name)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0x100EB8C", Offset = "0x100EB8C", VA = "0x100EB8C", Slot = "30")]
		protected virtual Quaternion GetQuaternion(XmlElement element, string name)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0x100EBEC", Offset = "0x100EBEC", VA = "0x100EBEC", Slot = "31")]
		protected virtual Color GetColor(XmlElement element, string name)
		{
			return default(Color);
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0x100EBF4", Offset = "0x100EBF4", VA = "0x100EBF4", Slot = "32")]
		protected virtual Rect GetRect(XmlElement element, string name)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0x100EBFC", Offset = "0x100EBFC", VA = "0x100EBFC", Slot = "33")]
		protected virtual AnimationCurve GetCurve(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0x100EC58", Offset = "0x100EC58", VA = "0x100EC58")]
		protected DateTime GetDateTime(XmlElement element, string name)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0x100EC8C", Offset = "0x100EC8C", VA = "0x100EC8C")]
		protected ErgoData GetErgoData(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0x100C450", Offset = "0x100C450", VA = "0x100C450")]
		protected ErgoData GetErgoData(XmlElement element)
		{
			return null;
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0x100F384", Offset = "0x100F384", VA = "0x100F384", Slot = "34")]
		protected virtual int[] GetIntArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x100F38C", Offset = "0x100F38C", VA = "0x100F38C", Slot = "35")]
		protected virtual byte[] GetByteArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0x100F394", Offset = "0x100F394", VA = "0x100F394", Slot = "36")]
		protected virtual float[] GetFloatArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0x100F39C", Offset = "0x100F39C", VA = "0x100F39C", Slot = "37")]
		protected virtual string[] GetStringArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0x100F3A4", Offset = "0x100F3A4", VA = "0x100F3A4")]
		protected void deserializeMotinDataListField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0x100FA68", Offset = "0x100FA68", VA = "0x100FA68")]
		protected void deserializeIntListField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0x100FD18", Offset = "0x100FD18", VA = "0x100FD18")]
		protected void deserializeStringListField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0x100FFA0", Offset = "0x100FFA0", VA = "0x100FFA0")]
		protected void deserializeEnumListField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0x1010264", Offset = "0x1010264", VA = "0x1010264")]
		protected void deserializeFloatListField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0x1010514", Offset = "0x1010514", VA = "0x1010514")]
		protected void deserializeIntArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0x101058C", Offset = "0x101058C", VA = "0x101058C")]
		protected void deserializeByteArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0x1010604", Offset = "0x1010604", VA = "0x1010604")]
		protected void deserializeFloatArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DB9")]
		[Address(RVA = "0x101067C", Offset = "0x101067C", VA = "0x101067C")]
		protected void deserializeEnumArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0x10108AC", Offset = "0x10108AC", VA = "0x10108AC")]
		protected void deserializeStringArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0x1010924", Offset = "0x1010924", VA = "0x1010924")]
		protected void deserializeErgoDataArrayField(XmlElement element, object target, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0x100F760", Offset = "0x100F760", VA = "0x100F760")]
		protected ErgoData[] deserializeErgoDataArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DBD")]
		[Address(RVA = "0x1010A40", Offset = "0x1010A40", VA = "0x1010A40", Slot = "38")]
		protected virtual Type GetTypeFromElement(XmlElement element)
		{
			return null;
		}

		[Token(Token = "0x6001DBE")]
		[Address(RVA = "0x100F188", Offset = "0x100F188", VA = "0x100F188")]
		protected void DeserializeObjectFields(XmlElement element, object objInstance)
		{
		}

		[Token(Token = "0x6001DBF")]
		[Address(RVA = "0x1010B7C", Offset = "0x1010B7C", VA = "0x1010B7C")]
		protected void DeserializeObjectField(XmlElement element, object value, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0x100CA58", Offset = "0x100CA58", VA = "0x100CA58")]
		protected void SerializeObjectFields(XmlElement element, object objInstance)
		{
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0x1011D08", Offset = "0x1011D08", VA = "0x1011D08")]
		protected void SerializeObjectField(XmlElement element, object value, FieldInfo field)
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0x100EFF4", Offset = "0x100EFF4", VA = "0x100EFF4")]
		protected ErgoData CreateErgoDataFromElement(XmlElement element)
		{
			return null;
		}

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0x10130F0", Offset = "0x10130F0", VA = "0x10130F0")]
		protected XmlElement CreateFieldElement(XmlElement parentElement, string fieldType, string fieldName, string fieldValue)
		{
			return null;
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0x10131D8", Offset = "0x10131D8", VA = "0x10131D8", Slot = "39")]
		protected virtual XmlElement CreateFieldElement(XmlElement parentElement, string fieldType, string fieldName)
		{
			return null;
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0x101328C", Offset = "0x101328C", VA = "0x101328C")]
		protected XmlElement CreateElement(XmlElement parentElement, string elementName)
		{
			return null;
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0x10131A4", Offset = "0x10131A4", VA = "0x10131A4")]
		protected void SetElementAttribute(XmlElement element, string attributeName, string value)
		{
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0x100ECC8", Offset = "0x100ECC8", VA = "0x100ECC8")]
		protected XmlElement GetChildElement(XmlElement parentElement, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0x10132FC", Offset = "0x10132FC", VA = "0x10132FC")]
		protected ErgoXmlSerializer()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public class ErgoXmlSerializerV1 : ErgoXmlSerializer
	{
		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0x1013304", Offset = "0x1013304", VA = "0x1013304", Slot = "4")]
		protected override string SerializerVersion()
		{
			return null;
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0x101334C", Offset = "0x101334C", VA = "0x101334C", Slot = "5")]
		protected override void SetString(XmlElement element, string name, string value)
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0x1013380", Offset = "0x1013380", VA = "0x1013380", Slot = "11")]
		protected override void SetVector3(XmlElement element, string name, Vector3 value)
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0x1013484", Offset = "0x1013484", VA = "0x1013484", Slot = "12")]
		protected override void SetVector2(XmlElement element, string name, Vector2 value)
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0x1013548", Offset = "0x1013548", VA = "0x1013548", Slot = "14")]
		protected override void SetVector4(XmlElement element, string name, Vector4 value)
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0x1013684", Offset = "0x1013684", VA = "0x1013684", Slot = "13")]
		protected override void SetBounds(XmlElement element, string name, Bounds value)
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0x101381C", Offset = "0x101381C", VA = "0x101381C", Slot = "15")]
		protected override void SetQuaternion(XmlElement element, string name, Quaternion value)
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0x1013958", Offset = "0x1013958", VA = "0x1013958", Slot = "16")]
		protected override void SetColor(XmlElement element, string name, Color value)
		{
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0x1013A94", Offset = "0x1013A94", VA = "0x1013A94", Slot = "17")]
		protected override void SetRect(XmlElement element, string name, Rect value)
		{
		}

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0x1013BF4", Offset = "0x1013BF4", VA = "0x1013BF4", Slot = "18")]
		protected override void SetCurve(XmlElement element, string name, AnimationCurve value)
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0x101435C", Offset = "0x101435C", VA = "0x101435C", Slot = "19")]
		protected override void SetDateTime(XmlElement element, string name, DateTime dateTime)
		{
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0x10143B4", Offset = "0x10143B4", VA = "0x10143B4", Slot = "20")]
		protected override void serializeIntArray(XmlElement element, string name, int[] value)
		{
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0x10144E0", Offset = "0x10144E0", VA = "0x10144E0", Slot = "21")]
		protected override void serializeByteArray(XmlElement element, string name, byte[] value)
		{
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0x101460C", Offset = "0x101460C", VA = "0x101460C", Slot = "22")]
		protected override void serializeStringArray(XmlElement element, string name, string[] value)
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0x1014738", Offset = "0x1014738", VA = "0x1014738", Slot = "23")]
		protected override void serializeFloatArray(XmlElement element, string name, float[] value)
		{
		}

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0x1014864", Offset = "0x1014864", VA = "0x1014864", Slot = "24")]
		protected override void serializeErgoDataArray(XmlElement element, string name, ErgoData[] value)
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0x10149C4", Offset = "0x10149C4", VA = "0x10149C4", Slot = "25")]
		protected override string GetString(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0x10149F4", Offset = "0x10149F4", VA = "0x10149F4", Slot = "26")]
		protected override Vector3 GetVector3(XmlElement element, string name)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0x1014B00", Offset = "0x1014B00", VA = "0x1014B00", Slot = "27")]
		protected override Vector2 GetVector2(XmlElement element, string name)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001DDC")]
		[Address(RVA = "0x1014BDC", Offset = "0x1014BDC", VA = "0x1014BDC", Slot = "28")]
		protected override Vector4 GetVector4(XmlElement element, string name)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0x1014D20", Offset = "0x1014D20", VA = "0x1014D20", Slot = "29")]
		protected override Bounds GetBounds(XmlElement element, string name)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0x1014EDC", Offset = "0x1014EDC", VA = "0x1014EDC", Slot = "30")]
		protected override Quaternion GetQuaternion(XmlElement element, string name)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0x1015020", Offset = "0x1015020", VA = "0x1015020", Slot = "31")]
		protected override Color GetColor(XmlElement element, string name)
		{
			return default(Color);
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0x1015144", Offset = "0x1015144", VA = "0x1015144", Slot = "32")]
		protected override Rect GetRect(XmlElement element, string name)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0x1015294", Offset = "0x1015294", VA = "0x1015294", Slot = "33")]
		protected override AnimationCurve GetCurve(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0x1015820", Offset = "0x1015820", VA = "0x1015820", Slot = "34")]
		protected override int[] GetIntArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0x1015968", Offset = "0x1015968", VA = "0x1015968", Slot = "35")]
		protected override byte[] GetByteArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0x1015AB0", Offset = "0x1015AB0", VA = "0x1015AB0", Slot = "36")]
		protected override float[] GetFloatArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0x1015BF8", Offset = "0x1015BF8", VA = "0x1015BF8", Slot = "37")]
		protected override string[] GetStringArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0x1015D78", Offset = "0x1015D78", VA = "0x1015D78", Slot = "39")]
		protected override XmlElement CreateFieldElement(XmlElement parentElement, string fieldType, string fieldName)
		{
			return null;
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0x1002664", Offset = "0x1002664", VA = "0x1002664")]
		public ErgoXmlSerializerV1()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class ErgoXmlSerializerV2 : ErgoXmlSerializer
	{
		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0xACD6D8", Offset = "0xACD6D8", VA = "0xACD6D8", Slot = "4")]
		protected override string SerializerVersion()
		{
			return null;
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0xACD720", Offset = "0xACD720", VA = "0xACD720", Slot = "25")]
		protected override string GetString(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0xACD7C4", Offset = "0xACD7C4", VA = "0xACD7C4", Slot = "26")]
		protected override Vector3 GetVector3(XmlElement element, string name)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0xACD8F4", Offset = "0xACD8F4", VA = "0xACD8F4", Slot = "27")]
		protected override Vector2 GetVector2(XmlElement element, string name)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0xACD9FC", Offset = "0xACD9FC", VA = "0xACD9FC", Slot = "28")]
		protected override Vector4 GetVector4(XmlElement element, string name)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0xACDB5C", Offset = "0xACDB5C", VA = "0xACDB5C", Slot = "29")]
		protected override Bounds GetBounds(XmlElement element, string name)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0xACDD44", Offset = "0xACDD44", VA = "0xACDD44", Slot = "30")]
		protected override Quaternion GetQuaternion(XmlElement element, string name)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0xACDEA4", Offset = "0xACDEA4", VA = "0xACDEA4", Slot = "31")]
		protected override Color GetColor(XmlElement element, string name)
		{
			return default(Color);
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0xACDFC0", Offset = "0xACDFC0", VA = "0xACDFC0", Slot = "32")]
		protected override Rect GetRect(XmlElement element, string name)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0xACE104", Offset = "0xACE104", VA = "0xACE104", Slot = "33")]
		protected override AnimationCurve GetCurve(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0xACE360", Offset = "0xACE360", VA = "0xACE360", Slot = "34")]
		protected override int[] GetIntArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0xACE4BC", Offset = "0xACE4BC", VA = "0xACE4BC", Slot = "35")]
		protected override byte[] GetByteArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0xACE618", Offset = "0xACE618", VA = "0xACE618", Slot = "36")]
		protected override float[] GetFloatArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0xACE774", Offset = "0xACE774", VA = "0xACE774", Slot = "37")]
		protected override string[] GetStringArray(XmlElement element, string name)
		{
			return null;
		}

		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0xACE8FC", Offset = "0xACE8FC", VA = "0xACE8FC", Slot = "5")]
		protected override void SetString(XmlElement element, string fieldName, string value)
		{
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0xACE9C4", Offset = "0xACE9C4", VA = "0xACE9C4", Slot = "6")]
		protected override void SetFloat(XmlElement element, string fieldName, float value)
		{
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0xACEA8C", Offset = "0xACEA8C", VA = "0xACEA8C", Slot = "7")]
		protected override void SetInt(XmlElement element, string fieldName, int value)
		{
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0xACEB54", Offset = "0xACEB54", VA = "0xACEB54", Slot = "8")]
		protected override void SetByte(XmlElement element, string name, byte value)
		{
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0xACEC1C", Offset = "0xACEC1C", VA = "0xACEC1C", Slot = "9")]
		protected override void SetBool(XmlElement element, string name, bool value)
		{
		}

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0xACECE4", Offset = "0xACECE4", VA = "0xACECE4", Slot = "10")]
		protected override void SetLong(XmlElement element, string name, long value)
		{
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0xACEDB4", Offset = "0xACEDB4", VA = "0xACEDB4", Slot = "11")]
		protected override void SetVector3(XmlElement element, string name, Vector3 value)
		{
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0xACEEF8", Offset = "0xACEEF8", VA = "0xACEEF8", Slot = "12")]
		protected override void SetVector2(XmlElement element, string name, Vector2 value)
		{
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0xACF008", Offset = "0xACF008", VA = "0xACF008", Slot = "14")]
		protected override void SetVector4(XmlElement element, string name, Vector4 value)
		{
		}

		[Token(Token = "0x6001DFF")]
		[Address(RVA = "0xACF178", Offset = "0xACF178", VA = "0xACF178", Slot = "13")]
		protected override void SetBounds(XmlElement element, string name, Bounds value)
		{
		}

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0xACF384", Offset = "0xACF384", VA = "0xACF384", Slot = "15")]
		protected override void SetQuaternion(XmlElement element, string name, Quaternion value)
		{
		}

		[Token(Token = "0x6001E01")]
		[Address(RVA = "0xACF4F4", Offset = "0xACF4F4", VA = "0xACF4F4", Slot = "16")]
		protected override void SetColor(XmlElement element, string name, Color value)
		{
		}

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0xACF664", Offset = "0xACF664", VA = "0xACF664", Slot = "17")]
		protected override void SetRect(XmlElement element, string name, Rect value)
		{
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0xACF7D4", Offset = "0xACF7D4", VA = "0xACF7D4", Slot = "18")]
		protected override void SetCurve(XmlElement element, string name, AnimationCurve value)
		{
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0xACFB54", Offset = "0xACFB54", VA = "0xACFB54", Slot = "19")]
		protected override void SetDateTime(XmlElement element, string name, DateTime dateTime)
		{
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0xACFBAC", Offset = "0xACFBAC", VA = "0xACFBAC", Slot = "20")]
		protected override void serializeIntArray(XmlElement element, string name, int[] value)
		{
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0xACFCF4", Offset = "0xACFCF4", VA = "0xACFCF4", Slot = "21")]
		protected override void serializeByteArray(XmlElement element, string name, byte[] value)
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0xACFE3C", Offset = "0xACFE3C", VA = "0xACFE3C", Slot = "22")]
		protected override void serializeStringArray(XmlElement element, string name, string[] value)
		{
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0xACFF84", Offset = "0xACFF84", VA = "0xACFF84", Slot = "23")]
		protected override void serializeFloatArray(XmlElement element, string name, float[] value)
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0xAD00CC", Offset = "0xAD00CC", VA = "0xAD00CC", Slot = "24")]
		protected override void serializeErgoDataArray(XmlElement element, string name, ErgoData[] value)
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0xAD01F8", Offset = "0xAD01F8", VA = "0xAD01F8")]
		public ErgoXmlSerializerV2()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public sealed class AttributeUsageAttribute : Attribute
	{
		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF298", Offset = "0x7DF298")]
		private bool <AllowMultiple>k__BackingField;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF2A8", Offset = "0x7DF2A8")]
		private bool <Inherited>k__BackingField;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF2B8", Offset = "0x7DF2B8")]
		private AttributeTargets <ValidOn>k__BackingField;

		[Token(Token = "0x170002E4")]
		public bool AllowMultiple
		{
			[Token(Token = "0x6001E0C")]
			[Address(RVA = "0x9C3A5C", Offset = "0x9C3A5C", VA = "0x9C3A5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2BF4", Offset = "0x7E2BF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E0D")]
			[Address(RVA = "0x9C3A64", Offset = "0x9C3A64", VA = "0x9C3A64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2C04", Offset = "0x7E2C04")]
			set
			{
			}
		}

		[Token(Token = "0x170002E5")]
		public bool Inherited
		{
			[Token(Token = "0x6001E0E")]
			[Address(RVA = "0x9C3A70", Offset = "0x9C3A70", VA = "0x9C3A70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2C14", Offset = "0x7E2C14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E0F")]
			[Address(RVA = "0x9C3A78", Offset = "0x9C3A78", VA = "0x9C3A78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2C24", Offset = "0x7E2C24")]
			set
			{
			}
		}

		[Token(Token = "0x170002E6")]
		public AttributeTargets ValidOn
		{
			[Token(Token = "0x6001E10")]
			[Address(RVA = "0x9C3A84", Offset = "0x9C3A84", VA = "0x9C3A84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2C34", Offset = "0x7E2C34")]
			get
			{
				return default(AttributeTargets);
			}
			[Token(Token = "0x6001E11")]
			[Address(RVA = "0x9C3A8C", Offset = "0x9C3A8C", VA = "0x9C3A8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2C44", Offset = "0x7E2C44")]
			set
			{
			}
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0x9C3A54", Offset = "0x9C3A54", VA = "0x9C3A54")]
		public AttributeUsageAttribute(AttributeTargets validOn)
		{
		}
	}
	[Token(Token = "0x20002D6")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x7D7A5C", Offset = "0x7D7A5C")]
	public abstract class CustomDrawerAttribute : Attribute
	{
		[Token(Token = "0x6001E12")]
		[Address(RVA = "0x9C445C", Offset = "0x9C445C", VA = "0x9C445C")]
		protected CustomDrawerAttribute()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public class EditorDefaultObjectField : Attribute
	{
		[Token(Token = "0x6001E13")]
		[Address(RVA = "0x9C4518", Offset = "0x9C4518", VA = "0x9C4518")]
		public EditorDefaultObjectField()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	public class EditorTk2dSpriteField : Attribute
	{
		[Token(Token = "0x6001E14")]
		[Address(RVA = "0x9C48D8", Offset = "0x9C48D8", VA = "0x9C48D8")]
		public EditorTk2dSpriteField()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class EditorSoundEnumField : Attribute
	{
		[Token(Token = "0x6001E15")]
		[Address(RVA = "0x9C48D0", Offset = "0x9C48D0", VA = "0x9C48D0")]
		public EditorSoundEnumField()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class EditorLocalizationEnumField : Attribute
	{
		[Token(Token = "0x6001E16")]
		[Address(RVA = "0x9C461C", Offset = "0x9C461C", VA = "0x9C461C")]
		public EditorLocalizationEnumField()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x7D7A70", Offset = "0x7D7A70")]
	public class EditorEnumFieldAttribute : CustomDrawerAttribute
	{
		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type enumeration;

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0x9C454C", Offset = "0x9C454C", VA = "0x9C454C")]
		public EditorEnumFieldAttribute(Type enumtype)
		{
		}
	}
	[Token(Token = "0x20002DC")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x7D7A84", Offset = "0x7D7A84")]
	public class EntityEnumAttribute : CustomDrawerAttribute
	{
		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type enumeration;

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0x9C48E0", Offset = "0x9C48E0", VA = "0x9C48E0")]
		public EntityEnumAttribute(Type enumtype)
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public class EditorErgoDataEnumField : Attribute
	{
		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string filePath;

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0x9C4578", Offset = "0x9C4578", VA = "0x9C4578")]
		public EditorErgoDataEnumField(string file)
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public class UseCustomEditor : Attribute
	{
		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string editorType;

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0xADC91C", Offset = "0xADC91C", VA = "0xADC91C")]
		public UseCustomEditor(string t)
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public class EditorErgoDataOpenWindow : Attribute
	{
		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string nspace;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string nscript;

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0x9C45E4", Offset = "0x9C45E4", VA = "0x9C45E4")]
		public EditorErgoDataOpenWindow(string scriptName, [Optional] string nameSpace)
		{
		}
	}
	[Token(Token = "0x20002E0")]
	public class EditorReadonlyField : Attribute
	{
		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0x9C48C8", Offset = "0x9C48C8", VA = "0x9C48C8")]
		public EditorReadonlyField()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	public class EditorParamNamespaces : Attribute
	{
		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] namespaces;

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0x9C4624", Offset = "0x9C4624", VA = "0x9C4624")]
		public EditorParamNamespaces(params string[] args)
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class EditorParamTypes : Attribute
	{
		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type[] types;

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0x9C4650", Offset = "0x9C4650", VA = "0x9C4650")]
		public EditorParamTypes(params Type[] args)
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class EditorParams : Attribute
	{
		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EditorTypes editorType;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color editorColor;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string editorName;

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0x9C467C", Offset = "0x9C467C", VA = "0x9C467C")]
		public EditorParams(EditorTypes type, string color = "FFFFFFFF", string name = "BaseEditor")
		{
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0x9C4740", Offset = "0x9C4740", VA = "0x9C4740")]
		public EditorParams(string name)
		{
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0x9C47BC", Offset = "0x9C47BC", VA = "0x9C47BC")]
		public EditorParams(string name = "BaseEditor", string color = "FFFFFFFF")
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class EditorDisplayName : Attribute
	{
		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0x9C4520", Offset = "0x9C4520", VA = "0x9C4520")]
		public EditorDisplayName(string showname)
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public class EditorParamsReadonlyFields : Attribute
	{
		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] readonlyFields;

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0x9C489C", Offset = "0x9C489C", VA = "0x9C489C")]
		public EditorParamsReadonlyFields(params string[] args)
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public class EditorParamsHideFields : Attribute
	{
		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] hideFields;

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0x9C4870", Offset = "0x9C4870", VA = "0x9C4870")]
		public EditorParamsHideFields(params string[] args)
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class ShowFieldIf : Attribute
	{
		[Token(Token = "0x2000494")]
		private enum VALUE_TYPES
		{
			[Token(Token = "0x40022AD")]
			NONE,
			[Token(Token = "0x40022AE")]
			BOOL,
			[Token(Token = "0x40022AF")]
			INT
		}

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string showField;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VALUE_TYPES valueType;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool compareValueBool;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int compareValueInt;

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0xAD7D64", Offset = "0xAD7D64", VA = "0xAD7D64")]
		public ShowFieldIf(string fieldName, bool compareValue)
		{
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0xAD7DAC", Offset = "0xAD7DAC", VA = "0xAD7DAC")]
		public ShowFieldIf(string fieldName, int compareValue)
		{
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0xAD7DF0", Offset = "0xAD7DF0", VA = "0xAD7DF0", Slot = "7")]
		public virtual bool GetIfVisible(FieldInfo[] fields, object targetInstance)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002E8")]
	public class ErgoDontSerialize : Attribute
	{
		[Token(Token = "0x6001E28")]
		[Address(RVA = "0x1002F6C", Offset = "0x1002F6C", VA = "0x1002F6C")]
		public ErgoDontSerialize()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class ErgoSaveAsFile : Attribute
	{
		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string fileName;

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0x10065D0", Offset = "0x10065D0", VA = "0x10065D0")]
		public ErgoSaveAsFile(string name)
		{
		}
	}
	[Token(Token = "0x20002EA")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x7D7A98", Offset = "0x7D7A98")]
	public class ErgoMenuItem : Attribute
	{
		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string menuItem;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool validate;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int priority;

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0x1005C28", Offset = "0x1005C28", VA = "0x1005C28")]
		public ErgoMenuItem(string itemName)
		{
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0x1005C34", Offset = "0x1005C34", VA = "0x1005C34")]
		public ErgoMenuItem(string itemName, bool isValidateFunction)
		{
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0x1005C40", Offset = "0x1005C40", VA = "0x1005C40")]
		internal ErgoMenuItem(string itemName, bool isValidateFunction, bool internalMenu)
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public enum EditorTypes
	{
		[Token(Token = "0x40011D4")]
		DEFAULT,
		[Token(Token = "0x40011D5")]
		BASE_ARRAY,
		[Token(Token = "0x40011D6")]
		LIST_EDITOR
	}
	[Token(Token = "0x20002EC")]
	public static class ErgoExtensions
	{
		[Token(Token = "0x2000495")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8DD0", Offset = "0x7D8DD0")]
		private sealed class <>c__DisplayClass2_0<T>
		{
			[Token(Token = "0x40022B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public System.Random rnd;

			[Token(Token = "0x60025C7")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60025C8")]
			internal int <Randomize>b__0(T item)
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0x1003564", Offset = "0x1003564", VA = "0x1003564")]
		public static string ToReadableString(this TimeSpan span)
		{
			return null;
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0x100386C", Offset = "0x100386C", VA = "0x100386C")]
		public static string ToRomanNumeral(this int value)
		{
			return null;
		}

		[Token(Token = "0x6001E2F")]
		public static IEnumerable<T> Randomize<T>(this IEnumerable<T> source)
		{
			return null;
		}

		[Token(Token = "0x6001E30")]
		public static void AddUnique<T, K>(this Dictionary<T, K> source, T key, K value)
		{
		}

		[Token(Token = "0x6001E31")]
		public static void AddUnique<T>(this List<T> source, T value)
		{
		}

		[Token(Token = "0x6001E32")]
		public static void InsertUnique<T>(this List<T> source, int index, T value)
		{
		}

		[Token(Token = "0x6001E33")]
		public static void RemoveSafe<T>(this List<T> source, T value)
		{
		}

		[Token(Token = "0x6001E34")]
		public static void Shuffle<T>(this IList<T> list)
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0x1003BA4", Offset = "0x1003BA4", VA = "0x1003BA4")]
		public static Renderer[] GetRenderersExt(this GameObject rootGO, bool includeChildren = true, bool includeInactive = false)
		{
			return null;
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0x1003C9C", Offset = "0x1003C9C", VA = "0x1003C9C")]
		public static Bounds GetBoundsExt(this GameObject rootGO, bool includeChildren = true, bool includeInactive = false)
		{
			return default(Bounds);
		}
	}
	[Token(Token = "0x20002ED")]
	public class ErgoUtils
	{
		[Token(Token = "0x2000496")]
		public struct Tuple<T1, T2>
		{
			[Token(Token = "0x40022B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly T1 Item1;

			[Token(Token = "0x40022B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly T2 Item2;

			[Token(Token = "0x60025C9")]
			public Tuple(T1 item1, T2 item2)
			{
			}
		}

		[Token(Token = "0x2000497")]
		public enum DistanceType
		{
			[Token(Token = "0x40022B4")]
			DISTANCE,
			[Token(Token = "0x40022B5")]
			SQRDISTANCE,
			[Token(Token = "0x40022B6")]
			PATH
		}

		[Token(Token = "0x2000498")]
		public struct FastEnumIntEqualityComparer<TEnum> : IEqualityComparer<TEnum> where TEnum : struct
		{
			[Token(Token = "0x20004F7")]
			private static class BoxAvoidance
			{
				[Token(Token = "0x4002471")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				private static readonly Func<TEnum, int> _wrapper;

				[Token(Token = "0x600261D")]
				public static int ToInt(TEnum enu)
				{
					return default(int);
				}

				[Token(Token = "0x600261E")]
				static BoxAvoidance()
				{
				}
			}

			[Token(Token = "0x60025CA")]
			public bool Equals(TEnum firstEnum, TEnum secondEnum)
			{
				return default(bool);
			}

			[Token(Token = "0x60025CB")]
			public int GetHashCode(TEnum firstEnum)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000499")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8DE0", Offset = "0x7D8DE0")]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x40022B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string nameSpace;

			[Token(Token = "0x60025CC")]
			[Address(RVA = "0x1007D28", Offset = "0x1007D28", VA = "0x1007D28")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x60025CD")]
			[Address(RVA = "0x100BB28", Offset = "0x100BB28", VA = "0x100BB28")]
			internal bool <GetTypesInNamespace>b__0(Type type)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200049A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8DF0", Offset = "0x7D8DF0")]
		private sealed class <>c__DisplayClass66_0
		{
			[Token(Token = "0x40022B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<uint, bool> reversed;

			[Token(Token = "0x40022B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Dictionary<uint, int> map;

			[Token(Token = "0x60025CE")]
			[Address(RVA = "0x100A8C0", Offset = "0x100A8C0", VA = "0x100A8C0")]
			public <>c__DisplayClass66_0()
			{
			}

			[Token(Token = "0x60025CF")]
			[Address(RVA = "0x100BB70", Offset = "0x100BB70", VA = "0x100BB70")]
			internal void <GetNavMeshBorders>b__0(ushort a, ushort b)
			{
			}
		}

		[Token(Token = "0x200049B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E00", Offset = "0x7D8E00")]
		private sealed class <WaitForAnimatorTransition>d__68 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40022BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40022BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40022BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Animator animator;

			[Token(Token = "0x40022BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int layer;

			[Token(Token = "0x40022BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string tagName;

			[Token(Token = "0x40022BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool <completed>5__2;

			[Token(Token = "0x170003CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025D3")]
				[Address(RVA = "0x100BD8C", Offset = "0x100BD8C", VA = "0x100BD8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025D5")]
				[Address(RVA = "0x100BDF8", Offset = "0x100BDF8", VA = "0x100BDF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025D0")]
			[Address(RVA = "0x100B120", Offset = "0x100B120", VA = "0x100B120")]
			[DebuggerHidden]
			public <WaitForAnimatorTransition>d__68(int <>1__state)
			{
			}

			[Token(Token = "0x60025D1")]
			[Address(RVA = "0x100BC6C", Offset = "0x100BC6C", VA = "0x100BC6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025D2")]
			[Address(RVA = "0x100BC70", Offset = "0x100BC70", VA = "0x100BC70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025D4")]
			[Address(RVA = "0x100BD94", Offset = "0x100BD94", VA = "0x100BD94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static System.Random randomGenerator;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Vector3[] boxExtents;

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0x1006BBC", Offset = "0x1006BBC", VA = "0x1006BBC")]
		public static Bounds GetBoundsFromRenderers(List<Renderer> renderers)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0x1003D38", Offset = "0x1003D38", VA = "0x1003D38")]
		public static Bounds GetBoundsFromRenderers(Renderer[] renderers)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001E39")]
		public static Tuple<T1, T2> CreateTuple<T1, T2>(T1 item1, T2 item2)
		{
			return default(Tuple<T1, T2>);
		}

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0x1006C58", Offset = "0x1006C58", VA = "0x1006C58")]
		public static bool IsInLayerMask(int layer, LayerMask layerMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0x1006C94", Offset = "0x1006C94", VA = "0x1006C94")]
		public static string GetResourcesPath(string path)
		{
			return null;
		}

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0x1006DB0", Offset = "0x1006DB0", VA = "0x1006DB0")]
		public static string GetUniqueString()
		{
			return null;
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0x10007B8", Offset = "0x10007B8", VA = "0x10007B8")]
		public static int GetUniqueInteger()
		{
			return default(int);
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0x1006E70", Offset = "0x1006E70", VA = "0x1006E70")]
		public static Vector3 GetRandomDirection(float xRange, float yRange, float zRange)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0x1006F34", Offset = "0x1006F34", VA = "0x1006F34")]
		public static void GetRandomDirection(float xRange, float yRange, float zRange, out Vector3 randomDirection)
		{
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0x1006FFC", Offset = "0x1006FFC", VA = "0x1006FFC")]
		public static Vector3 RotateVector(Vector3 vector, float angle, Vector3 axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0x10070BC", Offset = "0x10070BC", VA = "0x10070BC")]
		public static Vector3 RotateVector(Vector3 vector, Vector3 axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0x100716C", Offset = "0x100716C", VA = "0x100716C")]
		public static Vector3 FlattenVector(Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0x1007174", Offset = "0x1007174", VA = "0x1007174")]
		public static Vector3 ToVector3XY(Vector2 vector2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0x10071A8", Offset = "0x10071A8", VA = "0x10071A8")]
		public static Vector3 ToVector3XZ(Vector2 vector2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0x10071E4", Offset = "0x10071E4", VA = "0x10071E4")]
		public static Vector2 ToVector2XY(Vector3 vector3)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0x1007210", Offset = "0x1007210", VA = "0x1007210")]
		public static Vector2 ToVector2XZ(Vector3 vector3)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001E47")]
		public static T StringToEnum<T>(string name)
		{
			return (T)null;
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0x1007240", Offset = "0x1007240", VA = "0x1007240")]
		public static object StringToEnumObject(string name, Type enumType)
		{
			return null;
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0x100737C", Offset = "0x100737C", VA = "0x100737C")]
		public static int StringArrayIndex(string[] stringArray, string value)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0x100741C", Offset = "0x100741C", VA = "0x100741C")]
		public static int IntArrayIndex(int[] intArray, int value)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4B")]
		public static int EnumStringToIndex<T>(string name)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4C")]
		public static int EnumIndexFromId<T>(int id)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4D")]
		public static string EnumNameFromId<T>(int id)
		{
			return null;
		}

		[Token(Token = "0x6001E4E")]
		public static T EnumFromId<T>(int id)
		{
			return (T)null;
		}

		[Token(Token = "0x6001E4F")]
		public static T indexToEnum<T>(int index)
		{
			return (T)null;
		}

		[Token(Token = "0x6001E50")]
		public static string[] EnumNames<T>()
		{
			return null;
		}

		[Token(Token = "0x6001E51")]
		public static int[] EnumIds<T>()
		{
			return null;
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0xFFA23C", Offset = "0xFFA23C", VA = "0xFFA23C")]
		public static bool IsTypeDerivedFrom(Type type, Type fromType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0x1007478", Offset = "0x1007478", VA = "0x1007478")]
		public static string GetGameObjectPath(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0x1007570", Offset = "0x1007570", VA = "0x1007570")]
		public static string GetGameobjectPathRelativeToParent(GameObject child, GameObject parent)
		{
			return null;
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0x100767C", Offset = "0x100767C", VA = "0x100767C")]
		public static Transform GetParentFromPath(GameObject source, string path, bool excludeLastInPath = true)
		{
			return null;
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0x1007728", Offset = "0x1007728", VA = "0x1007728")]
		public static string GetGameobjectIndexPathRelativeToParent(GameObject child, GameObject parent)
		{
			return null;
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0x100785C", Offset = "0x100785C", VA = "0x100785C")]
		public static Transform GetObjectFromIndexPath(GameObject source, string path)
		{
			return null;
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0x1007998", Offset = "0x1007998", VA = "0x1007998")]
		public static Transform GetTransformInPath(string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0x1007C38", Offset = "0x1007C38", VA = "0x1007C38")]
		public static Type[] GetTypesInNamespace(Assembly assembly, string nameSpace)
		{
			return null;
		}

		[Token(Token = "0x6001E5A")]
		public static bool Clone<T>(T source, out T ClonedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0x1007D30", Offset = "0x1007D30", VA = "0x1007D30")]
		public static Component CopyComponent(Component original, GameObject destination)
		{
			return null;
		}

		[Token(Token = "0x6001E5C")]
		public static T[] FindComponentsOfType<T>(bool includeInactive = true) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001E5D")]
		public static T CopyComponent<T>(T original, GameObject destination) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0x1007E4C", Offset = "0x1007E4C", VA = "0x1007E4C")]
		public static bool IsOddNumber(int value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0x1007E54", Offset = "0x1007E54", VA = "0x1007E54")]
		public static string ColorToHex(Color32 color)
		{
			return null;
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0x1007F14", Offset = "0x1007F14", VA = "0x1007F14")]
		public static Color HexToColor(string hex)
		{
			return default(Color);
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0x1008000", Offset = "0x1008000", VA = "0x1008000")]
		public static float SignedAngleBetween(Vector3 a, Vector3 b, Vector3 n)
		{
			return default(float);
		}

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0x100813C", Offset = "0x100813C", VA = "0x100813C")]
		public static float SignedAngle360Between(Vector3 a, Vector3 b, Vector3 n)
		{
			return default(float);
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0x100828C", Offset = "0x100828C", VA = "0x100828C")]
		private static void GetRendererBoundsInChildren(Matrix4x4 rootWorldToLocal, Vector3[] minMax, HashSet<Transform> ignoreItems, Transform t, bool includeAllChildren)
		{
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0x1008768", Offset = "0x1008768", VA = "0x1008768")]
		public static Bounds GetRendererBoundsInChildren(Transform root, HashSet<Transform> ignoreItems, Transform transform, bool includeAllChildren)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0x1008A00", Offset = "0x1008A00", VA = "0x1008A00")]
		public static List<Transform> FindTransformsWithName(Transform startTransform, string containsName, bool includeChildren = true)
		{
			return null;
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0x1008B68", Offset = "0x1008B68", VA = "0x1008B68")]
		public static Transform FindTransformWithName(Transform startTransform, string containsName, bool includeChildren = true)
		{
			return null;
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0x1008CBC", Offset = "0x1008CBC", VA = "0x1008CBC")]
		public static Transform GetClosestPositionWithPathfinding(Transform origin, List<Transform> targets)
		{
			return null;
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0x1009008", Offset = "0x1009008", VA = "0x1009008")]
		public static List<Vector3> SplitLine(Vector3 p1, Vector3 p2, int partsCount)
		{
			return null;
		}

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0x10091D4", Offset = "0x10091D4", VA = "0x10091D4")]
		public static List<Vector3> ClampPath(Vector3[] path, float distance)
		{
			return null;
		}

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0x10094B4", Offset = "0x10094B4", VA = "0x10094B4")]
		public static void DrawPath(NavMeshPath path, Color color, float duration = 0.1f, bool depthTest = false)
		{
		}

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0x10095B0", Offset = "0x10095B0", VA = "0x10095B0")]
		public static void DrawPath(Vector3[] path, Color color, float duration = 0.1f, bool depthTest = false)
		{
		}

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0x100970C", Offset = "0x100970C", VA = "0x100970C")]
		public static float GetDistance(Vector3 from, Vector3 to, DistanceType type)
		{
			return default(float);
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0x100987C", Offset = "0x100987C", VA = "0x100987C")]
		public static float GetPathLength(Vector3 from, Vector3 to)
		{
			return default(float);
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0x1008E5C", Offset = "0x1008E5C", VA = "0x1008E5C")]
		public static float GetPathLength(NavMeshPath path)
		{
			return default(float);
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0x1009950", Offset = "0x1009950", VA = "0x1009950")]
		public static float GetTriangleArea(float a, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0x1009A14", Offset = "0x1009A14", VA = "0x1009A14")]
		public static int BetweenLineAndCircle(Vector3 circleCenter, float circleRadius, Vector3 point1, Vector3 point2, out Vector3 intersection1, out Vector3 intersection2)
		{
			return default(int);
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0x1009B9C", Offset = "0x1009B9C", VA = "0x1009B9C")]
		public static int BetweenLineAndCircle(Vector2 circleCenter, float circleRadius, Vector2 point1, Vector2 point2, out Vector2 intersection1, out Vector2 intersection2)
		{
			return default(int);
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0x1009E28", Offset = "0x1009E28", VA = "0x1009E28")]
		public static bool FindTangents(Vector3 center, float radius, Vector3 external_point, out Vector3 pt1, out Vector3 pt2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x1009FC4", Offset = "0x1009FC4", VA = "0x1009FC4")]
		public static int FindCircleCircleIntersections(float cx0, float cy0, float radius0, float cx1, float cy1, float radius1, out Vector3 intersection1, out Vector3 intersection2)
		{
			return default(int);
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0x100A258", Offset = "0x100A258", VA = "0x100A258")]
		public static Vector3 GetBounceDirection(Vector3 incomingDirection, Vector3 impactNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0x100A358", Offset = "0x100A358", VA = "0x100A358")]
		public static List<LineSegment> GetNavMeshBorders(NavMeshTriangulation mesh)
		{
			return null;
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0x100A8C8", Offset = "0x100A8C8", VA = "0x100A8C8")]
		private static void weldVertices(NavMeshTriangulation mesh, float threshold, float bucketStep, out Vector3[] vertices, out int[] indices)
		{
		}

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0x100B094", Offset = "0x100B094", VA = "0x100B094")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2CF4", Offset = "0x7E2CF4")]
		public static IEnumerator WaitForAnimatorTransition(Animator animator, int layer, string tagName)
		{
			return null;
		}

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0x100B14C", Offset = "0x100B14C", VA = "0x100B14C")]
		public static bool IsAnimatorInState(Animator animator, int layer, string tagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0x100B1F0", Offset = "0x100B1F0", VA = "0x100B1F0")]
		public static void DrawCircle(float radius, int steps, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0x100B420", Offset = "0x100B420", VA = "0x100B420")]
		public static Vector3 SnapNormalTo45Degrees(Vector3 normal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E7B")]
		public static List<T> CastListTo<T>(IList list)
		{
			return null;
		}

		[Token(Token = "0x6001E7C")]
		public static T[] CastListToArray<T>(IList list)
		{
			return null;
		}

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0x100B780", Offset = "0x100B780", VA = "0x100B780")]
		public static void CopyFileTo(string fromPath, string toPath)
		{
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0x1004EF4", Offset = "0x1004EF4", VA = "0x1004EF4")]
		public static string CompbinePaths(string pathA, string pathB)
		{
			return null;
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0x100B8AC", Offset = "0x100B8AC", VA = "0x100B8AC")]
		public ErgoUtils()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class PooleableDictionary<K, V> : Dictionary<K, V>, IPooleableObject
	{
		[Token(Token = "0x6001E81")]
		public PooleableDictionary()
		{
		}

		[Token(Token = "0x6001E82")]
		public PooleableDictionary(IEqualityComparer<K> comparer)
		{
		}

		[Token(Token = "0x6001E83")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001E84")]
		public virtual void OnSpawned()
		{
		}

		[Token(Token = "0x6001E85")]
		public void PoolableObjecteSpawned()
		{
		}

		[Token(Token = "0x6001E86")]
		public void PoolableObjecteUnspawned()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class PooleableHashset<T> : HashSet<T>, IPooleableObject
	{
		[Token(Token = "0x6001E87")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001E88")]
		public void PoolableObjecteSpawned()
		{
		}

		[Token(Token = "0x6001E89")]
		public void PoolableObjecteUnspawned()
		{
		}

		[Token(Token = "0x6001E8A")]
		public PooleableHashset()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class PooleableHashtable : Hashtable, IPooleableObject
	{
		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0xAD7C08", Offset = "0xAD7C08", VA = "0xAD7C08", Slot = "39")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0xAD7C18", Offset = "0xAD7C18", VA = "0xAD7C18", Slot = "40")]
		public void PoolableObjecteSpawned()
		{
		}

		[Token(Token = "0x6001E8D")]
		[Address(RVA = "0xAD7C1C", Offset = "0xAD7C1C", VA = "0xAD7C1C", Slot = "41")]
		public void PoolableObjecteUnspawned()
		{
		}

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0xAD7C20", Offset = "0xAD7C20", VA = "0xAD7C20")]
		public PooleableHashtable()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F1")]
	public class PooleableKeyValuePair<TKey, TValue> : IPooleableObject
	{
		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private TKey key;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private TValue value;

		[Token(Token = "0x170002E7")]
		public TKey Key
		{
			[Token(Token = "0x6001E92")]
			get
			{
				return (TKey)null;
			}
		}

		[Token(Token = "0x170002E8")]
		public TValue Value
		{
			[Token(Token = "0x6001E93")]
			get
			{
				return (TValue)null;
			}
		}

		[Token(Token = "0x6001E8F")]
		public PooleableKeyValuePair()
		{
		}

		[Token(Token = "0x6001E90")]
		public PooleableKeyValuePair(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6001E91")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001E94")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001E95")]
		public void PoolableObjecteSpawned()
		{
		}

		[Token(Token = "0x6001E96")]
		public void PoolableObjecteUnspawned()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class PooleableList<T> : List<T>, IPooleableObject
	{
		[Token(Token = "0x6001E97")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001E98")]
		public void PoolableObjecteSpawned()
		{
		}

		[Token(Token = "0x6001E99")]
		public void PoolableObjecteUnspawned()
		{
		}

		[Token(Token = "0x6001E9A")]
		public PooleableList()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	public static class TypeExtensions
	{
		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<Type, string> TypeAliases;

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0xADC1B8", Offset = "0xADC1B8", VA = "0xADC1B8")]
		public static string Alias(this Type type)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F4")]
	public class FlagData : ErgoData
	{
		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool value;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tag;

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0xAD03CC", Offset = "0xAD03CC", VA = "0xAD03CC")]
		public FlagData()
		{
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0xAD042C", Offset = "0xAD042C", VA = "0xAD042C")]
		public FlagData(string flagName, bool value, [Optional] string tag)
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0xAD04BC", Offset = "0xAD04BC", VA = "0xAD04BC", Slot = "10")]
		public override void OnFinishedDeserializing()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class FlagsManager
	{
		[Token(Token = "0x200049C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E10", Offset = "0x7D8E10")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x40022C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string flagName;

			[Token(Token = "0x60025D6")]
			[Address(RVA = "0xAD07E8", Offset = "0xAD07E8", VA = "0xAD07E8")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x60025D7")]
			[Address(RVA = "0xAD0F04", Offset = "0xAD0F04", VA = "0xAD0F04")]
			internal bool <IsFlagSet>b__0(FlagData flag)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200049D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E20", Offset = "0x7D8E20")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x40022C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string flagName;

			[Token(Token = "0x60025D8")]
			[Address(RVA = "0xAD0964", Offset = "0xAD0964", VA = "0xAD0964")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x60025D9")]
			[Address(RVA = "0xAD0F2C", Offset = "0xAD0F2C", VA = "0xAD0F2C")]
			internal bool <AddFlag>b__0(FlagData flag)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200049E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E30", Offset = "0x7D8E30")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x40022C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string flagName;

			[Token(Token = "0x60025DA")]
			[Address(RVA = "0xAD0C10", Offset = "0xAD0C10", VA = "0xAD0C10")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x60025DB")]
			[Address(RVA = "0xAD0F54", Offset = "0xAD0F54", VA = "0xAD0F54")]
			internal bool <SetFlagValue>b__0(FlagData flag)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200049F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E40", Offset = "0x7D8E40")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x40022C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string flagName;

			[Token(Token = "0x60025DC")]
			[Address(RVA = "0xAD0D50", Offset = "0xAD0D50", VA = "0xAD0D50")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x60025DD")]
			[Address(RVA = "0xAD0EB4", Offset = "0xAD0EB4", VA = "0xAD0EB4")]
			internal bool <GetFlagValue>b__0(FlagData flag)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20004A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E50", Offset = "0x7D8E50")]
		private sealed class <>c__DisplayClass11_0
		{
			[Token(Token = "0x40022C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string flagName;

			[Token(Token = "0x60025DE")]
			[Address(RVA = "0xAD0EA0", Offset = "0xAD0EA0", VA = "0xAD0EA0")]
			public <>c__DisplayClass11_0()
			{
			}

			[Token(Token = "0x60025DF")]
			[Address(RVA = "0xAD0EDC", Offset = "0xAD0EDC", VA = "0xAD0EDC")]
			internal bool <IsFlagSetWithValue>b__0(FlagData flag)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<FlagData> flagsList;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FlagsManager sharedInstance;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action OnFlagsChanged;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<string, bool> OnFlagValueChanged;

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0xAD0530", Offset = "0xAD0530", VA = "0xAD0530")]
		public static FlagsManager sharedManager()
		{
			return null;
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0xAD0674", Offset = "0xAD0674", VA = "0xAD0674")]
		protected void RaiseOnFlagChanged(string flagName, bool value)
		{
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0xAD0700", Offset = "0xAD0700", VA = "0xAD0700")]
		public bool IsFlagSet(string flagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0xAD07F0", Offset = "0xAD07F0", VA = "0xAD07F0")]
		public void AddFlag(string flagName, bool flagValue = false, bool overwrite = false)
		{
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0xAD096C", Offset = "0xAD096C", VA = "0xAD096C")]
		public void RemoveFlag(string flagName)
		{
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0xAD0A64", Offset = "0xAD0A64", VA = "0xAD0A64")]
		public void SetFlagValue(string flagName, bool value, bool forceCreate = false)
		{
		}

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0xAD0C18", Offset = "0xAD0C18", VA = "0xAD0C18")]
		public bool GetFlagValue(string flagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0xAD0D58", Offset = "0xAD0D58", VA = "0xAD0D58")]
		public bool IsFlagSetWithValue(string flagName, bool valueToCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA8")]
		[Address(RVA = "0xAD0EA8", Offset = "0xAD0EA8", VA = "0xAD0EA8")]
		public List<FlagData> GetAllFlags()
		{
			return null;
		}

		[Token(Token = "0x6001EA9")]
		[Address(RVA = "0xAD0604", Offset = "0xAD0604", VA = "0xAD0604")]
		public FlagsManager()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public enum InputPlatforms
	{
		[Token(Token = "0x40011E3")]
		WINDOWS,
		[Token(Token = "0x40011E4")]
		OSX,
		[Token(Token = "0x40011E5")]
		ANDROID,
		[Token(Token = "0x40011E6")]
		IOS,
		[Token(Token = "0x40011E7")]
		PLAYSTATION,
		[Token(Token = "0x40011E8")]
		XBOX,
		[Token(Token = "0x40011E9")]
		ALL
	}
	[Token(Token = "0x20002F7")]
	public class DisableObjectOnAwake : MonoBehaviour
	{
		[Token(Token = "0x6001EAB")]
		[Address(RVA = "0x9C4464", Offset = "0x9C4464", VA = "0x9C4464")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EAC")]
		[Address(RVA = "0x9C448C", Offset = "0x9C448C", VA = "0x9C448C")]
		public DisableObjectOnAwake()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public class DontDestroyObject : MonoBehaviour
	{
		[Token(Token = "0x6001EAD")]
		[Address(RVA = "0x9C4494", Offset = "0x9C4494", VA = "0x9C4494")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EAE")]
		[Address(RVA = "0x9C4510", Offset = "0x9C4510", VA = "0x9C4510")]
		public DontDestroyObject()
		{
		}
	}
	[Token(Token = "0x20002F9")]
	public class LineSegment
	{
		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Vector3 _start;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected Vector3 _end;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float _magnitude;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected Vector3 _direction;

		[Token(Token = "0x170002E9")]
		public Vector3 start
		{
			[Token(Token = "0x6001EAF")]
			[Address(RVA = "0xAD5780", Offset = "0xAD5780", VA = "0xAD5780")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001EB0")]
			[Address(RVA = "0xAD578C", Offset = "0xAD578C", VA = "0xAD578C")]
			set
			{
			}
		}

		[Token(Token = "0x170002EA")]
		public Vector3 end
		{
			[Token(Token = "0x6001EB1")]
			[Address(RVA = "0xAD5898", Offset = "0xAD5898", VA = "0xAD5898")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001EB2")]
			[Address(RVA = "0xAD58A4", Offset = "0xAD58A4", VA = "0xAD58A4")]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		public float magnitude
		{
			[Token(Token = "0x6001EB3")]
			[Address(RVA = "0xAD58B0", Offset = "0xAD58B0", VA = "0xAD58B0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002EC")]
		public Vector3 direction
		{
			[Token(Token = "0x6001EB4")]
			[Address(RVA = "0xAD58B8", Offset = "0xAD58B8", VA = "0xAD58B8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0xAD58C4", Offset = "0xAD58C4", VA = "0xAD58C4")]
		public LineSegment()
		{
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0xAD5964", Offset = "0xAD5964", VA = "0xAD5964")]
		public LineSegment(Vector3 a, Vector3 b)
		{
		}

		[Token(Token = "0x6001EB7")]
		[Address(RVA = "0xAD5798", Offset = "0xAD5798", VA = "0xAD5798")]
		protected void CalculateMagnitude()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public interface IPooleableObject
	{
		[Token(Token = "0x6001EB8")]
		void Reset();

		[Token(Token = "0x6001EB9")]
		void PoolableObjecteSpawned();

		[Token(Token = "0x6001EBA")]
		void PoolableObjecteUnspawned();
	}
	[Token(Token = "0x20002FB")]
	public class ClassPool
	{
		[Token(Token = "0x20004A1")]
		public class PooledObjectDebugWrapper
		{
			[Token(Token = "0x40022C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string tag;

			[Token(Token = "0x40022C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object obj;

			[Token(Token = "0x60025E0")]
			[Address(RVA = "0x9C4454", Offset = "0x9C4454", VA = "0x9C4454")]
			public PooledObjectDebugWrapper()
			{
			}
		}

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF2C8", Offset = "0x7DF2C8")]
		private int <defaultPoolCount>k__BackingField;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF2D8", Offset = "0x7DF2D8")]
		private PoolSpawnBehavior <spawnBehavior>k__BackingField;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isInitialized_;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int i;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<IPooleableObject> spawnedObjectHash;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<IPooleableObject> poolObjects;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<IPooleableObject> spawnedObjects;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<IPooleableObject> storedObjects;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<PooledObjectDebugWrapper> spawnedTaggedObjects;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<PooledObjectDebugWrapper> storedTaggedObjects;

		[Token(Token = "0x170002ED")]
		public int defaultPoolCount
		{
			[Token(Token = "0x6001EBB")]
			[Address(RVA = "0x9C3C9C", Offset = "0x9C3C9C", VA = "0x9C3C9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2D68", Offset = "0x7E2D68")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001EBC")]
			[Address(RVA = "0x9C3CA4", Offset = "0x9C3CA4", VA = "0x9C3CA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2D78", Offset = "0x7E2D78")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002EE")]
		public PoolSpawnBehavior spawnBehavior
		{
			[Token(Token = "0x6001EBD")]
			[Address(RVA = "0x9C3CAC", Offset = "0x9C3CAC", VA = "0x9C3CAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2D88", Offset = "0x7E2D88")]
			get
			{
				return default(PoolSpawnBehavior);
			}
			[Token(Token = "0x6001EBE")]
			[Address(RVA = "0x9C3CB4", Offset = "0x9C3CB4", VA = "0x9C3CB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2D98", Offset = "0x7E2D98")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002EF")]
		public bool isInitialized
		{
			[Token(Token = "0x6001EBF")]
			[Address(RVA = "0x9C3CBC", Offset = "0x9C3CBC", VA = "0x9C3CBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F0")]
		public int spawnedCount
		{
			[Token(Token = "0x6001EC0")]
			[Address(RVA = "0x9C3CC4", Offset = "0x9C3CC4", VA = "0x9C3CC4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002F1")]
		public int storedObjectCount
		{
			[Token(Token = "0x6001EC1")]
			[Address(RVA = "0x9C3D18", Offset = "0x9C3D18", VA = "0x9C3D18")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001EC2")]
		public void InitializePool<T>(int defaultCount, PoolSpawnBehavior spawnBehave) where T : IPooleableObject, new()
		{
		}

		[Token(Token = "0x6001EC3")]
		private void CreatePool<T>() where T : IPooleableObject, new()
		{
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0x9C3D6C", Offset = "0x9C3D6C", VA = "0x9C3D6C")]
		public void DestroyPool()
		{
		}

		[Token(Token = "0x6001EC5")]
		private void AddObjectToPool<T>() where T : IPooleableObject, new()
		{
		}

		[Token(Token = "0x6001EC6")]
		public T GetObjectDebug<T>(string debugTag) where T : IPooleableObject, new()
		{
			return (T)null;
		}

		[Token(Token = "0x6001EC7")]
		public T GetObject<T>() where T : IPooleableObject, new()
		{
			return (T)null;
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0x9C3E64", Offset = "0x9C3E64", VA = "0x9C3E64")]
		public void UnspawnAll()
		{
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0x9C4014", Offset = "0x9C4014", VA = "0x9C4014")]
		public void Unspawn(IPooleableObject objectToUnspawn)
		{
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0x9C409C", Offset = "0x9C409C", VA = "0x9C409C")]
		public void UnspawnUnsafe(IPooleableObject objectToUnspawn)
		{
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0x9C4210", Offset = "0x9C4210", VA = "0x9C4210")]
		protected void Unspawn(int index)
		{
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0x9C43C4", Offset = "0x9C43C4", VA = "0x9C43C4")]
		public ClassPool()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public class GameObjectPool
	{
		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Vector3 defaultStoragePosition;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF2E8", Offset = "0x7DF2E8")]
		private GameObjectPoolData <poolData>k__BackingField;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF2F8", Offset = "0x7DF2F8")]
		private GameObject <gameObject>k__BackingField;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool inUse;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int i;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject tmpGo;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform parentTransformValue;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<GameObject> poolObjects;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<GameObject> spawnedObjects;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<GameObject> storedObjects;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool hasMotinObject;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject _prefab;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isInitialized_;

		[Token(Token = "0x170002F2")]
		public GameObjectPoolData poolData
		{
			[Token(Token = "0x6001ECD")]
			[Address(RVA = "0xAD0F7C", Offset = "0xAD0F7C", VA = "0xAD0F7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2DA8", Offset = "0x7E2DA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001ECE")]
			[Address(RVA = "0xAD0F84", Offset = "0xAD0F84", VA = "0xAD0F84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2DB8", Offset = "0x7E2DB8")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		public GameObject gameObject
		{
			[Token(Token = "0x6001ECF")]
			[Address(RVA = "0xAD0F8C", Offset = "0xAD0F8C", VA = "0xAD0F8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2DC8", Offset = "0x7E2DC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001ED0")]
			[Address(RVA = "0xAD0F94", Offset = "0xAD0F94", VA = "0xAD0F94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2DD8", Offset = "0x7E2DD8")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		private Transform parentTransform
		{
			[Token(Token = "0x6001ED1")]
			[Address(RVA = "0xAD0F9C", Offset = "0xAD0F9C", VA = "0xAD0F9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F5")]
		public string name
		{
			[Token(Token = "0x6001ED5")]
			[Address(RVA = "0xAD11B4", Offset = "0xAD11B4", VA = "0xAD11B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F6")]
		public GameObject prefab
		{
			[Token(Token = "0x6001ED6")]
			[Address(RVA = "0xAD1374", Offset = "0xAD1374", VA = "0xAD1374")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001ED7")]
			[Address(RVA = "0xAD137C", Offset = "0xAD137C", VA = "0xAD137C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F7")]
		public bool isInitialized
		{
			[Token(Token = "0x6001ED8")]
			[Address(RVA = "0xAD1384", Offset = "0xAD1384", VA = "0xAD1384")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F8")]
		public int spawnedCount
		{
			[Token(Token = "0x6001ED9")]
			[Address(RVA = "0xAD138C", Offset = "0xAD138C", VA = "0xAD138C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002F9")]
		public int storedObjectCount
		{
			[Token(Token = "0x6001EDA")]
			[Address(RVA = "0xAD13E0", Offset = "0xAD13E0", VA = "0xAD13E0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002FA")]
		public GameObject[] spawnedObjectsArray
		{
			[Token(Token = "0x6001EDB")]
			[Address(RVA = "0xAD1434", Offset = "0xAD1434", VA = "0xAD1434")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0xAD0FC0", Offset = "0xAD0FC0", VA = "0xAD0FC0")]
		private void CreateParentTransform()
		{
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0xAD1280", Offset = "0xAD1280", VA = "0xAD1280")]
		public GameObjectPool(GameObjectPoolData data)
		{
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0xAD12B4", Offset = "0xAD12B4", VA = "0xAD12B4")]
		public GameObjectPool()
		{
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0xAD148C", Offset = "0xAD148C", VA = "0xAD148C")]
		public void InitializePool(bool createMinimum = false)
		{
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0xAD1AFC", Offset = "0xAD1AFC", VA = "0xAD1AFC")]
		public void ResizePool(int newSize)
		{
		}

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0xAD1AB4", Offset = "0xAD1AB4", VA = "0xAD1AB4")]
		private void CreatePool(int count = 0)
		{
		}

		[Token(Token = "0x6001EDF")]
		[Address(RVA = "0xAD1E34", Offset = "0xAD1E34", VA = "0xAD1E34")]
		public void DestroyPool()
		{
		}

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0xAD1BB8", Offset = "0xAD1BB8", VA = "0xAD1BB8")]
		private void AddObjectToPool()
		{
		}

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0xAD2098", Offset = "0xAD2098", VA = "0xAD2098")]
		public GameObject Spawn(Vector3 spawnPos, TimeManager time, bool useSpawnedEvent = true)
		{
			return null;
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0xAD2510", Offset = "0xAD2510", VA = "0xAD2510")]
		public GameObject Spawn(bool useSpawnedEvent = true)
		{
			return null;
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0xAD2628", Offset = "0xAD2628", VA = "0xAD2628")]
		public GameObject Spawn(Vector3 spawnPos)
		{
			return null;
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0xAD218C", Offset = "0xAD218C", VA = "0xAD218C")]
		public GameObject Spawn(TimeManager time, bool useSpawnedEvent = true)
		{
			return null;
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0xAD2A58", Offset = "0xAD2A58", VA = "0xAD2A58")]
		public void UnspawnAll()
		{
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0xAD2B24", Offset = "0xAD2B24", VA = "0xAD2B24")]
		public void SetLocalPositionAll(Vector3 position)
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0xAD2BC4", Offset = "0xAD2BC4", VA = "0xAD2BC4")]
		public void SetLocalPosition(int index, Vector3 position)
		{
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0xAD2CCC", Offset = "0xAD2CCC", VA = "0xAD2CCC")]
		public void SetPositionAll(Vector3 position)
		{
		}

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0xAD2D6C", Offset = "0xAD2D6C", VA = "0xAD2D6C")]
		public void SetPosition(int index, Vector3 position)
		{
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0xAD2E74", Offset = "0xAD2E74", VA = "0xAD2E74")]
		public void Unspawn(GameObject go)
		{
		}

		[Token(Token = "0x6001EEB")]
		[Address(RVA = "0xAD267C", Offset = "0xAD267C", VA = "0xAD267C")]
		public void Unspawn(int index)
		{
		}

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0xAD2EE8", Offset = "0xAD2EE8", VA = "0xAD2EE8")]
		public void EnableAllObjects()
		{
		}

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0xAD2FEC", Offset = "0xAD2FEC", VA = "0xAD2FEC")]
		public void DisableAllObjects()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public enum PoolSpawnBehavior
	{
		[Token(Token = "0x4001206")]
		AddNew,
		[Token(Token = "0x4001207")]
		Reutilize,
		[Token(Token = "0x4001208")]
		Nothing
	}
	[Serializable]
	[Token(Token = "0x20002FE")]
	public class GameObjectPoolData : ErgoData
	{
		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string projectFolder;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string resourceFolder;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int defaultPoolCount;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PoolSpawnBehavior spawnBehaviour;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF308", Offset = "0x7DF308")]
		private PoolResource <resourceReference>k__BackingField;

		[Token(Token = "0x170002FB")]
		public bool isLoaded
		{
			[Token(Token = "0x6001EEF")]
			[Address(RVA = "0xAD1728", Offset = "0xAD1728", VA = "0xAD1728")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002FC")]
		public PoolResource resourceReference
		{
			[Token(Token = "0x6001EF0")]
			[Address(RVA = "0xAD3178", Offset = "0xAD3178", VA = "0xAD3178")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2DE8", Offset = "0x7E2DE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EF1")]
			[Address(RVA = "0xAD3180", Offset = "0xAD3180", VA = "0xAD3180")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2DF8", Offset = "0x7E2DF8")]
			set
			{
			}
		}

		[Token(Token = "0x170002FD")]
		public bool Empty
		{
			[Token(Token = "0x6001EF5")]
			[Address(RVA = "0xAD320C", Offset = "0xAD320C", VA = "0xAD320C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0xAD1798", Offset = "0xAD1798", VA = "0xAD1798")]
		public void LoadResource()
		{
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0xAD3188", Offset = "0xAD3188", VA = "0xAD3188", Slot = "10")]
		public override void OnFinishedDeserializing()
		{
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0xAD31B0", Offset = "0xAD31B0", VA = "0xAD31B0")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0xAD200C", Offset = "0xAD200C", VA = "0xAD200C")]
		public void OnResourcesUnload()
		{
		}

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0xAD1364", Offset = "0xAD1364", VA = "0xAD1364")]
		public GameObjectPoolData()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class PackPrealoaderComponent : MonoBehaviour
	{
		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PoolPackReferenceData> packsToLoad;

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0xAD5A40", Offset = "0xAD5A40", VA = "0xAD5A40")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0xAD5A44", Offset = "0xAD5A44", VA = "0xAD5A44")]
		protected void PrewarmPacks()
		{
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0xAD5BA4", Offset = "0xAD5BA4", VA = "0xAD5BA4")]
		public PackPrealoaderComponent()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class PoolManager : MonoBehaviour
	{
		[Token(Token = "0x400120F")]
		public const string FOLDER_MODULE = "CORE/PoolManager";

		[Token(Token = "0x4001210")]
		public const string FILE_POOLS_NAME = "PoolsFile.xml";

		[Token(Token = "0x4001211")]
		public const string FILE_POOLS_PACKS_NAME = "PoolPacksfile.xml";

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string path_pools;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string path_pools_packs;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool NO_POOL_MANAGER;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static PoolManager sharedInstance_;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isQuitting;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObjectPoolData[] poolsFile;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<int, GameObjectPoolData> poolsDictionary;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PoolPackData[] poolPackFile;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<string, GameObjectPool> poolList_;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<GameObject, GameObjectPool> poolListByPrefabs_;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF318", Offset = "0x7DF318")]
		private Dictionary<Type, ClassPool> <classPoolDictionary>k__BackingField;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject MainPoolsParent;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<GameObject, GameObjectPool> spawnedObjectToPrefab;

		[Token(Token = "0x170002FE")]
		public Dictionary<Type, ClassPool> classPoolDictionary
		{
			[Token(Token = "0x6001EFC")]
			[Address(RVA = "0xAD5C14", Offset = "0xAD5C14", VA = "0xAD5C14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2E08", Offset = "0x7E2E08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EFD")]
			[Address(RVA = "0xAD5C1C", Offset = "0xAD5C1C", VA = "0xAD5C1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2E18", Offset = "0x7E2E18")]
			private set
			{
			}
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0xAD5C24", Offset = "0xAD5C24", VA = "0xAD5C24")]
		public static PoolManager sharedManager()
		{
			return null;
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0xAD5C8C", Offset = "0xAD5C8C", VA = "0xAD5C8C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0xAD5F08", Offset = "0xAD5F08", VA = "0xAD5F08")]
		private void LoadPoolsFile()
		{
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0xAD6090", Offset = "0xAD6090", VA = "0xAD6090")]
		private void LoadPoolPackFile()
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0xAD11D4", Offset = "0xAD11D4", VA = "0xAD11D4")]
		public GameObject GetPoolsMainParent()
		{
			return null;
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0xAD611C", Offset = "0xAD611C", VA = "0xAD611C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0xAD6190", Offset = "0xAD6190", VA = "0xAD6190")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0xAD619C", Offset = "0xAD619C", VA = "0xAD619C")]
		protected PoolPackData GetPoolPackDataByName(string packName)
		{
			return null;
		}

		[Token(Token = "0x6001F06")]
		[Address(RVA = "0xAD6230", Offset = "0xAD6230", VA = "0xAD6230")]
		public PoolPackData GetPoolPackDataByID(POOL_PACKS_ENUM packName)
		{
			return null;
		}

		[Token(Token = "0x6001F07")]
		[Address(RVA = "0xAD6234", Offset = "0xAD6234", VA = "0xAD6234")]
		public PoolPackData GetPoolPackDataByID(int packId)
		{
			return null;
		}

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0xAD62A8", Offset = "0xAD62A8", VA = "0xAD62A8")]
		protected GameObjectPoolData GetGameObjectPoolDataByID(POOLS_ENUM poolenum)
		{
			return null;
		}

		[Token(Token = "0x6001F09")]
		[Address(RVA = "0xAD62AC", Offset = "0xAD62AC", VA = "0xAD62AC")]
		protected GameObjectPoolData GetGameObjectPoolDataByID(int poolId)
		{
			return null;
		}

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0xAD6340", Offset = "0xAD6340", VA = "0xAD6340")]
		protected GameObjectPoolData GetGameObjectPoolDataByName(string poolName)
		{
			return null;
		}

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0xAD63F4", Offset = "0xAD63F4", VA = "0xAD63F4")]
		public void PreWarmPool(POOLS_ENUM pd)
		{
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0xAD63FC", Offset = "0xAD63FC", VA = "0xAD63FC")]
		public void PreWarmPool(string poolName)
		{
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0xAD63F8", Offset = "0xAD63F8", VA = "0xAD63F8")]
		public void PreWarmPool(int pd)
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0xAD65A4", Offset = "0xAD65A4", VA = "0xAD65A4")]
		public void PreWarmPool(PoolReferenceData prd)
		{
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0xAD65C0", Offset = "0xAD65C0", VA = "0xAD65C0")]
		public void PreWarmPack(POOL_PACKS_ENUM packId)
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0xAD5B7C", Offset = "0xAD5B7C", VA = "0xAD5B7C")]
		public void PreWarmPack(int packId)
		{
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0xAD65E8", Offset = "0xAD65E8", VA = "0xAD65E8")]
		public void PreWarmPack(PoolPackData ppd)
		{
		}

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0xAD66F0", Offset = "0xAD66F0", VA = "0xAD66F0")]
		public void PreWarmPack(PoolPackReferenceData pprd)
		{
		}

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0xAD672C", Offset = "0xAD672C", VA = "0xAD672C")]
		protected void CreatePools(List<PoolReferenceData> poolReferences)
		{
		}

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0xAD6568", Offset = "0xAD6568", VA = "0xAD6568")]
		protected void CreatePool(int poolId)
		{
		}

		[Token(Token = "0x6001F15")]
		[Address(RVA = "0xAD6844", Offset = "0xAD6844", VA = "0xAD6844")]
		protected void CreatePool(GameObjectPoolData poolData)
		{
		}

		[Token(Token = "0x6001F16")]
		[Address(RVA = "0xAD6B40", Offset = "0xAD6B40", VA = "0xAD6B40")]
		protected void CreatePool(GameObject prefab)
		{
		}

		[Token(Token = "0x6001F17")]
		[Address(RVA = "0xAD6990", Offset = "0xAD6990", VA = "0xAD6990")]
		protected void InitializePool(GameObjectPool pool)
		{
		}

		[Token(Token = "0x6001F18")]
		[Address(RVA = "0xAD6BE8", Offset = "0xAD6BE8", VA = "0xAD6BE8")]
		public GameObjectPool getPoolById(int poolId, bool createifNull = true)
		{
			return null;
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0xAD6404", Offset = "0xAD6404", VA = "0xAD6404")]
		public GameObjectPool getPoolByName(string name, bool createifNull = true)
		{
			return null;
		}

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0xAD6C28", Offset = "0xAD6C28", VA = "0xAD6C28")]
		public GameObjectPool getPoolByPrefab(GameObject prefab)
		{
			return null;
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0xAD6CBC", Offset = "0xAD6CBC", VA = "0xAD6CBC")]
		public GameObject Spawn(GameObject prefab)
		{
			return null;
		}

		[Token(Token = "0x6001F1C")]
		public T Spawn<T>(GameObject prefab) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0xAD6E94", Offset = "0xAD6E94", VA = "0xAD6E94")]
		public void Unspawn(GameObject spawnedObject)
		{
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0xAD6FFC", Offset = "0xAD6FFC", VA = "0xAD6FFC")]
		public GameObject Spawn(string poolName, bool useSpawnedEvent = true)
		{
			return null;
		}

		[Token(Token = "0x6001F1F")]
		public T Spawn<T>(string poolName) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0xAD70E0", Offset = "0xAD70E0", VA = "0xAD70E0")]
		public void UnspawnAllPools()
		{
		}

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0xAD71E4", Offset = "0xAD71E4", VA = "0xAD71E4")]
		public void destroyPool(string name)
		{
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0xAD72A8", Offset = "0xAD72A8", VA = "0xAD72A8")]
		public void destroyPools(bool destroyPersistentPools = false)
		{
		}

		[Token(Token = "0x6001F23")]
		public ClassPool createClassPool<T>(int defaultCount, PoolSpawnBehavior behavior) where T : IPooleableObject, new()
		{
			return null;
		}

		[Token(Token = "0x6001F24")]
		public ClassPool GetClassPool<T>()
		{
			return null;
		}

		[Token(Token = "0x6001F25")]
		public T GetPooledObject<T>() where T : IPooleableObject, new()
		{
			return (T)null;
		}

		[Token(Token = "0x6001F26")]
		public T GetPooledObjectWithDebugTag<T>(string debugTag) where T : IPooleableObject, new()
		{
			return (T)null;
		}

		[Token(Token = "0x6001F27")]
		public ClassPool GetPoolByType<T>() where T : IPooleableObject, new()
		{
			return null;
		}

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0xAD7550", Offset = "0xAD7550", VA = "0xAD7550")]
		public void ReturnPooledObject(IPooleableObject objectToReturn)
		{
		}

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0xAD7694", Offset = "0xAD7694", VA = "0xAD7694")]
		public void DestroyClassPools()
		{
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0xAD77B4", Offset = "0xAD77B4", VA = "0xAD77B4")]
		public PoolManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000301")]
	public class PoolPackData : ErgoData
	{
		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<PoolReferenceData> poolsToLoad;

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0xAD7900", Offset = "0xAD7900", VA = "0xAD7900")]
		public bool ContainsPoolId(int poolId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0xAD79B4", Offset = "0xAD79B4", VA = "0xAD79B4")]
		public PoolPackData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000302")]
	[AttributeAttribute(Name = "EditorParamsHideFields", RVA = "0x7D7AF0", Offset = "0x7D7AF0")]
	public class PoolPackReferenceData : ErgoData
	{
		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "EditorEnumFieldAttribute", RVA = "0x7DF328", Offset = "0x7DF328")]
		public int poolPackId;

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0xAD7A24", Offset = "0xAD7A24", VA = "0xAD7A24")]
		public PoolPackReferenceData()
		{
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0xAD7A34", Offset = "0xAD7A34", VA = "0xAD7A34")]
		public PoolPackReferenceData(int setId, string name)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000303")]
	[AttributeAttribute(Name = "EditorParamsHideFields", RVA = "0x7D7B78", Offset = "0x7D7B78")]
	public class PoolReferenceData : ErgoData
	{
		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "EditorEnumFieldAttribute", RVA = "0x7DF38C", Offset = "0x7DF38C")]
		public int poolId;

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0xAD7BB4", Offset = "0xAD7BB4", VA = "0xAD7BB4")]
		public PoolReferenceData()
		{
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0xAD7BC4", Offset = "0xAD7BC4", VA = "0xAD7BC4")]
		public PoolReferenceData(int setId, string name)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000304")]
	public class SpritePool : ErgoData
	{
		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "EditorParams", RVA = "0x7DF3F0", Offset = "0x7DF3F0")]
		public List<SpritePoolData> poolContent;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool createPoolsOnStart;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool createPoolsEmpty;

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0xAD8104", Offset = "0xAD8104", VA = "0xAD8104")]
		public SpritePool()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000305")]
	public class SpritePoolData : ErgoData
	{
		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string spritePath;

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0xAD817C", Offset = "0xAD817C", VA = "0xAD817C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0xAD81E4", Offset = "0xAD81E4", VA = "0xAD81E4")]
		public SpritePoolData()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class WaitForSeconds : CustomYieldInstruction
	{
		[Token(Token = "0x20004A2")]
		public delegate bool BreakConditionDelegate();

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TimeManager timeManager;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float waitTime;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float initialTime;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BreakConditionDelegate breakCondition;

		[Token(Token = "0x170002FF")]
		public override bool keepWaiting
		{
			[Token(Token = "0x6001F35")]
			[Address(RVA = "0xADC948", Offset = "0xADC948", VA = "0xADC948", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0xADCBC8", Offset = "0xADCBC8", VA = "0xADCBC8")]
		public WaitForSeconds(TimeManager timeManager, float waitTime, [Optional] BreakConditionDelegate breakCondition)
		{
		}
	}
	[Token(Token = "0x2000307")]
	public class TimeAdapter
	{
		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject target;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Component component;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool paused;

		[Token(Token = "0x17000300")]
		public virtual float timeScale
		{
			[Token(Token = "0x6001F37")]
			[Address(RVA = "0xAD9E48", Offset = "0xAD9E48", VA = "0xAD9E48", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F38")]
			[Address(RVA = "0xAD9E50", Offset = "0xAD9E50", VA = "0xAD9E50", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0xAD9E54", Offset = "0xAD9E54", VA = "0xAD9E54", Slot = "6")]
		public virtual void Init(GameObject target)
		{
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0xAD9E5C", Offset = "0xAD9E5C", VA = "0xAD9E5C")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0xAD9E98", Offset = "0xAD9E98", VA = "0xAD9E98")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0xAD9ED0", Offset = "0xAD9ED0", VA = "0xAD9ED0", Slot = "7")]
		protected virtual void PauseInternal()
		{
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0xAD9ED4", Offset = "0xAD9ED4", VA = "0xAD9ED4", Slot = "8")]
		protected virtual void UnpauseInternal()
		{
		}

		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0xAD9ED8", Offset = "0xAD9ED8", VA = "0xAD9ED8")]
		public TimeAdapter(GameObject target)
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class TimeAdapterMecanim : TimeAdapter
	{
		[Token(Token = "0x400122D")]
		protected const string STRING_MOVEMENT_SPEED = "MovementSpeed";

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float prePauseTimeScale;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float prePauseMoveSpeed;

		[Token(Token = "0x17000301")]
		private Animator animator
		{
			[Token(Token = "0x6001F3F")]
			[Address(RVA = "0xAD9F04", Offset = "0xAD9F04", VA = "0xAD9F04")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F40")]
			[Address(RVA = "0xAD9F88", Offset = "0xAD9F88", VA = "0xAD9F88")]
			set
			{
			}
		}

		[Token(Token = "0x17000302")]
		public override float timeScale
		{
			[Token(Token = "0x6001F46")]
			[Address(RVA = "0xADA2B8", Offset = "0xADA2B8", VA = "0xADA2B8", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F47")]
			[Address(RVA = "0xADA2D8", Offset = "0xADA2D8", VA = "0xADA2D8", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001F41")]
		[Address(RVA = "0xAD9F90", Offset = "0xAD9F90", VA = "0xAD9F90")]
		public TimeAdapterMecanim(Animator animator)
		{
		}

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0xAD9FD8", Offset = "0xAD9FD8", VA = "0xAD9FD8")]
		private bool canUseAnimator(Animator a)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F43")]
		[Address(RVA = "0xADA0DC", Offset = "0xADA0DC", VA = "0xADA0DC")]
		public bool AnimatorHasParameter(Animator animator, string parameter)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0xADA198", Offset = "0xADA198", VA = "0xADA198", Slot = "7")]
		protected override void PauseInternal()
		{
		}

		[Token(Token = "0x6001F45")]
		[Address(RVA = "0xADA2B4", Offset = "0xADA2B4", VA = "0xADA2B4", Slot = "8")]
		protected override void UnpauseInternal()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class TimeAdapterShuriken : TimeAdapter
	{
		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float prePausePlaybackSpeed;

		[Token(Token = "0x17000303")]
		private ParticleSystem particleSystem
		{
			[Token(Token = "0x6001F48")]
			[Address(RVA = "0xADA308", Offset = "0xADA308", VA = "0xADA308")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F49")]
			[Address(RVA = "0xADA370", Offset = "0xADA370", VA = "0xADA370")]
			set
			{
			}
		}

		[Token(Token = "0x17000304")]
		public override float timeScale
		{
			[Token(Token = "0x6001F4D")]
			[Address(RVA = "0xADA448", Offset = "0xADA448", VA = "0xADA448", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F4E")]
			[Address(RVA = "0xADA488", Offset = "0xADA488", VA = "0xADA488", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0xADA378", Offset = "0xADA378", VA = "0xADA378")]
		public TimeAdapterShuriken(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0xADA3C0", Offset = "0xADA3C0", VA = "0xADA3C0", Slot = "7")]
		protected override void PauseInternal()
		{
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0xADA404", Offset = "0xADA404", VA = "0xADA404", Slot = "8")]
		protected override void UnpauseInternal()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class TimeManager
	{
		[Token(Token = "0x20004A3")]
		public enum TimeEvent
		{
			[Token(Token = "0x40022C8")]
			NONE = -1,
			[Token(Token = "0x40022C9")]
			ON_PAUSE,
			[Token(Token = "0x40022CA")]
			ON_UNPAUSE,
			[Token(Token = "0x40022CB")]
			ON_PAUSE_SELF,
			[Token(Token = "0x40022CC")]
			ON_UNPAUSE_SELF,
			[Token(Token = "0x40022CD")]
			ON_PAUSE_IN_HIERARCHY,
			[Token(Token = "0x40022CE")]
			ON_UNPAUSE_IN_HIERARCHY,
			[Token(Token = "0x40022CF")]
			ON_UPDATE,
			[Token(Token = "0x40022D0")]
			ON_FIXED_UPDATE,
			[Token(Token = "0x40022D1")]
			ON_LATE_UPDATE,
			[Token(Token = "0x40022D2")]
			ON_FORCED_UPDATE,
			[Token(Token = "0x40022D3")]
			COUNT
		}

		[Token(Token = "0x20004A4")]
		public struct TimeEventComparer : IEqualityComparer<TimeEvent>
		{
			[Token(Token = "0x60025E5")]
			[Address(RVA = "0x86AB78", Offset = "0x86AB78", VA = "0x86AB78", Slot = "4")]
			public bool Equals(TimeEvent x, TimeEvent y)
			{
				return default(bool);
			}

			[Token(Token = "0x60025E6")]
			[Address(RVA = "0x86AB84", Offset = "0x86AB84", VA = "0x86AB84", Slot = "5")]
			public int GetHashCode(TimeEvent obj)
			{
				return default(int);
			}
		}

		[Serializable]
		[Token(Token = "0x20004A5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E60", Offset = "0x7D8E60")]
		private sealed class <>c
		{
			[Token(Token = "0x40022D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40022D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<TimeAdapter> <>9__40_0;

			[Token(Token = "0x40022D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<TimeAdapter> <>9__41_0;

			[Token(Token = "0x40022D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Action<TimeAdapter> <>9__46_0;

			[Token(Token = "0x40022D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Action<TimeAdapter> <>9__47_0;

			[Token(Token = "0x60025E8")]
			[Address(RVA = "0xADBE54", Offset = "0xADBE54", VA = "0xADBE54")]
			public <>c()
			{
			}

			[Token(Token = "0x60025E9")]
			[Address(RVA = "0xADBE5C", Offset = "0xADBE5C", VA = "0xADBE5C")]
			internal void <Pause>b__40_0(TimeAdapter time)
			{
			}

			[Token(Token = "0x60025EA")]
			[Address(RVA = "0xADBEA4", Offset = "0xADBEA4", VA = "0xADBEA4")]
			internal void <Unpause>b__41_0(TimeAdapter time)
			{
			}

			[Token(Token = "0x60025EB")]
			[Address(RVA = "0xADBEE8", Offset = "0xADBEE8", VA = "0xADBEE8")]
			internal void <PauseInHierarchy>b__46_0(TimeAdapter time)
			{
			}

			[Token(Token = "0x60025EC")]
			[Address(RVA = "0xADBF30", Offset = "0xADBF30", VA = "0xADBF30")]
			internal void <UnpauseInHierarchy>b__47_0(TimeAdapter time)
			{
			}
		}

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string ERR_ALREADY_REGISTERED_METHOD;

		[Token(Token = "0x4001232")]
		private const bool VERBOSE = false;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF440", Offset = "0x7DF440")]
		private bool <pausedSelf>k__BackingField;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF450", Offset = "0x7DF450")]
		private bool <pausedInHierarchy>k__BackingField;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float timeScaleChangeSpeed;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeElapsed;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int lastTimeElapsedFrameCount;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float timeScaleCurrent;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float timeScaleTarget;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int lastTimeScaleUpdateFrameCount;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float lastFrameTimeScale;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<TimeEvent, List<Action>> targetsList;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Queue<TimeEvent> eventQueue;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<GameObject, List<TimeAdapter>> timeAdapters;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TimeManager parent;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int tmpMethodToUnregIndex;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int currentUpdatingIndex;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TimeEvent currentTimeEvent;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Action> currentUpdatingActions;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Action currentMethod;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string ERR_METHOD_RESETED_TIMEMANAGER;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string currentMethodName;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string currentMethodTarget;

		[Token(Token = "0x17000305")]
		public bool pausedSelf
		{
			[Token(Token = "0x6001F4F")]
			[Address(RVA = "0xADA4D0", Offset = "0xADA4D0", VA = "0xADA4D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2E28", Offset = "0x7E2E28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001F50")]
			[Address(RVA = "0xADA4D8", Offset = "0xADA4D8", VA = "0xADA4D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2E38", Offset = "0x7E2E38")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000306")]
		public bool pausedInHierarchy
		{
			[Token(Token = "0x6001F51")]
			[Address(RVA = "0xADA4E4", Offset = "0xADA4E4", VA = "0xADA4E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2E48", Offset = "0x7E2E48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001F52")]
			[Address(RVA = "0xADA4EC", Offset = "0xADA4EC", VA = "0xADA4EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2E58", Offset = "0x7E2E58")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000307")]
		public bool paused
		{
			[Token(Token = "0x6001F53")]
			[Address(RVA = "0xADA4F8", Offset = "0xADA4F8", VA = "0xADA4F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000308")]
		public float smoothDeltaTime
		{
			[Token(Token = "0x6001F54")]
			[Address(RVA = "0xADA518", Offset = "0xADA518", VA = "0xADA518")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000309")]
		public float deltaTime
		{
			[Token(Token = "0x6001F55")]
			[Address(RVA = "0xADA5AC", Offset = "0xADA5AC", VA = "0xADA5AC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700030A")]
		public float fixedDeltaTime
		{
			[Token(Token = "0x6001F56")]
			[Address(RVA = "0xADA5F4", Offset = "0xADA5F4", VA = "0xADA5F4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700030B")]
		public float timeScale
		{
			[Token(Token = "0x6001F57")]
			[Address(RVA = "0xADA560", Offset = "0xADA560", VA = "0xADA560")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F58")]
			[Address(RVA = "0xADA63C", Offset = "0xADA63C", VA = "0xADA63C")]
			set
			{
			}
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0xADA644", Offset = "0xADA644", VA = "0xADA644")]
		public TimeManager()
		{
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0xADA838", Offset = "0xADA838", VA = "0xADA838")]
		public void SetParent(TimeManager parent)
		{
		}

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0xADA840", Offset = "0xADA840", VA = "0xADA840")]
		public void Register(Action method, TimeEvent type)
		{
		}

		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0xADA904", Offset = "0xADA904", VA = "0xADA904")]
		public void RegisterWithTimeAdapters(Action method, TimeEvent type, Transform searchComponentsFromHere)
		{
		}

		[Token(Token = "0x6001F5D")]
		[Address(RVA = "0xADB000", Offset = "0xADB000", VA = "0xADB000")]
		public void Unregister(Action method, TimeEvent type)
		{
		}

		[Token(Token = "0x6001F5E")]
		[Address(RVA = "0xADB0D8", Offset = "0xADB0D8", VA = "0xADB0D8")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001F5F")]
		[Address(RVA = "0xADB694", Offset = "0xADB694", VA = "0xADB694")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6001F60")]
		[Address(RVA = "0xADB7A8", Offset = "0xADB7A8", VA = "0xADB7A8")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001F61")]
		[Address(RVA = "0xADB990", Offset = "0xADB990", VA = "0xADB990")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F62")]
		[Address(RVA = "0xADB9E0", Offset = "0xADB9E0", VA = "0xADB9E0")]
		public void ForcedUpdate()
		{
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0xADBA10", Offset = "0xADBA10", VA = "0xADBA10")]
		public void Update()
		{
		}

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0xADBA98", Offset = "0xADBA98", VA = "0xADBA98")]
		private void PauseInHierarchy()
		{
		}

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0xADBBB0", Offset = "0xADBBB0", VA = "0xADBBB0")]
		private void UnpauseInHierarchy()
		{
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0xADBCC4", Offset = "0xADBCC4", VA = "0xADBCC4")]
		public void RemoveTimeAdapter(GameObject owner)
		{
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0xADAA6C", Offset = "0xADAA6C", VA = "0xADAA6C")]
		public void ProcessTimeAdapters(GameObject owner, Transform getComponentsStartPoint, bool useAnimators = true, bool useParticles = true)
		{
		}

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0xADB938", Offset = "0xADB938", VA = "0xADB938")]
		private void TryToUpdateTimeElapsed()
		{
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0xADB800", Offset = "0xADB800", VA = "0xADB800")]
		private void TryToUpdateTimeScale()
		{
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0xADB1F0", Offset = "0xADB1F0", VA = "0xADB1F0")]
		private void DoSomethingForEveryTimeAdapter(Action<TimeAdapter> doWhat)
		{
		}

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0xADB444", Offset = "0xADB444", VA = "0xADB444")]
		private void SendEvent(TimeEvent type)
		{
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0xADA708", Offset = "0xADA708", VA = "0xADA708")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0xADBDB8", Offset = "0xADBDB8", VA = "0xADBDB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2E68", Offset = "0x7E2E68")]
		private void <TryToUpdateTimeScale>b__51_0(TimeAdapter t)
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class TimeManagerBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TimeManagerBehaviour sharedInstance;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TimeManager timeInstance;

		[Token(Token = "0x1700030C")]
		public TimeManager time
		{
			[Token(Token = "0x6001F70")]
			[Address(RVA = "0xADBF88", Offset = "0xADBF88", VA = "0xADBF88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0xAD2540", Offset = "0xAD2540", VA = "0xAD2540")]
		public static TimeManager GetOrCreateInstance()
		{
			return null;
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0xADBFF0", Offset = "0xADBFF0", VA = "0xADBFF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0xADC15C", Offset = "0xADC15C", VA = "0xADC15C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F73")]
		[Address(RVA = "0xADC178", Offset = "0xADC178", VA = "0xADC178")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0xADC194", Offset = "0xADC194", VA = "0xADC194")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0xADC1B0", Offset = "0xADC1B0", VA = "0xADC1B0")]
		public TimeManagerBehaviour()
		{
		}
	}
}
namespace Ergo.StateMachine
{
	[Token(Token = "0x200030C")]
	public class ErgoBaseStateMachineComponent : MonoBehaviour
	{
		[Token(Token = "0x6001F76")]
		[Address(RVA = "0xAD8244", Offset = "0xAD8244", VA = "0xAD8244", Slot = "4")]
		public virtual void StartStateMachine()
		{
		}

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0xAD8248", Offset = "0xAD8248", VA = "0xAD8248", Slot = "5")]
		public virtual void Pause()
		{
		}

		[Token(Token = "0x6001F78")]
		[Address(RVA = "0xAD824C", Offset = "0xAD824C", VA = "0xAD824C", Slot = "6")]
		public virtual void Resume()
		{
		}

		[Token(Token = "0x6001F79")]
		[Address(RVA = "0xAD8250", Offset = "0xAD8250", VA = "0xAD8250", Slot = "7")]
		public virtual void SendEvent(string eventName)
		{
		}

		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0xAD8254", Offset = "0xAD8254", VA = "0xAD8254")]
		public ErgoBaseStateMachineComponent()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class FSM
	{
		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public object owner;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FSMGraph graph;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<FSMState> states;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stack<FSMState> stateStack;

		[Token(Token = "0x1700030D")]
		public int stackCount
		{
			[Token(Token = "0x6001F7B")]
			[Address(RVA = "0xAD825C", Offset = "0xAD825C", VA = "0xAD825C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700030E")]
		public FSMState currentState
		{
			[Token(Token = "0x6001F7C")]
			[Address(RVA = "0xAD82B0", Offset = "0xAD82B0", VA = "0xAD82B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F7D")]
		public bool IsInState<T>() where T : FSMState
		{
			return default(bool);
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0xAD8318", Offset = "0xAD8318", VA = "0xAD8318")]
		public FSM()
		{
		}

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0xAD8450", Offset = "0xAD8450", VA = "0xAD8450")]
		public void OnPause(bool paused)
		{
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0xAD8484", Offset = "0xAD8484", VA = "0xAD8484")]
		public void Update()
		{
		}

		[Token(Token = "0x6001F81")]
		[Address(RVA = "0xAD86A4", Offset = "0xAD86A4", VA = "0xAD86A4", Slot = "4")]
		protected virtual void DoUpdate()
		{
		}

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0xAD86C8", Offset = "0xAD86C8", VA = "0xAD86C8")]
		public void SwitchState(FSMGraph.Node node)
		{
		}

		[Token(Token = "0x6001F83")]
		[Address(RVA = "0xAD87B8", Offset = "0xAD87B8", VA = "0xAD87B8")]
		public void PushState(FSMGraph.Node node)
		{
		}

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0xAD8770", Offset = "0xAD8770", VA = "0xAD8770")]
		public void SwitchState(FSMState state)
		{
		}

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0xAD8860", Offset = "0xAD8860", VA = "0xAD8860")]
		public void PushState(FSMState state)
		{
		}

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0xAD89B8", Offset = "0xAD89B8", VA = "0xAD89B8")]
		public void PopState()
		{
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0xAD893C", Offset = "0xAD893C", VA = "0xAD893C")]
		public void ClearStates()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class FSMGraph
	{
		[Token(Token = "0x20004A6")]
		public class Transition
		{
			[Token(Token = "0x20004F8")]
			public enum Type
			{
				[Token(Token = "0x4002473")]
				SWITCH,
				[Token(Token = "0x4002474")]
				PUSH,
				[Token(Token = "0x4002475")]
				POP
			}

			[Token(Token = "0x40022D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FSMGraph graphOwner;

			[Token(Token = "0x40022DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string message;

			[Token(Token = "0x40022DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Type transitionType;

			[Token(Token = "0x40022DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Node source;

			[Token(Token = "0x40022DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Node destination;

			[Token(Token = "0x60025ED")]
			[Address(RVA = "0xAD8C50", Offset = "0xAD8C50", VA = "0xAD8C50", Slot = "4")]
			public virtual void Perform()
			{
			}

			[Token(Token = "0x60025EE")]
			[Address(RVA = "0xAD8B18", Offset = "0xAD8B18", VA = "0xAD8B18")]
			public Transition()
			{
			}
		}

		[Token(Token = "0x20004A7")]
		public class Node
		{
			[Token(Token = "0x40022DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x60025EF")]
			[Address(RVA = "0xAD8B90", Offset = "0xAD8B90", VA = "0xAD8B90", Slot = "4")]
			public virtual FSMState Create()
			{
				return null;
			}

			[Token(Token = "0x60025F0")]
			[Address(RVA = "0xAD8C40", Offset = "0xAD8C40", VA = "0xAD8C40", Slot = "5")]
			public virtual void RaiseOnNodeEnter(FSMState state)
			{
			}

			[Token(Token = "0x60025F1")]
			[Address(RVA = "0xAD8C44", Offset = "0xAD8C44", VA = "0xAD8C44", Slot = "6")]
			public virtual void RaiseOnNodeExit(FSMState state)
			{
			}

			[Token(Token = "0x60025F2")]
			[Address(RVA = "0xAD8C48", Offset = "0xAD8C48", VA = "0xAD8C48")]
			public Node()
			{
			}
		}

		[Token(Token = "0x20004A8")]
		public class Node<T> : Node where T : FSMState, new()
		{
			[Token(Token = "0x20004F9")]
			public delegate void NodeDelegate<T>(Node node, T state);

			[Token(Token = "0x14000031")]
			public event NodeDelegate<T> OnNodeEnter
			{
				[Token(Token = "0x60025F3")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E4218", Offset = "0x7E4218")]
				add
				{
				}
				[Token(Token = "0x60025F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E4228", Offset = "0x7E4228")]
				remove
				{
				}
			}

			[Token(Token = "0x14000032")]
			public event NodeDelegate<T> OnNodeExit
			{
				[Token(Token = "0x60025F5")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E4238", Offset = "0x7E4238")]
				add
				{
				}
				[Token(Token = "0x60025F6")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E4248", Offset = "0x7E4248")]
				remove
				{
				}
			}

			[Token(Token = "0x60025F7")]
			public override void RaiseOnNodeEnter(FSMState state)
			{
			}

			[Token(Token = "0x60025F8")]
			public override void RaiseOnNodeExit(FSMState state)
			{
			}

			[Token(Token = "0x60025F9")]
			public override FSMState Create()
			{
				return null;
			}

			[Token(Token = "0x60025FA")]
			protected T InternalCreate()
			{
				return null;
			}

			[Token(Token = "0x60025FB")]
			public Node()
			{
			}
		}

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FSM fsmOwner;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Node currentNode;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Node> nodes;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Transition> transitions;

		[Token(Token = "0x6001F88")]
		[Address(RVA = "0xAD8A64", Offset = "0xAD8A64", VA = "0xAD8A64")]
		public Transition AddTransition(Node source, Node destination, string message = "finished", Transition.Type transitionType = Transition.Type.SWITCH)
		{
			return null;
		}

		[Token(Token = "0x6001F89")]
		public Node<T> AddNode<T>(string name = "") where T : FSMState, new()
		{
			return null;
		}

		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0xAD8B20", Offset = "0xAD8B20", VA = "0xAD8B20")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0xAD8564", Offset = "0xAD8564", VA = "0xAD8564")]
		public void SendMessage(string message)
		{
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0xAD83B8", Offset = "0xAD83B8", VA = "0xAD83B8")]
		public FSMGraph()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class FSMState
	{
		[Token(Token = "0x4001252")]
		public const string FINISHED = "finished";

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FSM fsmOwner;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool markedForFinish;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string markedForFinishMessage;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<FSMState> OnFinishState;

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0xAD912C", Offset = "0xAD912C", VA = "0xAD912C", Slot = "4")]
		public virtual void OnStart()
		{
		}

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0xAD9130", Offset = "0xAD9130", VA = "0xAD9130", Slot = "5")]
		public virtual void OnUpdate()
		{
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0xAD91AC", Offset = "0xAD91AC", VA = "0xAD91AC", Slot = "6")]
		public virtual void OnPaused(bool paused)
		{
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0xAD91B0", Offset = "0xAD91B0", VA = "0xAD91B0", Slot = "7")]
		public virtual void OnFinish()
		{
		}

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0xAD8BE8", Offset = "0xAD8BE8", VA = "0xAD8BE8")]
		public FSMState()
		{
		}

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0xAD9190", Offset = "0xAD9190", VA = "0xAD9190")]
		public void FinishState(string message = "finished")
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class FSMObjectsManager : MonoBehaviour
	{
		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FSMObjectsManager m_instance;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<ErgoBaseStateMachineComponent> _Objects;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF460", Offset = "0x7DF460")]
		private List<ErgoBaseStateMachineComponent> <objects>k__BackingField;

		[Token(Token = "0x1700030F")]
		public List<ErgoBaseStateMachineComponent> objects
		{
			[Token(Token = "0x6001F94")]
			[Address(RVA = "0xAD8DC8", Offset = "0xAD8DC8", VA = "0xAD8DC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2E78", Offset = "0x7E2E78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F95")]
			[Address(RVA = "0xAD8DD0", Offset = "0xAD8DD0", VA = "0xAD8DD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2E88", Offset = "0x7E2E88")]
			protected set
			{
			}
		}

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0xAD8D78", Offset = "0xAD8D78", VA = "0xAD8D78")]
		public static FSMObjectsManager sharedManager()
		{
			return null;
		}

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0xAD8DD8", Offset = "0xAD8DD8", VA = "0xAD8DD8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0xAD8F58", Offset = "0xAD8F58", VA = "0xAD8F58")]
		public void FindAllFSMs()
		{
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0xAD9024", Offset = "0xAD9024", VA = "0xAD9024")]
		public void RegisterObject(ErgoBaseStateMachineComponent objectToRegister)
		{
		}

		[Token(Token = "0x6001F99")]
		[Address(RVA = "0xAD90BC", Offset = "0xAD90BC", VA = "0xAD90BC")]
		public FSMObjectsManager()
		{
		}
	}
}
namespace Ergo.Extensions
{
	[Token(Token = "0x2000311")]
	public static class StringExtensions
	{
		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0xAD0200", Offset = "0xAD0200", VA = "0xAD0200")]
		public static string SplitCamelCase(this string s)
		{
			return null;
		}
	}
}
namespace Ergo.Animation
{
	[Token(Token = "0x2000312")]
	public class ErgoBaseAnimator
	{
		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0x9C3768", Offset = "0x9C3768", VA = "0x9C3768")]
		public static ErgoBaseAnimator CreateErgoAnimatorFromGameobject(GameObject rootObject)
		{
			return null;
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0x9C38E0", Offset = "0x9C38E0", VA = "0x9C38E0")]
		public void Play(string clipName)
		{
		}

		[Token(Token = "0x6001F9D")]
		[Address(RVA = "0x9C38FC", Offset = "0x9C38FC", VA = "0x9C38FC")]
		public void Play(string clipName, Action OnComplete)
		{
		}

		[Token(Token = "0x6001F9E")]
		[Address(RVA = "0x9C391C", Offset = "0x9C391C", VA = "0x9C391C")]
		public void Play(string clipName, bool loop, [Optional] Action OnComplete)
		{
		}

		[Token(Token = "0x6001F9F")]
		[Address(RVA = "0x9C393C", Offset = "0x9C393C", VA = "0x9C393C", Slot = "4")]
		public virtual void Play(string clipName, bool isFrame, float value, bool loop, [Optional] Action OnComplete)
		{
		}

		[Token(Token = "0x6001FA0")]
		[Address(RVA = "0x9C3940", Offset = "0x9C3940", VA = "0x9C3940", Slot = "5")]
		public virtual void Stop()
		{
		}

		[Token(Token = "0x6001FA1")]
		[Address(RVA = "0x9C3944", Offset = "0x9C3944", VA = "0x9C3944", Slot = "6")]
		public virtual void Pause()
		{
		}

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0x9C3948", Offset = "0x9C3948", VA = "0x9C3948", Slot = "7")]
		public virtual void Resume()
		{
		}

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0x9C394C", Offset = "0x9C394C", VA = "0x9C394C", Slot = "8")]
		public virtual void PreviewValue(string clipName, bool isFrame, int value)
		{
		}

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0x9C3950", Offset = "0x9C3950", VA = "0x9C3950", Slot = "9")]
		public virtual void SetInt(string parameterName, int value)
		{
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0x9C3954", Offset = "0x9C3954", VA = "0x9C3954", Slot = "10")]
		public virtual void SetFloat(string parameterName, float value)
		{
		}

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0x9C3958", Offset = "0x9C3958", VA = "0x9C3958", Slot = "11")]
		public virtual void SetBool(string parameterName, bool value)
		{
		}

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0x9C395C", Offset = "0x9C395C", VA = "0x9C395C", Slot = "12")]
		public virtual void SetTrigger(string parameterName)
		{
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0x9C3960", Offset = "0x9C3960", VA = "0x9C3960")]
		public ErgoBaseAnimator()
		{
		}
	}
	[Token(Token = "0x2000313")]
	public class ErgoMotinAnimator : ErgoBaseAnimator
	{
		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MotinAnimator motinAnimator;

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0x9C3888", Offset = "0x9C3888", VA = "0x9C3888")]
		public ErgoMotinAnimator(MotinAnimator animator)
		{
		}

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0x9C3968", Offset = "0x9C3968", VA = "0x9C3968", Slot = "4")]
		public override void Play(string clipName, bool isFrame, float value, bool loop, [Optional] Action OnComplete)
		{
		}

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0x9C398C", Offset = "0x9C398C", VA = "0x9C398C", Slot = "5")]
		public override void Stop()
		{
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0x9C39A8", Offset = "0x9C39A8", VA = "0x9C39A8", Slot = "7")]
		public override void Resume()
		{
		}

		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0x9C39C4", Offset = "0x9C39C4", VA = "0x9C39C4", Slot = "6")]
		public override void Pause()
		{
		}
	}
	[Token(Token = "0x2000314")]
	public class ErgoUnityAnimator : ErgoBaseAnimator
	{
		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Animator unityAnimator;

		[Token(Token = "0x6001FAE")]
		[Address(RVA = "0x9C38B4", Offset = "0x9C38B4", VA = "0x9C38B4")]
		public ErgoUnityAnimator(Animator animator)
		{
		}

		[Token(Token = "0x6001FAF")]
		[Address(RVA = "0x9C39E0", Offset = "0x9C39E0", VA = "0x9C39E0", Slot = "11")]
		public override void SetBool(string parameterName, bool value)
		{
		}

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0x9C3A00", Offset = "0x9C3A00", VA = "0x9C3A00", Slot = "9")]
		public override void SetInt(string parameterName, int value)
		{
		}

		[Token(Token = "0x6001FB1")]
		[Address(RVA = "0x9C3A1C", Offset = "0x9C3A1C", VA = "0x9C3A1C", Slot = "10")]
		public override void SetFloat(string parameterName, float value)
		{
		}

		[Token(Token = "0x6001FB2")]
		[Address(RVA = "0x9C3A38", Offset = "0x9C3A38", VA = "0x9C3A38", Slot = "12")]
		public override void SetTrigger(string parameterName)
		{
		}
	}
}
namespace Ergo.Input
{
	[Token(Token = "0x2000315")]
	public enum INPUT_ACTIONS
	{
		[Token(Token = "0x400125D")]
		NONE = -1,
		[Token(Token = "0x400125E")]
		PEPE,
		[Token(Token = "0x400125F")]
		COUNT
	}
	[Token(Token = "0x2000316")]
	public enum INPUT_CONTROL_SETUP
	{
		[Token(Token = "0x4001261")]
		NONE = -1,
		[Token(Token = "0x4001262")]
		Oculus,
		[Token(Token = "0x4001263")]
		COUNT
	}
	[Token(Token = "0x2000317")]
	public class InputActionsdataManager : BaseDataManager<InputActionData>
	{
		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputActionsdataManager sharedInstance;

		[Token(Token = "0x6001FB3")]
		[Address(RVA = "0xAD3FB8", Offset = "0xAD3FB8", VA = "0xAD3FB8")]
		public static InputActionsdataManager sharedManager()
		{
			return null;
		}

		[Token(Token = "0x6001FB4")]
		public static T GetData<T>(INPUT_ACTIONS id) where T : InputActionData
		{
			return null;
		}

		[Token(Token = "0x6001FB5")]
		public static T GetDataByType<T>() where T : InputActionData
		{
			return null;
		}

		[Token(Token = "0x6001FB6")]
		[Address(RVA = "0xAD4078", Offset = "0xAD4078", VA = "0xAD4078")]
		protected InputActionsdataManager()
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class InputControlSetupDataManager : BaseDataManager<ControlSetupData>
	{
		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputControlSetupDataManager sharedInstance;

		[Token(Token = "0x6001FB8")]
		[Address(RVA = "0xAD40F4", Offset = "0xAD40F4", VA = "0xAD40F4")]
		public static InputControlSetupDataManager sharedManager()
		{
			return null;
		}

		[Token(Token = "0x6001FB9")]
		public static T GetData<T>(INPUT_CONTROL_SETUP id) where T : ControlSetupData
		{
			return null;
		}

		[Token(Token = "0x6001FBA")]
		public static T GetDataByType<T>() where T : ControlSetupData
		{
			return null;
		}

		[Token(Token = "0x6001FBB")]
		[Address(RVA = "0xAD41B4", Offset = "0xAD41B4", VA = "0xAD41B4")]
		protected InputControlSetupDataManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000319")]
	public class ControlSetupData : ErgoData
	{
		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<InputActionBindingData> inputBindings;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string controlPrefix;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isDefault;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public InputPlatforms platform;

		[Token(Token = "0x6001FBD")]
		[Address(RVA = "0xAD32A8", Offset = "0xAD32A8", VA = "0xAD32A8", Slot = "4")]
		public override void SetDefaultValues()
		{
		}

		[Token(Token = "0x6001FBE")]
		[Address(RVA = "0xAD3350", Offset = "0xAD3350", VA = "0xAD3350", Slot = "10")]
		public override void OnFinishedDeserializing()
		{
		}

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0xAD32D0", Offset = "0xAD32D0", VA = "0xAD32D0")]
		private void CreateDefaultActions()
		{
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0xAD3614", Offset = "0xAD3614", VA = "0xAD3614")]
		public ControlSetupData()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public enum ErgoTouchPhase
	{
		[Token(Token = "0x400126B")]
		Began,
		[Token(Token = "0x400126C")]
		Moved,
		[Token(Token = "0x400126D")]
		Stationary,
		[Token(Token = "0x400126E")]
		Ended,
		[Token(Token = "0x400126F")]
		Canceled
	}
	[Token(Token = "0x200031B")]
	public class ErgoTouch
	{
		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int fingerId;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int iphoneFingerId;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ErgoTouchPhase phase;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float deltaTime;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 _deltaPos;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int tapCount;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector2 m_position;

		[Token(Token = "0x17000310")]
		public Vector2 deltaPos
		{
			[Token(Token = "0x6001FC1")]
			[Address(RVA = "0xAD369C", Offset = "0xAD369C", VA = "0xAD369C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001FC2")]
			[Address(RVA = "0xAD36A4", Offset = "0xAD36A4", VA = "0xAD36A4")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000311")]
		public Vector3 position3
		{
			[Token(Token = "0x6001FC3")]
			[Address(RVA = "0xAD36AC", Offset = "0xAD36AC", VA = "0xAD36AC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001FC4")]
			[Address(RVA = "0xAD36E8", Offset = "0xAD36E8", VA = "0xAD36E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000312")]
		public Vector2 position
		{
			[Token(Token = "0x6001FC5")]
			[Address(RVA = "0xAD3818", Offset = "0xAD3818", VA = "0xAD3818")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001FC6")]
			[Address(RVA = "0xAD377C", Offset = "0xAD377C", VA = "0xAD377C")]
			set
			{
			}
		}

		[Token(Token = "0x17000313")]
		public Vector2 positionFlipped
		{
			[Token(Token = "0x6001FC7")]
			[Address(RVA = "0xAD3820", Offset = "0xAD3820", VA = "0xAD3820")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0xAD387C", Offset = "0xAD387C", VA = "0xAD387C")]
		public ErgoTouch()
		{
		}

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0xAD390C", Offset = "0xAD390C", VA = "0xAD390C")]
		public ErgoTouch(Touch touch)
		{
		}

		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0xAD39D0", Offset = "0xAD39D0", VA = "0xAD39D0")]
		public void Set(Touch touch)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031C")]
	public class InputActionBindingData : ErgoData
	{
		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string inputName;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[EditorReadonlyField]
		public INPUT_ACTIONS gameActionId;

		[Token(Token = "0x6001FCB")]
		[Address(RVA = "0xAD3F50", Offset = "0xAD3F50", VA = "0xAD3F50")]
		public InputActionBindingData()
		{
		}

		[Token(Token = "0x6001FCC")]
		[Address(RVA = "0xAD355C", Offset = "0xAD355C", VA = "0xAD355C")]
		public InputActionBindingData(INPUT_ACTIONS action)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031D")]
	public class InputActionData : ErgoData
	{
		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0xAD3FB0", Offset = "0xAD3FB0", VA = "0xAD3FB0")]
		public InputActionData()
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class UniversalInputManager : MonoBehaviour
	{
		[Token(Token = "0x4001279")]
		public const string FOLDER_MODULE = "CORE/Input";

		[Token(Token = "0x400127A")]
		public const string PATH_INPUT_MANAGER_INSTALLATION = "CORE/Input/Installation";

		[Token(Token = "0x400127B")]
		public const string PATH_INPUT_MANAGER_TEMPLATES = "CORE/Input/Installation/Templates";

		[Token(Token = "0x400127C")]
		public const string PATH_INPUT_MANAGER_ACTION_TEMPLATE = "CORE/Input/Installation/Templates/INPUT_ACTIONS_TEMPLATE.txt";

		[Token(Token = "0x400127D")]
		public const string PATH_INPUT_MANAGER_CONTROL_TEMPLATE = "CORE/Input/Installation/Templates/INPUT_CONTROL_SETUP_TEMPLATE.txt";

		[Token(Token = "0x400127E")]
		public const string PATH_INPUT_MANAGER_ACTIONS_FILE = "CORE/Input/Installation/Templates/InputActionsFile.xml";

		[Token(Token = "0x400127F")]
		public const string PATH_INPUT_MANAGER_CONTROL_FILE = "CORE/Input/Installation/Templates/InputControlSetupFile.xml";

		[Token(Token = "0x4001280")]
		public const string GameActionsFilePath = "GameData/InputActionsFile.xml";

		[Token(Token = "0x4001281")]
		public const string InputFilePath = "GameData/InputControlSetupFile.xml";

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DF480", Offset = "0x7DF480")]
		private InputPlatforms <inputPlatform>k__BackingField;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool enableDebugLog;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DF490", Offset = "0x7DF490")]
		public float axisDeadzone;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UniversalInputManager sharedInstance;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ControlSetupData[] controlSetups;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ControlSetupData currentSetup;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useJoystick;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float dragTolerance;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<ErgoTouch> touchList;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action<ErgoTouch> OnTouchBegan;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action<ErgoTouch> OnTouchMoved;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action<ErgoTouch> OnTouchStationary;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action<ErgoTouch> OnTouchEnded;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Action<ErgoTouch> OnTouchCanceled;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 tmpVector3;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector2 lastMousePosition;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector2 mouseDelta;

		[Token(Token = "0x17000314")]
		public InputPlatforms inputPlatform
		{
			[Token(Token = "0x6001FCE")]
			[Address(RVA = "0xAD4230", Offset = "0xAD4230", VA = "0xAD4230")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2EA8", Offset = "0x7E2EA8")]
			get
			{
				return default(InputPlatforms);
			}
			[Token(Token = "0x6001FCF")]
			[Address(RVA = "0xAD4238", Offset = "0xAD4238", VA = "0xAD4238")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2EB8", Offset = "0x7E2EB8")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000315")]
		public int touchCount
		{
			[Token(Token = "0x6001FD7")]
			[Address(RVA = "0xAD4C0C", Offset = "0xAD4C0C", VA = "0xAD4C0C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000316")]
		public Vector3 mousePosition3
		{
			[Token(Token = "0x6001FD8")]
			[Address(RVA = "0xAD4C60", Offset = "0xAD4C60", VA = "0xAD4C60")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000317")]
		public Vector2 mousePosition
		{
			[Token(Token = "0x6001FD9")]
			[Address(RVA = "0xAD4C9C", Offset = "0xAD4C9C", VA = "0xAD4C9C")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000318")]
		public Vector2 mousePositionFlipped
		{
			[Token(Token = "0x6001FDA")]
			[Address(RVA = "0xAD4DBC", Offset = "0xAD4DBC", VA = "0xAD4DBC")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0xAD4240", Offset = "0xAD4240", VA = "0xAD4240")]
		private void Log(string text)
		{
		}

		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0xAD42CC", Offset = "0xAD42CC", VA = "0xAD42CC")]
		public static UniversalInputManager sharedManager()
		{
			return null;
		}

		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0xAD4334", Offset = "0xAD4334", VA = "0xAD4334")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FD3")]
		[Address(RVA = "0xAD49DC", Offset = "0xAD49DC", VA = "0xAD49DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FD4")]
		[Address(RVA = "0xAD44E8", Offset = "0xAD44E8", VA = "0xAD44E8")]
		protected void DetectControlSetup()
		{
		}

		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0xAD4BEC", Offset = "0xAD4BEC", VA = "0xAD4BEC")]
		public string GetCurrentSetupName()
		{
			return null;
		}

		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0xAD3EDC", Offset = "0xAD3EDC", VA = "0xAD3EDC")]
		public void raiseInputEvent(Action<ErgoTouch> callback, ErgoTouch ergoTouch)
		{
		}

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0xAD49E0", Offset = "0xAD49E0", VA = "0xAD49E0")]
		public void UpdateIphone()
		{
		}

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0xAD4E50", Offset = "0xAD4E50", VA = "0xAD4E50")]
		public bool AnyKeyPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0xAD4E58", Offset = "0xAD4E58", VA = "0xAD4E58")]
		public bool AnyKey()
		{
			return default(bool);
		}

		[Token(Token = "0x6001FDE")]
		[Address(RVA = "0xAD4E60", Offset = "0xAD4E60", VA = "0xAD4E60")]
		public bool GetButton(INPUT_ACTIONS gameInput)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0xAD4F58", Offset = "0xAD4F58", VA = "0xAD4F58")]
		public bool GetButtonDown(INPUT_ACTIONS gameInput)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0xAD5050", Offset = "0xAD5050", VA = "0xAD5050")]
		public bool GetButtonUp(INPUT_ACTIONS gameInput)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0xAD5148", Offset = "0xAD5148", VA = "0xAD5148")]
		public float GetAxis(INPUT_ACTIONS gameInput)
		{
			return default(float);
		}

		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0xAD52B4", Offset = "0xAD52B4", VA = "0xAD52B4")]
		public float GetAxisRaw(INPUT_ACTIONS gameInput)
		{
			return default(float);
		}

		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0xAD4D34", Offset = "0xAD4D34", VA = "0xAD4D34")]
		public ErgoTouch GetTouch(int touchIndex)
		{
			return null;
		}

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0xAD5420", Offset = "0xAD5420", VA = "0xAD5420")]
		public bool GetTouchPressed(int touchIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0xAD5530", Offset = "0xAD5530", VA = "0xAD5530")]
		public bool GetTouchDown(int touchIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0xAD55C8", Offset = "0xAD55C8", VA = "0xAD55C8")]
		public bool GetTouchUp(int touchIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0xAD5660", Offset = "0xAD5660", VA = "0xAD5660")]
		public bool GetTouchMoved(int touchIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0xAD56F8", Offset = "0xAD56F8", VA = "0xAD56F8")]
		public UniversalInputManager()
		{
		}
	}
}
namespace Artngame.SKYMASTER
{
	[Token(Token = "0x200031F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7C10", Offset = "0x7D7C10")]
	public class GerstnerDisplaceSM : Displace
	{
		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0xE3D814", Offset = "0xE3D814", VA = "0xE3D814")]
		public GerstnerDisplaceSM()
		{
		}
	}
	[Token(Token = "0x2000320")]
	public class MeshContainer
	{
		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] vertices;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] normals;

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0xE42E60", Offset = "0xE42E60", VA = "0xE42E60")]
		public MeshContainer(Mesh m)
		{
		}

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0xE42EB8", Offset = "0xE42EB8", VA = "0xE42EB8")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x2000321")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7C84", Offset = "0x7D7C84")]
	public class PlanarReflectionSM : MonoBehaviour
	{
		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask reflectionMask;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool reflectSkybox;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color clearColor;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string reflectionSampler;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float clipPlaneOffset;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Downscale;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Camera m_ReflectionCameraOut;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_SharedMaterial;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Material> AssignCubeMapMats;

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0xE513A0", Offset = "0xE513A0", VA = "0xE513A0")]
		public void Start()
		{
		}

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0xE514FC", Offset = "0xE514FC", VA = "0xE514FC")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0xE515F4", Offset = "0xE515F4", VA = "0xE515F4")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0xE5190C", Offset = "0xE5190C", VA = "0xE5190C")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0xE519C8", Offset = "0xE519C8", VA = "0xE519C8")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0xE51ADC", Offset = "0xE51ADC", VA = "0xE51ADC")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0xE52694", Offset = "0xE52694", VA = "0xE52694")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0xE526F4", Offset = "0xE526F4", VA = "0xE526F4")]
		public void Update()
		{
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0xE52770", Offset = "0xE52770", VA = "0xE52770")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6001FF6")]
		[Address(RVA = "0xE528E4", Offset = "0xE528E4", VA = "0xE528E4")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0xE52A44", Offset = "0xE52A44", VA = "0xE52A44")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0xE51C4C", Offset = "0xE51C4C", VA = "0xE51C4C")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0xE52AA4", Offset = "0xE52AA4", VA = "0xE52AA4")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x6001FFA")]
		[Address(RVA = "0xE52FB8", Offset = "0xE52FB8", VA = "0xE52FB8")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0xE52B0C", Offset = "0xE52B0C", VA = "0xE52B0C")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0xE53200", Offset = "0xE53200", VA = "0xE53200")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0xE52DD0", Offset = "0xE52DD0", VA = "0xE52DD0")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FFE")]
		[Address(RVA = "0xE53220", Offset = "0xE53220", VA = "0xE53220")]
		public PlanarReflectionSM()
		{
		}
	}
	[Token(Token = "0x2000322")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7CF8", Offset = "0x7D7CF8")]
	[ExecuteInEditMode]
	public class SpecularLightingSM : MonoBehaviour
	{
		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform specularLight;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaterBaseSM m_WaterBase;

		[Token(Token = "0x6001FFF")]
		[Address(RVA = "0xAE7748", Offset = "0xAE7748", VA = "0xAE7748")]
		public void Start()
		{
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0xAE7838", Offset = "0xAE7838", VA = "0xAE7838")]
		public void Update()
		{
		}

		[Token(Token = "0x6002001")]
		[Address(RVA = "0xAE7A68", Offset = "0xAE7A68", VA = "0xAE7A68")]
		public SpecularLightingSM()
		{
		}
	}
	[Token(Token = "0x2000323")]
	public enum WaterQuality
	{
		[Token(Token = "0x40012A5")]
		High = 2,
		[Token(Token = "0x40012A6")]
		Medium = 1,
		[Token(Token = "0x40012A7")]
		Low = 0
	}
	[Token(Token = "0x2000324")]
	[ExecuteInEditMode]
	public class WaterBaseSM : MonoBehaviour
	{
		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material sharedMaterial;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterQuality waterQuality;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool edgeBlend;

		[Token(Token = "0x6002002")]
		[Address(RVA = "0xAFD490", Offset = "0xAFD490", VA = "0xAFD490")]
		public void UpdateShader()
		{
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0xAFD614", Offset = "0xAFD614", VA = "0xAFD614")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6002004")]
		[Address(RVA = "0xAFD6CC", Offset = "0xAFD6CC", VA = "0xAFD6CC")]
		public void Update()
		{
		}

		[Token(Token = "0x6002005")]
		[Address(RVA = "0xAFD750", Offset = "0xAFD750", VA = "0xAFD750")]
		public WaterBaseSM()
		{
		}
	}
	[Token(Token = "0x2000325")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7D7C", Offset = "0x7D7D7C")]
	public class Displace : MonoBehaviour
	{
		[Token(Token = "0x6002006")]
		[Address(RVA = "0xBEC814", Offset = "0xBEC814", VA = "0xBEC814")]
		public void Awake()
		{
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0xBEC838", Offset = "0xBEC838", VA = "0xBEC838")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0xBEC898", Offset = "0xBEC898", VA = "0xBEC898")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0xBEC8F8", Offset = "0xBEC8F8", VA = "0xBEC8F8")]
		public Displace()
		{
		}
	}
	[Token(Token = "0x2000326")]
	[ExecuteInEditMode]
	public class WaterSM : MonoBehaviour
	{
		[Token(Token = "0x20004A9")]
		public enum WaterMode
		{
			[Token(Token = "0x40022E2")]
			Simple,
			[Token(Token = "0x40022E3")]
			Reflective,
			[Token(Token = "0x40022E4")]
			Refractive
		}

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaterMode waterMode;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disablePixelLights;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int textureSize;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float clipPlaneOffset;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask reflectLayers;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask refractLayers;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, Camera> m_RefractionCameras;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_RefractionTexture;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterMode m_HardwareWaterSupport;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_OldRefractionTextureSize;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideWater;

		[Token(Token = "0x600200A")]
		[Address(RVA = "0x9B07C0", Offset = "0x9B07C0", VA = "0x9B07C0")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0x9B2210", Offset = "0x9B2210", VA = "0x9B2210")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0x9B250C", Offset = "0x9B250C", VA = "0x9B250C")]
		private void Update()
		{
		}

		[Token(Token = "0x600200D")]
		[Address(RVA = "0x9B1B24", Offset = "0x9B1B24", VA = "0x9B1B24")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x600200E")]
		[Address(RVA = "0x9B1118", Offset = "0x9B1118", VA = "0x9B1118")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0x9B1104", Offset = "0x9B1104", VA = "0x9B1104")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6002010")]
		[Address(RVA = "0x9B0FB4", Offset = "0x9B0FB4", VA = "0x9B0FB4")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6002011")]
		[Address(RVA = "0x9B2028", Offset = "0x9B2028", VA = "0x9B2028")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002012")]
		[Address(RVA = "0x9B1D84", Offset = "0x9B1D84", VA = "0x9B1D84")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x6002013")]
		[Address(RVA = "0x9B27A0", Offset = "0x9B27A0", VA = "0x9B27A0")]
		public WaterSM()
		{
		}
	}
	[Token(Token = "0x2000327")]
	[ExecuteInEditMode]
	public class WaterTileSM : MonoBehaviour
	{
		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlanarReflectionSM reflection;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterBaseSM waterBase;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool allowDebugInSceneWindow;

		[Token(Token = "0x6002014")]
		[Address(RVA = "0x9B287C", Offset = "0x9B287C", VA = "0x9B287C")]
		public void Start()
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0x9B2880", Offset = "0x9B2880", VA = "0x9B2880")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x6002016")]
		[Address(RVA = "0x9B2A24", Offset = "0x9B2A24", VA = "0x9B2A24")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6002017")]
		[Address(RVA = "0x9B2BC8", Offset = "0x9B2BC8", VA = "0x9B2BC8")]
		public WaterTileSM()
		{
		}
	}
	[Token(Token = "0x2000328")]
	public class RiverHandlerSM : MonoBehaviour
	{
		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material mat;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scrollSpeed;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform lightDir;

		[Token(Token = "0x6002018")]
		[Address(RVA = "0xE54508", Offset = "0xE54508", VA = "0xE54508")]
		private void Start()
		{
		}

		[Token(Token = "0x6002019")]
		[Address(RVA = "0xE54588", Offset = "0xE54588", VA = "0xE54588")]
		private void Update()
		{
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0xE547B0", Offset = "0xE547B0", VA = "0xE547B0")]
		public RiverHandlerSM()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class ChainLightning_SKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject[] target1;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int zigs;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speed;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float scale;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light startLight;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Light endLight;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PerlinSKYMASTER noise;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool Energized;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool is_parent;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int current_depth;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int max_depth;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int current_target_count;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int max_target_count;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform this_transform;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool Random_target;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float Affect_dist;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float Time_count;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float Change_target_delay;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool Random_delay;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float Delay_offset;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float Target_delay;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool Moving_Source;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float Particle_energy;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int optimize_factor;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float ParticleSize;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool Branches;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 Branch_Offset;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Vector3 offset_bias;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 Target_pos;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 Saved_start_pos;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float Downward_speed;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float Stop_dist;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool cast_branches;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public Color Branch_color;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DF4C8", Offset = "0x7DF4C8")]
		public float Zigs_branching_divider;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool offset_noise;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		public bool reset_noise;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		public bool Slow_on_end;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float Slow_down_height;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float Slow_divider;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public Vector2 Light_delay;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool particle_on;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		public bool line_on;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private LineRenderer Liner;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float stop_time;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public Vector2 Line_delay;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public int Vertex_count;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float Deviation;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public Vector2 Line_width;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float min_y_disp;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public bool line_glow_on;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private LineRenderer LinerGlow;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Color Glow_color;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Material Line_Lightning_mat;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public List<LineRenderer> LineBranches;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public List<LineRenderer> LineBranchesGlow;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public int max_branches;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool SmoothLights;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float max_end_light_intensity;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float max_start_light_intensity;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float LightFadeSpeed;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float LightSpeed;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float LightRipple;

		[Token(Token = "0x600201B")]
		[Address(RVA = "0xBE0ACC", Offset = "0xBE0ACC", VA = "0xBE0ACC")]
		private void Start()
		{
		}

		[Token(Token = "0x600201C")]
		[Address(RVA = "0xBE0C68", Offset = "0xBE0C68", VA = "0xBE0C68")]
		private void Update()
		{
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0xBE34B8", Offset = "0xBE34B8", VA = "0xBE34B8")]
		public ChainLightning_SKYMASTER()
		{
		}
	}
	[Token(Token = "0x200032A")]
	[ExecuteInEditMode]
	public class Circle_Around_ParticleSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform trans;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedMult;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool up_down_motion;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool Shock_effect;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float up_down_speed;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float up_down_multiply;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float JITTER;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform sphereObject;

		[Token(Token = "0x600201E")]
		[Address(RVA = "0xBE3690", Offset = "0xBE3690", VA = "0xBE3690")]
		private void Start()
		{
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0xBE36B8", Offset = "0xBE36B8", VA = "0xBE36B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0xBE36BC", Offset = "0xBE36BC", VA = "0xBE36BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0xBE3918", Offset = "0xBE3918", VA = "0xBE3918")]
		public Circle_Around_ParticleSKYMASTER()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class DragTransformSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x20004AA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E70", Offset = "0x7D8E70")]
		private sealed class <OnMouseDown>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40022E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40022E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40022E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragTransformSKYMASTER <>4__this;

			[Token(Token = "0x40022E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <screenSpace>5__2;

			[Token(Token = "0x40022E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <offset>5__3;

			[Token(Token = "0x170003CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025FF")]
				[Address(RVA = "0xBED57C", Offset = "0xBED57C", VA = "0xBED57C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002601")]
				[Address(RVA = "0xBED5E8", Offset = "0xBED5E8", VA = "0xBED5E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025FC")]
			[Address(RVA = "0xBED260", Offset = "0xBED260", VA = "0xBED260")]
			[DebuggerHidden]
			public <OnMouseDown>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60025FD")]
			[Address(RVA = "0xBED2C0", Offset = "0xBED2C0", VA = "0xBED2C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025FE")]
			[Address(RVA = "0xBED2C4", Offset = "0xBED2C4", VA = "0xBED2C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002600")]
			[Address(RVA = "0xBED584", Offset = "0xBED584", VA = "0xBED584", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color mouseOverColor;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color originalColor;

		[Token(Token = "0x6002022")]
		[Address(RVA = "0xBED08C", Offset = "0xBED08C", VA = "0xBED08C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002023")]
		[Address(RVA = "0xBED104", Offset = "0xBED104", VA = "0xBED104")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x6002024")]
		[Address(RVA = "0xBED178", Offset = "0xBED178", VA = "0xBED178")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0xBED1EC", Offset = "0xBED1EC", VA = "0xBED1EC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2EC8", Offset = "0x7E2EC8")]
		private IEnumerator OnMouseDown()
		{
			return null;
		}

		[Token(Token = "0x6002026")]
		[Address(RVA = "0xBED28C", Offset = "0xBED28C", VA = "0xBED28C")]
		public DragTransformSKYMASTER()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class MoveItemOverGroundSM : MonoBehaviour
	{
		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 CAST_FORWARD_VEC;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject HERO;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float PROJ_SPEED;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Speed_x;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float Speed_z;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Dist_Above_Terrain;

		[Token(Token = "0x6002027")]
		[Address(RVA = "0xE42EFC", Offset = "0xE42EFC", VA = "0xE42EFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002028")]
		[Address(RVA = "0xE42FB0", Offset = "0xE42FB0", VA = "0xE42FB0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0xE43210", Offset = "0xE43210", VA = "0xE43210")]
		public MoveItemOverGroundSM()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class SmoothLookAtSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float damping;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool smooth;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform This_transf;

		[Token(Token = "0x600202A")]
		[Address(RVA = "0xAE7254", Offset = "0xAE7254", VA = "0xAE7254")]
		private void Start()
		{
		}

		[Token(Token = "0x600202B")]
		[Address(RVA = "0xAE7318", Offset = "0xAE7318", VA = "0xAE7318")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600202C")]
		[Address(RVA = "0xAE7548", Offset = "0xAE7548", VA = "0xAE7548")]
		public SmoothLookAtSKYMASTER()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class Vortex_PDM
	{
		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 velocity;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int particle_ID;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float lifetime;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 angular_velocity;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float scale;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool active;

		[Token(Token = "0x600202D")]
		[Address(RVA = "0xAFD488", Offset = "0xAFD488", VA = "0xAFD488")]
		public Vortex_PDM()
		{
		}
	}
	[Token(Token = "0x200032F")]
	[ExecuteInEditMode]
	public class AttractParticlesSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x20004AB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E80", Offset = "0x7D8E80")]
		private sealed class <>c__DisplayClass78_0
		{
			[Token(Token = "0x40022EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float dist;

			[Token(Token = "0x40022EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 SPHERE_POS;

			[Token(Token = "0x40022EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AttractParticlesSKYMASTER <>4__this;

			[Token(Token = "0x6002602")]
			[Address(RVA = "0x105E320", Offset = "0x105E320", VA = "0x105E320")]
			public <>c__DisplayClass78_0()
			{
			}
		}

		[Token(Token = "0x20004AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8E90", Offset = "0x7D8E90")]
		private sealed class <>c__DisplayClass78_1
		{
			[Token(Token = "0x40022ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string p11_tag;

			[Token(Token = "0x40022EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass78_0 CS$<>8__locals1;

			[Token(Token = "0x6002603")]
			[Address(RVA = "0x105E328", Offset = "0x105E328", VA = "0x105E328")]
			public <>c__DisplayClass78_1()
			{
			}
		}

		[Token(Token = "0x20004AD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8EA0", Offset = "0x7D8EA0")]
		private sealed class <>c__DisplayClass78_2
		{
			[Token(Token = "0x40022EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 p11_transform_pos;

			[Token(Token = "0x40022F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool World_sim;

			[Token(Token = "0x40022F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float Time_fixed;

			[Token(Token = "0x40022F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float Time_delta;

			[Token(Token = "0x40022F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public <>c__DisplayClass78_1 CS$<>8__locals2;

			[Token(Token = "0x6002604")]
			[Address(RVA = "0x105E330", Offset = "0x105E330", VA = "0x105E330")]
			public <>c__DisplayClass78_2()
			{
			}

			[Token(Token = "0x6002605")]
			[Address(RVA = "0x105E540", Offset = "0x105E540", VA = "0x105E540")]
			internal void <Update>b__0()
			{
			}
		}

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Turbulance;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Turbulance_strength;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Turbulance_frequency;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 Axis_affected;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool splash_effect;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool vortex_motion;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 Vortex_velocity;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 Vortex_position;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int Vortex_count;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Vortex_PDM> Vortexes;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Vortex_life;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float Vortex_angularvelocity;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float Vortex_scale;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool limit_influence;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float Vortex_center_size;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Color Vortex_center_color;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool Show_vortex;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int previous_vortex_count;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool Color_force;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color Force_color;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool use_exponent;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool gravity_pull;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool Swirl_grav;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
		public bool Bounce_grav;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float Bounce_factor;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float Affect_tres;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 Gravity_Plane_INNER;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool gravity_planar;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Vector3 Gravity_plane;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float Gravity_factor;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float Dist_Factor;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool enable_paint;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private ParticleSystem[] p2;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float affectDistance;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float sqrDist;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform thisTransform;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float dumpen;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private ParticleSystem.Particle[] ParticleList;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool smoothattraction;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool Lerp_velocity;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
		public bool repel;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFB")]
		public bool make_moving_star;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float star_trail_dist;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public bool limit_to_Y_axis;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		public bool vary_turbulence;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
		public bool perlin_enable;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x103")]
		public bool splash_noise;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private PerlinSKYMASTER noise;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private SimplexNoiseSKYMASTER SIMPLEXnoise;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float noise_str;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float noise_turb_str;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Vector3 axis_deviation;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float splash_noise_tres;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float hit_dist;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private int counter;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public int star_trails;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public float trail_distance;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float speed_of_trail;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float distance_of_trail;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float trail_length_out;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float size_of_trail_out;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float distance_between_trail;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float vertical_trail_separation;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float smooth_trail;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool affect_by_tag;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public string[] tags;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public string[] Exclude_tags;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public List<GameObject> Affect_specific;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool Affect_new;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float recheck_time;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float Time_to_update;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public bool MultiThread;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x185")]
		private bool MultiThreaded;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x186")]
		private bool init_vortexes;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x187")]
		public bool Enable_Preview;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool End_LifeOf_Affected;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float End_Life;

		[Token(Token = "0x600202E")]
		[Address(RVA = "0x1058590", Offset = "0x1058590", VA = "0x1058590")]
		private void Start()
		{
		}

		[Token(Token = "0x600202F")]
		[Address(RVA = "0x10587D0", Offset = "0x10587D0", VA = "0x10587D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0x105E338", Offset = "0x105E338", VA = "0x105E338")]
		public AttractParticlesSKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class ControlCombineChildrenSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool generateTriangleStrips;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool Auto_Disable;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int skip_every_N_frame;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool MakeActive;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<GameObject> Destroy_list;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int count_frames;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Vector3> Positions_list;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Quaternion> Rotations_list;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Vector3> Scale_list;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Transform> Children_list;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool Self_dynamic_enable;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool Self_dynamic_check_rot;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool Self_dynamic_check_scale;

		[Token(Token = "0x6002031")]
		[Address(RVA = "0xBEA7B4", Offset = "0xBEA7B4", VA = "0xBEA7B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0xBEAB28", Offset = "0xBEAB28", VA = "0xBEAB28")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0xBEBF3C", Offset = "0xBEBF3C", VA = "0xBEBF3C")]
		public ControlCombineChildrenSKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class DragRigidbodySKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x20004AE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8EB0", Offset = "0x7D8EB0")]
		private sealed class <DragObject>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40022F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40022F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40022F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragRigidbodySKYMASTER <>4__this;

			[Token(Token = "0x40022F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float distance;

			[Token(Token = "0x40022F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <oldDrag>5__2;

			[Token(Token = "0x40022F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <oldAngularDrag>5__3;

			[Token(Token = "0x40022FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Camera <mainCamera>5__4;

			[Token(Token = "0x170003CE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002609")]
				[Address(RVA = "0xBED018", Offset = "0xBED018", VA = "0xBED018", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600260B")]
				[Address(RVA = "0xBED084", Offset = "0xBED084", VA = "0xBED084", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002606")]
			[Address(RVA = "0xBECD9C", Offset = "0xBECD9C", VA = "0xBECD9C")]
			[DebuggerHidden]
			public <DragObject>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6002607")]
			[Address(RVA = "0xBECDD0", Offset = "0xBECDD0", VA = "0xBECDD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002608")]
			[Address(RVA = "0xBECDD4", Offset = "0xBECDD4", VA = "0xBECDD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600260A")]
			[Address(RVA = "0xBED020", Offset = "0xBED020", VA = "0xBED020", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001374")]
		private const float k_Spring = 50f;

		[Token(Token = "0x4001375")]
		private const float k_Damper = 5f;

		[Token(Token = "0x4001376")]
		private const float k_Drag = 10f;

		[Token(Token = "0x4001377")]
		private const float k_AngularDrag = 5f;

		[Token(Token = "0x4001378")]
		private const float k_Distance = 0.2f;

		[Token(Token = "0x4001379")]
		private const bool k_AttachToCenterOfMass = false;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SpringJoint m_SpringJoint;

		[Token(Token = "0x6002034")]
		[Address(RVA = "0xBEC900", Offset = "0xBEC900", VA = "0xBEC900")]
		private void Update()
		{
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0xBECD18", Offset = "0xBECD18", VA = "0xBECD18")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E2F2C", Offset = "0x7E2F2C")]
		private IEnumerator DragObject(float distance)
		{
			return null;
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0xBECC68", Offset = "0xBECC68", VA = "0xBECC68")]
		private Camera FindCamera()
		{
			return null;
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0xBECDC8", Offset = "0xBECDC8", VA = "0xBECDC8")]
		public DragRigidbodySKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public class FreezeBurnControlSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color Start_color;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float freeze_ammount;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float burn_ammount;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float max_burn_ammount;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max_freeze_ammount;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float Thaw_speed;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Freeze_speed;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float check_time;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float current_time;

		[Token(Token = "0x6002038")]
		[Address(RVA = "0xBEE168", Offset = "0xBEE168", VA = "0xBEE168")]
		private void Start()
		{
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0xBEE230", Offset = "0xBEE230", VA = "0xBEE230")]
		private void Update()
		{
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0xBEE698", Offset = "0xBEE698", VA = "0xBEE698")]
		public FreezeBurnControlSKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class LoomSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x20004AF")]
		public class DelayedQueueItem
		{
			[Token(Token = "0x40022FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float time;

			[Token(Token = "0x40022FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x40022FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string name;

			[Token(Token = "0x600260C")]
			[Address(RVA = "0xE4132C", Offset = "0xE4132C", VA = "0xE4132C")]
			public DelayedQueueItem()
			{
			}
		}

		[Token(Token = "0x20004B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8EC0", Offset = "0x7D8EC0")]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x40022FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x600260D")]
			[Address(RVA = "0xE41324", Offset = "0xE41324", VA = "0xE41324")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x600260E")]
			[Address(RVA = "0xE41C88", Offset = "0xE41C88", VA = "0xE41C88")]
			internal bool <QueueOnMainThread>b__0(DelayedQueueItem d)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _quitting;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static LoomSKYMASTER _current;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _count;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool _initialized;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int _threadId;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<Action> _actions;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<DelayedQueueItem> _delayed;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Action[] _toRun;

		[Token(Token = "0x17000319")]
		public static LoomSKYMASTER Current
		{
			[Token(Token = "0x600203C")]
			[Address(RVA = "0xE409E4", Offset = "0xE409E4", VA = "0xE409E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0xE40990", Offset = "0xE40990", VA = "0xE40990")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0xE40A38", Offset = "0xE40A38", VA = "0xE40A38")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0xE40E5C", Offset = "0xE40E5C", VA = "0xE40E5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0xE40ED8", Offset = "0xE40ED8", VA = "0xE40ED8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0xE40FA8", Offset = "0xE40FA8", VA = "0xE40FA8")]
		public static void QueueOnMainThread(Action action, string name)
		{
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0xE40FB0", Offset = "0xE40FB0", VA = "0xE40FB0")]
		public static void QueueOnMainThread(Action action, float time, string name)
		{
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0xE41334", Offset = "0xE41334", VA = "0xE41334")]
		public static void QueueOnMainThread(Action action)
		{
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0xE41340", Offset = "0xE41340", VA = "0xE41340")]
		public static void QueueOnMainThread(Action action, float time)
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0xE41348", Offset = "0xE41348", VA = "0xE41348")]
		public static void RunAsync(Action action)
		{
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0xE41404", Offset = "0xE41404", VA = "0xE41404")]
		private static void RunAction(object action)
		{
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0xE41484", Offset = "0xE41484", VA = "0xE41484")]
		private void Update()
		{
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0xE41B68", Offset = "0xE41B68", VA = "0xE41B68")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode loadSceneMode)
		{
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0xE41BD8", Offset = "0xE41BD8", VA = "0xE41BD8")]
		public LoomSKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class MeshCombineUtilitySKYMASTER
	{
		[Token(Token = "0x20004B1")]
		public struct MeshInstance
		{
			[Token(Token = "0x40022FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Mesh mesh;

			[Token(Token = "0x4002300")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int subMeshIndex;

			[Token(Token = "0x4002301")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Matrix4x4 transform;
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0xE420DC", Offset = "0xE420DC", VA = "0xE420DC")]
		public static Mesh Combine(MeshInstance[] combines, bool generateStrips)
		{
			return null;
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0xE42A1C", Offset = "0xE42A1C", VA = "0xE42A1C")]
		private static void Copy(int vertexcount, Vector3[] src, Vector3[] dst, ref int offset, Matrix4x4 transform)
		{
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0xE42AF8", Offset = "0xE42AF8", VA = "0xE42AF8")]
		private static void CopyNormal(int vertexcount, Vector3[] src, Vector3[] dst, ref int offset, Matrix4x4 transform)
		{
		}

		[Token(Token = "0x600204C")]
		[Address(RVA = "0xE42D30", Offset = "0xE42D30", VA = "0xE42D30")]
		private static void Copy(int vertexcount, Vector2[] src, Vector2[] dst, ref int offset)
		{
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0xE42DC0", Offset = "0xE42DC0", VA = "0xE42DC0")]
		private static void CopyColors(int vertexcount, Color[] src, Color[] dst, ref int offset)
		{
		}

		[Token(Token = "0x600204E")]
		[Address(RVA = "0xE42BF8", Offset = "0xE42BF8", VA = "0xE42BF8")]
		private static void CopyTangents(int vertexcount, Vector4[] src, Vector4[] dst, ref int offset, Matrix4x4 transform)
		{
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0xE42E58", Offset = "0xE42E58", VA = "0xE42E58")]
		public MeshCombineUtilitySKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class ParticleCollisionsSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ParticlePOOL;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticlePropagationSKYMASTER Propagator;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleCollisionEvent[][] collisionEvents;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Flame_force;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform p11Transform;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<GameObject> Systems_To_override;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<ParticlePropagationSKYMASTER> systems_To_override;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float cut_off_dist;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool inner_particle_collision;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject thrower_to_check;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject Collider_OBJ;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<GameObject> Gameobj_instances;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float min_check_dist;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int divide_factor;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.Particle[] ParticleList;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ParticleSystem p11;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool end_of_life;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float life_factor_upper;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float life_factor_lower;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float min_source_dist;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool is_fire;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool is_ice;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool enable_LocalWind;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
		public bool enable_flyaway;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool Overide_Color;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color New_Color;

		[Token(Token = "0x6002050")]
		[Address(RVA = "0xE43228", Offset = "0xE43228", VA = "0xE43228")]
		private void Start()
		{
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0xE434F0", Offset = "0xE434F0", VA = "0xE434F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0xE43A84", Offset = "0xE43A84", VA = "0xE43A84")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0xE45650", Offset = "0xE45650", VA = "0xE45650")]
		public ParticleCollisionsSKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000336")]
	[ExecuteInEditMode]
	public class ParticlePropagationSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x20004B2")]
		public enum PaintType
		{
			[Token(Token = "0x4002303")]
			Painted,
			[Token(Token = "0x4002304")]
			BrushPainted,
			[Token(Token = "0x4002305")]
			SkinnedMesh,
			[Token(Token = "0x4002306")]
			SimpleMesh,
			[Token(Token = "0x4002307")]
			Propagated,
			[Token(Token = "0x4002308")]
			Projected,
			[Token(Token = "0x4002309")]
			Spline,
			[Token(Token = "0x400230A")]
			ParticleCollision,
			[Token(Token = "0x400230B")]
			ParticlePosition
		}

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> Systems_To_override;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ParticlePropagationSKYMASTER> systems_To_override;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float cut_off_dist;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool reset_overrides;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public List<PaintType> PaintTypes;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool gameobject_mode;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool Scale_by_texture;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool Color_by_texture;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public bool Follow_scale;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool Grow_trees;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float Grow_time;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float Current_Grow_time;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Preview_mode;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int particle_count;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public List<Transform> Gameobj_instances;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject Gameobj;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool Gravity_Mode;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float grav_factor;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float Y_offset;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float X_offset_factor;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float Z_offset_factor;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool let_loose;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject Parent_OBJ;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool Angled;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool Asign_rot;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 Local_rot;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PerlinSKYMASTER noise;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float Wind_speed;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool follow_particles;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		public bool Remove_colliders;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		public bool look_at_direction;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
		public bool look_at_normal;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ControlCombineChildrenSKYMASTER Combiner;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool enable_combine;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public List<Vector3> Updated_gameobject_positions;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float Release_Gravity;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool Use_stencil;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Texture2D Stencil;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Vector2 tex_scale;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float Coloration_ammount;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool Real_time_painting;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		public bool Color_effects;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
		public bool Lerp_color;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD7")]
		public bool Keep_color;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public List<Vector4> Particle_color;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Vector2 Stencil_divisions;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GameObject[] Flammable_objects;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private GameObject[] Flamer_objects;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool propagation;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[HideInInspector]
		public int maxemitter_count;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		public int current_emitters_count;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float brush_size;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool Erase_mode;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float Marker_size;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public ParticleSystem p11;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public List<Transform> Emitter_objects;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		public List<Vector3> Registered_paint_positions;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float stay_time;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		public List<Vector3> Registered_paint_rotations;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		public List<float> Registered_paint_times;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		public List<float> Registered_paint_size;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public List<GameObject> Projectors;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float max_growth_size;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float min_propagation_dist;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float max_propagation_dist;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private List<Vector3> ray_dest_positions;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private bool got_random_offsets;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x169")]
		public bool go_random;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector2[] rand_offsets;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float extend;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private bool randomize;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17D")]
		public bool follow_normals;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float density_dist_factor;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public int propagation_chance_factor;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool use_projection;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
		public bool use_particle_collisions;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[HideInInspector]
		public List<Vector3> Updated_Registered_paint_positions;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public bool By_layer;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public List<string> Layers;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public bool keep_alive;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
		public bool Grow_ice_mesh;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AA")]
		public bool variant_size;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AB")]
		public bool Vary_gameobj_size;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float Random_size_upper_bound;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float Random_size_lower_bound;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		[HideInInspector]
		public float Random_size_factor;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float debug_rot;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public bool is_ice;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BD")]
		public bool is_fire;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BE")]
		public bool is_butterfly;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BF")]
		public bool enable_overides;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[HideInInspector]
		public List<int> LocalOverrides;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public bool enable_melt;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
		public bool enable_freeze;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
		public bool enable_burn;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float max_burn_ammount;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public float max_freeze_ammount;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public float Thaw_speed;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public float Freeze_speed;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public bool enable_flyaway;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public float melt_speed;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float fast_melt_speed;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public bool enable_LocalWind;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E9")]
		public bool is_grass;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		public float overide_GrassAngle;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public float overide_WindSpeed;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[HideInInspector]
		public List<Vector3> Registered_initial_positions;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[HideInInspector]
		public List<Quaternion> Registered_initial_rotation;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[HideInInspector]
		public List<Vector3> Registered_initial_scale;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private ParticleSystem.Particle[] ParticleList;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private float Grab_time;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public float Delay;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public bool Optimize;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x221")]
		public bool Use_Lerp;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private float Grab_time_calcs;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public float Delay_calcs;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		public bool Optimize_calcs;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22D")]
		public bool relaxed;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22E")]
		public bool draw_in_sequence;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22F")]
		public bool Velocity_toward_normal;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public Vector3 Normal_Velocity;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		public float keep_in_position_factor;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public float keep_alive_factor;

		[Token(Token = "0x6002054")]
		[Address(RVA = "0xE456B8", Offset = "0xE456B8", VA = "0xE456B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0xE45A98", Offset = "0xE45A98", VA = "0xE45A98")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0xE45BC0", Offset = "0xE45BC0", VA = "0xE45BC0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0xE4E588", Offset = "0xE4E588", VA = "0xE4E588")]
		public ParticlePropagationSKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000337")]
	public class SmoothRandom
	{
		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FractalNoise s_Noise;

		[Token(Token = "0x6002058")]
		[Address(RVA = "0xAE7560", Offset = "0xAE7560", VA = "0xAE7560")]
		public static Vector3 GetVector3(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0xAE76E4", Offset = "0xAE76E4", VA = "0xAE76E4")]
		public static float Get(float speed)
		{
			return default(float);
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0xAE7644", Offset = "0xAE7644", VA = "0xAE7644")]
		private static FractalNoise Get()
		{
			return null;
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0xAE7740", Offset = "0xAE7740", VA = "0xAE7740")]
		public SmoothRandom()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class PerlinSKYMASTER
	{
		[Token(Token = "0x4001422")]
		private const int B = 256;

		[Token(Token = "0x4001423")]
		private const int BM = 255;

		[Token(Token = "0x4001424")]
		private const int N = 4096;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] p;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[,] g3;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float[,] g2;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] g1;

		[Token(Token = "0x600205C")]
		[Address(RVA = "0xE50610", Offset = "0xE50610", VA = "0xE50610")]
		private float s_curve(float t)
		{
			return default(float);
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0xE5062C", Offset = "0xE5062C", VA = "0xE5062C")]
		private float lerp(float t, float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x600205E")]
		[Address(RVA = "0xE5063C", Offset = "0xE5063C", VA = "0xE5063C")]
		private void setup(float value, out int b0, out int b1, out float r0, out float r1)
		{
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0xE5067C", Offset = "0xE5067C", VA = "0xE5067C")]
		private float at2(float rx, float ry, float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0xE5068C", Offset = "0xE5068C", VA = "0xE5068C")]
		private float at3(float rx, float ry, float rz, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6002061")]
		[Address(RVA = "0xE506A4", Offset = "0xE506A4", VA = "0xE506A4")]
		public float Noise(float arg)
		{
			return default(float);
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0xE5077C", Offset = "0xE5077C", VA = "0xE5077C")]
		public float Noise(float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0xE40600", Offset = "0xE40600", VA = "0xE40600")]
		public float Noise(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6002064")]
		[Address(RVA = "0xE5095C", Offset = "0xE5095C", VA = "0xE5095C")]
		private void normalize2(ref float x, ref float y)
		{
		}

		[Token(Token = "0x6002065")]
		[Address(RVA = "0xE50A10", Offset = "0xE50A10", VA = "0xE50A10")]
		private void normalize3(ref float x, ref float y, ref float z)
		{
		}

		[Token(Token = "0x6002066")]
		[Address(RVA = "0xE40198", Offset = "0xE40198", VA = "0xE40198")]
		public PerlinSKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000339")]
	public class FractalNoise
	{
		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PerlinSKYMASTER m_Noise;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] m_Exponent;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_IntOctaves;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_Octaves;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_Lacunarity;

		[Token(Token = "0x6002067")]
		[Address(RVA = "0xBEDBC4", Offset = "0xBEDBC4", VA = "0xBEDBC4")]
		public FractalNoise(float inH, float inLacunarity, float inOctaves)
		{
		}

		[Token(Token = "0x6002068")]
		[Address(RVA = "0xBEDBCC", Offset = "0xBEDBCC", VA = "0xBEDBCC")]
		public FractalNoise(float inH, float inLacunarity, float inOctaves, PerlinSKYMASTER noise)
		{
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0xBEDD30", Offset = "0xBEDD30", VA = "0xBEDD30")]
		public float HybridMultifractal(float x, float y, float offset)
		{
			return default(float);
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0xBEDEA0", Offset = "0xBEDEA0", VA = "0xBEDEA0")]
		public float RidgedMultifractal(float x, float y, float offset, float gain)
		{
			return default(float);
		}

		[Token(Token = "0x600206B")]
		[Address(RVA = "0xBEE030", Offset = "0xBEE030", VA = "0xBEE030")]
		public float BrownianMotion(float x, float y)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200033A")]
	public class SimplexNoiseSKYMASTER
	{
		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[][] grad3;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int[][] grad4;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int[] p;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static int[] perm;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int[][] simplex;

		[Token(Token = "0x600206C")]
		[Address(RVA = "0x1135CCC", Offset = "0x1135CCC", VA = "0x1135CCC")]
		static SimplexNoiseSKYMASTER()
		{
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0x1137BDC", Offset = "0x1137BDC", VA = "0x1137BDC")]
		private static int fastfloor(double x)
		{
			return default(int);
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0x1137BF0", Offset = "0x1137BF0", VA = "0x1137BF0")]
		private static double dot(int[] g, double x, double y)
		{
			return default(double);
		}

		[Token(Token = "0x600206F")]
		[Address(RVA = "0x1137C40", Offset = "0x1137C40", VA = "0x1137C40")]
		private static double dot(int[] g, double x, double y, double z)
		{
			return default(double);
		}

		[Token(Token = "0x6002070")]
		[Address(RVA = "0x1137CA8", Offset = "0x1137CA8", VA = "0x1137CA8")]
		private static double dot(int[] g, double x, double y, double z, double w)
		{
			return default(double);
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0x1137D24", Offset = "0x1137D24", VA = "0x1137D24")]
		public static double noise(double xin, double yin)
		{
			return default(double);
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0x1138114", Offset = "0x1138114", VA = "0x1138114")]
		public double noise(double xin, double yin, double zin)
		{
			return default(double);
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0x113879C", Offset = "0x113879C", VA = "0x113879C")]
		public double noise(double x, double y, double z, double w)
		{
			return default(double);
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0x11396AC", Offset = "0x11396AC", VA = "0x11396AC")]
		public SimplexNoiseSKYMASTER()
		{
		}
	}
	[Token(Token = "0x200033B")]
	[ExecuteInEditMode]
	public class SeasonalTerrainSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF5F0", Offset = "0x7DF5F0")]
		public float VFogDistance;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool DistanceFogOn;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool HeightFogOn;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool SkyFogOn;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fogDensity;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fogGradientDistance;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseFogCurves;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public AnimationCurve heightOffsetFogCurve;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public AnimationCurve luminanceVFogCurve;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public AnimationCurve lumFactorFogCurve;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public AnimationCurve scatterFacFogCurve;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public AnimationCurve turbidityFogCurve;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public AnimationCurve turbFacFogCurve;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		public AnimationCurve horizonFogCurve;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public AnimationCurve contrastFogCurve;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float VolumeFogSpeed;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool tagBasedTreeGrab;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool UseTranspVFog;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float AddFogHeightOffset;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float AddFogDensityOffset;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float AddShaftsIntensityUnder;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float AddShaftsSizeUnder;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float ShaftBlurRadiusOffset;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool Lerp_gradient;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		public bool FogHeightByTerrain;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float FogheightOffset;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float FogdensityOffset;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float FogUnityOffset;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<GameObject> TreePefabs;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color currentTerrainTreeCol;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool AlwaysUpdateBillboards;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform Cam_transf;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<GlobalFogSkyMaster> GradientHolders;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool StereoMode;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GlobalFogSkyMaster SkyFogL;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private SunShaftsSkyMaster SunShaftsL;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GlobalFogSkyMaster SkyFogR;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private SunShaftsSkyMaster SunShaftsR;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject LeftCam;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public GameObject RightCam;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private GlobalTranspFogSkyMaster SkyFogLT;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private GlobalTranspFogSkyMaster SkyFogRT;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private GlobalTranspFogSkyMaster SkyFogTransp;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private GlobalFogSkyMaster SkyFog;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private SunShaftsSkyMaster SunShafts;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public bool ImageEffectFog;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		public bool Use_both_fogs;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x132")]
		public bool ImageEffectShafts;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public int FogPreset;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool UpdateLeafMat;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public List<Material> LeafMats;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Color Rays_day_color;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Color Rays_night_color;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float Shafts_intensity;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float Moon_Shafts_intensity;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public bool Mesh_moon;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		public bool Glow_moon;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
		public bool Glow_sun;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private GameObject[] SkyMaster_TREE_objects;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Color TreeA_color;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Color Terrain_tint;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Color Grass_tint;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public bool Enable_trasition;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public TerrainData tData;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public Material TerrainMat;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Color Starting_grass_tint;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private Color Starting_terrain_tint;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public float Trans_speed_tree;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		public float Trans_speed_terr;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public float Trans_speed_grass;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		public float Trans_speed_sky;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public bool Mesh_Terrain;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F9")]
		public bool Foggy_Terrain;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FA")]
		public bool Fog_Sky_Update;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public Vector3 SUN_POS;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public float fog_depth;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public float reileigh;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public float mieCoefficient;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public float mieDirectionalG;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public float ExposureBias;

		[Token(Token = "0x4001484")]
		private const float n = 1.0003f;

		[Token(Token = "0x4001485")]
		private const float N = 2.545E+25f;

		[Token(Token = "0x4001486")]
		private const float pn = 0.035f;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		public Vector3 lambda;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public Vector3 K;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private int toggle_rot;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public float SmallRotFactor;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Material[] mats;

		[Token(Token = "0x6002075")]
		[Address(RVA = "0x11227FC", Offset = "0x11227FC", VA = "0x11227FC")]
		public void setVFogCurvesPresetA()
		{
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0x112359C", Offset = "0x112359C", VA = "0x112359C")]
		public void setVFogCurvesPresetC()
		{
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0x11243C8", Offset = "0x11243C8", VA = "0x11243C8")]
		public void setVFogCurvesPresetD()
		{
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0x11251FC", Offset = "0x11251FC", VA = "0x11251FC")]
		public void setVFogCurvesPresetB()
		{
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0x1126028", Offset = "0x1126028", VA = "0x1126028")]
		public void setVFogCurvesPresetE()
		{
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0x1126E7C", Offset = "0x1126E7C", VA = "0x1126E7C")]
		private void Start()
		{
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0x1132410", Offset = "0x1132410", VA = "0x1132410")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0x1132514", Offset = "0x1132514", VA = "0x1132514")]
		private void Update()
		{
		}

		[Token(Token = "0x600207D")]
		[Address(RVA = "0x1132658", Offset = "0x1132658", VA = "0x1132658")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0x113467C", Offset = "0x113467C", VA = "0x113467C")]
		private static Vector3 totalRayleigh(Vector3 lambda)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0x1134784", Offset = "0x1134784", VA = "0x1134784")]
		private static Vector3 totalMie(Vector3 lambda, Vector3 K, float T)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002080")]
		[Address(RVA = "0x112705C", Offset = "0x112705C", VA = "0x112705C")]
		private void RunPresets(GlobalFogSkyMaster SkyFog, SunShaftsSkyMaster SunShafts, float speed, bool Init)
		{
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0x112CA4C", Offset = "0x112CA4C", VA = "0x112CA4C")]
		private void RunPresetsT(GlobalTranspFogSkyMaster SkyFog, SunShaftsSkyMaster SunShafts, float speed, bool Init)
		{
		}

		[Token(Token = "0x6002082")]
		[Address(RVA = "0x11348A8", Offset = "0x11348A8", VA = "0x11348A8")]
		public SeasonalTerrainSKYMASTER()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class SKYMASTER_Demo : MonoBehaviour
	{
		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ControlGIPROXY_ATTRIUM_SM GI_controller;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Sun_time_start;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject SUN;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject TREES;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool HUD_ON;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float HDR;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float Esun;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float Kr;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float Km;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float GE;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float SPEED;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float fSamples;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float fScaleDepth;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool set_sun_start;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float Ring_factor;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 CURRENT_Force_color;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float Coloration;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector4 TintColor;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool enable_controls;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject Clouds_top;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject Clouds_bottom;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject Flat_Clouds_top;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject Flat_Clouds_bottom;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject Cloud_Dome;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject Cloud_Rays;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject Cloud_Static;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float Dome_rot;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject Tornado1;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject Tornado2;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GameObject Butterflies;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject FreezeEffect;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject LightningStorm;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public bool Auto_Season_Cycle;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float Cycle_speed;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool GI_controls_on;

		[Token(Token = "0x6002083")]
		[Address(RVA = "0xE547C4", Offset = "0xE547C4", VA = "0xE547C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0xE549E4", Offset = "0xE549E4", VA = "0xE549E4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002085")]
		[Address(RVA = "0xE56BEC", Offset = "0xE56BEC", VA = "0xE56BEC")]
		public SKYMASTER_Demo()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class SKYMASTER_Demo2 : MonoBehaviour
	{
		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ControlGIPROXY_ATTRIUM_SM GI_controller;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Sun_time_start;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject SUN;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject TREES;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool HUD_ON;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float HDR;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float Esun;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float Kr;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float Km;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float GE;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float SPEED;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float fSamples;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float fScaleDepth;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool set_sun_start;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float Ring_factor;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 CURRENT_Force_color;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float Coloration;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector4 TintColor;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool enable_controls;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject Clouds_top;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject Clouds_bottom;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject Flat_Clouds_top;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject Flat_Clouds_bottom;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject Cloud_Dome;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject Cloud_Rays;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject Cloud_Static;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float Dome_rot;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject Tornado1;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject Tornado2;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GameObject Butterflies;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject FreezeEffect;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject LightningStorm;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public bool Auto_Season_Cycle;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float Cycle_speed;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool GI_controls_on;

		[Token(Token = "0x6002086")]
		[Address(RVA = "0xB22D3C", Offset = "0xB22D3C", VA = "0xB22D3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0xB22F5C", Offset = "0xB22F5C", VA = "0xB22F5C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0xB24114", Offset = "0xB24114", VA = "0xB24114")]
		public SKYMASTER_Demo2()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200033E")]
	public class WeatherEventSM
	{
		[Token(Token = "0x20004B3")]
		public enum Volume_Weather_event_types
		{
			[Token(Token = "0x400230D")]
			Sunny,
			[Token(Token = "0x400230E")]
			Foggy,
			[Token(Token = "0x400230F")]
			HeavyFog,
			[Token(Token = "0x4002310")]
			Tornado,
			[Token(Token = "0x4002311")]
			SnowStorm,
			[Token(Token = "0x4002312")]
			FreezeStorm,
			[Token(Token = "0x4002313")]
			FlatClouds,
			[Token(Token = "0x4002314")]
			LightningStorm,
			[Token(Token = "0x4002315")]
			HeavyStorm,
			[Token(Token = "0x4002316")]
			HeavyStormDark,
			[Token(Token = "0x4002317")]
			Cloudy,
			[Token(Token = "0x4002318")]
			RollingFog,
			[Token(Token = "0x4002319")]
			VolcanoErupt,
			[Token(Token = "0x400231A")]
			Rain
		}

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Volume_Weather_event_types Weather_type;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject VolumeCloudsPREFAB;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int EventStartMonth;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int EventEndMonth;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int EventStartDay;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int EventEndDay;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float EventStartHour;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float EventEndHour;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool is_activated;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool loop;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Chance;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool concurrent;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float VolCloudsHorScale;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float VolCloudHeight;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int seed;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Volume_Weather_event_types FollowUpWeather;

		[Token(Token = "0x6002089")]
		[Address(RVA = "0x9B2BD0", Offset = "0x9B2BD0", VA = "0x9B2BD0")]
		public WeatherEventSM()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200033F")]
	public class WeatherSM
	{
		[Token(Token = "0x20004B4")]
		public enum Volume_Weather_State
		{
			[Token(Token = "0x400231C")]
			Init,
			[Token(Token = "0x400231D")]
			FadeIn,
			[Token(Token = "0x400231E")]
			Steady,
			[Token(Token = "0x400231F")]
			FadeOut
		}

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Volume_Weather_State currentState;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Season;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool FadedOut;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool FadingOut;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float StartTime;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float FadeInTime;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int seed;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeOutTime;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float state_start_time;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material CloudDomeL1Mat;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material CloudDomeL2Mat;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material SnowMat;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material SnowMatTerrain;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public WindZoneMode windMode;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Transform> SnowParticle;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<ParticleSystem[]> SnowParticleP;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Transform> RainParticle;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<ParticleSystem[]> RainParticleP;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<Transform> RefractRainParticle;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<ParticleSystem[]> RefractRainParticleP;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<int> RainParticleRate;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<int> RainParticleMax;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<bool> RainParticleReset;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<float> RainTransp;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<int> SnowParticleRate;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<int> SnowParticleMax;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<bool> SnowParticleReset;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<float> SnowTransp;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public List<Transform> ParticleClouds;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<ParticleSystem[]> ParticlesCloudsP;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public List<int> CloudParticleRate;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public List<int> CloudParticleMax;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public List<bool> CloudParticleReset;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public List<float> CloudTranspMax;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public GameObject VolumeCloud;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public VolumeClouds_SM VolumeScript;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public bool Snow;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public string SnowCoverageVariable;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool Rain;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		public bool Refractive_Rain;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
		public bool Volume_Rain;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x123")]
		public bool has_fog;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public bool has_volume_fog;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public int volume_fog_peset;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float prevSeverity;

		[Token(Token = "0x600208A")]
		[Address(RVA = "0x9B39DC", Offset = "0x9B39DC", VA = "0x9B39DC")]
		public void Update()
		{
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0x9B56D0", Offset = "0x9B56D0", VA = "0x9B56D0")]
		private void Make_Fog_Dissappear(float speed)
		{
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0x9B5790", Offset = "0x9B5790", VA = "0x9B5790")]
		private void Make_Fog_Appear(Color Fog_Color, float density, FogMode mode, float speed, int Season)
		{
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0x9B4C28", Offset = "0x9B4C28", VA = "0x9B4C28")]
		private void Make_Particles_Appear(GameObject Particle_OBJ, ParticleSystem[] ParticleOBJ_Ps, ParticleSystem ParticleOBJ_P, int max_particles, bool reset_pcount, int rate, float Transp)
		{
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0x9B53D0", Offset = "0x9B53D0", VA = "0x9B53D0")]
		private void Make_Particles_Dissappear(GameObject Particle_OBJ, ParticleSystem[] ParticleOBJ_Ps, ParticleSystem ParticleOBJ_P, int min_particles, int rate, bool pull_downward, bool on_lowest)
		{
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0x9B5954", Offset = "0x9B5954", VA = "0x9B5954")]
		public WeatherSM()
		{
		}
	}
	[Token(Token = "0x2000340")]
	[ExecuteInEditMode]
	public class SkyMasterManager : MonoBehaviour
	{
		[Token(Token = "0x20004B5")]
		public enum Volume_Weather_types
		{
			[Token(Token = "0x4002321")]
			Sunny,
			[Token(Token = "0x4002322")]
			Foggy,
			[Token(Token = "0x4002323")]
			HeavyFog,
			[Token(Token = "0x4002324")]
			Tornado,
			[Token(Token = "0x4002325")]
			SnowStorm,
			[Token(Token = "0x4002326")]
			FreezeStorm,
			[Token(Token = "0x4002327")]
			FlatClouds,
			[Token(Token = "0x4002328")]
			LightningStorm,
			[Token(Token = "0x4002329")]
			HeavyStorm,
			[Token(Token = "0x400232A")]
			HeavyStormDark,
			[Token(Token = "0x400232B")]
			Cloudy,
			[Token(Token = "0x400232C")]
			RollingFog,
			[Token(Token = "0x400232D")]
			VolcanoErupt,
			[Token(Token = "0x400232E")]
			Rain
		}

		[Token(Token = "0x20004B6")]
		public enum Weather_types
		{
			[Token(Token = "0x4002330")]
			Sunny,
			[Token(Token = "0x4002331")]
			Foggy,
			[Token(Token = "0x4002332")]
			HeavyFog,
			[Token(Token = "0x4002333")]
			Tornado,
			[Token(Token = "0x4002334")]
			SnowStorm,
			[Token(Token = "0x4002335")]
			FreezeStorm,
			[Token(Token = "0x4002336")]
			FlatClouds,
			[Token(Token = "0x4002337")]
			LightningStorm,
			[Token(Token = "0x4002338")]
			HeavyStorm,
			[Token(Token = "0x4002339")]
			HeavyStormDark,
			[Token(Token = "0x400233A")]
			Cloudy,
			[Token(Token = "0x400233B")]
			RollingFog,
			[Token(Token = "0x400233C")]
			VolcanoErupt,
			[Token(Token = "0x400233D")]
			Rain
		}

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool instaChangeSkyColor;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool instaKillParticles;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullVolumeCloudsSkyMaster volumeClouds;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FogMode fogMode;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool disableSunAtNight;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool gradAffectsFog;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float White_cutoffOffset;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform VolShaderClouds;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CloudHandlerSM VolShaderCloudsH;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool SunFollowHero;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AtmosphericScatteringSkyMaster VolLightingH;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AtmosphericScatteringDeferredSkyMaster VolLightingDefH;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DF6A8", Offset = "0x7DF6A8")]
		public float WeatherSeverity;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DF6C0", Offset = "0x7DF6C0")]
		public float Time_zone;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float MaxSunElevation;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[HideInInspector]
		public Color gradSkyColor;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[HideInInspector]
		public float calcColorTime;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool UseGradients;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Gradient SkyColorGrad;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Gradient SkyTintGrad;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float FogColorPow;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float FogWaterPow;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AnimationCurve FexposureC;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AnimationCurve FscaleDiffC;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AnimationCurve FSunGC;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AnimationCurve FSunringC;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool VolCloudGradients;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Gradient VolCloudLitGrad;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Gradient VolCloudShadGrad;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Gradient VolCloudFogGrad;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float VolCloudTransp;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[HideInInspector]
		public Color gradCloudLitColor;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[HideInInspector]
		public Color gradCloudShadeColor;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[HideInInspector]
		public Color gradCloudFogColor;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[HideInInspector]
		public float VcloudSunIntensity;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public float VcloudLightDiff;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[HideInInspector]
		public float VcloudFog;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		public AnimationCurve IntensityDiff;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		public AnimationCurve IntensityFog;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		public AnimationCurve IntensitySun;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool Lerp_sky_rot;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x139")]
		public bool LatLonMoonPos;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13A")]
		public bool AutoMoonLighting;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Transform MoonCenterObj;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public bool StarsFollowMoon;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		public bool AutoMoonFade;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public Color MoonColor;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public Color MoonAmbientColor;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public Vector3 MinMaxEclMoonTransp;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float MoonSunLight;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float MoonCoverage;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float MoonSize;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Material StarsMaterial;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Color StarsColor;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Vector2 MinMaxStarsTransp;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public float StarsIntensity;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float MoonPlaneRot;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public bool onEclipse;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float DawnAppearSpeed;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float StarsPFadeSpeed;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public float StarsPMaxGlow;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public bool AutoSunPosition;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public float RotateNorth;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public float Latitude;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float Longitude;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public float NightTimeMax;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public float NightAngleMax;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public float SkyColorationOffset;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public float divideSnowTerrain;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public List<int> VFogsPerVWeather;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Transform Cam_tranform;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public float AmplifyWind;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		public float WorldScale;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public float prevWorldScale;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public bool MoonPhases;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public float max_moon_intensity;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public Material MoonPhasesMat;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public bool ScreenRainDrops;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public Transform RainDropsPlane;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public Material ScreenRainDropsMat;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public bool ScreenFreezeFX;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x229")]
		public bool FreezeInwards;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		public float MaxDropSpeed;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public float MaxWater;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		public float MaxRefract;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public float FreezeSpeed;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public Transform water;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public float RainDistAboveHero;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public GameObject SunSystem;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[SerializeField]
		public WeatherSM currentWeather;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public WeatherSM prevWeather;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public Volume_Weather_types currentWeatherName;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private Volume_Weather_types prevWeatherName;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public WindZone windZone;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public List<WeatherEventSM> WeatherEvents;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public float VolCloudsHorScale;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		public float VolCloudHeight;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public float VCloudCoverFac;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		public float VCloudSizeFac;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public float VCloudCSizeFac;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		public Vector2 VCloudXZOffset;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		public float WindBasedOffsetFactor;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public Transform VCloudCenter;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public bool VCloudCustomSize;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A9")]
		public bool DefinePlanetScale;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		public float PlanetScale;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public Transform MapCenter;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public Transform SkyDomeSystem;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public GameObject CloudDomeL1;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public GameObject CloudDomeL2;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public Color Dusk_L1_dome_color;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public Color Dusk_L2_dome_color;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public Color Dawn_L1_dome_color;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public Color Dawn_L2_dome_color;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public Color Day_L1_dome_color;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public Color Day_L2_dome_color;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		public Color Night_L1_dome_color;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public Color Night_L2_dome_color;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public Color Dark_storm_L2CA;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public GameObject StarDome;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public Material CloudDomeL1Mat;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public Material CloudDomeL2Mat;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public float L1CloudCoverOffset;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		public float L1CloudDensOffset;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public float L1CloudSize;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		public float L1Ambience;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public float L12SpeedOffset;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		public Material SnowMat;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public Material SnowMatTerrain;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public float SnowCoverage;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A4")]
		public float SnowCoverageTerrain;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public float SnowCoverageRate;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3AC")]
		public float SnowTerrainRate;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		public float SnowTerrRateFactor;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B4")]
		public float MaxSnowCoverage;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		public string SnowCoverageVariable;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		public GameObject HeavyStormVolumeClouds;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		public UnityEngine.Object DustyStormVolumeClouds;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		public UnityEngine.Object DayClearVolumeClouds;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		public UnityEngine.Object SnowStormVolumeClouds;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		public UnityEngine.Object SnowVolumeClouds;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		public UnityEngine.Object RainStormVolumeClouds;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		public UnityEngine.Object RainVolumeClouds;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		public UnityEngine.Object PinkVolumeClouds;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		public UnityEngine.Object LightningVolumeClouds;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		public float Max_sun_intensity;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40C")]
		public float Min_sun_intensity;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		public float To_max_intensity_speed;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x414")]
		public float To_min_intensity_speed;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		public bool Ortho_cam;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
		public float Ortho_factor;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DF7A8", Offset = "0x7DF7A8")]
		public float Shift_dawn;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x424")]
		public float Rot_Sun_X;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		public float Rot_Sun_Y;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42C")]
		public float Rot_Sun_Z;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		private float Previous_Rot_Y;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x434")]
		private float Previous_Rot_Z;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		private float Previous_Rot_X;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43C")]
		public float Moon_glow;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		public float Horizon_adj;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x444")]
		public float HorizonY;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		public Color GroundColor;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		public bool Unity5;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x459")]
		public bool Mobile;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
		public int Volume_fog_max_part;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		public int Snow_cloud_max_part;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x464")]
		public int Lightning_cloud_max_part;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		public int Real_cloud_max_part;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46C")]
		public int Storm_cloud_max_part;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		public int Flat_cloud_max_part;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x474")]
		public int Refract_Rain_max_part;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		public int Snow_max_part;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		public GameObject SunObj;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		public GameObject SunObj2;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		public Vector3 DualSunsFactors;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49C")]
		[HideInInspector]
		public bool alter_sun;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
		public GameObject MoonObj;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		public Transform Hero;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
		public bool Tag_based_player;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
		public string Player_tag;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
		public Weather_types Weather;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C4")]
		private Weather_types previous_weather;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
		public bool On_demand;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
		public Material skyMat;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
		public Material skyboxMat;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
		public Material cloud_upMaterial;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		public Material cloud_downMaterial;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
		public Material flat_cloud_upMaterial;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
		public Material flat_cloud_downMaterial;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
		public Material cloud_dome_downMaterial;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		public Material star_dome_Material;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
		public Material real_cloud_upMaterial;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
		public Material real_cloud_downMaterial;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
		public Material Surround_Clouds_Mat;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		public GameObject Sun_Ray_Cloud;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
		public GameObject Upper_Dynamic_Cloud;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x538")]
		public GameObject Lower_Dynamic_Cloud;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
		public GameObject Upper_Cloud_Bed;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
		public GameObject Lower_Cloud_Bed;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x550")]
		public GameObject Upper_Cloud_Real;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x558")]
		public GameObject Lower_Cloud_Real;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x560")]
		public GameObject Upper_Static_Cloud;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x568")]
		public GameObject Lower_Static_Cloud;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x570")]
		public GameObject Cloud_Dome;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x578")]
		public GameObject Surround_Clouds;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x580")]
		public GameObject Surround_Clouds_Heavy;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x588")]
		public GameObject SnowStorm_OBJ;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x590")]
		public bool SnowStorm;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x598")]
		public GameObject[] FallingLeaves_OBJ;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A0")]
		public GameObject Butterfly_OBJ;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A8")]
		public GameObject[] Tornado_OBJs;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B0")]
		public GameObject[] Butterfly3D_OBJ;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B8")]
		public GameObject Ice_Spread_OBJ;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C0")]
		public GameObject Ice_System_OBJ;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C8")]
		public GameObject Lightning_System_OBJ;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D0")]
		public GameObject Lightning_OBJ;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D8")]
		public GameObject Star_particles_OBJ;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E0")]
		public GameObject[] Volcano_OBJ;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E8")]
		public GameObject VolumeFog_OBJ;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F0")]
		public GameObject Rain_Heavy;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F8")]
		public GameObject Rain_Mild;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x600")]
		public bool Use_fog;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x608")]
		public GameObject VolumeRain_Heavy;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x610")]
		public GameObject VolumeRain_Mild;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x618")]
		public GameObject RefractRain_Heavy;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x620")]
		public GameObject RefractRain_Mild;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x628")]
		public bool Fog_local;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x629")]
		public bool Snow_local;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62A")]
		public bool Mild_rain_local;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62B")]
		public bool Heavy_rain_local;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62C")]
		public bool Butterflies_local;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x630")]
		public float m_fExposure;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x634")]
		public Vector3 m_fWaveLength;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x640")]
		public float m_ESun;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x644")]
		public float m_Kr;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x648")]
		public float m_Km;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64C")]
		public float m_g;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x650")]
		public float scale_dif;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x654")]
		public bool AltScale;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x658")]
		public float OuterRadiusScaleOverInner;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65C")]
		private float m_fInnerRadius;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x660")]
		private float m_fOuterRadius;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x664")]
		public float m_fSamples;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x668")]
		public float m_fRayleighScaleDepth;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66C")]
		public float m_Coloration;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x670")]
		public Color m_TintColor;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x680")]
		public bool USE_ORK;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x681")]
		public bool USE_SKYCUBE;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x682")]
		public bool USE_SKYBOX;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x688")]
		public SeasonalTerrainSKYMASTER Terrain_controller;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x690")]
		public SeasonalTerrainSKYMASTER Mesh_Terrain_controller;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x698")]
		public Transform Mesh_terrain;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A0")]
		public Transform Unity_terrain;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A8")]
		public bool LegacySeasonalFX;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A9")]
		public bool Seasonal_change_auto;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6AC")]
		private int Season_prev;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B0")]
		public int Season;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B4")]
		public float Seasonal;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B8")]
		public float Seasonal_prev;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6BC")]
		public float Horizontal_factor;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C0")]
		public float Horizontal_factor_prev;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C4")]
		public float Sun_ring_factor;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C8")]
		public float Sun_halo_factor;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6CC")]
		public float Sun_eclipse_factor;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D0")]
		public float Glob_scale;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D4")]
		private float mSunSize;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D8")]
		private Vector4 mSunTint;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E8")]
		private float mSkyExponent;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6EC")]
		private Vector4 mSkyTopColor;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6FC")]
		private Vector4 mSkyMidColor;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70C")]
		private Vector4 mSkyEquatorColor;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71C")]
		private Vector4 mGroundColor;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72C")]
		private float Seasonal_factor1_add;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x730")]
		private float Seasonal_factor2_add;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x734")]
		private float Seasonal_factor3_add;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x738")]
		private float Seasonal_factor4_add;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73C")]
		private float Seasonal_factor5_add;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x740")]
		private float Seasonal_factor6_add;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x744")]
		private float Seasonal_factor7_add;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x748")]
		public float Fog_Density_Speed;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74C")]
		public float Fog_Density_Mult;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x750")]
		public Color Autumn_fog_day;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x760")]
		public Color Autumn_fog_dusk;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x770")]
		public float Autumn_fog_day_density;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x774")]
		public float Autumn_fog_dusk_density;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x778")]
		public Color Autumn_fog_night;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x788")]
		public float Autumn_fog_night_density;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78C")]
		public Color Winter_fog_day;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79C")]
		public Color Winter_fog_dusk;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7AC")]
		public float Winter_fog_day_density;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B0")]
		public float Winter_fog_dusk_density;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B4")]
		public Color Winter_fog_night;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C4")]
		public float Winter_fog_night_density;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C8")]
		public Color Summer_fog_day;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D8")]
		public Color Summer_fog_dusk;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E8")]
		public float Summer_fog_day_density;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7EC")]
		public float Summer_fog_dusk_density;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F0")]
		public Color Summer_fog_night;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x800")]
		public float Summer_fog_night_density;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x804")]
		public Color Spring_fog_day;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x814")]
		public Color Spring_fog_dusk;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x824")]
		public float Spring_fog_day_density;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x828")]
		public float Spring_fog_dusk_density;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82C")]
		public Color Spring_fog_night;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83C")]
		public float Spring_fog_night_density;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x840")]
		public Color Tree_Summer_Col;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x850")]
		public Color Terrain_Summer_Col;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x860")]
		public Color Grass_Summer_Col;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x870")]
		public Color Tree_Spring_Col;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x880")]
		public Color Terrain_Spring_Col;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x890")]
		public Color Grass_Spring_Col;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A0")]
		public Color Tree_Winter_Col;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B0")]
		public Color Terrain_Winter_Col;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C0")]
		public Color Grass_Winter_Col;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D0")]
		public Color Tree_Autumn_Col;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E0")]
		public Color Terrain_Autumn_Col;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8F0")]
		public Color Grass_Autumn_Col;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x900")]
		public Color Dusk_cloud_color;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x910")]
		public Color Dusk_real_cloud_col_dn;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x920")]
		public Color Dusk_real_cloud_col_up;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x930")]
		public Color Dusk_surround_cloud_col;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x940")]
		public Color Night_surround_cloud_col;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x950")]
		public Color Dusk_cloud_dome_color;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x960")]
		public Color Night_Color;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x970")]
		public Color Night_deep_Color;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x980")]
		public Color Night_black_Color;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x990")]
		public Color Night_lum_Color;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A0")]
		public Color Storm_cloud_Color;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B0")]
		public Color Day_Color;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C0")]
		public Color Day_Sun_Color;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D0")]
		public Color Day_Ambient_Color;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E0")]
		public Color Day_Tint_Color;

		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F0")]
		public Color Day_surround_cloud_col;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA00")]
		public Color Dusk_Sun_Color;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA10")]
		public Color Dusk_Ambient_Color;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA20")]
		public Color Dusk_Tint_Color;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA30")]
		public Color Dawn_Sun_Color;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA40")]
		public Color Dawn_Ambient_Color;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA50")]
		public Color Dawn_Tint_Color;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA60")]
		public Color Night_Sun_Color;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA70")]
		public Color Night_Ambient_Color;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA80")]
		public Color Night_Tint_Color;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA90")]
		private bool InitSeason;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA91")]
		private bool init_presets;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA98")]
		private ParticleSystem Star_particles_OBJ_P;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA0")]
		private ParticleSystem[] Butterflies2D_P;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA8")]
		private ParticleSystem[] Butterflies3D_P;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB0")]
		private ParticleSystem[] Dynamic_Clouds_Up_P;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB8")]
		private ParticleSystem[] Dynamic_Clouds_Dn_P;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC0")]
		private ParticleSystem[] Real_Clouds_Up_P;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC8")]
		private ParticleSystem[] Real_Clouds_Dn_P;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD0")]
		private ParticleSystem[] Cloud_bed_Up_P;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD8")]
		private ParticleSystem[] Cloud_bed_Dn_P;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE0")]
		private ParticleSystem[] Cloud_Static_Up_P;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE8")]
		private ParticleSystem[] Cloud_Static_Dn_P;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF0")]
		private ParticleSystem[] Tornados_P;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF8")]
		private ParticleSystem[] Freezer_P;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB00")]
		private ParticleSystem[] SnowStorm_P;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB08")]
		private ParticleSystem[] FallingLeaves_P;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB10")]
		private ParticleSystem[] Volcanos_P;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB18")]
		private ParticleSystem[] VolumeFog_P;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB20")]
		private ParticleSystem[] Surround_Clouds_P;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB28")]
		private ParticleSystem[] Surround_Clouds_Heavy_P;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB30")]
		private ParticleSystem[] Heavy_Rain_P;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB38")]
		private ParticleSystem[] Mild_Rain_P;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB40")]
		private ParticleSystem[] VolumeHeavy_Rain_P;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB48")]
		private ParticleSystem[] VolumeMild_Rain_P;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB50")]
		private ParticleSystem[] RefractHeavy_Rain_P;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB58")]
		private ParticleSystem[] RefractMild_Rain_P;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB60")]
		private ParticleSystem[] Sun_Ray_Cloud_P;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB68")]
		private ParticleSystem[] Lightning_System_P;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB70")]
		private Vector3 InitCam;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB7C")]
		public float Cam_follow_factor;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB80")]
		public Vector3 Cam_offset;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB90")]
		public GameObject SunTarget;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB98")]
		private float Day_hours;

		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DF7D0", Offset = "0x7DF7D0")]
		public float Current_Time;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA0")]
		public float Current_Day;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA4")]
		public int Current_Month;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA8")]
		private float days_since_last_month_inc;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBAC")]
		public int days_per_month;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB0")]
		private float Keep_previous_time;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB4")]
		private float Keep_previous_dawn_shift;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB8")]
		public bool Auto_Cycle_Sky;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC0")]
		public GameObject SUN_LIGHT;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC8")]
		public GameObject SUPPORT_LIGHT;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD0")]
		public GameObject MOON_LIGHT;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD8")]
		private Vector3 Keep_prev_sun_pos;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE4")]
		public float SPEED;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE8")]
		public int Preset;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBEC")]
		public bool stopRainIfUnderWater;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBF0")]
		private Light MAIN;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBF8")]
		private GameObject SkyCamOBJ;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC00")]
		public GameObject Test_Cubemap;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC08")]
		private Camera SkyCam;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC10")]
		private Transform SkyCam_transform;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC18")]
		private Cubemap CubeTexture;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC20")]
		public Material CUBE_Mat;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC28")]
		public LayerMask SkyboxLayer;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2C")]
		public bool ReflectSkybox;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC30")]
		private float lastReflectTime;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC34")]
		public float ReflectEvery;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC38")]
		public List<Material> AssignCubeMapMats;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC40")]
		public float ReflectCamfarClip;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC44")]
		public bool updateSkyAmbient;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC48")]
		private float lastAmbientUpdateTime;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4C")]
		public float AmbientUpdateEvery;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC50")]
		public float AmbientIntensity;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC54")]
		private float last_mat_update;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC58")]
		public float Update_mat_every;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5C")]
		private bool cut_off_main_cam;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC60")]
		private Vector3 prev_scene_cam_pos;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC6C")]
		private bool init_scene;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC6D")]
		public bool LimitSunUpdateRate;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC70")]
		private float last_sun_update;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC74")]
		public float Update_sun_every;

		[Token(Token = "0x6002090")]
		[Address(RVA = "0xA02040", Offset = "0xA02040", VA = "0xA02040")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0xA04A60", Offset = "0xA04A60", VA = "0xA04A60")]
		private void Start()
		{
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0xA298D8", Offset = "0xA298D8", VA = "0xA298D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0xA29990", Offset = "0xA29990", VA = "0xA29990")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6002094")]
		[Address(RVA = "0xA295D8", Offset = "0xA295D8", VA = "0xA295D8")]
		private void Assign_Material_PropsS(Material mat, Vector3 CameraTransform)
		{
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0xA28B4C", Offset = "0xA28B4C", VA = "0xA28B4C")]
		private void Assign_Material_Props(Material mat, Vector3 CameraTransform)
		{
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0xA29BF4", Offset = "0xA29BF4", VA = "0xA29BF4")]
		private void Make_Fog_Dissappear(float speed)
		{
		}

		[Token(Token = "0x6002097")]
		[Address(RVA = "0xA28968", Offset = "0xA28968", VA = "0xA28968")]
		private void Make_Fog_Appear(Color Fog_Color, float density, FogMode mode, float speed, int Season)
		{
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0xA29CB4", Offset = "0xA29CB4", VA = "0xA29CB4")]
		private void Make_Appear(GameObject Particle_OBJ, ParticleSystem[] ParticleOBJ_Ps, ParticleSystem ParticleOBJ_P, int max_particles, bool reset_pcount, int rate)
		{
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0xA2A0B0", Offset = "0xA2A0B0", VA = "0xA2A0B0")]
		private void Make_Dissappear(GameObject Particle_OBJ, ParticleSystem[] ParticleOBJ_Ps, ParticleSystem ParticleOBJ_P, int min_particles, int rate, bool pull_downward, bool on_lowest)
		{
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0xA08F08", Offset = "0xA08F08", VA = "0xA08F08")]
		private void Update()
		{
		}

		[Token(Token = "0x600209B")]
		[Address(RVA = "0xA2A394", Offset = "0xA2A394", VA = "0xA2A394")]
		public void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0xA1EAB4", Offset = "0xA1EAB4", VA = "0xA1EAB4")]
		private void Run_presets()
		{
		}

		[Token(Token = "0x600209D")]
		[Address(RVA = "0xA2A5F0", Offset = "0xA2A5F0", VA = "0xA2A5F0")]
		public void ApplyType0Scatter(SkyMasterManager SUNMASTERAH)
		{
		}

		[Token(Token = "0x600209E")]
		[Address(RVA = "0xA2A720", Offset = "0xA2A720", VA = "0xA2A720")]
		public void ApplyType0Default(SkyMasterManager SUNMASTERAH)
		{
		}

		[Token(Token = "0x600209F")]
		[Address(RVA = "0xA2A854", Offset = "0xA2A854", VA = "0xA2A854")]
		public void ApplyType0Default1(SkyMasterManager SUNMASTERAH)
		{
		}

		[Token(Token = "0x60020A0")]
		[Address(RVA = "0xA2A98C", Offset = "0xA2A98C", VA = "0xA2A98C")]
		public void ApplyType0Default2(SkyMasterManager SUNMASTERAH)
		{
		}

		[Token(Token = "0x60020A1")]
		[Address(RVA = "0xA2AAC0", Offset = "0xA2AAC0", VA = "0xA2AAC0")]
		public void ApplyType0Default3(SkyMasterManager SUNMASTERAH)
		{
		}

		[Token(Token = "0x60020A2")]
		[Address(RVA = "0xA2ABF4", Offset = "0xA2ABF4", VA = "0xA2ABF4")]
		public void ApplyType0Default4(SkyMasterManager SUNMASTERAH)
		{
		}

		[Token(Token = "0x60020A3")]
		[Address(RVA = "0xA2AD30", Offset = "0xA2AD30", VA = "0xA2AD30")]
		public void ApplyType1Default(SkyMasterManager SUNMASTERAH)
		{
		}

		[Token(Token = "0x60020A4")]
		[Address(RVA = "0xA2AE70", Offset = "0xA2AE70", VA = "0xA2AE70")]
		public void ApplyType1Default1(SkyMasterManager SUNMASTERAH)
		{
		}

		[Token(Token = "0x60020A5")]
		[Address(RVA = "0xA2AFB0", Offset = "0xA2AFB0", VA = "0xA2AFB0")]
		public void ApplyType1Default2(SkyMasterManager SUNMASTERAH)
		{
		}

		[Token(Token = "0x60020A6")]
		[Address(RVA = "0xA2B114", Offset = "0xA2B114", VA = "0xA2B114")]
		public void ApplyCloudCurvesPresetA()
		{
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0xA2B914", Offset = "0xA2B914", VA = "0xA2B914")]
		public void ApplyCloudCurvesPresetB()
		{
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0xA2C064", Offset = "0xA2C064", VA = "0xA2C064")]
		public void setMoonShader(Transform CamPos, float dimMoon)
		{
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0xA2C6D0", Offset = "0xA2C6D0", VA = "0xA2C6D0")]
		public SkyMasterManager()
		{
		}
	}
	[Token(Token = "0x2000341")]
	[ExecuteInEditMode]
	public class ParticleSheetOnGroundSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform Main_cam_transform;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 start_pos;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int particle_count;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform Cash_transform;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int particle_count_init;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool got_positions;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] positions;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] tile;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystem.Particle[] aaa;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleSystem nbb;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool letloose;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool let_loose;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int place_start_pos;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool Gravity_Mode;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int Tiles_X;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int Tiles_Y;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int KTiles_X;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int KTiles_Y;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float Y_offset;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool conform_to_terrain;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float Grav_speed;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float ext_rot;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool Use_formation;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		public bool Use_mesh;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E")]
		public bool Use_explicit;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 Explicit_Axis;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool keep_alive;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		public bool auto_rot_mesh;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		public bool use_cut_off;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float cut_off_height;

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0xE4F0DC", Offset = "0xE4F0DC", VA = "0xE4F0DC")]
		private void Start()
		{
		}

		[Token(Token = "0x60020AB")]
		[Address(RVA = "0xE4F258", Offset = "0xE4F258", VA = "0xE4F258")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0xE4F414", Offset = "0xE4F414", VA = "0xE4F414")]
		private void Update()
		{
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0xE50588", Offset = "0xE50588", VA = "0xE50588")]
		public ParticleSheetOnGroundSKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000342")]
	[ExecuteInEditMode]
	public class PlaceParticleOnGroundSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem p11;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool make_circle;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Circle_radius;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int loosen_circle;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool is_target;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spread;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem.Particle[] ParticleList;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform thisTransform;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2 Grass_Up_Low_Threshold;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool relaxed;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float Dist_Above_Terrain;

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0xE50AE8", Offset = "0xE50AE8", VA = "0xE50AE8")]
		private void Start()
		{
		}

		[Token(Token = "0x60020AF")]
		[Address(RVA = "0xE50BE8", Offset = "0xE50BE8", VA = "0xE50BE8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60020B0")]
		[Address(RVA = "0xE5133C", Offset = "0xE5133C", VA = "0xE5133C")]
		public PlaceParticleOnGroundSKYMASTER()
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class VolumeClouds_SM : MonoBehaviour
	{
		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem ShurikenParticle;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool useShuriken;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystemRenderer PrenderS;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float renewHeightPercent;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float renewFadeOutSpeed;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float renewFadeInSpeed;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool boxClouds;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject BoxesHolder;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool renewAboveHeight;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float renewHeight;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool shadows_created;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool DecoupledWind;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool DecoupledColor;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool DifferentialMotion;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float MaxDiffSpeed;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float MaxDiffOffset;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float LightShaderModifier;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float minLightShaderModifier;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float GlowShaderModifier;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float IntensityShaderModifier;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float ModifierApplicationSpeed;

		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float ModifierApplMinSpeed;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public GameObject Quad;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public List<Transform> Quads;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Light SunLight;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Light MoonLight;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool Accumulate;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float AccumPercent;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float AccumFactor;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool StabilizeRoll;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public bool StableRollMethod2;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		public bool StableRollAllAxis;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 prev_cam_for;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool sortedInit;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float angle1;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float angle2;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float NearCloudDist;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float CloudBedToThisDist;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool Divide_lightning;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public int LightningDivider;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool AutoScale;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		public bool DestroyOnfadeOut;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		public bool FadeOutOnBoundary;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		public bool ScatterShaderUpdate;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Material ScatterMat;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float fog_depth;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float reileigh;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float mieCoefficient;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float mieDirectionalG;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float ExposureBias;

		[Token(Token = "0x4001710")]
		private const float n = 1.0003f;

		[Token(Token = "0x4001711")]
		private const float N = 2.545E+25f;

		[Token(Token = "0x4001712")]
		private const float pn = 0.035f;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 lambda;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Vector3 K;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public bool VerticalForm;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float YScaleDiff;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public Vector3 MaxCloudDist;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float Yspread;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public Color HeightTint;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public bool SmoothIn;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
		public bool SmoothOut;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public float SmoothInSpeed;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public float SmoothoutSpeed;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float SmoothInRate;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float SmoothOutRate;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float max_fade_speed;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float max_smooth_out_time;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float current_smooth_out_time;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float fade_in_time;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float current_fadein_time;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool EnableLOD;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float LOD_send_height;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public int[] ParticlesLODed;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float LodMaxYDiff;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float LodMaxHDiff;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float LODFadeInSpeed;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float LODFadeOutSpeed;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float LODMinDist;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public bool CloudWaves;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public float WaveFreq;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public bool Moon_light;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Color Moon_light_color;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Color Moon_dark_color;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public bool Override_init_color;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public Color Override_color;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public bool Day_cycle;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Color Day_base_col;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public Color Day_sun_col;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public Color Dawn_base_col;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public Color Dawn_sun_col;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public Color Dusk_base_col;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public Color Dusk_sun_col;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public Color Night_base_col;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public Color Night_moon_col;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public bool Add_shadows;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private List<Transform> Shadow_planes;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private int alternate;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		public bool Use2DCheck;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public int max_divider;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private float Cloud_update_current;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public float Cloud_spread_delay;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		public int method;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public bool Turbulent;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x279")]
		public bool Flatten_below;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public List<Vector3> ShaftCenters;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public List<Transform> SunShafts;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public bool Beam_Occlusion;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x291")]
		public bool Smooth_mat_trans;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		public float Appear_Beam_speed;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public float Disappear_Beam_speed;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public List<Vector3> ShaftScale;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public float Beam_length;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		public bool Scale_beams;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AD")]
		public bool Scale_on_collision;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public float Offset_col_factor;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		public bool Diminish_beams;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B5")]
		public bool Override_sun;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public float Cut_height;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		public bool Restore_on_bound;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BD")]
		public bool Disable_on_bound;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public float Bound;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
		public bool destroy_on_end;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C5")]
		public bool clone_on_end;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C6")]
		public bool cloned;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public List<Vector3> Centers;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public List<Vector3> Centers_Init;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public float speed;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		public float multiplier;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public Vector3 wind;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		public bool Get_wind_direction;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public GameObject Wind_holder;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public GameObject Rain_holder;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public GameObject Lightning_holder;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public GameObject Shadow_holder;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public float max_bed_corner;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		public float min_bed_corner;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public float cloud_bed_heigh;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		public Color MainColor;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		public Color SunColor;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		public int divider;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public float Sun_exposure;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public Transform sun_transf;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private Transform keep_sun_transf;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public Transform moon_transf;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private Transform Cam_transf;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private Transform This_transf;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private Color MainColor_init;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		private float start_beam_transp;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		private float Prev_time;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public float UpdateInterval;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		private bool init_centers;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private Vector3 Prev_cam_rot;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
		public float color_speed;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public float cloud_scale;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A4")]
		public float global_cloud_scale;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public Color Global_tint;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		public bool Variant_cloud_size;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private List<float> Scale_per_cloud;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		public float cloud_min_scale;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3CC")]
		public float cloud_max_scale;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		public bool Sorted;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D1")]
		private bool Init;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D4")]
		private int Init_color;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		public float Delay_lerp;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3DC")]
		public bool Sun_dist_on;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		private Light Sun_Light;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		public bool Grab_sun_color;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E9")]
		public bool Grab_sun_intensity;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3EA")]
		public bool Grab_sun_angle;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3EC")]
		public float Day_light_Intensity;

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		public float Sun_angle_influence;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F4")]
		public bool Look_at_camera;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		public Vector3 Beams_camera_target_offset;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x404")]
		private float prev_intensity;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		private bool Got_shaft_items;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		private List<Renderer> Shafts_renderes;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private float Shaft_update_current;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
		public float Occlusion_sort_delay;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		private Quaternion prev_Rot;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		public bool Debug_mode;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x431")]
		public bool Use_audio;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		public AudioClip RainSound;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		public AudioSource CloudAudioSource;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		public float AudiofadeSpeed;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44C")]
		public float MaxSoundVol;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		public List<int> CenterIDs;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		public int DecoupledCounter;

		[Token(Token = "0x60020B1")]
		[Address(RVA = "0xAF02C8", Offset = "0xAF02C8", VA = "0xAF02C8")]
		public void convertToShuriken()
		{
		}

		[Token(Token = "0x60020B2")]
		[Address(RVA = "0xAF02CC", Offset = "0xAF02CC", VA = "0xAF02CC")]
		public void ScaleClouds(float WorldScale, float VCloudCoverFac, float VCloudSizeFac, float VCloudCSizeFac)
		{
		}

		[Token(Token = "0x60020B3")]
		[Address(RVA = "0xAF049C", Offset = "0xAF049C", VA = "0xAF049C")]
		private void Start()
		{
		}

		[Token(Token = "0x60020B4")]
		[Address(RVA = "0xAF215C", Offset = "0xAF215C", VA = "0xAF215C")]
		private void Update()
		{
		}

		[Token(Token = "0x60020B5")]
		[Address(RVA = "0xAFCCB8", Offset = "0xAFCCB8", VA = "0xAFCCB8")]
		private static Vector3 totalRayleigh(Vector3 lambda)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020B6")]
		[Address(RVA = "0xAFCDC0", Offset = "0xAFCDC0", VA = "0xAFCDC0")]
		private static Vector3 totalMie(Vector3 lambda, Vector3 K, float T)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020B7")]
		[Address(RVA = "0xAFCEE4", Offset = "0xAFCEE4", VA = "0xAFCEE4")]
		public VolumeClouds_SM()
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class SKYMASTER_Demo3 : MonoBehaviour
	{
		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float damping;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool smooth;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool enable_lookat;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Circle_Around_ParticleSKYMASTER Sun_rotator;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Circle_Around_ParticleSKYMASTER Cam_rotator;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MouseLookSKYMASTER MouseLOOK;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VolumeClouds_SM Clouds;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VolumeClouds_SM Clouds_ORIGIN;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Light SunLight;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Sun_time_start;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform SUN;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool HUD_ON;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform Clouds_top;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float Dome_rot;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float SunLight_r;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float SunLight_g;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float SunLight_b;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float Camera_up;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float Sun_up;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float sun_rot_speed;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float cam_rot_speed;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int Cloud_divider;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float Cloud_bed_height;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float Cloud_bed_width;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameObject Cloud_instance;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float cloud_max_scale;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int cloud_max_particle_size;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool Rot_clouds;

		[Token(Token = "0x60020B8")]
		[Address(RVA = "0xB241F8", Offset = "0xB241F8", VA = "0xB241F8")]
		private void Start()
		{
		}

		[Token(Token = "0x60020B9")]
		[Address(RVA = "0xB245C4", Offset = "0xB245C4", VA = "0xB245C4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60020BA")]
		[Address(RVA = "0xB248F4", Offset = "0xB248F4", VA = "0xB248F4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0xB25350", Offset = "0xB25350", VA = "0xB25350")]
		public SKYMASTER_Demo3()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class LightFlash : MonoBehaviour
	{
		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float delay;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float cur_time;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light this_light;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float start_emit_time;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool emits;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float emit_time;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float speed;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PerlinSKYMASTER noise;

		[Token(Token = "0x60020BC")]
		[Address(RVA = "0xE3FF18", Offset = "0xE3FF18", VA = "0xE3FF18")]
		private void Start()
		{
		}

		[Token(Token = "0x60020BD")]
		[Address(RVA = "0xE3FF7C", Offset = "0xE3FF7C", VA = "0xE3FF7C")]
		private void Update()
		{
		}

		[Token(Token = "0x60020BE")]
		[Address(RVA = "0xE40978", Offset = "0xE40978", VA = "0xE40978")]
		public LightFlash()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class SKYMASTER_Demo3MOBILE_FASTEST : MonoBehaviour
	{
		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float damping;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool smooth;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VolumeClouds_SM Clouds;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VolumeClouds_SM Clouds_ORIGIN;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Light SunLight;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float SunLight_r;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float SunLight_g;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float SunLight_b;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float Camera_up;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float Sun_up;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float sun_rot_speed;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float cam_rot_speed;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int Cloud_divider;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float Cloud_bed_height;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float Cloud_bed_width;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject Cloud_instance;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float cloud_max_scale;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int cloud_max_particle_size;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool Rot_clouds;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float Sun_time_start;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject SUN;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject TREES;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool HUD_ON;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float HDR;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float Esun;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float Kr;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float Km;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float GE;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float SPEED;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float fSamples;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float fScaleDepth;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool set_sun_start;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float Ring_factor;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 CURRENT_Force_color;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float Coloration;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector4 TintColor;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private bool enable_controls;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GameObject Clouds_top;

		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject Clouds_bottom;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject Flat_Clouds_top;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public GameObject Flat_Clouds_bottom;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public GameObject Cloud_Dome;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public GameObject Cloud_Rays;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public GameObject Cloud_Static;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float Dome_rot;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public GameObject Tornado1;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public GameObject Tornado2;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public GameObject Butterflies;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public GameObject FreezeEffect;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public GameObject LightningStorm;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public bool Auto_Season_Cycle;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private float Cycle_speed;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool GI_controls_on;

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0xB2690C", Offset = "0xB2690C", VA = "0xB2690C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0xB26A44", Offset = "0xB26A44", VA = "0xB26A44")]
		private void Start()
		{
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0xB26E2C", Offset = "0xB26E2C", VA = "0xB26E2C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0xB287F4", Offset = "0xB287F4", VA = "0xB287F4")]
		public SKYMASTER_Demo3MOBILE_FASTEST()
		{
		}
	}
	[Token(Token = "0x2000347")]
	public class SKYMASTER_Demo3MOBILE : MonoBehaviour
	{
		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Sun_time_start;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject SUN;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject TREES;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool HUD_ON;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float HDR;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float Esun;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float Kr;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float Km;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float GE;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float SPEED;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float fSamples;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float fScaleDepth;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool set_sun_start;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float Ring_factor;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 CURRENT_Force_color;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float Coloration;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector4 TintColor;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool enable_controls;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject Clouds_top;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject Clouds_bottom;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject Flat_Clouds_top;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject Flat_Clouds_bottom;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject Cloud_Dome;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject Cloud_Rays;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject Cloud_Static;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float Dome_rot;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject Tornado1;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject Tornado2;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject Butterflies;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GameObject FreezeEffect;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject LightningStorm;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool Auto_Season_Cycle;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float Cycle_speed;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool GI_controls_on;

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0xB2537C", Offset = "0xB2537C", VA = "0xB2537C")]
		private void Start()
		{
		}

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0xB254B4", Offset = "0xB254B4", VA = "0xB254B4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0xB26828", Offset = "0xB26828", VA = "0xB26828")]
		public SKYMASTER_Demo3MOBILE()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public enum AAMode
	{
		[Token(Token = "0x400181D")]
		FXAA2,
		[Token(Token = "0x400181E")]
		FXAA3Console,
		[Token(Token = "0x400181F")]
		FXAA1PresetA,
		[Token(Token = "0x4001820")]
		FXAA1PresetB,
		[Token(Token = "0x4001821")]
		NFAA,
		[Token(Token = "0x4001822")]
		SSAA,
		[Token(Token = "0x4001823")]
		DLAA
	}
	[Token(Token = "0x2000349")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7E80", Offset = "0x7D7E80")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D7E80", Offset = "0x7D7E80")]
	public class AntialiasingSkyMaster : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AAMode mode;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showGeneratedNormals;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float offsetScale;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurRadius;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeThresholdMin;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float edgeThreshold;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgeSharpness;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool dlaaSharp;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader ssaaShader;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material ssaa;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dlaaShader;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dlaa;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader nfaaShader;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material nfaa;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader shaderFXAAII;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material materialFXAAII;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material materialFXAAIII;

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0x1054754", Offset = "0x1054754", VA = "0x1054754")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0x10547B8", Offset = "0x10547B8", VA = "0x10547B8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0x10548A8", Offset = "0x10548A8", VA = "0x10548A8")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0x1054DF8", Offset = "0x1054DF8", VA = "0x1054DF8")]
		public AntialiasingSkyMaster()
		{
		}
	}
	[Token(Token = "0x200034A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D7F18", Offset = "0x7D7F18")]
	public class ColorCorrectionCurvesSkyMaster : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x20004B7")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x400233F")]
			Simple,
			[Token(Token = "0x4002340")]
			Advanced
		}

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve redChannel;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useDepthCorrection;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve zCurve;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material ccMaterial;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccDepthMaterial;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float saturation;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool selectiveCc;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color selectiveFromColor;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color selectiveToColor;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool updateTextures;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0xBE8B88", Offset = "0xBE8B88", VA = "0xBE8B88")]
		private new void Start()
		{
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0xBE8BB4", Offset = "0xBE8BB4", VA = "0xBE8BB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0xBE8BB8", Offset = "0xBE8BB8", VA = "0xBE8BB8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0xBE8E2C", Offset = "0xBE8E2C", VA = "0xBE8E2C")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0xBE9228", Offset = "0xBE9228", VA = "0xBE9228")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0xBE922C", Offset = "0xBE922C", VA = "0xBE922C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0xBE9534", Offset = "0xBE9534", VA = "0xBE9534")]
		public ColorCorrectionCurvesSkyMaster()
		{
		}
	}
	[Token(Token = "0x200034B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D7F64", Offset = "0x7D7F64")]
	public class ContrastStretchSkyMaster : MonoBehaviour
	{
		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float adaptationSpeed;

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float limitMinimum;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float limitMaximum;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x1700031A")]
		protected Material materialLum
		{
			[Token(Token = "0x60020D1")]
			[Address(RVA = "0xBE9B70", Offset = "0xBE9B70", VA = "0xBE9B70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031B")]
		protected Material materialReduce
		{
			[Token(Token = "0x60020D2")]
			[Address(RVA = "0xBE9C38", Offset = "0xBE9C38", VA = "0xBE9C38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031C")]
		protected Material materialAdapt
		{
			[Token(Token = "0x60020D3")]
			[Address(RVA = "0xBE9D00", Offset = "0xBE9D00", VA = "0xBE9D00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031D")]
		protected Material materialApply
		{
			[Token(Token = "0x60020D4")]
			[Address(RVA = "0xBE9DC8", Offset = "0xBE9DC8", VA = "0xBE9DC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60020D5")]
		[Address(RVA = "0xBE9E90", Offset = "0xBE9E90", VA = "0xBE9E90")]
		private void Start()
		{
		}

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0xBE9F24", Offset = "0xBE9F24", VA = "0xBE9F24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60020D7")]
		[Address(RVA = "0xBEA078", Offset = "0xBEA078", VA = "0xBEA078")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60020D8")]
		[Address(RVA = "0xBEA2B0", Offset = "0xBEA2B0", VA = "0xBEA2B0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60020D9")]
		[Address(RVA = "0xBEA518", Offset = "0xBEA518", VA = "0xBEA518")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x60020DA")]
		[Address(RVA = "0xBEA734", Offset = "0xBEA734", VA = "0xBEA734")]
		public ContrastStretchSkyMaster()
		{
		}
	}
	[Token(Token = "0x200034C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D7FB0", Offset = "0x7D7FB0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D7FB0", Offset = "0x7D7FB0")]
	public class GlobalFogSkyMaster : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF808", Offset = "0x7DF808")]
		public bool distanceFog;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF840", Offset = "0x7DF840")]
		public bool useRadialDistance;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF878", Offset = "0x7DF878")]
		public bool heightFog;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF8B0", Offset = "0x7DF8B0")]
		public float height;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DF8E8", Offset = "0x7DF8E8")]
		public float heightDensity;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF904", Offset = "0x7DF904")]
		public float startDistance;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient DistGradient;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2 GradientBounds;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float luminance;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float lumFac;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ScatterFac;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float TurbFac;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float HorizFac;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float turbidity;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float reileigh;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float mieCoefficient;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float mieDirectionalG;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float bias;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float contrast;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform Sun;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool FogSky;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector3 TintColor;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float ClearSkyFac;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader fogShader;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material fogMaterial;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Texture2D colourPalette;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool Made_texture;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public int gradientResolution;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Color[] colourArray;

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0xE3D81C", Offset = "0xE3D81C", VA = "0xE3D81C")]
		private void Update()
		{
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0xE3D9E4", Offset = "0xE3D9E4", VA = "0xE3D9E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0xE3DBA4", Offset = "0xE3DBA4", VA = "0xE3DBA4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60020DE")]
		[Address(RVA = "0xE3E148", Offset = "0xE3E148", VA = "0xE3E148")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60020DF")]
		[Address(RVA = "0xE3EBC8", Offset = "0xE3EBC8", VA = "0xE3EBC8")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr, Gradient DistGradient, Vector2 GradientBounds, Texture2D colourPalette)
		{
		}

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0xE3EDE0", Offset = "0xE3EDE0", VA = "0xE3EDE0")]
		public GlobalFogSkyMaster()
		{
		}
	}
	[Token(Token = "0x200034D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D8048", Offset = "0x7D8048")]
	public class PostEffectsBaseSkyMaster : MonoBehaviour
	{
		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x60020E1")]
		[Address(RVA = "0xE3DD08", Offset = "0xE3DD08", VA = "0xE3DD08")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x60020E2")]
		[Address(RVA = "0xE532E8", Offset = "0xE532E8", VA = "0xE532E8")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x60020E3")]
		[Address(RVA = "0xE534DC", Offset = "0xE534DC", VA = "0xE534DC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0xE534E8", Offset = "0xE534E8", VA = "0xE534E8")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0xE534F0", Offset = "0xE534F0", VA = "0xE534F0", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60020E6")]
		[Address(RVA = "0xE535A0", Offset = "0xE535A0", VA = "0xE535A0")]
		protected void Start()
		{
		}

		[Token(Token = "0x60020E7")]
		[Address(RVA = "0xE3DBFC", Offset = "0xE3DBFC", VA = "0xE3DBFC")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0xE535AC", Offset = "0xE535AC", VA = "0xE535AC")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x60020E9")]
		[Address(RVA = "0xE53608", Offset = "0xE53608", VA = "0xE53608")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x60020EA")]
		[Address(RVA = "0xE3E0A0", Offset = "0xE3E0A0", VA = "0xE3E0A0")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0xE53610", Offset = "0xE53610", VA = "0xE53610")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0xE532BC", Offset = "0xE532BC", VA = "0xE532BC")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0xE53818", Offset = "0xE53818", VA = "0xE53818")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0xE3EF24", Offset = "0xE3EF24", VA = "0xE3EF24")]
		public PostEffectsBaseSkyMaster()
		{
		}
	}
	[Token(Token = "0x200034E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D80BC", Offset = "0x7D80BC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D80BC", Offset = "0x7D80BC")]
	public class SunShaftsSkyMaster : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x20004B8")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4002342")]
			Low,
			[Token(Token = "0x4002343")]
			Normal,
			[Token(Token = "0x4002344")]
			High
		}

		[Token(Token = "0x20004B9")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4002346")]
			Screen,
			[Token(Token = "0x4002347")]
			Add
		}

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform sunTransform;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int radialBlurIterations;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color sunColor;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color sunThreshold;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float sunShaftIntensity;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxRadius;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useDepthTexture;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader sunShaftsShader;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader simpleClearShader;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material simpleClearMaterial;

		[Token(Token = "0x60020EF")]
		[Address(RVA = "0xAE7A70", Offset = "0xAE7A70", VA = "0xAE7A70", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0xAE7AE8", Offset = "0xAE7AE8", VA = "0xAE7AE8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0xAE82F0", Offset = "0xAE82F0", VA = "0xAE82F0")]
		public SunShaftsSkyMaster()
		{
		}
	}
	[Token(Token = "0x200034F")]
	public class SKYMASTER_DemoV17 : MonoBehaviour
	{
		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ControlGIPROXY_ATTRIUM_SM GI_controller;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LightCollisionsPDM Gi_proxy;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject GI_ITEMS;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ColorCorrectionCurvesSkyMaster Colorizer;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AntialiasingSkyMaster AntiAlising;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ContrastStretchSkyMaster ContrastFilter;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject Freeze_POOL;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject Freezer;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject Rain1;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject Rain2;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject Bats;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject Leaves;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject Floor;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject Floor_stripes;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject Floor_collider;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool Special_effects;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool Sky_effects;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject SkyDOME;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject Typhoon;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject ChainLightning;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float Sun_time_start;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject SUN;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject TREES;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool HUD_ON;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float HDR;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float Esun;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float Kr;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float Km;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float GE;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float SPEED;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float HORIZON;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float DuskLightG;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float DuskLightB;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float fSamples;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float fScaleDepth;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool set_sun_start;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private float Ring_factor;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 CURRENT_Force_color;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float Coloration;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector4 TintColor;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public bool enable_controls;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public GameObject Clouds_top;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public GameObject Clouds_bottom;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public GameObject Flat_Clouds_top;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public GameObject Flat_Clouds_bottom;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public GameObject Cloud_Dome;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public GameObject Cloud_Rays;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public GameObject Cloud_Static;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float Dome_rot;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public GameObject Tornado1;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public GameObject Tornado2;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GameObject Butterflies;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public GameObject FreezeEffect;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public GameObject LightningStorm;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public bool Auto_Season_Cycle;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private float Cycle_speed;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private bool GI_controls_on;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private int current_ground;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private int current_haze;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private int current_sky;

		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private SeasonalTerrainSKYMASTER TerrainHandle;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private SeasonalTerrainSKYMASTER MeshTerrainHandle;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public GameObject TerrainObj;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public GameObject HorizonObj;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public GameObject MeshTerrainObj;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public GameObject Water;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public GameObject CloudHanlder;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private float Camera_up;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private bool Rain1_on;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F5")]
		private bool Rain2_on;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F6")]
		private bool Leaves_on;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F7")]
		private bool Bats_on;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private bool Freeze_on;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F9")]
		private bool Colorcorrect_on;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FA")]
		private bool Contrast_on;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FB")]
		private bool AntiAliasng_on;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private bool SkyDome_on;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FD")]
		private bool MoonMesh_on;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private float TOD;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private bool Typhoon_on;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x205")]
		private bool Chain_on;

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0xB288E4", Offset = "0xB288E4", VA = "0xB288E4")]
		private void Start()
		{
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0xB28D80", Offset = "0xB28D80", VA = "0xB28D80")]
		private void Disable_all()
		{
		}

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0xB28EE8", Offset = "0xB28EE8", VA = "0xB28EE8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0xB2BD2C", Offset = "0xB2BD2C", VA = "0xB2BD2C")]
		public SKYMASTER_DemoV17()
		{
		}
	}
	[Token(Token = "0x2000350")]
	public class SKYMASTER_Volume_Clouds_Demo125 : MonoBehaviour
	{
		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VolumeClouds_SM Clouds;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VolumeClouds_SM Clouds_ORIGIN;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Light SunLight;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Sun_time_start;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform SUN;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool HUD_ON;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform Clouds_top;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float Dome_rot;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float SunLight_r;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float SunLight_g;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float SunLight_b;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float Camera_up;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float Sun_up;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float sun_rot_speed;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float cam_rot_speed;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int Cloud_divider;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float Cloud_bed_height;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float Cloud_bed_width;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject Cloud_instance;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float cloud_max_scale;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int cloud_max_particle_size;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float cloud_X_speed;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float cloud_Z_speed;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool Plus_hit;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool Rot_clouds;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<Transform> CloudPresets;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int count_presets;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool Alt_color;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public SunShaftsSkyMaster Shafts;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GlobalFogSkyMaster Fog;

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0xB3A980", Offset = "0xB3A980", VA = "0xB3A980")]
		private void Start()
		{
		}

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0xB3ACDC", Offset = "0xB3ACDC", VA = "0xB3ACDC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0xB3AE14", Offset = "0xB3AE14", VA = "0xB3AE14")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0xB3BE04", Offset = "0xB3BE04", VA = "0xB3BE04")]
		public SKYMASTER_Volume_Clouds_Demo125()
		{
		}
	}
	[Token(Token = "0x2000351")]
	public class CycleShield_UVs : MonoBehaviour
	{
		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 Dist;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 Speed;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool randomize;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float random_factor;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float randomizer;

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0xBEC63C", Offset = "0xBEC63C", VA = "0xBEC63C")]
		private void Start()
		{
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0xBEC66C", Offset = "0xBEC66C", VA = "0xBEC66C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0xBEC798", Offset = "0xBEC798", VA = "0xBEC798")]
		public CycleShield_UVs()
		{
		}
	}
	[Token(Token = "0x2000352")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D8154", Offset = "0x7D8154")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D8154", Offset = "0x7D8154")]
	public class BloomSkyMaster : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x20004BA")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4002349")]
			Ghosting,
			[Token(Token = "0x400234A")]
			Anamorphic,
			[Token(Token = "0x400234B")]
			Combined
		}

		[Token(Token = "0x20004BB")]
		public enum TweakMode
		{
			[Token(Token = "0x400234D")]
			Basic,
			[Token(Token = "0x400234E")]
			Complex
		}

		[Token(Token = "0x20004BC")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4002350")]
			Auto,
			[Token(Token = "0x4002351")]
			On,
			[Token(Token = "0x4002352")]
			Off
		}

		[Token(Token = "0x20004BD")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4002354")]
			Screen,
			[Token(Token = "0x4002355")]
			Add
		}

		[Token(Token = "0x20004BE")]
		public enum BloomQuality
		{
			[Token(Token = "0x4002357")]
			Cheap,
			[Token(Token = "0x4002358")]
			High
		}

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode tweakMode;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomQuality quality;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int bloomBlurIterations;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float flareRotation;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareIntensity;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float lensflareThreshold;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float lensFlareSaturation;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Color flareColorA;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorB;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorC;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorD;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Shader lensFlareShader;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader screenBlendShader;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material screenBlend;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0xBDDF50", Offset = "0xBDDF50", VA = "0xBDDF50", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0xBDDFF0", Offset = "0xBDDFF0", VA = "0xBDDFF0")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0xBDF3B8", Offset = "0xBDF3B8", VA = "0xBDF3B8")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002100")]
		[Address(RVA = "0xBDF1B4", Offset = "0xBDF1B4", VA = "0xBDF1B4")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002101")]
		[Address(RVA = "0xBDEEB0", Offset = "0xBDEEB0", VA = "0xBDEEB0")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002102")]
		[Address(RVA = "0xBDEDC8", Offset = "0xBDEDC8", VA = "0xBDEDC8")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0xBDEFA0", Offset = "0xBDEFA0", VA = "0xBDEFA0")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0xBDF488", Offset = "0xBDF488", VA = "0xBDF488")]
		public BloomSkyMaster()
		{
		}
	}
	[Token(Token = "0x2000353")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D81EC", Offset = "0x7D81EC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D81EC", Offset = "0x7D81EC")]
	public class GlobalTranspFogSkyMaster : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF93C", Offset = "0x7DF93C")]
		public bool distanceFog;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF974", Offset = "0x7DF974")]
		public bool useRadialDistance;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF9AC", Offset = "0x7DF9AC")]
		public bool heightFog;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DF9E4", Offset = "0x7DF9E4")]
		public float height;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DFA1C", Offset = "0x7DFA1C")]
		public float heightDensity;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DFA38", Offset = "0x7DFA38")]
		public float startDistance;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient DistGradient;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2 GradientBounds;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float luminance;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float lumFac;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ScatterFac;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float TurbFac;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float HorizFac;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float turbidity;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float reileigh;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float mieCoefficient;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float mieDirectionalG;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float bias;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float contrast;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform Sun;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool FogSky;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector3 TintColor;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float ClearSkyFac;

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader fogShader;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material fogMaterial;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Texture2D colourPalette;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool Made_texture;

		[Token(Token = "0x6002105")]
		[Address(RVA = "0xE3EF38", Offset = "0xE3EF38", VA = "0xE3EF38")]
		private void Update()
		{
		}

		[Token(Token = "0x6002106")]
		[Address(RVA = "0xE3EF3C", Offset = "0xE3EF3C", VA = "0xE3EF3C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002107")]
		[Address(RVA = "0xE3EF94", Offset = "0xE3EF94", VA = "0xE3EF94")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002108")]
		[Address(RVA = "0xE3FBA0", Offset = "0xE3FBA0", VA = "0xE3FBA0")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr, Gradient DistGradient, Vector2 GradientBounds, Texture2D colourPalette)
		{
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0xE3FDB8", Offset = "0xE3FDB8", VA = "0xE3FDB8")]
		public GlobalTranspFogSkyMaster()
		{
		}
	}
	[Token(Token = "0x2000354")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D8284", Offset = "0x7D8284")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D8284", Offset = "0x7D8284")]
	public class TonemappingSM : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x20004BF")]
		public enum TonemapperType
		{
			[Token(Token = "0x400235A")]
			SimpleReinhard,
			[Token(Token = "0x400235B")]
			UserCurve,
			[Token(Token = "0x400235C")]
			Hable,
			[Token(Token = "0x400235D")]
			Photographic,
			[Token(Token = "0x400235E")]
			OptimizedHejiDawson,
			[Token(Token = "0x400235F")]
			AdaptiveReinhard,
			[Token(Token = "0x4002360")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x20004C0")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x4002362")]
			Square16 = 0x10,
			[Token(Token = "0x4002363")]
			Square32 = 0x20,
			[Token(Token = "0x4002364")]
			Square64 = 0x40,
			[Token(Token = "0x4002365")]
			Square128 = 0x80,
			[Token(Token = "0x4002366")]
			Square256 = 0x100,
			[Token(Token = "0x4002367")]
			Square512 = 0x200,
			[Token(Token = "0x4002368")]
			Square1024 = 0x400
		}

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TonemapperType type;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D curveTex;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exposureAdjustment;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float middleGrey;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float white;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float adaptionSpeed;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader tonemapper;

		[Token(Token = "0x4001947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material tonemapMaterial;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture rt;

		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x600210A")]
		[Address(RVA = "0xAEAEF8", Offset = "0xAEAEF8", VA = "0xAEAEF8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0xAEB044", Offset = "0xAEB044", VA = "0xAEB044")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x600210C")]
		[Address(RVA = "0xAEB2F8", Offset = "0xAEB2F8", VA = "0xAEB2F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600210D")]
		[Address(RVA = "0xAEB450", Offset = "0xAEB450", VA = "0xAEB450")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x600210E")]
		[Address(RVA = "0xAEB544", Offset = "0xAEB544", VA = "0xAEB544")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600210F")]
		[Address(RVA = "0xAEBD5C", Offset = "0xAEBD5C", VA = "0xAEBD5C")]
		public TonemappingSM()
		{
		}
	}
	[Token(Token = "0x2000355")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D831C", Offset = "0x7D831C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D831C", Offset = "0x7D831C")]
	public class VignetteAndChromaticAberrationSM : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x20004C1")]
		public enum AberrationMode
		{
			[Token(Token = "0x400236A")]
			Simple,
			[Token(Token = "0x400236B")]
			Advanced
		}

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AberrationMode mode;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float chromaticAberration;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float axialAberration;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float blur;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurSpread;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float luminanceDependency;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurDistance;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader vignetteShader;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader chromAberrationShader;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6002110")]
		[Address(RVA = "0xAEFBEC", Offset = "0xAEFBEC", VA = "0xAEFBEC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002111")]
		[Address(RVA = "0xAEFC84", Offset = "0xAEFC84", VA = "0xAEFC84")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0xAF0294", Offset = "0xAF0294", VA = "0xAF0294")]
		public VignetteAndChromaticAberrationSM()
		{
		}
	}
	[Token(Token = "0x2000356")]
	public class ParticleShadowsSM : MonoBehaviour
	{
		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color Start_color;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Ref_light;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem p2;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem.Particle[] ParticleList;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool affectAlpha;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool Debug_on;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Shadow_factor;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float Shadow_max_dist;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color ShadowColor;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int counter;

		[Token(Token = "0x6002113")]
		[Address(RVA = "0xE4E79C", Offset = "0xE4E79C", VA = "0xE4E79C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0xE4E82C", Offset = "0xE4E82C", VA = "0xE4E82C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0xE4F068", Offset = "0xE4F068", VA = "0xE4F068")]
		public ParticleShadowsSM()
		{
		}
	}
	[Token(Token = "0x2000357")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D83B4", Offset = "0x7D83B4")]
	public class SetRenderQueue : MonoBehaviour
	{
		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int queue;

		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] queues;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Resort;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int SortingLayerOrder;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string sortingLayerName;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int sortingLayerID;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool is_cloud;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform This_tranf;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool above_clouds;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int SortingLayerCloudsGround;

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int SortingLayerCloudsAbove;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool UseSortingLayers;

		[Token(Token = "0x6002116")]
		[Address(RVA = "0x1135878", Offset = "0x1135878", VA = "0x1135878")]
		protected void Start()
		{
		}

		[Token(Token = "0x6002117")]
		[Address(RVA = "0x1135AD0", Offset = "0x1135AD0", VA = "0x1135AD0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0x1135C60", Offset = "0x1135C60", VA = "0x1135C60")]
		public SetRenderQueue()
		{
		}
	}
	[Token(Token = "0x2000358")]
	[ExecuteInEditMode]
	public class TerrainDepthSM : MonoBehaviour
	{
		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DFA70", Offset = "0x7DFA70")]
		public float heightFactor;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DFA88", Offset = "0x7DFA88")]
		public float heightCutoff;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DFAA4", Offset = "0x7DFAA4")]
		public float contrast;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader DepthShader;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material material;

		[Token(Token = "0x6002119")]
		[Address(RVA = "0xAE93C0", Offset = "0xAE93C0", VA = "0xAE93C0")]
		private void Start()
		{
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0xAE9618", Offset = "0xAE9618", VA = "0xAE9618")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600211B")]
		[Address(RVA = "0xAE96CC", Offset = "0xAE96CC", VA = "0xAE96CC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0xAE98A4", Offset = "0xAE98A4", VA = "0xAE98A4")]
		public TerrainDepthSM()
		{
		}
	}
	[Token(Token = "0x2000359")]
	[ExecuteInEditMode]
	public class SkyMaster : MonoBehaviour
	{
		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject TMPCloudOBJ;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool AddSmTerrainMat;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool UseTabs;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int currentTab;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve IntensityDiff;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve IntensityFog;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve IntensitySun;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve FexposureC;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve FscaleDiffC;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve FSunGC;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve FSunringC;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve heightOffsetFogCurve;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public AnimationCurve luminanceVFogCurve;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		public AnimationCurve lumFactorFogCurve;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		public AnimationCurve scatterFacFogCurve;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		public AnimationCurve turbidityFogCurve;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		public AnimationCurve turbFacFogCurve;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public AnimationCurve horizonFogCurve;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		public AnimationCurve contrastFogCurve;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		public Gradient SkyColorGrad;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		public Gradient SkyTintGrad;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		public Gradient VolCloudLitGrad;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		public Gradient VolCloudShadGrad;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		public Gradient VolCloudFogGrad;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public SeasonalTerrainSKYMASTER TerrainManager;

		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public WaterHandlerSM WaterManager;

		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public LightCollisionsPDM GIProxyManager;

		[Token(Token = "0x4001990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public WaterHeightSM WaterHeightHandle;

		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool LargeWaterPlane;

		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float LargeWaterPlaneScale;

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool OverridePeformance;

		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool DecoupleWind;

		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float UpdateInteraval;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public int SpreadToFrames;

		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public bool RenewClouds;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		public bool OverrideRenewSettings;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float FadeInSpeed;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float FadeOutSpeed;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float MaxFadeTime;

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float Boundary;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float lastFadeInSpeed;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float lastFadeOutSpeed;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float lastMaxFadeTime;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float lastBoundary;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float TerrainDepthSize;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public bool PreviewDepthTexture;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public List<Terrain> UnityTerrains;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public List<GameObject> MeshTerrains;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool DontScaleParticleTranf;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		public bool DontScaleParticleProps;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x142")]
		public bool SKY_folder;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x143")]
		public bool water_folder1;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public bool foliage_folder1;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x145")]
		public bool weather_folder1;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x146")]
		public bool cloud_folder1;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x147")]
		public bool cloud_folder2;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public bool cloud_folder3;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		public bool cloud_folder4;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		public bool camera_folder1;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14B")]
		public bool terrain_folder1;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public bool scaler_folder1;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		public bool scaler_folder11;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Material MeshTerrainSnowMat;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Material UnityTerrainSnowMat;

		[Token(Token = "0x600211D")]
		[Address(RVA = "0x11396B4", Offset = "0x11396B4", VA = "0x11396B4")]
		private void Start()
		{
		}

		[Token(Token = "0x600211E")]
		[Address(RVA = "0x1139754", Offset = "0x1139754", VA = "0x1139754")]
		public void Update()
		{
		}

		[Token(Token = "0x600211F")]
		[Address(RVA = "0x1139BF8", Offset = "0x1139BF8", VA = "0x1139BF8")]
		public SkyMaster()
		{
		}
	}
	[Token(Token = "0x200035A")]
	public class SKYMASTER_DemoV30 : MonoBehaviour
	{
		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Sun_time_start;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HUD_ON;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool set_sun_start;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float Dome_rot;

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float Camera_up;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float TOD;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float SPEED;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private WaterHeightSM WaterHeightHandle;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterHandlerSM WaterHandler;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int windowsON;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform windowsSpot;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform underwaterSpot;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform AtollViewSpot;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform oceanSpot;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform boatSpot;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform boatSpot2;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform smokeSPOT;

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject farOceanplane;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool offsetsON;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool colorsON;

		[Token(Token = "0x6002120")]
		[Address(RVA = "0xB2BE38", Offset = "0xB2BE38", VA = "0xB2BE38")]
		private void Start()
		{
		}

		[Token(Token = "0x6002121")]
		[Address(RVA = "0xB2BFE8", Offset = "0xB2BFE8", VA = "0xB2BFE8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002122")]
		[Address(RVA = "0xB2E54C", Offset = "0xB2E54C", VA = "0xB2E54C")]
		public SKYMASTER_DemoV30()
		{
		}
	}
	[Token(Token = "0x200035B")]
	public class SKYMASTER_DemoV30_AIRPLANE : MonoBehaviour
	{
		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Sun_time_start;

		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HUD_ON;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool set_sun_start;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material CloudMat1;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material CloudMat2;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material CloudMat3;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material CloudMat4;

		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int cloud_mat_counter;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float Dome_rot;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float Camera_up;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float TOD;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float SPEED;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int windowsON;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeVIEW;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform backVIEW;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool inPlane;

		[Token(Token = "0x6002123")]
		[Address(RVA = "0xB2E568", Offset = "0xB2E568", VA = "0xB2E568")]
		private void Start()
		{
		}

		[Token(Token = "0x6002124")]
		[Address(RVA = "0xB2E6B8", Offset = "0xB2E6B8", VA = "0xB2E6B8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0xB2F274", Offset = "0xB2F274", VA = "0xB2F274")]
		public SKYMASTER_DemoV30_AIRPLANE()
		{
		}
	}
	[Token(Token = "0x200035C")]
	public class SM_CloudRot : MonoBehaviour
	{
		[Token(Token = "0x6002126")]
		[Address(RVA = "0x11227EC", Offset = "0x11227EC", VA = "0x11227EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0x11227F0", Offset = "0x11227F0", VA = "0x11227F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0x11227F4", Offset = "0x11227F4", VA = "0x11227F4")]
		public SM_CloudRot()
		{
		}
	}
	[Token(Token = "0x200035D")]
	public class RadialOceanSM : MonoBehaviour
	{
		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material oceanMaterial;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int oceanDetailx;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int oceanDetaily;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject RadialOcean;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float WaveHeightFactor;

		[Token(Token = "0x6002129")]
		[Address(RVA = "0xE53B98", Offset = "0xE53B98", VA = "0xE53B98")]
		private void Start()
		{
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0xE53B9C", Offset = "0xE53B9C", VA = "0xE53B9C")]
		public void CreateOcean()
		{
		}

		[Token(Token = "0x600212B")]
		[Address(RVA = "0xE54104", Offset = "0xE54104", VA = "0xE54104")]
		public RadialOceanSM()
		{
		}
	}
	[Token(Token = "0x200035E")]
	public class RecalcBOUNDS_SM : MonoBehaviour
	{
		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshFilter AA;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform this_transform;

		[Token(Token = "0x600212C")]
		[Address(RVA = "0xE5411C", Offset = "0xE5411C", VA = "0xE5411C")]
		private void Start()
		{
		}

		[Token(Token = "0x600212D")]
		[Address(RVA = "0xE541DC", Offset = "0xE541DC", VA = "0xE541DC")]
		private void Update()
		{
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0xE544A8", Offset = "0xE544A8", VA = "0xE544A8")]
		private void shiftMesh()
		{
		}

		[Token(Token = "0x600212F")]
		[Address(RVA = "0xE54500", Offset = "0xE54500", VA = "0xE54500")]
		public RecalcBOUNDS_SM()
		{
		}
	}
	[Token(Token = "0x200035F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D840C", Offset = "0x7D840C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D840C", Offset = "0x7D840C")]
	public class UnderWaterImageEffect : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x20004C2")]
		public enum BlurType
		{
			[Token(Token = "0x400236D")]
			DiscBlur,
			[Token(Token = "0x400236E")]
			DX11
		}

		[Token(Token = "0x20004C3")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4002370")]
			Low,
			[Token(Token = "0x4002371")]
			Medium,
			[Token(Token = "0x4002372")]
			High
		}

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool visualizeFocus;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float focalLength;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float focalSize;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float aperture;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform focalTransform;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxBlurSize;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool highResolution;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BlurType blurType;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool nearBlur;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float foregroundOverlap;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader dofHdrShader;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material dofHdrMaterial;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dx11BokehShader;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float dx11BokehThreshold;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehScale;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float focalDistance01;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float internalBlurWidth;

		[Token(Token = "0x6002130")]
		[Address(RVA = "0xAEBD8C", Offset = "0xAEBD8C", VA = "0xAEBD8C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0xAEBF44", Offset = "0xAEBF44", VA = "0xAEBF44")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0xAEBFBC", Offset = "0xAEBFBC", VA = "0xAEBFBC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002133")]
		[Address(RVA = "0xAEC0C4", Offset = "0xAEC0C4", VA = "0xAEC0C4")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0xAEBE20", Offset = "0xAEBE20", VA = "0xAEBE20")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0xAEC108", Offset = "0xAEC108", VA = "0xAEC108")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0xAEC2B4", Offset = "0xAEC2B4", VA = "0xAEC2B4")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x6002137")]
		[Address(RVA = "0xAEC5DC", Offset = "0xAEC5DC", VA = "0xAEC5DC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002138")]
		[Address(RVA = "0xAEDC38", Offset = "0xAEDC38", VA = "0xAEDC38")]
		public UnderWaterImageEffect()
		{
		}
	}
	[Token(Token = "0x2000360")]
	[ExecuteInEditMode]
	public class WaterHandlerSM : MonoBehaviour
	{
		[Token(Token = "0x20004C4")]
		public enum WaterPreset
		{
			[Token(Token = "0x4002374")]
			Custom,
			[Token(Token = "0x4002375")]
			Emerald,
			[Token(Token = "0x4002376")]
			Muddy,
			[Token(Token = "0x4002377")]
			Caribbean,
			[Token(Token = "0x4002378")]
			River,
			[Token(Token = "0x4002379")]
			Ocean,
			[Token(Token = "0x400237A")]
			DarkOcean,
			[Token(Token = "0x400237B")]
			FocusOcean,
			[Token(Token = "0x400237C")]
			SmallWaves,
			[Token(Token = "0x400237D")]
			Lake,
			[Token(Token = "0x400237E")]
			Atoll,
			[Token(Token = "0x400237F")]
			Mobile,
			[Token(Token = "0x4002380")]
			LitOcean
		}

		[Token(Token = "0x20004C5")]
		public enum UnderWaterPreset
		{
			[Token(Token = "0x4002382")]
			Custom,
			[Token(Token = "0x4002383")]
			Fancy,
			[Token(Token = "0x4002384")]
			Turbulent,
			[Token(Token = "0x4002385")]
			Calm
		}

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color FogTint;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useCloudGradFogTint;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float volumeFogDensityUnderwater;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float volumeFogDensityOverwater;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool toggledUnderwater;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float autoColorfogBrightness;

		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float underwaterFogDensity;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color underwaterFogColorShader;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color fogColorShaderDay;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color fogColorShaderDusk;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Color fogColorShaderDawn;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Color fogStormColorShader;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float fogDensity;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float fogBias;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float fogStartDistance;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float underwaterfogDensity;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float underwaterfogBias;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float underwaterfogStartDistance;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool UseSkyGradient;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float GradReflIntensity;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float GradTransp;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public WaterHeightSM heightController;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool UnderOnWave;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float TransYOffset;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool followCamera;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool DisableUnderwater;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float HeightSpecularCorrect;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float RefractOffset;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float BumpFocusOffset;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float FresnelOffset;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float FresnelBias;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Color ReflectColor;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool OverrideReflectColor;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float TerrainScale;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float ShoreWavesFade;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform TerrainDepthCamera;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public TerrainDepthSM DepthRenderController;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float FoamCutoff;

		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float FoamOffset;

		[Token(Token = "0x4001A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioSource SeaAudio;

		[Token(Token = "0x4001A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool DisableSeaAudio;

		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float maxAudioVolume;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float SoundFadeSpeed;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float ShoreBlendOffset;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float minShiftSpeed;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public Vector4 WaveAmpOffset;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public Vector4 WaveFreqOffset;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public Vector4 WaveSpeedOffset;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public Vector4 WaveDir1Offset;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public Vector4 WaveDir2Offset;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public float DepthColorOffset;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Vector4 ExtraWavesFactor;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Vector4 ExtraWavesFreqFactor;

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Vector4 ExtraWavesAmpFactor;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public Vector4 ExtraWavesDirFactor;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public Vector4 ExtraWavesSteepFactor;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public Projector CausticsProjector;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public Material CausticsMat;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public float CausticIntensity;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		public float CausticSize;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public WaterBaseSM WaterBase;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public float SunShaftsInt;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public float bumpTilingXoffset;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public float bumpTilingYoffset;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public float DepthFogSwitch;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public bool BelowWater;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public WaterPreset waterType;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public UnderWaterPreset underWaterType;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public Vector3 waterScaleFactor;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public Vector3 waterScaleOffset;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private bool prev_fog_setting;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private int prev_fog_mode;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		private float prev_fog_density;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public UnderWaterImageEffect UnderwaterBlur;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public UnderWaterImageEffect UnderwaterBlurL;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public UnderWaterImageEffect UnderwaterBlurR;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private Color prev_fog_color;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Vector2 PrevStartEndDist;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public Color Fog_Color;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public Material oceanMat;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public Color NightWaterColor;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public Color StormWaterColor;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public Color SnowStormWaterColor;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public Color DayWaterColor;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public Color DuskWaterColor;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public Color NightReflectColor;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public Color DayReflectColor;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public Color DuskReflectColor;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public Color DayRiverColor;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public Color DayRiverReflectColor;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public Color DayOceanColor;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public Color DayOceanReflectColor;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public Color DarkOceanColor;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public Color DarkOceanReflectColor;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public Color MuddyWaterColor;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public Color MuddyReflectColor;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public Color EmeraldWaterColor;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public Color EmeraldReflectColor;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public Color AtollWaterColor;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		public Color AtollReflectColor;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		public Color MobileWaterColor;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		public Color MobileReflectColor;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		public SpecularLightingSM SpecularSource;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		public Vector3 Water_start;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3FC")]
		public Vector2 Water_size;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		public SeasonalTerrainSKYMASTER TerrainManager;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		private Transform this_transf;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private Transform cam_transf;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		private int prev_preset;

		[Token(Token = "0x6002139")]
		[Address(RVA = "0xAFD768", Offset = "0xAFD768", VA = "0xAFD768")]
		private void Start()
		{
		}

		[Token(Token = "0x600213A")]
		[Address(RVA = "0xB05414", Offset = "0xB05414", VA = "0xB05414")]
		public void DisableColliders()
		{
		}

		[Token(Token = "0x600213B")]
		[Address(RVA = "0xB054D4", Offset = "0xB054D4", VA = "0xB054D4")]
		public void EnableColliders()
		{
		}

		[Token(Token = "0x600213C")]
		[Address(RVA = "0xAFDC64", Offset = "0xAFDC64", VA = "0xAFDC64")]
		public void UpdateWaterParams(bool Init)
		{
		}

		[Token(Token = "0x600213D")]
		[Address(RVA = "0xB05594", Offset = "0xB05594", VA = "0xB05594")]
		private void Update()
		{
		}

		[Token(Token = "0x600213E")]
		[Address(RVA = "0xB06DE4", Offset = "0xB06DE4", VA = "0xB06DE4")]
		public WaterHandlerSM()
		{
		}
	}
	[Token(Token = "0x2000361")]
	public class WaterHeightSM : MonoBehaviour
	{
		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UseLocalWaves;

		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LocalHeightAdjust;

		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LocalYCutoff;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LocalFreq;

		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LocalStartRadius;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool followCamera;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool followBoat;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool lerpFollow;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool constantFollow;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float lerpFollowSpeed;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Transform> ThrowObjects;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Vector3> ThrowObjectsWaterPos;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Vector3> ThrowObjectsStartPos;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Transform> WaterObjects;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Vector3> WaterObjectsWaterPos;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Vector3> WaterObjectsStartPos;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject ThrowItem;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float ThrowPower;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool ShiftHorPosition;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool LerpMotion;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float lerpSpeed;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float lerpRotSpeed;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float BoatSpeed;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float BoatRotSpeed;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool controlBoat;

		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform SampleCube;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Material WaterMaterial;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public WaterHandlerSM Waterhandler;

		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 start_pos;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector3 prev_pos;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float CurrentRot;

		[Token(Token = "0x600213F")]
		[Address(RVA = "0x9AD52C", Offset = "0x9AD52C", VA = "0x9AD52C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0x9AD618", Offset = "0x9AD618", VA = "0x9AD618")]
		private void Update()
		{
		}

		[Token(Token = "0x6002141")]
		[Address(RVA = "0x9AF654", Offset = "0x9AF654", VA = "0x9AF654")]
		public Vector3 GerstnerOffset(Vector2 Position, float PosY, Vector2 tileableVtx, Vector4 amplitude, Vector4 frequency, Vector4 steepness, Vector4 speed, Vector4 directionAB, Vector4 directionCD)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002142")]
		[Address(RVA = "0x9B011C", Offset = "0x9B011C", VA = "0x9B011C")]
		private Vector3 GerstnerOffset4(Vector2 xzVtx, Vector4 steepness, Vector4 amp, Vector4 freq, Vector4 speed, Vector4 dirAB, Vector4 dirCD)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002143")]
		[Address(RVA = "0x9B0660", Offset = "0x9B0660", VA = "0x9B0660")]
		public WaterHeightSM()
		{
		}
	}
	[Token(Token = "0x2000362")]
	public class SKYMASTER_DemoV31_FREEFALL : MonoBehaviour
	{
		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject DepthCue1;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject DepthCue2;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Sun_time_start;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool HUD_ON;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool set_sun_start;

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float Dome_rot;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float Camera_up;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float TOD;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float SPEED;

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private WaterHeightSM WaterHeightHandle;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private WaterHandlerSM WaterHandler;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int windowsON;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform windowsSpot;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform underwaterSpot;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform AtollViewSpot;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform oceanSpot;

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform boatSpot;

		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform boatSpot2;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Transform smokeSPOT;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject farOceanplane;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool offsetsON;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool colorsON;

		[Token(Token = "0x6002144")]
		[Address(RVA = "0xB2F290", Offset = "0xB2F290", VA = "0xB2F290")]
		private void Start()
		{
		}

		[Token(Token = "0x6002145")]
		[Address(RVA = "0xB2F440", Offset = "0xB2F440", VA = "0xB2F440")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002146")]
		[Address(RVA = "0xB2FEC4", Offset = "0xB2FEC4", VA = "0xB2FEC4")]
		public SKYMASTER_DemoV31_FREEFALL()
		{
		}
	}
	[Token(Token = "0x2000363")]
	public class SKYMASTER_DemoV33_MOBILE : MonoBehaviour
	{
		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool offsetsON;

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool colorsON;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Sun_time_start;

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HUD_ON;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool set_sun_start;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material CloudMat1;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material CloudMat2;

		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material CloudMat3;

		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material CloudMat4;

		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int cloud_mat_counter;

		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float Dome_rot;

		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float Camera_up;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float TOD;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float SPEED;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private WaterHeightSM WaterHeightHandle;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private WaterHandlerSM WaterHandler;

		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int windowsON;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform planeVIEW;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform backVIEW;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool inPlane;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Material SnowMat;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int sky_preset;

		[Token(Token = "0x6002147")]
		[Address(RVA = "0xB2FEE0", Offset = "0xB2FEE0", VA = "0xB2FEE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002148")]
		[Address(RVA = "0xB30090", Offset = "0xB30090", VA = "0xB30090")]
		private void Update()
		{
		}

		[Token(Token = "0x6002149")]
		[Address(RVA = "0xB301C4", Offset = "0xB301C4", VA = "0xB301C4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600214A")]
		[Address(RVA = "0xB3154C", Offset = "0xB3154C", VA = "0xB3154C")]
		public SKYMASTER_DemoV33_MOBILE()
		{
		}
	}
	[Token(Token = "0x2000364")]
	[ExecuteInEditMode]
	public class CloudHandlerSM : MonoBehaviour
	{
		[Token(Token = "0x20004C6")]
		public enum CloudPreset
		{
			[Token(Token = "0x4002387")]
			Custom,
			[Token(Token = "0x4002388")]
			ClearDay
		}

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool followPlayer;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool rotateWithCamera;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool rotateMultiQuadC;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float IntensityDiffOffset;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float IntensitySunOffset;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float IntensityFogOffset;

		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool EnableInsideClouds;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool FogFromSkyGrad;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[HideInInspector]
		public bool LerpRot;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve IntensityDiff;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve IntensityFog;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve IntensitySun;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool CurvesFromSkyMaster;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool DomeClouds;

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 DomeScale;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 DomeHeights;

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool MultiQuadClouds;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3 MultiQuadScale;

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 MultiQuadHeights;

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool MultiQuadAClouds;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 MultiQuadAScale;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 MultiQuadAHeights;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool MultiQuadBClouds;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 MultiQuadBScale;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Vector3 MultiQuadBHeights;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool MultiQuadCClouds;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector3 MultiQuadCScale;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Vector3 MultiQuadCHeights;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool OneQuadClouds;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Vector3 OneQuadScale;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public Vector3 OneQuadHeights;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform FlatBedSPlane;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Transform SideSPlane;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform SideASPlane;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Transform SideBSPlane;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Transform SideCSPlane;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Transform RotCloudsSPlane;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool WeatherDensity;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		public bool UseUnityFog;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float CloudEvolution;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float ClearDayCoverage;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float ClearDayHorizon;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float StormCoverage;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float StormHorizon;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Color StormSunColor;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float Coverage;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float Transp;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float Intensity;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float Horizon;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public CloudPreset cloudType;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public bool autoRainbow;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float rainbowApperSpeed;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool was_rain;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float was_rain_end_time;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float rainbowTime;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float rainboxMaxIntensity;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float rainboxMinIntensity;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Material rainbowMat;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Material cloudFlatMat;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Material cloudSidesMat;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Material cloudSidesAMat;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Material cloudSidesBMat;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public Material cloudSidesCMat;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public Material cloudRotMat;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public Transform FlatBedClouds;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public Transform SideClouds;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Transform SideAClouds;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public Transform SideBClouds;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public Transform SideCClouds;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public Transform RotClouds;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public GameObject LightningPrefab;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public bool EnableLightning;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public Color DayCloudColor;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public Color DayCloudShadowCol;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public Color DayCloudTintCol;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		public Color DayCloudFogCol;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		public float DayFogFactor;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public float DayIntensity;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		public Color DawnCloudColor;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		public Color DawnCloudShadowCol;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		public Color DawnCloudTintCol;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		public Color DawnCloudFogCol;

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		public float DawnFogFactor;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public float DawnIntensity;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		public Color DuskCloudColor;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		public Color DuskCloudShadowCol;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		public Color DuskCloudTintCol;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		public Color DuskCloudFogCol;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		public float DuskFogFactor;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public float DuskIntensity;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		public Color NightCloudColor;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		private int prev_preset;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public bool HasScatterShader;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E9")]
		public bool UpdateScatterShader;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		public float fog_depth;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public float reileigh;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		public float mieCoefficient;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public float mieDirectionalG;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
		public float ExposureBias;

		[Token(Token = "0x4001B1D")]
		private const float n = 1.0003f;

		[Token(Token = "0x4001B1E")]
		private const float N = 2.545E+25f;

		[Token(Token = "0x4001B1F")]
		private const float pn = 0.035f;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public Vector3 lambda;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
		public Vector3 K;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public float WindStrength;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		public float WindParallaxFactor;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public float CloudDensity;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public Transform LightningBox;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private float last_lightning_time;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		public float lightning_every;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public float max_lightning_time;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		public float lightning_rate_offset;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private Transform LightningOne;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private Transform LightningTwo;

		[Token(Token = "0x600214B")]
		[Address(RVA = "0xBE3938", Offset = "0xBE3938", VA = "0xBE3938")]
		private void Start()
		{
		}

		[Token(Token = "0x600214C")]
		[Address(RVA = "0xBE43F8", Offset = "0xBE43F8", VA = "0xBE43F8")]
		private void UpdateCloudParams(bool Init, Material oceanMat)
		{
		}

		[Token(Token = "0x600214D")]
		[Address(RVA = "0xBE5CC8", Offset = "0xBE5CC8", VA = "0xBE5CC8")]
		private void Update()
		{
		}

		[Token(Token = "0x600214E")]
		[Address(RVA = "0xBE5A9C", Offset = "0xBE5A9C", VA = "0xBE5A9C")]
		private static Vector3 totalRayleigh(Vector3 lambda)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600214F")]
		[Address(RVA = "0xBE5BA4", Offset = "0xBE5BA4", VA = "0xBE5BA4")]
		private static Vector3 totalMie(Vector3 lambda, Vector3 K, float T)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002150")]
		[Address(RVA = "0xBE7E7C", Offset = "0xBE7E7C", VA = "0xBE7E7C")]
		public CloudHandlerSM()
		{
		}
	}
	[Token(Token = "0x2000365")]
	public class SKYMASTER_DemoV34 : MonoBehaviour
	{
		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Volcano;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject Caustics;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float min_height;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool cloudPresets;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool EnablecloudPresets;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D cloudsAPic0;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture2D cloudsAPic1;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture2D cloudsAPic2;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D cloudsAPic3;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Texture2D cloudsAPic4;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture2D cloudsBPic0;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D cloudsBPic1;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture2D cloudsBPic2;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject Terra1;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Material DropletsMat;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject Abomb;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float last_bomb_time;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject Rain2;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject Bats;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject Leaves;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject Floor;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject Floor_stripes;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject Floor_collider;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool Special_effects;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool Rain2_on;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		private bool Leaves_on;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		private bool Bats_on;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Transform PointLights;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform PointLightsCin;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Transform Camera1;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Transform Camera2;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Flare FlareTexture;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public CloudHandlerSM CloudHandler;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Transform TinyPlanet;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform Pillars;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float Sun_time_start;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public GameObject SUNMASTERA;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public GameObject SUNMASTERB;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public SkyMasterManager SUNMASTERAH;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public SkyMasterManager SUNMASTERBH;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool HUD_ON;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		private bool set_sun_start;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float Dome_rot;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float Camera_up;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float TOD;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float SPEED;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private WaterHeightSM WaterHeightHandle;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private WaterHandlerSM WaterHandler;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int windowsON;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Transform windowsSpot;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform underwaterSpot;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Transform AtollViewSpot;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Transform oceanSpot;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Transform boatSpot;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Transform boatSpot2;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Transform smokeSPOT;

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public GameObject farOceanplane;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private bool offsetsON;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B1")]
		private bool colorsON;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public GameObject ParticleClouds;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public GameObject ParticleCloudsA;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public GameObject ParticleCloudsB;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public GameObject skyA;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public GameObject skyB;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private int VolCloud;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private bool made_once;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		private bool made_onceB;

		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private int activeSky;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private int prevSky;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private bool CinemaLook;

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
		private bool Freezeme;

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private GlobalFogSkyMaster Fog;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private int limitRef;

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float prev_ambient;

		[Token(Token = "0x6002151")]
		[Address(RVA = "0xB31570", Offset = "0xB31570", VA = "0xB31570")]
		private void ApplyType0Scatter()
		{
		}

		[Token(Token = "0x6002152")]
		[Address(RVA = "0xB316FC", Offset = "0xB316FC", VA = "0xB316FC")]
		private void ApplyType0Default()
		{
		}

		[Token(Token = "0x6002153")]
		[Address(RVA = "0xB3188C", Offset = "0xB3188C", VA = "0xB3188C")]
		private void ApplyType0Default1()
		{
		}

		[Token(Token = "0x6002154")]
		[Address(RVA = "0xB31A20", Offset = "0xB31A20", VA = "0xB31A20")]
		private void ApplyType0Default2()
		{
		}

		[Token(Token = "0x6002155")]
		[Address(RVA = "0xB31BB0", Offset = "0xB31BB0", VA = "0xB31BB0")]
		private void ApplyType0Default3()
		{
		}

		[Token(Token = "0x6002156")]
		[Address(RVA = "0xB31D40", Offset = "0xB31D40", VA = "0xB31D40")]
		private void ApplyType0Default4()
		{
		}

		[Token(Token = "0x6002157")]
		[Address(RVA = "0xB31ED8", Offset = "0xB31ED8", VA = "0xB31ED8")]
		private void ApplyType1Default()
		{
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0xB32084", Offset = "0xB32084", VA = "0xB32084")]
		private void ApplyType1Default1()
		{
		}

		[Token(Token = "0x6002159")]
		[Address(RVA = "0xB32230", Offset = "0xB32230", VA = "0xB32230")]
		private void ApplyType1Default2()
		{
		}

		[Token(Token = "0x600215A")]
		[Address(RVA = "0xB32408", Offset = "0xB32408", VA = "0xB32408")]
		private void ApplyType1Default3()
		{
		}

		[Token(Token = "0x600215B")]
		[Address(RVA = "0xB3240C", Offset = "0xB3240C", VA = "0xB3240C")]
		private void Disable_all()
		{
		}

		[Token(Token = "0x600215C")]
		[Address(RVA = "0xB324AC", Offset = "0xB324AC", VA = "0xB324AC")]
		private void Start()
		{
		}

		[Token(Token = "0x600215D")]
		[Address(RVA = "0xB326C0", Offset = "0xB326C0", VA = "0xB326C0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600215E")]
		[Address(RVA = "0xB38C24", Offset = "0xB38C24", VA = "0xB38C24")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600215F")]
		[Address(RVA = "0xB38C8C", Offset = "0xB38C8C", VA = "0xB38C8C")]
		public SKYMASTER_DemoV34()
		{
		}
	}
	[Token(Token = "0x2000366")]
	[ExecuteInEditMode]
	public class AtmosphericScatteringDeferredSkyMaster : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Shader deferredFogShader;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material m_fogMaterial;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D FractalTex;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float TextureAmount;

		[Token(Token = "0x6002160")]
		[Address(RVA = "0x1054E1C", Offset = "0x1054E1C", VA = "0x1054E1C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002161")]
		[Address(RVA = "0x1054F00", Offset = "0x1054F00", VA = "0x1054F00")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002162")]
		[Address(RVA = "0x10555D4", Offset = "0x10555D4", VA = "0x10555D4")]
		private static void CustomGraphicsBlit(RenderTexture src, RenderTexture dst, Material mat, int pass, Texture2D FractalTex, float TextureAmount)
		{
		}

		[Token(Token = "0x6002163")]
		[Address(RVA = "0x1055788", Offset = "0x1055788", VA = "0x1055788")]
		public AtmosphericScatteringDeferredSkyMaster()
		{
		}
	}
	[Token(Token = "0x2000367")]
	[ExecuteInEditMode]
	public class AtmosphericScatteringSkyMaster : MonoBehaviour
	{
		[Token(Token = "0x20004C7")]
		public enum OcclusionDownscale
		{
			[Token(Token = "0x400238A")]
			x1 = 1,
			[Token(Token = "0x400238B")]
			x2 = 2,
			[Token(Token = "0x400238C")]
			x4 = 4
		}

		[Token(Token = "0x20004C8")]
		public enum OcclusionSamples
		{
			[Token(Token = "0x400238E")]
			x64,
			[Token(Token = "0x400238F")]
			x164,
			[Token(Token = "0x4002390")]
			x244
		}

		[Token(Token = "0x20004C9")]
		public enum ScatterDebugMode
		{
			[Token(Token = "0x4002392")]
			None,
			[Token(Token = "0x4002393")]
			Scattering,
			[Token(Token = "0x4002394")]
			Occlusion,
			[Token(Token = "0x4002395")]
			OccludedScattering,
			[Token(Token = "0x4002396")]
			Rayleigh,
			[Token(Token = "0x4002397")]
			Mie,
			[Token(Token = "0x4002398")]
			Height
		}

		[Token(Token = "0x20004CA")]
		public enum DepthTexture
		{
			[Token(Token = "0x400239A")]
			Enable,
			[Token(Token = "0x400239B")]
			Disable,
			[Token(Token = "0x400239C")]
			Ignore
		}

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DFBC4", Offset = "0x7DFBC4")]
		public Gradient worldRayleighColorRamp;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject Sun;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool FogSky;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float FogHorizonLower;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float worldRayleighColorIntensity;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float worldRayleighDensity;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float worldRayleighExtinctionFactor;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float worldRayleighIndirectScatter;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Gradient worldMieColorRamp;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float worldMieColorIntensity;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float worldMieDensity;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float worldMieExtinctionFactor;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float worldMiePhaseAnisotropy;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float worldNearScatterPush;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float worldNormalDistance;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DFBFC", Offset = "0x7DFBFC")]
		public Color heightRayleighColor;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float heightRayleighIntensity;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float heightRayleighDensity;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float heightMieDensity;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float heightExtinctionFactor;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float heightSeaLevel;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float heightDistance;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Vector3 heightPlaneShift;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float heightNearScatterPush;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float heightNormalDistance;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DFC34", Offset = "0x7DFC34")]
		public Vector3 skyDomeScale;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 skyDomeRotation;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform skyDomeTrackedYawRotation;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool skyDomeVerticalFlip;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Cubemap skyDomeCube;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float skyDomeExposure;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Color skyDomeTint;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[HideInInspector]
		public Vector3 skyDomeOffset;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DFC7C", Offset = "0x7DFC7C")]
		public bool useOcclusion;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float occlusionBias;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float occlusionBiasIndirect;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float occlusionBiasClouds;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public OcclusionDownscale occlusionDownscale;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public OcclusionSamples occlusionSamples;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool occlusionDepthFixup;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float occlusionDepthThreshold;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public bool occlusionFullSky;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float occlusionBiasSkyRayleigh;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float occlusionBiasSkyMie;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float backLightDepth;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float backLightIntensity;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7DFCB4", Offset = "0x7DFCB4")]
		public float worldScaleExponent;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public bool forcePerPixel;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		public bool forcePostEffect;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DFCEC", Offset = "0x7DFCEC")]
		public DepthTexture depthTexture;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public ScatterDebugMode debugMode;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		public Shader occlusionShader;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool m_isAwake;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Camera m_currentCamera;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Material m_occlusionMaterial;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private CommandBuffer m_occlusionCmdAfterShadows;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private CommandBuffer m_occlusionCmdBeforeScreen;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DFD34", Offset = "0x7DFD34")]
		private static AtmosphericScatteringSkyMaster <instance>k__BackingField;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool gameStart;

		[Token(Token = "0x1700031E")]
		public static AtmosphericScatteringSkyMaster instance
		{
			[Token(Token = "0x6002164")]
			[Address(RVA = "0x1055790", Offset = "0x1055790", VA = "0x1055790")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2FC0", Offset = "0x7E2FC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002165")]
			[Address(RVA = "0x10557E0", Offset = "0x10557E0", VA = "0x10557E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E2FD0", Offset = "0x7E2FD0")]
			private set
			{
			}
		}

		[Token(Token = "0x6002166")]
		[Address(RVA = "0x1055834", Offset = "0x1055834", VA = "0x1055834")]
		private void Start()
		{
		}

		[Token(Token = "0x6002167")]
		[Address(RVA = "0x1055F78", Offset = "0x1055F78", VA = "0x1055F78")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002168")]
		[Address(RVA = "0x105667C", Offset = "0x105667C", VA = "0x105667C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0x1057358", Offset = "0x1057358", VA = "0x1057358")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600216A")]
		[Address(RVA = "0x1056838", Offset = "0x1056838", VA = "0x1056838")]
		private void EnsureHookedLightSource(Light light)
		{
		}

		[Token(Token = "0x600216B")]
		[Address(RVA = "0x1057D0C", Offset = "0x1057D0C", VA = "0x1057D0C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600216C")]
		[Address(RVA = "0x105751C", Offset = "0x105751C", VA = "0x105751C")]
		private void UpdateKeywords(bool enable)
		{
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0x1058080", Offset = "0x1058080", VA = "0x1058080")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x600216E")]
		[Address(RVA = "0x1055840", Offset = "0x1055840", VA = "0x1055840")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x600216F")]
		[Address(RVA = "0x1058360", Offset = "0x1058360", VA = "0x1058360")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x6002170")]
		[Address(RVA = "0x1057520", Offset = "0x1057520", VA = "0x1057520")]
		private void UpdateStaticUniforms()
		{
		}

		[Token(Token = "0x6002171")]
		[Address(RVA = "0x10569F8", Offset = "0x10569F8", VA = "0x10569F8")]
		private void UpdateDynamicUniforms()
		{
		}

		[Token(Token = "0x6002172")]
		[Address(RVA = "0x10583F4", Offset = "0x10583F4", VA = "0x10583F4")]
		public AtmosphericScatteringSkyMaster()
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class SKYMASTER_DemoV34WEBGL : MonoBehaviour
	{
		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Sun_time_start;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject SKYMASTER_OBJ;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SkyMasterManager SUNMASTER;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HUD_ON;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool set_sun_start;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float Dome_rot;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float Camera_up;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float TOD;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float SPEED;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private WaterHeightSM WaterHeightHandle;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterHandlerSM WaterHandler;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int windowsON;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform windowsSpot;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform underwaterSpot;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform AtollViewSpot;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform oceanSpot;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform boatSpot;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform boatSpot2;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform smokeSPOT;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject farOceanplane;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool offsetsON;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool colorsON;

		[Token(Token = "0x6002173")]
		[Address(RVA = "0xB38CB8", Offset = "0xB38CB8", VA = "0xB38CB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002174")]
		[Address(RVA = "0xB38E68", Offset = "0xB38E68", VA = "0xB38E68")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002175")]
		[Address(RVA = "0xB3A964", Offset = "0xB3A964", VA = "0xB3A964")]
		public SKYMASTER_DemoV34WEBGL()
		{
		}
	}
	[Token(Token = "0x2000369")]
	public class ChainLightningShuriken_SM : MonoBehaviour
	{
		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject[] target1;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int zigs;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speed;

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float scale;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light startLight;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Light endLight;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PerlinSKYMASTER noise;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float oneOverZigs;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem Emitter;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool Energized;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool is_parent;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int current_depth;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int max_depth;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int current_target_count;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int max_target_count;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool Random_target;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float Affect_dist;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float Time_count;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float Change_target_delay;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float Particle_energy;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int optimize_factor;

		[Token(Token = "0x6002176")]
		[Address(RVA = "0xBDFC08", Offset = "0xBDFC08", VA = "0xBDFC08")]
		private void Start()
		{
		}

		[Token(Token = "0x6002177")]
		[Address(RVA = "0xBDFD98", Offset = "0xBDFD98", VA = "0xBDFD98")]
		private void Update()
		{
		}

		[Token(Token = "0x6002178")]
		[Address(RVA = "0xBE0A90", Offset = "0xBE0A90", VA = "0xBE0A90")]
		public ChainLightningShuriken_SM()
		{
		}
	}
	[Token(Token = "0x200036A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D84E4", Offset = "0x7D84E4")]
	public class FullVolumeCloudsSkyMaster : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float cameraFarDistanceAdjust;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool adjustNightLigting;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float backShadeNight;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float turbidityNight;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float extinctionNight;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float shift_dawn;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float shift_dusk;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 groundColorNight;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float scatterNight;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float reflectFogHeight;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool isForReflections;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool windByWindZone;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool windByWeather;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float windSunny;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float windCloudy;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float windStorm;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float downscaleReflectNoiseSteps;

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool adjustNightTimeSun;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float varianceAltitude1;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useWeather;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public SkyMasterManager.Volume_Weather_types prevWeather;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool weatherTransition;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float weatherTransTimeStart;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float weatherTransitionDuration;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float sunnyDensity;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float cloudyDensity;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float stormyDensity;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float weatherTransitionSpeed;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool heavyStorm;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float localLightFalloffP;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float localLightIntensityP;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float sinSizeP;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float backShadeP;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float underSideP;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool unity2018;

		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DFD44", Offset = "0x7DFD44")]
		public bool distanceFog;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DFD7C", Offset = "0x7DFD7C")]
		public bool useRadialDistance;

		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA7")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DFDB4", Offset = "0x7DFDB4")]
		public bool heightFog;

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DFDEC", Offset = "0x7DFDEC")]
		public float height;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DFE24", Offset = "0x7DFE24")]
		public float heightDensity;

		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7DFE40", Offset = "0x7DFE40")]
		public float startDistance;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float _mobileFactor;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float _alphaFactor;

		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float _HorizonZAdjust;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool updateReflectionCamera;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool updateReflectionCameraLocalLights;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool updateShadows;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Material cloudsShadowMat;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool adaptLocalToLightning;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		public bool useFluidTexture;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Material fluidFlow;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool WebGL;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		public bool blendBackground;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Camera backgroundCam;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Material backgroundMat;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool fastest;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Light localLight;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float localLightFalloff;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float localLightIntensity;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float currentLocalLightIntensity;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Texture2D _InteractTexture;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Vector4 _InteractTexturePos;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Vector4 _InteractTextureAtr;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Vector4 _InteractTextureOffset;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float _NearZCutoff;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float _HorizonYAdjust;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float _FadeThreshold;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public Texture3D texture3Dnoise1;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public Texture3D texture3Dnoise2;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float _SampleCount0;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float _SampleCount1;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public int _SampleCountL;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float _NoiseFreq1;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float _NoiseFreq2;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public float _NoiseAmp1;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public float _NoiseAmp2;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float _NoiseBias;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public float windMultiply;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public Vector3 _Scroll1;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Vector3 _Scroll2;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float _Altitude0;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float _Altitude1;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float _FarDist;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float _FarDistNight;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public float _FarDistDay;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public float _Scatter;

		[Token(Token = "0x4001C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public float _HGCoeff;

		[Token(Token = "0x4001C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public float _Extinct;

		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float _Exposure;

		[Token(Token = "0x4001C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public float _ExposureUnder;

		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public Vector3 _GroundColor;

		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public float _SunSize;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public Vector3 _SkyTint;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public float _AtmosphereThickness;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		public float _BackShade;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public float _UndersideCurveFactor;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public Gradient DistGradient;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public Vector2 GradientBounds;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public float luminance;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public float lumFac;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public float ScatterFac;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public float TurbFac;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public float HorizFac;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		public float turbidity;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public float reileigh;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		public float mieCoefficient;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public float mieDirectionalG;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		public float bias;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public float contrast;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public Transform Sun;

		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public bool FogSky;

		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		public Vector3 TintColor;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public float ClearSkyFac;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public Shader fogShader;

		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Material fogMaterial;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private Texture2D colourPalette;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private bool Made_texture;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x281")]
		public bool useTOD;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x282")]
		public bool tintUnder;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		public Vector3 colorMultiplier;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public Vector3 UnderColorMultiplier;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		public bool adjustNightTimeDensity;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29D")]
		public bool followPlayer;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public Transform Galaxy;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public Transform ShadowLayer;

		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public GameObject shadowDome;

		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public GameObject backCamPrefab;

		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public GameObject shadowDomePrefab;

		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public GameObject LightningBoxPrefab;

		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public bool setupDepth;

		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D1")]
		public bool setupShadows;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D2")]
		public bool setupLightning;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public FullVolumeCloudsSkyMaster reflectClouds;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public GameObject LightningPrefab;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public bool EnableLightning;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E9")]
		public bool useLocalLightLightn;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		private float last_lightning_time;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public float lightning_every;

		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		public float max_lightning_time;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public float lightning_rate_offset;

		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private Transform LightningOne;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private Transform LightningTwo;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public Transform LightningBox;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private Light LightA;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private Light LightB;

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private bool init_values;

		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		public int gradientResolution;

		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private Color[] colourArray;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private CameraClearFlags previousFlag;

		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private Camera cam;

		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private int toggleCounter;

		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		public int splitPerFrames;

		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public bool cameraMotionCompensate;

		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private RenderTexture tmpBuffer;

		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public float updateRate;

		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x364")]
		public int resolution;

		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public int downScaleFactor;

		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		public bool downScale;

		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private RenderTexture _cloudBuffer;

		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		private RenderTexture _cloudBufferP;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		private RenderTexture _cloudBufferP1;

		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public bool _needsReset;

		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		private Vector3 prevCameraRot;

		[Token(Token = "0x4001C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private Vector3 prevCameraRotP;

		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private RenderTexture new1;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private int countCameraSteady;

		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B4")]
		public bool enableReproject;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B5")]
		public bool autoReproject;

		[Token(Token = "0x6002179")]
		[Address(RVA = "0xBEF9D0", Offset = "0xBEF9D0", VA = "0xBEF9D0")]
		private void Start1()
		{
		}

		[Token(Token = "0x600217A")]
		[Address(RVA = "0xBDC6E0", Offset = "0xBDC6E0", VA = "0xBDC6E0")]
		public void initVariablesScatter()
		{
		}

		[Token(Token = "0x600217B")]
		[Address(RVA = "0xBDC8AC", Offset = "0xBDC8AC", VA = "0xBDC8AC")]
		public void initVariablesA()
		{
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0xBDD7E8", Offset = "0xBDD7E8", VA = "0xBDD7E8")]
		public void createDepthSetup()
		{
		}

		[Token(Token = "0x600217D")]
		[Address(RVA = "0xBDD3D0", Offset = "0xBDD3D0", VA = "0xBDD3D0")]
		public void createShadowDome()
		{
		}

		[Token(Token = "0x600217E")]
		[Address(RVA = "0xBDDE70", Offset = "0xBDDE70", VA = "0xBDDE70")]
		public void createLightningBox()
		{
		}

		[Token(Token = "0x600217F")]
		[Address(RVA = "0xBDD490", Offset = "0xBDD490", VA = "0xBDD490")]
		public void shadowsUpdate()
		{
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0xBDCAD8", Offset = "0xBDCAD8", VA = "0xBDCAD8")]
		public void updateReflections()
		{
		}

		[Token(Token = "0x6002181")]
		[Address(RVA = "0xBEF9F0", Offset = "0xBEF9F0", VA = "0xBEF9F0")]
		public void LightningUpdate()
		{
		}

		[Token(Token = "0x6002182")]
		[Address(RVA = "0xBF00EC", Offset = "0xBF00EC", VA = "0xBF00EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002183")]
		[Address(RVA = "0xBF0D80", Offset = "0xBF0D80", VA = "0xBF0D80")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002184")]
		[Address(RVA = "0xBF0F80", Offset = "0xBF0F80", VA = "0xBF0F80", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002185")]
		[Address(RVA = "0xBF0FE8", Offset = "0xBF0FE8", VA = "0xBF0FE8")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6002186")]
		[Address(RVA = "0xBF10BC", Offset = "0xBF10BC", VA = "0xBF10BC")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0xBF1138", Offset = "0xBF1138", VA = "0xBF1138")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0xBF3C5C", Offset = "0xBF3C5C", VA = "0xBF3C5C")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr, Gradient DistGradient, Vector2 GradientBounds, Texture2D colourPalette, Texture3D tex3D1, Texture3D tex3D2, Camera cam, bool WebGL)
		{
		}

		[Token(Token = "0x6002189")]
		[Address(RVA = "0xBF4C7C", Offset = "0xBF4C7C", VA = "0xBF4C7C")]
		private RenderTexture CreateBuffer()
		{
			return null;
		}

		[Token(Token = "0x600218A")]
		[Address(RVA = "0xBF4D24", Offset = "0xBF4D24", VA = "0xBF4D24")]
		private void ResetResources()
		{
		}

		[Token(Token = "0x600218B")]
		[Address(RVA = "0xBF4EF8", Offset = "0xBF4EF8", VA = "0xBF4EF8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600218C")]
		[Address(RVA = "0xBF4F08", Offset = "0xBF4F08", VA = "0xBF4F08")]
		private void Reset()
		{
		}

		[Token(Token = "0x600218D")]
		[Address(RVA = "0xBF40EC", Offset = "0xBF40EC", VA = "0xBF40EC")]
		private void CustomGraphicsBlitOpt(RenderTexture source, RenderTexture dest, RenderTexture skysource, Material fxMaterial, int passNr, Gradient DistGradient, Vector2 GradientBounds, Texture2D colourPalette, Texture3D tex3D1, Texture3D tex3D2, Camera cam, bool toggle, bool splitPerFrame, bool WebGL)
		{
		}

		[Token(Token = "0x600218E")]
		[Address(RVA = "0xBF4F14", Offset = "0xBF4F14", VA = "0xBF4F14")]
		public FullVolumeCloudsSkyMaster()
		{
		}
	}
	[Token(Token = "0x200036B")]
	[ExecuteInEditMode]
	public class InfiniCLOUD : MonoBehaviour
	{
		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullVolumeCloudsSkyMaster CloudsScript;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseTabs;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int currentTab;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WaterHandlerSM WaterManager;

		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool Clouds_folder;

		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool Shadows_folder;

		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool Reflections_folder;

		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public bool Backlayer_folder;

		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool Lightning_folder;

		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool LocalLight_folder;

		[Token(Token = "0x600218F")]
		[Address(RVA = "0xE3FEF4", Offset = "0xE3FEF4", VA = "0xE3FEF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002190")]
		[Address(RVA = "0xE3FEF8", Offset = "0xE3FEF8", VA = "0xE3FEF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002191")]
		[Address(RVA = "0xE3FEFC", Offset = "0xE3FEFC", VA = "0xE3FEFC")]
		public InfiniCLOUD()
		{
		}
	}
	[Token(Token = "0x200036C")]
	public class TimerSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SkyMasterManager skyManager;

		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool realWorldTime;

		[Token(Token = "0x4001C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool staticReference;

		[Token(Token = "0x4001C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool startWithRealTime;

		[Token(Token = "0x4001C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int startYear;

		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int startMonth;

		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int startDay;

		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int startHour;

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float shiftTime;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool enableGUI;

		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DateTime startGameTime;

		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DateTime startRealTime;

		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private DateTime currentGameTime;

		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private DateTime currentRealTime;

		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool startedWithRealTime;

		[Token(Token = "0x6002192")]
		[Address(RVA = "0xAE98C8", Offset = "0xAE98C8", VA = "0xAE98C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0xAE9AF0", Offset = "0xAE9AF0", VA = "0xAE9AF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002194")]
		[Address(RVA = "0xAE9F04", Offset = "0xAE9F04", VA = "0xAE9F04")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0xAEA050", Offset = "0xAEA050", VA = "0xAEA050")]
		public TimerSKYMASTER()
		{
		}
	}
	[Token(Token = "0x200036D")]
	public class WeatherRandomizerSKYMASTER : MonoBehaviour
	{
		[Token(Token = "0x4001CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SkyMasterManager skyManager;

		[Token(Token = "0x4001CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaterHandlerSM waterManager;

		[Token(Token = "0x4001CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool enableGUI;

		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool affectWater;

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool affectFog;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool affectFogParams;

		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float change_time;

		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float changeWeatherInterval;

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string currentWeather;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float cloudDensityChangeSpeed;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int weatherChoice;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float prevFresnelBias;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float prevShoreBlendOffset;

		[Token(Token = "0x6002196")]
		[Address(RVA = "0x9B2BD8", Offset = "0x9B2BD8", VA = "0x9B2BD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0x9B2CB4", Offset = "0x9B2CB4", VA = "0x9B2CB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0x9B387C", Offset = "0x9B387C", VA = "0x9B387C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002199")]
		[Address(RVA = "0x9B39C0", Offset = "0x9B39C0", VA = "0x9B39C0")]
		public WeatherRandomizerSKYMASTER()
		{
		}
	}
	[Token(Token = "0x200036E")]
	public abstract class EffectBase : MonoBehaviour
	{
		[Token(Token = "0x600219A")]
		public void EnsureArray<T>(ref T[] array, int size, [Optional] T initialValue)
		{
		}

		[Token(Token = "0x600219B")]
		public void EnsureArray<T>(ref T[,] array, int size0, int size1, [Optional] T defaultValue)
		{
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0xBED5F0", Offset = "0xBED5F0", VA = "0xBED5F0")]
		public void EnsureMaterial(ref Material material, Shader shader)
		{
		}

		[Token(Token = "0x600219D")]
		[Address(RVA = "0xBED7A8", Offset = "0xBED7A8", VA = "0xBED7A8")]
		public void EnsureDepthTexture(Camera camera)
		{
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0xBED804", Offset = "0xBED804", VA = "0xBED804")]
		public void EnsureKeyword(Material material, string name, bool enabled)
		{
		}

		[Token(Token = "0x600219F")]
		[Address(RVA = "0xBED884", Offset = "0xBED884", VA = "0xBED884")]
		public bool EnsureRenderTarget(ref RenderTexture rt, int width, int height, RenderTextureFormat format, FilterMode filterMode, int depthBits = 0, int antiAliasing = 1)
		{
			return default(bool);
		}

		[Token(Token = "0x60021A0")]
		[Address(RVA = "0xBEDA50", Offset = "0xBEDA50", VA = "0xBEDA50")]
		public void ReleaseRenderTarget(ref RenderTexture rt)
		{
		}

		[Token(Token = "0x60021A1")]
		[Address(RVA = "0xBEDAD8", Offset = "0xBEDAD8", VA = "0xBEDAD8")]
		public void DrawFullscreenQuad()
		{
		}

		[Token(Token = "0x60021A2")]
		[Address(RVA = "0xBEDBBC", Offset = "0xBEDBBC", VA = "0xBEDBBC")]
		protected EffectBase()
		{
		}
	}
	[Token(Token = "0x200036F")]
	public static class Vector2Extension
	{
		[Token(Token = "0x60021A3")]
		[Address(RVA = "0xAEDC9C", Offset = "0xAEDC9C", VA = "0xAEDC9C")]
		public static float SignedAngle(this Vector2 v1, Vector2 v2)
		{
			return default(float);
		}

		[Token(Token = "0x60021A4")]
		[Address(RVA = "0xAEDDEC", Offset = "0xAEDDEC", VA = "0xAEDDEC")]
		public static Vector2 Rotate(this Vector2 v, float theta)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x2000370")]
	public static class Vector3Extension
	{
		[Token(Token = "0x60021A5")]
		[Address(RVA = "0xAEDEA4", Offset = "0xAEDEA4", VA = "0xAEDEA4")]
		public static Vector3 WithX(this Vector3 v, float x)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60021A6")]
		[Address(RVA = "0xAEDEDC", Offset = "0xAEDEDC", VA = "0xAEDEDC")]
		public static Vector3 WithY(this Vector3 v, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60021A7")]
		[Address(RVA = "0xAEDF14", Offset = "0xAEDF14", VA = "0xAEDF14")]
		public static Vector3 WithZ(this Vector3 v, float z)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000371")]
	public static class Matrix4x4Extension
	{
		[Token(Token = "0x60021A8")]
		[Address(RVA = "0xE41CB0", Offset = "0xE41CB0", VA = "0xE41CB0")]
		public static Matrix4x4 GetPerspectiveProjection(float left, float right, float bottom, float top, float near, float far)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60021A9")]
		[Address(RVA = "0xE41EC4", Offset = "0xE41EC4", VA = "0xE41EC4")]
		public static Matrix4x4 GetOrthographicProjection(float left, float right, float bottom, float top, float near, float far)
		{
			return default(Matrix4x4);
		}
	}
	[Token(Token = "0x2000372")]
	public static class CameraExtension
	{
		[Token(Token = "0x60021AA")]
		[Address(RVA = "0xBDF608", Offset = "0xBDF608", VA = "0xBDF608")]
		public static Vector4 GetProjectionExtents(this Camera camera)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0xBDF614", Offset = "0xBDF614", VA = "0xBDF614")]
		public static Vector4 GetProjectionExtents(this Camera camera, float texelOffsetX, float texelOffsetY)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60021AC")]
		[Address(RVA = "0xBDF7C0", Offset = "0xBDF7C0", VA = "0xBDF7C0")]
		public static Vector4 GetProjectionExtents(this Camera camera, Camera.StereoscopicEye eye)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60021AD")]
		[Address(RVA = "0xBDF7CC", Offset = "0xBDF7CC", VA = "0xBDF7CC")]
		public static Vector4 GetProjectionExtents(this Camera camera, Camera.StereoscopicEye eye, float texelOffsetX, float texelOffsetY)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60021AE")]
		[Address(RVA = "0xBDFA40", Offset = "0xBDFA40", VA = "0xBDFA40")]
		public static Matrix4x4 GetProjectionMatrix(this Camera camera)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0xBDFA4C", Offset = "0xBDFA4C", VA = "0xBDFA4C")]
		public static Matrix4x4 GetProjectionMatrix(this Camera camera, float texelOffsetX, float texelOffsetY)
		{
			return default(Matrix4x4);
		}
	}
	[Token(Token = "0x2000373")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D8598", Offset = "0x7D8598")]
	public class FrustumJitter : MonoBehaviour
	{
		[Token(Token = "0x20004CB")]
		public enum Pattern
		{
			[Token(Token = "0x400239E")]
			Still,
			[Token(Token = "0x400239F")]
			Uniform2,
			[Token(Token = "0x40023A0")]
			Uniform4,
			[Token(Token = "0x40023A1")]
			Uniform4_Helix,
			[Token(Token = "0x40023A2")]
			Uniform4_DoubleHelix,
			[Token(Token = "0x40023A3")]
			SkewButterfly,
			[Token(Token = "0x40023A4")]
			Rotated4,
			[Token(Token = "0x40023A5")]
			Rotated4_Helix,
			[Token(Token = "0x40023A6")]
			Rotated4_Helix2,
			[Token(Token = "0x40023A7")]
			Poisson10,
			[Token(Token = "0x40023A8")]
			Pentagram,
			[Token(Token = "0x40023A9")]
			Halton_2_3_X8,
			[Token(Token = "0x40023AA")]
			Halton_2_3_X16,
			[Token(Token = "0x40023AB")]
			Halton_2_3_X32,
			[Token(Token = "0x40023AC")]
			Halton_2_3_X256,
			[Token(Token = "0x40023AD")]
			MotionPerp2
		}

		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float[] points_Still;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float[] points_Uniform2;

		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static float[] points_Uniform4;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static float[] points_Uniform4_Helix;

		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float[] points_Uniform4_DoubleHelix;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static float[] points_SkewButterfly;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static float[] points_Rotated4;

		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static float[] points_Rotated4_Helix;

		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static float[] points_Rotated4_Helix2;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static float[] points_Poisson10;

		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static float[] points_Pentagram;

		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static float[] points_Halton_2_3_x8;

		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static float[] points_Halton_2_3_x16;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static float[] points_Halton_2_3_x32;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static float[] points_Halton_2_3_x256;

		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static float[] points_MotionPerp2;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera _camera;

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 focalMotionPos;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 focalMotionDir;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Pattern pattern;

		[Token(Token = "0x4001CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float patternScale;

		[Token(Token = "0x4001CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector4 activeSample;

		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int activeIndex;

		[Token(Token = "0x60021B0")]
		[Address(RVA = "0xBEE6C0", Offset = "0xBEE6C0", VA = "0xBEE6C0")]
		private static void TransformPattern(float[] seq, float theta, float scale)
		{
		}

		[Token(Token = "0x60021B1")]
		[Address(RVA = "0xBEE7E8", Offset = "0xBEE7E8", VA = "0xBEE7E8")]
		private static float HaltonSeq(int prime, int index = 1)
		{
			return default(float);
		}

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0xBEE8B0", Offset = "0xBEE8B0", VA = "0xBEE8B0")]
		private static void InitializeHalton_2_3(float[] seq)
		{
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0xBEE9CC", Offset = "0xBEE9CC", VA = "0xBEE9CC")]
		static FrustumJitter()
		{
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0xBEEE14", Offset = "0xBEEE14", VA = "0xBEEE14")]
		private static float[] AccessPointData(Pattern pattern)
		{
			return null;
		}

		[Token(Token = "0x60021B5")]
		[Address(RVA = "0xBEF1A4", Offset = "0xBEF1A4", VA = "0xBEF1A4")]
		public static int AccessLength(Pattern pattern)
		{
			return default(int);
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0xBEF224", Offset = "0xBEF224", VA = "0xBEF224")]
		public Vector2 Sample(Pattern pattern, int index)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0xBEF3B8", Offset = "0xBEF3B8", VA = "0xBEF3B8")]
		private void Reset()
		{
		}

		[Token(Token = "0x60021B8")]
		[Address(RVA = "0xBEF410", Offset = "0xBEF410", VA = "0xBEF410")]
		private void Clear()
		{
		}

		[Token(Token = "0x60021B9")]
		[Address(RVA = "0xBEF49C", Offset = "0xBEF49C", VA = "0xBEF49C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60021BA")]
		[Address(RVA = "0xBEF4C0", Offset = "0xBEF4C0", VA = "0xBEF4C0")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x60021BB")]
		[Address(RVA = "0xBEF900", Offset = "0xBEF900", VA = "0xBEF900")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60021BC")]
		[Address(RVA = "0xBEF904", Offset = "0xBEF904", VA = "0xBEF904")]
		public FrustumJitter()
		{
		}
	}
	[Token(Token = "0x2000374")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D860C", Offset = "0x7D860C")]
	public class TemporalReprojection : EffectBase
	{
		[Token(Token = "0x20004CC")]
		public enum Neighborhood
		{
			[Token(Token = "0x40023AF")]
			MinMax3x3,
			[Token(Token = "0x40023B0")]
			MinMax3x3Rounded,
			[Token(Token = "0x40023B1")]
			MinMax4TapVarying
		}

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RenderBuffer[] mrt;

		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera _camera;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FrustumJitter _frustumJitter;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VelocityBuffer _velocityBuffer;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader reprojectionShader;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material reprojectionMaterial;

		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture[,] reprojectionBuffer;

		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] reprojectionIndex;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Neighborhood neighborhood;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool unjitterColorSamples;

		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool unjitterNeighborhood;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool unjitterReprojection;

		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool useYCoCg;

		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool useClipping;

		[Token(Token = "0x4001CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool useDilation;

		[Token(Token = "0x4001CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool useMotionBlur;

		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		public bool useOptimizations;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DFE78", Offset = "0x7DFE78")]
		public float feedbackMin;

		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DFE90", Offset = "0x7DFE90")]
		public float feedbackMax;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float motionBlurStrength;

		[Token(Token = "0x4001CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool motionBlurIgnoreFF;

		[Token(Token = "0x60021BD")]
		[Address(RVA = "0xAE839C", Offset = "0xAE839C", VA = "0xAE839C")]
		private void Reset()
		{
		}

		[Token(Token = "0x60021BE")]
		[Address(RVA = "0xAE8424", Offset = "0xAE8424", VA = "0xAE8424")]
		private void Clear()
		{
		}

		[Token(Token = "0x60021BF")]
		[Address(RVA = "0xAE84D4", Offset = "0xAE84D4", VA = "0xAE84D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60021C0")]
		[Address(RVA = "0xAE84F8", Offset = "0xAE84F8", VA = "0xAE84F8")]
		private void Resolve(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60021C1")]
		[Address(RVA = "0xAE900C", Offset = "0xAE900C", VA = "0xAE900C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60021C2")]
		[Address(RVA = "0xAE9190", Offset = "0xAE9190", VA = "0xAE9190")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60021C3")]
		[Address(RVA = "0xAE9294", Offset = "0xAE9294", VA = "0xAE9294")]
		public TemporalReprojection()
		{
		}
	}
	[Token(Token = "0x2000375")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D86C0", Offset = "0x7D86C0")]
	public class VelocityBuffer : EffectBase
	{
		[Token(Token = "0x20004CD")]
		public enum NeighborMaxSupport
		{
			[Token(Token = "0x40023B3")]
			TileSize10,
			[Token(Token = "0x40023B4")]
			TileSize20,
			[Token(Token = "0x40023B5")]
			TileSize40
		}

		[Token(Token = "0x4001CE1")]
		private const RenderTextureFormat velocityFormat = RenderTextureFormat.RGFloat;

		[Token(Token = "0x4001CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera _camera;

		[Token(Token = "0x4001CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FrustumJitter _frustumJitter;

		[Token(Token = "0x4001CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader velocityShader;

		[Token(Token = "0x4001CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material velocityMaterial;

		[Token(Token = "0x4001CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RenderTexture[] velocityBuffer;

		[Token(Token = "0x4001CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture[] velocityNeighborMax;

		[Token(Token = "0x4001CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool[] paramInitialized;

		[Token(Token = "0x4001CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector4[] paramProjectionExtents;

		[Token(Token = "0x4001CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Matrix4x4[] paramCurrV;

		[Token(Token = "0x4001CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Matrix4x4[] paramCurrVP;

		[Token(Token = "0x4001CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Matrix4x4[] paramPrevVP;

		[Token(Token = "0x4001CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Matrix4x4[] paramPrevVP_NoFlip;

		[Token(Token = "0x4001CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int activeEyeIndex;

		[Token(Token = "0x4001CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool neighborMaxGen;

		[Token(Token = "0x4001CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public NeighborMaxSupport neighborMaxSupport;

		[Token(Token = "0x4001CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float timeScaleNextFrame;

		[Token(Token = "0x4001CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7DFEA8", Offset = "0x7DFEA8")]
		private float <timeScale>k__BackingField;

		[Token(Token = "0x1700031F")]
		public RenderTexture activeVelocityBuffer
		{
			[Token(Token = "0x60021C5")]
			[Address(RVA = "0xAE8FB4", Offset = "0xAE8FB4", VA = "0xAE8FB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000320")]
		public RenderTexture activeVelocityNeighborMax
		{
			[Token(Token = "0x60021C6")]
			[Address(RVA = "0xAE8F5C", Offset = "0xAE8F5C", VA = "0xAE8F5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000321")]
		public float timeScale
		{
			[Token(Token = "0x60021C7")]
			[Address(RVA = "0xAEDF4C", Offset = "0xAEDF4C", VA = "0xAEDF4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E30A0", Offset = "0x7E30A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60021C8")]
			[Address(RVA = "0xAEDF54", Offset = "0xAEDF54", VA = "0xAEDF54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E30B0", Offset = "0x7E30B0")]
			private set
			{
			}
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0xAEDF5C", Offset = "0xAEDF5C", VA = "0xAEDF5C")]
		private void Reset()
		{
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0xAEDFCC", Offset = "0xAEDFCC", VA = "0xAEDFCC")]
		private void Clear()
		{
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0xAEE074", Offset = "0xAEE074", VA = "0xAEE074")]
		private void Awake()
		{
		}

		[Token(Token = "0x60021CC")]
		[Address(RVA = "0xAEE098", Offset = "0xAEE098", VA = "0xAEE098")]
		private void Start()
		{
		}

		[Token(Token = "0x60021CD")]
		[Address(RVA = "0xAEE0C0", Offset = "0xAEE0C0", VA = "0xAEE0C0")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x60021CE")]
		[Address(RVA = "0xAEE0CC", Offset = "0xAEE0CC", VA = "0xAEE0CC")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x60021CF")]
		[Address(RVA = "0xAEF47C", Offset = "0xAEF47C", VA = "0xAEF47C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60021D0")]
		[Address(RVA = "0xAEF540", Offset = "0xAEF540", VA = "0xAEF540")]
		public VelocityBuffer()
		{
		}
	}
	[Token(Token = "0x2000376")]
	public class VelocityBufferTag : MonoBehaviour
	{
		[Token(Token = "0x4001CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Vector3> temporaryVertexStorage;

		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<VelocityBufferTag> activeObjects;

		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _transform;

		[NonSerialized]
		[Token(Token = "0x4001CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public SkinnedMeshRenderer meshSmr;

		[NonSerialized]
		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool meshSmrActive;

		[NonSerialized]
		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public Mesh mesh;

		[NonSerialized]
		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Matrix4x4 localToWorldPrev;

		[NonSerialized]
		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Matrix4x4 localToWorldCurr;

		[Token(Token = "0x4001CFB")]
		private const int framesNotRenderedSleepThreshold = 60;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int framesNotRendered;

		[Token(Token = "0x17000322")]
		public bool rendering
		{
			[Token(Token = "0x60021D1")]
			[Address(RVA = "0xAEF46C", Offset = "0xAEF46C", VA = "0xAEF46C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60021D2")]
		[Address(RVA = "0xAEF558", Offset = "0xAEF558", VA = "0xAEF558")]
		private void Reset()
		{
		}

		[Token(Token = "0x60021D3")]
		[Address(RVA = "0xAEF6F8", Offset = "0xAEF6F8", VA = "0xAEF6F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60021D4")]
		[Address(RVA = "0xAEF6FC", Offset = "0xAEF6FC", VA = "0xAEF6FC")]
		private void TagUpdate(bool restart)
		{
		}

		[Token(Token = "0x60021D5")]
		[Address(RVA = "0xAEF948", Offset = "0xAEF948", VA = "0xAEF948")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60021D6")]
		[Address(RVA = "0xAEF968", Offset = "0xAEF968", VA = "0xAEF968")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x60021D7")]
		[Address(RVA = "0xAEFA1C", Offset = "0xAEFA1C", VA = "0xAEFA1C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0xAEFAA0", Offset = "0xAEFAA0", VA = "0xAEFAA0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0xAEFB30", Offset = "0xAEFB30", VA = "0xAEFB30")]
		public VelocityBufferTag()
		{
		}
	}
	[Token(Token = "0x2000377")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D8750", Offset = "0x7D8750")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7D8750", Offset = "0x7D8750")]
	public class Tonemapping : PostEffectsBaseSkyMaster
	{
		[Token(Token = "0x20004CE")]
		public enum TonemapperType
		{
			[Token(Token = "0x40023B7")]
			SimpleReinhard,
			[Token(Token = "0x40023B8")]
			UserCurve,
			[Token(Token = "0x40023B9")]
			Hable,
			[Token(Token = "0x40023BA")]
			Photographic,
			[Token(Token = "0x40023BB")]
			OptimizedHejiDawson,
			[Token(Token = "0x40023BC")]
			AdaptiveReinhard,
			[Token(Token = "0x40023BD")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x20004CF")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x40023BF")]
			Square16 = 0x10,
			[Token(Token = "0x40023C0")]
			Square32 = 0x20,
			[Token(Token = "0x40023C1")]
			Square64 = 0x40,
			[Token(Token = "0x40023C2")]
			Square128 = 0x80,
			[Token(Token = "0x40023C3")]
			Square256 = 0x100,
			[Token(Token = "0x40023C4")]
			Square512 = 0x200,
			[Token(Token = "0x40023C5")]
			Square1024 = 0x400
		}

		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TonemapperType type;

		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x4001D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D curveTex;

		[Token(Token = "0x4001D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exposureAdjustment;

		[Token(Token = "0x4001D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float middleGrey;

		[Token(Token = "0x4001D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float white;

		[Token(Token = "0x4001D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float adaptionSpeed;

		[Token(Token = "0x4001D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader tonemapper;

		[Token(Token = "0x4001D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x4001D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material tonemapMaterial;

		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture rt;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0xAEA064", Offset = "0xAEA064", VA = "0xAEA064", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0xAEA1B0", Offset = "0xAEA1B0", VA = "0xAEA1B0")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x60021DD")]
		[Address(RVA = "0xAEA464", Offset = "0xAEA464", VA = "0xAEA464")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0xAEA5BC", Offset = "0xAEA5BC", VA = "0xAEA5BC")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x60021DF")]
		[Address(RVA = "0xAEA6B0", Offset = "0xAEA6B0", VA = "0xAEA6B0")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60021E0")]
		[Address(RVA = "0xAEAEC8", Offset = "0xAEAEC8", VA = "0xAEAEC8")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x2000378")]
	[ExecuteAlways]
	public class AutoConfigureSM : MonoBehaviour
	{
		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SkyMasterManager SkyManager;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool configure;

		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool enableWater;

		[Token(Token = "0x4001D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool configured;

		[Token(Token = "0x60021E1")]
		[Address(RVA = "0xBDB620", Offset = "0xBDB620", VA = "0xBDB620")]
		private void Start()
		{
		}

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0xBDB624", Offset = "0xBDB624", VA = "0xBDB624")]
		private void Update()
		{
		}

		[Token(Token = "0x60021E3")]
		[Address(RVA = "0xBDDF40", Offset = "0xBDDF40", VA = "0xBDDF40")]
		public AutoConfigureSM()
		{
		}
	}
	[Token(Token = "0x2000379")]
	public class LayerMaskCreateSM
	{
		[Token(Token = "0x60021E4")]
		[Address(RVA = "0xE3FF10", Offset = "0xE3FF10", VA = "0xE3FF10")]
		public LayerMaskCreateSM()
		{
		}
	}
	[Token(Token = "0x200037A")]
	public class CopyVolumeCloudToCameraSM : MonoBehaviour
	{
		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform sun;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera targetCamera;

		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool configured;

		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FullVolumeCloudsSkyMaster sourceClouds;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FullVolumeCloudsSkyMaster cloudsScript;

		[Token(Token = "0x60021E5")]
		[Address(RVA = "0xBEBF4C", Offset = "0xBEBF4C", VA = "0xBEBF4C")]
		private void Start()
		{
		}

		[Token(Token = "0x60021E6")]
		[Address(RVA = "0xBEBF50", Offset = "0xBEBF50", VA = "0xBEBF50")]
		private void Update()
		{
		}

		[Token(Token = "0x60021E7")]
		[Address(RVA = "0xBEC0E4", Offset = "0xBEC0E4", VA = "0xBEC0E4")]
		public void PassInitVariablesScatter()
		{
		}

		[Token(Token = "0x60021E8")]
		[Address(RVA = "0xBEC47C", Offset = "0xBEC47C", VA = "0xBEC47C")]
		public void PassInitVariablesA()
		{
		}

		[Token(Token = "0x60021E9")]
		[Address(RVA = "0xBEC62C", Offset = "0xBEC62C", VA = "0xBEC62C")]
		public CopyVolumeCloudToCameraSM()
		{
		}
	}
}
namespace Artngame.GIPROXY
{
	[Token(Token = "0x200037B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D87F8", Offset = "0x7D87F8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D87F8", Offset = "0x7D87F8")]
	public class FirstPersonControllerGIPROXY : MonoBehaviour
	{
		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_IsWalking;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_WalkSpeed;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_RunSpeed;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7DFF38", Offset = "0x7DFF38")]
		private float m_RunstepLenghten;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_JumpSpeed;

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_StickToGroundForce;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_GravityMultiplier;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private bool m_UseFovKick;

		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[SerializeField]
		private bool m_UseHeadBob;

		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_StepInterval;

		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AudioClip[] m_FootstepSounds;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AudioClip m_JumpSound;

		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioClip m_LandSound;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Camera m_Camera;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_Jump;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_YRotation;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector2 m_Input;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 m_MoveDir;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CharacterController m_CharacterController;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CollisionFlags m_CollisionFlags;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float m_StepCycle;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float m_NextStep;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool m_Jumping;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioSource m_AudioSource;

		[Token(Token = "0x60021EA")]
		[Address(RVA = "0x1049838", Offset = "0x1049838", VA = "0x1049838")]
		private void Start()
		{
		}

		[Token(Token = "0x60021EB")]
		[Address(RVA = "0x10498E0", Offset = "0x10498E0", VA = "0x10498E0")]
		private void Update()
		{
		}

		[Token(Token = "0x60021EC")]
		[Address(RVA = "0x1049970", Offset = "0x1049970", VA = "0x1049970")]
		private void PlayLandingSound()
		{
		}

		[Token(Token = "0x60021ED")]
		[Address(RVA = "0x10499C4", Offset = "0x10499C4", VA = "0x10499C4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60021EE")]
		[Address(RVA = "0x1049EEC", Offset = "0x1049EEC", VA = "0x1049EEC")]
		private void PlayJumpSound()
		{
		}

		[Token(Token = "0x60021EF")]
		[Address(RVA = "0x1049F2C", Offset = "0x1049F2C", VA = "0x1049F2C")]
		private void ProgressStepCycle(float speed)
		{
		}

		[Token(Token = "0x60021F0")]
		[Address(RVA = "0x104A190", Offset = "0x104A190", VA = "0x104A190")]
		private void PlayFootStepAudio()
		{
		}

		[Token(Token = "0x60021F1")]
		[Address(RVA = "0x104A030", Offset = "0x104A030", VA = "0x104A030")]
		private void UpdateCameraPosition(float speed)
		{
		}

		[Token(Token = "0x60021F2")]
		[Address(RVA = "0x1049D7C", Offset = "0x1049D7C", VA = "0x1049D7C")]
		private void GetInput(out float speed)
		{
		}

		[Token(Token = "0x60021F3")]
		[Address(RVA = "0x104996C", Offset = "0x104996C", VA = "0x104996C")]
		private void RotateView()
		{
		}

		[Token(Token = "0x60021F4")]
		[Address(RVA = "0x104A2E4", Offset = "0x104A2E4", VA = "0x104A2E4")]
		private void OnControllerColliderHit(ControllerColliderHit hit)
		{
		}

		[Token(Token = "0x60021F5")]
		[Address(RVA = "0x104A468", Offset = "0x104A468", VA = "0x104A468")]
		public FirstPersonControllerGIPROXY()
		{
		}
	}
	[Token(Token = "0x200037C")]
	public class Circle_GI_Light : MonoBehaviour
	{
		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speedMult;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool up_down_motion;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool Shock_effect;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float up_down_speed;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float up_down_multiply;

		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float JITTER;

		[Token(Token = "0x4001D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform sphereObject;

		[Token(Token = "0x60021F6")]
		[Address(RVA = "0xE17FB8", Offset = "0xE17FB8", VA = "0xE17FB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60021F7")]
		[Address(RVA = "0xE17FBC", Offset = "0xE17FBC", VA = "0xE17FBC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0xE18244", Offset = "0xE18244", VA = "0xE18244")]
		public Circle_GI_Light()
		{
		}
	}
	[Token(Token = "0x200037D")]
	public class Control_Jove_light : MonoBehaviour
	{
		[Token(Token = "0x60021F9")]
		[Address(RVA = "0x1049264", Offset = "0x1049264", VA = "0x1049264")]
		private void Start()
		{
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0x10492C8", Offset = "0x10492C8", VA = "0x10492C8")]
		private void Update()
		{
		}

		[Token(Token = "0x60021FB")]
		[Address(RVA = "0x10492CC", Offset = "0x10492CC", VA = "0x10492CC")]
		public Control_Jove_light()
		{
		}
	}
	[Token(Token = "0x200037E")]
	public class ControlGIPROXY : MonoBehaviour
	{
		[Token(Token = "0x4001D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LightCollisionsPDM GI_PROXY_script;

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject LightPOOL;

		[Token(Token = "0x60021FC")]
		[Address(RVA = "0xE18264", Offset = "0xE18264", VA = "0xE18264")]
		private void Start()
		{
		}

		[Token(Token = "0x60021FD")]
		[Address(RVA = "0xE18358", Offset = "0xE18358", VA = "0xE18358")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60021FE")]
		[Address(RVA = "0xE18718", Offset = "0xE18718", VA = "0xE18718")]
		private void Update()
		{
		}

		[Token(Token = "0x60021FF")]
		[Address(RVA = "0xE1871C", Offset = "0xE1871C", VA = "0xE1871C")]
		public ControlGIPROXY()
		{
		}
	}
	[Token(Token = "0x200037F")]
	public class ControlGIPROXY_ATTRIUM : MonoBehaviour
	{
		[Token(Token = "0x4001D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LightCollisionsPDM GI_PROXY_script;

		[Token(Token = "0x4001D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LightCollisionsPDM GI_PROXY_POINT_script;

		[Token(Token = "0x4001D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LightCollisionsPDM GI_PROXY_SPOT_script;

		[Token(Token = "0x4001D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject LightPOOL;

		[Token(Token = "0x4001D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject MainAtrium;

		[Token(Token = "0x4001D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject WhiteAtrium;

		[Token(Token = "0x4001D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float intensity_current;

		[Token(Token = "0x4001D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float ambience_current;

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rotation_current;

		[Token(Token = "0x4001D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float rotation_current_X;

		[Token(Token = "0x4001D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float position_current_Z;

		[Token(Token = "0x4001D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform LookAtTarget;

		[Token(Token = "0x4001D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform PointLight;

		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform PointLight_POOL;

		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 Initial_point_light_pos;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform SpotLight;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform SpotLight_POOL;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform GUI_texts;

		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Transform Procedural_sphere;

		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform Intro_letters;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform Intro_letters_GI;

		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform Intro_letters_GI_POOL;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform Tentacles;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float intro_time;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float current_time;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool intro_ended;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool enable_GUI;

		[Token(Token = "0x6002200")]
		[Address(RVA = "0xE18724", Offset = "0xE18724", VA = "0xE18724")]
		private void Start()
		{
		}

		[Token(Token = "0x6002201")]
		[Address(RVA = "0xE18AB8", Offset = "0xE18AB8", VA = "0xE18AB8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002202")]
		[Address(RVA = "0xE1A740", Offset = "0xE1A740", VA = "0xE1A740")]
		private void Update()
		{
		}

		[Token(Token = "0x6002203")]
		[Address(RVA = "0xE1AB24", Offset = "0xE1AB24", VA = "0xE1AB24")]
		public ControlGIPROXY_ATTRIUM()
		{
		}
	}
	[Token(Token = "0x2000380")]
	public class ControlGIPROXY_ATTRIUM_SM30 : MonoBehaviour
	{
		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BloomSkyMaster Bloomer;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AtmosphericScatteringSkyMaster VolumeLight;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform InitPos;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform UpperPos;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int floorN;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject Player;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private LightCollisionsPDM GI_PROXY_script;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LightCollisionsPDM GI_PROXY_POINT_script;

		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LightCollisionsPDM GI_PROXY_SPOT_script;

		[Token(Token = "0x4001D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject LightPOOL;

		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject MainAtrium;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject WhiteAtrium;

		[Token(Token = "0x4001D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float intensity_current;

		[Token(Token = "0x4001D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float ambience_current;

		[Token(Token = "0x4001D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float rotation_current;

		[Token(Token = "0x4001D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float rotation_current_X;

		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float position_current_Z;

		[Token(Token = "0x4001D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform LookAtTarget;

		[Token(Token = "0x4001D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform PointLight;

		[Token(Token = "0x4001D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Transform PointLight_POOL;

		[Token(Token = "0x4001D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 Initial_point_light_pos;

		[Token(Token = "0x4001D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform SpotLight;

		[Token(Token = "0x4001D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform SpotLight_POOL;

		[Token(Token = "0x4001D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Transform GUI_texts;

		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform Procedural_sphere;

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Transform Intro_letters;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Transform Intro_letters_GI;

		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Transform Intro_letters_GI_POOL;

		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform Tentacles;

		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float intro_time;

		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float current_time;

		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool intro_ended;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		private bool enable_GUI;

		[Token(Token = "0x6002204")]
		[Address(RVA = "0xE1ECA4", Offset = "0xE1ECA4", VA = "0xE1ECA4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002205")]
		[Address(RVA = "0xE1F038", Offset = "0xE1F038", VA = "0xE1F038")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002206")]
		[Address(RVA = "0xE20F38", Offset = "0xE20F38", VA = "0xE20F38")]
		private void Update()
		{
		}

		[Token(Token = "0x6002207")]
		[Address(RVA = "0xE2131C", Offset = "0xE2131C", VA = "0xE2131C")]
		public ControlGIPROXY_ATTRIUM_SM30()
		{
		}
	}
	[Token(Token = "0x2000381")]
	public class ControlGIPROXY_ATTRIUM1 : MonoBehaviour
	{
		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LightCollisionsPDM GI_PROXY_script;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LightCollisionsPDM GI_PROXY_POINT_script;

		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LightCollisionsPDM GI_PROXY_SPOT_script;

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject LightPOOL;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject MainAtrium;

		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject WhiteAtrium;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float intensity_current;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float ambience_current;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rotation_current;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float rotation_current_X;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float position_current_Z;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform LookAtTarget;

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform PointLight;

		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform PointLight_POOL;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 Initial_point_light_pos;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform SpotLight;

		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform SpotLight_POOL;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform GUI_texts;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Transform Procedural_sphere;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform Intro_letters;

		[Token(Token = "0x4001D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform Intro_letters_GI;

		[Token(Token = "0x4001D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform Intro_letters_GI_POOL;

		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform Tentacles;

		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float intro_time;

		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float current_time;

		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool intro_ended;

		[Token(Token = "0x4001D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool enable_GUI;

		[Token(Token = "0x6002208")]
		[Address(RVA = "0xE1AB3C", Offset = "0xE1AB3C", VA = "0xE1AB3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0xE1AEC4", Offset = "0xE1AEC4", VA = "0xE1AEC4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600220A")]
		[Address(RVA = "0xE1C914", Offset = "0xE1C914", VA = "0xE1C914")]
		private void Update()
		{
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0xE1CCF8", Offset = "0xE1CCF8", VA = "0xE1CCF8")]
		public ControlGIPROXY_ATTRIUM1()
		{
		}
	}
	[Token(Token = "0x2000382")]
	public class DragTransformGI : MonoBehaviour
	{
		[Token(Token = "0x20004D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8ED0", Offset = "0x7D8ED0")]
		private sealed class <OnMouseDown>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40023C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40023C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40023C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragTransformGI <>4__this;

			[Token(Token = "0x40023C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <screenSpace>5__2;

			[Token(Token = "0x40023CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <offset>5__3;

			[Token(Token = "0x170003D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002612")]
				[Address(RVA = "0x10497C4", Offset = "0x10497C4", VA = "0x10497C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002614")]
				[Address(RVA = "0x1049830", Offset = "0x1049830", VA = "0x1049830", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600260F")]
			[Address(RVA = "0x10494A8", Offset = "0x10494A8", VA = "0x10494A8")]
			[DebuggerHidden]
			public <OnMouseDown>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6002610")]
			[Address(RVA = "0x1049508", Offset = "0x1049508", VA = "0x1049508", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002611")]
			[Address(RVA = "0x104950C", Offset = "0x104950C", VA = "0x104950C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002613")]
			[Address(RVA = "0x10497CC", Offset = "0x10497CC", VA = "0x10497CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color mouseOverColor;

		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color originalColor;

		[Token(Token = "0x600220C")]
		[Address(RVA = "0x10492D4", Offset = "0x10492D4", VA = "0x10492D4")]
		private void Start()
		{
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0x104934C", Offset = "0x104934C", VA = "0x104934C")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0x10493C0", Offset = "0x10493C0", VA = "0x10493C0")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x600220F")]
		[Address(RVA = "0x1049434", Offset = "0x1049434", VA = "0x1049434")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E30D0", Offset = "0x7E30D0")]
		private IEnumerator OnMouseDown()
		{
			return null;
		}

		[Token(Token = "0x6002210")]
		[Address(RVA = "0x10494D4", Offset = "0x10494D4", VA = "0x10494D4")]
		public DragTransformGI()
		{
		}
	}
	[Token(Token = "0x2000383")]
	public class SmoothRandom
	{
		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FractalNoise s_Noise;

		[Token(Token = "0x6002211")]
		[Address(RVA = "0x105457C", Offset = "0x105457C", VA = "0x105457C")]
		public static Vector3 GetVector3(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002212")]
		[Address(RVA = "0x10546F4", Offset = "0x10546F4", VA = "0x10546F4")]
		public static float Get(float speed)
		{
			return default(float);
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0x1054654", Offset = "0x1054654", VA = "0x1054654")]
		private static FractalNoise Get()
		{
			return null;
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0x105474C", Offset = "0x105474C", VA = "0x105474C")]
		public SmoothRandom()
		{
		}
	}
	[Token(Token = "0x2000384")]
	public class PerlinGIPROXY
	{
		[Token(Token = "0x4001D90")]
		private const int B = 256;

		[Token(Token = "0x4001D91")]
		private const int BM = 255;

		[Token(Token = "0x4001D92")]
		private const int N = 4096;

		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] p;

		[Token(Token = "0x4001D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[,] g3;

		[Token(Token = "0x4001D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float[,] g2;

		[Token(Token = "0x4001D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] g1;

		[Token(Token = "0x6002215")]
		[Address(RVA = "0x10539B8", Offset = "0x10539B8", VA = "0x10539B8")]
		private float s_curve(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6002216")]
		[Address(RVA = "0x10539D4", Offset = "0x10539D4", VA = "0x10539D4")]
		private float lerp(float t, float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x6002217")]
		[Address(RVA = "0x10539E4", Offset = "0x10539E4", VA = "0x10539E4")]
		private void setup(float value, out int b0, out int b1, out float r0, out float r1)
		{
		}

		[Token(Token = "0x6002218")]
		[Address(RVA = "0x1053A24", Offset = "0x1053A24", VA = "0x1053A24")]
		private float at2(float rx, float ry, float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x6002219")]
		[Address(RVA = "0x1053A34", Offset = "0x1053A34", VA = "0x1053A34")]
		private float at3(float rx, float ry, float rz, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x600221A")]
		[Address(RVA = "0x1053A4C", Offset = "0x1053A4C", VA = "0x1053A4C")]
		public float Noise(float arg)
		{
			return default(float);
		}

		[Token(Token = "0x600221B")]
		[Address(RVA = "0x104AC14", Offset = "0x104AC14", VA = "0x104AC14")]
		public float Noise(float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x600221C")]
		[Address(RVA = "0x1053B24", Offset = "0x1053B24", VA = "0x1053B24")]
		public float Noise(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x600221D")]
		[Address(RVA = "0x1053E9C", Offset = "0x1053E9C", VA = "0x1053E9C")]
		private void normalize2(ref float x, ref float y)
		{
		}

		[Token(Token = "0x600221E")]
		[Address(RVA = "0x1053F50", Offset = "0x1053F50", VA = "0x1053F50")]
		private void normalize3(ref float x, ref float y, ref float z)
		{
		}

		[Token(Token = "0x600221F")]
		[Address(RVA = "0x104A648", Offset = "0x104A648", VA = "0x104A648")]
		public PerlinGIPROXY()
		{
		}
	}
	[Token(Token = "0x2000385")]
	public class FractalNoise
	{
		[Token(Token = "0x4001D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PerlinGIPROXY m_Noise;

		[Token(Token = "0x4001D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] m_Exponent;

		[Token(Token = "0x4001D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_IntOctaves;

		[Token(Token = "0x4001D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_Octaves;

		[Token(Token = "0x4001D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_Lacunarity;

		[Token(Token = "0x6002220")]
		[Address(RVA = "0x104A4E0", Offset = "0x104A4E0", VA = "0x104A4E0")]
		public FractalNoise(float inH, float inLacunarity, float inOctaves)
		{
		}

		[Token(Token = "0x6002221")]
		[Address(RVA = "0x104A4E8", Offset = "0x104A4E8", VA = "0x104A4E8")]
		public FractalNoise(float inH, float inLacunarity, float inOctaves, PerlinGIPROXY noise)
		{
		}

		[Token(Token = "0x6002222")]
		[Address(RVA = "0x104AAB0", Offset = "0x104AAB0", VA = "0x104AAB0")]
		public float HybridMultifractal(float x, float y, float offset)
		{
			return default(float);
		}

		[Token(Token = "0x6002223")]
		[Address(RVA = "0x104ADF4", Offset = "0x104ADF4", VA = "0x104ADF4")]
		public float RidgedMultifractal(float x, float y, float offset, float gain)
		{
			return default(float);
		}

		[Token(Token = "0x6002224")]
		[Address(RVA = "0x104AF7C", Offset = "0x104AF7C", VA = "0x104AF7C")]
		public float BrownianMotion(float x, float y)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000386")]
	public class ProceduralNoiseGIPROXY : MonoBehaviour
	{
		[Token(Token = "0x4001D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float scale;

		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speed;

		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool recalculateNormals;

		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] baseVertices;

		[Token(Token = "0x4001DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PerlinGIPROXY noise;

		[Token(Token = "0x4001DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool Colorize;

		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Color_cycle_speed;

		[Token(Token = "0x4001DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4001DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float CHANGE_FACTOR;

		[Token(Token = "0x4001DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float register_time;

		[Token(Token = "0x4001DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool Deactivate_after;

		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float seconds;

		[Token(Token = "0x6002225")]
		[Address(RVA = "0x1054028", Offset = "0x1054028", VA = "0x1054028")]
		private void Start()
		{
		}

		[Token(Token = "0x6002226")]
		[Address(RVA = "0x10540D0", Offset = "0x10540D0", VA = "0x10540D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002227")]
		[Address(RVA = "0x1054558", Offset = "0x1054558", VA = "0x1054558")]
		public ProceduralNoiseGIPROXY()
		{
		}
	}
	[Token(Token = "0x2000387")]
	public class LightCollisionsPDM : MonoBehaviour
	{
		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Disable_on_tag;

		[Token(Token = "0x4001DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> Disable_Tags;

		[Token(Token = "0x4001DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Disable_on_layer;

		[Token(Token = "0x4001DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<string> Disable_Layers;

		[Token(Token = "0x4001DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool Set_light_mask;

		[Token(Token = "0x4001DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public LayerMask Bounce_light_mask;

		[Token(Token = "0x4001DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool Cut_below_height;

		[Token(Token = "0x4001DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Cut_height;

		[Token(Token = "0x4001DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Preview;

		[Token(Token = "0x4001DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool SecondBounce;

		[Token(Token = "0x4001DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int Cycle_ID;

		[Token(Token = "0x4001DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int Cycle_ID1;

		[Token(Token = "0x4001DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool Not_important_2ond;

		[Token(Token = "0x4001DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool use_light_sampling;

		[Token(Token = "0x4001DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float sampling_dist;

		[Token(Token = "0x4001DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool use_grid;

		[Token(Token = "0x4001DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int max_positions;

		[Token(Token = "0x4001DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Vector3> ray_dest_positions;

		[Token(Token = "0x4001DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<Vector3> sphere_dest_positions;

		[Token(Token = "0x4001DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool got_random_offsets;

		[Token(Token = "0x4001DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float extend_X;

		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float extend_Y;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool randomize;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector2[] rand_offsets;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool go_random;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int hor_directions;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int ver_directions;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float PointLight_Radius;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float PointLight_Radius_2ond;

		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float Update_Color_Dist;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool Follow_Hero;

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform HERO;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool Tag_based_player;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string Player_tag;

		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 Hero_Dist;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Vector3 Hero_offset;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool Hero_has_been_set;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform LightTransform;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float current_time;

		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public List<int> Lights_level;

		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		public List<Transform> Lights_source;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[HideInInspector]
		public List<Transform> Lights;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public List<Color> Lights_destination_color;

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float Divide_init_intensity;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float Bounce_Intensity;

		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float Bounce_Range;

		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float Degrade_speed;

		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float Appear_speed;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float min_dist_to_last_light;

		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float min_dist_to_source;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float min_density_dist;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool Enable_follow;

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public float Follow_dist;

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float Follow_speed;

		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public Color Bounce_color;

		[Token(Token = "0x4001DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 Start_light_pos;

		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public bool Jitter_directional;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float bound_up_down;

		[Token(Token = "0x4001DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float HDR_drop_speed;

		[Token(Token = "0x4001DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool get_hit_color;

		[Token(Token = "0x4001DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16D")]
		public bool get_texture_color;

		[Token(Token = "0x4001DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16E")]
		public bool mix_colors;

		[Token(Token = "0x4001DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16F")]
		public bool dynamic_update_color;

		[Token(Token = "0x4001DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float Color_change_speed;

		[Token(Token = "0x4001DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public bool Soften_color_change;

		[Token(Token = "0x4001DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x175")]
		public bool Use_light_color;

		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x176")]
		public bool Debug_on;

		[Token(Token = "0x4001DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x177")]
		public bool Debug_2ond;

		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public bool add_only_when_seen;

		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Transform CameraTransform;

		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool close_to_camera;

		[Token(Token = "0x4001DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float min_dist_to_camera;

		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public float max_hit_light_dist;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public bool Give_Offset;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float placement_offset;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public bool Origin_at_Projector;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Transform Projector_OBJ;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public GameObject LightPool;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float Update_every;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public bool Use_Height_cut_off;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float Cut_off_height;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public float floor_if_no_hero;

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public bool Jove_Lights;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C1")]
		public bool Grab_Skylight;

		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C2")]
		public bool Rotate_grid;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public float Sky_influence;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public GameObject Sky;

		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public bool offset_on_normal;

		[Token(Token = "0x6002228")]
		[Address(RVA = "0x104B0AC", Offset = "0x104B0AC", VA = "0x104B0AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002229")]
		[Address(RVA = "0x104B214", Offset = "0x104B214", VA = "0x104B214")]
		private void Update()
		{
		}

		[Token(Token = "0x600222A")]
		[Address(RVA = "0x1053640", Offset = "0x1053640", VA = "0x1053640")]
		private Vector3[] GetSphereDirections(int numDirections)
		{
			return null;
		}

		[Token(Token = "0x600222B")]
		[Address(RVA = "0x1052EFC", Offset = "0x1052EFC", VA = "0x1052EFC")]
		private Color Get_color(GameObject lightGameObject, RaycastHit hit1, float Color_speed)
		{
			return default(Color);
		}

		[Token(Token = "0x600222C")]
		[Address(RVA = "0x10537F0", Offset = "0x10537F0", VA = "0x10537F0")]
		public LightCollisionsPDM()
		{
		}
	}
	[Token(Token = "0x2000388")]
	public class ControlGIPROXY_ATTRIUM_SM : MonoBehaviour
	{
		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LightCollisionsPDM GI_PROXY_script;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LightCollisionsPDM GI_PROXY_POINT_script;

		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LightCollisionsPDM GI_PROXY_SPOT_script;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject LightPOOL;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject MainAtrium;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject WhiteAtrium;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float intensity_current;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float ambience_current;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rotation_current;

		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float rotation_current_X;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float position_current_Z;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform LookAtTarget;

		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform PointLight;

		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform PointLight_POOL;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 Initial_point_light_pos;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 Initial_camera_pos;

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform SpotLight;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform SpotLight_POOL;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Transform GUI_texts;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform Procedural_sphere;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform Intro_letters;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform Intro_letters_GI;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform Intro_letters_GI_POOL;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Transform Tentacles;

		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float intro_time;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float current_time;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool intro_ended;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		private bool enable_GUI;

		[Token(Token = "0x600222D")]
		[Address(RVA = "0xE1CD14", Offset = "0xE1CD14", VA = "0xE1CD14")]
		private void Start()
		{
		}

		[Token(Token = "0x600222E")]
		[Address(RVA = "0xE1D0C4", Offset = "0xE1D0C4", VA = "0xE1D0C4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600222F")]
		[Address(RVA = "0xE1E8A4", Offset = "0xE1E8A4", VA = "0xE1E8A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002230")]
		[Address(RVA = "0xE1EC88", Offset = "0xE1EC88", VA = "0xE1EC88")]
		public ControlGIPROXY_ATTRIUM_SM()
		{
		}
	}
}
namespace StereoRendering
{
	[Token(Token = "0x2000389")]
	[DisallowMultipleComponent]
	public class VRMirrorRenderer : MonoBehaviour
	{
		[Token(Token = "0x4001E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material stereoMaterial;

		[Token(Token = "0x4001E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Vector2 clipPlanes;

		[Token(Token = "0x4001E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private CameraClearFlags clearFlag;

		[Token(Token = "0x4001E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private Color backgroundColor;

		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool allowHDR;

		[Token(Token = "0x4001E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool dynamic;

		[Token(Token = "0x4001E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float resolutionMultiplier;

		[Token(Token = "0x4001E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private LayerMask cullingMask;

		[Token(Token = "0x4001E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject mirrorCamPivot;

		[Token(Token = "0x4001E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Camera mirrorCam;

		[Token(Token = "0x4001E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector4 reflectionPlane;

		[Token(Token = "0x4001E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTexture leftRenderTexture;

		[Token(Token = "0x4001E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RenderTexture rightRenderTexture;

		[Token(Token = "0x4001E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Matrix4x4 reflectionMatrix;

		[Token(Token = "0x4001E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Matrix4x4 leftProjMatrix;

		[Token(Token = "0x4001E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Matrix4x4 rightProjMatrix;

		[Token(Token = "0x4001E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Vector3 leftEyeOffset;

		[Token(Token = "0x4001E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private Vector3 rightEyeOffset;

		[Token(Token = "0x4001E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Quaternion leftEyeRotation;

		[Token(Token = "0x4001E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Quaternion rightEyeRotation;

		[Token(Token = "0x4001E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float cameraScale;

		[Token(Token = "0x6002231")]
		[Address(RVA = "0xA75148", Offset = "0xA75148", VA = "0xA75148")]
		private void Start()
		{
		}

		[Token(Token = "0x6002232")]
		[Address(RVA = "0xA75B30", Offset = "0xA75B30", VA = "0xA75B30")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002233")]
		[Address(RVA = "0xA754E8", Offset = "0xA754E8", VA = "0xA754E8")]
		public void CreateMirrorCamera()
		{
		}

		[Token(Token = "0x6002234")]
		[Address(RVA = "0xA74690", Offset = "0xA74690", VA = "0xA74690")]
		public void Render(Camera camera)
		{
		}

		[Token(Token = "0x6002235")]
		[Address(RVA = "0xA75BE4", Offset = "0xA75BE4", VA = "0xA75BE4")]
		private void RenderEye(Vector3 eyeOffset, Quaternion eyeRotation, Matrix4x4 projMat, Matrix4x4 worldToCameraMat, RenderTexture renderTexture, string textureName)
		{
		}

		[Token(Token = "0x6002236")]
		[Address(RVA = "0xA756E4", Offset = "0xA756E4", VA = "0xA756E4")]
		private void CalculateReflectionMatrix()
		{
		}

		[Token(Token = "0x6002237")]
		[Address(RVA = "0xA75E6C", Offset = "0xA75E6C", VA = "0xA75E6C")]
		private Vector4 GetCameraSpacePlane()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002238")]
		[Address(RVA = "0xA76014", Offset = "0xA76014", VA = "0xA76014")]
		public VRMirrorRenderer()
		{
		}
	}
	[Token(Token = "0x200038A")]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7D8894", Offset = "0x7D8894")]
	public class VRMirrorRenderManager : MonoBehaviour
	{
		[Token(Token = "0x4001E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static VRMirrorRenderManager Instance;

		[Token(Token = "0x4001E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<VRMirrorRenderer> stereoRendererList;

		[Token(Token = "0x4001E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera mainCam;

		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isOpenVR;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool isOculus;

		[Token(Token = "0x6002239")]
		[Address(RVA = "0xA7441C", Offset = "0xA7441C", VA = "0xA7441C")]
		public void AddMirrorRenderer(VRMirrorRenderer mirror)
		{
		}

		[Token(Token = "0x600223A")]
		[Address(RVA = "0xA74484", Offset = "0xA74484", VA = "0xA74484")]
		public void RemoveFromManager(VRMirrorRenderer mirror)
		{
		}

		[Token(Token = "0x600223B")]
		[Address(RVA = "0xA744EC", Offset = "0xA744EC", VA = "0xA744EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600223C")]
		[Address(RVA = "0xA745F0", Offset = "0xA745F0", VA = "0xA745F0")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x600223D")]
		[Address(RVA = "0xA74A98", Offset = "0xA74A98", VA = "0xA74A98")]
		public int GetRenderWidth()
		{
			return default(int);
		}

		[Token(Token = "0x600223E")]
		[Address(RVA = "0xA74B30", Offset = "0xA74B30", VA = "0xA74B30")]
		public int GetRenderHeight()
		{
			return default(int);
		}

		[Token(Token = "0x600223F")]
		[Address(RVA = "0xA74BC8", Offset = "0xA74BC8", VA = "0xA74BC8")]
		public Vector3 GetEyeSeperation(int eye)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0xA74CB4", Offset = "0xA74CB4", VA = "0xA74CB4")]
		public Quaternion GetEyeLocalRotation(int eye)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002241")]
		[Address(RVA = "0xA74DA8", Offset = "0xA74DA8", VA = "0xA74DA8")]
		public Matrix4x4 GetProjectionMatrix(int eye, float nearPlane, float farPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0xA74EAC", Offset = "0xA74EAC", VA = "0xA74EAC")]
		private Matrix4x4 HMDMatrix4x4ToMatrix4x4(HmdMatrix44_t hmdMatrix)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6002243")]
		[Address(RVA = "0xA750D8", Offset = "0xA750D8", VA = "0xA750D8")]
		public VRMirrorRenderManager()
		{
		}
	}
}
namespace VRStandardAssets.Utils
{
	[Token(Token = "0x200038B")]
	public class Reticle : MonoBehaviour
	{
		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_DefaultDistance;

		[Token(Token = "0x4001E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_UseNormal;

		[Token(Token = "0x4001E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Image m_Image;

		[Token(Token = "0x4001E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform m_ReticleTransform;

		[Token(Token = "0x4001E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform m_Camera;

		[Token(Token = "0x4001E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_OriginalScale;

		[Token(Token = "0x4001E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x17000323")]
		public bool UseNormal
		{
			[Token(Token = "0x6002244")]
			[Address(RVA = "0xA84F3C", Offset = "0xA84F3C", VA = "0xA84F3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002245")]
			[Address(RVA = "0xA84F44", Offset = "0xA84F44", VA = "0xA84F44")]
			set
			{
			}
		}

		[Token(Token = "0x17000324")]
		public Transform ReticleTransform
		{
			[Token(Token = "0x6002246")]
			[Address(RVA = "0xA84F50", Offset = "0xA84F50", VA = "0xA84F50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002247")]
		[Address(RVA = "0xA84F58", Offset = "0xA84F58", VA = "0xA84F58")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002248")]
		[Address(RVA = "0xA84FA8", Offset = "0xA84FA8", VA = "0xA84FA8")]
		public void Hide()
		{
		}

		[Token(Token = "0x6002249")]
		[Address(RVA = "0xA84FC8", Offset = "0xA84FC8", VA = "0xA84FC8")]
		public void Show()
		{
		}

		[Token(Token = "0x600224A")]
		[Address(RVA = "0xA84FE8", Offset = "0xA84FE8", VA = "0xA84FE8")]
		public void SetPosition()
		{
		}

		[Token(Token = "0x600224B")]
		[Address(RVA = "0xA85138", Offset = "0xA85138", VA = "0xA85138")]
		public void SetPosition(RaycastHit hit)
		{
		}

		[Token(Token = "0x600224C")]
		[Address(RVA = "0xA852F4", Offset = "0xA852F4", VA = "0xA852F4")]
		public Reticle()
		{
		}
	}
	[Token(Token = "0x200038C")]
	public class VRControllerRaycaster : MonoBehaviour
	{
		[Token(Token = "0x20004D1")]
		public enum Controller
		{
			[Token(Token = "0x40023CC")]
			Left,
			[Token(Token = "0x40023CD")]
			Right
		}

		[Token(Token = "0x4001E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Controller controller;

		[Token(Token = "0x4001E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LineRenderer m_LineRenderer;

		[Token(Token = "0x4001E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LayerMask m_ExclusionLayers;

		[Token(Token = "0x4001E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private VRInput m_VrInput;

		[Token(Token = "0x4001E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_RayLength;

		[Token(Token = "0x4001E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float _originalLineDistance;

		[Token(Token = "0x4001E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _currentLineDistance;

		[Token(Token = "0x4001E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform pointer;

		[Token(Token = "0x4001E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRInteractiveItem m_CurrentInteractible;

		[Token(Token = "0x4001E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VRInteractiveItem m_LastInteractible;

		[Token(Token = "0x17000325")]
		public VRInteractiveItem CurrentInteractible
		{
			[Token(Token = "0x600224F")]
			[Address(RVA = "0xA8544C", Offset = "0xA8544C", VA = "0xA8544C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000023")]
		public event Action<RaycastHit> OnRaycasthit
		{
			[Token(Token = "0x600224D")]
			[Address(RVA = "0xA85304", Offset = "0xA85304", VA = "0xA85304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3134", Offset = "0x7E3134")]
			add
			{
			}
			[Token(Token = "0x600224E")]
			[Address(RVA = "0xA853A8", Offset = "0xA853A8", VA = "0xA853A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3144", Offset = "0x7E3144")]
			remove
			{
			}
		}

		[Token(Token = "0x6002250")]
		[Address(RVA = "0xA85454", Offset = "0xA85454", VA = "0xA85454")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002251")]
		[Address(RVA = "0xA85598", Offset = "0xA85598", VA = "0xA85598")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002252")]
		[Address(RVA = "0xA856DC", Offset = "0xA856DC", VA = "0xA856DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002253")]
		[Address(RVA = "0xA856E8", Offset = "0xA856E8", VA = "0xA856E8")]
		public void SetLineDistance(float newDistance)
		{
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0xA856F0", Offset = "0xA856F0", VA = "0xA856F0")]
		public void ResetLineDistance()
		{
		}

		[Token(Token = "0x6002255")]
		[Address(RVA = "0xA856FC", Offset = "0xA856FC", VA = "0xA856FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002256")]
		[Address(RVA = "0xA8587C", Offset = "0xA8587C", VA = "0xA8587C")]
		private void Raycast()
		{
		}

		[Token(Token = "0x6002257")]
		[Address(RVA = "0xA85BF4", Offset = "0xA85BF4", VA = "0xA85BF4")]
		private void DeactiveLastInteractible()
		{
		}

		[Token(Token = "0x6002258")]
		[Address(RVA = "0xA85C84", Offset = "0xA85C84", VA = "0xA85C84")]
		private void HandleUp()
		{
		}

		[Token(Token = "0x6002259")]
		[Address(RVA = "0xA85D18", Offset = "0xA85D18", VA = "0xA85D18")]
		private void HandleDown()
		{
		}

		[Token(Token = "0x600225A")]
		[Address(RVA = "0xA85DAC", Offset = "0xA85DAC", VA = "0xA85DAC")]
		private void HandleClick()
		{
		}

		[Token(Token = "0x600225B")]
		[Address(RVA = "0xA85E40", Offset = "0xA85E40", VA = "0xA85E40")]
		private void HandleDoubleClick()
		{
		}

		[Token(Token = "0x600225C")]
		[Address(RVA = "0xA85ED4", Offset = "0xA85ED4", VA = "0xA85ED4")]
		public VRControllerRaycaster()
		{
		}
	}
	[Token(Token = "0x200038D")]
	public class VRDeviceManager : MonoBehaviour
	{
		[Token(Token = "0x4001E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRDeviceManager s_Instance;

		[Token(Token = "0x17000326")]
		public static VRDeviceManager Instance
		{
			[Token(Token = "0x600225D")]
			[Address(RVA = "0x15FEEC4", Offset = "0x15FEEC4", VA = "0x15FEEC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600225E")]
		[Address(RVA = "0x15FEFB4", Offset = "0x15FEFB4", VA = "0x15FEFB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600225F")]
		[Address(RVA = "0x15FF0F4", Offset = "0x15FF0F4", VA = "0x15FF0F4")]
		public VRDeviceManager()
		{
		}
	}
	[Token(Token = "0x200038E")]
	public class VREyeRaycaster : MonoBehaviour
	{
		[Token(Token = "0x4001E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform m_Camera;

		[Token(Token = "0x4001E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LayerMask m_ExclusionLayers;

		[Token(Token = "0x4001E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Reticle m_Reticle;

		[Token(Token = "0x4001E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private VRInput m_VrInput;

		[Token(Token = "0x4001E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool m_ShowDebugRay;

		[Token(Token = "0x4001E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float m_DebugRayLength;

		[Token(Token = "0x4001E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_DebugRayDuration;

		[Token(Token = "0x4001E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_RayLength;

		[Token(Token = "0x4001E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VRInteractiveItem m_CurrentInteractible;

		[Token(Token = "0x4001E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRInteractiveItem m_LastInteractible;

		[Token(Token = "0x14000024")]
		public event Action<RaycastHit> OnRaycasthit
		{
			[Token(Token = "0x6002260")]
			[Address(RVA = "0x15FF0FC", Offset = "0x15FF0FC", VA = "0x15FF0FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3154", Offset = "0x7E3154")]
			add
			{
			}
			[Token(Token = "0x6002261")]
			[Address(RVA = "0x15FF1A0", Offset = "0x15FF1A0", VA = "0x15FF1A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3164", Offset = "0x7E3164")]
			remove
			{
			}
		}

		[Token(Token = "0x6002262")]
		[Address(RVA = "0x15FF244", Offset = "0x15FF244", VA = "0x15FF244")]
		public VREyeRaycaster()
		{
		}
	}
	[Token(Token = "0x200038F")]
	public class VRFPSCounter : MonoBehaviour
	{
		[Token(Token = "0x4001E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_DeltaTime;

		[Token(Token = "0x4001E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text m_Text;

		[Token(Token = "0x4001E56")]
		private const float k_SmoothingCoef = 0.1f;

		[Token(Token = "0x6002263")]
		[Address(RVA = "0x15FF260", Offset = "0x15FF260", VA = "0x15FF260")]
		private void Start()
		{
		}

		[Token(Token = "0x6002264")]
		[Address(RVA = "0x15FF2B8", Offset = "0x15FF2B8", VA = "0x15FF2B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002265")]
		[Address(RVA = "0x15FF3EC", Offset = "0x15FF3EC", VA = "0x15FF3EC")]
		public VRFPSCounter()
		{
		}
	}
	[Token(Token = "0x2000390")]
	public class VRInput : MonoBehaviour
	{
		[Token(Token = "0x20004D2")]
		public enum SwipeDirection
		{
			[Token(Token = "0x40023CF")]
			NONE,
			[Token(Token = "0x40023D0")]
			UP,
			[Token(Token = "0x40023D1")]
			DOWN,
			[Token(Token = "0x40023D2")]
			LEFT,
			[Token(Token = "0x40023D3")]
			RIGHT
		}

		[Token(Token = "0x4001E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_DoubleClickTime;

		[Token(Token = "0x4001E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_SwipeWidth;

		[Token(Token = "0x4001E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 m_MouseDownPosition;

		[Token(Token = "0x4001E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector2 m_MouseUpPosition;

		[Token(Token = "0x4001E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float m_LastMouseUpTime;

		[Token(Token = "0x4001E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_LastHorizontalValue;

		[Token(Token = "0x4001E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_LastVerticalValue;

		[Token(Token = "0x17000327")]
		public float DoubleClickTime
		{
			[Token(Token = "0x6002272")]
			[Address(RVA = "0x15FFBA4", Offset = "0x15FFBA4", VA = "0x15FFBA4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x14000025")]
		public event Action<SwipeDirection> OnSwipe
		{
			[Token(Token = "0x6002266")]
			[Address(RVA = "0x15FF3F4", Offset = "0x15FF3F4", VA = "0x15FF3F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3174", Offset = "0x7E3174")]
			add
			{
			}
			[Token(Token = "0x6002267")]
			[Address(RVA = "0x15FF498", Offset = "0x15FF498", VA = "0x15FF498")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3184", Offset = "0x7E3184")]
			remove
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event Action OnClick
		{
			[Token(Token = "0x6002268")]
			[Address(RVA = "0x15FF53C", Offset = "0x15FF53C", VA = "0x15FF53C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3194", Offset = "0x7E3194")]
			add
			{
			}
			[Token(Token = "0x6002269")]
			[Address(RVA = "0x15FF5E0", Offset = "0x15FF5E0", VA = "0x15FF5E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E31A4", Offset = "0x7E31A4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event Action OnDown
		{
			[Token(Token = "0x600226A")]
			[Address(RVA = "0x15FF684", Offset = "0x15FF684", VA = "0x15FF684")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E31B4", Offset = "0x7E31B4")]
			add
			{
			}
			[Token(Token = "0x600226B")]
			[Address(RVA = "0x15FF728", Offset = "0x15FF728", VA = "0x15FF728")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E31C4", Offset = "0x7E31C4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000028")]
		public event Action OnUp
		{
			[Token(Token = "0x600226C")]
			[Address(RVA = "0x15FF7CC", Offset = "0x15FF7CC", VA = "0x15FF7CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E31D4", Offset = "0x7E31D4")]
			add
			{
			}
			[Token(Token = "0x600226D")]
			[Address(RVA = "0x15FF870", Offset = "0x15FF870", VA = "0x15FF870")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E31E4", Offset = "0x7E31E4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event Action OnDoubleClick
		{
			[Token(Token = "0x600226E")]
			[Address(RVA = "0x15FF914", Offset = "0x15FF914", VA = "0x15FF914")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E31F4", Offset = "0x7E31F4")]
			add
			{
			}
			[Token(Token = "0x600226F")]
			[Address(RVA = "0x15FF9B8", Offset = "0x15FF9B8", VA = "0x15FF9B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3204", Offset = "0x7E3204")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public event Action OnCancel
		{
			[Token(Token = "0x6002270")]
			[Address(RVA = "0x15FFA5C", Offset = "0x15FFA5C", VA = "0x15FFA5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3214", Offset = "0x7E3214")]
			add
			{
			}
			[Token(Token = "0x6002271")]
			[Address(RVA = "0x15FFB00", Offset = "0x15FFB00", VA = "0x15FFB00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3224", Offset = "0x7E3224")]
			remove
			{
			}
		}

		[Token(Token = "0x6002273")]
		[Address(RVA = "0x15FFBAC", Offset = "0x15FFBAC", VA = "0x15FFBAC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002274")]
		[Address(RVA = "0x15FFBC0", Offset = "0x15FFBC0", VA = "0x15FFBC0")]
		public VRInput()
		{
		}
	}
	[Token(Token = "0x2000391")]
	public class VRInteractiveItem : MonoBehaviour
	{
		[Token(Token = "0x4001E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool m_IsOver;

		[Token(Token = "0x17000328")]
		public bool IsOver
		{
			[Token(Token = "0x6002281")]
			[Address(RVA = "0x160038C", Offset = "0x160038C", VA = "0x160038C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400002B")]
		public event Action OnOver
		{
			[Token(Token = "0x6002275")]
			[Address(RVA = "0x15FFBDC", Offset = "0x15FFBDC", VA = "0x15FFBDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3234", Offset = "0x7E3234")]
			add
			{
			}
			[Token(Token = "0x6002276")]
			[Address(RVA = "0x15FFC80", Offset = "0x15FFC80", VA = "0x15FFC80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3244", Offset = "0x7E3244")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public event Action OnOut
		{
			[Token(Token = "0x6002277")]
			[Address(RVA = "0x15FFD24", Offset = "0x15FFD24", VA = "0x15FFD24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3254", Offset = "0x7E3254")]
			add
			{
			}
			[Token(Token = "0x6002278")]
			[Address(RVA = "0x15FFDC8", Offset = "0x15FFDC8", VA = "0x15FFDC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3264", Offset = "0x7E3264")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002D")]
		public event Action OnClick
		{
			[Token(Token = "0x6002279")]
			[Address(RVA = "0x15FFE6C", Offset = "0x15FFE6C", VA = "0x15FFE6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3274", Offset = "0x7E3274")]
			add
			{
			}
			[Token(Token = "0x600227A")]
			[Address(RVA = "0x15FFF10", Offset = "0x15FFF10", VA = "0x15FFF10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3284", Offset = "0x7E3284")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002E")]
		public event Action OnDoubleClick
		{
			[Token(Token = "0x600227B")]
			[Address(RVA = "0x15FFFB4", Offset = "0x15FFFB4", VA = "0x15FFFB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3294", Offset = "0x7E3294")]
			add
			{
			}
			[Token(Token = "0x600227C")]
			[Address(RVA = "0x1600058", Offset = "0x1600058", VA = "0x1600058")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E32A4", Offset = "0x7E32A4")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002F")]
		public event Action OnUp
		{
			[Token(Token = "0x600227D")]
			[Address(RVA = "0x16000FC", Offset = "0x16000FC", VA = "0x16000FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E32B4", Offset = "0x7E32B4")]
			add
			{
			}
			[Token(Token = "0x600227E")]
			[Address(RVA = "0x16001A0", Offset = "0x16001A0", VA = "0x16001A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E32C4", Offset = "0x7E32C4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000030")]
		public event Action OnDown
		{
			[Token(Token = "0x600227F")]
			[Address(RVA = "0x1600244", Offset = "0x1600244", VA = "0x1600244")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E32D4", Offset = "0x7E32D4")]
			add
			{
			}
			[Token(Token = "0x6002280")]
			[Address(RVA = "0x16002E8", Offset = "0x16002E8", VA = "0x16002E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E32E4", Offset = "0x7E32E4")]
			remove
			{
			}
		}

		[Token(Token = "0x6002282")]
		[Address(RVA = "0x1600394", Offset = "0x1600394", VA = "0x1600394")]
		public void Over()
		{
		}

		[Token(Token = "0x6002283")]
		[Address(RVA = "0x16003B4", Offset = "0x16003B4", VA = "0x16003B4")]
		public void Out()
		{
		}

		[Token(Token = "0x6002284")]
		[Address(RVA = "0x16003D0", Offset = "0x16003D0", VA = "0x16003D0")]
		public void Click()
		{
		}

		[Token(Token = "0x6002285")]
		[Address(RVA = "0x16003E4", Offset = "0x16003E4", VA = "0x16003E4")]
		public void DoubleClick()
		{
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0x16003F8", Offset = "0x16003F8", VA = "0x16003F8")]
		public void Up()
		{
		}

		[Token(Token = "0x6002287")]
		[Address(RVA = "0x160040C", Offset = "0x160040C", VA = "0x160040C")]
		public void Down()
		{
		}

		[Token(Token = "0x6002288")]
		[Address(RVA = "0x1600420", Offset = "0x1600420", VA = "0x1600420")]
		public VRInteractiveItem()
		{
		}
	}
	[Token(Token = "0x2000392")]
	public class VRTrackingReset : MonoBehaviour
	{
		[Token(Token = "0x6002289")]
		[Address(RVA = "0x1600428", Offset = "0x1600428", VA = "0x1600428")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0x1600488", Offset = "0x1600488", VA = "0x1600488")]
		public VRTrackingReset()
		{
		}
	}
}
namespace UnityEngine
{
	[Token(Token = "0x2000393")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x7D8908", Offset = "0x7D8908")]
	public class NotReorderableAttribute : PropertyAttribute
	{
		[Token(Token = "0x600228B")]
		[Address(RVA = "0xA83850", Offset = "0xA83850", VA = "0xA83850")]
		public NotReorderableAttribute()
		{
		}
	}
}
namespace UnityEngine.Timeline
{
	[Token(Token = "0x2000394")]
	public class VideoPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4001E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VideoPlayer videoPlayer;

		[Token(Token = "0x4001E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VideoClip videoClip;

		[Token(Token = "0x4001E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mute;

		[Token(Token = "0x4001E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x4001E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double preloadTime;

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double clipInTime;

		[Token(Token = "0x4001E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool playedOnce;

		[Token(Token = "0x4001E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool preparing;

		[Token(Token = "0x600228C")]
		[Address(RVA = "0xA83858", Offset = "0xA83858", VA = "0xA83858")]
		public void PrepareVideo()
		{
		}

		[Token(Token = "0x600228D")]
		[Address(RVA = "0xA83C1C", Offset = "0xA83C1C", VA = "0xA83C1C")]
		private void LoopPointReached(VideoPlayer vp)
		{
		}

		[Token(Token = "0x600228E")]
		[Address(RVA = "0xA83C2C", Offset = "0xA83C2C", VA = "0xA83C2C", Slot = "19")]
		public override void PrepareFrame(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x600228F")]
		[Address(RVA = "0xA83F24", Offset = "0xA83F24", VA = "0xA83F24", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6002290")]
		[Address(RVA = "0xA84084", Offset = "0xA84084", VA = "0xA84084", Slot = "18")]
		public override void OnBehaviourPause(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6002291")]
		[Address(RVA = "0xA841B8", Offset = "0xA841B8", VA = "0xA841B8", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6002292")]
		[Address(RVA = "0xA843B4", Offset = "0xA843B4", VA = "0xA843B4", Slot = "13")]
		public override void OnGraphStart(Playable playable)
		{
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0xA843BC", Offset = "0xA843BC", VA = "0xA843BC", Slot = "14")]
		public override void OnGraphStop(Playable playable)
		{
		}

		[Token(Token = "0x6002294")]
		[Address(RVA = "0xA843F4", Offset = "0xA843F4", VA = "0xA843F4", Slot = "16")]
		public override void OnPlayableDestroy(Playable playable)
		{
		}

		[Token(Token = "0x6002295")]
		[Address(RVA = "0xA83FD8", Offset = "0xA83FD8", VA = "0xA83FD8")]
		public void PlayVideo()
		{
		}

		[Token(Token = "0x6002296")]
		[Address(RVA = "0xA84128", Offset = "0xA84128", VA = "0xA84128")]
		public void PauseVideo()
		{
		}

		[Token(Token = "0x6002297")]
		[Address(RVA = "0xA83B88", Offset = "0xA83B88", VA = "0xA83B88")]
		public void StopVideo()
		{
		}

		[Token(Token = "0x6002298")]
		[Address(RVA = "0xA83DA4", Offset = "0xA83DA4", VA = "0xA83DA4")]
		private void SyncVideoToPlayable(Playable playable)
		{
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0xA843F8", Offset = "0xA843F8", VA = "0xA843F8")]
		public VideoPlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x2000395")]
	public sealed class VideoSchedulerPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4001E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerable<TimelineClip> m_Clips;

		[Token(Token = "0x4001E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayableDirector m_Director;

		[Token(Token = "0x17000329")]
		internal PlayableDirector director
		{
			[Token(Token = "0x600229A")]
			[Address(RVA = "0xA84414", Offset = "0xA84414", VA = "0xA84414")]
			get
			{
				return null;
			}
			[Token(Token = "0x600229B")]
			[Address(RVA = "0xA8441C", Offset = "0xA8441C", VA = "0xA8441C")]
			set
			{
			}
		}

		[Token(Token = "0x1700032A")]
		internal IEnumerable<TimelineClip> clips
		{
			[Token(Token = "0x600229C")]
			[Address(RVA = "0xA84424", Offset = "0xA84424", VA = "0xA84424")]
			get
			{
				return null;
			}
			[Token(Token = "0x600229D")]
			[Address(RVA = "0xA8442C", Offset = "0xA8442C", VA = "0xA8442C")]
			set
			{
			}
		}

		[Token(Token = "0x600229E")]
		[Address(RVA = "0xA84434", Offset = "0xA84434", VA = "0xA84434", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x600229F")]
		[Address(RVA = "0xA84848", Offset = "0xA84848", VA = "0xA84848")]
		public VideoSchedulerPlayableBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000396")]
	public class VideoScriptPlayableAsset : PlayableAsset
	{
		[Token(Token = "0x4001E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExposedReference<VideoPlayer> videoPlayer;

		[Token(Token = "0x4001E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[NotKeyable]
		public VideoClip videoClip;

		[Token(Token = "0x4001E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[NotKeyable]
		public bool mute;

		[Token(Token = "0x4001E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		[NotKeyable]
		public bool loop;

		[Token(Token = "0x4001E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[NotKeyable]
		public double preloadTime;

		[Token(Token = "0x4001E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[NotKeyable]
		public double clipInTime;

		[Token(Token = "0x60022A0")]
		[Address(RVA = "0xA84850", Offset = "0xA84850", VA = "0xA84850", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
		{
			return default(Playable);
		}

		[Token(Token = "0x60022A1")]
		[Address(RVA = "0xA84980", Offset = "0xA84980", VA = "0xA84980")]
		public VideoScriptPlayableAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000397")]
	[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x7D8940", Offset = "0x7D8940")]
	[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x7D8940", Offset = "0x7D8940")]
	public class VideoScriptPlayableTrack : TrackAsset
	{
		[Token(Token = "0x60022A2")]
		[Address(RVA = "0xA8499C", Offset = "0xA8499C", VA = "0xA8499C", Slot = "24")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x60022A3")]
		[Address(RVA = "0xA84AD8", Offset = "0xA84AD8", VA = "0xA84AD8")]
		public VideoScriptPlayableTrack()
		{
		}
	}
}
namespace Valve.VR
{
	[Token(Token = "0x2000398")]
	public class SteamVR_LoadLevelAntu : MonoBehaviour
	{
		[Token(Token = "0x20004D3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7D8EE0", Offset = "0x7D8EE0")]
		private sealed class <LoadLevel>d__46 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40023D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40023D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40023D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_LoadLevelAntu <>4__this;

			[Token(Token = "0x40023D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVROverlay <overlay>5__2;

			[Token(Token = "0x40023D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <fadedForeground>5__3;

			[Token(Token = "0x40023D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CVRCompositor <compositor>5__4;

			[Token(Token = "0x170003D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002618")]
				[Address(RVA = "0x1602150", Offset = "0x1602150", VA = "0x1602150", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600261A")]
				[Address(RVA = "0x16021BC", Offset = "0x16021BC", VA = "0x16021BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002615")]
			[Address(RVA = "0x16014C4", Offset = "0x16014C4", VA = "0x16014C4")]
			[DebuggerHidden]
			public <LoadLevel>d__46(int <>1__state)
			{
			}

			[Token(Token = "0x6002616")]
			[Address(RVA = "0x160157C", Offset = "0x160157C", VA = "0x160157C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002617")]
			[Address(RVA = "0x1601580", Offset = "0x1601580", VA = "0x1601580", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002619")]
			[Address(RVA = "0x1602158", Offset = "0x1602158", VA = "0x1602158", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SteamVR_LoadLevelAntu _active;

		[Token(Token = "0x4001E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int levelIndex;

		[Token(Token = "0x4001E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string internalProcessPath;

		[Token(Token = "0x4001E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string internalProcessArgs;

		[Token(Token = "0x4001E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool loadAdditive;

		[Token(Token = "0x4001E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool loadAsync;

		[Token(Token = "0x4001E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture loadingScreen;

		[Token(Token = "0x4001E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture progressBarEmpty;

		[Token(Token = "0x4001E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture progressBarFull;

		[Token(Token = "0x4001E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float loadingScreenWidthInMeters;

		[Token(Token = "0x4001E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float progressBarWidthInMeters;

		[Token(Token = "0x4001E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float loadingScreenDistance;

		[Token(Token = "0x4001E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform loadingScreenTransform;

		[Token(Token = "0x4001E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform progressBarTransform;

		[Token(Token = "0x4001E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture front;

		[Token(Token = "0x4001E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Texture back;

		[Token(Token = "0x4001E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture left;

		[Token(Token = "0x4001E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Texture right;

		[Token(Token = "0x4001E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture top;

		[Token(Token = "0x4001E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture bottom;

		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color backgroundColor;

		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool showGrid;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float fadeOutTime;

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float fadeInTime;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float postLoadSettleTime;

		[Token(Token = "0x4001E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float loadingScreenFadeInTime;

		[Token(Token = "0x4001E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float loadingScreenFadeOutTime;

		[Token(Token = "0x4001E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float fadeRate;

		[Token(Token = "0x4001E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float alpha;

		[Token(Token = "0x4001E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AsyncOperation async;

		[Token(Token = "0x4001E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture renderTexture;

		[Token(Token = "0x4001E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ulong loadingScreenOverlayHandle;

		[Token(Token = "0x4001E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ulong progressBarOverlayHandle;

		[Token(Token = "0x4001E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool autoTriggerOnEnable;

		[Token(Token = "0x1700032B")]
		public static bool loading
		{
			[Token(Token = "0x60022A4")]
			[Address(RVA = "0x1600490", Offset = "0x1600490", VA = "0x1600490")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700032C")]
		public static float progress
		{
			[Token(Token = "0x60022A5")]
			[Address(RVA = "0x1600528", Offset = "0x1600528", VA = "0x1600528")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700032D")]
		public static Texture progressTexture
		{
			[Token(Token = "0x60022A6")]
			[Address(RVA = "0x1600640", Offset = "0x1600640", VA = "0x1600640")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022A7")]
		[Address(RVA = "0x160071C", Offset = "0x160071C", VA = "0x160071C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60022A8")]
		[Address(RVA = "0x160072C", Offset = "0x160072C", VA = "0x160072C")]
		public void Trigger()
		{
		}

		[Token(Token = "0x60022A9")]
		[Address(RVA = "0x1600828", Offset = "0x1600828", VA = "0x1600828")]
		public static void Begin(int levelIndex, bool showGrid = false, float fadeOutTime = 0.5f, float r = 0f, float g = 0f, float b = 0f, float a = 1f)
		{
		}

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0x1600948", Offset = "0x1600948", VA = "0x1600948")]
		public static void Begin(int levelIndex, Texture loadingScreen, bool showGrid = false, float fadeOutTime = 0.5f, float r = 0f, float g = 0f, float b = 0f, float a = 1f)
		{
		}

		[Token(Token = "0x60022AB")]
		[Address(RVA = "0x1600AB8", Offset = "0x1600AB8", VA = "0x1600AB8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60022AC")]
		[Address(RVA = "0x160135C", Offset = "0x160135C", VA = "0x160135C")]
		private void Update()
		{
		}

		[Token(Token = "0x60022AD")]
		[Address(RVA = "0x16007B4", Offset = "0x16007B4", VA = "0x16007B4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7E32F4", Offset = "0x7E32F4")]
		private IEnumerator LoadLevel()
		{
			return null;
		}

		[Token(Token = "0x60022AE")]
		[Address(RVA = "0x1600F08", Offset = "0x1600F08", VA = "0x1600F08")]
		private ulong GetOverlayHandle(string overlayName, Transform transform, float widthInMeters = 1f)
		{
			return default(ulong);
		}

		[Token(Token = "0x60022AF")]
		[Address(RVA = "0x16014F0", Offset = "0x16014F0", VA = "0x16014F0")]
		public SteamVR_LoadLevelAntu()
		{
		}

		[Token(Token = "0x60022B1")]
		[Address(RVA = "0x1601560", Offset = "0x1601560", VA = "0x1601560")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7E3358", Offset = "0x7E3358")]
		private bool <LoadLevel>b__46_0()
		{
			return default(bool);
		}
	}
}
namespace Menu
{
	[Token(Token = "0x2000399")]
	public class Menu : MonoBehaviour
	{
		[Token(Token = "0x4001E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PlayableDirector timeline;

		[Token(Token = "0x4001E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private VREyeRaycaster raycaster;

		[Token(Token = "0x60022B2")]
		[Address(RVA = "0x9E19B8", Offset = "0x9E19B8", VA = "0x9E19B8")]
		private void Start()
		{
		}

		[Token(Token = "0x60022B3")]
		[Address(RVA = "0x9E1AC4", Offset = "0x9E1AC4", VA = "0x9E1AC4")]
		public void EnableSelection(bool b)
		{
		}

		[Token(Token = "0x60022B4")]
		[Address(RVA = "0x9E1BE4", Offset = "0x9E1BE4", VA = "0x9E1BE4")]
		public Menu()
		{
		}
	}
}
