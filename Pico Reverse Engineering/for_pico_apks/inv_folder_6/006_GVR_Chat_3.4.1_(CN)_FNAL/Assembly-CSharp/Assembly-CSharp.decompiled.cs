using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using AkilliMum.Standard.Mirror;
using CaptureBodySDK;
using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Plugins;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using GData;
using HutongGames.PlayMaker;
using HutongGames.PlayMaker.TweenEnums;
using Il2CppDummyDll;
using Mathos.Parser;
using Models;
using Newtonsoft.Json.Linq;
using Pico.Platform.Models;
using PlayMaker.ConditionalExpression;
using RootMotion.FinalIK;
using TMPro;
using UniHumanoid;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Controls;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Interaction.Toolkit;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class Action_Shapes : FsmStateAction
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CameraShade mainCameraShade;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Shade[] _cshades;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool findMirror;

	[Token(Token = "0x17000001")]
	public GameObject cmaera
	{
		[Token(Token = "0x6000001")]
		[Address(RVA = "0xDFDC04", Offset = "0xDFDC04", VA = "0xDFDC04")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xDFDC64", Offset = "0xDFDC64", VA = "0xDFDC64", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xDFDD0C", Offset = "0xDFDD0C", VA = "0xDFDD0C", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xDFDF68", Offset = "0xDFDF68", VA = "0xDFDF68")]
	public Action_Shapes()
	{
	}
}
[Token(Token = "0x2000003")]
public class Pxr_Input : ENormalInput
{
	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public InputActionAsset inputAction;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private InputAction _menuInputAction;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private InputAction _triggerInputAction;

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xDFDF70", Offset = "0xDFDF70", VA = "0xDFDF70")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xDFE140", Offset = "0xDFE140", VA = "0xDFE140")]
	public void OnMenuClick(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xDFE154", Offset = "0xDFE154", VA = "0xDFE154")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xDFE234", Offset = "0xDFE234", VA = "0xDFE234", Slot = "10")]
	public override void ControllerImpulse()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xDFE26C", Offset = "0xDFE26C", VA = "0xDFE26C")]
	public void OnRightTrigger(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xDFE2BC", Offset = "0xDFE2BC", VA = "0xDFE2BC")]
	public Pxr_Input()
	{
	}
}
[Token(Token = "0x2000004")]
public class TeleportationController : MonoBehaviour
{
	[Token(Token = "0x2000005")]
	public enum ControllerType
	{
		[Token(Token = "0x4000012")]
		RightHand,
		[Token(Token = "0x4000013")]
		LeftHand
	}

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool TeleportIsActive;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ControllerType targetController;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputActionAsset inputAction;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public XRRayInteractor rayInteractor;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TeleportationProvider teleportationProvider;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private InputAction _thumbstickInputAction;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private InputAction _teleportActivate;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private InputAction _teleportCancel;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public XRInteractorLineVisual leftVisual;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 lastHit;

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xDFE2C4", Offset = "0xDFE2C4", VA = "0xDFE2C4")]
	private void Start()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xDFE64C", Offset = "0xDFE64C", VA = "0xDFE64C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xDFE72C", Offset = "0xDFE72C", VA = "0xDFE72C")]
	private void Update()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xDFE9F8", Offset = "0xDFE9F8", VA = "0xDFE9F8")]
	private void OnTeleportActivate(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xDFEAA0", Offset = "0xDFEAA0", VA = "0xDFEAA0")]
	private void OnTeleportCancel(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xDFE8F8", Offset = "0xDFE8F8", VA = "0xDFE8F8")]
	private void SetTeleport(bool isActive)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xDFEB60", Offset = "0xDFEB60", VA = "0xDFEB60")]
	public TeleportationController()
	{
	}
}
[Token(Token = "0x2000006")]
[ActionCategory("GVR")]
public class Action_setBody : FsmStateAction
{
	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 neckPosition;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float nomalReloHight;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float begOffset;

	[Token(Token = "0x17000002")]
	private bool isLcal
	{
		[Token(Token = "0x6000012")]
		[Address(RVA = "0xDFEBC0", Offset = "0xDFEBC0", VA = "0xDFEBC0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000003")]
	public float headHeight
	{
		[Token(Token = "0x6000013")]
		[Address(RVA = "0xDFEC20", Offset = "0xDFEC20", VA = "0xDFEC20")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000014")]
		[Address(RVA = "0xDFEC80", Offset = "0xDFEC80", VA = "0xDFEC80")]
		set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public float headForward
	{
		[Token(Token = "0x6000015")]
		[Address(RVA = "0xDFECEC", Offset = "0xDFECEC", VA = "0xDFECEC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000016")]
		[Address(RVA = "0xDFED4C", Offset = "0xDFED4C", VA = "0xDFED4C")]
		set
		{
		}
	}

	[Token(Token = "0x17000005")]
	public Vector3 rightArmOffset
	{
		[Token(Token = "0x6000017")]
		[Address(RVA = "0xDFEDB8", Offset = "0xDFEDB8", VA = "0xDFEDB8")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000018")]
		[Address(RVA = "0xDFEE18", Offset = "0xDFEE18", VA = "0xDFEE18")]
		set
		{
		}
	}

	[Token(Token = "0x17000006")]
	public float armLength
	{
		[Token(Token = "0x6000019")]
		[Address(RVA = "0xDFEE98", Offset = "0xDFEE98", VA = "0xDFEE98")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600001A")]
		[Address(RVA = "0xDFEEF8", Offset = "0xDFEEF8", VA = "0xDFEEF8")]
		set
		{
		}
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xDFEF64", Offset = "0xDFEF64", VA = "0xDFEF64", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xDFF074", Offset = "0xDFF074", VA = "0xDFF074")]
	public Action_setBody()
	{
	}
}
[Token(Token = "0x2000007")]
[ActionCategory("GVR")]
public class Action_setModelLaber : FsmStateAction
{
	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SpawnPoint spawnPoint;

	[Token(Token = "0x17000007")]
	private bool isFullBody
	{
		[Token(Token = "0x600001D")]
		[Address(RVA = "0xDFF088", Offset = "0xDFF088", VA = "0xDFF088")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xDFF0E8", Offset = "0xDFF0E8", VA = "0xDFF0E8", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xDFF104", Offset = "0xDFF104", VA = "0xDFF104")]
	private void LoadShouBingModel()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xDFF25C", Offset = "0xDFF25C", VA = "0xDFF25C")]
	public Action_setModelLaber()
	{
	}
}
[Token(Token = "0x2000008")]
[ActionCategory("GVR")]
public class Action_Simulate6Dof : FsmStateAction
{
	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool inited;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 lasthanBasepos;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 lastRootPosition;

	[Token(Token = "0x17000008")]
	public Transform headBase
	{
		[Token(Token = "0x6000021")]
		[Address(RVA = "0xDFF264", Offset = "0xDFF264", VA = "0xDFF264")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000009")]
	public Transform sdkBase
	{
		[Token(Token = "0x6000022")]
		[Address(RVA = "0xDFF2D0", Offset = "0xDFF2D0", VA = "0xDFF2D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000A")]
	public Vector3 handRotFix
	{
		[Token(Token = "0x6000023")]
		[Address(RVA = "0xDFF33C", Offset = "0xDFF33C", VA = "0xDFF33C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700000B")]
	public Transform inputRoot
	{
		[Token(Token = "0x6000024")]
		[Address(RVA = "0xDFF39C", Offset = "0xDFF39C", VA = "0xDFF39C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000C")]
	public Transform inputHead
	{
		[Token(Token = "0x6000025")]
		[Address(RVA = "0xDFF408", Offset = "0xDFF408", VA = "0xDFF408")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000D")]
	public Transform input_l_Hand
	{
		[Token(Token = "0x6000026")]
		[Address(RVA = "0xDFF474", Offset = "0xDFF474", VA = "0xDFF474")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000E")]
	public Transform input_r_Hand
	{
		[Token(Token = "0x6000027")]
		[Address(RVA = "0xDFF4E0", Offset = "0xDFF4E0", VA = "0xDFF4E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000F")]
	public Vector3 neckPosition
	{
		[Token(Token = "0x6000028")]
		[Address(RVA = "0xDFF54C", Offset = "0xDFF54C", VA = "0xDFF54C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000010")]
	public float headLength
	{
		[Token(Token = "0x6000029")]
		[Address(RVA = "0xDFF5AC", Offset = "0xDFF5AC", VA = "0xDFF5AC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xDFF60C", Offset = "0xDFF60C", VA = "0xDFF60C", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xDFF614", Offset = "0xDFF614", VA = "0xDFF614", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xDFF9A0", Offset = "0xDFF9A0", VA = "0xDFF9A0")]
	public Action_Simulate6Dof()
	{
	}
}
[Token(Token = "0x2000009")]
public class ClickControl : MonoBehaviour
{
	[Token(Token = "0x200000A")]
	[CompilerGenerated]
	private sealed class <WaitforColliderEnable>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoxCollider g;

		[Token(Token = "0x17000011")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600003E")]
			[Address(RVA = "0xE0126C", Offset = "0xE0126C", VA = "0xE0126C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000012")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000040")]
			[Address(RVA = "0xE012B4", Offset = "0xE012B4", VA = "0xE012B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600003B")]
		[Address(RVA = "0xE01094", Offset = "0xE01094", VA = "0xE01094")]
		[DebuggerHidden]
		public <WaitforColliderEnable>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600003C")]
		[Address(RVA = "0xE01178", Offset = "0xE01178", VA = "0xE01178", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600003D")]
		[Address(RVA = "0xE0117C", Offset = "0xE0117C", VA = "0xE0117C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600003F")]
		[Address(RVA = "0xE01274", Offset = "0xE01274", VA = "0xE01274", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int MaxDistance;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float HitInterval;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool OnlyMobile;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PlatformControl _control;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _hitTimeout;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string clickEffect;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject _clickEffectItem;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject CurrentHitObj;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PlayMakerFSM lastTouch;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float checkTimeout;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static GameObject LastHitObj;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xDFF9A8", Offset = "0xDFF9A8", VA = "0xDFF9A8")]
	private void Start()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xDFFA74", Offset = "0xDFFA74", VA = "0xDFFA74")]
	private void Update()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xDFFCC8", Offset = "0xDFFCC8", VA = "0xDFFCC8")]
	private bool CheckKey()
	{
		return default(bool);
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xDFFE90", Offset = "0xDFFE90", VA = "0xDFFE90")]
	private void FireAtEditor()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xE005CC", Offset = "0xE005CC", VA = "0xE005CC")]
	private void FireByHand(Transform hand, bool keyUp)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xE009C8", Offset = "0xE009C8", VA = "0xE009C8")]
	private void CheckTouchPer(Transform hand, float checkInterval = 0.3f)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xE00B38", Offset = "0xE00B38", VA = "0xE00B38")]
	private PlayMakerFSM GetTouchedFSM(Transform hand)
	{
		return null;
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xE002EC", Offset = "0xE002EC", VA = "0xE002EC")]
	private void FireByTouch()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xE00880", Offset = "0xE00880", VA = "0xE00880")]
	private void WhenHit(RaycastHit hit, bool keyUp)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xE00B00", Offset = "0xE00B00", VA = "0xE00B00")]
	private void WhenHit(GameObject obj, bool keyUp)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xE01020", Offset = "0xE01020", VA = "0xE01020")]
	[IteratorStateMachine(typeof(<WaitforColliderEnable>d__20))]
	private IEnumerator WaitforColliderEnable(BoxCollider g)
	{
		return null;
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xE00C98", Offset = "0xE00C98", VA = "0xE00C98")]
	private void WhenHitObj(GameObject obj, bool keyUp)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xE010BC", Offset = "0xE010BC", VA = "0xE010BC")]
	public ClickControl()
	{
	}
}
[Token(Token = "0x200000B")]
public class SyncHandle : MonoBehaviour
{
	[Token(Token = "0x6000041")]
	[Address(RVA = "0xE012BC", Offset = "0xE012BC", VA = "0xE012BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xE013D0", Offset = "0xE013D0", VA = "0xE013D0")]
	public SyncHandle()
	{
	}
}
[Token(Token = "0x200000C")]
public class Action_ControllerVib : FsmStateAction
{
	[Token(Token = "0x6000043")]
	[Address(RVA = "0xE013D8", Offset = "0xE013D8", VA = "0xE013D8", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xE01450", Offset = "0xE01450", VA = "0xE01450")]
	public Action_ControllerVib()
	{
	}
}
[Token(Token = "0x200000D")]
public class Action_ReloadHand : FsmStateAction
{
	[Token(Token = "0x17000013")]
	private bool IS6dof
	{
		[Token(Token = "0x6000045")]
		[Address(RVA = "0xE01458", Offset = "0xE01458", VA = "0xE01458")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xE014B8", Offset = "0xE014B8", VA = "0xE014B8", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xE0154C", Offset = "0xE0154C", VA = "0xE0154C")]
	public void OnState(string result)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xE01624", Offset = "0xE01624", VA = "0xE01624")]
	public Action_ReloadHand()
	{
	}
}
[Token(Token = "0x200000E")]
public class AudioController : GBehaviour
{
	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource curAudio;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioClip clip_delay;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioClip clip_nomal;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Animator handAnima;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AudioClip clip_one;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float time;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float currentTime;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool isLocal;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool finished;

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xE0162C", Offset = "0xE0162C", VA = "0xE0162C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xE016E0", Offset = "0xE016E0", VA = "0xE016E0", Slot = "6")]
	public override void Run()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xE01758", Offset = "0xE01758", VA = "0xE01758")]
	private new void Start()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xE016FC", Offset = "0xE016FC", VA = "0xE016FC")]
	public void GuZhang()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xE018B4", Offset = "0xE018B4", VA = "0xE018B4")]
	public void PlayAudio()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xE01F44", Offset = "0xE01F44", VA = "0xE01F44")]
	private void Update()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xE01F48", Offset = "0xE01F48", VA = "0xE01F48")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xE01FD8", Offset = "0xE01FD8", VA = "0xE01FD8")]
	public AudioController()
	{
	}
}
[Token(Token = "0x200000F")]
public class FlickeringLight : MonoBehaviour
{
	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light flickeringLight;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] smoothing;

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xE01FF0", Offset = "0xE01FF0", VA = "0xE01FF0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xE02040", Offset = "0xE02040", VA = "0xE02040")]
	private void Update()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xE02128", Offset = "0xE02128", VA = "0xE02128")]
	public FlickeringLight()
	{
	}
}
[Token(Token = "0x2000010")]
public class Sparkler : MonoBehaviour
{
	[Token(Token = "0x2000011")]
	[CompilerGenerated]
	private sealed class <Fuse>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400003D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sparkler <>4__this;

		[Token(Token = "0x17000014")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600005B")]
			[Address(RVA = "0xE02778", Offset = "0xE02778", VA = "0xE02778", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000015")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600005D")]
			[Address(RVA = "0xE027C0", Offset = "0xE027C0", VA = "0xE027C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000058")]
		[Address(RVA = "0xE024B4", Offset = "0xE024B4", VA = "0xE024B4")]
		[DebuggerHidden]
		public <Fuse>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000059")]
		[Address(RVA = "0xE024EC", Offset = "0xE024EC", VA = "0xE024EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600005A")]
		[Address(RVA = "0xE024F0", Offset = "0xE024F0", VA = "0xE024F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600005C")]
		[Address(RVA = "0xE02780", Offset = "0xE02780", VA = "0xE02780", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject sparklerFX;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject mainFX;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject sparklerMesh;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem smokeParticles;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject burnGlowTop;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject burnGlowBottom;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float offset;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int MatchLit;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float burnGlowScale;

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xE0218C", Offset = "0xE0218C", VA = "0xE0218C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xE0243C", Offset = "0xE0243C", VA = "0xE0243C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xE02440", Offset = "0xE02440", VA = "0xE02440")]
	[IteratorStateMachine(typeof(<Fuse>d__11))]
	private IEnumerator Fuse()
	{
		return null;
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xE024DC", Offset = "0xE024DC", VA = "0xE024DC")]
	public Sparkler()
	{
	}
}
[Token(Token = "0x2000012")]
[ActionCategory("GVR")]
public class Action_CheckNet : FsmStateAction
{
	[StructLayout(3)]
	[Token(Token = "0x2000013")]
	[CompilerGenerated]
	private struct <OnEnter>d__1 : IAsyncStateMachine
	{
		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action_CheckNet <>4__this;

		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private object <>u__1;

		[Token(Token = "0x6000062")]
		[Address(RVA = "0xE028AC", Offset = "0xE028AC", VA = "0xE028AC", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000063")]
		[Address(RVA = "0xE02B80", Offset = "0xE02B80", VA = "0xE02B80", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private PlayMakerFSM fsm;

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xE027C8", Offset = "0xE027C8", VA = "0xE027C8", Slot = "32")]
	[AsyncStateMachine(typeof(<OnEnter>d__1))]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xE02880", Offset = "0xE02880", VA = "0xE02880")]
	public bool CheckNet()
	{
		return default(bool);
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xE0289C", Offset = "0xE0289C", VA = "0xE0289C")]
	public Action_CheckNet()
	{
	}
}
[Token(Token = "0x2000014")]
[ActionCategory("GVR")]
public class Action_GetCode : FsmStateAction
{
	[StructLayout(3)]
	[Token(Token = "0x2000015")]
	[CompilerGenerated]
	private struct <CheckBind>d__7 : IAsyncStateMachine
	{
		[Token(Token = "0x400004A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action_GetCode <>4__this;

		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter<JToken> <>u__1;

		[Token(Token = "0x6000069")]
		[Address(RVA = "0xE02E10", Offset = "0xE02E10", VA = "0xE02E10", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0xE0311C", Offset = "0xE0311C", VA = "0xE0311C", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[StructLayout(3)]
	[Token(Token = "0x2000016")]
	[CompilerGenerated]
	private struct <GetDataToken>d__8 : IAsyncStateMachine
	{
		[Token(Token = "0x400004E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x400004F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x4000050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action_GetCode <>4__this;

		[Token(Token = "0x4000051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter<JToken> <>u__1;

		[Token(Token = "0x600006B")]
		[Address(RVA = "0xE03128", Offset = "0xE03128", VA = "0xE03128", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x600006C")]
		[Address(RVA = "0xE037A0", Offset = "0xE037A0", VA = "0xE037A0", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text codetxt;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float checkouTimeOut;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float ctime;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string url;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string url1;

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xE02B8C", Offset = "0xE02B8C", VA = "0xE02B8C", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xE02C60", Offset = "0xE02C60", VA = "0xE02C60", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xE02CCC", Offset = "0xE02CCC", VA = "0xE02CCC")]
	[AsyncStateMachine(typeof(<CheckBind>d__7))]
	private void CheckBind()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xE02BA8", Offset = "0xE02BA8", VA = "0xE02BA8")]
	[AsyncStateMachine(typeof(<GetDataToken>d__8))]
	private void GetDataToken()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xE02D84", Offset = "0xE02D84", VA = "0xE02D84")]
	public Action_GetCode()
	{
	}
}
[Token(Token = "0x2000017")]
[ActionCategory("GVR")]
public class Action_UserInfo : FsmStateAction
{
	[StructLayout(3)]
	[Token(Token = "0x2000018")]
	[CompilerGenerated]
	private struct <GetBindData>d__5 : IAsyncStateMachine
	{
		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action_UserInfo <>4__this;

		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter<JToken> <>u__1;

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <unick>5__2;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TaskAwaiter<Texture2D> <>u__2;

		[Token(Token = "0x6000071")]
		[Address(RVA = "0xE039FC", Offset = "0xE039FC", VA = "0xE039FC", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000072")]
		[Address(RVA = "0xE03F80", Offset = "0xE03F80", VA = "0xE03F80", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RawImage uIcon;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text uName;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject ok;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string url;

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xE037AC", Offset = "0xE037AC", VA = "0xE037AC", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xE03898", Offset = "0xE03898", VA = "0xE03898")]
	[AsyncStateMachine(typeof(<GetBindData>d__5))]
	private void GetBindData()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xE03950", Offset = "0xE03950", VA = "0xE03950")]
	public void GoToGameWorld(GameObject go)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xE039A4", Offset = "0xE039A4", VA = "0xE039A4")]
	public Action_UserInfo()
	{
	}
}
[Token(Token = "0x2000019")]
[ActionCategory("GVR")]
public class Action_UserLogin : FsmStateAction
{
	[StructLayout(3)]
	[Token(Token = "0x200001A")]
	[CompilerGenerated]
	private struct <CheckBind>d__2 : IAsyncStateMachine
	{
		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action_UserLogin <>4__this;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private object <>u__1;

		[Token(Token = "0x4000061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TaskAwaiter<JToken> <>u__2;

		[Token(Token = "0x6000076")]
		[Address(RVA = "0xE0409C", Offset = "0xE0409C", VA = "0xE0409C", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000077")]
		[Address(RVA = "0xE04540", Offset = "0xE04540", VA = "0xE04540", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string url;

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xE03F8C", Offset = "0xE03F8C", VA = "0xE03F8C", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xE03F90", Offset = "0xE03F90", VA = "0xE03F90")]
	[AsyncStateMachine(typeof(<CheckBind>d__2))]
	private void CheckBind()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xE04044", Offset = "0xE04044", VA = "0xE04044")]
	public Action_UserLogin()
	{
	}
}
[Token(Token = "0x200001B")]
[ActionCategory("GVR")]
public class Action_yinsi : FsmStateAction
{
	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject arrowUp;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject arrowDown;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject agree;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject dissagree;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform content;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float oneduration;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float fulluration;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject yinsi;

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xE0454C", Offset = "0xE0454C", VA = "0xE0454C", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xE045F4", Offset = "0xE045F4", VA = "0xE045F4")]
	public void loadYinsi()
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xE04758", Offset = "0xE04758", VA = "0xE04758")]
	public void Addlinsener()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xE04AF8", Offset = "0xE04AF8", VA = "0xE04AF8")]
	public void AgreeFocus(GameObject go)
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xE04BA4", Offset = "0xE04BA4", VA = "0xE04BA4")]
	public void AgreeLeave(GameObject go)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xE04C50", Offset = "0xE04C50", VA = "0xE04C50")]
	public void DisAgreeFocus(GameObject go)
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xE04D14", Offset = "0xE04D14", VA = "0xE04D14")]
	public void DisAgreeLeave(GameObject go)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xE04DC0", Offset = "0xE04DC0", VA = "0xE04DC0")]
	public void AgreeMe(GameObject go)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xE04E6C", Offset = "0xE04E6C", VA = "0xE04E6C")]
	public void DissAgreeMe(GameObject go)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xE04E74", Offset = "0xE04E74", VA = "0xE04E74")]
	public void SetArrowFocus(GameObject go)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xE04EF0", Offset = "0xE04EF0", VA = "0xE04EF0")]
	public void SetArrowLeave(GameObject go)
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xE04F64", Offset = "0xE04F64", VA = "0xE04F64")]
	public void SetArrowClick(GameObject go)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xE0515C", Offset = "0xE0515C", VA = "0xE0515C")]
	public void SetArrowClickUp(GameObject go)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xE04FE8", Offset = "0xE04FE8", VA = "0xE04FE8")]
	public void SetContent(Vector2 pos)
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xE051DC", Offset = "0xE051DC", VA = "0xE051DC")]
	public Action_yinsi()
	{
	}
}
[Token(Token = "0x200001D")]
public class LightMapData : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200001E")]
	public struct RendererInfo
	{
		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Renderer renderer;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int lightmapIndex;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector4 lightmapOffsetScale;
	}

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public RendererInfo m_RendererInfo;

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xE05228", Offset = "0xE05228", VA = "0xE05228")]
	public void GetInfo()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xE052FC", Offset = "0xE052FC", VA = "0xE052FC")]
	public LightMapData()
	{
	}
}
[Serializable]
[Token(Token = "0x200001F")]
public class LightMapDataContainerObject : ScriptableObject
{
	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int[] lightmapIndexes;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector4[] lightmapOffsetScales;

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xE05304", Offset = "0xE05304", VA = "0xE05304")]
	public LightMapDataContainerObject()
	{
	}
}
[Token(Token = "0x2000020")]
[ExecuteInEditMode]
public class LightmappingManager : MonoBehaviour
{
	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Renderer[] sceneRenderers;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LightMapDataContainerObject lighmapDataContainer;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public Texture2D[] lightMapTexturesFar;

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xE0530C", Offset = "0xE0530C", VA = "0xE0530C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xE0547C", Offset = "0xE0547C", VA = "0xE0547C")]
	public void SetLightMapTextures()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xE05324", Offset = "0xE05324", VA = "0xE05324")]
	public void SetLightMapData()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xE055D8", Offset = "0xE055D8", VA = "0xE055D8")]
	public LightmappingManager()
	{
	}
}
[Token(Token = "0x2000021")]
public class PrefabLightmapData : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000022")]
	private struct RendererInfo
	{
		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Renderer renderer;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int lightmapIndex;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector4 lightmapOffsetScale;
	}

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RendererInfo[] m_RendererInfo;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Texture2D[] m_Lightmaps;

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xE055E0", Offset = "0xE055E0", VA = "0xE055E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xE05790", Offset = "0xE05790", VA = "0xE05790")]
	private static void ApplyRendererInfo(RendererInfo[] infos, int lightmapOffsetIndex)
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xE05840", Offset = "0xE05840", VA = "0xE05840")]
	public PrefabLightmapData()
	{
	}
}
[Token(Token = "0x2000023")]
public class DynamicBoneDemo1 : MonoBehaviour
{
	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_Player;

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xE05848", Offset = "0xE05848", VA = "0xE05848")]
	private void Update()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xE0598C", Offset = "0xE0598C", VA = "0xE0598C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xE05CAC", Offset = "0xE05CAC", VA = "0xE05CAC")]
	public DynamicBoneDemo1()
	{
	}
}
[Token(Token = "0x2000024")]
[AddComponentMenu("Dynamic Bone/Dynamic Bone")]
public class DynamicBone : MonoBehaviour
{
	[Token(Token = "0x2000025")]
	public enum UpdateMode
	{
		[Token(Token = "0x400009B")]
		Normal,
		[Token(Token = "0x400009C")]
		AnimatePhysics,
		[Token(Token = "0x400009D")]
		UnscaledTime
	}

	[Token(Token = "0x2000026")]
	public enum FreezeAxis
	{
		[Token(Token = "0x400009F")]
		None,
		[Token(Token = "0x40000A0")]
		X,
		[Token(Token = "0x40000A1")]
		Y,
		[Token(Token = "0x40000A2")]
		Z
	}

	[Token(Token = "0x2000027")]
	private class Particle
	{
		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform m_Transform;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_ParentIndex;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_Damping;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_Elasticity;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_Stiffness;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_Inert;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_Radius;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_BoneLength;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 m_Position;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 m_PrevPosition;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 m_EndOffset;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 m_InitLocalPosition;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion m_InitLocalRotation;

		[Token(Token = "0x60000AF")]
		[Address(RVA = "0xE07F38", Offset = "0xE07F38", VA = "0xE07F38")]
		public Particle()
		{
		}
	}

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m_Root;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_UpdateRate;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UpdateMode m_UpdateMode;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	public float m_Damping;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve m_DampingDistrib;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 1f)]
	public float m_Elasticity;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve m_ElasticityDistrib;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Range(0f, 1f)]
	public float m_Stiffness;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve m_StiffnessDistrib;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Range(0f, 1f)]
	public float m_Inert;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve m_InertDistrib;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float m_Radius;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve m_RadiusDistrib;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float m_EndLength;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector3 m_EndOffset;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector3 m_Gravity;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Vector3 m_Force;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public List<DynamicBoneColliderBase> m_Colliders;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<Transform> m_Exclusions;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public FreezeAxis m_FreezeAxis;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public bool m_DistantDisable;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Transform m_ReferenceObject;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float m_DistanceToObject;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector3 m_LocalGravity;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 m_ObjectMove;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 m_ObjectPrevPosition;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float m_BoneTotalLength;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float m_ObjectScale;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float m_Time;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float m_Weight;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool m_DistantDisabled;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private List<Particle> m_Particles;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xE05CB4", Offset = "0xE05CB4", VA = "0xE05CB4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xE05E24", Offset = "0xE05E24", VA = "0xE05E24")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xE05E78", Offset = "0xE05E78", VA = "0xE05E78")]
	private void Update()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xE05EA8", Offset = "0xE05EA8", VA = "0xE05EA8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xE05E54", Offset = "0xE05E54", VA = "0xE05E54")]
	private void PreUpdate()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xE05EF8", Offset = "0xE05EF8", VA = "0xE05EF8")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xE06480", Offset = "0xE06480", VA = "0xE06480")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xE06484", Offset = "0xE06484", VA = "0xE06484")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xE06488", Offset = "0xE06488", VA = "0xE06488")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xE06534", Offset = "0xE06534", VA = "0xE06534")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xE066C4", Offset = "0xE066C4", VA = "0xE066C4")]
	public void SetWeight(float w)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xE06714", Offset = "0xE06714", VA = "0xE06714")]
	public float GetWeight()
	{
		return default(float);
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xE06070", Offset = "0xE06070", VA = "0xE06070")]
	private void UpdateDynamicBones(float t)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xE05CB8", Offset = "0xE05CB8", VA = "0xE05CB8")]
	private void SetupParticles()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xE0769C", Offset = "0xE0769C", VA = "0xE0769C")]
	private void AppendParticles(Transform b, int parentIndex, float boneLength)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xE07C7C", Offset = "0xE07C7C", VA = "0xE07C7C")]
	public void UpdateParameters()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xE06234", Offset = "0xE06234", VA = "0xE06234")]
	private void InitTransforms()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xE06338", Offset = "0xE06338", VA = "0xE06338")]
	private void ResetParticlesPosition()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xE0671C", Offset = "0xE0671C", VA = "0xE0671C")]
	private void UpdateParticles1()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xE06980", Offset = "0xE06980", VA = "0xE06980")]
	private void UpdateParticles2()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xE06F9C", Offset = "0xE06F9C", VA = "0xE06F9C")]
	private void SkipUpdateParticles()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xE08014", Offset = "0xE08014", VA = "0xE08014")]
	private static Vector3 MirrorVector(Vector3 v, Vector3 axis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xE07440", Offset = "0xE07440", VA = "0xE07440")]
	private void ApplyParticlesToTransforms()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xE08048", Offset = "0xE08048", VA = "0xE08048")]
	public DynamicBone()
	{
	}
}
[Token(Token = "0x2000028")]
[AddComponentMenu("Dynamic Bone/Dynamic Bone Collider")]
public class DynamicBoneCollider : DynamicBoneColliderBase
{
	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_Radius;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_Height;

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xE081A4", Offset = "0xE081A4", VA = "0xE081A4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xE081BC", Offset = "0xE081BC", VA = "0xE081BC", Slot = "4")]
	public override void Collide(ref Vector3 particlePosition, float particleRadius)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xE083B0", Offset = "0xE083B0", VA = "0xE083B0")]
	private static void OutsideSphere(ref Vector3 particlePosition, float particleRadius, Vector3 sphereCenter, float sphereRadius)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xE08410", Offset = "0xE08410", VA = "0xE08410")]
	private static void InsideSphere(ref Vector3 particlePosition, float particleRadius, Vector3 sphereCenter, float sphereRadius)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xE08468", Offset = "0xE08468", VA = "0xE08468")]
	private static void OutsideCapsule(ref Vector3 particlePosition, float particleRadius, Vector3 capsuleP0, Vector3 capsuleP1, float capsuleRadius)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xE085DC", Offset = "0xE085DC", VA = "0xE085DC")]
	private static void InsideCapsule(ref Vector3 particlePosition, float particleRadius, Vector3 capsuleP0, Vector3 capsuleP1, float capsuleRadius)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xE08738", Offset = "0xE08738", VA = "0xE08738")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xE088D4", Offset = "0xE088D4", VA = "0xE088D4")]
	public DynamicBoneCollider()
	{
	}
}
[Token(Token = "0x2000029")]
public class DynamicBoneColliderBase : MonoBehaviour
{
	[Token(Token = "0x200002A")]
	public enum Direction
	{
		[Token(Token = "0x40000B6")]
		X,
		[Token(Token = "0x40000B7")]
		Y,
		[Token(Token = "0x40000B8")]
		Z
	}

	[Token(Token = "0x200002B")]
	public enum Bound
	{
		[Token(Token = "0x40000BA")]
		Outside,
		[Token(Token = "0x40000BB")]
		Inside
	}

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Direction m_Direction;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 m_Center;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Bound m_Bound;

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xE08944", Offset = "0xE08944", VA = "0xE08944", Slot = "4")]
	public virtual void Collide(ref Vector3 particlePosition, float particleRadius)
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xE088E0", Offset = "0xE088E0", VA = "0xE088E0")]
	public DynamicBoneColliderBase()
	{
	}
}
[Token(Token = "0x200002C")]
[AddComponentMenu("Dynamic Bone/Dynamic Bone Plane Collider")]
public class DynamicBonePlaneCollider : DynamicBoneColliderBase
{
	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xE08948", Offset = "0xE08948", VA = "0xE08948")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xE0894C", Offset = "0xE0894C", VA = "0xE0894C", Slot = "4")]
	public override void Collide(ref Vector3 particlePosition, float particleRadius)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xE08AD4", Offset = "0xE08AD4", VA = "0xE08AD4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xE08C34", Offset = "0xE08C34", VA = "0xE08C34")]
	public DynamicBonePlaneCollider()
	{
	}
}
[Serializable]
[Token(Token = "0x200002D")]
public class CalibrateNode
{
	[Token(Token = "0x200002E")]
	public enum Node
	{
		[Token(Token = "0x40000C0")]
		Head,
		[Token(Token = "0x40000C1")]
		Shoulder_Left,
		[Token(Token = "0x40000C2")]
		Shoulder_Right,
		[Token(Token = "0x40000C3")]
		Elbow_Left,
		[Token(Token = "0x40000C4")]
		Elbow_Right,
		[Token(Token = "0x40000C5")]
		Wrist_Left,
		[Token(Token = "0x40000C6")]
		Wrist_Right,
		[Token(Token = "0x40000C7")]
		Hand_Left,
		[Token(Token = "0x40000C8")]
		Hand_Right
	}

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int[] Node2Bone;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Node node;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image image;

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xE08C38", Offset = "0xE08C38", VA = "0xE08C38")]
	public CalibrateNode()
	{
	}
}
[Token(Token = "0x200002F")]
public class CalibrateController : MonoBehaviour
{
	[Token(Token = "0x2000030")]
	private enum CalibratePhase
	{
		[Token(Token = "0x40000DD")]
		Init,
		[Token(Token = "0x40000DE")]
		Begin,
		[Token(Token = "0x40000DF")]
		Ready,
		[Token(Token = "0x40000E0")]
		Calibrating,
		[Token(Token = "0x40000E1")]
		End
	}

	[Token(Token = "0x2000031")]
	public enum CalibrateType
	{
		[Token(Token = "0x40000E3")]
		None,
		[Token(Token = "0x40000E4")]
		Head,
		[Token(Token = "0x40000E5")]
		Body
	}

	[Token(Token = "0x2000032")]
	[CompilerGenerated]
	private sealed class <CountDownCalibrateHead>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CalibrateController <>4__this;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000017")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000E5")]
			[Address(RVA = "0xE0B898", Offset = "0xE0B898", VA = "0xE0B898", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000018")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000E7")]
			[Address(RVA = "0xE0B8E0", Offset = "0xE0B8E0", VA = "0xE0B8E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000E2")]
		[Address(RVA = "0xE0A3A8", Offset = "0xE0A3A8", VA = "0xE0A3A8")]
		[DebuggerHidden]
		public <CountDownCalibrateHead>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x60000E3")]
		[Address(RVA = "0xE0B7BC", Offset = "0xE0B7BC", VA = "0xE0B7BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000E4")]
		[Address(RVA = "0xE0B7C0", Offset = "0xE0B7C0", VA = "0xE0B7C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000E6")]
		[Address(RVA = "0xE0B8A0", Offset = "0xE0B8A0", VA = "0xE0B8A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000034")]
	[CompilerGenerated]
	private sealed class <CalibrateBody>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CalibrateController <>4__this;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000019")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000EE")]
			[Address(RVA = "0xE0BFA0", Offset = "0xE0BFA0", VA = "0xE0BFA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000F0")]
			[Address(RVA = "0xE0BFE8", Offset = "0xE0BFE8", VA = "0xE0BFE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000EB")]
		[Address(RVA = "0xE0B4F8", Offset = "0xE0B4F8", VA = "0xE0B4F8")]
		[DebuggerHidden]
		public <CalibrateBody>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x60000EC")]
		[Address(RVA = "0xE0B93C", Offset = "0xE0B93C", VA = "0xE0B93C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000ED")]
		[Address(RVA = "0xE0B940", Offset = "0xE0B940", VA = "0xE0B940", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000EF")]
		[Address(RVA = "0xE0BFA8", Offset = "0xE0BFA8", VA = "0xE0BFA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CaptureHalfBody captureBody;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RawImage cameraTexture;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RawImage armssplayImage;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RawImage armsliftImage;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RawImage headImage;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text messageText;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public RectTransform countDown;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<CalibrateNode> headNodes;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<CalibrateNode> bodyNodes;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<CalibrateNode> handNodes;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CalibratePhase phase;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private CalibrateType calibrateType;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float waitTime;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Vector3[]> recordBody;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<Vector3[]> recordHandR;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<Vector3[]> recordHandL;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Coroutine calibrateHeanCoroutine;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Sequence textSequence;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Coroutine calibrateBodyCoroutine;

	[Token(Token = "0x17000016")]
	public CalibrateType CurrCalibrateType
	{
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0xE08CE0", Offset = "0xE08CE0", VA = "0xE08CE0")]
		get
		{
			return default(CalibrateType);
		}
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xE08CE8", Offset = "0xE08CE8", VA = "0xE08CE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xE08CEC", Offset = "0xE08CEC", VA = "0xE08CEC")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xE091B4", Offset = "0xE091B4", VA = "0xE091B4")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xE09260", Offset = "0xE09260", VA = "0xE09260")]
	public void StartBodyCalibrate()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xE0971C", Offset = "0xE0971C", VA = "0xE0971C")]
	public void StartHeadCalibrate()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xE0972C", Offset = "0xE0972C", VA = "0xE0972C")]
	public void OnQuitClick()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xE09730", Offset = "0xE09730", VA = "0xE09730")]
	private void Quit()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xE098C8", Offset = "0xE098C8", VA = "0xE098C8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xE09A44", Offset = "0xE09A44", VA = "0xE09A44")]
	private void RecordBodyData()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xE09270", Offset = "0xE09270", VA = "0xE09270")]
	private void SetPhase(CalibratePhase phase)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xE09FF4", Offset = "0xE09FF4", VA = "0xE09FF4")]
	private void StartCalibrate()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xE09FB0", Offset = "0xE09FB0", VA = "0xE09FB0")]
	private void StopCalibrateHead()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xE0A304", Offset = "0xE0A304", VA = "0xE0A304")]
	private void StartCalibrateHead()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xE0A334", Offset = "0xE0A334", VA = "0xE0A334")]
	[IteratorStateMachine(typeof(<CountDownCalibrateHead>d__34))]
	private IEnumerator CountDownCalibrateHead()
	{
		return null;
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xE0A014", Offset = "0xE0A014", VA = "0xE0A014")]
	private void SaveCalibrate()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xE08DE8", Offset = "0xE08DE8", VA = "0xE08DE8")]
	private void SetAllNodeActive(List<CalibrateNode> nodes, bool isActive, bool isFade = true)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xE099A8", Offset = "0xE099A8", VA = "0xE099A8")]
	private bool CheckPosture()
	{
		return default(bool);
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xE0A3FC", Offset = "0xE0A3FC", VA = "0xE0A3FC")]
	private bool CheckJointsInside()
	{
		return default(bool);
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xE0AC4C", Offset = "0xE0AC4C", VA = "0xE0AC4C")]
	private float JointAngle(int parent, int center, int child)
	{
		return default(float);
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xE0AE3C", Offset = "0xE0AE3C", VA = "0xE0AE3C")]
	private bool CheckAngle(float angle, float standard, float offset)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xE0A9EC", Offset = "0xE0A9EC", VA = "0xE0A9EC")]
	private bool CheckNode(List<CalibrateNode> nodes)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xE0A600", Offset = "0xE0A600", VA = "0xE0A600")]
	private bool CheckFace(Image image)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xE0B14C", Offset = "0xE0B14C", VA = "0xE0B14C")]
	private float CalculateIOU(RectInt rect1, RectInt rect2)
	{
		return default(float);
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xE0AE4C", Offset = "0xE0AE4C", VA = "0xE0AE4C")]
	private bool PointInImage(Vector2 pt, Image image)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xE08FC8", Offset = "0xE08FC8", VA = "0xE08FC8")]
	private void ShowMessage(string message)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xE0A164", Offset = "0xE0A164", VA = "0xE0A164")]
	private void StartCalibrateBody()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xE09E10", Offset = "0xE09E10", VA = "0xE09E10")]
	private void StopCalibrateBody()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xE0B378", Offset = "0xE0B378", VA = "0xE0B378")]
	private void ShowCountDown(int count)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xE0B304", Offset = "0xE0B304", VA = "0xE0B304")]
	[IteratorStateMachine(typeof(<CalibrateBody>d__51))]
	private IEnumerator CalibrateBody()
	{
		return null;
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xE0B520", Offset = "0xE0B520", VA = "0xE0B520")]
	private void OnRawHand(Vector3[] data, float[] box, bool right_hand)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xE0B63C", Offset = "0xE0B63C", VA = "0xE0B63C")]
	public CalibrateController()
	{
	}
}
[Token(Token = "0x2000035")]
public class Calibration : MonoBehaviour
{
	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xE0BFF0", Offset = "0xE0BFF0", VA = "0xE0BFF0")]
	public void OnSetFaceBiasButton()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xE0C108", Offset = "0xE0C108", VA = "0xE0C108")]
	public void OnCalibrateButton()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xE0C2D8", Offset = "0xE0C2D8", VA = "0xE0C2D8")]
	public Calibration()
	{
	}
}
[Token(Token = "0x2000036")]
public class CameraView : MonoBehaviour
{
	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isShow;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float cameraViewScale;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RawImage cameraRawImage;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isFocus;

	[Token(Token = "0x1700001B")]
	public bool IsShow
	{
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0xE0C2E0", Offset = "0xE0C2E0", VA = "0xE0C2E0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000F5")]
		[Address(RVA = "0xE0C2E8", Offset = "0xE0C2E8", VA = "0xE0C2E8")]
		set
		{
		}
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xE0C2F4", Offset = "0xE0C2F4", VA = "0xE0C2F4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xE0C2F8", Offset = "0xE0C2F8", VA = "0xE0C2F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xE0C704", Offset = "0xE0C704", VA = "0xE0C704")]
	private void UpdateScale()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xE0C804", Offset = "0xE0C804", VA = "0xE0C804")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xE0C810", Offset = "0xE0C810", VA = "0xE0C810")]
	public CameraView()
	{
	}
}
[Token(Token = "0x2000037")]
public class Main : MonoBehaviour
{
	[Token(Token = "0x2000038")]
	public enum AMode
	{
		[Token(Token = "0x4000108")]
		NA,
		[Token(Token = "0x4000109")]
		LOAD_ONE,
		[Token(Token = "0x400010A")]
		LOAD_ANIM
	}

	[StructLayout(3)]
	[Token(Token = "0x2000039")]
	[CompilerGenerated]
	private struct <checkhand>d__14 : IAsyncStateMachine
	{
		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Main <>4__this;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__2;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private object <>u__1;

		[Token(Token = "0x6000118")]
		[Address(RVA = "0xE0E3F4", Offset = "0xE0E3F4", VA = "0xE0E3F4", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000119")]
		[Address(RVA = "0xE0E730", Offset = "0xE0E730", VA = "0xE0E730", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Main Instance;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string modelBasePath;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string modelName;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AMode mode;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ENormalInput eNormal;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LoadAB load;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isRelayUseDLL;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CameraView cameraView;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public CalibrateController calibrateController;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Button switchModeButton;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private XKAvatar _currentXkAvatar;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float savingDelta;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float moveDelta;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool last1;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool last2;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	private bool savingGroup;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool isWorking;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string[] animData;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int animDataIndex;

	[Token(Token = "0x1700001C")]
	public bool IsShowCamera
	{
		[Token(Token = "0x600010A")]
		[Address(RVA = "0xE0DD74", Offset = "0xE0DD74", VA = "0xE0DD74")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600010B")]
		[Address(RVA = "0xE0DDF8", Offset = "0xE0DDF8", VA = "0xE0DDF8")]
		set
		{
		}
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xE0C82C", Offset = "0xE0C82C", VA = "0xE0C82C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xE0C894", Offset = "0xE0C894", VA = "0xE0C894")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xE0D05C", Offset = "0xE0D05C", VA = "0xE0D05C")]
	[AsyncStateMachine(typeof(<checkhand>d__14))]
	private void checkhand()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xE0D110", Offset = "0xE0D110", VA = "0xE0D110")]
	public void RemoveAvatar()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xE0CC40", Offset = "0xE0CC40", VA = "0xE0CC40")]
	private void _LoadAvatar()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xE0D1B4", Offset = "0xE0D1B4", VA = "0xE0D1B4")]
	private void DoPlay(int index)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xE0D3A8", Offset = "0xE0D3A8", VA = "0xE0D3A8")]
	public void Click1()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xE0D3B0", Offset = "0xE0D3B0", VA = "0xE0D3B0")]
	public void Click2()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xE0D3B8", Offset = "0xE0D3B8", VA = "0xE0D3B8")]
	public void Click3()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xE0D3C0", Offset = "0xE0D3C0", VA = "0xE0D3C0")]
	public void LoadAvatar1()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xE0D41C", Offset = "0xE0D41C", VA = "0xE0D41C")]
	public void LoadAvatar2()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xE0D478", Offset = "0xE0D478", VA = "0xE0D478")]
	private void Update()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xE0D6A4", Offset = "0xE0D6A4", VA = "0xE0D6A4")]
	private void ReplayOneGroup(bool add)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xE0D868", Offset = "0xE0D868", VA = "0xE0D868")]
	private void SaveOneGroup()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xE0C974", Offset = "0xE0C974", VA = "0xE0C974")]
	private int InitSDK()
	{
		return default(int);
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xE0C168", Offset = "0xE0C168", VA = "0xE0C168")]
	public void StartBodyCalibrate()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xE0C050", Offset = "0xE0C050", VA = "0xE0C050")]
	public void StartHeadCalibrate()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xE098C0", Offset = "0xE098C0", VA = "0xE098C0")]
	public void StopCalibrate()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xE0DEA0", Offset = "0xE0DEA0", VA = "0xE0DEA0")]
	public void SwitchMode()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xE0DC24", Offset = "0xE0DC24", VA = "0xE0DC24")]
	public void UpdateSwitchModelButton()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xE0DFE4", Offset = "0xE0DFE4", VA = "0xE0DFE4")]
	public void SaveData()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xE0E17C", Offset = "0xE0E17C", VA = "0xE0E17C")]
	public void Save10Seconds()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xE0CF00", Offset = "0xE0CF00", VA = "0xE0CF00")]
	private void LoadAnim()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xE0CD88", Offset = "0xE0CD88", VA = "0xE0CD88")]
	private void LoadData()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xE0E258", Offset = "0xE0E258", VA = "0xE0E258")]
	public Main()
	{
	}
}
[Token(Token = "0x200003A")]
public enum ModelClass
{
	[Token(Token = "0x4000111")]
	PUBLIC,
	[Token(Token = "0x4000112")]
	DIY,
	[Token(Token = "0x4000113")]
	VRM
}
[Token(Token = "0x200003B")]
public class Model : MonoBehaviour
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SkinnedMeshRenderer face;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string faceBlendShapePrefix;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isOnlyFace;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform head;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float height;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private TargetModel targetModel;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<KeyValuePair<string, float>> overlayExpression;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float overlayExpressionDuration;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Action onExpressionPlayingEnd;

	[Token(Token = "0x1700001D")]
	public ModelClass ModelClass
	{
		[Token(Token = "0x600011A")]
		[Address(RVA = "0xE0E73C", Offset = "0xE0E73C", VA = "0xE0E73C")]
		[CompilerGenerated]
		get
		{
			return default(ModelClass);
		}
		[Token(Token = "0x600011B")]
		[Address(RVA = "0xE0E744", Offset = "0xE0E744", VA = "0xE0E744")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	public TargetModel TargetModel
	{
		[Token(Token = "0x600011C")]
		[Address(RVA = "0xE0E74C", Offset = "0xE0E74C", VA = "0xE0E74C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001F")]
	public bool IsEnableGrip
	{
		[Token(Token = "0x6000123")]
		[Address(RVA = "0xE0EC34", Offset = "0xE0EC34", VA = "0xE0EC34")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000124")]
		[Address(RVA = "0xE0EC68", Offset = "0xE0EC68", VA = "0xE0EC68")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public bool IsEnableGripChangeHand
	{
		[Token(Token = "0x6000125")]
		[Address(RVA = "0xE0EC90", Offset = "0xE0EC90", VA = "0xE0EC90")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000126")]
		[Address(RVA = "0xE0ECC4", Offset = "0xE0ECC4", VA = "0xE0ECC4")]
		set
		{
		}
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xE0E754", Offset = "0xE0E754", VA = "0xE0E754")]
	public void CreateTargetModel(string modelName, string config)
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xE0EA30", Offset = "0xE0EA30", VA = "0xE0EA30")]
	public Transform GetFaceTransform()
	{
		return null;
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xE0EAB8", Offset = "0xE0EAB8", VA = "0xE0EAB8")]
	public Transform GetJoint(int jointId)
	{
		return null;
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xE0EB08", Offset = "0xE0EB08", VA = "0xE0EB08")]
	public Transform GetFingerJoint(bool left, int finger, int index)
	{
		return null;
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xE0EBD4", Offset = "0xE0EBD4", VA = "0xE0EBD4")]
	public void AddGraspable(GripObject gripObject)
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xE0EC08", Offset = "0xE0EC08", VA = "0xE0EC08")]
	public void RemoveGraspable(GripObject gripObject)
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xE0ECEC", Offset = "0xE0ECEC", VA = "0xE0ECEC")]
	public void SetExpression(List<KeyValuePair<string, float>> items, bool isClear = false)
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xE0EF70", Offset = "0xE0EF70", VA = "0xE0EF70")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xE0EF74", Offset = "0xE0EF74", VA = "0xE0EF74")]
	private void UpdateOverlayExpression()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xE0F028", Offset = "0xE0F028", VA = "0xE0F028")]
	public void ShowOverlayExpression(List<KeyValuePair<string, float>> expression, float duration = 1f, [Optional] Action callBack)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xE0F078", Offset = "0xE0F078", VA = "0xE0F078")]
	public Model()
	{
	}
}
[Serializable]
[Token(Token = "0x200003C")]
public class ModelTypeData
{
	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string ID;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Name;

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xE0F088", Offset = "0xE0F088", VA = "0xE0F088")]
	public ModelTypeData()
	{
	}
}
[Serializable]
[Token(Token = "0x200003D")]
public class ModelData
{
	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string ID;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Nickname;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Type;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string ToggleType;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string Asset;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string Icon;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string Config;

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xE0F090", Offset = "0xE0F090", VA = "0xE0F090")]
	public ModelData()
	{
	}
}
[Token(Token = "0x200003E")]
public class ModelMgr
{
	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ModelMgr instance;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int currentModelId;

	[Token(Token = "0x17000021")]
	public static ModelMgr Instance
	{
		[Token(Token = "0x600012E")]
		[Address(RVA = "0xE0F098", Offset = "0xE0F098", VA = "0xE0F098")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000022")]
	public int CurrentModelId
	{
		[Token(Token = "0x600012F")]
		[Address(RVA = "0xE0F0F0", Offset = "0xE0F0F0", VA = "0xE0F0F0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000130")]
		[Address(RVA = "0xE0F0F8", Offset = "0xE0F0F8", VA = "0xE0F0F8")]
		set
		{
		}
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xE0F100", Offset = "0xE0F100", VA = "0xE0F100")]
	public void CreatePublicModelAsync(string id, Transform parent, Action<GameObject, Model> action)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xE0F560", Offset = "0xE0F560", VA = "0xE0F560")]
	private Transform FindNodeByName(string jointNodeName, Transform[] allTransforms)
	{
		return null;
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xE0F5EC", Offset = "0xE0F5EC", VA = "0xE0F5EC")]
	private string FindPath(Transform root, Transform t)
	{
		return null;
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xE0F718", Offset = "0xE0F718", VA = "0xE0F718")]
	public ModelMgr()
	{
	}
}
[Token(Token = "0x200003F")]
public class DriveEngine
{
	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public XBCScene scene;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int inited;

	[Token(Token = "0x17000023")]
	public int RelayErrorCode
	{
		[Token(Token = "0x6000138")]
		[Address(RVA = "0xE0DAE8", Offset = "0xE0DAE8", VA = "0xE0DAE8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000024")]
	public bool IsInited
	{
		[Token(Token = "0x600013A")]
		[Address(RVA = "0xE0E8A4", Offset = "0xE0E8A4", VA = "0xE0E8A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000025")]
	public CaptureHalfBody HalfBody
	{
		[Token(Token = "0x600013B")]
		[Address(RVA = "0xE0F880", Offset = "0xE0F880", VA = "0xE0F880")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000026")]
	public CaptureFace Face
	{
		[Token(Token = "0x600013C")]
		[Address(RVA = "0xE0F89C", Offset = "0xE0F89C", VA = "0xE0F89C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000027")]
	public int MasterCameraIndex
	{
		[Token(Token = "0x600013D")]
		[Address(RVA = "0xE0F8C0", Offset = "0xE0F8C0", VA = "0xE0F8C0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000028")]
	public Texture2D MasterCameraTex
	{
		[Token(Token = "0x600013E")]
		[Address(RVA = "0xE0F8DC", Offset = "0xE0F8DC", VA = "0xE0F8DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000029")]
	public Texture2D[] CameraImages
	{
		[Token(Token = "0x600013F")]
		[Address(RVA = "0xE0F8F8", Offset = "0xE0F8F8", VA = "0xE0F8F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002A")]
	public int CameraImageCount
	{
		[Token(Token = "0x6000140")]
		[Address(RVA = "0xE0F914", Offset = "0xE0F914", VA = "0xE0F914")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700002B")]
	public int CameraDeviceCount
	{
		[Token(Token = "0x6000141")]
		[Address(RVA = "0xE0F930", Offset = "0xE0F930", VA = "0xE0F930")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700002C")]
	public bool IsCriticalError
	{
		[Token(Token = "0x6000145")]
		[Address(RVA = "0xE0F9A0", Offset = "0xE0F9A0", VA = "0xE0F9A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002D")]
	public bool IsSingleMode
	{
		[Token(Token = "0x6000146")]
		[Address(RVA = "0xE0F9BC", Offset = "0xE0F9BC", VA = "0xE0F9BC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000147")]
		[Address(RVA = "0xE0F9D8", Offset = "0xE0F9D8", VA = "0xE0F9D8")]
		set
		{
		}
	}

	[Token(Token = "0x1700002E")]
	public int CheckCode
	{
		[Token(Token = "0x6000148")]
		[Address(RVA = "0xE0F9F8", Offset = "0xE0F9F8", VA = "0xE0F9F8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700002F")]
	public DatumHalfOffline ProcessData
	{
		[Token(Token = "0x6000149")]
		[Address(RVA = "0xE0B124", Offset = "0xE0B124", VA = "0xE0B124")]
		get
		{
			return default(DatumHalfOffline);
		}
	}

	[Token(Token = "0x17000030")]
	public bool IsLockHeadMode
	{
		[Token(Token = "0x6000150")]
		[Address(RVA = "0xE0FA88", Offset = "0xE0FA88", VA = "0xE0FA88")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xE0F790", Offset = "0xE0F790", VA = "0xE0F790")]
	public DriveEngine(bool hasRelay, bool relayUsingDLL)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xE0F824", Offset = "0xE0F824", VA = "0xE0F824")]
	public bool Dispose()
	{
		return default(bool);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xE0F858", Offset = "0xE0F858", VA = "0xE0F858")]
	public int Init(string configFile = "", string companyID = "", string secretKeyFile = "", int deviceCamIndex = 0)
	{
		return default(int);
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xE0F94C", Offset = "0xE0F94C", VA = "0xE0F94C")]
	public string GetCameraDeviceName(int index)
	{
		return null;
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xE0F968", Offset = "0xE0F968", VA = "0xE0F968")]
	public string GetCameraDevicePath(int index)
	{
		return null;
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xE0F984", Offset = "0xE0F984", VA = "0xE0F984")]
	public int FindCameraDeviceIndexByPath(string deviceCamPath)
	{
		return default(int);
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xE0FA14", Offset = "0xE0FA14", VA = "0xE0FA14")]
	public int Update(bool isAsync)
	{
		return default(int);
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xE0FA4C", Offset = "0xE0FA4C", VA = "0xE0FA4C")]
	public void Simulate(HalfBodyModel model)
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xE0D9E8", Offset = "0xE0D9E8", VA = "0xE0D9E8")]
	public void SimulateRaw(DatumHalfOffline datum)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xE0E8B4", Offset = "0xE0E8B4", VA = "0xE0E8B4")]
	public TargetModel CreateTargetModelHalf(string avatarName, GameObject target, SkinnedMeshRenderer face, Transform head, string config, bool isOnlyFace = false, string faceBSPrefix = "")
	{
		return null;
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xE0DA28", Offset = "0xE0DA28", VA = "0xE0DA28")]
	public void TargetModelMimic(TargetModel targetModel, bool isOnlyFace = false)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xE0FA50", Offset = "0xE0FA50", VA = "0xE0FA50")]
	public void ToggleHeadMode()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xE0FABC", Offset = "0xE0FABC", VA = "0xE0FABC")]
	public void SetLockHeadMode(bool isLock)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xE0FB14", Offset = "0xE0FB14", VA = "0xE0FB14")]
	public int SwitchDeviceCamera(int cameraIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xE0FB30", Offset = "0xE0FB30", VA = "0xE0FB30")]
	public int SendCameraFrame(Texture2D frameTex)
	{
		return default(int);
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xE0FC24", Offset = "0xE0FC24", VA = "0xE0FC24")]
	public int HandBeginRegister()
	{
		return default(int);
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xE0FC40", Offset = "0xE0FC40", VA = "0xE0FC40")]
	public int HandRegister(string key, float[] quat)
	{
		return default(int);
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xE0FC5C", Offset = "0xE0FC5C", VA = "0xE0FC5C")]
	public int HandEndRegister()
	{
		return default(int);
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xE0FC78", Offset = "0xE0FC78", VA = "0xE0FC78")]
	public int HandVerify(float[] quat, ref Hand_VerifyResult result)
	{
		return default(int);
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xE0FC94", Offset = "0xE0FC94", VA = "0xE0FC94")]
	public bool LoadCalibrate(string calibration)
	{
		return default(bool);
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xE0FCC0", Offset = "0xE0FCC0", VA = "0xE0FCC0")]
	public bool IsFaceOnly()
	{
		return default(bool);
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xE0FCDC", Offset = "0xE0FCDC", VA = "0xE0FCDC")]
	public bool IsFaceMode()
	{
		return default(bool);
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xE0FCF8", Offset = "0xE0FCF8", VA = "0xE0FCF8")]
	public bool SwitchFaceMode()
	{
		return default(bool);
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xE0FD40", Offset = "0xE0FD40", VA = "0xE0FD40")]
	public bool SwitchHalfBodyMode()
	{
		return default(bool);
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xE0FD88", Offset = "0xE0FD88", VA = "0xE0FD88")]
	public void SetAnimationFaceMode(bool isFaceMode)
	{
	}
}
[Token(Token = "0x2000040")]
public enum DrawBoneStyleEnum
{
	[Token(Token = "0x400012C")]
	Normal,
	[Token(Token = "0x400012D")]
	HighLightHead,
	[Token(Token = "0x400012E")]
	HighLightBody
}
[Token(Token = "0x2000041")]
public class SDKMgr
{
	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SDKMgr instance;

	[Token(Token = "0x4000130")]
	private const string CompanyID = "XKDemo";

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string SecretKeyFile;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DriveEngine defaultEngine;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentDeviceCamera;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2[] bodyUVs;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DrawBoneStyleEnum DrawBoneStyle;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool IsRecording;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool isRegistUVCallback;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int masterCameraTexRetainCount;

	[Token(Token = "0x17000031")]
	public static SDKMgr Instance
	{
		[Token(Token = "0x600015E")]
		[Address(RVA = "0xE0FDB8", Offset = "0xE0FDB8", VA = "0xE0FDB8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000032")]
	public Vector2[] BodyUVs
	{
		[Token(Token = "0x600015F")]
		[Address(RVA = "0xE0FE10", Offset = "0xE0FE10", VA = "0xE0FE10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000033")]
	public DriveEngine DefaultEngine
	{
		[Token(Token = "0x6000160")]
		[Address(RVA = "0xE0FE18", Offset = "0xE0FE18", VA = "0xE0FE18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000034")]
	public bool IsInited
	{
		[Token(Token = "0x6000166")]
		[Address(RVA = "0xE0B104", Offset = "0xE0B104", VA = "0xE0B104")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000035")]
	public CaptureHalfBody HalfBody
	{
		[Token(Token = "0x6000167")]
		[Address(RVA = "0xE09DEC", Offset = "0xE09DEC", VA = "0xE09DEC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000036")]
	public CaptureFace Face
	{
		[Token(Token = "0x6000168")]
		[Address(RVA = "0xE0A3D0", Offset = "0xE0A3D0", VA = "0xE0A3D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000037")]
	public int MasterCameraIndex
	{
		[Token(Token = "0x6000169")]
		[Address(RVA = "0xE10014", Offset = "0xE10014", VA = "0xE10014")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000038")]
	public Texture2D MasterCameraTex
	{
		[Token(Token = "0x600016A")]
		[Address(RVA = "0xE10038", Offset = "0xE10038", VA = "0xE10038")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000039")]
	public Texture2D[] CameraImages
	{
		[Token(Token = "0x600016B")]
		[Address(RVA = "0xE1005C", Offset = "0xE1005C", VA = "0xE1005C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003A")]
	public int CameraImageCount
	{
		[Token(Token = "0x600016C")]
		[Address(RVA = "0xE10080", Offset = "0xE10080", VA = "0xE10080")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003B")]
	public int CameraDeviceCount
	{
		[Token(Token = "0x600016D")]
		[Address(RVA = "0xE0DB04", Offset = "0xE0DB04", VA = "0xE0DB04")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003C")]
	public bool IsCriticalError
	{
		[Token(Token = "0x6000170")]
		[Address(RVA = "0xE100C8", Offset = "0xE100C8", VA = "0xE100C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003D")]
	public bool IsSingleMode
	{
		[Token(Token = "0x6000171")]
		[Address(RVA = "0xE100EC", Offset = "0xE100EC", VA = "0xE100EC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000172")]
		[Address(RVA = "0xE10128", Offset = "0xE10128", VA = "0xE10128")]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public int CheckCode
	{
		[Token(Token = "0x6000173")]
		[Address(RVA = "0xE10150", Offset = "0xE10150", VA = "0xE10150")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003F")]
	public DatumHalfOffline ProcessData
	{
		[Token(Token = "0x6000174")]
		[Address(RVA = "0xE09D44", Offset = "0xE09D44", VA = "0xE09D44")]
		get
		{
			return default(DatumHalfOffline);
		}
	}

	[Token(Token = "0x17000040")]
	public bool IsLockHeadMode
	{
		[Token(Token = "0x6000177")]
		[Address(RVA = "0xE101C0", Offset = "0xE101C0", VA = "0xE101C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000041")]
	public int CurrentDeviceCamera
	{
		[Token(Token = "0x6000179")]
		[Address(RVA = "0xE101EC", Offset = "0xE101EC", VA = "0xE101EC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xE0FE20", Offset = "0xE0FE20", VA = "0xE0FE20")]
	public DriveEngine CreateEngine(bool hasRelay, bool relayUsingDLL)
	{
		return null;
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xE0DAB8", Offset = "0xE0DAB8", VA = "0xE0DAB8")]
	public bool Create(bool relayUsingDLL)
	{
		return default(bool);
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xE0FE90", Offset = "0xE0FE90", VA = "0xE0FE90")]
	public bool Destroy()
	{
		return default(bool);
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xE0DB28", Offset = "0xE0DB28", VA = "0xE0DB28")]
	public int Init(string configFile)
	{
		return default(int);
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xE0FEC0", Offset = "0xE0FEC0", VA = "0xE0FEC0")]
	private void FindDeviceCamera()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xE100A4", Offset = "0xE100A4", VA = "0xE100A4")]
	public string GetCameraDeviceName(int index)
	{
		return null;
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xE0FFF0", Offset = "0xE0FFF0", VA = "0xE0FFF0")]
	public string GetCameraDevicePath(int index)
	{
		return null;
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xE10174", Offset = "0xE10174", VA = "0xE10174")]
	public int Update(bool isAsync)
	{
		return default(int);
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xE1018C", Offset = "0xE1018C", VA = "0xE1018C")]
	public void SimulateRaw(DatumHalfOffline datum)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xE101D8", Offset = "0xE101D8", VA = "0xE101D8")]
	public void SetLockHeadMode(bool isLock)
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xE101F4", Offset = "0xE101F4", VA = "0xE101F4")]
	public int SwitchDeviceCamera(int cameraIndex)
	{
		return default(int);
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xE102D4", Offset = "0xE102D4", VA = "0xE102D4")]
	public int SendCameraFrame(Texture2D frameTex)
	{
		return default(int);
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xE102F4", Offset = "0xE102F4", VA = "0xE102F4")]
	public int HandBeginRegister()
	{
		return default(int);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xE10318", Offset = "0xE10318", VA = "0xE10318")]
	public int HandRegister(string key, float[] quat)
	{
		return default(int);
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xE1033C", Offset = "0xE1033C", VA = "0xE1033C")]
	public int HandEndRegister()
	{
		return default(int);
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xE10360", Offset = "0xE10360", VA = "0xE10360")]
	public int HandVerify(float[] quat, ref Hand_VerifyResult result)
	{
		return default(int);
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xE10384", Offset = "0xE10384", VA = "0xE10384")]
	public bool IsFaceOnly()
	{
		return default(bool);
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xE0DE7C", Offset = "0xE0DE7C", VA = "0xE0DE7C")]
	public bool IsFaceMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xE0DFCC", Offset = "0xE0DFCC", VA = "0xE0DFCC")]
	public bool SwitchFaceMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xE0DFB4", Offset = "0xE0DFB4", VA = "0xE0DFB4")]
	public bool SwitchHalfBodyMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xE09DC0", Offset = "0xE09DC0", VA = "0xE09DC0")]
	public Texture2D RetainMasterCameraTexture()
	{
		return null;
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xE098A8", Offset = "0xE098A8", VA = "0xE098A8")]
	public void ReturnMasterCameraTexture()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xE103A8", Offset = "0xE103A8", VA = "0xE103A8")]
	private void ProcessRegistUV()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xE103B8", Offset = "0xE103B8", VA = "0xE103B8")]
	private void RegistOnUVCallback(bool register)
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xE104EC", Offset = "0xE104EC", VA = "0xE104EC")]
	private static Vector2 Uv2Screen(Vector2 uv)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xE10580", Offset = "0xE10580", VA = "0xE10580")]
	private void OnUV(Vector2[] uvs)
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xE09D74", Offset = "0xE09D74", VA = "0xE09D74")]
	public bool IsUVInside(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xE10A70", Offset = "0xE10A70", VA = "0xE10A70")]
	private void DrawLine(Texture2D texture, Vector2[] uvs, int start, int end)
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xE10AD0", Offset = "0xE10AD0", VA = "0xE10AD0")]
	public SDKMgr()
	{
	}
}
[Token(Token = "0x2000042")]
public class BackScreen : MonoBehaviour
{
	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform cameraTransform;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject displayPlane;

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xE11BA8", Offset = "0xE11BA8", VA = "0xE11BA8")]
	private void Start()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xE11BAC", Offset = "0xE11BAC", VA = "0xE11BAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xE11C5C", Offset = "0xE11C5C", VA = "0xE11C5C")]
	public void ShowPicture(Texture texture)
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xE11D40", Offset = "0xE11D40", VA = "0xE11D40")]
	public void ShowMovie(VideoClip videoClip)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xE11DD4", Offset = "0xE11DD4", VA = "0xE11DD4")]
	public BackScreen()
	{
	}
}
[Serializable]
[Token(Token = "0x2000043")]
public class Spots
{
	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform[] spots;

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xE11DDC", Offset = "0xE11DDC", VA = "0xE11DDC")]
	public Spots()
	{
	}
}
[Token(Token = "0x2000044")]
public class Stage : MonoBehaviour
{
	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int avatarNum;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform spotRoot;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Spots[] spotsLists;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public StageLight stageLight;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public StageCamera stageCamera;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float maxRootZ;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float minRootZ;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float bodyRotPitch;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float bodyRotYaw;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform spotDefaultParent;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 spotDefaultLocalPos;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 cameraDefaultLocalPos;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 cameraDefaultLocalAngles;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 cameraDefaultLocalScale;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<XKAvatar> avatars;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject gameBg;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool isDragMouseLeft;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool isDragMouseRight;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Camera currentCamera;

	[Token(Token = "0x17000042")]
	public int AvatarNum
	{
		[Token(Token = "0x6000194")]
		[Address(RVA = "0xE11DE4", Offset = "0xE11DE4", VA = "0xE11DE4")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000043")]
	public Camera CurrentCamera
	{
		[Token(Token = "0x6000196")]
		[Address(RVA = "0xE11DF4", Offset = "0xE11DF4", VA = "0xE11DF4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000044")]
	public XKAvatar MainXkAvatar
	{
		[Token(Token = "0x600019D")]
		[Address(RVA = "0xE128E0", Offset = "0xE128E0", VA = "0xE128E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xE11DEC", Offset = "0xE11DEC", VA = "0xE11DEC")]
	public void SetAvatarNum(int num)
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xE11DFC", Offset = "0xE11DFC", VA = "0xE11DFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xE11EC0", Offset = "0xE11EC0", VA = "0xE11EC0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xE1231C", Offset = "0xE1231C", VA = "0xE1231C")]
	public XKAvatar AddAvatar(int userId)
	{
		return null;
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xE12570", Offset = "0xE12570", VA = "0xE12570")]
	public bool SetAvatarPosIndex(XKAvatar xkAvatar, int posIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xE12660", Offset = "0xE12660", VA = "0xE12660")]
	public XKAvatar GetAvatar(int userId)
	{
		return null;
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xE12744", Offset = "0xE12744", VA = "0xE12744")]
	public void DelAvatar(int userId)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xE1295C", Offset = "0xE1295C", VA = "0xE1295C")]
	public void ResetPosition()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xE12ACC", Offset = "0xE12ACC", VA = "0xE12ACC")]
	public void ResetCamraHeight()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xE12BB0", Offset = "0xE12BB0", VA = "0xE12BB0")]
	public void ResetCamera()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xE12C2C", Offset = "0xE12C2C", VA = "0xE12C2C")]
	public void SetSpotRootParent(Transform transform)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xE12318", Offset = "0xE12318", VA = "0xE12318")]
	public void ResetModel()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xE11EF0", Offset = "0xE11EF0", VA = "0xE11EF0")]
	public void ProcessMouse()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xE12CF0", Offset = "0xE12CF0", VA = "0xE12CF0")]
	public Stage()
	{
	}
}
[Token(Token = "0x2000047")]
[RequireComponent(typeof(Camera))]
public class StageCamera : MonoBehaviour
{
	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float viewHeightMin;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float viewHeightMax;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float viewHeightCurr;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float viewHeightTarget;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float viewHeightVelocity;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float viewRotationCurr;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float viewRotationTarget;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float viewRotationVelocity;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float viewDistanceMin;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float viewDistanceMax;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float viewDistanceCurr;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float viewDistanceTarget;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float viewDistanceVelocity;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Camera _camera;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioListener _audioListener;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool IsHideModelWhenLostFocus;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool isFocus;

	[Token(Token = "0x17000045")]
	public Camera Camera
	{
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0xE12DD4", Offset = "0xE12DD4", VA = "0xE12DD4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000046")]
	private bool HideModelLostFocus
	{
		[Token(Token = "0x60001AD")]
		[Address(RVA = "0xE13064", Offset = "0xE13064", VA = "0xE13064")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000047")]
	public bool EnableCamera
	{
		[Token(Token = "0x60001AF")]
		[Address(RVA = "0xE13090", Offset = "0xE13090", VA = "0xE13090")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001B0")]
		[Address(RVA = "0xE130AC", Offset = "0xE130AC", VA = "0xE130AC")]
		set
		{
		}
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xE12DDC", Offset = "0xE12DDC", VA = "0xE12DDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xE12EAC", Offset = "0xE12EAC", VA = "0xE12EAC")]
	public bool SetViewPosition()
	{
		return default(bool);
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xE12F68", Offset = "0xE12F68", VA = "0xE12F68")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xE13084", Offset = "0xE13084", VA = "0xE13084")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xE1304C", Offset = "0xE1304C", VA = "0xE1304C")]
	public void UpdateCamera()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xE13398", Offset = "0xE13398", VA = "0xE13398")]
	public void SetBackgroundColor(Color color)
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xE13268", Offset = "0xE13268", VA = "0xE13268")]
	private void UpdatePosition()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xE1314C", Offset = "0xE1314C", VA = "0xE1314C")]
	private void UpdateValues()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xE12B88", Offset = "0xE12B88", VA = "0xE12B88")]
	public void SetHeight(float height, bool isMove)
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xE133B4", Offset = "0xE133B4", VA = "0xE133B4")]
	public void AddViewHeight(float delta)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xE133D8", Offset = "0xE133D8", VA = "0xE133D8")]
	public void AddViewRotation(float delta)
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xE13424", Offset = "0xE13424", VA = "0xE13424")]
	public void AddViewDistance(float delta)
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xE12EF4", Offset = "0xE12EF4", VA = "0xE12EF4")]
	public void SetViewTarget(float height, float rotation, float distance)
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xE13448", Offset = "0xE13448", VA = "0xE13448")]
	public StageCamera()
	{
	}
}
[Token(Token = "0x2000048")]
public class StageLight : MonoBehaviour
{
	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Light _light;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float pitch;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float yaw;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float defaultPitch;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float defaultYaw;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float mousePitchSensitivity;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float mouseYawSensitivity;

	[Token(Token = "0x17000048")]
	public bool EnableLight
	{
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0xE13690", Offset = "0xE13690", VA = "0xE13690")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xE136AC", Offset = "0xE136AC", VA = "0xE136AC")]
		set
		{
		}
	}

	[Token(Token = "0x17000049")]
	public Color LightColor
	{
		[Token(Token = "0x60001C0")]
		[Address(RVA = "0xE136CC", Offset = "0xE136CC", VA = "0xE136CC")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60001C1")]
		[Address(RVA = "0xE136E8", Offset = "0xE136E8", VA = "0xE136E8")]
		set
		{
		}
	}

	[Token(Token = "0x1700004A")]
	public float Yaw
	{
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0xE13704", Offset = "0xE13704", VA = "0xE13704")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001C3")]
		[Address(RVA = "0xE1370C", Offset = "0xE1370C", VA = "0xE1370C")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public float Pitch
	{
		[Token(Token = "0x60001C4")]
		[Address(RVA = "0xE137A0", Offset = "0xE137A0", VA = "0xE137A0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001C5")]
		[Address(RVA = "0xE137A8", Offset = "0xE137A8", VA = "0xE137A8")]
		set
		{
		}
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xE13458", Offset = "0xE13458", VA = "0xE13458")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xE134B0", Offset = "0xE134B0", VA = "0xE134B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xE134B4", Offset = "0xE134B4", VA = "0xE134B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xE13718", Offset = "0xE13718", VA = "0xE13718")]
	public void SetRotation(float yaw, float pitch, bool isSave = true)
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xE134B8", Offset = "0xE134B8", VA = "0xE134B8")]
	public void ProcessMouse()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xE12A98", Offset = "0xE12A98", VA = "0xE12A98")]
	public void SetSettingValues()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xE13814", Offset = "0xE13814", VA = "0xE13814")]
	public StageLight()
	{
	}
}
[Token(Token = "0x2000049")]
public class StageMgr
{
	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static StageMgr instance;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<Stage> stages;

	[Token(Token = "0x1700004C")]
	public static StageMgr Instance
	{
		[Token(Token = "0x60001CA")]
		[Address(RVA = "0xE1382C", Offset = "0xE1382C", VA = "0xE1382C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004D")]
	public Stage Default
	{
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0xE137C0", Offset = "0xE137C0", VA = "0xE137C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xE13884", Offset = "0xE13884", VA = "0xE13884")]
	public void CreateDefaultStage()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xE138CC", Offset = "0xE138CC", VA = "0xE138CC")]
	public void CreateStage(string name)
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xE13A70", Offset = "0xE13A70", VA = "0xE13A70")]
	public StageMgr()
	{
	}
}
[Token(Token = "0x200004A")]
public enum AvatarDriverType
{
	[Token(Token = "0x400016E")]
	None,
	[Token(Token = "0x400016F")]
	AI,
	[Token(Token = "0x4000170")]
	Network,
	[Token(Token = "0x4000171")]
	Animation,
	[Token(Token = "0x4000172")]
	Record
}
[Token(Token = "0x200004B")]
public class XKAvatar : MonoBehaviour
{
	[Token(Token = "0x200004C")]
	[CompilerGenerated]
	private sealed class <PlayRecordData>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XKAvatar <>4__this;

		[Token(Token = "0x17000057")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000201")]
			[Address(RVA = "0xE150E8", Offset = "0xE150E8", VA = "0xE150E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000203")]
			[Address(RVA = "0xE15130", Offset = "0xE15130", VA = "0xE15130", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0xE13D84", Offset = "0xE13D84", VA = "0xE13D84")]
		[DebuggerHidden]
		public <PlayRecordData>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xE15024", Offset = "0xE15024", VA = "0xE15024", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0xE15028", Offset = "0xE15028", VA = "0xE15028", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0xE150F0", Offset = "0xE150F0", VA = "0xE150F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AvatarDriverType driverType;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DriveEngine driveEngine;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string modelName;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Model model;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject modelObject;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isPlayRecordPause;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int recordFrameCount;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int recordCurrentFrame;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float playRecordSpeed;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<DatumHalfOffline> halfRaws;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private DatumHalfOffline datum;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private uint frame;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Stage stage;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int userId;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private AudioSource audioSource;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private AudioClip audioClip;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private int audioClipDataPos;

	[Token(Token = "0x1700004E")]
	public TargetModel TargetModel
	{
		[Token(Token = "0x60001D0")]
		[Address(RVA = "0xE13B64", Offset = "0xE13B64", VA = "0xE13B64")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004F")]
	public int UserId
	{
		[Token(Token = "0x60001D1")]
		[Address(RVA = "0xE13BE4", Offset = "0xE13BE4", VA = "0xE13BE4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000050")]
	public bool HasModel
	{
		[Token(Token = "0x60001D2")]
		[Address(RVA = "0xE13BEC", Offset = "0xE13BEC", VA = "0xE13BEC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000051")]
	public DriveEngine Engine
	{
		[Token(Token = "0x60001D7")]
		[Address(RVA = "0xE13EE0", Offset = "0xE13EE0", VA = "0xE13EE0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000052")]
	public Model Model
	{
		[Token(Token = "0x60001D8")]
		[Address(RVA = "0xE13EE8", Offset = "0xE13EE8", VA = "0xE13EE8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000053")]
	public float ModelHeight
	{
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0xE12B0C", Offset = "0xE12B0C", VA = "0xE12B0C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000054")]
	public bool HasAudioSource
	{
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xE14A10", Offset = "0xE14A10", VA = "0xE14A10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000055")]
	public bool IsEnableGrip
	{
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xE14DD4", Offset = "0xE14DD4", VA = "0xE14DD4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xE14E5C", Offset = "0xE14E5C", VA = "0xE14E5C")]
		set
		{
		}
	}

	[Token(Token = "0x17000056")]
	public bool IsEnableGripChangeHand
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xE14EF4", Offset = "0xE14EF4", VA = "0xE14EF4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xE14F7C", Offset = "0xE14F7C", VA = "0xE14F7C")]
		set
		{
		}
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xE13C80", Offset = "0xE13C80", VA = "0xE13C80")]
	public bool PlayRawRecord(List<DatumHalfOffline> halfRaws)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xE13D10", Offset = "0xE13D10", VA = "0xE13D10")]
	[IteratorStateMachine(typeof(<PlayRecordData>d__24))]
	private IEnumerator PlayRecordData()
	{
		return null;
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xE13DAC", Offset = "0xE13DAC", VA = "0xE13DAC")]
	private void PlayerRecordFrame()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xE13E8C", Offset = "0xE13E8C", VA = "0xE13E8C")]
	public bool PlayAnimation(CaptureBodySDK.AnimationClip animationClip)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xE12544", Offset = "0xE12544", VA = "0xE12544")]
	public void Init(Stage stage, int userId)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xE128C8", Offset = "0xE128C8", VA = "0xE128C8")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xE13EF0", Offset = "0xE13EF0", VA = "0xE13EF0")]
	private void DisposeDriveEngine()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xE140B4", Offset = "0xE140B4", VA = "0xE140B4")]
	public Transform GetFaceTransform()
	{
		return null;
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xE140E8", Offset = "0xE140E8", VA = "0xE140E8")]
	public Transform GetJoint(int jointId)
	{
		return null;
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xE14130", Offset = "0xE14130", VA = "0xE14130")]
	public Transform GetFingerJoint(bool left, int finger, int index)
	{
		return null;
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xE14194", Offset = "0xE14194", VA = "0xE14194")]
	public Transform GetHeadJoint()
	{
		return null;
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xE1419C", Offset = "0xE1419C", VA = "0xE1419C")]
	public Transform GetNeckJoint()
	{
		return null;
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xE141A4", Offset = "0xE141A4", VA = "0xE141A4")]
	public Transform GetLeftHandJoint()
	{
		return null;
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xE141AC", Offset = "0xE141AC", VA = "0xE141AC")]
	public Transform GetRightHandJoint()
	{
		return null;
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xE141B4", Offset = "0xE141B4", VA = "0xE141B4")]
	public Transform GetLeftShoulderJoint()
	{
		return null;
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xE141BC", Offset = "0xE141BC", VA = "0xE141BC")]
	public Transform GetRightShoulderJoint()
	{
		return null;
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xE141C4", Offset = "0xE141C4", VA = "0xE141C4")]
	public Transform GetLeftWristJoint()
	{
		return null;
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xE141CC", Offset = "0xE141CC", VA = "0xE141CC")]
	public Transform GetRightWristJoint()
	{
		return null;
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xE141D4", Offset = "0xE141D4", VA = "0xE141D4")]
	public Transform GetLeftElbowJoint()
	{
		return null;
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xE141DC", Offset = "0xE141DC", VA = "0xE141DC")]
	public Transform GetRightElbowJoint()
	{
		return null;
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xE141E4", Offset = "0xE141E4", VA = "0xE141E4")]
	public Transform GetSpineJoint()
	{
		return null;
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xE141EC", Offset = "0xE141EC", VA = "0xE141EC")]
	public Transform GetFirstFingerTipJoint(bool left)
	{
		return null;
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xE141FC", Offset = "0xE141FC", VA = "0xE141FC")]
	public void ClearModel()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xE142F0", Offset = "0xE142F0", VA = "0xE142F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xE14448", Offset = "0xE14448", VA = "0xE14448")]
	public void CreatePublicModelAsync(Action<bool> finishedAction)
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xE14734", Offset = "0xE14734", VA = "0xE14734")]
	public void SetDriverType(AvatarDriverType avatarDriverType)
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xE148D0", Offset = "0xE148D0", VA = "0xE148D0")]
	public void SetPosIndex(int index)
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xE146CC", Offset = "0xE146CC", VA = "0xE146CC")]
	public void SetCalibration(string calibration)
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xE148F4", Offset = "0xE148F4", VA = "0xE148F4")]
	public void SetFrameDatum(uint frame, DatumHalfOffline datum)
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xE14A70", Offset = "0xE14A70", VA = "0xE14A70")]
	public bool CreateAudioSource(int seconds, int frequence, int channel)
	{
		return default(bool);
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xE13FC8", Offset = "0xE13FC8", VA = "0xE13FC8")]
	public bool DestroyAudioSource()
	{
		return default(bool);
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xE14BB4", Offset = "0xE14BB4", VA = "0xE14BB4")]
	public bool SetAudioClipData(int pos, float[] samples)
	{
		return default(bool);
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xE14CA4", Offset = "0xE14CA4", VA = "0xE14CA4")]
	public void AddGraspable(GripObject gripObject)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xE14D3C", Offset = "0xE14D3C", VA = "0xE14D3C")]
	public void RemoveGraspable(GripObject gripObject)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xE15014", Offset = "0xE15014", VA = "0xE15014")]
	public XKAvatar()
	{
	}
}
[Token(Token = "0x200004E")]
public class VRMModelHelper
{
	[Token(Token = "0x6000206")]
	[Address(RVA = "0xE152B8", Offset = "0xE152B8", VA = "0xE152B8")]
	public static bool SetupVRMModel(Transform instance, string destFile)
	{
		return default(bool);
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xE16ADC", Offset = "0xE16ADC", VA = "0xE16ADC")]
	private static void AddVRoidBlendShape(SkinnedMeshRenderer face)
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xE16BF8", Offset = "0xE16BF8", VA = "0xE16BF8")]
	private static void RenameMeshBlendShapes(Mesh mesh, string from, string to)
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xE165A4", Offset = "0xE165A4", VA = "0xE165A4")]
	private static bool SetFingerNode(Transform[] nodes, int startIndex, HumanBodyBones startHumanBone, BoneLimit[] bones, Transform[] allTransforms)
	{
		return default(bool);
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xE163EC", Offset = "0xE163EC", VA = "0xE163EC")]
	private static Transform FindNodeByName(string jointNodeName, Transform[] allTransforms)
	{
		return null;
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xE1639C", Offset = "0xE1639C", VA = "0xE1639C")]
	private static string FindNodeNameByHumanBone(HumanBodyBones joint, BoneLimit[] bones)
	{
		return null;
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xE16478", Offset = "0xE16478", VA = "0xE16478")]
	private static string FindPath(Transform root, Transform t)
	{
		return null;
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xE16E34", Offset = "0xE16E34", VA = "0xE16E34")]
	public VRMModelHelper()
	{
	}
}
[Token(Token = "0x200004F")]
public class Utils
{
	[Token(Token = "0x600020E")]
	[Address(RVA = "0xE169EC", Offset = "0xE169EC", VA = "0xE169EC")]
	public static JArray Vector3JArray(Vector3 v)
	{
		return null;
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xE16E3C", Offset = "0xE16E3C", VA = "0xE16E3C")]
	public Utils()
	{
	}
}
[Token(Token = "0x2000050")]
public class PathDefines
{
	[Token(Token = "0x17000059")]
	public static string BasePath
	{
		[Token(Token = "0x6000210")]
		[Address(RVA = "0xE16E44", Offset = "0xE16E44", VA = "0xE16E44")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005A")]
	public static string DefaultUser
	{
		[Token(Token = "0x6000211")]
		[Address(RVA = "0xE16EA4", Offset = "0xE16EA4", VA = "0xE16EA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005B")]
	public static string StreamingUserData
	{
		[Token(Token = "0x6000213")]
		[Address(RVA = "0xE16F34", Offset = "0xE16F34", VA = "0xE16F34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xE16EEC", Offset = "0xE16EEC", VA = "0xE16EEC")]
	public static string CalibrateFile()
	{
		return null;
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xE14684", Offset = "0xE14684", VA = "0xE14684")]
	public static string DefaultCalibrateFile()
	{
		return null;
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xE16F38", Offset = "0xE16F38", VA = "0xE16F38")]
	public PathDefines()
	{
	}
}
[Token(Token = "0x2000051")]
public class WaitUntil : CustomYieldInstruction
{
	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Func<bool> action_;

	[Token(Token = "0x1700005C")]
	public override bool keepWaiting
	{
		[Token(Token = "0x6000217")]
		[Address(RVA = "0xE16F70", Offset = "0xE16F70", VA = "0xE16F70", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xE16F40", Offset = "0xE16F40", VA = "0xE16F40")]
	public WaitUntil(Func<bool> action)
	{
	}
}
[Token(Token = "0x2000052")]
public static class ConsoleProDebug
{
	[Token(Token = "0x6000218")]
	[Address(RVA = "0xE16F94", Offset = "0xE16F94", VA = "0xE16F94")]
	public static void Clear()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xE16F98", Offset = "0xE16F98", VA = "0xE16F98")]
	public static void LogToFilter(string inLog, string inFilterName, [Optional] UnityEngine.Object inContext)
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xE17054", Offset = "0xE17054", VA = "0xE17054")]
	public static void LogAsType(string inLog, string inTypeName, [Optional] UnityEngine.Object inContext)
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xE17110", Offset = "0xE17110", VA = "0xE17110")]
	public static void Watch(string inName, string inValue)
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xE17370", Offset = "0xE17370", VA = "0xE17370")]
	public static void Search(string inText)
	{
	}
}
[Token(Token = "0x2000053")]
public class ManualScaler : MonoBehaviour
{
	[Token(Token = "0x600021D")]
	[Address(RVA = "0xE17414", Offset = "0xE17414", VA = "0xE17414")]
	private void Update()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xE175A0", Offset = "0xE175A0", VA = "0xE175A0")]
	public ManualScaler()
	{
	}
}
[Token(Token = "0x2000054")]
public class RandomShapes : MonoBehaviour
{
	[StructLayout(3)]
	[Token(Token = "0x2000055")]
	[CompilerGenerated]
	private struct <Start>d__1 : IAsyncStateMachine
	{
		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RandomShapes <>4__this;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter <>u__1;

		[Token(Token = "0x6000223")]
		[Address(RVA = "0xE1775C", Offset = "0xE1775C", VA = "0xE1775C", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0xE1791C", Offset = "0xE1791C", VA = "0xE1791C", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[StructLayout(3)]
	[Token(Token = "0x2000056")]
	[CompilerGenerated]
	private struct <RandomOne>d__2 : IAsyncStateMachine
	{
		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncTaskMethodBuilder <>t__builder;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RandomShapes <>4__this;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private object <>u__1;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter <>u__2;

		[Token(Token = "0x6000225")]
		[Address(RVA = "0xE17928", Offset = "0xE17928", VA = "0xE17928", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0xE17CB8", Offset = "0xE17CB8", VA = "0xE17CB8", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xE175A8", Offset = "0xE175A8", VA = "0xE175A8")]
	[AsyncStateMachine(typeof(<Start>d__1))]
	private void Start()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xE17660", Offset = "0xE17660", VA = "0xE17660")]
	[AsyncStateMachine(typeof(<RandomOne>d__2))]
	public Task RandomOne()
	{
		return null;
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xE17750", Offset = "0xE17750", VA = "0xE17750")]
	private void Update()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xE17754", Offset = "0xE17754", VA = "0xE17754")]
	public RandomShapes()
	{
	}
}
[Token(Token = "0x2000057")]
public class NeedRay : MonoBehaviour
{
	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isP0;

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xE17CC4", Offset = "0xE17CC4", VA = "0xE17CC4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xE17D40", Offset = "0xE17D40", VA = "0xE17D40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xE17DBC", Offset = "0xE17DBC", VA = "0xE17DBC")]
	public NeedRay()
	{
	}
}
[Token(Token = "0x2000058")]
public class BackMenuMgr : Singleton<BackMenuMgr>
{
	[Token(Token = "0x2000059")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass17_0
	{
		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CanvasGroup gp;

		[Token(Token = "0x600023E")]
		[Address(RVA = "0xE19A00", Offset = "0xE19A00", VA = "0xE19A00")]
		public <>c__DisplayClass17_0()
		{
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0xE19A08", Offset = "0xE19A08", VA = "0xE19A08")]
		internal float <SetPlaneStatus>b__0()
		{
			return default(float);
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0xE19A24", Offset = "0xE19A24", VA = "0xE19A24")]
		internal void <SetPlaneStatus>b__1(float r)
		{
		}
	}

	[StructLayout(3)]
	[Token(Token = "0x200005A")]
	[CompilerGenerated]
	private struct <SetPlaneStatus>d__17 : IAsyncStateMachine
	{
		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BackMenuMgr <>4__this;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass17_0 <>8__1;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private object <>u__1;

		[Token(Token = "0x6000241")]
		[Address(RVA = "0xE19A40", Offset = "0xE19A40", VA = "0xE19A40", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0xE19F34", Offset = "0xE19F34", VA = "0xE19F34", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[StructLayout(3)]
	[Token(Token = "0x200005B")]
	[CompilerGenerated]
	private struct <waitAndRefresh>d__22 : IAsyncStateMachine
	{
		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BackMenuMgr <>4__this;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private object <>u__1;

		[Token(Token = "0x6000243")]
		[Address(RVA = "0xE19F40", Offset = "0xE19F40", VA = "0xE19F40", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0xE1A1D0", Offset = "0xE1A1D0", VA = "0xE1A1D0", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x200005E")]
	[CompilerGenerated]
	private sealed class <WaitLight>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BackMenuMgr <>4__this;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string seatNum;

		[Token(Token = "0x1700005D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600024E")]
			[Address(RVA = "0xE1A434", Offset = "0xE1A434", VA = "0xE1A434", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000250")]
			[Address(RVA = "0xE1A47C", Offset = "0xE1A47C", VA = "0xE1A47C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0xE19798", Offset = "0xE19798", VA = "0xE19798")]
		[DebuggerHidden]
		public <WaitLight>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0xE1A24C", Offset = "0xE1A24C", VA = "0xE1A24C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0xE1A250", Offset = "0xE1A250", VA = "0xE1A250", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0xE1A43C", Offset = "0xE1A43C", VA = "0xE1A43C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject parPlane;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite Sp_me;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite Sp_nomal;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite Sp_other;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Sprite YGB_On;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Sprite YGB_Off;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Sprite mute_On;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Sprite mute_Off;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Sprite mic_On;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Sprite mic_Off;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject backMenu;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject mute;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject yuyin;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject seat;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject YGB;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject seatPlane;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool hasguzhangHand;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool isMute;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	private bool isMicOn;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
	private bool waiting;

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xE17DCC", Offset = "0xE17DCC", VA = "0xE17DCC")]
	[AsyncStateMachine(typeof(<SetPlaneStatus>d__17))]
	public void SetPlaneStatus()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xE17E80", Offset = "0xE17E80", VA = "0xE17E80")]
	private void Update()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xE17EAC", Offset = "0xE17EAC", VA = "0xE17EAC")]
	public void GuZhang()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xE17FC0", Offset = "0xE17FC0", VA = "0xE17FC0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xE18768", Offset = "0xE18768", VA = "0xE18768")]
	public void Back(GameObject go)
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xE186B0", Offset = "0xE186B0", VA = "0xE186B0")]
	[AsyncStateMachine(typeof(<waitAndRefresh>d__22))]
	private void waitAndRefresh()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xE187D4", Offset = "0xE187D4", VA = "0xE187D4")]
	private void RefreshMute()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xE18898", Offset = "0xE18898", VA = "0xE18898")]
	public void CardFocu(GameObject obj)
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xE18B18", Offset = "0xE18B18", VA = "0xE18B18")]
	public void CardLeve(GameObject obj)
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xE18CB0", Offset = "0xE18CB0", VA = "0xE18CB0")]
	public void SetYgb(GameObject go)
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xE18E50", Offset = "0xE18E50", VA = "0xE18E50")]
	public void SetMute(GameObject go)
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xE18FA4", Offset = "0xE18FA4", VA = "0xE18FA4")]
	public void SetMic(GameObject go)
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xE18F2C", Offset = "0xE18F2C", VA = "0xE18F2C")]
	private void RefreshMic()
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xE19070", Offset = "0xE19070", VA = "0xE19070")]
	public void EnableSeat(GameObject go)
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xE19468", Offset = "0xE19468", VA = "0xE19468")]
	public void SetSeat(GameObject go)
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xE19708", Offset = "0xE19708", VA = "0xE19708")]
	[IteratorStateMachine(typeof(<WaitLight>d__35))]
	private IEnumerator WaitLight(string seatNum)
	{
		return null;
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xE190B8", Offset = "0xE190B8", VA = "0xE190B8")]
	public void RefreshSeat()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xE197C0", Offset = "0xE197C0", VA = "0xE197C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xE198D0", Offset = "0xE198D0", VA = "0xE198D0")]
	public BackMenuMgr()
	{
	}
}
[Token(Token = "0x200005F")]
public class countdown : MonoBehaviour
{
	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static countdown cd;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject countdownPanel;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject countdownLabel;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isStart;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int h;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int s;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float timeEnter;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float currentS;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float startTime;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool isJiShi;

	[Token(Token = "0x1700005F")]
	public static countdown Instance
	{
		[Token(Token = "0x6000251")]
		[Address(RVA = "0xE1A484", Offset = "0xE1A484", VA = "0xE1A484")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xE1A4CC", Offset = "0xE1A4CC", VA = "0xE1A4CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xE1A524", Offset = "0xE1A524", VA = "0xE1A524")]
	private void Start()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xE1A528", Offset = "0xE1A528", VA = "0xE1A528")]
	private void Update()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xE1A7C0", Offset = "0xE1A7C0", VA = "0xE1A7C0")]
	public void StartTimeGo()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xE1A990", Offset = "0xE1A990", VA = "0xE1A990")]
	private void StartTime()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xE1A548", Offset = "0xE1A548", VA = "0xE1A548")]
	public void theTimer()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xE1AB98", Offset = "0xE1AB98", VA = "0xE1AB98")]
	public countdown()
	{
	}
}
[Token(Token = "0x2000060")]
public class DestroyWhen : MonoBehaviour
{
	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float d_time;

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xE1ABA8", Offset = "0xE1ABA8", VA = "0xE1ABA8")]
	private void Start()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xE1ABAC", Offset = "0xE1ABAC", VA = "0xE1ABAC")]
	private void Update()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xE1AC58", Offset = "0xE1AC58", VA = "0xE1AC58")]
	public DestroyWhen()
	{
	}
}
[Token(Token = "0x2000061")]
public class DISACTIVETHIS : MonoBehaviour
{
	[Token(Token = "0x2000062")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DISACTIVETHIS <>4__this;

		[Token(Token = "0x17000060")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000261")]
			[Address(RVA = "0xE1ADF0", Offset = "0xE1ADF0", VA = "0xE1ADF0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000061")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000263")]
			[Address(RVA = "0xE1AE38", Offset = "0xE1AE38", VA = "0xE1AE38", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0xE1ACD4", Offset = "0xE1ACD4", VA = "0xE1ACD4")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0xE1AD04", Offset = "0xE1AD04", VA = "0xE1AD04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0xE1AD08", Offset = "0xE1AD08", VA = "0xE1AD08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0xE1ADF8", Offset = "0xE1ADF8", VA = "0xE1ADF8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xE1AC60", Offset = "0xE1AC60", VA = "0xE1AC60")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xE1ACFC", Offset = "0xE1ACFC", VA = "0xE1ACFC")]
	public DISACTIVETHIS()
	{
	}
}
[Token(Token = "0x2000063")]
public class EnterFirstControl : MonoBehaviour
{
	[Token(Token = "0x6000264")]
	[Address(RVA = "0xE1AE40", Offset = "0xE1AE40", VA = "0xE1AE40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xE1AE44", Offset = "0xE1AE44", VA = "0xE1AE44")]
	public EnterFirstControl()
	{
	}
}
[Token(Token = "0x2000064")]
public class GetMainKV : MonoBehaviour
{
	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject mainKVBegin;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RaycastHit hit;

	[Token(Token = "0x17000062")]
	public Transform hand_transform
	{
		[Token(Token = "0x6000266")]
		[Address(RVA = "0xE1AE4C", Offset = "0xE1AE4C", VA = "0xE1AE4C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xE1AEAC", Offset = "0xE1AEAC", VA = "0xE1AEAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xE1AFE8", Offset = "0xE1AFE8", VA = "0xE1AFE8")]
	public GetMainKV()
	{
	}
}
[Token(Token = "0x2000065")]
public class GvrEnterFirstScene : GBehaviour
{
	[StructLayout(3)]
	[Token(Token = "0x2000066")]
	[CompilerGenerated]
	private struct <_doRun>d__4 : IAsyncStateMachine
	{
		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GvrEnterFirstScene <>4__this;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter<string> <>u__1;

		[Token(Token = "0x600026D")]
		[Address(RVA = "0xE1B264", Offset = "0xE1B264", VA = "0xE1B264", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0xE1B75C", Offset = "0xE1B75C", VA = "0xE1B75C", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject showNoEnter;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject showClose;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string LAST_GOOD_REQ;

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xE1AFF0", Offset = "0xE1AFF0", VA = "0xE1AFF0", Slot = "6")]
	public override void Run()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xE1AFF4", Offset = "0xE1AFF4", VA = "0xE1AFF4")]
	[AsyncStateMachine(typeof(<_doRun>d__4))]
	private void _doRun()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xE1B0AC", Offset = "0xE1B0AC", VA = "0xE1B0AC")]
	private string GetNextScene(string req, string defaultScene = "NA")
	{
		return null;
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xE1B25C", Offset = "0xE1B25C", VA = "0xE1B25C")]
	public GvrEnterFirstScene()
	{
	}
}
[Token(Token = "0x2000067")]
public class ItemJoinParent : MonoBehaviour
{
	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform thisParent;

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xE1B768", Offset = "0xE1B768", VA = "0xE1B768")]
	public ItemJoinParent()
	{
	}
}
[Token(Token = "0x2000068")]
public class p40_autorun : MonoBehaviour
{
	[StructLayout(3)]
	[Token(Token = "0x2000069")]
	[CompilerGenerated]
	private struct <doAuto>d__1 : IAsyncStateMachine
	{
		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private object <>u__1;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter<bool> <>u__2;

		[Token(Token = "0x6000273")]
		[Address(RVA = "0xE1B818", Offset = "0xE1B818", VA = "0xE1B818", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0xE1BD34", Offset = "0xE1BD34", VA = "0xE1BD34", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xE1B770", Offset = "0xE1B770", VA = "0xE1B770")]
	private void Start()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xE1B774", Offset = "0xE1B774", VA = "0xE1B774")]
	[AsyncStateMachine(typeof(<doAuto>d__1))]
	private void doAuto()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xE1B810", Offset = "0xE1B810", VA = "0xE1B810")]
	public p40_autorun()
	{
	}
}
[Token(Token = "0x200006A")]
public class ProgressBarController : MonoBehaviour
{
	[Token(Token = "0x200006B")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass53_0
	{
		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CanvasGroup gp;

		[Token(Token = "0x600028C")]
		[Address(RVA = "0xE1D898", Offset = "0xE1D898", VA = "0xE1D898")]
		public <>c__DisplayClass53_0()
		{
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0xE1D8A0", Offset = "0xE1D8A0", VA = "0xE1D8A0")]
		internal float <MenuClick>b__0()
		{
			return default(float);
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0xE1D8BC", Offset = "0xE1D8BC", VA = "0xE1D8BC")]
		internal void <MenuClick>b__1(float r)
		{
		}
	}

	[StructLayout(3)]
	[Token(Token = "0x200006C")]
	[CompilerGenerated]
	private struct <MenuClick>d__53 : IAsyncStateMachine
	{
		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ProgressBarController <>4__this;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass53_0 <>8__1;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private object <>u__1;

		[Token(Token = "0x600028F")]
		[Address(RVA = "0xE1D8D8", Offset = "0xE1D8D8", VA = "0xE1D8D8", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0xE1DE38", Offset = "0xE1DE38", VA = "0xE1DE38", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x200006D")]
	[CompilerGenerated]
	private sealed class <WaitForPressColorGoDark>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProgressBarController <>4__this;

		[Token(Token = "0x1700006B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000294")]
			[Address(RVA = "0xE1DF98", Offset = "0xE1DF98", VA = "0xE1DF98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000296")]
			[Address(RVA = "0xE1DFE0", Offset = "0xE1DFE0", VA = "0xE1DFE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0xE1D61C", Offset = "0xE1D61C", VA = "0xE1D61C")]
		[DebuggerHidden]
		public <WaitForPressColorGoDark>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0xE1DE44", Offset = "0xE1DE44", VA = "0xE1DE44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0xE1DE48", Offset = "0xE1DE48", VA = "0xE1DE48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0xE1DFA0", Offset = "0xE1DFA0", VA = "0xE1DFA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006E")]
	[CompilerGenerated]
	private sealed class <WaitForPressColorGoBack>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProgressBarController <>4__this;

		[Token(Token = "0x1700006D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600029A")]
			[Address(RVA = "0xE1E0B0", Offset = "0xE1E0B0", VA = "0xE1E0B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600029C")]
			[Address(RVA = "0xE1E0F8", Offset = "0xE1E0F8", VA = "0xE1E0F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0xE1D6B8", Offset = "0xE1D6B8", VA = "0xE1D6B8")]
		[DebuggerHidden]
		public <WaitForPressColorGoBack>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0xE1DFE8", Offset = "0xE1DFE8", VA = "0xE1DFE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0xE1DFEC", Offset = "0xE1DFEC", VA = "0xE1DFEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xE1E0B8", Offset = "0xE1E0B8", VA = "0xE1E0B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isOpen;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool isClose;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject UIs;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Image> all_color_needChange_ui;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Color> all_color_needChange_ui_Startcolor;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<Text> all_color_needChange_text;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<Color> all_color_needChange_text_Startcolor;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform sightPoint;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RaycastHit hit;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VERController vERController;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text total_press;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long duration_ms;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int current_time;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int total_time;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int minute;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int second;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Slider slider;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Text backLabel;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Text buffertext;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float goBack_float;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public bool can_Open;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
	public bool Can_Close;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC6")]
	public bool can_Change;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public ParticleSystem my_p;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject bufferIcon;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool bufferOn;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	private static bool displaytcpspeed;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private MediaPlayerCtrl.MEDIAPLAYER_STATE _state;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float bufferTextInterval;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float bufferTextTimeout;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float totalTime;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float currentTime;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool isUIActive;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
	public bool closeUI;

	[Token(Token = "0x17000063")]
	public Transform head
	{
		[Token(Token = "0x6000275")]
		[Address(RVA = "0xE1BD40", Offset = "0xE1BD40", VA = "0xE1BD40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000064")]
	public GameObject hand
	{
		[Token(Token = "0x6000276")]
		[Address(RVA = "0xE1BDA0", Offset = "0xE1BDA0", VA = "0xE1BDA0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000065")]
	public Transform hand_transform
	{
		[Token(Token = "0x6000277")]
		[Address(RVA = "0xE1BDF0", Offset = "0xE1BDF0", VA = "0xE1BDF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000066")]
	private GvrPlayerExecutor gvrPlayerExecutor
	{
		[Token(Token = "0x6000278")]
		[Address(RVA = "0xE1BE50", Offset = "0xE1BE50", VA = "0xE1BE50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000067")]
	public string _minute
	{
		[Token(Token = "0x600027A")]
		[Address(RVA = "0xE1C2E0", Offset = "0xE1C2E0", VA = "0xE1C2E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000068")]
	public string _second
	{
		[Token(Token = "0x600027B")]
		[Address(RVA = "0xE1C354", Offset = "0xE1C354", VA = "0xE1C354")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000069")]
	public string total_minute
	{
		[Token(Token = "0x600027C")]
		[Address(RVA = "0xE1C3C8", Offset = "0xE1C3C8", VA = "0xE1C3C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006A")]
	public string total_second
	{
		[Token(Token = "0x600027D")]
		[Address(RVA = "0xE1C458", Offset = "0xE1C458", VA = "0xE1C458")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xE1BE6C", Offset = "0xE1BE6C", VA = "0xE1BE6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xE1C4F0", Offset = "0xE1C4F0", VA = "0xE1C4F0")]
	private void RefreshData()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xE1CA94", Offset = "0xE1CA94", VA = "0xE1CA94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xE1CC4C", Offset = "0xE1CC4C", VA = "0xE1CC4C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xE1CE04", Offset = "0xE1CE04", VA = "0xE1CE04")]
	[AsyncStateMachine(typeof(<MenuClick>d__53))]
	public void MenuClick()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xE1CEB8", Offset = "0xE1CEB8", VA = "0xE1CEB8")]
	public void SeekVideoSilider(float val)
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xE1D078", Offset = "0xE1D078", VA = "0xE1D078")]
	private void Update()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xE1D2A8", Offset = "0xE1D2A8", VA = "0xE1D2A8")]
	private string GetTcpSpeed()
	{
		return null;
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xE1D3B8", Offset = "0xE1D3B8", VA = "0xE1D3B8")]
	private long _getTcpSpeed()
	{
		return default(long);
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xE1D488", Offset = "0xE1D488", VA = "0xE1D488")]
	private string GetNowTest_Second(int now_point_time)
	{
		return null;
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xE1D514", Offset = "0xE1D514", VA = "0xE1D514")]
	private string GetNowTest_Minute(int now_point_time)
	{
		return null;
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xE1D5A8", Offset = "0xE1D5A8", VA = "0xE1D5A8")]
	[IteratorStateMachine(typeof(<WaitForPressColorGoDark>d__61))]
	private IEnumerator WaitForPressColorGoDark()
	{
		return null;
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xE1D644", Offset = "0xE1D644", VA = "0xE1D644")]
	[IteratorStateMachine(typeof(<WaitForPressColorGoBack>d__62))]
	private IEnumerator WaitForPressColorGoBack()
	{
		return null;
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xE1D6E0", Offset = "0xE1D6E0", VA = "0xE1D6E0")]
	public ProgressBarController()
	{
	}
}
[Token(Token = "0x200006F")]
public class VERController : MonoBehaviour
{
	[Token(Token = "0x2000072")]
	[CompilerGenerated]
	private sealed class <Start>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VERController <>4__this;

		[Token(Token = "0x1700006F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002B4")]
			[Address(RVA = "0xE1F2A0", Offset = "0xE1F2A0", VA = "0xE1F2A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000070")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002B6")]
			[Address(RVA = "0xE1F2E8", Offset = "0xE1F2E8", VA = "0xE1F2E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xE1EAB8", Offset = "0xE1EAB8", VA = "0xE1EAB8")]
		[DebuggerHidden]
		public <Start>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xE1F0B0", Offset = "0xE1F0B0", VA = "0xE1F0B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xE1F0B4", Offset = "0xE1F0B4", VA = "0xE1F0B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xE1F2A8", Offset = "0xE1F2A8", VA = "0xE1F2A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Slider _videoSeekSlider;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Slider _bufferSeekSlider;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float SEEK_FORWARD_MS;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static float SEEK_BACK_MS;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GvrPlayerExecutor gvrPlayerExecutor;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GvrPlayerExecutor _playerExecutor;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<GameObject> mostPlane;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject playButton;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject pauseButton;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject backButton;

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xE1E100", Offset = "0xE1E100", VA = "0xE1E100")]
	public void Awake()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xE1E5C4", Offset = "0xE1E5C4", VA = "0xE1E5C4")]
	public void CardFocu(GameObject obj)
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xE1E848", Offset = "0xE1E848", VA = "0xE1E848")]
	public void DoCommand(GameObject go)
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xE1E8A8", Offset = "0xE1E8A8", VA = "0xE1E8A8")]
	public void CardLeve(GameObject obj)
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xE1EA44", Offset = "0xE1EA44", VA = "0xE1EA44")]
	[IteratorStateMachine(typeof(<Start>d__11))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xE1EAE0", Offset = "0xE1EAE0", VA = "0xE1EAE0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xE1EC80", Offset = "0xE1EC80", VA = "0xE1EC80")]
	public void BackMenu(GameObject go)
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xE1ECEC", Offset = "0xE1ECEC", VA = "0xE1ECEC")]
	public void GoBack()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xE1EDAC", Offset = "0xE1EDAC", VA = "0xE1EDAC")]
	public void GoFast()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xE1EE68", Offset = "0xE1EE68", VA = "0xE1EE68")]
	public void OnPlayButton(GameObject go)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xE1EF28", Offset = "0xE1EF28", VA = "0xE1EF28")]
	public void OnPauseButton(GameObject go)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xE1EC38", Offset = "0xE1EC38", VA = "0xE1EC38")]
	public void PlayAndPauseButton(bool isb)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xE1EFE8", Offset = "0xE1EFE8", VA = "0xE1EFE8")]
	public VERController()
	{
	}
}
[Token(Token = "0x2000073")]
public class VideoSeekController : MonoBehaviour
{
	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MediaPlayerCtrl m_player;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VideoSeekController mSelf;

	[Token(Token = "0x17000071")]
	public static VideoSeekController Instance
	{
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xE1F2F0", Offset = "0xE1F2F0", VA = "0xE1F2F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xE1F338", Offset = "0xE1F338", VA = "0xE1F338")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xE1F390", Offset = "0xE1F390", VA = "0xE1F390")]
	public VideoSeekController()
	{
	}
}
[Token(Token = "0x2000074")]
public class SetUIItems : MonoBehaviour
{
	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xE1F398", Offset = "0xE1F398", VA = "0xE1F398")]
	public SetUIItems()
	{
	}
}
[Token(Token = "0x2000075")]
public class SetVideoMask2Head : MonoBehaviour
{
	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xE1F3A0", Offset = "0xE1F3A0", VA = "0xE1F3A0")]
	public SetVideoMask2Head()
	{
	}
}
[Token(Token = "0x2000076")]
public class videoIjkplayerSample : MonoBehaviour
{
	[Token(Token = "0x2000077")]
	[CompilerGenerated]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public videoIjkplayerSample <>4__this;

		[Token(Token = "0x17000072")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002C2")]
			[Address(RVA = "0xE1FA10", Offset = "0xE1FA10", VA = "0xE1FA10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002C4")]
			[Address(RVA = "0xE1FA58", Offset = "0xE1FA58", VA = "0xE1FA58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xE1F41C", Offset = "0xE1F41C", VA = "0xE1F41C")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xE1F818", Offset = "0xE1F818", VA = "0xE1F818", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xE1F81C", Offset = "0xE1F81C", VA = "0xE1F81C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xE1FA18", Offset = "0xE1FA18", VA = "0xE1FA18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static videoIjkplayerSample Instance;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Fsm fsm;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GvrPlayerExecutor _playerExecutor;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text text;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject playUIs;

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xE1F3A8", Offset = "0xE1F3A8", VA = "0xE1F3A8")]
	[IteratorStateMachine(typeof(<Start>d__5))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xE1F444", Offset = "0xE1F444", VA = "0xE1F444")]
	private void Update()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xE1F810", Offset = "0xE1F810", VA = "0xE1F810")]
	public videoIjkplayerSample()
	{
	}
}
[Token(Token = "0x2000078")]
public class FollowRoot : MonoBehaviour
{
	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m1;

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xE1FA60", Offset = "0xE1FA60", VA = "0xE1FA60")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xE1FB54", Offset = "0xE1FB54", VA = "0xE1FB54")]
	public FollowRoot()
	{
	}
}
[Token(Token = "0x2000079")]
public class NameHand : MonoBehaviour
{
	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CanvasGroup MyName;

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xE1FB5C", Offset = "0xE1FB5C", VA = "0xE1FB5C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xE1FB60", Offset = "0xE1FB60", VA = "0xE1FB60")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xE1FBAC", Offset = "0xE1FBAC", VA = "0xE1FBAC")]
	public NameHand()
	{
	}
}
[Token(Token = "0x200007A")]
public class RandomTex : MonoBehaviour
{
	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Texture> listFoRGB;

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xE1FBB4", Offset = "0xE1FBB4", VA = "0xE1FBB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xE1FC80", Offset = "0xE1FC80", VA = "0xE1FC80")]
	public Texture ReturnRandom()
	{
		return null;
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xE1FCF4", Offset = "0xE1FCF4", VA = "0xE1FCF4")]
	public RandomTex()
	{
	}
}
namespace FlyingWormConsole3
{
	[Token(Token = "0x200007B")]
	public class ConsoleProRemoteServer : MonoBehaviour
	{
		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useNATPunch;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int port;

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xE1FCFC", Offset = "0xE1FCFC", VA = "0xE1FCFC")]
		public void Awake()
		{
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xE1FD64", Offset = "0xE1FD64", VA = "0xE1FD64")]
		public ConsoleProRemoteServer()
		{
		}
	}
}
namespace UniHumanoid
{
	[Token(Token = "0x200007C")]
	[RequireComponent(typeof(Animator))]
	public class HumanBuilderTest : MonoBehaviour
	{
		[Token(Token = "0x200007D")]
		private class SkeletonBuilder
		{
			[Token(Token = "0x4000225")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Dictionary<HumanBodyBones, Transform> m_skeleton;

			[Token(Token = "0x4000226")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<HumanBodyBones, Vector3> m_boneTail;

			[Token(Token = "0x4000227")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Transform m_root;

			[Token(Token = "0x17000074")]
			public IDictionary<HumanBodyBones, Transform> Skeleton
			{
				[Token(Token = "0x60002D2")]
				[Address(RVA = "0xE2065C", Offset = "0xE2065C", VA = "0xE2065C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60002D3")]
			[Address(RVA = "0xE20234", Offset = "0xE20234", VA = "0xE20234")]
			public SkeletonBuilder(Transform root)
			{
			}

			[Token(Token = "0x60002D4")]
			[Address(RVA = "0xE20664", Offset = "0xE20664", VA = "0xE20664")]
			private void Add(HumanBodyBones key, Transform parent, Vector3 headPosition, Vector3 tailPosition)
			{
			}

			[Token(Token = "0x60002D5")]
			[Address(RVA = "0xE207E8", Offset = "0xE207E8", VA = "0xE207E8")]
			private void Add(HumanBodyBones key, HumanBodyBones parentKey, Vector3 tailPosition)
			{
			}

			[Token(Token = "0x60002D6")]
			[Address(RVA = "0xE20328", Offset = "0xE20328", VA = "0xE20328")]
			public void AddHips(float height, float len)
			{
			}

			[Token(Token = "0x60002D7")]
			[Address(RVA = "0xE20354", Offset = "0xE20354", VA = "0xE20354")]
			public void AddSpine(float len)
			{
			}

			[Token(Token = "0x60002D8")]
			[Address(RVA = "0xE2036C", Offset = "0xE2036C", VA = "0xE2036C")]
			public void AddChest(float len)
			{
			}

			[Token(Token = "0x60002D9")]
			[Address(RVA = "0xE20384", Offset = "0xE20384", VA = "0xE20384")]
			public void AddNeck(float len)
			{
			}

			[Token(Token = "0x60002DA")]
			[Address(RVA = "0xE2039C", Offset = "0xE2039C", VA = "0xE2039C")]
			public void AddHead(float len)
			{
			}

			[Token(Token = "0x60002DB")]
			[Address(RVA = "0xE203B4", Offset = "0xE203B4", VA = "0xE203B4")]
			public void AddArm(float shoulder, float upper, float lower, float hand)
			{
			}

			[Token(Token = "0x60002DC")]
			[Address(RVA = "0xE204BC", Offset = "0xE204BC", VA = "0xE204BC")]
			public void AddLeg(float distance, float upper, float lower, float foot, float toe)
			{
			}
		}

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material m_material;

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xE1FD74", Offset = "0xE1FD74", VA = "0xE1FD74")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0xE1FD94", Offset = "0xE1FD94", VA = "0xE1FD94")]
		private void BuildSkeleton(Transform root)
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xE20654", Offset = "0xE20654", VA = "0xE20654")]
		public HumanBuilderTest()
		{
		}
	}
	[Token(Token = "0x200007E")]
	public class RuntimeBvhLoader : MonoBehaviour
	{
		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Button m_openButton;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private HumanPoseTransfer m_dst;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityAction m_onClick;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string m_lastDir;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BvhImporterContext m_context;

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xE208B4", Offset = "0xE208B4", VA = "0xE208B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xE20938", Offset = "0xE20938", VA = "0xE20938")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xE20964", Offset = "0xE20964", VA = "0xE20964")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xE20990", Offset = "0xE20990", VA = "0xE20990")]
		public void OnClick()
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xE20998", Offset = "0xE20998", VA = "0xE20998")]
		private void Open(string path)
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0xE20BA4", Offset = "0xE20BA4", VA = "0xE20BA4")]
		public RuntimeBvhLoader()
		{
		}
	}
}
namespace Mathos.Parser
{
	[Token(Token = "0x200007F")]
	public class MathParser
	{
		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<string> roughExpr;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly List<double> args;

		[Token(Token = "0x17000075")]
		public List<string> OperatorList
		{
			[Token(Token = "0x60002E3")]
			[Address(RVA = "0xE20BAC", Offset = "0xE20BAC", VA = "0xE20BAC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60002E4")]
			[Address(RVA = "0xE20BB4", Offset = "0xE20BB4", VA = "0xE20BB4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public Dictionary<string, Func<double, double, double>> OperatorAction
		{
			[Token(Token = "0x60002E5")]
			[Address(RVA = "0xE20BBC", Offset = "0xE20BBC", VA = "0xE20BBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60002E6")]
			[Address(RVA = "0xE20BC4", Offset = "0xE20BC4", VA = "0xE20BC4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000077")]
		public Dictionary<string, Func<double[], double>> LocalFunctions
		{
			[Token(Token = "0x60002E7")]
			[Address(RVA = "0xE20BCC", Offset = "0xE20BCC", VA = "0xE20BCC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60002E8")]
			[Address(RVA = "0xE20BD4", Offset = "0xE20BD4", VA = "0xE20BD4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000078")]
		public Dictionary<string, double> LocalVariables
		{
			[Token(Token = "0x60002E9")]
			[Address(RVA = "0xE20BDC", Offset = "0xE20BDC", VA = "0xE20BDC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60002EA")]
			[Address(RVA = "0xE20BE4", Offset = "0xE20BE4", VA = "0xE20BE4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000079")]
		public CultureInfo CultureInfo
		{
			[Token(Token = "0x60002EB")]
			[Address(RVA = "0xE20BEC", Offset = "0xE20BEC", VA = "0xE20BEC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60002EC")]
			[Address(RVA = "0xE20BF4", Offset = "0xE20BF4", VA = "0xE20BF4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0xE20BFC", Offset = "0xE20BFC", VA = "0xE20BFC")]
		public MathParser(bool loadPreDefinedFunctions = true, bool loadPreDefinedOperators = true, bool loadPreDefinedVariables = true, [Optional] CultureInfo cultureInfo)
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xE22E88", Offset = "0xE22E88", VA = "0xE22E88")]
		public double Parse(string mathExpression)
		{
			return default(double);
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xE23F68", Offset = "0xE23F68", VA = "0xE23F68")]
		public double Parse(ReadOnlyCollection<string> mathExpression)
		{
			return default(double);
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xE23FF0", Offset = "0xE23FF0", VA = "0xE23FF0")]
		public double ProgrammaticallyParse(string mathExpression, bool correctExpression = true, bool identifyComments = true)
		{
			return default(double);
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xE244B4", Offset = "0xE244B4", VA = "0xE244B4")]
		public ReadOnlyCollection<string> GetTokens(string mathExpression)
		{
			return null;
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0xE243E4", Offset = "0xE243E4", VA = "0xE243E4")]
		private string Correction(string input)
		{
			return null;
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xE22EA4", Offset = "0xE22EA4", VA = "0xE22EA4")]
		private List<string> Lexer(string expr)
		{
			return null;
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xE23750", Offset = "0xE23750", VA = "0xE23750")]
		private double MathParserLogic(List<string> tokens)
		{
			return default(double);
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xE24510", Offset = "0xE24510", VA = "0xE24510")]
		private double BasicArithmeticalExpression(List<string> tokens)
		{
			return default(double);
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x2000081")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x600031B")]
		[Address(RVA = "0xE257A0", Offset = "0xE257A0", VA = "0xE257A0")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0xE25954", Offset = "0xE25954", VA = "0xE25954")]
		public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0xE25AE0", Offset = "0xE25AE0", VA = "0xE25AE0")]
		public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0xE25C80", Offset = "0xE25C80", VA = "0xE25C80")]
		public static int DOComplete(this AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0xE25CE8", Offset = "0xE25CE8", VA = "0xE25CE8")]
		public static int DOKill(this AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0xE25D50", Offset = "0xE25D50", VA = "0xE25D50")]
		public static int DOFlip(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0xE25DA8", Offset = "0xE25DA8", VA = "0xE25DA8")]
		public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0xE25E20", Offset = "0xE25E20", VA = "0xE25E20")]
		public static int DOPause(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0xE25E78", Offset = "0xE25E78", VA = "0xE25E78")]
		public static int DOPlay(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0xE25ED0", Offset = "0xE25ED0", VA = "0xE25ED0")]
		public static int DOPlayBackwards(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0xE25F28", Offset = "0xE25F28", VA = "0xE25F28")]
		public static int DOPlayForward(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0xE25F80", Offset = "0xE25F80", VA = "0xE25F80")]
		public static int DORestart(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0xE25FE0", Offset = "0xE25FE0", VA = "0xE25FE0")]
		public static int DORewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0xE2603C", Offset = "0xE2603C", VA = "0xE2603C")]
		public static int DOSmoothRewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0xE26094", Offset = "0xE26094", VA = "0xE26094")]
		public static int DOTogglePause(this AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000085")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x6000333")]
		[Address(RVA = "0xE261B4", Offset = "0xE261B4", VA = "0xE261B4")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0xE2636C", Offset = "0xE2636C", VA = "0xE2636C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0xE26518", Offset = "0xE26518", VA = "0xE26518")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0xE266C4", Offset = "0xE266C4", VA = "0xE266C4")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0xE26870", Offset = "0xE26870", VA = "0xE26870")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0xE26A24", Offset = "0xE26A24", VA = "0xE26A24")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0xE26C8C", Offset = "0xE26C8C", VA = "0xE26C8C")]
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0xE27198", Offset = "0xE27198", VA = "0xE27198")]
		public static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0xE2740C", Offset = "0xE2740C", VA = "0xE2740C")]
		public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0xE276A0", Offset = "0xE276A0", VA = "0xE276A0")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0xE27874", Offset = "0xE27874", VA = "0xE27874")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x2000091")]
	public static class DOTweenModulePhysics2D
	{
		[Token(Token = "0x600035A")]
		[Address(RVA = "0xE27E88", Offset = "0xE27E88", VA = "0xE27E88")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMove(this Rigidbody2D target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0xE28030", Offset = "0xE28030", VA = "0xE28030")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveX(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0xE281D0", Offset = "0xE281D0", VA = "0xE281D0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveY(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0xE28370", Offset = "0xE28370", VA = "0xE28370")]
		public static TweenerCore<float, float, FloatOptions> DORotate(this Rigidbody2D target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0xE284F8", Offset = "0xE284F8", VA = "0xE284F8")]
		public static Sequence DOJump(this Rigidbody2D target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0xE28924", Offset = "0xE28924", VA = "0xE28924")]
		public static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0xE28C10", Offset = "0xE28C10", VA = "0xE28C10")]
		public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0xE28F20", Offset = "0xE28F20", VA = "0xE28F20")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody2D target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0xE290EC", Offset = "0xE290EC", VA = "0xE290EC")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody2D target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x200009B")]
	public static class DOTweenModuleSprite
	{
		[Token(Token = "0x600037E")]
		[Address(RVA = "0xEDD40C", Offset = "0xEDD40C", VA = "0xEDD40C")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0xEDD5C0", Offset = "0xEDD5C0", VA = "0xEDD5C0")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xEDD74C", Offset = "0xEDD74C", VA = "0xEDD74C")]
		public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xEDD928", Offset = "0xEDD928", VA = "0xEDD928")]
		public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x200009F")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x20000A0")]
		public static class Utils
		{
			[Token(Token = "0x60003B5")]
			[Address(RVA = "0xEE26DC", Offset = "0xEE26DC", VA = "0xEE26DC")]
			public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0xEDDC20", Offset = "0xEDDC20", VA = "0xEDDC20")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0xEDDDAC", Offset = "0xEDDDAC", VA = "0xEDDDAC")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0xEDDF60", Offset = "0xEDDF60", VA = "0xEDDF60")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0xEDE0EC", Offset = "0xEDE0EC", VA = "0xEDE0EC")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0xEDE2A0", Offset = "0xEDE2A0", VA = "0xEDE2A0")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0xEDE42C", Offset = "0xEDE42C", VA = "0xEDE42C")]
		public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0xEDE5DC", Offset = "0xEDE5DC", VA = "0xEDE5DC")]
		public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xEDE7C0", Offset = "0xEDE7C0", VA = "0xEDE7C0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0xEDE96C", Offset = "0xEDE96C", VA = "0xEDE96C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0xEDEB18", Offset = "0xEDEB18", VA = "0xEDEB18")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0xEDECC4", Offset = "0xEDECC4", VA = "0xEDECC4")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outline target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0xEDEE78", Offset = "0xEDEE78", VA = "0xEDEE78")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outline target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0xEDF004", Offset = "0xEDF004", VA = "0xEDF004")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOScale(this Outline target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0xEDF1A0", Offset = "0xEDF1A0", VA = "0xEDF1A0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0xEDF34C", Offset = "0xEDF34C", VA = "0xEDF34C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0xEDF4F0", Offset = "0xEDF4F0", VA = "0xEDF4F0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0xEDF694", Offset = "0xEDF694", VA = "0xEDF694")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0xEDF848", Offset = "0xEDF848", VA = "0xEDF848")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0xEDF9F0", Offset = "0xEDF9F0", VA = "0xEDF9F0")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0xEDFB98", Offset = "0xEDFB98", VA = "0xEDFB98")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0xEDFD40", Offset = "0xEDFD40", VA = "0xEDFD40")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xEDFEEC", Offset = "0xEDFEEC", VA = "0xEDFEEC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xEE0098", Offset = "0xEE0098", VA = "0xEE0098")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivot(this RectTransform target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xEE0234", Offset = "0xEE0234", VA = "0xEE0234")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xEE03D4", Offset = "0xEE03D4", VA = "0xEE03D4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0xEE0574", Offset = "0xEE0574", VA = "0xEE0574")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0xEE0720", Offset = "0xEE0720", VA = "0xEE0720")]
		public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0xEE08DC", Offset = "0xEE08DC", VA = "0xEE08DC")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100f, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0xEE0AC0", Offset = "0xEE0AC0", VA = "0xEE0AC0")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0xEE0CAC", Offset = "0xEE0CAC", VA = "0xEE0CAC")]
		public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xEE10D4", Offset = "0xEE10D4", VA = "0xEE10D4")]
		public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0xEE1274", Offset = "0xEE1274", VA = "0xEE1274")]
		public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0xEE1404", Offset = "0xEE1404", VA = "0xEE1404")]
		public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0xEE1594", Offset = "0xEE1594", VA = "0xEE1594")]
		public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0xEE1730", Offset = "0xEE1730", VA = "0xEE1730")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0xEE18E4", Offset = "0xEE18E4", VA = "0xEE18E4")]
		public static TweenerCore<int, int, NoOptions> DOCounter(this Text target, int fromValue, int endValue, float duration, bool addThousandsSeparator = true, [Optional] CultureInfo culture)
		{
			return null;
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0xEE1ADC", Offset = "0xEE1ADC", VA = "0xEE1ADC")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Text target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xEE1C68", Offset = "0xEE1C68", VA = "0xEE1C68")]
		public static TweenerCore<string, string, StringOptions> DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, [Optional] string scrambleChars)
		{
			return null;
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0xEE1EA0", Offset = "0xEE1EA0", VA = "0xEE1EA0")]
		public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xEE20B8", Offset = "0xEE20B8", VA = "0xEE20B8")]
		public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0xEE22D0", Offset = "0xEE22D0", VA = "0xEE22D0")]
		public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xEE24E8", Offset = "0xEE24E8", VA = "0xEE24E8")]
		public static TweenerCore<Vector2, Vector2, CircleOptions> DOShapeCircle(this RectTransform target, Vector2 center, float endValueDegrees, float duration, bool relativeCenter = false, bool snapping = false)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CA")]
	public static class DOTweenModuleUnityVersion
	{
		[StructLayout(3)]
		[Token(Token = "0x20000CD")]
		[CompilerGenerated]
		private struct <AsyncWaitForCompletion>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x40002BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40002BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40002BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40002BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x600044B")]
			[Address(RVA = "0xEE4AD0", Offset = "0xEE4AD0", VA = "0xEE4AD0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600044C")]
			[Address(RVA = "0xEE4D08", Offset = "0xEE4D08", VA = "0xEE4D08", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000CE")]
		[CompilerGenerated]
		private struct <AsyncWaitForRewind>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x40002C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40002C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40002C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40002C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x600044D")]
			[Address(RVA = "0xEE4D14", Offset = "0xEE4D14", VA = "0xEE4D14", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600044E")]
			[Address(RVA = "0xEE4F70", Offset = "0xEE4F70", VA = "0xEE4F70", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000CF")]
		[CompilerGenerated]
		private struct <AsyncWaitForKill>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x40002C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40002C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40002C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40002C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x600044F")]
			[Address(RVA = "0xEE4F7C", Offset = "0xEE4F7C", VA = "0xEE4F7C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000450")]
			[Address(RVA = "0xEE51A0", Offset = "0xEE51A0", VA = "0xEE51A0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000D0")]
		[CompilerGenerated]
		private struct <AsyncWaitForElapsedLoops>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x40002C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40002C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40002CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40002CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int elapsedLoops;

			[Token(Token = "0x40002CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000451")]
			[Address(RVA = "0xEE51AC", Offset = "0xEE51AC", VA = "0xEE51AC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000452")]
			[Address(RVA = "0xEE53EC", Offset = "0xEE53EC", VA = "0xEE53EC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000D1")]
		[CompilerGenerated]
		private struct <AsyncWaitForPosition>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x40002CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40002CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40002CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40002D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float position;

			[Token(Token = "0x40002D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000453")]
			[Address(RVA = "0xEE53F8", Offset = "0xEE53F8", VA = "0xEE53F8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000454")]
			[Address(RVA = "0xEE5650", Offset = "0xEE5650", VA = "0xEE5650", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000D2")]
		[CompilerGenerated]
		private struct <AsyncWaitForStart>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x40002D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40002D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x40002D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x40002D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000455")]
			[Address(RVA = "0xEE565C", Offset = "0xEE565C", VA = "0xEE565C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000456")]
			[Address(RVA = "0xEE5888", Offset = "0xEE5888", VA = "0xEE5888", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xEE369C", Offset = "0xEE369C", VA = "0xEE369C")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0xEE387C", Offset = "0xEE387C", VA = "0xEE387C")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0xEE3A68", Offset = "0xEE3A68", VA = "0xEE3A68")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0xEE3B64", Offset = "0xEE3B64", VA = "0xEE3B64")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0xEE3C60", Offset = "0xEE3C60", VA = "0xEE3C60")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0xEE3D5C", Offset = "0xEE3D5C", VA = "0xEE3D5C")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0xEE3E6C", Offset = "0xEE3E6C", VA = "0xEE3E6C")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0xEE3F8C", Offset = "0xEE3F8C", VA = "0xEE3F8C")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0xEE4088", Offset = "0xEE4088", VA = "0xEE4088")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOOffset(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0xEE4294", Offset = "0xEE4294", VA = "0xEE4294")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOTiling(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0xEE44A0", Offset = "0xEE44A0", VA = "0xEE44A0")]
		[AsyncStateMachine(typeof(<AsyncWaitForCompletion>d__10))]
		public static Task AsyncWaitForCompletion(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0xEE458C", Offset = "0xEE458C", VA = "0xEE458C")]
		[AsyncStateMachine(typeof(<AsyncWaitForRewind>d__11))]
		public static Task AsyncWaitForRewind(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0xEE4678", Offset = "0xEE4678", VA = "0xEE4678")]
		[AsyncStateMachine(typeof(<AsyncWaitForKill>d__12))]
		public static Task AsyncWaitForKill(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0xEE4764", Offset = "0xEE4764", VA = "0xEE4764")]
		[AsyncStateMachine(typeof(<AsyncWaitForElapsedLoops>d__13))]
		public static Task AsyncWaitForElapsedLoops(this Tween t, int elapsedLoops)
		{
			return null;
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0xEE4858", Offset = "0xEE4858", VA = "0xEE4858")]
		[AsyncStateMachine(typeof(<AsyncWaitForPosition>d__14))]
		public static Task AsyncWaitForPosition(this Tween t, float position)
		{
			return null;
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0xEE4954", Offset = "0xEE4954", VA = "0xEE4954")]
		[AsyncStateMachine(typeof(<AsyncWaitForStart>d__15))]
		public static Task AsyncWaitForStart(this Tween t)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D3")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x20000D4")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x40002D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x1700007A")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000457")]
				[Address(RVA = "0xEE5894", Offset = "0xEE5894", VA = "0xEE5894", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000458")]
			[Address(RVA = "0xEE3B34", Offset = "0xEE3B34", VA = "0xEE3B34")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x20000D5")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x40002D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x1700007B")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000459")]
				[Address(RVA = "0xEE58C4", Offset = "0xEE58C4", VA = "0xEE58C4", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600045A")]
			[Address(RVA = "0xEE3C30", Offset = "0xEE3C30", VA = "0xEE3C30")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x20000D6")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x40002D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x1700007C")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600045B")]
				[Address(RVA = "0xEE5924", Offset = "0xEE5924", VA = "0xEE5924", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600045C")]
			[Address(RVA = "0xEE3D2C", Offset = "0xEE3D2C", VA = "0xEE3D2C")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x20000D7")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x40002D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x40002DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int elapsedLoops;

			[Token(Token = "0x1700007D")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600045D")]
				[Address(RVA = "0xEE5940", Offset = "0xEE5940", VA = "0xEE5940", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600045E")]
			[Address(RVA = "0xEE3E30", Offset = "0xEE3E30", VA = "0xEE3E30")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x20000D8")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x40002DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x40002DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float position;

			[Token(Token = "0x1700007E")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600045F")]
				[Address(RVA = "0xEE5980", Offset = "0xEE5980", VA = "0xEE5980", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000460")]
			[Address(RVA = "0xEE3F48", Offset = "0xEE3F48", VA = "0xEE3F48")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x20000D9")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x40002DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x1700007F")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6000461")]
				[Address(RVA = "0xEE59D8", Offset = "0xEE59D8", VA = "0xEE59D8", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000462")]
			[Address(RVA = "0xEE4058", Offset = "0xEE4058", VA = "0xEE4058")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x20000DA")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x20000DB")]
		public static class Physics
		{
			[Token(Token = "0x6000465")]
			[Address(RVA = "0xEE5B68", Offset = "0xEE5B68", VA = "0xEE5B68")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x6000466")]
			[Address(RVA = "0xEE5C68", Offset = "0xEE5C68", VA = "0xEE5C68")]
			public static bool HasRigidbody2D(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6000467")]
			[Address(RVA = "0xEE5CF4", Offset = "0xEE5CF4", VA = "0xEE5CF4")]
			[Preserve]
			public static bool HasRigidbody(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6000468")]
			[Address(RVA = "0xEE5D80", Offset = "0xEE5D80", VA = "0xEE5D80")]
			[Preserve]
			public static TweenerCore<Vector3, Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x6000463")]
		[Address(RVA = "0xEE5A0C", Offset = "0xEE5A0C", VA = "0xEE5A0C")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0xEE5AC0", Offset = "0xEE5AC0", VA = "0xEE5AC0")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
	[Token(Token = "0x20000DC")]
	[AddComponentMenu("DOTween/DOTween Animation")]
	public class DOTweenAnimation : ABSAnimationComponent
	{
		[Token(Token = "0x20000DD")]
		public enum AnimationType
		{
			[Token(Token = "0x4000308")]
			None,
			[Token(Token = "0x4000309")]
			Move,
			[Token(Token = "0x400030A")]
			LocalMove,
			[Token(Token = "0x400030B")]
			Rotate,
			[Token(Token = "0x400030C")]
			LocalRotate,
			[Token(Token = "0x400030D")]
			Scale,
			[Token(Token = "0x400030E")]
			Color,
			[Token(Token = "0x400030F")]
			Fade,
			[Token(Token = "0x4000310")]
			Text,
			[Token(Token = "0x4000311")]
			PunchPosition,
			[Token(Token = "0x4000312")]
			PunchRotation,
			[Token(Token = "0x4000313")]
			PunchScale,
			[Token(Token = "0x4000314")]
			ShakePosition,
			[Token(Token = "0x4000315")]
			ShakeRotation,
			[Token(Token = "0x4000316")]
			ShakeScale,
			[Token(Token = "0x4000317")]
			CameraAspect,
			[Token(Token = "0x4000318")]
			CameraBackgroundColor,
			[Token(Token = "0x4000319")]
			CameraFieldOfView,
			[Token(Token = "0x400031A")]
			CameraOrthoSize,
			[Token(Token = "0x400031B")]
			CameraPixelRect,
			[Token(Token = "0x400031C")]
			CameraRect,
			[Token(Token = "0x400031D")]
			UIWidthHeight
		}

		[Token(Token = "0x20000DE")]
		public enum TargetType
		{
			[Token(Token = "0x400031F")]
			Unset,
			[Token(Token = "0x4000320")]
			Camera,
			[Token(Token = "0x4000321")]
			CanvasGroup,
			[Token(Token = "0x4000322")]
			Image,
			[Token(Token = "0x4000323")]
			Light,
			[Token(Token = "0x4000324")]
			RectTransform,
			[Token(Token = "0x4000325")]
			Renderer,
			[Token(Token = "0x4000326")]
			SpriteRenderer,
			[Token(Token = "0x4000327")]
			Rigidbody,
			[Token(Token = "0x4000328")]
			Rigidbody2D,
			[Token(Token = "0x4000329")]
			Text,
			[Token(Token = "0x400032A")]
			Transform,
			[Token(Token = "0x400032B")]
			tk2dBaseSprite,
			[Token(Token = "0x400032C")]
			tk2dTextMesh,
			[Token(Token = "0x400032D")]
			TextMeshPro,
			[Token(Token = "0x400032E")]
			TextMeshProUGUI
		}

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool targetIsSelf;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject targetGO;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool tweenTargetIsTargetGO;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float delay;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float duration;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Ease easeType;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AnimationCurve easeCurve;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public LoopType loopType;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int loops;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string id;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool isRelative;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool isFrom;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		public bool isIndependentUpdate;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		public bool autoKill;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool autoGenerate;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public bool isActive;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		public bool isValid;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Component target;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AnimationType animationType;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TargetType targetType;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public TargetType forcedTargetType;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool autoPlay;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool useTargetAsV3;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float endValueFloat;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector3 endValueV3;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Vector2 endValueV2;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Color endValueColor;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public string endValueString;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Rect endValueRect;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform endValueTransform;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool optionalBool0;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		public bool optionalBool1;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float optionalFloat0;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public int optionalInt0;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public RotateMode optionalRotationMode;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public ScrambleMode optionalScrambleMode;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public string optionalString;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool _tweenAutoGenerationCalled;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private int _playCount;

		[Token(Token = "0x14000001")]
		public static event Action<DOTweenAnimation> OnReset
		{
			[Token(Token = "0x6000469")]
			[Address(RVA = "0xEE5F5C", Offset = "0xEE5F5C", VA = "0xEE5F5C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600046A")]
			[Address(RVA = "0xEE6028", Offset = "0xEE6028", VA = "0xEE6028")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0xEE60F4", Offset = "0xEE60F4", VA = "0xEE60F4")]
		private static void Dispatch_OnReset(DOTweenAnimation anim)
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0xEE6160", Offset = "0xEE6160", VA = "0xEE6160")]
		private void Awake()
		{
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0xEE776C", Offset = "0xEE776C", VA = "0xEE776C")]
		private void Start()
		{
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0xEE77AC", Offset = "0xEE77AC", VA = "0xEE77AC")]
		private void Reset()
		{
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0xEE77B0", Offset = "0xEE77B0", VA = "0xEE77B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0xEE77E8", Offset = "0xEE77E8", VA = "0xEE77E8")]
		public void RewindThenRecreateTween()
		{
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0xEE7820", Offset = "0xEE7820", VA = "0xEE7820")]
		public void RewindThenRecreateTweenAndPlay()
		{
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0xEE7858", Offset = "0xEE7858", VA = "0xEE7858")]
		public void RecreateTween()
		{
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0xEE7864", Offset = "0xEE7864", VA = "0xEE7864")]
		public void RecreateTweenAndPlay()
		{
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0xEE61AC", Offset = "0xEE61AC", VA = "0xEE61AC")]
		public void CreateTween(bool regenerateIfExists = false, bool andPlay = true)
		{
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0xEE7AB8", Offset = "0xEE7AB8", VA = "0xEE7AB8")]
		public List<Tween> GetTweens()
		{
			return null;
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0xEE7C10", Offset = "0xEE7C10", VA = "0xEE7C10")]
		public void SetAnimationTarget(Component tweenTarget, bool useTweenTargetGameObjectForGroupOperations = true)
		{
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0xEE7CFC", Offset = "0xEE7CFC", VA = "0xEE7CFC", Slot = "4")]
		public override void DOPlay()
		{
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0xEE7D7C", Offset = "0xEE7D7C", VA = "0xEE7D7C", Slot = "5")]
		public override void DOPlayBackwards()
		{
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0xEE7DFC", Offset = "0xEE7DFC", VA = "0xEE7DFC", Slot = "6")]
		public override void DOPlayForward()
		{
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0xEE7E7C", Offset = "0xEE7E7C", VA = "0xEE7E7C", Slot = "7")]
		public override void DOPause()
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0xEE7EFC", Offset = "0xEE7EFC", VA = "0xEE7EFC", Slot = "8")]
		public override void DOTogglePause()
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0xEE7F7C", Offset = "0xEE7F7C", VA = "0xEE7F7C", Slot = "9")]
		public override void DORewind()
		{
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0xEE8060", Offset = "0xEE8060", VA = "0xEE8060", Slot = "10")]
		public override void DORestart()
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0xEE8070", Offset = "0xEE8070", VA = "0xEE8070", Slot = "11")]
		public override void DORestart(bool fromHere)
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0xEE83D0", Offset = "0xEE83D0", VA = "0xEE83D0", Slot = "12")]
		public override void DOComplete()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0xEE8454", Offset = "0xEE8454", VA = "0xEE8454", Slot = "13")]
		public override void DOKill()
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0xEE84E8", Offset = "0xEE84E8", VA = "0xEE84E8")]
		public void DOPlayById(string id)
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0xEE8570", Offset = "0xEE8570", VA = "0xEE8570")]
		public void DOPlayAllById(string id)
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0xEE85C8", Offset = "0xEE85C8", VA = "0xEE85C8")]
		public void DOPauseAllById(string id)
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0xEE8620", Offset = "0xEE8620", VA = "0xEE8620")]
		public void DOPlayBackwardsById(string id)
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0xEE86A8", Offset = "0xEE86A8", VA = "0xEE86A8")]
		public void DOPlayBackwardsAllById(string id)
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0xEE8700", Offset = "0xEE8700", VA = "0xEE8700")]
		public void DOPlayForwardById(string id)
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0xEE8788", Offset = "0xEE8788", VA = "0xEE8788")]
		public void DOPlayForwardAllById(string id)
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0xEE87E0", Offset = "0xEE87E0", VA = "0xEE87E0")]
		public void DOPlayNext()
		{
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0xEE891C", Offset = "0xEE891C", VA = "0xEE891C")]
		public void DORewindAndPlayNext()
		{
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0xEE89B0", Offset = "0xEE89B0", VA = "0xEE89B0")]
		public void DORewindAllById(string id)
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0xEE8A20", Offset = "0xEE8A20", VA = "0xEE8A20")]
		public void DORestartById(string id)
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0xEE8AB8", Offset = "0xEE8AB8", VA = "0xEE8AB8")]
		public void DORestartAllById(string id)
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0xEE8B2C", Offset = "0xEE8B2C", VA = "0xEE8B2C")]
		public void DOKillById(string id)
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0xEE8BB8", Offset = "0xEE8BB8", VA = "0xEE8BB8")]
		public void DOKillAllById(string id)
		{
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0xEE7888", Offset = "0xEE7888", VA = "0xEE7888")]
		public static TargetType TypeToDOTargetType(Type t)
		{
			return default(TargetType);
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0xEE8C14", Offset = "0xEE8C14", VA = "0xEE8C14")]
		public Tween CreateEditorPreview()
		{
			return null;
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0xEE7870", Offset = "0xEE7870", VA = "0xEE7870")]
		private GameObject GetTweenGO()
		{
			return null;
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0xEE7A98", Offset = "0xEE7A98", VA = "0xEE7A98")]
		private GameObject GetTweenTarget()
		{
			return null;
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0xEE817C", Offset = "0xEE817C", VA = "0xEE817C")]
		private void ReEvaluateRelativeTween()
		{
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0xEE8C4C", Offset = "0xEE8C4C", VA = "0xEE8C4C")]
		public DOTweenAnimation()
		{
		}
	}
	[Token(Token = "0x20000DF")]
	public static class DOTweenAnimationExtensions
	{
		[Token(Token = "0x6000496")]
		public static bool IsSameOrSubclassOf<T>(this Component t)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000E0")]
	public static class DOTweenProShortcuts
	{
		[Token(Token = "0x6000497")]
		[Address(RVA = "0xEE8E40", Offset = "0xEE8E40", VA = "0xEE8E40")]
		static DOTweenProShortcuts()
		{
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0xEE8E90", Offset = "0xEE8E90", VA = "0xEE8E90")]
		public static Tweener DOSpiral(this Transform target, float duration, [Optional] Vector3? axis, SpiralMode mode = SpiralMode.Expand, float speed = 1f, float frequency = 10f, float depth = 0f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0xEE9254", Offset = "0xEE9254", VA = "0xEE9254")]
		public static Tweener DOSpiral(this Rigidbody target, float duration, [Optional] Vector3? axis, SpiralMode mode = SpiralMode.Expand, float speed = 1f, float frequency = 10f, float depth = 0f, bool snapping = false)
		{
			return null;
		}
	}
}
namespace HutongGames
{
	[Token(Token = "0x20000E3")]
	public class EasingFunction
	{
		[Token(Token = "0x20000E4")]
		public enum Ease
		{
			[Token(Token = "0x4000334")]
			EaseInQuad,
			[Token(Token = "0x4000335")]
			EaseOutQuad,
			[Token(Token = "0x4000336")]
			EaseInOutQuad,
			[Token(Token = "0x4000337")]
			EaseInCubic,
			[Token(Token = "0x4000338")]
			EaseOutCubic,
			[Token(Token = "0x4000339")]
			EaseInOutCubic,
			[Token(Token = "0x400033A")]
			EaseInQuart,
			[Token(Token = "0x400033B")]
			EaseOutQuart,
			[Token(Token = "0x400033C")]
			EaseInOutQuart,
			[Token(Token = "0x400033D")]
			EaseInQuint,
			[Token(Token = "0x400033E")]
			EaseOutQuint,
			[Token(Token = "0x400033F")]
			EaseInOutQuint,
			[Token(Token = "0x4000340")]
			EaseInSine,
			[Token(Token = "0x4000341")]
			EaseOutSine,
			[Token(Token = "0x4000342")]
			EaseInOutSine,
			[Token(Token = "0x4000343")]
			EaseInExpo,
			[Token(Token = "0x4000344")]
			EaseOutExpo,
			[Token(Token = "0x4000345")]
			EaseInOutExpo,
			[Token(Token = "0x4000346")]
			EaseInCirc,
			[Token(Token = "0x4000347")]
			EaseOutCirc,
			[Token(Token = "0x4000348")]
			EaseInOutCirc,
			[Token(Token = "0x4000349")]
			Linear,
			[Token(Token = "0x400034A")]
			Spring,
			[Token(Token = "0x400034B")]
			EaseInBounce,
			[Token(Token = "0x400034C")]
			EaseOutBounce,
			[Token(Token = "0x400034D")]
			EaseInOutBounce,
			[Token(Token = "0x400034E")]
			EaseInBack,
			[Token(Token = "0x400034F")]
			EaseOutBack,
			[Token(Token = "0x4000350")]
			EaseInOutBack,
			[Token(Token = "0x4000351")]
			EaseInElastic,
			[Token(Token = "0x4000352")]
			EaseOutElastic,
			[Token(Token = "0x4000353")]
			EaseInOutElastic,
			[Token(Token = "0x4000354")]
			CustomCurve,
			[Token(Token = "0x4000355")]
			Punch
		}

		[Token(Token = "0x20000E5")]
		public delegate float Function(float s, float e, float v);

		[Token(Token = "0x4000331")]
		private const float NATURAL_LOG_OF_2 = 0.6931472f;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static AnimationCurve AnimationCurve;

		[Token(Token = "0x600049F")]
		[Address(RVA = "0xEE9670", Offset = "0xEE9670", VA = "0xEE9670")]
		public static float Linear(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xEE9694", Offset = "0xEE9694", VA = "0xEE9694")]
		public static float Spring(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xEE9744", Offset = "0xEE9744", VA = "0xEE9744")]
		public static float EaseInQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xEE9758", Offset = "0xEE9758", VA = "0xEE9758")]
		public static float EaseOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xEE9774", Offset = "0xEE9774", VA = "0xEE9774")]
		public static float EaseInOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xEE97C8", Offset = "0xEE97C8", VA = "0xEE97C8")]
		public static float EaseInCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xEE97E0", Offset = "0xEE97E0", VA = "0xEE97E0")]
		public static float EaseOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0xEE9808", Offset = "0xEE9808", VA = "0xEE9808")]
		public static float EaseInOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xEE9860", Offset = "0xEE9860", VA = "0xEE9860")]
		public static float EaseInQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xEE987C", Offset = "0xEE987C", VA = "0xEE987C")]
		public static float EaseOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xEE98A4", Offset = "0xEE98A4", VA = "0xEE98A4")]
		public static float EaseInOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xEE9900", Offset = "0xEE9900", VA = "0xEE9900")]
		public static float EaseInQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xEE9920", Offset = "0xEE9920", VA = "0xEE9920")]
		public static float EaseOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0xEE9950", Offset = "0xEE9950", VA = "0xEE9950")]
		public static float EaseInOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0xEE99B8", Offset = "0xEE99B8", VA = "0xEE99B8")]
		public static float EaseInSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0xEE99F0", Offset = "0xEE99F0", VA = "0xEE99F0")]
		public static float EaseOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xEE9A24", Offset = "0xEE9A24", VA = "0xEE9A24")]
		public static float EaseInOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xEE9A68", Offset = "0xEE9A68", VA = "0xEE9A68")]
		public static float EaseInExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xEE9AA0", Offset = "0xEE9AA0", VA = "0xEE9AA0")]
		public static float EaseOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xEE9AD8", Offset = "0xEE9AD8", VA = "0xEE9AD8")]
		public static float EaseInOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xEE9B48", Offset = "0xEE9B48", VA = "0xEE9B48")]
		public static float EaseInCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xEE9B70", Offset = "0xEE9B70", VA = "0xEE9B70")]
		public static float EaseOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xEE9B98", Offset = "0xEE9B98", VA = "0xEE9B98")]
		public static float EaseInOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xEE9BEC", Offset = "0xEE9BEC", VA = "0xEE9BEC")]
		public static float EaseInBounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xEE9C24", Offset = "0xEE9C24", VA = "0xEE9C24")]
		public static float EaseOutBounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xEE9CEC", Offset = "0xEE9CEC", VA = "0xEE9CEC")]
		public static float EaseInOutBounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xEE9D6C", Offset = "0xEE9D6C", VA = "0xEE9D6C")]
		public static float EaseInBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xEE9D9C", Offset = "0xEE9D9C", VA = "0xEE9D9C")]
		public static float EaseOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xEE9DDC", Offset = "0xEE9DDC", VA = "0xEE9DDC")]
		public static float EaseInOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xEE9E60", Offset = "0xEE9E60", VA = "0xEE9E60")]
		public static float EaseInElastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xEE9EF0", Offset = "0xEE9EF0", VA = "0xEE9EF0")]
		public static float EaseOutElastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xEE9F80", Offset = "0xEE9F80", VA = "0xEE9F80")]
		public static float EaseInOutElastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xEEA07C", Offset = "0xEEA07C", VA = "0xEEA07C")]
		public static float LinearD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xEEA084", Offset = "0xEEA084", VA = "0xEEA084")]
		public static float EaseInQuadD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0xEEA094", Offset = "0xEEA094", VA = "0xEEA094")]
		public static float EaseOutQuadD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0xEEA0B0", Offset = "0xEEA0B0", VA = "0xEEA0B0")]
		public static float EaseInOutQuadD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xEEA0D8", Offset = "0xEEA0D8", VA = "0xEEA0D8")]
		public static float EaseInCubicD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xEEA0F0", Offset = "0xEEA0F0", VA = "0xEEA0F0")]
		public static float EaseOutCubicD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xEEA110", Offset = "0xEEA110", VA = "0xEEA110")]
		public static float EaseInOutCubicD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0xEEA140", Offset = "0xEEA140", VA = "0xEEA140")]
		public static float EaseInQuartD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0xEEA15C", Offset = "0xEEA15C", VA = "0xEEA15C")]
		public static float EaseOutQuartD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xEEA180", Offset = "0xEEA180", VA = "0xEEA180")]
		public static float EaseInOutQuartD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xEEA1B8", Offset = "0xEEA1B8", VA = "0xEEA1B8")]
		public static float EaseInQuintD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xEEA1D8", Offset = "0xEEA1D8", VA = "0xEEA1D8")]
		public static float EaseOutQuintD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0xEEA200", Offset = "0xEEA200", VA = "0xEEA200")]
		public static float EaseInOutQuintD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0xEEA238", Offset = "0xEEA238", VA = "0xEEA238")]
		public static float EaseInSineD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xEEA280", Offset = "0xEEA280", VA = "0xEEA280")]
		public static float EaseOutSineD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xEEA2B0", Offset = "0xEEA2B0", VA = "0xEEA2B0")]
		public static float EaseInOutSineD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xEEA2E8", Offset = "0xEEA2E8", VA = "0xEEA2E8")]
		public static float EaseInExpoD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xEEA32C", Offset = "0xEEA32C", VA = "0xEEA32C")]
		public static float EaseOutExpoD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xEEA368", Offset = "0xEEA368", VA = "0xEEA368")]
		public static float EaseInOutExpoD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xEEA3BC", Offset = "0xEEA3BC", VA = "0xEEA3BC")]
		public static float EaseInCircD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xEEA3DC", Offset = "0xEEA3DC", VA = "0xEEA3DC")]
		public static float EaseOutCircD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xEEA404", Offset = "0xEEA404", VA = "0xEEA404")]
		public static float EaseInOutCircD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xEEA450", Offset = "0xEEA450", VA = "0xEEA450")]
		public static float EaseInBounceD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0xEEA464", Offset = "0xEEA464", VA = "0xEEA464")]
		public static float EaseOutBounceD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xEEA4EC", Offset = "0xEEA4EC", VA = "0xEEA4EC")]
		public static float EaseInOutBounceD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0xEEA534", Offset = "0xEEA534", VA = "0xEEA534")]
		public static float EaseInBackD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xEEA564", Offset = "0xEEA564", VA = "0xEEA564")]
		public static float EaseOutBackD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xEEA5A0", Offset = "0xEEA5A0", VA = "0xEEA5A0")]
		public static float EaseInOutBackD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xEEA630", Offset = "0xEEA630", VA = "0xEEA630")]
		public static float EaseInElasticD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xEEA6DC", Offset = "0xEEA6DC", VA = "0xEEA6DC")]
		public static float EaseOutElasticD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xEEA77C", Offset = "0xEEA77C", VA = "0xEEA77C")]
		public static float EaseInOutElasticD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xEEA8A8", Offset = "0xEEA8A8", VA = "0xEEA8A8")]
		public static float SpringD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xEEA9CC", Offset = "0xEEA9CC", VA = "0xEEA9CC")]
		public static float CustomCurve(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xEEAA64", Offset = "0xEEAA64", VA = "0xEEAA64")]
		public static float Punch(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xEEAAC0", Offset = "0xEEAAC0", VA = "0xEEAAC0")]
		public static float PunchD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xEEAB38", Offset = "0xEEAB38", VA = "0xEEAB38")]
		public static Function GetEasingFunction(Ease easingFunction)
		{
			return null;
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xEEB158", Offset = "0xEEB158", VA = "0xEEB158")]
		public static Function GetEasingFunctionDerivative(Ease easingFunction)
		{
			return null;
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xEEB67C", Offset = "0xEEB67C", VA = "0xEEB67C")]
		public EasingFunction()
		{
		}
	}
}
namespace HutongGames.Extensions
{
	[Token(Token = "0x20000E6")]
	public static class TweenExtensions
	{
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xEEB770", Offset = "0xEEB770", VA = "0xEEB770")]
		public static Rect Lerp(this Rect rect, Rect from, Rect to, float t)
		{
			return default(Rect);
		}
	}
}
namespace HutongGames.PlayMaker
{
	[Token(Token = "0x20000E7")]
	public static class ActionHelpers
	{
		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static RaycastHit mousePickInfo;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static float mousePickRaycastTime;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static float mousePickDistanceUsed;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static int mousePickLayerMaskUsed;

		[Token(Token = "0x400035A")]
		public const string colon = ": ";

		[Token(Token = "0x17000080")]
		public static Texture2D WhiteTexture
		{
			[Token(Token = "0x60004EA")]
			[Address(RVA = "0xEEB88C", Offset = "0xEEB88C", VA = "0xEEB88C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xEEB894", Offset = "0xEEB894", VA = "0xEEB894")]
		public static Color BlendColor(ColorBlendMode blendMode, Color c1, Color c2)
		{
			return default(Color);
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xEEB9E8", Offset = "0xEEB9E8", VA = "0xEEB9E8")]
		public static bool IsVisible(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xEEBABC", Offset = "0xEEBABC", VA = "0xEEBABC")]
		public static bool IsVisible(GameObject go, Camera camera, bool useBounds)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xEEBC60", Offset = "0xEEBC60", VA = "0xEEBC60")]
		public static GameObject GetOwnerDefault(FsmStateAction action, FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xEEBC80", Offset = "0xEEBC80", VA = "0xEEBC80")]
		public static PlayMakerFSM GetGameObjectFsm(GameObject go, string fsmName)
		{
			return null;
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xEEBE08", Offset = "0xEEBE08", VA = "0xEEBE08")]
		public static int GetRandomWeightedIndex(FsmFloat[] weights)
		{
			return default(int);
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xEEBF00", Offset = "0xEEBF00", VA = "0xEEBF00")]
		public static void AddAnimationClip(GameObject go, UnityEngine.AnimationClip animClip)
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xEEBFF8", Offset = "0xEEBFF8", VA = "0xEEBFF8")]
		public static bool HasAnimationFinished(AnimationState anim, float prevTime, float currentTime)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xEEC0CC", Offset = "0xEEC0CC", VA = "0xEEC0CC")]
		public static Vector3 GetPosition(FsmGameObject fsmGameObject, FsmVector3 fsmVector3)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xEEC1C8", Offset = "0xEEC1C8", VA = "0xEEC1C8")]
		public static Vector3 GetDeviceAcceleration()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xEEC1D0", Offset = "0xEEC1D0", VA = "0xEEC1D0")]
		public static Vector3 GetMousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xEEC1D8", Offset = "0xEEC1D8", VA = "0xEEC1D8")]
		public static bool AnyKeyDown()
		{
			return default(bool);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xEEC1E0", Offset = "0xEEC1E0", VA = "0xEEC1E0")]
		public static bool IsMouseOver(GameObject gameObject, float distance, int layerMask)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xEEC3DC", Offset = "0xEEC3DC", VA = "0xEEC3DC")]
		public static RaycastHit MousePick(float distance, int layerMask)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xEEC2A4", Offset = "0xEEC2A4", VA = "0xEEC2A4")]
		public static GameObject MouseOver(float distance, int layerMask)
		{
			return null;
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xEEC4A0", Offset = "0xEEC4A0", VA = "0xEEC4A0")]
		private static void DoMousePick(float distance, int layerMask)
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xEEC5BC", Offset = "0xEEC5BC", VA = "0xEEC5BC")]
		public static int LayerArrayToLayerMask(FsmInt[] layers, bool invert)
		{
			return default(int);
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xEEC654", Offset = "0xEEC654", VA = "0xEEC654")]
		public static bool IsLoopingWrapMode(WrapMode wrapMode)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0xEEC66C", Offset = "0xEEC66C", VA = "0xEEC66C")]
		public static string CheckRayDistance(float rayDistance)
		{
			return null;
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xEEC6D4", Offset = "0xEEC6D4", VA = "0xEEC6D4")]
		public static string CheckForValidEvent(FsmState state, string eventName)
		{
			return null;
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0xEEC844", Offset = "0xEEC844", VA = "0xEEC844")]
		public static string CheckPhysicsSetup(FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0xEECA0C", Offset = "0xEECA0C", VA = "0xEECA0C")]
		public static string CheckOwnerPhysicsSetup(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0xEEC8AC", Offset = "0xEEC8AC", VA = "0xEEC8AC")]
		public static string CheckPhysicsSetup(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0xEECA10", Offset = "0xEECA10", VA = "0xEECA10")]
		public static string CheckPhysics2dSetup(FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0xEECBD8", Offset = "0xEECBD8", VA = "0xEECBD8")]
		public static string CheckOwnerPhysics2dSetup(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0xEECA78", Offset = "0xEECA78", VA = "0xEECA78")]
		public static string CheckPhysics2dSetup(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0xEECBDC", Offset = "0xEECBDC", VA = "0xEECBDC")]
		public static void DebugLog(Fsm fsm, LogLevel logLevel, string text, bool sendToUnityLog = false)
		{
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0xEECF30", Offset = "0xEECF30", VA = "0xEECF30")]
		public static void LogError(string text)
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0xEECF94", Offset = "0xEECF94", VA = "0xEECF94")]
		public static void LogWarning(string text)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0xEECDB4", Offset = "0xEECDB4", VA = "0xEECDB4")]
		public static string FormatUnityLogString(string text)
		{
			return null;
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0xEECFF8", Offset = "0xEECFF8", VA = "0xEECFF8")]
		public static string StripTags(string textWithTags)
		{
			return null;
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0xEED0DC", Offset = "0xEED0DC", VA = "0xEED0DC")]
		public static string GetValueLabel(INamedVariable variable)
		{
			return null;
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0xEED11C", Offset = "0xEED11C", VA = "0xEED11C")]
		public static string GetValueLabel(Fsm fsm, FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0xEED1B8", Offset = "0xEED1B8", VA = "0xEED1B8")]
		public static string AutoName(FsmStateAction action, params INamedVariable[] exposedFields)
		{
			return null;
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0xEED2E4", Offset = "0xEED2E4", VA = "0xEED2E4")]
		public static string AutoName(FsmStateAction action, Fsm fsm, FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0xEED488", Offset = "0xEED488", VA = "0xEED488")]
		public static string AutoName(FsmStateAction action, params string[] labels)
		{
			return null;
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0xEED4C4", Offset = "0xEED4C4", VA = "0xEED4C4")]
		public static string AutoName(FsmStateAction action, FsmEvent fsmEvent)
		{
			return null;
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0xEED1F4", Offset = "0xEED1F4", VA = "0xEED1F4")]
		public static string AutoName(string actionName, params INamedVariable[] exposedFields)
		{
			return null;
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0xEED3CC", Offset = "0xEED3CC", VA = "0xEED3CC")]
		public static string AutoName(string actionName, params string[] labels)
		{
			return null;
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0xEED5D0", Offset = "0xEED5D0", VA = "0xEED5D0")]
		public static string AutoName(FsmStateAction action, Fsm fsm, FsmOwnerDefault target, params INamedVariable[] exposedFields)
		{
			return null;
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0xEED620", Offset = "0xEED620", VA = "0xEED620")]
		public static string AutoName(string actionName, Fsm fsm, FsmOwnerDefault target, params INamedVariable[] exposedFields)
		{
			return null;
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0xEED724", Offset = "0xEED724", VA = "0xEED724")]
		public static string AutoNameRange(FsmStateAction action, NamedVariable min, NamedVariable max)
		{
			return null;
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0xEED774", Offset = "0xEED774", VA = "0xEED774")]
		public static string AutoNameRange(string actionName, NamedVariable min, NamedVariable max)
		{
			return null;
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0xEED988", Offset = "0xEED988", VA = "0xEED988")]
		public static string AutoNameSetVar(FsmStateAction action, NamedVariable var, NamedVariable value)
		{
			return null;
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0xEED9D8", Offset = "0xEED9D8", VA = "0xEED9D8")]
		public static string AutoNameSetVar(string actionName, NamedVariable var, NamedVariable value)
		{
			return null;
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0xEEDBEC", Offset = "0xEEDBEC", VA = "0xEEDBEC")]
		public static string AutoNameConvert(FsmStateAction action, NamedVariable fromVariable, NamedVariable toVariable)
		{
			return null;
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0xEEDC3C", Offset = "0xEEDC3C", VA = "0xEEDC3C")]
		public static string AutoNameConvert(string actionName, NamedVariable fromVariable, NamedVariable toVariable)
		{
			return null;
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0xEEDE8C", Offset = "0xEEDE8C", VA = "0xEEDE8C")]
		public static string AutoNameGetProperty(FsmStateAction action, NamedVariable property, NamedVariable store)
		{
			return null;
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0xEEDEDC", Offset = "0xEEDEDC", VA = "0xEEDEDC")]
		public static string AutoNameGetProperty(string actionName, NamedVariable property, NamedVariable store)
		{
			return null;
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0xEEE0F0", Offset = "0xEEE0F0", VA = "0xEEE0F0")]
		[Obsolete("Use LogError instead.")]
		public static void RuntimeError(FsmStateAction action, string error)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E8")]
	public enum GamepadButton
	{
		[Token(Token = "0x400035C")]
		ButtonNorth,
		[Token(Token = "0x400035D")]
		ButtonEast,
		[Token(Token = "0x400035E")]
		ButtonWest,
		[Token(Token = "0x400035F")]
		ButtonSouth,
		[Token(Token = "0x4000360")]
		LeftTrigger,
		[Token(Token = "0x4000361")]
		RightTrigger,
		[Token(Token = "0x4000362")]
		LeftShoulder,
		[Token(Token = "0x4000363")]
		RightShoulder,
		[Token(Token = "0x4000364")]
		SelectButton,
		[Token(Token = "0x4000365")]
		StartButton
	}
	[Serializable]
	[Token(Token = "0x20000E9")]
	public enum GamepadStick
	{
		[Token(Token = "0x4000367")]
		LeftStick,
		[Token(Token = "0x4000368")]
		RightStick,
		[Token(Token = "0x4000369")]
		DPad
	}
	[Token(Token = "0x20000EA")]
	public class PlayMakerCanvasRaycastFilterProxy : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool RayCastingEnabled;

		[Token(Token = "0x600051D")]
		[Address(RVA = "0xEEE17C", Offset = "0xEEE17C", VA = "0xEEE17C", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0xEEE184", Offset = "0xEEE184", VA = "0xEEE184")]
		public PlayMakerCanvasRaycastFilterProxy()
		{
		}
	}
	[Token(Token = "0x20000EB")]
	[AddComponentMenu("PlayMaker/UI/UI Bool Value Changed Event")]
	public class PlayMakerUiBoolValueChangedEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Toggle toggle;

		[Token(Token = "0x600051F")]
		[Address(RVA = "0xEEE194", Offset = "0xEEE194", VA = "0xEEE194", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0xEEE2FC", Offset = "0xEEE2FC", VA = "0xEEE2FC")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0xEEE3F0", Offset = "0xEEE3F0", VA = "0xEEE3F0")]
		private void OnValueChanged(bool value)
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0xEEE58C", Offset = "0xEEE58C", VA = "0xEEE58C")]
		public PlayMakerUiBoolValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x20000EC")]
	[AddComponentMenu("PlayMaker/UI/UI Click Event")]
	public class PlayMakerUiClickEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button button;

		[Token(Token = "0x6000523")]
		[Address(RVA = "0xEEE618", Offset = "0xEEE618", VA = "0xEEE618", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0xEEE76C", Offset = "0xEEE76C", VA = "0xEEE76C")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0xEEE84C", Offset = "0xEEE84C", VA = "0xEEE84C")]
		private void DoOnClick()
		{
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0xEEE8DC", Offset = "0xEEE8DC", VA = "0xEEE8DC")]
		public PlayMakerUiClickEvent()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	[AddComponentMenu("PlayMaker/UI/UI Drag Events")]
	public class PlayMakerUiDragEvents : PlayMakerUiEventBase, IDragHandler, IEventSystemHandler, IBeginDragHandler, IEndDragHandler
	{
		[Token(Token = "0x6000527")]
		[Address(RVA = "0xEEE8E0", Offset = "0xEEE8E0", VA = "0xEEE8E0", Slot = "6")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0xEEE9AC", Offset = "0xEEE9AC", VA = "0xEEE9AC", Slot = "5")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0xEEEA78", Offset = "0xEEEA78", VA = "0xEEEA78", Slot = "7")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0xEEEB44", Offset = "0xEEEB44", VA = "0xEEEB44")]
		public PlayMakerUiDragEvents()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	[AddComponentMenu("PlayMaker/UI/UI Drop Event")]
	public class PlayMakerUiDropEvent : PlayMakerUiEventBase, IDropHandler, IEventSystemHandler
	{
		[Token(Token = "0x600052B")]
		[Address(RVA = "0xEEEB48", Offset = "0xEEEB48", VA = "0xEEEB48", Slot = "5")]
		public void OnDrop(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0xEEEC14", Offset = "0xEEEC14", VA = "0xEEEC14")]
		public PlayMakerUiDropEvent()
		{
		}
	}
	[Token(Token = "0x20000EF")]
	[AddComponentMenu("PlayMaker/UI/UI End Edit Event")]
	public class PlayMakerUiEndEditEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InputField inputField;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TMP_InputField tmpInputField;

		[Token(Token = "0x600052D")]
		[Address(RVA = "0xEEEC18", Offset = "0xEEEC18", VA = "0xEEEC18", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0xEEEE84", Offset = "0xEEEE84", VA = "0xEEEE84")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0xEEEFF8", Offset = "0xEEEFF8", VA = "0xEEEFF8")]
		private void DoOnEndEdit(string value)
		{
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0xEEF0D8", Offset = "0xEEF0D8", VA = "0xEEF0D8")]
		public PlayMakerUiEndEditEvent()
		{
		}
	}
	[Token(Token = "0x20000F0")]
	public abstract class PlayMakerUiEventBase : MonoBehaviour
	{
		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PlayMakerFSM> targetFsms;

		[NonSerialized]
		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool initialized;

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xEEF0DC", Offset = "0xEEF0DC", VA = "0xEEF0DC")]
		public void AddTargetFsm(PlayMakerFSM fsm)
		{
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xEEF1A8", Offset = "0xEEF1A8", VA = "0xEEF1A8")]
		private bool TargetsFsm(PlayMakerFSM fsm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xEEF288", Offset = "0xEEF288", VA = "0xEEF288")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xEEF294", Offset = "0xEEF294", VA = "0xEEF294")]
		public void PreProcess()
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xEEF2A0", Offset = "0xEEF2A0", VA = "0xEEF2A0", Slot = "4")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xEEE4CC", Offset = "0xEEE4CC", VA = "0xEEE4CC")]
		protected void SendEvent(FsmEvent fsmEvent)
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xEEE590", Offset = "0xEEE590", VA = "0xEEE590")]
		protected PlayMakerUiEventBase()
		{
		}
	}
	[Token(Token = "0x20000F1")]
	[AddComponentMenu("PlayMaker/UI/UI Float Value Changed Event")]
	public class PlayMakerUiFloatValueChangedEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slider slider;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Scrollbar scrollbar;

		[Token(Token = "0x6000538")]
		[Address(RVA = "0xEEF2AC", Offset = "0xEEF2AC", VA = "0xEEF2AC", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xEEF4E4", Offset = "0xEEF4E4", VA = "0xEEF4E4")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0xEEF658", Offset = "0xEEF658", VA = "0xEEF658")]
		private void OnValueChanged(float value)
		{
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0xEEF730", Offset = "0xEEF730", VA = "0xEEF730")]
		public PlayMakerUiFloatValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x20000F2")]
	[AddComponentMenu("PlayMaker/UI/UI Int Value Changed Event")]
	public class PlayMakerUiIntValueChangedEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dropdown dropdown;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TMP_Dropdown tmpDropdown;

		[Token(Token = "0x600053C")]
		[Address(RVA = "0xEEF734", Offset = "0xEEF734", VA = "0xEEF734", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0xEEF9A0", Offset = "0xEEF9A0", VA = "0xEEF9A0")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0xEEFB14", Offset = "0xEEFB14", VA = "0xEEFB14")]
		private void OnValueChanged(int value)
		{
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0xEEFBEC", Offset = "0xEEFBEC", VA = "0xEEFBEC")]
		public PlayMakerUiIntValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x20000F3")]
	[AddComponentMenu("PlayMaker/UI/UI Pointer Events")]
	public class PlayMakerUiPointerEvents : PlayMakerUiEventBase, IPointerClickHandler, IEventSystemHandler, IPointerDownHandler, IPointerEnterHandler, IPointerExitHandler, IPointerUpHandler
	{
		[Token(Token = "0x6000540")]
		[Address(RVA = "0xEEFBF0", Offset = "0xEEFBF0", VA = "0xEEFBF0", Slot = "5")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0xEEFCBC", Offset = "0xEEFCBC", VA = "0xEEFCBC", Slot = "6")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0xEEFD88", Offset = "0xEEFD88", VA = "0xEEFD88", Slot = "7")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0xEEFE54", Offset = "0xEEFE54", VA = "0xEEFE54", Slot = "8")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0xEEFF20", Offset = "0xEEFF20", VA = "0xEEFF20", Slot = "9")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0xEEFFEC", Offset = "0xEEFFEC", VA = "0xEEFFEC")]
		public PlayMakerUiPointerEvents()
		{
		}
	}
	[Token(Token = "0x20000F4")]
	[AddComponentMenu("PlayMaker/UI/UI Vector2 Value Changed Event")]
	public class PlayMakerUiVector2ValueChangedEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScrollRect scrollRect;

		[Token(Token = "0x6000546")]
		[Address(RVA = "0xEEFFF0", Offset = "0xEEFFF0", VA = "0xEEFFF0", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0xEF0158", Offset = "0xEF0158", VA = "0xEF0158")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0xEF024C", Offset = "0xEF024C", VA = "0xEF024C")]
		private void OnValueChanged(Vector2 value)
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0xEF0328", Offset = "0xEF0328", VA = "0xEF0328")]
		public PlayMakerUiVector2ValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x20000F5")]
	[Preserve]
	public class FsmProcessor
	{
		[Token(Token = "0x600054A")]
		[Address(RVA = "0xEF032C", Offset = "0xEF032C", VA = "0xEF032C")]
		public static void OnPreprocess(PlayMakerFSM fsm)
		{
		}

		[Token(Token = "0x600054B")]
		private static void HandleUiEvent<T>(PlayMakerFSM fsm, UiEvents uiEvent) where T : PlayMakerUiEventBase
		{
		}

		[Token(Token = "0x600054C")]
		private static void AddUiEventHandler<T>(PlayMakerFSM fsm) where T : PlayMakerUiEventBase
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0xEF0598", Offset = "0xEF0598", VA = "0xEF0598")]
		private static bool AddEventHandlerComponent(PlayMakerFSM fsm, Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0xEF0764", Offset = "0xEF0764", VA = "0xEF0764")]
		public static PlayMakerProxyBase GetEventHandlerComponent(GameObject go, Type type)
		{
			return null;
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0xEF08CC", Offset = "0xEF08CC", VA = "0xEF08CC")]
		public FsmProcessor()
		{
		}
	}
	[Token(Token = "0x20000F6")]
	public class UpdateHelper
	{
		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool editorPrefLoaded;

		[Token(Token = "0x6000550")]
		[Address(RVA = "0xEF08D4", Offset = "0xEF08D4", VA = "0xEF08D4")]
		public static void SetDirty(Fsm fsm)
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xEF08D8", Offset = "0xEF08D8", VA = "0xEF08D8")]
		public UpdateHelper()
		{
		}
	}
}
namespace HutongGames.PlayMaker.TweenEnums
{
	[Token(Token = "0x20000F7")]
	public enum TweenDirection
	{
		[Token(Token = "0x4000378")]
		To,
		[Token(Token = "0x4000379")]
		From
	}
	[Token(Token = "0x20000F8")]
	public enum LoopType
	{
		[Token(Token = "0x400037B")]
		None,
		[Token(Token = "0x400037C")]
		Loop,
		[Token(Token = "0x400037D")]
		PingPong
	}
	[Token(Token = "0x20000F9")]
	public enum RotationInterpolation
	{
		[Token(Token = "0x400037F")]
		Spherical,
		[Token(Token = "0x4000380")]
		Linear
	}
	[Token(Token = "0x20000FA")]
	public enum RotationOptions
	{
		[Token(Token = "0x4000382")]
		CurrentRotation,
		[Token(Token = "0x4000383")]
		WorldRotation,
		[Token(Token = "0x4000384")]
		LocalRotation,
		[Token(Token = "0x4000385")]
		WorldOffsetRotation,
		[Token(Token = "0x4000386")]
		LocalOffsetRotation,
		[Token(Token = "0x4000387")]
		MatchGameObjectRotation
	}
	[Token(Token = "0x20000FB")]
	public enum ScaleOptions
	{
		[Token(Token = "0x4000389")]
		CurrentScale,
		[Token(Token = "0x400038A")]
		LocalScale,
		[Token(Token = "0x400038B")]
		MultiplyScale,
		[Token(Token = "0x400038C")]
		AddToScale,
		[Token(Token = "0x400038D")]
		MatchGameObject
	}
	[Token(Token = "0x20000FC")]
	public enum PositionOptions
	{
		[Token(Token = "0x400038F")]
		CurrentPosition,
		[Token(Token = "0x4000390")]
		WorldPosition,
		[Token(Token = "0x4000391")]
		LocalPosition,
		[Token(Token = "0x4000392")]
		WorldOffset,
		[Token(Token = "0x4000393")]
		LocalOffset,
		[Token(Token = "0x4000394")]
		TargetGameObject
	}
	[Token(Token = "0x20000FD")]
	public enum UiPositionOptions
	{
		[Token(Token = "0x4000396")]
		CurrentPosition,
		[Token(Token = "0x4000397")]
		Position,
		[Token(Token = "0x4000398")]
		Offset,
		[Token(Token = "0x4000399")]
		OffscreenTop,
		[Token(Token = "0x400039A")]
		OffscreenBottom,
		[Token(Token = "0x400039B")]
		OffscreenLeft,
		[Token(Token = "0x400039C")]
		OffscreenRight,
		[Token(Token = "0x400039D")]
		TargetGameObject
	}
	[Token(Token = "0x20000FE")]
	public enum TargetValueOptions
	{
		[Token(Token = "0x400039F")]
		CurrentValue,
		[Token(Token = "0x40003A0")]
		Offset,
		[Token(Token = "0x40003A1")]
		Value
	}
}
namespace HutongGames.PlayMaker.Actions
{
	[Token(Token = "0x20000FF")]
	[ActionCategory("GVR")]
	public class Action_CameraWork : FsmStateAction
	{
		[Token(Token = "0x6000552")]
		[Address(RVA = "0xEF08E0", Offset = "0xEF08E0", VA = "0xEF08E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0xEF0944", Offset = "0xEF0944", VA = "0xEF0944")]
		public Action_CameraWork()
		{
		}
	}
	[Token(Token = "0x2000100")]
	[ActionCategory("GVR")]
	public class action_showOutline : FsmStateAction
	{
		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool onOutLine;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GFocus _focus;

		[Token(Token = "0x6000554")]
		[Address(RVA = "0xEF094C", Offset = "0xEF094C", VA = "0xEF094C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0xEF09B8", Offset = "0xEF09B8", VA = "0xEF09B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0xEF09BC", Offset = "0xEF09BC", VA = "0xEF09BC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0xEF09C4", Offset = "0xEF09C4", VA = "0xEF09C4")]
		public action_showOutline()
		{
		}
	}
	[Token(Token = "0x2000101")]
	[Tooltip("Animates the value of a Color Variable using an Animation Curve.")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	public class AnimateColor : AnimateFsmAction
	{
		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The Color Variable to animate.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmColor colorVariable;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The curve used to animate the red value.")]
		[RequiredField]
		public FsmAnimationCurve curveR;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to the red channel.")]
		public Calculation calculationR;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The curve used to animate the green value.")]
		[RequiredField]
		public FsmAnimationCurve curveG;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to the green channel.")]
		public Calculation calculationG;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[RequiredField]
		[Tooltip("The curve used to animate the blue value.")]
		public FsmAnimationCurve curveB;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to the blue channel.")]
		public Calculation calculationB;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[RequiredField]
		[Tooltip("The curve used to animate the alpha value.")]
		public FsmAnimationCurve curveA;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to the alpha channel.")]
		public Calculation calculationA;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private bool finishInNextStep;

		[Token(Token = "0x6000558")]
		[Address(RVA = "0xEF09CC", Offset = "0xEF09CC", VA = "0xEF09CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0xEF0A48", Offset = "0xEF0A48", VA = "0xEF0A48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0xEF0E20", Offset = "0xEF0E20", VA = "0xEF0E20")]
		private void UpdateVariableValue()
		{
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0xEF0E8C", Offset = "0xEF0E8C", VA = "0xEF0E8C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0xEF0F08", Offset = "0xEF0F08", VA = "0xEF0F08")]
		public AnimateColor()
		{
		}
	}
	[Token(Token = "0x2000102")]
	[Tooltip("Animates the value of a Float Variable using an Animation Curve.")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	public class AnimateFloat : FsmStateAction
	{
		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The animation curve to use.")]
		public FsmAnimationCurve animCurve;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to set.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optionally send an Event when the animation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float startTime;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentTime;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float endTime;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool looping;

		[Token(Token = "0x600055D")]
		[Address(RVA = "0xEF0F10", Offset = "0xEF0F10", VA = "0xEF0F10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0xEF0F50", Offset = "0xEF0F50", VA = "0xEF0F50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0xEF1070", Offset = "0xEF1070", VA = "0xEF1070", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0xEF1130", Offset = "0xEF1130", VA = "0xEF1130")]
		public AnimateFloat()
		{
		}
	}
	[Token(Token = "0x2000103")]
	[Tooltip("Animates the value of a Float Variable using an Animation Curve.")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	public class AnimateFloatV2 : AnimateFsmAction
	{
		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to animate.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[Tooltip("The animation curve to use.")]
		public FsmAnimationCurve animCurve;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to floatVariable")]
		public Calculation calculation;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool finishInNextStep;

		[Token(Token = "0x6000561")]
		[Address(RVA = "0xEF1138", Offset = "0xEF1138", VA = "0xEF1138", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0xEF11B4", Offset = "0xEF11B4", VA = "0xEF11B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0xEF135C", Offset = "0xEF135C", VA = "0xEF135C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0xEF1360", Offset = "0xEF1360", VA = "0xEF1360", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xEF143C", Offset = "0xEF143C", VA = "0xEF143C")]
		public AnimateFloatV2()
		{
		}
	}
	[Token(Token = "0x2000104")]
	public abstract class AnimateFsmAction : FsmStateAction
	{
		[Token(Token = "0x2000105")]
		public enum Calculation
		{
			[Token(Token = "0x40003D2")]
			None,
			[Token(Token = "0x40003D3")]
			SetValue,
			[Token(Token = "0x40003D4")]
			AddToValue,
			[Token(Token = "0x40003D5")]
			SubtractFromValue,
			[Token(Token = "0x40003D6")]
			SubtractValueFromCurve,
			[Token(Token = "0x40003D7")]
			MultiplyValue,
			[Token(Token = "0x40003D8")]
			DivideValue,
			[Token(Token = "0x40003D9")]
			DivideCurveByValue
		}

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Define animation time,\u00a0scaling the curve to fit.")]
		public FsmFloat time;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If you define speed, your animation will speed up or slow down.")]
		public FsmFloat speed;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Delayed animation start.")]
		public FsmFloat delay;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Animation curve start from any time. If IgnoreCurveOffset is true the animation starts right after the state become entered.")]
		public FsmBool ignoreCurveOffset;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optionally send an Event when the animation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float[] endTimes;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float lastTime;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float deltaTime;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float delayTime;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float[] keyOffsets;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected AnimationCurve[] curves;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Calculation[] calculations;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float[] resultFloats;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float[] fromFloats;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float[] toFloats;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool finishAction;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		protected bool isRunning;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		protected bool looping;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		private bool start;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float largestEndTime;

		[Token(Token = "0x6000566")]
		[Address(RVA = "0xEF2444", Offset = "0xEF2444", VA = "0xEF2444", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0xEF264C", Offset = "0xEF264C", VA = "0xEF264C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xEF26C8", Offset = "0xEF26C8", VA = "0xEF26C8")]
		protected void Init()
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0xEF3628", Offset = "0xEF3628", VA = "0xEF3628", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0xEF3660", Offset = "0xEF3660", VA = "0xEF3660")]
		private void CheckStart()
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0xEF3700", Offset = "0xEF3700", VA = "0xEF3700")]
		private void UpdateTime()
		{
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0xEF2BEC", Offset = "0xEF2BEC", VA = "0xEF2BEC")]
		public void UpdateAnimation()
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0xEF37F0", Offset = "0xEF37F0", VA = "0xEF37F0")]
		private void CheckFinished()
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0xEF3880", Offset = "0xEF3880", VA = "0xEF3880")]
		protected AnimateFsmAction()
		{
		}
	}
	[Token(Token = "0x2000106")]
	[Tooltip("Animates the value of a Rect Variable using an Animation Curve.")]
	[ActionCategory("AnimateVariables")]
	public class AnimateRect : AnimateFsmAction
	{
		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The Rect Variable to animate.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmRect rectVariable;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[Tooltip("Curve to use for the X value.")]
		public FsmAnimationCurve curveX;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to rectVariable.x.")]
		public Calculation calculationX;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Curve to use for the Y value.")]
		[RequiredField]
		public FsmAnimationCurve curveY;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to rectVariable.y.")]
		public Calculation calculationY;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Curve to use for the Width.")]
		[RequiredField]
		public FsmAnimationCurve curveW;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to rectVariable.width.")]
		public Calculation calculationW;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[RequiredField]
		[Tooltip("Curve to use for the Height.")]
		public FsmAnimationCurve curveH;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to rectVariable.height.")]
		public Calculation calculationH;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private bool finishInNextStep;

		[Token(Token = "0x600056F")]
		[Address(RVA = "0xEF3888", Offset = "0xEF3888", VA = "0xEF3888", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0xEF3900", Offset = "0xEF3900", VA = "0xEF3900", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0xEF3D0C", Offset = "0xEF3D0C", VA = "0xEF3D0C")]
		private void UpdateVariableValue()
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0xEF3D90", Offset = "0xEF3D90", VA = "0xEF3D90", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0xEF3E08", Offset = "0xEF3E08", VA = "0xEF3E08")]
		public AnimateRect()
		{
		}
	}
	[Token(Token = "0x2000107")]
	[Tooltip("Animates the value of a Vector3 Variable using an Animation Curve.")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	public class AnimateVector3 : AnimateFsmAction
	{
		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The Vector3 Variable to animate.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 vectorVariable;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[Tooltip("Curve to use for the X value.")]
		public FsmAnimationCurve curveX;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to vectorVariable.x.")]
		public Calculation calculationX;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Curve to use for the Y value.")]
		[RequiredField]
		public FsmAnimationCurve curveY;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to vectorVariable.y.")]
		public Calculation calculationY;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[RequiredField]
		[Tooltip("Curve to use for the Z value.")]
		public FsmAnimationCurve curveZ;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to vectorVariable.z.")]
		public Calculation calculationZ;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool finishInNextStep;

		[Token(Token = "0x6000574")]
		[Address(RVA = "0xEF3E10", Offset = "0xEF3E10", VA = "0xEF3E10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0xEF3E88", Offset = "0xEF3E88", VA = "0xEF3E88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0xEF41D0", Offset = "0xEF41D0", VA = "0xEF41D0")]
		private void UpdateVariableValue()
		{
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0xEF4234", Offset = "0xEF4234", VA = "0xEF4234", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0xEF42AC", Offset = "0xEF42AC", VA = "0xEF42AC")]
		public AnimateVector3()
		{
		}
	}
	[Token(Token = "0x2000108")]
	[Tooltip("Animates the value of a Color Variable FROM-TO with assistance of Deformation Curves.")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	public class CurveColor : CurveFsmAction
	{
		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Color variable to animate.")]
		public FsmColor colorVariable;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Animate from this color.")]
		[RequiredField]
		public FsmColor fromValue;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Animate to this color.")]
		[RequiredField]
		public FsmColor toValue;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[RequiredField]
		[Tooltip("The curve used to animate the red value.")]
		public FsmAnimationCurve curveR;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.Red and toValue.Rec.")]
		public Calculation calculationR;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[RequiredField]
		[Tooltip("The curve used to animate the green value.")]
		public FsmAnimationCurve curveG;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.Green and toValue.Green.")]
		public Calculation calculationG;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[RequiredField]
		[Tooltip("The curve used to animate the blue value.")]
		public FsmAnimationCurve curveB;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.Blue and toValue.Blue.")]
		public Calculation calculationB;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("The curve used to animate the alpha value.")]
		[RequiredField]
		public FsmAnimationCurve curveA;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.Alpha and toValue.Alpha.")]
		public Calculation calculationA;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Color clr;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private bool finishInNextStep;

		[Token(Token = "0x6000579")]
		[Address(RVA = "0xEF42B4", Offset = "0xEF42B4", VA = "0xEF42B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0xEF45B4", Offset = "0xEF45B4", VA = "0xEF45B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0xEF5058", Offset = "0xEF5058", VA = "0xEF5058", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0xEF505C", Offset = "0xEF505C", VA = "0xEF505C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0xEF61C0", Offset = "0xEF61C0", VA = "0xEF61C0")]
		public CurveColor()
		{
		}
	}
	[Token(Token = "0x2000109")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Animates the value of a Float Variable FROM-TO with assistance of Deformation Curve.")]
	public class CurveFloat : CurveFsmAction
	{
		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[Tooltip("The float variable to animate.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[RequiredField]
		[Tooltip("Animate from this value.")]
		public FsmFloat fromValue;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[RequiredField]
		[Tooltip("Animate to this value.")]
		public FsmFloat toValue;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[RequiredField]
		[Tooltip("The curve to use when animating.")]
		public FsmAnimationCurve animCurve;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue and toValue.")]
		public Calculation calculation;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool finishInNextStep;

		[Token(Token = "0x600057E")]
		[Address(RVA = "0xEF61D0", Offset = "0xEF61D0", VA = "0xEF61D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0xEF62AC", Offset = "0xEF62AC", VA = "0xEF62AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0xEF64A8", Offset = "0xEF64A8", VA = "0xEF64A8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0xEF64AC", Offset = "0xEF64AC", VA = "0xEF64AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0xEF6584", Offset = "0xEF6584", VA = "0xEF6584")]
		public CurveFloat()
		{
		}
	}
	[Token(Token = "0x200010A")]
	[Tooltip("Animate base action - DON'T USE IT!")]
	public abstract class CurveFsmAction : FsmStateAction
	{
		[Token(Token = "0x200010B")]
		public enum Calculation
		{
			[Token(Token = "0x4000418")]
			None,
			[Token(Token = "0x4000419")]
			AddToValue,
			[Token(Token = "0x400041A")]
			SubtractFromValue,
			[Token(Token = "0x400041B")]
			SubtractValueFromCurve,
			[Token(Token = "0x400041C")]
			MultiplyValue,
			[Token(Token = "0x400041D")]
			DivideValue,
			[Token(Token = "0x400041E")]
			DivideCurveByValue
		}

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Define animation time, scaling the curve to fit.")]
		public FsmFloat time;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If you define speed, your animation will speed up or slow down.")]
		public FsmFloat speed;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Delayed animation start.")]
		public FsmFloat delay;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Animation curve start from any time. If IgnoreCurveOffset is true the animation starts right after the state become entered.")]
		public FsmBool ignoreCurveOffset;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optionally send an Event when the animation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float[] endTimes;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float lastTime;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float deltaTime;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float delayTime;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float[] keyOffsets;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected AnimationCurve[] curves;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Calculation[] calculations;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float[] resultFloats;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float[] fromFloats;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float[] toFloats;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float[] distances;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool finishAction;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		protected bool isRunning;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		protected bool looping;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
		private bool start;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float largestEndTime;

		[Token(Token = "0x6000583")]
		[Address(RVA = "0xEF4390", Offset = "0xEF4390", VA = "0xEF4390", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0xEF4A20", Offset = "0xEF4A20", VA = "0xEF4A20", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0xEF4A9C", Offset = "0xEF4A9C", VA = "0xEF4A9C")]
		protected void Init()
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xEF5194", Offset = "0xEF5194", VA = "0xEF5194", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xEF61C8", Offset = "0xEF61C8", VA = "0xEF61C8")]
		protected CurveFsmAction()
		{
		}
	}
	[Token(Token = "0x200010C")]
	[ActionCategory("AnimateVariables")]
	[Tooltip("Animates the value of a Rect Variable FROM-TO with assistance of Deformation Curves.")]
	public class CurveRect : CurveFsmAction
	{
		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The Rect Variable to animate.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmRect rectVariable;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[RequiredField]
		[Tooltip("The Rect to animate from.")]
		public FsmRect fromValue;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[RequiredField]
		[Tooltip("The Rect to animate to.")]
		public FsmRect toValue;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[RequiredField]
		[Tooltip("Curve that controls the X value.")]
		public FsmAnimationCurve curveX;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.x and toValue.x.")]
		public Calculation calculationX;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[RequiredField]
		[Tooltip("Curve that controls the Y value.")]
		public FsmAnimationCurve curveY;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.y and toValue.y.")]
		public Calculation calculationY;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Curve that controls the Width.")]
		[RequiredField]
		public FsmAnimationCurve curveW;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.width and toValue.width.")]
		public Calculation calculationW;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Curve that controls the Height.")]
		[RequiredField]
		public FsmAnimationCurve curveH;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.height and toValue.height.")]
		public Calculation calculationH;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Rect rct;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private bool finishInNextStep;

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xEF658C", Offset = "0xEF658C", VA = "0xEF658C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xEF6668", Offset = "0xEF6668", VA = "0xEF6668", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xEF6B5C", Offset = "0xEF6B5C", VA = "0xEF6B5C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xEF6B60", Offset = "0xEF6B60", VA = "0xEF6B60", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xEF6CB8", Offset = "0xEF6CB8", VA = "0xEF6CB8")]
		public CurveRect()
		{
		}
	}
	[Token(Token = "0x200010D")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Animates the value of a Vector3 Variable FROM-TO with assistance of Deformation Curves.")]
	public class CurveVector3 : CurveFsmAction
	{
		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[Tooltip("The Vector3 variable to animate.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vectorVariable;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[RequiredField]
		[Tooltip("Animate from this value.")]
		public FsmVector3 fromValue;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[RequiredField]
		[Tooltip("Animate to this value.")]
		public FsmVector3 toValue;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[RequiredField]
		[Tooltip("Curve that controls the X value.")]
		public FsmAnimationCurve curveX;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.x and toValue.x.")]
		public Calculation calculationX;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Curve that controls the Y value.")]
		[RequiredField]
		public FsmAnimationCurve curveY;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.y and toValue.y.")]
		public Calculation calculationY;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[RequiredField]
		[Tooltip("Curve that controls the Z value.")]
		public FsmAnimationCurve curveZ;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.z and toValue.z.")]
		public Calculation calculationZ;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 vct;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool finishInNextStep;

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xEF6CC0", Offset = "0xEF6CC0", VA = "0xEF6CC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xEF6D9C", Offset = "0xEF6D9C", VA = "0xEF6D9C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xEF7150", Offset = "0xEF7150", VA = "0xEF7150", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0xEF7154", Offset = "0xEF7154", VA = "0xEF7154", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0xEF7274", Offset = "0xEF7274", VA = "0xEF7274")]
		public CurveVector3()
		{
		}
	}
	[Token(Token = "0x200010E")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Easing Animation - Color")]
	public class EaseColor : EaseFsmAction
	{
		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[RequiredField]
		[Tooltip("The Color value to ease from.")]
		public FsmColor fromValue;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[RequiredField]
		[Tooltip("The Color value to ease to.")]
		public FsmColor toValue;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Color Variable.")]
		public FsmColor colorVariable;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool finishInNextStep;

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xEF727C", Offset = "0xEF727C", VA = "0xEF727C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xEF747C", Offset = "0xEF747C", VA = "0xEF747C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xEF76D4", Offset = "0xEF76D4", VA = "0xEF76D4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0xEF76DC", Offset = "0xEF76DC", VA = "0xEF76DC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0xEF7B20", Offset = "0xEF7B20", VA = "0xEF7B20")]
		public EaseColor()
		{
		}
	}
	[Token(Token = "0x200010F")]
	[Tooltip("Easing Animation - Float")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	public class EaseFloat : EaseFsmAction
	{
		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[RequiredField]
		[Tooltip("The float value to ease from.")]
		public FsmFloat fromValue;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[RequiredField]
		[Tooltip("The float value to ease to.")]
		public FsmFloat toValue;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Float Variable.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool finishInNextStep;

		[Token(Token = "0x6000597")]
		[Address(RVA = "0xEF7BC8", Offset = "0xEF7BC8", VA = "0xEF7BC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xEF7C10", Offset = "0xEF7C10", VA = "0xEF7C10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xEF7D5C", Offset = "0xEF7D5C", VA = "0xEF7D5C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xEF7D60", Offset = "0xEF7D60", VA = "0xEF7D60", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0xEF7E68", Offset = "0xEF7E68", VA = "0xEF7E68")]
		public EaseFloat()
		{
		}
	}
	[Token(Token = "0x2000110")]
	[Tooltip("Ease base action - don't use!")]
	public abstract class EaseFsmAction : FsmStateAction
	{
		[Token(Token = "0x2000111")]
		protected delegate float EasingFunction(float start, float end, float value);

		[Token(Token = "0x2000112")]
		public enum EaseType
		{
			[Token(Token = "0x4000455")]
			easeInQuad,
			[Token(Token = "0x4000456")]
			easeOutQuad,
			[Token(Token = "0x4000457")]
			easeInOutQuad,
			[Token(Token = "0x4000458")]
			easeInCubic,
			[Token(Token = "0x4000459")]
			easeOutCubic,
			[Token(Token = "0x400045A")]
			easeInOutCubic,
			[Token(Token = "0x400045B")]
			easeInQuart,
			[Token(Token = "0x400045C")]
			easeOutQuart,
			[Token(Token = "0x400045D")]
			easeInOutQuart,
			[Token(Token = "0x400045E")]
			easeInQuint,
			[Token(Token = "0x400045F")]
			easeOutQuint,
			[Token(Token = "0x4000460")]
			easeInOutQuint,
			[Token(Token = "0x4000461")]
			easeInSine,
			[Token(Token = "0x4000462")]
			easeOutSine,
			[Token(Token = "0x4000463")]
			easeInOutSine,
			[Token(Token = "0x4000464")]
			easeInExpo,
			[Token(Token = "0x4000465")]
			easeOutExpo,
			[Token(Token = "0x4000466")]
			easeInOutExpo,
			[Token(Token = "0x4000467")]
			easeInCirc,
			[Token(Token = "0x4000468")]
			easeOutCirc,
			[Token(Token = "0x4000469")]
			easeInOutCirc,
			[Token(Token = "0x400046A")]
			linear,
			[Token(Token = "0x400046B")]
			spring,
			[Token(Token = "0x400046C")]
			bounce,
			[Token(Token = "0x400046D")]
			easeInBack,
			[Token(Token = "0x400046E")]
			easeOutBack,
			[Token(Token = "0x400046F")]
			easeInOutBack,
			[Token(Token = "0x4000470")]
			elastic,
			[Token(Token = "0x4000471")]
			punch
		}

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How long the ease should take in seconds")]
		[RequiredField]
		public FsmFloat time;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optionally, use speed instead of time.")]
		public FsmFloat speed;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional delay in seconds before starting to ease.")]
		public FsmFloat delay;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The easing function to use.")]
		public EaseType easeType;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Reverse the ease.")]
		public FsmBool reverse;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optionally send an Event when the animation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected EasingFunction ease;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float runningTime;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float lastTime;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float startTime;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected float deltaTime;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected float delayTime;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected float percentage;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected float[] fromFloats;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected float[] toFloats;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float[] resultFloats;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected bool finishAction;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		protected bool start;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		protected bool finished;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		protected bool isRunning;

		[Token(Token = "0x600059C")]
		[Address(RVA = "0xEF72C4", Offset = "0xEF72C4", VA = "0xEF72C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0xEF761C", Offset = "0xEF761C", VA = "0xEF761C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0xEF76D8", Offset = "0xEF76D8", VA = "0xEF76D8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0xEF78CC", Offset = "0xEF78CC", VA = "0xEF78CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0xEF82EC", Offset = "0xEF82EC", VA = "0xEF82EC")]
		protected void UpdatePercentage()
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0xEF7E6C", Offset = "0xEF7E6C", VA = "0xEF7E6C")]
		protected void SetEasingFunction()
		{
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0xEF8500", Offset = "0xEF8500", VA = "0xEF8500")]
		protected float linear(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0xEF8524", Offset = "0xEF8524", VA = "0xEF8524")]
		protected float clerp(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0xEF8588", Offset = "0xEF8588", VA = "0xEF8588")]
		protected float spring(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0xEF8638", Offset = "0xEF8638", VA = "0xEF8638")]
		protected float easeInQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0xEF864C", Offset = "0xEF864C", VA = "0xEF864C")]
		protected float easeOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0xEF8668", Offset = "0xEF8668", VA = "0xEF8668")]
		protected float easeInOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xEF86BC", Offset = "0xEF86BC", VA = "0xEF86BC")]
		protected float easeInCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xEF86D4", Offset = "0xEF86D4", VA = "0xEF86D4")]
		protected float easeOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xEF86FC", Offset = "0xEF86FC", VA = "0xEF86FC")]
		protected float easeInOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xEF8754", Offset = "0xEF8754", VA = "0xEF8754")]
		protected float easeInQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xEF8770", Offset = "0xEF8770", VA = "0xEF8770")]
		protected float easeOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0xEF8798", Offset = "0xEF8798", VA = "0xEF8798")]
		protected float easeInOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xEF87F4", Offset = "0xEF87F4", VA = "0xEF87F4")]
		protected float easeInQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xEF8814", Offset = "0xEF8814", VA = "0xEF8814")]
		protected float easeOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xEF8844", Offset = "0xEF8844", VA = "0xEF8844")]
		protected float easeInOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0xEF88AC", Offset = "0xEF88AC", VA = "0xEF88AC")]
		protected float easeInSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0xEF88E4", Offset = "0xEF88E4", VA = "0xEF88E4")]
		protected float easeOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0xEF8918", Offset = "0xEF8918", VA = "0xEF8918")]
		protected float easeInOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xEF895C", Offset = "0xEF895C", VA = "0xEF895C")]
		protected float easeInExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xEF8994", Offset = "0xEF8994", VA = "0xEF8994")]
		protected float easeOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xEF89CC", Offset = "0xEF89CC", VA = "0xEF89CC")]
		protected float easeInOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0xEF8A3C", Offset = "0xEF8A3C", VA = "0xEF8A3C")]
		protected float easeInCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xEF8A64", Offset = "0xEF8A64", VA = "0xEF8A64")]
		protected float easeOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0xEF8A8C", Offset = "0xEF8A8C", VA = "0xEF8A8C")]
		protected float easeInOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0xEF8AE0", Offset = "0xEF8AE0", VA = "0xEF8AE0")]
		protected float bounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0xEF8BA8", Offset = "0xEF8BA8", VA = "0xEF8BA8")]
		protected float easeInBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0xEF8BD8", Offset = "0xEF8BD8", VA = "0xEF8BD8")]
		protected float easeOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0xEF8C18", Offset = "0xEF8C18", VA = "0xEF8C18")]
		protected float easeInOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xEF8C9C", Offset = "0xEF8C9C", VA = "0xEF8C9C")]
		protected float punch(float amplitude, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0xEF8D0C", Offset = "0xEF8D0C", VA = "0xEF8D0C")]
		protected float elastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0xEF7B24", Offset = "0xEF7B24", VA = "0xEF7B24")]
		protected EaseFsmAction()
		{
		}
	}
	[Token(Token = "0x2000113")]
	[Tooltip("Easing Animation - Rect.")]
	[ActionCategory("AnimateVariables")]
	public class EaseRect : EaseFsmAction
	{
		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[RequiredField]
		[Tooltip("Ease from this Rect value.")]
		public FsmRect fromValue;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[RequiredField]
		[Tooltip("Ease to this Rect value.")]
		public FsmRect toValue;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current value in a Rect Variable.")]
		public FsmRect rectVariable;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool finishInNextStep;

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0xEF8E88", Offset = "0xEF8E88", VA = "0xEF8E88", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0xEF8ED0", Offset = "0xEF8ED0", VA = "0xEF8ED0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0xEF9174", Offset = "0xEF9174", VA = "0xEF9174", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0xEF9178", Offset = "0xEF9178", VA = "0xEF9178", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xEF93F8", Offset = "0xEF93F8", VA = "0xEF93F8")]
		public EaseRect()
		{
		}
	}
	[Token(Token = "0x2000114")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Easing Animation - Vector3")]
	public class EaseVector3 : EaseFsmAction
	{
		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[RequiredField]
		[Tooltip("The Vector3 value to ease from.")]
		public FsmVector3 fromValue;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The Vector3 value to ease to.")]
		[RequiredField]
		public FsmVector3 toValue;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Vector3 Variable.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool finishInNextStep;

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xEF93FC", Offset = "0xEF93FC", VA = "0xEF93FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xEF9444", Offset = "0xEF9444", VA = "0xEF9444", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0xEF9634", Offset = "0xEF9634", VA = "0xEF9634", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0xEF9638", Offset = "0xEF9638", VA = "0xEF9638", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0xEF97F4", Offset = "0xEF97F4", VA = "0xEF97F4")]
		public EaseVector3()
		{
		}
	}
	[Token(Token = "0x2000115")]
	[Tooltip("Adds an Animation Clip to a Game Object. Optionally trim the clip.")]
	[ActionCategory(ActionCategory.Animation)]
	public class AddAnimationClip : FsmStateAction
	{
		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The Game Object to add the Animation Clip to.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The animation clip to add. NOTE: Make sure the clip is compatible with the object's hierarchy.")]
		[ObjectType(typeof(UnityEngine.AnimationClip))]
		[RequiredField]
		public FsmObject animationClip;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optionally give the animation a new name. Can be used by other Animation actions.")]
		[RequiredField]
		public FsmString animationName;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Trimming")]
		[Tooltip("Optionally trim the animation by specifying a first and last frame.")]
		public FsmInt firstFrame;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the last frame of the trimmed animation. 0 means no trimming.")]
		public FsmInt lastFrame;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Add a frame at the end of the trimmed clip that's the same as the first frame so it loops nicely.")]
		public FsmBool addLoopFrame;

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0xEF97F8", Offset = "0xEF97F8", VA = "0xEF97F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0xEF98C4", Offset = "0xEF98C4", VA = "0xEF98C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0xEF98E0", Offset = "0xEF98E0", VA = "0xEF98E0")]
		private void DoAddAnimationClip()
		{
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0xEF9AE0", Offset = "0xEF9AE0", VA = "0xEF9AE0")]
		public AddAnimationClip()
		{
		}
	}
	[Token(Token = "0x2000116")]
	[Tooltip("Play an animation on a subset of the hierarchy. E.g., A waving animation on the upper body.")]
	[ActionCategory(ActionCategory.Animation)]
	public class AddMixingTransform : BaseAnimationAction
	{
		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		[Tooltip("The GameObject playing the animation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the animation to mix. NOTE: The animation should already be added to the Animation Component on the GameObject.")]
		[RequiredField]
		public FsmString animationName;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The mixing transform. E.g., root/upper_body/left_shoulder")]
		public FsmString transform;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If recursive is true all children of the mix transform will also be animated.")]
		public FsmBool recursive;

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0xEF9AE8", Offset = "0xEF9AE8", VA = "0xEF9AE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0xEF9B88", Offset = "0xEF9B88", VA = "0xEF9B88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0xEF9BA4", Offset = "0xEF9BA4", VA = "0xEF9BA4")]
		private void DoAddMixingTransform()
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0xEF9CE8", Offset = "0xEF9CE8", VA = "0xEF9CE8")]
		public AddMixingTransform()
		{
		}
	}
	[Token(Token = "0x2000117")]
	[Tooltip("Applies animation settings to the specified animation. Note: Settings are applied once, on entering the state, not continuously. Use\u00a0{{Set Animation Speed}},\u00a0{{Set Animation Time}}\u00a0etc. if you need to update those animation\u00a0settings every frame.\\nSee\u00a0<a href=\"https://docs.unity3d.com/Manual/AnimationScripting.html\" rel =\"nofollow\" target=\"_blank\">Unity Animation Docs</a>\u00a0for detailed descriptions of Wrap Mode, Blend Mode, Speed and Layer settings.")]
	[ActionCategory(ActionCategory.Animation)]
	public class AnimationSettings : BaseAnimationAction
	{
		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("A GameObject with an Animation Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Animation)]
		[Tooltip("The name of the animation. Use the browse button to select from animations on the Game Object (if available).")]
		public FsmString animName;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Set how the animation wraps (Loop, PingPong etc.). NOTE: Because of the way WrapMode is defined by Unity you cannot select Once, but Clamp is the same as Once.")]
		public WrapMode wrapMode;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("How the animation is blended with other animations on the Game Object.")]
		public AnimationBlendMode blendMode;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Speed up or slow down the animation. 1 is normal speed, 0.5 is half speed...")]
		public FsmFloat speed;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("You can play animations on different layers to combine them into a final animation. See the Unity Animation docs for more details.")]
		public FsmInt layer;

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0xEF9D34", Offset = "0xEF9D34", VA = "0xEF9D34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0xEF9DA0", Offset = "0xEF9DA0", VA = "0xEF9DA0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0xEF9DBC", Offset = "0xEF9DBC", VA = "0xEF9DBC")]
		private void DoAnimationSettings()
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0xEF9F84", Offset = "0xEF9F84", VA = "0xEF9F84")]
		public AnimationSettings()
		{
		}
	}
	[Token(Token = "0x2000118")]
	public abstract class BaseAnimationAction : ComponentAction<Animation>
	{
		[Token(Token = "0x60005DB")]
		[Address(RVA = "0xEF9F88", Offset = "0xEF9F88", VA = "0xEF9F88", Slot = "41")]
		public override void OnActionTargetInvoked(object targetObject)
		{
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0xEF9CEC", Offset = "0xEF9CEC", VA = "0xEF9CEC")]
		protected BaseAnimationAction()
		{
		}
	}
	[Token(Token = "0x2000119")]
	[Tooltip("Blends an Animation towards a Target Weight over a specified Time.\nOptionally sends an Event when finished.")]
	[ActionCategory(ActionCategory.Animation)]
	public class BlendAnimation : BaseAnimationAction
	{
		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		[Tooltip("The GameObject to animate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the animation to blend.")]
		[UIHint(UIHint.Animation)]
		[RequiredField]
		public FsmString animName;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Target weight to blend to.")]
		[HasFloatSlider(0f, 1f)]
		[RequiredField]
		public FsmFloat targetWeight;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Time it should take to reach the target weight (seconds).")]
		public FsmFloat time;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send when the blend has finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private DelayedEvent delayedFinishEvent;

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0xEFA09C", Offset = "0xEFA09C", VA = "0xEFA09C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0xEFA110", Offset = "0xEFA110", VA = "0xEFA110", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0xEFA380", Offset = "0xEFA380", VA = "0xEFA380", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0xEFA154", Offset = "0xEFA154", VA = "0xEFA154")]
		private void DoBlendAnimation(GameObject go)
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0xEFA3B0", Offset = "0xEFA3B0", VA = "0xEFA3B0")]
		public BlendAnimation()
		{
		}
	}
	[Token(Token = "0x200011A")]
	[Tooltip("Captures the current pose of a hierarchy as an animation clip.\n\nUseful to blend from an arbitrary pose (e.g. a rag-doll death) back to a known animation (e.g. idle).")]
	[ActionCategory(ActionCategory.Animation)]
	public class CapturePoseAsAnimationClip : FsmStateAction
	{
		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject root of the hierarchy to capture.")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Capture position keys.")]
		public FsmBool position;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Capture rotation keys.")]
		public FsmBool rotation;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Capture scale keys.")]
		public FsmBool scale;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Store the result in an Object variable of type AnimationClip.")]
		[ObjectType(typeof(UnityEngine.AnimationClip))]
		[UIHint(UIHint.Variable)]
		public FsmObject storeAnimationClip;

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0xEFA3B4", Offset = "0xEFA3B4", VA = "0xEFA3B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0xEFA430", Offset = "0xEFA430", VA = "0xEFA430", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xEFA44C", Offset = "0xEFA44C", VA = "0xEFA44C")]
		private void DoCaptureAnimationClip()
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0xEFA804", Offset = "0xEFA804", VA = "0xEFA804")]
		private void CaptureTransform(Transform transform, string path, UnityEngine.AnimationClip clip)
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0xEFABBC", Offset = "0xEFABBC", VA = "0xEFABBC")]
		private void CapturePosition(Transform transform, string path, UnityEngine.AnimationClip clip)
		{
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0xEFAC9C", Offset = "0xEFAC9C", VA = "0xEFAC9C")]
		private void CaptureRotation(Transform transform, string path, UnityEngine.AnimationClip clip)
		{
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0xEFADB0", Offset = "0xEFADB0", VA = "0xEFADB0")]
		private void CaptureScale(Transform transform, string path, UnityEngine.AnimationClip clip)
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0xEFAE90", Offset = "0xEFAE90", VA = "0xEFAE90")]
		private void SetConstantCurve(UnityEngine.AnimationClip clip, string childPath, string propertyPath, float value)
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0xEFAF78", Offset = "0xEFAF78", VA = "0xEFAF78")]
		public CapturePoseAsAnimationClip()
		{
		}
	}
	[Token(Token = "0x200011B")]
	[Tooltip("Enables/Disables an Animation on a GameObject.\nAnimation time is paused while disabled. Animation must also have a non zero weight to play.")]
	[ActionCategory(ActionCategory.Animation)]
	public class EnableAnimation : BaseAnimationAction
	{
		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The GameObject playing the animation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Animation)]
		[Tooltip("The name of the animation to enable/disable.")]
		public FsmString animName;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enable;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset the initial enabled state when exiting the state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AnimationState anim;

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0xEFAF80", Offset = "0xEFAF80", VA = "0xEFAF80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0xEFAFE0", Offset = "0xEFAFE0", VA = "0xEFAFE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0xEFB01C", Offset = "0xEFB01C", VA = "0xEFB01C")]
		private void DoEnableAnimation(GameObject go)
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0xEFB128", Offset = "0xEFB128", VA = "0xEFB128", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xEFB194", Offset = "0xEFB194", VA = "0xEFB194")]
		public EnableAnimation()
		{
		}
	}
	[Token(Token = "0x200011C")]
	[ActionCategory(ActionCategory.Animation)]
	[Tooltip("Plays an Animation on a Game Object. You can add named animation clips to the object in the Unity editor, or with the Add Animation Clip action. NOTE: The game object must have an Animation component.")]
	public class PlayAnimation : BaseAnimationAction
	{
		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The Game Object to play the animation on. NOTE: Must have an Animation Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the animation to play. Use the browse button to find animations on the specified Game Object.")]
		[UIHint(UIHint.Animation)]
		public FsmString animName;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Whether to stop all currently playing animations, or just the animations on the same layer as this animation.")]
		public PlayMode playMode;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Time to cross-fade between animations (seconds).")]
		public FsmFloat blendTime;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send when the animation is finished playing. NOTE: Not sent with Loop or PingPong wrap modes!")]
		public FsmEvent finishEvent;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send when the animation loops. If you want to send this event to another FSM use Set Event Target. NOTE: This event is only sent with Loop and PingPong wrap modes.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Stop playing the animation when this state is exited.")]
		public bool stopOnExit;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AnimationState anim;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float prevAnimtTime;

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xEFB198", Offset = "0xEFB198", VA = "0xEFB198", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xEFB210", Offset = "0xEFB210", VA = "0xEFB210", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xEFB214", Offset = "0xEFB214", VA = "0xEFB214")]
		private void DoPlayAnimation()
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xEFB418", Offset = "0xEFB418", VA = "0xEFB418", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xEFB5B0", Offset = "0xEFB5B0", VA = "0xEFB5B0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xEFB5C0", Offset = "0xEFB5C0", VA = "0xEFB5C0")]
		private void StopAnimation()
		{
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xEFB69C", Offset = "0xEFB69C", VA = "0xEFB69C")]
		public PlayAnimation()
		{
		}
	}
	[Token(Token = "0x200011D")]
	[ActionCategory(ActionCategory.Animation)]
	[Tooltip("Plays a Random Animation on a Game Object. You can set the relative weight of each animation to control how often they are selected.")]
	public class PlayRandomAnimation : BaseAnimationAction
	{
		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Game Object to play the animation on.")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An array of animations to pick randomly from.")]
		[UIHint(UIHint.Animation)]
		[CompoundArray("Animations", "Animation", "Weight")]
		public FsmString[] animations;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The relative probability of each animation being picked. E.g. a weight of 2 is twice a likely to be picked as a weight of 1.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat[] weights;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How to treat previously playing animations.")]
		public PlayMode playMode;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Time taken to blend to this animation.")]
		public FsmFloat blendTime;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send when the animation is finished playing. NOTE: Not sent with Loop or PingPong wrap modes!")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send when the animation loops. If you want to send this event to another FSM use Set Event Target. NOTE: This event is only sent with Loop and PingPong wrap modes.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Stop playing the animation when this state is exited.")]
		public bool stopOnExit;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AnimationState anim;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float prevAnimtTime;

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xEFB6A0", Offset = "0xEFB6A0", VA = "0xEFB6A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xEFB790", Offset = "0xEFB790", VA = "0xEFB790", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xEFB794", Offset = "0xEFB794", VA = "0xEFB794")]
		private void DoPlayRandomAnimation()
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xEFB808", Offset = "0xEFB808", VA = "0xEFB808")]
		private void DoPlayAnimation(string animName)
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xEFB9C4", Offset = "0xEFB9C4", VA = "0xEFB9C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xEFBB5C", Offset = "0xEFBB5C", VA = "0xEFBB5C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xEFBB6C", Offset = "0xEFBB6C", VA = "0xEFBB6C")]
		private void StopAnimation()
		{
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xEFBC48", Offset = "0xEFBC48", VA = "0xEFBC48")]
		public PlayRandomAnimation()
		{
		}
	}
	[Token(Token = "0x200011E")]
	[Tooltip("Removes a mixing transform previously added with Add Mixing Transform. If transform has been added as recursive, then it will be removed as recursive. Once you remove all mixing transforms added to animation state all curves become animated again.")]
	[ActionCategory(ActionCategory.Animation)]
	public class RemoveMixingTransform : BaseAnimationAction
	{
		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject playing the animation.")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the animation.")]
		[RequiredField]
		public FsmString animationName;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The mixing transform to remove. E.g., root/upper_body/left_shoulder")]
		public FsmString transfrom;

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xEFBC4C", Offset = "0xEFBC4C", VA = "0xEFBC4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0xEFBCB4", Offset = "0xEFBCB4", VA = "0xEFBCB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0xEFBCD0", Offset = "0xEFBCD0", VA = "0xEFBCD0")]
		private void DoRemoveMixingTransform()
		{
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0xEFBDF8", Offset = "0xEFBDF8", VA = "0xEFBDF8")]
		public RemoveMixingTransform()
		{
		}
	}
	[Token(Token = "0x200011F")]
	[Tooltip("Rewinds the named animation.")]
	[ActionCategory(ActionCategory.Animation)]
	public class RewindAnimation : BaseAnimationAction
	{
		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The Game Object playing the animation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the animation to rewind.")]
		[UIHint(UIHint.Animation)]
		public FsmString animName;

		[Token(Token = "0x6000603")]
		[Address(RVA = "0xEFBDFC", Offset = "0xEFBDFC", VA = "0xEFBDFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0xEFBE24", Offset = "0xEFBE24", VA = "0xEFBE24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0xEFBE40", Offset = "0xEFBE40", VA = "0xEFBE40")]
		private void DoRewindAnimation()
		{
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0xEFBF1C", Offset = "0xEFBF1C", VA = "0xEFBF1C")]
		public RewindAnimation()
		{
		}
	}
	[Token(Token = "0x2000120")]
	[ActionCategory(ActionCategory.Animation)]
	[Tooltip("Sets the Speed of an Animation. Check Every Frame to update the animation time continuously, e.g., if you're manipulating a variable that controls animation speed.")]
	public class SetAnimationSpeed : BaseAnimationAction
	{
		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object playing the animation.")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Animation)]
		[RequiredField]
		[Tooltip("The name of the animation.")]
		public FsmString animName;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The desired animation speed. 1= normal, 0.5 = half speed, 2 = double speed.")]
		public FsmFloat speed;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Update the speed every frame. Useful if you're using a variable to set Speed.")]
		public bool everyFrame;

		[Token(Token = "0x6000607")]
		[Address(RVA = "0xEFBF20", Offset = "0xEFBF20", VA = "0xEFBF20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0xEFBF6C", Offset = "0xEFBF6C", VA = "0xEFBF6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0xEFC110", Offset = "0xEFC110", VA = "0xEFC110", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xEFBFCC", Offset = "0xEFBFCC", VA = "0xEFBFCC")]
		private void DoSetAnimationSpeed(GameObject go)
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xEFC154", Offset = "0xEFC154", VA = "0xEFC154")]
		public SetAnimationSpeed()
		{
		}
	}
	[Token(Token = "0x2000121")]
	[ActionCategory(ActionCategory.Animation)]
	[Tooltip("Sets the current Time of an Animation. Useful for manually controlling playback of an animation. Check Every Frame to update the time continuously.")]
	public class SetAnimationTime : BaseAnimationAction
	{
		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		[Tooltip("The Game Object playing the animation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The name of the animation.")]
		[UIHint(UIHint.Animation)]
		public FsmString animName;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The time to set the animation to.")]
		public FsmFloat time;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Use normalized time: 0 = start ; 1 = end. Useful if you don't care about the length of the exact length of the animation.")]
		public bool normalized;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Set time every frame. Useful if you're using a variable as Time.")]
		public bool everyFrame;

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xEFC184", Offset = "0xEFC184", VA = "0xEFC184", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0xEFC1C4", Offset = "0xEFC1C4", VA = "0xEFC1C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xEFC3C8", Offset = "0xEFC3C8", VA = "0xEFC3C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0xEFC224", Offset = "0xEFC224", VA = "0xEFC224")]
		private void DoSetAnimationTime(GameObject go)
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0xEFC40C", Offset = "0xEFC40C", VA = "0xEFC40C")]
		public SetAnimationTime()
		{
		}
	}
	[Token(Token = "0x2000122")]
	[ActionCategory(ActionCategory.Animation)]
	[Tooltip("Sets the Blend Weight of an Animation. Check Every Frame to update the weight continuously, e.g., if you're manipulating a variable that controls the weight.")]
	public class SetAnimationWeight : BaseAnimationAction
	{
		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The Game Object playing the animation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Animation)]
		[Tooltip("The name of the animation.")]
		public FsmString animName;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The weight to set the animation to.")]
		public FsmFloat weight;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Perform this action every frame. Useful if Weight is a variable.")]
		public bool everyFrame;

		[Token(Token = "0x6000611")]
		[Address(RVA = "0xEFC410", Offset = "0xEFC410", VA = "0xEFC410", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0xEFC45C", Offset = "0xEFC45C", VA = "0xEFC45C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0xEFC600", Offset = "0xEFC600", VA = "0xEFC600", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0xEFC4BC", Offset = "0xEFC4BC", VA = "0xEFC4BC")]
		private void DoSetAnimationWeight(GameObject go)
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0xEFC644", Offset = "0xEFC644", VA = "0xEFC644")]
		public SetAnimationWeight()
		{
		}
	}
	[Token(Token = "0x2000123")]
	[Tooltip("Stops all playing Animations on a Game Object. Optionally, specify a single Animation to Stop.")]
	[ActionCategory(ActionCategory.Animation)]
	public class StopAnimation : BaseAnimationAction
	{
		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object playing the animation.")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Animation)]
		[Tooltip("The name of the animation to stop. Leave empty to stop all playing animations.")]
		public FsmString animName;

		[Token(Token = "0x6000616")]
		[Address(RVA = "0xEFC674", Offset = "0xEFC674", VA = "0xEFC674", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0xEFC69C", Offset = "0xEFC69C", VA = "0xEFC69C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0xEFC6B8", Offset = "0xEFC6B8", VA = "0xEFC6B8")]
		private void DoStopAnimation()
		{
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0xEFC7A0", Offset = "0xEFC7A0", VA = "0xEFC7A0")]
		public StopAnimation()
		{
		}
	}
	[Token(Token = "0x2000124")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Create a dynamic transition between the current state and the destination state. Both states have to be on the same layer. Note: You cannot change the current state on a synchronized layer, you need to change it on the referenced layer.")]
	public class AnimatorCrossFade : ComponentAction<Animator>
	{
		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the state that will be played.")]
		public FsmString stateName;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The duration of the transition. Value is in source state normalized time.")]
		public FsmFloat transitionDuration;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Layer index containing the destination state. Leave to none to ignore")]
		public FsmInt layer;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Start time of the current destination state. Value is in source state normalized time, should be between 0 and 1.")]
		public FsmFloat normalizedTime;

		[Token(Token = "0x17000081")]
		private Animator animator
		{
			[Token(Token = "0x600061A")]
			[Address(RVA = "0xEFC7A4", Offset = "0xEFC7A4", VA = "0xEFC7A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0xEFC7AC", Offset = "0xEFC7AC", VA = "0xEFC7AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0xEFC8A0", Offset = "0xEFC8A0", VA = "0xEFC8A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0xEFCA0C", Offset = "0xEFCA0C", VA = "0xEFCA0C")]
		public AnimatorCrossFade()
		{
		}
	}
	[Token(Token = "0x2000125")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Interrupts the automatic target matching. CompleteMatch will make the GameObject match the target completely at the next frame.")]
	public class AnimatorInterruptMatchTarget : ComponentAction<Animator>
	{
		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Will make the GameObject match the target completely at the next frame")]
		public FsmBool completeMatch;

		[Token(Token = "0x600061E")]
		[Address(RVA = "0xEFCA54", Offset = "0xEFCA54", VA = "0xEFCA54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0xEFCA88", Offset = "0xEFCA88", VA = "0xEFCA88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0xEFCB24", Offset = "0xEFCB24", VA = "0xEFCB24")]
		public AnimatorInterruptMatchTarget()
		{
		}
	}
	[Token(Token = "0x2000126")]
	[Tooltip("Automatically adjust the GameObject position and rotation so that the AvatarTarget reaches the Match Position when the current animation state is at the specified progress.")]
	[ActionCategory(ActionCategory.Animator)]
	public class AnimatorMatchTarget : ComponentAction<Animator>
	{
		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject with an Animator component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The body part that is used to match the target.")]
		public AvatarTarget bodyPart;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("A GameObject target to match. Leave empty to use position instead.")]
		public FsmGameObject target;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("A target position to match. If Target GameObject is set, this is used as an offset from the Target's position.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("A rotation to match. If Target GameObject is set, this is used as an offset from the Target's rotation.")]
		public FsmQuaternion targetRotation;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The MatchTargetWeightMask Position XYZ weight")]
		public FsmVector3 positionWeight;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The MatchTargetWeightMask Rotation weight")]
		public FsmFloat rotationWeight;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Start time within the animation clip (0 - beginning of clip, 1 - end of clip)")]
		public FsmFloat startNormalizedTime;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("End time within the animation clip (0 - beginning of clip, 1 - end of clip). Values greater than 1 trigger a match after a certain number of loops. Example: 2.3 means at 30% of 2nd loop.")]
		public FsmFloat targetNormalizedTime;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Should always be true")]
		public bool everyFrame;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject cachedTarget;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform targetTransform;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private MatchTargetWeightMask weightMask;

		[Token(Token = "0x17000082")]
		private Animator animator
		{
			[Token(Token = "0x6000621")]
			[Address(RVA = "0xEFCB6C", Offset = "0xEFCB6C", VA = "0xEFCB6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0xEFCB74", Offset = "0xEFCB74", VA = "0xEFCB74", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0xEFCCE8", Offset = "0xEFCCE8", VA = "0xEFCCE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xEFD134", Offset = "0xEFD134", VA = "0xEFD134", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0xEFCE4C", Offset = "0xEFCE4C", VA = "0xEFCE4C")]
		private void DoMatchTarget()
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xEFD138", Offset = "0xEFD138", VA = "0xEFD138")]
		public AnimatorMatchTarget()
		{
		}
	}
	[Token(Token = "0x2000127")]
	[Tooltip("Plays a state. This could be used to synchronize your animation with audio or synchronize an Animator over the network.")]
	[ActionCategory(ActionCategory.Animator)]
	public class AnimatorPlay : ComponentAction<Animator>
	{
		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the state that will be played.")]
		public FsmString stateName;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The layer where the state is.")]
		public FsmInt layer;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The normalized time at which the state will play")]
		public FsmFloat normalizedTime;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame. Useful when using normalizedTime to manually control the animation.")]
		public bool everyFrame;

		[Token(Token = "0x17000083")]
		private Animator animator
		{
			[Token(Token = "0x6000627")]
			[Address(RVA = "0xEFD180", Offset = "0xEFD180", VA = "0xEFD180")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0xEFD188", Offset = "0xEFD188", VA = "0xEFD188", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xEFD268", Offset = "0xEFD268", VA = "0xEFD268", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0xEFD3B0", Offset = "0xEFD3B0", VA = "0xEFD3B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0xEFD294", Offset = "0xEFD294", VA = "0xEFD294")]
		private void DoAnimatorPlay()
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0xEFD3B4", Offset = "0xEFD3B4", VA = "0xEFD3B4")]
		public AnimatorPlay()
		{
		}
	}
	[Token(Token = "0x2000128")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Sets the animator in playback mode.")]
	public class AnimatorStartPlayback : ComponentAction<Animator>
	{
		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x600062D")]
		[Address(RVA = "0xEFD3FC", Offset = "0xEFD3FC", VA = "0xEFD3FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0xEFD408", Offset = "0xEFD408", VA = "0xEFD408", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0xEFD48C", Offset = "0xEFD48C", VA = "0xEFD48C")]
		public AnimatorStartPlayback()
		{
		}
	}
	[Token(Token = "0x2000129")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Sets the animator in recording mode, and allocates a circular buffer of size frameCount. After this call, the recorder starts collecting up to frameCount frames in the buffer. Note it is not possible to start playback until a call to StopRecording is made")]
	public class AnimatorStartRecording : ComponentAction<Animator>
	{
		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The number of frames (updates) that will be recorded. If frameCount is 0, the recording will continue until the user calls StopRecording. The maximum value for frameCount is 10000.")]
		[RequiredField]
		public FsmInt frameCount;

		[Token(Token = "0x6000630")]
		[Address(RVA = "0xEFD4D4", Offset = "0xEFD4D4", VA = "0xEFD4D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0xEFD508", Offset = "0xEFD508", VA = "0xEFD508", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0xEFD5A4", Offset = "0xEFD5A4", VA = "0xEFD5A4")]
		public AnimatorStartRecording()
		{
		}
	}
	[Token(Token = "0x200012A")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Stops the animator playback mode. When playback stops, the avatar resumes getting control from game logic")]
	public class AnimatorStopPlayback : ComponentAction<Animator>
	{
		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6000633")]
		[Address(RVA = "0xEFD5EC", Offset = "0xEFD5EC", VA = "0xEFD5EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xEFD5F8", Offset = "0xEFD5F8", VA = "0xEFD5F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xEFD67C", Offset = "0xEFD67C", VA = "0xEFD67C")]
		public AnimatorStopPlayback()
		{
		}
	}
	[Token(Token = "0x200012B")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Stops the animator record mode. It will lock the recording buffer's contents in its current state. The data get saved for subsequent playback with StartPlayback.")]
	public class AnimatorStopRecording : ComponentAction<Animator>
	{
		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The recorder StartTime")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		public FsmFloat recorderStartTime;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The recorder StopTime")]
		[UIHint(UIHint.Variable)]
		public FsmFloat recorderStopTime;

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xEFD6C4", Offset = "0xEFD6C4", VA = "0xEFD6C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0xEFD6FC", Offset = "0xEFD6FC", VA = "0xEFD6FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0xEFD7B8", Offset = "0xEFD7B8", VA = "0xEFD7B8")]
		public AnimatorStopRecording()
		{
		}
	}
	[Token(Token = "0x200012C")]
	public abstract class FsmStateActionAnimatorBase : ComponentAction<Animator>
	{
		[Token(Token = "0x200012D")]
		public enum AnimatorFrameUpdateSelector
		{
			[Token(Token = "0x40004E5")]
			OnUpdate,
			[Token(Token = "0x40004E6")]
			OnAnimatorMove,
			[Token(Token = "0x40004E7")]
			OnAnimatorIK
		}

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Select when to perform the action, during OnUpdate, OnAnimatorMove, OnAnimatorIK")]
		public AnimatorFrameUpdateSelector everyFrameOption;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected int IklayerIndex;

		[Token(Token = "0x6000639")]
		public abstract void OnActionUpdate();

		[Token(Token = "0x600063A")]
		[Address(RVA = "0xEFD800", Offset = "0xEFD800", VA = "0xEFD800", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0xEFD80C", Offset = "0xEFD80C", VA = "0xEFD80C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xEFD864", Offset = "0xEFD864", VA = "0xEFD864", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0xEFD8A8", Offset = "0xEFD8A8", VA = "0xEFD8A8", Slot = "59")]
		public override void DoAnimatorMove()
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0xEFD8F0", Offset = "0xEFD8F0", VA = "0xEFD8F0", Slot = "60")]
		public override void DoAnimatorIK(int layerIndex)
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0xEFD93C", Offset = "0xEFD93C", VA = "0xEFD93C")]
		protected FsmStateActionAnimatorBase()
		{
		}
	}
	[Token(Token = "0x200012E")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the value of ApplyRootMotion of an avatar. If true, root is controlled by animations")]
	public class GetAnimatorApplyRootMotion : ComponentAction<Animator>
	{
		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Results")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is the rootMotionapplied. If true, root is controlled by animations")]
		public FsmBool rootMotionApplied;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event send if the root motion is applied")]
		public FsmEvent rootMotionIsAppliedEvent;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event send if the root motion is not applied")]
		public FsmEvent rootMotionIsNotAppliedEvent;

		[Token(Token = "0x6000640")]
		[Address(RVA = "0xEFD984", Offset = "0xEFD984", VA = "0xEFD984", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0xEFD9CC", Offset = "0xEFD9CC", VA = "0xEFD9CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0xEFDA88", Offset = "0xEFDA88", VA = "0xEFDA88")]
		public GetAnimatorApplyRootMotion()
		{
		}
	}
	[Token(Token = "0x200012F")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the avatar body mass center position and rotation. Optionally accepts a GameObject to get the body transform. \nThe position and rotation are local to the GameObject")]
	public class GetAnimatorBody : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The avatar body mass center")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		public FsmVector3 bodyPosition;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The avatar body mass center")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion bodyRotation;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("If set, apply the body mass center position and rotation to this gameObject")]
		public FsmGameObject bodyGameObject;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject cachedBodyGameObject;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform _transform;

		[Token(Token = "0x17000084")]
		private Animator animator
		{
			[Token(Token = "0x6000643")]
			[Address(RVA = "0xEFDAD0", Offset = "0xEFDAD0", VA = "0xEFDAD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0xEFDAD8", Offset = "0xEFDAD8", VA = "0xEFDAD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0xEFDB38", Offset = "0xEFDB38", VA = "0xEFDB38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0xEFDB44", Offset = "0xEFDB44", VA = "0xEFDB44", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0xEFDB70", Offset = "0xEFDB70", VA = "0xEFDB70")]
		private void DoGetBodyPosition()
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xEFDD7C", Offset = "0xEFDD7C", VA = "0xEFDD7C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0xEFDDEC", Offset = "0xEFDDEC", VA = "0xEFDDEC")]
		public GetAnimatorBody()
		{
		}
	}
	[Token(Token = "0x2000130")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the GameObject mapped to this human bone id")]
	public class GetAnimatorBoneGameObject : ComponentAction<Animator>
	{
		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The bone reference")]
		[ObjectType(typeof(HumanBodyBones))]
		public FsmEnum bone;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		[Tooltip("The Bone's GameObject")]
		public FsmGameObject boneGameObject;

		[Token(Token = "0x600064A")]
		[Address(RVA = "0xEFDDF0", Offset = "0xEFDDF0", VA = "0xEFDDF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0xEFDE80", Offset = "0xEFDE80", VA = "0xEFDE80", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0xEFDF78", Offset = "0xEFDF78", VA = "0xEFDF78")]
		public GetAnimatorBoneGameObject()
		{
		}
	}
	[Token(Token = "0x2000131")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the value of a bool parameter")]
	public class GetAnimatorBool : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.AnimatorBool)]
		[RequiredField]
		[Tooltip("The animator parameter")]
		public FsmString parameter;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The bool value of the animator parameter")]
		public FsmBool result;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string cachedParameter;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int paramID;

		[Token(Token = "0x17000085")]
		private Animator animator
		{
			[Token(Token = "0x600064D")]
			[Address(RVA = "0xEFDFC0", Offset = "0xEFDFC0", VA = "0xEFDFC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0xEFDFC8", Offset = "0xEFDFC8", VA = "0xEFDFC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0xEFE008", Offset = "0xEFE008", VA = "0xEFE008", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0xEFE140", Offset = "0xEFE140", VA = "0xEFE140", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0xEFE034", Offset = "0xEFE034", VA = "0xEFE034")]
		private void GetParameter()
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0xEFE144", Offset = "0xEFE144", VA = "0xEFE144")]
		public GetAnimatorBool()
		{
		}
	}
	[Token(Token = "0x2000132")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Returns the culling of this Animator component. Optionally sends events.\nIf true ('AlwaysAnimate'): always animate the entire character. Object is animated even when offscreen.\nIf False ('BasedOnRenderers') animation is disabled when renderers are not visible.")]
	public class GetAnimatorCullingMode : ComponentAction<Animator>
	{
		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		[Tooltip("If true, always animate the entire character, else animation is disabled when renderers are not visible")]
		public FsmBool alwaysAnimate;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event send if culling mode is 'AlwaysAnimate'")]
		public FsmEvent alwaysAnimateEvent;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event send if culling mode is 'BasedOnRenders'")]
		public FsmEvent basedOnRenderersEvent;

		[Token(Token = "0x6000653")]
		[Address(RVA = "0xEFE148", Offset = "0xEFE148", VA = "0xEFE148", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xEFE190", Offset = "0xEFE190", VA = "0xEFE190", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xEFE250", Offset = "0xEFE250", VA = "0xEFE250")]
		public GetAnimatorCullingMode()
		{
		}
	}
	[Token(Token = "0x2000133")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the current State information on a specified layer")]
	public class GetAnimatorCurrentStateInfo : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The target.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The layer's index")]
		public FsmInt layerIndex;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The layer's name.")]
		[ActionSection("Results")]
		public FsmString name;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The layer's name Hash. Obsolete in Unity 5, use fullPathHash or shortPathHash instead, nameHash will be the same as shortNameHash for legacy")]
		public FsmInt nameHash;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The full path hash for this state.")]
		[UIHint(UIHint.Variable)]
		public FsmInt fullPathHash;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The name Hash. Does not include the parent layer's name")]
		[UIHint(UIHint.Variable)]
		public FsmInt shortPathHash;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The layer's tag hash")]
		[UIHint(UIHint.Variable)]
		public FsmInt tagHash;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is the state looping. All animations in the state must be looping")]
		public FsmBool isStateLooping;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The Current duration of the state. In seconds, can vary when the State contains a Blend Tree ")]
		[UIHint(UIHint.Variable)]
		public FsmFloat length;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The integer part is the number of time a state has been looped. The fractional part is the % (0-1) of progress in the current loop")]
		[UIHint(UIHint.Variable)]
		public FsmFloat normalizedTime;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The integer part is the number of time a state has been looped. This is extracted from the normalizedTime")]
		[UIHint(UIHint.Variable)]
		public FsmInt loopCount;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The progress in the current loop. This is extracted from the normalizedTime")]
		[UIHint(UIHint.Variable)]
		public FsmFloat currentLoopProgress;

		[Token(Token = "0x17000086")]
		private Animator animator
		{
			[Token(Token = "0x6000656")]
			[Address(RVA = "0xEFE298", Offset = "0xEFE298", VA = "0xEFE298")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xEFE2A0", Offset = "0xEFE2A0", VA = "0xEFE2A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0xEFE378", Offset = "0xEFE378", VA = "0xEFE378", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0xEFE6C8", Offset = "0xEFE6C8", VA = "0xEFE6C8", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0xEFE3A4", Offset = "0xEFE3A4", VA = "0xEFE3A4")]
		private void GetLayerInfo()
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0xEFE6CC", Offset = "0xEFE6CC", VA = "0xEFE6CC")]
		public GetAnimatorCurrentStateInfo()
		{
		}
	}
	[Token(Token = "0x2000134")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Check the current State name on a specified layer, this is more than the layer name, it holds the current state as well.")]
	public class GetAnimatorCurrentStateInfoIsName : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The layer's index")]
		public FsmInt layerIndex;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The name to check the layer against.")]
		public FsmString name;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("True if name matches")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		public FsmBool isMatching;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event send if name matches")]
		public FsmEvent nameMatchEvent;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event send if name doesn't match")]
		public FsmEvent nameDoNotMatchEvent;

		[Token(Token = "0x17000087")]
		private Animator animator
		{
			[Token(Token = "0x600065C")]
			[Address(RVA = "0xEFE6D0", Offset = "0xEFE6D0", VA = "0xEFE6D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0xEFE6D8", Offset = "0xEFE6D8", VA = "0xEFE6D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0xEFE740", Offset = "0xEFE740", VA = "0xEFE740", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0xEFE8C8", Offset = "0xEFE8C8", VA = "0xEFE8C8", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0xEFE76C", Offset = "0xEFE76C", VA = "0xEFE76C")]
		private void IsName()
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0xEFE8CC", Offset = "0xEFE8CC", VA = "0xEFE8CC")]
		public GetAnimatorCurrentStateInfoIsName()
		{
		}
	}
	[Token(Token = "0x2000135")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Does tag match the tag of the active state in the state machine")]
	public class GetAnimatorCurrentStateInfoIsTag : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The tag to check the layer against.")]
		public FsmString tag;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if tag matches")]
		public FsmBool tagMatch;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event send if tag matches")]
		public FsmEvent tagMatchEvent;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event send if tag matches")]
		public FsmEvent tagDoNotMatchEvent;

		[Token(Token = "0x17000088")]
		private Animator animator
		{
			[Token(Token = "0x6000662")]
			[Address(RVA = "0xEFE8D0", Offset = "0xEFE8D0", VA = "0xEFE8D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0xEFE8D8", Offset = "0xEFE8D8", VA = "0xEFE8D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0xEFE950", Offset = "0xEFE950", VA = "0xEFE950", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0xEFEAA8", Offset = "0xEFEAA8", VA = "0xEFEAA8", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0xEFE97C", Offset = "0xEFE97C", VA = "0xEFE97C")]
		private void IsTag()
		{
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0xEFEAAC", Offset = "0xEFEAAC", VA = "0xEFEAAC")]
		public GetAnimatorCurrentStateInfoIsTag()
		{
		}
	}
	[Token(Token = "0x2000136")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the current transition information on a specified layer. Only valid when during a transition.")]
	public class GetAnimatorCurrentTransitionInfo : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The unique name of the Transition")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		public FsmString name;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The unique name of the Transition")]
		[UIHint(UIHint.Variable)]
		public FsmInt nameHash;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The user-specified name of the Transition")]
		public FsmInt userNameHash;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Normalized time of the Transition")]
		[UIHint(UIHint.Variable)]
		public FsmFloat normalizedTime;

		[Token(Token = "0x17000089")]
		private Animator animator
		{
			[Token(Token = "0x6000668")]
			[Address(RVA = "0xEFEAB0", Offset = "0xEFEAB0", VA = "0xEFEAB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0xEFEAB8", Offset = "0xEFEAB8", VA = "0xEFEAB8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0xEFEB30", Offset = "0xEFEB30", VA = "0xEFEB30", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0xEFECF4", Offset = "0xEFECF4", VA = "0xEFECF4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0xEFEB5C", Offset = "0xEFEB5C", VA = "0xEFEB5C")]
		private void GetTransitionInfo()
		{
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0xEFECF8", Offset = "0xEFECF8", VA = "0xEFECF8")]
		public GetAnimatorCurrentTransitionInfo()
		{
		}
	}
	[Token(Token = "0x2000137")]
	[Tooltip("Check the active Transition name on a specified layer. Format is 'CURRENT_STATE -> NEXT_STATE'.")]
	[ActionCategory(ActionCategory.Animator)]
	public class GetAnimatorCurrentTransitionInfoIsName : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The layer's index")]
		public FsmInt layerIndex;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The name to check the transition against.")]
		public FsmString name;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if name matches")]
		public FsmBool nameMatch;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event send if name matches")]
		public FsmEvent nameMatchEvent;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event send if name doesn't match")]
		public FsmEvent nameDoNotMatchEvent;

		[Token(Token = "0x1700008A")]
		private Animator animator
		{
			[Token(Token = "0x600066E")]
			[Address(RVA = "0xEFECFC", Offset = "0xEFECFC", VA = "0xEFECFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0xEFED04", Offset = "0xEFED04", VA = "0xEFED04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0xEFED74", Offset = "0xEFED74", VA = "0xEFED74", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0xEFEEBC", Offset = "0xEFEEBC", VA = "0xEFEEBC", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0xEFEDA0", Offset = "0xEFEDA0", VA = "0xEFEDA0")]
		private void IsName()
		{
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0xEFEEC0", Offset = "0xEFEEC0", VA = "0xEFEEC0")]
		public GetAnimatorCurrentTransitionInfoIsName()
		{
		}
	}
	[Token(Token = "0x2000138")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Check the active Transition user-specified name on a specified layer.")]
	public class GetAnimatorCurrentTransitionInfoIsUserName : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The user-specified name to check the transition against.")]
		public FsmString userName;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if name matches")]
		[ActionSection("Results")]
		public FsmBool nameMatch;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event send if name matches")]
		public FsmEvent nameMatchEvent;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event send if name doesn't match")]
		public FsmEvent nameDoNotMatchEvent;

		[Token(Token = "0x1700008B")]
		private Animator animator
		{
			[Token(Token = "0x6000674")]
			[Address(RVA = "0xEFEEC4", Offset = "0xEFEEC4", VA = "0xEFEEC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0xEFEECC", Offset = "0xEFEECC", VA = "0xEFEECC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0xEFEF3C", Offset = "0xEFEF3C", VA = "0xEFEF3C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0xEFF098", Offset = "0xEFF098", VA = "0xEFF098", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0xEFEF68", Offset = "0xEFEF68", VA = "0xEFEF68")]
		private void IsName()
		{
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0xEFF09C", Offset = "0xEFF09C", VA = "0xEFF09C")]
		public GetAnimatorCurrentTransitionInfoIsUserName()
		{
		}
	}
	[Token(Token = "0x2000139")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the avatar delta position and rotation for the last evaluated frame.")]
	public class GetAnimatorDelta : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The avatar delta position for the last evaluated frame")]
		public FsmVector3 deltaPosition;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The avatar delta position for the last evaluated frame")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion deltaRotation;

		[Token(Token = "0x1700008C")]
		private Animator animator
		{
			[Token(Token = "0x600067A")]
			[Address(RVA = "0xEFF0A0", Offset = "0xEFF0A0", VA = "0xEFF0A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0xEFF0A8", Offset = "0xEFF0A8", VA = "0xEFF0A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0xEFF0E8", Offset = "0xEFF0E8", VA = "0xEFF0E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0xEFF1D4", Offset = "0xEFF1D4", VA = "0xEFF1D4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0xEFF114", Offset = "0xEFF114", VA = "0xEFF114")]
		private void DoGetDeltaPosition()
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0xEFF1D8", Offset = "0xEFF1D8", VA = "0xEFF1D8")]
		public GetAnimatorDelta()
		{
		}
	}
	[Token(Token = "0x200013A")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Returns the feet pivot. At 0% blending point is body mass center. At 100% blending point is feet pivot")]
	public class GetAnimatorFeetPivotActive : ComponentAction<Animator>
	{
		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The feet pivot Blending. At 0% blending point is body mass center. At 100% blending point is feet pivot")]
		public FsmFloat feetPivotActive;

		[Token(Token = "0x6000680")]
		[Address(RVA = "0xEFF1DC", Offset = "0xEFF1DC", VA = "0xEFF1DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0xEFF204", Offset = "0xEFF204", VA = "0xEFF204", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0xEFF294", Offset = "0xEFF294", VA = "0xEFF294")]
		public GetAnimatorFeetPivotActive()
		{
		}
	}
	[Token(Token = "0x200013B")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the value of a float parameter")]
	public class GetAnimatorFloat : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The animator parameter")]
		[UIHint(UIHint.AnimatorFloat)]
		public FsmString parameter;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("The float value of the animator parameter")]
		[UIHint(UIHint.Variable)]
		public FsmFloat result;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string cachedParameter;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int paramID;

		[Token(Token = "0x1700008D")]
		private Animator animator
		{
			[Token(Token = "0x6000683")]
			[Address(RVA = "0xEFF2DC", Offset = "0xEFF2DC", VA = "0xEFF2DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0xEFF2E4", Offset = "0xEFF2E4", VA = "0xEFF2E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0xEFF324", Offset = "0xEFF324", VA = "0xEFF324", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0xEFF458", Offset = "0xEFF458", VA = "0xEFF458", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0xEFF350", Offset = "0xEFF350", VA = "0xEFF350")]
		private void GetParameter()
		{
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0xEFF45C", Offset = "0xEFF45C", VA = "0xEFF45C")]
		public GetAnimatorFloat()
		{
		}
	}
	[Token(Token = "0x200013C")]
	[Tooltip("Returns The current gravity weight based on current animations that are played")]
	[ActionCategory(ActionCategory.Animator)]
	public class GetAnimatorGravityWeight : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The current gravity weight based on current animations that are played")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		public FsmFloat gravityWeight;

		[Token(Token = "0x1700008E")]
		private Animator animator
		{
			[Token(Token = "0x6000689")]
			[Address(RVA = "0xEFF460", Offset = "0xEFF460", VA = "0xEFF460")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xEFF468", Offset = "0xEFF468", VA = "0xEFF468", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xEFF4A0", Offset = "0xEFF4A0", VA = "0xEFF4A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0xEFF568", Offset = "0xEFF568", VA = "0xEFF568", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xEFF4CC", Offset = "0xEFF4CC", VA = "0xEFF4CC")]
		private void DoGetGravityWeight()
		{
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0xEFF56C", Offset = "0xEFF56C", VA = "0xEFF56C")]
		public GetAnimatorGravityWeight()
		{
		}
	}
	[Token(Token = "0x200013D")]
	[Tooltip("Returns the scale of the current Avatar for a humanoid rig, (1 by default if the rig is generic).\n The scale is relative to Unity's Default Avatar")]
	[ActionCategory(ActionCategory.Animator)]
	public class GetAnimatorHumanScale : ComponentAction<Animator>
	{
		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("the scale of the current Avatar")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmFloat humanScale;

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xEFF570", Offset = "0xEFF570", VA = "0xEFF570", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xEFF598", Offset = "0xEFF598", VA = "0xEFF598", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xEFF628", Offset = "0xEFF628", VA = "0xEFF628")]
		public GetAnimatorHumanScale()
		{
		}
	}
	[Token(Token = "0x200013E")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the position, rotation and weights of an IK goal. A GameObject can be set to use for the position and rotation")]
	public class GetAnimatorIKGoal : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ObjectType(typeof(AvatarIKGoal))]
		[Tooltip("The IK goal")]
		public FsmEnum iKGoal;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		[Tooltip("The gameObject to apply ik goal position and rotation to.")]
		public FsmGameObject goal;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Gets The position of the ik goal. If Goal GameObject is defined, position is used as an offset from Goal")]
		public FsmVector3 position;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Gets The rotation of the ik goal.If Goal GameObject define, rotation is used as an offset from Goal")]
		public FsmQuaternion rotation;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Gets The translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal)")]
		[UIHint(UIHint.Variable)]
		public FsmFloat positionWeight;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Gets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal)")]
		[UIHint(UIHint.Variable)]
		public FsmFloat rotationWeight;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject cachedGoal;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform _transform;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AvatarIKGoal _iKGoal;

		[Token(Token = "0x1700008F")]
		private Animator animator
		{
			[Token(Token = "0x6000692")]
			[Address(RVA = "0xEFF670", Offset = "0xEFF670", VA = "0xEFF670")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xEFF678", Offset = "0xEFF678", VA = "0xEFF678", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xEFF6F8", Offset = "0xEFF6F8", VA = "0xEFF6F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xEFF6FC", Offset = "0xEFF6FC", VA = "0xEFF6FC", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xEFF728", Offset = "0xEFF728", VA = "0xEFF728")]
		private void DoGetIKGoal()
		{
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xEFFA18", Offset = "0xEFFA18", VA = "0xEFFA18")]
		public GetAnimatorIKGoal()
		{
		}
	}
	[Token(Token = "0x200013F")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the value of an int parameter.")]
	public class GetAnimatorInt : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.AnimatorInt)]
		[RequiredField]
		[Tooltip("The animator parameter")]
		public FsmString parameter;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The int value of the animator parameter")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmInt result;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string cachedParameter;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int paramID;

		[Token(Token = "0x17000090")]
		private Animator animator
		{
			[Token(Token = "0x6000698")]
			[Address(RVA = "0xEFFA1C", Offset = "0xEFFA1C", VA = "0xEFFA1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xEFFA24", Offset = "0xEFFA24", VA = "0xEFFA24", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0xEFFA64", Offset = "0xEFFA64", VA = "0xEFFA64", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0xEFFB98", Offset = "0xEFFB98", VA = "0xEFFB98", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0xEFFA90", Offset = "0xEFFA90", VA = "0xEFFA90")]
		private void GetParameter()
		{
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0xEFFB9C", Offset = "0xEFFB9C", VA = "0xEFFB9C")]
		public GetAnimatorInt()
		{
		}
	}
	[Token(Token = "0x2000140")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Returns true if the current rig is humanoid, false if it is generic. Can also sends events")]
	public class GetAnimatorIsHuman : ComponentAction<Animator>
	{
		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if the current rig is humanoid, False if it is generic")]
		[ActionSection("Results")]
		public FsmBool isHuman;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event send if rig is humanoid")]
		public FsmEvent isHumanEvent;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event send if rig is generic")]
		public FsmEvent isGenericEvent;

		[Token(Token = "0x600069E")]
		[Address(RVA = "0xEFFBA0", Offset = "0xEFFBA0", VA = "0xEFFBA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0xEFFBE8", Offset = "0xEFFBE8", VA = "0xEFFBE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xEFFCBC", Offset = "0xEFFCBC", VA = "0xEFFCBC")]
		public GetAnimatorIsHuman()
		{
		}
	}
	[Token(Token = "0x2000141")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Returns true if the specified layer is in a transition. Can also send events")]
	public class GetAnimatorIsLayerInTransition : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The layer's index")]
		public FsmInt layerIndex;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ActionSection("Results")]
		[Tooltip("True if automatic matching is active")]
		[UIHint(UIHint.Variable)]
		public FsmBool isInTransition;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event send if automatic matching is active")]
		public FsmEvent isInTransitionEvent;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event send if automatic matching is not active")]
		public FsmEvent isNotInTransitionEvent;

		[Token(Token = "0x17000091")]
		private Animator animator
		{
			[Token(Token = "0x60006A1")]
			[Address(RVA = "0xEFFD04", Offset = "0xEFFD04", VA = "0xEFFD04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xEFFD0C", Offset = "0xEFFD0C", VA = "0xEFFD0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xEFFD60", Offset = "0xEFFD60", VA = "0xEFFD60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xEFFE80", Offset = "0xEFFE80", VA = "0xEFFE80", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xEFFD8C", Offset = "0xEFFD8C", VA = "0xEFFD8C")]
		private void DoCheckIsInTransition()
		{
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xEFFE84", Offset = "0xEFFE84", VA = "0xEFFE84")]
		public GetAnimatorIsLayerInTransition()
		{
		}
	}
	[Token(Token = "0x2000142")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Returns true if automatic matching is active. Can also send events")]
	public class GetAnimatorIsMatchingTarget : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ActionSection("Results")]
		[Tooltip("True if automatic matching is active")]
		[UIHint(UIHint.Variable)]
		public FsmBool isMatchingActive;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event send if automatic matching is active")]
		public FsmEvent matchingActivatedEvent;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event send if automatic matching is not active")]
		public FsmEvent matchingDeactivedEvent;

		[Token(Token = "0x17000092")]
		private Animator animator
		{
			[Token(Token = "0x60006A7")]
			[Address(RVA = "0xEFFE8C", Offset = "0xEFFE8C", VA = "0xEFFE8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xEFFE94", Offset = "0xEFFE94", VA = "0xEFFE94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xEFFEE8", Offset = "0xEFFEE8", VA = "0xEFFEE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xEFFFD8", Offset = "0xEFFFD8", VA = "0xEFFFD8", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xEFFF14", Offset = "0xEFFF14", VA = "0xEFFF14")]
		private void DoCheckIsMatchingActive()
		{
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xEFFFDC", Offset = "0xEFFFDC", VA = "0xEFFFDC")]
		public GetAnimatorIsMatchingTarget()
		{
		}
	}
	[Token(Token = "0x2000143")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Returns true if a parameter is controlled by an additional curve on an animation")]
	public class GetAnimatorIsParameterControlledByCurve : ComponentAction<Animator>
	{
		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The parameter's name")]
		public FsmString parameterName;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		[Tooltip("True if controlled by curve")]
		public FsmBool isControlledByCurve;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event send if controlled by curve")]
		public FsmEvent isControlledByCurveEvent;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event send if not controlled by curve")]
		public FsmEvent isNotControlledByCurveEvent;

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xEFFFE4", Offset = "0xEFFFE4", VA = "0xEFFFE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xF0003C", Offset = "0xF0003C", VA = "0xF0003C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xF00110", Offset = "0xF00110", VA = "0xF00110")]
		public GetAnimatorIsParameterControlledByCurve()
		{
		}
	}
	[Token(Token = "0x2000144")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Returns the Animator controller layer count")]
	public class GetAnimatorLayerCount : ComponentAction<Animator>
	{
		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		[Tooltip("The Animator controller layer count")]
		[RequiredField]
		public FsmInt layerCount;

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xF00158", Offset = "0xF00158", VA = "0xF00158", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xF00180", Offset = "0xF00180", VA = "0xF00180", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xF00210", Offset = "0xF00210", VA = "0xF00210")]
		public GetAnimatorLayerCount()
		{
		}
	}
	[Token(Token = "0x2000145")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Returns the name of a layer from its index")]
	public class GetAnimatorLayerName : ComponentAction<Animator>
	{
		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The layer index")]
		public FsmInt layerIndex;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ActionSection("Results")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The layer name")]
		public FsmString layerName;

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xF00258", Offset = "0xF00258", VA = "0xF00258", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xF00290", Offset = "0xF00290", VA = "0xF00290", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xF00344", Offset = "0xF00344", VA = "0xF00344")]
		public GetAnimatorLayerName()
		{
		}
	}
	[Token(Token = "0x2000146")]
	[Tooltip("Returns if additional layers affects the mass center")]
	[ActionCategory(ActionCategory.Animator)]
	public class GetAnimatorLayersAffectMassCenter : ComponentAction<Animator>
	{
		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If true, additional layers affects the mass center")]
		[RequiredField]
		[ActionSection("Results")]
		public FsmBool affectMassCenter;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event send if additional layers affects the mass center")]
		public FsmEvent affectMassCenterEvent;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event send if additional layers do no affects the mass center")]
		public FsmEvent doNotAffectMassCenterEvent;

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0xF0038C", Offset = "0xF0038C", VA = "0xF0038C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xF003D4", Offset = "0xF003D4", VA = "0xF003D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xF00490", Offset = "0xF00490", VA = "0xF00490")]
		public GetAnimatorLayersAffectMassCenter()
		{
		}
	}
	[Token(Token = "0x2000147")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the layer's current weight")]
	public class GetAnimatorLayerWeight : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The target.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[ActionSection("Results")]
		[Tooltip("The layer's current weight")]
		[UIHint(UIHint.Variable)]
		public FsmFloat layerWeight;

		[Token(Token = "0x17000093")]
		private Animator animator
		{
			[Token(Token = "0x60006B9")]
			[Address(RVA = "0xF004D8", Offset = "0xF004D8", VA = "0xF004D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xF004E0", Offset = "0xF004E0", VA = "0xF004E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xF00524", Offset = "0xF00524", VA = "0xF00524", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0xF00604", Offset = "0xF00604", VA = "0xF00604", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xF00550", Offset = "0xF00550", VA = "0xF00550")]
		private void GetLayerWeight()
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0xF00608", Offset = "0xF00608", VA = "0xF00608")]
		public GetAnimatorLayerWeight()
		{
		}
	}
	[Token(Token = "0x2000148")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Get the left foot bottom height.")]
	public class GetAnimatorLeftFootBottomHeight : ComponentAction<Animator>
	{
		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Result")]
		[Tooltip("the left foot bottom height.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat leftFootHeight;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xF00610", Offset = "0xF00610", VA = "0xF00610", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xF00640", Offset = "0xF00640", VA = "0xF00640", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xF00660", Offset = "0xF00660", VA = "0xF00660", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xF00714", Offset = "0xF00714", VA = "0xF00714", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xF0068C", Offset = "0xF0068C", VA = "0xF0068C")]
		private void GetLeftFootBottomHeight()
		{
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xF00718", Offset = "0xF00718", VA = "0xF00718")]
		public GetAnimatorLeftFootBottomHeight()
		{
		}
	}
	[Token(Token = "0x2000149")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the next State information on a specified layer")]
	public class GetAnimatorNextStateInfo : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The layer's index")]
		public FsmInt layerIndex;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The layer's name.")]
		public FsmString name;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The layer's name Hash. Obsolete in Unity 5, use fullPathHash or shortPathHash instead, nameHash will be the same as shortNameHash for legacy")]
		[UIHint(UIHint.Variable)]
		public FsmInt nameHash;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The full path hash for this state.")]
		[UIHint(UIHint.Variable)]
		public FsmInt fullPathHash;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The name Hash. Does not include the parent layer's name")]
		[UIHint(UIHint.Variable)]
		public FsmInt shortPathHash;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The layer's tag hash")]
		[UIHint(UIHint.Variable)]
		public FsmInt tagHash;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is the state looping. All animations in the state must be looping")]
		public FsmBool isStateLooping;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The Current duration of the state. In seconds, can vary when the State contains a Blend Tree ")]
		[UIHint(UIHint.Variable)]
		public FsmFloat length;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The integer part is the number of time a state has been looped. The fractional part is the % (0-1) of progress in the current loop")]
		[UIHint(UIHint.Variable)]
		public FsmFloat normalizedTime;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The integer part is the number of time a state has been looped. This is extracted from the normalizedTime")]
		public FsmInt loopCount;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The progress in the current loop. This is extracted from the normalizedTime")]
		[UIHint(UIHint.Variable)]
		public FsmFloat currentLoopProgress;

		[Token(Token = "0x17000094")]
		private Animator animator
		{
			[Token(Token = "0x60006C5")]
			[Address(RVA = "0xF00760", Offset = "0xF00760", VA = "0xF00760")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xF00768", Offset = "0xF00768", VA = "0xF00768", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xF0083C", Offset = "0xF0083C", VA = "0xF0083C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0xF00B8C", Offset = "0xF00B8C", VA = "0xF00B8C", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0xF00868", Offset = "0xF00868", VA = "0xF00868")]
		private void GetLayerInfo()
		{
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0xF00B90", Offset = "0xF00B90", VA = "0xF00B90")]
		public GetAnimatorNextStateInfo()
		{
		}
	}
	[Token(Token = "0x200014A")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Returns the pivot weight and/or position. The pivot is the most stable point between the avatar's left and right foot.\n For a weight value of 0, the left foot is the most stable point For a value of 1, the right foot is the most stable point")]
	public class GetAnimatorPivot : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ActionSection("Results")]
		[Tooltip("The pivot is the most stable point between the avatar's left and right foot.\n For a value of 0, the left foot is the most stable point For a value of 1, the right foot is the most stable point")]
		[UIHint(UIHint.Variable)]
		public FsmFloat pivotWeight;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The pivot is the most stable point between the avatar's left and right foot.\n For a value of 0, the left foot is the most stable point For a value of 1, the right foot is the most stable point")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 pivotPosition;

		[Token(Token = "0x17000095")]
		private Animator animator
		{
			[Token(Token = "0x60006CB")]
			[Address(RVA = "0xF00B98", Offset = "0xF00B98", VA = "0xF00B98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xF00BA0", Offset = "0xF00BA0", VA = "0xF00BA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xF00BE4", Offset = "0xF00BE4", VA = "0xF00BE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xF00CF4", Offset = "0xF00CF4", VA = "0xF00CF4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xF00C10", Offset = "0xF00C10", VA = "0xF00C10")]
		private void DoCheckPivot()
		{
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xF00CF8", Offset = "0xF00CF8", VA = "0xF00CF8")]
		public GetAnimatorPivot()
		{
		}
	}
	[Token(Token = "0x200014B")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Gets the playback speed of the Animator. 1 is normal playback speed")]
	public class GetAnimatorPlayBackSpeed : ComponentAction<Animator>
	{
		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The playBack speed of the animator. 1 is normal playback speed")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat playBackSpeed;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xF00D00", Offset = "0xF00D00", VA = "0xF00D00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xF00D30", Offset = "0xF00D30", VA = "0xF00D30", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xF00DE4", Offset = "0xF00DE4", VA = "0xF00DE4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xF00D5C", Offset = "0xF00D5C", VA = "0xF00D5C")]
		private void GetPlayBackSpeed()
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xF00DE8", Offset = "0xF00DE8", VA = "0xF00DE8")]
		public GetAnimatorPlayBackSpeed()
		{
		}
	}
	[Token(Token = "0x200014C")]
	[Tooltip("Gets the playback position in the recording buffer. When in playback mode (use  AnimatorStartPlayback), this value is used for controlling the current playback position in the buffer (in seconds). The value can range between recordingStartTime and recordingStopTime See Also: StartPlayback, StopPlayback.")]
	[ActionCategory(ActionCategory.Animator)]
	public class GetAnimatorPlayBackTime : ComponentAction<Animator>
	{
		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The playBack time of the animator.")]
		[RequiredField]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		public FsmFloat playBackTime;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xF00E30", Offset = "0xF00E30", VA = "0xF00E30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xF00E60", Offset = "0xF00E60", VA = "0xF00E60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xF00F14", Offset = "0xF00F14", VA = "0xF00F14", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xF00E8C", Offset = "0xF00E8C", VA = "0xF00E8C")]
		private void GetPlayBackTime()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xF00F18", Offset = "0xF00F18", VA = "0xF00F18")]
		public GetAnimatorPlayBackTime()
		{
		}
	}
	[Token(Token = "0x200014D")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Get the right foot bottom height.")]
	public class GetAnimatorRightFootBottomHeight : ComponentAction<Animator>
	{
		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Result")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The right foot bottom height.")]
		public FsmFloat rightFootHeight;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame during LateUpdate. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xF00F60", Offset = "0xF00F60", VA = "0xF00F60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xF00F9C", Offset = "0xF00F9C", VA = "0xF00F9C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xF00FBC", Offset = "0xF00FBC", VA = "0xF00FBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xF01070", Offset = "0xF01070", VA = "0xF01070", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xF00FE8", Offset = "0xF00FE8", VA = "0xF00FE8")]
		private void GetRightFootBottomHeight()
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xF01074", Offset = "0xF01074", VA = "0xF01074")]
		public GetAnimatorRightFootBottomHeight()
		{
		}
	}
	[Token(Token = "0x200014E")]
	[Tooltip("Gets the avatar body mass center position and rotation.Optionally accept a GameObject to get the body transform. \nThe position and rotation are local to the gameobject")]
	[ActionCategory(ActionCategory.Animator)]
	public class GetAnimatorRoot : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The avatar body mass center")]
		[ActionSection("Results")]
		public FsmVector3 rootPosition;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The avatar body mass center")]
		public FsmQuaternion rootRotation;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("If set, apply the body mass center position and rotation to this gameObject")]
		public FsmGameObject bodyGameObject;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject cachedBodyGameObject;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform _transform;

		[Token(Token = "0x17000096")]
		private Animator animator
		{
			[Token(Token = "0x60006E1")]
			[Address(RVA = "0xF010BC", Offset = "0xF010BC", VA = "0xF010BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0xF010C4", Offset = "0xF010C4", VA = "0xF010C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0xF01118", Offset = "0xF01118", VA = "0xF01118", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xF01350", Offset = "0xF01350", VA = "0xF01350", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0xF01144", Offset = "0xF01144", VA = "0xF01144")]
		private void DoGetBodyPosition()
		{
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0xF01354", Offset = "0xF01354", VA = "0xF01354")]
		public GetAnimatorRoot()
		{
		}
	}
	[Token(Token = "0x200014F")]
	[Tooltip("Gets the playback speed of the Animator. 1 is normal playback speed")]
	[ActionCategory(ActionCategory.Animator)]
	public class GetAnimatorSpeed : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The playBack speed of the animator. 1 is normal playback speed")]
		public FsmFloat speed;

		[Token(Token = "0x17000097")]
		private Animator animator
		{
			[Token(Token = "0x60006E7")]
			[Address(RVA = "0xF0135C", Offset = "0xF0135C", VA = "0xF0135C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xF01364", Offset = "0xF01364", VA = "0xF01364", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0xF013A0", Offset = "0xF013A0", VA = "0xF013A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xF01468", Offset = "0xF01468", VA = "0xF01468", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xF013CC", Offset = "0xF013CC", VA = "0xF013CC")]
		private void GetPlaybackSpeed()
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xF0146C", Offset = "0xF0146C", VA = "0xF0146C")]
		public GetAnimatorSpeed()
		{
		}
	}
	[Token(Token = "0x2000150")]
	[Tooltip("Gets the position and rotation of the target specified by SetTarget(AvatarTarget targetIndex, float targetNormalizedTime)).\nThe position and rotation are only valid when a frame has being evaluated after the SetTarget call")]
	[ActionCategory(ActionCategory.Animator)]
	public class GetAnimatorTarget : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The target position")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The target rotation")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion targetRotation;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("If set, apply the position and rotation to this gameObject")]
		public FsmGameObject targetGameObject;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject cachedTargetGameObject;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform _transform;

		[Token(Token = "0x17000098")]
		private Animator animator
		{
			[Token(Token = "0x60006ED")]
			[Address(RVA = "0xF01474", Offset = "0xF01474", VA = "0xF01474")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xF0147C", Offset = "0xF0147C", VA = "0xF0147C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xF014D8", Offset = "0xF014D8", VA = "0xF014D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xF01710", Offset = "0xF01710", VA = "0xF01710", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xF01504", Offset = "0xF01504", VA = "0xF01504")]
		private void DoGetTarget()
		{
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xF01714", Offset = "0xF01714", VA = "0xF01714")]
		public GetAnimatorTarget()
		{
		}
	}
	[Token(Token = "0x2000151")]
	[Tooltip("Synchronize a NavMesh Agent velocity and rotation with the animator process.")]
	[ActionCategory(ActionCategory.Animator)]
	public class NavMeshAgentAnimatorSynchronizer : FsmStateAction
	{
		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(NavMeshAgent))]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The Agent target. An Animator component and a NavMeshAgent component are required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animator _animator;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshAgent _agent;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform _trans;

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xF0171C", Offset = "0xF0171C", VA = "0xF0171C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xF01728", Offset = "0xF01728", VA = "0xF01728", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xF01748", Offset = "0xF01748", VA = "0xF01748", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xF01894", Offset = "0xF01894", VA = "0xF01894", Slot = "59")]
		public override void DoAnimatorMove()
		{
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xF01928", Offset = "0xF01928", VA = "0xF01928")]
		public NavMeshAgentAnimatorSynchronizer()
		{
		}
	}
	[Token(Token = "0x2000152")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Set Apply Root Motion: If true, Root is controlled by animations")]
	public class SetAnimatorApplyRootMotion : ComponentAction<Animator>
	{
		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, Root motion is controlled by animations")]
		public FsmBool applyRootMotion;

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xF01930", Offset = "0xF01930", VA = "0xF01930", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0xF01958", Offset = "0xF01958", VA = "0xF01958", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0xF019F4", Offset = "0xF019F4", VA = "0xF019F4")]
		public SetAnimatorApplyRootMotion()
		{
		}
	}
	[Token(Token = "0x2000153")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Sets the position and rotation of the body. A GameObject can be set to control the position and rotation, or it can be manually expressed.")]
	public class SetAnimatorBody : ComponentAction<Animator>
	{
		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The gameObject target of the ik goal")]
		public FsmGameObject target;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The position of the ik goal. If Goal GameObject set, position is used as an offset from Goal")]
		public FsmVector3 position;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The rotation of the ik goal.If Goal GameObject set, rotation is used as an offset from Goal")]
		public FsmQuaternion rotation;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject cachedTarget;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform _transform;

		[Token(Token = "0x17000099")]
		private Animator animator
		{
			[Token(Token = "0x60006FB")]
			[Address(RVA = "0xF01A3C", Offset = "0xF01A3C", VA = "0xF01A3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0xF01A44", Offset = "0xF01A44", VA = "0xF01A44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xF01B24", Offset = "0xF01B24", VA = "0xF01B24", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xF01B44", Offset = "0xF01B44", VA = "0xF01B44", Slot = "60")]
		public override void DoAnimatorIK(int layerIndex)
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0xF01B70", Offset = "0xF01B70", VA = "0xF01B70")]
		private void DoSetBody()
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0xF01EB4", Offset = "0xF01EB4", VA = "0xF01EB4")]
		public SetAnimatorBody()
		{
		}
	}
	[Token(Token = "0x2000154")]
	[Tooltip("Sets the value of a bool parameter")]
	[ActionCategory(ActionCategory.Animator)]
	public class SetAnimatorBool : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The animator parameter")]
		[UIHint(UIHint.AnimatorBool)]
		public FsmString parameter;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The Bool value to assign to the animator parameter")]
		public FsmBool Value;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string cachedParameter;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int paramID;

		[Token(Token = "0x1700009A")]
		private Animator animator
		{
			[Token(Token = "0x6000701")]
			[Address(RVA = "0xF01EFC", Offset = "0xF01EFC", VA = "0xF01EFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0xF01F04", Offset = "0xF01F04", VA = "0xF01F04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0xF01F48", Offset = "0xF01F48", VA = "0xF01F48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0xF02090", Offset = "0xF02090", VA = "0xF02090", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0xF01F74", Offset = "0xF01F74", VA = "0xF01F74")]
		private void SetParameter()
		{
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0xF02094", Offset = "0xF02094", VA = "0xF02094")]
		public SetAnimatorBool()
		{
		}
	}
	[Token(Token = "0x2000155")]
	[Tooltip("Controls culling of this Animator component.")]
	[ActionCategory(ActionCategory.Animator)]
	public class SetAnimatorCullingMode : ComponentAction<Animator>
	{
		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, always animate the entire character. If false, animation updates are disabled when renderers are not visible")]
		public FsmBool alwaysAnimate;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true, animation is completely disabled when renderers are not visible")]
		public FsmBool cullCompletely;

		[Token(Token = "0x6000707")]
		[Address(RVA = "0xF0209C", Offset = "0xF0209C", VA = "0xF0209C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0xF020D4", Offset = "0xF020D4", VA = "0xF020D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xF0219C", Offset = "0xF0219C", VA = "0xF0219C")]
		public SetAnimatorCullingMode()
		{
		}
	}
	[Token(Token = "0x2000156")]
	[Tooltip("Activates feet pivot. At 0% blending point is body mass center. At 100% blending point is feet pivot")]
	[ActionCategory(ActionCategory.Animator)]
	public class SetAnimatorFeetPivotActive : ComponentAction<Animator>
	{
		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Activates feet pivot. At 0% blending point is body mass center. At 100% blending point is feet pivot")]
		public FsmFloat feetPivotActive;

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xF021E4", Offset = "0xF021E4", VA = "0xF021E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xF0220C", Offset = "0xF0220C", VA = "0xF0220C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xF022A4", Offset = "0xF022A4", VA = "0xF022A4")]
		public SetAnimatorFeetPivotActive()
		{
		}
	}
	[Token(Token = "0x2000157")]
	[Tooltip("Sets the value of a float parameter")]
	[ActionCategory(ActionCategory.Animator)]
	public class SetAnimatorFloat : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The animator parameter")]
		[UIHint(UIHint.AnimatorFloat)]
		[RequiredField]
		public FsmString parameter;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The float value to assign to the animator parameter")]
		public FsmFloat Value;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Optional: The time allowed to parameter to reach the value. Requires Every Frame to be checked.")]
		public FsmFloat dampTime;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string cachedParameter;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int paramID;

		[Token(Token = "0x1700009B")]
		private Animator animator
		{
			[Token(Token = "0x600070D")]
			[Address(RVA = "0xF022EC", Offset = "0xF022EC", VA = "0xF022EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0xF022F4", Offset = "0xF022F4", VA = "0xF022F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xF023A0", Offset = "0xF023A0", VA = "0xF023A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0xF02554", Offset = "0xF02554", VA = "0xF02554", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xF023CC", Offset = "0xF023CC", VA = "0xF023CC")]
		private void SetParameter()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xF02558", Offset = "0xF02558", VA = "0xF02558")]
		public SetAnimatorFloat()
		{
		}
	}
	[Token(Token = "0x2000158")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Sets the position, rotation and weights of an IK goal. A GameObject can be set to control the position and rotation, or it can be manually expressed.")]
	public class SetAnimatorIKGoal : ComponentAction<Animator>
	{
		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The IK goal")]
		public AvatarIKGoal iKGoal;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The gameObject target of the ik goal")]
		public FsmGameObject goal;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The position of the ik goal. If Goal GameObject set, position is used as an offset from Goal")]
		public FsmVector3 position;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The rotation of the ik goal.If Goal GameObject set, rotation is used as an offset from Goal")]
		public FsmQuaternion rotation;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal)")]
		public FsmFloat positionWeight;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Sets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal)")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat rotationWeight;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame. Useful when changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameObject cachedGoal;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform _transform;

		[Token(Token = "0x1700009C")]
		private Animator animator
		{
			[Token(Token = "0x6000713")]
			[Address(RVA = "0xF02560", Offset = "0xF02560", VA = "0xF02560")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xF02568", Offset = "0xF02568", VA = "0xF02568", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xF0268C", Offset = "0xF0268C", VA = "0xF0268C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xF026AC", Offset = "0xF026AC", VA = "0xF026AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xF026B0", Offset = "0xF026B0", VA = "0xF026B0", Slot = "60")]
		public override void DoAnimatorIK(int layerIndex)
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xF026DC", Offset = "0xF026DC", VA = "0xF026DC")]
		private void DoSetIKGoal()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xF02ABC", Offset = "0xF02ABC", VA = "0xF02ABC")]
		public SetAnimatorIKGoal()
		{
		}
	}
	[Token(Token = "0x2000159")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Sets the value of an integer parameter")]
	public class SetAnimatorInt : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The target.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.AnimatorInt)]
		[RequiredField]
		[Tooltip("The animator parameter")]
		public FsmString parameter;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The Int value to assign to the animator parameter")]
		public FsmInt Value;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string cachedParameter;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int paramID;

		[Token(Token = "0x1700009D")]
		private Animator animator
		{
			[Token(Token = "0x600071A")]
			[Address(RVA = "0xF02B04", Offset = "0xF02B04", VA = "0xF02B04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xF02B0C", Offset = "0xF02B0C", VA = "0xF02B0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0xF02B50", Offset = "0xF02B50", VA = "0xF02B50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xF02C98", Offset = "0xF02C98", VA = "0xF02C98", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xF02B7C", Offset = "0xF02B7C", VA = "0xF02B7C")]
		private void SetParameter()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xF02C9C", Offset = "0xF02C9C", VA = "0xF02C9C")]
		public SetAnimatorInt()
		{
		}
	}
	[Token(Token = "0x200015A")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("If true, additional layers affects the mass center")]
	public class SetAnimatorLayersAffectMassCenter : ComponentAction<Animator>
	{
		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, additional layers affects the mass center")]
		public FsmBool affectMassCenter;

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xF02CA4", Offset = "0xF02CA4", VA = "0xF02CA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xF02CCC", Offset = "0xF02CCC", VA = "0xF02CCC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xF02D68", Offset = "0xF02D68", VA = "0xF02D68")]
		public SetAnimatorLayersAffectMassCenter()
		{
		}
	}
	[Token(Token = "0x200015B")]
	[Tooltip("Sets the layer's current weight")]
	[ActionCategory(ActionCategory.Animator)]
	public class SetAnimatorLayerWeight : ComponentAction<Animator>
	{
		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Sets the layer's current weight")]
		public FsmFloat layerWeight;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xF02DB0", Offset = "0xF02DB0", VA = "0xF02DB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xF02DF0", Offset = "0xF02DF0", VA = "0xF02DF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0xF02ED0", Offset = "0xF02ED0", VA = "0xF02ED0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0xF02E1C", Offset = "0xF02E1C", VA = "0xF02E1C")]
		private void DoLayerWeight()
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xF02ED4", Offset = "0xF02ED4", VA = "0xF02ED4")]
		public SetAnimatorLayerWeight()
		{
		}
	}
	[Token(Token = "0x200015C")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Sets look at position and weights. You can use a target GameObject or position.")]
	public class SetAnimatorLookAt : ComponentAction<Animator>
	{
		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The GameObject to look at. Set to None to use a position instead.")]
		public FsmGameObject target;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The look-at position. If Target GameObject is set, this is used as an offset from the Target's position.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The global weight of the LookAt, multiplier for other parameters. Range from 0 to 1")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat weight;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Determines how much the body is involved in the LookAt. Range from 0 to 1")]
		public FsmFloat bodyWeight;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Determines how much the head is involved in the LookAt. Range from 0 to 1")]
		public FsmFloat headWeight;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Determines how much the eyes are involved in the LookAt. Range from 0 to 1")]
		public FsmFloat eyesWeight;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).")]
		public FsmFloat clampWeight;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame during OnAnimatorIK(). This would normally be true.")]
		public bool everyFrame;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject cachedTarget;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform _transform;

		[Token(Token = "0x1700009E")]
		private Animator animator
		{
			[Token(Token = "0x6000728")]
			[Address(RVA = "0xF02F1C", Offset = "0xF02F1C", VA = "0xF02F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xF02F24", Offset = "0xF02F24", VA = "0xF02F24", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xF0305C", Offset = "0xF0305C", VA = "0xF0305C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0xF0307C", Offset = "0xF0307C", VA = "0xF0307C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xF03080", Offset = "0xF03080", VA = "0xF03080", Slot = "60")]
		public override void DoAnimatorIK(int layerIndex)
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xF030AC", Offset = "0xF030AC", VA = "0xF030AC")]
		private void DoSetLookAt()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xF03564", Offset = "0xF03564", VA = "0xF03564")]
		public SetAnimatorLookAt()
		{
		}
	}
	[Token(Token = "0x200015D")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Sets the playback speed of the Animator. 1 is normal playback speed")]
	public class SetAnimatorPlayBackSpeed : ComponentAction<Animator>
	{
		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, automatically stabilize feet during transition and blending")]
		public FsmFloat playBackSpeed;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xF035AC", Offset = "0xF035AC", VA = "0xF035AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xF035DC", Offset = "0xF035DC", VA = "0xF035DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0xF036A0", Offset = "0xF036A0", VA = "0xF036A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xF03608", Offset = "0xF03608", VA = "0xF03608")]
		private void DoPlayBackSpeed()
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xF036A4", Offset = "0xF036A4", VA = "0xF036A4")]
		public SetAnimatorPlayBackSpeed()
		{
		}
	}
	[Token(Token = "0x200015E")]
	[Tooltip("Sets the playback position in the recording buffer. When in playback mode (use AnimatorStartPlayback), this value is used for controlling the current playback position in the buffer (in seconds). The value can range between recordingStartTime and recordingStopTime ")]
	[ActionCategory(ActionCategory.Animator)]
	public class SetAnimatorPlayBackTime : ComponentAction<Animator>
	{
		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The playback time")]
		public FsmFloat playbackTime;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xF036EC", Offset = "0xF036EC", VA = "0xF036EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xF0371C", Offset = "0xF0371C", VA = "0xF0371C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xF037E0", Offset = "0xF037E0", VA = "0xF037E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0xF03748", Offset = "0xF03748", VA = "0xF03748")]
		private void DoPlaybackTime()
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xF037E4", Offset = "0xF037E4", VA = "0xF037E4")]
		public SetAnimatorPlayBackTime()
		{
		}
	}
	[Token(Token = "0x200015F")]
	[Tooltip("Sets the playback speed of the Animator. 1 is normal playback speed")]
	[ActionCategory(ActionCategory.Animator)]
	public class SetAnimatorSpeed : ComponentAction<Animator>
	{
		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with an Animator Component.")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The playback speed.")]
		public FsmFloat speed;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xF0382C", Offset = "0xF0382C", VA = "0xF0382C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xF0385C", Offset = "0xF0385C", VA = "0xF0385C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xF03920", Offset = "0xF03920", VA = "0xF03920", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xF03888", Offset = "0xF03888", VA = "0xF03888")]
		private void DoPlaybackSpeed()
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0xF03924", Offset = "0xF03924", VA = "0xF03924")]
		public SetAnimatorSpeed()
		{
		}
	}
	[Token(Token = "0x2000160")]
	[Tooltip("If true, automatically stabilize feet during transition and blending")]
	[ActionCategory(ActionCategory.Animator)]
	public class SetAnimatorStabilizeFeet : ComponentAction<Animator>
	{
		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, automatically stabilize feet during transition and blending")]
		public FsmBool stabilizeFeet;

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xF0396C", Offset = "0xF0396C", VA = "0xF0396C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xF03994", Offset = "0xF03994", VA = "0xF03994", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0xF03A30", Offset = "0xF03A30", VA = "0xF03A30")]
		public SetAnimatorStabilizeFeet()
		{
		}
	}
	[Token(Token = "0x2000161")]
	[Tooltip("Sets an AvatarTarget and a targetNormalizedTime for the current state")]
	[ActionCategory(ActionCategory.Animator)]
	public class SetAnimatorTarget : ComponentAction<Animator>
	{
		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The GameObject with the Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The avatar target")]
		public AvatarTarget avatarTarget;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The current state Time that is queried")]
		public FsmFloat targetNormalizedTime;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame during OnAnimatorMove. Useful when changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x6000741")]
		[Address(RVA = "0xF03A78", Offset = "0xF03A78", VA = "0xF03A78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0xF03AB0", Offset = "0xF03AB0", VA = "0xF03AB0", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0xF03AD0", Offset = "0xF03AD0", VA = "0xF03AD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0xF03B9C", Offset = "0xF03B9C", VA = "0xF03B9C", Slot = "59")]
		public override void DoAnimatorMove()
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xF03AFC", Offset = "0xF03AFC", VA = "0xF03AFC")]
		private void SetTarget()
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0xF03BA0", Offset = "0xF03BA0", VA = "0xF03BA0")]
		public SetAnimatorTarget()
		{
		}
	}
	[Token(Token = "0x2000162")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Sets a trigger parameter to active. Triggers are parameters that act mostly like booleans, but get reset to inactive when they are used in a transition.")]
	public class SetAnimatorTrigger : ComponentAction<Animator>
	{
		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject with an Animator Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.AnimatorTrigger)]
		[RequiredField]
		[Tooltip("The trigger name")]
		public FsmString trigger;

		[Token(Token = "0x6000747")]
		[Address(RVA = "0xF03BE8", Offset = "0xF03BE8", VA = "0xF03BE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xF03C10", Offset = "0xF03C10", VA = "0xF03C10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xF03CAC", Offset = "0xF03CAC", VA = "0xF03CAC")]
		public SetAnimatorTrigger()
		{
		}
	}
	[Token(Token = "0x2000163")]
	[Tooltip("Syncs the value of an Animator Bool parameter to the current state. Sets the parameter to true when entering the state and false when exiting. For example, you can setup an animator with one animation per state with transition conditions based on the Bool parameter, then sync animator states with this FSM's states using this action.")]
	[ActionCategory(ActionCategory.Animator)]
	public class SyncAnimatorBoolToState : ComponentAction<Animator>
	{
		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the Animator component.")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.AnimatorBool)]
		[Tooltip("The bool parameter to sync. Set to true when the state is entered and false when the state exits.")]
		[RequiredField]
		public FsmString parameter;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int paramID;

		[Token(Token = "0x1700009F")]
		private Animator animator
		{
			[Token(Token = "0x600074A")]
			[Address(RVA = "0xF03CF4", Offset = "0xF03CF4", VA = "0xF03CF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xF03CFC", Offset = "0xF03CFC", VA = "0xF03CFC", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xF03D04", Offset = "0xF03D04", VA = "0xF03D04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xF03D38", Offset = "0xF03D38", VA = "0xF03D38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xF03DF8", Offset = "0xF03DF8", VA = "0xF03DF8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xF03E98", Offset = "0xF03E98", VA = "0xF03E98")]
		public SyncAnimatorBoolToState()
		{
		}
	}
	[Token(Token = "0x2000164")]
	[Tooltip("Quits the player application.")]
	[ActionCategory(ActionCategory.Application)]
	public class ApplicationQuit : FsmStateAction
	{
		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("An optional exit code to return when the player application terminates on Windows, Mac and Linux. Defaults to 0.")]
		public FsmInt exitCode;

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xF03EE0", Offset = "0xF03EE0", VA = "0xF03EE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xF03F08", Offset = "0xF03F08", VA = "0xF03F08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xF03F3C", Offset = "0xF03F3C", VA = "0xF03F3C")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x2000165")]
	[Tooltip("Sets if the Application should play in the background. Useful for servers or testing network games on one machine.")]
	[ActionCategory(ActionCategory.Application)]
	public class ApplicationRunInBackground : FsmStateAction
	{
		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Should the Application play in the background.")]
		public FsmBool runInBackground;

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xF03F44", Offset = "0xF03F44", VA = "0xF03F44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xF03F6C", Offset = "0xF03F6C", VA = "0xF03F6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xF03FA4", Offset = "0xF03FA4", VA = "0xF03FA4")]
		public ApplicationRunInBackground()
		{
		}
	}
	[Token(Token = "0x2000166")]
	[Tooltip("Gets the Height of the Screen in pixels.")]
	[ActionCategory(ActionCategory.Application)]
	public class GetScreenHeight : FsmStateAction
	{
		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen height in a Float Variable")]
		[RequiredField]
		public FsmFloat storeScreenHeight;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xF03FAC", Offset = "0xF03FAC", VA = "0xF03FAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xF03FD0", Offset = "0xF03FD0", VA = "0xF03FD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xF04020", Offset = "0xF04020", VA = "0xF04020", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xF04048", Offset = "0xF04048", VA = "0xF04048")]
		public GetScreenHeight()
		{
		}
	}
	[Token(Token = "0x2000167")]
	[Tooltip("Gets the Width of the Screen in pixels.")]
	[ActionCategory(ActionCategory.Application)]
	public class GetScreenWidth : FsmStateAction
	{
		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the screen width in a Float Variable")]
		public FsmFloat storeScreenWidth;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xF04050", Offset = "0xF04050", VA = "0xF04050", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xF04074", Offset = "0xF04074", VA = "0xF04074", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xF040C4", Offset = "0xF040C4", VA = "0xF040C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xF040EC", Offset = "0xF040EC", VA = "0xF040EC")]
		public GetScreenWidth()
		{
		}
	}
	[Token(Token = "0x2000168")]
	[ActionCategory(ActionCategory.Application)]
	[Tooltip("Sets the Screen Width and Height.")]
	public class SetScreenResolution : FsmStateAction
	{
		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Screen Width")]
		public FsmInt width;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Screen Height")]
		[RequiredField]
		public FsmInt height;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Show Fullscreen")]
		public FsmBool fullscreen;

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xF040F4", Offset = "0xF040F4", VA = "0xF040F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xF041A4", Offset = "0xF041A4", VA = "0xF041A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xF0421C", Offset = "0xF0421C", VA = "0xF0421C")]
		public SetScreenResolution()
		{
		}
	}
	[Token(Token = "0x2000169")]
	[Tooltip("Saves a Screenshot. NOTE: Does nothing in Web Player. On Android, the resulting screenshot is available some time later.")]
	[ActionCategory(ActionCategory.Application)]
	public class TakeScreenshot : FsmStateAction
	{
		[Token(Token = "0x200016A")]
		public enum Destination
		{
			[Token(Token = "0x40005EE")]
			MyPictures,
			[Token(Token = "0x40005EF")]
			PersistentDataPath,
			[Token(Token = "0x40005F0")]
			CustomPath
		}

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Where to save the screenshot.")]
		public Destination destination;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Path used with Custom Path Destination option.")]
		public FsmString customPath;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The filename for the screenshot.")]
		[RequiredField]
		public FsmString filename;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Add an auto-incremented number to the filename.")]
		public FsmBool autoNumber;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Factor by which to increase resolution.")]
		public FsmInt superSize;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Log saved file info in Unity console.")]
		public FsmBool debugLog;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int screenshotCount;

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xF04224", Offset = "0xF04224", VA = "0xF04224", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xF042B0", Offset = "0xF042B0", VA = "0xF042B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xF04524", Offset = "0xF04524", VA = "0xF04524")]
		public TakeScreenshot()
		{
		}
	}
	[Token(Token = "0x200016B")]
	[Tooltip("Add an item to the end of an Array.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayAdd : FsmStateAction
	{
		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		[RequiredField]
		public FsmArray array;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Item to add.")]
		[RequiredField]
		[MatchElementType("array")]
		public FsmVar value;

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xF0452C", Offset = "0xF0452C", VA = "0xF0452C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xF04554", Offset = "0xF04554", VA = "0xF04554", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xF04570", Offset = "0xF04570", VA = "0xF04570")]
		private void DoAddValue()
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xF045FC", Offset = "0xF045FC", VA = "0xF045FC")]
		public ArrayAdd()
		{
		}
	}
	[Token(Token = "0x200016C")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Add multiple items to the end of an array.\nNOTE: There is a bug in this action when resizing Variables. It will be fixed in the next update.")]
	public class ArrayAddRange : FsmStateAction
	{
		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[MatchElementType("array")]
		[Tooltip("The items to add to the array.")]
		public FsmVar[] variables;

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xF04604", Offset = "0xF04604", VA = "0xF04604", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xF0466C", Offset = "0xF0466C", VA = "0xF0466C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xF04688", Offset = "0xF04688", VA = "0xF04688")]
		private void DoAddRange()
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xF04778", Offset = "0xF04778", VA = "0xF04778")]
		public ArrayAddRange()
		{
		}
	}
	[Token(Token = "0x200016D")]
	[Tooltip("Sets all items in an Array to their default value: 0, empty string, false, or null depending on their type. Optionally defines a reset value to use.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayClear : FsmStateAction
	{
		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array Variable to clear.")]
		[UIHint(UIHint.Variable)]
		public FsmArray array;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[MatchElementType("array")]
		[Tooltip("Optional reset value. Leave as None for default value.")]
		public FsmVar resetValue;

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xF04780", Offset = "0xF04780", VA = "0xF04780", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xF04800", Offset = "0xF04800", VA = "0xF04800", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xF048D0", Offset = "0xF048D0", VA = "0xF048D0")]
		public ArrayClear()
		{
		}
	}
	[Token(Token = "0x200016E")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if 2 Array Variables have the same values.")]
	public class ArrayCompare : FsmStateAction
	{
		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The first Array Variable to test.")]
		public FsmArray array1;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The second Array Variable to test.")]
		public FsmArray array2;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the 2 arrays have the same values.")]
		public FsmEvent SequenceEqual;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the 2 arrays have different values.")]
		public FsmEvent SequenceNotEqual;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xF048D8", Offset = "0xF048D8", VA = "0xF048D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xF04920", Offset = "0xF04920", VA = "0xF04920", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xF0494C", Offset = "0xF0494C", VA = "0xF0494C")]
		private void DoSequenceEqual()
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xF04A18", Offset = "0xF04A18", VA = "0xF04A18")]
		private bool TestSequenceEqual(object[] _array1, object[] _array2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xF04AD8", Offset = "0xF04AD8", VA = "0xF04AD8")]
		public ArrayCompare()
		{
		}
	}
	[Token(Token = "0x200016F")]
	[Tooltip("Check if an Array contains a value. Optionally get its index.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayContains : FsmStateAction
	{
		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[MatchElementType("array")]
		[Tooltip("The value to check against in the array.")]
		public FsmVar value;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index of the value in the array.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmInt index;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store in a bool whether it contains that element or not.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isContained;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if the array contains that element.")]
		public FsmEvent isContainedEvent;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if the array does not contain that element.")]
		public FsmEvent isNotContainedEvent;

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xF04AE0", Offset = "0xF04AE0", VA = "0xF04AE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xF04B48", Offset = "0xF04B48", VA = "0xF04B48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xF04B64", Offset = "0xF04B64", VA = "0xF04B64")]
		private void DoCheckContainsValue()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xF04D6C", Offset = "0xF04D6C", VA = "0xF04D6C")]
		public ArrayContains()
		{
		}
	}
	[Token(Token = "0x2000171")]
	[Tooltip("Delete the item at an index. Index must be between 0 and the number of items -1. First item is index 0.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayDeleteAt : FsmStateAction
	{
		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The event to trigger if the index is out of range.")]
		[ActionSection("Result")]
		public FsmEvent indexOutOfRangeEvent;

		[Token(Token = "0x600077B")]
		[Address(RVA = "0xF04E0C", Offset = "0xF04E0C", VA = "0xF04E0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0xF04E44", Offset = "0xF04E44", VA = "0xF04E44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0xF04E60", Offset = "0xF04E60", VA = "0xF04E60")]
		private void DoDeleteAt()
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0xF04FC0", Offset = "0xF04FC0", VA = "0xF04FC0")]
		public ArrayDeleteAt()
		{
		}
	}
	[Token(Token = "0x2000172")]
	[Tooltip("Loop through all items in an {{Array}} and run an FSM Template on each item.\\nNOTE: This is an advanced/experimental action, still in beta. Please report any issues you run into.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayForEach : RunFSMAction
	{
		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Array to iterate through.")]
		public FsmArray array;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideTypeFilter]
		[MatchElementType("array")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the item in a variable")]
		public FsmVar storeItem;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Run FSM")]
		[Tooltip("The Template to run on each item in the array.<ul><li>The Template should expose a variable in the Inspector.</li><li>Use this Input variable to input the stored item.</li><li>The Template should use {{Finish FSM}} when finished.</li></ul>")]
		public FsmTemplateControl fsmTemplateControl;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send after iterating through all items in the Array.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int currentIndex;

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xF04FC8", Offset = "0xF04FC8", VA = "0xF04FC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0xF05054", Offset = "0xF05054", VA = "0xF05054", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0xF05114", Offset = "0xF05114", VA = "0xF05114", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xF051C4", Offset = "0xF051C4", VA = "0xF051C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xF05220", Offset = "0xF05220", VA = "0xF05220", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xF0526C", Offset = "0xF0526C", VA = "0xF0526C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xF05210", Offset = "0xF05210", VA = "0xF05210")]
		private void StartNextFsm()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xF05134", Offset = "0xF05134", VA = "0xF05134")]
		private void StartFsm()
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xF052B8", Offset = "0xF052B8", VA = "0xF052B8")]
		private void DoStartFsm()
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xF0536C", Offset = "0xF0536C", VA = "0xF0536C", Slot = "62")]
		protected override void CheckIfFinished()
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xF05370", Offset = "0xF05370", VA = "0xF05370")]
		public ArrayForEach()
		{
		}
	}
	[Token(Token = "0x2000173")]
	[Tooltip("Get a value at an index. Index must be between 0 and the number of items -1. First item is index 0.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayGet : FsmStateAction
	{
		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the value in a variable. NOTE: must be of the same type as the array.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[MatchElementType("array")]
		public FsmVar storeValue;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The event to trigger if the index is out of range.")]
		[ActionSection("Events")]
		public FsmEvent indexOutOfRange;

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xF053E8", Offset = "0xF053E8", VA = "0xF053E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xF05434", Offset = "0xF05434", VA = "0xF05434", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xF0554C", Offset = "0xF0554C", VA = "0xF0554C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xF05460", Offset = "0xF05460", VA = "0xF05460")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xF05550", Offset = "0xF05550", VA = "0xF05550")]
		public ArrayGet()
		{
		}
	}
	[Token(Token = "0x2000174")]
	[Tooltip("Each time this action is called it gets the next item from a Array. This lets you quickly loop through all the items of an array to perform actions on them.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayGetNext : FsmStateAction
	{
		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array Variable to use.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmArray array;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("From where to start iteration, leave as 0 to start from the beginning")]
		public FsmInt startIndex;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("When to end iteration, leave as 0 to iterate until the end")]
		public FsmInt endIndex;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send to get the next item.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		public FsmBool resetFlag;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send when there are no more items.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current array item in a variable of the same type.")]
		[MatchElementType("array")]
		[ActionSection("Result")]
		public FsmVar result;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current array index in an int variable.")]
		public FsmInt currentIndex;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int nextItemIndex;

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xF05558", Offset = "0xF05558", VA = "0xF05558", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xF055E0", Offset = "0xF055E0", VA = "0xF055E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xF0566C", Offset = "0xF0566C", VA = "0xF0566C")]
		private void DoGetNextItem()
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xF057B0", Offset = "0xF057B0", VA = "0xF057B0")]
		public ArrayGetNext()
		{
		}
	}
	[Token(Token = "0x2000175")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Get a Random item from an Array.")]
	public class ArrayGetRandom : FsmStateAction
	{
		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array to use.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmArray array;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[MatchElementType("array")]
		[Tooltip("Store the value in a variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVar storeValue;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The index of the value in the array.")]
		public FsmInt index;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Don't get the same item twice in a row.")]
		public FsmBool noRepeat;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int randomIndex;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int lastIndex;

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xF057B8", Offset = "0xF057B8", VA = "0xF057B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xF05810", Offset = "0xF05810", VA = "0xF05810", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xF05940", Offset = "0xF05940", VA = "0xF05940", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xF0583C", Offset = "0xF0583C", VA = "0xF0583C")]
		private void DoGetRandomValue()
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xF05944", Offset = "0xF05944", VA = "0xF05944")]
		public ArrayGetRandom()
		{
		}
	}
	[Token(Token = "0x2000176")]
	[Tooltip("Insert an item into an Array at the specified index.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayInsert : FsmStateAction
	{
		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[MatchElementType("array")]
		[Tooltip("Item to add.")]
		public FsmVar value;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index to insert at.\n0 = first, 1 = second...")]
		public FsmInt atIndex;

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xF05954", Offset = "0xF05954", VA = "0xF05954", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xF0598C", Offset = "0xF0598C", VA = "0xF0598C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xF059A8", Offset = "0xF059A8", VA = "0xF059A8")]
		private void DoInsertValue()
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xF05A14", Offset = "0xF05A14", VA = "0xF05A14")]
		public ArrayInsert()
		{
		}
	}
	[Token(Token = "0x2000177")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Gets the number of items in an Array.")]
	public class ArrayLength : FsmStateAction
	{
		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable.")]
		public FsmArray array;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the length in an {{Int Variable}}.")]
		[UIHint(UIHint.Variable)]
		public FsmInt length;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the array is changing and you're waiting for a particular length.")]
		public bool everyFrame;

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xF05A1C", Offset = "0xF05A1C", VA = "0xF05A1C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xF05A4C", Offset = "0xF05A4C", VA = "0xF05A4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xF05AA0", Offset = "0xF05AA0", VA = "0xF05AA0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xF05AD0", Offset = "0xF05AD0", VA = "0xF05AD0")]
		public ArrayLength()
		{
		}
	}
	[Token(Token = "0x2000178")]
	[Tooltip("Popup the last value of an array and return")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayPopLast : FsmStateAction
	{
		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The popup item.")]
		public FsmVar storeValue;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Events")]
		[Tooltip("The event to trigger if the list is empty")]
		public FsmEvent arrayEmpty;

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xF05AD8", Offset = "0xF05AD8", VA = "0xF05AD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xF05B00", Offset = "0xF05B00", VA = "0xF05B00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xF05B1C", Offset = "0xF05B1C", VA = "0xF05B1C")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xF05BF4", Offset = "0xF05BF4", VA = "0xF05BF4")]
		public ArrayPopLast()
		{
		}
	}
	[Token(Token = "0x2000179")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Remove an item from an array.")]
	public class ArrayRemove : FsmStateAction
	{
		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[MatchElementType("array")]
		[Tooltip("Item to remove.")]
		public FsmVar value;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Remove all instances of the value. Otherwise removes only the first instance.")]
		public FsmBool allMatches;

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xF05BFC", Offset = "0xF05BFC", VA = "0xF05BFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xF05C8C", Offset = "0xF05C8C", VA = "0xF05C8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xF05CA8", Offset = "0xF05CA8", VA = "0xF05CA8")]
		private void DoRemoveValue()
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xF05E48", Offset = "0xF05E48", VA = "0xF05E48")]
		public ArrayRemove()
		{
		}
	}
	[Token(Token = "0x200017A")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Remove all items from an Array.")]
	public class ArrayRemoveAll : FsmStateAction
	{
		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to remove all items from.")]
		public FsmArray array;

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xF05E7C", Offset = "0xF05E7C", VA = "0xF05E7C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xF05E88", Offset = "0xF05E88", VA = "0xF05E88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xF05EB4", Offset = "0xF05EB4", VA = "0xF05EB4")]
		public ArrayRemoveAll()
		{
		}
	}
	[Token(Token = "0x200017B")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Resize an array.")]
	public class ArrayResize : FsmStateAction
	{
		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to resize")]
		public FsmArray array;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new size of the array.")]
		public FsmInt newSize;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The event to trigger if the new size is out of range")]
		public FsmEvent sizeOutOfRangeEvent;

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xF05EBC", Offset = "0xF05EBC", VA = "0xF05EBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xF05FA8", Offset = "0xF05FA8", VA = "0xF05FA8")]
		public ArrayResize()
		{
		}
	}
	[Token(Token = "0x200017C")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Reverse the order of items in an Array.")]
	public class ArrayReverse : FsmStateAction
	{
		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array to reverse.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmArray array;

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xF05FB0", Offset = "0xF05FB0", VA = "0xF05FB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xF05FBC", Offset = "0xF05FBC", VA = "0xF05FBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xF060B0", Offset = "0xF060B0", VA = "0xF060B0")]
		public ArrayReverse()
		{
		}
	}
	[Token(Token = "0x200017D")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Set the value at an index. Index must be between 0 and the number of items -1. First item is index 0.")]
	public class ArraySet : FsmStateAction
	{
		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array Variable to use.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmArray array;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Set the value of the array at the specified index.")]
		[MatchElementType("array")]
		public FsmVar value;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Events")]
		[Tooltip("The event to trigger if the index is out of range")]
		public FsmEvent indexOutOfRange;

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xF060B8", Offset = "0xF060B8", VA = "0xF060B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xF06104", Offset = "0xF06104", VA = "0xF06104", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xF0621C", Offset = "0xF0621C", VA = "0xF0621C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xF06130", Offset = "0xF06130", VA = "0xF06130")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xF06220", Offset = "0xF06220", VA = "0xF06220")]
		public ArraySet()
		{
		}
	}
	[Token(Token = "0x200017E")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Shuffle values in an array. Optionally set a start index and range to shuffle only part of the array.")]
	public class ArrayShuffle : FsmStateAction
	{
		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Array to shuffle.")]
		[UIHint(UIHint.Variable)]
		public FsmArray array;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional start Index for the shuffling. Leave it to none or 0 for no effect")]
		public FsmInt startIndex;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional range for the shuffling, starting at the start index if greater than 0. Leave it to none or 0 for no effect, it will shuffle the whole array")]
		public FsmInt shufflingRange;

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xF06228", Offset = "0xF06228", VA = "0xF06228", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xF062DC", Offset = "0xF062DC", VA = "0xF062DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xF064E4", Offset = "0xF064E4", VA = "0xF064E4")]
		public ArrayShuffle()
		{
		}
	}
	[Token(Token = "0x200017F")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Sort items in an Array.")]
	public class ArraySort : FsmStateAction
	{
		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Array to sort.")]
		public FsmArray array;

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xF064EC", Offset = "0xF064EC", VA = "0xF064EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xF064F8", Offset = "0xF064F8", VA = "0xF064F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xF065EC", Offset = "0xF065EC", VA = "0xF065EC")]
		public ArraySort()
		{
		}
	}
	[Token(Token = "0x2000180")]
	[ActionCategory(ActionCategory.Array)]
	[NoActionTargets]
	[Tooltip("Transfer a value from one array to another, basically a copy/cut paste action on steroids.")]
	public class ArrayTransferValue : FsmStateAction
	{
		[Token(Token = "0x2000181")]
		public enum ArrayTransferType
		{
			[Token(Token = "0x4000643")]
			Copy,
			[Token(Token = "0x4000644")]
			Cut,
			[Token(Token = "0x4000645")]
			nullify
		}

		[Token(Token = "0x2000182")]
		public enum ArrayPasteType
		{
			[Token(Token = "0x4000647")]
			AsFirstItem,
			[Token(Token = "0x4000648")]
			AsLastItem,
			[Token(Token = "0x4000649")]
			InsertAtSameIndex,
			[Token(Token = "0x400064A")]
			ReplaceAtSameIndex
		}

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array Variable source.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmArray arraySource;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Array Variable target.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmArray arrayTarget;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index to transfer.")]
		[MatchFieldType("array")]
		public FsmInt indexToTransfer;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Copy Options.")]
		[ObjectType(typeof(ArrayTransferType))]
		[ActionSection("Transfer Options")]
		public FsmEnum copyType;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Paste Options")]
		[ObjectType(typeof(ArrayPasteType))]
		public FsmEnum pasteType;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if the array source does not contains that element.")]
		[ActionSection("Result")]
		public FsmEvent indexOutOfRange;

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xF065F4", Offset = "0xF065F4", VA = "0xF065F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xF066D4", Offset = "0xF066D4", VA = "0xF066D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xF066F0", Offset = "0xF066F0", VA = "0xF066F0")]
		private void DoTransferValue()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xF06BF8", Offset = "0xF06BF8", VA = "0xF06BF8")]
		public ArrayTransferValue()
		{
		}
	}
	[Token(Token = "0x2000183")]
	[Tooltip("Set an item in an Array Variable in another FSM.")]
	[Obsolete("This action was wip and accidentally released.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.Array)]
	public class FsmArraySet : FsmStateAction
	{
		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmString setValue;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xF06C00", Offset = "0xF06C00", VA = "0xF06C00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xF06C78", Offset = "0xF06C78", VA = "0xF06C78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xF06CA4", Offset = "0xF06CA4", VA = "0xF06CA4")]
		private void DoSetFsmString()
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xF06EB0", Offset = "0xF06EB0", VA = "0xF06EB0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xF06EB4", Offset = "0xF06EB4", VA = "0xF06EB4")]
		public FsmArraySet()
		{
		}
	}
	[Token(Token = "0x2000184")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Copy an Array Variable from another FSM.")]
	public class GetFsmArray : BaseFsmVariableAction
	{
		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional name of FSM on Game Object.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmArray)]
		public FsmString variableName;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Get the content of the array variable.")]
		public FsmArray storeValue;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("If true, makes copies. if false, values share the same reference and editing one array item value will affect the source and vice versa. Warning, this only affect the current items of the source array. Adding or removing items doesn't affect other FsmArrays.")]
		public bool copyValues;

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xF06EBC", Offset = "0xF06EBC", VA = "0xF06EBC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xF06F50", Offset = "0xF06F50", VA = "0xF06F50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xF06F6C", Offset = "0xF06F6C", VA = "0xF06F6C")]
		private void DoSetFsmArrayCopy()
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xF0733C", Offset = "0xF0733C", VA = "0xF0733C")]
		public GetFsmArray()
		{
		}
	}
	[Token(Token = "0x2000185")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Gets an item in an Array Variable in another FSM.")]
	public class GetFsmArrayItem : BaseFsmVariableIndexAction
	{
		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional name of FSM on Game Object.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.FsmArray)]
		[Tooltip("The name of the FSM variable.")]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Get the value of the array at the specified index.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVar storeValue;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xF07344", Offset = "0xF07344", VA = "0xF07344", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xF073BC", Offset = "0xF073BC", VA = "0xF073BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xF073E8", Offset = "0xF073E8", VA = "0xF073E8")]
		private void DoGetFsmArray()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xF075EC", Offset = "0xF075EC", VA = "0xF075EC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xF075F0", Offset = "0xF075F0", VA = "0xF075F0")]
		public GetFsmArrayItem()
		{
		}
	}
	[Token(Token = "0x2000186")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Copy an Array Variable in another FSM.")]
	public class SetFsmArray : BaseFsmVariableAction
	{
		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object.")]
		public FsmString fsmName;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The name of the FSM variable.")]
		[RequiredField]
		[UIHint(UIHint.FsmArray)]
		public FsmString variableName;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Set the content of the array variable.")]
		public FsmArray setValue;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("If true, makes copies. if false, values share the same reference and editing one array item value will affect the source and vice versa. Warning, this only affect the current items of the source array. Adding or removing items doesn't affect other FsmArrays.")]
		public bool copyValues;

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xF075F8", Offset = "0xF075F8", VA = "0xF075F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xF0768C", Offset = "0xF0768C", VA = "0xF0768C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xF076A8", Offset = "0xF076A8", VA = "0xF076A8")]
		private void DoSetFsmArrayCopy()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xF07A6C", Offset = "0xF07A6C", VA = "0xF07A6C")]
		public SetFsmArray()
		{
		}
	}
	[Token(Token = "0x2000187")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set an item in an Array Variable in another FSM.")]
	public class SetFsmArrayItem : BaseFsmVariableIndexAction
	{
		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional name of FSM on Game Object.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[UIHint(UIHint.FsmArray)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[RequiredField]
		[Tooltip("Set the value of the array at the specified index.")]
		public FsmVar value;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xF07A74", Offset = "0xF07A74", VA = "0xF07A74", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xF07AEC", Offset = "0xF07AEC", VA = "0xF07AEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xF07B18", Offset = "0xF07B18", VA = "0xF07B18")]
		private void DoSetFsmArray()
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xF07D30", Offset = "0xF07D30", VA = "0xF07D30", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xF07D34", Offset = "0xF07D34", VA = "0xF07D34")]
		public SetFsmArrayItem()
		{
		}
	}
	[Token(Token = "0x2000188")]
	[Tooltip("Mute/un-mute the Audio Clip played by an Audio Source component on a Game Object.")]
	[ActionCategory(ActionCategory.Audio)]
	public class AudioMute : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with an Audio Source component.")]
		[CheckForComponent(typeof(AudioSource))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Check to mute, uncheck to un-mute.")]
		public FsmBool mute;

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xF07D3C", Offset = "0xF07D3C", VA = "0xF07D3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xF07D70", Offset = "0xF07D70", VA = "0xF07D70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xF07E30", Offset = "0xF07E30", VA = "0xF07E30")]
		public AudioMute()
		{
		}
	}
	[Token(Token = "0x2000189")]
	[Tooltip("Pauses playing the Audio Clip played by an Audio Source component on a Game Object.")]
	[ActionCategory(ActionCategory.Audio)]
	public class AudioPause : ComponentAction<AudioSource>
	{
		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(AudioSource))]
		[Tooltip("The GameObject with an Audio Source component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xF07E78", Offset = "0xF07E78", VA = "0xF07E78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xF07E84", Offset = "0xF07E84", VA = "0xF07E84", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xF07F24", Offset = "0xF07F24", VA = "0xF07F24")]
		public AudioPause()
		{
		}
	}
	[Token(Token = "0x200018A")]
	[ActionCategory(ActionCategory.Audio)]
	[ActionTarget(typeof(AudioClip), "oneShotClip", false)]
	[Tooltip("Plays the AudioClip defined in an Audio Source component on a GameObject. Set the clip using {{Set Audio Clip}}. Optionally plays a one shot Audio Clip.")]
	[ActionTarget(typeof(AudioSource), "gameObject", false)]
	public class AudioPlay : ComponentAction<AudioSource>
	{
		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with an AudioSource component.")]
		[CheckForComponent(typeof(AudioSource))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Volume to play the sound at. Can be modified with {{Set Audio Volume}}.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat volume;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optionally play a 'one shot' AudioClip. NOTE: Volume cannot be adjusted while playing a 'one shot' AudioClip.")]
		[ObjectType(typeof(AudioClip))]
		public FsmObject oneShotClip;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Wait until the end of the clip to send the Finish Event. Set to false to send the finish event immediately.")]
		public FsmBool WaitForEndOfClip;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Send this event when the sound is finished playing. NOTE: currently also sent when the sound is paused...")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xF07F6C", Offset = "0xF07F6C", VA = "0xF07F6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xF07FDC", Offset = "0xF07FDC", VA = "0xF07FDC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xF0821C", Offset = "0xF0821C", VA = "0xF0821C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xF08394", Offset = "0xF08394", VA = "0xF08394")]
		public AudioPlay()
		{
		}
	}
	[Token(Token = "0x200018B")]
	[ActionCategory(ActionCategory.Audio)]
	[Tooltip("Stops playing the Audio Clip played by an Audio Source component on a Game Object.")]
	public class AudioStop : ComponentAction<AudioSource>
	{
		[Token(Token = "0x200018C")]
		[CompilerGenerated]
		private sealed class <VolumeFade>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000674")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float fadeDuration;

			[Token(Token = "0x4000676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioSource audioSource;

			[Token(Token = "0x4000677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioStop <>4__this;

			[Token(Token = "0x4000678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float endVolume;

			[Token(Token = "0x4000679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <startTime>5__2;

			[Token(Token = "0x170000A0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007E8")]
				[Address(RVA = "0xF08784", Offset = "0xF08784", VA = "0xF08784", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007EA")]
				[Address(RVA = "0xF087CC", Offset = "0xF087CC", VA = "0xF087CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007E5")]
			[Address(RVA = "0xF085D4", Offset = "0xF085D4", VA = "0xF085D4")]
			[DebuggerHidden]
			public <VolumeFade>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60007E6")]
			[Address(RVA = "0xF08644", Offset = "0xF08644", VA = "0xF08644", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007E7")]
			[Address(RVA = "0xF08648", Offset = "0xF08648", VA = "0xF08648", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007E9")]
			[Address(RVA = "0xF0878C", Offset = "0xF0878C", VA = "0xF0878C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(AudioSource))]
		[Tooltip("The GameObject with an AudioSource component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Audio Stop can make a hard pop sound. A short fade out can fix this glitch.")]
		public FsmFloat fadeTime;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float volume;

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xF083DC", Offset = "0xF083DC", VA = "0xF083DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xF08404", Offset = "0xF08404", VA = "0xF08404", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xF0852C", Offset = "0xF0852C", VA = "0xF0852C")]
		[IteratorStateMachine(typeof(<VolumeFade>d__5))]
		private IEnumerator VolumeFade(AudioSource audioSource, float endVolume, float fadeDuration)
		{
			return null;
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xF085FC", Offset = "0xF085FC", VA = "0xF085FC")]
		public AudioStop()
		{
		}
	}
	[Token(Token = "0x200018D")]
	[Tooltip("Plays a Random Audio Clip at a position defined by a Game Object or a Vector3. If a position is defined, it takes priority over the game object. You can set the relative weight of the clips to control how often they are selected.")]
	[ActionCategory(ActionCategory.Audio)]
	public class PlayRandomSound : FsmStateAction
	{
		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to play the sound.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Use world position instead of GameObject.")]
		public FsmVector3 position;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[CompoundArray("Audio Clips", "Audio Clip", "Weight")]
		[ObjectType(typeof(AudioClip))]
		[Tooltip("A possible Audio Clip choice.")]
		public FsmObject[] audioClips;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this sound being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Volume to play the sound at.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat volume;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Don't play the same sound twice in a row")]
		public FsmBool noRepeat;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int randomIndex;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int lastIndex;

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xF087D4", Offset = "0xF087D4", VA = "0xF087D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xF089D4", Offset = "0xF089D4", VA = "0xF089D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xF089F0", Offset = "0xF089F0", VA = "0xF089F0")]
		private void DoPlayRandomClip()
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xF08C14", Offset = "0xF08C14", VA = "0xF08C14")]
		public PlayRandomSound()
		{
		}
	}
	[Token(Token = "0x200018E")]
	[Tooltip("Plays an Audio Clip at a position defined by a Game Object or Vector3. If a position is defined, it takes priority over the game object. This action doesn't require an Audio Source component, but offers less control than Audio actions.")]
	[ActionCategory(ActionCategory.Audio)]
	public class PlaySound : FsmStateAction
	{
		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A Game Object that defines a position.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A Vector3 value that defines a world position (overrides Game Object).")]
		public FsmVector3 position;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Title("Audio Clip")]
		[RequiredField]
		[Tooltip("The audio clip to play.")]
		[ObjectType(typeof(AudioClip))]
		public FsmObject clip;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Volume to play sound at.")]
		public FsmFloat volume;

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xF08C50", Offset = "0xF08C50", VA = "0xF08C50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xF08CFC", Offset = "0xF08CFC", VA = "0xF08CFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xF08D18", Offset = "0xF08D18", VA = "0xF08D18")]
		private void DoPlaySound()
		{
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xF08ED0", Offset = "0xF08ED0", VA = "0xF08ED0")]
		public PlaySound()
		{
		}
	}
	[Token(Token = "0x200018F")]
	[ActionCategory(ActionCategory.Audio)]
	[Tooltip("Sets the Audio Clip played by the AudioSource component on a Game Object.")]
	public class SetAudioClip : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(AudioSource))]
		[Tooltip("A GameObject with an AudioSource component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The AudioClip to assign to the AudioSource.")]
		[ObjectType(typeof(AudioClip))]
		public FsmObject audioClip;

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xF08F04", Offset = "0xF08F04", VA = "0xF08F04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xF08F2C", Offset = "0xF08F2C", VA = "0xF08F2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xF09018", Offset = "0xF09018", VA = "0xF09018")]
		public SetAudioClip()
		{
		}
	}
	[Token(Token = "0x2000190")]
	[Tooltip("Sets looping on the AudioSource component on a Game Object.")]
	[ActionCategory(ActionCategory.Audio)]
	public class SetAudioLoop : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("A GameObject with an AudioSource component.")]
		[CheckForComponent(typeof(AudioSource))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the Audio Source looping.")]
		public FsmBool loop;

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xF09060", Offset = "0xF09060", VA = "0xF09060", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xF09094", Offset = "0xF09094", VA = "0xF09094", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xF09154", Offset = "0xF09154", VA = "0xF09154")]
		public SetAudioLoop()
		{
		}
	}
	[Token(Token = "0x2000191")]
	[Tooltip("Sets the Pitch of the Audio Clip played by the AudioSource component on a Game Object.")]
	[ActionCategory(ActionCategory.Audio)]
	public class SetAudioPitch : ComponentAction<AudioSource>
	{
		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(AudioSource))]
		[Tooltip("A GameObject with an AudioSource component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the pitch.")]
		public FsmFloat pitch;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if you're driving pitch with a float variable.")]
		public bool everyFrame;

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xF0919C", Offset = "0xF0919C", VA = "0xF0919C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xF091D8", Offset = "0xF091D8", VA = "0xF091D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xF092D4", Offset = "0xF092D4", VA = "0xF092D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xF09204", Offset = "0xF09204", VA = "0xF09204")]
		private void DoSetAudioPitch()
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xF092D8", Offset = "0xF092D8", VA = "0xF092D8")]
		public SetAudioPitch()
		{
		}
	}
	[Token(Token = "0x2000192")]
	[Tooltip("Sets the Volume of the Audio Clip played by the AudioSource component on a Game Object.")]
	[ActionCategory(ActionCategory.Audio)]
	public class SetAudioVolume : ComponentAction<AudioSource>
	{
		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(AudioSource))]
		[Tooltip("A GameObject with an AudioSource component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the volume.")]
		public FsmFloat volume;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if you're driving the volume with a float variable.")]
		public bool everyFrame;

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xF09320", Offset = "0xF09320", VA = "0xF09320", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xF0935C", Offset = "0xF0935C", VA = "0xF0935C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xF09458", Offset = "0xF09458", VA = "0xF09458", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xF09388", Offset = "0xF09388", VA = "0xF09388")]
		private void DoSetAudioVolume()
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xF0945C", Offset = "0xF0945C", VA = "0xF0945C")]
		public SetAudioVolume()
		{
		}
	}
	[Token(Token = "0x2000193")]
	[Tooltip("Sets the global sound volume.")]
	[ActionCategory(ActionCategory.Audio)]
	public class SetGameVolume : FsmStateAction
	{
		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Volume level (0-1).")]
		public FsmFloat volume;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Perform this action every frame. Useful if Volume is changing e.g., to fade up/down.")]
		public bool everyFrame;

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xF094A4", Offset = "0xF094A4", VA = "0xF094A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xF094D4", Offset = "0xF094D4", VA = "0xF094D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xF09518", Offset = "0xF09518", VA = "0xF09518", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xF0953C", Offset = "0xF0953C", VA = "0xF0953C")]
		public SetGameVolume()
		{
		}
	}
	[Token(Token = "0x2000194")]
	public abstract class BaseUpdateAction : FsmStateAction
	{
		[Token(Token = "0x2000195")]
		public enum UpdateType
		{
			[Token(Token = "0x4000695")]
			OnUpdate,
			[Token(Token = "0x4000696")]
			OnLateUpdate,
			[Token(Token = "0x4000697")]
			OnFixedUpdate
		}

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[ActionSection("Update type")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("When to update the action.\nOnUpdate: The most common setting.\nOnLateUpdate: Update after everything else. Useful if dependent on another GameObect, e.g. following.\nOnFixedUpdate: Used to update physics e.g., GameObjects with RigidBody components.")]
		public UpdateType updateType;

		[Token(Token = "0x6000807")]
		public abstract void OnActionUpdate();

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xF09544", Offset = "0xF09544", VA = "0xF09544", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xF09550", Offset = "0xF09550", VA = "0xF09550", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0xF095A4", Offset = "0xF095A4", VA = "0xF095A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0xF095E8", Offset = "0xF095E8", VA = "0xF095E8", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xF09630", Offset = "0xF09630", VA = "0xF09630", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xF09678", Offset = "0xF09678", VA = "0xF09678")]
		protected BaseUpdateAction()
		{
		}
	}
	[Token(Token = "0x2000196")]
	[Tooltip("Fade from a fullscreen Color. NOTE: Uses OnGUI so requires a PlayMakerGUI component in the scene.")]
	[ActionCategory(ActionCategory.Camera)]
	public class CameraFadeIn : FsmStateAction
	{
		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Color to fade from. E.g., Fade up from black.")]
		public FsmColor color;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 10f)]
		[Tooltip("Fade in time in seconds.")]
		[RequiredField]
		public FsmFloat time;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Event to send when finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float startTime;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentTime;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Color colorLerp;

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xF09680", Offset = "0xF09680", VA = "0xF09680", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xF096EC", Offset = "0xF096EC", VA = "0xF096EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xF09720", Offset = "0xF09720", VA = "0xF09720", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xF09810", Offset = "0xF09810", VA = "0xF09810", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xF09908", Offset = "0xF09908", VA = "0xF09908")]
		public CameraFadeIn()
		{
		}
	}
	[Token(Token = "0x2000197")]
	[Tooltip("Fade to a fullscreen Color. NOTE: Uses OnGUI so requires a PlayMakerGUI component in the scene.")]
	[ActionCategory(ActionCategory.Camera)]
	public class CameraFadeOut : FsmStateAction
	{
		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Color to fade to. E.g., Fade to black.")]
		[RequiredField]
		public FsmColor color;

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 10f)]
		[RequiredField]
		[Tooltip("Fade out time in seconds.")]
		public FsmFloat time;

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Event to send when finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float startTime;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentTime;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Color colorLerp;

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xF09910", Offset = "0xF09910", VA = "0xF09910", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0xF0997C", Offset = "0xF0997C", VA = "0xF0997C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0xF099A0", Offset = "0xF099A0", VA = "0xF099A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0xF09A80", Offset = "0xF09A80", VA = "0xF09A80", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0xF09B78", Offset = "0xF09B78", VA = "0xF09B78")]
		public CameraFadeOut()
		{
		}
	}
	[Token(Token = "0x2000198")]
	[Tooltip("Clamps an orthographic camera's position to keep the view inside min/max ranges. Set any limit to None to leave that axis un-clamped.")]
	[ActionCategory(ActionCategory.Transform)]
	public class ClampOrthographicView : ComponentAction<Camera>
	{
		[Token(Token = "0x2000199")]
		public enum ScreenPlane
		{
			[Token(Token = "0x40006AF")]
			XY,
			[Token(Token = "0x40006B0")]
			XZ
		}

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with a Camera component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Orientation of the view.")]
		public ScreenPlane view;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The left edge of the view to stay inside.")]
		public FsmFloat minX;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The right edge of the view to stay inside.")]
		public FsmFloat maxX;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The bottom edge of the view to stay inside.")]
		public FsmFloat minY;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The top edge of the view to stay inside.")]
		public FsmFloat maxY;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to clamp the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xF09B80", Offset = "0xF09B80", VA = "0xF09B80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xF09C98", Offset = "0xF09C98", VA = "0xF09C98", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xF09CC8", Offset = "0xF09CC8", VA = "0xF09CC8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xF09F80", Offset = "0xF09F80", VA = "0xF09F80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xF09F90", Offset = "0xF09F90", VA = "0xF09F90", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xF09D00", Offset = "0xF09D00", VA = "0xF09D00")]
		private void DoClampPosition()
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xF09FCC", Offset = "0xF09FCC", VA = "0xF09FCC")]
		public ClampOrthographicView()
		{
		}
	}
	[Token(Token = "0x200019A")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Activates a Camera in the scene.")]
	public class CutToCamera : FsmStateAction
	{
		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Camera to activate.")]
		public Camera camera;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Makes the camera the new MainCamera. The old MainCamera will be untagged.")]
		public bool makeMainCamera;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Cut back to the original MainCamera when exiting this state.")]
		public bool cutBackOnExit;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Camera oldCamera;

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xF0A014", Offset = "0xF0A014", VA = "0xF0A014", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xF0A03C", Offset = "0xF0A03C", VA = "0xF0A03C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xF0A204", Offset = "0xF0A204", VA = "0xF0A204", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xF0A138", Offset = "0xF0A138", VA = "0xF0A138")]
		private static void SwitchCamera(Camera camera1, Camera camera2)
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xF0A220", Offset = "0xF0A220", VA = "0xF0A220")]
		public CutToCamera()
		{
		}
	}
	[Token(Token = "0x200019B")]
	[Tooltip("Gets the GameObject tagged MainCamera from the scene")]
	[ActionTarget(typeof(Camera), "storeGameObject", false)]
	[ActionCategory(ActionCategory.Camera)]
	public class GetMainCamera : FsmStateAction
	{
		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Game Object tagged as MainCamera and in a Game Object Variable.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xF0A228", Offset = "0xF0A228", VA = "0xF0A228", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xF0A234", Offset = "0xF0A234", VA = "0xF0A234", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0xF0A2E4", Offset = "0xF0A2E4", VA = "0xF0A2E4")]
		public GetMainCamera()
		{
		}
	}
	[Token(Token = "0x200019C")]
	[Tooltip("Transforms position from screen space into world space. NOTE: Uses the MainCamera!")]
	[ActionCategory(ActionCategory.Camera)]
	public class ScreenToWorldPoint : FsmStateAction
	{
		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Screen position as a vector.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 screenVector;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Screen X position in pixels or normalized. See Normalized.")]
		public FsmFloat screenX;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Screen X position in pixels or normalized. See Normalized.")]
		public FsmFloat screenY;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Distance into the screen in world units.")]
		public FsmFloat screenZ;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, X/Y coordinates are considered normalized (0-1), otherwise they are expected to be in pixels")]
		public FsmBool normalized;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the world position in a vector3 variable.")]
		public FsmVector3 storeWorldVector;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the world X position in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeWorldX;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store the world Y position in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeWorldY;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the world Z position in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeWorldZ;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6000827")]
		[Address(RVA = "0xF0A2EC", Offset = "0xF0A2EC", VA = "0xF0A2EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0xF0A420", Offset = "0xF0A420", VA = "0xF0A420", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0xF0A67C", Offset = "0xF0A67C", VA = "0xF0A67C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0xF0A44C", Offset = "0xF0A44C", VA = "0xF0A44C")]
		private void DoScreenToWorldPoint()
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0xF0A680", Offset = "0xF0A680", VA = "0xF0A680")]
		public ScreenToWorldPoint()
		{
		}
	}
	[Token(Token = "0x200019D")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Sets the Background Color used by the Camera.")]
	public class SetBackgroundColor : ComponentAction<Camera>
	{
		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The game object that owns the Camera component.")]
		[RequiredField]
		[CheckForComponent(typeof(Camera))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The background color.")]
		public FsmColor backgroundColor;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the color is animated.")]
		public bool everyFrame;

		[Token(Token = "0x600082C")]
		[Address(RVA = "0xF0A688", Offset = "0xF0A688", VA = "0xF0A688", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0xF0A6D0", Offset = "0xF0A6D0", VA = "0xF0A6D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xF0A7AC", Offset = "0xF0A7AC", VA = "0xF0A7AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0xF0A6FC", Offset = "0xF0A6FC", VA = "0xF0A6FC")]
		private void DoSetBackgroundColor()
		{
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xF0A7B0", Offset = "0xF0A7B0", VA = "0xF0A7B0")]
		public SetBackgroundColor()
		{
		}
	}
	[Token(Token = "0x200019E")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Sets the Culling Mask used by the Camera.")]
	public class SetCameraCullingMask : ComponentAction<Camera>
	{
		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object with the Camera component.")]
		[CheckForComponent(typeof(Camera))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Cull these layers.")]
		public FsmInt[] cullingMask;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Invert the mask, so you cull all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000831")]
		[Address(RVA = "0xF0A7F8", Offset = "0xF0A7F8", VA = "0xF0A7F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xF0A884", Offset = "0xF0A884", VA = "0xF0A884", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0xF0A984", Offset = "0xF0A984", VA = "0xF0A984", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xF0A8B0", Offset = "0xF0A8B0", VA = "0xF0A8B0")]
		private void DoSetCameraCullingMask()
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0xF0A988", Offset = "0xF0A988", VA = "0xF0A988")]
		public SetCameraCullingMask()
		{
		}
	}
	[Token(Token = "0x200019F")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Sets Field of View used by the Camera.")]
	public class SetCameraFOV : ComponentAction<Camera>
	{
		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("The Game Object with the Camera component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Field of view in degrees.")]
		public FsmFloat fieldOfView;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the fov is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xF0A9D0", Offset = "0xF0A9D0", VA = "0xF0A9D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0xF0AA10", Offset = "0xF0AA10", VA = "0xF0AA10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xF0AAF8", Offset = "0xF0AAF8", VA = "0xF0AAF8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xF0AA3C", Offset = "0xF0AA3C", VA = "0xF0AA3C")]
		private void DoSetCameraFOV()
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xF0AAFC", Offset = "0xF0AAFC", VA = "0xF0AAFC")]
		public SetCameraFOV()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Sets the Main Camera.")]
	public class SetMainCamera : FsmStateAction
	{
		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("The GameObject to set as the main camera (should have a Camera component).")]
		public FsmGameObject gameObject;

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xF0AB44", Offset = "0xF0AB44", VA = "0xF0AB44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xF0AB50", Offset = "0xF0AB50", VA = "0xF0AB50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xF0AC78", Offset = "0xF0AC78", VA = "0xF0AC78")]
		public SetMainCamera()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Transforms a position from world space into screen space. \nNote: Uses the Main Camera unless you specify a camera to use.")]
	public class WorldToScreenPoint : FsmStateAction
	{
		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Camera GameObject to use. Defaults to MainCamera if not defined.")]
		public FsmGameObject camera;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("World position to transform into screen coordinates.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 worldPosition;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Override X coordinate.")]
		public FsmFloat worldX;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Override Y coordinate.")]
		public FsmFloat worldY;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Override Z coordinate.")]
		public FsmFloat worldZ;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen position in a Vector3 Variable. Z will equal zero.")]
		public FsmVector3 storeScreenPoint;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the screen X position in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeScreenX;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen Y position in a Float Variable.")]
		public FsmFloat storeScreenY;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Normalize screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public FsmBool normalize;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GameObject cameraGameObject;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera screenCamera;

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xF0AC80", Offset = "0xF0AC80", VA = "0xF0AC80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0xF0AD9C", Offset = "0xF0AD9C", VA = "0xF0AD9C")]
		private void InitCamera()
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xF0AF4C", Offset = "0xF0AF4C", VA = "0xF0AF4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0xF0B1D8", Offset = "0xF0B1D8", VA = "0xF0B1D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0xF0AF78", Offset = "0xF0AF78", VA = "0xF0AF78")]
		private void DoWorldToScreenPoint()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0xF0B1DC", Offset = "0xF0B1DC", VA = "0xF0B1DC", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0xF0B300", Offset = "0xF0B300", VA = "0xF0B300")]
		public WorldToScreenPoint()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	[Tooltip("Checks the height clearance for a CharacterController, or, in other words, if a CharacterController can be set to a height without collisions. Often used while crouching to check if the controller has room to stand up.")]
	[ActionCategory(ActionCategory.Character)]
	public class ControllerCheckHeight : ComponentAction<CharacterController>
	{
		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject that owns the CharacterController component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.LayerMask)]
		[Tooltip("Layers to check collisions against.")]
		public FsmInt layerMask;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Height to check. The action will use a capsule of this height to check for collisions.")]
		public FsmFloat checkHeight;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set how often to check. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause collision checks can get expensive use the highest repeat interval you can get away with.")]
		public FsmInt repeatInterval;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store if any collisions were found.")]
		[ActionSection("Output")]
		public FsmBool didPass;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send if no collisions were found.")]
		public FsmEvent clearEvent;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send if collisions were found.")]
		public FsmEvent blockedEvent;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int repeat;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] colliders;

		[Token(Token = "0x170000A2")]
		private CharacterController controller
		{
			[Token(Token = "0x6000845")]
			[Address(RVA = "0xF0B308", Offset = "0xF0B308", VA = "0xF0B308")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0xF0B310", Offset = "0xF0B310", VA = "0xF0B310", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0xF0B3E0", Offset = "0xF0B3E0", VA = "0xF0B3E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0xF0B4E8", Offset = "0xF0B4E8", VA = "0xF0B4E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0xF0B47C", Offset = "0xF0B47C", VA = "0xF0B47C")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0xF0B500", Offset = "0xF0B500", VA = "0xF0B500")]
		private void DoCapsuleOverlap()
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xF0B6DC", Offset = "0xF0B6DC", VA = "0xF0B6DC")]
		public ControllerCheckHeight()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Makes a CharacterController Crouch. Handles scaling the collider and transitions between standing and crouching.")]
	public class ControllerCrouch : ComponentAction<CharacterController>
	{
		[Token(Token = "0x20001A4")]
		private enum CrouchState
		{
			[Token(Token = "0x40006F0")]
			stand,
			[Token(Token = "0x40006F1")]
			standToCrouch,
			[Token(Token = "0x40006F2")]
			crouch,
			[Token(Token = "0x40006F3")]
			crouchToStand
		}

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject that owns the CharacterController component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Crouch while this to true. Normally set by an Input action like Get Key.\n\nNOTE: The controller might not be able to stand up when this is false if there's not enough headroom.")]
		public FsmBool isCrouching;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Height of capsule when crouching.")]
		public FsmFloat crouchHeight;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Move children so their height scales with capsule. This is useful for weapon attach points etc.")]
		public FsmBool adjustChildren;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("How long it takes to crouch/stand in seconds.")]
		[RequiredField]
		public FsmFloat transitionTime;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Always complete the full transition to crouching, even if the input is brief.")]
		public FsmBool completeTransition;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Can the CharacterController stand if isCrouching is false (e.g. if the crouch button is released). Usually set by a some kind of raycast checking the headroom above the controller,but could also be set to false to prevent standing for other reasons, e.g., crouch because the ground is shaking.")]
		public FsmBool canStand;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Try to stand if true. Useful if want to toggle crouch with a button.")]
		public FsmBool standToggle;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send when crouch button is released AND there is enough headroom.")]
		public FsmEvent standEvent;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Reset the controller height if the State exits before crouch has finished. Also restores children to original offsets if Adjust Children was used.\n\nNOTE: You probably want to keep this checked most of the time.")]
		public FsmBool resetHeightOnExit;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float originalHeight;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float startTransitionHeight;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float transitionTimeElapsed;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Dictionary<Transform, float> childOffsets;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private CrouchState crouchState;

		[Token(Token = "0x170000A3")]
		private CharacterController controller
		{
			[Token(Token = "0x600084C")]
			[Address(RVA = "0xF0B75C", Offset = "0xF0B75C", VA = "0xF0B75C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xF0B764", Offset = "0xF0B764", VA = "0xF0B764", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0xF0B920", Offset = "0xF0B920", VA = "0xF0B920", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xF0BCEC", Offset = "0xF0BCEC", VA = "0xF0BCEC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xF0BFAC", Offset = "0xF0BFAC", VA = "0xF0BFAC")]
		private void SetHeight(float newHeight)
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xF0C1D4", Offset = "0xF0C1D4", VA = "0xF0C1D4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xF0C390", Offset = "0xF0C390", VA = "0xF0C390")]
		public ControllerCrouch()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Tests if a Character Controller on a Game Object was touching the ground during the last move.")]
	public class ControllerIsGrounded : ComponentAction<CharacterController>
	{
		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to check.")]
		[CheckForComponent(typeof(CharacterController))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if touching the ground.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if not touching the ground.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the result in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x170000A4")]
		private CharacterController controller
		{
			[Token(Token = "0x6000853")]
			[Address(RVA = "0xF0C42C", Offset = "0xF0C42C", VA = "0xF0C42C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xF0C434", Offset = "0xF0C434", VA = "0xF0C434", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xF0C484", Offset = "0xF0C484", VA = "0xF0C484", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xF0C56C", Offset = "0xF0C56C", VA = "0xF0C56C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xF0C4B0", Offset = "0xF0C4B0", VA = "0xF0C4B0")]
		private void DoControllerIsGrounded()
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xF0C570", Offset = "0xF0C570", VA = "0xF0C570")]
		public ControllerIsGrounded()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	[Tooltip("Makes a CharacterController Jump.")]
	[ActionCategory(ActionCategory.Character)]
	public class ControllerJump : ComponentAction<CharacterController>
	{
		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject that owns the CharacterController component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("How high to jump.")]
		public FsmFloat jumpHeight;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Jump in local or word space.")]
		public Space space;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Multiplies the speed of the CharacterController at moment of jumping. Higher numbers will jump further. Note: Does not effect the jump height.")]
		public FsmFloat jumpSpeedMultiplier;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Gravity multiplier used in air, to correctly calculate jump height.")]
		public FsmFloat gravityMultiplier;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Extra gravity multiplier when falling. Note: This is on top of the gravity multiplier above. This can be used to make jumps less 'floaty.'")]
		public FsmFloat fallMultiplier;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ActionSection("In Air Controls")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Movement vector applied while in the air. Usually from a Get Axis Vector, allowing the player to influence the jump.")]
		public FsmVector3 moveVector;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Multiplies the Move Vector by a Speed factor.")]
		public FsmFloat speed;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Clamp horizontal speed while jumping. Set to None for no clamping.")]
		public FsmFloat maxSpeed;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Event to send when landing. Use this to transition back to a grounded State.")]
		[ActionSection("Landing")]
		public FsmEvent landedEvent;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Store how fast the Character Controlling was moving when it landed.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat landingSpeed;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the last movement before landing.")]
		public FsmVector3 landingMotion;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The total distance fallen, from the start of the jump to landing point. NOTE: This will be negative when jumping to higher ground.")]
		public FsmFloat fallDistance;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 startJumpPosition;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 totalJumpMovement;

		[Token(Token = "0x170000A5")]
		private CharacterController controller
		{
			[Token(Token = "0x6000859")]
			[Address(RVA = "0xF0C5B8", Offset = "0xF0C5B8", VA = "0xF0C5B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xF0C5C0", Offset = "0xF0C5C0", VA = "0xF0C5C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xF0C748", Offset = "0xF0C748", VA = "0xF0C748", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xF0C944", Offset = "0xF0C944", VA = "0xF0C944", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xF0CD20", Offset = "0xF0CD20", VA = "0xF0CD20")]
		public ControllerJump()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	[Tooltip("Moves a Game Object with a Character Controller. See also {{Controller Simple Move}}. NOTE: It is recommended that you make only one call to Move or SimpleMove per frame.")]
	[ActionCategory(ActionCategory.Character)]
	public class ControllerMove : FsmStateAction
	{
		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The Game Object that owns the Character Controller component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The movement vector.")]
		[RequiredField]
		public FsmVector3 moveVector;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Move in local or word space.")]
		public Space space;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Apply the move over one second. Makes movement frame rate independent.")]
		public FsmBool perSecond;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject previousGo;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CharacterController controller;

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xF0CD68", Offset = "0xF0CD68", VA = "0xF0CD68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xF0CE08", Offset = "0xF0CE08", VA = "0xF0CE08", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xF0D00C", Offset = "0xF0D00C", VA = "0xF0D00C")]
		public ControllerMove()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Handles CharacterController while in the air, e.g., after jumping.")]
	public class ControllerMoveInAir : ComponentAction<CharacterController>
	{
		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject that owns the CharacterController component.")]
		[CheckForComponent(typeof(CharacterController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Movement vector applied while in the air. Usually to allow the player to influence the jump.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 moveVector;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Clamp horizontal speed while jumping. Set to None for no clamping.")]
		public FsmFloat maxMoveSpeed;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Multiply the gravity set in the Physics system.")]
		public FsmFloat gravityMultiplier;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Extra gravity multiplier when falling. Note: This is on top of the gravity multiplier above. This can be used to make jumps less 'floaty.'")]
		public FsmFloat fallMultiplier;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Move in local or word space.")]
		public Space space;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send when landed.")]
		public FsmEvent landedEvent;

		[Token(Token = "0x170000A6")]
		private CharacterController controller
		{
			[Token(Token = "0x6000861")]
			[Address(RVA = "0xF0D014", Offset = "0xF0D014", VA = "0xF0D014")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xF0D01C", Offset = "0xF0D01C", VA = "0xF0D01C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xF0D0F8", Offset = "0xF0D0F8", VA = "0xF0D0F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0xF0D488", Offset = "0xF0D488", VA = "0xF0D488")]
		public ControllerMoveInAir()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Modify various character controller settings.\n'None' leaves the setting unchanged.")]
	public class ControllerSettings : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject that owns the CharacterController.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The height of the character's capsule.")]
		public FsmFloat height;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The radius of the character's capsule.")]
		public FsmFloat radius;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The character controllers slope limit in degrees.")]
		public FsmFloat slopeLimit;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The character controllers step offset in meters.")]
		public FsmFloat stepOffset;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The center of the character's capsule relative to the transform's position")]
		public FsmVector3 center;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Should other RigidBodies or CharacterControllers collide with this character controller (By default always enabled).")]
		public FsmBool detectCollisions;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x170000A7")]
		private CharacterController controller
		{
			[Token(Token = "0x6000865")]
			[Address(RVA = "0xF0D4D0", Offset = "0xF0D4D0", VA = "0xF0D4D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0xF0D4D8", Offset = "0xF0D4D8", VA = "0xF0D4D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0xF0D674", Offset = "0xF0D674", VA = "0xF0D674", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xF0D868", Offset = "0xF0D868", VA = "0xF0D868", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0xF0D6A0", Offset = "0xF0D6A0", VA = "0xF0D6A0")]
		private void DoControllerSettings()
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0xF0D86C", Offset = "0xF0D86C", VA = "0xF0D86C")]
		public ControllerSettings()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Moves a Game Object with a Character Controller. Velocity along the y-axis is ignored. Speed is in meters/s. Gravity is automatically applied.")]
	public class ControllerSimpleMove : ComponentAction<CharacterController>
	{
		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("A Game Object with a Character Controller.")]
		[CheckForComponent(typeof(CharacterController))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The movement vector.")]
		public FsmVector3 moveVector;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Multiply the Move Vector by a speed factor.")]
		public FsmFloat speed;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Move in local or world space.")]
		public Space space;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if the Character Controller starts falling.")]
		public FsmEvent fallingEvent;

		[Token(Token = "0x170000A8")]
		private CharacterController controller
		{
			[Token(Token = "0x600086B")]
			[Address(RVA = "0xF0D8B4", Offset = "0xF0D8B4", VA = "0xF0D8B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0xF0D8BC", Offset = "0xF0D8BC", VA = "0xF0D8BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0xF0D988", Offset = "0xF0D988", VA = "0xF0D988", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0xF0DAC8", Offset = "0xF0DAC8", VA = "0xF0DAC8")]
		public ControllerSimpleMove()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	[Tooltip("Gets the Collision Flags from a CharacterController on a GameObject. Collision flags give you a broad overview of where the character collided with another object.")]
	[ActionCategory(ActionCategory.Character)]
	public class GetControllerCollisionFlags : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with a Character Controller component.")]
		[CheckForComponent(typeof(CharacterController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("True if the Character Controller capsule is on the ground")]
		[UIHint(UIHint.Variable)]
		public FsmBool isGrounded;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if no collisions in last move.")]
		public FsmBool none;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("True if the Character Controller capsule was hit on the sides.")]
		[UIHint(UIHint.Variable)]
		public FsmBool sides;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("True if the Character Controller capsule was hit from above.")]
		[UIHint(UIHint.Variable)]
		public FsmBool above;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if the Character Controller capsule was hit from below.")]
		public FsmBool below;

		[Token(Token = "0x170000A9")]
		private CharacterController controller
		{
			[Token(Token = "0x600086F")]
			[Address(RVA = "0xF0DB10", Offset = "0xF0DB10", VA = "0xF0DB10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0xF0DB18", Offset = "0xF0DB18", VA = "0xF0DB18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0xF0DB80", Offset = "0xF0DB80", VA = "0xF0DB80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0xF0DC90", Offset = "0xF0DC90", VA = "0xF0DC90")]
		public GetControllerCollisionFlags()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Gets info on the last Character Controller collision event. The owner of the FSM must have a character controller. Typically this action is used after a CONTROLLER COLLIDER HIT system event.")]
	public class GetControllerHitInfo : FsmStateAction
	{
		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the GameObject hit in the last collision.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the contact point of the last collision in world coordinates.")]
		public FsmVector3 contactPoint;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the normal of the last collision.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 contactNormal;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the direction of the last move before the collision.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 moveDirection;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the distance of the last move before the collision.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat moveLength;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the physics material of the Game Object Hit. Useful for triggering different effects. Audio, particles...")]
		[UIHint(UIHint.Variable)]
		public FsmString physicsMaterialName;

		[Token(Token = "0x6000873")]
		[Address(RVA = "0xF0DCD8", Offset = "0xF0DCD8", VA = "0xF0DCD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0xF0DD40", Offset = "0xF0DD40", VA = "0xF0DD40", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0xF0DD60", Offset = "0xF0DD60", VA = "0xF0DD60")]
		private void StoreTriggerInfo()
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0xF0DE98", Offset = "0xF0DE98", VA = "0xF0DE98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0xF0DEB4", Offset = "0xF0DEB4", VA = "0xF0DEB4", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0xF0DEC0", Offset = "0xF0DEC0", VA = "0xF0DEC0")]
		public GetControllerHitInfo()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	[Tooltip("Gets a CharacterController's velocity.")]
	[ActionCategory(ActionCategory.Character)]
	public class GetControllerVelocity : ComponentAction<CharacterController>
	{
		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with a CharacterController.")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the velocity in Vector3 variable.")]
		public FsmVector3 storeVelocity;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the x component of the velocity in a Float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeX;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the y component of the velocity in a Float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeY;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store the z component of the velocity in a Float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeZ;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x170000AA")]
		private CharacterController controller
		{
			[Token(Token = "0x6000879")]
			[Address(RVA = "0xF0DEC8", Offset = "0xF0DEC8", VA = "0xF0DEC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0xF0DED0", Offset = "0xF0DED0", VA = "0xF0DED0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xF0DF28", Offset = "0xF0DF28", VA = "0xF0DF28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xF0E034", Offset = "0xF0E034", VA = "0xF0E034", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0xF0DF54", Offset = "0xF0DF54", VA = "0xF0DF54")]
		private void DoGetControllerVelocity()
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0xF0E038", Offset = "0xF0E038", VA = "0xF0E038")]
		public GetControllerVelocity()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	[ActionCategory(ActionCategory.Color)]
	[Tooltip("Interpolate through an array of Colors over a specified amount of Time.")]
	public class ColorInterpolate : FsmStateAction
	{
		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("An array of colors. Set the number of colors, then set each color.")]
		[RequiredField]
		public FsmColor[] colors;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("How long it should take to interpolate through all the colors in the array.")]
		public FsmFloat time;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Store the interpolated color in a Color variable.")]
		[UIHint(UIHint.Variable)]
		public FsmColor storeColor;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the interpolation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Ignore TimeScale. Useful when the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float startTime;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float currentTime;

		[Token(Token = "0x600087F")]
		[Address(RVA = "0xF0E080", Offset = "0xF0E080", VA = "0xF0E080", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xF0E11C", Offset = "0xF0E11C", VA = "0xF0E11C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xF0E198", Offset = "0xF0E198", VA = "0xF0E198", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0xF0E450", Offset = "0xF0E450", VA = "0xF0E450", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0xF0E4AC", Offset = "0xF0E4AC", VA = "0xF0E4AC")]
		public ColorInterpolate()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	[ActionCategory(ActionCategory.Color)]
	[Tooltip("Sample a color on a continuous color gradient. Define the gradient with a color array. Use Sample At to get an interpolated color.\n\nFor example:\nIf Element 1 is black and Element 2 is red:\n<ul><li>Sample At 1 = black</li><li>Sample At 2 = red</li><li>Sample At 1.5 = dark red</li></ul>")]
	public class ColorRamp : FsmStateAction
	{
		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Array of colors to defining the gradient.")]
		public FsmColor[] colors;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Point on the gradient to sample. Should be between 0 and the number of colors in the gradient.")]
		public FsmFloat sampleAt;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the sampled color in a Color variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmColor storeColor;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xF0E4B4", Offset = "0xF0E4B4", VA = "0xF0E4B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xF0E540", Offset = "0xF0E540", VA = "0xF0E540", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xF0E74C", Offset = "0xF0E74C", VA = "0xF0E74C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xF0E56C", Offset = "0xF0E56C", VA = "0xF0E56C")]
		private void DoColorRamp()
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xF0E750", Offset = "0xF0E750", VA = "0xF0E750", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xF0E7AC", Offset = "0xF0E7AC", VA = "0xF0E7AC")]
		public ColorRamp()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	[ActionCategory(ActionCategory.Color)]
	[Tooltip("Get the RGBA channels of a Color Variable and store them in Float Variables.")]
	public class GetColorRGBA : FsmStateAction
	{
		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Color variable.")]
		public FsmColor color;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the red channel in a float variable.")]
		public FsmFloat storeRed;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the green channel in a float variable.")]
		public FsmFloat storeGreen;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the blue channel in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeBlue;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the alpha channel in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeAlpha;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the color variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xF0E7B4", Offset = "0xF0E7B4", VA = "0xF0E7B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0xF0E814", Offset = "0xF0E814", VA = "0xF0E814", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xF0E8B0", Offset = "0xF0E8B0", VA = "0xF0E8B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0xF0E840", Offset = "0xF0E840", VA = "0xF0E840")]
		private void DoGetColorRGBA()
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xF0E8B4", Offset = "0xF0E8B4", VA = "0xF0E8B4")]
		public GetColorRGBA()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	[ActionCategory(ActionCategory.Color)]
	[Tooltip("Select a random Color from an array of Colors.")]
	public class SelectRandomColor : FsmStateAction
	{
		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Colors", "Color", "Weight")]
		[Tooltip("A possible Color choice.")]
		public FsmColor[] colors;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this color being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the selected Color in a Color Variable.")]
		public FsmColor storeColor;

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xF0E8BC", Offset = "0xF0E8BC", VA = "0xF0E8BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0xF0EA40", Offset = "0xF0EA40", VA = "0xF0EA40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0xF0EA5C", Offset = "0xF0EA5C", VA = "0xF0EA5C")]
		private void DoSelectRandomColor()
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0xF0EAD0", Offset = "0xF0EAD0", VA = "0xF0EAD0")]
		public SelectRandomColor()
		{
		}
	}
	[Token(Token = "0x20001B2")]
	[Tooltip("Sets the RGBA channels of a Color Variable. To leave any channel unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Color)]
	public class SetColorRGBA : FsmStateAction
	{
		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Color Variable to set.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmColor colorVariable;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the red channel of the color variable.")]
		public FsmFloat red;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the green channel of the color variable.")]
		public FsmFloat green;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the blue channel of the color variable.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat blue;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the alpha channel of the color variable.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat alpha;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xF0EAD8", Offset = "0xF0EAD8", VA = "0xF0EAD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xF0EB68", Offset = "0xF0EB68", VA = "0xF0EB68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xF0EC78", Offset = "0xF0EC78", VA = "0xF0EC78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xF0EB94", Offset = "0xF0EB94", VA = "0xF0EB94")]
		private void DoSetColorRGBA()
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xF0EC7C", Offset = "0xF0EC7C", VA = "0xF0EC7C")]
		public SetColorRGBA()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	[ActionCategory(ActionCategory.Color)]
	[Tooltip("Sets the value of a Color Variable.")]
	public class SetColorValue : FsmStateAction
	{
		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Color Variable to set.")]
		public FsmColor colorVariable;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The color to set the variable to.")]
		public FsmColor color;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000898")]
		[Address(RVA = "0xF0EC84", Offset = "0xF0EC84", VA = "0xF0EC84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0xF0ECB4", Offset = "0xF0ECB4", VA = "0xF0ECB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0xF0ED08", Offset = "0xF0ED08", VA = "0xF0ED08", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xF0ECE0", Offset = "0xF0ECE0", VA = "0xF0ECE0")]
		private void DoSetColorValue()
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xF0ED0C", Offset = "0xF0ED0C", VA = "0xF0ED0C")]
		public SetColorValue()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public abstract class ComponentAction<T> : FsmStateAction where T : Component
	{
		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GameObject cachedGameObject;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T cachedComponent;

		[Token(Token = "0x170000AB")]
		public Transform cachedTransform
		{
			[Token(Token = "0x600089D")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600089E")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		protected Rigidbody rigidbody
		{
			[Token(Token = "0x600089F")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		protected Rigidbody2D rigidbody2d
		{
			[Token(Token = "0x60008A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AE")]
		protected Renderer renderer
		{
			[Token(Token = "0x60008A1")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		protected Animation animation
		{
			[Token(Token = "0x60008A2")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		protected AudioSource audio
		{
			[Token(Token = "0x60008A3")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		protected Camera camera
		{
			[Token(Token = "0x60008A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B2")]
		protected Light light
		{
			[Token(Token = "0x60008A5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008A6")]
		protected bool UpdateCache(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A7")]
		protected bool UpdateCachedTransform(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A8")]
		protected bool UpdateCacheAndTransform(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A9")]
		protected bool UpdateCacheAddComponent(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AA")]
		protected void SendEvent(FsmEventTarget eventTarget, FsmEvent fsmEvent)
		{
		}

		[Token(Token = "0x60008AB")]
		protected ComponentAction()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public abstract class ComponentAction<T1, T2> : FsmStateAction where T1 : Component where T2 : Component
	{
		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GameObject cachedGameObject1;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GameObject cachedGameObject2;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T1 cachedComponent1;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T2 cachedComponent2;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected Transform cachedTransform2;

		[Token(Token = "0x60008AC")]
		protected bool UpdateCache(GameObject go1, GameObject go2)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AD")]
		protected ComponentAction()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts a Bool value to a Color.")]
	public class ConvertBoolToColor : FsmStateAction
	{
		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Bool variable to convert.")]
		[UIHint(UIHint.Variable)]
		public FsmBool boolVariable;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Color variable to set based on the bool variable value.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmColor colorVariable;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Color if Bool variable is false.")]
		public FsmColor falseColor;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Color if Bool variable is true.")]
		public FsmColor trueColor;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the Bool variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xF0ED14", Offset = "0xF0ED14", VA = "0xF0ED14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xF0EDA0", Offset = "0xF0EDA0", VA = "0xF0EDA0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xF0EE20", Offset = "0xF0EE20", VA = "0xF0EE20", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xF0EDCC", Offset = "0xF0EDCC", VA = "0xF0EDCC")]
		private void DoConvertBoolToColor()
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xF0EE24", Offset = "0xF0EE24", VA = "0xF0EE24")]
		public ConvertBoolToColor()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	[Tooltip("Converts a Bool value to a Float value.")]
	[ActionCategory(ActionCategory.Convert)]
	public class ConvertBoolToFloat : FsmStateAction
	{
		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Bool variable to convert.")]
		[UIHint(UIHint.Variable)]
		public FsmBool boolVariable;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Float variable to set based on the Bool variable value.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Float value if Bool variable is false.")]
		public FsmFloat falseValue;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Float value if Bool variable is true.")]
		public FsmFloat trueValue;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the Bool variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xF0EE2C", Offset = "0xF0EE2C", VA = "0xF0EE2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xF0EE94", Offset = "0xF0EE94", VA = "0xF0EE94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xF0EF18", Offset = "0xF0EF18", VA = "0xF0EF18", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xF0EEC0", Offset = "0xF0EEC0", VA = "0xF0EEC0")]
		private void DoConvertBoolToFloat()
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xF0EF1C", Offset = "0xF0EF1C", VA = "0xF0EF1C")]
		public ConvertBoolToFloat()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	[Tooltip("Converts a Bool value to an Integer value.")]
	[ActionCategory(ActionCategory.Convert)]
	public class ConvertBoolToInt : FsmStateAction
	{
		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Bool variable to convert.")]
		public FsmBool boolVariable;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Integer variable to set based on the Bool variable value.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmInt intVariable;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Integer value if Bool variable is false.")]
		public FsmInt falseValue;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Integer value if Bool variable is false.")]
		public FsmInt trueValue;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the Bool variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xF0EF24", Offset = "0xF0EF24", VA = "0xF0EF24", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xF0EF8C", Offset = "0xF0EF8C", VA = "0xF0EF8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xF0F010", Offset = "0xF0F010", VA = "0xF0F010", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xF0EFB8", Offset = "0xF0EFB8", VA = "0xF0EFB8")]
		private void DoConvertBoolToInt()
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xF0F014", Offset = "0xF0F014", VA = "0xF0F014")]
		public ConvertBoolToInt()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	[Tooltip("Converts a Bool value to a String value.")]
	[ActionCategory(ActionCategory.Convert)]
	public class ConvertBoolToString : FsmStateAction
	{
		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Bool variable to convert.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmBool boolVariable;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The String variable to set based on the Bool variable value.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString stringVariable;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("String value if Bool variable is false.")]
		public FsmString falseString;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("String value if Bool variable is true.")]
		public FsmString trueString;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the Bool variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xF0F01C", Offset = "0xF0F01C", VA = "0xF0F01C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xF0F0D4", Offset = "0xF0F0D4", VA = "0xF0F0D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xF0F160", Offset = "0xF0F160", VA = "0xF0F160", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xF0F100", Offset = "0xF0F100", VA = "0xF0F100")]
		private void DoConvertBoolToString()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xF0F164", Offset = "0xF0F164", VA = "0xF0F164")]
		public ConvertBoolToString()
		{
		}
	}
	[Token(Token = "0x20001BA")]
	[Tooltip("Converts an Enum value to a String value.")]
	[ActionCategory(ActionCategory.Convert)]
	public class ConvertEnumToString : FsmStateAction
	{
		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Enum variable to convert.")]
		public FsmEnum enumVariable;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The String variable to store the converted value.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the Enum variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xF0F16C", Offset = "0xF0F16C", VA = "0xF0F16C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xF0F19C", Offset = "0xF0F19C", VA = "0xF0F19C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xF0F25C", Offset = "0xF0F25C", VA = "0xF0F25C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xF0F1C8", Offset = "0xF0F1C8", VA = "0xF0F1C8")]
		private void DoConvertEnumToString()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xF0F260", Offset = "0xF0F260", VA = "0xF0F260")]
		public ConvertEnumToString()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts a Float value to an Integer value.")]
	public class ConvertFloatToInt : FsmStateAction
	{
		[Token(Token = "0x20001BC")]
		public enum FloatRounding
		{
			[Token(Token = "0x4000775")]
			RoundDown,
			[Token(Token = "0x4000776")]
			RoundUp,
			[Token(Token = "0x4000777")]
			Nearest
		}

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Float variable to convert to an integer.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the result in an Integer variable.")]
		public FsmInt intVariable;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Whether to round up or down.")]
		public FloatRounding rounding;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xF0F268", Offset = "0xF0F268", VA = "0xF0F268", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xF0F2A0", Offset = "0xF0F2A0", VA = "0xF0F2A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xF0F4B8", Offset = "0xF0F4B8", VA = "0xF0F4B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xF0F2CC", Offset = "0xF0F2CC", VA = "0xF0F2CC")]
		private void DoConvertFloatToInt()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xF0F4BC", Offset = "0xF0F4BC", VA = "0xF0F4BC")]
		public ConvertFloatToInt()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts a Float value to a String value with optional format.")]
	public class ConvertFloatToString : FsmStateAction
	{
		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The float variable to convert.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("A string variable to store the converted value.")]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Format, allows for leading zeros. E.g., 0000")]
		public FsmString format;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the float variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xF0F4C4", Offset = "0xF0F4C4", VA = "0xF0F4C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xF0F500", Offset = "0xF0F500", VA = "0xF0F500", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xF0F5F4", Offset = "0xF0F5F4", VA = "0xF0F5F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xF0F52C", Offset = "0xF0F52C", VA = "0xF0F52C")]
		private void DoConvertFloatToString()
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xF0F5F8", Offset = "0xF0F5F8", VA = "0xF0F5F8")]
		public ConvertFloatToString()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts an Integer value to a Float value.")]
	public class ConvertIntToFloat : FsmStateAction
	{
		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Integer variable to convert to a float.")]
		[RequiredField]
		public FsmInt intVariable;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the result in a Float variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the Integer variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xF0F600", Offset = "0xF0F600", VA = "0xF0F600", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xF0F630", Offset = "0xF0F630", VA = "0xF0F630", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xF0F690", Offset = "0xF0F690", VA = "0xF0F690", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0xF0F65C", Offset = "0xF0F65C", VA = "0xF0F65C")]
		private void DoConvertIntToFloat()
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0xF0F694", Offset = "0xF0F694", VA = "0xF0F694")]
		public ConvertIntToFloat()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	[Tooltip("Converts an Integer value to a String value with an optional format.")]
	[ActionCategory(ActionCategory.Convert)]
	public class ConvertIntToString : FsmStateAction
	{
		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Int variable to convert.")]
		[RequiredField]
		public FsmInt intVariable;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A String variable to store the converted value.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Format, allows for leading zeros. E.g., 0000")]
		public FsmString format;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the Int variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0xF0F69C", Offset = "0xF0F69C", VA = "0xF0F69C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xF0F6D8", Offset = "0xF0F6D8", VA = "0xF0F6D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xF0F7CC", Offset = "0xF0F7CC", VA = "0xF0F7CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xF0F704", Offset = "0xF0F704", VA = "0xF0F704")]
		private void DoConvertIntToString()
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xF0F7D0", Offset = "0xF0F7D0", VA = "0xF0F7D0")]
		public ConvertIntToString()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	[Tooltip("Converts a Material variable to an Object variable. Useful if you want to use Set Property (which only works on Object variables).")]
	[ActionCategory(ActionCategory.Convert)]
	public class ConvertMaterialToObject : FsmStateAction
	{
		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Material variable to convert to an Object.")]
		[UIHint(UIHint.Variable)]
		public FsmMaterial materialVariable;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the result in an Object variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmObject objectVariable;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the Material variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xF0F7D8", Offset = "0xF0F7D8", VA = "0xF0F7D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xF0F808", Offset = "0xF0F808", VA = "0xF0F808", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xF0F86C", Offset = "0xF0F86C", VA = "0xF0F86C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0xF0F834", Offset = "0xF0F834", VA = "0xF0F834")]
		private void DoConvertMaterialToObject()
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xF0F870", Offset = "0xF0F870", VA = "0xF0F870")]
		public ConvertMaterialToObject()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	[Tooltip("Converts Seconds to a String value representing the time.")]
	[ActionCategory(ActionCategory.Convert)]
	[HelpUrl("http://hutonggames.com/playmakerforum/index.php?topic=1711.0")]
	public class ConvertSecondsToString : FsmStateAction
	{
		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The seconds variable to convert.")]
		public FsmFloat secondsVariable;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("A string variable to store the time value.")]
		public FsmString stringVariable;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Format. 0 for days, 1 is for hours, 2 for minutes, 3 for seconds and 4 for milliseconds. 5 for total days, 6 for total hours, 7 for total minutes, 8 for total seconds, 9 for total milliseconds, 10 for two digits milliseconds. so {2:D2} would just show the seconds of the current time, NOT the grand total number of seconds, the grand total of seconds would be {8:F0}")]
		[RequiredField]
		public FsmString format;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the seconds variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xF0F878", Offset = "0xF0F878", VA = "0xF0F878", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xF0F8F4", Offset = "0xF0F8F4", VA = "0xF0F8F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xF0FE50", Offset = "0xF0FE50", VA = "0xF0FE50", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xF0F920", Offset = "0xF0F920", VA = "0xF0F920")]
		private void DoConvertSecondsToString()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xF0FE54", Offset = "0xF0FE54", VA = "0xF0FE54")]
		public ConvertSecondsToString()
		{
		}
	}
	[Token(Token = "0x20001C2")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts an String value to an Int value.")]
	public class ConvertStringToInt : FsmStateAction
	{
		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The String variable to convert to an integer.")]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the result in an Int variable.")]
		public FsmInt intVariable;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the String variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xF0FE5C", Offset = "0xF0FE5C", VA = "0xF0FE5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xF0FE8C", Offset = "0xF0FE8C", VA = "0xF0FE8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xF0FEF0", Offset = "0xF0FEF0", VA = "0xF0FEF0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xF0FEB8", Offset = "0xF0FEB8", VA = "0xF0FEB8")]
		private void DoConvertStringToInt()
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xF0FEF4", Offset = "0xF0FEF4", VA = "0xF0FEF4")]
		public ConvertStringToInt()
		{
		}
	}
	[Token(Token = "0x20001C3")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Store a Vector2 XY components into a Vector3 XY component. The Vector3 z component is also accessible for convenience")]
	public class ConvertVector2ToVector3 : FsmStateAction
	{
		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector2")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector2;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector3")]
		public FsmVector3 vector3;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The vector3 z value")]
		public FsmFloat zValue;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the Vector2 value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xF0FEFC", Offset = "0xF0FEFC", VA = "0xF0FEFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xF0FF2C", Offset = "0xF0FF2C", VA = "0xF0FF2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xF0FF90", Offset = "0xF0FF90", VA = "0xF0FF90", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xF0FFD8", Offset = "0xF0FFD8", VA = "0xF0FFD8")]
		public ConvertVector2ToVector3()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	[Tooltip("Checks if the conditional expression Is True or Is False. Stops execution of the game if the assertion fails.\nThis is a useful way to check your assumptions. If you expect a certain value use an Assert to make sure!\nOnly runs in Editor.")]
	[SeeAlso("{{Debugging}}")]
	[ActionCategory(ActionCategory.Debug)]
	public class Assert : FsmStateAction, IEvaluatorContext
	{
		[Token(Token = "0x20001C5")]
		public enum AssertType
		{
			[Token(Token = "0x4000798")]
			IsTrue,
			[Token(Token = "0x4000799")]
			IsFalse
		}

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Enter an expression to evaluate.\n\nExamples:\nhealth <= maxHealth\nlives < 100\n\nHint:Use $(for variable names with spaces)")]
		[UIHint(UIHint.TextArea)]
		public FsmString expression;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Expected result of the expression.")]
		public AssertType assert;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string cachedExpression;

		[Token(Token = "0x170000B3")]
		public CompiledAst Ast
		{
			[Token(Token = "0x60008EE")]
			[Address(RVA = "0xF0FFE0", Offset = "0xF0FFE0", VA = "0xF0FFE0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60008EF")]
			[Address(RVA = "0xF0FFE8", Offset = "0xF0FFE8", VA = "0xF0FFE8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public string LastErrorMessage
		{
			[Token(Token = "0x60008F0")]
			[Address(RVA = "0xF0FFF0", Offset = "0xF0FFF0", VA = "0xF0FFF0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60008F1")]
			[Address(RVA = "0xF0FFF8", Offset = "0xF0FFF8", VA = "0xF0FFF8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xF10000", Offset = "0xF10000", VA = "0xF10000", Slot = "62")]
		private FsmVar PlayMaker.ConditionalExpression.IEvaluatorContext.GetVariable(string name)
		{
			return null;
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xF100CC", Offset = "0xF100CC", VA = "0xF100CC")]
		public Assert()
		{
		}
	}
	[Token(Token = "0x20001C6")]
	public abstract class BaseLogAction : FsmStateAction
	{
		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Also send to the Unity Log.")]
		public bool sendToUnityLog;

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xF100D4", Offset = "0xF100D4", VA = "0xF100D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xF100DC", Offset = "0xF100DC", VA = "0xF100DC")]
		protected BaseLogAction()
		{
		}
	}
	[Token(Token = "0x20001C7")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Adds a text area to the action list for notes etc. Use this to document your project.")]
	public class Comment : FsmStateAction
	{
		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Comment)]
		[Tooltip("Any comment you care to make...")]
		public string comment;

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xF100E4", Offset = "0xF100E4", VA = "0xF100E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xF10130", Offset = "0xF10130", VA = "0xF10130", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xF10138", Offset = "0xF10138", VA = "0xF10138")]
		public Comment()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of a Bool Variable in the PlayMaker Log Window.")]
	public class DebugBool : BaseLogAction
	{
		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Bool variable to debug.")]
		[UIHint(UIHint.Variable)]
		public FsmBool boolVariable;

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xF10140", Offset = "0xF10140", VA = "0xF10140", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xF10168", Offset = "0xF10168", VA = "0xF10168", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xF10248", Offset = "0xF10248", VA = "0xF10248")]
		public DebugBool()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Draw a debug Gizmo.\nNote: you can enable/disable Gizmos in the Game View toolbar.")]
	public class DebugDrawShape : ComponentAction<Transform>
	{
		[Token(Token = "0x20001CA")]
		public enum ShapeType
		{
			[Token(Token = "0x40007A4")]
			Sphere,
			[Token(Token = "0x40007A5")]
			Cube,
			[Token(Token = "0x40007A6")]
			WireSphere,
			[Token(Token = "0x40007A7")]
			WireCube
		}

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Draw the Gizmo at a GameObject's position.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The type of Gizmo to draw:\nSphere, Cube, WireSphere, or WireCube.")]
		public ShapeType shape;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The color to use.")]
		public FsmColor color;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideIf("HideRadius")]
		[Tooltip("Use this for sphere gizmos")]
		public FsmFloat radius;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideIf("HideSize")]
		[Tooltip("Use this for cube gizmos")]
		public FsmVector3 size;

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xF10250", Offset = "0xF10250", VA = "0xF10250")]
		public bool HideRadius()
		{
			return default(bool);
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xF10260", Offset = "0xF10260", VA = "0xF10260")]
		public bool HideSize()
		{
			return default(bool);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0xF10274", Offset = "0xF10274", VA = "0xF10274", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xF10368", Offset = "0xF10368", VA = "0xF10368", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xF10370", Offset = "0xF10370", VA = "0xF10370", Slot = "38")]
		public override void OnDrawActionGizmos()
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xF10594", Offset = "0xF10594", VA = "0xF10594")]
		public DebugDrawShape()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of an Enum Variable in the PlayMaker Log Window.")]
	public class DebugEnum : BaseLogAction
	{
		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Enum Variable to debug.")]
		public FsmEnum enumVariable;

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xF105DC", Offset = "0xF105DC", VA = "0xF105DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0xF10604", Offset = "0xF10604", VA = "0xF10604", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0xF106DC", Offset = "0xF106DC", VA = "0xF106DC")]
		public DebugEnum()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	[Tooltip("Logs the value of a Float Variable in the PlayMaker Log Window.")]
	[ActionCategory(ActionCategory.Debug)]
	public class DebugFloat : BaseLogAction
	{
		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Float variable to debug.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xF106E4", Offset = "0xF106E4", VA = "0xF106E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xF1070C", Offset = "0xF1070C", VA = "0xF1070C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xF107E8", Offset = "0xF107E8", VA = "0xF107E8")]
		public DebugFloat()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Print the value of any FSM Variable in the PlayMaker Log Window.")]
	public class DebugFsmVariable : BaseLogAction
	{
		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The variable to debug.")]
		[UIHint(UIHint.Variable)]
		public FsmVar variable;

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xF107F0", Offset = "0xF107F0", VA = "0xF107F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xF10818", Offset = "0xF10818", VA = "0xF10818", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xF1086C", Offset = "0xF1086C", VA = "0xF1086C")]
		public DebugFsmVariable()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of a Game Object Variable in the PlayMaker Log Window.")]
	public class DebugGameObject : BaseLogAction
	{
		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject variable to debug.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject gameObject;

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xF10874", Offset = "0xF10874", VA = "0xF10874", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xF1089C", Offset = "0xF1089C", VA = "0xF1089C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xF10960", Offset = "0xF10960", VA = "0xF10960")]
		public DebugGameObject()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	[Tooltip("Logs the value of an Integer Variable in the PlayMaker Log Window.")]
	[ActionCategory(ActionCategory.Debug)]
	public class DebugInt : BaseLogAction
	{
		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Int variable to debug.")]
		public FsmInt intVariable;

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xF10968", Offset = "0xF10968", VA = "0xF10968", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xF10978", Offset = "0xF10978", VA = "0xF10978", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xF10A54", Offset = "0xF10A54", VA = "0xF10A54")]
		public DebugInt()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Sends a log message to the PlayMaker Log Window.")]
	public class DebugLog : BaseLogAction
	{
		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Text to send to the log.")]
		public FsmString text;

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xF10A5C", Offset = "0xF10A5C", VA = "0xF10A5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xF10AC4", Offset = "0xF10AC4", VA = "0xF10AC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xF10B34", Offset = "0xF10B34", VA = "0xF10B34")]
		public DebugLog()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of an Object Variable in the PlayMaker Log Window.")]
	public class DebugObject : BaseLogAction
	{
		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Object variable to debug.")]
		public FsmObject fsmObject;

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xF10B3C", Offset = "0xF10B3C", VA = "0xF10B3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xF10B64", Offset = "0xF10B64", VA = "0xF10B64", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xF10C28", Offset = "0xF10C28", VA = "0xF10C28")]
		public DebugObject()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of a Vector3 Variable in the PlayMaker Log Window.")]
	public class DebugVector3 : BaseLogAction
	{
		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to debug.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xF10C30", Offset = "0xF10C30", VA = "0xF10C30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xF10C58", Offset = "0xF10C58", VA = "0xF10C58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xF10D3C", Offset = "0xF10D3C", VA = "0xF10D3C")]
		public DebugVector3()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	[Tooltip("Draws a line from a Start point to an End point. Specify the points as Game Objects or Vector3 world positions. If both are specified, position is used as a local offset from the Object's position.\n\nNotes:\n- Enable/disable Gizmos in the Game View toolbar.\n- Set how long debug lines are visible for in Preferences > Debugging.")]
	[ActionCategory(ActionCategory.Debug)]
	public class DrawDebugLine : FsmStateAction
	{
		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Draw line from a GameObject.")]
		public FsmGameObject fromObject;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Draw line from a world position, or local offset from GameObject if provided.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Draw line to a GameObject.")]
		public FsmGameObject toObject;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Draw line to a world position, or local offset from GameObject if provided.")]
		public FsmVector3 toPosition;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The color of the line.")]
		public FsmColor color;

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xF10D44", Offset = "0xF10D44", VA = "0xF10D44", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xF10D4C", Offset = "0xF10D4C", VA = "0xF10D4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0xF10E88", Offset = "0xF10E88", VA = "0xF10E88", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xF10F64", Offset = "0xF10F64", VA = "0xF10F64", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xF11074", Offset = "0xF11074", VA = "0xF11074")]
		public DrawDebugLine()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	[Tooltip("Draws a line in the Scene View from a Start point in a direction. Specify the start point as Game Objects or Vector3 world positions. If both are specified, position is used as a local offset from the Object's position.\n\nNotes:\n- Enable/disable Gizmos in the Game View toolbar.\n- Set how long debug lines are visible for in Preferences > Debugging.")]
	[ActionCategory(ActionCategory.Debug)]
	public class DrawDebugRay : FsmStateAction
	{
		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Draw ray from a GameObject.")]
		public FsmGameObject fromObject;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Draw ray from a world position, or local offset from GameObject if provided.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Direction vector of ray in world space.")]
		public FsmVector3 direction;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The color of the ray.")]
		public FsmColor color;

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xF1107C", Offset = "0xF1107C", VA = "0xF1107C", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xF11084", Offset = "0xF11084", VA = "0xF11084", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0xF11194", Offset = "0xF11194", VA = "0xF11194", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xF11250", Offset = "0xF11250", VA = "0xF11250", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xF11364", Offset = "0xF11364", VA = "0xF11364")]
		public DrawDebugRay()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Draws a state label for this FSM in the Game View. The label is drawn on the game object that owns the FSM. Use this to override the global setting in the PlayMaker Debug menu.")]
	public class DrawStateLabel : FsmStateAction
	{
		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set to True to show State labels, or False to hide them.")]
		[RequiredField]
		public FsmBool showLabel;

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xF1136C", Offset = "0xF1136C", VA = "0xF1136C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0xF11394", Offset = "0xF11394", VA = "0xF11394", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0xF113D8", Offset = "0xF113D8", VA = "0xF113D8")]
		public DrawStateLabel()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	[Tooltip("Sends an Event based on the Orientation of the mobile device.")]
	[ActionCategory(ActionCategory.Device)]
	public class DeviceOrientationEvent : FsmStateAction
	{
		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Note: If device is physically situated between discrete positions, as when (for example) rotated diagonally, system will report Unknown orientation.")]
		public DeviceOrientation orientation;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The event to send if the device orientation matches Orientation.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if you want to wait for the orientation to be true.")]
		public bool everyFrame;

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xF113E0", Offset = "0xF113E0", VA = "0xF113E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xF1140C", Offset = "0xF1140C", VA = "0xF1140C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xF11478", Offset = "0xF11478", VA = "0xF11478", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xF11438", Offset = "0xF11438", VA = "0xF11438")]
		private void DoDetectDeviceOrientation()
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xF1147C", Offset = "0xF1147C", VA = "0xF1147C")]
		public DeviceOrientationEvent()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Plays a full-screen movie on a handheld device. Please consult the Unity docs for <a href=\"http://docs.unity3d.com/Documentation/ScriptReference/Handheld.PlayFullScreenMovie.html\">Handheld.PlayFullScreenMovie</a> for proper usage.\nNOTE: The action will warn you about platform requirements.")]
	public class DevicePlayFullScreenMovie : FsmStateAction
	{
		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Note that player will stream movie directly from the iPhone disc, therefore you have to provide movie as a separate files and not as an usual asset.\nYou will have to create a folder named StreamingAssets inside your Unity project (inside your Assets folder). Store your movies inside that folder. Unity will automatically copy contents of that folder into the iPhone application bundle.")]
		[RequiredField]
		public FsmString moviePath;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("This action will initiate a transition that fades the screen from your current content to the designated background color of the player. When playback finishes, the player uses another fade effect to transition back to your content.")]
		public FsmColor fadeColor;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Options for displaying movie playback controls. See Unity docs.")]
		public FullScreenMovieControlMode movieControlMode;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Scaling modes for displaying movies.. See Unity docs.")]
		public FullScreenMovieScalingMode movieScalingMode;

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xF11484", Offset = "0xF11484", VA = "0xF11484", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xF11514", Offset = "0xF11514", VA = "0xF11514", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xF11550", Offset = "0xF11550", VA = "0xF11550")]
		public DevicePlayFullScreenMovie()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	[Tooltip("Sends an Event when the mobile device is shaken.")]
	[ActionCategory(ActionCategory.Device)]
	public class DeviceShakeEvent : FsmStateAction
	{
		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Amount of acceleration required to trigger the event. Higher numbers require a harder shake.")]
		[RequiredField]
		public FsmFloat shakeThreshold;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Event to send when Shake Threshold is exceeded.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xF11558", Offset = "0xF11558", VA = "0xF11558", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xF11590", Offset = "0xF11590", VA = "0xF11590", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xF1162C", Offset = "0xF1162C", VA = "0xF1162C")]
		public DeviceShakeEvent()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	[Tooltip("Causes the device to vibrate for half a second.\nNOTE: Unity's built in vibrate function is fairly limited. However there are alternatives available on the Asset Store...")]
	[ActionCategory(ActionCategory.Device)]
	public class DeviceVibrate : FsmStateAction
	{
		[Token(Token = "0x6000932")]
		[Address(RVA = "0xF11634", Offset = "0xF11634", VA = "0xF11634", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xF11638", Offset = "0xF11638", VA = "0xF11638", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xF11658", Offset = "0xF11658", VA = "0xF11658")]
		public DeviceVibrate()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Gets the last measured linear acceleration of a device and stores it in a Vector3 Variable.")]
	public class GetDeviceAcceleration : FsmStateAction
	{
		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the acceleration in a Vector3 Variable.")]
		public FsmVector3 storeVector;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the x component of the acceleration in a Float Variable.")]
		public FsmFloat storeX;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the y component of the acceleration in a Float Variable.")]
		public FsmFloat storeY;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the z component of the acceleration in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeZ;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Multiply the acceleration by a float value.")]
		public FsmFloat multiplier;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xF11660", Offset = "0xF11660", VA = "0xF11660", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xF116CC", Offset = "0xF116CC", VA = "0xF116CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xF11794", Offset = "0xF11794", VA = "0xF11794", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xF116F8", Offset = "0xF116F8", VA = "0xF116F8")]
		private void DoGetDeviceAcceleration()
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xF11798", Offset = "0xF11798", VA = "0xF11798")]
		public GetDeviceAcceleration()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	[Tooltip("Gets the rotation of the device around its z axis (into the screen). For example when you steer with the iPhone in a driving game.")]
	[ActionCategory(ActionCategory.Device)]
	public class GetDeviceRoll : FsmStateAction
	{
		[Token(Token = "0x20001DC")]
		public enum BaseOrientation
		{
			[Token(Token = "0x40007D8")]
			Portrait,
			[Token(Token = "0x40007D9")]
			LandscapeLeft,
			[Token(Token = "0x40007DA")]
			LandscapeRight
		}

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("How the user is expected to hold the device (where angle will be zero).")]
		public BaseOrientation baseOrientation;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the roll angle in a Float Variable.")]
		public FsmFloat storeAngle;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Limit the roll angle.")]
		public FsmFloat limitAngle;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Smooth the roll angle as it changes. You can play with this value to balance responsiveness and lag/smoothness.")]
		public FsmFloat smoothing;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastZAngle;

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xF117A0", Offset = "0xF117A0", VA = "0xF117A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xF11848", Offset = "0xF11848", VA = "0xF11848", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xF119F8", Offset = "0xF119F8", VA = "0xF119F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xF11874", Offset = "0xF11874", VA = "0xF11874")]
		private void DoGetDeviceRoll()
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xF119FC", Offset = "0xF119FC", VA = "0xF119FC")]
		public GetDeviceRoll()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	[Tooltip("Get various iPhone settings.")]
	[ActionCategory(ActionCategory.Device)]
	public class GetIPhoneSettings : FsmStateAction
	{
		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Allows device to fall into 'sleep' state with screen being dim if no touches occurred. Default value is true.")]
		public FsmBool getScreenCanDarken;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A unique device identifier string. It is guaranteed to be unique for every device (Read Only).")]
		[UIHint(UIHint.Variable)]
		public FsmString getUniqueIdentifier;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The user defined name of the device (Read Only).")]
		public FsmString getName;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The model of the device (Read Only).")]
		public FsmString getModel;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the operating system running on the device (Read Only).")]
		[UIHint(UIHint.Variable)]
		public FsmString getSystemName;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The generation of the device (Read Only).")]
		[UIHint(UIHint.Variable)]
		public FsmString getGeneration;

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xF11A04", Offset = "0xF11A04", VA = "0xF11A04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xF11A6C", Offset = "0xF11A6C", VA = "0xF11A6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xF11A74", Offset = "0xF11A74", VA = "0xF11A74")]
		public GetIPhoneSettings()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	[Tooltip("Gets Location Info from a mobile device. NOTE: Use StartLocationService before trying to get location info.")]
	[ActionCategory(ActionCategory.Device)]
	public class GetLocationInfo : FsmStateAction
	{
		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the location in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vectorPosition;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Longitude in a Float Variable.")]
		public FsmFloat longitude;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Latitude in a Float Variable.")]
		public FsmFloat latitude;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Altitude in a Float Variable.")]
		public FsmFloat altitude;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the horizontal accuracy of the location.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat horizontalAccuracy;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the vertical accuracy of the location.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat verticalAccuracy;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if the location cannot be queried.")]
		public FsmEvent errorEvent;

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xF11A7C", Offset = "0xF11A7C", VA = "0xF11A7C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xF11AE4", Offset = "0xF11AE4", VA = "0xF11AE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xF11B00", Offset = "0xF11B00", VA = "0xF11B00")]
		private void DoGetLocationInfo()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xF11C98", Offset = "0xF11C98", VA = "0xF11C98")]
		public GetLocationInfo()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	[Tooltip("Gets the number of Touches.")]
	[ActionCategory(ActionCategory.Device)]
	public class GetTouchCount : FsmStateAction
	{
		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the current number of touches in an Int Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmInt storeCount;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xF11CA0", Offset = "0xF11CA0", VA = "0xF11CA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xF11CC4", Offset = "0xF11CC4", VA = "0xF11CC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xF11D34", Offset = "0xF11D34", VA = "0xF11D34", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xF11D10", Offset = "0xF11D10", VA = "0xF11D10")]
		private void DoGetTouchCount()
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xF11D58", Offset = "0xF11D58", VA = "0xF11D58")]
		public GetTouchCount()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Gets info on a touch event.")]
	public class GetTouchInfo : FsmStateAction
	{
		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Filter by a Finger ID. You can store a Finger ID in other Touch actions, e.g., Touch Event.")]
		public FsmInt fingerId;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true, all screen coordinates are returned normalized (0-1), otherwise in pixels.")]
		public FsmBool normalize;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the position of the touch in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storePosition;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the X position 爄n a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeX;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Y position 爄n a Float Variable.")]
		public FsmFloat storeY;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the movement of the touch in a Vector3 Variable.")]
		public FsmVector3 storeDeltaPosition;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the X movement in a Float Variable.")]
		public FsmFloat storeDeltaX;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Y movement in a Float Variable.")]
		public FsmFloat storeDeltaY;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the time between touch events in a Float Variable.")]
		public FsmFloat storeDeltaTime;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Store the number of tap count of the touch (e.g. 2 = double tap).")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeTapCount;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float screenWidth;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float screenHeight;

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xF11D60", Offset = "0xF11D60", VA = "0xF11D60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xF11E34", Offset = "0xF11E34", VA = "0xF11E34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xF120D8", Offset = "0xF120D8", VA = "0xF120D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xF11E84", Offset = "0xF11E84", VA = "0xF11E84")]
		private void DoGetTouchInfo()
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xF120DC", Offset = "0xF120DC", VA = "0xF120DC")]
		public GetTouchInfo()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	[Tooltip("Projects the location found with Get Location Info to a 2d map using common projections.")]
	[ActionCategory(ActionCategory.Device)]
	public class ProjectLocationToMap : FsmStateAction
	{
		[Token(Token = "0x20001E2")]
		public enum MapProjection
		{
			[Token(Token = "0x4000808")]
			EquidistantCylindrical,
			[Token(Token = "0x4000809")]
			Mercator
		}

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Location vector in degrees longitude and latitude. Typically returned by the {{Get Location Info}} action.")]
		public FsmVector3 GPSLocation;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The projection used by the map.")]
		public MapProjection mapProjection;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The minimum Longitude shown on the map.")]
		[HasFloatSlider(-180f, 180f)]
		[ActionSection("Map Region")]
		public FsmFloat minLongitude;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The maximum Longitude show on the map.")]
		[HasFloatSlider(-180f, 180f)]
		public FsmFloat maxLongitude;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The minimum Latitude shown on the map.")]
		[HasFloatSlider(-90f, 90f)]
		public FsmFloat minLatitude;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The maximum Latitude shown on the map.")]
		[HasFloatSlider(-90f, 90f)]
		public FsmFloat maxLatitude;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The screen coordinate of the left edge of the map image.")]
		[ActionSection("Screen Region")]
		public FsmFloat minX;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The screen coordinate of the top edge of the map image.")]
		public FsmFloat minY;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The width of the map image in screen coordinates.")]
		public FsmFloat width;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The height of the map in screen coordinates.")]
		public FsmFloat height;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Store the projected X coordinate in a Float Variable. Use this to display a marker on the map.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Projection")]
		public FsmFloat projectedX;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Store the projected Y coordinate in a Float Variable. Use this to display a marker on the map.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat projectedY;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("If true all coordinates in this action are normalized (0-1); otherwise coordinates are in pixels.")]
		public FsmBool normalized;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float x;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float y;

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xF120EC", Offset = "0xF120EC", VA = "0xF120EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xF122A0", Offset = "0xF122A0", VA = "0xF122A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xF124A8", Offset = "0xF124A8", VA = "0xF124A8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xF122E8", Offset = "0xF122E8", VA = "0xF122E8")]
		private void DoProjectGPSLocation()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xF124AC", Offset = "0xF124AC", VA = "0xF124AC")]
		private void DoEquidistantCylindrical()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xF12568", Offset = "0xF12568", VA = "0xF12568")]
		private void DoMercatorProjection()
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xF126D8", Offset = "0xF126D8", VA = "0xF126D8")]
		private static float LatitudeToMercator(float latitudeInDegrees)
		{
			return default(float);
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xF1272C", Offset = "0xF1272C", VA = "0xF1272C")]
		public ProjectLocationToMap()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Starts location service updates. Last location coordinates can be retrieved with {{GetLocationInfo}}.")]
	public class StartLocationServiceUpdates : FsmStateAction
	{
		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Maximum time to wait in seconds before failing.")]
		public FsmFloat maxWait;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The desired accuracy in meters.")]
		public FsmFloat desiredAccuracy;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Distance between updates in meters.")]
		public FsmFloat updateDistance;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the location services have started.")]
		public FsmEvent successEvent;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the location services fail to start.")]
		public FsmEvent failedEvent;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float startTime;

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xF12734", Offset = "0xF12734", VA = "0xF12734", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xF127C0", Offset = "0xF127C0", VA = "0xF127C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xF12838", Offset = "0xF12838", VA = "0xF12838", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xF12918", Offset = "0xF12918", VA = "0xF12918")]
		public StartLocationServiceUpdates()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	[Tooltip("Stops location service updates. This could be useful for saving battery life.")]
	[ActionCategory(ActionCategory.Device)]
	public class StopLocationServiceUpdates : FsmStateAction
	{
		[Token(Token = "0x600095C")]
		[Address(RVA = "0xF12920", Offset = "0xF12920", VA = "0xF12920", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xF12924", Offset = "0xF12924", VA = "0xF12924", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xF12954", Offset = "0xF12954", VA = "0xF12954")]
		public StopLocationServiceUpdates()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	[Tooltip("Sends an event when a swipe is detected.")]
	[ActionCategory(ActionCategory.Device)]
	public class SwipeGestureEvent : FsmStateAction
	{
		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How far a touch has to travel to be considered a swipe. Uses normalized distance (e.g. 1 = 1 screen diagonal distance). Should generally be a very small number.")]
		public FsmFloat minSwipeDistance;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send when swipe left detected.")]
		public FsmEvent swipeLeftEvent;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when swipe right detected.")]
		public FsmEvent swipeRightEvent;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when swipe up detected.")]
		public FsmEvent swipeUpEvent;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when swipe down detected.")]
		public FsmEvent swipeDownEvent;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float screenDiagonalSize;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float minSwipeDistancePixels;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool touchStarted;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector2 touchStartPos;

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xF1295C", Offset = "0xF1295C", VA = "0xF1295C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xF129C8", Offset = "0xF129C8", VA = "0xF129C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xF12A4C", Offset = "0xF12A4C", VA = "0xF12A4C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xF12B0C", Offset = "0xF12B0C", VA = "0xF12B0C")]
		private void TestForSwipeGesture(Vector2 touchPosition)
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xF12CC8", Offset = "0xF12CC8", VA = "0xF12CC8")]
		public SwipeGestureEvent()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	[Tooltip("Sends events based on Touch Phases. Optionally filter by a fingerID.")]
	[ActionCategory(ActionCategory.Device)]
	public class TouchEvent : FsmStateAction
	{
		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("An optional Finger Id to filter by. For example, if you detected a Touch Began and stored the FingerId, you could look for the Ended event for that Finger Id.")]
		public FsmInt fingerId;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The phase you're interested in detecting (Began, Moved, Stationary, Ended, Cancelled).")]
		public UnityEngine.TouchPhase touchPhase;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The event to send when the Touch Phase is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Finger Id associated with the touch event for later use.")]
		public FsmInt storeFingerId;

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xF12CD0", Offset = "0xF12CD0", VA = "0xF12CD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0xF12D50", Offset = "0xF12D50", VA = "0xF12D50", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xF12E78", Offset = "0xF12E78", VA = "0xF12E78")]
		public TouchEvent()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	[Obsolete("GUIElement is part of the legacy UI system removed in 2019.3")]
	[Tooltip("Sends events when a GUI Texture or GUI Text is touched. Optionally filter by a fingerID.")]
	[ActionCategory(ActionCategory.Device)]
	public class TouchGUIEvent : FsmStateAction
	{
		[Token(Token = "0x20001E8")]
		public enum OffsetOptions
		{
			[Token(Token = "0x400082E")]
			TopLeft,
			[Token(Token = "0x400082F")]
			Center,
			[Token(Token = "0x4000830")]
			TouchStart
		}

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object that owns the GUI Texture or GUI Text.")]
		[RequiredField]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Only detect touches that match this fingerID, or set to None.")]
		public FsmInt fingerId;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Events")]
		[Tooltip("Event to send on touch began.")]
		public FsmEvent touchBegan;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send on touch moved.")]
		public FsmEvent touchMoved;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send on stationary touch.")]
		public FsmEvent touchStationary;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send on touch ended.")]
		public FsmEvent touchEnded;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send on touch cancel.")]
		public FsmEvent touchCanceled;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if not touching (finger down but not over the GUI element)")]
		public FsmEvent notTouching;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the fingerId of the touch.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Store Results")]
		public FsmInt storeFingerId;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Store the screen position where the GUI element was touched.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeHitPoint;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Normalize the hit point screen coordinates (0-1).")]
		public FsmBool normalizeHitPoint;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the offset position of the hit.")]
		public FsmVector3 storeOffset;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("How to measure the offset.")]
		public OffsetOptions relativeTo;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Normalize the offset.")]
		public FsmBool normalizeOffset;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Repeat every frame.")]
		[ActionSection("")]
		public bool everyFrame;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 touchStartPos;

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xF12E80", Offset = "0xF12E80", VA = "0xF12E80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xF12FC4", Offset = "0xF12FC4", VA = "0xF12FC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xF12FCC", Offset = "0xF12FCC", VA = "0xF12FCC")]
		public TouchGUIEvent()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	[Tooltip("Sends events when an object is touched. Optionally filter by a fingerID. NOTE: Uses the MainCamera!")]
	[ActionTarget(typeof(GameObject), "gameObject", false)]
	[ActionCategory(ActionCategory.Device)]
	public class TouchObjectEvent : FsmStateAction
	{
		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to detect touches on.")]
		[CheckForComponent(typeof(Collider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How far from the camera is the Game Object pickable.")]
		[RequiredField]
		public FsmFloat pickDistance;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Only detect touches that match this fingerID, or set to None.")]
		public FsmInt fingerId;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Events")]
		[Tooltip("Event to send on touch began.")]
		public FsmEvent touchBegan;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send on touch moved.")]
		public FsmEvent touchMoved;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send on stationary touch.")]
		public FsmEvent touchStationary;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send on touch ended.")]
		public FsmEvent touchEnded;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send on touch cancel.")]
		public FsmEvent touchCanceled;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Store Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the fingerId of the touch.")]
		public FsmInt storeFingerId;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the world position where the object was touched.")]
		public FsmVector3 storeHitPoint;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Store the surface normal vector where the object was touched. \nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeHitNormal;

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xF12FD4", Offset = "0xF12FD4", VA = "0xF12FD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xF130F4", Offset = "0xF130F4", VA = "0xF130F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xF134C4", Offset = "0xF134C4", VA = "0xF134C4")]
		public TouchObjectEvent()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	[ActionCategory(ActionCategory.Effects)]
	[Tooltip("Turns a Game Object on/off in a regular repeating pattern.")]
	public class Blink : ComponentAction<Renderer>
	{
		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object to blink on/off.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Time to stay off in seconds.")]
		public FsmFloat timeOff;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Time to stay on in seconds.")]
		[HasFloatSlider(0f, 5f)]
		public FsmFloat timeOn;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Start in the on state.")]
		public FsmBool startOn;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Only effect the renderer, keeping other components active.")]
		public bool rendererOnly;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float startTime;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float timer;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool blinkOn;

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xF134CC", Offset = "0xF134CC", VA = "0xF134CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xF13554", Offset = "0xF13554", VA = "0xF13554", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xF136B8", Offset = "0xF136B8", VA = "0xF136B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xF13590", Offset = "0xF13590", VA = "0xF13590")]
		private void UpdateBlinkState(bool state)
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xF13768", Offset = "0xF13768", VA = "0xF13768")]
		public Blink()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	[ActionCategory(ActionCategory.Effects)]
	[Tooltip("Randomly flickers a Game Object on/off.")]
	public class Flicker : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to flicker.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The frequency of the flicker in seconds.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat frequency;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Amount of time flicker is On (0-1). E.g. Use 0.95 for an occasional flicker.")]
		public FsmFloat amountOn;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Only effect the renderer, leaving other components active.")]
		public bool rendererOnly;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Ignore time scale. Useful if flickering UI when the game is paused.")]
		public bool realTime;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float startTime;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float timer;

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xF137B0", Offset = "0xF137B0", VA = "0xF137B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xF13810", Offset = "0xF13810", VA = "0xF13810", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xF13830", Offset = "0xF13830", VA = "0xF13830", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xF139B4", Offset = "0xF139B4", VA = "0xF139B4")]
		public Flicker()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	[ActionCategory(ActionCategory.Effects)]
	[Tooltip("Plays a ParticleSystem. Optionally destroy the GameObject when the ParticleSystem is finished.")]
	public class ParticleSystemPlay : ComponentAction<ParticleSystem>
	{
		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the ParticleSystem.")]
		[CheckForComponent(typeof(ParticleSystem))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Play ParticleSystems on all child GameObjects too.")]
		public FsmBool withChildren;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("''With Children'' can be quite expensive since it has to find Particle Systems in all children. If the hierarchy doesn't change, use Cache Children to speed this up.")]
		public FsmBool cacheChildren;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Stop playing when state exits")]
		public FsmBool stopOnExit;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Destroy the GameObject when the ParticleSystem has finished playing. 'With Children' means all child particle systems also need to finish.")]
		public FsmBool destroyOnFinish;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject go;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ParticleSystem[] childParticleSystems;

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xF139FC", Offset = "0xF139FC", VA = "0xF139FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xF13A44", Offset = "0xF13A44", VA = "0xF13A44", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xF13B28", Offset = "0xF13B28", VA = "0xF13B28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xF13CE0", Offset = "0xF13CE0", VA = "0xF13CE0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xF13E20", Offset = "0xF13E20", VA = "0xF13E20", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xF13B64", Offset = "0xF13B64", VA = "0xF13B64")]
		private void DoParticleSystemPlay()
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xF13F88", Offset = "0xF13F88", VA = "0xF13F88")]
		public ParticleSystemPlay()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	[Tooltip("Sets the value of an Enum Variable.")]
	[ActionCategory(ActionCategory.Enum)]
	public class SetEnumValue : FsmStateAction
	{
		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Enum Variable to set.")]
		[UIHint(UIHint.Variable)]
		public FsmEnum enumVariable;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[MatchFieldType("enumVariable")]
		[Tooltip("The Enum value to set the variable to.")]
		public FsmEnum enumValue;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xF13FD0", Offset = "0xF13FD0", VA = "0xF13FD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xF14000", Offset = "0xF14000", VA = "0xF14000", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xF14064", Offset = "0xF14064", VA = "0xF14064", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xF1402C", Offset = "0xF1402C", VA = "0xF1402C")]
		private void DoSetEnumValue()
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xF14068", Offset = "0xF14068", VA = "0xF14068")]
		public SetEnumValue()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	[Tooltip("Activates/deactivates a Game Object. Use this to hide/show areas, or enable/disable many Behaviours at once.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class ActivateGameObject : FsmStateAction
	{
		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object to activate/deactivate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Check to activate, uncheck to deactivate Game Object.")]
		public FsmBool activate;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Recursively activate/deactivate all children.")]
		public FsmBool recursive;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Reset the Game Object's active state when exiting this state. Useful if you want an object to be active only while this state is active.\nNote: Only applies to the last Game Object activated/deactivated (won't work if Game Object changes).")]
		public bool resetOnExit;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[Tooltip("Repeat this action every frame. Useful if using a variable for Activate that can change over time.")]
		public bool everyFrame;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject activatedGameObject;

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xF14070", Offset = "0xF14070", VA = "0xF14070", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xF140C8", Offset = "0xF140C8", VA = "0xF140C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xF141E4", Offset = "0xF141E4", VA = "0xF141E4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xF141E8", Offset = "0xF141E8", VA = "0xF141E8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xF140F4", Offset = "0xF140F4", VA = "0xF140F4")]
		private void DoActivateGameObject()
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xF142C8", Offset = "0xF142C8", VA = "0xF142C8")]
		public void SetActiveRecursively(GameObject go, bool state)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xF145D4", Offset = "0xF145D4", VA = "0xF145D4")]
		public ActivateGameObject()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	[Tooltip("Activates a GameObject and de-activates other GameObjects at the same level of the hierarchy. E.g, a single UI Screen, a single accessory etc. This action is very helpful if you often organize GameObject hierarchies in this way. \nNOTE: The targeted GameObject should have a parent. This action will not work on GameObjects at the scene root.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class ActivateSolo : FsmStateAction
	{
		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to activate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Re-activate if already active. This means deactivating the target GameObject then activating it again. This will reset FSMs on that GameObject.")]
		public FsmBool allowReactivate;

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xF145DC", Offset = "0xF145DC", VA = "0xF145DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xF1465C", Offset = "0xF1465C", VA = "0xF1465C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xF14678", Offset = "0xF14678", VA = "0xF14678")]
		private void DoActivateSolo()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xF14ACC", Offset = "0xF14ACC", VA = "0xF14ACC")]
		public ActivateSolo()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	[Tooltip("Adds a Component to a Game Object. Use this to change the behaviour of objects on the fly. Optionally remove the Component on exiting the state.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class AddComponent : FsmStateAction
	{
		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to add the Component to.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.ScriptComponent)]
		[RequiredField]
		[Tooltip("The type of Component to add to the Game Object.")]
		[Title("Component Type")]
		public FsmString component;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(Component))]
		[Tooltip("Store the component in an Object variable. E.g., to use with Set Property.")]
		public FsmObject storeComponent;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Remove the Component when this State is exited.")]
		public FsmBool removeOnExit;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Component addedComponent;

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xF14AD4", Offset = "0xF14AD4", VA = "0xF14AD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xF14B0C", Offset = "0xF14B0C", VA = "0xF14B0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xF14CB4", Offset = "0xF14CB4", VA = "0xF14CB4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xF14B28", Offset = "0xF14B28", VA = "0xF14B28")]
		private void DoAddComponent()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xF14D5C", Offset = "0xF14D5C", VA = "0xF14D5C")]
		public AddComponent()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	[Tooltip("Creates a Game Object at a spawn point.\nUse a Game Object and/or Position/Rotation for the Spawn Point. If you specify a Game Object, Position is used as a local offset, and Rotation will override the object's rotation.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class CreateEmptyObject : FsmStateAction
	{
		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Optional GameObject to create. Usually a Prefab.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional Spawn Point.")]
		public FsmGameObject spawnPoint;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Position. If a Spawn Point is defined, this is used as a local offset from the Spawn Point position.")]
		public FsmVector3 position;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Rotation. NOTE: Overrides the rotation of the Spawn Point.")]
		public FsmVector3 rotation;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Optionally store the created object.")]
		public FsmGameObject storeObject;

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xF14D64", Offset = "0xF14D64", VA = "0xF14D64", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xF14E38", Offset = "0xF14E38", VA = "0xF14E38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xF1517C", Offset = "0xF1517C", VA = "0xF1517C")]
		public CreateEmptyObject()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	[Tooltip("Creates a new GameObject.\nUse a GameObject and/or Position/Rotation for the Spawn Point. If you specify a Game Object, Position is used as a local offset, and Rotation will override the object's rotation.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class CreateNewGameObject : FsmStateAction
	{
		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the new GameObject")]
		public FsmString name;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional Parent.")]
		public FsmGameObject parent;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Spawn Point.")]
		public FsmGameObject spawnPoint;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Position. If a Spawn Point is defined, this is used as a local offset from the Spawn Point position.")]
		public FsmVector3 position;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Rotation. NOTE: Overrides the rotation of the Spawn Point.")]
		public FsmVector3 rotation;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Optionally store the created object.")]
		public FsmGameObject storeObject;

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xF15184", Offset = "0xF15184", VA = "0xF15184", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xF152B8", Offset = "0xF152B8", VA = "0xF152B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xF155CC", Offset = "0xF155CC", VA = "0xF155CC")]
		public CreateNewGameObject()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	[ActionTarget(typeof(GameObject), "gameObject", true)]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Creates a Game Object, usually using a Prefab.")]
	public class CreateObject : FsmStateAction
	{
		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("GameObject to create. Usually a Prefab.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional Parent.")]
		public FsmGameObject parent;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Spawn Point.")]
		public FsmGameObject spawnPoint;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Position. If a Spawn Point is defined, this is used as a local offset from the Spawn Point position.")]
		public FsmVector3 position;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Rotation. NOTE: Overrides the rotation of the Spawn Point.")]
		public FsmVector3 rotation;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optionally store the created object.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeObject;

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xF155D4", Offset = "0xF155D4", VA = "0xF155D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xF156B8", Offset = "0xF156B8", VA = "0xF156B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xF159EC", Offset = "0xF159EC", VA = "0xF159EC")]
		public CreateObject()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Deactivate the GameObject that owns the FSM.")]
	public class DeactivateSelf : FsmStateAction
	{
		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Seconds to wait before deactivating. Can be useful to let other actions finish first. E.g. a fade-out effect.\nNOTE: If you use a delay and the FSM switches away from this state before it is finished, the GameObject will not be deactivated.")]
		public FsmFloat delay;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Ignore any time scaling.")]
		public FsmBool realTime;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float elapsedTime;

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xF159F4", Offset = "0xF159F4", VA = "0xF159F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xF15A00", Offset = "0xF15A00", VA = "0xF15A00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xF15AD4", Offset = "0xF15AD4", VA = "0xF15AD4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xF15A4C", Offset = "0xF15A4C", VA = "0xF15A4C")]
		private void DoDeactivateSelf()
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xF15B58", Offset = "0xF15B58", VA = "0xF15B58")]
		public DeactivateSelf()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Destroys a Component of an Object.")]
	public class DestroyComponent : FsmStateAction
	{
		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.ScriptComponent)]
		[Tooltip("The name of the Component to destroy.")]
		public FsmString component;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Component aComponent;

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xF15B60", Offset = "0xF15B60", VA = "0xF15B60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xF15B98", Offset = "0xF15B98", VA = "0xF15B98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xF15BE8", Offset = "0xF15BE8", VA = "0xF15BE8")]
		private void DoDestroyComponent(GameObject go)
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xF15D40", Offset = "0xF15D40", VA = "0xF15D40")]
		public DestroyComponent()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Destroys a Game Object.")]
	public class DestroyObject : FsmStateAction
	{
		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to destroy.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional delay before destroying the Game Object.")]
		[HasFloatSlider(0f, 5f)]
		public FsmFloat delay;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Detach children before destroying the Game Object.")]
		public FsmBool detachChildren;

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xF15D48", Offset = "0xF15D48", VA = "0xF15D48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xF15D7C", Offset = "0xF15D7C", VA = "0xF15D7C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xF15EA8", Offset = "0xF15EA8", VA = "0xF15EA8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xF15EAC", Offset = "0xF15EAC", VA = "0xF15EAC")]
		public DestroyObject()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Destroys GameObjects in an array.")]
	public class DestroyObjects : FsmStateAction
	{
		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObjects to destroy.")]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[RequiredField]
		public FsmArray gameObjects;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional delay before destroying the Game Objects.")]
		[HasFloatSlider(0f, 5f)]
		public FsmFloat delay;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Detach children before destroying the Game Objects.")]
		public FsmBool detachChildren;

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xF15EB4", Offset = "0xF15EB4", VA = "0xF15EB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xF15EE8", Offset = "0xF15EE8", VA = "0xF15EE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xF160A0", Offset = "0xF160A0", VA = "0xF160A0")]
		public DestroyObjects()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Destroys the Owner of the FSM! Useful for spawned Prefabs that need to kill themselves, e.g., a projectile that explodes on impact.")]
	public class DestroySelf : FsmStateAction
	{
		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Seconds to wait before destroying the owner. Can be useful to let other actions finish first. E.g. a fade-out effect.\nNOTE: If you use a delay and the FSM switches away from this state before it is finished, the owner will not be destroyed!")]
		public FsmFloat delay;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Ignore any time scaling.")]
		public FsmBool realTime;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Detach children before destroying the Owner. This allows children to survive, useful to allow FX to fade out etc.")]
		public FsmBool detachChildren;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float elapsedTime;

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xF160A8", Offset = "0xF160A8", VA = "0xF160A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xF16134", Offset = "0xF16134", VA = "0xF16134", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xF16244", Offset = "0xF16244", VA = "0xF16244", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xF16180", Offset = "0xF16180", VA = "0xF16180")]
		private void DoDestroySelf()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xF162C8", Offset = "0xF162C8", VA = "0xF162C8")]
		public DestroySelf()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	[Tooltip("Unparents all children from the Game Object.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class DetachChildren : FsmStateAction
	{
		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("GameObject to unparent children from.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xF162D0", Offset = "0xF162D0", VA = "0xF162D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xF162DC", Offset = "0xF162DC", VA = "0xF162DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xF16310", Offset = "0xF16310", VA = "0xF16310")]
		private static void DoDetachChildren(GameObject go)
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xF1639C", Offset = "0xF1639C", VA = "0xF1639C")]
		public DetachChildren()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Finds the Child of a GameObject by Name.\nNote, you can specify a path to the child, e.g., LeftShoulder/Arm/Hand/Finger. If you need to specify a tag, use {{GetChild}}.")]
	public class FindChild : FsmStateAction
	{
		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to search.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the child. Note, you can specify a path to the child, e.g., LeftShoulder/Arm/Hand/Finger")]
		[RequiredField]
		public FsmString childName;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the child in a GameObject variable.")]
		public FsmGameObject storeResult;

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xF163A4", Offset = "0xF163A4", VA = "0xF163A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xF1641C", Offset = "0xF1641C", VA = "0xF1641C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xF16438", Offset = "0xF16438", VA = "0xF16438")]
		private void DoFindChild()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xF16558", Offset = "0xF16558", VA = "0xF16558")]
		public FindChild()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Finds the closest object to the specified Game Object.\nOptionally filter by Tag and Visibility.")]
	public class FindClosest : FsmStateAction
	{
		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to measure from.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Tag)]
		[Tooltip("Only consider objects with this Tag. NOTE: It's generally a lot quicker to find objects with a Tag!")]
		[RequiredField]
		public FsmString withTag;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If checked, ignores the object that owns this FSM.")]
		public FsmBool ignoreOwner;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Only consider objects visible to the camera.")]
		public FsmBool mustBeVisible;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the closest object.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeObject;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the distance to the closest object.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeDistance;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xF16560", Offset = "0xF16560", VA = "0xF16560", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xF16628", Offset = "0xF16628", VA = "0xF16628", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xF16978", Offset = "0xF16978", VA = "0xF16978", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xF16654", Offset = "0xF16654", VA = "0xF16654")]
		private void DoFindClosest()
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xF1697C", Offset = "0xF1697C", VA = "0xF1697C")]
		public FindClosest()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Finds a Game Object by Name and/or Tag.")]
	public class FindGameObject : FsmStateAction
	{
		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the GameObject to find. You can leave this empty if you specify a Tag.")]
		public FsmString objectName;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Tag)]
		[Tooltip("Find a GameObject with this tag. If Object Name is specified then both name and Tag must match.")]
		public FsmString withTag;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in a GameObject variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmGameObject store;

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xF16984", Offset = "0xF16984", VA = "0xF16984", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xF16A24", Offset = "0xF16A24", VA = "0xF16A24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xF16A40", Offset = "0xF16A40", VA = "0xF16A40")]
		private void Find()
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xF16BC8", Offset = "0xF16BC8", VA = "0xF16BC8", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xF16C54", Offset = "0xF16C54", VA = "0xF16C54")]
		public FindGameObject()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	[Tooltip("Finds the Child of a GameObject by Name and/or Tag. Use this to find attach points etc. NOTE: This action will search recursively through all children and return the first match; To find a specific child use Find Child.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetChild : FsmStateAction
	{
		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to search.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the child to search for.")]
		public FsmString childName;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Tag)]
		[Tooltip("The Tag to search for. If Child Name is set, both name and Tag need to match.")]
		public FsmString withTag;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a GameObject variable.")]
		[RequiredField]
		public FsmGameObject storeResult;

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xF16C5C", Offset = "0xF16C5C", VA = "0xF16C5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xF16D0C", Offset = "0xF16D0C", VA = "0xF16D0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xF16DA4", Offset = "0xF16DA4", VA = "0xF16DA4")]
		private static GameObject DoGetChildByName(GameObject root, string name, string tag)
		{
			return null;
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xF17258", Offset = "0xF17258", VA = "0xF17258", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xF172E4", Offset = "0xF172E4", VA = "0xF172E4")]
		public GetChild()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	[Tooltip("Gets the number of children that a GameObject has.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetChildCount : FsmStateAction
	{
		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to test.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the number of children in an int variable.")]
		public FsmInt storeResult;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a specific count.")]
		public bool everyFrame;

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xF172EC", Offset = "0xF172EC", VA = "0xF172EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xF1731C", Offset = "0xF1731C", VA = "0xF1731C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xF173F4", Offset = "0xF173F4", VA = "0xF173F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xF17348", Offset = "0xF17348", VA = "0xF17348")]
		private void DoGetChildCount()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xF173F8", Offset = "0xF173F8", VA = "0xF173F8")]
		public GetChildCount()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets the Child of a GameObject by Index.\nE.g., O to get the first child. HINT: Use this with an integer variable to iterate through children.")]
	public class GetChildNum : FsmStateAction
	{
		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to search.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The index of the child to find (0 = first child).")]
		public FsmInt childIndex;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the child in a GameObject variable.")]
		public FsmGameObject store;

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xF17400", Offset = "0xF17400", VA = "0xF17400", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xF17444", Offset = "0xF17444", VA = "0xF17444", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xF174A0", Offset = "0xF174A0", VA = "0xF174A0")]
		private GameObject DoGetChildNum(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xF175BC", Offset = "0xF175BC", VA = "0xF175BC")]
		public GetChildNum()
		{
		}
	}
	[Token(Token = "0x2000200")]
	[Tooltip("Measures the Distance betweens 2 Game Objects and stores the result in a Float Variable.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetDistance : FsmStateAction
	{
		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Measure distance from this GameObject.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Target GameObject.")]
		public FsmGameObject target;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance in a float variable.")]
		[RequiredField]
		public FsmFloat storeResult;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xF175C4", Offset = "0xF175C4", VA = "0xF175C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xF17608", Offset = "0xF17608", VA = "0xF17608", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xF177D0", Offset = "0xF177D0", VA = "0xF177D0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xF17634", Offset = "0xF17634", VA = "0xF17634")]
		private void DoGetDistance()
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xF177D4", Offset = "0xF177D4", VA = "0xF177D4")]
		public GetDistance()
		{
		}
	}
	[Token(Token = "0x2000201")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Measures the Distance between a GameObject and a target GameObject/Position. If both GameObject and Position are defined, position is taken a local offset from the GameObject's position.")]
	public class GetDistanceXYZ : ComponentAction<Transform>
	{
		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Measure distance from this GameObject.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Measure distance to this GameObject (or set world position below).")]
		public FsmGameObject target;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("World position or local offset from target GameObject, if defined.")]
		public FsmVector3 position;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance in a float variable.")]
		public FsmFloat storeDistance;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Space used to measure the distance in. E.g. along the world X axis or the GameObject's local X axis.")]
		public Space space;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the distance along the X axis.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeXDistance;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance along the Y axis.")]
		public FsmFloat storeYDistance;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance along the Z axis.")]
		public FsmFloat storeZDistance;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject cachedTargetGameObject;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform targetTransform;

		[Token(Token = "0x170000B5")]
		private Transform gameObjectTransform
		{
			[Token(Token = "0x60009D5")]
			[Address(RVA = "0xF177DC", Offset = "0xF177DC", VA = "0xF177DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xF177E4", Offset = "0xF177E4", VA = "0xF177E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xF1786C", Offset = "0xF1786C", VA = "0xF1786C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xF17C0C", Offset = "0xF17C0C", VA = "0xF17C0C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xF17898", Offset = "0xF17898", VA = "0xF17898")]
		private void DoGetDistanceXYZ()
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xF17C10", Offset = "0xF17C10", VA = "0xF17C10")]
		public GetDistanceXYZ()
		{
		}
	}
	[Token(Token = "0x2000202")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets a Game Object's Layer and stores it in an Int Variable.")]
	public class GetLayer : FsmStateAction
	{
		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to examine.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Layer in an Int Variable.")]
		public FsmInt storeResult;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xF17C58", Offset = "0xF17C58", VA = "0xF17C58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xF17C88", Offset = "0xF17C88", VA = "0xF17C88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xF17D5C", Offset = "0xF17D5C", VA = "0xF17D5C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xF17CB4", Offset = "0xF17CB4", VA = "0xF17CB4")]
		private void DoGetLayer()
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xF17D60", Offset = "0xF17D60", VA = "0xF17D60")]
		public GetLayer()
		{
		}
	}
	[Token(Token = "0x2000203")]
	[Tooltip("Gets the name of a Game Object and stores it in a String Variable.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetName : FsmStateAction
	{
		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object target.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Game Object name in a String Variable.")]
		public FsmString storeName;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xF17D68", Offset = "0xF17D68", VA = "0xF17D68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xF17DF0", Offset = "0xF17DF0", VA = "0xF17DF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xF17EE0", Offset = "0xF17EE0", VA = "0xF17EE0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xF17E1C", Offset = "0xF17E1C", VA = "0xF17E1C")]
		private void DoGetGameObjectName()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xF17EE4", Offset = "0xF17EE4", VA = "0xF17EE4")]
		public GetName()
		{
		}
	}
	[Token(Token = "0x2000204")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Each time this action is called it gets the next child of a GameObject. This lets you quickly loop through all the children of an object to perform actions on them. NOTE: To find a specific child use Find Child.")]
	public class GetNextChild : FsmStateAction
	{
		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The parent GameObject. Note, if GameObject changes, this action will reset and start again at the first child.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the next child in a GameObject variable.")]
		[RequiredField]
		public FsmGameObject storeNextChild;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send to get the next child.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when there are no more children.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		public FsmBool resetFlag;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nextChildIndex;

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xF17EEC", Offset = "0xF17EEC", VA = "0xF17EEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xF17F44", Offset = "0xF17F44", VA = "0xF17F44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xF17FA4", Offset = "0xF17FA4", VA = "0xF17FA4")]
		private void DoGetNextChild(GameObject parent)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xF18138", Offset = "0xF18138", VA = "0xF18138")]
		public GetNextChild()
		{
		}
	}
	[Token(Token = "0x2000205")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets the Game Object that owns the FSM and stores it in a Game Object variable.")]
	public class GetOwner : FsmStateAction
	{
		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the Owner in a Game Object variable.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xF18140", Offset = "0xF18140", VA = "0xF18140", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xF1814C", Offset = "0xF1814C", VA = "0xF1814C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xF1817C", Offset = "0xF1817C", VA = "0xF1817C")]
		public GetOwner()
		{
		}
	}
	[Token(Token = "0x2000206")]
	[Tooltip("Gets the Parent of a Game Object.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetParent : FsmStateAction
	{
		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object to find the parent of.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the parent object (or null if no parent) in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeResult;

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xF18184", Offset = "0xF18184", VA = "0xF18184", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xF181AC", Offset = "0xF181AC", VA = "0xF181AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xF182D4", Offset = "0xF182D4", VA = "0xF182D4")]
		public GetParent()
		{
		}
	}
	[Token(Token = "0x2000207")]
	[Tooltip("Gets a Random Child of a Game Object.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetRandomChild : FsmStateAction
	{
		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The parent Game Object.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Store the random child in a Game Object Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeResult;

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xF182DC", Offset = "0xF182DC", VA = "0xF182DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xF18304", Offset = "0xF18304", VA = "0xF18304", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xF18320", Offset = "0xF18320", VA = "0xF18320")]
		private void DoGetRandomChild()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xF18428", Offset = "0xF18428", VA = "0xF18428")]
		public GetRandomChild()
		{
		}
	}
	[Token(Token = "0x2000208")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets a Random Game Object from the scene.\nOptionally filter by Tag.")]
	public class GetRandomObject : FsmStateAction
	{
		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Tag)]
		[Tooltip("Only select from Game Objects with this Tag.")]
		public FsmString withTag;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a GameObject Variable.")]
		[RequiredField]
		public FsmGameObject storeResult;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xF18430", Offset = "0xF18430", VA = "0xF18430", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xF184A0", Offset = "0xF184A0", VA = "0xF184A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xF1866C", Offset = "0xF1866C", VA = "0xF1866C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xF184CC", Offset = "0xF184CC", VA = "0xF184CC")]
		private void DoGetRandomObject()
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xF18670", Offset = "0xF18670", VA = "0xF18670")]
		public GetRandomObject()
		{
		}
	}
	[Token(Token = "0x2000209")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets the top most parent of the Game Object.\nIf the game object has no parent, returns itself.")]
	public class GetRoot : FsmStateAction
	{
		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the root of the Game Object in a Game Object Variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeRoot;

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xF18678", Offset = "0xF18678", VA = "0xF18678", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xF186A0", Offset = "0xF186A0", VA = "0xF186A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xF186BC", Offset = "0xF186BC", VA = "0xF186BC")]
		private void DoGetRoot()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xF18788", Offset = "0xF18788", VA = "0xF18788")]
		public GetRoot()
		{
		}
	}
	[Token(Token = "0x200020A")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets a Game Object's Tag and stores it in a String Variable.")]
	public class GetTag : FsmStateAction
	{
		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the Tag in a String Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString storeResult;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xF18790", Offset = "0xF18790", VA = "0xF18790", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xF187C0", Offset = "0xF187C0", VA = "0xF187C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xF188A8", Offset = "0xF188A8", VA = "0xF188A8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xF187EC", Offset = "0xF187EC", VA = "0xF187EC")]
		private void DoGetTag()
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xF188AC", Offset = "0xF188AC", VA = "0xF188AC")]
		public GetTag()
		{
		}
	}
	[Token(Token = "0x200020B")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets the number of Game Objects in the scene with the specified Tag.")]
	public class GetTagCount : FsmStateAction
	{
		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Tag)]
		[Tooltip("The Tag to search for.")]
		public FsmString tag;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Store the number found in an int variable.")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeResult;

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xF188B4", Offset = "0xF188B4", VA = "0xF188B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xF1891C", Offset = "0xF1891C", VA = "0xF1891C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xF1896C", Offset = "0xF1896C", VA = "0xF1896C")]
		public GetTagCount()
		{
		}
	}
	[Token(Token = "0x200020C")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets a Game Object's Transform and stores it in an Object Variable.")]
	public class GetTransform : FsmStateAction
	{
		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Store the GameObject's Transform in an Object variable of type UnityEngine.Transform.")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(Transform))]
		public FsmObject storeTransform;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xF18974", Offset = "0xF18974", VA = "0xF18974", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xF189FC", Offset = "0xF189FC", VA = "0xF189FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xF18AD0", Offset = "0xF18AD0", VA = "0xF18AD0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xF18A28", Offset = "0xF18A28", VA = "0xF18A28")]
		private void DoGetGameObjectName()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xF18AD4", Offset = "0xF18AD4", VA = "0xF18AD4")]
		public GetTransform()
		{
		}
	}
	[Token(Token = "0x200020D")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Checks if an Object has a Component. Optionally remove the Component on exiting the state.")]
	public class HasComponent : FsmStateAction
	{
		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to check.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.ScriptComponent)]
		[Tooltip("The name of the component to check for.")]
		public FsmString component;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Remove the component on exiting the state.")]
		public FsmBool removeOnExit;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the Game Object has the component.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the Game Object does not have the component.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a bool variable.")]
		public FsmBool store;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Component aComponent;

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xF18ADC", Offset = "0xF18ADC", VA = "0xF18ADC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xF18B4C", Offset = "0xF18B4C", VA = "0xF18B4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xF18D50", Offset = "0xF18D50", VA = "0xF18D50", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xF18D94", Offset = "0xF18D94", VA = "0xF18D94", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xF18BAC", Offset = "0xF18BAC", VA = "0xF18BAC")]
		private void DoHasComponent(GameObject go)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xF18E3C", Offset = "0xF18E3C", VA = "0xF18E3C")]
		public HasComponent()
		{
		}
	}
	[Token(Token = "0x200020E")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Selects a Random Game Object from an array of Game Objects.")]
	public class SelectRandomGameObject : FsmStateAction
	{
		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Game Objects", "Game Object", "Weight")]
		[Tooltip("A possible GameObject choice.")]
		public FsmGameObject[] gameObjects;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this GameObject being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Store the selected GameObject in a GameObject Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xF18E44", Offset = "0xF18E44", VA = "0xF18E44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xF18FC8", Offset = "0xF18FC8", VA = "0xF18FC8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xF18FE4", Offset = "0xF18FE4", VA = "0xF18FE4")]
		private void DoSelectRandomGameObject()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xF1906C", Offset = "0xF1906C", VA = "0xF1906C")]
		public SelectRandomGameObject()
		{
		}
	}
	[Token(Token = "0x200020F")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Sets the value of a Game Object Variable.")]
	public class SetGameObject : FsmStateAction
	{
		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject Variable to set.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmGameObject variable;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Set the variable value. NOTE: leave empty to set to null.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xF19074", Offset = "0xF19074", VA = "0xF19074", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xF190A4", Offset = "0xF190A4", VA = "0xF190A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xF19104", Offset = "0xF19104", VA = "0xF19104", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xF1913C", Offset = "0xF1913C", VA = "0xF1913C")]
		public SetGameObject()
		{
		}
	}
	[Token(Token = "0x2000210")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Sets a Game Object's Layer.")]
	public class SetLayer : FsmStateAction
	{
		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to set.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Layer)]
		[Tooltip("The new layer.")]
		public int layer;

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xF19144", Offset = "0xF19144", VA = "0xF19144", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xF19168", Offset = "0xF19168", VA = "0xF19168", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xF19184", Offset = "0xF19184", VA = "0xF19184")]
		private void DoSetLayer()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xF19224", Offset = "0xF19224", VA = "0xF19224")]
		public SetLayer()
		{
		}
	}
	[Token(Token = "0x2000211")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Sets a Game Object's Name.")]
	public class SetName : FsmStateAction
	{
		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object to name.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The new name.")]
		public FsmString name;

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xF1922C", Offset = "0xF1922C", VA = "0xF1922C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xF19254", Offset = "0xF19254", VA = "0xF19254", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xF19270", Offset = "0xF19270", VA = "0xF19270")]
		private void DoSetLayer()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xF19320", Offset = "0xF19320", VA = "0xF19320")]
		public SetName()
		{
		}
	}
	[Token(Token = "0x2000212")]
	[Tooltip("Sets the Parent of a Game Object.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class SetParent : FsmStateAction
	{
		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to parent.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new parent for the Game Object. Leave empty or None to un-parent the Game Object.")]
		public FsmGameObject parent;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before. Hint: Setting to False can fix common UI scaling issues.")]
		public FsmBool worldPositionStays;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the local position to 0,0,0 after parenting.")]
		public FsmBool resetLocalPosition;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the local rotation to 0,0,0 after parenting.")]
		public FsmBool resetLocalRotation;

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xF19328", Offset = "0xF19328", VA = "0xF19328", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xF1938C", Offset = "0xF1938C", VA = "0xF1938C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xF19598", Offset = "0xF19598", VA = "0xF19598")]
		public SetParent()
		{
		}
	}
	[Token(Token = "0x2000213")]
	[Tooltip("Sets a Game Object's Tag.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class SetTag : FsmStateAction
	{
		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to set.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Tag)]
		[Tooltip("The tag. Note: Use Unity's <a href=\"http://unity3d.com/support/documentation/Components/class-TagManager.html\">Tag Manager</a> to add/edit tags.")]
		public FsmString tag;

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xF195A0", Offset = "0xF195A0", VA = "0xF195A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xF19608", Offset = "0xF19608", VA = "0xF19608", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xF196B8", Offset = "0xF196B8", VA = "0xF196B8")]
		public SetTag()
		{
		}
	}
	[Token(Token = "0x2000214")]
	[Tooltip("Set the Tag on all children of a GameObject. Optionally filter by component.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class SetTagsOnChildren : FsmStateAction
	{
		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("GameObject Parent")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Set Tag To...")]
		[UIHint(UIHint.Tag)]
		[RequiredField]
		public FsmString tag;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.ScriptComponent)]
		[Tooltip("Only set the Tag on children with this component.")]
		public FsmString filterByComponent;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Type componentFilter;

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xF196C0", Offset = "0xF196C0", VA = "0xF196C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xF196F8", Offset = "0xF196F8", VA = "0xF196F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xF19734", Offset = "0xF19734", VA = "0xF19734")]
		private void SetTag(GameObject parent)
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xF19BA0", Offset = "0xF19BA0", VA = "0xF19BA0")]
		private void UpdateComponentFilter()
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xF19D80", Offset = "0xF19D80", VA = "0xF19D80")]
		public SetTagsOnChildren()
		{
		}
	}
	[Token(Token = "0x2000215")]
	[ActionCategory("Gamepad")]
	[NoActionTargets]
	[SeeAlso("New Unity Input Manager")]
	public abstract class GamepadActionBase : FsmStateAction
	{
		[Token(Token = "0x2000216")]
		public enum UpdateMode
		{
			[Token(Token = "0x40008EB")]
			Once,
			[Token(Token = "0x40008EC")]
			Update,
			[Token(Token = "0x40008ED")]
			FixedUpdate
		}

		[Token(Token = "0x40008E7")]
		public const string XboxGamepad = "Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.";

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("When to read the Input.")]
		public UpdateMode updateMode;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Gamepad gamepad;

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xF19D88", Offset = "0xF19D88", VA = "0xF19D88", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xF19D94", Offset = "0xF19D94", VA = "0xF19D94", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xF19DC0", Offset = "0xF19DC0", VA = "0xF19DC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xF19E6C", Offset = "0xF19E6C", VA = "0xF19E6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xF19E80", Offset = "0xF19E80", VA = "0xF19E80", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xF19DEC", Offset = "0xF19DEC", VA = "0xF19DEC")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xF19E94", Offset = "0xF19E94", VA = "0xF19E94", Slot = "62")]
		protected virtual void Execute()
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xF19E98", Offset = "0xF19E98", VA = "0xF19E98")]
		protected ButtonControl GetButtonControl(GamepadButton button)
		{
			return null;
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xF19FA8", Offset = "0xF19FA8", VA = "0xF19FA8")]
		protected GamepadActionBase()
		{
		}
	}
	[Token(Token = "0x2000217")]
	[Tooltip("Checks Gamepad buttons for combos. Combos are either buttons pressed at the same time or pressed in a specific sequence. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadButtonComboEvents : GamepadActionBase
	{
		[Token(Token = "0x2000218")]
		public enum Combo
		{
			[Token(Token = "0x40008FD")]
			SameTime,
			[Token(Token = "0x40008FE")]
			Sequence
		}

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(Combo))]
		[Tooltip("The type of combo to detect.")]
		public FsmEnum combo;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Gamepad button to test.")]
		[ArrayEditor(typeof(GamepadButton), "Button", 0, 0, 65536)]
		public FsmArray buttons;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Time allowed for the next button press. Generally shorter for Same Time combos and longer for Sequences.")]
		public FsmFloat timeWindow;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Use unscaled time for time window.")]
		public FsmBool realTime;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if the combo was detected.")]
		public FsmBool didSucceed;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if the combo was successfully executed.")]
		public FsmEvent successEvent;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if the combo failed (started but timed-out).")]
		public FsmEvent failedEvent;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Log Debug info to the Unity Console.")]
		public FsmBool debug;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool comboStarted;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int stepInSequence;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float timer;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly List<ButtonControl> comboButtons;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<ButtonControl> buttonsPressed;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<ButtonControl> validNextButtons;

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xF19FB0", Offset = "0xF19FB0", VA = "0xF19FB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xF1A040", Offset = "0xF1A040", VA = "0xF1A040", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xF1A200", Offset = "0xF1A200", VA = "0xF1A200")]
		private void ResetCombo()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xF1A3F0", Offset = "0xF1A3F0", VA = "0xF1A3F0", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xF1A63C", Offset = "0xF1A63C", VA = "0xF1A63C")]
		private void DoComboStep(ButtonControl lastPressedButton)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xF1A8CC", Offset = "0xF1A8CC", VA = "0xF1A8CC")]
		public GamepadButtonComboEvents()
		{
		}
	}
	[Token(Token = "0x2000219")]
	[Tooltip("Checks Gamepad buttons. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadButtonEvents : GamepadActionBase
	{
		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(GamepadButton))]
		[Tooltip("The Gamepad button to test.")]
		public FsmEnum button;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if the button is pressed.")]
		public FsmBool isPressed;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the button is pressed.")]
		public FsmEvent isPressedEvent;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the button was pressed this frame.")]
		public FsmEvent wasPressedThisFrame;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if the button was released this frame.")]
		public FsmEvent wasReleasedThisFrame;

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xF1A984", Offset = "0xF1A984", VA = "0xF1A984", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xF1AA3C", Offset = "0xF1AA3C", VA = "0xF1AA3C", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xF1AB6C", Offset = "0xF1AB6C", VA = "0xF1AB6C")]
		public GamepadButtonEvents()
		{
		}
	}
	[Token(Token = "0x200021A")]
	[Tooltip("Get values from a Gamepad button. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadGetButtonValues : GamepadActionBase
	{
		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(GamepadButton))]
		[Tooltip("The Gamepad button to test.")]
		public FsmEnum button;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store button's current value.")]
		public FsmFloat currentValue;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store if the button is pressed. This is true if its current value is greater than a predetermined threshold.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPressed;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Stores how long the button has been pressed. Resets to zero when released.")]
		public FsmFloat heldTime;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Stores how many times the button has been pressed while this State was active. Useful for 'double-click' buttons.")]
		[UIHint(UIHint.Variable)]
		public FsmInt pressedCount;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float pressedStartTime;

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xF1AB74", Offset = "0xF1AB74", VA = "0xF1AB74", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xF1ABA4", Offset = "0xF1ABA4", VA = "0xF1ABA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xF1ABCC", Offset = "0xF1ABCC", VA = "0xF1ABCC", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xF1AD14", Offset = "0xF1AD14", VA = "0xF1AD14")]
		public GamepadGetButtonValues()
		{
		}
	}
	[Token(Token = "0x200021B")]
	[Tooltip("Reads the value of a Gamepad button. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadReadButtonValue : GamepadActionBase
	{
		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(GamepadButton))]
		[Tooltip("The Gamepad button to test.")]
		public FsmEnum button;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store button's current value.")]
		public FsmFloat storeFloatValue;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if the button is pressed. This is true if its current value is greater than a predetermined threshold.")]
		public FsmBool isPressed;

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xF1AD1C", Offset = "0xF1AD1C", VA = "0xF1AD1C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xF1AD4C", Offset = "0xF1AD4C", VA = "0xF1AD4C", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xF1AE1C", Offset = "0xF1AE1C", VA = "0xF1AE1C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xF1AE74", Offset = "0xF1AE74", VA = "0xF1AE74")]
		public GamepadReadButtonValue()
		{
		}
	}
	[Token(Token = "0x200021C")]
	[Tooltip("Reads the value of a Gamepad button. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadReadStickValue : GamepadActionBase
	{
		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Gamepad stick to test.")]
		[ObjectType(typeof(GamepadStick))]
		public FsmEnum stick;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the stick's current value.")]
		public FsmVector2 storeVector2Value;

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xF1AE7C", Offset = "0xF1AE7C", VA = "0xF1AE7C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xF1AEAC", Offset = "0xF1AEAC", VA = "0xF1AEAC", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xF1AF90", Offset = "0xF1AF90", VA = "0xF1AF90")]
		private InputControl GetControl()
		{
			return null;
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xF1B088", Offset = "0xF1B088", VA = "0xF1B088")]
		public GamepadReadStickValue()
		{
		}
	}
	[Token(Token = "0x200021D")]
	[Tooltip("Checks a Gamepad stick and translates its offset into events. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadStickEvents : GamepadActionBase
	{
		[Token(Token = "0x200021E")]
		public enum Stick
		{
			[Token(Token = "0x4000917")]
			LeftStick,
			[Token(Token = "0x4000918")]
			RightStick,
			[Token(Token = "0x4000919")]
			DPad
		}

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Gamepad stick to test.")]
		[ObjectType(typeof(Stick))]
		public FsmEnum stick;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if input is to the left.")]
		public FsmEvent leftEvent;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if input is to the right.")]
		public FsmEvent rightEvent;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if input is to the up.")]
		public FsmEvent upEvent;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if input is to the down.")]
		public FsmEvent downEvent;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if input is in any direction.")]
		public FsmEvent anyDirection;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if no axis input (centered).")]
		public FsmEvent noDirection;

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xF1B090", Offset = "0xF1B090", VA = "0xF1B090", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xF1B110", Offset = "0xF1B110", VA = "0xF1B110", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xF1B344", Offset = "0xF1B344", VA = "0xF1B344")]
		private InputControl GetControl()
		{
			return null;
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xF1B43C", Offset = "0xF1B43C", VA = "0xF1B43C")]
		public GamepadStickEvents()
		{
		}
	}
	[Token(Token = "0x200021F")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Fills the screen with a Color. NOTE: Uses OnGUI so you need a PlayMakerGUI component in the scene.")]
	public class DrawFullscreenColor : FsmStateAction
	{
		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Color. NOTE: Uses OnGUI so you need a PlayMakerGUI component in the scene.")]
		public FsmColor color;

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xF1B444", Offset = "0xF1B444", VA = "0xF1B444", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xF1B478", Offset = "0xF1B478", VA = "0xF1B478", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xF1B578", Offset = "0xF1B578", VA = "0xF1B578")]
		public DrawFullscreenColor()
		{
		}
	}
	[Token(Token = "0x2000220")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Draws a GUI Texture. NOTE: Uses OnGUI so you need a PlayMakerGUI component in the scene. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/GUI.DrawTexture.html\">DrawTexture</a>.")]
	public class DrawTexture : FsmStateAction
	{
		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Texture to draw.")]
		[RequiredField]
		public FsmTexture texture;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Title("Position")]
		[Tooltip("Rectangle on the screen to draw the texture within. Alternatively, set or override individual properties below.")]
		[UIHint(UIHint.Variable)]
		public FsmRect screenRect;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Left screen coordinate.")]
		public FsmFloat left;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Top screen coordinate.")]
		public FsmFloat top;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Width of texture on screen.")]
		public FsmFloat width;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Height of texture on screen.")]
		public FsmFloat height;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.")]
		public ScaleMode scaleMode;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.")]
		public FsmBool alphaBlend;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used. Pass in w/h for the desired aspect ratio. This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.")]
		public FsmFloat imageAspect;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Use normalized screen coordinates (0-1)")]
		public FsmBool normalized;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rect rect;

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xF1B580", Offset = "0xF1B580", VA = "0xF1B580", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xF1B67C", Offset = "0xF1B67C", VA = "0xF1B67C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xF1B990", Offset = "0xF1B990", VA = "0xF1B990")]
		public DrawTexture()
		{
		}
	}
	[Token(Token = "0x2000221")]
	[Tooltip("Enables/Disables the PlayMakerGUI component in the scene. Note, you need a PlayMakerGUI component in the scene to see OnGUI actions. However, OnGUI can be very expensive on mobile devices. This action lets you turn OnGUI on/off (e.g., turn it on for a menu, and off during gameplay).")]
	[ActionCategory(ActionCategory.GUI)]
	public class EnableGUI : FsmStateAction
	{
		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enableGUI;

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xF1B998", Offset = "0xF1B998", VA = "0xF1B998", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xF1B9C0", Offset = "0xF1B9C0", VA = "0xF1B9C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xF1BA50", Offset = "0xF1BA50", VA = "0xF1BA50")]
		public EnableGUI()
		{
		}
	}
	[Token(Token = "0x2000222")]
	[Tooltip("GUI base action - don't use!")]
	public abstract class GUIAction : FsmStateAction
	{
		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Screen rectangle.")]
		public FsmRect screenRect;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Left coordinate of screen rectangle.")]
		public FsmFloat left;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Top coordinate of screen rectangle.")]
		public FsmFloat top;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Width of screen rectangle.")]
		public FsmFloat width;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Height of screen rectangle.")]
		public FsmFloat height;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Use normalized screen coordinates (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal Rect rect;

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xF1BA58", Offset = "0xF1BA58", VA = "0xF1BA58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xF1BB08", Offset = "0xF1BB08", VA = "0xF1BB08", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xF1BCF8", Offset = "0xF1BCF8", VA = "0xF1BCF8")]
		protected GUIAction()
		{
		}
	}
	[Token(Token = "0x2000223")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("GUI Box.")]
	public class GUIBox : GUIContentAction
	{
		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xF1BD00", Offset = "0xF1BD00", VA = "0xF1BD00", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xF1BF08", Offset = "0xF1BF08", VA = "0xF1BF08")]
		public GUIBox()
		{
		}
	}
	[Token(Token = "0x2000224")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("GUI button. Sends an Event when pressed. Optionally store the button state in a Bool Variable.")]
	public class GUIButton : GUIContentAction
	{
		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The Event to send when the button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Store the button state in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeButtonState;

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xF1BF18", Offset = "0xF1BF18", VA = "0xF1BF18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xF1C040", Offset = "0xF1C040", VA = "0xF1C040", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xF1C160", Offset = "0xF1C160", VA = "0xF1C160")]
		public GUIButton()
		{
		}
	}
	[Token(Token = "0x2000225")]
	[Tooltip("GUI base action - don't use!")]
	public abstract class GUIContentAction : GUIAction
	{
		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Optional image to display.")]
		public FsmTexture image;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Optional text to display.")]
		public FsmString text;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Optional tooltip. Accessed by {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal GUIContent content;

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xF1BF98", Offset = "0xF1BF98", VA = "0xF1BF98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xF1BE3C", Offset = "0xF1BE3C", VA = "0xF1BE3C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xF1BF10", Offset = "0xF1BF10", VA = "0xF1BF10")]
		protected GUIContentAction()
		{
		}
	}
	[Token(Token = "0x2000226")]
	[Obsolete("GUIElement is part of the legacy UI system removed in 2019.3")]
	[ActionCategory(ActionCategory.GUIElement)]
	[Tooltip("Performs a Hit Test on a Game Object with a GUITexture or GUIText component.")]
	public class GUIElementHitTest : FsmStateAction
	{
		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that has a GUITexture or GUIText component.")]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Specify camera or use MainCamera as default.")]
		public Camera camera;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector position on screen. Usually stored by actions like GetTouchInfo, or World To Screen Point.")]
		public FsmVector3 screenPoint;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Specify screen X coordinate.")]
		public FsmFloat screenX;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Specify screen Y coordinate.")]
		public FsmFloat screenY;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Whether the specified screen coordinates are normalized (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if the Hit Test is true.")]
		public FsmEvent hitEvent;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result of the Hit Test in a bool variable (true/false).")]
		public FsmBool storeResult;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful if you want to wait for the hit test to return true.")]
		public FsmBool everyFrame;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject gameObjectCached;

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xF1C168", Offset = "0xF1C168", VA = "0xF1C168", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xF1C2B8", Offset = "0xF1C2B8", VA = "0xF1C2B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xF1C2C0", Offset = "0xF1C2C0", VA = "0xF1C2C0")]
		public GUIElementHitTest()
		{
		}
	}
	[Token(Token = "0x2000227")]
	[Tooltip("GUI Horizontal Slider connected to a Float Variable.")]
	[ActionCategory(ActionCategory.GUI)]
	public class GUIHorizontalSlider : GUIAction
	{
		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The float variable to link the slider to. Moving the slider changes the value, and changes in the value move the slider.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The value of the float variable when slider is all the way to the left.")]
		[RequiredField]
		public FsmFloat leftValue;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The value of the float variable when slider is all the way to the right.")]
		[RequiredField]
		public FsmFloat rightValue;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Optional GUIStyle for the slider track.")]
		public FsmString sliderStyle;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Optional GUIStyle for the slider thumb.")]
		public FsmString thumbStyle;

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xF1C2C8", Offset = "0xF1C2C8", VA = "0xF1C2C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xF1C3AC", Offset = "0xF1C3AC", VA = "0xF1C3AC", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xF1C5B8", Offset = "0xF1C5B8", VA = "0xF1C5B8")]
		public GUIHorizontalSlider()
		{
		}
	}
	[Token(Token = "0x2000228")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("GUI Label.")]
	public class GUILabel : GUIContentAction
	{
		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xF1C5C0", Offset = "0xF1C5C0", VA = "0xF1C5C0", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xF1C6FC", Offset = "0xF1C6FC", VA = "0xF1C6FC")]
		public GUILabel()
		{
		}
	}
	[Token(Token = "0x2000229")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Gets the Tooltip of the control the mouse is currently over and store it in a String Variable.")]
	public class GUITooltip : FsmStateAction
	{
		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the tooltip in a string variable.")]
		[UIHint(UIHint.Variable)]
		public FsmString storeTooltip;

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xF1C704", Offset = "0xF1C704", VA = "0xF1C704", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xF1C710", Offset = "0xF1C710", VA = "0xF1C710", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xF1C780", Offset = "0xF1C780", VA = "0xF1C780")]
		public GUITooltip()
		{
		}
	}
	[Token(Token = "0x200022A")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("GUI Vertical Slider connected to a Float Variable.")]
	public class GUIVerticalSlider : GUIAction
	{
		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Float Variable linked to the slider value.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[RequiredField]
		[Tooltip("The value of the variable at the top of the slider.")]
		public FsmFloat topValue;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[RequiredField]
		[Tooltip("The value of the variable at the bottom of the slider.")]
		public FsmFloat bottomValue;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Optional GUIStyle for the slider track.")]
		public FsmString sliderStyle;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Optional GUIStyle for the slider thumb.")]
		public FsmString thumbStyle;

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xF1C788", Offset = "0xF1C788", VA = "0xF1C788", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xF1C88C", Offset = "0xF1C88C", VA = "0xF1C88C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xF1CA98", Offset = "0xF1CA98", VA = "0xF1CA98")]
		public GUIVerticalSlider()
		{
		}
	}
	[Token(Token = "0x200022B")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Resets the GUI matrix. Useful if you've rotated or scaled the GUI and now want to reset it.")]
	public class ResetGUIMatrix : FsmStateAction
	{
		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xF1CAA0", Offset = "0xF1CAA0", VA = "0xF1CAA0", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xF1CBF0", Offset = "0xF1CBF0", VA = "0xF1CBF0")]
		public ResetGUIMatrix()
		{
		}
	}
	[Token(Token = "0x200022C")]
	[Tooltip("Rotates the GUI around a pivot point. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	[ActionCategory(ActionCategory.GUI)]
	public class RotateGUI : FsmStateAction
	{
		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Angle to rotate in degrees.")]
		[RequiredField]
		public FsmFloat angle;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("X coordinate of pivot.")]
		[RequiredField]
		public FsmFloat pivotX;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Y coordinate of pivot.")]
		[RequiredField]
		public FsmFloat pivotY;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Use normalized screen coordinates (0-1).")]
		public bool normalized;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[Tooltip("Apply to all GUI actions in all FSMs.")]
		public bool applyGlobally;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool applied;

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xF1CBF8", Offset = "0xF1CBF8", VA = "0xF1CBF8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xF1CC70", Offset = "0xF1CC70", VA = "0xF1CC70", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xF1CE18", Offset = "0xF1CE18", VA = "0xF1CE18", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xF1CE20", Offset = "0xF1CE20", VA = "0xF1CE20")]
		public RotateGUI()
		{
		}
	}
	[Token(Token = "0x200022D")]
	[Tooltip("Scales the GUI around a pivot point. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	[ActionCategory(ActionCategory.GUI)]
	public class ScaleGUI : FsmStateAction
	{
		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Scale in x (1 = 100%)")]
		[RequiredField]
		public FsmFloat scaleX;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Scale in y (1 = 100%)")]
		public FsmFloat scaleY;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Scale around this x screen coordinate.")]
		[RequiredField]
		public FsmFloat pivotX;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Scale around this y screen coordinate.")]
		[RequiredField]
		public FsmFloat pivotY;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Pivot point uses normalized coordinates (0-1). E.g. 0.5 is the center of the screen.")]
		public bool normalized;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Apply to all GUI actions in all FSMs.")]
		public bool applyGlobally;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		private bool applied;

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xF1CE28", Offset = "0xF1CE28", VA = "0xF1CE28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xF1CEC0", Offset = "0xF1CEC0", VA = "0xF1CEC0", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xF1D144", Offset = "0xF1D144", VA = "0xF1D144", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xF1D14C", Offset = "0xF1D14C", VA = "0xF1D14C")]
		public ScaleGUI()
		{
		}
	}
	[Token(Token = "0x200022E")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Sets the global Alpha for the GUI. Useful for fading GUI up/down. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	public class SetGUIAlpha : FsmStateAction
	{
		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set the transparency of the GUI. 1 = opaque, 0 = transparent.")]
		[RequiredField]
		public FsmFloat alpha;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xF1D154", Offset = "0xF1D154", VA = "0xF1D154", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xF1D17C", Offset = "0xF1D17C", VA = "0xF1D17C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xF1D2CC", Offset = "0xF1D2CC", VA = "0xF1D2CC")]
		public SetGUIAlpha()
		{
		}
	}
	[Token(Token = "0x200022F")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Sets the Tinting Color for all background elements rendered by the GUI. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	public class SetGUIBackgroundColor : FsmStateAction
	{
		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The color for all background elements.")]
		[RequiredField]
		public FsmColor backgroundColor;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xF1D2D4", Offset = "0xF1D2D4", VA = "0xF1D2D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xF1D308", Offset = "0xF1D308", VA = "0xF1D308", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xF1D434", Offset = "0xF1D434", VA = "0xF1D434")]
		public SetGUIBackgroundColor()
		{
		}
	}
	[Token(Token = "0x2000230")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Sets the Tinting Color for the GUI. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	public class SetGUIColor : FsmStateAction
	{
		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Tint Color for the GUI.")]
		public FsmColor color;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xF1D43C", Offset = "0xF1D43C", VA = "0xF1D43C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xF1D470", Offset = "0xF1D470", VA = "0xF1D470", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xF1D59C", Offset = "0xF1D59C", VA = "0xF1D59C")]
		public SetGUIColor()
		{
		}
	}
	[Token(Token = "0x2000231")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Sets the Tinting Color for all text rendered by the GUI. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	public class SetGUIContentColor : FsmStateAction
	{
		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Tint color for all text rendered by the GUI.")]
		public FsmColor contentColor;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xF1D5A4", Offset = "0xF1D5A4", VA = "0xF1D5A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xF1D5D8", Offset = "0xF1D5D8", VA = "0xF1D5D8", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xF1D704", Offset = "0xF1D704", VA = "0xF1D704")]
		public SetGUIContentColor()
		{
		}
	}
	[Token(Token = "0x2000232")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Sets the sorting depth of subsequent GUI elements.")]
	public class SetGUIDepth : FsmStateAction
	{
		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/GUI-depth.html\">GUI.Depth</a>.")]
		[RequiredField]
		public FsmInt depth;

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xF1D70C", Offset = "0xF1D70C", VA = "0xF1D70C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xF1D734", Offset = "0xF1D734", VA = "0xF1D734", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xF1D754", Offset = "0xF1D754", VA = "0xF1D754", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xF1D7C8", Offset = "0xF1D7C8", VA = "0xF1D7C8")]
		public SetGUIDepth()
		{
		}
	}
	[Token(Token = "0x2000233")]
	[Tooltip("Sets the GUISkin used by GUI elements. Skins can be customized in the Unity editor. See unity docs: <a href=\"http://unity3d.com/support/documentation/Components/class-GUISkin.html\">GUISkin</a>.\n")]
	[ActionCategory(ActionCategory.GUI)]
	public class SetGUISkin : FsmStateAction
	{
		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The skin to use.")]
		public GUISkin skin;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xF1D7D0", Offset = "0xF1D7D0", VA = "0xF1D7D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xF1D804", Offset = "0xF1D804", VA = "0xF1D804", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xF1D944", Offset = "0xF1D944", VA = "0xF1D944")]
		public SetGUISkin()
		{
		}
	}
	[Token(Token = "0x2000234")]
	[Tooltip("Controls the appearance of Mouse Cursor.")]
	[ActionCategory(ActionCategory.GUI)]
	public class SetMouseCursor : FsmStateAction
	{
		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The texture to use for the cursor.")]
		public FsmTexture cursorTexture;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Hide the cursor.")]
		public FsmBool hideCursor;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Lock the cursor to the center of the screen. Useful in first person controllers.")]
		public FsmBool lockCursor;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xF1D94C", Offset = "0xF1D94C", VA = "0xF1D94C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xF1D9A4", Offset = "0xF1D9A4", VA = "0xF1D9A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xF1DB28", Offset = "0xF1DB28", VA = "0xF1DB28")]
		private void UpdateCursorState()
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xF1DB74", Offset = "0xF1DB74", VA = "0xF1DB74", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xF1DB78", Offset = "0xF1DB78", VA = "0xF1DB78", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xF1DD28", Offset = "0xF1DD28", VA = "0xF1DD28")]
		public SetMouseCursor()
		{
		}
	}
	[Token(Token = "0x2000235")]
	[Obsolete("GUIText is part of the legacy UI system removed in 2019.3")]
	[ActionCategory(ActionCategory.GUIElement)]
	[Tooltip("Sets the Text used by the GUIText Component attached to a Game Object.")]
	public class SetGUIText : FsmStateAction
	{
		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.TextArea)]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		public FsmString text;

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xF1DD30", Offset = "0xF1DD30", VA = "0xF1DD30")]
		public SetGUIText()
		{
		}
	}
	[Token(Token = "0x2000236")]
	[ActionCategory(ActionCategory.GUIElement)]
	[Tooltip("Sets the Texture used by the GUITexture attached to a Game Object.")]
	[Obsolete("GUITexture is part of the legacy UI system removed in 2019.3")]
	public class SetGUITexture : FsmStateAction
	{
		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		public FsmTexture texture;

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xF1DD38", Offset = "0xF1DD38", VA = "0xF1DD38")]
		public SetGUITexture()
		{
		}
	}
	[Token(Token = "0x2000237")]
	[Tooltip("Sets the Alpha of the GUITexture attached to a Game Object. Useful for fading GUI elements in/out.")]
	[ActionCategory(ActionCategory.GUIElement)]
	[Obsolete("GUITexture is part of the legacy UI system removed in 2019.3")]
	public class SetGUITextureAlpha : FsmStateAction
	{
		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		public FsmFloat alpha;

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xF1DD40", Offset = "0xF1DD40", VA = "0xF1DD40")]
		public SetGUITextureAlpha()
		{
		}
	}
	[Token(Token = "0x2000238")]
	[ActionCategory(ActionCategory.GUIElement)]
	[Obsolete("GUITexture is part of the legacy UI system removed in 2019.3")]
	[Tooltip("Sets the Color of the GUITexture attached to a Game Object.")]
	public class SetGUITextureColor : FsmStateAction
	{
		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		public FsmColor color;

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xF1DD48", Offset = "0xF1DD48", VA = "0xF1DD48")]
		public SetGUITextureColor()
		{
		}
	}
	[Token(Token = "0x2000239")]
	[Tooltip("GUILayout base action - don't use!")]
	public abstract class GUILayoutAction : FsmStateAction
	{
		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("An array of layout options.See <a href=\"http://unity3d.com/support/documentation/ScriptReference/GUILayoutOption.html\" rel=\"nofollow\">GUILayoutOption</a>.")]
		public LayoutOption[] layoutOptions;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GUILayoutOption[] options;

		[Token(Token = "0x170000B6")]
		public GUILayoutOption[] LayoutOptions
		{
			[Token(Token = "0x6000A95")]
			[Address(RVA = "0xF1DD50", Offset = "0xF1DD50", VA = "0xF1DD50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xF1DE68", Offset = "0xF1DE68", VA = "0xF1DE68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xF1DEC0", Offset = "0xF1DEC0", VA = "0xF1DEC0")]
		protected GUILayoutAction()
		{
		}
	}
	[Token(Token = "0x200023A")]
	[Tooltip("Begin a GUILayout block of GUI controls in a fixed screen area. NOTE: Block must end with a corresponding GUILayoutEndArea.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutBeginArea : FsmStateAction
	{
		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Screen area.")]
		public FsmRect screenRect;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Left screen coordinate.")]
		public FsmFloat left;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Top screen coordinate.")]
		public FsmFloat top;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Width of area.")]
		public FsmFloat width;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Height of area.")]
		public FsmFloat height;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Use normalized screen coordinates (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional GUIStyle name in current GUISkin.")]
		public FsmString style;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rect rect;

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xF1DEC8", Offset = "0xF1DEC8", VA = "0xF1DEC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xF1DFC8", Offset = "0xF1DFC8", VA = "0xF1DFC8", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xF1E268", Offset = "0xF1E268", VA = "0xF1E268")]
		public GUILayoutBeginArea()
		{
		}
	}
	[Token(Token = "0x200023B")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Begin a GUILayout area that follows the specified game object. Useful for overlays (e.g., playerName). NOTE: Block must end with a corresponding GUILayoutEndArea.")]
	public class GUILayoutBeginAreaFollowObject : FsmStateAction
	{
		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to follow.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Left screen offset.")]
		[RequiredField]
		public FsmFloat offsetLeft;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Screen offset up.")]
		[RequiredField]
		public FsmFloat offsetTop;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Width of area.")]
		[RequiredField]
		public FsmFloat width;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Height of area.")]
		[RequiredField]
		public FsmFloat height;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Use normalized screen coordinates (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xF1E270", Offset = "0xF1E270", VA = "0xF1E270", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xF1E370", Offset = "0xF1E370", VA = "0xF1E370", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xF1E678", Offset = "0xF1E678", VA = "0xF1E678")]
		private static void DummyBeginArea()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xF1E690", Offset = "0xF1E690", VA = "0xF1E690")]
		public GUILayoutBeginAreaFollowObject()
		{
		}
	}
	[Token(Token = "0x200023C")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Begin a centered GUILayout block. The block is centered inside a parent {{GUILayout Area}}. So to place the block in the center of the screen, first use a {{GULayout Area}} the size of the whole screen (the default setting). NOTE: Block must end with a corresponding {{GUILayoutEndCentered}}.")]
	public class GUILayoutBeginCentered : FsmStateAction
	{
		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xF1E698", Offset = "0xF1E698", VA = "0xF1E698", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xF1E69C", Offset = "0xF1E69C", VA = "0xF1E69C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xF1E7BC", Offset = "0xF1E7BC", VA = "0xF1E7BC")]
		public GUILayoutBeginCentered()
		{
		}
	}
	[Token(Token = "0x200023D")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout BeginHorizontal.")]
	public class GUILayoutBeginHorizontal : GUILayoutAction
	{
		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Text to display.")]
		public FsmString text;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xF1E7C4", Offset = "0xF1E7C4", VA = "0xF1E7C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xF1E86C", Offset = "0xF1E86C", VA = "0xF1E86C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xF1E988", Offset = "0xF1E988", VA = "0xF1E988")]
		public GUILayoutBeginHorizontal()
		{
		}
	}
	[Token(Token = "0x200023E")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Begins a ScrollView. Use GUILayoutEndScrollView at the end of the block.")]
	public class GUILayoutBeginScrollView : GUILayoutAction
	{
		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Assign a Vector2 variable to store the scroll position of this view.")]
		public FsmVector2 scrollPosition;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Always show the horizontal scrollbars.")]
		public FsmBool horizontalScrollbar;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Always show the vertical scrollbars.")]
		public FsmBool verticalScrollbar;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Define custom styles below. NOTE: You have to define all the styles if you check this option.")]
		public FsmBool useCustomStyle;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Named style in the active GUISkin for the horizontal scrollbars.")]
		public FsmString horizontalStyle;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Named style in the active GUISkin for the vertical scrollbars.")]
		public FsmString verticalStyle;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Named style in the active GUISkin for the background.")]
		public FsmString backgroundStyle;

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xF1E990", Offset = "0xF1E990", VA = "0xF1E990", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xF1EA10", Offset = "0xF1EA10", VA = "0xF1EA10", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xF1EB90", Offset = "0xF1EB90", VA = "0xF1EB90")]
		public GUILayoutBeginScrollView()
		{
		}
	}
	[Token(Token = "0x200023F")]
	[Tooltip("Begins a vertical control group. The group must be closed with GUILayoutEndVertical action.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutBeginVertical : GUILayoutAction
	{
		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The text to display.")]
		public FsmString text;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xF1EB98", Offset = "0xF1EB98", VA = "0xF1EB98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xF1EC40", Offset = "0xF1EC40", VA = "0xF1EC40", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xF1ED5C", Offset = "0xF1ED5C", VA = "0xF1ED5C")]
		public GUILayoutBeginVertical()
		{
		}
	}
	[Token(Token = "0x2000240")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Box.")]
	public class GUILayoutBox : GUILayoutAction
	{
		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Image to display in the Box.")]
		public FsmTexture image;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Text to display in the Box.")]
		public FsmString text;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xF1ED64", Offset = "0xF1ED64", VA = "0xF1ED64", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xF1EE0C", Offset = "0xF1EE0C", VA = "0xF1EE0C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xF1EF7C", Offset = "0xF1EF7C", VA = "0xF1EF7C")]
		public GUILayoutBox()
		{
		}
	}
	[Token(Token = "0x2000241")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Button. Sends an Event when pressed. Optionally stores the button state in a Bool Variable.")]
	public class GUILayoutButton : GUILayoutAction
	{
		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Event to send when the button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the button state in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeButtonState;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Texture to use on the button.")]
		public FsmTexture image;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Text to display on the button.")]
		public FsmString text;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xF1EF84", Offset = "0xF1EF84", VA = "0xF1EF84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xF1F04C", Offset = "0xF1F04C", VA = "0xF1F04C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xF1F1E4", Offset = "0xF1F1E4", VA = "0xF1F1E4")]
		public GUILayoutButton()
		{
		}
	}
	[Token(Token = "0x2000242")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Password Field. Optionally send an event if the text has been edited.")]
	public class GUILayoutConfirmPasswordField : GUILayoutAction
	{
		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The password Text")]
		[UIHint(UIHint.Variable)]
		public FsmString text;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Maximum Length of the field")]
		public FsmInt maxLength;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Style of the Field")]
		public FsmString style;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when field content changed")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Replacement character to hide the password")]
		public FsmString mask;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("GUILayout Password Field. Optionally send an event if the text has been edited.")]
		public FsmBool confirm;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Confirmation content")]
		public FsmString password;

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xF1F1EC", Offset = "0xF1F1EC", VA = "0xF1F1EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xF1F2E4", Offset = "0xF1F2E4", VA = "0xF1F2E4", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xF1F470", Offset = "0xF1F470", VA = "0xF1F470")]
		public GUILayoutConfirmPasswordField()
		{
		}
	}
	[Token(Token = "0x2000243")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Password Field. Optionally send an event if the text has been edited.")]
	public class GUILayoutEmailField : GUILayoutAction
	{
		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The email Text")]
		public FsmString text;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Maximum Length of the field")]
		public FsmInt maxLength;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Style of the Field")]
		public FsmString style;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when field content changed")]
		public FsmEvent changedEvent;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Email valid format flag")]
		public FsmBool valid;

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xF1F478", Offset = "0xF1F478", VA = "0xF1F478", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xF1F528", Offset = "0xF1F528", VA = "0xF1F528", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xF1F688", Offset = "0xF1F688", VA = "0xF1F688")]
		public GUILayoutEmailField()
		{
		}
	}
	[Token(Token = "0x2000244")]
	[Tooltip("Close a GUILayout group started with {{GUILayoutBeginArea}}.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutEndArea : FsmStateAction
	{
		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xF1F690", Offset = "0xF1F690", VA = "0xF1F690", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xF1F694", Offset = "0xF1F694", VA = "0xF1F694", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xF1F69C", Offset = "0xF1F69C", VA = "0xF1F69C")]
		public GUILayoutEndArea()
		{
		}
	}
	[Token(Token = "0x2000245")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("End a centered GUILayout block started with {{GUILayoutBeginCentered}}.")]
	public class GUILayoutEndCentered : FsmStateAction
	{
		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xF1F6A4", Offset = "0xF1F6A4", VA = "0xF1F6A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xF1F6A8", Offset = "0xF1F6A8", VA = "0xF1F6A8", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xF1F6D8", Offset = "0xF1F6D8", VA = "0xF1F6D8")]
		public GUILayoutEndCentered()
		{
		}
	}
	[Token(Token = "0x2000246")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Close a group started with {{GUILayoutBeginHorizontal}}.")]
	public class GUILayoutEndHorizontal : FsmStateAction
	{
		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xF1F6E0", Offset = "0xF1F6E0", VA = "0xF1F6E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xF1F6E4", Offset = "0xF1F6E4", VA = "0xF1F6E4", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xF1F6EC", Offset = "0xF1F6EC", VA = "0xF1F6EC")]
		public GUILayoutEndHorizontal()
		{
		}
	}
	[Token(Token = "0x2000247")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Close a group started with {{GUILayoutBeginScrollView}}.")]
	public class GUILayoutEndScrollView : FsmStateAction
	{
		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xF1F6F4", Offset = "0xF1F6F4", VA = "0xF1F6F4", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xF1F6FC", Offset = "0xF1F6FC", VA = "0xF1F6FC")]
		public GUILayoutEndScrollView()
		{
		}
	}
	[Token(Token = "0x2000248")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Close a group started with {{GUILayoutBeginVertical}}.")]
	public class GUILayoutEndVertical : FsmStateAction
	{
		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xF1F704", Offset = "0xF1F704", VA = "0xF1F704", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xF1F708", Offset = "0xF1F708", VA = "0xF1F708", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xF1F710", Offset = "0xF1F710", VA = "0xF1F710")]
		public GUILayoutEndVertical()
		{
		}
	}
	[Token(Token = "0x2000249")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Inserts a flexible space element.")]
	public class GUILayoutFlexibleSpace : FsmStateAction
	{
		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xF1F718", Offset = "0xF1F718", VA = "0xF1F718", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xF1F71C", Offset = "0xF1F71C", VA = "0xF1F71C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xF1F724", Offset = "0xF1F724", VA = "0xF1F724")]
		public GUILayoutFlexibleSpace()
		{
		}
	}
	[Token(Token = "0x200024A")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Text Field to edit a Float Variable. Optionally send an event if the text has been edited.")]
	public class GUILayoutFloatField : GUILayoutAction
	{
		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Float Variable to show in the edit field.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional GUIStyle in the active GUISKin.")]
		public FsmString style;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional event to send when the value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xF1F72C", Offset = "0xF1F72C", VA = "0xF1F72C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xF1F7AC", Offset = "0xF1F7AC", VA = "0xF1F7AC", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xF1F95C", Offset = "0xF1F95C", VA = "0xF1F95C")]
		public GUILayoutFloatField()
		{
		}
	}
	[Token(Token = "0x200024B")]
	[Tooltip("GUILayout Label for a Float Variable.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutFloatLabel : GUILayoutAction
	{
		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Text to put before the float variable.")]
		public FsmString prefix;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Float variable to display.")]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional GUIStyle in the active GUISKin.")]
		public FsmString style;

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xF1F964", Offset = "0xF1F964", VA = "0xF1F964", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xF1F9F0", Offset = "0xF1F9F0", VA = "0xF1F9F0", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xF1FB54", Offset = "0xF1FB54", VA = "0xF1FB54")]
		public GUILayoutFloatLabel()
		{
		}
	}
	[Token(Token = "0x200024C")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("A Horizontal Slider linked to a Float Variable.")]
	public class GUILayoutHorizontalSlider : GUILayoutAction
	{
		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The float variable to link the slider to. Moving the slider changes the value, and changes in the value move the slider.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The value of the float variable when slider is all the way to the left.")]
		[RequiredField]
		public FsmFloat leftValue;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The value of the float variable when slider is all the way to the right.")]
		public FsmFloat rightValue;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("An optional fsm event to send when the value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xF1FB5C", Offset = "0xF1FB5C", VA = "0xF1FB5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xF1FBC8", Offset = "0xF1FBC8", VA = "0xF1FBC8", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xF1FD10", Offset = "0xF1FD10", VA = "0xF1FD10")]
		public GUILayoutHorizontalSlider()
		{
		}
	}
	[Token(Token = "0x200024D")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Text Field to edit an Int Variable. Optionally send an event if the text has been edited.")]
	public class GUILayoutIntField : GUILayoutAction
	{
		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Int Variable to show in the edit field.")]
		[UIHint(UIHint.Variable)]
		public FsmInt intVariable;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional GUIStyle in the active GUISKin.")]
		public FsmString style;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional event to send when the value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xF1FD18", Offset = "0xF1FD18", VA = "0xF1FD18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xF1FD98", Offset = "0xF1FD98", VA = "0xF1FD98", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xF1FF48", Offset = "0xF1FF48", VA = "0xF1FF48")]
		public GUILayoutIntField()
		{
		}
	}
	[Token(Token = "0x200024E")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Label for an Int Variable.")]
	public class GUILayoutIntLabel : GUILayoutAction
	{
		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Text to put before the int variable.")]
		public FsmString prefix;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Int variable to display.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmInt intVariable;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional GUIStyle in the active GUISKin.")]
		public FsmString style;

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xF1FF50", Offset = "0xF1FF50", VA = "0xF1FF50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xF1FFDC", Offset = "0xF1FFDC", VA = "0xF1FFDC", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xF20140", Offset = "0xF20140", VA = "0xF20140")]
		public GUILayoutIntLabel()
		{
		}
	}
	[Token(Token = "0x200024F")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Label.")]
	public class GUILayoutLabel : GUILayoutAction
	{
		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Text to display.")]
		public FsmString text;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xF20148", Offset = "0xF20148", VA = "0xF20148", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xF201F0", Offset = "0xF201F0", VA = "0xF201F0", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xF20360", Offset = "0xF20360", VA = "0xF20360")]
		public GUILayoutLabel()
		{
		}
	}
	[Token(Token = "0x2000250")]
	[Tooltip("GUILayout Password Field. Optionally send an event if the text has been edited.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutPasswordField : GUILayoutAction
	{
		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The password Text")]
		public FsmString text;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Maximum Length of the field")]
		public FsmInt maxLength;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Style of the Field")]
		public FsmString style;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when field content changed")]
		public FsmEvent changedEvent;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Replacement character to hide the password")]
		public FsmString mask;

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xF20368", Offset = "0xF20368", VA = "0xF20368", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xF20434", Offset = "0xF20434", VA = "0xF20434", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xF205C0", Offset = "0xF205C0", VA = "0xF205C0")]
		public GUILayoutPasswordField()
		{
		}
	}
	[Token(Token = "0x2000251")]
	[Tooltip("GUILayout Repeat Button. Sends an Event while pressed. Optionally store the button state in a Bool Variable.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutRepeatButton : GUILayoutAction
	{
		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The fsm event to send while the button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the button state in a Bool Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeButtonState;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The text to display.")]
		public FsmString text;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional tooltip. Accessed by {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xF205C8", Offset = "0xF205C8", VA = "0xF205C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xF20690", Offset = "0xF20690", VA = "0xF20690", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xF20828", Offset = "0xF20828", VA = "0xF20828")]
		public GUILayoutRepeatButton()
		{
		}
	}
	[Token(Token = "0x2000252")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Inserts a space in the current layout group.")]
	public class GUILayoutSpace : FsmStateAction
	{
		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Size of space in pixels.")]
		public FsmFloat space;

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xF20830", Offset = "0xF20830", VA = "0xF20830", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xF20858", Offset = "0xF20858", VA = "0xF20858", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xF2087C", Offset = "0xF2087C", VA = "0xF2087C")]
		public GUILayoutSpace()
		{
		}
	}
	[Token(Token = "0x2000253")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Text Field. Optionally send an event if the text has been edited.")]
	public class GUILayoutTextField : GUILayoutAction
	{
		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Link the text field to a String Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmString text;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The max number of characters that can be entered.")]
		public FsmInt maxLength;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("An optional Event to send when the text field value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xF20884", Offset = "0xF20884", VA = "0xF20884", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xF20920", Offset = "0xF20920", VA = "0xF20920", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xF20A9C", Offset = "0xF20A9C", VA = "0xF20A9C")]
		public GUILayoutTextField()
		{
		}
	}
	[Token(Token = "0x2000254")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Label for simple text.")]
	public class GUILayoutTextLabel : GUILayoutAction
	{
		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Text to display.")]
		public FsmString text;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional GUIStyle in the active GUISkin.")]
		public FsmString style;

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xF20AA4", Offset = "0xF20AA4", VA = "0xF20AA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xF20B20", Offset = "0xF20B20", VA = "0xF20B20", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xF20C4C", Offset = "0xF20C4C", VA = "0xF20C4C")]
		public GUILayoutTextLabel()
		{
		}
	}
	[Token(Token = "0x2000255")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Makes an on/off Toggle Button and stores the button state in a Bool Variable.")]
	public class GUILayoutToggle : GUILayoutAction
	{
		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Link the button state to this Bool Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmBool storeButtonState;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Text to display.")]
		public FsmString text;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional tooltip. Accessed by {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional Event to send when the toggle changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xF20C54", Offset = "0xF20C54", VA = "0xF20C54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xF20D38", Offset = "0xF20D38", VA = "0xF20D38", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xF20F20", Offset = "0xF20F20", VA = "0xF20F20")]
		public GUILayoutToggle()
		{
		}
	}
	[Token(Token = "0x2000256")]
	[Tooltip("GUILayout Toolbar. NOTE: Arrays must be the same length as NumButtons or empty.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutToolbar : GUILayoutAction
	{
		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The number of buttons in the toolbar")]
		public FsmInt numButtons;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the index of the selected button in an Integer Variable")]
		[UIHint(UIHint.Variable)]
		public FsmInt selectedButton;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when each button is pressed.")]
		public FsmEvent[] buttonEventsArray;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Image to use on each button.")]
		public FsmTexture[] imagesArray;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Text to use on each button.")]
		public FsmString[] textsArray;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Tooltip to use for each button.")]
		public FsmString[] tooltipsArray;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("A named GUIStyle to use for the toolbar buttons. Default is Button.")]
		public FsmString style;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Update the content of the buttons every frame. Useful if the buttons are using variables that change.")]
		public bool everyFrame;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GUIContent[] contents;

		[Token(Token = "0x170000B7")]
		public GUIContent[] Contents
		{
			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0xF20F28", Offset = "0xF20F28", VA = "0xF20F28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xF20F4C", Offset = "0xF20F4C", VA = "0xF20F4C")]
		private void SetButtonsContent()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xF211D4", Offset = "0xF211D4", VA = "0xF211D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xF21308", Offset = "0xF21308", VA = "0xF21308", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xF21364", Offset = "0xF21364", VA = "0xF21364", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xF2153C", Offset = "0xF2153C", VA = "0xF2153C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xF21688", Offset = "0xF21688", VA = "0xF21688")]
		public GUILayoutToolbar()
		{
		}
	}
	[Token(Token = "0x2000257")]
	[Tooltip("A Vertical Slider linked to a Float Variable.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutVerticalSlider : GUILayoutAction
	{
		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Float Variable linked to the slider value.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The value of the variable at the top of the slider.")]
		[RequiredField]
		public FsmFloat topValue;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The value of the variable at the bottom of the slider.")]
		[RequiredField]
		public FsmFloat bottomValue;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional Event to send when the slider value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xF21690", Offset = "0xF21690", VA = "0xF21690", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xF216FC", Offset = "0xF216FC", VA = "0xF216FC", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xF21844", Offset = "0xF21844", VA = "0xF21844")]
		public GUILayoutVerticalSlider()
		{
		}
	}
	[Token(Token = "0x2000258")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Turn GUILayout on/off. If you don't use GUILayout actions you can get some performance back by turning GUILayout off. This can make a difference on iOS platforms.")]
	public class UseGUILayout : FsmStateAction
	{
		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Enable/disable GUILayout.")]
		[RequiredField]
		public bool turnOffGUIlayout;

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xF2184C", Offset = "0xF2184C", VA = "0xF2184C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xF21858", Offset = "0xF21858", VA = "0xF21858", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xF21898", Offset = "0xF21898", VA = "0xF21898")]
		public UseGUILayout()
		{
		}
	}
	[Token(Token = "0x2000259")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when the user hits any Key or Mouse Button.")]
	public class AnyKey : FsmStateAction
	{
		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the event")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send when any Key or Mouse Button is pressed.")]
		[RequiredField]
		public FsmEvent sendEvent;

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xF218A0", Offset = "0xF218A0", VA = "0xF218A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xF218C8", Offset = "0xF218C8", VA = "0xF218C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xF21900", Offset = "0xF21900", VA = "0xF21900")]
		public AnyKey()
		{
		}
	}
	[Token(Token = "0x200025A")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets the value of the specified Input Axis and stores it in a Float Variable. See {{Unity Input Manager}} docs.")]
	[SeeAlso("Unity Input Manager")]
	public class GetAxis : FsmStateAction
	{
		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the axis. Set in the Unity Input Manager.")]
		[RequiredField]
		public FsmString axisName;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Normally axis values are in the range -1 to 1. Use the multiplier to make this range bigger. E.g., A multiplier of 100 returns values from -100 to 100.")]
		public FsmFloat multiplier;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Invert the value of for the axis. E.g., -1 becomes 1, and 1 becomes -1.")]
		public FsmBool invert;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a float variable.")]
		public FsmFloat store;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Get the axis value every frame. This should be true most of the time, but there might be times when you only want to get the value once.")]
		public bool everyFrame;

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xF21908", Offset = "0xF21908", VA = "0xF21908", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xF219A8", Offset = "0xF219A8", VA = "0xF219A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xF21A6C", Offset = "0xF21A6C", VA = "0xF21A6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xF219D4", Offset = "0xF219D4", VA = "0xF219D4")]
		private void DoGetAxis()
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xF21A70", Offset = "0xF21A70", VA = "0xF21A70")]
		public GetAxis()
		{
		}
	}
	[Token(Token = "0x200025B")]
	[NoActionTargets]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets a world direction Vector from 2 Input Axis. Typically used for a third person controller with Relative To set to the camera.")]
	[SeeAlso("Unity Input Manager")]
	public class GetAxisVector : FsmStateAction
	{
		[Token(Token = "0x200025C")]
		public enum AxisPlane
		{
			[Token(Token = "0x40009E9")]
			XZ,
			[Token(Token = "0x40009EA")]
			XY,
			[Token(Token = "0x40009EB")]
			YZ
		}

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the horizontal input axis. See Unity Input Manager.")]
		public FsmString horizontalAxis;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the vertical input axis. See Unity Input Manager.")]
		public FsmString verticalAxis;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Normally axis values are in the range -1 to 1. Use the multiplier to make this range bigger. \nE.g., A multiplier of 100 returns values from -100 to 100.\nTypically this represents the maximum movement speed.")]
		public FsmFloat multiplier;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Sets the world axis the input maps to. The remaining axis will be set to zero.")]
		[RequiredField]
		public AxisPlane mapToPlane;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Calculate a vector relative to this game object. Typically the camera.")]
		public FsmGameObject relativeTo;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the resulting vector. You can use this in {{Translate}} or other movement actions.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 storeVector;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the magnitude of the vector. Useful if you want to measure the strength of the input and react accordingly. Hint: Use {{Float Compare}}.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeMagnitude;

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xF21A78", Offset = "0xF21A78", VA = "0xF21A78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xF21B48", Offset = "0xF21B48", VA = "0xF21B48", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xF220E8", Offset = "0xF220E8", VA = "0xF220E8")]
		public GetAxisVector()
		{
		}
	}
	[Token(Token = "0x200025D")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets the pressed state of the specified Button and stores it in a Bool Variable. See Unity Input Manager docs.")]
	public class GetButton : FsmStateAction
	{
		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The name of the button. Set in the Unity Input Manager.")]
		public FsmString buttonName;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the button state in a Bool Variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xF220F0", Offset = "0xF220F0", VA = "0xF220F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xF22164", Offset = "0xF22164", VA = "0xF22164", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xF221CC", Offset = "0xF221CC", VA = "0xF221CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xF22190", Offset = "0xF22190", VA = "0xF22190")]
		private void DoGetButton()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xF221D0", Offset = "0xF221D0", VA = "0xF221D0")]
		public GetButton()
		{
		}
	}
	[Token(Token = "0x200025E")]
	[Tooltip("Sends an Event when a Button is pressed.")]
	[ActionCategory(ActionCategory.Input)]
	public class GetButtonDown : FsmStateAction
	{
		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the button. Defined in the Unity Input Manager.")]
		[RequiredField]
		public FsmString buttonName;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set to True if the button is pressed, otherwise False.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xF221D8", Offset = "0xF221D8", VA = "0xF221D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xF22250", Offset = "0xF22250", VA = "0xF22250", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xF222A8", Offset = "0xF222A8", VA = "0xF222A8")]
		public GetButtonDown()
		{
		}
	}
	[Token(Token = "0x200025F")]
	[Tooltip("Sends an Event when a Button is released.")]
	[ActionCategory(ActionCategory.Input)]
	public class GetButtonUp : FsmStateAction
	{
		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the button. Defined in the Unity Input Manager.")]
		[RequiredField]
		public FsmString buttonName;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the button is released.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to True if the button is released, otherwise False.")]
		public FsmBool storeResult;

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xF222B0", Offset = "0xF222B0", VA = "0xF222B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xF22328", Offset = "0xF22328", VA = "0xF22328", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xF22388", Offset = "0xF22388", VA = "0xF22388")]
		public GetButtonUp()
		{
		}
	}
	[Token(Token = "0x2000260")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets the pressed state of a Key.")]
	public class GetKey : FsmStateAction
	{
		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[RequiredField]
		[Tooltip("The key to detect.")]
		public KeyCode key;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store if the key is down (True) or up (False).")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmBool storeResult;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a key press/release.")]
		public bool everyFrame;

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xF22390", Offset = "0xF22390", VA = "0xF22390", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xF223B8", Offset = "0xF223B8", VA = "0xF223B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xF22410", Offset = "0xF22410", VA = "0xF22410", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xF223E4", Offset = "0xF223E4", VA = "0xF223E4")]
		private void DoGetKey()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xF22414", Offset = "0xF22414", VA = "0xF22414")]
		public GetKey()
		{
		}
	}
	[Token(Token = "0x2000261")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when a Key is pressed.")]
	public class GetKeyDown : FsmStateAction
	{
		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The key to detect.")]
		[RequiredField]
		public KeyCode key;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Event to send when the key is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool Variable. True if pressed, otherwise False.")]
		public FsmBool storeResult;

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xF2241C", Offset = "0xF2241C", VA = "0xF2241C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xF22448", Offset = "0xF22448", VA = "0xF22448", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xF22494", Offset = "0xF22494", VA = "0xF22494")]
		public GetKeyDown()
		{
		}
	}
	[Token(Token = "0x2000262")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when a Key is released.")]
	public class GetKeyUp : FsmStateAction
	{
		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The key to detect.")]
		[RequiredField]
		public KeyCode key;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Event to send when the key is released.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the result in a Bool Variable. True if released, otherwise False.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xF2249C", Offset = "0xF2249C", VA = "0xF2249C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xF224C8", Offset = "0xF224C8", VA = "0xF224C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xF22514", Offset = "0xF22514", VA = "0xF22514")]
		public GetKeyUp()
		{
		}
	}
	[Token(Token = "0x2000263")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets the pressed state of the specified Mouse Button and stores it in a Bool Variable. See Unity Input Manager doc.")]
	public class GetMouseButton : FsmStateAction
	{
		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[RequiredField]
		[Tooltip("The mouse button to test.")]
		public MouseButton button;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the pressed state in a Bool Variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xF2251C", Offset = "0xF2251C", VA = "0xF2251C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xF22548", Offset = "0xF22548", VA = "0xF22548", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xF225A0", Offset = "0xF225A0", VA = "0xF225A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xF22574", Offset = "0xF22574", VA = "0xF22574")]
		private void DoGetMouseButton()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xF225A4", Offset = "0xF225A4", VA = "0xF225A4")]
		public GetMouseButton()
		{
		}
	}
	[Token(Token = "0x2000264")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when the specified Mouse Button is pressed. Optionally store the button state in a bool variable.")]
	public class GetMouseButtonDown : FsmStateAction
	{
		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[RequiredField]
		[Tooltip("The mouse button to test.")]
		public MouseButton button;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Event to send if the mouse button is down.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the button state in a Bool Variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Uncheck to run when entering the state.")]
		public bool inUpdateOnly;

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xF225AC", Offset = "0xF225AC", VA = "0xF225AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xF225E4", Offset = "0xF225E4", VA = "0xF225E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xF22640", Offset = "0xF22640", VA = "0xF22640", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xF225F4", Offset = "0xF225F4", VA = "0xF225F4")]
		private void DoGetMouseButtonDown()
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xF22644", Offset = "0xF22644", VA = "0xF22644")]
		public GetMouseButtonDown()
		{
		}
	}
	[Token(Token = "0x2000265")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when the specified Mouse Button is released. Optionally store the button state in a bool variable.")]
	public class GetMouseButtonUp : FsmStateAction
	{
		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The mouse button to test.")]
		[RequiredField]
		public MouseButton button;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Event to send if the mouse button is down.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the pressed state in a Bool Variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Uncheck to run when entering the state.")]
		public bool inUpdateOnly;

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xF2264C", Offset = "0xF2264C", VA = "0xF2264C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xF22684", Offset = "0xF22684", VA = "0xF22684", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xF226E0", Offset = "0xF226E0", VA = "0xF226E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xF22694", Offset = "0xF22694", VA = "0xF22694")]
		public void DoGetMouseButtonUp()
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xF226E4", Offset = "0xF226E4", VA = "0xF226E4")]
		public GetMouseButtonUp()
		{
		}
	}
	[Token(Token = "0x2000266")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets the X Position of the mouse and stores it in a Float Variable.")]
	public class GetMouseX : FsmStateAction
	{
		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store in a float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Normalized coordinates are in the range 0 to 1 (0 = left, 1 = right). Otherwise the coordinate is in pixels. Normalized coordinates are useful for resolution independent functions.")]
		public bool normalize;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xF226EC", Offset = "0xF226EC", VA = "0xF226EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xF22714", Offset = "0xF22714", VA = "0xF22714", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xF22794", Offset = "0xF22794", VA = "0xF22794", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xF22740", Offset = "0xF22740", VA = "0xF22740")]
		private void DoGetMouseX()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xF22798", Offset = "0xF22798", VA = "0xF22798")]
		public GetMouseX()
		{
		}
	}
	[Token(Token = "0x2000267")]
	[Tooltip("Gets the Y Position of the mouse and stores it in a Float Variable.")]
	[ActionCategory(ActionCategory.Input)]
	public class GetMouseY : FsmStateAction
	{
		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store in a float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Normalized coordinates are in the range 0 to 1 (0 = left, 1 = right). Otherwise the coordinate is in pixels. Normalized coordinates are useful for resolution independent functions.")]
		public bool normalize;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xF227A0", Offset = "0xF227A0", VA = "0xF227A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xF227C8", Offset = "0xF227C8", VA = "0xF227C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xF22848", Offset = "0xF22848", VA = "0xF22848", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xF227F4", Offset = "0xF227F4", VA = "0xF227F4")]
		private void DoGetMouseY()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xF2284C", Offset = "0xF2284C", VA = "0xF2284C")]
		public GetMouseY()
		{
		}
	}
	[Token(Token = "0x2000268")]
	[Tooltip("Rotates a GameObject based on mouse movement. Minimum and Maximum values can be used to constrain the rotation.")]
	[ActionCategory(ActionCategory.Input)]
	public class MouseLook : ComponentAction<Transform>
	{
		[Token(Token = "0x2000269")]
		public enum RotationAxes
		{
			[Token(Token = "0x4000A1B")]
			MouseXAndY,
			[Token(Token = "0x4000A1C")]
			MouseX,
			[Token(Token = "0x4000A1D")]
			MouseY
		}

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The axes to rotate around.")]
		public RotationAxes axes;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Sensitivity of movement in X direction.")]
		[RequiredField]
		public FsmFloat sensitivityX;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("Sensitivity of movement in Y direction.")]
		public FsmFloat sensitivityY;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around X axis. Set to None for no clamping.")]
		public FsmFloat minimumX;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around X axis. Set to None for no clamping.")]
		public FsmFloat maximumX;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around Y axis. Set to None for no clamping.")]
		public FsmFloat minimumY;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around Y axis. Set to None for no clamping.")]
		public FsmFloat maximumY;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float rotationX;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float rotationY;

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xF22854", Offset = "0xF22854", VA = "0xF22854", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xF22998", Offset = "0xF22998", VA = "0xF22998", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xF22C6C", Offset = "0xF22C6C", VA = "0xF22C6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xF22B20", Offset = "0xF22B20", VA = "0xF22B20")]
		private void DoMouseLook()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xF22D14", Offset = "0xF22D14", VA = "0xF22D14")]
		private float GetXRotation()
		{
			return default(float);
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xF22C70", Offset = "0xF22C70", VA = "0xF22C70")]
		private float GetYRotation(float invert = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xF22DA8", Offset = "0xF22DA8", VA = "0xF22DA8")]
		private static float ClampAngle(float angle, FsmFloat min, FsmFloat max)
		{
			return default(float);
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xF22E68", Offset = "0xF22E68", VA = "0xF22E68")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x200026A")]
	[Tooltip("NOTE: This is a duplicate action and will be removed in a future update. Please use Mouse Look instead.\nRotates a GameObject based on mouse movement. Minimum and Maximum values can be used to constrain the rotation.")]
	[Obsolete("Use MouseLook instead.")]
	[ActionCategory(ActionCategory.Input)]
	public class MouseLook2 : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x200026B")]
		public enum RotationAxes
		{
			[Token(Token = "0x4000A2A")]
			MouseXAndY,
			[Token(Token = "0x4000A2B")]
			MouseX,
			[Token(Token = "0x4000A2C")]
			MouseY
		}

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The axes to rotate around.")]
		public RotationAxes axes;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Speed around X axis. Higher = faster.")]
		public FsmFloat sensitivityX;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("Speed around Y axis. Higher = faster.")]
		public FsmFloat sensitivityY;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Minimum angle around X axis.")]
		public FsmFloat minimumX;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Maximum angle around X axis.")]
		public FsmFloat maximumX;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HasFloatSlider(-360f, 360f)]
		[RequiredField]
		[Tooltip("Minimum angle around Y axis.")]
		public FsmFloat minimumY;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[RequiredField]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Maximum angle around X axis.")]
		public FsmFloat maximumY;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float rotationX;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float rotationY;

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xF22EB0", Offset = "0xF22EB0", VA = "0xF22EB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xF22F9C", Offset = "0xF22F9C", VA = "0xF22F9C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xF23224", Offset = "0xF23224", VA = "0xF23224", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xF230DC", Offset = "0xF230DC", VA = "0xF230DC")]
		private void DoMouseLook()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xF232B0", Offset = "0xF232B0", VA = "0xF232B0")]
		private float GetXRotation()
		{
			return default(float);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xF23228", Offset = "0xF23228", VA = "0xF23228")]
		private float GetYRotation()
		{
			return default(float);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xF23338", Offset = "0xF23338", VA = "0xF23338")]
		private static float ClampAngle(float angle, FsmFloat min, FsmFloat max)
		{
			return default(float);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xF233DC", Offset = "0xF233DC", VA = "0xF233DC")]
		public MouseLook2()
		{
		}
	}
	[Token(Token = "0x200026C")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Perform a Mouse Pick on the scene from the Main Camera and stores the results. Use Ray Distance to set how close the camera must be to pick the object.")]
	public class MousePick : FsmStateAction
	{
		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Set the length of the ray to cast from the Main Camera.")]
		public FsmFloat rayDistance;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set Bool variable true if an object was picked, false if not.")]
		public FsmBool storeDidPickObject;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the picked GameObject.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the point of contact.")]
		public FsmVector3 storePoint;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the normal at the point of contact.\nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		public FsmVector3 storeNormal;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the distance to the point of contact.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeDistance;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xF23424", Offset = "0xF23424", VA = "0xF23424", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xF23510", Offset = "0xF23510", VA = "0xF23510", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xF23748", Offset = "0xF23748", VA = "0xF23748", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xF2353C", Offset = "0xF2353C", VA = "0xF2353C")]
		private void DoMousePick()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xF2374C", Offset = "0xF2374C", VA = "0xF2374C")]
		public MousePick()
		{
		}
	}
	[Token(Token = "0x200026D")]
	[ActionCategory(ActionCategory.Input)]
	[ActionTarget(typeof(GameObject), "GameObject", false)]
	[Tooltip("Sends Events based on mouse interactions with a Game Object: MouseOver, MouseDown, MouseUp, MouseOff. Use Ray Distance to set how close the camera must be to pick the object.\nNOTE: Picking uses the Main Camera, so you must have a Camera in the scene tagged as Main Camera.")]
	public class MousePickEvent : FsmStateAction
	{
		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Collider))]
		[Tooltip("The game object to test for mouse picking.")]
		public FsmOwnerDefault GameObject;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Length of the ray to cast from the camera.")]
		public FsmFloat rayDistance;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the mouse is over the GameObject.")]
		public FsmEvent mouseOver;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the mouse is pressed while over the GameObject.")]
		public FsmEvent mouseDown;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when the mouse is released while over the GameObject.")]
		public FsmEvent mouseUp;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send when the mouse moves off the GameObject.")]
		public FsmEvent mouseOff;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xF23784", Offset = "0xF23784", VA = "0xF23784", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xF23874", Offset = "0xF23874", VA = "0xF23874", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xF239BC", Offset = "0xF239BC", VA = "0xF239BC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xF238A0", Offset = "0xF238A0", VA = "0xF238A0")]
		private void DoMousePickEvent()
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xF239C0", Offset = "0xF239C0", VA = "0xF239C0")]
		private bool DoRaycast()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xF23A58", Offset = "0xF23A58", VA = "0xF23A58", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xF23AF8", Offset = "0xF23AF8", VA = "0xF23AF8")]
		public MousePickEvent()
		{
		}
	}
	[Token(Token = "0x200026E")]
	[Tooltip("Resets all Input. After ResetInputAxes all axes return to 0 and all buttons return to 0 for one frame")]
	[ActionCategory(ActionCategory.Input)]
	public class ResetInputAxes : FsmStateAction
	{
		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xF23B30", Offset = "0xF23B30", VA = "0xF23B30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xF23B34", Offset = "0xF23B34", VA = "0xF23B34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xF23B54", Offset = "0xF23B54", VA = "0xF23B54")]
		public ResetInputAxes()
		{
		}
	}
	[Token(Token = "0x200026F")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Perform a raycast into the scene using screen coordinates and stores the results. Use Ray Distance to set how close the camera must be to pick the object. NOTE: Uses the MainCamera!")]
	public class ScreenPick : FsmStateAction
	{
		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A Vector3 screen position. Commonly stored by other actions.")]
		public FsmVector3 screenVector;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("X position on screen.")]
		public FsmFloat screenX;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Y position on screen.")]
		public FsmFloat screenY;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Are the supplied screen coordinates normalized (0-1), or in pixels.")]
		public FsmBool normalized;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray to use.")]
		[RequiredField]
		public FsmFloat rayDistance;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store whether the ray hit an object in a Bool Variable.")]
		public FsmBool storeDidPickObject;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the hit Game Object in a Game Object Variable.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the world position of the hit point in a Vector3 Variable.")]
		public FsmVector3 storePoint;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the normal of the hit point in a Vector3 Variable.\nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		public FsmVector3 storeNormal;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance to the hit point.")]
		public FsmFloat storeDistance;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Pick only from these layers. Set a number then select layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xF23B5C", Offset = "0xF23B5C", VA = "0xF23B5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xF23D24", Offset = "0xF23D24", VA = "0xF23D24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xF24104", Offset = "0xF24104", VA = "0xF24104", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xF23D50", Offset = "0xF23D50", VA = "0xF23D50")]
		private void DoScreenPick()
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xF24108", Offset = "0xF24108", VA = "0xF24108")]
		public ScreenPick()
		{
		}
	}
	[Token(Token = "0x2000270")]
	[NoActionTargets]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Transforms 2d input into a 3d world space vector. E.g., can be used to transform input from a touch joystick to a movement vector.")]
	public class TransformInputToWorldSpace : FsmStateAction
	{
		[Token(Token = "0x2000271")]
		public enum AxisPlane
		{
			[Token(Token = "0x4000A54")]
			XZ,
			[Token(Token = "0x4000A55")]
			XY,
			[Token(Token = "0x4000A56")]
			YZ
		}

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The horizontal input.")]
		public FsmFloat horizontalInput;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vertical input.")]
		public FsmFloat verticalInput;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Input axis are reported in the range -1 to 1, this multiplier lets you set a new range.")]
		public FsmFloat multiplier;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The world plane to map the 2d input onto.")]
		public AxisPlane mapToPlane;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Make the result relative to a GameObject, typically the main camera.")]
		public FsmGameObject relativeTo;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the direction vector.")]
		public FsmVector3 storeVector;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the length of the direction vector.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeMagnitude;

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xF24140", Offset = "0xF24140", VA = "0xF24140", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xF241A8", Offset = "0xF241A8", VA = "0xF241A8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xF246F8", Offset = "0xF246F8", VA = "0xF246F8")]
		public TransformInputToWorldSpace()
		{
		}
	}
	[Token(Token = "0x2000272")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Waits until any key is pressed then action finishes. Similar to AnyKey action but can be used in Action Sequences.")]
	public class WaitAnyKey : FsmStateAction
	{
		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the optional event")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional event to send when any Key or Mouse Button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xF24700", Offset = "0xF24700", VA = "0xF24700", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xF24728", Offset = "0xF24728", VA = "0xF24728", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xF2476C", Offset = "0xF2476C", VA = "0xF2476C")]
		public WaitAnyKey()
		{
		}
	}
	[Token(Token = "0x2000273")]
	[Tooltip("Makes the Game Object not be destroyed automatically when loading a new scene.\nSee unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Object.DontDestroyOnLoad.html\">DontDestroyOnLoad</a>.")]
	[ActionCategory(ActionCategory.Level)]
	public class DontDestroyOnLoad : FsmStateAction
	{
		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("GameObject to mark as DontDestroyOnLoad.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xF24774", Offset = "0xF24774", VA = "0xF24774", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xF24780", Offset = "0xF24780", VA = "0xF24780", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xF24858", Offset = "0xF24858", VA = "0xF24858")]
		public DontDestroyOnLoad()
		{
		}
	}
	[Token(Token = "0x2000274")]
	[Tooltip("Loads a Level by Name. NOTE: Before you can load a level, you have to add it to the list of levels defined in File->Build Settings...")]
	[ActionCategory(ActionCategory.Level)]
	public class LoadLevel : FsmStateAction
	{
		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The name of the level to load. NOTE: Must be in the list of levels defined in File->Build Settings... ")]
		public FsmString levelName;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Load the level additively, keeping the current scene.")]
		public bool additive;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Load the level asynchronously in the background.")]
		public bool async;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the level has loaded. NOTE: This only makes sense if the FSM is still in the scene!")]
		public FsmEvent loadedEvent;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Keep this GameObject in the new level. NOTE: The GameObject and components is disabled then enabled on load; uncheck Reset On Disable to keep the active state.")]
		public FsmBool dontDestroyOnLoad;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the level cannot be loaded.")]
		public FsmEvent failedEvent;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AsyncOperation asyncOperation;

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xF24860", Offset = "0xF24860", VA = "0xF24860", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xF248E8", Offset = "0xF248E8", VA = "0xF248E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xF24BB0", Offset = "0xF24BB0", VA = "0xF24BB0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xF24BFC", Offset = "0xF24BFC", VA = "0xF24BFC")]
		public LoadLevel()
		{
		}
	}
	[Token(Token = "0x2000275")]
	[Tooltip("Loads a Level by Index number. Before you can load a level, you have to add it to the list of levels defined in File->Build Settings...")]
	[ActionCategory(ActionCategory.Level)]
	public class LoadLevelNum : FsmStateAction
	{
		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The level index in File->Build Settings")]
		public FsmInt levelIndex;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Load the level additively, keeping the current scene.")]
		public bool additive;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send after the level is loaded.")]
		public FsmEvent loadedEvent;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Keep this GameObject in the new level. NOTE: The GameObject and components is disabled then enabled on load; uncheck Reset On Disable to keep the active state.")]
		public FsmBool dontDestroyOnLoad;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the level cannot be loaded.")]
		public FsmEvent failedEvent;

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xF24C04", Offset = "0xF24C04", VA = "0xF24C04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xF24C4C", Offset = "0xF24C4C", VA = "0xF24C4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xF24D8C", Offset = "0xF24D8C", VA = "0xF24D8C")]
		public LoadLevelNum()
		{
		}
	}
	[Token(Token = "0x2000276")]
	[ActionCategory(ActionCategory.Level)]
	[Note("Reloads the current scene.")]
	[Tooltip("Reloads the current scene.")]
	public class RestartLevel : FsmStateAction
	{
		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xF24D94", Offset = "0xF24D94", VA = "0xF24D94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xF24E20", Offset = "0xF24E20", VA = "0xF24E20")]
		public RestartLevel()
		{
		}
	}
	[Token(Token = "0x2000277")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the Color of a Light.")]
	public class SetLightColor : ComponentAction<Light>
	{
		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Light))]
		[Tooltip("The Game Object with the Light Component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The color of the light.")]
		public FsmColor lightColor;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the color is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xF24E28", Offset = "0xF24E28", VA = "0xF24E28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xF24E70", Offset = "0xF24E70", VA = "0xF24E70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xF24F4C", Offset = "0xF24F4C", VA = "0xF24F4C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xF24E9C", Offset = "0xF24E9C", VA = "0xF24E9C")]
		private void DoSetLightColor()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xF24F50", Offset = "0xF24F50", VA = "0xF24F50")]
		public SetLightColor()
		{
		}
	}
	[Token(Token = "0x2000278")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the Texture projected by a Light.")]
	public class SetLightCookie : ComponentAction<Light>
	{
		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Light))]
		[Tooltip("The Game Object with the Light Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The texture to project.")]
		public FsmTexture lightCookie;

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xF24F98", Offset = "0xF24F98", VA = "0xF24F98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xF24FC0", Offset = "0xF24FC0", VA = "0xF24FC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xF24FDC", Offset = "0xF24FDC", VA = "0xF24FDC")]
		private void DoSetLightCookie()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xF2509C", Offset = "0xF2509C", VA = "0xF2509C")]
		public SetLightCookie()
		{
		}
	}
	[Token(Token = "0x2000279")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the Flare effect used by a Light.")]
	public class SetLightFlare : ComponentAction<Light>
	{
		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Light))]
		[Tooltip("The Game Object with the Light Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The flare to use.")]
		public Flare lightFlare;

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xF250E4", Offset = "0xF250E4", VA = "0xF250E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xF2510C", Offset = "0xF2510C", VA = "0xF2510C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xF25128", Offset = "0xF25128", VA = "0xF25128")]
		private void DoSetLightRange()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xF251CC", Offset = "0xF251CC", VA = "0xF251CC")]
		public SetLightFlare()
		{
		}
	}
	[Token(Token = "0x200027A")]
	[Tooltip("Sets the Intensity of a Light.")]
	[ActionCategory(ActionCategory.Lights)]
	public class SetLightIntensity : ComponentAction<Light>
	{
		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Light))]
		[RequiredField]
		[Tooltip("The Game Object with the Light Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The intensity of the light.")]
		public FsmFloat lightIntensity;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the intensity is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xF25214", Offset = "0xF25214", VA = "0xF25214", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xF25250", Offset = "0xF25250", VA = "0xF25250", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xF25338", Offset = "0xF25338", VA = "0xF25338", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xF2527C", Offset = "0xF2527C", VA = "0xF2527C")]
		private void DoSetLightIntensity()
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xF2533C", Offset = "0xF2533C", VA = "0xF2533C")]
		public SetLightIntensity()
		{
		}
	}
	[Token(Token = "0x200027B")]
	[Tooltip("Sets the Range of a Light.")]
	[ActionCategory(ActionCategory.Lights)]
	public class SetLightRange : ComponentAction<Light>
	{
		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object with the Light Component.")]
		[CheckForComponent(typeof(Light))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The range of the light.")]
		public FsmFloat lightRange;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the range is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xF25384", Offset = "0xF25384", VA = "0xF25384", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xF253C0", Offset = "0xF253C0", VA = "0xF253C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xF254A8", Offset = "0xF254A8", VA = "0xF254A8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xF253EC", Offset = "0xF253EC", VA = "0xF253EC")]
		private void DoSetLightRange()
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xF254AC", Offset = "0xF254AC", VA = "0xF254AC")]
		public SetLightRange()
		{
		}
	}
	[Token(Token = "0x200027C")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the Spot Angle of a Light.")]
	public class SetLightSpotAngle : ComponentAction<Light>
	{
		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Light))]
		[Tooltip("The Game Object with the Light Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The angle of the spot light beam.")]
		public FsmFloat lightSpotAngle;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the spot angle is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xF254F4", Offset = "0xF254F4", VA = "0xF254F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xF25530", Offset = "0xF25530", VA = "0xF25530", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xF25618", Offset = "0xF25618", VA = "0xF25618", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xF2555C", Offset = "0xF2555C", VA = "0xF2555C")]
		private void DoSetLightRange()
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xF2561C", Offset = "0xF2561C", VA = "0xF2561C")]
		public SetLightSpotAngle()
		{
		}
	}
	[Token(Token = "0x200027D")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Set Spot, Directional, or Point Light type.")]
	public class SetLightType : ComponentAction<Light>
	{
		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Light))]
		[Tooltip("The Game Object with the Light Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(LightType))]
		[Tooltip("Spot, directional, or point light.")]
		public FsmEnum lightType;

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xF25664", Offset = "0xF25664", VA = "0xF25664", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xF256E8", Offset = "0xF256E8", VA = "0xF256E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xF25704", Offset = "0xF25704", VA = "0xF25704")]
		private void DoSetLightType()
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xF257FC", Offset = "0xF257FC", VA = "0xF257FC")]
		public SetLightType()
		{
		}
	}
	[Token(Token = "0x200027E")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the strength of the shadows cast by a Light.")]
	public class SetShadowStrength : ComponentAction<Light>
	{
		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object with the Light Component.")]
		[CheckForComponent(typeof(Light))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The strength of the shadows. 1 = opaque, 0 = transparent.")]
		public FsmFloat shadowStrength;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the shadow strength is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xF25844", Offset = "0xF25844", VA = "0xF25844", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xF25884", Offset = "0xF25884", VA = "0xF25884", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xF2596C", Offset = "0xF2596C", VA = "0xF2596C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xF258B0", Offset = "0xF258B0", VA = "0xF258B0")]
		private void DoSetShadowStrength()
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xF25970", Offset = "0xF25970", VA = "0xF25970")]
		public SetShadowStrength()
		{
		}
	}
	[Token(Token = "0x200027F")]
	[Tooltip("Tests if all the given Bool Variables are True.")]
	[ActionCategory(ActionCategory.Logic)]
	public class BoolAllTrue : FsmStateAction
	{
		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Readonly]
		[Tooltip("The Bool variables to check.")]
		public FsmBool[] boolVariables;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if all the Bool variables are True.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active. Useful if you're waiting for all to be true.")]
		public bool everyFrame;

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xF259B8", Offset = "0xF259B8", VA = "0xF259B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xF259F8", Offset = "0xF259F8", VA = "0xF259F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xF25AC4", Offset = "0xF25AC4", VA = "0xF25AC4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xF25A24", Offset = "0xF25A24", VA = "0xF25A24")]
		private void DoAllTrue()
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xF25AC8", Offset = "0xF25AC8", VA = "0xF25AC8")]
		public BoolAllTrue()
		{
		}
	}
	[Token(Token = "0x2000280")]
	[Tooltip("Tests if any of the given Bool Variables are True.")]
	[ActionCategory(ActionCategory.Logic)]
	public class BoolAnyTrue : FsmStateAction
	{
		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Bool variables to check.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmBool[] boolVariables;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if any of the Bool variables are True.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active. Useful if you're waiting for any to be true.")]
		public bool everyFrame;

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xF25AD0", Offset = "0xF25AD0", VA = "0xF25AD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xF25B10", Offset = "0xF25B10", VA = "0xF25B10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xF25BE4", Offset = "0xF25BE4", VA = "0xF25BE4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xF25B3C", Offset = "0xF25B3C", VA = "0xF25B3C")]
		private void DoAnyTrue()
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xF25BE8", Offset = "0xF25BE8", VA = "0xF25BE8")]
		public BoolAnyTrue()
		{
		}
	}
	[Token(Token = "0x2000281")]
	[Tooltip("Tests if the value of a Bool Variable has changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	[ActionCategory(ActionCategory.Logic)]
	public class BoolChanged : FsmStateAction
	{
		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Bool variable to watch for changes.")]
		public FsmBool boolVariable;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the variable changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to True if changed.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool previousValue;

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xF25BF0", Offset = "0xF25BF0", VA = "0xF25BF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xF25C28", Offset = "0xF25C28", VA = "0xF25C28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xF25C78", Offset = "0xF25C78", VA = "0xF25C78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xF25CE0", Offset = "0xF25CE0", VA = "0xF25CE0")]
		public BoolChanged()
		{
		}
	}
	[Token(Token = "0x2000282")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if all the Bool Variables are False.\nSend an event or store the result.")]
	public class BoolNoneTrue : FsmStateAction
	{
		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Bool variables to check.")]
		public FsmBool[] boolVariables;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if none of the Bool variables are True.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in a Bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xF25CE8", Offset = "0xF25CE8", VA = "0xF25CE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xF25D28", Offset = "0xF25D28", VA = "0xF25D28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xF25DF4", Offset = "0xF25DF4", VA = "0xF25DF4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0xF25D54", Offset = "0xF25D54", VA = "0xF25D54")]
		private void DoNoneTrue()
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xF25DF8", Offset = "0xF25DF8", VA = "0xF25DF8")]
		public BoolNoneTrue()
		{
		}
	}
	[Token(Token = "0x2000283")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Performs boolean operations on 2 Bool Variables.")]
	public class BoolOperator : FsmStateAction
	{
		[Token(Token = "0x2000284")]
		public enum Operation
		{
			[Token(Token = "0x4000A91")]
			AND,
			[Token(Token = "0x4000A92")]
			NAND,
			[Token(Token = "0x4000A93")]
			OR,
			[Token(Token = "0x4000A94")]
			XOR
		}

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first Bool variable.")]
		[RequiredField]
		public FsmBool bool1;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second Bool variable.")]
		public FsmBool bool2;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Boolean Operation.")]
		public Operation operation;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool Variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xF25E00", Offset = "0xF25E00", VA = "0xF25E00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xF25E60", Offset = "0xF25E60", VA = "0xF25E60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xF25F3C", Offset = "0xF25F3C", VA = "0xF25F3C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xF25E8C", Offset = "0xF25E8C", VA = "0xF25E8C")]
		private void DoBoolOperator()
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xF25F40", Offset = "0xF25F40", VA = "0xF25F40")]
		public BoolOperator()
		{
		}
	}
	[Token(Token = "0x2000285")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends Events based on the value of a Boolean Variable.")]
	public class BoolTest : FsmStateAction
	{
		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Readonly]
		[Tooltip("The Bool variable to test.")]
		public FsmBool boolVariable;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the Bool variable is True.")]
		public FsmEvent isTrue;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the Bool variable is False.")]
		public FsmEvent isFalse;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xF25F48", Offset = "0xF25F48", VA = "0xF25F48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xF25F88", Offset = "0xF25F88", VA = "0xF25F88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xF25FF8", Offset = "0xF25FF8", VA = "0xF25FF8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xF26048", Offset = "0xF26048", VA = "0xF26048")]
		public BoolTest()
		{
		}
	}
	[Token(Token = "0x2000286")]
	[Tooltip("Sends Events based on the comparison of 2 Colors.")]
	[ActionCategory(ActionCategory.Logic)]
	public class ColorCompare : FsmStateAction
	{
		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The first Color.")]
		public FsmColor color1;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second Color.")]
		[RequiredField]
		public FsmColor color2;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Tolerance of test, to test for 'almost equals' or to ignore small floating point rounding differences.")]
		[RequiredField]
		public FsmFloat tolerance;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Color 1 equals Color 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Color 1 does not equal Color 2 (within Tolerance)")]
		public FsmEvent notEqual;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xF26050", Offset = "0xF26050", VA = "0xF26050", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xF260FC", Offset = "0xF260FC", VA = "0xF260FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xF26238", Offset = "0xF26238", VA = "0xF26238", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xF26128", Offset = "0xF26128", VA = "0xF26128")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xF2623C", Offset = "0xF2623C", VA = "0xF2623C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xF262F4", Offset = "0xF262F4", VA = "0xF262F4")]
		public ColorCompare()
		{
		}
	}
	[Token(Token = "0x2000287")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Compares 2 Enum values and sends Events based on the result.")]
	public class EnumCompare : FsmStateAction
	{
		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The first Enum Variable.")]
		public FsmEnum enumVariable;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[MatchFieldType("enumVariable")]
		[Tooltip("The second Enum Variable.")]
		public FsmEnum compareTo;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the values are equal.")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the values are not equal.")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the true/false result in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the enum is changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xF262FC", Offset = "0xF262FC", VA = "0xF262FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xF2635C", Offset = "0xF2635C", VA = "0xF2635C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xF26420", Offset = "0xF26420", VA = "0xF26420", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xF26388", Offset = "0xF26388", VA = "0xF26388")]
		private void DoEnumCompare()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xF26424", Offset = "0xF26424", VA = "0xF26424")]
		public EnumCompare()
		{
		}
	}
	[Token(Token = "0x2000288")]
	[Tooltip("Sends an Event based on the value of an Enum Variable.")]
	[ActionCategory(ActionCategory.Logic)]
	public class EnumSwitch : FsmStateAction
	{
		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Enum Variable to use.")]
		[RequiredField]
		public FsmEnum enumVariable;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CompoundArray("Enum Switches", "Compare Enum Value", "Send Event")]
		[MatchFieldType("enumVariable")]
		[Tooltip("Compare Enum Values")]
		public FsmEnum[] compareTo;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the Enum Variable value is equal.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xF2642C", Offset = "0xF2642C", VA = "0xF2642C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xF264D4", Offset = "0xF264D4", VA = "0xF264D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xF265E4", Offset = "0xF265E4", VA = "0xF265E4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xF26500", Offset = "0xF26500", VA = "0xF26500")]
		private void DoEnumSwitch()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xF265E8", Offset = "0xF265E8", VA = "0xF265E8")]
		public EnumSwitch()
		{
		}
	}
	[Token(Token = "0x2000289")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if the value of a Float variable changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	public class FloatChanged : FsmStateAction
	{
		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Float variable to watch for a change.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the float variable changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to True if the float variable changes.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float previousValue;

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xF265F0", Offset = "0xF265F0", VA = "0xF265F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xF26628", Offset = "0xF26628", VA = "0xF26628", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xF26674", Offset = "0xF26674", VA = "0xF26674", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xF266EC", Offset = "0xF266EC", VA = "0xF266EC")]
		public FloatChanged()
		{
		}
	}
	[Token(Token = "0x200028A")]
	[Tooltip("Sends Events based on the comparison of 2 Floats.")]
	[ActionCategory(ActionCategory.Logic)]
	public class FloatCompare : FsmStateAction
	{
		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first float variable.")]
		[RequiredField]
		public FsmFloat float1;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second float variable.")]
		public FsmFloat float2;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Tolerance for the Equal test (almost equal).\nNOTE: Floats that look the same are often not exactly the same, so you often need to use a small tolerance.")]
		public FsmFloat tolerance;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Float 1 equals Float 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Float 1 is less than Float 2")]
		public FsmEvent lessThan;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if Float 1 is greater than Float 2")]
		public FsmEvent greaterThan;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xF266F4", Offset = "0xF266F4", VA = "0xF266F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xF2678C", Offset = "0xF2678C", VA = "0xF2678C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xF268AC", Offset = "0xF268AC", VA = "0xF268AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xF267B8", Offset = "0xF267B8", VA = "0xF267B8")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xF268B0", Offset = "0xF268B0", VA = "0xF268B0", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xF2698C", Offset = "0xF2698C", VA = "0xF2698C")]
		public FloatCompare()
		{
		}
	}
	[Token(Token = "0x200028B")]
	[Tooltip("Sends Events based on the sign of a Float (positive or negative).")]
	[ActionCategory(ActionCategory.Logic)]
	public class FloatSignTest : FsmStateAction
	{
		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to test.")]
		public FsmFloat floatValue;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the float variable is positive.")]
		public FsmEvent isPositive;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the float variable is negative.")]
		public FsmEvent isNegative;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if you want to wait until a float is positive/negative.")]
		public bool everyFrame;

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xF26994", Offset = "0xF26994", VA = "0xF26994", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xF269E4", Offset = "0xF269E4", VA = "0xF269E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xF26A6C", Offset = "0xF26A6C", VA = "0xF26A6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xF26A10", Offset = "0xF26A10", VA = "0xF26A10")]
		private void DoSignTest()
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xF26A70", Offset = "0xF26A70", VA = "0xF26A70", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xF26B28", Offset = "0xF26B28", VA = "0xF26B28")]
		public FloatSignTest()
		{
		}
	}
	[Token(Token = "0x200028C")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends an Event based on the value of a Float Variable. The float could represent distance, angle to a target, health left... The array sets up float ranges that correspond to Events.")]
	public class FloatSwitch : FsmStateAction
	{
		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float variable to test.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CompoundArray("Float Switches", "Less Than", "Send Event")]
		[Tooltip("Test if the float is less than a value. Each entry in the array defines a range between it and the previous entry.")]
		public FsmFloat[] lessThan;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if true.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xF26B30", Offset = "0xF26B30", VA = "0xF26B30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xF26BD8", Offset = "0xF26BD8", VA = "0xF26BD8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xF26CDC", Offset = "0xF26CDC", VA = "0xF26CDC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xF26C04", Offset = "0xF26C04", VA = "0xF26C04")]
		private void DoFloatSwitch()
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xF26CE0", Offset = "0xF26CE0", VA = "0xF26CE0")]
		public FloatSwitch()
		{
		}
	}
	[Token(Token = "0x200028D")]
	[ActionCategory(ActionCategory.Logic)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Tests if an FSM has a variable with the given name.")]
	public class FsmHasVariable : FsmStateAction
	{
		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of Fsm on Game Object. Useful if there is more than one FSM on the GameObject.")]
		public FsmString fsmName;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Check to see if the FSM has this variable.")]
		public FsmString variableName;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the FSM has the variable.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the FSM does NOT have the variable.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the result of this test in a bool variable. Useful if other actions depend on this test.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject previousGo;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xF26CE8", Offset = "0xF26CE8", VA = "0xF26CE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xF26D58", Offset = "0xF26D58", VA = "0xF26D58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xF26F20", Offset = "0xF26F20", VA = "0xF26F20", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xF26D84", Offset = "0xF26D84", VA = "0xF26D84")]
		private void DoFsmVariableTest()
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xF26F24", Offset = "0xF26F24", VA = "0xF26F24")]
		public FsmHasVariable()
		{
		}
	}
	[Token(Token = "0x200028E")]
	[Tooltip("Sends Events based on the current State of an FSM.")]
	[ActionCategory(ActionCategory.Logic)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class FsmStateSwitch : FsmStateAction
	{
		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of Fsm on GameObject. Useful if there is more than one FSM on the GameObject.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[CompoundArray("State Switches", "Compare State", "Send Event")]
		[Tooltip("Compare the current State to this State.")]
		public FsmString[] compareTo;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Send this event if the same.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject previousGo;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xF26F2C", Offset = "0xF26F2C", VA = "0xF26F2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xF26FE4", Offset = "0xF26FE4", VA = "0xF26FE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xF271D0", Offset = "0xF271D0", VA = "0xF271D0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xF27010", Offset = "0xF27010", VA = "0xF27010")]
		private void DoFsmStateSwitch()
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xF271D4", Offset = "0xF271D4", VA = "0xF271D4")]
		public FsmStateSwitch()
		{
		}
	}
	[Token(Token = "0x200028F")]
	[Tooltip("Tests if an FSM is in the specified State.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.Logic)]
	public class FsmStateTest : FsmStateAction
	{
		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of Fsm on Game Object. Useful if there is more than one FSM on the GameObject.")]
		public FsmString fsmName;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Check to see if the FSM is in this state.")]
		public FsmString stateName;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the FSM is in the specified state.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the FSM is NOT in the specified state.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the result of this test in a bool variable. Useful if other actions depend on this test.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame. Useful if you want to wait for an FSM to be in a particular state before sending an event.")]
		public bool everyFrame;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject previousGo;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xF271DC", Offset = "0xF271DC", VA = "0xF271DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xF2724C", Offset = "0xF2724C", VA = "0xF2724C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xF27410", Offset = "0xF27410", VA = "0xF27410", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xF27278", Offset = "0xF27278", VA = "0xF27278")]
		private void DoFsmStateTest()
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xF27414", Offset = "0xF27414", VA = "0xF27414")]
		public FsmStateTest()
		{
		}
	}
	[Token(Token = "0x2000290")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if the value of a GameObject variable changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	public class GameObjectChanged : FsmStateAction
	{
		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The GameObject variable to watch for a change.")]
		public FsmGameObject gameObjectVariable;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the variable changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to True if the variable changes.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject previousValue;

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xF2741C", Offset = "0xF2741C", VA = "0xF2741C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xF27454", Offset = "0xF27454", VA = "0xF27454", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xF274A8", Offset = "0xF274A8", VA = "0xF274A8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xF27564", Offset = "0xF27564", VA = "0xF27564")]
		public GameObjectChanged()
		{
		}
	}
	[Token(Token = "0x2000291")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Compares 2 Game Objects and sends Events based on the result.")]
	public class GameObjectCompare : FsmStateAction
	{
		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Title("Game Object")]
		[Tooltip("A Game Object variable to compare.")]
		public FsmOwnerDefault gameObjectVariable;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Compare the variable with this Game Object")]
		public FsmGameObject compareTo;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Send this event if Game Objects are equal")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Send this event if Game Objects are not equal")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the result of the check in a Bool Variable. (True if equal, false if not equal).")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a true or false result.")]
		public bool everyFrame;

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xF2756C", Offset = "0xF2756C", VA = "0xF2756C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xF275CC", Offset = "0xF275CC", VA = "0xF275CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xF276CC", Offset = "0xF276CC", VA = "0xF276CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xF275F8", Offset = "0xF275F8", VA = "0xF275F8")]
		private void DoGameObjectCompare()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xF276D0", Offset = "0xF276D0", VA = "0xF276D0")]
		public GameObjectCompare()
		{
		}
	}
	[Token(Token = "0x2000292")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if a Game Object has a tag.")]
	public class GameObjectCompareTag : FsmStateAction
	{
		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to test.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Tag)]
		[Tooltip("The Tag to check for.")]
		public FsmString tag;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the GameObject has the Tag.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the GameObject does not have the Tag.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xF276D8", Offset = "0xF276D8", VA = "0xF276D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xF27778", Offset = "0xF27778", VA = "0xF27778", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xF2789C", Offset = "0xF2789C", VA = "0xF2789C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xF277A4", Offset = "0xF277A4", VA = "0xF277A4")]
		private void DoCompareTag()
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xF278A0", Offset = "0xF278A0", VA = "0xF278A0")]
		public GameObjectCompareTag()
		{
		}
	}
	[Token(Token = "0x2000293")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if a GameObject has children.")]
	public class GameObjectHasChildren : FsmStateAction
	{
		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to test.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the GameObject has children.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the GameObject does not have children.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xF278A8", Offset = "0xF278A8", VA = "0xF278A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xF278F8", Offset = "0xF278F8", VA = "0xF278F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xF27A08", Offset = "0xF27A08", VA = "0xF27A08", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xF27924", Offset = "0xF27924", VA = "0xF27924")]
		private void DoHasChildren()
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xF27A0C", Offset = "0xF27A0C", VA = "0xF27A0C")]
		public GameObjectHasChildren()
		{
		}
	}
	[Token(Token = "0x2000294")]
	[Tooltip("Tests if a game object is a child of another game object and stores the result in a bool variable.\nE.g., Uses this to check if a collision object is the child of another object.")]
	[ActionCategory(ActionCategory.Logic)]
	public class GameObjectIsChildOf : FsmStateAction
	{
		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("GameObject to test.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Is it a child of this GameObject?")]
		public FsmGameObject isChildOf;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if GameObject is a child.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if GameObject is NOT a child.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store result in a bool variable")]
		public FsmBool storeResult;

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xF27A14", Offset = "0xF27A14", VA = "0xF27A14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xF27A6C", Offset = "0xF27A6C", VA = "0xF27A6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xF27AA8", Offset = "0xF27AA8", VA = "0xF27AA8")]
		private void DoIsChildOf(GameObject go)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xF27BB0", Offset = "0xF27BB0", VA = "0xF27BB0")]
		public GameObjectIsChildOf()
		{
		}
	}
	[Token(Token = "0x2000295")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if a GameObject Variable has a null value. E.g., If the FindGameObject action failed to find an object.")]
	public class GameObjectIsNull : FsmStateAction
	{
		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject variable to test.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject gameObject;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the GamObject is null.")]
		public FsmEvent isNull;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the GamObject is NOT null.")]
		public FsmEvent isNotNull;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if you want to wait for a GameObject variable to be not null (or null) then send an event.")]
		public bool everyFrame;

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xF27BB8", Offset = "0xF27BB8", VA = "0xF27BB8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xF27C08", Offset = "0xF27C08", VA = "0xF27C08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xF27CE4", Offset = "0xF27CE4", VA = "0xF27CE4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xF27C34", Offset = "0xF27C34", VA = "0xF27C34")]
		private void DoIsGameObjectNull()
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xF27CE8", Offset = "0xF27CE8", VA = "0xF27CE8")]
		public GameObjectIsNull()
		{
		}
	}
	[Token(Token = "0x2000296")]
	[Tooltip("Tests if a Game Object is visible to any camera.\nNOTE: In the editor this includes the Scene View camera!")]
	[ActionTarget(typeof(GameObject), "gameObject", false)]
	[ActionCategory(ActionCategory.Logic)]
	public class GameObjectIsVisible : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The GameObject to test.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the GameObject is visible.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if the GameObject is NOT visible.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Perform this action every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xF27CF0", Offset = "0xF27CF0", VA = "0xF27CF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xF27D40", Offset = "0xF27D40", VA = "0xF27D40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xF27E44", Offset = "0xF27E44", VA = "0xF27E44", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xF27D6C", Offset = "0xF27D6C", VA = "0xF27D6C")]
		private void DoIsVisible()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xF27E48", Offset = "0xF27E48", VA = "0xF27E48")]
		public GameObjectIsVisible()
		{
		}
	}
	[Token(Token = "0x2000297")]
	[Tooltip("Tests if a Game Object is visible to a specific camera. Note, using bounds is a little more expensive than using the center point.")]
	[ActionTarget(typeof(GameObject), "gameObject", false)]
	[ActionCategory(ActionCategory.Logic)]
	public class GameObjectIsVisibleToCamera : ComponentAction<Renderer, Camera>
	{
		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject to test.")]
		[CheckForComponent(typeof(Renderer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The GameObject with the Camera component.")]
		public FsmGameObject camera;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Use the bounds of the GameObject. Otherwise uses just the center point.")]
		public FsmBool useBounds;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send if the GameObject is visible.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send if the GameObject is NOT visible.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Perform this action every frame.")]
		public bool everyFrame;

		[Token(Token = "0x170000B8")]
		private Camera cameraComponent
		{
			[Token(Token = "0x6000BFF")]
			[Address(RVA = "0xF27E90", Offset = "0xF27E90", VA = "0xF27E90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xF27E98", Offset = "0xF27E98", VA = "0xF27E98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xF27F08", Offset = "0xF27F08", VA = "0xF27F08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xF28024", Offset = "0xF28024", VA = "0xF28024", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xF27F34", Offset = "0xF27F34", VA = "0xF27F34")]
		private void DoIsVisible()
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xF28028", Offset = "0xF28028", VA = "0xF28028")]
		public GameObjectIsVisibleToCamera()
		{
		}
	}
	[Token(Token = "0x2000298")]
	[Tooltip("Sends an Event based on a Game Object's Tag.")]
	[ActionCategory(ActionCategory.Logic)]
	public class GameObjectTagSwitch : FsmStateAction
	{
		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The GameObject to test.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CompoundArray("Tag Switches", "Compare Tag", "Send Event")]
		[UIHint(UIHint.Tag)]
		[Tooltip("Compare GameObject's Tag.")]
		public FsmString[] compareTo;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Send this event if Tag matches.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0xF28070", Offset = "0xF28070", VA = "0xF28070", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xF28118", Offset = "0xF28118", VA = "0xF28118", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xF28278", Offset = "0xF28278", VA = "0xF28278", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xF28144", Offset = "0xF28144", VA = "0xF28144")]
		private void DoTagSwitch()
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0xF2827C", Offset = "0xF2827C", VA = "0xF2827C")]
		public GameObjectTagSwitch()
		{
		}
	}
	[Token(Token = "0x2000299")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if the value of an integer variable changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	public class IntChanged : FsmStateAction
	{
		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The int variable to test.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmInt intVariable;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if changed.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to true if changed, otherwise False.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int previousValue;

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xF28284", Offset = "0xF28284", VA = "0xF28284", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xF282BC", Offset = "0xF282BC", VA = "0xF282BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xF28308", Offset = "0xF28308", VA = "0xF28308", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xF28380", Offset = "0xF28380", VA = "0xF28380")]
		public IntChanged()
		{
		}
	}
	[Token(Token = "0x200029A")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends Events based on the comparison of 2 Integers.")]
	public class IntCompare : FsmStateAction
	{
		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The first integer.")]
		public FsmInt integer1;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second integer.")]
		public FsmInt integer2;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if Integer 1 equals Integer 2")]
		public FsmEvent equal;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Integer 1 is less than Integer 2")]
		public FsmEvent lessThan;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Integer 1 is greater than Integer 2")]
		public FsmEvent greaterThan;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Perform this action every frame. Useful if you want to wait for a comparison to be true before sending an event.")]
		public bool everyFrame;

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xF28388", Offset = "0xF28388", VA = "0xF28388", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xF28404", Offset = "0xF28404", VA = "0xF28404", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0xF2851C", Offset = "0xF2851C", VA = "0xF2851C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xF28430", Offset = "0xF28430", VA = "0xF28430")]
		private void DoIntCompare()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xF28520", Offset = "0xF28520", VA = "0xF28520", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xF285FC", Offset = "0xF285FC", VA = "0xF285FC")]
		public IntCompare()
		{
		}
	}
	[Token(Token = "0x200029B")]
	[Tooltip("Sends an Event based on the value of an Integer Variable.")]
	[ActionCategory(ActionCategory.Logic)]
	public class IntSwitch : FsmStateAction
	{
		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The integer variable to test.")]
		public FsmInt intVariable;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The integer variable to test.")]
		[CompoundArray("Int Switches", "Compare Int", "Send Event")]
		public FsmInt[] compareTo;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if true.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xF28604", Offset = "0xF28604", VA = "0xF28604", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xF286AC", Offset = "0xF286AC", VA = "0xF286AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xF287B0", Offset = "0xF287B0", VA = "0xF287B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xF286D8", Offset = "0xF286D8", VA = "0xF286D8")]
		private void DoIntSwitch()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xF287B4", Offset = "0xF287B4", VA = "0xF287B4")]
		public IntSwitch()
		{
		}
	}
	[Token(Token = "0x200029C")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Compare 2 Object Variables and send events based on the result.")]
	public class ObjectCompare : FsmStateAction
	{
		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Readonly]
		[Tooltip("The Object Variable to compare.")]
		public FsmObject objectVariable;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The value to compare it to.")]
		public FsmObject compareTo;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the 2 object values are equal.")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the 2 object values are not equal.")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xF287BC", Offset = "0xF287BC", VA = "0xF287BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xF2881C", Offset = "0xF2881C", VA = "0xF2881C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xF28910", Offset = "0xF28910", VA = "0xF28910", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xF28848", Offset = "0xF28848", VA = "0xF28848")]
		private void DoObjectCompare()
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xF28914", Offset = "0xF28914", VA = "0xF28914")]
		public ObjectCompare()
		{
		}
	}
	[Token(Token = "0x200029D")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends Events based on the comparison of 2 Rect variables.")]
	public class RectCompare : FsmStateAction
	{
		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The first Rect variable.")]
		public FsmRect rect1;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second Rect variable.")]
		public FsmRect rect2;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Tolerance for the Equal test (almost equal).")]
		public FsmFloat tolerance;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Rect 1 equals Rect 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Rect 1 does not equal Rect 2 (within Tolerance)")]
		public FsmEvent notEqual;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xF2891C", Offset = "0xF2891C", VA = "0xF2891C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xF28988", Offset = "0xF28988", VA = "0xF28988", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xF28B64", Offset = "0xF28B64", VA = "0xF28B64", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xF289B4", Offset = "0xF289B4", VA = "0xF289B4")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xF28B68", Offset = "0xF28B68", VA = "0xF28B68", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xF28C20", Offset = "0xF28C20", VA = "0xF28C20")]
		public RectCompare()
		{
		}
	}
	[Token(Token = "0x200029E")]
	[Tooltip("Tests if the value of a string variable has changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	[ActionCategory(ActionCategory.Logic)]
	public class StringChanged : FsmStateAction
	{
		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The String Variable to test.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString stringVariable;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if changed.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to True if changed, otherwise False.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string previousValue;

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xF28C28", Offset = "0xF28C28", VA = "0xF28C28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xF28C60", Offset = "0xF28C60", VA = "0xF28C60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xF28CB4", Offset = "0xF28CB4", VA = "0xF28CB4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xF28D10", Offset = "0xF28D10", VA = "0xF28D10")]
		public StringChanged()
		{
		}
	}
	[Token(Token = "0x200029F")]
	[Tooltip("Compares 2 Strings and sends Events based on the result.")]
	[ActionCategory(ActionCategory.Logic)]
	public class StringCompare : FsmStateAction
	{
		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The String Variable to compare.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString stringVariable;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Compare to this text.")]
		public FsmString compareTo;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if strings are equal.")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if strings are not equal.")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the true/false result in a bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if any of the strings are changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xF28D18", Offset = "0xF28D18", VA = "0xF28D18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xF28DB8", Offset = "0xF28DB8", VA = "0xF28DB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xF28E7C", Offset = "0xF28E7C", VA = "0xF28E7C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xF28DE4", Offset = "0xF28DE4", VA = "0xF28DE4")]
		private void DoStringCompare()
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xF28E80", Offset = "0xF28E80", VA = "0xF28E80")]
		public StringCompare()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if a String contains another String.")]
	public class StringContains : FsmStateAction
	{
		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The String variable to test.")]
		public FsmString stringVariable;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Test if the String variable contains this string.")]
		[RequiredField]
		public FsmString containsString;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if true.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if false.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the true/false result in a bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if any of the strings are changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xF28E88", Offset = "0xF28E88", VA = "0xF28E88", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xF28F28", Offset = "0xF28F28", VA = "0xF28F28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xF29014", Offset = "0xF29014", VA = "0xF29014", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xF28F54", Offset = "0xF28F54", VA = "0xF28F54")]
		private void DoStringContains()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xF29018", Offset = "0xF29018", VA = "0xF29018")]
		public StringContains()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	[Tooltip("Sends an Event based on the value of a String Variable.")]
	[ActionCategory(ActionCategory.Logic)]
	public class StringSwitch : FsmStateAction
	{
		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The String Variable to test.")]
		public FsmString stringVariable;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CompoundArray("String Switches", "Compare String", "Send Event")]
		[Tooltip("Compare to a string value.")]
		public FsmString[] compareTo;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Send this event if string matches.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xF29020", Offset = "0xF29020", VA = "0xF29020", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xF290C8", Offset = "0xF290C8", VA = "0xF290C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xF291D8", Offset = "0xF291D8", VA = "0xF291D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xF290F4", Offset = "0xF290F4", VA = "0xF290F4")]
		private void DoStringSwitch()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xF291DC", Offset = "0xF291DC", VA = "0xF291DC")]
		public StringSwitch()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	[Tooltip("Sends Events based on the comparison of 2 Vector2 variables.")]
	[ActionCategory(ActionCategory.Logic)]
	public class Vector2Compare : FsmStateAction
	{
		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The first Vector2 variable.")]
		public FsmVector2 vector1;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second Vector2 variable.")]
		public FsmVector2 vector2;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Tolerance for the Equal test (almost equal).")]
		[RequiredField]
		public FsmFloat tolerance;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Rect 1 equals Rect 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Rect 1 does not equal Rect 2 (within Tolerance)")]
		public FsmEvent notEqual;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xF291E4", Offset = "0xF291E4", VA = "0xF291E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xF29250", Offset = "0xF29250", VA = "0xF29250", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xF29334", Offset = "0xF29334", VA = "0xF29334", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xF2927C", Offset = "0xF2927C", VA = "0xF2927C")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xF29338", Offset = "0xF29338", VA = "0xF29338", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xF293F0", Offset = "0xF293F0", VA = "0xF293F0")]
		public Vector2Compare()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	[Tooltip("Sends Events based on the comparison of 2 Vector3 variables.")]
	[ActionCategory(ActionCategory.Logic)]
	public class Vector3Compare : FsmStateAction
	{
		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The first Vector3 variable.")]
		public FsmVector3 vector1;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second Vector3 variable.")]
		public FsmVector3 vector2;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Tolerance for the Equal test (almost equal).")]
		public FsmFloat tolerance;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Rect 1 equals Rect 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Rect 1 does not equal Rect 2 (within Tolerance)")]
		public FsmEvent notEqual;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xF293F8", Offset = "0xF293F8", VA = "0xF293F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xF29464", Offset = "0xF29464", VA = "0xF29464", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xF2958C", Offset = "0xF2958C", VA = "0xF2958C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xF29490", Offset = "0xF29490", VA = "0xF29490")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xF29590", Offset = "0xF29590", VA = "0xF29590", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xF29648", Offset = "0xF29648", VA = "0xF29648")]
		public Vector3Compare()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Get a material at index on a gameObject and store it in a variable")]
	public class GetMaterial : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject the Material is applied to.")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the Material in the Materials array.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the material in a variable.")]
		public FsmMaterial material;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Get the shared material of this object. NOTE: Modifying the shared material will change the appearance of all objects using this material, and change material settings that are stored in the project too.")]
		public bool getSharedMaterial;

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xF29650", Offset = "0xF29650", VA = "0xF29650", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xF2969C", Offset = "0xF2969C", VA = "0xF2969C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xF296B8", Offset = "0xF296B8", VA = "0xF296B8")]
		private void DoGetMaterial()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xF2996C", Offset = "0xF2996C", VA = "0xF2996C")]
		public GetMaterial()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Get a texture from a material on a GameObject")]
	public class GetMaterialTexture : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject the Material is applied to.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the Material in the Materials array.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The texture to get. See Unity Shader docs for names.")]
		[UIHint(UIHint.NamedTexture)]
		public FsmString namedTexture;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("Store the texture in a variable.")]
		[Title("StoreTexture")]
		[UIHint(UIHint.Variable)]
		public FsmTexture storedTexture;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Get the shared version of the texture.")]
		public bool getFromSharedMaterial;

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xF299B4", Offset = "0xF299B4", VA = "0xF299B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xF29A50", Offset = "0xF29A50", VA = "0xF29A50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xF29A6C", Offset = "0xF29A6C", VA = "0xF29A6C")]
		private void DoGetMaterialTexture()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xF29D80", Offset = "0xF29D80", VA = "0xF29D80")]
		public GetMaterialTexture()
		{
		}
	}
	[Token(Token = "0x20002A6")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets the material on a Game Object.")]
	public class SetMaterial : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("A Game Object with a Renderer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the material on the object.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The material to apply.")]
		[RequiredField]
		public FsmMaterial material;

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xF29DC8", Offset = "0xF29DC8", VA = "0xF29DC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xF29E0C", Offset = "0xF29E0C", VA = "0xF29E0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xF29E28", Offset = "0xF29E28", VA = "0xF29E28")]
		private void DoSetMaterial()
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xF29FF8", Offset = "0xF29FF8", VA = "0xF29FF8")]
		public SetMaterial()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	[Tooltip("Sets a named color value in a Game Object's material.\n\nNote: With URP and HDRP set NamedColor to _BaseColor instead of _Color")]
	[ActionCategory(ActionCategory.Material)]
	public class SetMaterialColor : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that the material is applied to.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("GameObjects can have multiple materials. Specify an index to target a specific material.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Alternatively specify a Material instead of a GameObject and Index.")]
		public FsmMaterial material;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.NamedColor)]
		[Tooltip("The named color.\nNote: With URP and HDRP set NamedColor to _BaseColor instead of _Color.\nSee unity docs: <a href=\"https://docs.unity3d.com/ScriptReference/Material.SetColor.html\" rel=\"nofollow\">Material.SetColor</a>")]
		public FsmString namedColor;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("Set the parameter value.")]
		public FsmColor color;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful if the value is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xF2A040", Offset = "0xF2A040", VA = "0xF2A040", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xF2A104", Offset = "0xF2A104", VA = "0xF2A104", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xF2A41C", Offset = "0xF2A41C", VA = "0xF2A41C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xF2A130", Offset = "0xF2A130", VA = "0xF2A130")]
		private void DoSetMaterialColor()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xF2A420", Offset = "0xF2A420", VA = "0xF2A420")]
		public SetMaterialColor()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	[Tooltip("Sets a named float in a game object's material.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetMaterialFloat : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The Game Object that the material is applied to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("GameObjects can have multiple materials. Specify an index to target a specific material.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Alternatively specify a Material instead of a GameObject and Index.")]
		public FsmMaterial material;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("A named float parameter in the shader.")]
		public FsmString namedFloat;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("Set the parameter value.")]
		public FsmFloat floatValue;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful if the value is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xF2A468", Offset = "0xF2A468", VA = "0xF2A468", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xF2A520", Offset = "0xF2A520", VA = "0xF2A520", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xF2A808", Offset = "0xF2A808", VA = "0xF2A808", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xF2A54C", Offset = "0xF2A54C", VA = "0xF2A54C")]
		private void DoSetMaterialFloat()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xF2A80C", Offset = "0xF2A80C", VA = "0xF2A80C")]
		public SetMaterialFloat()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	[Tooltip("Sets a named texture in a game object's material.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetMaterialTexture : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that the material is applied to.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("GameObjects can have multiple materials. Specify an index to target a specific material.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Alternatively specify a Material instead of a GameObject and Index.")]
		public FsmMaterial material;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.NamedTexture)]
		[Tooltip("A named parameter in the shader. Common names include: _MainTex, _BumpMap, _Cube...")]
		public FsmString namedTexture;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The texture to use.")]
		public FsmTexture texture;

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xF2A854", Offset = "0xF2A854", VA = "0xF2A854", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xF2A8F8", Offset = "0xF2A8F8", VA = "0xF2A8F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xF2A914", Offset = "0xF2A914", VA = "0xF2A914")]
		private void DoSetMaterialTexture()
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xF2AC00", Offset = "0xF2AC00", VA = "0xF2AC00")]
		public SetMaterialTexture()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets the value of a Material Variable.")]
	public class SetMaterialValue : FsmStateAction
	{
		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Material Variable.")]
		[RequiredField]
		public FsmMaterial materialVariable;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Material Value.")]
		[RequiredField]
		public FsmMaterial materialValue;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xF2AC48", Offset = "0xF2AC48", VA = "0xF2AC48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xF2AC78", Offset = "0xF2AC78", VA = "0xF2AC78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xF2ACD8", Offset = "0xF2ACD8", VA = "0xF2ACD8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xF2AD10", Offset = "0xF2AD10", VA = "0xF2AD10")]
		public SetMaterialValue()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	[Tooltip("Sets a Game Object's material randomly from an array of Materials.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetRandomMaterial : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The GameObject that the material is applied to.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the material on the object.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Array of materials to randomly select from.")]
		public FsmMaterial[] materials;

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xF2AD18", Offset = "0xF2AD18", VA = "0xF2AD18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0xF2AD9C", Offset = "0xF2AD9C", VA = "0xF2AD9C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0xF2ADB8", Offset = "0xF2ADB8", VA = "0xF2ADB8")]
		private void DoSetRandomMaterial()
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0xF2B06C", Offset = "0xF2B06C", VA = "0xF2B06C")]
		public SetRandomMaterial()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets the Offset of a named texture in a Game Object's Material. Useful for scrolling texture effects.")]
	public class SetTextureOffset : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The target Game Object.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the material on the object.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.NamedColor)]
		[Tooltip("The named texture. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Material.SetTextureOffset.html\" rel=\"nofollow\">SetTextureOffset</a>")]
		[RequiredField]
		public FsmString namedTexture;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The amount to offset in X axis. 1 = full width of texture.")]
		[RequiredField]
		public FsmFloat offsetX;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("The amount to offset in Y axis. 1 = full height of texture.")]
		public FsmFloat offsetY;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xF2B0B4", Offset = "0xF2B0B4", VA = "0xF2B0B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xF2B178", Offset = "0xF2B178", VA = "0xF2B178", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xF2B45C", Offset = "0xF2B45C", VA = "0xF2B45C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xF2B1A4", Offset = "0xF2B1A4", VA = "0xF2B1A4")]
		private void DoSetTextureOffset()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xF2B460", Offset = "0xF2B460", VA = "0xF2B460")]
		public SetTextureOffset()
		{
		}
	}
	[Token(Token = "0x20002AD")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets the Scale of a named texture in a Game Object's Material. Useful for special effects.")]
	public class SetTextureScale : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The target Game Object.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the material on the object.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.NamedColor)]
		[Tooltip("The named texture. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Material.SetTextureScale.html\" rel=\"nofollow\">SetTextureScale</a>")]
		public FsmString namedTexture;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("Scale in X axis. 2 = double the texture's width.")]
		public FsmFloat scaleX;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("Scale in Y axis. 2 = double the texture's height.")]
		public FsmFloat scaleY;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xF2B4A8", Offset = "0xF2B4A8", VA = "0xF2B4A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xF2B578", Offset = "0xF2B578", VA = "0xF2B578", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xF2B85C", Offset = "0xF2B85C", VA = "0xF2B85C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xF2B5A4", Offset = "0xF2B5A4", VA = "0xF2B5A4")]
		private void DoSetTextureScale()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xF2B860", Offset = "0xF2B860", VA = "0xF2B860")]
		public SetTextureScale()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	[Tooltip("Sets the value of a Texture Variable.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetTextureValue : FsmStateAction
	{
		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Texture Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmTexture textureVariable;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Texture Value.")]
		public FsmTexture textureValue;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xF2B8A8", Offset = "0xF2B8A8", VA = "0xF2B8A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xF2B8D8", Offset = "0xF2B8D8", VA = "0xF2B8D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xF2B938", Offset = "0xF2B938", VA = "0xF2B938", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xF2B970", Offset = "0xF2B970", VA = "0xF2B970")]
		public SetTextureValue()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	[Tooltip("Sets the visibility of a GameObject. Note: this action sets the GameObject Renderer's enabled state.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetVisibility : ComponentAction<Renderer>
	{
		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The GameObject to effect. Note: Needs a Renderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Should the object visibility be toggled?\nHas priority over the 'visible' setting")]
		public FsmBool toggle;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Should the object be set to visible or invisible?")]
		public FsmBool visible;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Resets to the initial visibility when it leaves the state")]
		public bool resetOnExit;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool initialVisibility;

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xF2B978", Offset = "0xF2B978", VA = "0xF2B978", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xF2B9D4", Offset = "0xF2B9D4", VA = "0xF2B9D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xF2BA10", Offset = "0xF2BA10", VA = "0xF2BA10")]
		private void DoSetVisibility(GameObject go)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xF2BB28", Offset = "0xF2BB28", VA = "0xF2BB28", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xF2BB38", Offset = "0xF2BB38", VA = "0xF2BB38")]
		private void ResetVisibility()
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xF2BBF8", Offset = "0xF2BBF8", VA = "0xF2BBF8")]
		public SetVisibility()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	[Tooltip("Flips the value of a Bool Variable. True becomes False, False becomes True.")]
	[ActionCategory(ActionCategory.Math)]
	public class BoolFlip : FsmStateAction
	{
		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Bool variable to flip. True becomes False, False becomes True.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmBool boolVariable;

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xF2BC40", Offset = "0xF2BC40", VA = "0xF2BC40", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xF2BC4C", Offset = "0xF2BC4C", VA = "0xF2BC4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xF2BC90", Offset = "0xF2BC90", VA = "0xF2BC90")]
		public BoolFlip()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	[Tooltip("Sets a Float variable to its absolute value.")]
	[ActionCategory(ActionCategory.Math)]
	public class FloatAbs : FsmStateAction
	{
		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Float variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if the Float variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xF2BC98", Offset = "0xF2BC98", VA = "0xF2BC98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xF2BCBC", Offset = "0xF2BCBC", VA = "0xF2BCBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xF2BD14", Offset = "0xF2BD14", VA = "0xF2BD14", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xF2BCE8", Offset = "0xF2BCE8", VA = "0xF2BCE8")]
		private void DoFloatAbs()
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xF2BD18", Offset = "0xF2BD18", VA = "0xF2BD18")]
		public FloatAbs()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	[Tooltip("Adds a value to a Float Variable.")]
	[ActionCategory(ActionCategory.Math)]
	public class FloatAdd : FsmStateAction
	{
		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Float variable to add to.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Amount to add.")]
		[RequiredField]
		public FsmFloat add;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Used with Every Frame. Adds the value over one second to make the operation frame rate independent.")]
		public bool perSecond;

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xF2BD20", Offset = "0xF2BD20", VA = "0xF2BD20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xF2BD50", Offset = "0xF2BD50", VA = "0xF2BD50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xF2BDE8", Offset = "0xF2BDE8", VA = "0xF2BDE8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xF2BD7C", Offset = "0xF2BD7C", VA = "0xF2BD7C")]
		private void DoFloatAdd()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xF2BDEC", Offset = "0xF2BDEC", VA = "0xF2BDEC")]
		public FloatAdd()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	[Tooltip("Adds multiple float variables to float variable.")]
	[ActionCategory(ActionCategory.Math)]
	public class FloatAddMultiple : FsmStateAction
	{
		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float variables to add.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat[] floatVariables;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Add to this variable.")]
		public FsmFloat addTo;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xF2BDF4", Offset = "0xF2BDF4", VA = "0xF2BDF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xF2BE24", Offset = "0xF2BE24", VA = "0xF2BE24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xF2BEE4", Offset = "0xF2BEE4", VA = "0xF2BEE4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xF2BE50", Offset = "0xF2BE50", VA = "0xF2BE50")]
		private void DoFloatAdd()
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xF2BEE8", Offset = "0xF2BEE8", VA = "0xF2BEE8")]
		public FloatAddMultiple()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	[Tooltip("Clamps the value of Float Variable to a Min/Max range.")]
	[ActionCategory(ActionCategory.Math)]
	public class FloatClamp : FsmStateAction
	{
		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Float variable to clamp.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The minimum value allowed.")]
		[RequiredField]
		public FsmFloat minValue;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum value allowed.")]
		[RequiredField]
		public FsmFloat maxValue;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the float variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xF2BEF0", Offset = "0xF2BEF0", VA = "0xF2BEF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xF2BF30", Offset = "0xF2BF30", VA = "0xF2BF30", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xF2BFD0", Offset = "0xF2BFD0", VA = "0xF2BFD0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xF2BF5C", Offset = "0xF2BF5C", VA = "0xF2BF5C")]
		private void DoClamp()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xF2BFD4", Offset = "0xF2BFD4", VA = "0xF2BFD4")]
		public FloatClamp()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Gets the shortest angle between two angles.")]
	public class FloatDeltaAngle : FsmStateAction
	{
		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("First angle in degrees.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat fromAngle;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Second Angle in degrees.")]
		[RequiredField]
		public FsmFloat toAngle;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the shortest angle between the two angles. This takes account wrapping around 360.")]
		public FsmFloat deltaAngle;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the angles are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xF2BFDC", Offset = "0xF2BFDC", VA = "0xF2BFDC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xF2C01C", Offset = "0xF2C01C", VA = "0xF2C01C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xF2C0E4", Offset = "0xF2C0E4", VA = "0xF2C0E4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xF2C048", Offset = "0xF2C048", VA = "0xF2C048")]
		private void DoDeltaAngle()
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xF2C0E8", Offset = "0xF2C0E8", VA = "0xF2C0E8")]
		public FloatDeltaAngle()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Divides one Float by another.")]
	public class FloatDivide : FsmStateAction
	{
		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to divide.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Divide the float variable by this value.")]
		[RequiredField]
		public FsmFloat divideBy;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the variables are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xF2C0F0", Offset = "0xF2C0F0", VA = "0xF2C0F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xF2C120", Offset = "0xF2C120", VA = "0xF2C120", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xF2C194", Offset = "0xF2C194", VA = "0xF2C194", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xF2C1E8", Offset = "0xF2C1E8", VA = "0xF2C1E8")]
		public FloatDivide()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Interpolates between 2 Float values over a specified Time.")]
	public class FloatInterpolate : FsmStateAction
	{
		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Interpolation mode: Linear or EaseInOut.")]
		public InterpolationType mode;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Interpolate from this value.")]
		public FsmFloat fromFloat;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Interpolate to this value.")]
		[RequiredField]
		public FsmFloat toFloat;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Interpolate over this amount of time in seconds.")]
		public FsmFloat time;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current value in a float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when the interpolation is finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused (Time scaled to 0).")]
		public bool realTime;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xF2C1F0", Offset = "0xF2C1F0", VA = "0xF2C1F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xF2C260", Offset = "0xF2C260", VA = "0xF2C260", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xF2C2BC", Offset = "0xF2C2BC", VA = "0xF2C2BC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xF2C434", Offset = "0xF2C434", VA = "0xF2C434")]
		public FloatInterpolate()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Multiplies one Float by another.")]
	public class FloatMultiply : FsmStateAction
	{
		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to multiply.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Multiply the float variable by this value.")]
		public FsmFloat multiplyBy;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the variables are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xF2C43C", Offset = "0xF2C43C", VA = "0xF2C43C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xF2C46C", Offset = "0xF2C46C", VA = "0xF2C46C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xF2C4E0", Offset = "0xF2C4E0", VA = "0xF2C4E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xF2C534", Offset = "0xF2C534", VA = "0xF2C534")]
		public FloatMultiply()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Performs math operations on 2 Floats: Add, Subtract, Multiply, Divide, Min, Max.")]
	public class FloatOperator : FsmStateAction
	{
		[Token(Token = "0x20002BA")]
		public enum Operation
		{
			[Token(Token = "0x4000B9C")]
			Add,
			[Token(Token = "0x4000B9D")]
			Subtract,
			[Token(Token = "0x4000B9E")]
			Multiply,
			[Token(Token = "0x4000B9F")]
			Divide,
			[Token(Token = "0x4000BA0")]
			Min,
			[Token(Token = "0x4000BA1")]
			Max,
			[Token(Token = "0x4000BA2")]
			Modulus
		}

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first float.")]
		[RequiredField]
		public FsmFloat float1;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second float.")]
		[RequiredField]
		public FsmFloat float2;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The math operation to perform on the floats.")]
		public Operation operation;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result of the operation in a float variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeResult;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the variables are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xF2C53C", Offset = "0xF2C53C", VA = "0xF2C53C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xF2C580", Offset = "0xF2C580", VA = "0xF2C580", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xF2C690", Offset = "0xF2C690", VA = "0xF2C690", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xF2C5AC", Offset = "0xF2C5AC", VA = "0xF2C5AC")]
		private void DoFloatOperator()
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xF2C694", Offset = "0xF2C694", VA = "0xF2C694")]
		public FloatOperator()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	[Tooltip("Subtracts a value from a Float Variable.")]
	[ActionCategory(ActionCategory.Math)]
	public class FloatSubtract : FsmStateAction
	{
		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to subtract from.")]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Value to subtract from the float variable.")]
		[RequiredField]
		public FsmFloat subtract;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Used with Every Frame. Adds the value over one second to make the operation frame rate independent.")]
		public bool perSecond;

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xF2C69C", Offset = "0xF2C69C", VA = "0xF2C69C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xF2C6CC", Offset = "0xF2C6CC", VA = "0xF2C6CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xF2C764", Offset = "0xF2C764", VA = "0xF2C764", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xF2C6F8", Offset = "0xF2C6F8", VA = "0xF2C6F8")]
		private void DoFloatSubtract()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xF2C768", Offset = "0xF2C768", VA = "0xF2C768")]
		public FloatSubtract()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	[Tooltip("Wraps the value of Float Variable so it stays in a Min/Max range.\n\nExamples:\nWrap 120 between 0 and 100 -> 20\nWrap -10 between 0 and 100 -> 90")]
	[ActionCategory(ActionCategory.Math)]
	public class FloatWrap : FsmStateAction
	{
		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Float variable to wrap.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The minimum value allowed.")]
		public FsmFloat minValue;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum value allowed.")]
		[RequiredField]
		public FsmFloat maxValue;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the float variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xF2C770", Offset = "0xF2C770", VA = "0xF2C770", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xF2C7B0", Offset = "0xF2C7B0", VA = "0xF2C7B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xF2C874", Offset = "0xF2C874", VA = "0xF2C874", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xF2C7DC", Offset = "0xF2C7DC", VA = "0xF2C7DC")]
		private void DoWrap()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xF2C878", Offset = "0xF2C878", VA = "0xF2C878")]
		public FloatWrap()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Adds a value to an Integer Variable.")]
	public class IntAdd : FsmStateAction
	{
		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The variable to add to.")]
		public FsmInt intVariable;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The value to add.")]
		public FsmInt add;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. NOTE: This operation will NOT be frame rate independent!")]
		public bool everyFrame;

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xF2C880", Offset = "0xF2C880", VA = "0xF2C880", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xF2C8B0", Offset = "0xF2C8B0", VA = "0xF2C8B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xF2C91C", Offset = "0xF2C91C", VA = "0xF2C91C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xF2C96C", Offset = "0xF2C96C", VA = "0xF2C96C")]
		public IntAdd()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Clamp the value of an Integer Variable to a Min/Max range.")]
	public class IntClamp : FsmStateAction
	{
		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The variable to clamp.")]
		public FsmInt intVariable;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Minimum allowed value.")]
		[RequiredField]
		public FsmInt minValue;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Maximum allowed value.")]
		[RequiredField]
		public FsmInt maxValue;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Perform this action every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xF2C974", Offset = "0xF2C974", VA = "0xF2C974", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xF2C9B4", Offset = "0xF2C9B4", VA = "0xF2C9B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xF2CA54", Offset = "0xF2CA54", VA = "0xF2CA54", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xF2C9E0", Offset = "0xF2C9E0", VA = "0xF2C9E0")]
		private void DoClamp()
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0xF2CA58", Offset = "0xF2CA58", VA = "0xF2CA58")]
		public IntClamp()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	[Tooltip("Performs math operation on 2 Integers: Add, Subtract, Multiply, Divide, Min, Max.")]
	[ActionCategory(ActionCategory.Math)]
	public class IntOperator : FsmStateAction
	{
		[Token(Token = "0x20002C0")]
		public enum Operation
		{
			[Token(Token = "0x4000BB8")]
			Add,
			[Token(Token = "0x4000BB9")]
			Subtract,
			[Token(Token = "0x4000BBA")]
			Multiply,
			[Token(Token = "0x4000BBB")]
			Divide,
			[Token(Token = "0x4000BBC")]
			Min,
			[Token(Token = "0x4000BBD")]
			Max
		}

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The first integer.")]
		public FsmInt integer1;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second integer.")]
		public FsmInt integer2;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The operation to perform on the 2 integers.")]
		public Operation operation;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in an Integer Variable.")]
		[RequiredField]
		public FsmInt storeResult;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Perform this action every frame. Useful if you're using variables that are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xF2CA60", Offset = "0xF2CA60", VA = "0xF2CA60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0xF2CAA4", Offset = "0xF2CAA4", VA = "0xF2CAA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xF2CBA0", Offset = "0xF2CBA0", VA = "0xF2CBA0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xF2CAD0", Offset = "0xF2CAD0", VA = "0xF2CAD0")]
		private void DoIntOperator()
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xF2CBA4", Offset = "0xF2CBA4", VA = "0xF2CBA4")]
		public IntOperator()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	[Tooltip("Subtracts a value to an Integer Variable.")]
	[ActionCategory(ActionCategory.Math)]
	public class IntSubtract : FsmStateAction
	{
		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The int variable to subtract from.")]
		public FsmInt intVariable;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Value to subtract from the int variable.")]
		public FsmInt subtract;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Used with Every Frame. Subtracts the value over one second to make the operation frame rate independent.")]
		public bool perSecond;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _acc;

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xF2CBAC", Offset = "0xF2CBAC", VA = "0xF2CBAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xF2CBDC", Offset = "0xF2CBDC", VA = "0xF2CBDC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xF2CCF0", Offset = "0xF2CCF0", VA = "0xF2CCF0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xF2CC08", Offset = "0xF2CC08", VA = "0xF2CC08")]
		private void doSubtract()
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xF2CCF4", Offset = "0xF2CCF4", VA = "0xF2CCF4")]
		public IntSubtract()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	[Tooltip("Wraps the value of Int Variable so it stays in a Min/Max range.\n\nExamples:\nWrap 120 between 0 and 100 -> 20\nWrap -10 between 0 and 100 -> 90")]
	[ActionCategory(ActionCategory.Math)]
	public class IntWrap : FsmStateAction
	{
		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Int variable to wrap.")]
		public FsmInt intVariable;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The minimum value allowed.")]
		public FsmInt minValue;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The maximum value allowed.")]
		public FsmInt maxValue;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the int variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xF2CCFC", Offset = "0xF2CCFC", VA = "0xF2CCFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xF2CD3C", Offset = "0xF2CD3C", VA = "0xF2CD3C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xF2CE04", Offset = "0xF2CE04", VA = "0xF2CE04", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xF2CD68", Offset = "0xF2CD68", VA = "0xF2CD68")]
		private void DoWrap()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xF2CE08", Offset = "0xF2CE08", VA = "0xF2CE08")]
		public IntWrap()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Sets a Bool Variable to True or False randomly.")]
	public class RandomBool : FsmStateAction
	{
		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the result in a bool variable. Hint: Use a {{Bool Test}} action to branch based on this \"coin toss\"")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xF2CE10", Offset = "0xF2CE10", VA = "0xF2CE10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xF2CE1C", Offset = "0xF2CE1C", VA = "0xF2CE1C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xF2CE64", Offset = "0xF2CE64", VA = "0xF2CE64")]
		public RandomBool()
		{
		}
	}
	[Token(Token = "0x20002C4")]
	[Tooltip("Sets a Float Variable to a random value between Min/Max.")]
	[ActionCategory(ActionCategory.Math)]
	public class RandomFloat : FsmStateAction
	{
		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Minimum value for the random number.")]
		public FsmFloat min;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Maximum value for the random number.")]
		[RequiredField]
		public FsmFloat max;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in a Float variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeResult;

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xF2CE6C", Offset = "0xF2CE6C", VA = "0xF2CE6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xF2CEC0", Offset = "0xF2CEC0", VA = "0xF2CEC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xF2CF2C", Offset = "0xF2CF2C", VA = "0xF2CF2C")]
		public RandomFloat()
		{
		}
	}
	[Token(Token = "0x20002C5")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Sets an Integer Variable to a random value between Min/Max.")]
	public class RandomInt : FsmStateAction
	{
		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Minimum value for the random number.")]
		[RequiredField]
		public FsmInt min;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Maximum value for the random number.")]
		[RequiredField]
		public FsmInt max;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in an Integer variable.")]
		[RequiredField]
		public FsmInt storeResult;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Should the Max value be included in the possible results?")]
		public bool inclusiveMax;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Don't repeat the same value twice.")]
		public FsmBool noRepeat;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int randomIndex;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int lastIndex;

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xF2CF34", Offset = "0xF2CF34", VA = "0xF2CF34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xF2CFA8", Offset = "0xF2CFA8", VA = "0xF2CFA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xF2CFC4", Offset = "0xF2CFC4", VA = "0xF2CFC4")]
		private void PickRandom()
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xF2D150", Offset = "0xF2D150", VA = "0xF2D150")]
		public RandomInt()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Gets the value of a curve at a given time and stores it in a Float Variable. NOTE: This can be used for more than just animation! It's a general way to transform an input number into an output number using a curve (e.g., linear input -> bell curve).")]
	public class SampleCurve : FsmStateAction
	{
		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Click to edit the curve.")]
		[RequiredField]
		public FsmAnimationCurve curve;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Sample the curve at this point.")]
		public FsmFloat sampleAt;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the sampled value in a float variable.")]
		public FsmFloat storeValue;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Do it every frame. Useful if Sample At is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xF2D160", Offset = "0xF2D160", VA = "0xF2D160", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xF2D1A0", Offset = "0xF2D1A0", VA = "0xF2D1A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xF2D21C", Offset = "0xF2D21C", VA = "0xF2D21C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xF2D1CC", Offset = "0xF2D1CC", VA = "0xF2D1CC")]
		private void DoSampleCurve()
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xF2D220", Offset = "0xF2D220", VA = "0xF2D220")]
		public SampleCurve()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Select a random float from an array of floats.")]
	public class SelectRandomFloat : FsmStateAction
	{
		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Floats", "Float", "Weight")]
		[Tooltip("A possible float choice.")]
		public FsmFloat[] floats;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this float being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the selected float in a Float Variable.")]
		public FsmFloat storeFloat;

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xF2D228", Offset = "0xF2D228", VA = "0xF2D228", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xF2D390", Offset = "0xF2D390", VA = "0xF2D390", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xF2D3AC", Offset = "0xF2D3AC", VA = "0xF2D3AC")]
		private void DoSelectRandomString()
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xF2D424", Offset = "0xF2D424", VA = "0xF2D424")]
		public SelectRandomFloat()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Select a random Int from an array of Ints.")]
	public class SelectRandomInt : FsmStateAction
	{
		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Ints", "Int", "Weight")]
		[Tooltip("A possible int choice.")]
		public FsmInt[] ints;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this int being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the selected int in an Int Variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmInt storeInt;

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xF2D42C", Offset = "0xF2D42C", VA = "0xF2D42C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xF2D5B0", Offset = "0xF2D5B0", VA = "0xF2D5B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xF2D5CC", Offset = "0xF2D5CC", VA = "0xF2D5CC")]
		private void DoSelectRandomString()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xF2D644", Offset = "0xF2D644", VA = "0xF2D644")]
		public SelectRandomInt()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	[Tooltip("Sets the value of a Bool Variable.")]
	[ActionCategory(ActionCategory.Math)]
	public class SetBoolValue : FsmStateAction
	{
		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Bool Variable to set.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmBool boolVariable;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Value to set it to: Check to set to True, Uncheck to set to False.")]
		public FsmBool boolValue;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xF2D64C", Offset = "0xF2D64C", VA = "0xF2D64C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xF2D67C", Offset = "0xF2D67C", VA = "0xF2D67C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xF2D6D4", Offset = "0xF2D6D4", VA = "0xF2D6D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xF2D708", Offset = "0xF2D708", VA = "0xF2D708")]
		public SetBoolValue()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Sets the value of a Float Variable.")]
	public class SetFloatValue : FsmStateAction
	{
		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Variable to set.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Value to set it to.")]
		[RequiredField]
		public FsmFloat floatValue;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Perform this action every frame. Useful if the Value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xF2D710", Offset = "0xF2D710", VA = "0xF2D710", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xF2D740", Offset = "0xF2D740", VA = "0xF2D740", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xF2D794", Offset = "0xF2D794", VA = "0xF2D794", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xF2D7C4", Offset = "0xF2D7C4", VA = "0xF2D7C4")]
		public SetFloatValue()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	[Tooltip("Sets the value of an integer variable using a float value.")]
	[ActionCategory(ActionCategory.Math)]
	public class SetIntFromFloat : FsmStateAction
	{
		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The int variable to set.")]
		[RequiredField]
		public FsmInt intVariable;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The float value.")]
		public FsmFloat floatValue;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Do it every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xF2D7CC", Offset = "0xF2D7CC", VA = "0xF2D7CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xF2D7FC", Offset = "0xF2D7FC", VA = "0xF2D7FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xF2D868", Offset = "0xF2D868", VA = "0xF2D868", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xF2D8B0", Offset = "0xF2D8B0", VA = "0xF2D8B0")]
		public SetIntFromFloat()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	[Tooltip("Sets the value of an Integer Variable.")]
	[ActionCategory(ActionCategory.Math)]
	public class SetIntValue : FsmStateAction
	{
		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Int Variable to Set")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmInt intVariable;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Int Value")]
		public FsmInt intValue;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xF2D8B8", Offset = "0xF2D8B8", VA = "0xF2D8B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xF2D8E8", Offset = "0xF2D8E8", VA = "0xF2D8E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xF2D93C", Offset = "0xF2D93C", VA = "0xF2D93C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xF2D96C", Offset = "0xF2D96C", VA = "0xF2D96C")]
		public SetIntValue()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	[Tooltip("Sets a Vector2 Variable to a random value.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2RandomValue : FsmStateAction
	{
		[Token(Token = "0x20002CE")]
		public enum Option
		{
			[Token(Token = "0x4000BF2")]
			Circle,
			[Token(Token = "0x4000BF3")]
			Rectangle,
			[Token(Token = "0x4000BF4")]
			InArc,
			[Token(Token = "0x4000BF5")]
			AtAngles
		}

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool showPreview;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[PreviewField("DrawPreview")]
		[Tooltip("Controls the distribution of the random Vector2 values.")]
		public Option shape;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The minimum length for the random Vector2 value.")]
		public FsmFloat minLength;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum length for the random Vector2 value.")]
		public FsmFloat maxLength;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Context sensitive parameter. Depends on the Shape.")]
		public FsmFloat floatParam1;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Context sensitive parameter. Depends on the Shape.")]
		public FsmFloat floatParam2;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Scale the vector in Y (e.g., to squash a circle into an oval)")]
		public FsmFloat yScale;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Vector2 variable.")]
		public FsmVector2 storeResult;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector2 v2;

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xF2D974", Offset = "0xF2D974", VA = "0xF2D974", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xF2DA14", Offset = "0xF2DA14", VA = "0xF2DA14", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xF2DA44", Offset = "0xF2DA44", VA = "0xF2DA44")]
		private void DoRandomVector2()
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xF2DDCC", Offset = "0xF2DDCC", VA = "0xF2DDCC")]
		public Vector2RandomValue()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Math expression action. Enter the expression using variable names and common math syntax. Uses Mathos parser.")]
	public class MathExpression : FsmStateAction
	{
		[Token(Token = "0x20002D0")]
		public class Property
		{
			[Token(Token = "0x4000BFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string path;

			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0xF2EB58", Offset = "0xF2EB58", VA = "0xF2EB58")]
			public Property()
			{
			}
		}

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.TextArea)]
		[Tooltip("Expression to evaluate. Accepts float, int, and bool variable names. Also: Time.deltaTime, ")]
		public FsmString expression;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a float variable")]
		public FsmFloat storeResultAsFloat;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in an int variable")]
		public FsmInt storeResultAsInt;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MathParser parser;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string cachedExpression;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ReadOnlyCollection<string> tokens;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly List<NamedVariable> usedVariables;

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xF2DDD4", Offset = "0xF2DDD4", VA = "0xF2DDD4", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xF2DE94", Offset = "0xF2DE94", VA = "0xF2DE94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xF2DF84", Offset = "0xF2DF84", VA = "0xF2DF84", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xF2DEC0", Offset = "0xF2DEC0", VA = "0xF2DEC0")]
		private void DoMathExpression()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xF2E00C", Offset = "0xF2E00C", VA = "0xF2E00C")]
		public double ParseExpression()
		{
			return default(double);
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xF2E4DC", Offset = "0xF2E4DC", VA = "0xF2E4DC")]
		private void BuildAndCacheExpression()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xF2EAD0", Offset = "0xF2EAD0", VA = "0xF2EAD0")]
		public MathExpression()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	[Tooltip("Gets the number of vertices in a GameObject's mesh. Useful in conjunction with GetVertexPosition.")]
	[ActionCategory("Mesh")]
	public class GetVertexCount : FsmStateAction
	{
		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to check.")]
		[CheckForComponent(typeof(MeshFilter))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the vertex count in a variable.")]
		public FsmInt storeCount;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xF2EB60", Offset = "0xF2EB60", VA = "0xF2EB60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xF2EB90", Offset = "0xF2EB90", VA = "0xF2EB90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xF2ECE4", Offset = "0xF2ECE4", VA = "0xF2ECE4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xF2EBBC", Offset = "0xF2EBBC", VA = "0xF2EBBC")]
		private void DoGetVertexCount()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xF2ECE8", Offset = "0xF2ECE8", VA = "0xF2ECE8")]
		public GetVertexCount()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	[Tooltip("Gets the position of a vertex in a GameObject's mesh. Hint: Use GetVertexCount to get the number of vertices in a mesh.")]
	[ActionCategory("Mesh")]
	public class GetVertexPosition : FsmStateAction
	{
		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(MeshFilter))]
		[Tooltip("The GameObject to check.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The index of the vertex.")]
		public FsmInt vertexIndex;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Coordinate system to use.")]
		public Space space;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the vertex position in a variable.")]
		[RequiredField]
		public FsmVector3 storePosition;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the mesh is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xF2ECF0", Offset = "0xF2ECF0", VA = "0xF2ECF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xF2ED24", Offset = "0xF2ED24", VA = "0xF2ED24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xF2EF74", Offset = "0xF2EF74", VA = "0xF2EF74", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xF2ED50", Offset = "0xF2ED50", VA = "0xF2ED50")]
		private void DoGetVertexPosition()
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xF2EF78", Offset = "0xF2EF78", VA = "0xF2EF78")]
		public GetVertexPosition()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	[Tooltip("Applies a force to a Game Object that simulates explosion effects. The explosion force will fall off linearly with distance. Hint: Use the Explosion Action instead to apply an explosion force to all objects in a blast radius.")]
	[ActionCategory(ActionCategory.Physics)]
	public class AddExplosionForce : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to add the explosion force to.")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The center of the explosion. Hint: this is often the position returned from a GetCollisionInfo action.")]
		public FsmVector3 center;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The strength of the explosion.")]
		[RequiredField]
		public FsmFloat force;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The radius of the explosion. Force falls off linearly with distance.")]
		public FsmFloat radius;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Applies the force as if it was applied from beneath the object. This is useful because explosions that throw things up instead of pushing things to the side look cooler. A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position.")]
		public FsmFloat upwardsModifier;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The type of force to apply. See Unity Physics docs.")]
		public ForceMode forceMode;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xF2EF80", Offset = "0xF2EF80", VA = "0xF2EF80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xF2F028", Offset = "0xF2F028", VA = "0xF2F028", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xF2F048", Offset = "0xF2F048", VA = "0xF2F048", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xF2F1D0", Offset = "0xF2F1D0", VA = "0xF2F1D0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xF2F074", Offset = "0xF2F074", VA = "0xF2F074")]
		private void DoAddExplosionForce()
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xF2F1D4", Offset = "0xF2F1D4", VA = "0xF2F1D4")]
		public AddExplosionForce()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	[Tooltip("Adds a force to a Game Object. Use Vector3 variable and/or Float variables for each axis.")]
	[ActionCategory(ActionCategory.Physics)]
	public class AddForce : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The GameObject to apply the force to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Optionally apply the force at a position on the object. This will also add some torque. The position is often returned from MousePick or GetCollisionInfo actions.")]
		public FsmVector3 atPosition;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("A Vector3 force to add. Optionally override any axis with the X, Y, Z parameters.")]
		public FsmVector3 vector;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Force along the X axis. To leave unchanged, set to 'None'.")]
		public FsmFloat x;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Force along the Y axis. To leave unchanged, set to 'None'.")]
		public FsmFloat y;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Force along the Z axis. To leave unchanged, set to 'None'.")]
		public FsmFloat z;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Apply the force in world or local space.")]
		public Space space;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("The type of force to apply. See Unity Physics docs.")]
		public ForceMode forceMode;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xF2F21C", Offset = "0xF2F21C", VA = "0xF2F21C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xF2F35C", Offset = "0xF2F35C", VA = "0xF2F35C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xF2F37C", Offset = "0xF2F37C", VA = "0xF2F37C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xF2F5D0", Offset = "0xF2F5D0", VA = "0xF2F5D0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xF2F3A8", Offset = "0xF2F3A8", VA = "0xF2F3A8")]
		private void DoAddForce()
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xF2F5D4", Offset = "0xF2F5D4", VA = "0xF2F5D4")]
		public AddForce()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	[Tooltip("Adds torque (rotational force) to a Game Object. NOTE: The game object requires a Rigid Body.")]
	[ActionCategory(ActionCategory.Physics)]
	public class AddTorque : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The GameObject to add torque (rotational force) to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("A Vector3 torque. Optionally override any axis with the X, Y, Z parameters.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Torque around the X axis. To leave unchanged, set to 'None'.")]
		public FsmFloat x;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Torque around the Y axis. To leave unchanged, set to 'None'.")]
		public FsmFloat y;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Torque around the Z axis. To leave unchanged, set to 'None'.")]
		public FsmFloat z;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Apply the force in world or local space.")]
		public Space space;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The type of force to apply. See Unity Physics docs.")]
		public ForceMode forceMode;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Apply the force every frame that the State is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xF2F61C", Offset = "0xF2F61C", VA = "0xF2F61C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xF2F70C", Offset = "0xF2F70C", VA = "0xF2F70C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xF2F72C", Offset = "0xF2F72C", VA = "0xF2F72C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xF2F924", Offset = "0xF2F924", VA = "0xF2F924", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xF2F758", Offset = "0xF2F758", VA = "0xF2F758")]
		private void DoAddTorque()
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xF2F928", Offset = "0xF2F928", VA = "0xF2F928")]
		public AddTorque()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Sends the specified event when the owner collides with a tagged object. Optionally store the collider and collision force in variables for later use. NOTE: Collisions are processed after other actions, so this action should be ordered last in the action list.")]
	public class CollisionEvent : FsmStateAction
	{
		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to detect collisions on. Unlike regular MonoBehaviour scripts, PlayMaker lets you easily detect collisions on other objects. This lets you organize your behaviours the way you want.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of collision to detect.")]
		public CollisionType collision;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Tags to collide with.")]
		[UIHint(UIHint.TagMenu)]
		public FsmString collideTag;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if a collision is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the Game Object collided with in a {{Game Object Variable}}.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeCollider;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the force of the collision. NOTE: Use Get Collision Info to get more info about the collision.")]
		public FsmFloat storeForce;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerProxyBase cachedProxy;

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xF2F970", Offset = "0xF2F970", VA = "0xF2F970", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xF2FA0C", Offset = "0xF2FA0C", VA = "0xF2FA0C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xF2FD00", Offset = "0xF2FD00", VA = "0xF2FD00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xF30018", Offset = "0xF30018", VA = "0xF30018", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xF302EC", Offset = "0xF302EC", VA = "0xF302EC")]
		private void UpdateCallback()
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xF2FB54", Offset = "0xF2FB54", VA = "0xF2FB54")]
		private void GetProxyComponent()
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xF2FDFC", Offset = "0xF2FDFC", VA = "0xF2FDFC")]
		private void AddCallback()
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xF300D0", Offset = "0xF300D0", VA = "0xF300D0")]
		private void RemoveCallback()
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xF3030C", Offset = "0xF3030C", VA = "0xF3030C")]
		private void StoreCollisionInfo(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xF303D8", Offset = "0xF303D8", VA = "0xF303D8", Slot = "43")]
		public override void DoCollisionEnter(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xF30460", Offset = "0xF30460", VA = "0xF30460", Slot = "44")]
		public override void DoCollisionStay(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xF304EC", Offset = "0xF304EC", VA = "0xF304EC", Slot = "45")]
		public override void DoCollisionExit(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xF30578", Offset = "0xF30578", VA = "0xF30578", Slot = "56")]
		public override void DoControllerColliderHit(ControllerColliderHit collisionInfo)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xF3062C", Offset = "0xF3062C", VA = "0xF3062C", Slot = "49")]
		public override void DoParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xF30400", Offset = "0xF30400", VA = "0xF30400")]
		private void CollisionEnter(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xF30488", Offset = "0xF30488", VA = "0xF30488")]
		private void CollisionStay(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xF30514", Offset = "0xF30514", VA = "0xF30514")]
		private void CollisionExit(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xF305A0", Offset = "0xF305A0", VA = "0xF305A0")]
		private void ControllerColliderHit(ControllerColliderHit collisionInfo)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xF30654", Offset = "0xF30654", VA = "0xF30654")]
		private void ParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xF306CC", Offset = "0xF306CC", VA = "0xF306CC", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xF306F8", Offset = "0xF306F8", VA = "0xF306F8")]
		public CollisionEvent()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Applies an explosion Force to all Game Objects with a Rigid Body inside a Radius.")]
	public class Explosion : FsmStateAction
	{
		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The world position of the center of the explosion.")]
		public FsmVector3 center;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The strength of the explosion.")]
		[RequiredField]
		public FsmFloat force;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius of the explosion. Force falls of linearly with distance.")]
		[RequiredField]
		public FsmFloat radius;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Applies the force as if it was applied from beneath the object. This is useful because explosions that throw things up instead of pushing things to the side look cooler. A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position.")]
		public FsmFloat upwardsModifier;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The type of force to apply.")]
		public ForceMode forceMode;

		[NonSerialized]
		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Layer)]
		public FsmInt layer;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Layers to effect.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Invert the mask, so you effect all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xF30700", Offset = "0xF30700", VA = "0xF30700", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xF30740", Offset = "0xF30740", VA = "0xF30740", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xF30760", Offset = "0xF30760", VA = "0xF30760", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xF30970", Offset = "0xF30970", VA = "0xF30970", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xF3078C", Offset = "0xF3078C", VA = "0xF3078C")]
		private void DoExplosion()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xF30974", Offset = "0xF30974", VA = "0xF30974")]
		private bool ShouldApplyForce(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xF309DC", Offset = "0xF309DC", VA = "0xF309DC")]
		public Explosion()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	[Tooltip("Find overlaps with GameObject colliders in the scene.")]
	[ActionCategory(ActionCategory.Physics)]
	public class FindOverlaps : ComponentAction<Transform>
	{
		[Token(Token = "0x20002D9")]
		public enum Shape
		{
			[Token(Token = "0x4000C47")]
			Box,
			[Token(Token = "0x4000C48")]
			Sphere,
			[Token(Token = "0x4000C49")]
			Capsule
		}

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("GameObject position to use for the test shape. Set to none to use world origin (0,0,0).")]
		public FsmOwnerDefault position;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Offset position of the shape.")]
		public FsmVector3 offset;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Shape to find overlaps against.")]
		public Shape shape;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Radius of sphere/capsule.")]
		[HideIf("HideRadius")]
		public FsmFloat radius;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Size of box.")]
		[HideIf("HideBox")]
		public FsmVector3 box;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideIf("HideCapsule")]
		[Tooltip("The height of the capsule.")]
		public FsmFloat height;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Maximum number of overlaps to detect.")]
		public FsmInt maxOverlaps;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[ActionSection("Filter")]
		[Tooltip("LayerMask name to filter the overlapping objects")]
		[UIHint(UIHint.LayerMask)]
		public FsmInt layerMask;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Include self in the array.")]
		public FsmBool includeSelf;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause Overlaps can get expensive use the highest repeat interval you can get away with.")]
		public FsmInt repeatInterval;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[Tooltip("Store overlapping GameObjects in an array.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Output")]
		public FsmArray storeOverlapping;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Event to send if overlaps were found.")]
		public FsmEvent foundOverlaps;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Event to send if no overlaps were found.")]
		public FsmEvent noOverlaps;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The color to use for the debug line.")]
		[ActionSection("Debug")]
		public FsmColor debugColor;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Draw a gizmo in the scene view to visualize the shape.")]
		public FsmBool debug;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Collider[] colliders;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int repeat;

		[Token(Token = "0x170000B9")]
		public Vector3 center
		{
			[Token(Token = "0x6000D33")]
			[Address(RVA = "0xF309E4", Offset = "0xF309E4", VA = "0xF309E4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D34")]
			[Address(RVA = "0xF309F0", Offset = "0xF309F0", VA = "0xF309F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public Quaternion orientation
		{
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xF309FC", Offset = "0xF309FC", VA = "0xF309FC")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000D36")]
			[Address(RVA = "0xF30A08", Offset = "0xF30A08", VA = "0xF30A08")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public Vector3 capsulePoint1
		{
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0xF30A14", Offset = "0xF30A14", VA = "0xF30A14")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0xF30A24", Offset = "0xF30A24", VA = "0xF30A24")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public Vector3 capsulePoint2
		{
			[Token(Token = "0x6000D39")]
			[Address(RVA = "0xF30A34", Offset = "0xF30A34", VA = "0xF30A34")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0xF30A44", Offset = "0xF30A44", VA = "0xF30A44")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public int targetMask
		{
			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0xF30A54", Offset = "0xF30A54", VA = "0xF30A54")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0xF30A5C", Offset = "0xF30A5C", VA = "0xF30A5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xF30A64", Offset = "0xF30A64", VA = "0xF30A64", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xF30CA8", Offset = "0xF30CA8", VA = "0xF30CA8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xF30CC8", Offset = "0xF30CC8", VA = "0xF30CC8")]
		public bool HideBox()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xF30CD8", Offset = "0xF30CD8", VA = "0xF30CD8")]
		public bool HideRadius()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xF30CEC", Offset = "0xF30CEC", VA = "0xF30CEC")]
		public bool HideCapsule()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xF30CFC", Offset = "0xF30CFC", VA = "0xF30CFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xF3121C", Offset = "0xF3121C", VA = "0xF3121C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xF30DA0", Offset = "0xF30DA0", VA = "0xF30DA0")]
		private void DoGetOverlap()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xF31234", Offset = "0xF31234", VA = "0xF31234")]
		public void InitShapeCenter()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xF313D4", Offset = "0xF313D4", VA = "0xF313D4")]
		public FindOverlaps()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	[Tooltip("Gets info on the last collision event. Typically used after a COLLISION ENTER, COLLISION STAY, or COLLISION EXIT system event or Collision Event action to get more info on the collision.")]
	[ActionCategory(ActionCategory.Physics)]
	public class GetCollisionInfo : FsmStateAction
	{
		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the GameObject hit.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Get the relative velocity of the collision.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 relativeVelocity;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the relative speed of the collision. Useful for controlling reactions. E.g., selecting an appropriate sound fx.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat relativeSpeed;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Get the world position of the collision contact. Useful for spawning effects etc.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 contactPoint;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the collision normal vector. Useful for aligning spawned effects etc.")]
		public FsmVector3 contactNormal;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the name of the physics material on the Game Object Hit. Useful for triggering different effects. Audio, particles...")]
		public FsmString physicsMaterialName;

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xF3141C", Offset = "0xF3141C", VA = "0xF3141C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xF31484", Offset = "0xF31484", VA = "0xF31484")]
		private void StoreCollisionInfo()
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xF31694", Offset = "0xF31694", VA = "0xF31694", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xF316B0", Offset = "0xF316B0", VA = "0xF316B0")]
		public GetCollisionInfo()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	[Tooltip("Gets info on the last joint break event.")]
	[ActionCategory(ActionCategory.Physics)]
	public class GetJointBreakInfo : FsmStateAction
	{
		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the force that broke the joint.")]
		public FsmFloat breakForce;

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xF316B8", Offset = "0xF316B8", VA = "0xF316B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xF316C4", Offset = "0xF316C4", VA = "0xF316C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xF316F0", Offset = "0xF316F0", VA = "0xF316F0")]
		public GetJointBreakInfo()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	[Tooltip("Gets the Mass of a Game Object's Rigid Body.")]
	[ActionCategory(ActionCategory.Physics)]
	public class GetMass : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that owns the Rigidbody")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the mass in a float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xF316F8", Offset = "0xF316F8", VA = "0xF316F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xF31720", Offset = "0xF31720", VA = "0xF31720", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xF3173C", Offset = "0xF3173C", VA = "0xF3173C")]
		private void DoGetMass()
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xF317E0", Offset = "0xF317E0", VA = "0xF317E0")]
		public GetMass()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Gets info on the last particle collision event. See Unity Particle System docs.")]
	public class GetParticleCollisionInfo : FsmStateAction
	{
		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Get the GameObject hit.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xF31828", Offset = "0xF31828", VA = "0xF31828", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xF31834", Offset = "0xF31834", VA = "0xF31834")]
		private void StoreCollisionInfo()
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xF3185C", Offset = "0xF3185C", VA = "0xF3185C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xF31878", Offset = "0xF31878", VA = "0xF31878")]
		public GetParticleCollisionInfo()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	[Tooltip("Gets info on the last RaycastAll and store in array variables.")]
	[ActionCategory(ActionCategory.Physics)]
	public class GetRaycastAllInfo : FsmStateAction
	{
		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the GameObjects hit in an array variable.")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray storeHitObjects;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ArrayEditor(VariableType.Vector3, "", 0, 0, 65536)]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the world position of all ray hit point and store them in an array variable.")]
		public FsmArray points;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ArrayEditor(VariableType.Vector3, "", 0, 0, 65536)]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the normal at all hit points and store them in an array variable.")]
		public FsmArray normals;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the distance along the ray to all hit points and store them in an array variable.")]
		[ArrayEditor(VariableType.Float, "", 0, 0, 65536)]
		public FsmArray distances;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Warning, this could be affecting performances")]
		public bool everyFrame;

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xF31880", Offset = "0xF31880", VA = "0xF31880", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xF318D0", Offset = "0xF318D0", VA = "0xF318D0")]
		private void StoreRaycastAllInfo()
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xF31C64", Offset = "0xF31C64", VA = "0xF31C64", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xF31C90", Offset = "0xF31C90", VA = "0xF31C90", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xF31C94", Offset = "0xF31C94", VA = "0xF31C94")]
		public GetRaycastAllInfo()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	[Tooltip("Gets info on the last Raycast and store in variables.")]
	[ActionCategory(ActionCategory.Physics)]
	public class GetRaycastHitInfo : FsmStateAction
	{
		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the GameObject hit by the last Raycast and store it in a variable.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Title("Hit Point")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the world position of the ray hit point and store it in a variable.")]
		public FsmVector3 point;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the normal at the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 normal;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		public FsmFloat distance;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xF31C9C", Offset = "0xF31C9C", VA = "0xF31C9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xF31CEC", Offset = "0xF31CEC", VA = "0xF31CEC")]
		private void StoreRaycastInfo()
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xF31E88", Offset = "0xF31E88", VA = "0xF31E88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xF31EB4", Offset = "0xF31EB4", VA = "0xF31EB4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xF31EB8", Offset = "0xF31EB8", VA = "0xF31EB8")]
		public GetRaycastHitInfo()
		{
		}
	}
	[Token(Token = "0x20002E0")]
	[Tooltip("Gets the Speed of a Game Object and stores it in a Float Variable. NOTE: The Game Object must have a RigidBody component.")]
	[ActionCategory(ActionCategory.Physics)]
	public class GetSpeed : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with a RigidBody component.")]
		[CheckForComponent(typeof(Rigidbody))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the speed in a float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xF31EC0", Offset = "0xF31EC0", VA = "0xF31EC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xF31EF0", Offset = "0xF31EF0", VA = "0xF31EF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xF32048", Offset = "0xF32048", VA = "0xF32048", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xF31F1C", Offset = "0xF31F1C", VA = "0xF31F1C")]
		private void DoGetSpeed()
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xF3204C", Offset = "0xF3204C", VA = "0xF3204C")]
		public GetSpeed()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Gets info on the last trigger event. Typically used after a TRIGGER ENTER, TRIGGER STAY, or TRIGGER EXIT system event or a {{Trigger Event}} action. The owner of the FSM must have a trigger collider.")]
	public class GetTriggerInfo : FsmStateAction
	{
		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The game object that collided with the owner's trigger.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Useful for triggering different effects. Audio, particles...")]
		public FsmString physicsMaterialName;

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xF32094", Offset = "0xF32094", VA = "0xF32094", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xF320BC", Offset = "0xF320BC", VA = "0xF320BC")]
		private void StoreTriggerInfo()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xF321A4", Offset = "0xF321A4", VA = "0xF321A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xF321C0", Offset = "0xF321C0", VA = "0xF321C0")]
		public GetTriggerInfo()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Gets the Velocity of a Game Object and stores it in a Vector3 Variable or each Axis in a Float Variable. NOTE: The Game Object must have a Rigid Body.")]
	public class GetVelocity : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object.")]
		[CheckForComponent(typeof(Rigidbody))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the velocity in a Vector3 Variable.")]
		public FsmVector3 vector;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the X component of the velocity in a Float Variable.")]
		public FsmFloat x;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Y component of the velocity in a Float Variable.")]
		public FsmFloat y;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Z component of the velocity in a Float Variable.")]
		public FsmFloat z;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The coordinate space to get the velocity in.")]
		public Space space;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xF321C8", Offset = "0xF321C8", VA = "0xF321C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xF3222C", Offset = "0xF3222C", VA = "0xF3222C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xF32384", Offset = "0xF32384", VA = "0xF32384", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xF32258", Offset = "0xF32258", VA = "0xF32258")]
		private void DoGetVelocity()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xF32388", Offset = "0xF32388", VA = "0xF32388")]
		public GetVelocity()
		{
		}
	}
	[Token(Token = "0x20002E3")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Tests if a rigid body is controlled by physics. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody-isKinematic.html\">IsKinematic</a>.")]
	public class IsKinematic : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The game object to test.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if it is kinematic (not controlled by physics).")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if it is not kinematic (controlled by physics).")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool Variable")]
		public FsmBool store;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xF323D0", Offset = "0xF323D0", VA = "0xF323D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xF32420", Offset = "0xF32420", VA = "0xF32420", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xF32524", Offset = "0xF32524", VA = "0xF32524", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xF3244C", Offset = "0xF3244C", VA = "0xF3244C")]
		private void DoIsKinematic()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xF32528", Offset = "0xF32528", VA = "0xF32528")]
		public IsKinematic()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	[Tooltip("Tests if a rigid body is sleeping. See Unity docs: <a href=\"http://unity3d.com/support/documentation/Components/RigidbodySleeping.html\">Rigidbody Sleeping</a>.")]
	[ActionCategory(ActionCategory.Physics)]
	public class IsSleeping : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The game object to test.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if sleeping.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if not sleeping.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool Variable.")]
		public FsmBool store;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xF32570", Offset = "0xF32570", VA = "0xF32570", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xF325C0", Offset = "0xF325C0", VA = "0xF325C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xF326C4", Offset = "0xF326C4", VA = "0xF326C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xF325EC", Offset = "0xF325EC", VA = "0xF325EC")]
		private void DoIsSleeping()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xF326C8", Offset = "0xF326C8", VA = "0xF326C8")]
		public IsSleeping()
		{
		}
	}
	[Token(Token = "0x20002E5")]
	[Tooltip("Moves a Game Object's Rigid Body to a new position. Unlike Set Position this will respect physics collisions.")]
	[ActionCategory(ActionCategory.Physics)]
	public class MovePosition : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to move.")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Movement vector.")]
		public FsmVector3 vector;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Movement in x axis.")]
		public FsmFloat x;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Movement in y axis.")]
		public FsmFloat y;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Movement in z axis.")]
		public FsmFloat z;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Coordinate space to move in.")]
		public Space space;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Keep running every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xF32710", Offset = "0xF32710", VA = "0xF32710", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xF32810", Offset = "0xF32810", VA = "0xF32810", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xF32830", Offset = "0xF32830", VA = "0xF32830", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xF3285C", Offset = "0xF3285C", VA = "0xF3285C")]
		private void DoMovePosition()
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xF32A80", Offset = "0xF32A80", VA = "0xF32A80")]
		public MovePosition()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Casts a Ray against all Colliders in the scene. Use either a Game Object or Vector3 world position as the origin of the ray. Use {{Get Raycast Info}} to get more detailed info.")]
	public class Raycast : FsmStateAction
	{
		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector3 world position. \nOr use Game Object parameter.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector3 direction vector")]
		public FsmVector3 direction;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Cast the ray in world or local space. Note if no Game Object is specified, the direction is in world space.")]
		public Space space;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public FsmFloat distance;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if the ray hits an object.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmEvent hitEvent;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set a bool variable to true if hit something, otherwise false.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidHit;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store the game object hit in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeHitObject;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the world position of the ray hit point and store it in a variable.")]
		public FsmVector3 storeHitPoint;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the normal at the hit point and store it in a variable.\nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		public FsmVector3 storeHitNormal;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeHitDistance;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[ActionSection("Filter")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause raycasts can get expensive use the highest repeat interval you can get away with.")]
		public FsmInt repeatInterval;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[ActionSection("Debug")]
		[Tooltip("The color to use for the debug line.")]
		public FsmColor debugColor;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Draw a debug line. Note: Check Gizmos in the Game View to see it in game.")]
		public FsmBool debug;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int repeat;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform cachedTransform;

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xF32AC8", Offset = "0xF32AC8", VA = "0xF32AC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xF32CBC", Offset = "0xF32CBC", VA = "0xF32CBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xF3322C", Offset = "0xF3322C", VA = "0xF3322C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xF32CF8", Offset = "0xF32CF8", VA = "0xF32CF8")]
		private void DoRaycast()
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xF33244", Offset = "0xF33244", VA = "0xF33244")]
		public Raycast()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Casts a Ray against all Colliders in the scene. Use either a GameObject or Vector3 world position as the origin of the ray. Use GetRaycastAllInfo to get more detailed info.")]
	public class RaycastAll : FsmStateAction
	{
		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static RaycastHit[] RaycastAllHitInfo;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector3 world position. \nOr use Game Object parameter.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector3 direction vector")]
		public FsmVector3 direction;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Cast the ray in world or local space. Note if no Game Object is specified, the direction is in world space.")]
		public Space space;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public FsmFloat distance;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[Tooltip("Event to send if the ray hits an object.")]
		public FsmEvent hitEvent;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set a bool variable to true if hit something, otherwise false.")]
		public FsmBool storeDidHit;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store the GameObjects hit in an array variable.")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray storeHitObjects;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the world position of the ray hit point and store it in a variable.")]
		public FsmVector3 storeHitPoint;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the normal at the hit point and store it in a variable.\nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		public FsmVector3 storeHitNormal;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		public FsmFloat storeHitDistance;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[ActionSection("Filter")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause raycasts can get expensive use the highest repeat interval you can get away with.")]
		public FsmInt repeatInterval;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The color to use for the debug line.")]
		[ActionSection("Debug")]
		public FsmColor debugColor;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Draw a debug line. Note: Check Gizmos in the Game View to see it in game.")]
		public FsmBool debug;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int repeat;

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xF3324C", Offset = "0xF3324C", VA = "0xF3324C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xF33488", Offset = "0xF33488", VA = "0xF33488", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xF339D8", Offset = "0xF339D8", VA = "0xF339D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xF334C4", Offset = "0xF334C4", VA = "0xF334C4")]
		private void DoRaycast()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xF339F0", Offset = "0xF339F0", VA = "0xF339F0")]
		public RaycastAll()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	[Tooltip("Sets the velocity of a CharacterController on a GameObject. To leave any axis unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Character)]
	public class SetControllerVelocity : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject with the Character Controller component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set velocity using Vector3 variable and/or individual channels below.")]
		public FsmVector3 vector;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Velocity in X axis.")]
		public FsmFloat x;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Velocity in Y axis.")]
		public FsmFloat y;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Velocity in Z axis.")]
		public FsmFloat z;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("You can set velocity in world or local space.")]
		public Space space;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Set the velocity every frame.")]
		public bool everyFrame;

		[Token(Token = "0x170000BE")]
		private CharacterController controller
		{
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0xF339F8", Offset = "0xF339F8", VA = "0xF339F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xF33A00", Offset = "0xF33A00", VA = "0xF33A00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xF33B00", Offset = "0xF33B00", VA = "0xF33B00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xF33B2C", Offset = "0xF33B2C", VA = "0xF33B2C")]
		private void DoSetVelocity()
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xF33D10", Offset = "0xF33D10", VA = "0xF33D10")]
		public SetControllerVelocity()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	[HelpUrl("http://hutonggames.com/playmakerforum/index.php?topic=4734.0")]
	[Tooltip("Sets the Drag of a Game Object's Rigid Body.")]
	[ActionCategory(ActionCategory.Physics)]
	public class SetDrag : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody))]
		[RequiredField]
		[Tooltip("The GameObject that owns the RigidBody.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 10f)]
		[RequiredField]
		[Tooltip("Set the Drag.")]
		public FsmFloat drag;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xF33D58", Offset = "0xF33D58", VA = "0xF33D58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xF33D8C", Offset = "0xF33D8C", VA = "0xF33D8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xF33E74", Offset = "0xF33E74", VA = "0xF33E74", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xF33DB8", Offset = "0xF33DB8", VA = "0xF33DB8")]
		private void DoSetDrag()
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xF33E78", Offset = "0xF33E78", VA = "0xF33E78")]
		public SetDrag()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	[Tooltip("Sets the gravity vector, or individual axis.")]
	[ActionCategory(ActionCategory.Physics)]
	public class SetGravity : FsmStateAction
	{
		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set Gravity using a Vector3. Or set override individual axis below.")]
		public FsmVector3 vector;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("X amount.")]
		public FsmFloat x;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Y amount. The most common up/down axis for gravity.")]
		public FsmFloat y;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Z amount.")]
		public FsmFloat z;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Update gravity every frame. Useful if you're changing gravity over a period of time.")]
		public bool everyFrame;

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xF33EC0", Offset = "0xF33EC0", VA = "0xF33EC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xF33FAC", Offset = "0xF33FAC", VA = "0xF33FAC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xF340A0", Offset = "0xF340A0", VA = "0xF340A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xF33FD8", Offset = "0xF33FD8", VA = "0xF33FD8")]
		private void DoSetGravity()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xF340A4", Offset = "0xF340A4", VA = "0xF340A4")]
		public SetGravity()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Controls whether physics affects the game object. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody-isKinematic.html\">IsKinematic</a>.")]
	public class SetIsKinematic : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object to set.")]
		[CheckForComponent(typeof(Rigidbody))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Set is kinematic true/false.")]
		public FsmBool isKinematic;

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xF340AC", Offset = "0xF340AC", VA = "0xF340AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xF340E0", Offset = "0xF340E0", VA = "0xF340E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xF340FC", Offset = "0xF340FC", VA = "0xF340FC")]
		private void DoSetIsKinematic()
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xF341BC", Offset = "0xF341BC", VA = "0xF341BC")]
		public SetIsKinematic()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	[Tooltip("Connect a joint to a game object.")]
	[ActionCategory(ActionCategory.Physics)]
	public class SetJointConnectedBody : FsmStateAction
	{
		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Joint))]
		[Tooltip("The joint to connect. Requires a Joint component.")]
		public FsmOwnerDefault joint;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The game object to connect to the Joint. Set to none to connect the Joint to the world.")]
		public FsmGameObject rigidBody;

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xF34204", Offset = "0xF34204", VA = "0xF34204", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xF3422C", Offset = "0xF3422C", VA = "0xF3422C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xF3438C", Offset = "0xF3438C", VA = "0xF3438C")]
		public SetJointConnectedBody()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	[Tooltip("Sets the mass of a game object's rigid body. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody-mass.html\">Rigidbody.Mass</a>")]
	[ActionCategory(ActionCategory.Physics)]
	public class SetMass : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("A GameObject with a RigidBody component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[HasFloatSlider(0.1f, 10f)]
		[Tooltip("Set the mass. Unity recommends a mass between 0.1 and 10.")]
		public FsmFloat mass;

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xF34394", Offset = "0xF34394", VA = "0xF34394", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xF343C8", Offset = "0xF343C8", VA = "0xF343C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xF343E4", Offset = "0xF343E4", VA = "0xF343E4")]
		private void DoSetMass()
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xF344A0", Offset = "0xF344A0", VA = "0xF344A0")]
		public SetMass()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	[Tooltip("Sets the velocity of a game object with a rigid body. To leave any axis unchanged, set variable to 'None'.\nIn most cases you should not modify the velocity directly, as this can result in unrealistic behaviour. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody-velocity.html\">Rigidbody.velocity</a>.")]
	[ActionCategory(ActionCategory.Physics)]
	public class SetVelocity : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The Game Object with the RigidBody component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set velocity using Vector3 variable and/or individual channels below.")]
		public FsmVector3 vector;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Velocity in X axis.")]
		public FsmFloat x;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Velocity in Y axis.")]
		public FsmFloat y;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Velocity in Z axis.")]
		public FsmFloat z;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("You can set velocity in world or local space.")]
		public Space space;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Set the velocity every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xF344E8", Offset = "0xF344E8", VA = "0xF344E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xF345E8", Offset = "0xF345E8", VA = "0xF345E8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xF34608", Offset = "0xF34608", VA = "0xF34608", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xF34838", Offset = "0xF34838", VA = "0xF34838", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xF34634", Offset = "0xF34634", VA = "0xF34634")]
		private void DoSetVelocity()
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xF34864", Offset = "0xF34864", VA = "0xF34864")]
		public SetVelocity()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	[Tooltip("Forces a rigid body to sleep at least one frame. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.Sleep.html\">Rigidbody.sleep</a>.")]
	[ActionCategory(ActionCategory.Physics)]
	public class Sleep : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody))]
		[RequiredField]
		[Tooltip("A Game Object with a Rigid Body.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xF348AC", Offset = "0xF348AC", VA = "0xF348AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xF348B8", Offset = "0xF348B8", VA = "0xF348B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xF348D4", Offset = "0xF348D4", VA = "0xF348D4")]
		private void DoSleep()
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xF34974", Offset = "0xF34974", VA = "0xF34974")]
		public Sleep()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	[Tooltip("Translates a Game Object's RigidBody. Unlike Translate this will respect physics collisions.")]
	[ActionCategory(ActionCategory.Physics)]
	public class TranslatePosition : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The GameObject to move.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Movement vector.")]
		public FsmVector3 vector;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Movement in x axis.")]
		public FsmFloat x;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Movement in y axis.")]
		public FsmFloat y;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Movement in z axis.")]
		public FsmFloat z;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Coordinate space to move in.")]
		public Space space;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Translate over one second")]
		public bool perSecond;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		[Tooltip("Keep running every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xF349BC", Offset = "0xF349BC", VA = "0xF349BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xF34AC0", Offset = "0xF34AC0", VA = "0xF34AC0", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xF34AE0", Offset = "0xF34AE0", VA = "0xF34AE0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0xF34B0C", Offset = "0xF34B0C", VA = "0xF34B0C")]
		private void DoMovePosition()
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0xF34D58", Offset = "0xF34D58", VA = "0xF34D58")]
		public TranslatePosition()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Sends an event when the owner collides with a tagged trigger (see Unity Tag and Trigger docs). Optionally send an event and store the collider for later use. NOTE: Collisions are processed after other actions, so this action should be ordered last in the list.")]
	public class TriggerEvent : FsmStateAction
	{
		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to detect trigger events on.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of trigger event to detect.")]
		public TriggerType trigger;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.TagMenu)]
		[Tooltip("Only collide with triggers that have this tag.")]
		public FsmString collideTag;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the trigger event is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the GameObject that collided with the Owner of this FSM.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeCollider;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerProxyBase cachedProxy;

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xF34DA0", Offset = "0xF34DA0", VA = "0xF34DA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xF34E2C", Offset = "0xF34E2C", VA = "0xF34E2C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xF35088", Offset = "0xF35088", VA = "0xF35088", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xF352C4", Offset = "0xF352C4", VA = "0xF352C4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xF354BC", Offset = "0xF354BC", VA = "0xF354BC")]
		private void UpdateCallback()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xF34F30", Offset = "0xF34F30", VA = "0xF34F30")]
		private void GetProxyComponent()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xF35184", Offset = "0xF35184", VA = "0xF35184")]
		private void AddCallback()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xF3537C", Offset = "0xF3537C", VA = "0xF3537C")]
		private void RemoveCallback()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xF354DC", Offset = "0xF354DC", VA = "0xF354DC")]
		private void StoreCollisionInfo(Collider collisionInfo)
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xF35510", Offset = "0xF35510", VA = "0xF35510", Slot = "46")]
		public override void DoTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xF35598", Offset = "0xF35598", VA = "0xF35598", Slot = "47")]
		public override void DoTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xF35624", Offset = "0xF35624", VA = "0xF35624", Slot = "48")]
		public override void DoTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xF35538", Offset = "0xF35538", VA = "0xF35538")]
		private void TriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xF355C0", Offset = "0xF355C0", VA = "0xF355C0")]
		private void TriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xF3564C", Offset = "0xF3564C", VA = "0xF3564C")]
		private void TriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xF356B0", Offset = "0xF356B0", VA = "0xF356B0", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xF356DC", Offset = "0xF356DC", VA = "0xF356DC")]
		public TriggerEvent()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Sets whether a Game Object's Rigidbody is affected by Gravity.")]
	public class UseGravity : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("A Game Object with a RigidBody component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Enable/disable gravity for the Game Object.")]
		[RequiredField]
		public FsmBool useGravity;

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xF356E4", Offset = "0xF356E4", VA = "0xF356E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xF35718", Offset = "0xF35718", VA = "0xF35718", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xF35734", Offset = "0xF35734", VA = "0xF35734")]
		private void DoUseGravity()
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xF357F4", Offset = "0xF357F4", VA = "0xF357F4")]
		public UseGravity()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	[SeeAlso("<a href =\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.WakeUp.html\">Rigidbody.WakeUp</a>")]
	[Tooltip("Rigid bodies start sleeping when they come to rest. This action wakes up all rigid bodies in the scene. E.g., if you Set Gravity and want objects at rest to respond.See Unity Docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.WakeUp.html\">Rigidbody.WakeUp</a>.")]
	[ActionCategory(ActionCategory.Physics)]
	public class WakeAllRigidBodies : FsmStateAction
	{
		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Do it every frame - use with caution! Sleeping is an important physics optimization!")]
		public bool everyFrame;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody[] bodies;

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xF3583C", Offset = "0xF3583C", VA = "0xF3583C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xF35844", Offset = "0xF35844", VA = "0xF35844", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xF35A9C", Offset = "0xF35A9C", VA = "0xF35A9C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xF35960", Offset = "0xF35960", VA = "0xF35960")]
		private void DoWakeAll()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xF35AA0", Offset = "0xF35AA0", VA = "0xF35AA0")]
		public WakeAllRigidBodies()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	[Tooltip("Forces a Game Object's Rigid Body to wake up. See Unity Docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.WakeUp.html\">Rigidbody.WakeUp</a>.")]
	[SeeAlso("<a href =\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.WakeUp.html\">Rigidbody.WakeUp</a>")]
	[ActionCategory(ActionCategory.Physics)]
	public class WakeUp : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object to wake up.")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xF35AA8", Offset = "0xF35AA8", VA = "0xF35AA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xF35AB4", Offset = "0xF35AB4", VA = "0xF35AB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xF35AD0", Offset = "0xF35AD0", VA = "0xF35AD0")]
		private void DoWakeUp()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xF35B84", Offset = "0xF35B84", VA = "0xF35B84")]
		public WakeUp()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	[ActionCategory(ActionCategory.Physics2D)]
	[SeeAlso("To add a force in local space use {{Add Relative Force 2d}}")]
	[Tooltip("Adds a 2d force to a Game Object. Use Vector2 variable and/or Float variables for each axis.")]
	public class AddForce2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		[Tooltip("The GameObject to apply the force to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Option for applying the force")]
		public ForceMode2D forceMode;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Optionally apply the force at a position on the object. This will also add some torque. The position is often returned from MousePick or GetCollision2dInfo actions.")]
		public FsmVector2 atPosition;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("A Vector2 force to add. Optionally override any axis with the X, Y parameters.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Force along the X axis. To leave unchanged, set to 'None'.")]
		public FsmFloat x;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Force along the Y axis. To leave unchanged, set to 'None'.")]
		public FsmFloat y;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("A Vector3 force to add. z is ignored")]
		public FsmVector3 vector3;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xF35BCC", Offset = "0xF35BCC", VA = "0xF35BCC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xF35D20", Offset = "0xF35D20", VA = "0xF35D20", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xF35D40", Offset = "0xF35D40", VA = "0xF35D40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xF35F44", Offset = "0xF35F44", VA = "0xF35F44", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xF35D6C", Offset = "0xF35D6C", VA = "0xF35D6C")]
		private void DoAddForce()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xF35F48", Offset = "0xF35F48", VA = "0xF35F48")]
		public AddForce2d()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	[Tooltip("Adds a relative 2d force to a Game Object. Use Vector2 variable and/or Float variables for each axis.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class AddRelativeForce2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to apply the force to.")]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Option for applying the force")]
		public ForceMode2D forceMode;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("A Vector2 force to add. Optionally override any axis with the X, Y parameters.")]
		public FsmVector2 vector;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Force along the X axis. To leave unchanged, set to 'None'.")]
		public FsmFloat x;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Force along the Y axis. To leave unchanged, set to 'None'.")]
		public FsmFloat y;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("A Vector3 force to add. z is ignored")]
		public FsmVector3 vector3;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xF35F90", Offset = "0xF35F90", VA = "0xF35F90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xF360A4", Offset = "0xF360A4", VA = "0xF360A4", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0xF360C4", Offset = "0xF360C4", VA = "0xF360C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xF36280", Offset = "0xF36280", VA = "0xF36280", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xF360F0", Offset = "0xF360F0", VA = "0xF360F0")]
		private void DoAddRelativeForce()
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xF36284", Offset = "0xF36284", VA = "0xF36284")]
		public AddRelativeForce2d()
		{
		}
	}
	[Token(Token = "0x20002F7")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Adds a 2d torque (rotational force) to a Game Object.")]
	public class AddTorque2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to add torque to.")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Option for applying the force")]
		public ForceMode2D forceMode;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Torque")]
		public FsmFloat torque;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xF362CC", Offset = "0xF362CC", VA = "0xF362CC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xF362EC", Offset = "0xF362EC", VA = "0xF362EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xF3631C", Offset = "0xF3631C", VA = "0xF3631C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xF36408", Offset = "0xF36408", VA = "0xF36408", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xF36348", Offset = "0xF36348", VA = "0xF36348")]
		private void DoAddTorque()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xF3640C", Offset = "0xF3640C", VA = "0xF3640C")]
		public AddTorque2d()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Detect collisions between the Owner of this FSM and other Game Objects that have RigidBody2D components. NOTE: The system events, COLLISION ENTER 2D, COLLISION STAY 2D, and COLLISION EXIT 2D are sent automatically on collisions with any object. Use this action instead to filter collisions by Tag.")]
	public class Collision2dEvent : FsmStateAction
	{
		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to detect collisions on.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of collision to detect.")]
		public Collision2DType collision;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If true, Collision that are not enabled will be ignored.")]
		public FsmBool ignoreDisabled;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.TagMenu)]
		[Tooltip("Filter by Tag.")]
		public FsmString collideTag;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if a collision is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the GameObject that collided with the Owner of this FSM.")]
		public FsmGameObject storeCollider;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the force of the collision. NOTE: Use Get Collision 2D Info to get more info about the collision.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeForce;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerProxyBase cachedProxy;

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xF36454", Offset = "0xF36454", VA = "0xF36454", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xF364FC", Offset = "0xF364FC", VA = "0xF364FC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xF367B0", Offset = "0xF367B0", VA = "0xF367B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xF36A60", Offset = "0xF36A60", VA = "0xF36A60", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xF36CCC", Offset = "0xF36CCC", VA = "0xF36CCC")]
		private void UpdateCallback()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xF36628", Offset = "0xF36628", VA = "0xF36628")]
		private void GetProxyComponent()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xF368AC", Offset = "0xF368AC", VA = "0xF368AC")]
		private void AddCallback()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xF36B18", Offset = "0xF36B18", VA = "0xF36B18")]
		private void RemoveCallback()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xF36CEC", Offset = "0xF36CEC", VA = "0xF36CEC")]
		private void StoreCollisionInfo(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xF36DA4", Offset = "0xF36DA4", VA = "0xF36DA4", Slot = "50")]
		public override void DoCollisionEnter2D(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xF36E58", Offset = "0xF36E58", VA = "0xF36E58", Slot = "51")]
		public override void DoCollisionStay2D(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xF36F10", Offset = "0xF36F10", VA = "0xF36F10", Slot = "52")]
		public override void DoCollisionExit2D(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xF36FC8", Offset = "0xF36FC8", VA = "0xF36FC8", Slot = "49")]
		public override void DoParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xF36DCC", Offset = "0xF36DCC", VA = "0xF36DCC")]
		private void CollisionEnter2D(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xF36E80", Offset = "0xF36E80", VA = "0xF36E80")]
		private void CollisionStay2D(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xF36F38", Offset = "0xF36F38", VA = "0xF36F38")]
		private void CollisionExit2D(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xF36FF0", Offset = "0xF36FF0", VA = "0xF36FF0")]
		private void ParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xF37068", Offset = "0xF37068", VA = "0xF37068", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xF37094", Offset = "0xF37094", VA = "0xF37094")]
		public Collision2dEvent()
		{
		}
	}
	[Token(Token = "0x20002F9")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Gets info on the last collision 2D event and store in variables. See Unity and PlayMaker docs on Unity 2D physics.")]
	public class GetCollision2dInfo : FsmStateAction
	{
		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the GameObject hit.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the enabled state collision. if false, collision had no effect, like when using the PlatformEffector2D component set to one way")]
		public FsmBool enabled;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the relative velocity of the collision.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 relativeVelocity;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Get the relative speed of the collision. Useful for controlling reactions. E.g., selecting an appropriate sound fx.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat relativeSpeed;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Get the world position of the collision contact. Useful for spawning effects etc.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 contactPoint;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Get the 2d world position of the collision contact. Useful for spawning effects etc.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 contactPoint2d;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the collision normal vector. Useful for aligning spawned effects etc.")]
		public FsmVector3 contactNormal;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Get the 2d collision normal vector. Useful for aligning spawned effects etc.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 contactNormal2d;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The number of separate shaped regions in the collider.")]
		[UIHint(UIHint.Variable)]
		public FsmInt shapeCount;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the name of the physics 2D material of the colliding GameObject. Useful for triggering different effects. Audio, particles...")]
		public FsmString physics2dMaterialName;

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xF3709C", Offset = "0xF3709C", VA = "0xF3709C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xF37144", Offset = "0xF37144", VA = "0xF37144")]
		private void StoreCollisionInfo()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xF374F8", Offset = "0xF374F8", VA = "0xF374F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xF37514", Offset = "0xF37514", VA = "0xF37514")]
		public GetCollision2dInfo()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Gets info on the last joint break 2D event.")]
	public class GetJointBreak2dInfo : FsmStateAction
	{
		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Get the broken joint.")]
		[ObjectType(typeof(Joint2D))]
		[UIHint(UIHint.Variable)]
		public FsmObject brokenJoint;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the reaction force exerted by the broken joint. Unity 5.3+")]
		public FsmVector2 reactionForce;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the magnitude of the reaction force exerted by the broken joint. Unity 5.3+")]
		[UIHint(UIHint.Variable)]
		public FsmFloat reactionForceMagnitude;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the reaction torque exerted by the broken joint. Unity 5.3+")]
		public FsmFloat reactionTorque;

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xF3751C", Offset = "0xF3751C", VA = "0xF3751C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xF37554", Offset = "0xF37554", VA = "0xF37554")]
		private void StoreInfo()
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xF376A8", Offset = "0xF376A8", VA = "0xF376A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xF376C4", Offset = "0xF376C4", VA = "0xF376C4")]
		public GetJointBreak2dInfo()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	[Tooltip("Gets the Mass of a Game Object's Rigid Body 2D.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetMass2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with a Rigidbody2D attached.")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the mass of gameObject.")]
		public FsmFloat storeResult;

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xF376CC", Offset = "0xF376CC", VA = "0xF376CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xF376F4", Offset = "0xF376F4", VA = "0xF376F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xF37710", Offset = "0xF37710", VA = "0xF37710")]
		private void DoGetMass()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xF377B4", Offset = "0xF377B4", VA = "0xF377B4")]
		public GetMass2d()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Iterate through a list of all colliders detected by a LineCastThe colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders within the area.")]
	public class GetNextLineCast2d : FsmStateAction
	{
		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		[ActionSection("Setup")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector2 world position. \nOr use fromGameObject parameter. If both define, will add fromPosition to the fromGameObject position")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("End ray at game object position. \nOr use From Position parameter.")]
		public FsmGameObject toGameObject;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("End ray at a vector2 world position. \nOr use fromGameObject parameter. If both define, will add toPosition to the ToGameObject position")]
		public FsmVector2 toPosition;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		public FsmBool resetFlag;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.Layer)]
		[ActionSection("Filter")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the number of colliders found for this overlap.")]
		public FsmInt collidersCount;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Store the next collider in a GameObject variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Get the 2d position of the next ray hit point and store it in a variable.")]
		public FsmVector2 storeNextHitPoint;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Get the 2d normal at the next hit point and store it in a variable.\nNote, this is a direction vector not a rotation.")]
		public FsmVector2 storeNextHitNormal;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Get the distance along the ray to the next hit point and store it in a variable.")]
		public FsmFloat storeNextHitDistance;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RaycastHit2D[] hits;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int colliderCount;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private int nextColliderIndex;

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xF377FC", Offset = "0xF377FC", VA = "0xF377FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xF379FC", Offset = "0xF379FC", VA = "0xF379FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xF37D68", Offset = "0xF37D68", VA = "0xF37D68")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xF37A8C", Offset = "0xF37A8C", VA = "0xF37A8C")]
		private RaycastHit2D[] GetLineCastAll()
		{
			return null;
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xF37FC8", Offset = "0xF37FC8", VA = "0xF37FC8")]
		public GetNextLineCast2d()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Iterate through a list of all colliders that fall within a rectangular area.The colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders within the area.")]
	public class GetNextOverlapArea2d : FsmStateAction
	{
		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Setup")]
		[Tooltip("First corner of the rectangle area using the game object position. \nOr use firstCornerPosition parameter.")]
		public FsmOwnerDefault firstCornerGameObject;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("First Corner of the rectangle area as a world position. \nOr use FirstCornerGameObject parameter. If both define, will add firstCornerPosition to the FirstCornerGameObject position")]
		public FsmVector2 firstCornerPosition;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Second corner of the rectangle area using the game object position. \nOr use secondCornerPosition parameter.")]
		public FsmGameObject secondCornerGameObject;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Second Corner rectangle area as a world position. \nOr use SecondCornerGameObject parameter. If both define, will add secondCornerPosition to the SecondCornerGameObject position")]
		public FsmVector2 secondCornerPosition;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		public FsmBool resetFlag;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ActionSection("Filter")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ActionSection("Result")]
		[Tooltip("Store the number of colliders found for this overlap.")]
		[UIHint(UIHint.Variable)]
		public FsmInt collidersCount;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the next collider in a GameObject variable.")]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Collider2D[] colliders;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int colliderCount;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int nextColliderIndex;

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xF37FD0", Offset = "0xF37FD0", VA = "0xF37FD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xF381A0", Offset = "0xF381A0", VA = "0xF381A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xF38504", Offset = "0xF38504", VA = "0xF38504")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xF38230", Offset = "0xF38230", VA = "0xF38230")]
		private Collider2D[] GetOverlapAreaAll()
		{
			return null;
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xF385D0", Offset = "0xF385D0", VA = "0xF385D0")]
		public GetNextOverlapArea2d()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Iterate through a list of all colliders that fall within a circular area.The colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders within the area.")]
	public class GetNextOverlapCircle2d : FsmStateAction
	{
		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Setup")]
		[Tooltip("Center of the circle area. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("CEnter of the circle area as a world position. \nOr use fromGameObject parameter. If both define, will add fromPosition to the fromGameObject position")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The circle radius")]
		public FsmFloat radius;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		public FsmBool resetFlag;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		[ActionSection("Filter")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the number of colliders found for this overlap.")]
		[ActionSection("Result")]
		public FsmInt collidersCount;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the next collider in a GameObject variable.")]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Collider2D[] colliders;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int colliderCount;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int nextColliderIndex;

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xF385D8", Offset = "0xF385D8", VA = "0xF385D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xF38788", Offset = "0xF38788", VA = "0xF38788", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xF38A88", Offset = "0xF38A88", VA = "0xF38A88")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xF38818", Offset = "0xF38818", VA = "0xF38818")]
		private Collider2D[] GetOverlapCircleAll()
		{
			return null;
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xF38B70", Offset = "0xF38B70", VA = "0xF38B70")]
		public GetNextOverlapCircle2d()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Iterate through a list of all colliders that overlap a point in space.The colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders overlap this point.")]
	public class GetNextOverlapPoint2d : FsmStateAction
	{
		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Point using the gameObject position. \nOr use From Position parameter.")]
		[ActionSection("Setup")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Point as a world position. \nOr use gameObject parameter. If both define, will add position to the gameObject position")]
		public FsmVector2 position;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		public FsmBool resetFlag;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ActionSection("Filter")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ActionSection("Result")]
		[Tooltip("Store the number of colliders found for this overlap.")]
		[UIHint(UIHint.Variable)]
		public FsmInt collidersCount;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the next collider in a GameObject variable.")]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider2D[] colliders;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int colliderCount;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int nextColliderIndex;

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xF38B78", Offset = "0xF38B78", VA = "0xF38B78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xF38D0C", Offset = "0xF38D0C", VA = "0xF38D0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xF38FD0", Offset = "0xF38FD0", VA = "0xF38FD0")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xF38D9C", Offset = "0xF38D9C", VA = "0xF38D9C")]
		private Collider2D[] GetOverlapPointAll()
		{
			return null;
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xF3909C", Offset = "0xF3909C", VA = "0xF3909C")]
		public GetNextOverlapPoint2d()
		{
		}
	}
	[Token(Token = "0x2000300")]
	[Tooltip("Iterate through a list of all colliders detected by a RayCastThe colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders within the area.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetNextRayCast2d : FsmStateAction
	{
		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Setup")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector2 world position. \nOr use Game Object parameter.")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector2 direction vector")]
		public FsmVector2 direction;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Cast the ray in world or local space. Note if no Game Object is specified, the direction is in world space.")]
		public Space space;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public FsmFloat distance;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		[UIHint(UIHint.Variable)]
		public FsmBool resetFlag;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Filter")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Store the number of colliders found for this overlap.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmInt collidersCount;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the next collider in a GameObject variable.")]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the 2d position of the next ray hit point and store it in a variable.")]
		public FsmVector2 storeNextHitPoint;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Get the 2d normal at the next hit point and store it in a variable.\nNote, this is a direction vector not a rotation.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeNextHitNormal;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Get the distance along the ray to the next hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeNextHitDistance;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the fraction along the ray to the hit point and store it in a variable. If the ray's direction vector is normalized then this value is simply the distance between the origin and the hit point. If the direction is not normalized then this distance is expressed as a 'fraction' (which could be greater than 1) of the vector's magnitude.")]
		public FsmFloat storeNextHitFraction;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RaycastHit2D[] hits;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int colliderCount;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private int nextColliderIndex;

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xF390A4", Offset = "0xF390A4", VA = "0xF390A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xF392AC", Offset = "0xF392AC", VA = "0xF392AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xF39784", Offset = "0xF39784", VA = "0xF39784")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xF3933C", Offset = "0xF3933C", VA = "0xF3933C")]
		private RaycastHit2D[] GetRayCastAll()
		{
			return null;
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xF39A1C", Offset = "0xF39A1C", VA = "0xF39A1C")]
		public GetNextRayCast2d()
		{
		}
	}
	[Token(Token = "0x2000301")]
	[Tooltip("Gets info on the last 2d Raycast or LineCast and store in variables.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetRayCastHit2dInfo : FsmStateAction
	{
		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the GameObject hit by the last Raycast and store it in a variable.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Title("Hit Point")]
		[Tooltip("Get the world position of the ray hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 point;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the normal at the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 normal;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat distance;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xF39A24", Offset = "0xF39A24", VA = "0xF39A24", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xF39A74", Offset = "0xF39A74", VA = "0xF39A74", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xF39BF8", Offset = "0xF39BF8", VA = "0xF39BF8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xF39AA0", Offset = "0xF39AA0", VA = "0xF39AA0")]
		private void StoreRaycastInfo()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xF39BFC", Offset = "0xF39BFC", VA = "0xF39BFC")]
		public GetRayCastHit2dInfo()
		{
		}
	}
	[Token(Token = "0x2000302")]
	[Tooltip("Gets the 2d Speed of a Game Object and stores it in a Float Variable. NOTE: The Game Object must have a rigid body 2D.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetSpeed2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The speed, or in technical terms: velocity magnitude")]
		public FsmFloat storeResult;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xF39C04", Offset = "0xF39C04", VA = "0xF39C04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xF39C34", Offset = "0xF39C34", VA = "0xF39C34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xF39D70", Offset = "0xF39D70", VA = "0xF39D70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xF39C60", Offset = "0xF39C60", VA = "0xF39C60")]
		private void DoGetSpeed()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xF39D74", Offset = "0xF39D74", VA = "0xF39D74")]
		public GetSpeed2d()
		{
		}
	}
	[Token(Token = "0x2000303")]
	[Tooltip("Gets info on the last Trigger 2d event and store in variables.  See Unity and PlayMaker docs on Unity 2D physics.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetTrigger2dInfo : FsmStateAction
	{
		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Get the GameObject hit.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The number of separate shaped regions in the collider.")]
		public FsmInt shapeCount;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Useful for triggering different effects. Audio, particles...")]
		public FsmString physics2dMaterialName;

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xF39DBC", Offset = "0xF39DBC", VA = "0xF39DBC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xF39DF4", Offset = "0xF39DF4", VA = "0xF39DF4")]
		private void StoreTriggerInfo()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xF39F64", Offset = "0xF39F64", VA = "0xF39F64", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xF39F80", Offset = "0xF39F80", VA = "0xF39F80")]
		public GetTrigger2dInfo()
		{
		}
	}
	[Token(Token = "0x2000304")]
	[Tooltip("Gets the 2d Velocity of a Game Object and stores it in a Vector2 Variable or each Axis in a Float Variable. NOTE: The Game Object must have a Rigid Body 2D.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetVelocity2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The velocity")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The x value of the velocity")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The y value of the velocity")]
		public FsmFloat y;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The space reference to express the velocity")]
		public Space space;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xF39F88", Offset = "0xF39F88", VA = "0xF39F88", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xF39FDC", Offset = "0xF39FDC", VA = "0xF39FDC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xF3A118", Offset = "0xF3A118", VA = "0xF3A118", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xF3A008", Offset = "0xF3A008", VA = "0xF3A008")]
		private void DoGetVelocity()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xF3A11C", Offset = "0xF3A11C", VA = "0xF3A11C")]
		public GetVelocity2d()
		{
		}
	}
	[Token(Token = "0x2000305")]
	[Tooltip("Is the rigidbody2D constrained from rotating? Note: Prefer SetRigidBody2dConstraints when working in Unity 5 or higher.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class IsFixedAngle2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if the Rigidbody2D does have fixed angle")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if the Rigidbody2D doesn't have fixed angle")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the fixedAngle flag")]
		[UIHint(UIHint.Variable)]
		public FsmBool store;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xF3A164", Offset = "0xF3A164", VA = "0xF3A164", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xF3A1B4", Offset = "0xF3A1B4", VA = "0xF3A1B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xF3A2B8", Offset = "0xF3A2B8", VA = "0xF3A2B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xF3A1E0", Offset = "0xF3A1E0", VA = "0xF3A1E0")]
		private void DoIsFixedAngle()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xF3A2BC", Offset = "0xF3A2BC", VA = "0xF3A2BC")]
		public IsFixedAngle2d()
		{
		}
	}
	[Token(Token = "0x2000306")]
	[Tooltip("Tests if a Game Object's Rigid Body 2D is Kinematic.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class IsKinematic2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("the GameObject with a Rigidbody2D attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event Sent if Kinematic")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if not Kinematic")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the Kinematic state")]
		[UIHint(UIHint.Variable)]
		public FsmBool store;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xF3A304", Offset = "0xF3A304", VA = "0xF3A304", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xF3A354", Offset = "0xF3A354", VA = "0xF3A354", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xF3A458", Offset = "0xF3A458", VA = "0xF3A458", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xF3A380", Offset = "0xF3A380", VA = "0xF3A380")]
		private void DoIsKinematic()
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xF3A45C", Offset = "0xF3A45C", VA = "0xF3A45C")]
		public IsKinematic2d()
		{
		}
	}
	[Token(Token = "0x2000307")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Tests if a Game Object's Rigidbody 2D is sleeping.")]
	public class IsSleeping2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if sleeping")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if not sleeping")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Boolean variable")]
		public FsmBool store;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xF3A4A4", Offset = "0xF3A4A4", VA = "0xF3A4A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xF3A4F4", Offset = "0xF3A4F4", VA = "0xF3A4F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xF3A5F8", Offset = "0xF3A5F8", VA = "0xF3A5F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xF3A520", Offset = "0xF3A520", VA = "0xF3A520")]
		private void DoIsSleeping()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xF3A5FC", Offset = "0xF3A5FC", VA = "0xF3A5FC")]
		public IsSleeping2d()
		{
		}
	}
	[Token(Token = "0x2000308")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Casts a Ray against all Colliders in the scene.A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that raycasting specifies the line using an origin and direction.Use GetRaycastHit2dInfo to get more detailed info.")]
	public class LineCast2d : FsmStateAction
	{
		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Setup")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector2 world position. \nOr use fromGameObject parameter. If both define, will add fromPosition to the fromGameObject position")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("End ray at game object position. \nOr use From Position parameter.")]
		public FsmGameObject toGameObject;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("End ray at a vector2 world position. \nOr use fromGameObject parameter. If both define, will add toPosition to the ToGameObject position")]
		public FsmVector2 toPosition;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if the ray hits an object.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmEvent hitEvent;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set a bool variable to true if hit something, otherwise false.")]
		public FsmBool storeDidHit;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the game object hit in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeHitObject;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Get the 2d position of the ray hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeHitPoint;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the 2d normal at the hit point and store it in a variable.\nNote, this is a direction vector not a rotation.")]
		public FsmVector2 storeHitNormal;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeHitDistance;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[ActionSection("Filter")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause raycasts can get expensive use the highest repeat interval you can get away with.")]
		public FsmInt repeatInterval;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[ActionSection("Debug")]
		[Tooltip("The color to use for the debug line.")]
		public FsmColor debugColor;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Draw a debug line. Note: Check Gizmos in the Game View to see it in game.")]
		public FsmBool debug;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform _fromTrans;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform _toTrans;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int repeat;

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xF3A644", Offset = "0xF3A644", VA = "0xF3A644", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xF3A81C", Offset = "0xF3A81C", VA = "0xF3A81C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xF3ADAC", Offset = "0xF3ADAC", VA = "0xF3ADAC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xF3A94C", Offset = "0xF3A94C", VA = "0xF3A94C")]
		private void DoRaycast()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xF3ADC4", Offset = "0xF3ADC4", VA = "0xF3ADC4")]
		public LineCast2d()
		{
		}
	}
	[Token(Token = "0x2000309")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Rotates a 2d Game Object on it's z axis so its forward vector points at a 2d or 3d position.")]
	public class LookAt2d : FsmStateAction
	{
		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The 2d position to Look At.")]
		public FsmVector2 vector2Target;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The 3d position to Look At. If not set to none, will be added to the 2d target")]
		public FsmVector3 vector3Target;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the GameObject starting offset. In degrees. 0 if your object is facing right, 180 if facing left etc...")]
		public FsmFloat rotationOffset;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Title("Draw Debug Line")]
		[Tooltip("Draw a debug line from the GameObject to the Target.")]
		public FsmBool debug;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Color to use for the debug line.")]
		public FsmColor debugLineColor;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xF3ADCC", Offset = "0xF3ADCC", VA = "0xF3ADCC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xF3AEA8", Offset = "0xF3AEA8", VA = "0xF3AEA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xF3B1A0", Offset = "0xF3B1A0", VA = "0xF3B1A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xF3AED4", Offset = "0xF3AED4", VA = "0xF3AED4")]
		private void DoLookAt()
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xF3B1A4", Offset = "0xF3B1A4", VA = "0xF3B1A4")]
		public LookAt2d()
		{
		}
	}
	[Token(Token = "0x200030A")]
	[Tooltip("Rotates a 2d Game Object on it's z axis so its forward vector points at a Target.")]
	[ActionCategory(ActionCategory.Transform)]
	public class LookAt2dGameObject : FsmStateAction
	{
		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The GameObject to Look At.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set the GameObject starting offset. In degrees. 0 if your object is facing right, 180 if facing left etc...")]
		public FsmFloat rotationOffset;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Title("Draw Debug Line")]
		[Tooltip("Draw a debug line from the GameObject to the Target.")]
		public FsmBool debug;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Color to use for the debug line.")]
		public FsmColor debugLineColor;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject go;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject goTarget;

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xF3B1B4", Offset = "0xF3B1B4", VA = "0xF3B1B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xF3B22C", Offset = "0xF3B22C", VA = "0xF3B22C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xF3B590", Offset = "0xF3B590", VA = "0xF3B590", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xF3B258", Offset = "0xF3B258", VA = "0xF3B258")]
		private void DoLookAt()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xF3B594", Offset = "0xF3B594", VA = "0xF3B594")]
		public LookAt2dGameObject()
		{
		}
	}
	[Token(Token = "0x200030B")]
	[Tooltip("Perform a Mouse Pick on a 2d scene and stores the results. Use Ray Distance to set how close the camera must be to pick the 2d object.")]
	[ActionCategory(ActionCategory.Input)]
	public class MousePick2d : FsmStateAction
	{
		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if a GameObject was picked in a Bool variable. True if a GameObject was picked, otherwise false.")]
		public FsmBool storeDidPickObject;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the picked GameObject in a variable.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the picked point in a variable.")]
		public FsmVector2 storePoint;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xF3B5A4", Offset = "0xF3B5A4", VA = "0xF3B5A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xF3B650", Offset = "0xF3B650", VA = "0xF3B650", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xF3B8AC", Offset = "0xF3B8AC", VA = "0xF3B8AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xF3B67C", Offset = "0xF3B67C", VA = "0xF3B67C")]
		private void DoMousePick2d()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xF3B8B0", Offset = "0xF3B8B0", VA = "0xF3B8B0")]
		public MousePick2d()
		{
		}
	}
	[Token(Token = "0x200030C")]
	[Tooltip("Sends Events based on mouse interactions with a 2d Game Object: MouseOver, MouseDown, MouseUp, MouseOff.")]
	[ActionCategory(ActionCategory.Input)]
	public class MousePick2dEvent : FsmStateAction
	{
		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Collider2D))]
		[Tooltip("The GameObject with a Collider2D attached.")]
		public FsmOwnerDefault GameObject;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send when the mouse is over the GameObject.")]
		public FsmEvent mouseOver;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the mouse is pressed while over the GameObject.")]
		public FsmEvent mouseDown;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the mouse is released while over the GameObject.")]
		public FsmEvent mouseUp;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when the mouse moves off the GameObject.")]
		public FsmEvent mouseOff;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xF3B8B8", Offset = "0xF3B8B8", VA = "0xF3B8B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xF3B988", Offset = "0xF3B988", VA = "0xF3B988", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xF3BA58", Offset = "0xF3BA58", VA = "0xF3BA58", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xF3B9B4", Offset = "0xF3B9B4", VA = "0xF3B9B4")]
		private void DoMousePickEvent()
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xF3BA5C", Offset = "0xF3BA5C", VA = "0xF3BA5C")]
		private bool DoRaycast()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xF3BC8C", Offset = "0xF3BC8C", VA = "0xF3BC8C")]
		public MousePick2dEvent()
		{
		}
	}
	[Token(Token = "0x200030D")]
	[Tooltip("Moves a Game Object's RigidBody2D to a new position. Unlike SetPosition this will respect physics collisions.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class MovePosition2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject to move.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Movement vector.")]
		public FsmVector2 vector;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Movement in x axis.")]
		public FsmFloat x;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Movement in y axis.")]
		public FsmFloat y;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Coordinate space to move in.")]
		public Space space;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Keep running every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xF3BC94", Offset = "0xF3BC94", VA = "0xF3BC94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xF3BD64", Offset = "0xF3BD64", VA = "0xF3BD64", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xF3BD84", Offset = "0xF3BD84", VA = "0xF3BD84", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xF3BDB0", Offset = "0xF3BDB0", VA = "0xF3BDB0")]
		private void DoMovePosition()
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xF3BFD4", Offset = "0xF3BFD4", VA = "0xF3BFD4")]
		public MovePosition2d()
		{
		}
	}
	[Token(Token = "0x200030E")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Casts a Ray against all Colliders in the scene. A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. Use GetRaycastHit2dInfo to get more detailed info.")]
	public class RayCast2d : FsmStateAction
	{
		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		[ActionSection("Setup")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector2 world position, or offset from the GameObject's position.")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector2 direction vector")]
		public FsmVector2 direction;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Cast the ray in world or local space. Note if no Game Object is specified, the direction is in world space.")]
		public Space space;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public FsmFloat distance;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. Leave as None for no filtering.")]
		public FsmInt minDepth;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. Leave as none for no filtering.")]
		public FsmInt maxDepth;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event to send if the ray hits an object.")]
		[ActionSection("Result")]
		public FsmEvent hitEvent;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Set a bool variable to true if hit something, otherwise false.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidHit;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Store the game object hit in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeHitObject;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Get the 2d position of the ray hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeHitPoint;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Get the 2d normal at the hit point and store it in a variable. \nNote, this is a direction vector not a rotation.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeHitNormal;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeHitDistance;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the fraction along the ray to the hit point and store it in a variable. If the ray's direction vector is normalized then this value is simply the distance between the origin and the hit point. If the direction is not normalized then this distance is expressed as a 'fraction' (which could be greater than 1) of the vector's magnitude.")]
		public FsmFloat storeHitFraction;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause raycasts can get expensive use the highest repeat interval you can get away with.")]
		[ActionSection("Filter")]
		public FsmInt repeatInterval;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[ActionSection("Debug")]
		[Tooltip("The color to use for the debug line.")]
		public FsmColor debugColor;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Draw a debug line. Note: Check Gizmos in the Game View to see it in game.")]
		public FsmBool debug;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform _transform;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int repeat;

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xF3C01C", Offset = "0xF3C01C", VA = "0xF3C01C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xF3C270", Offset = "0xF3C270", VA = "0xF3C270", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xF3C990", Offset = "0xF3C990", VA = "0xF3C990", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xF3C344", Offset = "0xF3C344", VA = "0xF3C344")]
		private void DoRaycast()
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xF3C9A8", Offset = "0xF3C9A8", VA = "0xF3C9A8")]
		public RayCast2d()
		{
		}
	}
	[Token(Token = "0x200030F")]
	[Tooltip("Perform a raycast into the 2d scene using screen coordinates and stores the results. Use Ray Distance to set how close the camera must be to pick the 2d object. NOTE: Uses the MainCamera!")]
	[ActionCategory(ActionCategory.Input)]
	public class ScreenPick2d : FsmStateAction
	{
		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A Vector3 screen position. Commonly stored by other actions.")]
		public FsmVector3 screenVector;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("X position on screen.")]
		public FsmFloat screenX;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Y position on screen.")]
		public FsmFloat screenY;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Are the supplied screen coordinates normalized (0-1), or in pixels.")]
		public FsmBool normalized;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store whether the Screen pick did pick a GameObject")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidPickObject;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the picked GameObject")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the picked position in world Space")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storePoint;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xF3C9B0", Offset = "0xF3C9B0", VA = "0xF3C9B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xF3CB38", Offset = "0xF3CB38", VA = "0xF3CB38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xF3CEDC", Offset = "0xF3CEDC", VA = "0xF3CEDC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xF3CB64", Offset = "0xF3CB64", VA = "0xF3CB64")]
		private void DoScreenPick()
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xF3CEE0", Offset = "0xF3CEE0", VA = "0xF3CEE0")]
		public ScreenPick2d()
		{
		}
	}
	[Token(Token = "0x2000310")]
	[Tooltip("Set the isTrigger option of a Collider2D. Optionally set all collider2D found on the gameobject Target.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class SetCollider2dIsTrigger : FsmStateAction
	{
		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Collider2D))]
		[Tooltip("The GameObject with the Collider2D attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The flag value")]
		public FsmBool isTrigger;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set all Colliders on the GameObject target")]
		public bool setAllColliders;

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xF3CEE8", Offset = "0xF3CEE8", VA = "0xF3CEE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xF3CF24", Offset = "0xF3CF24", VA = "0xF3CF24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xF3CF40", Offset = "0xF3CF40", VA = "0xF3CF40")]
		private void DoSetIsTrigger()
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xF3D0EC", Offset = "0xF3D0EC", VA = "0xF3D0EC")]
		public SetCollider2dIsTrigger()
		{
		}
	}
	[Token(Token = "0x2000311")]
	[Tooltip("Sets the gravity vector, or individual axis.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class SetGravity2d : FsmStateAction
	{
		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Gravity as Vector2.")]
		public FsmVector2 vector;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Override the x value of the gravity")]
		public FsmFloat x;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Override the y value of the gravity")]
		public FsmFloat y;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0xF3D0F4", Offset = "0xF3D0F4", VA = "0xF3D0F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0xF3D1B0", Offset = "0xF3D1B0", VA = "0xF3D1B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0xF3D2A0", Offset = "0xF3D2A0", VA = "0xF3D2A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0xF3D1DC", Offset = "0xF3D1DC", VA = "0xF3D1DC")]
		private void DoSetGravity()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0xF3D2A4", Offset = "0xF3D2A4", VA = "0xF3D2A4")]
		public SetGravity2d()
		{
		}
	}
	[Token(Token = "0x2000312")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Sets The degree to which this object is affected by gravity.  NOTE: Game object must have a rigidbody 2D.")]
	public class SetGravity2dScale : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with a Rigidbody 2d attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The gravity scale effect")]
		public FsmFloat gravityScale;

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xF3D2AC", Offset = "0xF3D2AC", VA = "0xF3D2AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0xF3D2E0", Offset = "0xF3D2E0", VA = "0xF3D2E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0xF3D2FC", Offset = "0xF3D2FC", VA = "0xF3D2FC")]
		private void DoSetGravityScale()
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0xF3D3B8", Offset = "0xF3D3B8", VA = "0xF3D3B8")]
		public SetGravity2dScale()
		{
		}
	}
	[Token(Token = "0x2000313")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Sets the various properties of a HingeJoint2d component")]
	public class SetHingeJoint2dProperties : FsmStateAction
	{
		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The HingeJoint2d target")]
		[CheckForComponent(typeof(HingeJoint2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ActionSection("Limits")]
		[Tooltip("Should limits be placed on the range of rotation?")]
		public FsmBool useLimits;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Lower angular limit of rotation.")]
		public FsmFloat min;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Upper angular limit of rotation")]
		public FsmFloat max;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Should a motor force be applied automatically to the Rigidbody2D?")]
		[ActionSection("Motor")]
		public FsmBool useMotor;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The desired speed for the Rigidbody2D to reach as it moves with the joint.")]
		public FsmFloat motorSpeed;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The maximum force that can be applied to the Rigidbody2D at the joint to attain the target speed.")]
		public FsmFloat maxMotorTorque;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HingeJoint2D _joint;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private JointMotor2D _motor;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private JointAngleLimits2D _limits;

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0xF3D400", Offset = "0xF3D400", VA = "0xF3D400", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0xF3D578", Offset = "0xF3D578", VA = "0xF3D578", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xF3D8B4", Offset = "0xF3D8B4", VA = "0xF3D8B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xF3D6A8", Offset = "0xF3D6A8", VA = "0xF3D6A8")]
		private void SetProperties()
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xF3D8B8", Offset = "0xF3D8B8", VA = "0xF3D8B8")]
		public SetHingeJoint2dProperties()
		{
		}
	}
	[Token(Token = "0x2000314")]
	[Tooltip("Controls whether the rigidbody 2D should be prevented from rotating")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Obsolete("This action is obsolete; use Constraints instead.")]
	public class SetIsFixedAngle2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The flag value")]
		public FsmBool isFixedAngle;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xF3D8C0", Offset = "0xF3D8C0", VA = "0xF3D8C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xF3D8FC", Offset = "0xF3D8FC", VA = "0xF3D8FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xF3DA0C", Offset = "0xF3DA0C", VA = "0xF3DA0C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xF3D928", Offset = "0xF3D928", VA = "0xF3D928")]
		private void DoSetIsFixedAngle()
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xF3DA10", Offset = "0xF3DA10", VA = "0xF3DA10")]
		public SetIsFixedAngle2d()
		{
		}
	}
	[Token(Token = "0x2000315")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Controls whether 2D physics affects the Game Object.")]
	public class SetIsKinematic2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The isKinematic value")]
		public FsmBool isKinematic;

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xF3DA58", Offset = "0xF3DA58", VA = "0xF3DA58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xF3DA8C", Offset = "0xF3DA8C", VA = "0xF3DA8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xF3DAA8", Offset = "0xF3DAA8", VA = "0xF3DAA8")]
		private void DoSetIsKinematic()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xF3DB68", Offset = "0xF3DB68", VA = "0xF3DB68")]
		public SetIsKinematic2d()
		{
		}
	}
	[Token(Token = "0x2000316")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Sets the Mass of a Game Object's Rigid Body 2D.")]
	public class SetMass2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[HasFloatSlider(0.1f, 10f)]
		[Tooltip("The Mass")]
		public FsmFloat mass;

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xF3DBB0", Offset = "0xF3DBB0", VA = "0xF3DBB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xF3DBE4", Offset = "0xF3DBE4", VA = "0xF3DBE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xF3DC00", Offset = "0xF3DC00", VA = "0xF3DC00")]
		private void DoSetMass()
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xF3DCBC", Offset = "0xF3DCBC", VA = "0xF3DCBC")]
		public SetMass2d()
		{
		}
	}
	[Token(Token = "0x2000317")]
	[Tooltip("Sets the 2d Velocity of a Game Object. To leave any axis unchanged, set variable to 'None'. NOTE: Game object must have a rigidbody 2D.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class SetVelocity2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Use a Vector2 value for the velocity and/or set individual axis below. If set to None, keeps current velocity.")]
		public FsmVector2 vector;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Set the x value of the velocity. If None keep current x velocity.")]
		public FsmFloat x;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set the y value of the velocity. If None keep current y velocity.")]
		public FsmFloat y;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Set velocity in local or word space.")]
		public Space space;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xF3DD04", Offset = "0xF3DD04", VA = "0xF3DD04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xF3DDD4", Offset = "0xF3DDD4", VA = "0xF3DDD4", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xF3DDF4", Offset = "0xF3DDF4", VA = "0xF3DDF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xF3DFE0", Offset = "0xF3DFE0", VA = "0xF3DFE0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xF3DE20", Offset = "0xF3DE20", VA = "0xF3DE20")]
		private void DoSetVelocity()
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xF3E00C", Offset = "0xF3E00C", VA = "0xF3E00C")]
		public SetVelocity2d()
		{
		}
	}
	[Token(Token = "0x2000318")]
	[Tooltip("Sets the various properties of a WheelJoint2d component")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class SetWheelJoint2dProperties : FsmStateAction
	{
		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The WheelJoint2d target")]
		[CheckForComponent(typeof(WheelJoint2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ActionSection("Motor")]
		[Tooltip("Should a motor force be applied automatically to the Rigidbody2D?")]
		public FsmBool useMotor;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The desired speed for the Rigidbody2D to reach as it moves with the joint.")]
		public FsmFloat motorSpeed;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The maximum force that can be applied to the Rigidbody2D at the joint to attain the target speed.")]
		public FsmFloat maxMotorTorque;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Suspension")]
		[Tooltip("The world angle along which the suspension will move. This provides 2D constrained motion similar to a SliderJoint2D. This is typically how suspension works in the real world.")]
		public FsmFloat angle;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The amount by which the suspension spring force is reduced in proportion to the movement speed.")]
		public FsmFloat dampingRatio;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The frequency at which the suspension spring oscillates.")]
		public FsmFloat frequency;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private WheelJoint2D _wj2d;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private JointMotor2D _motor;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private JointSuspension2D _suspension;

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xF3E054", Offset = "0xF3E054", VA = "0xF3E054", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xF3E1CC", Offset = "0xF3E1CC", VA = "0xF3E1CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xF3E524", Offset = "0xF3E524", VA = "0xF3E524", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xF3E300", Offset = "0xF3E300", VA = "0xF3E300")]
		private void SetProperties()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xF3E528", Offset = "0xF3E528", VA = "0xF3E528")]
		public SetWheelJoint2dProperties()
		{
		}
	}
	[Token(Token = "0x2000319")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Forces a Game Object's Rigid Body 2D to Sleep at least one frame.")]
	public class Sleep2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with a Rigidbody2d attached")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xF3E530", Offset = "0xF3E530", VA = "0xF3E530", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xF3E53C", Offset = "0xF3E53C", VA = "0xF3E53C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xF3E558", Offset = "0xF3E558", VA = "0xF3E558")]
		private void DoSleep()
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xF3E5F8", Offset = "0xF3E5F8", VA = "0xF3E5F8")]
		public Sleep2d()
		{
		}
	}
	[Token(Token = "0x200031A")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Smoothly Rotates a 2d Game Object so its right vector points at a Target. The target can be defined as a 2d Game Object or a 2d/3d world Position. If you specify both, then the position will be used as a local offset from the object's position.")]
	public class SmoothLookAt2d : FsmStateAction
	{
		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to rotate to face a target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ActionSection("Target")]
		[Tooltip("A target GameObject.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A target position. If a Target Object is defined, this is used as a local offset.")]
		public FsmVector2 targetPosition2d;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("A target position. If a Target Object is defined, this is used as a local offset.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Rotation")]
		[Tooltip("Set the GameObject starting offset. In degrees. 0 if your object is facing right, 180 if facing left etc...")]
		public FsmFloat rotationOffset;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0.5f, 15f)]
		[Tooltip("How fast to rotate to look at the target. Higher numbers are faster. Note, you can enter numbers outside the slider range.")]
		public FsmFloat speed;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set min/max angle limits for the look at rotation. Note, you can use a scene gizmo to set the angles.")]
		public FsmBool useLimits;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideIf("HideLimits")]
		[Tooltip("Min angle limit.")]
		public FsmFloat minAngle;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideIf("HideLimits")]
		[Tooltip("Max angle limit.")]
		public FsmFloat maxAngle;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Draw a line in the Scene View to the look at position.")]
		public FsmBool debug;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[ActionSection("Finished")]
		[Tooltip("If the angle to the target is less than this, send the Finish Event below. Measured in degrees.")]
		public FsmFloat finishTolerance;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send if the angle to target is less than the Finish Tolerance.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Should the event stop running when it succeeds.")]
		public FsmBool finish;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject previousGo;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion lastRotation;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion desiredRotation;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 lookAtPos;

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xF3E640", Offset = "0xF3E640", VA = "0xF3E640", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xF3E7CC", Offset = "0xF3E7CC", VA = "0xF3E7CC")]
		public bool HideLimits()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xF3E7F4", Offset = "0xF3E7F4", VA = "0xF3E7F4", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xF3E814", Offset = "0xF3E814", VA = "0xF3E814", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xF3E820", Offset = "0xF3E820", VA = "0xF3E820", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xF3E824", Offset = "0xF3E824", VA = "0xF3E824")]
		private void DoSmoothLookAt()
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xF3EFD8", Offset = "0xF3EFD8", VA = "0xF3EFD8")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xF3F054", Offset = "0xF3F054", VA = "0xF3F054")]
		public SmoothLookAt2d()
		{
		}
	}
	[Token(Token = "0x200031B")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Sends events when a 2d object is touched. Optionally filter by a fingerID. NOTE: Uses the MainCamera!")]
	public class TouchObject2dEvent : FsmStateAction
	{
		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Collider2D))]
		[RequiredField]
		[Tooltip("The Game Object to detect touches on.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Only detect touches that match this fingerID, or set to None.")]
		public FsmInt fingerId;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Events")]
		[Tooltip("Event to send on touch began.")]
		public FsmEvent touchBegan;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send on touch moved.")]
		public FsmEvent touchMoved;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send on stationary touch.")]
		public FsmEvent touchStationary;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send on touch ended.")]
		public FsmEvent touchEnded;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send on touch cancel.")]
		public FsmEvent touchCanceled;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ActionSection("Store Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the fingerId of the touch.")]
		public FsmInt storeFingerId;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the 2d position where the object was touched.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeHitPoint;

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xF3F05C", Offset = "0xF3F05C", VA = "0xF3F05C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xF3F14C", Offset = "0xF3F14C", VA = "0xF3F14C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xF3F550", Offset = "0xF3F550", VA = "0xF3F550")]
		public TouchObject2dEvent()
		{
		}
	}
	[Token(Token = "0x200031C")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Translates a Game Object's RigidBody2d. Unlike Translate2d this will respect physics collisions.")]
	public class TranslatePosition2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject to move.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Movement vector.")]
		public FsmVector2 vector;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Movement in x axis.")]
		public FsmFloat x;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Movement in y axis.")]
		public FsmFloat y;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Coordinate space to move in.")]
		public Space space;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Translate over one second")]
		public bool perSecond;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[Tooltip("Keep running every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xF3F558", Offset = "0xF3F558", VA = "0xF3F558", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xF3F62C", Offset = "0xF3F62C", VA = "0xF3F62C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xF3F64C", Offset = "0xF3F64C", VA = "0xF3F64C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xF3F678", Offset = "0xF3F678", VA = "0xF3F678")]
		private void DoTranslatePosition2d()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xF3F83C", Offset = "0xF3F83C", VA = "0xF3F83C")]
		public TranslatePosition2d()
		{
		}
	}
	[Token(Token = "0x200031D")]
	[Tooltip("Detect 2D trigger collisions between the Owner of this FSM and other Game Objects that have RigidBody2D components. NOTE: The system events, TRIGGER ENTER 2D, TRIGGER STAY 2D, and TRIGGER EXIT 2D are sent automatically on collisions triggers with any object. Use this action to filter collision triggers by Tag.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class Trigger2dEvent : FsmStateAction
	{
		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to detect collisions on.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of trigger event to detect.")]
		public Trigger2DType trigger;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.TagMenu)]
		[Tooltip("Filter by Tag.")]
		public FsmString collideTag;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the trigger event is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the GameObject that collided with the Owner of this FSM.")]
		public FsmGameObject storeCollider;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerProxyBase cachedProxy;

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xF3F884", Offset = "0xF3F884", VA = "0xF3F884", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xF3F910", Offset = "0xF3F910", VA = "0xF3F910", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xF3FB6C", Offset = "0xF3FB6C", VA = "0xF3FB6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xF3FDA8", Offset = "0xF3FDA8", VA = "0xF3FDA8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xF3FFA0", Offset = "0xF3FFA0", VA = "0xF3FFA0")]
		private void UpdateCallback()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xF3FA14", Offset = "0xF3FA14", VA = "0xF3FA14")]
		private void GetProxyComponent()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xF3FC68", Offset = "0xF3FC68", VA = "0xF3FC68")]
		private void AddCallback()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xF3FE60", Offset = "0xF3FE60", VA = "0xF3FE60")]
		private void RemoveCallback()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xF3FFC0", Offset = "0xF3FFC0", VA = "0xF3FFC0")]
		private void StoreCollisionInfo(Collider2D collisionInfo)
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xF3FFF4", Offset = "0xF3FFF4", VA = "0xF3FFF4", Slot = "53")]
		public override void DoTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xF4007C", Offset = "0xF4007C", VA = "0xF4007C", Slot = "54")]
		public override void DoTriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xF40108", Offset = "0xF40108", VA = "0xF40108", Slot = "55")]
		public override void DoTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xF4001C", Offset = "0xF4001C", VA = "0xF4001C")]
		private void TriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xF400A4", Offset = "0xF400A4", VA = "0xF400A4")]
		private void TriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xF40130", Offset = "0xF40130", VA = "0xF40130")]
		private void TriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xF40194", Offset = "0xF40194", VA = "0xF40194", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xF401C0", Offset = "0xF401C0", VA = "0xF401C0")]
		public Trigger2dEvent()
		{
		}
	}
	[Token(Token = "0x200031E")]
	[Tooltip("Rigid bodies 2D start sleeping when they come to rest. This action wakes up all rigid bodies 2D in the scene. E.g., if you Set Gravity 2D and want objects at rest to respond.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class WakeAllRigidBodies2d : FsmStateAction
	{
		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Repeat every frame. Note: This would be very expensive!")]
		public bool everyFrame;

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xF401C8", Offset = "0xF401C8", VA = "0xF401C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xF401D0", Offset = "0xF401D0", VA = "0xF401D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xF4030C", Offset = "0xF4030C", VA = "0xF4030C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xF401FC", Offset = "0xF401FC", VA = "0xF401FC")]
		private void DoWakeAll()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xF40310", Offset = "0xF40310", VA = "0xF40310")]
		public WakeAllRigidBodies2d()
		{
		}
	}
	[Token(Token = "0x200031F")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Forces a Game Object's Rigid Body 2D to wake up.")]
	public class WakeUp2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with a Rigidbody2d attached")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xF40318", Offset = "0xF40318", VA = "0xF40318", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xF40324", Offset = "0xF40324", VA = "0xF40324", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xF40340", Offset = "0xF40340", VA = "0xF40340")]
		private void DoWakeUp()
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xF403E0", Offset = "0xF403E0", VA = "0xF403E0")]
		public WakeUp2d()
		{
		}
	}
	[Token(Token = "0x2000320")]
	[ActionCategory("PlayerInput")]
	public abstract class PlayerInputActionBase : ComponentAction<PlayerInput>
	{
		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[DisplayOrder(0)]
		[RequiredField]
		[CheckForComponent(typeof(PlayerInput))]
		[Tooltip("The GameObject with the PlayerInput component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An InputAction used by the PlayerInput component.")]
		[DisplayOrder(1)]
		[RequiredField]
		[ObjectType(typeof(InputActionReference))]
		public FsmObject inputAction;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected PlayerInput m_playerInput;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected InputAction m_inputAction;

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xF40428", Offset = "0xF40428", VA = "0xF40428", Slot = "62")]
		protected virtual void OnPerformed(InputAction.CallbackContext ctx)
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xF4042C", Offset = "0xF4042C", VA = "0xF4042C", Slot = "63")]
		protected virtual void OnCanceled(InputAction.CallbackContext ctx)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xF40430", Offset = "0xF40430", VA = "0xF40430", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xF40468", Offset = "0xF40468", VA = "0xF40468")]
		protected bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xF40750", Offset = "0xF40750", VA = "0xF40750")]
		private void AddDelegates()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xF40680", Offset = "0xF40680", VA = "0xF40680")]
		private void RemoveDelegates()
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xF40820", Offset = "0xF40820", VA = "0xF40820", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xF40848", Offset = "0xF40848", VA = "0xF40848", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xF40870", Offset = "0xF40870", VA = "0xF40870", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xF40890", Offset = "0xF40890", VA = "0xF40890")]
		protected PlayerInputActionBase()
		{
		}
	}
	[Token(Token = "0x2000321")]
	[ActionCategory("PlayerInput")]
	[Note("Make sure the Button is setup with the Press and Release Interaction to trigger Pressed and Released events.")]
	[Tooltip("Sends Events based InputAction buttons in a PlayerInput component.")]
	public class PlayerInputButtonEvents : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store if the button is pressed.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPressed;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send if the button is pressed.")]
		public FsmEvent isPressedEvent;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event to send if the button was pressed this frame.")]
		public FsmEvent wasPressedThisFrame;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send if the button was released this frame.")]
		public FsmEvent wasReleasedThisFrame;

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xF408D8", Offset = "0xF408D8", VA = "0xF408D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xF40968", Offset = "0xF40968", VA = "0xF40968", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xF40A74", Offset = "0xF40A74", VA = "0xF40A74")]
		public PlayerInputButtonEvents()
		{
		}
	}
	[Token(Token = "0x2000322")]
	[Tooltip("Sends an Event when an InputAction in a PlayerInput component is Canceled.")]
	[ActionCategory("PlayerInput")]
	public class PlayerInputCanceledEvent : PlayerInputActionBase
	{
		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The event to send on Input Canceled")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xF40AC0", Offset = "0xF40AC0", VA = "0xF40AC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xF40AE0", Offset = "0xF40AE0", VA = "0xF40AE0", Slot = "63")]
		protected override void OnCanceled(InputAction.CallbackContext ctx)
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xF40B04", Offset = "0xF40B04", VA = "0xF40B04")]
		public PlayerInputCanceledEvent()
		{
		}
	}
	[Token(Token = "0x2000323")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Enable/Disable an InputAction in a PlayerInput component.")]
	public class PlayerInputEnableAction : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[Tooltip("Enable/Disable the Input Action.")]
		public FsmBool enable;

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xF40B08", Offset = "0xF40B08", VA = "0xF40B08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xF40B3C", Offset = "0xF40B3C", VA = "0xF40B3C", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xF40B94", Offset = "0xF40B94", VA = "0xF40B94")]
		public PlayerInputEnableAction()
		{
		}
	}
	[Token(Token = "0x2000324")]
	[Tooltip("Enable/Disable an InputActionMap in a PlayerInput component.")]
	[ActionCategory("PlayerInput")]
	public class PlayerInputEnableActionMap : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[Tooltip("Enable/Disable the Input Action.")]
		public FsmBool enable;

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xF40B98", Offset = "0xF40B98", VA = "0xF40B98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xF40BCC", Offset = "0xF40BCC", VA = "0xF40BCC", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xF40C2C", Offset = "0xF40C2C", VA = "0xF40C2C")]
		public PlayerInputEnableActionMap()
		{
		}
	}
	[Token(Token = "0x2000325")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Get the Bool value from an InputAction in a PlayerInput component.")]
	public class PlayerInputGetBool : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the Input Bool value.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeBool;

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xF40C30", Offset = "0xF40C30", VA = "0xF40C30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xF40C50", Offset = "0xF40C50", VA = "0xF40C50", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xF40CB4", Offset = "0xF40CB4", VA = "0xF40CB4")]
		public PlayerInputGetBool()
		{
		}
	}
	[Token(Token = "0x2000326")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Get the float value from an InputAction in a PlayerInput component.")]
	public class PlayerInputGetFloat : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Input Float value.")]
		public FsmFloat storeFloat;

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xF40CB8", Offset = "0xF40CB8", VA = "0xF40CB8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xF40CD8", Offset = "0xF40CD8", VA = "0xF40CD8", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xF40D38", Offset = "0xF40D38", VA = "0xF40D38")]
		public PlayerInputGetFloat()
		{
		}
	}
	[Token(Token = "0x2000327")]
	[Tooltip("Gets a world direction Vector from an InputAction in a PlayerInput component. Typically used for a third person controller with Relative To set to the camera. This works like the Get Axis Vector action for the old Input System.")]
	[ActionCategory("PlayerInput")]
	public class PlayerInputGetMoveVector : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x2000328")]
		public enum AxisPlane
		{
			[Token(Token = "0x4000E2F")]
			XZ,
			[Token(Token = "0x4000E30")]
			XY,
			[Token(Token = "0x4000E31")]
			YZ
		}

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[Tooltip("Sets the world axis the input maps to. The remaining axis will be set to zero.")]
		public AxisPlane mapToPlane;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Calculate a vector relative to this game object. Typically the camera.")]
		public FsmGameObject relativeTo;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Normally axis values are in the range -1 to 1. Use the multiplier to make this range bigger. \nE.g., A multiplier of 100 returns values from -100 to 100.\nTypically this represents the maximum movement speed.")]
		public FsmFloat multiplier;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the magnitude of the vector. Useful if you want to measure the strength of the input and react accordingly. Hint: Use {{Float Compare}}.")]
		public FsmFloat storeMagnitude;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Store the move vector in a Vector3 variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeMoveVector;

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xF40D3C", Offset = "0xF40D3C", VA = "0xF40D3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xF40D9C", Offset = "0xF40D9C", VA = "0xF40D9C", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xF412E8", Offset = "0xF412E8", VA = "0xF412E8")]
		public PlayerInputGetMoveVector()
		{
		}
	}
	[Token(Token = "0x2000329")]
	[Tooltip("Get the Vector2 value from an InputAction in a PlayerInput component.")]
	[ActionCategory("PlayerInput")]
	public class PlayerInputGetVector2 : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Vector2 value.")]
		public FsmVector2 storeVector2;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Store the Vector2 x value.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeX;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Vector2 y value.")]
		public FsmFloat storeY;

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xF412EC", Offset = "0xF412EC", VA = "0xF412EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xF4132C", Offset = "0xF4132C", VA = "0xF4132C", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xF413B4", Offset = "0xF413B4", VA = "0xF413B4")]
		public PlayerInputGetVector2()
		{
		}
	}
	[Token(Token = "0x200032A")]
	[Tooltip("Get the Vector2 value from a named InputAction in a PlayerInput component and store it in a Vector3 variable.")]
	[ActionCategory("PlayerInput")]
	public class PlayerInputGetVector2AsVector3 : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x200032B")]
		public enum Mapping
		{
			[Token(Token = "0x4000E38")]
			XZ,
			[Token(Token = "0x4000E39")]
			XY,
			[Token(Token = "0x4000E3A")]
			YZ
		}

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Plane to map the 2d input to.")]
		public Mapping mapping;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Vector3 value.")]
		public FsmVector3 storeVector3;

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xF413B8", Offset = "0xF413B8", VA = "0xF413B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xF413DC", Offset = "0xF413DC", VA = "0xF413DC", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xF414CC", Offset = "0xF414CC", VA = "0xF414CC")]
		public PlayerInputGetVector2AsVector3()
		{
		}
	}
	[Token(Token = "0x200032C")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Sends an Event when an InputAction in a PlayerInput component is Performed.")]
	public class PlayerInputPerformedEvent : PlayerInputActionBase
	{
		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The event to send on Input Performed")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xF414D0", Offset = "0xF414D0", VA = "0xF414D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xF414F0", Offset = "0xF414F0", VA = "0xF414F0", Slot = "62")]
		protected override void OnPerformed(InputAction.CallbackContext ctx)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xF41514", Offset = "0xF41514", VA = "0xF41514")]
		public PlayerInputPerformedEvent()
		{
		}
	}
	[Token(Token = "0x200032D")]
	[Tooltip("Sends an Event when an InputAction in a PlayerInput component is Triggered.")]
	[ActionCategory("PlayerInput")]
	public class PlayerInputTriggeredEvent : PlayerInputActionBase
	{
		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The event to send on Input Triggered.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the input value.")]
		public FsmBool storeValue;

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xF41518", Offset = "0xF41518", VA = "0xF41518", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xF41548", Offset = "0xF41548", VA = "0xF41548", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xF415C8", Offset = "0xF415C8", VA = "0xF415C8")]
		public PlayerInputTriggeredEvent()
		{
		}
	}
	[Token(Token = "0x200032E")]
	[ActionCategory("PlayerInput")]
	public abstract class PlayerInputUpdateActionBase : ComponentAction<PlayerInput>
	{
		[Token(Token = "0x200032F")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000E44")]
			Once,
			[Token(Token = "0x4000E45")]
			Update,
			[Token(Token = "0x4000E46")]
			FixedUpdate
		}

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the PlayerInput component.")]
		[CheckForComponent(typeof(PlayerInput))]
		[DisplayOrder(0)]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(InputActionReference))]
		[DisplayOrder(1)]
		[RequiredField]
		[Tooltip("An InputAction used by the PlayerInput component.")]
		public FsmObject inputAction;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("When to read the Input.")]
		public UpdateMode updateMode;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected PlayerInput playerInput;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected InputAction action;

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xF40928", Offset = "0xF40928", VA = "0xF40928", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xF415CC", Offset = "0xF415CC", VA = "0xF415CC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xF415F8", Offset = "0xF415F8", VA = "0xF415F8")]
		protected bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xF41800", Offset = "0xF41800", VA = "0xF41800", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xF41850", Offset = "0xF41850", VA = "0xF41850", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xF41898", Offset = "0xF41898", VA = "0xF41898", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xF418E0", Offset = "0xF418E0", VA = "0xF418E0", Slot = "62")]
		protected virtual void Execute()
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xF418E4", Offset = "0xF418E4", VA = "0xF418E4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xF40A78", Offset = "0xF40A78", VA = "0xF40A78")]
		protected PlayerInputUpdateActionBase()
		{
		}
	}
	[Token(Token = "0x2000330")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Removes all keys and values from the preferences. Use with caution.")]
	public class PlayerPrefsDeleteAll : FsmStateAction
	{
		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xF418F0", Offset = "0xF418F0", VA = "0xF418F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xF418F4", Offset = "0xF418F4", VA = "0xF418F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xF41914", Offset = "0xF41914", VA = "0xF41914")]
		public PlayerPrefsDeleteAll()
		{
		}
	}
	[Token(Token = "0x2000331")]
	[Tooltip("Removes key and its corresponding value from the preferences.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsDeleteKey : FsmStateAction
	{
		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the PlayerPref.")]
		public FsmString key;

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xF4191C", Offset = "0xF4191C", VA = "0xF4191C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xF41974", Offset = "0xF41974", VA = "0xF41974", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xF41A10", Offset = "0xF41A10", VA = "0xF41A10")]
		public PlayerPrefsDeleteKey()
		{
		}
	}
	[Token(Token = "0x2000332")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Returns the value corresponding to key in the preference file if it exists.")]
	public class PlayerPrefsGetFloat : FsmStateAction
	{
		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Case sensitive key.")]
		[CompoundArray("Count", "Key", "Variable")]
		public FsmString[] keys;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the float in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat[] variables;

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xF41A18", Offset = "0xF41A18", VA = "0xF41A18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xF41AA8", Offset = "0xF41AA8", VA = "0xF41AA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xF41C28", Offset = "0xF41C28", VA = "0xF41C28")]
		public PlayerPrefsGetFloat()
		{
		}
	}
	[Token(Token = "0x2000333")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Returns the value corresponding to key in the preference file if it exists.")]
	public class PlayerPrefsGetInt : FsmStateAction
	{
		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Count", "Key", "Variable")]
		[Tooltip("Case sensitive key.")]
		public FsmString[] keys;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the integer in an Int Variable.")]
		public FsmInt[] variables;

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xF41C30", Offset = "0xF41C30", VA = "0xF41C30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xF41CC0", Offset = "0xF41CC0", VA = "0xF41CC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xF41E48", Offset = "0xF41E48", VA = "0xF41E48")]
		public PlayerPrefsGetInt()
		{
		}
	}
	[Token(Token = "0x2000334")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Returns the value corresponding to key in the preference file if it exists.")]
	public class PlayerPrefsGetString : FsmStateAction
	{
		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Count", "Key", "Variable")]
		[Tooltip("Case sensitive key.")]
		public FsmString[] keys;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the string in a String Variable.")]
		public FsmString[] variables;

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xF41E50", Offset = "0xF41E50", VA = "0xF41E50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xF41EC4", Offset = "0xF41EC4", VA = "0xF41EC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xF42058", Offset = "0xF42058", VA = "0xF42058")]
		public PlayerPrefsGetString()
		{
		}
	}
	[Token(Token = "0x2000335")]
	[Tooltip("Returns true if PlayerPref key exists in the preferences.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsHasKey : FsmStateAction
	{
		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The name of the PlayerPref to test for.")]
		public FsmString key;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the result in a bool variable.")]
		[Title("Store Result")]
		[UIHint(UIHint.Variable)]
		public FsmBool variable;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the key exists.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the key does not exist.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xF42060", Offset = "0xF42060", VA = "0xF42060", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xF420B8", Offset = "0xF420B8", VA = "0xF420B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xF4219C", Offset = "0xF4219C", VA = "0xF4219C")]
		public PlayerPrefsHasKey()
		{
		}
	}
	[Token(Token = "0x2000336")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Load variable value saved with {{PlayerPrefs Save Variable}}. The Key should be a unique identifier for the variable.\nNOTE: You cannot save references to Scene Objects in PlayerPrefs!")]
	public class PlayerPrefsLoadVariable : FsmStateAction
	{
		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Case sensitive key.")]
		public FsmString key;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The variable to load.")]
		public FsmVar variable;

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xF421A4", Offset = "0xF421A4", VA = "0xF421A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xF421CC", Offset = "0xF421CC", VA = "0xF421CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xF4235C", Offset = "0xF4235C", VA = "0xF4235C")]
		public PlayerPrefsLoadVariable()
		{
		}
	}
	[Token(Token = "0x2000337")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Save a variable value in PlayerPrefs. You can load the value later with {{PlayerPrefs Load Variable}}.\nNOTE: You cannot save references to Scene Objects in PlayerPrefs!")]
	public class PlayerPrefsSaveVariable : FsmStateAction
	{
		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Case sensitive key.")]
		public FsmString key;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The variable to save.")]
		[UIHint(UIHint.Variable)]
		public FsmVar variable;

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xF42364", Offset = "0xF42364", VA = "0xF42364", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xF4238C", Offset = "0xF4238C", VA = "0xF4238C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xF42408", Offset = "0xF42408", VA = "0xF42408")]
		public PlayerPrefsSaveVariable()
		{
		}
	}
	[Token(Token = "0x2000338")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Sets the value of the preference identified by key. Lets you save a float value that you can load later with {{PlayerPrefs Get Float}}.")]
	public class PlayerPrefsSetFloat : FsmStateAction
	{
		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Case sensitive key.")]
		[CompoundArray("Count", "Key", "Value")]
		public FsmString[] keys;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to save.")]
		public FsmFloat[] values;

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xF42410", Offset = "0xF42410", VA = "0xF42410", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xF424A0", Offset = "0xF424A0", VA = "0xF424A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xF425F8", Offset = "0xF425F8", VA = "0xF425F8")]
		public PlayerPrefsSetFloat()
		{
		}
	}
	[Token(Token = "0x2000339")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Sets the value of the preference identified by key. Lets you save an int value that you can load later with {{PlayerPrefs Get Int}}.")]
	public class PlayerPrefsSetInt : FsmStateAction
	{
		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Case sensitive key.")]
		[CompoundArray("Count", "Key", "Value")]
		public FsmString[] keys;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to save.")]
		public FsmInt[] values;

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xF43600", Offset = "0xF43600", VA = "0xF43600", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xF43690", Offset = "0xF43690", VA = "0xF43690", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xF437F0", Offset = "0xF437F0", VA = "0xF437F0")]
		public PlayerPrefsSetInt()
		{
		}
	}
	[Token(Token = "0x200033A")]
	[Tooltip("Sets the value of the preference identified by key. Lets you save a string that you can load later with {{PlayerPrefs Get String}}.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsSetString : FsmStateAction
	{
		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Count", "Key", "Value")]
		[Tooltip("Case sensitive key.")]
		public FsmString[] keys;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to save.")]
		public FsmString[] values;

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xF437F8", Offset = "0xF437F8", VA = "0xF437F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xF4386C", Offset = "0xF4386C", VA = "0xF4386C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xF439CC", Offset = "0xF439CC", VA = "0xF439CC")]
		public PlayerPrefsSetString()
		{
		}
	}
	[Token(Token = "0x200033B")]
	[ActionCategory("Substance")]
	[Tooltip("Rebuilds all dirty textures. By default the rebuild is spread over multiple frames so it won't halt the game. Check Immediately to rebuild all textures in a single frame.")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	public class RebuildTextures : FsmStateAction
	{
		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Substance material.")]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Rebuild now!")]
		public FsmBool immediately;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if you're animating Substance parameters.")]
		public bool everyFrame;

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xF439D4", Offset = "0xF439D4", VA = "0xF439D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xF43A10", Offset = "0xF43A10", VA = "0xF43A10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xF43A28", Offset = "0xF43A28", VA = "0xF43A28", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xF43A24", Offset = "0xF43A24", VA = "0xF43A24")]
		private void DoRebuildTextures()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xF43A2C", Offset = "0xF43A2C", VA = "0xF43A2C")]
		public RebuildTextures()
		{
		}
	}
	[Token(Token = "0x200033C")]
	[ActionCategory("Substance")]
	[Tooltip("Set a named bool property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	public class SetProceduralBoolean : FsmStateAction
	{
		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Substance Material.")]
		[RequiredField]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The named bool property in the material.")]
		public FsmString boolProperty;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value to set the property to.")]
		public FsmBool boolValue;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xF43A34", Offset = "0xF43A34", VA = "0xF43A34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xF43AC0", Offset = "0xF43AC0", VA = "0xF43AC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xF43AD8", Offset = "0xF43AD8", VA = "0xF43AD8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xF43AD4", Offset = "0xF43AD4", VA = "0xF43AD4")]
		private void DoSetProceduralFloat()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xF43ADC", Offset = "0xF43ADC", VA = "0xF43ADC")]
		public SetProceduralBoolean()
		{
		}
	}
	[Token(Token = "0x200033D")]
	[ActionCategory("Substance")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	[Tooltip("Set a named color property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	public class SetProceduralColor : FsmStateAction
	{
		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Substance Material.")]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The named color property in the material.")]
		public FsmString colorProperty;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The value to set the property to.")]
		[RequiredField]
		public FsmColor colorValue;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xF43AE4", Offset = "0xF43AE4", VA = "0xF43AE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xF43B7C", Offset = "0xF43B7C", VA = "0xF43B7C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xF43B94", Offset = "0xF43B94", VA = "0xF43B94", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xF43B90", Offset = "0xF43B90", VA = "0xF43B90")]
		private void DoSetProceduralFloat()
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xF43B98", Offset = "0xF43B98", VA = "0xF43B98")]
		public SetProceduralColor()
		{
		}
	}
	[Token(Token = "0x200033E")]
	[Tooltip("Set a named float property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	[ActionCategory("Substance")]
	public class SetProceduralFloat : FsmStateAction
	{
		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Substance Material.")]
		[RequiredField]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The named float property in the material.")]
		public FsmString floatProperty;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value to set the property to.")]
		public FsmFloat floatValue;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xF43BA0", Offset = "0xF43BA0", VA = "0xF43BA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xF43C2C", Offset = "0xF43C2C", VA = "0xF43C2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xF43C44", Offset = "0xF43C44", VA = "0xF43C44", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xF43C40", Offset = "0xF43C40", VA = "0xF43C40")]
		private void DoSetProceduralFloat()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xF43C48", Offset = "0xF43C48", VA = "0xF43C48")]
		public SetProceduralFloat()
		{
		}
	}
	[Token(Token = "0x200033F")]
	[ActionCategory("Substance")]
	[Tooltip("Set a named Vector2 property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	public class SetProceduralVector2 : FsmStateAction
	{
		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Substance Material.")]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The named vector property in the material.")]
		public FsmString vector2Property;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The Vector3 value to set the property to.\nNOTE: Use Set Procedural Vector2 for Vector3 values.")]
		public FsmVector2 vector2Value;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xF43C50", Offset = "0xF43C50", VA = "0xF43C50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xF43C90", Offset = "0xF43C90", VA = "0xF43C90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xF43CA8", Offset = "0xF43CA8", VA = "0xF43CA8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xF43CA4", Offset = "0xF43CA4", VA = "0xF43CA4")]
		private void DoSetProceduralVector()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xF43CAC", Offset = "0xF43CAC", VA = "0xF43CAC")]
		public SetProceduralVector2()
		{
		}
	}
	[Token(Token = "0x2000340")]
	[ActionCategory("Substance")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	[Tooltip("Set a named Vector3 property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	public class SetProceduralVector3 : FsmStateAction
	{
		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Substance Material.")]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The named vector property in the material.")]
		[RequiredField]
		public FsmString vector3Property;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value to set the property to.\nNOTE: Use Set Procedural Vector3 for Vector3 values.")]
		public FsmVector3 vector3Value;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xF43CB4", Offset = "0xF43CB4", VA = "0xF43CB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xF43CF4", Offset = "0xF43CF4", VA = "0xF43CF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xF43D0C", Offset = "0xF43D0C", VA = "0xF43D0C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xF43D08", Offset = "0xF43D08", VA = "0xF43D08")]
		private void DoSetProceduralVector()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xF43D10", Offset = "0xF43D10", VA = "0xF43D10")]
		public SetProceduralVector3()
		{
		}
	}
	[Token(Token = "0x2000341")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Gets a quaternion as euler angles.")]
	public class GetQuaternionEulerAngles : QuaternionBaseAction
	{
		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The rotation")]
		public FsmQuaternion quaternion;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The euler angles of the quaternion.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 eulerAngles;

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xF43D18", Offset = "0xF43D18", VA = "0xF43D18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xF43D50", Offset = "0xF43D50", VA = "0xF43D50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xF43DD0", Offset = "0xF43DD0", VA = "0xF43DD0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xF43DE0", Offset = "0xF43DE0", VA = "0xF43DE0", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xF43DF4", Offset = "0xF43DF4", VA = "0xF43DF4", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xF43D7C", Offset = "0xF43D7C", VA = "0xF43D7C")]
		private void GetQuatEuler()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xF43E08", Offset = "0xF43E08", VA = "0xF43E08")]
		public GetQuaternionEulerAngles()
		{
		}
	}
	[Token(Token = "0x2000342")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Creates a rotation which rotates from fromDirection to toDirection. Usually you use this to rotate a transform so that one of its axes, e.g., the y-axis - follows a target direction toDirection in world space.")]
	public class GetQuaternionFromRotation : QuaternionBaseAction
	{
		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("the 'from' direction")]
		public FsmVector3 fromDirection;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("the 'to' direction")]
		[RequiredField]
		public FsmVector3 toDirection;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("the resulting quaternion")]
		public FsmQuaternion result;

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xF43E18", Offset = "0xF43E18", VA = "0xF43E18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xF43E5C", Offset = "0xF43E5C", VA = "0xF43E5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xF43F10", Offset = "0xF43F10", VA = "0xF43F10", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xF43F20", Offset = "0xF43F20", VA = "0xF43F20", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xF43F34", Offset = "0xF43F34", VA = "0xF43F34", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xF43E88", Offset = "0xF43E88", VA = "0xF43E88")]
		private void DoQuatFromRotation()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xF43F48", Offset = "0xF43F48", VA = "0xF43F48")]
		public GetQuaternionFromRotation()
		{
		}
	}
	[Token(Token = "0x2000343")]
	[Tooltip("Get the quaternion from a quaternion multiplied by a quaternion.")]
	[ActionCategory(ActionCategory.Quaternion)]
	public class GetQuaternionMultipliedByQuaternion : QuaternionBaseAction
	{
		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The first quaternion to multiply")]
		public FsmQuaternion quaternionA;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second quaternion to multiply")]
		public FsmQuaternion quaternionB;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The resulting quaternion")]
		[RequiredField]
		public FsmQuaternion result;

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xF43F50", Offset = "0xF43F50", VA = "0xF43F50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xF43F94", Offset = "0xF43F94", VA = "0xF43F94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xF44070", Offset = "0xF44070", VA = "0xF44070", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xF44080", Offset = "0xF44080", VA = "0xF44080", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xF44094", Offset = "0xF44094", VA = "0xF44094", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xF43FC0", Offset = "0xF43FC0", VA = "0xF43FC0")]
		private void DoQuatMult()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xF440A8", Offset = "0xF440A8", VA = "0xF440A8")]
		public GetQuaternionMultipliedByQuaternion()
		{
		}
	}
	[Token(Token = "0x2000344")]
	[Tooltip("Get the vector3 from a quaternion multiplied by a vector.")]
	[ActionCategory(ActionCategory.Quaternion)]
	public class GetQuaternionMultipliedByVector : QuaternionBaseAction
	{
		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The quaternion to multiply")]
		public FsmQuaternion quaternion;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The vector3 to multiply")]
		public FsmVector3 vector3;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The resulting vector3")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 result;

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xF440B0", Offset = "0xF440B0", VA = "0xF440B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xF440F4", Offset = "0xF440F4", VA = "0xF440F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xF44198", Offset = "0xF44198", VA = "0xF44198", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xF441A8", Offset = "0xF441A8", VA = "0xF441A8", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xF441BC", Offset = "0xF441BC", VA = "0xF441BC", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xF44120", Offset = "0xF44120", VA = "0xF44120")]
		private void DoQuatMult()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xF441D0", Offset = "0xF441D0", VA = "0xF441D0")]
		public GetQuaternionMultipliedByVector()
		{
		}
	}
	[Token(Token = "0x2000345")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Creates a rotation which rotates angle degrees around axis.")]
	public class QuaternionAngleAxis : QuaternionBaseAction
	{
		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The angle.")]
		public FsmFloat angle;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The rotation axis.")]
		public FsmVector3 axis;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the rotation of this quaternion variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmQuaternion result;

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xF441D8", Offset = "0xF441D8", VA = "0xF441D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xF44220", Offset = "0xF44220", VA = "0xF44220", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xF442C8", Offset = "0xF442C8", VA = "0xF442C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xF442D8", Offset = "0xF442D8", VA = "0xF442D8", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xF442EC", Offset = "0xF442EC", VA = "0xF442EC", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xF4424C", Offset = "0xF4424C", VA = "0xF4424C")]
		private void DoQuatAngleAxis()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xF44300", Offset = "0xF44300", VA = "0xF44300")]
		public QuaternionAngleAxis()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public abstract class QuaternionBaseAction : FsmStateAction
	{
		[Token(Token = "0x2000347")]
		public enum everyFrameOptions
		{
			[Token(Token = "0x4000E84")]
			Update,
			[Token(Token = "0x4000E85")]
			FixedUpdate,
			[Token(Token = "0x4000E86")]
			LateUpdate
		}

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Repeat every frame. Useful if any of the values are changing.")]
		public bool everyFrame;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Defines how to perform the action when 'every Frame' is enabled.")]
		public everyFrameOptions everyFrameOption;

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xF44308", Offset = "0xF44308", VA = "0xF44308", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xF43E10", Offset = "0xF43E10", VA = "0xF43E10")]
		protected QuaternionBaseAction()
		{
		}
	}
	[Token(Token = "0x2000348")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Check if two quaternions are equals or not. Takes in account inversed representations of quaternions")]
	public class QuaternionCompare : QuaternionBaseAction
	{
		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("First Quaternion")]
		public FsmQuaternion Quaternion1;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Second Quaternion")]
		public FsmQuaternion Quaternion2;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("true if Quaternions are equal")]
		public FsmBool equal;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Quaternions are equal")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Quaternions are not equal")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xF44364", Offset = "0xF44364", VA = "0xF44364", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xF44440", Offset = "0xF44440", VA = "0xF44440", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xF44500", Offset = "0xF44500", VA = "0xF44500", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xF44510", Offset = "0xF44510", VA = "0xF44510", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xF44524", Offset = "0xF44524", VA = "0xF44524", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xF4446C", Offset = "0xF4446C", VA = "0xF4446C")]
		private void DoQuatCompare()
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xF44538", Offset = "0xF44538", VA = "0xF44538")]
		public QuaternionCompare()
		{
		}
	}
	[Token(Token = "0x2000349")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).")]
	public class QuaternionEuler : QuaternionBaseAction
	{
		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Euler angles.")]
		public FsmVector3 eulerAngles;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the euler angles of this quaternion variable.")]
		public FsmQuaternion result;

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xF44540", Offset = "0xF44540", VA = "0xF44540", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xF44578", Offset = "0xF44578", VA = "0xF44578", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xF445F4", Offset = "0xF445F4", VA = "0xF445F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xF44604", Offset = "0xF44604", VA = "0xF44604", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xF44618", Offset = "0xF44618", VA = "0xF44618", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xF445A4", Offset = "0xF445A4", VA = "0xF445A4")]
		private void DoQuatEuler()
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xF4462C", Offset = "0xF4462C", VA = "0xF4462C")]
		public QuaternionEuler()
		{
		}
	}
	[Token(Token = "0x200034A")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Inverse a quaternion")]
	public class QuaternionInverse : QuaternionBaseAction
	{
		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("the rotation")]
		public FsmQuaternion rotation;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Store the inverse of the rotation variable.")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion result;

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xF44634", Offset = "0xF44634", VA = "0xF44634", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xF4466C", Offset = "0xF4466C", VA = "0xF4466C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xF446D0", Offset = "0xF446D0", VA = "0xF446D0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xF446E0", Offset = "0xF446E0", VA = "0xF446E0", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xF446F4", Offset = "0xF446F4", VA = "0xF446F4", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xF44698", Offset = "0xF44698", VA = "0xF44698")]
		private void DoQuatInverse()
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xF44708", Offset = "0xF44708", VA = "0xF44708")]
		public QuaternionInverse()
		{
		}
	}
	[Token(Token = "0x200034B")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Interpolates between from and to by t and normalizes the result afterwards.")]
	public class QuaternionLerp : QuaternionBaseAction
	{
		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("From Quaternion.")]
		public FsmQuaternion fromQuaternion;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("To Quaternion.")]
		public FsmQuaternion toQuaternion;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Interpolate between fromQuaternion and toQuaternion by this amount. Value is clamped to 0-1 range. 0 = fromQuaternion; 1 = toQuaternion; 0.5 = half way between.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat amount;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result in this quaternion variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion storeResult;

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xF44710", Offset = "0xF44710", VA = "0xF44710", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xF447EC", Offset = "0xF447EC", VA = "0xF447EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xF448C0", Offset = "0xF448C0", VA = "0xF448C0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xF448D0", Offset = "0xF448D0", VA = "0xF448D0", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xF448E4", Offset = "0xF448E4", VA = "0xF448E4", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xF44818", Offset = "0xF44818", VA = "0xF44818")]
		private void DoQuatLerp()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xF448F8", Offset = "0xF448F8", VA = "0xF448F8")]
		public QuaternionLerp()
		{
		}
	}
	[Token(Token = "0x200034C")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Creates a rotation that looks along forward with the head upwards along upwards.")]
	public class QuaternionLookRotation : QuaternionBaseAction
	{
		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("the rotation direction")]
		[RequiredField]
		public FsmVector3 direction;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The up direction")]
		public FsmVector3 upVector;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the inverse of the rotation variable.")]
		public FsmQuaternion result;

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xF44900", Offset = "0xF44900", VA = "0xF44900", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xF4499C", Offset = "0xF4499C", VA = "0xF4499C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xF44A88", Offset = "0xF44A88", VA = "0xF44A88", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xF44A98", Offset = "0xF44A98", VA = "0xF44A98", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xF44AAC", Offset = "0xF44AAC", VA = "0xF44AAC", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xF449C8", Offset = "0xF449C8", VA = "0xF449C8")]
		private void DoQuatLookRotation()
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xF44AC0", Offset = "0xF44AC0", VA = "0xF44AC0")]
		public QuaternionLookRotation()
		{
		}
	}
	[Token(Token = "0x200034D")]
	[Tooltip("Use a low pass filter to reduce the influence of sudden changes in a quaternion Variable.")]
	[ActionCategory(ActionCategory.Quaternion)]
	public class QuaternionLowPassFilter : QuaternionBaseAction
	{
		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("quaternion Variable to filter. Should generally come from some constantly updated input")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion quaternionVariable;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have. E.g., 0.1 keeps 10 percent of the unfiltered quaternion and 90 percent of the previously filtered value.")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion filteredQuaternion;

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xF44AC8", Offset = "0xF44AC8", VA = "0xF44AC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xF44B10", Offset = "0xF44B10", VA = "0xF44B10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xF44B44", Offset = "0xF44B44", VA = "0xF44B44", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xF44CB8", Offset = "0xF44CB8", VA = "0xF44CB8", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xF44CCC", Offset = "0xF44CCC", VA = "0xF44CCC", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xF44B54", Offset = "0xF44B54", VA = "0xF44B54")]
		private void DoQuatLowPassFilter()
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xF44CE0", Offset = "0xF44CE0", VA = "0xF44CE0")]
		public QuaternionLowPassFilter()
		{
		}
	}
	[Token(Token = "0x200034E")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Rotates a rotation from towards to. This is essentially the same as Quaternion.Slerp but instead the function will ensure that the angular speed never exceeds maxDegreesDelta. Negative values of maxDegreesDelta pushes the rotation away from to.")]
	public class QuaternionRotateTowards : QuaternionBaseAction
	{
		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("From Quaternion.")]
		public FsmQuaternion fromQuaternion;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("To Quaternion.")]
		[RequiredField]
		public FsmQuaternion toQuaternion;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The angular speed never exceeds maxDegreesDelta. Negative values of maxDegreesDelta pushes the rotation away from to.")]
		[RequiredField]
		public FsmFloat maxDegreesDelta;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result in this quaternion variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmQuaternion storeResult;

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xF44CE8", Offset = "0xF44CE8", VA = "0xF44CE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xF44DC4", Offset = "0xF44DC4", VA = "0xF44DC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xF44F14", Offset = "0xF44F14", VA = "0xF44F14", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xF44F24", Offset = "0xF44F24", VA = "0xF44F24", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xF44F38", Offset = "0xF44F38", VA = "0xF44F38", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xF44DF0", Offset = "0xF44DF0", VA = "0xF44DF0")]
		private void DoQuatRotateTowards()
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xF44F4C", Offset = "0xF44F4C", VA = "0xF44F4C")]
		public QuaternionRotateTowards()
		{
		}
	}
	[Token(Token = "0x200034F")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Spherically interpolates between from and to by t.")]
	public class QuaternionSlerp : QuaternionBaseAction
	{
		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("From Quaternion.")]
		public FsmQuaternion fromQuaternion;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("To Quaternion.")]
		public FsmQuaternion toQuaternion;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Interpolate between fromQuaternion and toQuaternion by this amount. Value is clamped to 0-1 range. 0 = fromQuaternion; 1 = toQuaternion; 0.5 = half way between.")]
		[RequiredField]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat amount;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result in this quaternion variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmQuaternion storeResult;

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xF44F54", Offset = "0xF44F54", VA = "0xF44F54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xF45034", Offset = "0xF45034", VA = "0xF45034", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xF45108", Offset = "0xF45108", VA = "0xF45108", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xF45118", Offset = "0xF45118", VA = "0xF45118", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xF4512C", Offset = "0xF4512C", VA = "0xF4512C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xF45060", Offset = "0xF45060", VA = "0xF45060")]
		private void DoQuatSlerp()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xF45140", Offset = "0xF45140", VA = "0xF45140")]
		public QuaternionSlerp()
		{
		}
	}
	[Token(Token = "0x2000350")]
	[Tooltip("Real time for wait")]
	[ActionCategory("GVR")]
	public class RealWait : FsmStateAction
	{
		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ulong startTime;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		public FsmFloat time;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float timer;

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xF45148", Offset = "0xF45148", VA = "0xF45148", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xF45180", Offset = "0xF45180", VA = "0xF45180", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xF45224", Offset = "0xF45224", VA = "0xF45224", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xF452F0", Offset = "0xF452F0", VA = "0xF452F0")]
		public RealWait()
		{
		}
	}
	[Token(Token = "0x2000351")]
	[Tooltip("Get the individual fields of a Rect Variable and store them in Float Variables.")]
	[ActionCategory(ActionCategory.Rect)]
	public class GetRectFields : FsmStateAction
	{
		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Rect Variable.")]
		public FsmRect rectVariable;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the X value in a Float Variable.")]
		public FsmFloat storeX;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the X value in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeY;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the Width in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeWidth;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Height in a Float Variable.")]
		public FsmFloat storeHeight;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the Min position in a Vector2 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeMin;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Max position in a Vector2 Variable.")]
		public FsmVector2 storeMax;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Size in a Vector2 Variable.")]
		public FsmVector2 storeSize;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the Center in a Vector2 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeCenter;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xF452F8", Offset = "0xF452F8", VA = "0xF452F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xF45398", Offset = "0xF45398", VA = "0xF45398", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xF45540", Offset = "0xF45540", VA = "0xF45540", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xF453C4", Offset = "0xF453C4", VA = "0xF453C4")]
		private void DoGetRectFields()
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xF45544", Offset = "0xF45544", VA = "0xF45544")]
		public GetRectFields()
		{
		}
	}
	[Token(Token = "0x2000352")]
	[Tooltip("Tests if a point is inside a rectangle.")]
	[ActionCategory(ActionCategory.Rect)]
	public class RectContains : FsmStateAction
	{
		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Rectangle to test.")]
		[RequiredField]
		public FsmRect rectangle;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Point to test.")]
		public FsmVector3 point;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Specify/override X value.")]
		public FsmFloat x;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Specify/override Y value.")]
		public FsmFloat y;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the Point is inside the Rectangle.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if the Point is outside the Rectangle.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the result in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xF4554C", Offset = "0xF4554C", VA = "0xF4554C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xF456AC", Offset = "0xF456AC", VA = "0xF456AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xF457E8", Offset = "0xF457E8", VA = "0xF457E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xF456D8", Offset = "0xF456D8", VA = "0xF456D8")]
		private void DoRectContains()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xF457EC", Offset = "0xF457EC", VA = "0xF457EC")]
		public RectContains()
		{
		}
	}
	[Token(Token = "0x2000353")]
	[ActionCategory(ActionCategory.Rect)]
	[Tooltip("Tests if 2 Rects overlap.")]
	public class RectOverlaps : FsmStateAction
	{
		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("First Rectangle.")]
		public FsmRect rect1;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Second Rectangle.")]
		[RequiredField]
		public FsmRect rect2;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the Rects overlap.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the Rects do not overlap.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xF457F4", Offset = "0xF457F4", VA = "0xF457F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xF458D0", Offset = "0xF458D0", VA = "0xF458D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xF45998", Offset = "0xF45998", VA = "0xF45998", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xF458FC", Offset = "0xF458FC", VA = "0xF458FC")]
		private void DoRectOverlap()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xF4599C", Offset = "0xF4599C", VA = "0xF4599C")]
		public static bool Intersect(Rect a, Rect b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xF45A88", Offset = "0xF45A88", VA = "0xF45A88")]
		public static void FlipNegative(ref Rect r)
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xF45B4C", Offset = "0xF45B4C", VA = "0xF45B4C")]
		public RectOverlaps()
		{
		}
	}
	[Token(Token = "0x2000354")]
	[ActionCategory(ActionCategory.Rect)]
	[Tooltip("Sets the individual fields of a Rect Variable. To leave any field unchanged, set variable to 'None'.")]
	public class SetRectFields : FsmStateAction
	{
		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Rect Variable to set.")]
		[RequiredField]
		public FsmRect rectVariable;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Set X value.")]
		public FsmFloat x;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set Y value.")]
		public FsmFloat y;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set Width.")]
		public FsmFloat width;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set Height.")]
		public FsmFloat height;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the fields are animated.")]
		public bool everyFrame;

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xF45B54", Offset = "0xF45B54", VA = "0xF45B54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xF45C6C", Offset = "0xF45C6C", VA = "0xF45C6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xF45DAC", Offset = "0xF45DAC", VA = "0xF45DAC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xF45C98", Offset = "0xF45C98", VA = "0xF45C98")]
		private void DoSetRectFields()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xF45DB0", Offset = "0xF45DB0", VA = "0xF45DB0")]
		public SetRectFields()
		{
		}
	}
	[Token(Token = "0x2000355")]
	[Tooltip("Sets a Rect's value using Vector2 points.")]
	[ActionCategory(ActionCategory.Rect)]
	public class SetRectFromPoints : FsmStateAction
	{
		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Rectangle to set.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmRect rectangle;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("First point.")]
		public FsmVector2 point1;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Second point.")]
		public FsmVector2 point2;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Avoid negative width and height values. This is useful for UI rects that don't draw if they have negative dimensions.")]
		public FsmBool positiveDimensions;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xF45DB8", Offset = "0xF45DB8", VA = "0xF45DB8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xF45EB8", Offset = "0xF45EB8", VA = "0xF45EB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xF4602C", Offset = "0xF4602C", VA = "0xF4602C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xF45EE4", Offset = "0xF45EE4", VA = "0xF45EE4")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xF46030", Offset = "0xF46030", VA = "0xF46030")]
		public SetRectFromPoints()
		{
		}
	}
	[Token(Token = "0x2000356")]
	[Tooltip("Sets the value of a Rect Variable.")]
	[ActionCategory(ActionCategory.Rect)]
	public class SetRectValue : FsmStateAction
	{
		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Rect Variable to set.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmRect rectVariable;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The value to set it to.")]
		public FsmRect rectValue;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xF46038", Offset = "0xF46038", VA = "0xF46038", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xF46068", Offset = "0xF46068", VA = "0xF46068", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xF460A4", Offset = "0xF460A4", VA = "0xF460A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xF460CC", Offset = "0xF460CC", VA = "0xF460CC")]
		public SetRectValue()
		{
		}
	}
	[Token(Token = "0x2000357")]
	[Tooltip("Check if a RectTransform contains the screen point as seen from the given camera.")]
	[ActionCategory("RectTransform")]
	public class RectTransformContainsScreenPoint : FsmStateAction
	{
		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject target.")]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The screenPoint as a Vector2. Leave to none if you want to use the Vector3 alternative")]
		public FsmVector2 screenPointVector2;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The screenPoint as a Vector3. Leave to none if you want to use the Vector2 alternative")]
		public FsmVector3 orScreenPointVector3;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Define if screenPoint are expressed as normalized screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public bool normalizedScreenPoint;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Camera. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be set to null explicitly (default).\nLeave to none and the camera will be the one from EventSystem.current.camera")]
		[CheckForComponent(typeof(Camera))]
		public FsmGameObject camera;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result.")]
		[ActionSection("Result")]
		public FsmBool isContained;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if screenPoint is contained in RectTransform.")]
		public FsmEvent isContainedEvent;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent if screenPoint is NOT contained in RectTransform.")]
		public FsmEvent isNotContainedEvent;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private RectTransform _rt;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Camera _camera;

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xF460D4", Offset = "0xF460D4", VA = "0xF460D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xF461AC", Offset = "0xF461AC", VA = "0xF461AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xF464B0", Offset = "0xF464B0", VA = "0xF464B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xF4632C", Offset = "0xF4632C", VA = "0xF4632C")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xF464B4", Offset = "0xF464B4", VA = "0xF464B4")]
		public RectTransformContainsScreenPoint()
		{
		}
	}
	[Token(Token = "0x2000358")]
	[Tooltip("Flips the horizontal and vertical axes of the RectTransform size and alignment, and optionally its children as well.")]
	[ActionCategory("RectTransform")]
	public class RectTransformFlipLayoutAxis : FsmStateAction
	{
		[Token(Token = "0x2000359")]
		public enum RectTransformFlipOptions
		{
			[Token(Token = "0x4000EDC")]
			Horizontal,
			[Token(Token = "0x4000EDD")]
			Vertical,
			[Token(Token = "0x4000EDE")]
			Both
		}

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The axis to flip")]
		public RectTransformFlipOptions axis;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Flips around the pivot if true. Flips within the parent rect if false.")]
		public FsmBool keepPositioning;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Flip the children as well?")]
		public FsmBool recursive;

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xF464BC", Offset = "0xF464BC", VA = "0xF464BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xF464FC", Offset = "0xF464FC", VA = "0xF464FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xF46518", Offset = "0xF46518", VA = "0xF46518")]
		private void DoFlip()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xF46728", Offset = "0xF46728", VA = "0xF46728")]
		public RectTransformFlipLayoutAxis()
		{
		}
	}
	[Token(Token = "0x200035A")]
	[Tooltip("Get the position of the pivot of this RectTransform relative to the anchor reference point.")]
	[ActionCategory("RectTransform")]
	public class RectTransformGetAnchoredPosition : BaseUpdateAction
	{
		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The anchored Position")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 position;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the anchored Position")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the anchored Position")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xF46730", Offset = "0xF46730", VA = "0xF46730", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xF46784", Offset = "0xF46784", VA = "0xF46784", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xF4690C", Offset = "0xF4690C", VA = "0xF4690C", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xF46860", Offset = "0xF46860", VA = "0xF46860")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xF46910", Offset = "0xF46910", VA = "0xF46910")]
		public RectTransformGetAnchoredPosition()
		{
		}
	}
	[Token(Token = "0x200035B")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the normalized position in the parent RectTransform that the upper right corner is anchored to.")]
	public class RectTransformGetAnchorMax : BaseUpdateAction
	{
		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The anchorMax")]
		public FsmVector2 anchorMax;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the anchorMax")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the anchorMax")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xF46918", Offset = "0xF46918", VA = "0xF46918", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xF4696C", Offset = "0xF4696C", VA = "0xF4696C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xF46AF4", Offset = "0xF46AF4", VA = "0xF46AF4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xF46A48", Offset = "0xF46A48", VA = "0xF46A48")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xF46AF8", Offset = "0xF46AF8", VA = "0xF46AF8")]
		public RectTransformGetAnchorMax()
		{
		}
	}
	[Token(Token = "0x200035C")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the normalized position in the parent RectTransform that the lower left corner is anchored to.")]
	public class RectTransformGetAnchorMin : BaseUpdateAction
	{
		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The anchorMin")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 anchorMin;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the anchorMin")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The y component of the anchorMin")]
		public FsmFloat y;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xF46B00", Offset = "0xF46B00", VA = "0xF46B00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xF46B54", Offset = "0xF46B54", VA = "0xF46B54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xF46CDC", Offset = "0xF46CDC", VA = "0xF46CDC", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xF46C30", Offset = "0xF46C30", VA = "0xF46C30")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xF46CE0", Offset = "0xF46CE0", VA = "0xF46CE0")]
		public RectTransformGetAnchorMin()
		{
		}
	}
	[Token(Token = "0x200035D")]
	[ActionCategory("RectTransform")]
	[Tooltip("The normalized position in the parent RectTransform that the upper right corner is anchored to. This is relative screen space, values ranges from 0 to 1")]
	public class RectTransformGetAnchorMinAndMax : BaseUpdateAction
	{
		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 anchor max. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMax;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Vector2 anchor min. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMin;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		public FsmFloat xMax;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		public FsmFloat yMax;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat xMin;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		public FsmFloat yMin;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _rt;

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xF46CE8", Offset = "0xF46CE8", VA = "0xF46CE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xF46D6C", Offset = "0xF46D6C", VA = "0xF46D6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0xF46F84", Offset = "0xF46F84", VA = "0xF46F84", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0xF46E48", Offset = "0xF46E48", VA = "0xF46E48")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xF46F88", Offset = "0xF46F88", VA = "0xF46F88")]
		public RectTransformGetAnchorMinAndMax()
		{
		}
	}
	[Token(Token = "0x200035E")]
	[Tooltip("Get the Local position of this RectTransform. This is Screen Space values using the anchoring as reference, so 0,0 is the center of the screen if the anchor is te center of the screen.")]
	[ActionCategory("RectTransform")]
	public class RectTransformGetLocalPosition : BaseUpdateAction
	{
		[Token(Token = "0x200035F")]
		public enum LocalPositionReference
		{
			[Token(Token = "0x4000EFF")]
			Anchor,
			[Token(Token = "0x4000F00")]
			CenterPosition
		}

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Get local position relative to Anchor or Center.")]
		public LocalPositionReference reference;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The position")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 position;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The position in a Vector 2d ")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 position2d;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The x component of the Position")]
		public FsmFloat x;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The y component of the Position")]
		public FsmFloat y;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The z component of the Position")]
		[UIHint(UIHint.Variable)]
		public FsmFloat z;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _rt;

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xF46F90", Offset = "0xF46F90", VA = "0xF46F90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xF47008", Offset = "0xF47008", VA = "0xF47008", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xF47288", Offset = "0xF47288", VA = "0xF47288", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xF470E4", Offset = "0xF470E4", VA = "0xF470E4")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xF4728C", Offset = "0xF4728C", VA = "0xF4728C")]
		public RectTransformGetLocalPosition()
		{
		}
	}
	[Token(Token = "0x2000360")]
	[Tooltip("Gets the local rotation of this RectTransform.")]
	[ActionCategory("RectTransform")]
	public class RectTransformGetLocalRotation : BaseUpdateAction
	{
		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rotation")]
		public FsmVector3 rotation;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the rotation")]
		public FsmFloat x;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the rotation")]
		public FsmFloat y;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The z component of the rotation")]
		public FsmFloat z;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RectTransform _rt;

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xF47294", Offset = "0xF47294", VA = "0xF47294", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xF473C4", Offset = "0xF473C4", VA = "0xF473C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xF475D0", Offset = "0xF475D0", VA = "0xF475D0", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xF474A0", Offset = "0xF474A0", VA = "0xF474A0")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xF475D4", Offset = "0xF475D4", VA = "0xF475D4")]
		public RectTransformGetLocalRotation()
		{
		}
	}
	[Token(Token = "0x2000361")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the offset of the upper right corner of the rectangle relative to the upper right anchor")]
	public class RectTransformGetOffsetMax : BaseUpdateAction
	{
		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The offsetMax")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 offsetMax;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the offsetMax")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the offsetMax")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xF475DC", Offset = "0xF475DC", VA = "0xF475DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xF47630", Offset = "0xF47630", VA = "0xF47630", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xF477B8", Offset = "0xF477B8", VA = "0xF477B8", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xF4770C", Offset = "0xF4770C", VA = "0xF4770C")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xF477BC", Offset = "0xF477BC", VA = "0xF477BC")]
		public RectTransformGetOffsetMax()
		{
		}
	}
	[Token(Token = "0x2000362")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the offset of the lower left corner of the rectangle relative to the lower left anchor")]
	public class RectTransformGetOffsetMin : BaseUpdateAction
	{
		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The offsetMin")]
		public FsmVector2 offsetMin;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the offsetMin")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the offsetMin")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xF477C4", Offset = "0xF477C4", VA = "0xF477C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xF47818", Offset = "0xF47818", VA = "0xF47818", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xF479A0", Offset = "0xF479A0", VA = "0xF479A0", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xF478F4", Offset = "0xF478F4", VA = "0xF478F4")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xF479A4", Offset = "0xF479A4", VA = "0xF479A4")]
		public RectTransformGetOffsetMin()
		{
		}
	}
	[Token(Token = "0x2000363")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the normalized position in this RectTransform that it rotates around.")]
	public class RectTransformGetPivot : BaseUpdateAction
	{
		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The pivot")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 pivot;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the pivot")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the pivot")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xF479AC", Offset = "0xF479AC", VA = "0xF479AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xF47A00", Offset = "0xF47A00", VA = "0xF47A00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xF47B88", Offset = "0xF47B88", VA = "0xF47B88", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xF47ADC", Offset = "0xF47ADC", VA = "0xF47ADC")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xF47B8C", Offset = "0xF47B8C", VA = "0xF47B8C")]
		public RectTransformGetPivot()
		{
		}
	}
	[Token(Token = "0x2000364")]
	[ActionCategory("RectTransform")]
	[Tooltip("The calculated rectangle in the local space of the Transform.")]
	public class RectTransformGetRect : BaseUpdateAction
	{
		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Rect in a Rect variable.")]
		public FsmRect rect;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the x coordinate in a float variable.")]
		public FsmFloat x;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the y\u00a0coordinate in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the width in a float variable.")]
		public FsmFloat width;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the height in a float variable.")]
		public FsmFloat height;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xF47B94", Offset = "0xF47B94", VA = "0xF47B94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xF47CC0", Offset = "0xF47CC0", VA = "0xF47CC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xF47F08", Offset = "0xF47F08", VA = "0xF47F08", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xF47D9C", Offset = "0xF47D9C", VA = "0xF47D9C")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xF47F0C", Offset = "0xF47F0C", VA = "0xF47F0C")]
		public RectTransformGetRect()
		{
		}
	}
	[Token(Token = "0x2000365")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the size of this RectTransform relative to the distances between the anchors. this is the 'Width' and 'Height' values in the RectTransform inspector.")]
	public class RectTransformGetSizeDelta : BaseUpdateAction
	{
		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The sizeDelta")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 sizeDelta;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the sizeDelta, the width.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat width;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The y component of the sizeDelta, the height")]
		public FsmFloat height;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xF47F14", Offset = "0xF47F14", VA = "0xF47F14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xF47F68", Offset = "0xF47F68", VA = "0xF47F68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xF480F0", Offset = "0xF480F0", VA = "0xF480F0", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xF48044", Offset = "0xF48044", VA = "0xF48044")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xF480F4", Offset = "0xF480F4", VA = "0xF480F4")]
		public RectTransformGetSizeDelta()
		{
		}
	}
	[Token(Token = "0x2000366")]
	[ActionCategory("RectTransform")]
	[Tooltip("Convert a given point in screen space into a pixel correct point.")]
	public class RectTransformPixelAdjustPoint : BaseUpdateAction
	{
		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The canvas. Leave to none to use the canvas of the gameObject")]
		[RequiredField]
		[CheckForComponent(typeof(Canvas))]
		public FsmGameObject canvas;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The screen position.")]
		public FsmVector2 screenPoint;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Result")]
		[RequiredField]
		[Tooltip("Pixel adjusted point from the screen position.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 pixelPoint;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Canvas _canvas;

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xF480FC", Offset = "0xF480FC", VA = "0xF480FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xF481A8", Offset = "0xF481A8", VA = "0xF481A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xF48450", Offset = "0xF48450", VA = "0xF48450", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xF483C0", Offset = "0xF483C0", VA = "0xF483C0")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xF48454", Offset = "0xF48454", VA = "0xF48454")]
		public RectTransformPixelAdjustPoint()
		{
		}
	}
	[Token(Token = "0x2000367")]
	[Tooltip("Given a rect transform, return the corner points in pixel accurate coordinates.")]
	[ActionCategory("RectTransform")]
	public class RectTransformPixelAdjustRect : BaseUpdateAction
	{
		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject target.")]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[CheckForComponent(typeof(Canvas))]
		[Tooltip("The canvas. Leave to none to use the canvas of the gameObject")]
		public FsmGameObject canvas;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[RequiredField]
		[Tooltip("Pixel adjusted rect.")]
		public FsmRect pixelRect;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RectTransform _rt;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Canvas _canvas;

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xF4845C", Offset = "0xF4845C", VA = "0xF4845C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xF484F8", Offset = "0xF484F8", VA = "0xF484F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xF48788", Offset = "0xF48788", VA = "0xF48788", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xF48710", Offset = "0xF48710", VA = "0xF48710")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xF4878C", Offset = "0xF4878C", VA = "0xF4878C")]
		public RectTransformPixelAdjustRect()
		{
		}
	}
	[Token(Token = "0x2000368")]
	[ActionCategory("RectTransform")]
	[Tooltip("Transform a screen space point to a local position that is on the plane of the given RectTransform. Also check if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
	public class RectTransformScreenPointToLocalPointInRectangle : FsmStateAction
	{
		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The screenPoint as a Vector2. Leave as none if you want to use the Vector3 alternative")]
		public FsmVector2 screenPointVector2;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The screenPoint as a Vector3. Leave as none if you want to use the Vector2 alternative")]
		public FsmVector3 orScreenPointVector3;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Define if screenPoint are normalized screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public bool normalizedScreenPoint;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Camera. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be set to null explicitly (default).\nLeave to none and the camera will be the one from EventSystem.current.camera")]
		[CheckForComponent(typeof(Camera))]
		public FsmGameObject camera;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ActionSection("Result")]
		[Tooltip("Store the local Position as a vector3 of the screenPoint on the RectTransform Plane.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 localPosition;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the local Position as a vector2 of the screenPoint on the RectTransform Plane.")]
		public FsmVector2 localPosition2d;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("True if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isHit;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
		public FsmEvent hitEvent;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if the plane of the RectTransform is NOT hit, regardless of whether the point is inside the rectangle.")]
		public FsmEvent noHitEvent;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private RectTransform _rt;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera _camera;

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xF48794", Offset = "0xF48794", VA = "0xF48794", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xF488C8", Offset = "0xF488C8", VA = "0xF488C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xF48C40", Offset = "0xF48C40", VA = "0xF48C40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xF48A6C", Offset = "0xF48A6C", VA = "0xF48A6C")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xF48C44", Offset = "0xF48C44", VA = "0xF48C44")]
		public RectTransformScreenPointToLocalPointInRectangle()
		{
		}
	}
	[Token(Token = "0x2000369")]
	[ActionCategory("RectTransform")]
	[Tooltip("Transform a screen space point to a world position that is on the plane of the given RectTransform. Also check if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
	public class RectTransformScreenPointToWorldPointInRectangle : FsmStateAction
	{
		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The screenPoint as a Vector2. Leave to none if you want to use the Vector3 alternative")]
		public FsmVector2 screenPointVector2;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The screenPoint as a Vector3. Leave to none if you want to use the Vector2 alternative")]
		public FsmVector3 orScreenPointVector3;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Define if screenPoint are expressed as normalized screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public bool normalizedScreenPoint;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("The Camera. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be set to null explicitly (default).\nLeave to none and the camera will be the one from EventSystem.current.camera")]
		public FsmGameObject camera;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the world Position of the screenPoint on the RectTransform Plane.")]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 worldPosition;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("True if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isHit;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
		public FsmEvent hitEvent;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the plane of the RectTransform is NOT hit, regardless of whether the point is inside the rectangle.")]
		public FsmEvent noHitEvent;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RectTransform _rt;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera _camera;

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xF48C4C", Offset = "0xF48C4C", VA = "0xF48C4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xF48D70", Offset = "0xF48D70", VA = "0xF48D70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xF49090", Offset = "0xF49090", VA = "0xF49090", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xF48EF0", Offset = "0xF48EF0", VA = "0xF48EF0")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xF49094", Offset = "0xF49094", VA = "0xF49094")]
		public RectTransformScreenPointToWorldPointInRectangle()
		{
		}
	}
	[Token(Token = "0x200036A")]
	[ActionCategory("RectTransform")]
	[Tooltip("The position of the pivot of this RectTransform relative to the anchor reference point.The anchor reference point is where the anchors are. If the anchor are not together, the four anchor positions are interpolated according to the pivot normalized values.")]
	public class RectTransformSetAnchoredPosition : BaseUpdateAction
	{
		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 position. Set to none for no effect, and/or set individual axis below. ")]
		public FsmVector2 position;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Setting only the x value. Overrides position x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the y value. Overrides position x value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xF4909C", Offset = "0xF4909C", VA = "0xF4909C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0xF4916C", Offset = "0xF4916C", VA = "0xF4916C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xF49300", Offset = "0xF49300", VA = "0xF49300", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0xF49248", Offset = "0xF49248", VA = "0xF49248")]
		private void DoSetAnchoredPosition()
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xF49304", Offset = "0xF49304", VA = "0xF49304")]
		public RectTransformSetAnchoredPosition()
		{
		}
	}
	[Token(Token = "0x200036B")]
	[ActionCategory("RectTransform")]
	[Tooltip("The normalized position in the parent RectTransform that the upper right corner is anchored to. This is relative screen space, values ranges from 0 to 1")]
	public class RectTransformSetAnchorMax : BaseUpdateAction
	{
		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 anchor. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMax;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xF4930C", Offset = "0xF4930C", VA = "0xF4930C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xF493DC", Offset = "0xF493DC", VA = "0xF493DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xF49570", Offset = "0xF49570", VA = "0xF49570", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xF494B8", Offset = "0xF494B8", VA = "0xF494B8")]
		private void DoSetAnchorMax()
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xF49574", Offset = "0xF49574", VA = "0xF49574")]
		public RectTransformSetAnchorMax()
		{
		}
	}
	[Token(Token = "0x200036C")]
	[Tooltip("The normalized position in the parent RectTransform that the lower left corner is anchored to. This is relative screen space, values ranges from 0 to 1")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetAnchorMin : BaseUpdateAction
	{
		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 anchor. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMin;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xF4957C", Offset = "0xF4957C", VA = "0xF4957C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xF4964C", Offset = "0xF4964C", VA = "0xF4964C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xF497E0", Offset = "0xF497E0", VA = "0xF497E0", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xF49728", Offset = "0xF49728", VA = "0xF49728")]
		private void DoSetAnchorMin()
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xF497E4", Offset = "0xF497E4", VA = "0xF497E4")]
		public RectTransformSetAnchorMin()
		{
		}
	}
	[Token(Token = "0x200036D")]
	[ActionCategory("RectTransform")]
	[Tooltip("The normalized position in the parent RectTransform that the upper right corner is anchored to. This is relative screen space, values ranges from 0 to 1")]
	public class RectTransformSetAnchorMinAndMax : BaseUpdateAction
	{
		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 anchor max. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMax;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Vector2 anchor min. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMin;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat xMax;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		public FsmFloat yMax;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		public FsmFloat xMin;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		public FsmFloat yMin;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _rt;

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xF497EC", Offset = "0xF497EC", VA = "0xF497EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xF49928", Offset = "0xF49928", VA = "0xF49928", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xF49B50", Offset = "0xF49B50", VA = "0xF49B50", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xF49A04", Offset = "0xF49A04", VA = "0xF49A04")]
		private void DoSetAnchorMax()
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xF49B54", Offset = "0xF49B54", VA = "0xF49B54")]
		public RectTransformSetAnchorMinAndMax()
		{
		}
	}
	[Token(Token = "0x200036E")]
	[ActionCategory("RectTransform")]
	[Tooltip("The position ( normalized or not) in the parent RectTransform keeping the anchor rect size intact. This lets you position the whole Rect in one go. Use this to easily animate movement (like IOS sliding UIView)")]
	public class RectTransformSetAnchorRectPosition : BaseUpdateAction
	{
		[Token(Token = "0x200036F")]
		public enum AnchorReference
		{
			[Token(Token = "0x4000F67")]
			TopLeft,
			[Token(Token = "0x4000F68")]
			Top,
			[Token(Token = "0x4000F69")]
			TopRight,
			[Token(Token = "0x4000F6A")]
			Right,
			[Token(Token = "0x4000F6B")]
			BottomRight,
			[Token(Token = "0x4000F6C")]
			Bottom,
			[Token(Token = "0x4000F6D")]
			BottomLeft,
			[Token(Token = "0x4000F6E")]
			Left,
			[Token(Token = "0x4000F6F")]
			Center
		}

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The reference for the given position")]
		public AnchorReference anchorReference;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Are the supplied screen coordinates normalized (0-1), or in pixels.")]
		public FsmBool normalized;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Vector2 position, and/or set individual axis below.")]
		public FsmVector2 anchor;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Anchor X position.")]
		public FsmFloat x;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Anchor Y position.")]
		public FsmFloat y;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rect _anchorRect;

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xF49B5C", Offset = "0xF49B5C", VA = "0xF49B5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xF49C54", Offset = "0xF49C54", VA = "0xF49C54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xF49FF4", Offset = "0xF49FF4", VA = "0xF49FF4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xF49D30", Offset = "0xF49D30", VA = "0xF49D30")]
		private void DoSetAnchor()
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xF49FF8", Offset = "0xF49FF8", VA = "0xF49FF8")]
		public RectTransformSetAnchorRectPosition()
		{
		}
	}
	[Token(Token = "0x2000370")]
	[ActionCategory("RectTransform")]
	[Tooltip("Set the local position of this RectTransform.")]
	public class RectTransformSetLocalPosition : BaseUpdateAction
	{
		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position. Set to none for no effect")]
		public FsmVector2 position2d;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Or the 3d position. Set to none for no effect")]
		public FsmVector3 position;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The x component of the position. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The y component of the position. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The z component of the position. Set to none for no effect")]
		public FsmFloat z;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _rt;

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xF4A000", Offset = "0xF4A000", VA = "0xF4A000", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xF4A174", Offset = "0xF4A174", VA = "0xF4A174", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xF4A400", Offset = "0xF4A400", VA = "0xF4A400", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xF4A274", Offset = "0xF4A274", VA = "0xF4A274")]
		private void DoSetValues()
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xF4A404", Offset = "0xF4A404", VA = "0xF4A404")]
		public RectTransformSetLocalPosition()
		{
		}
	}
	[Token(Token = "0x2000371")]
	[ActionCategory("RectTransform")]
	[Tooltip("Set the local rotation of this RectTransform.")]
	public class RectTransformSetLocalRotation : BaseUpdateAction
	{
		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rotation. Set to none for no effect")]
		public FsmVector3 rotation;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the rotation. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the rotation. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The z component of the rotation. Set to none for no effect")]
		public FsmFloat z;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RectTransform _rt;

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xF4A40C", Offset = "0xF4A40C", VA = "0xF4A40C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xF4A53C", Offset = "0xF4A53C", VA = "0xF4A53C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xF4A784", Offset = "0xF4A784", VA = "0xF4A784", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xF4A618", Offset = "0xF4A618", VA = "0xF4A618")]
		private void DoSetValues()
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xF4A788", Offset = "0xF4A788", VA = "0xF4A788")]
		public RectTransformSetLocalRotation()
		{
		}
	}
	[Token(Token = "0x2000372")]
	[ActionCategory("RectTransform")]
	[Tooltip("\tThe offset of the upper right corner of the rectangle relative to the upper right anchor.")]
	public class RectTransformSetOffsetMax : BaseUpdateAction
	{
		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 offsetMax. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 offsetMax;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Setting only the x value. Overrides offsetMax x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the y value. Overrides offsetMax y value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xF4A790", Offset = "0xF4A790", VA = "0xF4A790", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xF4A860", Offset = "0xF4A860", VA = "0xF4A860", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xF4A9F4", Offset = "0xF4A9F4", VA = "0xF4A9F4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xF4A93C", Offset = "0xF4A93C", VA = "0xF4A93C")]
		private void DoSetOffsetMax()
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xF4A9F8", Offset = "0xF4A9F8", VA = "0xF4A9F8")]
		public RectTransformSetOffsetMax()
		{
		}
	}
	[Token(Token = "0x2000373")]
	[ActionCategory("RectTransform")]
	[Tooltip("The offset of the lower left corner of the rectangle relative to the lower left anchor.")]
	public class RectTransformSetOffsetMin : BaseUpdateAction
	{
		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 offsetMin. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 offsetMin;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Setting only the x value. Overrides offsetMin x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the x value. Overrides offsetMin y value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xF4AA00", Offset = "0xF4AA00", VA = "0xF4AA00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xF4AAD0", Offset = "0xF4AAD0", VA = "0xF4AAD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xF4AC64", Offset = "0xF4AC64", VA = "0xF4AC64", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xF4ABAC", Offset = "0xF4ABAC", VA = "0xF4ABAC")]
		private void DoSetOffsetMin()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xF4AC68", Offset = "0xF4AC68", VA = "0xF4AC68")]
		public RectTransformSetOffsetMin()
		{
		}
	}
	[Token(Token = "0x2000374")]
	[ActionCategory("RectTransform")]
	[Tooltip("The normalized position in this RectTransform that it rotates around.")]
	public class RectTransformSetPivot : BaseUpdateAction
	{
		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 pivot. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 pivot;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides pivot x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides pivot y value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xF4AC70", Offset = "0xF4AC70", VA = "0xF4AC70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xF4AD40", Offset = "0xF4AD40", VA = "0xF4AD40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xF4AED4", Offset = "0xF4AED4", VA = "0xF4AED4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xF4AE1C", Offset = "0xF4AE1C", VA = "0xF4AE1C")]
		private void DoSetPivotPosition()
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xF4AED8", Offset = "0xF4AED8", VA = "0xF4AED8")]
		public RectTransformSetPivot()
		{
		}
	}
	[Token(Token = "0x2000375")]
	[ActionCategory("RectTransform")]
	[Tooltip("Set the screen position of this RectTransform.")]
	public class RectTransformSetScreenPosition : BaseUpdateAction
	{
		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position in screen coordinates.")]
		public FsmVector2 screenPosition;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set the x component of the position. Set to None for no effect.")]
		public FsmFloat x;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the y component of the position. Set to None for no effect.")]
		public FsmFloat y;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Screen coordinates are normalized (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Canvas rootCanvas;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RectTransform rootRectTransform;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera canvasCamera;

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xF4AEE0", Offset = "0xF4AEE0", VA = "0xF4AEE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xF4AFF4", Offset = "0xF4AFF4", VA = "0xF4AFF4")]
		private bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xF4B1AC", Offset = "0xF4B1AC", VA = "0xF4B1AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xF4B3B4", Offset = "0xF4B3B4", VA = "0xF4B3B4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xF4B1E4", Offset = "0xF4B1E4", VA = "0xF4B1E4")]
		private void DoSetScreenPosition()
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xF4B3B8", Offset = "0xF4B3B8", VA = "0xF4B3B8")]
		public RectTransformSetScreenPosition()
		{
		}
	}
	[Token(Token = "0x2000376")]
	[ActionCategory("RectTransform")]
	[Tooltip("Set the screen rect of a RectTransform using 2 Vector2 points.")]
	public class RectTransformSetScreenRectFromPoints : BaseUpdateAction
	{
		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The screen position of the first point to define the rect.")]
		public FsmVector2 point1;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The screen position of the second point to define the rect.")]
		[RequiredField]
		public FsmVector2 point2;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Screen points use normalized coordinates (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the resulting screen rect.")]
		public FsmRect storeScreenRect;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Canvas rootCanvas;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RectTransform rootRectTransform;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera canvasCamera;

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xF4B3C0", Offset = "0xF4B3C0", VA = "0xF4B3C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xF4B4A0", Offset = "0xF4B4A0", VA = "0xF4B4A0")]
		private bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xF4B658", Offset = "0xF4B658", VA = "0xF4B658", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xF4B8B4", Offset = "0xF4B8B4", VA = "0xF4B8B4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xF4B690", Offset = "0xF4B690", VA = "0xF4B690")]
		private void DoSetValues()
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xF4B8B8", Offset = "0xF4B8B8", VA = "0xF4B8B8")]
		public RectTransformSetScreenRectFromPoints()
		{
		}
	}
	[Token(Token = "0x2000377")]
	[Tooltip("Set the size of this RectTransform relative to the distances between the anchors. this is the 'Width' and 'Height' values in the RectTransform inspector.")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetSizeDelta : BaseUpdateAction
	{
		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("TheVector2 sizeDelta. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 sizeDelta;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Setting only the x value. Overrides sizeDelta x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the x value. Overrides sizeDelta y value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xF4B8C0", Offset = "0xF4B8C0", VA = "0xF4B8C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xF4B990", Offset = "0xF4B990", VA = "0xF4B990", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xF4BB24", Offset = "0xF4BB24", VA = "0xF4BB24", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xF4BA6C", Offset = "0xF4BA6C", VA = "0xF4BA6C")]
		private void DoSetSizeDelta()
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0xF4BB28", Offset = "0xF4BB28", VA = "0xF4BB28")]
		public RectTransformSetSizeDelta()
		{
		}
	}
	[Token(Token = "0x2000378")]
	[ActionCategory("RectTransform")]
	[Tooltip("RectTransforms position from world space into screen space. Leave the camera to none for default behavior.")]
	public class RectTransformWorldToScreenPoint : BaseUpdateAction
	{
		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("The camera to perform the calculation. Leave as None for default behavior.")]
		public FsmOwnerDefault camera;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen position in a Vector3 Variable. Z will equal zero.")]
		public FsmVector3 screenPoint;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen X position in a Float Variable.")]
		public FsmFloat screenX;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen Y position in a Float Variable.")]
		public FsmFloat screenY;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Normalize screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public FsmBool normalize;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Camera _cam;

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xF4BB30", Offset = "0xF4BB30", VA = "0xF4BB30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xF4BC48", Offset = "0xF4BC48", VA = "0xF4BC48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xF4BE98", Offset = "0xF4BE98", VA = "0xF4BE98", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xF4BD98", Offset = "0xF4BD98", VA = "0xF4BD98")]
		private void DoWorldToScreenPoint()
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xF4BE9C", Offset = "0xF4BE9C", VA = "0xF4BE9C")]
		public RectTransformWorldToScreenPoint()
		{
		}
	}
	[Token(Token = "0x2000379")]
	[Tooltip("Enables/Disables Fog in the scene.")]
	[ActionCategory(ActionCategory.RenderSettings)]
	public class EnableFog : FsmStateAction
	{
		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enableFog;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if the Enable Fog setting is changing.")]
		public bool everyFrame;

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xF4BEA4", Offset = "0xF4BEA4", VA = "0xF4BEA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xF4BED4", Offset = "0xF4BED4", VA = "0xF4BED4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xF4BF1C", Offset = "0xF4BF1C", VA = "0xF4BF1C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xF4BF44", Offset = "0xF4BF44", VA = "0xF4BF44")]
		public EnableFog()
		{
		}
	}
	[Token(Token = "0x200037A")]
	[Tooltip("Sets the Ambient Light Color for the scene.")]
	[ActionCategory(ActionCategory.RenderSettings)]
	public class SetAmbientLight : FsmStateAction
	{
		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Color of the ambient light.")]
		[RequiredField]
		public FsmColor ambientColor;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the color is animated.")]
		public bool everyFrame;

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xF4BF4C", Offset = "0xF4BF4C", VA = "0xF4BF4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xF4BF88", Offset = "0xF4BF88", VA = "0xF4BF88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xF4BFD8", Offset = "0xF4BFD8", VA = "0xF4BFD8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xF4BFB4", Offset = "0xF4BFB4", VA = "0xF4BFB4")]
		private void DoSetAmbientColor()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xF4BFDC", Offset = "0xF4BFDC", VA = "0xF4BFDC")]
		public SetAmbientLight()
		{
		}
	}
	[Token(Token = "0x200037B")]
	[Tooltip("Sets the intensity of all Flares in the scene.")]
	[ActionCategory(ActionCategory.RenderSettings)]
	public class SetFlareStrength : FsmStateAction
	{
		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The intensity of flares in the scene.")]
		public FsmFloat flareStrength;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the intensity is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xF4BFE4", Offset = "0xF4BFE4", VA = "0xF4BFE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xF4C018", Offset = "0xF4C018", VA = "0xF4C018", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xF4C068", Offset = "0xF4C068", VA = "0xF4C068", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xF4C044", Offset = "0xF4C044", VA = "0xF4C044")]
		private void DoSetFlareStrength()
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xF4C06C", Offset = "0xF4C06C", VA = "0xF4C06C")]
		public SetFlareStrength()
		{
		}
	}
	[Token(Token = "0x200037C")]
	[ActionCategory(ActionCategory.RenderSettings)]
	[Tooltip("Sets the color of the Fog in the scene.")]
	public class SetFogColor : FsmStateAction
	{
		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The color of the fog.")]
		public FsmColor fogColor;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the color is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xF4C074", Offset = "0xF4C074", VA = "0xF4C074", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xF4C0B0", Offset = "0xF4C0B0", VA = "0xF4C0B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xF4C100", Offset = "0xF4C100", VA = "0xF4C100", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xF4C0DC", Offset = "0xF4C0DC", VA = "0xF4C0DC")]
		private void DoSetFogColor()
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xF4C104", Offset = "0xF4C104", VA = "0xF4C104")]
		public SetFogColor()
		{
		}
	}
	[Token(Token = "0x200037D")]
	[ActionCategory(ActionCategory.RenderSettings)]
	[Tooltip("Sets the density of the Fog in the scene.")]
	public class SetFogDensity : FsmStateAction
	{
		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The density of the fog.")]
		[RequiredField]
		public FsmFloat fogDensity;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the fog density is animated.")]
		public bool everyFrame;

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xF4C10C", Offset = "0xF4C10C", VA = "0xF4C10C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xF4C13C", Offset = "0xF4C13C", VA = "0xF4C13C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xF4C18C", Offset = "0xF4C18C", VA = "0xF4C18C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xF4C168", Offset = "0xF4C168", VA = "0xF4C168")]
		private void DoSetFogDensity()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xF4C190", Offset = "0xF4C190", VA = "0xF4C190")]
		public SetFogDensity()
		{
		}
	}
	[Token(Token = "0x200037E")]
	[Tooltip("Sets the size of light halos.")]
	[ActionCategory(ActionCategory.RenderSettings)]
	public class SetHaloStrength : FsmStateAction
	{
		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The size of light halos.")]
		public FsmFloat haloStrength;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the size is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xF4C198", Offset = "0xF4C198", VA = "0xF4C198", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xF4C1C8", Offset = "0xF4C1C8", VA = "0xF4C1C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xF4C218", Offset = "0xF4C218", VA = "0xF4C218", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xF4C1F4", Offset = "0xF4C1F4", VA = "0xF4C1F4")]
		private void DoSetHaloStrength()
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xF4C21C", Offset = "0xF4C21C", VA = "0xF4C21C")]
		public SetHaloStrength()
		{
		}
	}
	[Token(Token = "0x200037F")]
	[ActionCategory(ActionCategory.RenderSettings)]
	[Tooltip("Sets the global Skybox.")]
	public class SetSkybox : FsmStateAction
	{
		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The skybox material.")]
		public FsmMaterial skybox;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if the Skybox is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xF4C224", Offset = "0xF4C224", VA = "0xF4C224", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xF4C230", Offset = "0xF4C230", VA = "0xF4C230", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xF4C274", Offset = "0xF4C274", VA = "0xF4C274", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xF4C298", Offset = "0xF4C298", VA = "0xF4C298")]
		public SetSkybox()
		{
		}
	}
	[Token(Token = "0x2000380")]
	[Tooltip("Allow scenes to be activated. Use this after {{LoadSceneAsynch}} if you did not set the scene to activate after loading")]
	[ActionCategory(ActionCategory.Scene)]
	public class AllowSceneActivation : FsmStateAction
	{
		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The name of the new scene. It cannot be empty, null, or same as existing scenes.")]
		public FsmInt aSynchOperationHashCode;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Allow the scene to be activated")]
		public FsmBool allowSceneActivation;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Result")]
		[Tooltip("The loading's progress.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat progress;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("True when loading is done")]
		[UIHint(UIHint.Variable)]
		public FsmBool isDone;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent when scene loading is done")]
		public FsmEvent doneEvent;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when action could not be performed. Check Log for more information")]
		public FsmEvent failureEvent;

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xF4C2A0", Offset = "0xF4C2A0", VA = "0xF4C2A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xF4C314", Offset = "0xF4C314", VA = "0xF4C314", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xF4C46C", Offset = "0xF4C46C", VA = "0xF4C46C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xF4C318", Offset = "0xF4C318", VA = "0xF4C318")]
		private void DoAllowSceneActivation()
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xF4C638", Offset = "0xF4C638", VA = "0xF4C638")]
		public AllowSceneActivation()
		{
		}
	}
	[Token(Token = "0x2000381")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Create an empty new scene with the given name additively. The path of the new scene will be empty")]
	public class CreateScene : FsmStateAction
	{
		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the new scene. It cannot be empty or null, or same as the name of the existing scenes.")]
		[RequiredField]
		public FsmString sceneName;

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xF4C640", Offset = "0xF4C640", VA = "0xF4C640", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xF4C64C", Offset = "0xF4C64C", VA = "0xF4C64C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xF4C6CC", Offset = "0xF4C6CC", VA = "0xF4C6CC")]
		public CreateScene()
		{
		}
	}
	[Token(Token = "0x2000382")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get the last activateChanged Scene Event data when event was sent from the action 'SendSceneActiveChangedEvent")]
	public class GetSceneActivateChangedEventData : FsmStateAction
	{
		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("New Active Scene")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The new active scene name")]
		public FsmString newName;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new active scene path")]
		[UIHint(UIHint.Variable)]
		public FsmString newPath;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("true if the new active scene is valid.")]
		[UIHint(UIHint.Variable)]
		public FsmBool newIsValid;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The new active scene Build Index")]
		[UIHint(UIHint.Variable)]
		public FsmInt newBuildIndex;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("true if the new active scene is loaded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool newIsLoaded;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("true if the new active scene is modified.")]
		[UIHint(UIHint.Variable)]
		public FsmBool newIsDirty;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The new active scene RootCount")]
		[UIHint(UIHint.Variable)]
		public FsmInt newRootCount;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The new active scene Root GameObjects")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray newRootGameObjects;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Previous Active Scene")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The previous active scene name")]
		public FsmString previousName;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The previous active scene path")]
		public FsmString previousPath;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the previous active scene is valid.")]
		public FsmBool previousIsValid;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The previous active scene Build Index")]
		[UIHint(UIHint.Variable)]
		public FsmInt previousBuildIndex;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("true if the previous active scene is loaded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool previousIsLoaded;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the previous active scene is modified.")]
		public FsmBool previousIsDirty;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The previous active scene RootCount")]
		public FsmInt previousRootCount;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[Tooltip("The previous active scene Root GameObjects")]
		public FsmArray previousRootGameObjects;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Scene _scene;

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xF4C6D4", Offset = "0xF4C6D4", VA = "0xF4C6D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xF4C7DC", Offset = "0xF4C7DC", VA = "0xF4C7DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xF4CBF0", Offset = "0xF4CBF0", VA = "0xF4CBF0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xF4C7F8", Offset = "0xF4C7F8", VA = "0xF4C7F8")]
		private void DoGetSceneProperties()
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xF4CBF4", Offset = "0xF4CBF4", VA = "0xF4CBF4")]
		public GetSceneActivateChangedEventData()
		{
		}
	}
	[Token(Token = "0x2000383")]
	[Tooltip("Returns the index of a scene in the Build Settings. Always returns -1 if the scene was loaded through an AssetBundle.")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneBuildIndex : GetSceneActionBase
	{
		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[ActionSection("Result")]
		[Tooltip("The scene Build Index")]
		public FsmInt buildIndex;

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xF4CBFC", Offset = "0xF4CBFC", VA = "0xF4CBFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xF4CCA4", Offset = "0xF4CCA4", VA = "0xF4CCA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xF4D00C", Offset = "0xF4D00C", VA = "0xF4D00C")]
		private void DoGetSceneBuildIndex()
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xF4D078", Offset = "0xF4D078", VA = "0xF4D078")]
		public GetSceneBuildIndex()
		{
		}
	}
	[Token(Token = "0x2000384")]
	[Tooltip("Get the total number of currently loaded scenes.")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneCount : FsmStateAction
	{
		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The number of currently loaded scenes.")]
		public FsmInt sceneCount;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every Frame")]
		public bool everyFrame;

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xF4D088", Offset = "0xF4D088", VA = "0xF4D088", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xF4D0AC", Offset = "0xF4D0AC", VA = "0xF4D0AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xF4D140", Offset = "0xF4D140", VA = "0xF4D140", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xF4D0D8", Offset = "0xF4D0D8", VA = "0xF4D0D8")]
		private void DoGetSceneCount()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xF4D144", Offset = "0xF4D144", VA = "0xF4D144")]
		public GetSceneCount()
		{
		}
	}
	[Token(Token = "0x2000385")]
	[Tooltip("Get the number of scenes in Build Settings.")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneCountInBuildSettings : FsmStateAction
	{
		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The number of scenes in Build Settings.")]
		public FsmInt sceneCountInBuildSettings;

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xF4D14C", Offset = "0xF4D14C", VA = "0xF4D14C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xF4D158", Offset = "0xF4D158", VA = "0xF4D158", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xF4D174", Offset = "0xF4D174", VA = "0xF4D174")]
		private void DoGetSceneCountInBuildSettings()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xF4D1DC", Offset = "0xF4D1DC", VA = "0xF4D1DC")]
		public GetSceneCountInBuildSettings()
		{
		}
	}
	[Token(Token = "0x2000386")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene isDirty flag. True if the scene is modified.")]
	public class GetSceneIsDirty : GetSceneActionBase
	{
		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[Tooltip("true if the scene is modified.")]
		public FsmBool isDirty;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the scene is modified.")]
		public FsmEvent isDirtyEvent;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if the scene is unmodified.")]
		public FsmEvent isNotDirtyEvent;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xF4D1E4", Offset = "0xF4D1E4", VA = "0xF4D1E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xF4D20C", Offset = "0xF4D20C", VA = "0xF4D20C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xF4D2B0", Offset = "0xF4D2B0", VA = "0xF4D2B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xF4D240", Offset = "0xF4D240", VA = "0xF4D240")]
		private void DoGetSceneIsDirty()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xF4D2B4", Offset = "0xF4D2B4", VA = "0xF4D2B4")]
		public GetSceneIsDirty()
		{
		}
	}
	[Token(Token = "0x2000387")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene isLoaded flag.")]
	public class GetSceneIsLoaded : GetSceneActionBase
	{
		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Result")]
		[Tooltip("true if the scene is loaded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isLoaded;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the scene is loaded.")]
		public FsmEvent isLoadedEvent;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if the scene is not loaded.")]
		public FsmEvent isNotLoadedEvent;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every Frame")]
		public bool everyFrame;

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xF4D2BC", Offset = "0xF4D2BC", VA = "0xF4D2BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xF4D2E4", Offset = "0xF4D2E4", VA = "0xF4D2E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xF4D388", Offset = "0xF4D388", VA = "0xF4D388", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xF4D318", Offset = "0xF4D318", VA = "0xF4D318")]
		private void DoGetSceneIsLoaded()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xF4D38C", Offset = "0xF4D38C", VA = "0xF4D38C")]
		public GetSceneIsLoaded()
		{
		}
	}
	[Token(Token = "0x2000388")]
	[Tooltip("Get a scene isValid flag. A scene may be invalid if, for example, you tried to open a scene that does not exist. In this case, the scene returned from EditorSceneManager.OpenScene would return False for IsValid. ")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneIsValid : GetSceneActionBase
	{
		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is loaded.")]
		[ActionSection("Result")]
		public FsmBool isValid;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the scene is valid.")]
		public FsmEvent isValidEvent;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if the scene is not valid.")]
		public FsmEvent isNotValidEvent;

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xF4D394", Offset = "0xF4D394", VA = "0xF4D394", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xF4D3B4", Offset = "0xF4D3B4", VA = "0xF4D3B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xF4D3D8", Offset = "0xF4D3D8", VA = "0xF4D3D8")]
		private void DoGetSceneIsValid()
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xF4D480", Offset = "0xF4D480", VA = "0xF4D480")]
		public GetSceneIsValid()
		{
		}
	}
	[Token(Token = "0x2000389")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get the last Loaded Scene Event data when event was sent from the action 'SendSceneLoadedEvent")]
	public class GetSceneLoadedEventData : FsmStateAction
	{
		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene loaded mode")]
		[ObjectType(typeof(LoadSceneMode))]
		public FsmEnum loadedMode;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene name")]
		public FsmString name;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The scene path")]
		[UIHint(UIHint.Variable)]
		public FsmString path;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("true if the scene is valid.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isValid;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene Build Index")]
		public FsmInt buildIndex;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("true if the scene is loaded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isLoaded;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is modified.")]
		public FsmBool isDirty;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The scene RootCount")]
		[UIHint(UIHint.Variable)]
		public FsmInt rootCount;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[Tooltip("The scene Root GameObjects")]
		[UIHint(UIHint.Variable)]
		public FsmArray rootGameObjects;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Scene _scene;

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xF4D488", Offset = "0xF4D488", VA = "0xF4D488", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xF4D520", Offset = "0xF4D520", VA = "0xF4D520", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xF4D53C", Offset = "0xF4D53C", VA = "0xF4D53C")]
		private void DoGetSceneProperties()
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xF4D7B0", Offset = "0xF4D7B0", VA = "0xF4D7B0")]
		public GetSceneLoadedEventData()
		{
		}
	}
	[Token(Token = "0x200038A")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene name.")]
	public class GetSceneName : GetSceneActionBase
	{
		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene name")]
		[ActionSection("Result")]
		[RequiredField]
		public FsmString name;

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xF4D7B8", Offset = "0xF4D7B8", VA = "0xF4D7B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xF4D7D8", Offset = "0xF4D7D8", VA = "0xF4D7D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xF4D7FC", Offset = "0xF4D7FC", VA = "0xF4D7FC")]
		private void DoGetSceneName()
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xF4D874", Offset = "0xF4D874", VA = "0xF4D874")]
		public GetSceneName()
		{
		}
	}
	[Token(Token = "0x200038B")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene path.")]
	public class GetScenePath : GetSceneActionBase
	{
		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[Tooltip("The scene path")]
		public FsmString path;

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xF4D87C", Offset = "0xF4D87C", VA = "0xF4D87C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xF4D89C", Offset = "0xF4D89C", VA = "0xF4D89C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xF4D8C0", Offset = "0xF4D8C0", VA = "0xF4D8C0")]
		private void DoGetScenePath()
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xF4D938", Offset = "0xF4D938", VA = "0xF4D938")]
		public GetScenePath()
		{
		}
	}
	[Token(Token = "0x200038C")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene isDirty flag. true if the scene is modified. ")]
	public class GetSceneProperties : GetSceneActionBase
	{
		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene name")]
		public FsmString name;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The scene path")]
		[UIHint(UIHint.Variable)]
		public FsmString path;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The scene Build Index")]
		[UIHint(UIHint.Variable)]
		public FsmInt buildIndex;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("true if the scene is valid.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isValid;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is loaded.")]
		public FsmBool isLoaded;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is modified.")]
		public FsmBool isDirty;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The scene RootCount")]
		[UIHint(UIHint.Variable)]
		public FsmInt rootCount;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The scene Root GameObjects")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray rootGameObjects;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xF4D940", Offset = "0xF4D940", VA = "0xF4D940", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xF4D9D8", Offset = "0xF4D9D8", VA = "0xF4D9D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xF4DA0C", Offset = "0xF4DA0C", VA = "0xF4DA0C")]
		private void DoGetSceneProperties()
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xF4DC08", Offset = "0xF4DC08", VA = "0xF4DC08")]
		public GetSceneProperties()
		{
		}
	}
	[Token(Token = "0x200038D")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene RootCount, the number of root transforms of this scene.")]
	public class GetSceneRootCount : GetSceneActionBase
	{
		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[ActionSection("Result")]
		[Tooltip("The scene RootCount")]
		[UIHint(UIHint.Variable)]
		public FsmInt rootCount;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xF4DC10", Offset = "0xF4DC10", VA = "0xF4DC10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xF4DC38", Offset = "0xF4DC38", VA = "0xF4DC38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xF4DCD8", Offset = "0xF4DCD8", VA = "0xF4DCD8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xF4DC6C", Offset = "0xF4DC6C", VA = "0xF4DC6C")]
		private void DoGetSceneRootCount()
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xF4DCDC", Offset = "0xF4DCDC", VA = "0xF4DCDC")]
		public GetSceneRootCount()
		{
		}
	}
	[Token(Token = "0x200038E")]
	[Tooltip("Get a scene Root GameObjects.")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneRootGameObjects : GetSceneActionBase
	{
		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Result")]
		[Tooltip("The scene Root GameObjects")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray rootGameObjects;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every Frame")]
		public bool everyFrame;

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xF4DCE4", Offset = "0xF4DCE4", VA = "0xF4DCE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xF4DD0C", Offset = "0xF4DD0C", VA = "0xF4DD0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xF4DDB8", Offset = "0xF4DDB8", VA = "0xF4DDB8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xF4DD40", Offset = "0xF4DD40", VA = "0xF4DD40")]
		private void DoGetSceneRootGameObjects()
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xF4DDBC", Offset = "0xF4DDBC", VA = "0xF4DDBC")]
		public GetSceneRootGameObjects()
		{
		}
	}
	[Token(Token = "0x200038F")]
	[Tooltip("Get the last Unloaded Scene Event data when event was sent from the action 'SendSceneUnloadedEvent")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneUnloadedEventData : FsmStateAction
	{
		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene name")]
		public FsmString name;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The scene path")]
		[UIHint(UIHint.Variable)]
		public FsmString path;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The scene Build Index")]
		[UIHint(UIHint.Variable)]
		public FsmInt buildIndex;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is valid.")]
		public FsmBool isValid;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("true if the scene is loaded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isLoaded;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is modified.")]
		public FsmBool isDirty;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The scene RootCount")]
		[UIHint(UIHint.Variable)]
		public FsmInt rootCount;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The scene Root GameObjects")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray rootGameObjects;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Scene _scene;

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xF4DDC4", Offset = "0xF4DDC4", VA = "0xF4DDC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xF4DE44", Offset = "0xF4DE44", VA = "0xF4DE44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xF4E08C", Offset = "0xF4E08C", VA = "0xF4E08C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xF4DE70", Offset = "0xF4DE70", VA = "0xF4DE70")]
		private void DoGetSceneProperties()
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xF4E090", Offset = "0xF4E090", VA = "0xF4E090")]
		public GetSceneUnloadedEventData()
		{
		}
	}
	[Token(Token = "0x2000390")]
	public abstract class GetSceneActionBase : FsmStateAction
	{
		[Token(Token = "0x2000391")]
		public enum SceneReferenceOptions
		{
			[Token(Token = "0x4001011")]
			SceneAtIndex,
			[Token(Token = "0x4001012")]
			SceneByName,
			[Token(Token = "0x4001013")]
			SceneByPath
		}

		[Token(Token = "0x2000392")]
		public enum SceneSimpleReferenceOptions
		{
			[Token(Token = "0x4001015")]
			SceneAtIndex,
			[Token(Token = "0x4001016")]
			SceneByName
		}

		[Token(Token = "0x2000393")]
		public enum SceneBuildReferenceOptions
		{
			[Token(Token = "0x4001018")]
			SceneAtBuildIndex,
			[Token(Token = "0x4001019")]
			SceneByName
		}

		[Token(Token = "0x2000394")]
		public enum SceneAllReferenceOptions
		{
			[Token(Token = "0x400101B")]
			ActiveScene,
			[Token(Token = "0x400101C")]
			SceneAtIndex,
			[Token(Token = "0x400101D")]
			SceneByName,
			[Token(Token = "0x400101E")]
			SceneByPath,
			[Token(Token = "0x400101F")]
			SceneByGameObject
		}

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference option of the Scene")]
		public SceneAllReferenceOptions sceneReference;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The scene Index.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The scene Name.")]
		public FsmString sceneByName;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The scene Path.")]
		public FsmString sceneByPath;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Scene of GameObject")]
		public FsmOwnerDefault sceneByGameObject;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("True if SceneReference resolves to a scene")]
		[UIHint(UIHint.Variable)]
		public FsmBool sceneFound;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if SceneReference resolves to a scene")]
		public FsmEvent sceneFoundEvent;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if SceneReference do not resolve to a scene")]
		public FsmEvent sceneNotFoundEvent;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The Scene Cache")]
		protected Scene _scene;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("True if a scene was found, use _scene to access it")]
		protected bool _sceneFound;

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xF4CC1C", Offset = "0xF4CC1C", VA = "0xF4CC1C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xF4CCC8", Offset = "0xF4CCC8", VA = "0xF4CCC8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xF4D080", Offset = "0xF4D080", VA = "0xF4D080")]
		protected GetSceneActionBase()
		{
		}
	}
	[Token(Token = "0x2000395")]
	[Tooltip("Loads the scene by its name or index in Build Settings. ")]
	[ActionCategory(ActionCategory.Scene)]
	public class LoadScene : FsmStateAction
	{
		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene")]
		public GetSceneActionBase.SceneSimpleReferenceOptions sceneReference;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to load. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index of the scene to load.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ObjectType(typeof(LoadSceneMode))]
		[Tooltip("Allows you to specify whether or not to load the scene additively. See LoadSceneMode Unity doc for more information about the options.")]
		public FsmEnum loadSceneMode;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Result")]
		[Tooltip("True if the scene was loaded")]
		public FsmBool success;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if the scene was loaded")]
		public FsmEvent successEvent;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if a problem occurred, check log for information")]
		public FsmEvent failureEvent;

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xF4E098", Offset = "0xF4E098", VA = "0xF4E098", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xF4E104", Offset = "0xF4E104", VA = "0xF4E104", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xF4E180", Offset = "0xF4E180", VA = "0xF4E180")]
		private bool DoLoadScene()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xF4E364", Offset = "0xF4E364", VA = "0xF4E364")]
		public LoadScene()
		{
		}
	}
	[Token(Token = "0x2000396")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Loads the scene by its name or index in Build Settings.")]
	public class LoadSceneAsynch : FsmStateAction
	{
		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene")]
		public GetSceneActionBase.SceneSimpleReferenceOptions sceneReference;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to load. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index of the scene to load.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Allows you to specify whether or not to load the scene additively. See LoadSceneMode Unity doc for more information about the options.")]
		[ObjectType(typeof(LoadSceneMode))]
		public FsmEnum loadSceneMode;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Allow the scene to be activated as soon as it's ready")]
		public FsmBool allowSceneActivation;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("lets you tweak in which order async operation calls will be performed. Leave to none for default")]
		public FsmInt operationPriority;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Use this hash to activate the Scene if you have set 'AllowSceneActivation' to false, you'll need to use it in the action 'AllowSceneActivation' to effectively load the scene.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmInt aSyncOperationHashCode;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The loading's progress.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat progress;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("True when loading is done")]
		[UIHint(UIHint.Variable)]
		public FsmBool isDone;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("True when loading is done but still waiting for scene activation")]
		[UIHint(UIHint.Variable)]
		public FsmBool pendingActivation;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent when scene loading is done")]
		public FsmEvent doneEvent;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent when scene loading is done but scene not yet activated. Use aSyncOperationHashCode value in 'AllowSceneActivation' to proceed")]
		public FsmEvent pendingActivationEvent;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event sent if the scene to load was not found")]
		public FsmEvent sceneNotFoundEvent;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AsyncOperation _asyncOperation;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int _asynchOperationUid;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool pendingActivationCallBackDone;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<int, AsyncOperation> aSyncOperationLUT;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int aSynchUidCounter;

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xF4E36C", Offset = "0xF4E36C", VA = "0xF4E36C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xF4E490", Offset = "0xF4E490", VA = "0xF4E490", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xF4E4FC", Offset = "0xF4E4FC", VA = "0xF4E4FC")]
		private bool DoLoadAsynch()
		{
			return default(bool);
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xF4E83C", Offset = "0xF4E83C", VA = "0xF4E83C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xF4EA10", Offset = "0xF4EA10", VA = "0xF4EA10", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xF4EA1C", Offset = "0xF4EA1C", VA = "0xF4EA1C")]
		public LoadSceneAsynch()
		{
		}
	}
	[Token(Token = "0x2000397")]
	[Tooltip("This will merge the source scene into the destinationScene. This function merges the contents of the source scene into the destination scene, and deletes the source scene. All GameObjects at the root of the source scene are moved to the root of the destination scene. NOTE: This function is destructive: The source scene will be destroyed once the merge has been completed.")]
	[ActionCategory(ActionCategory.Scene)]
	public class MergeScenes : FsmStateAction
	{
		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[ActionSection("Source")]
		[Tooltip("The reference options of the source Scene")]
		public GetSceneActionBase.SceneAllReferenceOptions sourceReference;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The source scene Index.")]
		public FsmInt sourceAtIndex;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The source scene Name.")]
		public FsmString sourceByName;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The source scene Path.")]
		public FsmString sourceByPath;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The source scene from GameObject")]
		public FsmOwnerDefault sourceByGameObject;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Destination")]
		[Tooltip("The reference options of the destination Scene")]
		public GetSceneActionBase.SceneAllReferenceOptions destinationReference;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The destination scene Index.")]
		public FsmInt destinationAtIndex;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The destination scene Name.")]
		public FsmString destinationByName;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The destination scene Path.")]
		public FsmString destinationByPath;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The destination scene from GameObject")]
		public FsmOwnerDefault destinationByGameObject;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ActionSection("Result")]
		[Tooltip("True if the merge succeeded")]
		[UIHint(UIHint.Variable)]
		public FsmBool success;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if merge succeeded")]
		public FsmEvent successEvent;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event sent if merge failed")]
		public FsmEvent failureEvent;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Scene _sourceScene;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool _sourceFound;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Scene _destinationScene;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool _destinationFound;

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xF4EA2C", Offset = "0xF4EA2C", VA = "0xF4EA2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xF4EAF0", Offset = "0xF4EAF0", VA = "0xF4EAF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xF4EC38", Offset = "0xF4EC38", VA = "0xF4EC38")]
		private void GetSourceScene()
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xF4EE40", Offset = "0xF4EE40", VA = "0xF4EE40")]
		private void GetDestinationScene()
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xF4F048", Offset = "0xF4F048", VA = "0xF4F048", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xF4F0BC", Offset = "0xF4F0BC", VA = "0xF4F0BC")]
		public MergeScenes()
		{
		}
	}
	[Token(Token = "0x2000398")]
	[Tooltip("Move a GameObject from its current scene to a new scene. It is required that the GameObject is at the root of its current scene.")]
	[ActionCategory(ActionCategory.Scene)]
	public class MoveGameObjectToScene : GetSceneActionBase
	{
		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[Tooltip("The Root GameObject to move to the referenced scene")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[RequiredField]
		[Tooltip("Only root GameObject can be moved, set to true to get the root of the gameobject if necessary, else watch for failure events.")]
		public FsmBool findRootIfNecessary;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("True if the merge succeeded")]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		public FsmBool success;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event sent if merge succeeded")]
		public FsmEvent successEvent;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Event sent if merge failed. Check log for information")]
		public FsmEvent failureEvent;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject _go;

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xF4F0C4", Offset = "0xF4F0C4", VA = "0xF4F0C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xF4F124", Offset = "0xF4F124", VA = "0xF4F124", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xF4F30C", Offset = "0xF4F30C", VA = "0xF4F30C")]
		public MoveGameObjectToScene()
		{
		}
	}
	[Token(Token = "0x2000399")]
	[Tooltip("Send an event when the active scene has changed.")]
	[ActionCategory(ActionCategory.Scene)]
	public class SendActiveSceneChangedEvent : FsmStateAction
	{
		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The event to send when an active scene changed")]
		public FsmEvent activeSceneChanged;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Scene lastPreviousActiveScene;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Scene lastNewActiveScene;

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xF4F314", Offset = "0xF4F314", VA = "0xF4F314", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xF4F320", Offset = "0xF4F320", VA = "0xF4F320", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xF4F3D0", Offset = "0xF4F3D0", VA = "0xF4F3D0")]
		private void SceneManager_activeSceneChanged(Scene previousActiveScene, Scene activeScene)
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xF4F458", Offset = "0xF4F458", VA = "0xF4F458", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xF4F4FC", Offset = "0xF4F4FC", VA = "0xF4F4FC")]
		public SendActiveSceneChangedEvent()
		{
		}
	}
	[Token(Token = "0x200039A")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Send an event when a scene was loaded. Use the Safe version when you want to access content of the loaded scene. Use GetSceneloadedEventData to find out about the loaded Scene and load mode")]
	public class SendSceneLoadedEvent : FsmStateAction
	{
		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The event to send when a scene was loaded")]
		public FsmEvent sceneLoaded;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The event to send when a scene was loaded, with a one frame delay to make sure the scene content was indeed initialized fully")]
		public FsmEvent sceneLoadedSafe;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Scene lastLoadedScene;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static LoadSceneMode lastLoadedMode;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _loaded;

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xF4F504", Offset = "0xF4F504", VA = "0xF4F504", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xF4F510", Offset = "0xF4F510", VA = "0xF4F510", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xF4F5BC", Offset = "0xF4F5BC", VA = "0xF4F5BC")]
		private void SceneManager_sceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xF4F668", Offset = "0xF4F668", VA = "0xF4F668", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xF4F6C4", Offset = "0xF4F6C4", VA = "0xF4F6C4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xF4F768", Offset = "0xF4F768", VA = "0xF4F768", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xF4F7DC", Offset = "0xF4F7DC", VA = "0xF4F7DC")]
		public SendSceneLoadedEvent()
		{
		}
	}
	[Token(Token = "0x200039B")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Send an event when a scene was unloaded.")]
	public class SendSceneUnloadedEvent : FsmStateAction
	{
		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The event to send when scene was unloaded")]
		[RequiredField]
		public FsmEvent sceneUnloaded;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Scene lastUnLoadedScene;

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xF4F7EC", Offset = "0xF4F7EC", VA = "0xF4F7EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xF4F7F8", Offset = "0xF4F7F8", VA = "0xF4F7F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xF4F8A8", Offset = "0xF4F8A8", VA = "0xF4F8A8")]
		private void SceneManager_sceneUnloaded(Scene scene)
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xF4F96C", Offset = "0xF4F96C", VA = "0xF4F96C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xF4FA10", Offset = "0xF4FA10", VA = "0xF4FA10")]
		public SendSceneUnloadedEvent()
		{
		}
	}
	[Token(Token = "0x200039C")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Set the scene to be active.")]
	public class SetActiveScene : FsmStateAction
	{
		[Token(Token = "0x200039D")]
		public enum SceneReferenceOptions
		{
			[Token(Token = "0x4001069")]
			SceneAtBuildIndex,
			[Token(Token = "0x400106A")]
			SceneAtIndex,
			[Token(Token = "0x400106B")]
			SceneByName,
			[Token(Token = "0x400106C")]
			SceneByPath,
			[Token(Token = "0x400106D")]
			SceneByGameObject
		}

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene.")]
		public SceneReferenceOptions sceneReference;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to activate. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The build index of the scene to activate.")]
		public FsmInt sceneAtBuildIndex;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index of the scene to activate.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The scene Path.")]
		public FsmString sceneByPath;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The GameObject scene to activate.")]
		public FsmOwnerDefault sceneByGameObject;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ActionSection("Result")]
		[Tooltip("True if set active succeeded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool success;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if setActive succeeded.")]
		public FsmEvent successEvent;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("True if SceneReference resolves to a scene.")]
		[UIHint(UIHint.Variable)]
		public FsmBool sceneFound;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent if scene not activated yet.")]
		[UIHint(UIHint.Variable)]
		public FsmEvent sceneNotActivatedEvent;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if SceneReference do not resolve to a scene.")]
		public FsmEvent sceneNotFoundEvent;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Scene _scene;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _sceneFound;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		private bool _success;

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xF4FA18", Offset = "0xF4FA18", VA = "0xF4FA18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xF4FAC8", Offset = "0xF4FAC8", VA = "0xF4FAC8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xF4FB48", Offset = "0xF4FB48", VA = "0xF4FB48")]
		private void DoSetActivate()
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xF4FE58", Offset = "0xF4FE58", VA = "0xF4FE58")]
		public SetActiveScene()
		{
		}
	}
	[Token(Token = "0x200039E")]
	[Tooltip("Unload Scene. Note that assets are currently not unloaded, in order to free up asset memory call Resources.UnloadUnusedAssets.")]
	[Obsolete("Use UnloadSceneAsynch Instead.")]
	[ActionCategory(ActionCategory.Scene)]
	public class UnloadScene : FsmStateAction
	{
		[Token(Token = "0x200039F")]
		public enum SceneReferenceOptions
		{
			[Token(Token = "0x4001078")]
			ActiveScene,
			[Token(Token = "0x4001079")]
			SceneAtBuildIndex,
			[Token(Token = "0x400107A")]
			SceneAtIndex,
			[Token(Token = "0x400107B")]
			SceneByName,
			[Token(Token = "0x400107C")]
			SceneByPath,
			[Token(Token = "0x400107D")]
			SceneByGameObject
		}

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene")]
		public SceneReferenceOptions sceneReference;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to load. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The build index of the scene to unload.")]
		public FsmInt sceneAtBuildIndex;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index of the scene to unload.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The scene Path.")]
		public FsmString sceneByPath;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The GameObject unload scene of")]
		public FsmOwnerDefault sceneByGameObject;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("True if scene was unloaded")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmBool unloaded;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if scene was unloaded ")]
		public FsmEvent unloadedEvent;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent scene was not unloaded")]
		[UIHint(UIHint.Variable)]
		public FsmEvent failureEvent;

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xF4FE60", Offset = "0xF4FE60", VA = "0xF4FE60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xF4FEF0", Offset = "0xF4FEF0", VA = "0xF4FEF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xF502A8", Offset = "0xF502A8", VA = "0xF502A8", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xF502F0", Offset = "0xF502F0", VA = "0xF502F0")]
		public UnloadScene()
		{
		}
	}
	[Token(Token = "0x20003A0")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Unload a scene asynchronously by its name or index in Build Settings. Destroys all GameObjects associated with the given scene and removes the scene from the SceneManager.")]
	public class UnloadSceneAsynch : FsmStateAction
	{
		[Token(Token = "0x20003A1")]
		public enum SceneReferenceOptions
		{
			[Token(Token = "0x400108B")]
			ActiveScene,
			[Token(Token = "0x400108C")]
			SceneAtBuildIndex,
			[Token(Token = "0x400108D")]
			SceneAtIndex,
			[Token(Token = "0x400108E")]
			SceneByName,
			[Token(Token = "0x400108F")]
			SceneByPath,
			[Token(Token = "0x4001090")]
			SceneByGameObject
		}

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene")]
		public SceneReferenceOptions sceneReference;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to load. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The build index of the scene to unload.")]
		public FsmInt sceneAtBuildIndex;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index of the scene to unload.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The scene Path.")]
		public FsmString sceneByPath;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The GameObject unload scene of")]
		public FsmOwnerDefault sceneByGameObject;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("lets you tweak in which order async operation calls will be performed. Leave to none for default")]
		public FsmInt operationPriority;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ActionSection("Result")]
		[Tooltip("The loading's progress.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat progress;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("True when loading is done")]
		[UIHint(UIHint.Variable)]
		public FsmBool isDone;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent when scene loading is done")]
		public FsmEvent doneEvent;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the scene to load was not found")]
		public FsmEvent sceneNotFoundEvent;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AsyncOperation _asyncOperation;

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xF502F8", Offset = "0xF502F8", VA = "0xF502F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xF503FC", Offset = "0xF503FC", VA = "0xF503FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xF50458", Offset = "0xF50458", VA = "0xF50458")]
		private bool DoUnLoadAsynch()
		{
			return default(bool);
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xF50858", Offset = "0xF50858", VA = "0xF50858", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xF5090C", Offset = "0xF5090C", VA = "0xF5090C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xF50918", Offset = "0xF50918", VA = "0xF50918")]
		public UnloadSceneAsynch()
		{
		}
	}
	[Token(Token = "0x20003A2")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Wraps a GameObject's position across screen edges. For example, a GameObject that moves off the left side of the screen wraps to the right side. This is often used in 2d arcade style games like Asteroids.")]
	public class ScreenWrap : ComponentAction<Transform, Camera>
	{
		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The GameObject to wrap.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("GameObject with a Camera component used to render the view (or MainCamera if not set). The Viewport Rect is used for wrapping.")]
		public FsmGameObject camera;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Wrap the position of the GameObject if it moves off the left side of the screen.")]
		public FsmBool wrapLeft;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Wrap the position of the GameObject if it moves off the right side of the screen.")]
		public FsmBool wrapRight;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Wrap the position of the GameObject if it moves off the top of the screen.")]
		public FsmBool wrapTop;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Wrap the position of the GameObject if it moves off the top of the screen.")]
		public FsmBool wrapBottom;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		[Tooltip("Use LateUpdate. Useful if you want to wrap after any other operations in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x170000BF")]
		private Camera cameraComponent
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0xF50920", Offset = "0xF50920", VA = "0xF50920")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		private Transform cameraTransform
		{
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0xF50928", Offset = "0xF50928", VA = "0xF50928")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C1")]
		private Transform gameObjectTransform
		{
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0xF50930", Offset = "0xF50930", VA = "0xF50930")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xF50938", Offset = "0xF50938", VA = "0xF50938", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xF50A54", Offset = "0xF50A54", VA = "0xF50A54", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xF50A84", Offset = "0xF50A84", VA = "0xF50A84", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xF50D80", Offset = "0xF50D80", VA = "0xF50D80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xF50D90", Offset = "0xF50D90", VA = "0xF50D90", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xF50ABC", Offset = "0xF50ABC", VA = "0xF50ABC")]
		private void DoScreenWrap()
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xF50DC8", Offset = "0xF50DC8", VA = "0xF50DC8")]
		private static float Wrap01(float x)
		{
			return default(float);
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xF50E10", Offset = "0xF50E10", VA = "0xF50E10")]
		private static float Wrap(float x, float xMin, float xMax)
		{
			return default(float);
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xF50E58", Offset = "0xF50E58", VA = "0xF50E58")]
		public ScreenWrap()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	[Tooltip("Adds a Script to a Game Object. Use this to change the behaviour of objects on the fly. Optionally remove the Script on exiting the state.")]
	[ActionCategory(ActionCategory.ScriptControl)]
	public class AddScript : FsmStateAction
	{
		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to add the script to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Select any script in your project. The script will be added to the Game Object when the state is entered.")]
		[UIHint(UIHint.ScriptComponent)]
		public FsmString script;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Remove the script from the GameObject when this State is exited.")]
		public FsmBool removeOnExit;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Component addedComponent;

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xF50EA0", Offset = "0xF50EA0", VA = "0xF50EA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xF50EC8", Offset = "0xF50EC8", VA = "0xF50EC8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xF51048", Offset = "0xF51048", VA = "0xF51048", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xF50F18", Offset = "0xF50F18", VA = "0xF50F18")]
		private void DoAddComponent(GameObject go)
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xF510F0", Offset = "0xF510F0", VA = "0xF510F0")]
		public AddScript()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends events based on the direction of Input Axis (Left/Right/Up/Down...).")]
	public class AxisEvent : FsmStateAction
	{
		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Horizontal axis as defined in the Input Manager")]
		public FsmString horizontalAxis;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Vertical axis as defined in the Input Manager")]
		public FsmString verticalAxis;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if input is to the left.")]
		public FsmEvent leftEvent;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if input is to the right.")]
		public FsmEvent rightEvent;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if input is to the up.")]
		public FsmEvent upEvent;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if input is to the down.")]
		public FsmEvent downEvent;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if input is in any direction.")]
		public FsmEvent anyDirection;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if no axis input (centered).")]
		public FsmEvent noDirection;

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xF510F8", Offset = "0xF510F8", VA = "0xF510F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xF511E8", Offset = "0xF511E8", VA = "0xF511E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xF513A8", Offset = "0xF513A8", VA = "0xF513A8")]
		public AxisEvent()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	[ActionCategory(ActionCategory.ScriptControl)]
	[Tooltip("Lets you call a method in a script on a Game Object.\nUnlike {{Invoke Method}}, or {{Send Message}}, you can use multiple parameters and get a return value.")]
	public class CallMethod : FsmStateAction
	{
		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The behaviour on a Game Object that has the method you want to call. Drag the script component from the Unity inspector into this slot. HINT: Use Lock if the script is on another GameObject.\n\nNOTE: Unity Object fields show the GameObject name, so for clarity we show the Behaviour name as well below.")]
		[ObjectType(typeof(Component))]
		public FsmObject behaviour;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Select from a list of available methods.\n\nNOTE: The full method signature is visible below.")]
		public FsmString methodName;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Method parameters.\n\nNOTE: This UI is built automatically when you select the method.")]
		public FsmVar[] parameters;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If the Method has a return, use this to store it in a variable.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Store Result")]
		public FsmVar storeResult;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Revert to the old Manual UI where all parameters had to be configured manually.")]
		public bool manualUI;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FsmObject cachedBehaviour;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private FsmString cachedMethodName;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Type cachedType;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MethodInfo cachedMethodInfo;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ParameterInfo[] cachedParameterInfo;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private object[] parametersArray;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private string errorString;

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xF513B0", Offset = "0xF513B0", VA = "0xF513B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xF51400", Offset = "0xF51400", VA = "0xF51400", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xF51804", Offset = "0xF51804", VA = "0xF51804", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xF5148C", Offset = "0xF5148C", VA = "0xF5148C")]
		private void DoMethodCall()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xF51808", Offset = "0xF51808", VA = "0xF51808")]
		private bool NeedToUpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xF51D2C", Offset = "0xF51D2C", VA = "0xF51D2C")]
		private void ClearCache()
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xF51934", Offset = "0xF51934", VA = "0xF51934")]
		private bool DoCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xF51D84", Offset = "0xF51D84", VA = "0xF51D84", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xF52408", Offset = "0xF52408", VA = "0xF52408")]
		public CallMethod()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	[Tooltip("Call a static method in a class.\nNOTE: This is an advanced action - you need to know the full method signature to use this action.")]
	[ActionCategory(ActionCategory.ScriptControl)]
	public class CallStaticMethod : FsmStateAction
	{
		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Full path to the class that contains the static method.")]
		public FsmString className;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The static method to call.")]
		public FsmString methodName;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Method parameters. NOTE: these must match the method's signature!")]
		public FsmVar[] parameters;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result of the method call.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Store Result")]
		public FsmVar storeResult;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Type cachedType;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string cachedClassName;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string cachedMethodName;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MethodInfo cachedMethodInfo;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ParameterInfo[] cachedParameterInfo;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private object[] parametersArray;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private string errorString;

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xF52410", Offset = "0xF52410", VA = "0xF52410", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xF526B4", Offset = "0xF526B4", VA = "0xF526B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xF5249C", Offset = "0xF5249C", VA = "0xF5249C")]
		private void DoMethodCall()
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xF526B8", Offset = "0xF526B8", VA = "0xF526B8")]
		private bool DoCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xF52B44", Offset = "0xF52B44", VA = "0xF52B44", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xF531EC", Offset = "0xF531EC", VA = "0xF531EC")]
		public CallStaticMethod()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	[Tooltip("Enables/Disables a Behaviour on a GameObject. Optionally reset the Behaviour on exiting the state. E.g., if you want the Behaviour to be active only while this state is active.")]
	[ActionCategory(ActionCategory.ScriptControl)]
	public class EnableBehaviour : FsmStateAction
	{
		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the Behaviour.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Behaviour)]
		[Tooltip("The name of the Behaviour to enable/disable.")]
		public FsmString behaviour;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optionally drag a component directly into this field (behavior name will be ignored).")]
		public Component component;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enable;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Reset the enabled state of the Behaviour when leaving this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Behaviour componentTarget;

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xF531F4", Offset = "0xF531F4", VA = "0xF531F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xF53264", Offset = "0xF53264", VA = "0xF53264", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xF532A0", Offset = "0xF532A0", VA = "0xF532A0")]
		private void DoEnableBehaviour(GameObject go)
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xF53598", Offset = "0xF53598", VA = "0xF53598", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xF5364C", Offset = "0xF5364C", VA = "0xF5364C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xF53824", Offset = "0xF53824", VA = "0xF53824")]
		public EnableBehaviour()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	[ActionCategory(ActionCategory.ScriptControl)]
	[Tooltip("Invokes a Method in a Behaviour attached to a Game Object. See Unity InvokeMethod docs.")]
	public class InvokeMethod : FsmStateAction
	{
		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The game object that owns the behaviour.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Script)]
		[Tooltip("The behaviour that contains the method.")]
		public FsmString behaviour;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Method)]
		[RequiredField]
		[Tooltip("The name of the method to invoke.")]
		public FsmString methodName;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 10f)]
		[Tooltip("Optional time delay in seconds.")]
		public FsmFloat delay;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Call the method repeatedly.")]
		public FsmBool repeating;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Delay between repeated calls in seconds.")]
		[HasFloatSlider(0f, 10f)]
		public FsmFloat repeatDelay;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Stop calling the method when the state is exited.")]
		public FsmBool cancelOnExit;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MonoBehaviour component;

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xF5382C", Offset = "0xF5382C", VA = "0xF5382C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xF53908", Offset = "0xF53908", VA = "0xF53908", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xF53944", Offset = "0xF53944", VA = "0xF53944")]
		private void DoInvokeMethod(GameObject go)
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xF53C14", Offset = "0xF53C14", VA = "0xF53C14", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xF53CC4", Offset = "0xF53CC4", VA = "0xF53CC4")]
		public InvokeMethod()
		{
		}
	}
	[Token(Token = "0x20003A9")]
	[Tooltip("Sends a Message to a Game Object. See Unity docs for SendMessage.")]
	[ActionCategory(ActionCategory.ScriptControl)]
	public class SendMessage : FsmStateAction
	{
		[Token(Token = "0x20003AA")]
		public enum MessageType
		{
			[Token(Token = "0x40010D1")]
			SendMessage,
			[Token(Token = "0x40010D2")]
			SendMessageUpwards,
			[Token(Token = "0x40010D3")]
			BroadcastMessage
		}

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to send a message to.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Pick between <a href=\"http://unity3d.com/support/documentation/ScriptReference/GameObject.SendMessage.html\" rel=\"nofollow\">SendMessage</a>, <a href=\"http://unity3d.com/support/documentation/ScriptReference/GameObject.SendMessageUpwards.html\" rel=\"nofollow\">SendMessageUpwards</a>, or <a href=\"http://unity3d.com/support/documentation/ScriptReference/GameObject.BroadcastMessage.html\" rel=\"nofollow\">BroadcastMessage</a>.")]
		public MessageType delivery;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Message delivery options. See <a href=\"http://unity3d.com/support/documentation/ScriptReference/SendMessageOptions.html\" rel=\"nofollow\">SendMessageOptions</a> in Unity Docs.")]
		public SendMessageOptions options;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Select a Method Name first then Parameters.")]
		public FunctionCall functionCall;

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xF53CCC", Offset = "0xF53CCC", VA = "0xF53CCC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0xF53D00", Offset = "0xF53D00", VA = "0xF53D00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xF53D1C", Offset = "0xF53D1C", VA = "0xF53D1C")]
		private void DoSendMessage()
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xF544E8", Offset = "0xF544E8", VA = "0xF544E8")]
		public SendMessage()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	[Tooltip("Starts a Coroutine in a Behaviour on a Game Object.\nSee Unity <a href=\"http://unity3d.com/support/documentation/ScriptReference/MonoBehaviour.StartCoroutine.html\">StartCoroutine</a> docs for more details.")]
	[ActionCategory(ActionCategory.ScriptControl)]
	public class StartCoroutine : FsmStateAction
	{
		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object that owns the Behaviour.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Behaviour)]
		[RequiredField]
		[Tooltip("The Behaviour that contains the method to start as a coroutine.")]
		public FsmString behaviour;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Coroutine)]
		[Tooltip("The name of the coroutine method.")]
		public FunctionCall functionCall;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Stop the coroutine when the state is exited.")]
		public bool stopOnExit;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MonoBehaviour component;

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xF544F0", Offset = "0xF544F0", VA = "0xF544F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xF54530", Offset = "0xF54530", VA = "0xF54530", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xF5454C", Offset = "0xF5454C", VA = "0xF5454C")]
		private void DoStartCoroutine()
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xF54E08", Offset = "0xF54E08", VA = "0xF54E08", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xF54EA0", Offset = "0xF54EA0", VA = "0xF54EA0")]
		public StartCoroutine()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	[Tooltip("Gets the source image sprite of a SpriteRenderer component.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class GetSprite : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(Sprite))]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The source sprite of the SpriteRenderer component.")]
		public FsmObject sprite;

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xF54EA8", Offset = "0xF54EA8", VA = "0xF54EA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xF54ED0", Offset = "0xF54ED0", VA = "0xF54ED0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xF54EEC", Offset = "0xF54EEC", VA = "0xF54EEC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xF54F88", Offset = "0xF54F88", VA = "0xF54F88")]
		public GetSprite()
		{
		}
	}
	[Token(Token = "0x20003AD")]
	[Tooltip("Gets the color of a sprite renderer")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class GetSpriteColor : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Get The Color of the SpriteRenderer component")]
		[UIHint(UIHint.Variable)]
		public FsmColor color;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the red channel in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat red;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the green channel in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat green;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the blue channel in a float variable.")]
		public FsmFloat blue;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the alpha channel in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat alpha;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame. Useful if the color variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xF54FD0", Offset = "0xF54FD0", VA = "0xF54FD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xF550F8", Offset = "0xF550F8", VA = "0xF550F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xF55284", Offset = "0xF55284", VA = "0xF55284", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xF55124", Offset = "0xF55124", VA = "0xF55124")]
		private void GetColor()
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xF55288", Offset = "0xF55288", VA = "0xF55288")]
		public GetSpriteColor()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	[Tooltip("Gets the Flips values of a of a SpriteRenderer component.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class GetSpriteFlip : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The X flip value")]
		public FsmBool x;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The Y flip value")]
		[UIHint(UIHint.Variable)]
		public FsmBool y;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xF552D0", Offset = "0xF552D0", VA = "0xF552D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xF55308", Offset = "0xF55308", VA = "0xF55308", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xF55408", Offset = "0xF55408", VA = "0xF55408", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xF55334", Offset = "0xF55334", VA = "0xF55334")]
		private void GetFlip()
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xF5540C", Offset = "0xF5540C", VA = "0xF5540C")]
		public GetSpriteFlip()
		{
		}
	}
	[Token(Token = "0x20003AF")]
	[Tooltip("Get the mode under which the sprite will interact with the masking system.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class GetSpriteMaskInteraction : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Get the Mask Interactions of the SpriteRenderer component.")]
		[ObjectType(typeof(SpriteMaskInteraction))]
		[UIHint(UIHint.Variable)]
		public FsmEnum spriteMaskInteraction;

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xF55454", Offset = "0xF55454", VA = "0xF55454", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xF5547C", Offset = "0xF5547C", VA = "0xF5547C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xF5554C", Offset = "0xF5554C", VA = "0xF5554C")]
		public GetSpriteMaskInteraction()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Get the Order in Layer of a SpriteRenderer component.")]
	public class GetSpriteOrderInLayer : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The Order In Layer Value")]
		[UIHint(UIHint.Variable)]
		public FsmInt orderInLayer;

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xF55594", Offset = "0xF55594", VA = "0xF55594", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xF555BC", Offset = "0xF555BC", VA = "0xF555BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xF55658", Offset = "0xF55658", VA = "0xF55658")]
		public GetSpriteOrderInLayer()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Get the Sorting Layer name and/or Id of a of a SpriteRenderer component.")]
	public class GetSpriteSortingLayer : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The sorting layer name")]
		[UIHint(UIHint.Variable)]
		public FsmString sortingLayerName;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The sorting layer id")]
		public FsmInt sortingLayerId;

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xF556A0", Offset = "0xF556A0", VA = "0xF556A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xF556D8", Offset = "0xF556D8", VA = "0xF556D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xF557C4", Offset = "0xF557C4", VA = "0xF557C4")]
		public GetSpriteSortingLayer()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	[Tooltip("Get the position of the Sprite used for sorting the Renderer.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class GetspriteSortPoint : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(SpriteSortPoint))]
		[Tooltip("Get the Sprite Sorting Point value")]
		public FsmEnum spriteSortPoint;

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xF5580C", Offset = "0xF5580C", VA = "0xF5580C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xF55834", Offset = "0xF55834", VA = "0xF55834", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xF55904", Offset = "0xF55904", VA = "0xF55904")]
		public GetspriteSortPoint()
		{
		}
	}
	[Token(Token = "0x20003B3")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Sets a Sprite on a GameObject. Object must have a Sprite Renderer.")]
	public class SetSprite : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The source sprite of the UI Image component.")]
		[ObjectType(typeof(Sprite))]
		public FsmObject sprite;

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xF5594C", Offset = "0xF5594C", VA = "0xF5594C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xF55974", Offset = "0xF55974", VA = "0xF55974", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xF55A48", Offset = "0xF55A48", VA = "0xF55A48")]
		public SetSprite()
		{
		}
	}
	[Token(Token = "0x20003B4")]
	[Tooltip("Sets the color of a sprite renderer")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSpriteColor : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the Color of the SpriteRenderer component")]
		public FsmColor color;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the red channel")]
		public FsmFloat red;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the green channel")]
		public FsmFloat green;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the blue channel")]
		public FsmFloat blue;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Set the alpha channel")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat alpha;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Color originalColor;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Color newColor;

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xF55A90", Offset = "0xF55A90", VA = "0xF55A90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xF55BC8", Offset = "0xF55BC8", VA = "0xF55BC8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xF55DD8", Offset = "0xF55DD8", VA = "0xF55DD8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xF55C70", Offset = "0xF55C70", VA = "0xF55C70")]
		private void SetColor()
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xF55DDC", Offset = "0xF55DDC", VA = "0xF55DDC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xF55E7C", Offset = "0xF55E7C", VA = "0xF55E7C")]
		public SetSpriteColor()
		{
		}
	}
	[Token(Token = "0x20003B5")]
	[Tooltip("Sets the Flips values of a of a SpriteRenderer component.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSpriteFlip : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[CheckForComponent(typeof(SpriteRenderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The X Flip value")]
		public FsmBool x;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The Y Flip value")]
		public FsmBool y;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset flip values when state exits")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool x_orig;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool y_orig;

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xF55EC4", Offset = "0xF55EC4", VA = "0xF55EC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xF55F18", Offset = "0xF55F18", VA = "0xF55F18", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xF5608C", Offset = "0xF5608C", VA = "0xF5608C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xF56090", Offset = "0xF56090", VA = "0xF56090", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xF55FF0", Offset = "0xF55FF0", VA = "0xF55FF0")]
		private void FlipSprites()
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xF560E4", Offset = "0xF560E4", VA = "0xF560E4")]
		public SetSpriteFlip()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	[Tooltip("Set the mode under which the sprite will interact with the masking system.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSpriteMaskInteraction : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the Mask Interactions of the SpriteRenderer component.")]
		[ObjectType(typeof(SpriteMaskInteraction))]
		public FsmEnum spriteMaskInteraction;

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xF5612C", Offset = "0xF5612C", VA = "0xF5612C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xF561AC", Offset = "0xF561AC", VA = "0xF561AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xF5628C", Offset = "0xF5628C", VA = "0xF5628C")]
		public SetSpriteMaskInteraction()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Set the Order in Layer of a SpriteRenderer component.")]
	public class SetSpriteOrderInLayer : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Order In Layer Value")]
		[RequiredField]
		public FsmInt orderInLayer;

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xF562D4", Offset = "0xF562D4", VA = "0xF562D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xF562FC", Offset = "0xF562FC", VA = "0xF562FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xF563A4", Offset = "0xF563A4", VA = "0xF563A4")]
		public SetSpriteOrderInLayer()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Set the Sorting Layer of a SpriteRenderer component by Id (by id is faster than by name)")]
	public class SetSpriteSortingLayerById : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[CheckForComponent(typeof(SpriteRenderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The sorting Layer Name")]
		public FsmInt sortingLayerId;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true, set the sorting layer to all children")]
		public FsmBool setAllSpritesInChildren;

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xF563EC", Offset = "0xF563EC", VA = "0xF563EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xF56430", Offset = "0xF56430", VA = "0xF56430", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xF56580", Offset = "0xF56580", VA = "0xF56580")]
		public SetSpriteSortingLayerById()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	[Tooltip("Set the Sorting Layer of a SpriteRenderer component. by name")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSpriteSortingLayerByName : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The sorting Layer Name")]
		public FsmString sortingLayerName;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true, set the sorting layer to all children")]
		public FsmBool setAllSpritesInChildren;

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xF565C8", Offset = "0xF565C8", VA = "0xF565C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xF5660C", Offset = "0xF5660C", VA = "0xF5660C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xF5675C", Offset = "0xF5675C", VA = "0xF5675C")]
		public SetSpriteSortingLayerByName()
		{
		}
	}
	[Token(Token = "0x20003BA")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Determines the position of the Sprite used for sorting the Renderer. Unity 2018.2 or higher.")]
	public class SetSpriteSortPoint : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(SpriteSortPoint))]
		[Tooltip("Set the Sprite Sorting Point value")]
		public FsmEnum spriteSortPoint;

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xF567A4", Offset = "0xF567A4", VA = "0xF567A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xF56824", Offset = "0xF56824", VA = "0xF56824", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xF56904", Offset = "0xF56904", VA = "0xF56904")]
		public SetSpriteSortPoint()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public abstract class BaseFsmVariableAction : FsmStateAction
	{
		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The event to send if the FSM is not found.")]
		[ActionSection("Events")]
		public FsmEvent fsmNotFound;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The event to send if the Variable is not found.")]
		public FsmEvent variableNotFound;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string cachedFsmName;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xF5694C", Offset = "0xF5694C", VA = "0xF5694C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xF56974", Offset = "0xF56974", VA = "0xF56974")]
		protected bool UpdateCache(GameObject go, string fsmName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xF56B18", Offset = "0xF56B18", VA = "0xF56B18")]
		protected void DoVariableNotFound(string variableName)
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xF56B98", Offset = "0xF56B98", VA = "0xF56B98")]
		protected BaseFsmVariableAction()
		{
		}
	}
	[Token(Token = "0x20003BC")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public abstract class BaseFsmVariableIndexAction : FsmStateAction
	{
		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Events")]
		[Tooltip("The event to trigger if the index is out of range")]
		public FsmEvent indexOutOfRange;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The event to send if the FSM is not found.")]
		public FsmEvent fsmNotFound;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The event to send if the Variable is not found.")]
		public FsmEvent variableNotFound;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string cachedFsmName;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xF56BA0", Offset = "0xF56BA0", VA = "0xF56BA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xF56BC8", Offset = "0xF56BC8", VA = "0xF56BC8")]
		protected bool UpdateCache(GameObject go, string fsmName)
		{
			return default(bool);
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0xF56D6C", Offset = "0xF56D6C", VA = "0xF56D6C")]
		protected void DoVariableNotFound(string variableName)
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xF56DEC", Offset = "0xF56DEC", VA = "0xF56DEC")]
		protected BaseFsmVariableIndexAction()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Block events while this action is active.")]
	public class BlockEvents : FsmStateAction
	{
		[Token(Token = "0x20003BE")]
		public enum Options
		{
			[Token(Token = "0x4001120")]
			Timeout,
			[Token(Token = "0x4001121")]
			WhileTrue,
			[Token(Token = "0x4001122")]
			WhileFalse,
			[Token(Token = "0x4001123")]
			UntilTrue,
			[Token(Token = "0x4001124")]
			UntilFalse,
			[Token(Token = "0x4001125")]
			UntilEvent
		}

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("When to block events.")]
		public Options condition;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Context sensitive parameter. Depends on Condition.")]
		public FsmFloat floatParam;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Context sensitive parameter. Depends on Condition.")]
		public FsmBool boolParam;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[EventNotSent]
		[Tooltip("Context sensitive parameter. Depends on Condition.")]
		public FsmEvent eventParam;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Debug")]
		[Tooltip("Log any events blocked by this action. Helpful for debugging.")]
		public FsmBool logBlockedEvents;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool firstTime;

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xF56DF4", Offset = "0xF56DF4", VA = "0xF56DF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xF56E4C", Offset = "0xF56E4C", VA = "0xF56E4C", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xF56E58", Offset = "0xF56E58", VA = "0xF56E58", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xF56F88", Offset = "0xF56F88", VA = "0xF56F88", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xF5711C", Offset = "0xF5711C", VA = "0xF5711C")]
		private bool Validate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xF571BC", Offset = "0xF571BC", VA = "0xF571BC")]
		private bool DoBlockEvent(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xF57328", Offset = "0xF57328", VA = "0xF57328")]
		public BlockEvents()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	[Obsolete("This action is obsolete; use Send Event with Event Target instead.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends an Event to all FSMs in the scene or to all FSMs on a Game Object. NOTE: This action won't work on the very first frame of the game...")]
	public class BroadcastEvent : FsmStateAction
	{
		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The event to broadcast.")]
		public FsmString broadcastEvent;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("By default, the event is broadcast to all FSMs in the scene. Optionally you can specify a game object to target. The event will then be broadcast to all FSMs on that game object.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Broadcast the event to all the Game Object's children too.")]
		public FsmBool sendToChildren;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Don't send the event to self.")]
		public FsmBool excludeSelf;

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xF57338", Offset = "0xF57338", VA = "0xF57338", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xF57398", Offset = "0xF57398", VA = "0xF57398", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xF57504", Offset = "0xF57504", VA = "0xF57504")]
		public BroadcastEvent()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Enables/Disables an FSM component on a GameObject.")]
	public class EnableFSM : FsmStateAction
	{
		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on GameObject. Useful if you have more than one FSM on a GameObject. Leave blank to use the first FSM on the game object.")]
		public FsmString fsmName;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enable;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Reset the initial enabled state when exiting the state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayMakerFSM fsmComponent;

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xF5750C", Offset = "0xF5750C", VA = "0xF5750C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xF575AC", Offset = "0xF575AC", VA = "0xF575AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xF575C8", Offset = "0xF575C8", VA = "0xF575C8")]
		private void DoEnableFSM()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xF577FC", Offset = "0xF577FC", VA = "0xF577FC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xF578B0", Offset = "0xF578B0", VA = "0xF578B0")]
		public EnableFSM()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	[Note("Stop this FSM. If this FSM was launched by a Run FSM action, it will trigger a Finish event in that state.")]
	[Tooltip("Stop this FSM. If this FSM was launched by a {{Run FSM}} action, it will trigger a Finish event in that state.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class FinishFSM : FsmStateAction
	{
		[Token(Token = "0x600116D")]
		[Address(RVA = "0xF578B8", Offset = "0xF578B8", VA = "0xF578B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xF578D4", Offset = "0xF578D4", VA = "0xF578D4")]
		public FinishFSM()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	[Tooltip("Forwards all event received by this FSM to another target. Optionally specify a list of events to ignore.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class ForwardAllEvents : FsmStateAction
	{
		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Forward to this target.")]
		public FsmEventTarget forwardTo;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Don't forward these events.")]
		public FsmEvent[] exceptThese;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should this action eat the events or pass them on.")]
		public bool eatEvents;

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xF578DC", Offset = "0xF578DC", VA = "0xF578DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xF57A3C", Offset = "0xF57A3C", VA = "0xF57A3C", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xF57A48", Offset = "0xF57A48", VA = "0xF57A48", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0xF57AC8", Offset = "0xF57AC8", VA = "0xF57AC8")]
		public ForwardAllEvents()
		{
		}
	}
	[Token(Token = "0x20003C3")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Forward an event received by this FSM to another target.")]
	public class ForwardEvent : FsmStateAction
	{
		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Forward to this target.")]
		public FsmEventTarget forwardTo;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The events to forward.")]
		public FsmEvent[] eventsToForward;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should this action eat the events or pass them on.")]
		public bool eatEvents;

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xF57AD0", Offset = "0xF57AD0", VA = "0xF57AD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xF57B5C", Offset = "0xF57B5C", VA = "0xF57B5C", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xF57B68", Offset = "0xF57B68", VA = "0xF57B68", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xF57BE8", Offset = "0xF57BE8", VA = "0xF57BE8")]
		public ForwardEvent()
		{
		}
	}
	[Token(Token = "0x20003C4")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the Bool data from the last Event.")]
	public class GetEventBoolData : FsmStateAction
	{
		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the bool data in a variable.")]
		public FsmBool getBoolData;

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xF57BF0", Offset = "0xF57BF0", VA = "0xF57BF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xF57BFC", Offset = "0xF57BFC", VA = "0xF57BFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xF57C78", Offset = "0xF57C78", VA = "0xF57C78")]
		public GetEventBoolData()
		{
		}
	}
	[Token(Token = "0x20003C5")]
	[Tooltip("Gets the Float data from the last Event.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetEventFloatData : FsmStateAction
	{
		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the float data in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat getFloatData;

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xF57C80", Offset = "0xF57C80", VA = "0xF57C80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xF57C8C", Offset = "0xF57C8C", VA = "0xF57C8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xF57D08", Offset = "0xF57D08", VA = "0xF57D08")]
		public GetEventFloatData()
		{
		}
	}
	[Token(Token = "0x20003C6")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets info on the last event that caused a state change. See also: {{Set Event Data}} action.")]
	[SeeAlso("{{SetEventData}}")]
	public class GetEventInfo : FsmStateAction
	{
		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Game Object that sent the Event.")]
		public FsmGameObject sentByGameObject;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the FSM that sent the Event.")]
		[UIHint(UIHint.Variable)]
		public FsmString fsmName;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Custom Bool data.")]
		[UIHint(UIHint.Variable)]
		public FsmBool getBoolData;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Custom Int data.")]
		[UIHint(UIHint.Variable)]
		public FsmInt getIntData;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Custom Float data.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat getFloatData;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Custom Vector2 data.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 getVector2Data;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Custom Vector3 data.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 getVector3Data;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Custom String data.")]
		[UIHint(UIHint.Variable)]
		public FsmString getStringData;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Custom GameObject data.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject getGameObjectData;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Custom Rect data.")]
		[UIHint(UIHint.Variable)]
		public FsmRect getRectData;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Quaternion data.")]
		public FsmQuaternion getQuaternionData;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Material data.")]
		public FsmMaterial getMaterialData;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Texture data.")]
		public FsmTexture getTextureData;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Custom Color data.")]
		[UIHint(UIHint.Variable)]
		public FsmColor getColorData;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Custom Object data.")]
		[UIHint(UIHint.Variable)]
		public FsmObject getObjectData;

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xF57D10", Offset = "0xF57D10", VA = "0xF57D10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xF57E08", Offset = "0xF57E08", VA = "0xF57E08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xF58144", Offset = "0xF58144", VA = "0xF58144")]
		public GetEventInfo()
		{
		}
	}
	[Token(Token = "0x20003C7")]
	[Tooltip("Gets the Int data from the last Event.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetEventIntData : FsmStateAction
	{
		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the int data in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmInt getIntData;

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xF5814C", Offset = "0xF5814C", VA = "0xF5814C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xF58158", Offset = "0xF58158", VA = "0xF58158", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xF581D4", Offset = "0xF581D4", VA = "0xF581D4")]
		public GetEventIntData()
		{
		}
	}
	[Token(Token = "0x20003C8")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the sender of the last event.")]
	public class GetEventSentBy : FsmStateAction
	{
		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the GameObject that sent the event.")]
		public FsmGameObject sentByGameObject;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the name of the GameObject that sent the event.")]
		public FsmString gameObjectName;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the name of the FSM that sent the event.")]
		public FsmString fsmName;

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xF581DC", Offset = "0xF581DC", VA = "0xF581DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xF58214", Offset = "0xF58214", VA = "0xF58214", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xF58440", Offset = "0xF58440", VA = "0xF58440")]
		public GetEventSentBy()
		{
		}
	}
	[Token(Token = "0x20003C9")]
	[Tooltip("Gets the String data from the last Event.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetEventStringData : FsmStateAction
	{
		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the string data in a variable.")]
		public FsmString getStringData;

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xF58448", Offset = "0xF58448", VA = "0xF58448", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xF58454", Offset = "0xF58454", VA = "0xF58454", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xF584D8", Offset = "0xF584D8", VA = "0xF584D8")]
		public GetEventStringData()
		{
		}
	}
	[Token(Token = "0x20003CA")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the Vector2 data from the last Event.")]
	public class GetEventVector2Data : FsmStateAction
	{
		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the vector2 data in a variable.")]
		public FsmVector2 getVector2Data;

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xF584E0", Offset = "0xF584E0", VA = "0xF584E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xF584EC", Offset = "0xF584EC", VA = "0xF584EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xF58568", Offset = "0xF58568", VA = "0xF58568")]
		public GetEventVector2Data()
		{
		}
	}
	[Token(Token = "0x20003CB")]
	[Tooltip("Gets the Vector3 data from the last Event.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetEventVector3Data : FsmStateAction
	{
		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the vector3 data in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 getVector3Data;

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xF58570", Offset = "0xF58570", VA = "0xF58570", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xF5857C", Offset = "0xF5857C", VA = "0xF5857C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xF58600", Offset = "0xF58600", VA = "0xF58600")]
		public GetEventVector3Data()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Get the value of a Bool Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class GetFsmBool : FsmStateAction
	{
		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmBool)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the value in a Bool variable in this FSM.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmBool storeValue;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xF58608", Offset = "0xF58608", VA = "0xF58608", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xF58680", Offset = "0xF58680", VA = "0xF58680", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xF58870", Offset = "0xF58870", VA = "0xF58870", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xF586AC", Offset = "0xF586AC", VA = "0xF586AC")]
		private void DoGetFsmBool()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xF58874", Offset = "0xF58874", VA = "0xF58874")]
		public GetFsmBool()
		{
		}
	}
	[Token(Token = "0x20003CD")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a Color Variable from another FSM.")]
	public class GetFsmColor : FsmStateAction
	{
		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.FsmColor)]
		[RequiredField]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Color variable in this FSM.")]
		public FsmColor storeValue;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xF5887C", Offset = "0xF5887C", VA = "0xF5887C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xF588F4", Offset = "0xF588F4", VA = "0xF588F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xF58ADC", Offset = "0xF58ADC", VA = "0xF58ADC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xF58920", Offset = "0xF58920", VA = "0xF58920")]
		private void DoGetFsmColor()
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xF58AE0", Offset = "0xF58AE0", VA = "0xF58AE0")]
		public GetFsmColor()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	[Tooltip("Get the value of an Enum Variable from another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class GetFsmEnum : FsmStateAction
	{
		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The name of the FSM variable to get.")]
		[UIHint(UIHint.FsmEnum)]
		public FsmString variableName;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the value in an Enum variable in this FSM.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmEnum storeValue;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xF58AE8", Offset = "0xF58AE8", VA = "0xF58AE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xF58B60", Offset = "0xF58B60", VA = "0xF58B60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xF58D64", Offset = "0xF58D64", VA = "0xF58D64", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xF58B8C", Offset = "0xF58B8C", VA = "0xF58B8C")]
		private void DoGetFsmEnum()
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xF58D68", Offset = "0xF58D68", VA = "0xF58D68")]
		public GetFsmEnum()
		{
		}
	}
	[Token(Token = "0x20003CF")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a Float Variable from another FSM.")]
	public class GetFsmFloat : FsmStateAction
	{
		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmFloat)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the value in a Float variable in this FSM.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeValue;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xF58D70", Offset = "0xF58D70", VA = "0xF58D70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xF58DE8", Offset = "0xF58DE8", VA = "0xF58DE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xF58FE0", Offset = "0xF58FE0", VA = "0xF58FE0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xF58E14", Offset = "0xF58E14", VA = "0xF58E14")]
		private void DoGetFsmFloat()
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xF58FE4", Offset = "0xF58FE4", VA = "0xF58FE4")]
		public GetFsmFloat()
		{
		}
	}
	[Token(Token = "0x20003D0")]
	[Tooltip("Get the value of a Game Object Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmGameObject : FsmStateAction
	{
		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable to get.")]
		[UIHint(UIHint.FsmGameObject)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a GameObject variable in this FSM.")]
		[RequiredField]
		public FsmGameObject storeValue;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xF58FEC", Offset = "0xF58FEC", VA = "0xF58FEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xF59064", Offset = "0xF59064", VA = "0xF59064", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xF59268", Offset = "0xF59268", VA = "0xF59268", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xF59090", Offset = "0xF59090", VA = "0xF59090")]
		private void DoGetFsmGameObject()
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xF5926C", Offset = "0xF5926C", VA = "0xF5926C")]
		public GetFsmGameObject()
		{
		}
	}
	[Token(Token = "0x20003D1")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Get the value of an Integer Variable from another FSM.")]
	public class GetFsmInt : FsmStateAction
	{
		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable to get.")]
		[UIHint(UIHint.FsmInt)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in an Int variable in this FSM.")]
		public FsmInt storeValue;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xF59274", Offset = "0xF59274", VA = "0xF59274", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xF592EC", Offset = "0xF592EC", VA = "0xF592EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xF594D8", Offset = "0xF594D8", VA = "0xF594D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xF59318", Offset = "0xF59318", VA = "0xF59318")]
		private void DoGetFsmInt()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xF594DC", Offset = "0xF594DC", VA = "0xF594DC")]
		public GetFsmInt()
		{
		}
	}
	[Token(Token = "0x20003D2")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Get the value of a Material Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class GetFsmMaterial : FsmStateAction
	{
		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmMaterial)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the value in a Material variable in this FSM.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmMaterial storeValue;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xF594E4", Offset = "0xF594E4", VA = "0xF594E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xF59580", Offset = "0xF59580", VA = "0xF59580", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xF59784", Offset = "0xF59784", VA = "0xF59784", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xF595AC", Offset = "0xF595AC", VA = "0xF595AC")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xF59788", Offset = "0xF59788", VA = "0xF59788")]
		public GetFsmMaterial()
		{
		}
	}
	[Token(Token = "0x20003D3")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of an Object Variable from another FSM.")]
	public class GetFsmObject : FsmStateAction
	{
		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable to get.")]
		[UIHint(UIHint.FsmObject)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the value in an Object variable in this FSM.")]
		public FsmObject storeValue;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xF59790", Offset = "0xF59790", VA = "0xF59790", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xF5982C", Offset = "0xF5982C", VA = "0xF5982C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xF59A30", Offset = "0xF59A30", VA = "0xF59A30", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xF59858", Offset = "0xF59858", VA = "0xF59858")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xF59A34", Offset = "0xF59A34", VA = "0xF59A34")]
		public GetFsmObject()
		{
		}
	}
	[Token(Token = "0x20003D4")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a Quaternion Variable from another FSM.")]
	public class GetFsmQuaternion : FsmStateAction
	{
		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.FsmQuaternion)]
		[Tooltip("The name of the FSM variable to get.")]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Quaternion variable in this FSM.")]
		public FsmQuaternion storeValue;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xF59A3C", Offset = "0xF59A3C", VA = "0xF59A3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xF59AD8", Offset = "0xF59AD8", VA = "0xF59AD8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xF59CC0", Offset = "0xF59CC0", VA = "0xF59CC0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xF59B04", Offset = "0xF59B04", VA = "0xF59B04")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xF59CC4", Offset = "0xF59CC4", VA = "0xF59CC4")]
		public GetFsmQuaternion()
		{
		}
	}
	[Token(Token = "0x20003D5")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a Rect Variable from another FSM.")]
	public class GetFsmRect : FsmStateAction
	{
		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.FsmRect)]
		[Tooltip("The name of the FSM variable to get.")]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the value in a Rect variable in this FSM.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmRect storeValue;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xF59CCC", Offset = "0xF59CCC", VA = "0xF59CCC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xF59D68", Offset = "0xF59D68", VA = "0xF59D68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xF59F50", Offset = "0xF59F50", VA = "0xF59F50", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xF59D94", Offset = "0xF59D94", VA = "0xF59D94")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xF59F54", Offset = "0xF59F54", VA = "0xF59F54")]
		public GetFsmRect()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "fsmComponent", false)]
	[Tooltip("Gets the name of the specified FSMs current state. Either reference the fsm component directly, or find it on a game object.")]
	public class GetFsmState : FsmStateAction
	{
		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Choose a PlayMakerFSM component. If you set a component here it overrides the Game Object and Fsm Name settings.")]
		public PlayMakerFSM fsmComponent;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If not specifying the component above, specify the GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object. If left blank it will find the first PlayMakerFSM on the GameObject.")]
		public FsmString fsmName;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the FSM's current State in a string variable.")]
		public FsmString storeResult;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. E.g.,  useful if you're waiting for the State to change.")]
		public bool everyFrame;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xF59F5C", Offset = "0xF59F5C", VA = "0xF59F5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xF59FEC", Offset = "0xF59FEC", VA = "0xF59FEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xF5A1A0", Offset = "0xF5A1A0", VA = "0xF5A1A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xF5A018", Offset = "0xF5A018", VA = "0xF5A018")]
		private void DoGetFsmState()
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xF5A1A4", Offset = "0xF5A1A4", VA = "0xF5A1A4")]
		public GetFsmState()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	[Tooltip("Get the value of a String Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmString : FsmStateAction
	{
		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmString)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a String variable in this FSM.")]
		public FsmString storeValue;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xF5A1AC", Offset = "0xF5A1AC", VA = "0xF5A1AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xF5A224", Offset = "0xF5A224", VA = "0xF5A224", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xF5A428", Offset = "0xF5A428", VA = "0xF5A428", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xF5A250", Offset = "0xF5A250", VA = "0xF5A250")]
		private void DoGetFsmString()
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xF5A42C", Offset = "0xF5A42C", VA = "0xF5A42C")]
		public GetFsmString()
		{
		}
	}
	[Token(Token = "0x20003D8")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Get the value of a Texture Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class GetFsmTexture : FsmStateAction
	{
		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable to get.")]
		[RequiredField]
		[UIHint(UIHint.FsmTexture)]
		public FsmString variableName;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Texture variable in this FSM.")]
		public FsmTexture storeValue;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xF5A434", Offset = "0xF5A434", VA = "0xF5A434", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xF5A4D0", Offset = "0xF5A4D0", VA = "0xF5A4D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xF5A6D4", Offset = "0xF5A6D4", VA = "0xF5A6D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xF5A4FC", Offset = "0xF5A4FC", VA = "0xF5A4FC")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xF5A6D8", Offset = "0xF5A6D8", VA = "0xF5A6D8")]
		public GetFsmTexture()
		{
		}
	}
	[Token(Token = "0x20003D9")]
	[Tooltip("Get the value of a variable in another FSM and store it in a variable of the same name in this FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class GetFsmVariable : FsmStateAction
	{
		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideTypeFilter]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value of the FsmVariable")]
		[RequiredField]
		public FsmVar storeValue;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject cachedGO;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string cachedFsmName;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerFSM sourceFsm;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private INamedVariable sourceVariable;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NamedVariable targetVariable;

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xF5A6E0", Offset = "0xF5A6E0", VA = "0xF5A6E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xF5A790", Offset = "0xF5A790", VA = "0xF5A790", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xF5AA70", Offset = "0xF5AA70", VA = "0xF5AA70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xF5A7C4", Offset = "0xF5A7C4", VA = "0xF5A7C4")]
		private void InitFsmVar()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xF5AA14", Offset = "0xF5AA14", VA = "0xF5AA14")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xF5AA74", Offset = "0xF5AA74", VA = "0xF5AA74")]
		public GetFsmVariable()
		{
		}
	}
	[Token(Token = "0x20003DA")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Get the values of multiple variables in another FSM and store in variables of the same name in this FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class GetFsmVariables : FsmStateAction
	{
		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideTypeFilter]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the values of the FsmVariables")]
		[RequiredField]
		public FsmVar[] getVariables;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject cachedGO;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string cachedFsmName;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerFSM sourceFsm;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private INamedVariable[] sourceVariables;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NamedVariable[] targetVariables;

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xF5AA7C", Offset = "0xF5AA7C", VA = "0xF5AA7C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xF5AAF4", Offset = "0xF5AAF4", VA = "0xF5AAF4")]
		private void InitFsmVars()
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xF5AE98", Offset = "0xF5AE98", VA = "0xF5AE98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xF5AF84", Offset = "0xF5AF84", VA = "0xF5AF84", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xF5AECC", Offset = "0xF5AECC", VA = "0xF5AECC")]
		private void DoGetFsmVariables()
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xF5AF88", Offset = "0xF5AF88", VA = "0xF5AF88")]
		public GetFsmVariables()
		{
		}
	}
	[Token(Token = "0x20003DB")]
	[Tooltip("Get the value of a Vector2 Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmVector2 : FsmStateAction
	{
		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The name of the FSM variable to get.")]
		[UIHint(UIHint.FsmVector2)]
		public FsmString variableName;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the value in a Vector2 variable in this FSM.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector2 storeValue;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xF5AF90", Offset = "0xF5AF90", VA = "0xF5AF90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xF5B008", Offset = "0xF5B008", VA = "0xF5B008", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xF5B1F0", Offset = "0xF5B1F0", VA = "0xF5B1F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xF5B034", Offset = "0xF5B034", VA = "0xF5B034")]
		private void DoGetFsmVector2()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xF5B1F4", Offset = "0xF5B1F4", VA = "0xF5B1F4")]
		public GetFsmVector2()
		{
		}
	}
	[Token(Token = "0x20003DC")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a Vector3 Variable from another FSM.")]
	public class GetFsmVector3 : FsmStateAction
	{
		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable to get.")]
		[UIHint(UIHint.FsmVector3)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the value in a Vector3 variable in this FSM.")]
		public FsmVector3 storeValue;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xF5B1FC", Offset = "0xF5B1FC", VA = "0xF5B1FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xF5B274", Offset = "0xF5B274", VA = "0xF5B274", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xF5B464", Offset = "0xF5B464", VA = "0xF5B464", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xF5B2A0", Offset = "0xF5B2A0", VA = "0xF5B2A0")]
		private void DoGetFsmVector3()
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xF5B468", Offset = "0xF5B468", VA = "0xF5B468")]
		public GetFsmVector3()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the event that caused the transition to the current state, and stores it in a String Variable.")]
	public class GetLastEvent : FsmStateAction
	{
		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the name of the last event in a String Variable.")]
		public FsmString storeEvent;

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xF5B470", Offset = "0xF5B470", VA = "0xF5B470", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xF5B47C", Offset = "0xF5B47C", VA = "0xF5B47C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xF5B500", Offset = "0xF5B500", VA = "0xF5B500")]
		public GetLastEvent()
		{
		}
	}
	[Token(Token = "0x20003DE")]
	[Tooltip("Gets the name of the previously active state and stores it in a String Variable.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetPreviousStateName : FsmStateAction
	{
		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the name in a String Variable.")]
		public FsmString storeName;

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xF5B508", Offset = "0xF5B508", VA = "0xF5B508", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xF5B514", Offset = "0xF5B514", VA = "0xF5B514", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xF5B55C", Offset = "0xF5B55C", VA = "0xF5B55C")]
		public GetPreviousStateName()
		{
		}
	}
	[Token(Token = "0x20003DF")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Immediately return to the previously active state.")]
	public class GotoPreviousState : FsmStateAction
	{
		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xF5B564", Offset = "0xF5B564", VA = "0xF5B564", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xF5B568", Offset = "0xF5B568", VA = "0xF5B568", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xF5B5F4", Offset = "0xF5B5F4", VA = "0xF5B5F4")]
		public GotoPreviousState()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Ignore specified events while this action is active.")]
	public class IgnoreEvents : FsmStateAction
	{
		[Serializable]
		[Token(Token = "0x20003E1")]
		public enum EventType
		{
			[Token(Token = "0x40011DB")]
			mouse,
			[Token(Token = "0x40011DC")]
			application,
			[Token(Token = "0x40011DD")]
			collision,
			[Token(Token = "0x40011DE")]
			collision2d,
			[Token(Token = "0x40011DF")]
			trigger,
			[Token(Token = "0x40011E0")]
			trigger2d,
			[Token(Token = "0x40011E1")]
			UI,
			[Token(Token = "0x40011E2")]
			anyUnityEvent
		}

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Type of events to ignore.")]
		public EventType[] eventTypes;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event names to ignore.")]
		[UIHint(UIHint.FsmEvent)]
		public FsmString[] events;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Debug")]
		[Tooltip("Log any events blocked by this action. Helpful for debugging.")]
		public FsmBool logIgnoredEvents;

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xF5B5FC", Offset = "0xF5B5FC", VA = "0xF5B5FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xF5B6A8", Offset = "0xF5B6A8", VA = "0xF5B6A8", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xF5B6C8", Offset = "0xF5B6C8", VA = "0xF5B6C8", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xF5B77C", Offset = "0xF5B77C", VA = "0xF5B77C")]
		private bool DoIgnoreEvent(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xF5B948", Offset = "0xF5B948", VA = "0xF5B948")]
		public IgnoreEvents()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	[Tooltip("Kill all queued delayed events. Normally delayed events are automatically killed when the active state is exited, but you can override this behaviour in FSM settings. If you choose to keep delayed events you can use this action to kill them when needed.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Note("Kill all queued delayed events.")]
	public class KillDelayedEvents : FsmStateAction
	{
		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xF5B950", Offset = "0xF5B950", VA = "0xF5B950", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xF5B97C", Offset = "0xF5B97C", VA = "0xF5B97C")]
		public KillDelayedEvents()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	[Tooltip("Sends an Event in LateUpdate, after the Update loop.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class LateUpdateEvent : FsmStateAction
	{
		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Event to send in LateUpdate.")]
		[RequiredField]
		public FsmEvent sendEvent;

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xF5B984", Offset = "0xF5B984", VA = "0xF5B984", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xF5B990", Offset = "0xF5B990", VA = "0xF5B990", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xF5B9B0", Offset = "0xF5B9B0", VA = "0xF5B9B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xF5B9B4", Offset = "0xF5B9B4", VA = "0xF5B9B4", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xF5B9E0", Offset = "0xF5B9E0", VA = "0xF5B9E0")]
		public LateUpdateEvent()
		{
		}
	}
	[Token(Token = "0x20003E4")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends the Loop Event when the action runs. It loops the specified number of times then sends the Finish Event. ")]
	public class Loop : FsmStateAction
	{
		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How many times to loop.")]
		[RequiredField]
		public FsmInt loops;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current loop count. Starts at 0. Useful for iterating through arrays.")]
		public FsmInt storeCurrentLoop;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event that starts a loop.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the loops have finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int loopedCount;

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xF5B9E8", Offset = "0xF5B9E8", VA = "0xF5B9E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xF5BA70", Offset = "0xF5BA70", VA = "0xF5BA70")]
		public Loop()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Note("Put this action at the end of a State to loop through all actions in a state the specified number of times.")]
	[Tooltip("Loops through the state the specified number of times then sends the Finish Event.")]
	public class LoopState : FsmStateAction
	{
		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("How many times to loop through the state.")]
		public FsmInt loops;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current loop count. Starts at 0. Useful for iterating through arrays.")]
		public FsmInt storeCurrentLoop;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the loops have finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int loopedCount;

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xF5BA78", Offset = "0xF5BA78", VA = "0xF5BA78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xF5BB10", Offset = "0xF5BB10", VA = "0xF5BB10")]
		public LoopState()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends an Event in the next frame. Useful if you want to loop states every frame.")]
	public class NextFrameEvent : FsmStateAction
	{
		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Event to send.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xF5BB18", Offset = "0xF5BB18", VA = "0xF5BB18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xF5BB24", Offset = "0xF5BB24", VA = "0xF5BB24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xF5BB28", Offset = "0xF5BB28", VA = "0xF5BB28", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xF5BB54", Offset = "0xF5BB54", VA = "0xF5BB54")]
		public NextFrameEvent()
		{
		}
	}
	[Token(Token = "0x20003E7")]
	[Tooltip("Sends a Random State Event after an optional delay. Use this to transition to a random state connected to the current state.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class RandomEvent : FsmStateAction
	{
		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Delay before sending the event (seconds).")]
		[HasFloatSlider(0f, 10f)]
		public FsmFloat delay;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Don't repeat the same event twice in a row.")]
		public FsmBool noRepeat;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int randomEventIndex;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int lastEventIndex;

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xF5BB5C", Offset = "0xF5BB5C", VA = "0xF5BB5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xF5BB90", Offset = "0xF5BB90", VA = "0xF5BB90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xF5BD40", Offset = "0xF5BD40", VA = "0xF5BD40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xF5BC88", Offset = "0xF5BC88", VA = "0xF5BC88")]
		private FsmEvent GetRandomEvent()
		{
			return null;
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xF5BD70", Offset = "0xF5BD70", VA = "0xF5BD70")]
		public RandomEvent()
		{
		}
	}
	[Token(Token = "0x20003E8")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Creates an FSM at runtime from a saved {{Template}}. The FSM is only active while the state is active. This lets you nest FSMs inside states.\nThis is a very powerful action! It allows you to create a library of FSM Templates that can be re-used in your project. You can edit the template in one place and the changes are reflected everywhere.\nNOTE: You can also specify a template in the {{FSM Inspector}}.")]
	public class RunFSM : RunFSMAction
	{
		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Template to use. You can drag and drop, use the Unity object browser, or the categorized popup browser to select a template.")]
		public FsmTemplateControl fsmTemplateControl;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the FSM has finished (usually because it ran a {{Finish FSM}} action).")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Waits for the sub Fsm to finish before calling it again.")]
		[ActionSection("")]
		public bool everyFrame;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool restart;

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xF5BD80", Offset = "0xF5BD80", VA = "0xF5BD80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xF5BE04", Offset = "0xF5BE04", VA = "0xF5BE04", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xF5BEDC", Offset = "0xF5BEDC", VA = "0xF5BEDC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xF5C058", Offset = "0xF5C058", VA = "0xF5C058", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xF5C150", Offset = "0xF5C150", VA = "0xF5C150")]
		private void OnOutputEvent(FsmEvent fsmEvent)
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xF5C1B8", Offset = "0xF5C1B8", VA = "0xF5C1B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xF5C238", Offset = "0xF5C238", VA = "0xF5C238", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xF5C290", Offset = "0xF5C290", VA = "0xF5C290", Slot = "62")]
		protected override void CheckIfFinished()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xF5C2F8", Offset = "0xF5C2F8", VA = "0xF5C2F8")]
		public RunFSM()
		{
		}
	}
	[Token(Token = "0x20003E9")]
	[Tooltip("Base class for actions that want to run a sub FSM.")]
	public abstract class RunFSMAction : FsmStateAction
	{
		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Fsm runFsm;

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xF5C378", Offset = "0xF5C378", VA = "0xF5C378", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xF5C384", Offset = "0xF5C384", VA = "0xF5C384", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xF5C3BC", Offset = "0xF5C3BC", VA = "0xF5C3BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xF5C418", Offset = "0xF5C418", VA = "0xF5C418", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xF5C458", Offset = "0xF5C458", VA = "0xF5C458", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xF5C498", Offset = "0xF5C498", VA = "0xF5C498", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xF5C4D8", Offset = "0xF5C4D8", VA = "0xF5C4D8", Slot = "46")]
		public override void DoTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xF5C504", Offset = "0xF5C504", VA = "0xF5C504", Slot = "47")]
		public override void DoTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xF5C530", Offset = "0xF5C530", VA = "0xF5C530", Slot = "48")]
		public override void DoTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xF5C55C", Offset = "0xF5C55C", VA = "0xF5C55C", Slot = "43")]
		public override void DoCollisionEnter(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xF5C588", Offset = "0xF5C588", VA = "0xF5C588", Slot = "44")]
		public override void DoCollisionStay(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xF5C5B4", Offset = "0xF5C5B4", VA = "0xF5C5B4", Slot = "45")]
		public override void DoCollisionExit(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xF5C5E0", Offset = "0xF5C5E0", VA = "0xF5C5E0", Slot = "49")]
		public override void DoParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xF5C60C", Offset = "0xF5C60C", VA = "0xF5C60C", Slot = "56")]
		public override void DoControllerColliderHit(ControllerColliderHit collisionInfo)
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xF5C638", Offset = "0xF5C638", VA = "0xF5C638", Slot = "53")]
		public override void DoTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xF5C664", Offset = "0xF5C664", VA = "0xF5C664", Slot = "54")]
		public override void DoTriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xF5C690", Offset = "0xF5C690", VA = "0xF5C690", Slot = "55")]
		public override void DoTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xF5C6BC", Offset = "0xF5C6BC", VA = "0xF5C6BC", Slot = "50")]
		public override void DoCollisionEnter2D(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xF5C6E8", Offset = "0xF5C6E8", VA = "0xF5C6E8", Slot = "51")]
		public override void DoCollisionStay2D(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xF5C714", Offset = "0xF5C714", VA = "0xF5C714", Slot = "52")]
		public override void DoCollisionExit2D(Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xF5C740", Offset = "0xF5C740", VA = "0xF5C740", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xF5C75C", Offset = "0xF5C75C", VA = "0xF5C75C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xF5C770", Offset = "0xF5C770", VA = "0xF5C770", Slot = "62")]
		protected virtual void CheckIfFinished()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xF5C370", Offset = "0xF5C370", VA = "0xF5C370")]
		protected RunFSMAction()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	[ActionTarget(typeof(PlayMakerFSM), "eventTarget", false)]
	[Tooltip("Sends an Event after an optional delay. NOTE: To send events between FSMs they must be marked as Global in the {{Event Browser}}.")]
	[ActionTarget(typeof(GameObject), "eventTarget", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SendEvent : FsmStateAction
	{
		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The event to send. NOTE: Events must be marked Global to send between FSMs.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional delay in seconds.")]
		[HasFloatSlider(0f, 10f)]
		public FsmFloat delay;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Rarely needed, but can be useful when sending events to other FSMs.")]
		public bool everyFrame;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xF5C78C", Offset = "0xF5C78C", VA = "0xF5C78C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xF5C7CC", Offset = "0xF5C7CC", VA = "0xF5C7CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xF5C894", Offset = "0xF5C894", VA = "0xF5C894", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xF5C8E8", Offset = "0xF5C8E8", VA = "0xF5C8E8")]
		public SendEvent()
		{
		}
	}
	[Token(Token = "0x20003EB")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends an Event by name after an optional delay. NOTE: Use this over Send Event if you store events as string variables.")]
	public class SendEventByName : FsmStateAction
	{
		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The event to send. NOTE: Events must be marked Global to send between FSMs.")]
		[RequiredField]
		public FsmString sendEvent;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 10f)]
		[Tooltip("Optional delay in seconds.")]
		public FsmFloat delay;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Rarely needed, but can be useful when sending events to other FSMs.")]
		public bool everyFrame;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xF5C8F0", Offset = "0xF5C8F0", VA = "0xF5C8F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xF5C930", Offset = "0xF5C930", VA = "0xF5C930", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xF5CA6C", Offset = "0xF5CA6C", VA = "0xF5CA6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xF5CAEC", Offset = "0xF5CAEC", VA = "0xF5CAEC")]
		public SendEventByName()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends an Event to another Fsm after an optional delay. Specify an Fsm Name or use the first Fsm on the object.")]
	[Obsolete("This action is obsolete; use Send Event with Event Target instead.")]
	public class SendEventToFsm : FsmStateAction
	{
		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The game object that owns the other FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmEvent)]
		[Tooltip("The Event to send.")]
		public FsmString sendEvent;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional delay in seconds.")]
		[HasFloatSlider(0f, 10f)]
		public FsmFloat delay;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool requireReceiver;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xF5CAF4", Offset = "0xF5CAF4", VA = "0xF5CAF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xF5CB44", Offset = "0xF5CB44", VA = "0xF5CB44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xF5CDD0", Offset = "0xF5CDD0", VA = "0xF5CDD0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xF5CE00", Offset = "0xF5CE00", VA = "0xF5CE00")]
		public SendEventToFsm()
		{
		}
	}
	[Token(Token = "0x20003ED")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends a Random Event picked from an array of Events. Optionally set the relative weight of each event.")]
	public class SendRandomEvent : FsmStateAction
	{
		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A possible Event choice.")]
		[CompoundArray("Events", "Event", "Weight")]
		public FsmEvent[] events;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this Event being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional delay in seconds before sending the event.")]
		public FsmFloat delay;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xF5CE08", Offset = "0xF5CE08", VA = "0xF5CE08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xF5CF8C", Offset = "0xF5CF8C", VA = "0xF5CF8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xF5D06C", Offset = "0xF5D06C", VA = "0xF5D06C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xF5D09C", Offset = "0xF5D09C", VA = "0xF5D09C")]
		public SendRandomEvent()
		{
		}
	}
	[Token(Token = "0x20003EE")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends the next event on the state each time the state is entered.")]
	public class SequenceEvent : FsmStateAction
	{
		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HasFloatSlider(0f, 10f)]
		[Tooltip("Delay before sending the event in seconds.")]
		public FsmFloat delay;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Assign a variable to control reset. Set it to True to reset the sequence. Value is set to False after resetting.")]
		public FsmBool reset;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int eventIndex;

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xF5D0A4", Offset = "0xF5D0A4", VA = "0xF5D0A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xF5D0B0", Offset = "0xF5D0B0", VA = "0xF5D0B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xF5D1C4", Offset = "0xF5D1C4", VA = "0xF5D1C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xF5D1F4", Offset = "0xF5D1F4", VA = "0xF5D1F4")]
		public SequenceEvent()
		{
		}
	}
	[Token(Token = "0x20003EF")]
	[Tooltip("Sets Event Data before sending an event. Get the Event Data, along with sender information, using the {{Get Event Info}} action.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetEventData : FsmStateAction
	{
		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Custom Game Object data.")]
		public FsmGameObject setGameObjectData;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Custom Int data.")]
		public FsmInt setIntData;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Custom Float data.")]
		public FsmFloat setFloatData;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Custom String data.")]
		public FsmString setStringData;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Custom Bool data.")]
		public FsmBool setBoolData;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Custom Vector2 data.")]
		public FsmVector2 setVector2Data;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Custom Vector3 data.")]
		public FsmVector3 setVector3Data;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Custom Rect data.")]
		public FsmRect setRectData;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Custom Quaternion data.")]
		public FsmQuaternion setQuaternionData;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Custom Color data.")]
		public FsmColor setColorData;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Custom Material data.")]
		public FsmMaterial setMaterialData;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Custom Texture data.")]
		public FsmTexture setTextureData;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Custom Object data.")]
		public FsmObject setObjectData;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool everyFrame;

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xF5D1FC", Offset = "0xF5D1FC", VA = "0xF5D1FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xF5D594", Offset = "0xF5D594", VA = "0xF5D594", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xF5D80C", Offset = "0xF5D80C", VA = "0xF5D80C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xF5D5C0", Offset = "0xF5D5C0", VA = "0xF5D5C0")]
		private void DoSetData()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xF5D810", Offset = "0xF5D810", VA = "0xF5D810")]
		public SetEventData()
		{
		}
	}
	[Token(Token = "0x20003F0")]
	[Tooltip("Sets the Float data to send with the next event. Get the Event Data, along with sender information, using the {{Get Event Info}} action.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetEventFloatData : FsmStateAction
	{
		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float value to send.")]
		public FsmFloat floatData;

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xF5D818", Offset = "0xF5D818", VA = "0xF5D818", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xF5D824", Offset = "0xF5D824", VA = "0xF5D824", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xF5D8A8", Offset = "0xF5D8A8", VA = "0xF5D8A8")]
		public SetEventFloatData()
		{
		}
	}
	[Token(Token = "0x20003F1")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sets the Int data to send with the next event. Get the Event Data, along with sender information, using the {{Get Event Info}} action.")]
	public class SetEventIntData : FsmStateAction
	{
		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The int value to send.")]
		public FsmInt intData;

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xF5D8B0", Offset = "0xF5D8B0", VA = "0xF5D8B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xF5D8BC", Offset = "0xF5D8BC", VA = "0xF5D8BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xF5D940", Offset = "0xF5D940", VA = "0xF5D940")]
		public SetEventIntData()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sets the String data to send with the next event. Get the Event Data, along with sender information, using the {{Get Event Info}} action.")]
	public class SetEventStringData : FsmStateAction
	{
		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The string value to send.")]
		public FsmString stringData;

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xF5D948", Offset = "0xF5D948", VA = "0xF5D948", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xF5D954", Offset = "0xF5D954", VA = "0xF5D954", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xF5D9E4", Offset = "0xF5D9E4", VA = "0xF5D9E4")]
		public SetEventStringData()
		{
		}
	}
	[Token(Token = "0x20003F3")]
	[Tooltip("Sets the target FSM for all subsequent events sent by this state. The default 'Self' sends events to this FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetEventTarget : FsmStateAction
	{
		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set the target.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xF5D9EC", Offset = "0xF5D9EC", VA = "0xF5D9EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xF5DA14", Offset = "0xF5DA14", VA = "0xF5DA14", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xF5DA1C", Offset = "0xF5DA1C", VA = "0xF5DA1C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xF5DA60", Offset = "0xF5DA60", VA = "0xF5DA60", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xF5DA84", Offset = "0xF5DA84", VA = "0xF5DA84")]
		public SetEventTarget()
		{
		}
	}
	[Token(Token = "0x20003F4")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Bool Variable in another FSM.")]
	public class SetFsmBool : FsmStateAction
	{
		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmBool)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmBool setValue;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xF5DA8C", Offset = "0xF5DA8C", VA = "0xF5DA8C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xF5DB04", Offset = "0xF5DB04", VA = "0xF5DB04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xF5DB30", Offset = "0xF5DB30", VA = "0xF5DB30")]
		private void DoSetFsmBool()
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xF5DD6C", Offset = "0xF5DD6C", VA = "0xF5DD6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xF5DD70", Offset = "0xF5DD70", VA = "0xF5DD70")]
		public SetFsmBool()
		{
		}
	}
	[Token(Token = "0x20003F5")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Color Variable in another FSM.")]
	public class SetFsmColor : FsmStateAction
	{
		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmColor)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmColor setValue;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xF5DD78", Offset = "0xF5DD78", VA = "0xF5DD78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xF5DDF0", Offset = "0xF5DDF0", VA = "0xF5DDF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xF5DE1C", Offset = "0xF5DE1C", VA = "0xF5DE1C")]
		private void DoSetFsmColor()
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xF5E04C", Offset = "0xF5E04C", VA = "0xF5E04C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xF5E050", Offset = "0xF5E050", VA = "0xF5E050")]
		public SetFsmColor()
		{
		}
	}
	[Token(Token = "0x20003F6")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of an Enum Variable in another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetFsmEnum : FsmStateAction
	{
		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Enum variable name needs to match the FSM variable name on Game Object.")]
		[UIHint(UIHint.FsmEnum)]
		public FsmString variableName;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the Enum Variable.")]
		[RequiredField]
		public FsmEnum setValue;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xF5E058", Offset = "0xF5E058", VA = "0xF5E058", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xF5E0D0", Offset = "0xF5E0D0", VA = "0xF5E0D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xF5E0FC", Offset = "0xF5E0FC", VA = "0xF5E0FC")]
		private void DoSetFsmEnum()
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xF5E34C", Offset = "0xF5E34C", VA = "0xF5E34C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xF5E350", Offset = "0xF5E350", VA = "0xF5E350")]
		public SetFsmEnum()
		{
		}
	}
	[Token(Token = "0x20003F7")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of a Float Variable in another FSM.")]
	public class SetFsmFloat : FsmStateAction
	{
		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmFloat)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmFloat setValue;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xF5E358", Offset = "0xF5E358", VA = "0xF5E358", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xF5E3D0", Offset = "0xF5E3D0", VA = "0xF5E3D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xF5E3FC", Offset = "0xF5E3FC", VA = "0xF5E3FC")]
		private void DoSetFsmFloat()
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xF5E634", Offset = "0xF5E634", VA = "0xF5E634", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xF5E638", Offset = "0xF5E638", VA = "0xF5E638")]
		public SetFsmFloat()
		{
		}
	}
	[Token(Token = "0x20003F8")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Game Object Variable in another FSM. Accept null reference")]
	public class SetFsmGameObject : FsmStateAction
	{
		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmGameObject)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmGameObject setValue;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xF5E640", Offset = "0xF5E640", VA = "0xF5E640", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xF5E6C0", Offset = "0xF5E6C0", VA = "0xF5E6C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xF5E6EC", Offset = "0xF5E6EC", VA = "0xF5E6EC")]
		private void DoSetFsmGameObject()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xF5E91C", Offset = "0xF5E91C", VA = "0xF5E91C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xF5E920", Offset = "0xF5E920", VA = "0xF5E920")]
		public SetFsmGameObject()
		{
		}
	}
	[Token(Token = "0x20003F9")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of an Integer Variable in another FSM.")]
	public class SetFsmInt : FsmStateAction
	{
		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmInt)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		[RequiredField]
		public FsmInt setValue;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xF5E928", Offset = "0xF5E928", VA = "0xF5E928", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xF5E9A0", Offset = "0xF5E9A0", VA = "0xF5E9A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xF5E9CC", Offset = "0xF5E9CC", VA = "0xF5E9CC")]
		private void DoSetFsmInt()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xF5EC04", Offset = "0xF5EC04", VA = "0xF5EC04", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xF5EC08", Offset = "0xF5EC08", VA = "0xF5EC08")]
		public SetFsmInt()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	[Tooltip("Set the value of a Material Variable in another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class SetFsmMaterial : FsmStateAction
	{
		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmMaterial)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmMaterial setValue;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xF5EC10", Offset = "0xF5EC10", VA = "0xF5EC10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xF5ECAC", Offset = "0xF5ECAC", VA = "0xF5ECAC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xF5ECD8", Offset = "0xF5ECD8", VA = "0xF5ECD8")]
		private void DoSetFsmBool()
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xF5EF28", Offset = "0xF5EF28", VA = "0xF5EF28", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xF5EF2C", Offset = "0xF5EF2C", VA = "0xF5EF2C")]
		public SetFsmMaterial()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of an Object Variable in another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class SetFsmObject : FsmStateAction
	{
		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmObject)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmObject setValue;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xF5EF34", Offset = "0xF5EF34", VA = "0xF5EF34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xF5EFD0", Offset = "0xF5EFD0", VA = "0xF5EFD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xF5EFFC", Offset = "0xF5EFFC", VA = "0xF5EFFC")]
		private void DoSetFsmBool()
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xF5F24C", Offset = "0xF5F24C", VA = "0xF5F24C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xF5F250", Offset = "0xF5F250", VA = "0xF5F250")]
		public SetFsmObject()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	[Tooltip("Set the value of a Quaternion Variable in another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetFsmQuaternion : FsmStateAction
	{
		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmQuaternion)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmQuaternion setValue;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xF5F258", Offset = "0xF5F258", VA = "0xF5F258", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xF5F2F4", Offset = "0xF5F2F4", VA = "0xF5F2F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xF5F320", Offset = "0xF5F320", VA = "0xF5F320")]
		private void DoSetFsmQuaternion()
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xF5F550", Offset = "0xF5F550", VA = "0xF5F550", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xF5F554", Offset = "0xF5F554", VA = "0xF5F554")]
		public SetFsmQuaternion()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Rect Variable in another FSM.")]
	public class SetFsmRect : FsmStateAction
	{
		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.FsmRect)]
		[Tooltip("The name of the FSM variable.")]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmRect setValue;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xF5F55C", Offset = "0xF5F55C", VA = "0xF5F55C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xF5F5F8", Offset = "0xF5F5F8", VA = "0xF5F5F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xF5F624", Offset = "0xF5F624", VA = "0xF5F624")]
		private void DoSetFsmBool()
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xF5F854", Offset = "0xF5F854", VA = "0xF5F854", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xF5F858", Offset = "0xF5F858", VA = "0xF5F858")]
		public SetFsmRect()
		{
		}
	}
	[Token(Token = "0x20003FE")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a String Variable in another FSM.")]
	public class SetFsmString : FsmStateAction
	{
		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object.")]
		public FsmString fsmName;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmString)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmString setValue;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xF5F860", Offset = "0xF5F860", VA = "0xF5F860", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xF5F8D8", Offset = "0xF5F8D8", VA = "0xF5F8D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xF5F904", Offset = "0xF5F904", VA = "0xF5F904")]
		private void DoSetFsmString()
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xF5FB54", Offset = "0xF5FB54", VA = "0xF5FB54", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xF5FB58", Offset = "0xF5FB58", VA = "0xF5FB58")]
		public SetFsmString()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Texture Variable in another FSM.")]
	public class SetFsmTexture : FsmStateAction
	{
		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmTexture)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmTexture setValue;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xF5FB60", Offset = "0xF5FB60", VA = "0xF5FB60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xF5FBFC", Offset = "0xF5FBFC", VA = "0xF5FBFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xF5FC28", Offset = "0xF5FC28", VA = "0xF5FC28")]
		private void DoSetFsmTexture()
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xF5FE78", Offset = "0xF5FE78", VA = "0xF5FE78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xF5FE7C", Offset = "0xF5FE7C", VA = "0xF5FE7C")]
		public SetFsmTexture()
		{
		}
	}
	[Token(Token = "0x2000400")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of a variable in another FSM.")]
	public class SetFsmVariable : FsmStateAction
	{
		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the variable in the target FSM.")]
		public FsmString variableName;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value.")]
		[RequiredField]
		public FsmVar setValue;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerFSM targetFsm;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private NamedVariable targetVariable;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject cachedGameObject;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string cachedFsmName;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string cachedVariableName;

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xF5FE84", Offset = "0xF5FE84", VA = "0xF5FE84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xF5FF34", Offset = "0xF5FF34", VA = "0xF5FF34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xF6024C", Offset = "0xF6024C", VA = "0xF6024C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xF5FF60", Offset = "0xF5FF60", VA = "0xF5FF60")]
		private void DoSetFsmVariable()
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xF60250", Offset = "0xF60250", VA = "0xF60250")]
		public SetFsmVariable()
		{
		}
	}
	[Token(Token = "0x2000401")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Vector2 Variable in another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetFsmVector2 : FsmStateAction
	{
		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmVector2)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmVector2 setValue;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xF60258", Offset = "0xF60258", VA = "0xF60258", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xF602D0", Offset = "0xF602D0", VA = "0xF602D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xF602FC", Offset = "0xF602FC", VA = "0xF602FC")]
		private void DoSetFsmVector2()
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xF6052C", Offset = "0xF6052C", VA = "0xF6052C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xF60530", Offset = "0xF60530", VA = "0xF60530")]
		public SetFsmVector2()
		{
		}
	}
	[Token(Token = "0x2000402")]
	[Tooltip("Set the value of a Vector3 Variable in another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetFsmVector3 : FsmStateAction
	{
		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmVector3)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmVector3 setValue;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xF60538", Offset = "0xF60538", VA = "0xF60538", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xF605B0", Offset = "0xF605B0", VA = "0xF605B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xF605DC", Offset = "0xF605DC", VA = "0xF605DC")]
		private void DoSetFsmVector3()
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xF60818", Offset = "0xF60818", VA = "0xF60818", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xF6081C", Offset = "0xF6081C", VA = "0xF6081C")]
		public SetFsmVector3()
		{
		}
	}
	[Token(Token = "0x2000403")]
	[Tooltip("Builds a String from other Strings.")]
	[ActionCategory(ActionCategory.String)]
	public class BuildString : FsmStateAction
	{
		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Array of Strings to combine.")]
		[RequiredField]
		public FsmString[] stringParts;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Separator to insert between each String. E.g. space character.")]
		public FsmString separator;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Add Separator to end of built string.")]
		public FsmBool addToEnd;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the final String in a variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString storeResult;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string result;

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xF60824", Offset = "0xF60824", VA = "0xF60824", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xF608C0", Offset = "0xF608C0", VA = "0xF608C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xF60AD4", Offset = "0xF60AD4", VA = "0xF60AD4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xF608EC", Offset = "0xF608EC", VA = "0xF608EC")]
		private void DoBuildString()
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xF60AD8", Offset = "0xF60AD8", VA = "0xF60AD8")]
		public BuildString()
		{
		}
	}
	[Token(Token = "0x2000404")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Replaces each format item in a specified string with the text equivalent of variable's value. Stores the result in a string variable.\nSee C# <a href=\"http://msdn.microsoft.com/en-us/library/system.string.format(v=vs.90).aspx\" rel=\"nofollow\">string.Format documentation</a> for usage.")]
	public class FormatString : FsmStateAction
	{
		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("E.g. Hello {0} and {1}\nWith 2 variables that replace {0} and {1}\nSee C# string.Format docs.")]
		public FsmString format;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Variables to use for each formatting item.")]
		public FsmVar[] variables;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the formatted result in a string variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString storeResult;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the variables are changing.")]
		public bool everyFrame;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private object[] objectArray;

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xF60AE0", Offset = "0xF60AE0", VA = "0xF60AE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xF60B20", Offset = "0xF60B20", VA = "0xF60B20", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xF60D74", Offset = "0xF60D74", VA = "0xF60D74", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xF60BAC", Offset = "0xF60BAC", VA = "0xF60BAC")]
		private void DoFormatString()
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xF60D78", Offset = "0xF60D78", VA = "0xF60D78")]
		public FormatString()
		{
		}
	}
	[Token(Token = "0x2000405")]
	[Tooltip("Gets the Left n characters from a String Variable.")]
	[ActionCategory(ActionCategory.String)]
	public class GetStringLeft : FsmStateAction
	{
		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The string to get characters from.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Number of characters to get.")]
		public FsmInt charCount;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in a string variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString storeResult;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xF60D80", Offset = "0xF60D80", VA = "0xF60D80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xF60DCC", Offset = "0xF60DCC", VA = "0xF60DCC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xF60EC8", Offset = "0xF60EC8", VA = "0xF60EC8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xF60DF8", Offset = "0xF60DF8", VA = "0xF60DF8")]
		private void DoGetStringLeft()
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xF60ECC", Offset = "0xF60ECC", VA = "0xF60ECC")]
		public GetStringLeft()
		{
		}
	}
	[Token(Token = "0x2000406")]
	[Tooltip("Gets the Length of a String.")]
	[ActionCategory(ActionCategory.String)]
	public class GetStringLength : FsmStateAction
	{
		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The string to measure.")]
		public FsmString stringVariable;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Store the result in an Int Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeResult;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xF60ED4", Offset = "0xF60ED4", VA = "0xF60ED4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xF60F04", Offset = "0xF60F04", VA = "0xF60F04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xF60F68", Offset = "0xF60F68", VA = "0xF60F68", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xF60F30", Offset = "0xF60F30", VA = "0xF60F30")]
		private void DoGetStringLength()
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xF60F6C", Offset = "0xF60F6C", VA = "0xF60F6C")]
		public GetStringLength()
		{
		}
	}
	[Token(Token = "0x2000407")]
	[Tooltip("Gets the Right n characters from a String.")]
	[ActionCategory(ActionCategory.String)]
	public class GetStringRight : FsmStateAction
	{
		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The string to get characters from.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString stringVariable;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Number of characters to get.")]
		public FsmInt charCount;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in a string variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString storeResult;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xF60F74", Offset = "0xF60F74", VA = "0xF60F74", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xF60FC0", Offset = "0xF60FC0", VA = "0xF60FC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xF610A0", Offset = "0xF610A0", VA = "0xF610A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xF60FEC", Offset = "0xF60FEC", VA = "0xF60FEC")]
		private void DoGetStringRight()
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xF610A4", Offset = "0xF610A4", VA = "0xF610A4")]
		public GetStringRight()
		{
		}
	}
	[Token(Token = "0x2000408")]
	[Tooltip("Gets a sub-string from a String Variable.")]
	[ActionCategory(ActionCategory.String)]
	public class GetSubstring : FsmStateAction
	{
		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The string to get characters from.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The start of the substring (0 = first character).")]
		[RequiredField]
		public FsmInt startIndex;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The number of characters to get.")]
		[RequiredField]
		public FsmInt length;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Store the result in a string variable.")]
		[UIHint(UIHint.Variable)]
		public FsmString storeResult;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xF610AC", Offset = "0xF610AC", VA = "0xF610AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xF61114", Offset = "0xF61114", VA = "0xF61114", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xF611D4", Offset = "0xF611D4", VA = "0xF611D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xF61140", Offset = "0xF61140", VA = "0xF61140")]
		private void DoGetSubstring()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xF611D8", Offset = "0xF611D8", VA = "0xF611D8")]
		public GetSubstring()
		{
		}
	}
	[Token(Token = "0x2000409")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Select a Random String from an array of Strings.")]
	public class SelectRandomString : FsmStateAction
	{
		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A possible String choice.")]
		[CompoundArray("Strings", "String", "Weight")]
		public FsmString[] strings;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The relative probability of this string being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat[] weights;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the chosen String in a String Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString storeString;

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xF611E0", Offset = "0xF611E0", VA = "0xF611E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xF61364", Offset = "0xF61364", VA = "0xF61364", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xF61380", Offset = "0xF61380", VA = "0xF61380")]
		private void DoSelectRandomString()
		{
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xF61408", Offset = "0xF61408", VA = "0xF61408")]
		public SelectRandomString()
		{
		}
	}
	[Token(Token = "0x200040A")]
	[Tooltip("Sets the value of a String Variable.")]
	[ActionCategory(ActionCategory.String)]
	public class SetStringValue : FsmStateAction
	{
		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The String Variable to set.")]
		public FsmString stringVariable;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.TextArea)]
		[Tooltip("The value to set the variable to.")]
		public FsmString stringValue;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xF61410", Offset = "0xF61410", VA = "0xF61410", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xF61440", Offset = "0xF61440", VA = "0xF61440", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xF614A4", Offset = "0xF614A4", VA = "0xF614A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xF6146C", Offset = "0xF6146C", VA = "0xF6146C")]
		private void DoSetStringValue()
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xF614A8", Offset = "0xF614A8", VA = "0xF614A8")]
		public SetStringValue()
		{
		}
	}
	[Token(Token = "0x200040B")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Adds a String to the end of a String.")]
	public class StringAppend : FsmStateAction
	{
		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Strings to add to.")]
		public FsmString stringVariable;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("String to append")]
		public FsmString appendString;

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xF614B0", Offset = "0xF614B0", VA = "0xF614B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xF614D8", Offset = "0xF614D8", VA = "0xF614D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xF61548", Offset = "0xF61548", VA = "0xF61548")]
		public StringAppend()
		{
		}
	}
	[Token(Token = "0x200040C")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Join an array of strings into a single string.")]
	public class StringJoin : FsmStateAction
	{
		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.String, "", 0, 0, 65536)]
		[Tooltip("Array of string to join into a single string.")]
		public FsmArray stringArray;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Separator to add between each string.")]
		public FsmString separator;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the joined string in string variable.")]
		public FsmString storeResult;

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xF61550", Offset = "0xF61550", VA = "0xF61550", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xF615D8", Offset = "0xF615D8", VA = "0xF615D8")]
		public StringJoin()
		{
		}
	}
	[Token(Token = "0x200040D")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Replace a substring with a new String.")]
	public class StringReplace : FsmStateAction
	{
		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The String Variable to examine.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString stringVariable;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Replace this string...")]
		public FsmString replace;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("... with this string.")]
		public FsmString with;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result in a string variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString storeResult;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xF615E0", Offset = "0xF615E0", VA = "0xF615E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xF6167C", Offset = "0xF6167C", VA = "0xF6167C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xF6173C", Offset = "0xF6173C", VA = "0xF6173C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xF616A8", Offset = "0xF616A8", VA = "0xF616A8")]
		private void DoReplace()
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xF61740", Offset = "0xF61740", VA = "0xF61740")]
		public StringReplace()
		{
		}
	}
	[Token(Token = "0x200040E")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Splits a string into substrings using separator characters.")]
	public class StringSplit : FsmStateAction
	{
		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("String to split.")]
		public FsmString stringToSplit;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Characters used to split the string.\nUse '\\n' for newline\nUse '\\t' for tab")]
		public FsmString separators;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Remove all leading and trailing white-space characters from each separated string.")]
		public FsmBool trimStrings;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional characters used to trim each separated string.")]
		public FsmString trimChars;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ArrayEditor(VariableType.String, "", 0, 0, 65536)]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the split strings in a String Array.")]
		public FsmArray stringArray;

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xF61748", Offset = "0xF61748", VA = "0xF61748", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xF617AC", Offset = "0xF617AC", VA = "0xF617AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xF619AC", Offset = "0xF619AC", VA = "0xF619AC")]
		public StringSplit()
		{
		}
	}
	[Token(Token = "0x200040F")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Gets system date and time info and stores it in a string variable. An optional format string gives you a lot of control over the formatting (see online docs for format syntax).")]
	public class GetSystemDateTime : FsmStateAction
	{
		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store System DateTime as a string.")]
		public FsmString storeString;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional format string. E.g., MM/dd/yyyy HH:mm")]
		public FsmString format;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xF619B4", Offset = "0xF619B4", VA = "0xF619B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xF61A1C", Offset = "0xF61A1C", VA = "0xF61A1C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xF61AD4", Offset = "0xF61AD4", VA = "0xF61AD4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xF61B78", Offset = "0xF61B78", VA = "0xF61B78")]
		public GetSystemDateTime()
		{
		}
	}
	[Token(Token = "0x2000410")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Gets various useful Time measurements.")]
	public class GetTimeInfo : FsmStateAction
	{
		[Token(Token = "0x2000411")]
		public enum TimeInfo
		{
			[Token(Token = "0x40012D5")]
			DeltaTime,
			[Token(Token = "0x40012D6")]
			TimeScale,
			[Token(Token = "0x40012D7")]
			SmoothDeltaTime,
			[Token(Token = "0x40012D8")]
			TimeInCurrentState,
			[Token(Token = "0x40012D9")]
			TimeSinceStartup,
			[Token(Token = "0x40012DA")]
			TimeSinceLevelLoad,
			[Token(Token = "0x40012DB")]
			RealTimeSinceStartup,
			[Token(Token = "0x40012DC")]
			RealTimeInCurrentState
		}

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info to get.")]
		public TimeInfo getInfo;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the time info in a float variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeValue;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xF61B80", Offset = "0xF61B80", VA = "0xF61B80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xF61BAC", Offset = "0xF61BAC", VA = "0xF61BAC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xF61CE0", Offset = "0xF61CE0", VA = "0xF61CE0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xF61BD8", Offset = "0xF61BD8", VA = "0xF61BD8")]
		private void DoGetTimeInfo()
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xF61CE4", Offset = "0xF61CE4", VA = "0xF61CE4")]
		public GetTimeInfo()
		{
		}
	}
	[Token(Token = "0x2000412")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Multiplies a Float by Time.deltaTime to use in frame-rate independent operations. E.g., 10 becomes 10 units per second.")]
	public class PerSecond : FsmStateAction
	{
		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The float value to multiply be Time.deltaTime.")]
		public FsmFloat floatValue;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the result in a float variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeResult;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Do it every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xF61CEC", Offset = "0xF61CEC", VA = "0xF61CEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xF61D1C", Offset = "0xF61D1C", VA = "0xF61D1C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xF61D8C", Offset = "0xF61D8C", VA = "0xF61D8C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xF61D48", Offset = "0xF61D48", VA = "0xF61D48")]
		private void DoPerSecond()
		{
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xF61D90", Offset = "0xF61D90", VA = "0xF61D90")]
		public PerSecond()
		{
		}
	}
	[Token(Token = "0x2000413")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Delays a State from finishing by a random time. NOTE: Other actions continue running during this time.\nAfter the random time the specified Finish Event or FINISHED is sent.")]
	public class RandomWait : FsmStateAction
	{
		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Minimum amount of time to wait.")]
		public FsmFloat min;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Maximum amount of time to wait.")]
		public FsmFloat max;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when timer is finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore time scale.")]
		public bool realTime;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float startTime;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float timer;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float time;

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xF61D98", Offset = "0xF61D98", VA = "0xF61D98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xF61DF4", Offset = "0xF61DF4", VA = "0xF61DF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xF61E88", Offset = "0xF61E88", VA = "0xF61E88", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xF61F0C", Offset = "0xF61F0C", VA = "0xF61F0C")]
		public RandomWait()
		{
		}
	}
	[Token(Token = "0x2000414")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Scales time: 1 = normal, 0.5 = half speed, 2 = double speed.")]
	public class ScaleTime : FsmStateAction
	{
		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HasFloatSlider(0f, 4f)]
		[Tooltip("Scales time: 1 = normal, 0.5 = half speed, 2 = double speed.")]
		public FsmFloat timeScale;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Adjust the fixed physics time step to match the time scale.")]
		public FsmBool adjustFixedDeltaTime;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when animating the value.")]
		public bool everyFrame;

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xF61F14", Offset = "0xF61F14", VA = "0xF61F14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xF61F60", Offset = "0xF61F60", VA = "0xF61F60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xF61FEC", Offset = "0xF61FEC", VA = "0xF61FEC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xF61F8C", Offset = "0xF61F8C", VA = "0xF61F8C")]
		private void DoTimeScale()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xF61FF0", Offset = "0xF61FF0", VA = "0xF61FF0")]
		public ScaleTime()
		{
		}
	}
	[Token(Token = "0x2000415")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Delays a State from finishing. Optionally send an event after the specified time. NOTE: Other actions continue running and can send events before this action finishes.")]
	public class Wait : FsmStateAction
	{
		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Time to wait in seconds.")]
		public FsmFloat time;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send after the specified time.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Ignore TimeScale. E.g., if the game is paused using Scale Time.")]
		public bool realTime;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float startTime;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float timer;

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xF61FF8", Offset = "0xF61FF8", VA = "0xF61FF8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xF62038", Offset = "0xF62038", VA = "0xF62038", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xF62098", Offset = "0xF62098", VA = "0xF62098", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xF62128", Offset = "0xF62128", VA = "0xF62128")]
		public Wait()
		{
		}
	}
	[Token(Token = "0x2000416")]
	[Tooltip("Align a GameObject to the specified Direction.")]
	[ActionCategory(ActionCategory.Transform)]
	public class AlignToDirection : ComponentAction<Transform>
	{
		[Token(Token = "0x2000417")]
		public enum AlignAxis
		{
			[Token(Token = "0x40012F6")]
			x,
			[Token(Token = "0x40012F7")]
			y,
			[Token(Token = "0x40012F8")]
			z
		}

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The direction to look at. E.g. the Hit Normal from a Raycast.")]
		public FsmVector3 targetDirection;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[ObjectType(typeof(AlignAxis))]
		[Tooltip("The GameObject axis to align to the direction.")]
		public FsmEnum alignAxis;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Flip the alignment axis. So x becomes -x.")]
		public FsmBool flipAxis;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every update.")]
		public bool everyFrame;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[Tooltip("Perform in LateUpdate. This can help eliminate jitters in some situations.")]
		public bool lateUpdate;

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xF62130", Offset = "0xF62130", VA = "0xF62130", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xF621D8", Offset = "0xF621D8", VA = "0xF621D8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xF621FC", Offset = "0xF621FC", VA = "0xF621FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xF62478", Offset = "0xF62478", VA = "0xF62478", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xF62488", Offset = "0xF62488", VA = "0xF62488", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xF62228", Offset = "0xF62228", VA = "0xF62228")]
		private void DoAlignToDirection()
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xF62498", Offset = "0xF62498", VA = "0xF62498")]
		public AlignToDirection()
		{
		}
	}
	[Token(Token = "0x2000418")]
	[Tooltip("Clamps a position to min/max ranges. Set any limit to None to leave un-clamped.")]
	[ActionCategory(ActionCategory.Transform)]
	public class ClampPosition : ComponentAction<Transform>
	{
		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to clamp position.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Clamp the minimum value of x.")]
		public FsmFloat minX;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Clamp the maximum value of x.")]
		public FsmFloat maxX;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Clamp the minimum value of y.")]
		public FsmFloat minY;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Clamp the maximum value of y.")]
		public FsmFloat maxY;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Clamp the minimum value of z.")]
		public FsmFloat minZ;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Clamp the maximum value of z.")]
		public FsmFloat maxZ;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Clamp position in local (relative to parent) or world space.")]
		public Space space;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to clamp the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xE2A2DC", Offset = "0xE2A2DC", VA = "0xE2A2DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xE2A454", Offset = "0xE2A454", VA = "0xE2A454", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xE2A484", Offset = "0xE2A484", VA = "0xE2A484", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xE2A6D4", Offset = "0xE2A6D4", VA = "0xE2A6D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xE2A6E4", Offset = "0xE2A6E4", VA = "0xE2A6E4", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xE2A4BC", Offset = "0xE2A4BC", VA = "0xE2A4BC")]
		private void DoClampPosition()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xE2A720", Offset = "0xE2A720", VA = "0xE2A720")]
		public ClampPosition()
		{
		}
	}
	[Token(Token = "0x2000419")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Clamps a rotation around a local axis. Optionally define the default rotation. Clamp is done on LateUpdate")]
	public class ClampRotation : FsmStateAction
	{
		[Token(Token = "0x200041A")]
		public enum ConstraintAxis
		{
			[Token(Token = "0x4001315")]
			x,
			[Token(Token = "0x4001316")]
			y,
			[Token(Token = "0x4001317")]
			z
		}

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to clamp rotation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The default rotation. If none, will use the GameObject target.")]
		public FsmVector3 defaultRotation;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The axis to constraint the rotation")]
		[ObjectType(typeof(ConstraintAxis))]
		public FsmEnum constraintAxis;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The minimum angle allowed")]
		public FsmFloat minAngle;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The maximum angle allowed")]
		public FsmFloat maxAngle;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float angleFromMin;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float angleFromMax;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform thisTransform;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 rotateAround;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion minQuaternion;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion maxQuaternion;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float range;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ConstraintAxis axis;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int axisIndex;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion axisRotation;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 _defaultRotation;

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xE2A768", Offset = "0xE2A768", VA = "0xE2A768", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xE2A840", Offset = "0xE2A840", VA = "0xE2A840", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xE2A860", Offset = "0xE2A860", VA = "0xE2A860", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xE2ACD0", Offset = "0xE2ACD0", VA = "0xE2ACD0", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xE2ACFC", Offset = "0xE2ACFC", VA = "0xE2ACFC")]
		private void DoClampRotation()
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xE2AAA0", Offset = "0xE2AAA0", VA = "0xE2AAA0")]
		private void ComputeRange()
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xE2B134", Offset = "0xE2B134", VA = "0xE2B134")]
		public ClampRotation()
		{
		}
	}
	[Token(Token = "0x200041B")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the Angle between a GameObject's forward axis and a Target. The Target can be defined as a GameObject or a world Position. If you specify both, then the Position will be used as a local offset from the Target Object's position.")]
	public class GetAngleToTarget : FsmStateAction
	{
		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The game object whose forward axis we measure from. If the target is dead ahead the angle will be 0.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The target object to measure the angle to. Or use target position.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The world position to measure an angle to. If Target Object is also specified, this vector is used as an offset from that object's position.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore height differences when calculating the angle.")]
		public FsmBool ignoreHeight;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the angle in a float variable.")]
		[RequiredField]
		public FsmFloat storeAngle;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xE2B13C", Offset = "0xE2B13C", VA = "0xE2B13C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xE2B200", Offset = "0xE2B200", VA = "0xE2B200", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xE2B220", Offset = "0xE2B220", VA = "0xE2B220", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xE2B24C", Offset = "0xE2B24C", VA = "0xE2B24C")]
		private void DoGetAngleToTarget()
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xE2B558", Offset = "0xE2B558", VA = "0xE2B558")]
		public GetAngleToTarget()
		{
		}
	}
	[Token(Token = "0x200041C")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the Position of a Game Object and stores it in a Vector3 Variable or each Axis in a Float Variable")]
	public class GetPosition : ComponentAction<Transform>
	{
		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The game object to examine.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the position in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the X coordinate in a Float Variable.")]
		public FsmFloat x;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Y coordinate in a Float Variable.")]
		public FsmFloat y;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Z coordinate in a Float Variable.")]
		public FsmFloat z;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Use world or local coordinates.")]
		public Space space;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xE2B560", Offset = "0xE2B560", VA = "0xE2B560", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xE2B5C4", Offset = "0xE2B5C4", VA = "0xE2B5C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xE2B6C0", Offset = "0xE2B6C0", VA = "0xE2B6C0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xE2B5F0", Offset = "0xE2B5F0", VA = "0xE2B5F0")]
		private void DoGetPosition()
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xE2B6C4", Offset = "0xE2B6C4", VA = "0xE2B6C4")]
		public GetPosition()
		{
		}
	}
	[Token(Token = "0x200041D")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the 2D Position of a GameObject and stores it in a Vector2 Variable or each Axis in a Float Variable")]
	public class GetPosition2d : ComponentAction<Transform>
	{
		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The game object to examine.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Title("Vector2")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the position in a Vector2 Variable.")]
		public FsmVector2 vector_2d;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the X coordinate in a Float Variable.")]
		public FsmFloat x;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the Y coordinate in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Use world or local coordinates.")]
		public Space space;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xE2B70C", Offset = "0xE2B70C", VA = "0xE2B70C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xE2B760", Offset = "0xE2B760", VA = "0xE2B760", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xE2B84C", Offset = "0xE2B84C", VA = "0xE2B84C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xE2B78C", Offset = "0xE2B78C", VA = "0xE2B78C")]
		private void DoGetPosition()
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xE2B850", Offset = "0xE2B850", VA = "0xE2B850")]
		public GetPosition2d()
		{
		}
	}
	[Token(Token = "0x200041E")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the Rotation of a Game Object and stores it in a Vector3 Variable or each Axis in a Float Variable")]
	public class GetRotation : FsmStateAction
	{
		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Get the rotation as a Quaternion.")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion quaternion;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the rotation as Euler angles (rotation around each axis) and store in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		[Title("Euler Angles")]
		public FsmVector3 vector;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the angle around the X axis.")]
		public FsmFloat xAngle;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Get the angle around the Y axis.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat yAngle;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the angle around the Z axis.")]
		public FsmFloat zAngle;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The coordinate space to get the rotation in.")]
		public Space space;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xE2B898", Offset = "0xE2B898", VA = "0xE2B898", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xE2B90C", Offset = "0xE2B90C", VA = "0xE2B90C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xE2BAD0", Offset = "0xE2BAD0", VA = "0xE2BAD0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xE2B938", Offset = "0xE2B938", VA = "0xE2B938")]
		private void DoGetRotation()
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xE2BAD4", Offset = "0xE2BAD4", VA = "0xE2BAD4")]
		public GetRotation()
		{
		}
	}
	[Token(Token = "0x200041F")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the Scale of a Game Object and stores it in a Vector3 Variable or each Axis in a Float Variable")]
	public class GetScale : FsmStateAction
	{
		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the scale in a Vector3 variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the X scale in a Float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat xScale;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the Y scale in a Float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat yScale;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Z scale in a Float variable.")]
		public FsmFloat zScale;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The coordinate space to get the rotation in.")]
		public Space space;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xE2BADC", Offset = "0xE2BADC", VA = "0xE2BADC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xE2BB40", Offset = "0xE2BB40", VA = "0xE2BB40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xE2BC50", Offset = "0xE2BC50", VA = "0xE2BC50", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xE2BB6C", Offset = "0xE2BB6C", VA = "0xE2BB6C")]
		private void DoGetScale()
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xE2BC54", Offset = "0xE2BC54", VA = "0xE2BC54")]
		public GetScale()
		{
		}
	}
	[Token(Token = "0x2000420")]
	[Tooltip("Transforms a Direction from world space to a Game Object's local space. The opposite of TransformDirection.")]
	[ActionCategory(ActionCategory.Transform)]
	public class InverseTransformDirection : FsmStateAction
	{
		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The game object that defines local space.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The direction in world space.")]
		public FsmVector3 worldDirection;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 storeResult;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xE2BC5C", Offset = "0xE2BC5C", VA = "0xE2BC5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xE2BC9C", Offset = "0xE2BC9C", VA = "0xE2BC9C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xE2BD94", Offset = "0xE2BD94", VA = "0xE2BD94", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xE2BCC8", Offset = "0xE2BCC8", VA = "0xE2BCC8")]
		private void DoInverseTransformDirection()
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xE2BD98", Offset = "0xE2BD98", VA = "0xE2BD98")]
		public InverseTransformDirection()
		{
		}
	}
	[Token(Token = "0x2000421")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Transforms position from world space to a Game Object's local space. The opposite of TransformPoint.")]
	public class InverseTransformPoint : FsmStateAction
	{
		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The game object that defines local space.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The world position vector.")]
		[RequiredField]
		public FsmVector3 worldPosition;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the transformed vector in a Vector3 Variable.")]
		public FsmVector3 storeResult;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xE2BDA0", Offset = "0xE2BDA0", VA = "0xE2BDA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xE2BDE0", Offset = "0xE2BDE0", VA = "0xE2BDE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xE2BED8", Offset = "0xE2BED8", VA = "0xE2BED8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xE2BE0C", Offset = "0xE2BE0C", VA = "0xE2BE0C")]
		private void DoInverseTransformPoint()
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xE2BEDC", Offset = "0xE2BEDC", VA = "0xE2BEDC")]
		public InverseTransformPoint()
		{
		}
	}
	[Token(Token = "0x2000422")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Rotates a Game Object so its forward vector points at a Target. The Target can be specified as a GameObject or a world Position. If you specify both, then Position specifies a local offset from the target object's Position.")]
	public class LookAt : FsmStateAction
	{
		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The GameObject to Look At.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("World position to look at, or local offset from Target Object if specified.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Rotate the GameObject to point its up direction vector in the direction hinted at by the Up Vector. See Unity Look At docs for more details.")]
		public FsmVector3 upVector;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Don't rotate vertically.")]
		public FsmBool keepVertical;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Draw a debug line from the GameObject to the Target.")]
		[Title("Draw Debug Line")]
		public FsmBool debug;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Color to use for the debug line.")]
		public FsmColor debugLineColor;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject go;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject goTarget;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 lookAtPos;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 lookAtPosWithVertical;

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xE2BEE4", Offset = "0xE2BEE4", VA = "0xE2BEE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xE2C018", Offset = "0xE2C018", VA = "0xE2C018", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xE2C038", Offset = "0xE2C038", VA = "0xE2C038", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xE2C20C", Offset = "0xE2C20C", VA = "0xE2C20C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xE2C064", Offset = "0xE2C064", VA = "0xE2C064")]
		private void DoLookAt()
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xE2C210", Offset = "0xE2C210", VA = "0xE2C210")]
		public bool UpdateLookAtPosition()
		{
			return default(bool);
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xE2C404", Offset = "0xE2C404", VA = "0xE2C404")]
		public Vector3 GetLookAtPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xE2C410", Offset = "0xE2C410", VA = "0xE2C410")]
		public Vector3 GetLookAtPositionWithVertical()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xE2C41C", Offset = "0xE2C41C", VA = "0xE2C41C")]
		public LookAt()
		{
		}
	}
	[Token(Token = "0x2000423")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Rotates a Game Object so its forward vector points in the specified Direction.")]
	public class LookAtDirection : ComponentAction<Transform>
	{
		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The direction to look at.")]
		public FsmVector3 targetDirection;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Keep this vector pointing up as the GameObject rotates.")]
		public FsmVector3 upVector;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every update.")]
		public bool everyFrame;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Perform in LateUpdate. This can help eliminate jitters in some situations.")]
		public bool lateUpdate;

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xE2C42C", Offset = "0xE2C42C", VA = "0xE2C42C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xE2C4EC", Offset = "0xE2C4EC", VA = "0xE2C4EC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xE2C510", Offset = "0xE2C510", VA = "0xE2C510", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xE2C698", Offset = "0xE2C698", VA = "0xE2C698", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xE2C6A8", Offset = "0xE2C6A8", VA = "0xE2C6A8", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xE2C53C", Offset = "0xE2C53C", VA = "0xE2C53C")]
		private void DoLookAtDirection()
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xE2C6B8", Offset = "0xE2C6B8", VA = "0xE2C6B8")]
		public LookAtDirection()
		{
		}
	}
	[Token(Token = "0x2000424")]
	[ActionCategory(ActionCategory.Transform)]
	[HelpUrl("http://hutonggames.com/playmakerforum/index.php?topic=4758.0")]
	[Tooltip("Move a GameObject to another GameObject using easing functions. Works like iTween Move To, but with better performance.")]
	public class MoveObject : EaseFsmAction
	{
		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The GameObject to move.")]
		[RequiredField]
		public FsmOwnerDefault objectToMove;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[RequiredField]
		[Tooltip("The target GamObject.")]
		public FsmGameObject destination;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private FsmVector3 fromValue;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private FsmVector3 toVector;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private FsmVector3 fromVector;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool finishInNextStep;

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xE2C700", Offset = "0xE2C700", VA = "0xE2C700", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xE2C748", Offset = "0xE2C748", VA = "0xE2C748", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xE2C9F8", Offset = "0xE2C9F8", VA = "0xE2C9F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xE2CBC4", Offset = "0xE2CBC4", VA = "0xE2CBC4")]
		public MoveObject()
		{
		}
	}
	[Token(Token = "0x2000425")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Moves a Game Object towards a Target. Optionally sends an event when successful. The Target can be specified as a Game Object or a world Position. If you specify both, then the Position is used as a local offset from the Object's Position.")]
	public class MoveTowards : FsmStateAction
	{
		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to Move")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A target GameObject to move towards. Or use a world Target Position below.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A world position to move towards, if no Target Object is set. Otherwise used as a local offset from the Target Object.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore any height difference in the target.")]
		public FsmBool ignoreVertical;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 20f)]
		[Tooltip("The maximum movement speed (Unity units per second). HINT: You can make this a variable to change it over time.")]
		public FsmFloat maxSpeed;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Distance at which the move is considered finished, and the Finish Event is sent.")]
		[HasFloatSlider(0f, 5f)]
		public FsmFloat finishDistance;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send when the Finish Distance is reached. Use this to transition to the next state.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject go;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject goTarget;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 targetPos;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 targetPosWithVertical;

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xE2CBCC", Offset = "0xE2CBCC", VA = "0xE2CBCC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xE2CC3C", Offset = "0xE2CC3C", VA = "0xE2CC3C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xE2CC40", Offset = "0xE2CC40", VA = "0xE2CC40")]
		private void DoMoveTowards()
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xE2CEAC", Offset = "0xE2CEAC", VA = "0xE2CEAC")]
		public bool UpdateTargetPos()
		{
			return default(bool);
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xE2D0A0", Offset = "0xE2D0A0", VA = "0xE2D0A0")]
		public Vector3 GetTargetPos()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xE2D0AC", Offset = "0xE2D0AC", VA = "0xE2D0AC")]
		public Vector3 GetTargetPosWithVertical()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xE2D0B8", Offset = "0xE2D0B8", VA = "0xE2D0B8")]
		public MoveTowards()
		{
		}
	}
	[Token(Token = "0x2000426")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Rotates a Game Object around each Axis. Use a Vector3 Variable and/or XYZ components. To leave any axis unchanged, set variable to 'None'.")]
	public class Rotate : FsmStateAction
	{
		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The game object to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("A rotation vector specifying rotation around x, y, and z axis. NOTE: You can override individual axis below.")]
		public FsmVector3 vector;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Rotation around x axis.")]
		public FsmFloat xAngle;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Rotation around y axis.")]
		public FsmFloat yAngle;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Rotation around z axis.")]
		public FsmFloat zAngle;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Rotate in local or world space.")]
		public Space space;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Rotation is specified in degrees per second. In other words, the amount to rotate in over one second. This allows rotations to be frame rate independent. It is the same as multiplying the rotation by Time.deltaTime.")]
		public bool perSecond;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		[Tooltip("Perform the rotation in LateUpdate. This is useful if you want to override the rotation of objects that are animated or otherwise rotated in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		[Tooltip("Perform the rotation in FixedUpdate. This is useful when working with rigid bodies and physics.")]
		public bool fixedUpdate;

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xE2D0C0", Offset = "0xE2D0C0", VA = "0xE2D0C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xE2D1C4", Offset = "0xE2D1C4", VA = "0xE2D1C4", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xE2D214", Offset = "0xE2D214", VA = "0xE2D214", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xE2D438", Offset = "0xE2D438", VA = "0xE2D438", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xE2D450", Offset = "0xE2D450", VA = "0xE2D450", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xE2D488", Offset = "0xE2D488", VA = "0xE2D488", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xE2D254", Offset = "0xE2D254", VA = "0xE2D254")]
		private void DoRotate()
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xE2D4C0", Offset = "0xE2D4C0", VA = "0xE2D4C0")]
		public Rotate()
		{
		}
	}
	[Token(Token = "0x2000427")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Sets the Position of a Game Object. To leave any axis unchanged, set variable to 'None'.")]
	public class SetPosition : ComponentAction<Transform>
	{
		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object to position.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Use a stored Vector3 position, and/or set individual axis below.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Set the X position.")]
		public FsmFloat x;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set the Y position.")]
		public FsmFloat y;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Set the Z position.")]
		public FsmFloat z;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Set position in local (relative to parent) or world space.")]
		public Space space;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Perform this action every frame. Useful if position is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xE2D4C8", Offset = "0xE2D4C8", VA = "0xE2D4C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xE2D5C8", Offset = "0xE2D5C8", VA = "0xE2D5C8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xE2D5F8", Offset = "0xE2D5F8", VA = "0xE2D5F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xE2D7E0", Offset = "0xE2D7E0", VA = "0xE2D7E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xE2D7F0", Offset = "0xE2D7F0", VA = "0xE2D7F0", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xE2D630", Offset = "0xE2D630", VA = "0xE2D630")]
		private void DoSetPosition()
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xE2D828", Offset = "0xE2D828", VA = "0xE2D828")]
		public SetPosition()
		{
		}
	}
	[Token(Token = "0x2000428")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Sets the 2d Position of a Game Object. To leave any axis unchanged, set variable to 'None'.")]
	public class SetPosition2d : FsmStateAction
	{
		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to position.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Use a stored Vector2 position, and/or set individual axis below.")]
		public FsmVector2 vector;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set the X position.")]
		public FsmFloat x;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the Y position.")]
		public FsmFloat y;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Use local or world space.")]
		public Space space;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xE2D870", Offset = "0xE2D870", VA = "0xE2D870", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xE2D940", Offset = "0xE2D940", VA = "0xE2D940", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xE2D970", Offset = "0xE2D970", VA = "0xE2D970", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xE2DB28", Offset = "0xE2DB28", VA = "0xE2DB28", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xE2DB38", Offset = "0xE2DB38", VA = "0xE2DB38", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xE2D9A8", Offset = "0xE2D9A8", VA = "0xE2D9A8")]
		private void DoSetPosition()
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xE2DB70", Offset = "0xE2DB70", VA = "0xE2DB70")]
		public SetPosition2d()
		{
		}
	}
	[Token(Token = "0x2000429")]
	[Tooltip("Sets Random Rotation for a Game Object. Uncheck an axis to keep the current rotation around that axis.")]
	[ActionCategory(ActionCategory.Transform)]
	public class SetRandomRotation : FsmStateAction
	{
		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to randomly rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Use X axis.")]
		[RequiredField]
		public FsmBool x;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Use Y axis.")]
		public FsmBool y;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Use Z axis.")]
		public FsmBool z;

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xE2DB78", Offset = "0xE2DB78", VA = "0xE2DB78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xE2DBE4", Offset = "0xE2DBE4", VA = "0xE2DBE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xE2DC00", Offset = "0xE2DC00", VA = "0xE2DC00")]
		private void DoRandomRotation()
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xE2DD68", Offset = "0xE2DD68", VA = "0xE2DD68")]
		public SetRandomRotation()
		{
		}
	}
	[Token(Token = "0x200042A")]
	[Tooltip("Sets the Rotation of a Game Object. To leave any axis unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Transform)]
	public class SetRotation : FsmStateAction
	{
		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Use a stored quaternion, or vector angles below.")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion quaternion;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Use euler angles stored in a Vector3 variable, and/or set each axis below.")]
		[Title("Euler Angles")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Angle around the X axis in degrees.")]
		public FsmFloat xAngle;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Angle around the Y axis in degrees.")]
		public FsmFloat yAngle;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Angle around the Z axis in degrees.")]
		public FsmFloat zAngle;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Use local or world space.")]
		public Space space;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xE2DD70", Offset = "0xE2DD70", VA = "0xE2DD70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xE2DE80", Offset = "0xE2DE80", VA = "0xE2DE80", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xE2DEB0", Offset = "0xE2DEB0", VA = "0xE2DEB0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xE2E104", Offset = "0xE2E104", VA = "0xE2E104", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xE2E114", Offset = "0xE2E114", VA = "0xE2E114", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xE2DEE8", Offset = "0xE2DEE8", VA = "0xE2DEE8")]
		private void DoSetRotation()
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xE2E14C", Offset = "0xE2E14C", VA = "0xE2E14C")]
		public SetRotation()
		{
		}
	}
	[Token(Token = "0x200042B")]
	[Tooltip("Sets the Scale of a Game Object. To leave any axis unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Transform)]
	public class SetScale : FsmStateAction
	{
		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to scale.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Use stored Vector3 value, and/or set each axis below.")]
		public FsmVector3 vector;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Scale along the X axis (1 = normal).")]
		public FsmFloat x;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Scale along the Y axis (1 = normal).")]
		public FsmFloat y;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Scale along the Z axis (1 = normal).")]
		public FsmFloat z;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xE2E154", Offset = "0xE2E154", VA = "0xE2E154", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xE2E250", Offset = "0xE2E250", VA = "0xE2E250", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xE2E280", Offset = "0xE2E280", VA = "0xE2E280", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xE2E440", Offset = "0xE2E440", VA = "0xE2E440", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xE2E450", Offset = "0xE2E450", VA = "0xE2E450", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xE2E2AC", Offset = "0xE2E2AC", VA = "0xE2E2AC")]
		private void DoSetScale()
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xE2E488", Offset = "0xE2E488", VA = "0xE2E488")]
		public SetScale()
		{
		}
	}
	[Token(Token = "0x200042C")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Rotates a GameObject based on a Vector2 input, typically from a PlayerInput action. Use it on a player GameObject for MouseLook type behaviour. It is common to setup the camera as a child of the 'body', so the body rotates left/right while the camera tilts up/down.Minimum and Maximum values can be used to constrain the rotation.")]
	public class SimpleLook : ComponentAction<Transform>
	{
		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Camera is often the child of the GameObject 'body'. If you specify a Camera, it will tilt up down, while the body rotates left/right. If you leave this empty, all rotations will be applied to the main GameObject.")]
		public new FsmGameObject camera;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Vector2 input, typically from a PlayerInput action.")]
		public FsmVector2 vector2Input;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("Sensitivity of movement in X direction (rotate left/right).")]
		public FsmFloat sensitivityX;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("Sensitivity of movement in Y direction (tilt up/down).")]
		public FsmFloat sensitivityY;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Clamp rotation around X axis. Set to None for no clamping.")]
		[HasFloatSlider(-360f, 360f)]
		public FsmFloat minimumX;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around X axis. Set to None for no clamping.")]
		public FsmFloat maximumX;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around Y axis. Set to None for no clamping.")]
		public FsmFloat minimumY;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Clamp rotation around Y axis. Set to None for no clamping.")]
		[HasFloatSlider(-360f, 360f)]
		public FsmFloat maximumY;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float rotationX;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float rotationY;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform cachedCameraTransform;

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xE2E490", Offset = "0xE2E490", VA = "0xE2E490", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xE2E614", Offset = "0xE2E614", VA = "0xE2E614", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xE2E9F0", Offset = "0xE2E9F0", VA = "0xE2E9F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xE2E888", Offset = "0xE2E888", VA = "0xE2E888")]
		private void DoLookRotate()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xE2EA64", Offset = "0xE2EA64", VA = "0xE2EA64")]
		private float GetXRotation()
		{
			return default(float);
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xE2E9F4", Offset = "0xE2E9F4", VA = "0xE2E9F4")]
		private float GetYRotation(float invert = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xE2EAC4", Offset = "0xE2EAC4", VA = "0xE2EAC4")]
		private static float ClampAngle(float angle, FsmFloat min, FsmFloat max)
		{
			return default(float);
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xE2EB84", Offset = "0xE2EB84", VA = "0xE2EB84")]
		public SimpleLook()
		{
		}
	}
	[Token(Token = "0x200042D")]
	[Tooltip("Action version of Unity's Smooth Follow script.")]
	[ActionCategory(ActionCategory.Transform)]
	public class SmoothFollowAction : FsmStateAction
	{
		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The game object to control. E.g. The camera.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The GameObject to follow.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The distance in the x-z plane to the target.")]
		public FsmFloat distance;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The height we want the camera to be above the target")]
		[RequiredField]
		public FsmFloat height;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("How much to dampen height movement.")]
		[RequiredField]
		public FsmFloat heightDamping;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("How much to dampen rotation changes.")]
		public FsmFloat rotationDamping;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject cachedObject;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform myTransform;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject cachedTarget;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform targetTransform;

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xE2EBCC", Offset = "0xE2EBCC", VA = "0xE2EBCC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xE2EC64", Offset = "0xE2EC64", VA = "0xE2EC64", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xE2EC84", Offset = "0xE2EC84", VA = "0xE2EC84", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xE2F0F8", Offset = "0xE2F0F8", VA = "0xE2F0F8")]
		public SmoothFollowAction()
		{
		}
	}
	[Token(Token = "0x200042E")]
	[Tooltip("Smoothly Rotates a Game Object so its forward vector points at a Target. The target can be defined as a Game Object or a world Position. If you specify both, then the position will be used as a local offset from the object's position.")]
	[ActionCategory(ActionCategory.Transform)]
	public class SmoothLookAt : FsmStateAction
	{
		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to rotate to face a target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A target GameObject.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A world position, or local offset if a Target Object is defined.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Used to keep the game object generally upright. If left undefined the world y axis is used.")]
		public FsmVector3 upVector;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Force the game object to remain vertical. Useful for characters.")]
		public FsmBool keepVertical;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("How fast the look at moves.")]
		[HasFloatSlider(0.5f, 15f)]
		public FsmFloat speed;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Draw a line in the Scene View to the look at position.")]
		public FsmBool debug;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("If the angle to the target is less than this, send the Finish Event below. Measured in degrees.")]
		public FsmFloat finishTolerance;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send if the angle to target is less than the Finish Tolerance.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject previousGo;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion lastRotation;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion desiredRotation;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 lookAtPos;

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xE2F100", Offset = "0xE2F100", VA = "0xE2F100", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xE2F244", Offset = "0xE2F244", VA = "0xE2F244", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xE2F264", Offset = "0xE2F264", VA = "0xE2F264", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xE2F270", Offset = "0xE2F270", VA = "0xE2F270", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xE2F274", Offset = "0xE2F274", VA = "0xE2F274")]
		private void DoSmoothLookAt()
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xE2F8A0", Offset = "0xE2F8A0", VA = "0xE2F8A0")]
		public SmoothLookAt()
		{
		}
	}
	[Token(Token = "0x200042F")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Smoothly Rotates a Game Object so its forward vector points in the specified Direction. Lets you fire an event when minmagnitude is reached")]
	public class SmoothLookAtDirection : FsmStateAction
	{
		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The direction to smoothly rotate towards.")]
		[RequiredField]
		public FsmVector3 targetDirection;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Only rotate if Target Direction Vector length is greater than this threshold.")]
		public FsmFloat minMagnitude;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Keep this vector pointing up as the GameObject rotates.")]
		public FsmVector3 upVector;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Eliminate any tilt up/down as the GameObject rotates.")]
		public FsmBool keepVertical;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("How quickly to rotate.")]
		[HasFloatSlider(0.5f, 15f)]
		public FsmFloat speed;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Perform in LateUpdate. This can help eliminate jitters in some situations.")]
		public bool lateUpdate;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if the direction difference is less than Min Magnitude.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Stop running the action if the direction difference is less than Min Magnitude.")]
		public FsmBool finish;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject previousGo;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion lastRotation;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion desiredRotation;

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xE2F8A8", Offset = "0xE2F8A8", VA = "0xE2F8A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xE2F9C8", Offset = "0xE2F9C8", VA = "0xE2F9C8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xE2F9E8", Offset = "0xE2F9E8", VA = "0xE2F9E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xE2F9F4", Offset = "0xE2F9F4", VA = "0xE2F9F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xE2FD14", Offset = "0xE2FD14", VA = "0xE2FD14", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xE2FA04", Offset = "0xE2FA04", VA = "0xE2FA04")]
		private void DoSmoothLookAtDirection()
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xE2FD24", Offset = "0xE2FD24", VA = "0xE2FD24")]
		public SmoothLookAtDirection()
		{
		}
	}
	[Token(Token = "0x2000430")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Transforms a Direction from a Game Object's local space to world space.")]
	public class TransformDirection : FsmStateAction
	{
		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object that defines local space.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A direction vector in the object's local space.")]
		[RequiredField]
		public FsmVector3 localDirection;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the transformed direction vector, now in world space, in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 storeResult;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xE2FD2C", Offset = "0xE2FD2C", VA = "0xE2FD2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xE2FD6C", Offset = "0xE2FD6C", VA = "0xE2FD6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xE2FE64", Offset = "0xE2FE64", VA = "0xE2FE64", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xE2FD98", Offset = "0xE2FD98", VA = "0xE2FD98")]
		private void DoTransformDirection()
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xE2FE68", Offset = "0xE2FE68", VA = "0xE2FE68")]
		public TransformDirection()
		{
		}
	}
	[Token(Token = "0x2000431")]
	[Tooltip("Transforms a Position from a Game Object's local space to world space.")]
	[ActionCategory(ActionCategory.Transform)]
	public class TransformPoint : FsmStateAction
	{
		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object that defines local space.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A local position vector.")]
		[RequiredField]
		public FsmVector3 localPosition;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the transformed position, now in world space, in a Vector3 Variable.")]
		public FsmVector3 storeResult;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xE2FE70", Offset = "0xE2FE70", VA = "0xE2FE70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xE2FEB0", Offset = "0xE2FEB0", VA = "0xE2FEB0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xE2FFA8", Offset = "0xE2FFA8", VA = "0xE2FFA8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xE2FEDC", Offset = "0xE2FEDC", VA = "0xE2FEDC")]
		private void DoTransformPoint()
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xE2FFAC", Offset = "0xE2FFAC", VA = "0xE2FFAC")]
		public TransformPoint()
		{
		}
	}
	[Token(Token = "0x2000432")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Translates a Game Object. Use a Vector3 variable and/or XYZ components. To leave any axis unchanged, set variable to 'None'.")]
	public class Translate : FsmStateAction
	{
		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The game object to translate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("A translation vector. NOTE: You can override individual axis below.")]
		[Readonly]
		public FsmVector3 vector;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Translation along x axis.")]
		public FsmFloat x;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Translation along y axis.")]
		public FsmFloat y;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Translation along z axis.")]
		public FsmFloat z;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Translate in local or world space.")]
		public Space space;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Translate over one second")]
		public bool perSecond;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		[Tooltip("Perform the translate in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		[Tooltip("Perform the translate in FixedUpdate. This is useful when working with rigid bodies and physics.")]
		public bool fixedUpdate;

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xE2FFB4", Offset = "0xE2FFB4", VA = "0xE2FFB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xE300B8", Offset = "0xE300B8", VA = "0xE300B8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xE30108", Offset = "0xE30108", VA = "0xE30108", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xE3032C", Offset = "0xE3032C", VA = "0xE3032C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xE30344", Offset = "0xE30344", VA = "0xE30344", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xE3037C", Offset = "0xE3037C", VA = "0xE3037C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xE30148", Offset = "0xE30148", VA = "0xE30148")]
		private void DoTranslate()
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xE303B4", Offset = "0xE303B4", VA = "0xE303B4")]
		public Translate()
		{
		}
	}
	[Token(Token = "0x2000433")]
	[Tooltip("Get the Arc Cosine. You can get the result in degrees, simply check on the RadToDeg conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetACosine : FsmStateAction
	{
		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The value of the cosine")]
		public FsmFloat Value;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		public FsmFloat angle;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xE303BC", Offset = "0xE303BC", VA = "0xE303BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xE30404", Offset = "0xE30404", VA = "0xE30404", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xE30494", Offset = "0xE30494", VA = "0xE30494", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xE30430", Offset = "0xE30430", VA = "0xE30430")]
		private void DoACosine()
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xE30498", Offset = "0xE30498", VA = "0xE30498")]
		public GetACosine()
		{
		}
	}
	[Token(Token = "0x2000434")]
	[ActionCategory(ActionCategory.Trigonometry)]
	[Tooltip("Get the Arc sine. You can get the result in degrees, simply check on the RadToDeg conversion")]
	public class GetASine : FsmStateAction
	{
		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The value of the sine")]
		public FsmFloat Value;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		public FsmFloat angle;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xE304A0", Offset = "0xE304A0", VA = "0xE304A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xE304E8", Offset = "0xE304E8", VA = "0xE304E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xE30578", Offset = "0xE30578", VA = "0xE30578", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xE30514", Offset = "0xE30514", VA = "0xE30514")]
		private void DoASine()
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xE3057C", Offset = "0xE3057C", VA = "0xE3057C")]
		public GetASine()
		{
		}
	}
	[Token(Token = "0x2000435")]
	[Tooltip("Get the Arc Tangent. You can get the result in degrees, simply check on the RadToDeg conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetAtan : FsmStateAction
	{
		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The value of the tan")]
		public FsmFloat Value;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		public FsmFloat angle;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat Every Frame")]
		public bool everyFrame;

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xE30584", Offset = "0xE30584", VA = "0xE30584", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xE305CC", Offset = "0xE305CC", VA = "0xE305CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xE3065C", Offset = "0xE3065C", VA = "0xE3065C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xE305F8", Offset = "0xE305F8", VA = "0xE305F8")]
		private void DoATan()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xE30660", Offset = "0xE30660", VA = "0xE30660")]
		public GetAtan()
		{
		}
	}
	[Token(Token = "0x2000436")]
	[ActionCategory(ActionCategory.Trigonometry)]
	[Tooltip("Get the Arc Tangent 2 as in atan2(y,x). You can get the result in degrees, simply check on the RadToDeg conversion")]
	public class GetAtan2 : FsmStateAction
	{
		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The x value of the tan")]
		public FsmFloat xValue;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The y value of the tan")]
		[RequiredField]
		public FsmFloat yValue;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		public FsmFloat angle;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xE30668", Offset = "0xE30668", VA = "0xE30668", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xE306C0", Offset = "0xE306C0", VA = "0xE306C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xE3076C", Offset = "0xE3076C", VA = "0xE3076C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xE306EC", Offset = "0xE306EC", VA = "0xE306EC")]
		private void DoATan()
		{
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xE30770", Offset = "0xE30770", VA = "0xE30770")]
		public GetAtan2()
		{
		}
	}
	[Token(Token = "0x2000437")]
	[Tooltip("Get the Arc Tangent 2 as in atan2(y,x) from a vector 2. You can get the result in degrees, simply check on the RadToDeg conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetAtan2FromVector2 : FsmStateAction
	{
		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The vector2 of the tan")]
		public FsmVector2 vector2;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		[RequiredField]
		public FsmFloat angle;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xE30778", Offset = "0xE30778", VA = "0xE30778", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xE307C0", Offset = "0xE307C0", VA = "0xE307C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xE3084C", Offset = "0xE3084C", VA = "0xE3084C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xE307EC", Offset = "0xE307EC", VA = "0xE307EC")]
		private void DoATan()
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xE30850", Offset = "0xE30850", VA = "0xE30850")]
		public GetAtan2FromVector2()
		{
		}
	}
	[Token(Token = "0x2000438")]
	[ActionCategory(ActionCategory.Trigonometry)]
	[Tooltip("Get the Arc Tangent 2 as in atan2(y,x) from a vector 3, where you pick which is x and y from the vector 3. You can get the result in degrees, simply check on the RadToDeg conversion")]
	public class GetAtan2FromVector3 : FsmStateAction
	{
		[Token(Token = "0x2000439")]
		public enum aTan2EnumAxis
		{
			[Token(Token = "0x40013EF")]
			x,
			[Token(Token = "0x40013F0")]
			y,
			[Token(Token = "0x40013F1")]
			z
		}

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The vector3 definition of the tan")]
		public FsmVector3 vector3;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("which axis in the vector3 to use as the x value of the tan")]
		public aTan2EnumAxis xAxis;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("which axis in the vector3 to use as the y value of the tan")]
		[RequiredField]
		public aTan2EnumAxis yAxis;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		[UIHint(UIHint.Variable)]
		public FsmFloat angle;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xE30858", Offset = "0xE30858", VA = "0xE30858", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xE308AC", Offset = "0xE308AC", VA = "0xE308AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xE309D0", Offset = "0xE309D0", VA = "0xE309D0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xE308D8", Offset = "0xE308D8", VA = "0xE308D8")]
		private void DoATan()
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xE309D4", Offset = "0xE309D4", VA = "0xE309D4")]
		public GetAtan2FromVector3()
		{
		}
	}
	[Token(Token = "0x200043A")]
	[Tooltip("Get the Cosine.")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetCosine : FsmStateAction
	{
		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The angle. Note: Check Deg To Rad if the angle is expressed in degrees.")]
		public FsmFloat angle;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check if the angle is expressed in degrees.")]
		public FsmBool DegToRad;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The angle cosine.")]
		public FsmFloat result;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xE309DC", Offset = "0xE309DC", VA = "0xE309DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xE30A24", Offset = "0xE30A24", VA = "0xE30A24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xE30AB4", Offset = "0xE30AB4", VA = "0xE30AB4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xE30A50", Offset = "0xE30A50", VA = "0xE30A50")]
		private void DoCosine()
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xE30AB8", Offset = "0xE30AB8", VA = "0xE30AB8")]
		public GetCosine()
		{
		}
	}
	[Token(Token = "0x200043B")]
	[Tooltip("Get the sine. You can use degrees, simply check on the DegToRad conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetSine : FsmStateAction
	{
		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The angle. Note: You can use degrees, simply check DegtoRad if the angle is expressed in degrees.")]
		public FsmFloat angle;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check on if the angle is expressed in degrees.")]
		public FsmBool DegToRad;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The angle tan")]
		public FsmFloat result;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xE30AC0", Offset = "0xE30AC0", VA = "0xE30AC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xE30B08", Offset = "0xE30B08", VA = "0xE30B08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xE30B98", Offset = "0xE30B98", VA = "0xE30B98", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xE30B34", Offset = "0xE30B34", VA = "0xE30B34")]
		private void DoSine()
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xE30B9C", Offset = "0xE30B9C", VA = "0xE30B9C")]
		public GetSine()
		{
		}
	}
	[Token(Token = "0x200043C")]
	[Tooltip("Get the Tangent. You can use degrees, simply check on the DegToRad conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetTan : FsmStateAction
	{
		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The angle. Note: You can use degrees, simply check DegtoRad if the angle is expressed in degrees.")]
		[RequiredField]
		public FsmFloat angle;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check on if the angle is expressed in degrees.")]
		public FsmBool DegToRad;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The angle tan")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat result;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xE30BA4", Offset = "0xE30BA4", VA = "0xE30BA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xE30BEC", Offset = "0xE30BEC", VA = "0xE30BEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xE30C7C", Offset = "0xE30C7C", VA = "0xE30C7C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xE30C18", Offset = "0xE30C18", VA = "0xE30C18")]
		private void DoTan()
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xE30C80", Offset = "0xE30C80", VA = "0xE30C80")]
		public GetTan()
		{
		}
	}
	[Token(Token = "0x200043D")]
	[ActionCategory(ActionCategory.Tween)]
	public abstract class TweenActionBase : BaseUpdateAction
	{
		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Easing")]
		[Tooltip("Delay before starting the tween.")]
		public FsmFloat startDelay;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of easing to apply.")]
		[ObjectType(typeof(EasingFunction.Ease))]
		[PreviewField("DrawPreview")]
		public FsmEnum easeType;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Custom tween curve. Note: Typically you would use the 0-1 range.")]
		[HideIf("HideCustomCurve")]
		public FsmAnimationCurve customCurve;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Length of tween in seconds.")]
		public FsmFloat time;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Ignore any time scaling.")]
		public FsmBool realTime;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Looping options.")]
		public HutongGames.PlayMaker.TweenEnums.LoopType loopType;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send when tween is finished.")]
		public FsmEvent finishEvent;

		[NonSerialized]
		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float normalizedTime;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected bool tweenStarted;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		protected bool tweenFinished;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float currentTime;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected bool playPreview;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private EasingFunction.Ease cachedEase;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private EasingFunction.Function func;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool showPreviewCurve;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool reverse;

		[Token(Token = "0x170000C2")]
		public EasingFunction.Function easingFunction
		{
			[Token(Token = "0x60013BD")]
			[Address(RVA = "0xE30C88", Offset = "0xE30C88", VA = "0xE30C88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xE30D3C", Offset = "0xE30D3C", VA = "0xE30D3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xE30DC0", Offset = "0xE30DC0", VA = "0xE30DC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xE30DDC", Offset = "0xE30DDC", VA = "0xE30DDC", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60013C1")]
		protected abstract void DoTween();

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xE3100C", Offset = "0xE3100C", VA = "0xE3100C")]
		protected TweenActionBase()
		{
		}
	}
	[Token(Token = "0x200043E")]
	public abstract class TweenComponentBase<T> : TweenActionBase where T : Component
	{
		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("The Game Object to tween.")]
		[UIHint(UIHint.Variable)]
		[DisplayOrder(0)]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GameObject cachedGameObject;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T cachedComponent;

		[Token(Token = "0x60013C3")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013C4")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013C5")]
		protected bool UpdateCache(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C6")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x60013C7")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60013C8")]
		protected TweenComponentBase()
		{
		}
	}
	[Token(Token = "0x200043F")]
	public static class TweenHelpers
	{
		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xE31014", Offset = "0xE31014", VA = "0xE31014")]
		public static Quaternion GetTargetRotation(RotationOptions option, Transform owner, Transform target, Vector3 rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xE31334", Offset = "0xE31334", VA = "0xE31334")]
		public static bool GetTargetRotation(RotationOptions option, Transform owner, FsmVector3 rotation, FsmGameObject target, out Quaternion targetRotation)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xE31498", Offset = "0xE31498", VA = "0xE31498")]
		private static bool CanEditTargetRotation(RotationOptions option, NamedVariable rotation, FsmGameObject target)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xE315A4", Offset = "0xE315A4", VA = "0xE315A4")]
		public static Vector3 GetTargetScale(ScaleOptions option, Transform owner, Transform target, Vector3 scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xE31730", Offset = "0xE31730", VA = "0xE31730")]
		public static bool GetTargetPosition(PositionOptions option, Transform owner, FsmVector3 position, FsmGameObject target, out Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xE318DC", Offset = "0xE318DC", VA = "0xE318DC")]
		private static bool IsValidTargetPosition(PositionOptions option, NamedVariable position, FsmGameObject target)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xE31C68", Offset = "0xE31C68", VA = "0xE31C68")]
		public static bool CanEditTargetPosition(PositionOptions option, NamedVariable position, FsmGameObject target)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xE319E8", Offset = "0xE319E8", VA = "0xE319E8")]
		public static Vector3 GetTargetPosition(PositionOptions option, Transform owner, Transform target, Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xE31D74", Offset = "0xE31D74", VA = "0xE31D74")]
		public static Vector3 GetUiTargetPosition(UiPositionOptions option, RectTransform owner, Transform target, Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xE3210C", Offset = "0xE3210C", VA = "0xE3210C")]
		public static Rect GetWorldRect(RectTransform rectTransform)
		{
			return default(Rect);
		}
	}
	[Token(Token = "0x2000440")]
	[ActionCategory(ActionCategory.Tween)]
	public abstract class TweenPropertyBase<T> : TweenActionBase where T : NamedVariable
	{
		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("Setup where to tween from.")]
		[Title("From")]
		public TargetValueOptions fromOption;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("Tween from this value.")]
		[HideIf("HideFromValue")]
		public T fromValue;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("Setup where to tween to.")]
		[Title("To")]
		public TargetValueOptions toOption;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[HideIf("HideToValue")]
		[Tooltip("Tween to this value.")]
		public T toValue;

		[Token(Token = "0x170000C3")]
		public object StartValue
		{
			[Token(Token = "0x60013D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60013D5")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public object EndValue
		{
			[Token(Token = "0x60013D6")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60013D7")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x60013D3")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013D8")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013D9")]
		protected virtual void InitTargets()
		{
		}

		[Token(Token = "0x60013DA")]
		protected virtual object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x60013DB")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x60013DC")]
		protected TweenPropertyBase()
		{
		}
	}
	[Token(Token = "0x2000441")]
	[ActionCategory(ActionCategory.Tween)]
	public abstract class TweenVariableBase<T> : TweenPropertyBase<T> where T : NamedVariable
	{
		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("The variable to tween.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public T variable;

		[Token(Token = "0x60013DD")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013DE")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013DF")]
		protected override void InitTargets()
		{
		}

		[Token(Token = "0x60013E0")]
		protected TweenVariableBase()
		{
		}
	}
	[Token(Token = "0x2000442")]
	[Tooltip("Tween common AudioSource properties.")]
	[ActionTarget(typeof(AudioSource), "", false)]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenAudio : TweenComponentBase<AudioSource>
	{
		[Token(Token = "0x2000443")]
		public enum AudioProperty
		{
			[Token(Token = "0x400141F")]
			Volume,
			[Token(Token = "0x4001420")]
			Pitch
		}

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Audio property to tween.")]
		public AudioProperty property;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("Tween To/From values set below.")]
		public TweenDirection tweenDirection;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Value for the selected property.")]
		public FsmFloat value;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioSource audio;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float fromFloat;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float toFloat;

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xE3246C", Offset = "0xE3246C", VA = "0xE3246C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xE324C8", Offset = "0xE324C8", VA = "0xE324C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xE32620", Offset = "0xE32620", VA = "0xE32620", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xE32718", Offset = "0xE32718", VA = "0xE32718")]
		public TweenAudio()
		{
		}
	}
	[Token(Token = "0x2000444")]
	[ActionCategory(ActionCategory.Tween)]
	[ActionTarget(typeof(Camera), "", false)]
	[Tooltip("Tween common Camera properties.")]
	public class TweenCamera : TweenComponentBase<Camera>
	{
		[Token(Token = "0x2000445")]
		public enum CameraProperty
		{
			[Token(Token = "0x400142E")]
			Aspect,
			[Token(Token = "0x400142F")]
			BackgroundColor,
			[Token(Token = "0x4001430")]
			FieldOfView,
			[Token(Token = "0x4001431")]
			OrthoSize,
			[Token(Token = "0x4001432")]
			PixelRect,
			[Token(Token = "0x4001433")]
			ViewportRect
		}

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Camera property to tween.")]
		public CameraProperty property;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("Tween To/From values set below.")]
		public TweenDirection tweenDirection;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Context sensitive parameter. Depends on Property.")]
		public FsmColor targetColor;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Context sensitive parameter. Depends on Property.")]
		public FsmFloat targetFloat;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Context sensitive parameter. Depends on Property.")]
		public FsmRect targetRect;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Camera camera;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Color fromColor;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Color toColor;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float fromFloat;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float toFloat;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Rect fromRect;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Rect toRect;

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xE32760", Offset = "0xE32760", VA = "0xE32760", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xE327D4", Offset = "0xE327D4", VA = "0xE327D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xE32A9C", Offset = "0xE32A9C", VA = "0xE32A9C", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xE32D24", Offset = "0xE32D24", VA = "0xE32D24")]
		public TweenCamera()
		{
		}
	}
	[Token(Token = "0x2000446")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween the color of a GameObject or a Color variable. The GameObject needs a Material, Sprite, Image, Text, or Light component.")]
	public class TweenColor : TweenPropertyBase<FsmColor>
	{
		[Token(Token = "0x2000447")]
		public enum Target
		{
			[Token(Token = "0x4001444")]
			GameObject,
			[Token(Token = "0x4001445")]
			Variable
		}

		[Token(Token = "0x2000448")]
		public enum TargetType
		{
			[Token(Token = "0x4001447")]
			None,
			[Token(Token = "0x4001448")]
			Material,
			[Token(Token = "0x4001449")]
			Sprite,
			[Token(Token = "0x400144A")]
			Image,
			[Token(Token = "0x400144B")]
			Text,
			[Token(Token = "0x400144C")]
			Light
		}

		[Token(Token = "0x4001434")]
		private const string SupportedComponents = "MeshRenderer, Sprite, Image, Text, Light.";

		[Token(Token = "0x4001435")]
		private const string OffsetTooltip = "How to apply the Offset Color. Similar to Photoshop Blend modes. \nNote: use the color alpha to fade the blend.";

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("What to tween.")]
		public Target target;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("A GameObject with a Material, Sprite, Image, Text, or Light component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The variable to tween.")]
		public FsmColor variable;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("How to apply the Offset Color. Similar to Photoshop Blend modes. \nNote: use the color alpha to fade the blend.")]
		public ColorBlendMode fromOffsetBlendMode;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("How to apply the Offset Color. Similar to Photoshop Blend modes. \nNote: use the color alpha to fade the blend.")]
		public ColorBlendMode toOffsetBlendMode;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private GameObject cachedGameObject;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Component cachedComponent;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private TargetType targetType;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Material material;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private SpriteRenderer spriteRenderer;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Text text;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Image image;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Light light;

		[Token(Token = "0x170000C5")]
		public TargetType type
		{
			[Token(Token = "0x60013E9")]
			[Address(RVA = "0xE32D6C", Offset = "0xE32D6C", VA = "0xE32D6C")]
			get
			{
				return default(TargetType);
			}
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xE32D74", Offset = "0xE32D74", VA = "0xE32D74", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xE32DF0", Offset = "0xE32DF0", VA = "0xE32DF0")]
		private void UpdateCache(GameObject go)
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xE33028", Offset = "0xE33028", VA = "0xE33028")]
		private void CheckCache()
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xE330C0", Offset = "0xE330C0", VA = "0xE330C0")]
		private void Init()
		{
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xE33454", Offset = "0xE33454", VA = "0xE33454", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xE335DC", Offset = "0xE335DC", VA = "0xE335DC", Slot = "64")]
		protected override void InitTargets()
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xE337E4", Offset = "0xE337E4", VA = "0xE337E4")]
		private Color GetTargetColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xE338E4", Offset = "0xE338E4", VA = "0xE338E4")]
		private void SetTargetColor(Color color)
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xE334C8", Offset = "0xE334C8", VA = "0xE334C8")]
		private void InitOffsets()
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xE339D4", Offset = "0xE339D4", VA = "0xE339D4", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xE339DC", Offset = "0xE339DC", VA = "0xE339DC", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xE33B10", Offset = "0xE33B10", VA = "0xE33B10")]
		public TweenColor()
		{
		}
	}
	[Token(Token = "0x2000449")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Fades a GameObject with a Material, Sprite, Image, Text, Light, AudioSource, or CanvasGroup component.\n\nNote: The Material Shader must support transparency. For example, in URP set the Surface Type to Transparent.\n\nTip: When using the Standard shader, set Rendering Mode to Fade for best fading effect.")]
	public class TweenFade : TweenActionBase
	{
		[Token(Token = "0x200044A")]
		public enum TargetType
		{
			[Token(Token = "0x400145E")]
			None,
			[Token(Token = "0x400145F")]
			Material,
			[Token(Token = "0x4001460")]
			Sprite,
			[Token(Token = "0x4001461")]
			Image,
			[Token(Token = "0x4001462")]
			Text,
			[Token(Token = "0x4001463")]
			Light,
			[Token(Token = "0x4001464")]
			AudioSource,
			[Token(Token = "0x4001465")]
			CanvasGroup
		}

		[Token(Token = "0x400144D")]
		private const string SupportedComponents = "MeshRenderer, Sprite, Image, Text, Light, AudioSource, or CanvasGroup component.";

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("A GameObject with a MeshRenderer, Sprite, Image, Text, Light, AudioSource, or CanvasGroup component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Fade To or From value.")]
		public TweenDirection tweenDirection;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Value to fade to. E.g., alpha if fading an image, volume if fading audio...")]
		public FsmFloat value;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Component cachedComponent;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private TargetType targetType;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Renderer renderer;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SpriteRenderer spriteRenderer;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Text text;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Image image;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Light light;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private AudioSource audioSource;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float startValue;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float endValue;

		[Token(Token = "0x170000C6")]
		public TargetType type
		{
			[Token(Token = "0x60013F6")]
			[Address(RVA = "0xE33B60", Offset = "0xE33B60", VA = "0xE33B60")]
			get
			{
				return default(TargetType);
			}
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xE33B68", Offset = "0xE33B68", VA = "0xE33B68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xE33BBC", Offset = "0xE33BBC", VA = "0xE33BBC")]
		private void UpdateCache(GameObject go)
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xE33F2C", Offset = "0xE33F2C", VA = "0xE33F2C")]
		private void FindComponent(params Type[] components)
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xE3400C", Offset = "0xE3400C", VA = "0xE3400C")]
		private void CheckCache()
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xE340A4", Offset = "0xE340A4", VA = "0xE340A4")]
		private void InitTarget()
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xE3456C", Offset = "0xE3456C", VA = "0xE3456C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xE34654", Offset = "0xE34654", VA = "0xE34654")]
		private float GetTargetFade()
		{
			return default(float);
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xE34760", Offset = "0xE34760", VA = "0xE34760")]
		private void SetTargetFade(float fade)
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xE3493C", Offset = "0xE3493C", VA = "0xE3493C", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xE349AC", Offset = "0xE349AC", VA = "0xE349AC")]
		public TweenFade()
		{
		}
	}
	[Token(Token = "0x200044B")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween a float variable using a custom easing function.")]
	public class TweenFloat : TweenVariableBase<FsmFloat>
	{
		[Token(Token = "0x6001401")]
		[Address(RVA = "0xE349B4", Offset = "0xE349B4", VA = "0xE349B4", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xE34A74", Offset = "0xE34A74", VA = "0xE34A74", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xE34B78", Offset = "0xE34B78", VA = "0xE34B78")]
		public TweenFloat()
		{
		}
	}
	[Token(Token = "0x200044C")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween an integer variable using a custom easing function. NOTE: Tweening is performed on float values and then rounded to the integer value.")]
	public class TweenInt : TweenVariableBase<FsmInt>
	{
		[Token(Token = "0x6001404")]
		[Address(RVA = "0xE34BC0", Offset = "0xE34BC0", VA = "0xE34BC0", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xE34C80", Offset = "0xE34C80", VA = "0xE34C80", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xE34DA4", Offset = "0xE34DA4", VA = "0xE34DA4")]
		public TweenInt()
		{
		}
	}
	[Token(Token = "0x200044D")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween a GameObject's position. Note: This action assumes that GameObject targets do not change during the tween.")]
	public class TweenPosition : TweenComponentBase<Transform>
	{
		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Title("Options")]
		[ActionSection("From")]
		[Tooltip("Setup where to tween from.")]
		public PositionOptions fromOption;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Optionally use a GameObject as the from position.")]
		public FsmGameObject fromTarget;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Position to tween from.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Title("Options")]
		[Tooltip("Setup where to tween from.")]
		[ActionSection("To")]
		public PositionOptions toOption;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Optionally use a GameObject as the to position.")]
		public FsmGameObject toTarget;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Position to tween to.")]
		public FsmVector3 toPosition;

		[NonSerialized]
		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform transform;

		[NonSerialized]
		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform fromTransform;

		[NonSerialized]
		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform toTransform;

		[Token(Token = "0x170000C7")]
		public Vector3 StartPosition
		{
			[Token(Token = "0x6001407")]
			[Address(RVA = "0xE34DEC", Offset = "0xE34DEC", VA = "0xE34DEC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001408")]
			[Address(RVA = "0xE34DFC", Offset = "0xE34DFC", VA = "0xE34DFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public Vector3 EndPosition
		{
			[Token(Token = "0x6001409")]
			[Address(RVA = "0xE34E0C", Offset = "0xE34E0C", VA = "0xE34E0C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600140A")]
			[Address(RVA = "0xE34E1C", Offset = "0xE34E1C", VA = "0xE34E1C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xE34E2C", Offset = "0xE34E2C", VA = "0xE34E2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xE34EC0", Offset = "0xE34EC0", VA = "0xE34EC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xE3504C", Offset = "0xE3504C", VA = "0xE3504C")]
		private void InitStartPosition()
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xE350A4", Offset = "0xE350A4", VA = "0xE350A4")]
		private void InitEndPosition()
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xE35100", Offset = "0xE35100", VA = "0xE35100", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xE351B0", Offset = "0xE351B0", VA = "0xE351B0")]
		public TweenPosition()
		{
		}
	}
	[Token(Token = "0x200044E")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Punches a GameObject's position, rotation, or scale\u00a0and springs back to starting state")]
	public class TweenPunch : TweenComponentBase<Transform>
	{
		[Token(Token = "0x200044F")]
		public enum PunchType
		{
			[Token(Token = "0x400147B")]
			Position,
			[Token(Token = "0x400147C")]
			Rotation,
			[Token(Token = "0x400147D")]
			Scale
		}

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Punch position, rotation, or scale.")]
		public PunchType punchType;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Punch magnitude.")]
		public FsmVector3 value;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform transform;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RectTransform rectTransform;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 startVector3;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Vector3 endVector3;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Quaternion startRotation;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Quaternion midRotation;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion endRotation;

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xE351F8", Offset = "0xE351F8", VA = "0xE351F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xE35254", Offset = "0xE35254", VA = "0xE35254", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xE35640", Offset = "0xE35640", VA = "0xE35640", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xE35968", Offset = "0xE35968", VA = "0xE35968")]
		public TweenPunch()
		{
		}
	}
	[Token(Token = "0x2000450")]
	[Tooltip("Tween a Quaternion variable using a custom easing function.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenQuaternion : TweenVariableBase<FsmQuaternion>
	{
		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Type of interpolation. Linear is faster but looks worse if the rotations are far apart.")]
		[DisplayOrder(1)]
		public RotationInterpolation interpolation;

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xE359B0", Offset = "0xE359B0", VA = "0xE359B0", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xE35AF8", Offset = "0xE35AF8", VA = "0xE35AF8", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xE35BA8", Offset = "0xE35BA8", VA = "0xE35BA8")]
		public TweenQuaternion()
		{
		}
	}
	[Token(Token = "0x2000451")]
	[Tooltip("Tween a Rect variable using a custom easing function.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenRect : TweenVariableBase<FsmRect>
	{
		[Token(Token = "0x6001418")]
		[Address(RVA = "0xE35BF0", Offset = "0xE35BF0", VA = "0xE35BF0", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xE35D78", Offset = "0xE35D78", VA = "0xE35D78", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xE35EEC", Offset = "0xE35EEC", VA = "0xE35EEC")]
		public TweenRect()
		{
		}
	}
	[Token(Token = "0x2000452")]
	[Tooltip("Tween a GameObject's rotation.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenRotation : TweenComponentBase<Transform>
	{
		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Setup where to tween from.")]
		[ActionSection("From")]
		[Title("Options")]
		public RotationOptions fromOptions;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Use this GameObject's rotation.")]
		public FsmGameObject fromTarget;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Tween from this rotation")]
		public FsmVector3 fromRotation;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[ActionSection("To")]
		[Title("Options")]
		[Tooltip("Setup where to tween to.")]
		public RotationOptions toOptions;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Use this GameObject's rotation")]
		public FsmGameObject toTarget;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Tween to this rotation.")]
		public FsmVector3 toRotation;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform transform;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform fromTransform;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform toTransform;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Quaternion midRotation;

		[Token(Token = "0x170000C9")]
		public Quaternion StartRotation
		{
			[Token(Token = "0x600141B")]
			[Address(RVA = "0xE35F34", Offset = "0xE35F34", VA = "0xE35F34")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x600141C")]
			[Address(RVA = "0xE35F48", Offset = "0xE35F48", VA = "0xE35F48")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public Quaternion EndRotation
		{
			[Token(Token = "0x600141D")]
			[Address(RVA = "0xE35F5C", Offset = "0xE35F5C", VA = "0xE35F5C")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x600141E")]
			[Address(RVA = "0xE35F70", Offset = "0xE35F70", VA = "0xE35F70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xE35F84", Offset = "0xE35F84", VA = "0xE35F84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xE36018", Offset = "0xE36018", VA = "0xE36018", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xE3619C", Offset = "0xE3619C", VA = "0xE3619C")]
		private void InitStartRotation()
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xE361F8", Offset = "0xE361F8", VA = "0xE361F8")]
		private void InitEndRotation()
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xE362A4", Offset = "0xE362A4", VA = "0xE362A4")]
		private void UpdateStartRotation()
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xE362B8", Offset = "0xE362B8", VA = "0xE362B8")]
		private void UpdateEndRotation()
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xE362CC", Offset = "0xE362CC", VA = "0xE362CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xE36310", Offset = "0xE36310", VA = "0xE36310", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xE363D8", Offset = "0xE363D8", VA = "0xE363D8")]
		public TweenRotation()
		{
		}
	}
	[Token(Token = "0x2000453")]
	[Tooltip("Tween a GameObject's scale.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenScale : TweenComponentBase<Transform>
	{
		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Setup where to tween from.")]
		[Title("Options")]
		[ActionSection("From")]
		public ScaleOptions fromOptions;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Tween from this Target GameObject.")]
		public FsmGameObject fromTarget;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Tween from this Scale.")]
		public FsmVector3 fromScale;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Title("Options")]
		[ActionSection("To")]
		[Tooltip("Setup where to tween to.")]
		public ScaleOptions toOptions;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Tween to this Target GameObject.")]
		public FsmGameObject toTarget;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Tween to this Scale.")]
		public FsmVector3 toScale;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform transform;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform fromTransform;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform toTransform;

		[Token(Token = "0x170000CB")]
		public Vector3 StartScale
		{
			[Token(Token = "0x6001428")]
			[Address(RVA = "0xE36420", Offset = "0xE36420", VA = "0xE36420")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001429")]
			[Address(RVA = "0xE36430", Offset = "0xE36430", VA = "0xE36430")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public Vector3 EndScale
		{
			[Token(Token = "0x600142A")]
			[Address(RVA = "0xE36440", Offset = "0xE36440", VA = "0xE36440")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600142B")]
			[Address(RVA = "0xE36450", Offset = "0xE36450", VA = "0xE36450")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xE36460", Offset = "0xE36460", VA = "0xE36460", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xE365B8", Offset = "0xE365B8", VA = "0xE365B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xE3673C", Offset = "0xE3673C", VA = "0xE3673C")]
		private void InitStartScale()
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xE367E4", Offset = "0xE367E4", VA = "0xE367E4")]
		private void InitEndScale()
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xE36890", Offset = "0xE36890", VA = "0xE36890")]
		private void UpdateStartScale()
		{
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xE368AC", Offset = "0xE368AC", VA = "0xE368AC")]
		private void UpdateEndScale()
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xE368C8", Offset = "0xE368C8", VA = "0xE368C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xE3690C", Offset = "0xE3690C", VA = "0xE3690C", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xE369A0", Offset = "0xE369A0", VA = "0xE369A0")]
		public TweenScale()
		{
		}
	}
	[Token(Token = "0x2000454")]
	[Tooltip("Tween position of UI GameObjects.")]
	[ActionTarget(typeof(Camera), "", false)]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenUiPosition : TweenComponentBase<RectTransform>
	{
		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[ActionSection("From")]
		[Title("Options")]
		[Tooltip("Setup where to tween from.")]
		public UiPositionOptions fromOption;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Optionally use a GameObject as the from position.")]
		public FsmGameObject fromTarget;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("If a GameObject is specified, use this as an offset. Otherwise this is a world position.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Setup where to tween from.")]
		[Title("Options")]
		[ActionSection("To")]
		public UiPositionOptions toOption;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Optionally use a GameObject as the to position.")]
		public FsmGameObject toTarget;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("If a GameObject is specified, use this as an offset. Otherwise this is a world position.")]
		public FsmVector3 toPosition;

		[NonSerialized]
		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RectTransform transform;

		[NonSerialized]
		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform fromTransform;

		[NonSerialized]
		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform toTransform;

		[Token(Token = "0x170000CD")]
		public Vector3 StartPosition
		{
			[Token(Token = "0x6001435")]
			[Address(RVA = "0xE369E8", Offset = "0xE369E8", VA = "0xE369E8")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001436")]
			[Address(RVA = "0xE369F8", Offset = "0xE369F8", VA = "0xE369F8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public Vector3 EndPosition
		{
			[Token(Token = "0x6001437")]
			[Address(RVA = "0xE36A08", Offset = "0xE36A08", VA = "0xE36A08")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001438")]
			[Address(RVA = "0xE36A18", Offset = "0xE36A18", VA = "0xE36A18")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xE36A28", Offset = "0xE36A28", VA = "0xE36A28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xE36ABC", Offset = "0xE36ABC", VA = "0xE36ABC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xE36C48", Offset = "0xE36C48", VA = "0xE36C48")]
		private void InitStartPosition()
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xE36CA0", Offset = "0xE36CA0", VA = "0xE36CA0")]
		private void InitEndPosition()
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xE36CFC", Offset = "0xE36CFC", VA = "0xE36CFC", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xE36DAC", Offset = "0xE36DAC", VA = "0xE36DAC")]
		public TweenUiPosition()
		{
		}
	}
	[Token(Token = "0x2000455")]
	[Tooltip("Tween the Width and Height of a UI object. NOTE: The size is also influenced by anchors!")]
	[ActionTarget(typeof(RectTransform), "", false)]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenUiSize : TweenComponentBase<RectTransform>
	{
		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Tween To/From Target Size.")]
		public TweenDirection tweenDirection;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Target Size. NOTE: The size is also influenced by anchors!")]
		public FsmVector2 targetSize;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RectTransform rectTransform;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector2 fromSize;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector2 toSize;

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xE36DF4", Offset = "0xE36DF4", VA = "0xE36DF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xE36E50", Offset = "0xE36E50", VA = "0xE36E50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xE36F14", Offset = "0xE36F14", VA = "0xE36F14", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xE36F8C", Offset = "0xE36F8C", VA = "0xE36F8C")]
		public TweenUiSize()
		{
		}
	}
	[Token(Token = "0x2000456")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween a Vector2 variable using a custom easing function.")]
	public class TweenVector2 : TweenVariableBase<FsmVector2>
	{
		[Token(Token = "0x6001443")]
		[Address(RVA = "0xE36FD4", Offset = "0xE36FD4", VA = "0xE36FD4", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xE37094", Offset = "0xE37094", VA = "0xE37094", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xE371B8", Offset = "0xE371B8", VA = "0xE371B8")]
		public TweenVector2()
		{
		}
	}
	[Token(Token = "0x2000457")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween a Vector3 variable using a custom easing function.")]
	public class TweenVector3 : TweenVariableBase<FsmVector3>
	{
		[Token(Token = "0x6001446")]
		[Address(RVA = "0xE37200", Offset = "0xE37200", VA = "0xE37200", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xE372D8", Offset = "0xE372D8", VA = "0xE372D8", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xE37414", Offset = "0xE37414", VA = "0xE37414")]
		public TweenVector3()
		{
		}
	}
	[Token(Token = "0x2000458")]
	[Tooltip("Enable or disable Canvas Raycasting. Optionally reset on state exit")]
	[ActionCategory(ActionCategory.UI)]
	public class UiCanvasEnableRaycast : ComponentAction<PlayMakerCanvasRaycastFilterProxy>
	{
		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to enable or disable Canvas Raycasting on.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Enable/disable raycasting. Uncheck to disable.")]
		public FsmBool enableRaycasting;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private PlayMakerCanvasRaycastFilterProxy raycastFilterProxy;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool originalValue;

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xE3745C", Offset = "0xE3745C", VA = "0xE3745C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xE374A8", Offset = "0xE374A8", VA = "0xE374A8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xE37574", Offset = "0xE37574", VA = "0xE37574", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xE376B4", Offset = "0xE376B4", VA = "0xE376B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xE37628", Offset = "0xE37628", VA = "0xE37628")]
		private void DoAction()
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xE376B8", Offset = "0xE376B8", VA = "0xE376B8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xE37748", Offset = "0xE37748", VA = "0xE37748")]
		public UiCanvasEnableRaycast()
		{
		}
	}
	[Token(Token = "0x2000459")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Force all canvases to update their content.\nCode that relies on up-to-date layout or content can call this method to ensure it before executing code that relies on it.")]
	public class UiCanvasForceUpdateCanvases : FsmStateAction
	{
		[Token(Token = "0x6001450")]
		[Address(RVA = "0xE37790", Offset = "0xE37790", VA = "0xE37790", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xE377B0", Offset = "0xE377B0", VA = "0xE377B0")]
		public UiCanvasForceUpdateCanvases()
		{
		}
	}
	[Token(Token = "0x200045A")]
	[Tooltip("Set Group Alpha.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiCanvasGroupSetAlpha : ComponentAction<CanvasGroup>
	{
		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CanvasGroup))]
		[Tooltip("The GameObject with a UI CanvasGroup component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The alpha of the UI component.")]
		public FsmFloat alpha;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CanvasGroup component;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xE377B8", Offset = "0xE377B8", VA = "0xE377B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xE377F8", Offset = "0xE377F8", VA = "0xE377F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xE37944", Offset = "0xE37944", VA = "0xE37944", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xE378AC", Offset = "0xE378AC", VA = "0xE378AC")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xE37948", Offset = "0xE37948", VA = "0xE37948", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xE379E4", Offset = "0xE379E4", VA = "0xE379E4")]
		public UiCanvasGroupSetAlpha()
		{
		}
	}
	[Token(Token = "0x200045B")]
	[Tooltip("Sets properties of a UI CanvasGroup component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiCanvasGroupSetProperties : ComponentAction<CanvasGroup>
	{
		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CanvasGroup))]
		[Tooltip("The GameObject with the UI CanvasGroup component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Canvas group alpha. Ranges from 0.0 to 1.0.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat alpha;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Is the group interactable (are the elements beneath the group enabled). Leave as None for no effect")]
		public FsmBool interactable;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Does this group block raycasting (allow collision). Leave as None for no effect")]
		public FsmBool blocksRaycasts;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Should the group ignore parent groups? Leave as None for no effect")]
		public FsmBool ignoreParentGroup;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Reset when exiting this state. Leave as None for no effect")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private CanvasGroup component;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float originalAlpha;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool originalInteractable;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool originalBlocksRaycasts;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		private bool originalIgnoreParentGroup;

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xE37A2C", Offset = "0xE37A2C", VA = "0xE37A2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xE37B68", Offset = "0xE37B68", VA = "0xE37B68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xE37E0C", Offset = "0xE37E0C", VA = "0xE37E0C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xE37CAC", Offset = "0xE37CAC", VA = "0xE37CAC")]
		private void DoAction()
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xE37E10", Offset = "0xE37E10", VA = "0xE37E10", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xE37F38", Offset = "0xE37F38", VA = "0xE37F38")]
		public UiCanvasGroupSetProperties()
		{
		}
	}
	[Token(Token = "0x200045C")]
	[Tooltip("Get the ScaleFactor of a CanvasScaler.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiCanvasScalerGetScaleFactor : ComponentAction<CanvasScaler>
	{
		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CanvasScaler))]
		[Tooltip("The GameObject with a UI CanvasScaler component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scaleFactor of the CanvasScaler component.")]
		public FsmFloat scaleFactor;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CanvasScaler component;

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xE37F80", Offset = "0xE37F80", VA = "0xE37F80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xE37FB0", Offset = "0xE37FB0", VA = "0xE37FB0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xE380D4", Offset = "0xE380D4", VA = "0xE380D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xE38050", Offset = "0xE38050", VA = "0xE38050")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xE380D8", Offset = "0xE380D8", VA = "0xE380D8")]
		public UiCanvasScalerGetScaleFactor()
		{
		}
	}
	[Token(Token = "0x200045D")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the ScaleFactor of a CanvasScaler.")]
	public class UiCanvasScalerSetScaleFactor : ComponentAction<CanvasScaler>
	{
		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CanvasScaler))]
		[Tooltip("The GameObject with a UI CanvasScaler component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The scaleFactor of the UI CanvasScaler.")]
		public FsmFloat scaleFactor;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CanvasScaler component;

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xE38120", Offset = "0xE38120", VA = "0xE38120", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xE38150", Offset = "0xE38150", VA = "0xE38150", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xE38288", Offset = "0xE38288", VA = "0xE38288", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xE381F0", Offset = "0xE381F0", VA = "0xE381F0")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xE3828C", Offset = "0xE3828C", VA = "0xE3828C")]
		public UiCanvasScalerSetScaleFactor()
		{
		}
	}
	[Token(Token = "0x200045E")]
	public abstract class EventTriggerActionBase : ComponentAction<EventTrigger>
	{
		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[DisplayOrder(0)]
		[RequiredField]
		[Tooltip("The GameObject with the UI component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[DisplayOrder(1)]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected EventTrigger trigger;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected EventTrigger.Entry entry;

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xE382D4", Offset = "0xE382D4", VA = "0xE382D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xE382FC", Offset = "0xE382FC", VA = "0xE382FC")]
		protected void Init(EventTriggerType eventTriggerType, UnityAction<BaseEventData> call)
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xE3849C", Offset = "0xE3849C", VA = "0xE3849C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xE38570", Offset = "0xE38570", VA = "0xE38570")]
		protected EventTriggerActionBase()
		{
		}
	}
	[Token(Token = "0x200045F")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("The eventType will be executed on all components on the GameObject that can handle it.")]
	public class UiEventSystemCurrentRayCastAll : FsmStateAction
	{
		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The ScreenPosition in pixels")]
		public FsmVector3 screenPosition;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The ScreenPosition in a Vector2")]
		public FsmVector2 orScreenPosition2d;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("GameObjects hit by the raycast")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray gameObjectList;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Number of hits")]
		public FsmInt hitCount;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PointerEventData pointer;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<RaycastResult> raycastResults;

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xE385B8", Offset = "0xE385B8", VA = "0xE385B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xE38660", Offset = "0xE38660", VA = "0xE38660", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xE38978", Offset = "0xE38978", VA = "0xE38978", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xE3868C", Offset = "0xE3868C", VA = "0xE3868C")]
		private void ExecuteRayCastAll()
		{
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xE3897C", Offset = "0xE3897C", VA = "0xE3897C")]
		public UiEventSystemCurrentRayCastAll()
		{
		}
	}
	[Token(Token = "0x2000460")]
	[Tooltip("The eventType will be executed on all components on the GameObject that can handle it.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiEventSystemExecuteEvent : FsmStateAction
	{
		[Token(Token = "0x2000461")]
		public enum EventHandlers
		{
			[Token(Token = "0x40014D7")]
			Submit,
			[Token(Token = "0x40014D8")]
			beginDrag,
			[Token(Token = "0x40014D9")]
			cancel,
			[Token(Token = "0x40014DA")]
			deselectHandler,
			[Token(Token = "0x40014DB")]
			dragHandler,
			[Token(Token = "0x40014DC")]
			dropHandler,
			[Token(Token = "0x40014DD")]
			endDragHandler,
			[Token(Token = "0x40014DE")]
			initializePotentialDrag,
			[Token(Token = "0x40014DF")]
			pointerClickHandler,
			[Token(Token = "0x40014E0")]
			pointerDownHandler,
			[Token(Token = "0x40014E1")]
			pointerEnterHandler,
			[Token(Token = "0x40014E2")]
			pointerExitHandler,
			[Token(Token = "0x40014E3")]
			pointerUpHandler,
			[Token(Token = "0x40014E4")]
			scrollHandler,
			[Token(Token = "0x40014E5")]
			submitHandler,
			[Token(Token = "0x40014E6")]
			updateSelectedHandler
		}

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with  an IEventSystemHandler component (a UI button for example).")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Type of handler to execute")]
		[ObjectType(typeof(EventHandlers))]
		public FsmEnum eventHandler;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event Sent if execution was possible on GameObject")]
		public FsmEvent success;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event Sent if execution was NOT possible on GameObject because it can not handle the eventHandler selected")]
		public FsmEvent canNotHandleEvent;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xE38A04", Offset = "0xE38A04", VA = "0xE38A04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xE38AA4", Offset = "0xE38AA4", VA = "0xE38AA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xE38AF4", Offset = "0xE38AF4", VA = "0xE38AF4")]
		private bool ExecuteEvent()
		{
			return default(bool);
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xE39964", Offset = "0xE39964", VA = "0xE39964")]
		public UiEventSystemExecuteEvent()
		{
		}
	}
	[Token(Token = "0x2000462")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets pointer data on the last System Event.\nHINT: Use {{Hide Unused}} in the {{State Inspector}} to hide the unused parameters after selecting the ones you need.")]
	public class UiGetLastPointerDataInfo : FsmStateAction
	{
		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PointerEventData lastPointerEventData;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Number of clicks in a row.")]
		[UIHint(UIHint.Variable)]
		public FsmInt clickCount;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The last time a click event was sent.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat clickTime;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Pointer delta since last update.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 delta;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Is a drag operation currently occuring.")]
		[UIHint(UIHint.Variable)]
		public FsmBool dragging;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(PointerEventData.InputButton))]
		[Tooltip("The InputButton for this event.")]
		[UIHint(UIHint.Variable)]
		public FsmEnum inputButton;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Is the pointer being pressed? (Not documented by Unity)")]
		[UIHint(UIHint.Variable)]
		public FsmBool eligibleForClick;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The camera associated with the last OnPointerEnter event.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject enterEventCamera;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The camera associated with the last OnPointerPress event.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject pressEventCamera;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Is the pointer moving.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPointerMoving;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Is scroll being used on the input device.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isScrolling;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The GameObject for the last press event.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject lastPress;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The object that is receiving OnDrag.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject pointerDrag;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The object that received 'OnPointerEnter'.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject pointerEnter;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Id of the pointer (touch id).")]
		[UIHint(UIHint.Variable)]
		public FsmInt pointerId;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The GameObject that received the OnPointerDown.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject pointerPress;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Current pointer position.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 position;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Position of the press.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 pressPosition;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The object that the press happened on even if it can not handle the press event.")]
		public FsmGameObject rawPointerPress;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The amount of scroll since the last update.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 scrollDelta;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Is the event used?")]
		[UIHint(UIHint.Variable)]
		public FsmBool used;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Should a drag threshold be used?")]
		[UIHint(UIHint.Variable)]
		public FsmBool useDragThreshold;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The normal of the last raycast in world coordinates.")]
		public FsmVector3 worldNormal;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The world position of the last raycast.")]
		public FsmVector3 worldPosition;

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xE3996C", Offset = "0xE3996C", VA = "0xE3996C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xE39B3C", Offset = "0xE39B3C", VA = "0xE39B3C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xE3A110", Offset = "0xE3A110", VA = "0xE3A110")]
		public UiGetLastPointerDataInfo()
		{
		}
	}
	[Token(Token = "0x2000463")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets pointer data Input Button on the last System event.")]
	public class UiGetLastPointerEventDataInputButton : FsmStateAction
	{
		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the Input Button pressed (Left, Right, Middle)")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(PointerEventData.InputButton))]
		public FsmEnum inputButton;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if Left Button clicked.")]
		public FsmEvent leftClick;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if Middle Button clicked.")]
		public FsmEvent middleClick;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if Right Button clicked.")]
		public FsmEvent rightClick;

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xE3A118", Offset = "0xE3A118", VA = "0xE3A118", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xE3A1B8", Offset = "0xE3A1B8", VA = "0xE3A1B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xE3A1D4", Offset = "0xE3A1D4", VA = "0xE3A1D4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xE3A320", Offset = "0xE3A320", VA = "0xE3A320")]
		public UiGetLastPointerEventDataInputButton()
		{
		}
	}
	[Token(Token = "0x2000464")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Returns the EventSystem's currently select GameObject.")]
	public class UiGetSelectedGameObject : FsmStateAction
	{
		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The currently selected GameObject")]
		public FsmGameObject StoreGameObject;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event sent when the selected GameObject changes")]
		[UIHint(UIHint.Variable)]
		public FsmEvent ObjectChangedEvent;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If true, each frame will check the currently selected GameObject")]
		public bool everyFrame;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject lastGameObject;

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xE3A328", Offset = "0xE3A328", VA = "0xE3A328", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xE3A34C", Offset = "0xE3A34C", VA = "0xE3A34C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xE3A3F4", Offset = "0xE3A3F4", VA = "0xE3A3F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xE3A380", Offset = "0xE3A380", VA = "0xE3A380")]
		private void GetCurrentSelectedGameObject()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xE3A4B4", Offset = "0xE3A4B4", VA = "0xE3A4B4")]
		public UiGetSelectedGameObject()
		{
		}
	}
	[Token(Token = "0x2000465")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Checks if Pointer is over a UI object, optionally takes a pointer ID, otherwise uses the current event.")]
	public class UiIsPointerOverUiObject : FsmStateAction
	{
		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Optional PointerId. Leave as None to use the current event")]
		public FsmInt pointerId;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send when the Pointer is over an UI object.")]
		public FsmEvent pointerOverUI;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the Pointer is NOT over an UI object.")]
		public FsmEvent pointerNotOverUI;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if the pointer is over a UI object in a Bool variable.")]
		public FsmBool isPointerOverUI;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xE3A4BC", Offset = "0xE3A4BC", VA = "0xE3A4BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xE3A564", Offset = "0xE3A564", VA = "0xE3A564", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xE3A71C", Offset = "0xE3A71C", VA = "0xE3A71C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xE3A590", Offset = "0xE3A590", VA = "0xE3A590")]
		private void DoCheckPointer()
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xE3A720", Offset = "0xE3A720", VA = "0xE3A720")]
		public UiIsPointerOverUiObject()
		{
		}
	}
	[Token(Token = "0x2000466")]
	[Tooltip("Sends event when user starts to drag a GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnBeginDragEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnBeginDrag is called")]
		public FsmEvent onBeginDragEvent;

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xE3A728", Offset = "0xE3A728", VA = "0xE3A728", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xE3A760", Offset = "0xE3A760", VA = "0xE3A760", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xE3A7E4", Offset = "0xE3A7E4", VA = "0xE3A7E4")]
		private void OnBeginDragDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xE3A8E4", Offset = "0xE3A8E4", VA = "0xE3A8E4")]
		public UiOnBeginDragEvent()
		{
		}
	}
	[Token(Token = "0x2000467")]
	[Tooltip("Sends event when OnCancel is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnCancelEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnCancelEvent is called")]
		public FsmEvent onCancelEvent;

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xE3A8E8", Offset = "0xE3A8E8", VA = "0xE3A8E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xE3A910", Offset = "0xE3A910", VA = "0xE3A910", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xE3A994", Offset = "0xE3A994", VA = "0xE3A994")]
		private void OnCancelDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xE3AA94", Offset = "0xE3AA94", VA = "0xE3AA94")]
		public UiOnCancelEvent()
		{
		}
	}
	[Token(Token = "0x2000468")]
	[Tooltip("Sends event when OnDeselect is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnDeselectEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnDeselectEvent is called")]
		public FsmEvent onDeselectEvent;

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xE3AA98", Offset = "0xE3AA98", VA = "0xE3AA98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xE3AAD0", Offset = "0xE3AAD0", VA = "0xE3AAD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xE3AB54", Offset = "0xE3AB54", VA = "0xE3AB54")]
		private void OnDeselectDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0xE3AC54", Offset = "0xE3AC54", VA = "0xE3AC54")]
		public UiOnDeselectEvent()
		{
		}
	}
	[Token(Token = "0x2000469")]
	[Tooltip("Sends event when OnDrag is called on the GameObject. Warning this event is sent every frame while dragging.\n Use GetLastPointerDataInfo action to get info from the event.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnDragEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnDrag is called")]
		public FsmEvent onDragEvent;

		[Token(Token = "0x6001492")]
		[Address(RVA = "0xE3AC58", Offset = "0xE3AC58", VA = "0xE3AC58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0xE3AC90", Offset = "0xE3AC90", VA = "0xE3AC90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0xE3AD14", Offset = "0xE3AD14", VA = "0xE3AD14")]
		private void OnDragDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0xE3AE14", Offset = "0xE3AE14", VA = "0xE3AE14")]
		public UiOnDragEvent()
		{
		}
	}
	[Token(Token = "0x200046A")]
	[Tooltip("Sends event when OnDrop is called on the GameObject. Warning this event is sent everyframe while dragging.\n Use GetLastPointerDataInfo action to get info from the event.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnDropEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when OnDrop is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onDropEvent;

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xE3AE18", Offset = "0xE3AE18", VA = "0xE3AE18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0xE3AE50", Offset = "0xE3AE50", VA = "0xE3AE50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0xE3AED4", Offset = "0xE3AED4", VA = "0xE3AED4")]
		private void OnDropDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0xE3AFD4", Offset = "0xE3AFD4", VA = "0xE3AFD4")]
		public UiOnDropEvent()
		{
		}
	}
	[Token(Token = "0x200046B")]
	[Tooltip("Sends event Called by the EventSystem once dragging ends.\n Use GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnEndDragEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnEndDrag is called")]
		public FsmEvent onEndDragEvent;

		[Token(Token = "0x600149A")]
		[Address(RVA = "0xE3AFD8", Offset = "0xE3AFD8", VA = "0xE3AFD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0xE3B010", Offset = "0xE3B010", VA = "0xE3B010", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0xE3B094", Offset = "0xE3B094", VA = "0xE3B094")]
		private void OnEndDragDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xE3B194", Offset = "0xE3B194", VA = "0xE3B194")]
		public UiOnEndDragEvent()
		{
		}
	}
	[Token(Token = "0x200046C")]
	[Tooltip("Sends event when Called by the EventSystem when a drag has been found, but before it is valid to begin the drag.\n Use GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnInitializePotentialDragEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnInitializePotentialDrag is called")]
		public FsmEvent onInitializePotentialDragEvent;

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xE3B198", Offset = "0xE3B198", VA = "0xE3B198", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xE3B1D0", Offset = "0xE3B1D0", VA = "0xE3B1D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xE3B254", Offset = "0xE3B254", VA = "0xE3B254")]
		private void OnInitializePotentialDragDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xE3B354", Offset = "0xE3B354", VA = "0xE3B354")]
		public UiOnInitializePotentialDragEvent()
		{
		}
	}
	[Token(Token = "0x200046D")]
	[Tooltip("Sends event when OnMoveEvent is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnMoveEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnMoveEvent is called")]
		public FsmEvent onMoveEvent;

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xE3B358", Offset = "0xE3B358", VA = "0xE3B358", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xE3B390", Offset = "0xE3B390", VA = "0xE3B390", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xE3B414", Offset = "0xE3B414", VA = "0xE3B414")]
		private void OnMoveDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xE3B514", Offset = "0xE3B514", VA = "0xE3B514")]
		public UiOnMoveEvent()
		{
		}
	}
	[Token(Token = "0x200046E")]
	[Tooltip("Sends event when OnPointerClick is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnPointerClickEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when PointerClick is called")]
		public FsmEvent onPointerClickEvent;

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xE3B518", Offset = "0xE3B518", VA = "0xE3B518", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xE3B550", Offset = "0xE3B550", VA = "0xE3B550", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xE3B5D4", Offset = "0xE3B5D4", VA = "0xE3B5D4")]
		private void OnPointerClickDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xE3B6D4", Offset = "0xE3B6D4", VA = "0xE3B6D4")]
		public UiOnPointerClickEvent()
		{
		}
	}
	[Token(Token = "0x200046F")]
	[Tooltip("Sends event when OnPointerDown is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnPointerDownEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when PointerDown is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onPointerDownEvent;

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xE3B6D8", Offset = "0xE3B6D8", VA = "0xE3B6D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xE3B710", Offset = "0xE3B710", VA = "0xE3B710", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xE3B794", Offset = "0xE3B794", VA = "0xE3B794")]
		private void OnPointerDownDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xE3B894", Offset = "0xE3B894", VA = "0xE3B894")]
		public UiOnPointerDownEvent()
		{
		}
	}
	[Token(Token = "0x2000470")]
	[Tooltip("Sends event when OnPointerEnter is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnPointerEnterEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when PointerEnter is called")]
		public FsmEvent onPointerEnterEvent;

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xE3B898", Offset = "0xE3B898", VA = "0xE3B898", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xE3B8D0", Offset = "0xE3B8D0", VA = "0xE3B8D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xE3B954", Offset = "0xE3B954", VA = "0xE3B954")]
		private void OnPointerEnterDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xE3BA54", Offset = "0xE3BA54", VA = "0xE3BA54")]
		public UiOnPointerEnterEvent()
		{
		}
	}
	[Token(Token = "0x2000471")]
	[Tooltip("Sends event when OnPointerExit is called on the GameObject. \nUse GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnPointerExitEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when PointerExit is called")]
		public FsmEvent onPointerExitEvent;

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xE3BA58", Offset = "0xE3BA58", VA = "0xE3BA58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xE3BA90", Offset = "0xE3BA90", VA = "0xE3BA90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xE3BB14", Offset = "0xE3BB14", VA = "0xE3BB14")]
		private void OnPointerExitDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xE3BC14", Offset = "0xE3BC14", VA = "0xE3BC14")]
		public UiOnPointerExitEvent()
		{
		}
	}
	[Token(Token = "0x2000472")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnPointerUp is called on the GameObject. \nUse GetLastPointerDataInfo action to get info from the event")]
	public class UiOnPointerUpEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when PointerUp is called")]
		public FsmEvent onPointerUpEvent;

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xE3BC18", Offset = "0xE3BC18", VA = "0xE3BC18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xE3BC50", Offset = "0xE3BC50", VA = "0xE3BC50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xE3BCD4", Offset = "0xE3BCD4", VA = "0xE3BCD4")]
		private void OnPointerUpDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xE3BDD4", Offset = "0xE3BDD4", VA = "0xE3BDD4")]
		public UiOnPointerUpEvent()
		{
		}
	}
	[Token(Token = "0x2000473")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnScroll is called on the GameObject. \nUse GetLastPointerDataInfo action to get info from the event")]
	public class UiOnScrollEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnScroll is called")]
		public FsmEvent onScrollEvent;

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xE3BDD8", Offset = "0xE3BDD8", VA = "0xE3BDD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xE3BE10", Offset = "0xE3BE10", VA = "0xE3BE10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xE3BE94", Offset = "0xE3BE94", VA = "0xE3BE94")]
		private void OnScrollDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xE3BF94", Offset = "0xE3BF94", VA = "0xE3BF94")]
		public UiOnScrollEvent()
		{
		}
	}
	[Token(Token = "0x2000474")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when Called by the EventSystem when a Select event occurs. \nUse GetLastPointerDataInfo action to get info from the event")]
	public class UiOnSelectEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when OnSelect is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onSelectEvent;

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xE3BF98", Offset = "0xE3BF98", VA = "0xE3BF98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xE3BFD0", Offset = "0xE3BFD0", VA = "0xE3BFD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xE3C054", Offset = "0xE3C054", VA = "0xE3C054")]
		private void OnSelectDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xE3C154", Offset = "0xE3C154", VA = "0xE3C154")]
		public UiOnSelectEvent()
		{
		}
	}
	[Token(Token = "0x2000475")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnSubmit is called on the GameObject. \nUse GetLastPointerDataInfo action to get info from the event")]
	public class UiOnSubmitEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when OnSubmitEvent is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onSubmitEvent;

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xE3C158", Offset = "0xE3C158", VA = "0xE3C158", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xE3C190", Offset = "0xE3C190", VA = "0xE3C190", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xE3C214", Offset = "0xE3C214", VA = "0xE3C214")]
		private void OnSubmitDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xE3C314", Offset = "0xE3C314", VA = "0xE3C314")]
		public UiOnSubmitEvent()
		{
		}
	}
	[Token(Token = "0x2000476")]
	[Tooltip("Sends event when Called by the EventSystem when the object associated with this EventTrigger is updated.\nUse GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnUpdateSelectedEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when OnUpdateSelected is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onUpdateSelectedEvent;

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xE3C318", Offset = "0xE3C318", VA = "0xE3C318", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xE3C33C", Offset = "0xE3C33C", VA = "0xE3C33C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xE3C3C4", Offset = "0xE3C3C4", VA = "0xE3C3C4")]
		private void OnUpdateSelectedDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xE3C4C4", Offset = "0xE3C4C4", VA = "0xE3C4C4")]
		public UiOnUpdateSelectedEvent()
		{
		}
	}
	[Token(Token = "0x2000477")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the EventSystem's currently select GameObject.")]
	public class UiSetSelectedGameObject : FsmStateAction
	{
		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The GameObject to select.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xE3C4CC", Offset = "0xE3C4CC", VA = "0xE3C4CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xE3C4D8", Offset = "0xE3C4D8", VA = "0xE3C4D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xE3C4F4", Offset = "0xE3C4F4", VA = "0xE3C4F4")]
		private void DoSetSelectedGameObject()
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xE3C578", Offset = "0xE3C578", VA = "0xE3C578")]
		public UiSetSelectedGameObject()
		{
		}
	}
	[Token(Token = "0x2000478")]
	[Tooltip("Gets various properties of a UI Layout Element component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiLayoutElementGetValues : ComponentAction<LayoutElement>
	{
		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(LayoutElement))]
		[Tooltip("The GameObject with the UI LayoutElement component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Values")]
		[Tooltip("Is this element use Layout constraints")]
		[UIHint(UIHint.Variable)]
		public FsmBool ignoreLayout;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The minimum width enabled state")]
		[UIHint(UIHint.Variable)]
		public FsmBool minWidthEnabled;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The minimum width this layout element should have.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat minWidth;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The minimum height enabled state")]
		public FsmBool minHeightEnabled;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The minimum height this layout element should have.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat minHeight;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The preferred width enabled state")]
		[UIHint(UIHint.Variable)]
		public FsmBool preferredWidthEnabled;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The preferred width this layout element should have before additional available width is allocated.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat preferredWidth;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The preferred height enabled state")]
		[UIHint(UIHint.Variable)]
		public FsmBool preferredHeightEnabled;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The preferred height this layout element should have before additional available height is allocated.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat preferredHeight;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The flexible width enabled state")]
		[UIHint(UIHint.Variable)]
		public FsmBool flexibleWidthEnabled;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The relative amount of additional available width this layout element should fill out relative to its siblings.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat flexibleWidth;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The flexible height enabled state")]
		public FsmBool flexibleHeightEnabled;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The relative amount of additional available height this layout element should fill out relative to its siblings.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat flexibleHeight;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[ActionSection("Options")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private LayoutElement layoutElement;

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xE3C580", Offset = "0xE3C580", VA = "0xE3C580", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xE3C668", Offset = "0xE3C668", VA = "0xE3C668", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xE3CA80", Offset = "0xE3CA80", VA = "0xE3CA80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xE3C708", Offset = "0xE3C708", VA = "0xE3C708")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xE3CA84", Offset = "0xE3CA84", VA = "0xE3CA84")]
		public UiLayoutElementGetValues()
		{
		}
	}
	[Token(Token = "0x2000479")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets various properties of a UI Layout Element component.")]
	public class UiLayoutElementSetValues : ComponentAction<LayoutElement>
	{
		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(LayoutElement))]
		[Tooltip("The GameObject with the UI LayoutElement component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Values")]
		[Tooltip("The minimum width this layout element should have.")]
		public FsmFloat minWidth;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The minimum height this layout element should have.")]
		public FsmFloat minHeight;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The preferred width this layout element should have before additional available width is allocated.")]
		public FsmFloat preferredWidth;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The preferred height this layout element should have before additional available height is allocated.")]
		public FsmFloat preferredHeight;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The relative amount of additional available width this layout element should fill out relative to its siblings.")]
		public FsmFloat flexibleWidth;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The relative amount of additional available height this layout element should fill out relative to its siblings.")]
		public FsmFloat flexibleHeight;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[ActionSection("Options")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private LayoutElement layoutElement;

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xE3CACC", Offset = "0xE3CACC", VA = "0xE3CACC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xE3CC38", Offset = "0xE3CC38", VA = "0xE3CC38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0xE3CECC", Offset = "0xE3CECC", VA = "0xE3CECC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xE3CCD8", Offset = "0xE3CCD8", VA = "0xE3CCD8")]
		private void DoSetValues()
		{
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xE3CED0", Offset = "0xE3CED0", VA = "0xE3CED0")]
		public UiLayoutElementSetValues()
		{
		}
	}
	[Token(Token = "0x200047A")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the explicit navigation properties of a UI Selectable component. ")]
	public class UiNavigationExplicitGetProperties : ComponentAction<Selectable>
	{
		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The down Selectable.")]
		public FsmGameObject selectOnDown;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The up Selectable.")]
		public FsmGameObject selectOnUp;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The left Selectable.")]
		public FsmGameObject selectOnLeft;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The right Selectable.")]
		public FsmGameObject selectOnRight;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Selectable _selectable;

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xE3CF18", Offset = "0xE3CF18", VA = "0xE3CF18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xE3CF70", Offset = "0xE3CF70", VA = "0xE3CF70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xE3D038", Offset = "0xE3D038", VA = "0xE3D038")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xE3D298", Offset = "0xE3D298", VA = "0xE3D298")]
		public UiNavigationExplicitGetProperties()
		{
		}
	}
	[Token(Token = "0x200047B")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the explicit navigation properties of a UI Selectable component. Note that it will have no effect until Navigation mode is set to 'Explicit'.")]
	public class UiNavigationExplicitSetProperties : ComponentAction<Selectable>
	{
		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The down Selectable. Leave as None for no effect")]
		[CheckForComponent(typeof(Selectable))]
		public FsmGameObject selectOnDown;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The up Selectable.  Leave as None for no effect")]
		[CheckForComponent(typeof(Selectable))]
		public FsmGameObject selectOnUp;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The left Selectable.  Leave as None for no effect")]
		[CheckForComponent(typeof(Selectable))]
		public FsmGameObject selectOnLeft;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The right Selectable.  Leave as None for no effect")]
		[CheckForComponent(typeof(Selectable))]
		public FsmGameObject selectOnRight;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Selectable selectable;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Navigation navigation;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Navigation originalState;

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xE3D2E0", Offset = "0xE3D2E0", VA = "0xE3D2E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xE3D40C", Offset = "0xE3D40C", VA = "0xE3D40C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xE3D510", Offset = "0xE3D510", VA = "0xE3D510")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xE3D6B8", Offset = "0xE3D6B8", VA = "0xE3D6B8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60014E0")]
		private static T GetComponentFromFsmGameObject<T>(FsmGameObject variable) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xE3D7F0", Offset = "0xE3D7F0", VA = "0xE3D7F0")]
		public UiNavigationExplicitSetProperties()
		{
		}
	}
	[Token(Token = "0x200047C")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the Color Block of a UI Selectable component.")]
	public class UiGetColorBlock : ComponentAction<Selectable>
	{
		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Selectable))]
		[RequiredField]
		[Tooltip("The GameObject with the UI Selectable component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The fade duration value. Leave as None for no effect")]
		public FsmFloat fadeDuration;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The color multiplier value. Leave as None for no effect")]
		[UIHint(UIHint.Variable)]
		public FsmFloat colorMultiplier;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The normal color value. Leave as None for no effect")]
		public FsmColor normalColor;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The pressed color value. Leave as None for no effect")]
		public FsmColor pressedColor;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The highlighted color value. Leave as None for no effect")]
		[UIHint(UIHint.Variable)]
		public FsmColor highlightedColor;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The disabled color value. Leave as None for no effect")]
		[UIHint(UIHint.Variable)]
		public FsmColor disabledColor;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Selectable selectable;

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xE3D838", Offset = "0xE3D838", VA = "0xE3D838", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0xE3D8B8", Offset = "0xE3D8B8", VA = "0xE3D8B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xE3DACC", Offset = "0xE3DACC", VA = "0xE3DACC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xE3D958", Offset = "0xE3D958", VA = "0xE3D958")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xE3DAD0", Offset = "0xE3DAD0", VA = "0xE3DAD0")]
		public UiGetColorBlock()
		{
		}
	}
	[Token(Token = "0x200047D")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the interactable flag of a UI Selectable component.")]
	public class UiGetIsInteractable : ComponentAction<Selectable>
	{
		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Interactable value")]
		[UIHint(UIHint.Variable)]
		public FsmBool isInteractable;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if Component is Interactable")]
		public FsmEvent isInteractableEvent;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if Component is not Interactable")]
		public FsmEvent isNotInteractableEvent;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Selectable selectable;

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xE3DB18", Offset = "0xE3DB18", VA = "0xE3DB18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xE3DB60", Offset = "0xE3DB60", VA = "0xE3DB60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xE3DBEC", Offset = "0xE3DBEC", VA = "0xE3DBEC")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xE3DCB0", Offset = "0xE3DCB0", VA = "0xE3DCB0")]
		public UiGetIsInteractable()
		{
		}
	}
	[Token(Token = "0x200047E")]
	[Tooltip("Gets the navigation mode of a UI Selectable component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiNavigationGetMode : ComponentAction<Selectable>
	{
		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The navigation mode value")]
		public FsmString navigationMode;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if transition is ColorTint")]
		public FsmEvent automaticEvent;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if transition is ColorTint")]
		public FsmEvent horizontalEvent;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if transition is SpriteSwap")]
		public FsmEvent verticalEvent;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent if transition is Animation")]
		public FsmEvent explicitEvent;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if transition is none")]
		public FsmEvent noNavigationEvent;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Selectable selectable;

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xE3DCF8", Offset = "0xE3DCF8", VA = "0xE3DCF8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xE3DD04", Offset = "0xE3DD04", VA = "0xE3DD04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xE3DD90", Offset = "0xE3DD90", VA = "0xE3DD90")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xE3DED8", Offset = "0xE3DED8", VA = "0xE3DED8")]
		public UiNavigationGetMode()
		{
		}
	}
	[Token(Token = "0x200047F")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the navigation mode of a UI Selectable component.")]
	public class UiNavigationSetMode : ComponentAction<Selectable>
	{
		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The navigation mode value")]
		public Navigation.Mode navigationMode;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Selectable selectable;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Navigation _navigation;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Navigation.Mode originalValue;

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xE3DF20", Offset = "0xE3DF20", VA = "0xE3DF20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xE3DF5C", Offset = "0xE3DF5C", VA = "0xE3DF5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xE3E048", Offset = "0xE3E048", VA = "0xE3E048")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xE3E124", Offset = "0xE3E124", VA = "0xE3E124", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xE3E214", Offset = "0xE3E214", VA = "0xE3E214")]
		public UiNavigationSetMode()
		{
		}
	}
	[Token(Token = "0x2000480")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the Animation Triggers of a UI Selectable component. Modifications will not be visible if transition is not Animation")]
	public class UiSetAnimationTriggers : ComponentAction<Selectable>
	{
		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The normal trigger value. Leave as None for no effect")]
		public FsmString normalTrigger;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The highlighted trigger value. Leave as None for no effect")]
		public FsmString highlightedTrigger;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The pressed trigger value. Leave as None for no effect")]
		public FsmString pressedTrigger;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The disabled trigger value. Leave as None for no effect")]
		public FsmString disabledTrigger;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Selectable selectable;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AnimationTriggers _animationTriggers;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AnimationTriggers originalAnimationTriggers;

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xE3E25C", Offset = "0xE3E25C", VA = "0xE3E25C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xE3E37C", Offset = "0xE3E37C", VA = "0xE3E37C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xE3E470", Offset = "0xE3E470", VA = "0xE3E470")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xE3E604", Offset = "0xE3E604", VA = "0xE3E604", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xE3E6A0", Offset = "0xE3E6A0", VA = "0xE3E6A0")]
		public UiSetAnimationTriggers()
		{
		}
	}
	[Token(Token = "0x2000481")]
	[Tooltip("Sets the Color Block of a UI Selectable component. Modifications will not be visible if transition is not ColorTint")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSetColorBlock : ComponentAction<Selectable>
	{
		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[RequiredField]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The fade duration value. Leave as None for no effect")]
		public FsmFloat fadeDuration;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The color multiplier value. Leave as None for no effect")]
		public FsmFloat colorMultiplier;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The normal color value. Leave as None for no effect")]
		public FsmColor normalColor;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The pressed color value. Leave as None for no effect")]
		public FsmColor pressedColor;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The highlighted color value. Leave as None for no effect")]
		public FsmColor highlightedColor;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The disabled color value. Leave as None for no effect")]
		public FsmColor disabledColor;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Selectable selectable;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ColorBlock _colorBlock;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private ColorBlock originalColorBlock;

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xE3E6E8", Offset = "0xE3E6E8", VA = "0xE3E6E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xE3E880", Offset = "0xE3E880", VA = "0xE3E880", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xE3EB30", Offset = "0xE3EB30", VA = "0xE3EB30", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xE3E988", Offset = "0xE3E988", VA = "0xE3E988")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xE3EB34", Offset = "0xE3EB34", VA = "0xE3EB34", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xE3EBF4", Offset = "0xE3EBF4", VA = "0xE3EBF4")]
		public UiSetColorBlock()
		{
		}
	}
	[Token(Token = "0x2000482")]
	[Tooltip("Sets the interactable flag of a UI Selectable component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSetIsInteractable : FsmStateAction
	{
		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[RequiredField]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Interactable value")]
		public FsmBool isInteractable;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Selectable _selectable;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool _originalState;

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xE3EC3C", Offset = "0xE3EC3C", VA = "0xE3EC3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xE3EC80", Offset = "0xE3EC80", VA = "0xE3EC80", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xE3EDA4", Offset = "0xE3EDA4", VA = "0xE3EDA4")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xE3EE40", Offset = "0xE3EE40", VA = "0xE3EE40", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xE3EEDC", Offset = "0xE3EEDC", VA = "0xE3EEDC")]
		public UiSetIsInteractable()
		{
		}
	}
	[Token(Token = "0x2000483")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the transition type of a UI Selectable component.")]
	public class UiTransitionGetType : ComponentAction<Selectable>
	{
		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Selectable))]
		[RequiredField]
		[Tooltip("The GameObject with the UI Selectable component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The transition value")]
		public FsmString transition;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if transition is ColorTint")]
		public FsmEvent colorTintEvent;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if transition is SpriteSwap")]
		public FsmEvent spriteSwapEvent;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if transition is Animation")]
		public FsmEvent animationEvent;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent if transition is none")]
		public FsmEvent noTransitionEvent;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Selectable selectable;

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xE3EEE4", Offset = "0xE3EEE4", VA = "0xE3EEE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xE3EF4C", Offset = "0xE3EF4C", VA = "0xE3EF4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xE3EFD8", Offset = "0xE3EFD8", VA = "0xE3EFD8")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xE3F110", Offset = "0xE3F110", VA = "0xE3F110")]
		public UiTransitionGetType()
		{
		}
	}
	[Token(Token = "0x2000484")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the transition type of a UI Selectable component.")]
	public class UiTransitionSetType : ComponentAction<Selectable>
	{
		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[RequiredField]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The transition value")]
		public Selectable.Transition transition;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Selectable selectable;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Selectable.Transition originalTransition;

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xE3F158", Offset = "0xE3F158", VA = "0xE3F158", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xE3F194", Offset = "0xE3F194", VA = "0xE3F194", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xE3F280", Offset = "0xE3F280", VA = "0xE3F280")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xE3F308", Offset = "0xE3F308", VA = "0xE3F308", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xE3F3A4", Offset = "0xE3F3A4", VA = "0xE3F3A4")]
		public UiTransitionSetType()
		{
		}
	}
	[Token(Token = "0x2000485")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Set up multiple button events in a single action.")]
	public class UiButtonArray : FsmStateAction
	{
		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the events.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The GameObject with the UI Button component.")]
		[CheckForComponent(typeof(Button))]
		[CompoundArray("Buttons", "Button", "Click Event")]
		public FsmGameObject[] gameObjects;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Send this event when the button is Clicked.")]
		public FsmEvent[] clickEvents;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The index of the last button clicked. (0 = first button, 1 = second, etc.)")]
		[UIHint(UIHint.Variable)]
		public FsmInt clickIndex;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Button[] buttons;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject[] cachedGameObjects;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityAction[] actions;

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xE3F3EC", Offset = "0xE3F3EC", VA = "0xE3F3EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xE3F48C", Offset = "0xE3F48C", VA = "0xE3F48C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xE3F570", Offset = "0xE3F570", VA = "0xE3F570")]
		private void InitButtons()
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xE3F754", Offset = "0xE3F754", VA = "0xE3F754", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xE3F92C", Offset = "0xE3F92C", VA = "0xE3F92C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xE3FA4C", Offset = "0xE3FA4C", VA = "0xE3FA4C")]
		public void OnClick(int index)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xE3FAE4", Offset = "0xE3FAE4", VA = "0xE3FAE4")]
		public UiButtonArray()
		{
		}
	}
	[Token(Token = "0x2000487")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends an event when a UI Button is clicked.")]
	public class UiButtonOnClickEvent : ComponentAction<Button>
	{
		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Button component.")]
		[CheckForComponent(typeof(Button))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when Clicked.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Button button;

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xE3FB0C", Offset = "0xE3FB0C", VA = "0xE3FB0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xE3FB34", Offset = "0xE3FB34", VA = "0xE3FB34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0xE3FD50", Offset = "0xE3FD50", VA = "0xE3FD50", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xE3FE2C", Offset = "0xE3FE2C", VA = "0xE3FE2C")]
		public void DoOnClick()
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0xE3FE78", Offset = "0xE3FE78", VA = "0xE3FE78")]
		public UiButtonOnClickEvent()
		{
		}
	}
	[Token(Token = "0x2000488")]
	[Tooltip("Add multiple options to the options of the Dropdown UI Component")]
	[ActionCategory(ActionCategory.UI)]
	public class UiDropDownAddOptions : ComponentAction<Dropdown>
	{
		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI DropDown component.")]
		[RequiredField]
		[CheckForComponent(typeof(Dropdown))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The text to use for this option.")]
		[CompoundArray("Options", "Text", "Image")]
		public FsmString[] optionText;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ObjectType(typeof(Sprite))]
		[Tooltip("The image to use for this option.")]
		public FsmObject[] optionImage;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dropdown dropDown;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Dropdown.OptionData> options;

		[Token(Token = "0x600151B")]
		[Address(RVA = "0xE3FEC0", Offset = "0xE3FEC0", VA = "0xE3FEC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xE3FF60", Offset = "0xE3FF60", VA = "0xE3FF60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xE3FFEC", Offset = "0xE3FFEC", VA = "0xE3FFEC")]
		private void DoAddOptions()
		{
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xE40264", Offset = "0xE40264", VA = "0xE40264")]
		public UiDropDownAddOptions()
		{
		}
	}
	[Token(Token = "0x2000489")]
	[Tooltip("Clear the list of options in a UI Dropdown Component")]
	[ActionCategory(ActionCategory.UI)]
	public class UiDropDownClearOptions : ComponentAction<Dropdown>
	{
		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Dropdown))]
		[Tooltip("The GameObject with the UI DropDown component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dropdown dropDown;

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xE402AC", Offset = "0xE402AC", VA = "0xE402AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xE402B8", Offset = "0xE402B8", VA = "0xE402B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xE40388", Offset = "0xE40388", VA = "0xE40388")]
		public UiDropDownClearOptions()
		{
		}
	}
	[Token(Token = "0x200048A")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Get the selected value (zero based index), sprite and text from a UI Dropdown Component")]
	public class UiDropDownGetSelectedData : ComponentAction<Dropdown>
	{
		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Dropdown))]
		[RequiredField]
		[Tooltip("The GameObject with the UI DropDown component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The selected index of the dropdown (zero based index).")]
		[UIHint(UIHint.Variable)]
		public FsmInt index;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The selected text.")]
		[UIHint(UIHint.Variable)]
		public FsmString getText;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The selected text.")]
		[ObjectType(typeof(Sprite))]
		[UIHint(UIHint.Variable)]
		public FsmObject getImage;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Dropdown dropDown;

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xE403D0", Offset = "0xE403D0", VA = "0xE403D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xE40420", Offset = "0xE40420", VA = "0xE40420", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xE40624", Offset = "0xE40624", VA = "0xE40624", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xE404C0", Offset = "0xE404C0", VA = "0xE404C0")]
		private void GetValue()
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xE40628", Offset = "0xE40628", VA = "0xE40628")]
		public UiDropDownGetSelectedData()
		{
		}
	}
	[Token(Token = "0x200048B")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Set the selected value (zero based index) of the UI Dropdown Component")]
	public class UiDropDownSetValue : ComponentAction<Dropdown>
	{
		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Dropdown))]
		[Tooltip("The GameObject with the UI DropDown component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The selected index of the dropdown (zero based index).")]
		[RequiredField]
		public FsmInt value;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dropdown dropDown;

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xE40670", Offset = "0xE40670", VA = "0xE40670", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xE406A0", Offset = "0xE406A0", VA = "0xE406A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xE40800", Offset = "0xE40800", VA = "0xE40800", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xE40740", Offset = "0xE40740", VA = "0xE40740")]
		private void SetValue()
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xE40804", Offset = "0xE40804", VA = "0xE40804")]
		public UiDropDownSetValue()
		{
		}
	}
	[Token(Token = "0x200048C")]
	[Tooltip("Tweens the alpha of the CanvasRenderer color associated with this Graphic.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiGraphicCrossFadeAlpha : ComponentAction<Graphic>
	{
		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with an Unity UI component.")]
		[CheckForComponent(typeof(Graphic))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The alpha target")]
		public FsmFloat alpha;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The duration of the tween")]
		public FsmFloat duration;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Should ignore Time.scale?")]
		public FsmBool ignoreTimeScale;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Graphic uiComponent;

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xE4084C", Offset = "0xE4084C", VA = "0xE4084C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xE408A0", Offset = "0xE408A0", VA = "0xE408A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xE4098C", Offset = "0xE4098C", VA = "0xE4098C")]
		public UiGraphicCrossFadeAlpha()
		{
		}
	}
	[Token(Token = "0x200048D")]
	[Tooltip("Tweens the color of the CanvasRenderer color associated with this Graphic.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiGraphicCrossFadeColor : ComponentAction<Graphic>
	{
		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with a UI component.")]
		[CheckForComponent(typeof(Graphic))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Color target of the UI component. Leave to none and set the individual color values, for example to affect just the alpha channel")]
		public FsmColor color;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The red channel Color target of the UI component. Leave as None for no effect, else it overrides the color property")]
		public FsmFloat red;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The green channel Color target of the UI component. Leave as None for no effect, else it overrides the color property")]
		public FsmFloat green;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The blue channel Color target of the UI component. Leave as None for no effect, else it overrides the color property")]
		public FsmFloat blue;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The alpha channel Color target of the UI component. Leave as None for no effect, else it overrides the color property")]
		public FsmFloat alpha;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The duration of the tween")]
		public FsmFloat duration;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Should ignore Time.scale?")]
		public FsmBool ignoreTimeScale;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Should also Tween the alpha channel?")]
		public FsmBool useAlpha;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Graphic uiComponent;

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xE409D4", Offset = "0xE409D4", VA = "0xE409D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xE40B30", Offset = "0xE40B30", VA = "0xE40B30", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xE40D2C", Offset = "0xE40D2C", VA = "0xE40D2C")]
		public UiGraphicCrossFadeColor()
		{
		}
	}
	[Token(Token = "0x200048E")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the color of a UI Graphic component. (E.g. UI Sprite)")]
	public class UiGraphicGetColor : ComponentAction<Graphic>
	{
		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Graphic))]
		[RequiredField]
		[Tooltip("The GameObject with the UI component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Color of the UI component")]
		public FsmColor color;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Graphic uiComponent;

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xE40D74", Offset = "0xE40D74", VA = "0xE40D74", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xE40D9C", Offset = "0xE40D9C", VA = "0xE40D9C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xE40ED0", Offset = "0xE40ED0", VA = "0xE40ED0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xE40E3C", Offset = "0xE40E3C", VA = "0xE40E3C")]
		private void DoGetColorValue()
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xE40ED4", Offset = "0xE40ED4", VA = "0xE40ED4")]
		public UiGraphicGetColor()
		{
		}
	}
	[Token(Token = "0x200048F")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Set Graphic Color. E.g. to set Sprite Color.")]
	public class UiGraphicSetColor : ComponentAction<Graphic>
	{
		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Graphic))]
		[Tooltip("The GameObject with a UI component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Color of the UI component. Leave to none and set the individual color values, for example to affect just the alpha channel")]
		public FsmColor color;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The red channel Color of the UI component. Leave to none for no effect, else it overrides the color property")]
		public FsmFloat red;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The green channel Color of the UI component. Leave to none for no effect, else it overrides the color property")]
		public FsmFloat green;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The blue channel Color of the UI component. Leave to none for no effect, else it overrides the color property")]
		public FsmFloat blue;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The alpha channel Color of the UI component. Leave to none for no effect, else it overrides the color property")]
		public FsmFloat alpha;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Graphic uiComponent;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Color originalColor;

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xE40F1C", Offset = "0xE40F1C", VA = "0xE40F1C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xE41054", Offset = "0xE41054", VA = "0xE41054", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xE412B4", Offset = "0xE412B4", VA = "0xE412B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xE41114", Offset = "0xE41114", VA = "0xE41114")]
		private void DoSetColorValue()
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xE412B8", Offset = "0xE412B8", VA = "0xE412B8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xE41360", Offset = "0xE41360", VA = "0xE41360")]
		public UiGraphicSetColor()
		{
		}
	}
	[Token(Token = "0x2000490")]
	[Tooltip("Set The Fill Amount on a UI Image")]
	[ActionCategory(ActionCategory.UI)]
	public class UiImageGetFillAmount : ComponentAction<Image>
	{
		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Image component.")]
		[RequiredField]
		[CheckForComponent(typeof(Image))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The fill amount.")]
		public FsmFloat ImageFillAmount;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Image image;

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xE413A8", Offset = "0xE413A8", VA = "0xE413A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0xE413D8", Offset = "0xE413D8", VA = "0xE413D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0xE414FC", Offset = "0xE414FC", VA = "0xE414FC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0xE41478", Offset = "0xE41478", VA = "0xE41478")]
		private void DoGetFillAmount()
		{
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0xE41500", Offset = "0xE41500", VA = "0xE41500")]
		public UiImageGetFillAmount()
		{
		}
	}
	[Token(Token = "0x2000491")]
	[Tooltip("Gets the source image sprite of a UI Image component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiImageGetSprite : ComponentAction<Image>
	{
		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Image))]
		[Tooltip("The GameObject with the UI Image component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(Sprite))]
		[UIHint(UIHint.Variable)]
		[Tooltip("The source sprite of the UI Image component.")]
		[RequiredField]
		public FsmObject sprite;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Image image;

		[Token(Token = "0x6001542")]
		[Address(RVA = "0xE41548", Offset = "0xE41548", VA = "0xE41548", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0xE41570", Offset = "0xE41570", VA = "0xE41570", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0xE415FC", Offset = "0xE415FC", VA = "0xE415FC")]
		private void DoSetImageSourceValue()
		{
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0xE4168C", Offset = "0xE4168C", VA = "0xE4168C")]
		public UiImageGetSprite()
		{
		}
	}
	[Token(Token = "0x2000492")]
	[Tooltip("Set The Fill Amount on a UI Image")]
	[ActionCategory(ActionCategory.UI)]
	public class UiImageSetFillAmount : ComponentAction<Image>
	{
		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Image))]
		[Tooltip("The GameObject with the UI Image component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The fill amount.")]
		[RequiredField]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat ImageFillAmount;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Image image;

		[Token(Token = "0x6001546")]
		[Address(RVA = "0xE416D4", Offset = "0xE416D4", VA = "0xE416D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0xE41710", Offset = "0xE41710", VA = "0xE41710", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0xE41848", Offset = "0xE41848", VA = "0xE41848", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0xE417B0", Offset = "0xE417B0", VA = "0xE417B0")]
		private void DoSetFillAmount()
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0xE4184C", Offset = "0xE4184C", VA = "0xE4184C")]
		public UiImageSetFillAmount()
		{
		}
	}
	[Token(Token = "0x2000493")]
	[Tooltip("Sets the raycast target of a UI Image component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiImageSetRaycastTarget : ComponentAction<Image>
	{
		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Image))]
		[Tooltip("The GameObject with the Image UI component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The raycast target value to be set")]
		public FsmBool raycastTarget;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool originalBool;

		[Token(Token = "0x600154B")]
		[Address(RVA = "0xE41894", Offset = "0xE41894", VA = "0xE41894", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0xE418D8", Offset = "0xE418D8", VA = "0xE418D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0xE41974", Offset = "0xE41974", VA = "0xE41974")]
		private void DoSetRaycastTarget()
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xE419B4", Offset = "0xE419B4", VA = "0xE419B4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0xE419FC", Offset = "0xE419FC", VA = "0xE419FC")]
		public UiImageSetRaycastTarget()
		{
		}
	}
	[Token(Token = "0x2000494")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the source image sprite of a UI Image component.")]
	public class UiImageSetSprite : ComponentAction<Image>
	{
		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Image))]
		[Tooltip("The GameObject with the Image UI component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(Sprite))]
		[RequiredField]
		[Tooltip("The source sprite of the UI Image component.")]
		public FsmObject sprite;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Image image;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Sprite originalSprite;

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xE41A44", Offset = "0xE41A44", VA = "0xE41A44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0xE41A78", Offset = "0xE41A78", VA = "0xE41A78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0xE41B1C", Offset = "0xE41B1C", VA = "0xE41B1C")]
		private void DoSetImageSourceValue()
		{
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0xE41BE4", Offset = "0xE41BE4", VA = "0xE41BE4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0xE41C80", Offset = "0xE41C80", VA = "0xE41C80")]
		public UiImageSetSprite()
		{
		}
	}
	[Token(Token = "0x2000495")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Activate a UI InputField component to begin processing Events. Optionally Deactivate on state exit")]
	public class UiInputFieldActivate : ComponentAction<InputField>
	{
		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool deactivateOnExit;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private InputField inputField;

		[Token(Token = "0x6001555")]
		[Address(RVA = "0xE41CC8", Offset = "0xE41CC8", VA = "0xE41CC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0xE41CF0", Offset = "0xE41CF0", VA = "0xE41CF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0xE41D7C", Offset = "0xE41D7C", VA = "0xE41D7C")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0xE41E00", Offset = "0xE41E00", VA = "0xE41E00", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xE41E98", Offset = "0xE41E98", VA = "0xE41E98")]
		public UiInputFieldActivate()
		{
		}
	}
	[Token(Token = "0x2000496")]
	[Tooltip("Deactivate a UI InputField to stop the processing of Events and send OnSubmit if not canceled. Optionally Activate on state exit")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldDeactivate : ComponentAction<InputField>
	{
		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Activate when exiting this state.")]
		public FsmBool activateOnExit;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private InputField inputField;

		[Token(Token = "0x600155A")]
		[Address(RVA = "0xE41EE0", Offset = "0xE41EE0", VA = "0xE41EE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0xE41F08", Offset = "0xE41F08", VA = "0xE41F08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xE41F94", Offset = "0xE41F94", VA = "0xE41F94")]
		private void DoAction()
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0xE42018", Offset = "0xE42018", VA = "0xE42018", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xE420B0", Offset = "0xE420B0", VA = "0xE420B0")]
		public UiInputFieldDeactivate()
		{
		}
	}
	[Token(Token = "0x2000497")]
	[Tooltip("Gets the caret's blink rate of a UI InputField component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldGetCaretBlinkRate : ComponentAction<InputField>
	{
		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The caret's blink rate for the UI InputField component.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat caretBlinkRate;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xE420F8", Offset = "0xE420F8", VA = "0xE420F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xE4211C", Offset = "0xE4211C", VA = "0xE4211C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xE42240", Offset = "0xE42240", VA = "0xE42240", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0xE421BC", Offset = "0xE421BC", VA = "0xE421BC")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xE42244", Offset = "0xE42244", VA = "0xE42244")]
		public UiInputFieldGetCaretBlinkRate()
		{
		}
	}
	[Token(Token = "0x2000498")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the Character Limit value of a UI InputField component. This is the maximum number of characters that the user can type into the field.")]
	public class UiInputFieldGetCharacterLimit : ComponentAction<InputField>
	{
		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The maximum number of characters that the user can type into the UI InputField component.")]
		public FsmInt characterLimit;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if limit is infinite (equal to 0)")]
		public FsmEvent hasNoLimitEvent;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if limit is more than 0")]
		public FsmEvent isLimitedEvent;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputField inputField;

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xE4228C", Offset = "0xE4228C", VA = "0xE4228C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0xE422B0", Offset = "0xE422B0", VA = "0xE422B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0xE42400", Offset = "0xE42400", VA = "0xE42400", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xE42350", Offset = "0xE42350", VA = "0xE42350")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xE42404", Offset = "0xE42404", VA = "0xE42404")]
		public UiInputFieldGetCharacterLimit()
		{
		}
	}
	[Token(Token = "0x2000499")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the Hide Mobile Input value of a UI InputField component.")]
	public class UiInputFieldGetHideMobileInput : ComponentAction<InputField>
	{
		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Hide Mobile flag value of the UI InputField component.")]
		public FsmBool hideMobileInput;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if hide mobile input property is true")]
		public FsmEvent mobileInputHiddenEvent;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if hide mobile input property is false")]
		public FsmEvent mobileInputShownEvent;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xE4244C", Offset = "0xE4244C", VA = "0xE4244C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0xE42484", Offset = "0xE42484", VA = "0xE42484", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0xE42510", Offset = "0xE42510", VA = "0xE42510")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0xE425DC", Offset = "0xE425DC", VA = "0xE425DC")]
		public UiInputFieldGetHideMobileInput()
		{
		}
	}
	[Token(Token = "0x200049A")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the focused state of a UI InputField component.")]
	public class UiInputFieldGetIsFocused : ComponentAction<InputField>
	{
		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the is focused flag value of the UI InputField component.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isFocused;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if inputField is focused")]
		public FsmEvent isfocusedEvent;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if nputField is not focused")]
		public FsmEvent isNotFocusedEvent;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x600156D")]
		[Address(RVA = "0xE42624", Offset = "0xE42624", VA = "0xE42624", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xE4265C", Offset = "0xE4265C", VA = "0xE4265C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0xE426E8", Offset = "0xE426E8", VA = "0xE426E8")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xE42798", Offset = "0xE42798", VA = "0xE42798")]
		public UiInputFieldGetIsFocused()
		{
		}
	}
	[Token(Token = "0x200049B")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the placeHolder GameObject of a UI InputField component.")]
	public class UiInputFieldGetPlaceHolder : ComponentAction<InputField>
	{
		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the placeholder for the UI InputField component.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject placeHolder;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("true if placeholder is found")]
		public FsmBool placeHolderDefined;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if no placeholder is defined")]
		public FsmEvent foundEvent;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if a placeholder is defined")]
		public FsmEvent notFoundEvent;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputField inputField;

		[Token(Token = "0x6001571")]
		[Address(RVA = "0xE427E0", Offset = "0xE427E0", VA = "0xE427E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0xE42828", Offset = "0xE42828", VA = "0xE42828", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0xE428B4", Offset = "0xE428B4", VA = "0xE428B4")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0xE429C8", Offset = "0xE429C8", VA = "0xE429C8")]
		public UiInputFieldGetPlaceHolder()
		{
		}
	}
	[Token(Token = "0x200049C")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the selection color of a UI InputField component. This is the color of the highlighter to show what characters are selected")]
	public class UiInputFieldGetSelectionColor : ComponentAction<InputField>
	{
		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("This is the color of the highlighter to show what characters are selected of the UI InputField component.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmColor selectionColor;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x6001575")]
		[Address(RVA = "0xE42A10", Offset = "0xE42A10", VA = "0xE42A10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001576")]
		[Address(RVA = "0xE42A34", Offset = "0xE42A34", VA = "0xE42A34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001577")]
		[Address(RVA = "0xE42B5C", Offset = "0xE42B5C", VA = "0xE42B5C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0xE42AD4", Offset = "0xE42AD4", VA = "0xE42AD4")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xE42B60", Offset = "0xE42B60", VA = "0xE42B60")]
		public UiInputFieldGetSelectionColor()
		{
		}
	}
	[Token(Token = "0x200049D")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the text value of a UI InputField component.")]
	public class UiInputFieldGetText : ComponentAction<InputField>
	{
		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The text value of the UI InputField component.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString text;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x600157A")]
		[Address(RVA = "0xE42BA8", Offset = "0xE42BA8", VA = "0xE42BA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xE42BCC", Offset = "0xE42BCC", VA = "0xE42BCC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xE42CFC", Offset = "0xE42CFC", VA = "0xE42CFC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xE42C6C", Offset = "0xE42C6C", VA = "0xE42C6C")]
		private void DoGetTextValue()
		{
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xE42D00", Offset = "0xE42D00", VA = "0xE42D00")]
		public UiInputFieldGetText()
		{
		}
	}
	[Token(Token = "0x200049E")]
	[Tooltip("Gets the text value of a UI InputField component as a float.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldGetTextAsFloat : ComponentAction<InputField>
	{
		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The text value as a float of the UI InputField component.")]
		public FsmFloat value;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if text resolves to a float")]
		public FsmBool isFloat;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("true if text resolves to a float")]
		public FsmEvent isFloatEvent;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if text does not resolves to a float")]
		public FsmEvent isNotFloatEvent;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private InputField inputField;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _value;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _success;

		[Token(Token = "0x600157F")]
		[Address(RVA = "0xE42D48", Offset = "0xE42D48", VA = "0xE42D48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xE42D98", Offset = "0xE42D98", VA = "0xE42D98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xE42F0C", Offset = "0xE42F0C", VA = "0xE42F0C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0xE42E38", Offset = "0xE42E38", VA = "0xE42E38")]
		private void DoGetTextValue()
		{
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0xE42F10", Offset = "0xE42F10", VA = "0xE42F10")]
		public UiInputFieldGetTextAsFloat()
		{
		}
	}
	[Token(Token = "0x200049F")]
	[Tooltip("Gets the text value of a UI InputField component as an Int.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldGetTextAsInt : ComponentAction<InputField>
	{
		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the text value as an int.")]
		public FsmInt value;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if text resolves to an int")]
		public FsmBool isInt;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if text resolves to an int")]
		public FsmEvent isIntEvent;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if text does NOT resolve to an int")]
		public FsmEvent isNotIntEvent;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private InputField inputField;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int _value;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _success;

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xE42F58", Offset = "0xE42F58", VA = "0xE42F58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0xE42FA8", Offset = "0xE42FA8", VA = "0xE42FA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0xE4311C", Offset = "0xE4311C", VA = "0xE4311C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0xE43048", Offset = "0xE43048", VA = "0xE43048")]
		private void DoGetTextValue()
		{
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xE43120", Offset = "0xE43120", VA = "0xE43120")]
		public UiInputFieldGetTextAsInt()
		{
		}
	}
	[Token(Token = "0x20004A0")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the cancel state of a UI InputField component. This relates to the last onEndEdit Event")]
	public class UiInputFieldGetWasCanceled : ComponentAction<InputField>
	{
		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The was canceled flag value of the UI InputField component.")]
		[UIHint(UIHint.Variable)]
		public FsmBool wasCanceled;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if inputField was canceled")]
		public FsmEvent wasCanceledEvent;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if inputField was not canceled")]
		public FsmEvent wasNotCanceledEvent;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xE43168", Offset = "0xE43168", VA = "0xE43168", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xE431A0", Offset = "0xE431A0", VA = "0xE431A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xE4322C", Offset = "0xE4322C", VA = "0xE4322C")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xE432DC", Offset = "0xE432DC", VA = "0xE432DC")]
		public UiInputFieldGetWasCanceled()
		{
		}
	}
	[Token(Token = "0x20004A1")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Move Caret to text end in a UI InputField component. Optionally select from the current caret position")]
	public class UiInputFieldMoveCaretToTextEnd : ComponentAction<InputField>
	{
		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Define if we select or not from the current caret position. Default is true = no selection")]
		public FsmBool shift;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private InputField inputField;

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xE43324", Offset = "0xE43324", VA = "0xE43324", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xE43358", Offset = "0xE43358", VA = "0xE43358", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xE433E4", Offset = "0xE433E4", VA = "0xE433E4")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xE43480", Offset = "0xE43480", VA = "0xE43480")]
		public UiInputFieldMoveCaretToTextEnd()
		{
		}
	}
	[Token(Token = "0x20004A2")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Move Caret to text start in a UI InputField component. Optionally select from the current caret position")]
	public class UiInputFieldMoveCaretToTextStart : ComponentAction<InputField>
	{
		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Define if we select or not from the current caret position. Default is true = no selection")]
		public FsmBool shift;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private InputField inputField;

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xE434C8", Offset = "0xE434C8", VA = "0xE434C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xE434FC", Offset = "0xE434FC", VA = "0xE434FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001593")]
		[Address(RVA = "0xE43588", Offset = "0xE43588", VA = "0xE43588")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0xE43624", Offset = "0xE43624", VA = "0xE43624")]
		public UiInputFieldMoveCaretToTextStart()
		{
		}
	}
	[Token(Token = "0x20004A3")]
	[Tooltip("Fires an event when editing ended in a UI InputField component. Event string data will contain the text value, and the boolean will be true is it was a cancel action")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldOnEndEditEvent : ComponentAction<InputField>
	{
		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when editing ended.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The content of the InputField when edited ended")]
		public FsmString text;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The canceled state of the InputField when edited ended")]
		[UIHint(UIHint.Variable)]
		public FsmBool wasCanceled;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputField inputField;

		[Token(Token = "0x6001595")]
		[Address(RVA = "0xE4366C", Offset = "0xE4366C", VA = "0xE4366C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0xE436B4", Offset = "0xE436B4", VA = "0xE436B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xE437F4", Offset = "0xE437F4", VA = "0xE437F4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xE438E4", Offset = "0xE438E4", VA = "0xE438E4")]
		public void DoOnEndEdit(string value)
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xE439D0", Offset = "0xE439D0", VA = "0xE439D0")]
		public UiInputFieldOnEndEditEvent()
		{
		}
	}
	[Token(Token = "0x20004A4")]
	[Tooltip("Fires an event when user submits from a UI InputField component. \nThis only fires if the user press Enter, not when field looses focus or user escaped the field.\nEvent string data will contain the text value.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldOnSubmitEvent : ComponentAction<InputField>
	{
		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when editing ended.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The content of the InputField when submitting")]
		[UIHint(UIHint.Variable)]
		public FsmString text;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xE43A18", Offset = "0xE43A18", VA = "0xE43A18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xE43A60", Offset = "0xE43A60", VA = "0xE43A60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xE43BA0", Offset = "0xE43BA0", VA = "0xE43BA0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xE43C90", Offset = "0xE43C90", VA = "0xE43C90")]
		public void DoOnEndEdit(string value)
		{
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0xE43D60", Offset = "0xE43D60", VA = "0xE43D60")]
		public UiInputFieldOnSubmitEvent()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Catches UI InputField onValueChanged event. Store the new value and/or send events. Event string data also contains the new value.")]
	public class UiInputFieldOnValueChangeEvent : ComponentAction<InputField>
	{
		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when value changed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store new value in string variable.")]
		[UIHint(UIHint.Variable)]
		public FsmString text;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xE43DA8", Offset = "0xE43DA8", VA = "0xE43DA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xE43DF0", Offset = "0xE43DF0", VA = "0xE43DF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xE43F30", Offset = "0xE43F30", VA = "0xE43F30", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xE44020", Offset = "0xE44020", VA = "0xE44020")]
		public void DoOnValueChange(string value)
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xE440C8", Offset = "0xE440C8", VA = "0xE440C8")]
		public UiInputFieldOnValueChangeEvent()
		{
		}
	}
	[Token(Token = "0x20004A6")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the Asterix Character of a UI InputField component.")]
	public class UiInputFieldSetAsterixChar : ComponentAction<InputField>
	{
		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The asterix Character used for password field type of the UI InputField component. Only the first character will be used, the rest of the string will be ignored")]
		[RequiredField]
		public FsmString asterixChar;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private char originalValue;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static char __char__;

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xE44110", Offset = "0xE44110", VA = "0xE44110", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xE44188", Offset = "0xE44188", VA = "0xE44188", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xE44224", Offset = "0xE44224", VA = "0xE44224")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xE44324", Offset = "0xE44324", VA = "0xE44324", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xE443C0", Offset = "0xE443C0", VA = "0xE443C0")]
		public UiInputFieldSetAsterixChar()
		{
		}
	}
	[Token(Token = "0x20004A7")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the caret's blink rate of a UI InputField component.")]
	public class UiInputFieldSetCaretBlinkRate : ComponentAction<InputField>
	{
		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The caret's blink rate for the UI InputField component.")]
		public FsmInt caretBlinkRate;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Deactivate when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xE44454", Offset = "0xE44454", VA = "0xE44454", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xE44494", Offset = "0xE44494", VA = "0xE44494", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xE445E0", Offset = "0xE445E0", VA = "0xE445E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xE44544", Offset = "0xE44544", VA = "0xE44544")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0xE445E4", Offset = "0xE445E4", VA = "0xE445E4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xE44680", Offset = "0xE44680", VA = "0xE44680")]
		public UiInputFieldSetCaretBlinkRate()
		{
		}
	}
	[Token(Token = "0x20004A8")]
	[Tooltip("Sets the maximum number of characters that the user can type into a UI InputField component. Optionally reset on exit")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldSetCharacterLimit : ComponentAction<InputField>
	{
		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The maximum number of characters that the user can type into the UI InputField component. 0 = infinite")]
		public FsmInt characterLimit;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int originalValue;

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xE446C8", Offset = "0xE446C8", VA = "0xE446C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xE44708", Offset = "0xE44708", VA = "0xE44708", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xE44854", Offset = "0xE44854", VA = "0xE44854", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xE447B8", Offset = "0xE447B8", VA = "0xE447B8")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xE44858", Offset = "0xE44858", VA = "0xE44858", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xE448F4", Offset = "0xE448F4", VA = "0xE448F4")]
		public UiInputFieldSetCharacterLimit()
		{
		}
	}
	[Token(Token = "0x20004A9")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the Hide Mobile Input property of a UI InputField component.")]
	public class UiInputFieldSetHideMobileInput : ComponentAction<InputField>
	{
		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.TextArea)]
		[Tooltip("The Hide Mobile Input flag value of the UI InputField component.")]
		public FsmBool hideMobileInput;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool originalValue;

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xE4493C", Offset = "0xE4493C", VA = "0xE4493C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xE44974", Offset = "0xE44974", VA = "0xE44974", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xE44A18", Offset = "0xE44A18", VA = "0xE44A18")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xE44AB4", Offset = "0xE44AB4", VA = "0xE44AB4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xE44B50", Offset = "0xE44B50", VA = "0xE44B50")]
		public UiInputFieldSetHideMobileInput()
		{
		}
	}
	[Token(Token = "0x20004AA")]
	[Tooltip("Sets the placeholder of a UI InputField component. Optionally reset on exit")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldSetPlaceHolder : ComponentAction<InputField>
	{
		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The placeholder (any graphic UI Component) for the UI InputField component.")]
		[CheckForComponent(typeof(Graphic))]
		public FsmGameObject placeholder;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Graphic originalValue;

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xE44B98", Offset = "0xE44B98", VA = "0xE44B98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xE44BD0", Offset = "0xE44BD0", VA = "0xE44BD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xE44C74", Offset = "0xE44C74", VA = "0xE44C74")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xE44D6C", Offset = "0xE44D6C", VA = "0xE44D6C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xE44E08", Offset = "0xE44E08", VA = "0xE44E08")]
		public UiInputFieldSetPlaceHolder()
		{
		}
	}
	[Token(Token = "0x20004AB")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the selection color of a UI InputField component. This is the color of the highlighter to show what characters are selected.")]
	public class UiInputFieldSetSelectionColor : ComponentAction<InputField>
	{
		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The color of the highlighter to show what characters are selected for the UI InputField component.")]
		public FsmColor selectionColor;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Color originalValue;

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xE44E50", Offset = "0xE44E50", VA = "0xE44E50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xE44E90", Offset = "0xE44E90", VA = "0xE44E90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xE44FD8", Offset = "0xE44FD8", VA = "0xE44FD8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xE44F44", Offset = "0xE44F44", VA = "0xE44F44")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xE44FDC", Offset = "0xE44FDC", VA = "0xE44FDC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xE4507C", Offset = "0xE4507C", VA = "0xE4507C")]
		public UiInputFieldSetSelectionColor()
		{
		}
	}
	[Token(Token = "0x20004AC")]
	[Tooltip("Sets the text value of a UI InputField component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldSetText : ComponentAction<InputField>
	{
		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The text of the UI InputField component.")]
		[UIHint(UIHint.TextArea)]
		public FsmString text;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string originalString;

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xE450C4", Offset = "0xE450C4", VA = "0xE450C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xE45104", Offset = "0xE45104", VA = "0xE45104", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xE45258", Offset = "0xE45258", VA = "0xE45258", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xE451BC", Offset = "0xE451BC", VA = "0xE451BC")]
		private void DoSetTextValue()
		{
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xE4525C", Offset = "0xE4525C", VA = "0xE4525C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xE452F8", Offset = "0xE452F8", VA = "0xE452F8")]
		public UiInputFieldSetText()
		{
		}
	}
	[Token(Token = "0x20004AD")]
	[Tooltip("Sets the raycast target of a UI Raw Image component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiRawImageSetRaycastTarget : ComponentAction<RawImage>
	{
		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Image))]
		[Tooltip("The GameObject with the Raw Image UI component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The raycast target value to be set")]
		[RequiredField]
		public FsmBool raycastTarget;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool originalBool;

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xE45340", Offset = "0xE45340", VA = "0xE45340", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xE45384", Offset = "0xE45384", VA = "0xE45384", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xE45420", Offset = "0xE45420", VA = "0xE45420")]
		private void DoSetRaycastTarget()
		{
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xE45460", Offset = "0xE45460", VA = "0xE45460", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xE454A8", Offset = "0xE454A8", VA = "0xE454A8")]
		public UiRawImageSetRaycastTarget()
		{
		}
	}
	[Token(Token = "0x20004AE")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the texture of a UI RawImage component.")]
	public class UiRawImageSetTexture : ComponentAction<RawImage>
	{
		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI RawImage component.")]
		[CheckForComponent(typeof(RawImage))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The texture of the UI RawImage component.")]
		public FsmTexture texture;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RawImage _texture;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture _originalTexture;

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xE454F0", Offset = "0xE454F0", VA = "0xE454F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xE45528", Offset = "0xE45528", VA = "0xE45528", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xE455CC", Offset = "0xE455CC", VA = "0xE455CC")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xE45668", Offset = "0xE45668", VA = "0xE45668", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xE45704", Offset = "0xE45704", VA = "0xE45704")]
		public UiRawImageSetTexture()
		{
		}
	}
	[Token(Token = "0x20004AF")]
	[Tooltip("Rebuild a UI Graphic component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiRebuild : ComponentAction<Graphic>
	{
		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Graphic))]
		[RequiredField]
		[Tooltip("The GameObject with the UI Graphic component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("When to Update.")]
		public CanvasUpdate canvasUpdate;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Only Rebuild when state exits.")]
		public bool rebuildOnExit;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Graphic graphic;

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xE4574C", Offset = "0xE4574C", VA = "0xE4574C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xE45778", Offset = "0xE45778", VA = "0xE45778", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xE4580C", Offset = "0xE4580C", VA = "0xE4580C")]
		private void DoAction()
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xE4589C", Offset = "0xE4589C", VA = "0xE4589C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xE458AC", Offset = "0xE458AC", VA = "0xE458AC")]
		public UiRebuild()
		{
		}
	}
	[Token(Token = "0x20004B0")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the direction of a UI Scrollbar component.")]
	public class UiScrollbarGetDirection : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(Scrollbar.Direction))]
		[Tooltip("Store the direction of the UI Scrollbar.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmEnum direction;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Scrollbar scrollbar;

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xE458F4", Offset = "0xE458F4", VA = "0xE458F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xE45924", Offset = "0xE45924", VA = "0xE45924", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xE45A80", Offset = "0xE45A80", VA = "0xE45A80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xE459C4", Offset = "0xE459C4", VA = "0xE459C4")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xE45A84", Offset = "0xE45A84", VA = "0xE45A84")]
		public UiScrollbarGetDirection()
		{
		}
	}
	[Token(Token = "0x20004B1")]
	[Tooltip("Gets the value of a UI Scrollbar component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiScrollbarGetValue : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The position value of the UI Scrollbar.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat value;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Scrollbar scrollbar;

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xE45ACC", Offset = "0xE45ACC", VA = "0xE45ACC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xE45AFC", Offset = "0xE45AFC", VA = "0xE45AFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xE45C24", Offset = "0xE45C24", VA = "0xE45C24", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xE45B9C", Offset = "0xE45B9C", VA = "0xE45B9C")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xE45C28", Offset = "0xE45C28", VA = "0xE45C28")]
		public UiScrollbarGetValue()
		{
		}
	}
	[Token(Token = "0x20004B2")]
	[Tooltip("Catches UI Scrollbar onValueChanged event. Store the new value and/or send events. Event float data will contain the new Scrollbar value")]
	[ActionCategory(ActionCategory.UI)]
	public class UiScrollbarOnValueChanged : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when the UI Scrollbar value changes.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store new value in float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat value;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xE45C70", Offset = "0xE45C70", VA = "0xE45C70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xE45CB8", Offset = "0xE45CB8", VA = "0xE45CB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xE45DF8", Offset = "0xE45DF8", VA = "0xE45DF8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xE45EE8", Offset = "0xE45EE8", VA = "0xE45EE8")]
		public void DoOnValueChanged(float _value)
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xE45F88", Offset = "0xE45F88", VA = "0xE45F88")]
		public UiScrollbarOnValueChanged()
		{
		}
	}
	[Token(Token = "0x20004B3")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the direction of a UI Scrollbar component.")]
	public class UiScrollbarSetDirection : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The direction of the UI Scrollbar.")]
		[ObjectType(typeof(Scrollbar.Direction))]
		public FsmEnum direction;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Include the  RectLayouts. Leave to none for no effect")]
		public FsmBool includeRectLayouts;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Scrollbar.Direction originalValue;

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xE45FD0", Offset = "0xE45FD0", VA = "0xE45FD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xE460A8", Offset = "0xE460A8", VA = "0xE460A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xE46158", Offset = "0xE46158", VA = "0xE46158")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xE462BC", Offset = "0xE462BC", VA = "0xE462BC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xE463A4", Offset = "0xE463A4", VA = "0xE463A4")]
		public UiScrollbarSetDirection()
		{
		}
	}
	[Token(Token = "0x20004B4")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the number of distinct scroll positions allowed for a UI Scrollbar component.")]
	public class UiScrollbarSetNumberOfSteps : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The number of distinct scroll positions allowed for the UI Scrollbar.")]
		[RequiredField]
		public FsmInt value;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int originalValue;

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xE463EC", Offset = "0xE463EC", VA = "0xE463EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xE4642C", Offset = "0xE4642C", VA = "0xE4642C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xE46578", Offset = "0xE46578", VA = "0xE46578", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xE464DC", Offset = "0xE464DC", VA = "0xE464DC")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xE4657C", Offset = "0xE4657C", VA = "0xE4657C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xE46618", Offset = "0xE46618", VA = "0xE46618")]
		public UiScrollbarSetNumberOfSteps()
		{
		}
	}
	[Token(Token = "0x20004B5")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the fractional size of the handle of a UI Scrollbar component. Ranges from 0.0 to 1.0.")]
	public class UiScrollbarSetSize : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The fractional size of the handle for the UI Scrollbar. Ranges from 0.0 to 1.0.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat value;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xE46660", Offset = "0xE46660", VA = "0xE46660", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xE466A0", Offset = "0xE466A0", VA = "0xE466A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xE467FC", Offset = "0xE467FC", VA = "0xE467FC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xE46764", Offset = "0xE46764", VA = "0xE46764")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xE46800", Offset = "0xE46800", VA = "0xE46800", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xE4689C", Offset = "0xE4689C", VA = "0xE4689C")]
		public UiScrollbarSetSize()
		{
		}
	}
	[Token(Token = "0x20004B6")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the position value of a UI Scrollbar component. Ranges from 0.0 to 1.0.")]
	public class UiScrollbarSetValue : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The position's value of the UI Scrollbar component. Ranges from 0.0 to 1.0.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat value;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xE468E4", Offset = "0xE468E4", VA = "0xE468E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xE46924", Offset = "0xE46924", VA = "0xE46924", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xE46A70", Offset = "0xE46A70", VA = "0xE46A70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xE469D8", Offset = "0xE469D8", VA = "0xE469D8")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xE46A74", Offset = "0xE46A74", VA = "0xE46A74", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xE46B10", Offset = "0xE46B10", VA = "0xE46B10")]
		public UiScrollbarSetValue()
		{
		}
	}
	[Token(Token = "0x20004B7")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the UI ScrollRect horizontal flag")]
	public class UiScrollRectSetHorizontal : ComponentAction<ScrollRect>
	{
		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(ScrollRect))]
		[Tooltip("The GameObject with the UI ScrollRect component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The horizontal flag")]
		public FsmBool horizontal;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ScrollRect scrollRect;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool originalValue;

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xE46B58", Offset = "0xE46B58", VA = "0xE46B58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xE46B98", Offset = "0xE46B98", VA = "0xE46B98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0xE46CD4", Offset = "0xE46CD4", VA = "0xE46CD4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xE46C48", Offset = "0xE46C48", VA = "0xE46C48")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xE46CD8", Offset = "0xE46CD8", VA = "0xE46CD8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xE46D68", Offset = "0xE46D68", VA = "0xE46D68")]
		public UiScrollRectSetHorizontal()
		{
		}
	}
	[Token(Token = "0x20004B8")]
	[Tooltip("The normalized scroll position as a Vector2 between (0,0) and (1,1) with (0,0) being the lower left corner.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiScrollRectSetNormalizedPosition : ComponentAction<ScrollRect>
	{
		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(ScrollRect))]
		[Tooltip("The GameObject with the UI ScrollRect component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The position's value of the UI ScrollRect component. Ranges from 0.0 to 1.0.")]
		public FsmVector2 normalizedPosition;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The horizontal position's value of the UI ScrollRect component. Ranges from 0.0 to 1.0.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat horizontalPosition;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The vertical position's value of the UI ScrollRect component. Ranges from 0.0 to 1.0.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat verticalPosition;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ScrollRect scrollRect;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector2 originalValue;

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xE46DB0", Offset = "0xE46DB0", VA = "0xE46DB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xE46E8C", Offset = "0xE46E8C", VA = "0xE46E8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xE47060", Offset = "0xE47060", VA = "0xE47060", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xE46F40", Offset = "0xE46F40", VA = "0xE46F40")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xE47064", Offset = "0xE47064", VA = "0xE47064", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xE47100", Offset = "0xE47100", VA = "0xE47100")]
		public UiScrollRectSetNormalizedPosition()
		{
		}
	}
	[Token(Token = "0x20004B9")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the UI ScrollRect vertical flag")]
	public class UiScrollRectSetVertical : ComponentAction<ScrollRect>
	{
		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(ScrollRect))]
		[Tooltip("The GameObject with the UI ScrollRect component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The vertical flag")]
		public FsmBool vertical;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ScrollRect scrollRect;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool originalValue;

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xE47148", Offset = "0xE47148", VA = "0xE47148", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xE47188", Offset = "0xE47188", VA = "0xE47188", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600160F")]
		[Address(RVA = "0xE472C4", Offset = "0xE472C4", VA = "0xE472C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0xE47238", Offset = "0xE47238", VA = "0xE47238")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0xE472C8", Offset = "0xE472C8", VA = "0xE472C8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0xE47358", Offset = "0xE47358", VA = "0xE47358")]
		public UiScrollRectSetVertical()
		{
		}
	}
	[Token(Token = "0x20004BA")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the direction of a UI Slider component.")]
	public class UiSliderGetDirection : ComponentAction<Slider>
	{
		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Slider component.")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The direction of the UI Slider.")]
		[ObjectType(typeof(Slider.Direction))]
		public FsmEnum direction;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xE473A0", Offset = "0xE473A0", VA = "0xE473A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xE473D0", Offset = "0xE473D0", VA = "0xE473D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xE4752C", Offset = "0xE4752C", VA = "0xE4752C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xE47470", Offset = "0xE47470", VA = "0xE47470")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xE47530", Offset = "0xE47530", VA = "0xE47530")]
		public UiSliderGetDirection()
		{
		}
	}
	[Token(Token = "0x20004BB")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the minimum and maximum limits for the value of a UI Slider component.")]
	public class UiSliderGetMinMax : ComponentAction<Slider>
	{
		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the minimum value of the UI Slider.")]
		public FsmFloat minValue;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the maximum value of the UI Slider.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat maxValue;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xE47578", Offset = "0xE47578", VA = "0xE47578", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xE475B0", Offset = "0xE475B0", VA = "0xE475B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xE47630", Offset = "0xE47630", VA = "0xE47630")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xE476F4", Offset = "0xE476F4", VA = "0xE476F4")]
		public UiSliderGetMinMax()
		{
		}
	}
	[Token(Token = "0x20004BC")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the normalized value (between 0 and 1) of a UI Slider component.")]
	public class UiSliderGetNormalizedValue : ComponentAction<Slider>
	{
		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The normalized value (between 0 and 1) of the UI Slider.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat value;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xE4773C", Offset = "0xE4773C", VA = "0xE4773C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xE4776C", Offset = "0xE4776C", VA = "0xE4776C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xE47894", Offset = "0xE47894", VA = "0xE47894", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0xE4780C", Offset = "0xE4780C", VA = "0xE4780C")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xE47898", Offset = "0xE47898", VA = "0xE47898")]
		public UiSliderGetNormalizedValue()
		{
		}
	}
	[Token(Token = "0x20004BD")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the value of a UI Slider component.")]
	public class UiSliderGetValue : ComponentAction<Slider>
	{
		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The value of the UI Slider component.")]
		[RequiredField]
		public FsmFloat value;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xE478E0", Offset = "0xE478E0", VA = "0xE478E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xE47910", Offset = "0xE47910", VA = "0xE47910", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xE47A40", Offset = "0xE47A40", VA = "0xE47A40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xE479B0", Offset = "0xE479B0", VA = "0xE479B0")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xE47A44", Offset = "0xE47A44", VA = "0xE47A44")]
		public UiSliderGetValue()
		{
		}
	}
	[Token(Token = "0x20004BE")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the wholeNumbers property of a UI Slider component. If true, the Slider is constrained to integer values")]
	public class UiSliderGetWholeNumbers : ComponentAction<Slider>
	{
		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is the Slider constrained to integer values?")]
		public FsmBool wholeNumbers;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if slider is showing integers")]
		public FsmEvent isShowingWholeNumbersEvent;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if slider is showing floats")]
		public FsmEvent isNotShowingWholeNumbersEvent;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xE47A8C", Offset = "0xE47A8C", VA = "0xE47A8C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xE47AD4", Offset = "0xE47AD4", VA = "0xE47AD4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xE47B60", Offset = "0xE47B60", VA = "0xE47B60")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xE47C14", Offset = "0xE47C14", VA = "0xE47C14")]
		public UiSliderGetWholeNumbers()
		{
		}
	}
	[Token(Token = "0x20004BF")]
	[Tooltip("Catches onValueChanged event for a UI Slider component. Store the new value and/or send events. Event float data will contain the new slider value")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderOnValueChangedEvent : ComponentAction<Slider>
	{
		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Slider component.")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when Clicked.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the new value in float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat value;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xE47C5C", Offset = "0xE47C5C", VA = "0xE47C5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xE47CA4", Offset = "0xE47CA4", VA = "0xE47CA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xE47DE4", Offset = "0xE47DE4", VA = "0xE47DE4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xE47ED4", Offset = "0xE47ED4", VA = "0xE47ED4")]
		public void DoOnValueChanged(float _value)
		{
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xE47F74", Offset = "0xE47F74", VA = "0xE47F74")]
		public UiSliderOnValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x20004C0")]
	[Tooltip("Sets the direction of a UI Slider component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderSetDirection : ComponentAction<Slider>
	{
		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The direction of the UI Slider component.")]
		[RequiredField]
		[ObjectType(typeof(Slider.Direction))]
		public FsmEnum direction;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Include the  RectLayouts. Leave to none for no effect")]
		public FsmBool includeRectLayouts;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Slider.Direction originalValue;

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xE47FBC", Offset = "0xE47FBC", VA = "0xE47FBC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xE48094", Offset = "0xE48094", VA = "0xE48094", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xE48124", Offset = "0xE48124", VA = "0xE48124")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xE48288", Offset = "0xE48288", VA = "0xE48288", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xE48370", Offset = "0xE48370", VA = "0xE48370")]
		public UiSliderSetDirection()
		{
		}
	}
	[Token(Token = "0x20004C1")]
	[Tooltip("Sets the minimum and maximum limits for the value of a UI Slider component. Optionally resets on exit")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderSetMinMax : ComponentAction<Slider>
	{
		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Slider component.")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The minimum value of the UI Slider component. Leave as None for no effect")]
		public FsmFloat minValue;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The maximum value of the UI Slider component. Leave as None for no effect")]
		public FsmFloat maxValue;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Slider slider;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float originalMinValue;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float originalMaxValue;

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xE483B8", Offset = "0xE483B8", VA = "0xE483B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xE48484", Offset = "0xE48484", VA = "0xE48484", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xE48630", Offset = "0xE48630", VA = "0xE48630", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xE4854C", Offset = "0xE4854C", VA = "0xE4854C")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xE48634", Offset = "0xE48634", VA = "0xE48634", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0xE486E4", Offset = "0xE486E4", VA = "0xE486E4")]
		public UiSliderSetMinMax()
		{
		}
	}
	[Token(Token = "0x20004C2")]
	[Tooltip("Sets the normalized value ( between 0 and 1) of a UI Slider component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderSetNormalizedValue : ComponentAction<Slider>
	{
		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The normalized value ( between 0 and 1) of the UI Slider component.")]
		[RequiredField]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat value;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x600163A")]
		[Address(RVA = "0xE4872C", Offset = "0xE4872C", VA = "0xE4872C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0xE4876C", Offset = "0xE4876C", VA = "0xE4876C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600163C")]
		[Address(RVA = "0xE488B8", Offset = "0xE488B8", VA = "0xE488B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600163D")]
		[Address(RVA = "0xE48820", Offset = "0xE48820", VA = "0xE48820")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0xE488BC", Offset = "0xE488BC", VA = "0xE488BC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xE48958", Offset = "0xE48958", VA = "0xE48958")]
		public UiSliderSetNormalizedValue()
		{
		}
	}
	[Token(Token = "0x20004C3")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the value of a UI Slider component.")]
	public class UiSliderSetValue : ComponentAction<Slider>
	{
		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The value of the UI Slider component.")]
		public FsmFloat value;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x6001640")]
		[Address(RVA = "0xE489A0", Offset = "0xE489A0", VA = "0xE489A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0xE489E0", Offset = "0xE489E0", VA = "0xE489E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xE48B40", Offset = "0xE48B40", VA = "0xE48B40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xE48AA0", Offset = "0xE48AA0", VA = "0xE48AA0")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0xE48B44", Offset = "0xE48B44", VA = "0xE48B44", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0xE48BE8", Offset = "0xE48BE8", VA = "0xE48BE8")]
		public UiSliderSetValue()
		{
		}
	}
	[Token(Token = "0x20004C4")]
	[Tooltip("Sets the wholeNumbers property of a UI Slider component. This defines if the slider will be constrained to integer values.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderSetWholeNumbers : ComponentAction<Slider>
	{
		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Should the slider be constrained to integer values?")]
		public FsmBool wholeNumbers;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool originalValue;

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xE48C30", Offset = "0xE48C30", VA = "0xE48C30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xE48C68", Offset = "0xE48C68", VA = "0xE48C68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0xE48D04", Offset = "0xE48D04", VA = "0xE48D04")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xE48DA0", Offset = "0xE48DA0", VA = "0xE48DA0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xE48E3C", Offset = "0xE48E3C", VA = "0xE48E3C")]
		public UiSliderSetWholeNumbers()
		{
		}
	}
	[Token(Token = "0x20004C5")]
	[Tooltip("Gets the text value of a UI Text component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiTextGetText : ComponentAction<Text>
	{
		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Text))]
		[Tooltip("The GameObject with the UI Text component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The text value of the UI Text component.")]
		public FsmString text;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Runs every frame. Useful to animate values over time.")]
		public bool everyFrame;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Text uiText;

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xE48E84", Offset = "0xE48E84", VA = "0xE48E84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xE48EA8", Offset = "0xE48EA8", VA = "0xE48EA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xE48FEC", Offset = "0xE48FEC", VA = "0xE48FEC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xE48F48", Offset = "0xE48F48", VA = "0xE48F48")]
		private void DoGetTextValue()
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xE48FF0", Offset = "0xE48FF0", VA = "0xE48FF0")]
		public UiTextGetText()
		{
		}
	}
	[Token(Token = "0x20004C6")]
	[Tooltip("Sets the text value of a UI Text component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiTextSetText : ComponentAction<Text>
	{
		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Text))]
		[Tooltip("The GameObject with the UI Text component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.TextArea)]
		[Tooltip("The text of the UI Text component.")]
		public FsmString text;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Text uiText;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string originalString;

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xE49038", Offset = "0xE49038", VA = "0xE49038", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xE49078", Offset = "0xE49078", VA = "0xE49078", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xE491E4", Offset = "0xE491E4", VA = "0xE491E4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xE49140", Offset = "0xE49140", VA = "0xE49140")]
		private void DoSetTextValue()
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xE491E8", Offset = "0xE491E8", VA = "0xE491E8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xE4928C", Offset = "0xE4928C", VA = "0xE4928C")]
		public UiTextSetText()
		{
		}
	}
	[Token(Token = "0x20004C7")]
	[Tooltip("Gets the isOn value of a UI Toggle component. Optionally send events")]
	[ActionCategory(ActionCategory.UI)]
	public class UiToggleGetIsOn : ComponentAction<Toggle>
	{
		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Toggle))]
		[Tooltip("The GameObject with the UI Toggle component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The isOn Value of the UI Toggle component.")]
		[UIHint(UIHint.Variable)]
		public FsmBool value;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when isOn Value is true.")]
		public FsmEvent isOnEvent;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent when isOn Value is false.")]
		public FsmEvent isOffEvent;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Toggle _toggle;

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xE492D4", Offset = "0xE492D4", VA = "0xE492D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0xE49304", Offset = "0xE49304", VA = "0xE49304", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0xE49454", Offset = "0xE49454", VA = "0xE49454", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0xE493A4", Offset = "0xE493A4", VA = "0xE493A4")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xE49458", Offset = "0xE49458", VA = "0xE49458")]
		public UiToggleGetIsOn()
		{
		}
	}
	[Token(Token = "0x20004C8")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Catches onValueChanged event in a UI Toggle component. Store the new value and/or send events. Event bool data will contain the new Toggle value")]
	public class UiToggleOnValueChangedEvent : ComponentAction<Toggle>
	{
		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Toggle))]
		[Tooltip("The GameObject with the UI Toggle component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when the value changes.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the new value in bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool value;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Toggle toggle;

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xE494A0", Offset = "0xE494A0", VA = "0xE494A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xE494E8", Offset = "0xE494E8", VA = "0xE494E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xE4972C", Offset = "0xE4972C", VA = "0xE4972C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xE4981C", Offset = "0xE4981C", VA = "0xE4981C")]
		public void DoOnValueChanged(bool _value)
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xE498B8", Offset = "0xE498B8", VA = "0xE498B8")]
		public UiToggleOnValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x20004C9")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the isOn property of a UI Toggle component.")]
	public class UiToggleSetIsOn : ComponentAction<Toggle>
	{
		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Toggle))]
		[RequiredField]
		[Tooltip("The GameObject with the UI Toggle component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Should the toggle be on?")]
		public FsmBool isOn;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Toggle _toggle;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool _originalValue;

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xE49900", Offset = "0xE49900", VA = "0xE49900", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xE49938", Offset = "0xE49938", VA = "0xE49938", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0xE499C4", Offset = "0xE499C4", VA = "0xE499C4")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xE49A68", Offset = "0xE49A68", VA = "0xE49A68", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0xE49B04", Offset = "0xE49B04", VA = "0xE49B04")]
		public UiToggleSetIsOn()
		{
		}
	}
	[Token(Token = "0x20004CA")]
	[Tooltip("Gets a Component attached to a GameObject and stores it in an Object variable. NOTE: Set the Object variable's Object Type to get a component of that type. E.g., set Object Type to UnityEngine.AudioListener to get the AudioListener component on the camera.")]
	[ActionCategory(ActionCategory.UnityObject)]
	public class GetComponent : FsmStateAction
	{
		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the component in an Object variable.\nNOTE: Set theObject variable's Object Type to get a component of that type. E.g., set Object Type to UnityEngine.AudioListener to get the AudioListener component on the camera.")]
		public FsmObject storeComponent;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xE49B4C", Offset = "0xE49B4C", VA = "0xE49B4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xE49B7C", Offset = "0xE49B7C", VA = "0xE49B7C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0xE49C90", Offset = "0xE49C90", VA = "0xE49C90", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xE49BA8", Offset = "0xE49BA8", VA = "0xE49BA8")]
		private void DoGetComponent()
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xE49C94", Offset = "0xE49C94", VA = "0xE49C94")]
		public GetComponent()
		{
		}
	}
	[Token(Token = "0x20004CB")]
	[ActionTarget(typeof(GameObject), "targetProperty", false)]
	[ActionTarget(typeof(Component), "targetProperty", false)]
	[ActionCategory(ActionCategory.UnityObject)]
	[Tooltip("Gets the value of any public property or field on the targeted Unity Object and stores it in a variable. E.g., Drag and drop any component attached to a Game Object to access its properties.")]
	public class GetProperty : FsmStateAction
	{
		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("TargetObject:\nAny object derived from UnityEngine.Object. For example, you can drag a Component from the Unity Inspector into this field. HINT: Use\u00a0{{Lock}}\u00a0to lock the current\u00a0FSM selection if you need to drag a component from another GameObject.\nProperty:\nUse the property selection menu to select the property to get. Note: You can drill into the property, e.g., transform.localPosition.x.\nStore Result:\nStore the result in a variable.")]
		public FsmProperty targetProperty;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if the property is changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xE49C9C", Offset = "0xE49C9C", VA = "0xE49C9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xE49D10", Offset = "0xE49D10", VA = "0xE49D10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0xE49D4C", Offset = "0xE49D4C", VA = "0xE49D4C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xE49D68", Offset = "0xE49D68", VA = "0xE49D68")]
		public GetProperty()
		{
		}
	}
	[Token(Token = "0x20004CC")]
	[ActionCategory(ActionCategory.UnityObject)]
	[Tooltip("Sets the value of an Object Variable.")]
	public class SetObjectValue : FsmStateAction
	{
		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Object Variable to set.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmObject objectVariable;

		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The value.")]
		public FsmObject objectValue;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xE49D70", Offset = "0xE49D70", VA = "0xE49D70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xE49DA0", Offset = "0xE49DA0", VA = "0xE49DA0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xE49E00", Offset = "0xE49E00", VA = "0xE49E00", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0xE49E38", Offset = "0xE49E38", VA = "0xE49E38")]
		public SetObjectValue()
		{
		}
	}
	[Token(Token = "0x20004CD")]
	[ActionTarget(typeof(GameObject), "targetProperty", false)]
	[ActionTarget(typeof(Component), "targetProperty", false)]
	[ActionCategory(ActionCategory.UnityObject)]
	[Tooltip("Sets the value of any public property or field on the targeted Unity Object. E.g., Drag and drop any component attached to a Game Object to access its properties.")]
	public class SetProperty : FsmStateAction
	{
		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Target Property. See below for more details.")]
		public FsmProperty targetProperty;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xE49E40", Offset = "0xE49E40", VA = "0xE49E40", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xE49EB8", Offset = "0xE49EB8", VA = "0xE49EB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xE49EF4", Offset = "0xE49EF4", VA = "0xE49EF4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xE49F10", Offset = "0xE49F10", VA = "0xE49F10")]
		public SetProperty()
		{
		}
	}
	[Token(Token = "0x20004CE")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of a Vector2 Variable in the PlayMaker Log Window.")]
	public class DebugVector2 : FsmStateAction
	{
		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Prints the value of a Vector2 variable in the PlayMaker log window.")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xE49F18", Offset = "0xE49F18", VA = "0xE49F18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xE49F28", Offset = "0xE49F28", VA = "0xE49F28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xE4A000", Offset = "0xE4A000", VA = "0xE4A000")]
		public DebugVector2()
		{
		}
	}
	[Token(Token = "0x20004CF")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Get Vector2 Length.")]
	public class GetVector2Length : FsmStateAction
	{
		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to get the length from")]
		public FsmVector2 vector2;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Vector2 the length")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeLength;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xE4A008", Offset = "0xE4A008", VA = "0xE4A008", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0xE4A038", Offset = "0xE4A038", VA = "0xE4A038", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xE4A0E0", Offset = "0xE4A0E0", VA = "0xE4A0E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xE4A064", Offset = "0xE4A064", VA = "0xE4A064")]
		private void DoVectorLength()
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xE4A0E4", Offset = "0xE4A0E4", VA = "0xE4A0E4")]
		public GetVector2Length()
		{
		}
	}
	[Token(Token = "0x20004D0")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Get the XY channels of a Vector2 Variable and store them in Float Variables.")]
	public class GetVector2XY : FsmStateAction
	{
		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector2 source")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The x component")]
		public FsmFloat storeX;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The y component")]
		public FsmFloat storeY;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xE4A0EC", Offset = "0xE4A0EC", VA = "0xE4A0EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xE4A12C", Offset = "0xE4A12C", VA = "0xE4A12C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xE4A194", Offset = "0xE4A194", VA = "0xE4A194", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xE4A168", Offset = "0xE4A168", VA = "0xE4A168")]
		private void DoGetVector2XYZ()
		{
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xE4A1C0", Offset = "0xE4A1C0", VA = "0xE4A1C0")]
		public GetVector2XY()
		{
		}
	}
	[Token(Token = "0x20004D1")]
	[Tooltip("Select a Random Vector2 from a Vector2 array.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class SelectRandomVector2 : FsmStateAction
	{
		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A possible Vector2 choice.")]
		[CompoundArray("Vectors", "Vector", "Weight")]
		public FsmVector2[] vector2Array;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this Vector2 being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the selected Vector2 in a Vector2 Variable.")]
		public FsmVector2 storeVector2;

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xE4A1C8", Offset = "0xE4A1C8", VA = "0xE4A1C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xE4A34C", Offset = "0xE4A34C", VA = "0xE4A34C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xE4A368", Offset = "0xE4A368", VA = "0xE4A368")]
		private void DoSelectRandom()
		{
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xE4A3DC", Offset = "0xE4A3DC", VA = "0xE4A3DC")]
		public SelectRandomVector2()
		{
		}
	}
	[Token(Token = "0x20004D2")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Sets the value of a Vector2 Variable.")]
	public class SetVector2Value : FsmStateAction
	{
		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector2 target")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The vector2 source")]
		[RequiredField]
		public FsmVector2 vector2Value;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xE4A3E4", Offset = "0xE4A3E4", VA = "0xE4A3E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xE4A414", Offset = "0xE4A414", VA = "0xE4A414", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xE4A450", Offset = "0xE4A450", VA = "0xE4A450", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xE4A478", Offset = "0xE4A478", VA = "0xE4A478")]
		public SetVector2Value()
		{
		}
	}
	[Token(Token = "0x20004D3")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Sets the XY channels of a Vector2 Variable. To leave any channel unchanged, set variable to 'None'.")]
	public class SetVector2XY : FsmStateAction
	{
		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector2 target")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector2 source")]
		public FsmVector2 vector2Value;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component. Override vector2Value if set")]
		public FsmFloat x;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component.Override vector2Value if set")]
		public FsmFloat y;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xE4A480", Offset = "0xE4A480", VA = "0xE4A480", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xE4A54C", Offset = "0xE4A54C", VA = "0xE4A54C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0xE4A61C", Offset = "0xE4A61C", VA = "0xE4A61C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0xE4A578", Offset = "0xE4A578", VA = "0xE4A578")]
		private void DoSetVector2XYZ()
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0xE4A620", Offset = "0xE4A620", VA = "0xE4A620")]
		public SetVector2XY()
		{
		}
	}
	[Token(Token = "0x20004D4")]
	[Tooltip("Adds a value to Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2Add : FsmStateAction
	{
		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector2 target")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The vector2 to add")]
		public FsmVector2 addVector;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Add the value on a per second bases.")]
		public bool perSecond;

		[Token(Token = "0x6001690")]
		[Address(RVA = "0xE4A628", Offset = "0xE4A628", VA = "0xE4A628", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xE4A6B0", Offset = "0xE4A6B0", VA = "0xE4A6B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xE4A728", Offset = "0xE4A728", VA = "0xE4A728", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xE4A6DC", Offset = "0xE4A6DC", VA = "0xE4A6DC")]
		private void DoVector2Add()
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xE4A72C", Offset = "0xE4A72C", VA = "0xE4A72C")]
		public Vector2Add()
		{
		}
	}
	[Token(Token = "0x20004D5")]
	[Tooltip("Adds a XY values to Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2AddXY : FsmStateAction
	{
		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector2 target")]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The x component to add")]
		public FsmFloat addX;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The y component to add")]
		public FsmFloat addY;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[Tooltip("Add the value on a per second bases.")]
		public bool perSecond;

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xE4A734", Offset = "0xE4A734", VA = "0xE4A734", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xE4A78C", Offset = "0xE4A78C", VA = "0xE4A78C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xE4A84C", Offset = "0xE4A84C", VA = "0xE4A84C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xE4A7B8", Offset = "0xE4A7B8", VA = "0xE4A7B8")]
		private void DoVector2AddXYZ()
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xE4A850", Offset = "0xE4A850", VA = "0xE4A850")]
		public Vector2AddXY()
		{
		}
	}
	[Token(Token = "0x20004D6")]
	[Tooltip("Clamps the Magnitude of Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2ClampMagnitude : FsmStateAction
	{
		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector2")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The maximum Magnitude")]
		public FsmFloat maxLength;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600169A")]
		[Address(RVA = "0xE4A858", Offset = "0xE4A858", VA = "0xE4A858", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0xE4A888", Offset = "0xE4A888", VA = "0xE4A888", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0xE4A968", Offset = "0xE4A968", VA = "0xE4A968", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0xE4A8B4", Offset = "0xE4A8B4", VA = "0xE4A8B4")]
		private void DoVector2ClampMagnitude()
		{
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0xE4A96C", Offset = "0xE4A96C", VA = "0xE4A96C")]
		public Vector2ClampMagnitude()
		{
		}
	}
	[Token(Token = "0x20004D7")]
	[Tooltip("Use a high pass filter to isolate sudden changes in a Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2HighPassFilter : FsmStateAction
	{
		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector2 Variable to filter. Should generally come from some constantly updated input.")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have.")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 filteredVector;

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xE4A974", Offset = "0xE4A974", VA = "0xE4A974", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xE4A9AC", Offset = "0xE4A9AC", VA = "0xE4A9AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xE4A9CC", Offset = "0xE4A9CC", VA = "0xE4A9CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xE4AAA0", Offset = "0xE4AAA0", VA = "0xE4AAA0")]
		public Vector2HighPassFilter()
		{
		}
	}
	[Token(Token = "0x20004D8")]
	[Tooltip("Interpolates between 2 Vector2 values over a specified Time.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2Interpolate : FsmStateAction
	{
		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation type")]
		public InterpolationType mode;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector to interpolate from")]
		[RequiredField]
		public FsmVector2 fromVector;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The vector to interpolate to")]
		[RequiredField]
		public FsmVector2 toVector;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("the interpolate time")]
		[RequiredField]
		public FsmFloat time;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("the interpolated result")]
		public FsmVector2 storeResult;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("This event is fired when the interpolation is done.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale")]
		public bool realTime;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xE4AAA8", Offset = "0xE4AAA8", VA = "0xE4AAA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xE4AB94", Offset = "0xE4AB94", VA = "0xE4AB94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xE4ABE0", Offset = "0xE4ABE0", VA = "0xE4ABE0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xE4AD00", Offset = "0xE4AD00", VA = "0xE4AD00")]
		public Vector2Interpolate()
		{
		}
	}
	[Token(Token = "0x20004D9")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Reverses the direction of a Vector2 Variable. Same as multiplying by -1.")]
	public class Vector2Invert : FsmStateAction
	{
		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector to invert")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0xE4AD08", Offset = "0xE4AD08", VA = "0xE4AD08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xE4AD2C", Offset = "0xE4AD2C", VA = "0xE4AD2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xE4AD64", Offset = "0xE4AD64", VA = "0xE4AD64", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0xE4AD88", Offset = "0xE4AD88", VA = "0xE4AD88")]
		public Vector2Invert()
		{
		}
	}
	[Token(Token = "0x20004DA")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Linearly interpolates between 2 vectors.")]
	public class Vector2Lerp : FsmStateAction
	{
		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("First Vector.")]
		public FsmVector2 fromVector;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Second Vector.")]
		public FsmVector2 toVector;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Interpolate between From Vector and ToVector by this amount. Value is clamped to 0-1 range. 0 = From Vector; 1 = To Vector; 0.5 = half way between.")]
		public FsmFloat amount;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Store the result in this vector variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeResult;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if any of the values are changing.")]
		public bool everyFrame;

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xE4AD90", Offset = "0xE4AD90", VA = "0xE4AD90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xE4AE4C", Offset = "0xE4AE4C", VA = "0xE4AE4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xE4AEE8", Offset = "0xE4AEE8", VA = "0xE4AEE8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0xE4AE78", Offset = "0xE4AE78", VA = "0xE4AE78")]
		private void DoVector2Lerp()
		{
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0xE4AEEC", Offset = "0xE4AEEC", VA = "0xE4AEEC")]
		public Vector2Lerp()
		{
		}
	}
	[Token(Token = "0x20004DB")]
	[Tooltip("Use a low pass filter to reduce the influence of sudden changes in a Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2LowPassFilter : FsmStateAction
	{
		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector2 Variable to filter. Should generally come from some constantly updated input")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have. E.g., 0.1 keeps 10 percent of the unfiltered vector and 90 percent of the previously filtered value")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 filteredVector;

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xE4AEF4", Offset = "0xE4AEF4", VA = "0xE4AEF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0xE4AF2C", Offset = "0xE4AF2C", VA = "0xE4AF2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0xE4AF4C", Offset = "0xE4AF4C", VA = "0xE4AF4C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0xE4B018", Offset = "0xE4B018", VA = "0xE4B018")]
		public Vector2LowPassFilter()
		{
		}
	}
	[Token(Token = "0x20004DC")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Moves a Vector2 towards a Target. Optionally sends an event when successful.")]
	public class Vector2MoveTowards : FsmStateAction
	{
		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Vector2 to Move")]
		public FsmVector2 source;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A target Vector2 to move towards.")]
		public FsmVector2 target;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 20f)]
		[Tooltip("The maximum movement speed. HINT: You can make this a variable to change it over time.")]
		public FsmFloat maxSpeed;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Distance at which the move is considered finished, and the Finish Event is sent.")]
		[HasFloatSlider(0f, 5f)]
		public FsmFloat finishDistance;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when the Finish Distance is reached.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xE4B020", Offset = "0xE4B020", VA = "0xE4B020", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0xE4B090", Offset = "0xE4B090", VA = "0xE4B090", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xE4B094", Offset = "0xE4B094", VA = "0xE4B094")]
		private void DoMoveTowards()
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0xE4B234", Offset = "0xE4B234", VA = "0xE4B234")]
		public Vector2MoveTowards()
		{
		}
	}
	[Token(Token = "0x20004DD")]
	[Tooltip("Multiplies a Vector2 variable by a Float.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2Multiply : FsmStateAction
	{
		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector to Multiply")]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The multiplication factor")]
		[RequiredField]
		public FsmFloat multiplyBy;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xE4B23C", Offset = "0xE4B23C", VA = "0xE4B23C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0xE4B278", Offset = "0xE4B278", VA = "0xE4B278", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0xE4B2E0", Offset = "0xE4B2E0", VA = "0xE4B2E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xE4B31C", Offset = "0xE4B31C", VA = "0xE4B31C")]
		public Vector2Multiply()
		{
		}
	}
	[Token(Token = "0x20004DE")]
	[Tooltip("Normalizes a Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2Normalize : FsmStateAction
	{
		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector to normalize")]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xE4B324", Offset = "0xE4B324", VA = "0xE4B324", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0xE4B348", Offset = "0xE4B348", VA = "0xE4B348", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xE4B430", Offset = "0xE4B430", VA = "0xE4B430", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xE4B4F4", Offset = "0xE4B4F4", VA = "0xE4B4F4")]
		public Vector2Normalize()
		{
		}
	}
	[Token(Token = "0x20004DF")]
	[Tooltip("Performs most possible operations on 2 Vector2: Dot product, Distance, Angle, Add, Subtract, Multiply, Divide, Min, Max")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2Operator : FsmStateAction
	{
		[Token(Token = "0x20004E0")]
		public enum Vector2Operation
		{
			[Token(Token = "0x400173E")]
			DotProduct,
			[Token(Token = "0x400173F")]
			Distance,
			[Token(Token = "0x4001740")]
			Angle,
			[Token(Token = "0x4001741")]
			Add,
			[Token(Token = "0x4001742")]
			Subtract,
			[Token(Token = "0x4001743")]
			Multiply,
			[Token(Token = "0x4001744")]
			Divide,
			[Token(Token = "0x4001745")]
			Min,
			[Token(Token = "0x4001746")]
			Max
		}

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first vector")]
		[RequiredField]
		public FsmVector2 vector1;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second vector")]
		[RequiredField]
		public FsmVector2 vector2;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The operation")]
		public Vector2Operation operation;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector2 result when it applies.")]
		public FsmVector2 storeVector2Result;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float result when it applies")]
		public FsmFloat storeFloatResult;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xE4B4FC", Offset = "0xE4B4FC", VA = "0xE4B4FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xE4B554", Offset = "0xE4B554", VA = "0xE4B554", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xE4B800", Offset = "0xE4B800", VA = "0xE4B800", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xE4B580", Offset = "0xE4B580", VA = "0xE4B580")]
		private void DoVector2Operator()
		{
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xE4B804", Offset = "0xE4B804", VA = "0xE4B804")]
		public Vector2Operator()
		{
		}
	}
	[Token(Token = "0x20004E1")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Multiplies a Vector2 variable by Time.deltaTime. Useful for frame rate independent motion.")]
	public class Vector2PerSecond : FsmStateAction
	{
		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Vector2")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xE4B814", Offset = "0xE4B814", VA = "0xE4B814", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xE4B83C", Offset = "0xE4B83C", VA = "0xE4B83C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xE4B89C", Offset = "0xE4B89C", VA = "0xE4B89C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xE4B8D0", Offset = "0xE4B8D0", VA = "0xE4B8D0")]
		public Vector2PerSecond()
		{
		}
	}
	[Token(Token = "0x20004E2")]
	[Tooltip("Rotates a Vector2 direction from Current towards Target.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2RotateTowards : FsmStateAction
	{
		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The current direction. This will be the result of the rotation as well.")]
		[RequiredField]
		public FsmVector2 currentDirection;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The direction to reach")]
		[RequiredField]
		public FsmVector2 targetDirection;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Rotation speed in degrees per second")]
		public FsmFloat rotateSpeed;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 current;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 target;

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xE4B8D8", Offset = "0xE4B8D8", VA = "0xE4B8D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xE4B99C", Offset = "0xE4B99C", VA = "0xE4B99C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0xE4B9D4", Offset = "0xE4B9D4", VA = "0xE4B9D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0xE4BA90", Offset = "0xE4BA90", VA = "0xE4BA90")]
		public Vector2RotateTowards()
		{
		}
	}
	[Token(Token = "0x20004E3")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Snap a Vector2 to an angle increment while maintaining length.")]
	public class Vector2SnapToAngle : FsmStateAction
	{
		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool showPreview;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector to snap to an angle.")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[PreviewField("DrawPreview")]
		[Tooltip("Angle increment to snap to.")]
		public FsmFloat snapAngle;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0xE4BA98", Offset = "0xE4BA98", VA = "0xE4BA98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0xE4BAD4", Offset = "0xE4BAD4", VA = "0xE4BAD4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xE4BC5C", Offset = "0xE4BC5C", VA = "0xE4BC5C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xE4BB00", Offset = "0xE4BB00", VA = "0xE4BB00")]
		private void DoSnapToAngle()
		{
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xE4BC60", Offset = "0xE4BC60", VA = "0xE4BC60")]
		public Vector2SnapToAngle()
		{
		}
	}
	[Token(Token = "0x20004E4")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Snap Vector2 coordinates to grid points.")]
	public class Vector2SnapToGrid : FsmStateAction
	{
		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector2 Variable to snap.")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Grid Size.")]
		public FsmFloat gridSize;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xE4BC68", Offset = "0xE4BC68", VA = "0xE4BC68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xE4BCE8", Offset = "0xE4BCE8", VA = "0xE4BCE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xE4BED4", Offset = "0xE4BED4", VA = "0xE4BED4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xE4BD14", Offset = "0xE4BD14", VA = "0xE4BD14")]
		private void DoSnapToGrid()
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xE4BED8", Offset = "0xE4BED8", VA = "0xE4BED8")]
		public Vector2SnapToGrid()
		{
		}
	}
	[Token(Token = "0x20004E5")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Subtracts a Vector2 value from a Vector2 variable.")]
	public class Vector2Subtract : FsmStateAction
	{
		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector2 operand")]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The vector2 to subtract with")]
		public FsmVector2 subtractVector;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0xE4BEE0", Offset = "0xE4BEE0", VA = "0xE4BEE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0xE4BF68", Offset = "0xE4BF68", VA = "0xE4BF68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0xE4BFAC", Offset = "0xE4BFAC", VA = "0xE4BFAC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0xE4BFDC", Offset = "0xE4BFDC", VA = "0xE4BFDC")]
		public Vector2Subtract()
		{
		}
	}
	[Token(Token = "0x20004E6")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Get the XYZ channels of a Vector3 Variable and store them in Float Variables.")]
	public class GetVector3XYZ : FsmStateAction
	{
		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to examine.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store X value in a float variable.")]
		public FsmFloat storeX;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store Y value in a float variable.")]
		public FsmFloat storeY;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store Z value in a float variable.")]
		public FsmFloat storeZ;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0xE4BFE4", Offset = "0xE4BFE4", VA = "0xE4BFE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0xE4C034", Offset = "0xE4C034", VA = "0xE4C034", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0xE4C0D0", Offset = "0xE4C0D0", VA = "0xE4C0D0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0xE4C060", Offset = "0xE4C060", VA = "0xE4C060")]
		private void DoGetVector3XYZ()
		{
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xE4C0D4", Offset = "0xE4C0D4", VA = "0xE4C0D4")]
		public GetVector3XYZ()
		{
		}
	}
	[Token(Token = "0x20004E7")]
	[Tooltip("Get Vector3 Length.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class GetVectorLength : FsmStateAction
	{
		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3")]
		public FsmVector3 vector3;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Store the length (magnitude) of the Vector3 value in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeLength;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0xE4C0DC", Offset = "0xE4C0DC", VA = "0xE4C0DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0xE4C10C", Offset = "0xE4C10C", VA = "0xE4C10C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0xE4C1D8", Offset = "0xE4C1D8", VA = "0xE4C1D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0xE4C138", Offset = "0xE4C138", VA = "0xE4C138")]
		private void DoVectorLength()
		{
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0xE4C1DC", Offset = "0xE4C1DC", VA = "0xE4C1DC")]
		public GetVectorLength()
		{
		}
	}
	[Token(Token = "0x20004E8")]
	[Tooltip("Select a Random Vector3 from a Vector3 array.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class SelectRandomVector3 : FsmStateAction
	{
		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Vectors", "Vector", "Weight")]
		[Tooltip("A possible Vector3 choice.")]
		public FsmVector3[] vector3Array;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this Vector3 being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the selected Vector3 in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 storeVector3;

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0xE4C1E4", Offset = "0xE4C1E4", VA = "0xE4C1E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0xE4C368", Offset = "0xE4C368", VA = "0xE4C368", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0xE4C384", Offset = "0xE4C384", VA = "0xE4C384")]
		private void DoSelectRandomColor()
		{
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0xE4C400", Offset = "0xE4C400", VA = "0xE4C400")]
		public SelectRandomVector3()
		{
		}
	}
	[Token(Token = "0x20004E9")]
	[Tooltip("Sets the value of a Vector3 Variable.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class SetVector3Value : FsmStateAction
	{
		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector3 variable to set.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Value to set variable to.")]
		[RequiredField]
		public FsmVector3 vector3Value;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0xE4C408", Offset = "0xE4C408", VA = "0xE4C408", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0xE4C438", Offset = "0xE4C438", VA = "0xE4C438", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0xE4C490", Offset = "0xE4C490", VA = "0xE4C490", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0xE4C4C4", Offset = "0xE4C4C4", VA = "0xE4C4C4")]
		public SetVector3Value()
		{
		}
	}
	[Token(Token = "0x20004EA")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Sets the XYZ channels of a Vector3 Variable. To leave any channel unchanged, set variable to 'None'.")]
	public class SetVector3XYZ : FsmStateAction
	{
		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector3 variable to set.")]
		[RequiredField]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Set using another Vector3 variable and/or individual channels below.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector3Value;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set X channel.")]
		public FsmFloat x;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set Y channel.")]
		public FsmFloat y;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set Z channel.")]
		public FsmFloat z;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0xE4C4CC", Offset = "0xE4C4CC", VA = "0xE4C4CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0xE4C5C8", Offset = "0xE4C5C8", VA = "0xE4C5C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0xE4C6EC", Offset = "0xE4C6EC", VA = "0xE4C6EC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0xE4C5F4", Offset = "0xE4C5F4", VA = "0xE4C5F4")]
		private void DoSetVector3XYZ()
		{
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0xE4C6F0", Offset = "0xE4C6F0", VA = "0xE4C6F0")]
		public SetVector3XYZ()
		{
		}
	}
	[Token(Token = "0x20004EB")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Adds a value to Vector3 Variable.")]
	public class Vector3Add : FsmStateAction
	{
		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector3 variable to add to.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Vector3 to add.")]
		public FsmVector3 addVector;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Add over one second (multiplies values by Time.deltaTime). Note: Needs Every Frame checked.")]
		public bool perSecond;

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0xE4C6F8", Offset = "0xE4C6F8", VA = "0xE4C6F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0xE4C780", Offset = "0xE4C780", VA = "0xE4C780", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0xE4C84C", Offset = "0xE4C84C", VA = "0xE4C84C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0xE4C7AC", Offset = "0xE4C7AC", VA = "0xE4C7AC")]
		private void DoVector3Add()
		{
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0xE4C850", Offset = "0xE4C850", VA = "0xE4C850")]
		public Vector3Add()
		{
		}
	}
	[Token(Token = "0x20004EC")]
	[Tooltip("Adds a XYZ values to Vector3 Variable.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3AddXYZ : FsmStateAction
	{
		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 Variable to add to.")]
		[RequiredField]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Add to the X axis.")]
		public FsmFloat addX;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Add to the Y axis.")]
		public FsmFloat addY;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Add to the Z axis.")]
		public FsmFloat addZ;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Add over one second (multiplies values by Time.deltaTime). Note: Needs Every Frame checked.")]
		public bool perSecond;

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0xE4C858", Offset = "0xE4C858", VA = "0xE4C858", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0xE4C8CC", Offset = "0xE4C8CC", VA = "0xE4C8CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0xE4C9C8", Offset = "0xE4C9C8", VA = "0xE4C9C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0xE4C8F8", Offset = "0xE4C8F8", VA = "0xE4C8F8")]
		private void DoVector3AddXYZ()
		{
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0xE4C9CC", Offset = "0xE4C9CC", VA = "0xE4C9CC")]
		public Vector3AddXYZ()
		{
		}
	}
	[Token(Token = "0x20004ED")]
	[Tooltip("Clamps the Magnitude of Vector3 Variable.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3ClampMagnitude : FsmStateAction
	{
		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to clamp.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Clamp to this max length.")]
		public FsmFloat maxLength;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0xE4C9D4", Offset = "0xE4C9D4", VA = "0xE4C9D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0xE4CA04", Offset = "0xE4CA04", VA = "0xE4CA04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xE4CB14", Offset = "0xE4CB14", VA = "0xE4CB14", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xE4CA30", Offset = "0xE4CA30", VA = "0xE4CA30")]
		private void DoVector3ClampMagnitude()
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0xE4CB18", Offset = "0xE4CB18", VA = "0xE4CB18")]
		public Vector3ClampMagnitude()
		{
		}
	}
	[Token(Token = "0x20004EE")]
	[Tooltip("Clamps the magnitude of Vector3 variable on the XZ Plane.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3ClampMagnitudeXZ : FsmStateAction
	{
		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 variable to clamp.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Clamp to this max length.")]
		public FsmFloat maxLength;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001701")]
		[Address(RVA = "0xE4CB20", Offset = "0xE4CB20", VA = "0xE4CB20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xE4CB50", Offset = "0xE4CB50", VA = "0xE4CB50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0xE4CC64", Offset = "0xE4CC64", VA = "0xE4CC64", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xE4CB7C", Offset = "0xE4CB7C", VA = "0xE4CB7C")]
		private void DoVector3ClampMagnitudeXZ()
		{
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0xE4CC68", Offset = "0xE4CC68", VA = "0xE4CC68")]
		public Vector3ClampMagnitudeXZ()
		{
		}
	}
	[Token(Token = "0x20004EF")]
	[Tooltip("Use a high pass filter to isolate sudden changes in a Vector3 Variable. Useful when working with Get Device Acceleration to remove the constant effect of gravity.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3HighPassFilter : FsmStateAction
	{
		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector3 Variable to filter. Should generally come from some constantly updated input, e.g., acceleration.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have.")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 filteredVector;

		[Token(Token = "0x6001706")]
		[Address(RVA = "0xE4CC70", Offset = "0xE4CC70", VA = "0xE4CC70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xE4CCA8", Offset = "0xE4CCA8", VA = "0xE4CCA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xE4CD04", Offset = "0xE4CD04", VA = "0xE4CD04", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xE4CE80", Offset = "0xE4CE80", VA = "0xE4CE80")]
		public Vector3HighPassFilter()
		{
		}
	}
	[Token(Token = "0x20004F0")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Interpolates between 2 Vector3 values over a specified Time.")]
	public class Vector3Interpolate : FsmStateAction
	{
		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The type of interpolation to use.")]
		public InterpolationType mode;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The start vector.")]
		public FsmVector3 fromVector;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The end vector.")]
		public FsmVector3 toVector;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("How long it should take to interpolate from start to end.")]
		public FsmFloat time;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Store the interpolated vector in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeResult;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optionally send this event when finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale e.g., if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xE4CE88", Offset = "0xE4CE88", VA = "0xE4CE88", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0xE4CF74", Offset = "0xE4CF74", VA = "0xE4CF74", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xE4CFD4", Offset = "0xE4CFD4", VA = "0xE4CFD4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0xE4D148", Offset = "0xE4D148", VA = "0xE4D148")]
		public Vector3Interpolate()
		{
		}
	}
	[Token(Token = "0x20004F1")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Reverses the direction of a Vector3 Variable. Same as multiplying by -1.")]
	public class Vector3Invert : FsmStateAction
	{
		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector3 variable to invert.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600170E")]
		[Address(RVA = "0xE4D150", Offset = "0xE4D150", VA = "0xE4D150", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0xE4D174", Offset = "0xE4D174", VA = "0xE4D174", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0xE4D1D4", Offset = "0xE4D1D4", VA = "0xE4D1D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0xE4D20C", Offset = "0xE4D20C", VA = "0xE4D20C")]
		public Vector3Invert()
		{
		}
	}
	[Token(Token = "0x20004F2")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Linearly interpolates between 2 vectors.")]
	public class Vector3Lerp : FsmStateAction
	{
		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("First Vector.")]
		public FsmVector3 fromVector;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Second Vector.")]
		public FsmVector3 toVector;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Interpolate between From Vector and ToVector by this amount. Value is clamped to 0-1 range. 0 = From Vector; 1 = To Vector; 0.5 = half way between.")]
		[RequiredField]
		public FsmFloat amount;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in this vector variable.")]
		public FsmVector3 storeResult;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if any of the values are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xE4D214", Offset = "0xE4D214", VA = "0xE4D214", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xE4D2D0", Offset = "0xE4D2D0", VA = "0xE4D2D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xE4D3C0", Offset = "0xE4D3C0", VA = "0xE4D3C0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xE4D2FC", Offset = "0xE4D2FC", VA = "0xE4D2FC")]
		private void DoVector3Lerp()
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xE4D3C4", Offset = "0xE4D3C4", VA = "0xE4D3C4")]
		public Vector3Lerp()
		{
		}
	}
	[Token(Token = "0x20004F3")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Use a low pass filter to reduce the influence of sudden changes in a Vector3 Variable. Useful when working with Get Device Acceleration to isolate gravity.")]
	public class Vector3LowPassFilter : FsmStateAction
	{
		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector3 Variable to filter. Should generally come from some constantly updated input, e.g., acceleration.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have. E.g., 0.1 keeps 10 percent of the unfiltered vector and 90 percent of the previously filtered value.")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 filteredVector;

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xE4D3CC", Offset = "0xE4D3CC", VA = "0xE4D3CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0xE4D404", Offset = "0xE4D404", VA = "0xE4D404", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0xE4D460", Offset = "0xE4D460", VA = "0xE4D460", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0xE4D58C", Offset = "0xE4D58C", VA = "0xE4D58C")]
		public Vector3LowPassFilter()
		{
		}
	}
	[Token(Token = "0x20004F4")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Multiplies a Vector3 variable by a Float.")]
	public class Vector3Multiply : FsmStateAction
	{
		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector3 variable to multiply.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The float to multiply each axis of the Vector3 variable by.")]
		public FsmFloat multiplyBy;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600171B")]
		[Address(RVA = "0xE4D594", Offset = "0xE4D594", VA = "0xE4D594", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0xE4D5D0", Offset = "0xE4D5D0", VA = "0xE4D5D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0xE4D664", Offset = "0xE4D664", VA = "0xE4D664", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0xE4D6D4", Offset = "0xE4D6D4", VA = "0xE4D6D4")]
		public Vector3Multiply()
		{
		}
	}
	[Token(Token = "0x20004F5")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Normalizes a Vector3 Variable. A normalized vector has a length of 1.")]
	public class Vector3Normalize : FsmStateAction
	{
		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 Variable to normalize.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600171F")]
		[Address(RVA = "0xE4D6DC", Offset = "0xE4D6DC", VA = "0xE4D6DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0xE4D700", Offset = "0xE4D700", VA = "0xE4D700", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0xE4D820", Offset = "0xE4D820", VA = "0xE4D820", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0xE4D918", Offset = "0xE4D918", VA = "0xE4D918")]
		public Vector3Normalize()
		{
		}
	}
	[Token(Token = "0x20004F6")]
	[Tooltip("Performs most possible operations on 2 Vector3: Dot product, Cross product, Distance, Angle, Project, Reflect, Add, Subtract, Multiply, Divide, Min, Max")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3Operator : FsmStateAction
	{
		[Token(Token = "0x20004F7")]
		public enum Vector3Operation
		{
			[Token(Token = "0x400179E")]
			DotProduct,
			[Token(Token = "0x400179F")]
			CrossProduct,
			[Token(Token = "0x40017A0")]
			Distance,
			[Token(Token = "0x40017A1")]
			Angle,
			[Token(Token = "0x40017A2")]
			Project,
			[Token(Token = "0x40017A3")]
			Reflect,
			[Token(Token = "0x40017A4")]
			Add,
			[Token(Token = "0x40017A5")]
			Subtract,
			[Token(Token = "0x40017A6")]
			Multiply,
			[Token(Token = "0x40017A7")]
			Divide,
			[Token(Token = "0x40017A8")]
			Min,
			[Token(Token = "0x40017A9")]
			Max
		}

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The first vector in the operation.")]
		public FsmVector3 vector1;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second vector in the operation.")]
		[RequiredField]
		public FsmVector3 vector2;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The operation to perform.")]
		public Vector3Operation operation;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Vector3 Variable.")]
		public FsmVector3 storeVector3Result;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store a float result in a Float Variable (E.g., Dot, Distance, Angle)")]
		public FsmFloat storeFloatResult;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001723")]
		[Address(RVA = "0xE4D920", Offset = "0xE4D920", VA = "0xE4D920", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0xE4D978", Offset = "0xE4D978", VA = "0xE4D978", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0xE4DE20", Offset = "0xE4DE20", VA = "0xE4DE20", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0xE4D9A4", Offset = "0xE4D9A4", VA = "0xE4D9A4")]
		private void DoVector3Operator()
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0xE4DE24", Offset = "0xE4DE24", VA = "0xE4DE24")]
		public Vector3Operator()
		{
		}
	}
	[Token(Token = "0x20004F8")]
	[Tooltip("Multiplies a Vector3 variable by Time.deltaTime. Useful for frame rate independent motion.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3PerSecond : FsmStateAction
	{
		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to multiply by Time.deltaTime.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001728")]
		[Address(RVA = "0xE4EE34", Offset = "0xE4EE34", VA = "0xE4EE34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0xE4EE58", Offset = "0xE4EE58", VA = "0xE4EE58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0xE4EEE4", Offset = "0xE4EEE4", VA = "0xE4EEE4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0xE4EF40", Offset = "0xE4EF40", VA = "0xE4EF40")]
		public Vector3PerSecond()
		{
		}
	}
	[Token(Token = "0x20004F9")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Rotates a Vector3 direction from Current towards Target.")]
	public class Vector3RotateTowards : FsmStateAction
	{
		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The current direction vector.")]
		public FsmVector3 currentDirection;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The target direction vector.")]
		public FsmVector3 targetDirection;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Rotation speed in degrees per second.")]
		[RequiredField]
		public FsmFloat rotateSpeed;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Max Magnitude per second")]
		[RequiredField]
		public FsmFloat maxMagnitude;

		[Token(Token = "0x600172C")]
		[Address(RVA = "0xE4EF48", Offset = "0xE4EF48", VA = "0xE4EF48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0xE4F028", Offset = "0xE4F028", VA = "0xE4F028", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0xE4F10C", Offset = "0xE4F10C", VA = "0xE4F10C")]
		public Vector3RotateTowards()
		{
		}
	}
	[Token(Token = "0x20004FA")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Snap Vector3 coordinates to grid points.")]
	public class Vector3SnapToGrid : FsmStateAction
	{
		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector3 Variable to snap.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Grid Size.")]
		public FsmFloat gridSize;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600172F")]
		[Address(RVA = "0xE4F114", Offset = "0xE4F114", VA = "0xE4F114", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0xE4F194", Offset = "0xE4F194", VA = "0xE4F194", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0xE4F400", Offset = "0xE4F400", VA = "0xE4F400", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xE4F1C0", Offset = "0xE4F1C0", VA = "0xE4F1C0")]
		private void DoSnapToGrid()
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0xE4F404", Offset = "0xE4F404", VA = "0xE4F404")]
		public Vector3SnapToGrid()
		{
		}
	}
	[Token(Token = "0x20004FB")]
	[Tooltip("Subtracts a Vector3 value from a Vector3 variable.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3Subtract : FsmStateAction
	{
		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to subtract from.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector3 to subtract.")]
		[RequiredField]
		public FsmVector3 subtractVector;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001734")]
		[Address(RVA = "0xE4F40C", Offset = "0xE4F40C", VA = "0xE4F40C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0xE4F494", Offset = "0xE4F494", VA = "0xE4F494", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xE4F528", Offset = "0xE4F528", VA = "0xE4F528", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0xE4F598", Offset = "0xE4F598", VA = "0xE4F598")]
		public Vector3Subtract()
		{
		}
	}
	[Token(Token = "0x20004FC")]
	[Tooltip("Get the number of audio tracks in a videoClip. (ReadOnly)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoClipGetAudioTrackCount : FsmStateAction
	{
		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		[UIHint(UIHint.Variable)]
		public FsmObject orVideoClip;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("the number of audio tracks")]
		[UIHint(UIHint.Variable)]
		public FsmInt audioTrackCount;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x6001738")]
		[Address(RVA = "0xE4F5A0", Offset = "0xE4F5A0", VA = "0xE4F5A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0xE4F638", Offset = "0xE4F638", VA = "0xE4F638", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0xE4F88C", Offset = "0xE4F88C", VA = "0xE4F88C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0xE4F800", Offset = "0xE4F800", VA = "0xE4F800")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0xE4F66C", Offset = "0xE4F66C", VA = "0xE4F66C")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0xE4F8A4", Offset = "0xE4F8A4", VA = "0xE4F8A4")]
		public VideoClipGetAudioTrackCount()
		{
		}
	}
	[Token(Token = "0x20004FD")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the length of the VideoClip in frames. (readonly)")]
	public class VideoClipGetFrameCount : FsmStateAction
	{
		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		public FsmObject orVideoClip;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The length of the VideoClip in frames")]
		public FsmInt frameCount;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x600173E")]
		[Address(RVA = "0xE4F8AC", Offset = "0xE4F8AC", VA = "0xE4F8AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0xE4F944", Offset = "0xE4F944", VA = "0xE4F944", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0xE4FB94", Offset = "0xE4FB94", VA = "0xE4FB94", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0xE4FB0C", Offset = "0xE4FB0C", VA = "0xE4FB0C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0xE4F978", Offset = "0xE4F978", VA = "0xE4F978")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0xE4FBAC", Offset = "0xE4FBAC", VA = "0xE4FBAC")]
		public VideoClipGetFrameCount()
		{
		}
	}
	[Token(Token = "0x20004FE")]
	[Tooltip("Get the frame rate of the clip in frames/second. (readonly)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoClipGetFrameRate : FsmStateAction
	{
		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		[UIHint(UIHint.Variable)]
		public FsmObject orVideoClip;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The frame rate of the clip in frames/second")]
		public FsmFloat frameRate;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x6001744")]
		[Address(RVA = "0xE4FBB4", Offset = "0xE4FBB4", VA = "0xE4FBB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0xE4FC4C", Offset = "0xE4FC4C", VA = "0xE4FC4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0xE4FEA0", Offset = "0xE4FEA0", VA = "0xE4FEA0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xE4FE14", Offset = "0xE4FE14", VA = "0xE4FE14")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xE4FC80", Offset = "0xE4FC80", VA = "0xE4FC80")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0xE4FEB8", Offset = "0xE4FEB8", VA = "0xE4FEB8")]
		public VideoClipGetFrameRate()
		{
		}
	}
	[Token(Token = "0x20004FF")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the length of the video clip in seconds. (readonly)")]
	public class VideoClipGetLength : FsmStateAction
	{
		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Or the video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		public FsmObject orVideoClip;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The length of the video clip in seconds")]
		[UIHint(UIHint.Variable)]
		public FsmFloat length;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x600174A")]
		[Address(RVA = "0xE4FEC0", Offset = "0xE4FEC0", VA = "0xE4FEC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xE4FF58", Offset = "0xE4FF58", VA = "0xE4FF58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xE501AC", Offset = "0xE501AC", VA = "0xE501AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0xE50120", Offset = "0xE50120", VA = "0xE50120")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xE4FF8C", Offset = "0xE4FF8C", VA = "0xE4FF8C")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xE501C4", Offset = "0xE501C4", VA = "0xE501C4")]
		public VideoClipGetLength()
		{
		}
	}
	[Token(Token = "0x2000500")]
	[Tooltip("Get the video clip path in the project's assets. (readonly)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoClipGetOriginalPath : FsmStateAction
	{
		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		[UIHint(UIHint.Variable)]
		public FsmObject orVideoClip;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The video clip path in the project's assets")]
		[UIHint(UIHint.Variable)]
		public FsmString originalPath;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x6001750")]
		[Address(RVA = "0xE501CC", Offset = "0xE501CC", VA = "0xE501CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0xE50264", Offset = "0xE50264", VA = "0xE50264", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xE504C8", Offset = "0xE504C8", VA = "0xE504C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xE5042C", Offset = "0xE5042C", VA = "0xE5042C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xE50298", Offset = "0xE50298", VA = "0xE50298")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0xE504E0", Offset = "0xE504E0", VA = "0xE504E0")]
		public VideoClipGetOriginalPath()
		{
		}
	}
	[Token(Token = "0x2000501")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the size in pixels of a videoClip")]
	public class VideoClipGetSize : FsmStateAction
	{
		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		public FsmObject orVideoClip;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The width of the VideoClip")]
		public FsmInt width;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The height of the VideoClip")]
		public FsmInt height;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The width and height of the VideoClip")]
		public FsmVector2 size;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject go;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private VideoPlayer _vp;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private VideoClip _vc;

		[Token(Token = "0x6001756")]
		[Address(RVA = "0xE504E8", Offset = "0xE504E8", VA = "0xE504E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xE505A0", Offset = "0xE505A0", VA = "0xE505A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0xE50884", Offset = "0xE50884", VA = "0xE50884", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0xE50768", Offset = "0xE50768", VA = "0xE50768")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0xE505D4", Offset = "0xE505D4", VA = "0xE505D4")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0xE5089C", Offset = "0xE5089C", VA = "0xE5089C")]
		public VideoClipGetSize()
		{
		}
	}
	[Token(Token = "0x2000502")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Send error event from a VideoPlayer.")]
	public class VideoPlayerErrorEvent : FsmStateAction
	{
		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event sent when VideoPlayer throws an error")]
		public FsmEvent onErrorEvent;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x600175C")]
		[Address(RVA = "0xE508A4", Offset = "0xE508A4", VA = "0xE508A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0xE508CC", Offset = "0xE508CC", VA = "0xE508CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0xE50A78", Offset = "0xE50A78", VA = "0xE50A78", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0xE50B4C", Offset = "0xE50B4C", VA = "0xE50B4C")]
		private void OnErrorReceived(VideoPlayer source, string errorMessage)
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0xE509A8", Offset = "0xE509A8", VA = "0xE509A8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0xE50C0C", Offset = "0xE50C0C", VA = "0xE50C0C")]
		public VideoPlayerErrorEvent()
		{
		}
	}
	[Token(Token = "0x2000503")]
	[Tooltip("Send the framedropped event from a VideoPlayer when playback detects it does not keep up with the time source..")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerFrameDroppedEvent : FsmStateAction
	{
		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event sent when playback detects it does not keep up with the time source.")]
		public FsmEvent onFrameDroppedEvent;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001762")]
		[Address(RVA = "0xE50C14", Offset = "0xE50C14", VA = "0xE50C14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0xE50C3C", Offset = "0xE50C3C", VA = "0xE50C3C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0xE50DE8", Offset = "0xE50DE8", VA = "0xE50DE8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xE50EBC", Offset = "0xE50EBC", VA = "0xE50EBC")]
		private void OnFrameDropped(VideoPlayer source)
		{
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xE50D18", Offset = "0xE50D18", VA = "0xE50D18")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0xE50F5C", Offset = "0xE50F5C", VA = "0xE50F5C")]
		public VideoPlayerFrameDroppedEvent()
		{
		}
	}
	[Token(Token = "0x2000504")]
	[Tooltip("Send the frameReady event from a VideoPlayer when a new frame is ready.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerFrameReadyEvent : FsmStateAction
	{
		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event sent when a new frame is ready.")]
		public FsmEvent onFrameReadyEvent;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xE50F64", Offset = "0xE50F64", VA = "0xE50F64", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xE50F8C", Offset = "0xE50F8C", VA = "0xE50F8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xE51138", Offset = "0xE51138", VA = "0xE51138", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xE5120C", Offset = "0xE5120C", VA = "0xE5120C")]
		private void OnFrameReady(VideoPlayer source, long frameIndex)
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xE51068", Offset = "0xE51068", VA = "0xE51068")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xE512C4", Offset = "0xE512C4", VA = "0xE512C4")]
		public VideoPlayerFrameReadyEvent()
		{
		}
	}
	[Token(Token = "0x2000505")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get how the video content will be stretched to fill the target area.")]
	public class VideoPlayerGetAspectRatio : FsmStateAction
	{
		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The AspectRatio type")]
		[ObjectType(typeof(VideoAspectRatio))]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmEnum aspectRatio;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xE512CC", Offset = "0xE512CC", VA = "0xE512CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xE512FC", Offset = "0xE512FC", VA = "0xE512FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xE514C4", Offset = "0xE514C4", VA = "0xE514C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xE51400", Offset = "0xE51400", VA = "0xE51400")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xE51330", Offset = "0xE51330", VA = "0xE51330")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xE514C8", Offset = "0xE514C8", VA = "0xE514C8")]
		public VideoPlayerGetAspectRatio()
		{
		}
	}
	[Token(Token = "0x2000506")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the Destination for the audio embedded in the video.")]
	public class VideoPlayerGetAudioOutputMode : FsmStateAction
	{
		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[ObjectType(typeof(VideoAudioOutputMode))]
		[Tooltip("The AudioOutputMode type")]
		public FsmEnum audioOutputMode;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xE514D0", Offset = "0xE514D0", VA = "0xE514D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xE51558", Offset = "0xE51558", VA = "0xE51558", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xE51720", Offset = "0xE51720", VA = "0xE51720", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xE5165C", Offset = "0xE5165C", VA = "0xE5165C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0xE5158C", Offset = "0xE5158C", VA = "0xE5158C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0xE51724", Offset = "0xE51724", VA = "0xE51724")]
		public VideoPlayerGetAudioOutputMode()
		{
		}
	}
	[Token(Token = "0x2000507")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Number of audio tracks found in the data source currently configured on a videoPlayer. For URL sources, this will only be set once the source preparation is completed. See VideoPlayer.Prepare.")]
	public class VideoPlayerGetAudioTrackCount : FsmStateAction
	{
		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Number of audio tracks found in the data source currently configured")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmInt audioTrackCount;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if source is not prepared")]
		public FsmEvent isNotPrepared;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x600177A")]
		[Address(RVA = "0xE5172C", Offset = "0xE5172C", VA = "0xE5172C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0xE5175C", Offset = "0xE5175C", VA = "0xE5175C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0xE51924", Offset = "0xE51924", VA = "0xE51924", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0xE51860", Offset = "0xE51860", VA = "0xE51860")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0xE51790", Offset = "0xE51790", VA = "0xE51790")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0xE51928", Offset = "0xE51928", VA = "0xE51928")]
		public VideoPlayerGetAudioTrackCount()
		{
		}
	}
	[Token(Token = "0x2000508")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check whether direct-output volume controls are supported for the current platform and video format on a VideoPlayer. (Read Only)")]
	public class VideoPlayerGetCanSetDirectAudioVolume : FsmStateAction
	{
		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool canSetDirectAudioVolume;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if DirectAudioVolume can be set")]
		public FsmEvent canSetDirectAudioVolumeEvent;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if DirectAudioVolume can not be set")]
		public FsmEvent canNotSetDirectAudioVolumeEvent;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001780")]
		[Address(RVA = "0xE51930", Offset = "0xE51930", VA = "0xE51930", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0xE51980", Offset = "0xE51980", VA = "0xE51980", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xE51B50", Offset = "0xE51B50", VA = "0xE51B50", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0xE51A84", Offset = "0xE51A84", VA = "0xE51A84")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0xE519B4", Offset = "0xE519B4", VA = "0xE519B4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xE51B54", Offset = "0xE51B54", VA = "0xE51B54")]
		public VideoPlayerGetCanSetDirectAudioVolume()
		{
		}
	}
	[Token(Token = "0x2000509")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check Whether the playback speed can be changed on a VideoPlayer. (Read Only)")]
	public class VideoPlayerGetCanSetPlaybackSpeed : FsmStateAction
	{
		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool canSetPlaybackSpeed;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if PlaybackSpeed can be set")]
		public FsmEvent canSetTimePlaybackSpeed;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if PlaybackSpeed can not be set")]
		public FsmEvent canNotSetTimePlaybackSpeed;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001786")]
		[Address(RVA = "0xE51B5C", Offset = "0xE51B5C", VA = "0xE51B5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0xE51BAC", Offset = "0xE51BAC", VA = "0xE51BAC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0xE51D7C", Offset = "0xE51D7C", VA = "0xE51D7C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0xE51CB0", Offset = "0xE51CB0", VA = "0xE51CB0")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0xE51BE0", Offset = "0xE51BE0", VA = "0xE51BE0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0xE51D80", Offset = "0xE51D80", VA = "0xE51D80")]
		public VideoPlayerGetCanSetPlaybackSpeed()
		{
		}
	}
	[Token(Token = "0x200050A")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check whether it's possible to set if the player can skips frames to catch up with current time. (Read Only)")]
	public class VideoPlayerGetCanSkipOnDrop : FsmStateAction
	{
		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool canSetSkipOnDrop;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if SkipOnDrop can be set")]
		public FsmEvent canSetSkipOnDropEvent;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if SkipOnDrop can not be set")]
		public FsmEvent canNotSetSkipOnDropEvent;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _canSetSkipOnDrop;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x600178C")]
		[Address(RVA = "0xE51D88", Offset = "0xE51D88", VA = "0xE51D88", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0xE51DD8", Offset = "0xE51DD8", VA = "0xE51DD8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0xE51F68", Offset = "0xE51F68", VA = "0xE51F68", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xE51EDC", Offset = "0xE51EDC", VA = "0xE51EDC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xE51E0C", Offset = "0xE51E0C", VA = "0xE51E0C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xE51F6C", Offset = "0xE51F6C", VA = "0xE51F6C")]
		public VideoPlayerGetCanSkipOnDrop()
		{
		}
	}
	[Token(Token = "0x200050B")]
	[Tooltip("Check whether current time can be changed using the time or timeFrames property on a VideoPlayer. (Read Only)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetCanSetTime : FsmStateAction
	{
		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool canSetTime;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if time can be set")]
		public FsmEvent canSetTimeEvent;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if time can not be set")]
		public FsmEvent canNotSetTimeEvent;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xE51F7C", Offset = "0xE51F7C", VA = "0xE51F7C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xE51FCC", Offset = "0xE51FCC", VA = "0xE51FCC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xE5219C", Offset = "0xE5219C", VA = "0xE5219C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xE520D0", Offset = "0xE520D0", VA = "0xE520D0")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xE52000", Offset = "0xE52000", VA = "0xE52000")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xE521A0", Offset = "0xE521A0", VA = "0xE521A0")]
		public VideoPlayerGetCanSetTime()
		{
		}
	}
	[Token(Token = "0x200050C")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check whether the time source followed by the video player can be changed. (Read Only)")]
	public class VideoPlayerGetCanSetTimeSource : FsmStateAction
	{
		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool canSetTimeSource;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if timeSource can be set")]
		public FsmEvent canSetTimeSourceEvent;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if timeSource can not be set")]
		public FsmEvent canNotSetTimeSourceEvent;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xE521A8", Offset = "0xE521A8", VA = "0xE521A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0xE521F8", Offset = "0xE521F8", VA = "0xE521F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xE523C8", Offset = "0xE523C8", VA = "0xE523C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xE522FC", Offset = "0xE522FC", VA = "0xE522FC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xE5222C", Offset = "0xE5222C", VA = "0xE5222C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xE523CC", Offset = "0xE523CC", VA = "0xE523CC")]
		public VideoPlayerGetCanSetTimeSource()
		{
		}
	}
	[Token(Token = "0x200050D")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check if the VideoPlayer can step forwards into the video content. (Read Only)")]
	public class VideoPlayerGetCanStep : FsmStateAction
	{
		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool canStep;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if time can be set")]
		public FsmEvent canStepEvent;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if time can not be set")]
		public FsmEvent canNotStepEvent;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xE523D4", Offset = "0xE523D4", VA = "0xE523D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0xE52424", Offset = "0xE52424", VA = "0xE52424", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xE525F4", Offset = "0xE525F4", VA = "0xE525F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0xE52528", Offset = "0xE52528", VA = "0xE52528")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xE52458", Offset = "0xE52458", VA = "0xE52458")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0xE525F8", Offset = "0xE525F8", VA = "0xE525F8")]
		public VideoPlayerGetCanStep()
		{
		}
	}
	[Token(Token = "0x200050E")]
	[Tooltip("Static property. Maximum number of audio tracks that can be controlled. When playing audio from a URL, the number of audio tracks is not known in advance. It is up to the user to specify the number of controlled audio tracks through VideoPlayer.controlledAudioTrackCount. Other tracks will be ignored and silenced. In this scenario, VideoPlayer.audioTrackCount will be set to the actual number of tracks during playback, after prepration is complete. See VideoPlayer.Prepare.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetControlledAudioTrackMaxCount : FsmStateAction
	{
		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The maximum number of audio tracks that can be controlled")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmInt controlledAudioTrackMaxCount;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0xE52600", Offset = "0xE52600", VA = "0xE52600", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0xE52624", Offset = "0xE52624", VA = "0xE52624", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0xE52678", Offset = "0xE52678", VA = "0xE52678", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0xE52650", Offset = "0xE52650", VA = "0xE52650")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0xE5267C", Offset = "0xE5267C", VA = "0xE5267C")]
		public VideoPlayerGetControlledAudioTrackMaxCount()
		{
		}
	}
	[Token(Token = "0x200050F")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the frame index currently being displayed by the player.")]
	public class VideoPlayerGetCurrentFrameIndex : FsmStateAction
	{
		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("the frame index currently being displayed by the player.")]
		[UIHint(UIHint.Variable)]
		public FsmInt frameIndex;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0xE52684", Offset = "0xE52684", VA = "0xE52684", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xE526B4", Offset = "0xE526B4", VA = "0xE526B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0xE52840", Offset = "0xE52840", VA = "0xE52840", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0xE527B8", Offset = "0xE527B8", VA = "0xE527B8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0xE526E8", Offset = "0xE526E8", VA = "0xE526E8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xE52844", Offset = "0xE52844", VA = "0xE52844")]
		public VideoPlayerGetCurrentFrameIndex()
		{
		}
	}
	[Token(Token = "0x2000510")]
	[Tooltip("Number of frames in the current video content of a VideoPlayer. Note that this value may be adjusted as the frameCount changes during playback.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetFrameCount : FsmStateAction
	{
		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Number of frames in the current video content of a VideoPlayer. Note that this value may be adjusted as the frameCount changes during playback.")]
		public FsmInt frameCount;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xE5284C", Offset = "0xE5284C", VA = "0xE5284C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xE5287C", Offset = "0xE5287C", VA = "0xE5287C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xE52A08", Offset = "0xE52A08", VA = "0xE52A08", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xE52980", Offset = "0xE52980", VA = "0xE52980")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xE528B0", Offset = "0xE528B0", VA = "0xE528B0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xE52A0C", Offset = "0xE52A0C", VA = "0xE52A0C")]
		public VideoPlayerGetFrameCount()
		{
		}
	}
	[Token(Token = "0x2000511")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the frame rate of the clip or URL in frames/second.")]
	public class VideoPlayerGetFrameRate : FsmStateAction
	{
		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The frame rate of the clip or URL in frames/second.")]
		public FsmFloat frameRate;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xE52A14", Offset = "0xE52A14", VA = "0xE52A14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xE52A44", Offset = "0xE52A44", VA = "0xE52A44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xE52BD0", Offset = "0xE52BD0", VA = "0xE52BD0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xE52B48", Offset = "0xE52B48", VA = "0xE52B48")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xE52A78", Offset = "0xE52A78", VA = "0xE52A78")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xE52BD4", Offset = "0xE52BD4", VA = "0xE52BD4")]
		public VideoPlayerGetFrameRate()
		{
		}
	}
	[Token(Token = "0x2000512")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check Whether the player restarts from the beginning without when it reaches the end of the clip.")]
	public class VideoPlayerGetIsLooping : FsmStateAction
	{
		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool isLooping;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content is looping")]
		public FsmEvent isLoopingEvent;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content is not looping")]
		public FsmEvent isNotLoopingEvent;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isLooping;

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xE52BDC", Offset = "0xE52BDC", VA = "0xE52BDC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xE52C24", Offset = "0xE52C24", VA = "0xE52C24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xE52DE8", Offset = "0xE52DE8", VA = "0xE52DE8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xE52D0C", Offset = "0xE52D0C", VA = "0xE52D0C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xE52C3C", Offset = "0xE52C3C", VA = "0xE52C3C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xE52DEC", Offset = "0xE52DEC", VA = "0xE52DEC")]
		public VideoPlayerGetIsLooping()
		{
		}
	}
	[Token(Token = "0x2000513")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check Whether content is being played. (Read Only)")]
	public class VideoPlayerGetIsPlaying : FsmStateAction
	{
		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPlaying;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content is playing")]
		public FsmEvent isPlayingEvent;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content is not playing")]
		public FsmEvent isNotPlayingEvent;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isPlaying;

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xE52DFC", Offset = "0xE52DFC", VA = "0xE52DFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xE52E44", Offset = "0xE52E44", VA = "0xE52E44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xE53008", Offset = "0xE53008", VA = "0xE53008", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xE52F2C", Offset = "0xE52F2C", VA = "0xE52F2C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xE52E5C", Offset = "0xE52E5C", VA = "0xE52E5C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xE5300C", Offset = "0xE5300C", VA = "0xE5300C")]
		public VideoPlayerGetIsPlaying()
		{
		}
	}
	[Token(Token = "0x2000514")]
	[Tooltip("Check Whether the player has successfully prepared the content to be played. (Read Only)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetIsPrepared : FsmStateAction
	{
		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPrepared;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content is prepared")]
		public FsmEvent isPreparedEvent;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content is not yet prepared")]
		public FsmEvent isNotPreparedEvent;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isPrepared;

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xE5301C", Offset = "0xE5301C", VA = "0xE5301C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xE53064", Offset = "0xE53064", VA = "0xE53064", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xE53228", Offset = "0xE53228", VA = "0xE53228", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xE5314C", Offset = "0xE5314C", VA = "0xE5314C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xE5307C", Offset = "0xE5307C", VA = "0xE5307C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xE5322C", Offset = "0xE5322C", VA = "0xE5322C")]
		public VideoPlayerGetIsPrepared()
		{
		}
	}
	[Token(Token = "0x2000515")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the factor by which the basic playback rate will be multiplied.")]
	public class VideoPlayerGetPlaybackSpeed : FsmStateAction
	{
		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The factor by which the basic playback rate will be multiplied.")]
		public FsmFloat playbackSpeed;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xE5323C", Offset = "0xE5323C", VA = "0xE5323C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xE5326C", Offset = "0xE5326C", VA = "0xE5326C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xE5340C", Offset = "0xE5340C", VA = "0xE5340C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xE53370", Offset = "0xE53370", VA = "0xE53370")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xE532A0", Offset = "0xE532A0", VA = "0xE532A0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xE53410", Offset = "0xE53410", VA = "0xE53410")]
		public VideoPlayerGetPlaybackSpeed()
		{
		}
	}
	[Token(Token = "0x2000516")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check Whether the content will start playing back as soon as the component awakes.")]
	public class VideoPlayerGetPlayOnAwake : FsmStateAction
	{
		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPlayingOnAwake;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content content will start playing back as soon as the component awakes")]
		public FsmEvent isPlayingOnAwakeEvent;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content will not start playing back as soon as the component awakes")]
		public FsmEvent isNotPlayingOnAwakeEvent;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isPlayingOnAwake;

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xE53418", Offset = "0xE53418", VA = "0xE53418", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xE53468", Offset = "0xE53468", VA = "0xE53468", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xE53648", Offset = "0xE53648", VA = "0xE53648", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xE5356C", Offset = "0xE5356C", VA = "0xE5356C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xE5349C", Offset = "0xE5349C", VA = "0xE5349C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xE5364C", Offset = "0xE5364C", VA = "0xE5364C")]
		public VideoPlayerGetPlayOnAwake()
		{
		}
	}
	[Token(Token = "0x2000517")]
	[Tooltip("Get where the video content will be drawn")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetRenderMode : FsmStateAction
	{
		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(VideoRenderMode))]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("where the video content will be drawn")]
		public FsmEnum renderMode;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xE5365C", Offset = "0xE5365C", VA = "0xE5365C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xE5368C", Offset = "0xE5368C", VA = "0xE5368C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xE53854", Offset = "0xE53854", VA = "0xE53854", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xE53790", Offset = "0xE53790", VA = "0xE53790")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xE536C0", Offset = "0xE536C0", VA = "0xE536C0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xE53858", Offset = "0xE53858", VA = "0xE53858")]
		public VideoPlayerGetRenderMode()
		{
		}
	}
	[Token(Token = "0x2000518")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check Whether frameReady events are enabled")]
	public class VideoPlayerGetSendFrameReadyEvents : FsmStateAction
	{
		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool isSendingFrameReadyEvents;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if frameReady events are sent")]
		public FsmEvent isSendingFrameReadyEventsEvent;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if frameReady events are not sent")]
		public FsmEvent isNotSendingFrameReadyEventsEvent;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isSendingFrameReadyEvents;

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xE53860", Offset = "0xE53860", VA = "0xE53860", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xE538A8", Offset = "0xE538A8", VA = "0xE538A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xE53A6C", Offset = "0xE53A6C", VA = "0xE53A6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xE53990", Offset = "0xE53990", VA = "0xE53990")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xE538C0", Offset = "0xE538C0", VA = "0xE538C0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xE53A70", Offset = "0xE53A70", VA = "0xE53A70")]
		public VideoPlayerGetSendFrameReadyEvents()
		{
		}
	}
	[Token(Token = "0x2000519")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check whether the player is allowed to skips frames to catch up with current time.")]
	public class VideoPlayerGetSkipOnDrop : FsmStateAction
	{
		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool skipOnDrop;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if SkipOnDrop is true")]
		public FsmEvent doesSkipOnDropEvent;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if SkipOnDrop is false")]
		public FsmEvent DoNotSkipOnDropEvent;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _canSetSkipOnDrop;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xE53A80", Offset = "0xE53A80", VA = "0xE53A80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xE53AD0", Offset = "0xE53AD0", VA = "0xE53AD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xE53CB0", Offset = "0xE53CB0", VA = "0xE53CB0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xE53BD4", Offset = "0xE53BD4", VA = "0xE53BD4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xE53B04", Offset = "0xE53B04", VA = "0xE53B04")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xE53CB4", Offset = "0xE53CB4", VA = "0xE53CB4")]
		public VideoPlayerGetSkipOnDrop()
		{
		}
	}
	[Token(Token = "0x200051A")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the video source type. It is valid to set both a VideoClip and a URL in the player. This property controls which one will get used for playback. When setting a new clip or URL, the source will automatically change to make the associated type current.")]
	public class VideoPlayerGetSource : FsmStateAction
	{
		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The source type")]
		[ObjectType(typeof(VideoSource))]
		public FsmEnum source;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xE53CC4", Offset = "0xE53CC4", VA = "0xE53CC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0xE53CF4", Offset = "0xE53CF4", VA = "0xE53CF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xE53EBC", Offset = "0xE53EBC", VA = "0xE53EBC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xE53DF8", Offset = "0xE53DF8", VA = "0xE53DF8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xE53D28", Offset = "0xE53D28", VA = "0xE53D28")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xE53EC0", Offset = "0xE53EC0", VA = "0xE53EC0")]
		public VideoPlayerGetSource()
		{
		}
	}
	[Token(Token = "0x200051B")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the Camera GameObject to draw to when VideoPlayer.renderMode is set to either Video.VideoTarget.CameraBackPlane or Video.VideoTarget.CameraFrontPlane.")]
	public class VideoPlayerGetTargetCamera : FsmStateAction
	{
		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Camera GameObject")]
		public FsmGameObject targetCamera;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xE53EC8", Offset = "0xE53EC8", VA = "0xE53EC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xE53EF8", Offset = "0xE53EF8", VA = "0xE53EF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xE540EC", Offset = "0xE540EC", VA = "0xE540EC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0xE53FFC", Offset = "0xE53FFC", VA = "0xE53FFC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xE53F2C", Offset = "0xE53F2C", VA = "0xE53F2C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0xE540F0", Offset = "0xE540F0", VA = "0xE540F0")]
		public VideoPlayerGetTargetCamera()
		{
		}
	}
	[Token(Token = "0x200051C")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the Overall transparency level of the target camera plane video.")]
	public class VideoPlayerGetTargetCameraAlpha : FsmStateAction
	{
		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Overall transparency level")]
		[UIHint(UIHint.Variable)]
		public FsmFloat alpha;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0xE540F8", Offset = "0xE540F8", VA = "0xE540F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0xE54128", Offset = "0xE54128", VA = "0xE54128", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0xE542B4", Offset = "0xE542B4", VA = "0xE542B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0xE5422C", Offset = "0xE5422C", VA = "0xE5422C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xE5415C", Offset = "0xE5415C", VA = "0xE5415C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xE542B8", Offset = "0xE542B8", VA = "0xE542B8")]
		public VideoPlayerGetTargetCameraAlpha()
		{
		}
	}
	[Token(Token = "0x200051D")]
	[Tooltip("Get the Material texture property which is targeted when VideoPlayer.renderMode is set to Video.VideoTarget.MaterialOverride.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetTargetMaterialProperty : FsmStateAction
	{
		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Material texture property")]
		public FsmString property;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xE542C0", Offset = "0xE542C0", VA = "0xE542C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0xE542F0", Offset = "0xE542F0", VA = "0xE542F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xE54490", Offset = "0xE54490", VA = "0xE54490", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0xE543F4", Offset = "0xE543F4", VA = "0xE543F4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0xE54324", Offset = "0xE54324", VA = "0xE54324")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0xE54494", Offset = "0xE54494", VA = "0xE54494")]
		public VideoPlayerGetTargetMaterialProperty()
		{
		}
	}
	[Token(Token = "0x200051E")]
	[Tooltip("Get the RenderTexture to draw to when VideoPlayer.renderMode is set to Video.VideoTarget.RenderTexture.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetTargetTexture : FsmStateAction
	{
		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The RenderTexture")]
		public FsmTexture targetTexture;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001803")]
		[Address(RVA = "0xE5449C", Offset = "0xE5449C", VA = "0xE5449C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xE544CC", Offset = "0xE544CC", VA = "0xE544CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xE5466C", Offset = "0xE5466C", VA = "0xE5466C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xE545D0", Offset = "0xE545D0", VA = "0xE545D0")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0xE54500", Offset = "0xE54500", VA = "0xE54500")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xE54670", Offset = "0xE54670", VA = "0xE54670")]
		public VideoPlayerGetTargetTexture()
		{
		}
	}
	[Token(Token = "0x200051F")]
	[Tooltip("Get Internal texture in which video content is placed. (ReadOnly)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetTexture : FsmStateAction
	{
		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Internal texture in which video content is placed")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmTexture texture;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xE54678", Offset = "0xE54678", VA = "0xE54678", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0xE546A8", Offset = "0xE546A8", VA = "0xE546A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0xE54848", Offset = "0xE54848", VA = "0xE54848", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0xE547AC", Offset = "0xE547AC", VA = "0xE547AC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0xE546DC", Offset = "0xE546DC", VA = "0xE546DC")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xE5484C", Offset = "0xE5484C", VA = "0xE5484C")]
		public VideoPlayerGetTexture()
		{
		}
	}
	[Token(Token = "0x2000520")]
	[Tooltip("Get The player current time in seconds.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetTime : FsmStateAction
	{
		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The player current time in seconds")]
		[UIHint(UIHint.Variable)]
		public FsmFloat time;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xE54854", Offset = "0xE54854", VA = "0xE54854", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xE54884", Offset = "0xE54884", VA = "0xE54884", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xE54A14", Offset = "0xE54A14", VA = "0xE54A14", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xE54988", Offset = "0xE54988", VA = "0xE54988")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xE548B8", Offset = "0xE548B8", VA = "0xE548B8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xE54A18", Offset = "0xE54A18", VA = "0xE54A18")]
		public VideoPlayerGetTime()
		{
		}
	}
	[Token(Token = "0x2000521")]
	[Tooltip("Get The clock that the player follows to derive its current time")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetTimeSource : FsmStateAction
	{
		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The time source type")]
		[ObjectType(typeof(VideoTimeSource))]
		public FsmEnum timeSource;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xE54A20", Offset = "0xE54A20", VA = "0xE54A20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xE54A50", Offset = "0xE54A50", VA = "0xE54A50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xE54C18", Offset = "0xE54C18", VA = "0xE54C18", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xE54B54", Offset = "0xE54B54", VA = "0xE54B54")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xE54A84", Offset = "0xE54A84", VA = "0xE54A84")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xE54C1C", Offset = "0xE54C1C", VA = "0xE54C1C")]
		public VideoPlayerGetTimeSource()
		{
		}
	}
	[Token(Token = "0x2000522")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the file or HTTP URL that the player will read content from.")]
	public class VideoPlayerGetUrl : FsmStateAction
	{
		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The file or HTTP URL that the player will read content from.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString url;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xE54C24", Offset = "0xE54C24", VA = "0xE54C24", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xE54C54", Offset = "0xE54C54", VA = "0xE54C54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xE54DF4", Offset = "0xE54DF4", VA = "0xE54DF4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xE54D58", Offset = "0xE54D58", VA = "0xE54D58")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xE54C88", Offset = "0xE54C88", VA = "0xE54C88")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xE54DF8", Offset = "0xE54DF8", VA = "0xE54DF8")]
		public VideoPlayerGetUrl()
		{
		}
	}
	[Token(Token = "0x2000523")]
	[Tooltip("the videoClip of a VideoPlayer.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetVideoClip : FsmStateAction
	{
		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The video clip of the VideoPlayer")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmObject videoClip;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xE54E00", Offset = "0xE54E00", VA = "0xE54E00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xE54E30", Offset = "0xE54E30", VA = "0xE54E30", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xE54FD0", Offset = "0xE54FD0", VA = "0xE54FD0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xE54F34", Offset = "0xE54F34", VA = "0xE54F34")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xE54E64", Offset = "0xE54E64", VA = "0xE54E64")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xE54FD4", Offset = "0xE54FD4", VA = "0xE54FD4")]
		public VideoPlayerGetVideoClip()
		{
		}
	}
	[Token(Token = "0x2000524")]
	[Tooltip("Check whether the player will wait for the first frame to be loaded into the texture before starting playback when VideoPlayer.playOnAwake is on")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetWaitForFirstFrame : FsmStateAction
	{
		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool isWaitingForFirstFrame;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content will wait for first frame")]
		public FsmEvent isWaitingForFirstFrameEvent;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content will not wait for first frame")]
		public FsmEvent isNotWaitingForFirstFrameEvent;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isWaitingForFirstFrame;

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xE54FDC", Offset = "0xE54FDC", VA = "0xE54FDC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xE5502C", Offset = "0xE5502C", VA = "0xE5502C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xE5520C", Offset = "0xE5520C", VA = "0xE5520C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xE55130", Offset = "0xE55130", VA = "0xE55130")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xE55060", Offset = "0xE55060", VA = "0xE55060")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xE55210", Offset = "0xE55210", VA = "0xE55210")]
		public VideoPlayerGetWaitForFirstFrame()
		{
		}
	}
	[Token(Token = "0x2000525")]
	[Tooltip("Send the loopPointReached event from a VideoPlayer.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerLoopPointReachedEvent : FsmStateAction
	{
		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event invoked when the player reaches the end of the content to play.")]
		public FsmEvent OnLoopPointReachedEvent;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xE55220", Offset = "0xE55220", VA = "0xE55220", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xE55248", Offset = "0xE55248", VA = "0xE55248", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xE553F4", Offset = "0xE553F4", VA = "0xE553F4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xE554C8", Offset = "0xE554C8", VA = "0xE554C8")]
		private void OnLoopPointReached(VideoPlayer source)
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xE55324", Offset = "0xE55324", VA = "0xE55324")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xE55568", Offset = "0xE55568", VA = "0xE55568")]
		public VideoPlayerLoopPointReachedEvent()
		{
		}
	}
	[Token(Token = "0x2000526")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Pauses the playback of a VideoPlayer.")]
	public class VideoPlayerPause : FsmStateAction
	{
		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xE55570", Offset = "0xE55570", VA = "0xE55570", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xE5557C", Offset = "0xE5557C", VA = "0xE5557C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xE55608", Offset = "0xE55608", VA = "0xE55608")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xE556D8", Offset = "0xE556D8", VA = "0xE556D8")]
		public VideoPlayerPause()
		{
		}
	}
	[Token(Token = "0x2000527")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Starts playback of a VideoPlayer. Initiates the preparation if not already done, in which case the playback will not start instantly.")]
	public class VideoPlayerPlay : FsmStateAction
	{
		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xE556E0", Offset = "0xE556E0", VA = "0xE556E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xE556EC", Offset = "0xE556EC", VA = "0xE556EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xE55778", Offset = "0xE55778", VA = "0xE55778")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xE55848", Offset = "0xE55848", VA = "0xE55848")]
		public VideoPlayerPlay()
		{
		}
	}
	[Token(Token = "0x2000528")]
	[Tooltip("Initiates playback engine preparation of a VideoPlayer. The preparation consists of reserving the resources needed for playback, and preloading some or all of the content to be played. After this is done, frames can be received immediately.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerPrepare : FsmStateAction
	{
		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xE55850", Offset = "0xE55850", VA = "0xE55850", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xE5585C", Offset = "0xE5585C", VA = "0xE5585C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xE558E8", Offset = "0xE558E8", VA = "0xE558E8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xE559B8", Offset = "0xE559B8", VA = "0xE559B8")]
		public VideoPlayerPrepare()
		{
		}
	}
	[Token(Token = "0x2000529")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Send event from a VideoPlayer when the player preparation is complete.")]
	public class VideoPlayerPreparedCompletedEvent : FsmStateAction
	{
		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event invoked when the player preparation is complete.")]
		public FsmEvent OnPreparedCompletedEvent;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xE559C0", Offset = "0xE559C0", VA = "0xE559C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xE559E8", Offset = "0xE559E8", VA = "0xE559E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xE55B94", Offset = "0xE55B94", VA = "0xE55B94", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xE55C68", Offset = "0xE55C68", VA = "0xE55C68")]
		private void OnPreparedCompleted(VideoPlayer source)
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xE55AC4", Offset = "0xE55AC4", VA = "0xE55AC4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xE55D08", Offset = "0xE55D08", VA = "0xE55D08")]
		public VideoPlayerPreparedCompletedEvent()
		{
		}
	}
	[Token(Token = "0x200052A")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Send event from a VideoPlayer after a seek operation completes..")]
	public class VideoPlayerSeekCompletedEvent : FsmStateAction
	{
		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event invoked when the player preparation is complete.")]
		public FsmEvent OnSeekCompletedEvent;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xE55D10", Offset = "0xE55D10", VA = "0xE55D10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xE55D38", Offset = "0xE55D38", VA = "0xE55D38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xE55EE4", Offset = "0xE55EE4", VA = "0xE55EE4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xE55FB8", Offset = "0xE55FB8", VA = "0xE55FB8")]
		private void OnSeekCompleted(VideoPlayer source)
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xE55E14", Offset = "0xE55E14", VA = "0xE55E14")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xE56058", Offset = "0xE56058", VA = "0xE56058")]
		public VideoPlayerSeekCompletedEvent()
		{
		}
	}
	[Token(Token = "0x200052B")]
	[Tooltip("Defines how the video content will be stretched to fill the target area.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetAspectRatio : FsmStateAction
	{
		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(VideoAspectRatio))]
		[Tooltip("The AspectRatio type")]
		[RequiredField]
		public FsmEnum aspectRatio;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xE56060", Offset = "0xE56060", VA = "0xE56060", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xE560E0", Offset = "0xE560E0", VA = "0xE560E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0xE561D4", Offset = "0xE561D4", VA = "0xE561D4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xE56104", Offset = "0xE56104", VA = "0xE56104")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xE562A8", Offset = "0xE562A8", VA = "0xE562A8")]
		public VideoPlayerSetAspectRatio()
		{
		}
	}
	[Token(Token = "0x200052C")]
	[Tooltip("Defines Destination for the audio embedded in the video.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetAudioOutputMode : FsmStateAction
	{
		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The AudioOutputMode type")]
		[ObjectType(typeof(VideoAudioOutputMode))]
		public FsmEnum audioOutputMode;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001850")]
		[Address(RVA = "0xE562B0", Offset = "0xE562B0", VA = "0xE562B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0xE56334", Offset = "0xE56334", VA = "0xE56334", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0xE56428", Offset = "0xE56428", VA = "0xE56428")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0xE56358", Offset = "0xE56358", VA = "0xE56358")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xE564FC", Offset = "0xE564FC", VA = "0xE564FC")]
		public VideoPlayerSetAudioOutputMode()
		{
		}
	}
	[Token(Token = "0x200052D")]
	[Tooltip("Set the factor by which the basic playback rate will be multiplied.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetPlaybackSpeed : FsmStateAction
	{
		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The factor by which the basic playback rate will be multiplied.")]
		public FsmFloat playbackSpeed;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001855")]
		[Address(RVA = "0xE56504", Offset = "0xE56504", VA = "0xE56504", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0xE56534", Offset = "0xE56534", VA = "0xE56534", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0xE566D0", Offset = "0xE566D0", VA = "0xE566D0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xE56638", Offset = "0xE56638", VA = "0xE56638")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xE56568", Offset = "0xE56568", VA = "0xE56568")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xE566D4", Offset = "0xE566D4", VA = "0xE566D4")]
		public VideoPlayerSetPlaybackSpeed()
		{
		}
	}
	[Token(Token = "0x200052E")]
	[Tooltip("Set Whether the content will start playing back as soon as the component awakes.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetPlayOnAwake : FsmStateAction
	{
		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		public FsmBool playOnAwake;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xE566DC", Offset = "0xE566DC", VA = "0xE566DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xE5670C", Offset = "0xE5670C", VA = "0xE5670C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xE568AC", Offset = "0xE568AC", VA = "0xE568AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xE56810", Offset = "0xE56810", VA = "0xE56810")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xE56740", Offset = "0xE56740", VA = "0xE56740")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xE568B0", Offset = "0xE568B0", VA = "0xE568B0")]
		public VideoPlayerSetPlayOnAwake()
		{
		}
	}
	[Token(Token = "0x200052F")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set where the video content will be drawn")]
	public class VideoPlayerSetRenderMode : FsmStateAction
	{
		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("where the video content will be drawn")]
		[ObjectType(typeof(VideoRenderMode))]
		[RequiredField]
		public FsmEnum renderMode;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xE568B8", Offset = "0xE568B8", VA = "0xE568B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xE568E8", Offset = "0xE568E8", VA = "0xE568E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xE56AC0", Offset = "0xE56AC0", VA = "0xE56AC0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xE569EC", Offset = "0xE569EC", VA = "0xE569EC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xE5691C", Offset = "0xE5691C", VA = "0xE5691C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xE56AC4", Offset = "0xE56AC4", VA = "0xE56AC4")]
		public VideoPlayerSetRenderMode()
		{
		}
	}
	[Token(Token = "0x2000530")]
	[Tooltip("Set Whether frameReady events are enabled")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetSendFrameReadyEvents : FsmStateAction
	{
		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[RequiredField]
		public FsmBool sendFrameReadyEvents;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001867")]
		[Address(RVA = "0xE56ACC", Offset = "0xE56ACC", VA = "0xE56ACC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xE56AF4", Offset = "0xE56AF4", VA = "0xE56AF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0xE56C78", Offset = "0xE56C78", VA = "0xE56C78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xE56BDC", Offset = "0xE56BDC", VA = "0xE56BDC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xE56B0C", Offset = "0xE56B0C", VA = "0xE56B0C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xE56C7C", Offset = "0xE56C7C", VA = "0xE56C7C")]
		public VideoPlayerSetSendFrameReadyEvents()
		{
		}
	}
	[Token(Token = "0x2000531")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set whether the player is allowed to skips frames to catch up with current time.")]
	public class VideoPlayerSetSkipOnDrop : FsmStateAction
	{
		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Value")]
		public FsmBool skipOnDrop;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xE56C84", Offset = "0xE56C84", VA = "0xE56C84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xE56CB4", Offset = "0xE56CB4", VA = "0xE56CB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xE56E54", Offset = "0xE56E54", VA = "0xE56E54", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0xE56DB8", Offset = "0xE56DB8", VA = "0xE56DB8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0xE56CE8", Offset = "0xE56CE8", VA = "0xE56CE8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xE56E58", Offset = "0xE56E58", VA = "0xE56E58")]
		public VideoPlayerSetSkipOnDrop()
		{
		}
	}
	[Token(Token = "0x2000532")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set the video source type. It is valid to set both a VideoClip and a URL in the player. This property controls which one will get used for playback. When setting a new clip or URL, the source will automatically change to make the associated type current.")]
	public class VideoPlayerSetSource : FsmStateAction
	{
		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The source type")]
		[ObjectType(typeof(VideoSource))]
		public FsmEnum source;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001873")]
		[Address(RVA = "0xE56E60", Offset = "0xE56E60", VA = "0xE56E60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0xE56E90", Offset = "0xE56E90", VA = "0xE56E90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0xE57068", Offset = "0xE57068", VA = "0xE57068", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0xE56F94", Offset = "0xE56F94", VA = "0xE56F94")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xE56EC4", Offset = "0xE56EC4", VA = "0xE56EC4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xE5706C", Offset = "0xE5706C", VA = "0xE5706C")]
		public VideoPlayerSetSource()
		{
		}
	}
	[Token(Token = "0x2000533")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set The Camera GameObject to draw to when VideoPlayer.renderMode is set to either Video.VideoTarget.CameraBackPlane or Video.VideoTarget.CameraFrontPlane.")]
	public class VideoPlayerSetTargetCamera : FsmStateAction
	{
		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Camera GameObject")]
		[CheckForComponent(typeof(Camera))]
		public FsmGameObject targetCamera;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xE57074", Offset = "0xE57074", VA = "0xE57074", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xE570A4", Offset = "0xE570A4", VA = "0xE570A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xE572A0", Offset = "0xE572A0", VA = "0xE572A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xE571A8", Offset = "0xE571A8", VA = "0xE571A8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0xE570D8", Offset = "0xE570D8", VA = "0xE570D8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0xE572A4", Offset = "0xE572A4", VA = "0xE572A4")]
		public VideoPlayerSetTargetCamera()
		{
		}
	}
	[Token(Token = "0x2000534")]
	[Tooltip("Set the Overall transparency level of the target camera plane video.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetTargetCameraAlpha : FsmStateAction
	{
		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Overall transparency level")]
		public FsmFloat alpha;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xE572AC", Offset = "0xE572AC", VA = "0xE572AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xE572DC", Offset = "0xE572DC", VA = "0xE572DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0xE57478", Offset = "0xE57478", VA = "0xE57478", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0xE573E0", Offset = "0xE573E0", VA = "0xE573E0")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0xE57310", Offset = "0xE57310", VA = "0xE57310")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0xE5747C", Offset = "0xE5747C", VA = "0xE5747C")]
		public VideoPlayerSetTargetCameraAlpha()
		{
		}
	}
	[Token(Token = "0x2000535")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set the Material texture property which is targeted when VideoPlayer.renderMode is set to Video.VideoTarget.MaterialOverride.")]
	public class VideoPlayerSetTargetMaterialProperty : FsmStateAction
	{
		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Material texture property")]
		public FsmString property;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001885")]
		[Address(RVA = "0xE57484", Offset = "0xE57484", VA = "0xE57484", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0xE574B4", Offset = "0xE574B4", VA = "0xE574B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0xE57654", Offset = "0xE57654", VA = "0xE57654", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0xE575B8", Offset = "0xE575B8", VA = "0xE575B8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0xE574E8", Offset = "0xE574E8", VA = "0xE574E8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0xE57658", Offset = "0xE57658", VA = "0xE57658")]
		public VideoPlayerSetTargetMaterialProperty()
		{
		}
	}
	[Token(Token = "0x2000536")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set the RenderTexture to draw to when VideoPlayer.renderMode is set to Video.VideoTarget.RenderTexture.")]
	public class VideoPlayerSetTargetTexture : FsmStateAction
	{
		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The RenderTexture")]
		public FsmTexture targetTexture;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x600188B")]
		[Address(RVA = "0xE57660", Offset = "0xE57660", VA = "0xE57660", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0xE57688", Offset = "0xE57688", VA = "0xE57688", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0xE5777C", Offset = "0xE5777C", VA = "0xE5777C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0xE576AC", Offset = "0xE576AC", VA = "0xE576AC")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xE57868", Offset = "0xE57868", VA = "0xE57868")]
		public VideoPlayerSetTargetTexture()
		{
		}
	}
	[Token(Token = "0x2000537")]
	[Tooltip("Sets the time value of a VideoPlayer.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetTime : FsmStateAction
	{
		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The time Value")]
		public FsmFloat time;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if time can not be set")]
		public FsmEvent canNotSetTime;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xE57870", Offset = "0xE57870", VA = "0xE57870", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xE578B0", Offset = "0xE578B0", VA = "0xE578B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xE57AF4", Offset = "0xE57AF4", VA = "0xE57AF4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xE57A44", Offset = "0xE57A44", VA = "0xE57A44")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0xE57974", Offset = "0xE57974", VA = "0xE57974")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xE57AF8", Offset = "0xE57AF8", VA = "0xE57AF8")]
		public VideoPlayerSetTime()
		{
		}
	}
	[Token(Token = "0x2000538")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Sets Time source followed by the VideoPlayer when reading content.")]
	public class VideoPlayerSetTimeSource : FsmStateAction
	{
		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(VideoTimeSource))]
		[Tooltip("The timeSource Value")]
		[RequiredField]
		public FsmEnum timeSource;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if time can not be set")]
		public FsmEvent canNotSetTime;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6001896")]
		[Address(RVA = "0xE57B00", Offset = "0xE57B00", VA = "0xE57B00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xE57B90", Offset = "0xE57B90", VA = "0xE57B90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0xE57D10", Offset = "0xE57D10", VA = "0xE57D10")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xE57C40", Offset = "0xE57C40", VA = "0xE57C40")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0xE57DF8", Offset = "0xE57DF8", VA = "0xE57DF8")]
		public VideoPlayerSetTimeSource()
		{
		}
	}
	[Token(Token = "0x2000539")]
	[Tooltip("Sets the url value of a VideoPlayer.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetUrl : FsmStateAction
	{
		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The url Value")]
		[RequiredField]
		public FsmString url;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xE57E00", Offset = "0xE57E00", VA = "0xE57E00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0xE57E28", Offset = "0xE57E28", VA = "0xE57E28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0xE57F1C", Offset = "0xE57F1C", VA = "0xE57F1C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xE57E4C", Offset = "0xE57E4C", VA = "0xE57E4C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0xE57FB8", Offset = "0xE57FB8", VA = "0xE57FB8")]
		public VideoPlayerSetUrl()
		{
		}
	}
	[Token(Token = "0x200053A")]
	[Tooltip("Sets the VideoClip of a VideoPlayer.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetVideoClip : FsmStateAction
	{
		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(VideoClip))]
		[Tooltip("The VideoClip.")]
		public FsmObject videoClip;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xE57FC0", Offset = "0xE57FC0", VA = "0xE57FC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xE57FCC", Offset = "0xE57FCC", VA = "0xE57FCC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xE5809C", Offset = "0xE5809C", VA = "0xE5809C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0xE5816C", Offset = "0xE5816C", VA = "0xE5816C")]
		public VideoPlayerSetVideoClip()
		{
		}
	}
	[Token(Token = "0x200053B")]
	[Tooltip("Set whether the player will wait for the first frame to be loaded into the texture before starting playback when VideoPlayer.playOnAwake is on")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetWaitForFirstFrame : FsmStateAction
	{
		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool waitForFirstFrame;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0xE58174", Offset = "0xE58174", VA = "0xE58174", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xE5819C", Offset = "0xE5819C", VA = "0xE5819C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0xE58290", Offset = "0xE58290", VA = "0xE58290")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0xE581C0", Offset = "0xE581C0", VA = "0xE581C0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xE5832C", Offset = "0xE5832C", VA = "0xE5832C")]
		public VideoPlayerSetWaitForFirstFrame()
		{
		}
	}
	[Token(Token = "0x200053C")]
	[Tooltip("Send the started event from a VideoPlayer.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerStartedEvent : FsmStateAction
	{
		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event sent when VideoPlayer started")]
		public FsmEvent onStartedEvent;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0xE58334", Offset = "0xE58334", VA = "0xE58334", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xE5835C", Offset = "0xE5835C", VA = "0xE5835C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xE58508", Offset = "0xE58508", VA = "0xE58508", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xE585DC", Offset = "0xE585DC", VA = "0xE585DC")]
		private void OnStarted(VideoPlayer source)
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xE58438", Offset = "0xE58438", VA = "0xE58438")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0xE5867C", Offset = "0xE5867C", VA = "0xE5867C")]
		public VideoPlayerStartedEvent()
		{
		}
	}
	[Token(Token = "0x200053D")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Advances the current time by one frame immediately of a VideoPlayer.")]
	public class VideoPlayerStepForward : FsmStateAction
	{
		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0xE58684", Offset = "0xE58684", VA = "0xE58684", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0xE58690", Offset = "0xE58690", VA = "0xE58690", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xE58724", Offset = "0xE58724", VA = "0xE58724")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xE587F4", Offset = "0xE587F4", VA = "0xE587F4")]
		public VideoPlayerStepForward()
		{
		}
	}
	[Token(Token = "0x200053E")]
	[Tooltip("Stops playback of a VideoPlayer. Pauses the playback and sets the current time to 0.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerStop : FsmStateAction
	{
		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xE587FC", Offset = "0xE587FC", VA = "0xE587FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0xE58808", Offset = "0xE58808", VA = "0xE58808", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0xE58894", Offset = "0xE58894", VA = "0xE58894")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0xE58964", Offset = "0xE58964", VA = "0xE58964")]
		public VideoPlayerStop()
		{
		}
	}
	[Token(Token = "0x200053F")]
	[Tooltip("检查是否有这个全局JToken变量存在")]
	[ActionCategory("GVR")]
	public class gvr_check_empty : FsmStateAction
	{
		[StructLayout(3)]
		[Token(Token = "0x2000540")]
		[CompilerGenerated]
		private struct <WaitAndCheck>d__5 : IAsyncStateMachine
		{
			[Token(Token = "0x4001921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001922")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001923")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public gvr_check_empty <>4__this;

			[Token(Token = "0x4001924")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private object <>u__1;

			[Token(Token = "0x60018BA")]
			[Address(RVA = "0xE58A3C", Offset = "0xE58A3C", VA = "0xE58A3C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60018BB")]
			[Address(RVA = "0xE58D40", Offset = "0xE58D40", VA = "0xE58D40", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float WaitSeconds;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmString JTokenName;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent whenExist;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent whenNotExist;

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0xE5896C", Offset = "0xE5896C", VA = "0xE5896C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0xE58970", Offset = "0xE58970", VA = "0xE58970")]
		[AsyncStateMachine(typeof(<WaitAndCheck>d__5))]
		private void WaitAndCheck()
		{
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0xE58A28", Offset = "0xE58A28", VA = "0xE58A28")]
		public gvr_check_empty()
		{
		}
	}
	[Token(Token = "0x2000541")]
	[ActionCategory("GVR")]
	public class testfsm : FsmStateAction
	{
		[StructLayout(3)]
		[Token(Token = "0x2000542")]
		[CompilerGenerated]
		private struct <test1>d__5 : IAsyncStateMachine
		{
			[Token(Token = "0x4001927")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001928")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001929")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public testfsm <>4__this;

			[Token(Token = "0x400192A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <req>5__2;

			[Token(Token = "0x400192B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private object <>u__1;

			[Token(Token = "0x60018C1")]
			[Address(RVA = "0xE58ED8", Offset = "0xE58ED8", VA = "0xE58ED8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60018C2")]
			[Address(RVA = "0xE591F4", Offset = "0xE591F4", VA = "0xE591F4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool canDo;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		private bool tried;

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xE58D4C", Offset = "0xE58D4C", VA = "0xE58D4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0xE58E04", Offset = "0xE58E04", VA = "0xE58E04", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0xE58E08", Offset = "0xE58E08", VA = "0xE58E08")]
		private UnityWebRequest GetRequest()
		{
			return null;
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0xE58D50", Offset = "0xE58D50", VA = "0xE58D50")]
		[AsyncStateMachine(typeof(<test1>d__5))]
		private void test1()
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0xE58ED0", Offset = "0xE58ED0", VA = "0xE58ED0")]
		public testfsm()
		{
		}
	}
	[Token(Token = "0x2000543")]
	[ActionCategory("GVR")]
	public class ActionRefreshPlayer : FsmStateAction
	{
		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VideoExecutor _executor;

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0xE59200", Offset = "0xE59200", VA = "0xE59200", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0xE59660", Offset = "0xE59660", VA = "0xE59660")]
		public ActionRefreshPlayer()
		{
		}
	}
	[Token(Token = "0x2000544")]
	[ActionCategory("GVR")]
	public class action_guidevideo : FsmStateAction
	{
		[StructLayout(3)]
		[Token(Token = "0x2000545")]
		[CompilerGenerated]
		private struct <restartPlayer>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x4001935")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001936")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001937")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public action_guidevideo <>4__this;

			[Token(Token = "0x4001938")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private object <>u__1;

			[Token(Token = "0x60018C9")]
			[Address(RVA = "0xE5997C", Offset = "0xE5997C", VA = "0xE5997C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60018CA")]
			[Address(RVA = "0xE59CF4", Offset = "0xE59CF4", VA = "0xE59CF4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("总检查时间")]
		public float timeout;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("检查状态的时间间隔")]
		public float checkInterval;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("重启播放器时，需要等待的时间")]
		public float restartInterval;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Fsm videoFsm;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float timeout_remain;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float check_remain;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool played;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string seekPositionMs;

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0xE59668", Offset = "0xE59668", VA = "0xE59668", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0xE59744", Offset = "0xE59744", VA = "0xE59744", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0xE598A8", Offset = "0xE598A8", VA = "0xE598A8")]
		[AsyncStateMachine(typeof(<restartPlayer>d__10))]
		private void restartPlayer()
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0xE59960", Offset = "0xE59960", VA = "0xE59960")]
		public action_guidevideo()
		{
		}
	}
	[Token(Token = "0x2000546")]
	[ActionCategory("GVR")]
	public class Action_PlayerPlay : FsmStateAction
	{
		[Token(Token = "0x2000547")]
		public enum PlayAction
		{
			[Token(Token = "0x400193B")]
			Play,
			[Token(Token = "0x400193C")]
			Pause,
			[Token(Token = "0x400193D")]
			Stop
		}

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public PlayAction _action;

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0xE59D00", Offset = "0xE59D00", VA = "0xE59D00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0xE59ED8", Offset = "0xE59ED8", VA = "0xE59ED8")]
		public Action_PlayerPlay()
		{
		}
	}
	[Token(Token = "0x2000548")]
	[ActionCategory("GVR")]
	public class Action_RefreshPlayStatus : FsmStateAction
	{
		[Token(Token = "0x170000CF")]
		private FsmBool resized
		{
			[Token(Token = "0x60018CD")]
			[Address(RVA = "0xE59EE0", Offset = "0xE59EE0", VA = "0xE59EE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D0")]
		private int video_width
		{
			[Token(Token = "0x60018CE")]
			[Address(RVA = "0xE59F34", Offset = "0xE59F34", VA = "0xE59F34")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D1")]
		private int video_height
		{
			[Token(Token = "0x60018CF")]
			[Address(RVA = "0xE59F94", Offset = "0xE59F94", VA = "0xE59F94")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0xE59FF4", Offset = "0xE59FF4", VA = "0xE59FF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0xE59FF8", Offset = "0xE59FF8", VA = "0xE59FF8")]
		private static bool EnumEquals(Enum enum1, Enum enum2)
		{
			return default(bool);
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0xE5A078", Offset = "0xE5A078", VA = "0xE5A078", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0xE5A354", Offset = "0xE5A354", VA = "0xE5A354")]
		public Action_RefreshPlayStatus()
		{
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x2000549")]
	[AddComponentMenu("Scripts/RootMotion/Baker")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page3.html")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200054A")]
		public enum Mode
		{
			[Token(Token = "0x400194D")]
			AnimationClips,
			[Token(Token = "0x400194E")]
			AnimationStates,
			[Token(Token = "0x400194F")]
			PlayableDirector,
			[Token(Token = "0x4001950")]
			Realtime
		}

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("In AnimationClips, AnimationStates or PlayableDirector mode - the frame rate at which the animation clip will be sampled. In Realtime mode - the frame rate at which the pose will be sampled. With the latter, the frame rate is not guaranteed if the player is not able to reach it.")]
		[Range(1f, 90f)]
		public int frameRate;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Maximum allowed error for keyframe reduction.")]
		[Range(0f, 0.1f)]
		public float keyReductionError;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("AnimationClips mode can be used to bake a batch of AnimationClips directly without the need of setting up an AnimatorController. AnimationStates mode is useful for when you need to set up a more complex rig with layers and AvatarMasks in Mecanim. PlayableDirector mode bakes a Timeline. Realtime mode is for continuous baking of gameplay, ragdoll phsysics or PuppetMaster dynamics.")]
		public Mode mode;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("AnimationClips to bake.")]
		public UnityEngine.AnimationClip[] animationClips;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The name of the AnimationStates to bake (must be on the base layer) in the Animator above (Right-click on this component header and select 'Find Animation States' to have Baker fill those in automatically, required that state names match with the names of the clips used in them).")]
		public string[] animationStates;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Sets the baked animation clip to loop time and matches the last frame keys with the first. Note that when overwriting a previously baked clip, AnimationClipSettings will be copied from the existing clip.")]
		public bool loop;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The folder to save the baked AnimationClips to.")]
		public string saveToFolder;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("String that will be added to each clip or animation state name for the saved clip. For example if your animation state/clip names were 'Idle' and 'Walk', then with '_Baked' as Append Name, the Baker will create 'Idle_Baked' and 'Walk_Baked' animation clips.")]
		public string appendName;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Name of the created AnimationClip file.")]
		public string saveName;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x170000D2")]
		public bool isBaking
		{
			[Token(Token = "0x60018D8")]
			[Address(RVA = "0xE5A46C", Offset = "0xE5A46C", VA = "0xE5A46C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018D9")]
			[Address(RVA = "0xE5A474", Offset = "0xE5A474", VA = "0xE5A474")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public float bakingProgress
		{
			[Token(Token = "0x60018DA")]
			[Address(RVA = "0xE5A480", Offset = "0xE5A480", VA = "0xE5A480")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018DB")]
			[Address(RVA = "0xE5A488", Offset = "0xE5A488", VA = "0xE5A488")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		protected float clipLength
		{
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0xE5A490", Offset = "0xE5A490", VA = "0xE5A490")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0xE5A498", Offset = "0xE5A498", VA = "0xE5A498")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0xE5A35C", Offset = "0xE5A35C", VA = "0xE5A35C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0xE5A3A0", Offset = "0xE5A3A0", VA = "0xE5A3A0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0xE5A3E4", Offset = "0xE5A3E4", VA = "0xE5A3E4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0xE5A428", Offset = "0xE5A428", VA = "0xE5A428")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60018DC")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x60018DD")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x60018DE")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x60018DF")]
		protected abstract void OnSetCurves(ref UnityEngine.AnimationClip clip);

		[Token(Token = "0x60018E0")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0xE5A4A0", Offset = "0xE5A4A0", VA = "0xE5A4A0")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0xE5A4A4", Offset = "0xE5A4A4", VA = "0xE5A4A4")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0xE5A4A8", Offset = "0xE5A4A8", VA = "0xE5A4A8")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0xE5A4AC", Offset = "0xE5A4AC", VA = "0xE5A4AC")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x200054B")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[UnityEngine.Tooltip("If true, produced AnimationClips will be marked as Legacy and usable with the Legacy animation system.")]
		public bool markAsLegacy;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("Root Transform of the hierarchy to bake.")]
		public Transform root;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("Root Node used for root motion.")]
		public Transform rootNode;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("List of Transforms to ignore, rotation curves will not be baked for these Transforms.")]
		public Transform[] ignoreList;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("LocalPosition curves will be baked for these Transforms only. If you are baking a character, the pelvis bone should be added to this array.")]
		public Transform[] bakePositionList;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerTransform[] children;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerTransform rootChild;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int rootChildIndex;

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0xE5A5D4", Offset = "0xE5A5D4", VA = "0xE5A5D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0xE5AA18", Offset = "0xE5AA18", VA = "0xE5AA18", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0xE5AA20", Offset = "0xE5AA20", VA = "0xE5AA20", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0xE5AC5C", Offset = "0xE5AC5C", VA = "0xE5AC5C", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0xE5AEC0", Offset = "0xE5AEC0", VA = "0xE5AEC0", Slot = "7")]
		protected override void OnSetCurves(ref UnityEngine.AnimationClip clip)
		{
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0xE5B1D8", Offset = "0xE5B1D8", VA = "0xE5B1D8", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0xE5A800", Offset = "0xE5A800", VA = "0xE5A800")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0xE5A8B8", Offset = "0xE5A8B8", VA = "0xE5A8B8")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0xE5B438", Offset = "0xE5B438", VA = "0xE5B438")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x200054C")]
	public class TQ
	{
		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 t;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0xE5B4A0", Offset = "0xE5B4A0", VA = "0xE5B4A0")]
		public TQ(Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x200054D")]
	public class AvatarUtility
	{
		[Token(Token = "0x60018F1")]
		[Address(RVA = "0xE5B504", Offset = "0xE5B504", VA = "0xE5B504")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0xE5B760", Offset = "0xE5B760", VA = "0xE5B760")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0xE5B740", Offset = "0xE5B740", VA = "0xE5B740")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0xE5BDD0", Offset = "0xE5BDD0", VA = "0xE5BDD0")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x200054E")]
	public static class BakerUtilities
	{
		[Token(Token = "0x60018F5")]
		[Address(RVA = "0xE5BDD8", Offset = "0xE5BDD8", VA = "0xE5BDD8")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0xE5BE10", Offset = "0xE5BE10", VA = "0xE5BE10")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0xE5C1D4", Offset = "0xE5C1D4", VA = "0xE5C1D4")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0xE5C3B4", Offset = "0xE5C3B4", VA = "0xE5C3B4")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0xE5C3B8", Offset = "0xE5C3B8", VA = "0xE5C3B8")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x200054F")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0xE5C54C", Offset = "0xE5C54C", VA = "0xE5C54C")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0xE5C8B0", Offset = "0xE5C8B0", VA = "0xE5C8B0")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0xE5C718", Offset = "0xE5C718", VA = "0xE5C718")]
		public void Reset()
		{
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0xE5CA98", Offset = "0xE5CA98", VA = "0xE5CA98")]
		public void SetIKKeyframes(float time, Avatar avatar, float humanScale, Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0xE5CCCC", Offset = "0xE5CCCC", VA = "0xE5CCCC")]
		public void SetKeyframes(float time, Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0xE5CDBC", Offset = "0xE5CDBC", VA = "0xE5CDBC")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0xE5CEA0", Offset = "0xE5CEA0", VA = "0xE5CEA0")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0xE5CE24", Offset = "0xE5CE24", VA = "0xE5CE24")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0xE5CF08", Offset = "0xE5CF08", VA = "0xE5CF08")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0xE5CFB0", Offset = "0xE5CFB0", VA = "0xE5CFB0")]
		public void SetCurves(ref UnityEngine.AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000550")]
	public class BakerMuscle
	{
		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x6001904")]
		[Address(RVA = "0xE5D29C", Offset = "0xE5D29C", VA = "0xE5D29C")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0xE5D30C", Offset = "0xE5D30C", VA = "0xE5D30C")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0xE5DDA8", Offset = "0xE5DDA8", VA = "0xE5DDA8")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0xE5DE50", Offset = "0xE5DE50", VA = "0xE5DE50")]
		public void SetCurves(ref UnityEngine.AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0xE5DD40", Offset = "0xE5DD40", VA = "0xE5DD40")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0xE5DF44", Offset = "0xE5DF44", VA = "0xE5DF44")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0xE5DF80", Offset = "0xE5DF80", VA = "0xE5DF80")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000551")]
	public class BakerTransform
	{
		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 relativePosition;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x600190B")]
		[Address(RVA = "0xE5A970", Offset = "0xE5A970", VA = "0xE5A970")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xE5AC48", Offset = "0xE5AC48", VA = "0xE5AC48")]
		public void SetRelativeSpace(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0xE5AF24", Offset = "0xE5AF24", VA = "0xE5AF24")]
		public void SetCurves(ref UnityEngine.AnimationClip clip)
		{
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0xE5DF88", Offset = "0xE5DF88", VA = "0xE5DF88")]
		private void AddRootMotionCurves(ref UnityEngine.AnimationClip clip)
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0xE5AAF0", Offset = "0xE5AAF0", VA = "0xE5AAF0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0xE5E210", Offset = "0xE5E210", VA = "0xE5E210")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0xE5B244", Offset = "0xE5B244", VA = "0xE5B244")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0xE5ACC8", Offset = "0xE5ACC8", VA = "0xE5ACC8")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x2000552")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[UnityEngine.Tooltip("Should the hand IK curves be added to the animation? Disable this if the original hand positions are not important when using the clip on another character via Humanoid retargeting.")]
		public bool bakeHandIK;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 0.1f)]
		[UnityEngine.Tooltip("Max keyframe reduction error for the Root.Q/T, LeftFoot IK and RightFoot IK channels. Having a larger error value for 'Key Reduction Error' and a smaller one for this enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public float IKKeyReductionError;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(1f, 9f)]
		[UnityEngine.Tooltip("Frame rate divider for the muscle curves. If you have 'Frame Rate' set to 30, and this value set to 3, the muscle curves will be baked at 10 fps. Only the Root Q/T and Hand and Foot IK curves will be baked at 30. This enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public int muscleFrameRateDiv;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] muscles;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HumanPose pose;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private HumanPoseHandler handler;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 bodyPosition;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion bodyRotation;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int mN;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x6001913")]
		[Address(RVA = "0xE5E278", Offset = "0xE5E278", VA = "0xE5E278")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0xE5E7D8", Offset = "0xE5E7D8", VA = "0xE5E7D8", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0xE5E7F4", Offset = "0xE5E7F4", VA = "0xE5E7F4", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0xE5E8D0", Offset = "0xE5E8D0", VA = "0xE5E8D0", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0xE5E98C", Offset = "0xE5E98C", VA = "0xE5E98C", Slot = "7")]
		protected override void OnSetCurves(ref UnityEngine.AnimationClip clip)
		{
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0xE5EB2C", Offset = "0xE5EB2C", VA = "0xE5EB2C", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0xE5EDD0", Offset = "0xE5EDD0", VA = "0xE5EDD0")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0xE5EEA8", Offset = "0xE5EEA8", VA = "0xE5EEA8")]
		public HumanoidBaker()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000553")]
	public enum Axis
	{
		[Token(Token = "0x400198E")]
		X,
		[Token(Token = "0x400198F")]
		Y,
		[Token(Token = "0x4001990")]
		Z
	}
	[Token(Token = "0x2000554")]
	public class AxisTools
	{
		[Token(Token = "0x600191B")]
		[Address(RVA = "0xE5EF58", Offset = "0xE5EF58", VA = "0xE5EF58")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0xE5F038", Offset = "0xE5F038", VA = "0xE5F038")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0xE5F070", Offset = "0xE5F070", VA = "0xE5F070")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0xE5F1B8", Offset = "0xE5F1B8", VA = "0xE5F1B8")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0xE5F16C", Offset = "0xE5F16C", VA = "0xE5F16C")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0xE5F2B4", Offset = "0xE5F2B4", VA = "0xE5F2B4")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0xE5F2F8", Offset = "0xE5F2F8", VA = "0xE5F2F8")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0xE5F784", Offset = "0xE5F784", VA = "0xE5F784")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000555")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x2000556")]
		public class LimbOrientation
		{
			[Token(Token = "0x4001995")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4001996")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x4001997")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x6001926")]
			[Address(RVA = "0xE5FAB8", Offset = "0xE5FAB8", VA = "0xE5FAB8")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x170000D5")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x6001924")]
			[Address(RVA = "0xE5F800", Offset = "0xE5F800", VA = "0xE5F800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D6")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x6001925")]
			[Address(RVA = "0xE5FB2C", Offset = "0xE5FB2C", VA = "0xE5FB2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0xE5F78C", Offset = "0xE5F78C", VA = "0xE5F78C")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x2000557")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x2000558")]
		public enum BoneType
		{
			[Token(Token = "0x40019AB")]
			Unassigned,
			[Token(Token = "0x40019AC")]
			Spine,
			[Token(Token = "0x40019AD")]
			Head,
			[Token(Token = "0x40019AE")]
			Arm,
			[Token(Token = "0x40019AF")]
			Leg,
			[Token(Token = "0x40019B0")]
			Tail,
			[Token(Token = "0x40019B1")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x2000559")]
		public enum BoneSide
		{
			[Token(Token = "0x40019B3")]
			Center,
			[Token(Token = "0x40019B4")]
			Left,
			[Token(Token = "0x40019B5")]
			Right
		}

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x6001927")]
		[Address(RVA = "0xE5FDE4", Offset = "0xE5FDE4", VA = "0xE5FDE4")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0xE600B0", Offset = "0xE600B0", VA = "0xE600B0")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0xE602EC", Offset = "0xE602EC", VA = "0xE602EC")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0xE60360", Offset = "0xE60360", VA = "0xE60360")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0xE603F4", Offset = "0xE603F4", VA = "0xE603F4")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0xE5FF98", Offset = "0xE5FF98", VA = "0xE5FF98")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0xE60264", Offset = "0xE60264", VA = "0xE60264")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0xE60B2C", Offset = "0xE60B2C", VA = "0xE60B2C")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0xE60984", Offset = "0xE60984", VA = "0xE60984")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0xE60A58", Offset = "0xE60A58", VA = "0xE60A58")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0xE605DC", Offset = "0xE605DC", VA = "0xE605DC")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0xE60678", Offset = "0xE60678", VA = "0xE60678")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0xE60714", Offset = "0xE60714", VA = "0xE60714")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0xE607B0", Offset = "0xE607B0", VA = "0xE607B0")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0xE6084C", Offset = "0xE6084C", VA = "0xE6084C")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0xE608E8", Offset = "0xE608E8", VA = "0xE608E8")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0xE60D14", Offset = "0xE60D14", VA = "0xE60D14")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0xE60508", Offset = "0xE60508", VA = "0xE60508")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0xE60C90", Offset = "0xE60C90", VA = "0xE60C90")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0xE60D74", Offset = "0xE60D74", VA = "0xE60D74")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0xE60E34", Offset = "0xE60E34", VA = "0xE60E34")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xE60C1C", Offset = "0xE60C1C", VA = "0xE60C1C")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0xE60BAC", Offset = "0xE60BAC", VA = "0xE60BAC")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200055A")]
	public class BipedReferences
	{
		[Token(Token = "0x200055B")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x40019C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x40019C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x170000D9")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x6001958")]
				[Address(RVA = "0xE6710C", Offset = "0xE6710C", VA = "0xE6710C")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x6001957")]
			[Address(RVA = "0xE670F8", Offset = "0xE670F8", VA = "0xE670F8")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x170000D7")]
		public virtual bool isFilled
		{
			[Token(Token = "0x600193F")]
			[Address(RVA = "0xE63C24", Offset = "0xE63C24", VA = "0xE63C24", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D8")]
		public bool isEmpty
		{
			[Token(Token = "0x6001940")]
			[Address(RVA = "0xE63F80", Offset = "0xE63F80", VA = "0xE63F80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0xE63F90", Offset = "0xE63F90", VA = "0xE63F90", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0xE6431C", Offset = "0xE6431C", VA = "0xE6431C", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0xE646AC", Offset = "0xE646AC", VA = "0xE646AC")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0xE64DD8", Offset = "0xE64DD8", VA = "0xE64DD8")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0xE64948", Offset = "0xE64948", VA = "0xE64948")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0xE655B8", Offset = "0xE655B8", VA = "0xE655B8")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0xE656A4", Offset = "0xE656A4", VA = "0xE656A4")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0xE65BF0", Offset = "0xE65BF0", VA = "0xE65BF0")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0xE659F8", Offset = "0xE659F8", VA = "0xE659F8")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0xE658A4", Offset = "0xE658A4", VA = "0xE658A4")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0xE65740", Offset = "0xE65740", VA = "0xE65740")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0xE65AF0", Offset = "0xE65AF0", VA = "0xE65AF0")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0xE65CD4", Offset = "0xE65CD4", VA = "0xE65CD4")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0xE66890", Offset = "0xE66890", VA = "0xE66890")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0xE6632C", Offset = "0xE6632C", VA = "0xE6632C")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0xE66BDC", Offset = "0xE66BDC", VA = "0xE66BDC")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0xE66694", Offset = "0xE66694", VA = "0xE66694")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0xE66BE4", Offset = "0xE66BE4", VA = "0xE66BE4")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0xE66BEC", Offset = "0xE66BEC", VA = "0xE66BEC")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0xE66DAC", Offset = "0xE66DAC", VA = "0xE66DAC")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0xE67090", Offset = "0xE67090", VA = "0xE67090")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0xE648C8", Offset = "0xE648C8", VA = "0xE648C8")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x200055C")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x6001959")]
		[Address(RVA = "0xE67114", Offset = "0xE67114", VA = "0xE67114")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x200055D")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x600195A")]
		[Address(RVA = "0xE6711C", Offset = "0xE6711C", VA = "0xE6711C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0xE67214", Offset = "0xE67214", VA = "0xE67214")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x200055E")]
	public class Hierarchy
	{
		[Token(Token = "0x600195C")]
		[Address(RVA = "0xE67224", Offset = "0xE67224", VA = "0xE67224")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0xE673D8", Offset = "0xE673D8", VA = "0xE673D8")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0xE672A8", Offset = "0xE672A8", VA = "0xE672A8")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0xE674E4", Offset = "0xE674E4", VA = "0xE674E4")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0xE675F4", Offset = "0xE675F4", VA = "0xE675F4")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0xE6783C", Offset = "0xE6783C", VA = "0xE6783C")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0xE67930", Offset = "0xE67930", VA = "0xE67930")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0xE67A80", Offset = "0xE67A80", VA = "0xE67A80")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0xE67DEC", Offset = "0xE67DEC", VA = "0xE67DEC")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0xE67BE4", Offset = "0xE67BE4", VA = "0xE67BE4")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0xE67F74", Offset = "0xE67F74", VA = "0xE67F74")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x200055F")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xE67F7C", Offset = "0xE67F7C", VA = "0xE67F7C")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0xE68004", Offset = "0xE68004", VA = "0xE68004")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000560")]
	public enum InterpolationMode
	{
		[Token(Token = "0x40019CF")]
		None,
		[Token(Token = "0x40019D0")]
		InOutCubic,
		[Token(Token = "0x40019D1")]
		InOutQuintic,
		[Token(Token = "0x40019D2")]
		InOutSine,
		[Token(Token = "0x40019D3")]
		InQuintic,
		[Token(Token = "0x40019D4")]
		InQuartic,
		[Token(Token = "0x40019D5")]
		InCubic,
		[Token(Token = "0x40019D6")]
		InQuadratic,
		[Token(Token = "0x40019D7")]
		InElastic,
		[Token(Token = "0x40019D8")]
		InElasticSmall,
		[Token(Token = "0x40019D9")]
		InElasticBig,
		[Token(Token = "0x40019DA")]
		InSine,
		[Token(Token = "0x40019DB")]
		InBack,
		[Token(Token = "0x40019DC")]
		OutQuintic,
		[Token(Token = "0x40019DD")]
		OutQuartic,
		[Token(Token = "0x40019DE")]
		OutCubic,
		[Token(Token = "0x40019DF")]
		OutInCubic,
		[Token(Token = "0x40019E0")]
		OutInQuartic,
		[Token(Token = "0x40019E1")]
		OutElastic,
		[Token(Token = "0x40019E2")]
		OutElasticSmall,
		[Token(Token = "0x40019E3")]
		OutElasticBig,
		[Token(Token = "0x40019E4")]
		OutSine,
		[Token(Token = "0x40019E5")]
		OutBack,
		[Token(Token = "0x40019E6")]
		OutBackCubic,
		[Token(Token = "0x40019E7")]
		OutBackQuartic,
		[Token(Token = "0x40019E8")]
		BackInCubic,
		[Token(Token = "0x40019E9")]
		BackInQuartic
	}
	[Token(Token = "0x2000561")]
	public class Interp
	{
		[Token(Token = "0x6001969")]
		[Address(RVA = "0xE68090", Offset = "0xE68090", VA = "0xE68090")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0xE68A18", Offset = "0xE68A18", VA = "0xE68A18")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0xE68A88", Offset = "0xE68A88", VA = "0xE68A88")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0xE68490", Offset = "0xE68490", VA = "0xE68490")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xE6849C", Offset = "0xE6849C", VA = "0xE6849C")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xE684C0", Offset = "0xE684C0", VA = "0xE684C0")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0xE684FC", Offset = "0xE684FC", VA = "0xE684FC")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0xE68514", Offset = "0xE68514", VA = "0xE68514")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0xE68528", Offset = "0xE68528", VA = "0xE68528")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0xE6853C", Offset = "0xE6853C", VA = "0xE6853C")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0xE6854C", Offset = "0xE6854C", VA = "0xE6854C")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0xE68594", Offset = "0xE68594", VA = "0xE68594")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0xE685CC", Offset = "0xE685CC", VA = "0xE685CC")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0xE685F4", Offset = "0xE685F4", VA = "0xE685F4")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0xE68AF8", Offset = "0xE68AF8", VA = "0xE68AF8")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0xE68628", Offset = "0xE68628", VA = "0xE68628")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0xE68650", Offset = "0xE68650", VA = "0xE68650")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0xE68680", Offset = "0xE68680", VA = "0xE68680")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0xE686B4", Offset = "0xE686B4", VA = "0xE686B4")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0xE686F8", Offset = "0xE686F8", VA = "0xE686F8")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0xE6875C", Offset = "0xE6875C", VA = "0xE6875C")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0xE687C0", Offset = "0xE687C0", VA = "0xE687C0")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xE68814", Offset = "0xE68814", VA = "0xE68814")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0xE68868", Offset = "0xE68868", VA = "0xE68868")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0xE688A0", Offset = "0xE688A0", VA = "0xE688A0")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xE688D4", Offset = "0xE688D4", VA = "0xE688D4")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0xE68B2C", Offset = "0xE68B2C", VA = "0xE68B2C")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0xE68918", Offset = "0xE68918", VA = "0xE68918")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xE689A8", Offset = "0xE689A8", VA = "0xE689A8")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xE689D8", Offset = "0xE689D8", VA = "0xE689D8")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xE68BBC", Offset = "0xE68BBC", VA = "0xE68BBC")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x2000562")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x6001988")]
		[Address(RVA = "0xE68BC4", Offset = "0xE68BC4", VA = "0xE68BC4")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xE68C4C", Offset = "0xE68C4C", VA = "0xE68C4C")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x2000563")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x600198A")]
		[Address(RVA = "0xE68CD8", Offset = "0xE68CD8", VA = "0xE68CD8")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0xE68D24", Offset = "0xE68D24", VA = "0xE68D24")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xE68DE0", Offset = "0xE68DE0", VA = "0xE68DE0")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0xE68D38", Offset = "0xE68D38", VA = "0xE68D38")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0xE68DF4", Offset = "0xE68DF4", VA = "0xE68DF4")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xE68E84", Offset = "0xE68E84", VA = "0xE68E84")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xE68EAC", Offset = "0xE68EAC", VA = "0xE68EAC")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xE68EF8", Offset = "0xE68EF8", VA = "0xE68EF8")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xE68F60", Offset = "0xE68F60", VA = "0xE68F60")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xE690BC", Offset = "0xE690BC", VA = "0xE690BC")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0xE691F4", Offset = "0xE691F4", VA = "0xE691F4")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0xE6924C", Offset = "0xE6924C", VA = "0xE6924C")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x2000564")]
	public static class QuaTools
	{
		[Token(Token = "0x6001996")]
		[Address(RVA = "0xE69270", Offset = "0xE69270", VA = "0xE69270")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xE692BC", Offset = "0xE692BC", VA = "0xE692BC")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xE69308", Offset = "0xE69308", VA = "0xE69308")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xE6940C", Offset = "0xE6940C", VA = "0xE6940C")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0xE69510", Offset = "0xE69510", VA = "0xE69510")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xE69624", Offset = "0xE69624", VA = "0xE69624")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xE696CC", Offset = "0xE696CC", VA = "0xE696CC")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0xE697D8", Offset = "0xE697D8", VA = "0xE697D8")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0xE69940", Offset = "0xE69940", VA = "0xE69940")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0xE69B24", Offset = "0xE69B24", VA = "0xE69B24")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0xE69BF4", Offset = "0xE69BF4", VA = "0xE69BF4")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetforwardAxis, Vector3 targetUpAxis, Vector3 forwardAxis, Vector3 upAxis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0xE69D78", Offset = "0xE69D78", VA = "0xE69D78")]
		public static Vector3 ToBiPolar(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0xE69E84", Offset = "0xE69E84", VA = "0xE69E84")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000565")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x170000DA")]
		public static T instance
		{
			[Token(Token = "0x60019A3")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019A4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60019A5")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000566")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0xE69EDC", Offset = "0xE69EDC", VA = "0xE69EDC")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0xE69F90", Offset = "0xE69F90", VA = "0xE69F90")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0xE6A044", Offset = "0xE6A044", VA = "0xE6A044")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0xE6A0F8", Offset = "0xE6A0F8", VA = "0xE6A0F8")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000567")]
	public static class V3Tools
	{
		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xE6A100", Offset = "0xE6A100", VA = "0xE6A100")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xE6A15C", Offset = "0xE6A15C", VA = "0xE6A15C")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xE6A194", Offset = "0xE6A194", VA = "0xE6A194")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0xE6A2E4", Offset = "0xE6A2E4", VA = "0xE6A2E4")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xE6A460", Offset = "0xE6A460", VA = "0xE6A460")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0xE6A690", Offset = "0xE6A690", VA = "0xE6A690")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0xE6A8E0", Offset = "0xE6A8E0", VA = "0xE6A8E0")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0xE6AB38", Offset = "0xE6AB38", VA = "0xE6AB38")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0xE6ACE4", Offset = "0xE6ACE4", VA = "0xE6ACE4")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0xE6AEDC", Offset = "0xE6AEDC", VA = "0xE6AEDC")]
		public static Vector3 TransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0xE6AF58", Offset = "0xE6AF58", VA = "0xE6AF58")]
		public static Vector3 InverseTransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000568")]
	public static class Warning
	{
		[Token(Token = "0x2000569")]
		public delegate void Logger(string message);

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0xE6AFE8", Offset = "0xE6AFE8", VA = "0xE6AFE8")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0xE6B080", Offset = "0xE6B080", VA = "0xE6B080")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x200056A")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page4.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Biped IK")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0xE6B258", Offset = "0xE6B258", VA = "0xE6B258")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0xE6B29C", Offset = "0xE6B29C", VA = "0xE6B29C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0xE6B2E0", Offset = "0xE6B2E0", VA = "0xE6B2E0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0xE6B324", Offset = "0xE6B324", VA = "0xE6B324")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0xE6B368", Offset = "0xE6B368", VA = "0xE6B368")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0xE6B400", Offset = "0xE6B400", VA = "0xE6B400")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0xE6B41C", Offset = "0xE6B41C", VA = "0xE6B41C")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0xE6B448", Offset = "0xE6B448", VA = "0xE6B448")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0xE6B474", Offset = "0xE6B474", VA = "0xE6B474")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0xE6B4B0", Offset = "0xE6B4B0", VA = "0xE6B4B0")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xE6B4F0", Offset = "0xE6B4F0", VA = "0xE6B4F0")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xE6B510", Offset = "0xE6B510", VA = "0xE6B510")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0xE6B530", Offset = "0xE6B530", VA = "0xE6B530")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0xE6B554", Offset = "0xE6B554", VA = "0xE6B554")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0xE6B57C", Offset = "0xE6B57C", VA = "0xE6B57C")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0xE6B5A4", Offset = "0xE6B5A4", VA = "0xE6B5A4")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xE6B384", Offset = "0xE6B384", VA = "0xE6B384")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0xE6B5C8", Offset = "0xE6B5C8", VA = "0xE6B5C8")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0xE6B5D4", Offset = "0xE6B5D4", VA = "0xE6B5D4")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0xE6B5E0", Offset = "0xE6B5E0", VA = "0xE6B5E0")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0xE6B894", Offset = "0xE6B894", VA = "0xE6B894", Slot = "7")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0xE6B930", Offset = "0xE6B930", VA = "0xE6B930", Slot = "5")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0xE6BC58", Offset = "0xE6BC58", VA = "0xE6BC58", Slot = "6")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0xE6C0C4", Offset = "0xE6C0C4", VA = "0xE6C0C4")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0xE6C0E8", Offset = "0xE6C0E8", VA = "0xE6C0E8")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200056B")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x170000DB")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x60019D4")]
			[Address(RVA = "0xE6B71C", Offset = "0xE6B71C", VA = "0xE6B71C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DC")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x60019D5")]
			[Address(RVA = "0xE6C380", Offset = "0xE6C380", VA = "0xE6C380")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0xE6BAE4", Offset = "0xE6BAE4", VA = "0xE6BAE4")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0xE6C194", Offset = "0xE6C194", VA = "0xE6C194")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200056C")]
	public abstract class Constraint
	{
		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x170000DD")]
		public bool isValid
		{
			[Token(Token = "0x60019D8")]
			[Address(RVA = "0xE6C5A8", Offset = "0xE6C5A8", VA = "0xE6C5A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60019D9")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0xE6C608", Offset = "0xE6C608", VA = "0xE6C608")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200056D")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0xE6C610", Offset = "0xE6C610", VA = "0xE6C610", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0xE6C6A8", Offset = "0xE6C6A8", VA = "0xE6C6A8")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xE6C6B0", Offset = "0xE6C6B0", VA = "0xE6C6B0")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200056E")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x170000DE")]
		private bool positionChanged
		{
			[Token(Token = "0x60019E1")]
			[Address(RVA = "0xE6C7E4", Offset = "0xE6C7E4", VA = "0xE6C7E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0xE6C6E0", Offset = "0xE6C6E0", VA = "0xE6C6E0", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0xE6C840", Offset = "0xE6C840", VA = "0xE6C840")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0xE6C848", Offset = "0xE6C848", VA = "0xE6C848")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200056F")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0xE6C878", Offset = "0xE6C878", VA = "0xE6C878", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0xE6C8F4", Offset = "0xE6C8F4", VA = "0xE6C8F4")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0xE6C8FC", Offset = "0xE6C8FC", VA = "0xE6C8FC")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000570")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x170000DF")]
		private bool rotationChanged
		{
			[Token(Token = "0x60019E8")]
			[Address(RVA = "0xE6CA30", Offset = "0xE6CA30", VA = "0xE6CA30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0xE6C92C", Offset = "0xE6C92C", VA = "0xE6C92C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0xE6CA88", Offset = "0xE6CA88", VA = "0xE6CA88")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0xE6CA90", Offset = "0xE6CA90", VA = "0xE6CA90")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000571")]
	public class Constraints
	{
		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0xE6CAC0", Offset = "0xE6CAC0", VA = "0xE6CAC0")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0xE6BC04", Offset = "0xE6BC04", VA = "0xE6BC04")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0xE6BDCC", Offset = "0xE6BDCC", VA = "0xE6BDCC")]
		public void Update()
		{
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0xE6C5A0", Offset = "0xE6C5A0", VA = "0xE6C5A0")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000572")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x2000573")]
		public enum DOF
		{
			[Token(Token = "0x4001A23")]
			One,
			[Token(Token = "0x4001A24")]
			Three
		}

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("Master Weight for the finger.")]
		public float weight;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("The weight of rotating the finger tip and bending the finger to the target.")]
		public float rotationWeight;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Rotational degrees of freedom. When set to 'One' the fingers will be able to be rotated only around a single axis. When 3, all 3 axes are free to rotate around.")]
		public DOF rotationDOF;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("If enabled, keeps bone1 twist angle fixed relative to bone2.")]
		public bool fixBone1Twist;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The first bone of the finger.")]
		public Transform bone1;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("The second bone of the finger.")]
		public Transform bone2;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The (optional) third bone of the finger. This can be ignored for thumbs.")]
		public Transform bone3;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("The fingertip object. If your character doesn't have tip bones, you can create an empty GameObject and parent it to the last bone in the finger. Place it to the tip of the finger.")]
		public Transform tip;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The IK target (optional, can use IKPosition and IKRotation directly).")]
		public Transform target;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 bone1TwistAxis;

		[Token(Token = "0x170000E0")]
		public bool initiated
		{
			[Token(Token = "0x60019ED")]
			[Address(RVA = "0xE6CB20", Offset = "0xE6CB20", VA = "0xE6CB20")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019EE")]
			[Address(RVA = "0xE6CB28", Offset = "0xE6CB28", VA = "0xE6CB28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x60019EF")]
			[Address(RVA = "0xE6CB34", Offset = "0xE6CB34", VA = "0xE6CB34")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60019F0")]
			[Address(RVA = "0xE6CB54", Offset = "0xE6CB54", VA = "0xE6CB54")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x60019F1")]
			[Address(RVA = "0xE6CB74", Offset = "0xE6CB74", VA = "0xE6CB74")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60019F2")]
			[Address(RVA = "0xE6CB94", Offset = "0xE6CB94", VA = "0xE6CB94")]
			set
			{
			}
		}

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0xE6CBB4", Offset = "0xE6CBB4", VA = "0xE6CBB4")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0xE6CCAC", Offset = "0xE6CCAC", VA = "0xE6CCAC")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0xE6D1A8", Offset = "0xE6D1A8", VA = "0xE6D1A8")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0xE6D274", Offset = "0xE6D274", VA = "0xE6D274")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60019F7")]
		[Address(RVA = "0xE6D32C", Offset = "0xE6D32C", VA = "0xE6D32C")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0xE6D994", Offset = "0xE6D994", VA = "0xE6D994")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000574")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("The master weight for all fingers.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x170000E3")]
		public bool initiated
		{
			[Token(Token = "0x60019F9")]
			[Address(RVA = "0xE6D9A4", Offset = "0xE6D9A4", VA = "0xE6D9A4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019FA")]
			[Address(RVA = "0xE6D9AC", Offset = "0xE6D9AC", VA = "0xE6D9AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0xE6D9B8", Offset = "0xE6D9B8", VA = "0xE6D9B8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0xE6DA2C", Offset = "0xE6DA2C", VA = "0xE6DA2C")]
		[ContextMenu("Auto-detect")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x60019FD")]
		[Address(RVA = "0xE6DDA4", Offset = "0xE6DDA4", VA = "0xE6DDA4")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0xE6DF5C", Offset = "0xE6DF5C", VA = "0xE6DF5C")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0xE6DCB4", Offset = "0xE6DCB4", VA = "0xE6DCB4")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0xE6E0D8", Offset = "0xE6E0D8", VA = "0xE6E0D8", Slot = "5")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0xE6E180", Offset = "0xE6E180", VA = "0xE6E180")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0xE6E1E4", Offset = "0xE6E1E4", VA = "0xE6E1E4")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0xE6E24C", Offset = "0xE6E24C", VA = "0xE6E24C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0xE6E2A8", Offset = "0xE6E2A8", VA = "0xE6E2A8", Slot = "6")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0xE6E2AC", Offset = "0xE6E2AC", VA = "0xE6E2AC", Slot = "7")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0xE6E2C0", Offset = "0xE6E2C0", VA = "0xE6E2C0")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x2000575")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000576")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("The master weight. Use this to fade in/out the grounding effect.")]
		public float weight;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The Grounding solver. Not to confuse with IK solvers.")]
		public Grounding solver;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x170000E4")]
		public bool initiated
		{
			[Token(Token = "0x6001A08")]
			[Address(RVA = "0xE6E32C", Offset = "0xE6E32C", VA = "0xE6E32C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A09")]
			[Address(RVA = "0xE6E334", Offset = "0xE6E334", VA = "0xE6E334")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6001A07")]
		public abstract void ResetPosition();

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0xE6E340", Offset = "0xE6E340", VA = "0xE6E340")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0xE6E5F0", Offset = "0xE6E5F0", VA = "0xE6E5F0")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0xE6E404", Offset = "0xE6E404", VA = "0xE6E404")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0xE6E614", Offset = "0xE6E614", VA = "0xE6E614")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A0E")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6001A0F")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0xE6E788", Offset = "0xE6E788", VA = "0xE6E788")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x2000577")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Biped")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The BipedIK componet.")]
		public BipedIK ik;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0xE6E9AC", Offset = "0xE6E9AC", VA = "0xE6E9AC", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xE6E9F0", Offset = "0xE6E9F0", VA = "0xE6E9F0", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0xE6EA34", Offset = "0xE6EA34", VA = "0xE6EA34", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0xE6EB14", Offset = "0xE6EB14", VA = "0xE6EB14")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0xE6EBB4", Offset = "0xE6EBB4", VA = "0xE6EBB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0xE6EC08", Offset = "0xE6EC08", VA = "0xE6EC08")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0xE6F224", Offset = "0xE6F224", VA = "0xE6F224")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0xE6F264", Offset = "0xE6F264", VA = "0xE6F264")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0xE6F8AC", Offset = "0xE6F8AC", VA = "0xE6F8AC")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0xE6F9D4", Offset = "0xE6F9D4", VA = "0xE6F9D4")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0xE6FBA4", Offset = "0xE6FBA4", VA = "0xE6FBA4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0xE6FD7C", Offset = "0xE6FD7C", VA = "0xE6FD7C")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x2000578")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Full Body Biped")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000579")]
		public class SpineEffector
		{
			[Token(Token = "0x4001A3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The type of the effector.")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4001A3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[UnityEngine.Tooltip("The weight of horizontal bend offset towards the slope.")]
			public float horizontalWeight;

			[Token(Token = "0x4001A3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The vertical bend offset weight.")]
			public float verticalWeight;

			[Token(Token = "0x6001A2F")]
			[Address(RVA = "0xE70ACC", Offset = "0xE70ACC", VA = "0xE70ACC")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x6001A30")]
			[Address(RVA = "0xE70ADC", Offset = "0xE70ADC", VA = "0xE70ADC")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Reference to the FBBIK componet.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0xE6FE20", Offset = "0xE6FE20", VA = "0xE6FE20")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0xE6FE64", Offset = "0xE6FE64", VA = "0xE6FE64", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0xE6FEA8", Offset = "0xE6FEA8", VA = "0xE6FEA8", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xE6FEEC", Offset = "0xE6FEEC", VA = "0xE6FEEC", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0xE6FF54", Offset = "0xE6FF54", VA = "0xE6FF54")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xE6FFDC", Offset = "0xE6FFDC", VA = "0xE6FFDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0xE70288", Offset = "0xE70288", VA = "0xE70288")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0xE70294", Offset = "0xE70294", VA = "0xE70294")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0xE70038", Offset = "0xE70038", VA = "0xE70038")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0xE702A0", Offset = "0xE702A0", VA = "0xE702A0")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0xE70610", Offset = "0xE70610", VA = "0xE70610")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0xE70794", Offset = "0xE70794", VA = "0xE70794")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0xE708F4", Offset = "0xE708F4", VA = "0xE708F4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0xE70A28", Offset = "0xE70A28", VA = "0xE70A28")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x200057A")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder IK")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("The pelvis transform. Common ancestor of all the legs.")]
		public Transform pelvis;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("The weight of rotating the character root to the ground normal (range: 0 - 1).")]
		public float rootRotationWeight;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("The speed of rotating the character root to the ground normal (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("The maximum angle of root rotation (range: 0 - 90).")]
		public float maxRootRotationAngle;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0xE70B20", Offset = "0xE70B20", VA = "0xE70B20", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0xE70B64", Offset = "0xE70B64", VA = "0xE70B64", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0xE70BA8", Offset = "0xE70BA8", VA = "0xE70BA8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xE70BC0", Offset = "0xE70BC0", VA = "0xE70BC0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xE70DDC", Offset = "0xE70DDC", VA = "0xE70DDC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xE70EBC", Offset = "0xE70EBC", VA = "0xE70EBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0xE715A0", Offset = "0xE715A0", VA = "0xE715A0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xE71A58", Offset = "0xE71A58", VA = "0xE71A58")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0xE71C04", Offset = "0xE71C04", VA = "0xE71C04")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0xE71F8C", Offset = "0xE71F8C", VA = "0xE71F8C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0xE72164", Offset = "0xE72164", VA = "0xE72164")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0xE7238C", Offset = "0xE7238C", VA = "0xE7238C")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x200057B")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Quadruped")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x200057C")]
		public struct Foot
		{
			[Token(Token = "0x4001A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4001A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4001A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4001A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x6001A4F")]
			[Address(RVA = "0xE72F7C", Offset = "0xE72F7C", VA = "0xE72F7C")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The Grounding solver for the forelegs.")]
		public Grounding forelegSolver;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("The weight of rotating the character root to the ground angle (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("The maximum angle of rotating the quadruped downwards (going downhill, range: -90 - 0).")]
		[Range(-90f, 0f)]
		public float minRootRotation;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 90f)]
		[UnityEngine.Tooltip("The maximum angle of rotating the quadruped upwards (going uphill, range: 0 - 90).")]
		public float maxRootRotation;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("The speed of interpolating the character root rotation (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("The maximum IK offset for the legs (range: 0 - inf).")]
		public float maxLegOffset;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("The maximum IK offset for the forelegs (range: 0 - inf).")]
		public float maxForeLegOffset;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("The weight of maintaining the head's rotation as it was before solving the Grounding (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("The pelvis transform. Common ancestor of both legs and the spine.")]
		public Transform pelvis;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("The last bone in the spine that is the common parent for both forelegs.")]
		public Transform lastSpineBone;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("The head (optional, if you intend to maintain it's rotation).")]
		public Transform head;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0xE72430", Offset = "0xE72430", VA = "0xE72430", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0xE72474", Offset = "0xE72474", VA = "0xE72474", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0xE724B8", Offset = "0xE724B8", VA = "0xE724B8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0xE724E0", Offset = "0xE724E0", VA = "0xE724E0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0xE725E4", Offset = "0xE725E4", VA = "0xE725E4")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0xE727D8", Offset = "0xE727D8", VA = "0xE727D8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0xE7283C", Offset = "0xE7283C", VA = "0xE7283C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0xE72894", Offset = "0xE72894", VA = "0xE72894")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0xE72BE0", Offset = "0xE72BE0", VA = "0xE72BE0")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0xE72FDC", Offset = "0xE72FDC", VA = "0xE72FDC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0xE7306C", Offset = "0xE7306C", VA = "0xE7306C")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0xE734BC", Offset = "0xE734BC", VA = "0xE734BC")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0xE73B7C", Offset = "0xE73B7C", VA = "0xE73B7C")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0xE73E34", Offset = "0xE73E34", VA = "0xE73E34")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0xE73F68", Offset = "0xE73F68", VA = "0xE73F68")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0xE74230", Offset = "0xE74230", VA = "0xE74230")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0xE74260", Offset = "0xE74260", VA = "0xE74260")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0xE74480", Offset = "0xE74480", VA = "0xE74480")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x200057D")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder VRIK")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Reference to the VRIK componet.")]
		public VRIK ik;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0xE745D4", Offset = "0xE745D4", VA = "0xE745D4")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0xE74618", Offset = "0xE74618", VA = "0xE74618", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0xE7465C", Offset = "0xE7465C", VA = "0xE7465C", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0xE746A0", Offset = "0xE746A0", VA = "0xE746A0", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0xE746B8", Offset = "0xE746B8", VA = "0xE746B8")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0xE74740", Offset = "0xE74740", VA = "0xE74740")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0xE74794", Offset = "0xE74794", VA = "0xE74794")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0xE74A18", Offset = "0xE74A18", VA = "0xE74A18")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0xE74C0C", Offset = "0xE74C0C", VA = "0xE74C0C")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0xE74C90", Offset = "0xE74C90", VA = "0xE74C90")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0xE74F2C", Offset = "0xE74F2C", VA = "0xE74F2C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0xE7508C", Offset = "0xE7508C", VA = "0xE7508C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0xE75254", Offset = "0xE75254", VA = "0xE75254")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200057E")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x200057F")]
		public enum Quality
		{
			[Token(Token = "0x4001A8A")]
			Fastest,
			[Token(Token = "0x4001A8B")]
			Simple,
			[Token(Token = "0x4001A8C")]
			Best
		}

		[Token(Token = "0x2000580")]
		public class Leg
		{
			[Token(Token = "0x4001A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x4001A95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x4001A98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x4001A99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x4001A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x4001A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 lastPosition;

			[Token(Token = "0x4001A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x4001A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x4001A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 up;

			[Token(Token = "0x4001A9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x4001AA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 overrideFootPosition;

			[Token(Token = "0x4001AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 transformPosition;

			[Token(Token = "0x170000ED")]
			public bool isGrounded
			{
				[Token(Token = "0x6001A75")]
				[Address(RVA = "0xE766D0", Offset = "0xE766D0", VA = "0xE766D0")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A76")]
				[Address(RVA = "0xE766D8", Offset = "0xE766D8", VA = "0xE766D8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000EE")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x6001A77")]
				[Address(RVA = "0xE766E4", Offset = "0xE766E4", VA = "0xE766E4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001A78")]
				[Address(RVA = "0xE766F0", Offset = "0xE766F0", VA = "0xE766F0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000EF")]
			public bool initiated
			{
				[Token(Token = "0x6001A79")]
				[Address(RVA = "0xE766FC", Offset = "0xE766FC", VA = "0xE766FC")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A7A")]
				[Address(RVA = "0xE76704", Offset = "0xE76704", VA = "0xE76704")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F0")]
			public float heightFromGround
			{
				[Token(Token = "0x6001A7B")]
				[Address(RVA = "0xE76710", Offset = "0xE76710", VA = "0xE76710")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001A7C")]
				[Address(RVA = "0xE76718", Offset = "0xE76718", VA = "0xE76718")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F1")]
			public Vector3 velocity
			{
				[Token(Token = "0x6001A7D")]
				[Address(RVA = "0xE76720", Offset = "0xE76720", VA = "0xE76720")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001A7E")]
				[Address(RVA = "0xE7672C", Offset = "0xE7672C", VA = "0xE7672C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F2")]
			public Transform transform
			{
				[Token(Token = "0x6001A7F")]
				[Address(RVA = "0xE76738", Offset = "0xE76738", VA = "0xE76738")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001A80")]
				[Address(RVA = "0xE76740", Offset = "0xE76740", VA = "0xE76740")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F3")]
			public float IKOffset
			{
				[Token(Token = "0x6001A81")]
				[Address(RVA = "0xE76748", Offset = "0xE76748", VA = "0xE76748")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001A82")]
				[Address(RVA = "0xE76750", Offset = "0xE76750", VA = "0xE76750")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F4")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x6001A83")]
				[Address(RVA = "0xE76758", Offset = "0xE76758", VA = "0xE76758")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6001A84")]
				[Address(RVA = "0xE76770", Offset = "0xE76770", VA = "0xE76770")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F5")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x6001A85")]
				[Address(RVA = "0xE76790", Offset = "0xE76790", VA = "0xE76790")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6001A86")]
				[Address(RVA = "0xE767A8", Offset = "0xE767A8", VA = "0xE767A8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F6")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x6001A87")]
				[Address(RVA = "0xE767C8", Offset = "0xE767C8", VA = "0xE767C8")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x170000F7")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6001A8D")]
				[Address(RVA = "0xE770AC", Offset = "0xE770AC", VA = "0xE770AC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170000F8")]
			private float rootYOffset
			{
				[Token(Token = "0x6001A96")]
				[Address(RVA = "0xE771FC", Offset = "0xE771FC", VA = "0xE771FC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001A88")]
			[Address(RVA = "0xE76810", Offset = "0xE76810", VA = "0xE76810")]
			public void SetFootPosition(Vector3 position)
			{
			}

			[Token(Token = "0x6001A89")]
			[Address(RVA = "0xE75780", Offset = "0xE75780", VA = "0xE75780")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x6001A8A")]
			[Address(RVA = "0xE76824", Offset = "0xE76824", VA = "0xE76824")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6001A8B")]
			[Address(RVA = "0xE76340", Offset = "0xE76340", VA = "0xE76340")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001A8C")]
			[Address(RVA = "0xE75890", Offset = "0xE75890", VA = "0xE75890")]
			public void Process()
			{
			}

			[Token(Token = "0x6001A8E")]
			[Address(RVA = "0xE76CC0", Offset = "0xE76CC0", VA = "0xE76CC0")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6001A8F")]
			[Address(RVA = "0xE76864", Offset = "0xE76864", VA = "0xE76864")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6001A90")]
			[Address(RVA = "0xE77140", Offset = "0xE77140", VA = "0xE77140")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001A91")]
			[Address(RVA = "0xE76B2C", Offset = "0xE76B2C", VA = "0xE76B2C")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x6001A92")]
			[Address(RVA = "0xE76BAC", Offset = "0xE76BAC", VA = "0xE76BAC")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x6001A93")]
			[Address(RVA = "0xE771AC", Offset = "0xE771AC", VA = "0xE771AC")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x6001A94")]
			[Address(RVA = "0xE770E0", Offset = "0xE770E0", VA = "0xE770E0")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6001A95")]
			[Address(RVA = "0xE77288", Offset = "0xE77288", VA = "0xE77288")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001A97")]
			[Address(RVA = "0xE756E0", Offset = "0xE756E0", VA = "0xE756E0")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x2000581")]
		public class Pelvis
		{
			[Token(Token = "0x4001AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x4001AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x4001AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x4001AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x4001AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x170000F9")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x6001A98")]
				[Address(RVA = "0xE77438", Offset = "0xE77438", VA = "0xE77438")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001A99")]
				[Address(RVA = "0xE77444", Offset = "0xE77444", VA = "0xE77444")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000FA")]
			public float heightOffset
			{
				[Token(Token = "0x6001A9A")]
				[Address(RVA = "0xE77450", Offset = "0xE77450", VA = "0xE77450")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001A9B")]
				[Address(RVA = "0xE77458", Offset = "0xE77458", VA = "0xE77458")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001A9C")]
			[Address(RVA = "0xE75858", Offset = "0xE75858", VA = "0xE75858")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x6001A9D")]
			[Address(RVA = "0xE762AC", Offset = "0xE762AC", VA = "0xE762AC")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001A9E")]
			[Address(RVA = "0xE77460", Offset = "0xE77460", VA = "0xE77460")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6001A9F")]
			[Address(RVA = "0xE7608C", Offset = "0xE7608C", VA = "0xE7608C")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x6001AA0")]
			[Address(RVA = "0xE75778", Offset = "0xE75778", VA = "0xE75778")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("Layers to ground the character to. Make sure to exclude the layer of the character controller.")]
		public LayerMask layers;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[UnityEngine.Tooltip("Max step height. Maximum vertical distance of Grounding from the root of the character.")]
		public float maxStep;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The height offset of the root.")]
		public float heightOffset;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("The speed of moving the feet up/down.")]
		public float footSpeed;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("CapsuleCast radius. Should match approximately with the size of the feet.")]
		public float footRadius;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("Offset of the foot center along character forward axis.")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Amount of velocity based prediction of the foot positions.")]
		public float prediction;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("Weight of rotating the feet to the ground normal offset.")]
		public float footRotationWeight;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Speed of slerping the feet to their grounded rotations.")]
		public float footRotationSpeed;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 90f)]
		[UnityEngine.Tooltip("Max Foot Rotation Angle. Max angular offset from the foot's rotation.")]
		public float maxFootRotationAngle;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("If true, solver will rotate with the character root so the character can be grounded for example to spherical planets. For performance reasons leave this off unless needed.")]
		public bool rotateSolver;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("The speed of moving the character up/down.")]
		public float pelvisSpeed;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("Used for smoothing out vertical pelvis movement (range 0 - 1).")]
		public float pelvisDamper;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("The weight of lowering the pelvis to the lowest foot.")]
		public float lowerPelvisWeight;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("The weight of lifting the pelvis to the highest foot. This is useful when you don't want the feet to go too high relative to the body when crouching.")]
		public float liftPelvisWeight;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("The radius of the spherecast from the root that determines whether the character root is grounded.")]
		public float rootSphereCastRadius;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("If false, keeps the foot that is over a ledge at the root level. If true, lowers the overstepping foot and body by the 'Max Step' value.")]
		public bool overstepFallsDown;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("The raycasting quality. Fastest is a single raycast per foot, Simple is three raycasts, Best is one raycast and a capsule cast per foot.")]
		public Quality quality;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x170000E5")]
		public Leg[] legs
		{
			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0xE752B4", Offset = "0xE752B4", VA = "0xE752B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0xE752BC", Offset = "0xE752BC", VA = "0xE752BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public Pelvis pelvis
		{
			[Token(Token = "0x6001A5F")]
			[Address(RVA = "0xE752C4", Offset = "0xE752C4", VA = "0xE752C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A60")]
			[Address(RVA = "0xE752CC", Offset = "0xE752CC", VA = "0xE752CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000E7")]
		public bool isGrounded
		{
			[Token(Token = "0x6001A61")]
			[Address(RVA = "0xE752D4", Offset = "0xE752D4", VA = "0xE752D4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0xE752DC", Offset = "0xE752DC", VA = "0xE752DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000E8")]
		public Transform root
		{
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0xE752E8", Offset = "0xE752E8", VA = "0xE752E8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A64")]
			[Address(RVA = "0xE752F0", Offset = "0xE752F0", VA = "0xE752F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x6001A65")]
			[Address(RVA = "0xE752F8", Offset = "0xE752F8", VA = "0xE752F8")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6001A66")]
			[Address(RVA = "0xE75310", Offset = "0xE75310", VA = "0xE75310")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public bool rootGrounded
		{
			[Token(Token = "0x6001A67")]
			[Address(RVA = "0xE75330", Offset = "0xE75330", VA = "0xE75330")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EB")]
		public Vector3 up
		{
			[Token(Token = "0x6001A6F")]
			[Address(RVA = "0xE6F96C", Offset = "0xE6F96C", VA = "0xE6F96C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000EC")]
		private bool useRootRotation
		{
			[Token(Token = "0x6001A72")]
			[Address(RVA = "0xE763D4", Offset = "0xE763D4", VA = "0xE763D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0xE75378", Offset = "0xE75378", VA = "0xE75378")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0xE755D8", Offset = "0xE755D8", VA = "0xE755D8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0xE6EF64", Offset = "0xE6EF64", VA = "0xE6EF64")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x6001A6B")]
		[Address(RVA = "0xE6F6BC", Offset = "0xE6F6BC", VA = "0xE6F6BC")]
		public void Update()
		{
		}

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0xE71428", Offset = "0xE71428", VA = "0xE71428")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0xE6EA9C", Offset = "0xE6EA9C", VA = "0xE6EA9C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0xE7587C", Offset = "0xE7587C", VA = "0xE7587C")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0xE76488", Offset = "0xE76488", VA = "0xE76488")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0xE7650C", Offset = "0xE7650C", VA = "0xE7650C")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0xE76660", Offset = "0xE76660", VA = "0xE76660")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A74")]
		[Address(RVA = "0xE6E84C", Offset = "0xE6E84C", VA = "0xE6E84C")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x2000582")]
	[HelpURL("https://www.youtube.com/watch?v=wT8fViZpLmQ&index=3&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Aim IK")]
	public class AimIK : IK
	{
		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0xE774B4", Offset = "0xE774B4", VA = "0xE774B4", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0xE774F8", Offset = "0xE774F8", VA = "0xE774F8", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0xE7753C", Offset = "0xE7753C", VA = "0xE7753C")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0xE77580", Offset = "0xE77580", VA = "0xE77580")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0xE775C4", Offset = "0xE775C4", VA = "0xE775C4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0xE77608", Offset = "0xE77608", VA = "0xE77608", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xE77610", Offset = "0xE77610", VA = "0xE77610")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x2000583")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page2.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Arm IK")]
	public class ArmIK : IK
	{
		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xE7768C", Offset = "0xE7768C", VA = "0xE7768C", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xE776D0", Offset = "0xE776D0", VA = "0xE776D0", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xE77714", Offset = "0xE77714", VA = "0xE77714")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xE77758", Offset = "0xE77758", VA = "0xE77758")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xE7779C", Offset = "0xE7779C", VA = "0xE7779C", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xE777A4", Offset = "0xE777A4", VA = "0xE777A4")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x2000584")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/CCD IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page5.html")]
	public class CCDIK : IK
	{
		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0xE77818", Offset = "0xE77818", VA = "0xE77818", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xE7785C", Offset = "0xE7785C", VA = "0xE7785C", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0xE778A0", Offset = "0xE778A0", VA = "0xE778A0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0xE778E4", Offset = "0xE778E4", VA = "0xE778E4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0xE77928", Offset = "0xE77928", VA = "0xE77928", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0xE77930", Offset = "0xE77930", VA = "0xE77930")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x2000585")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page6.html")]
	public class FABRIK : IK
	{
		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0xE779A4", Offset = "0xE779A4", VA = "0xE779A4", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0xE779E8", Offset = "0xE779E8", VA = "0xE779E8", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0xE77A2C", Offset = "0xE77A2C", VA = "0xE77A2C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0xE77A70", Offset = "0xE77A70", VA = "0xE77A70")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0xE77AB4", Offset = "0xE77AB4", VA = "0xE77AB4", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0xE77ABC", Offset = "0xE77ABC", VA = "0xE77ABC")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000586")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page7.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK Root")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0xE77B30", Offset = "0xE77B30", VA = "0xE77B30", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0xE77B74", Offset = "0xE77B74", VA = "0xE77B74", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0xE77BB8", Offset = "0xE77BB8", VA = "0xE77BB8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0xE77BFC", Offset = "0xE77BFC", VA = "0xE77BFC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xE77C40", Offset = "0xE77C40", VA = "0xE77C40", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0xE77C48", Offset = "0xE77C48", VA = "0xE77C48")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x2000587")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Full Body Biped IK")]
	[HelpURL("https://www.youtube.com/watch?v=7__IafZGwvI&index=1&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0xE77CBC", Offset = "0xE77CBC", VA = "0xE77CBC", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0xE77D00", Offset = "0xE77D00", VA = "0xE77D00", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0xE77D44", Offset = "0xE77D44", VA = "0xE77D44")]
		[ContextMenu("TUTORIAL VIDEO (SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0xE77D88", Offset = "0xE77D88", VA = "0xE77D88")]
		[ContextMenu("TUTORIAL VIDEO (INSPECTOR)")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0xE77DCC", Offset = "0xE77DCC", VA = "0xE77DCC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0xE77E10", Offset = "0xE77E10", VA = "0xE77E10")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0xE77E54", Offset = "0xE77E54", VA = "0xE77E54")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0xE77E94", Offset = "0xE77E94", VA = "0xE77E94", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0xE77E9C", Offset = "0xE77E9C", VA = "0xE77E9C")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0xE7806C", Offset = "0xE7806C", VA = "0xE7806C")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0xE78528", Offset = "0xE78528", VA = "0xE78528")]
		[ContextMenu("Reinitiate")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0xE78548", Offset = "0xE78548", VA = "0xE78548")]
		[ContextMenu("Auto-detect References")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0xE78610", Offset = "0xE78610", VA = "0xE78610")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x2000588")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x6001ACD")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0xE786C0", Offset = "0xE786C0", VA = "0xE786C0", Slot = "6")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0xE78738", Offset = "0xE78738", VA = "0xE78738", Slot = "5")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0xE787A8", Offset = "0xE787A8", VA = "0xE787A8", Slot = "7")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6001AD1")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6001AD2")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0xE77684", Offset = "0xE77684", VA = "0xE77684")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x2000589")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The IK components, assign in the order in which you wish to update them.")]
		public IK[] IKComponents;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Optional. Assign it if you are using 'Animate Physics' as the Update Mode.")]
		public Animator animator;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x170000FB")]
		private bool animatePhysics
		{
			[Token(Token = "0x6001AD4")]
			[Address(RVA = "0xE787F8", Offset = "0xE787F8", VA = "0xE787F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0xE78884", Offset = "0xE78884", VA = "0xE78884")]
		private void Start()
		{
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0xE788E8", Offset = "0xE788E8", VA = "0xE788E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0xE78988", Offset = "0xE78988", VA = "0xE78988")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0xE789B4", Offset = "0xE789B4", VA = "0xE789B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0xE7890C", Offset = "0xE7890C", VA = "0xE7890C")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xE78A38", Offset = "0xE78A38", VA = "0xE78A38")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x200058A")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Leg IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	public class LegIK : IK
	{
		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0xE78A40", Offset = "0xE78A40", VA = "0xE78A40", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0xE78A84", Offset = "0xE78A84", VA = "0xE78A84", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0xE78AC8", Offset = "0xE78AC8", VA = "0xE78AC8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0xE78B0C", Offset = "0xE78B0C", VA = "0xE78B0C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0xE78B50", Offset = "0xE78B50", VA = "0xE78B50", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0xE78B58", Offset = "0xE78B58", VA = "0xE78B58")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x200058B")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Limb IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	public class LimbIK : IK
	{
		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0xE78BCC", Offset = "0xE78BCC", VA = "0xE78BCC", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0xE78C10", Offset = "0xE78C10", VA = "0xE78C10", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0xE78C54", Offset = "0xE78C54", VA = "0xE78C54")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0xE78C98", Offset = "0xE78C98", VA = "0xE78C98")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0xE78CDC", Offset = "0xE78CDC", VA = "0xE78CDC", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0xE78CE4", Offset = "0xE78CE4", VA = "0xE78CE4")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x200058C")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page13.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Look At IK")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0xE78D58", Offset = "0xE78D58", VA = "0xE78D58", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0xE78D9C", Offset = "0xE78D9C", VA = "0xE78D9C", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0xE78DE0", Offset = "0xE78DE0", VA = "0xE78DE0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0xE78E24", Offset = "0xE78E24", VA = "0xE78E24")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0xE78E68", Offset = "0xE78E68", VA = "0xE78E68", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0xE78E70", Offset = "0xE78E70", VA = "0xE78E70")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x200058D")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Trigonometric IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page15.html")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0xE78EE4", Offset = "0xE78EE4", VA = "0xE78EE4", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0xE78F28", Offset = "0xE78F28", VA = "0xE78F28", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0xE78F6C", Offset = "0xE78F6C", VA = "0xE78F6C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0xE78FB0", Offset = "0xE78FB0", VA = "0xE78FB0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0xE78FF4", Offset = "0xE78FF4", VA = "0xE78FF4", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0xE78FFC", Offset = "0xE78FFC", VA = "0xE78FFC")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x200058E")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/VR IK")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x200058F")]
		public class References
		{
			[Token(Token = "0x4001AB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4001ABA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4001ABB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4001ABC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("Optional")]
			public Transform chest;

			[Token(Token = "0x4001ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[UnityEngine.Tooltip("Optional")]
			public Transform neck;

			[Token(Token = "0x4001ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4001ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[UnityEngine.Tooltip("Optional")]
			public Transform leftShoulder;

			[Token(Token = "0x4001AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x4001AC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x4001AC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x4001AC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[UnityEngine.Tooltip("Optional")]
			public Transform rightShoulder;

			[Token(Token = "0x4001AC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x4001AC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x4001AC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x4001AC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[UnityEngine.Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftThigh;

			[Token(Token = "0x4001AC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[UnityEngine.Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftCalf;

			[Token(Token = "0x4001AC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[UnityEngine.Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftFoot;

			[Token(Token = "0x4001ACA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[UnityEngine.Tooltip("Optional")]
			public Transform leftToes;

			[Token(Token = "0x4001ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[UnityEngine.Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightThigh;

			[Token(Token = "0x4001ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[UnityEngine.Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightCalf;

			[Token(Token = "0x4001ACD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[UnityEngine.Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightFoot;

			[Token(Token = "0x4001ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[UnityEngine.Tooltip("Optional")]
			public Transform rightToes;

			[Token(Token = "0x170000FC")]
			public bool isFilled
			{
				[Token(Token = "0x6001AFE")]
				[Address(RVA = "0xE79A68", Offset = "0xE79A68", VA = "0xE79A68")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000FD")]
			public bool isEmpty
			{
				[Token(Token = "0x6001AFF")]
				[Address(RVA = "0xE796AC", Offset = "0xE796AC", VA = "0xE796AC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001AFD")]
			[Address(RVA = "0xE7A06C", Offset = "0xE7A06C", VA = "0xE7A06C")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x6001B00")]
			[Address(RVA = "0xE79174", Offset = "0xE79174", VA = "0xE79174")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x6001B01")]
			[Address(RVA = "0xE7A064", Offset = "0xE7A064", VA = "0xE7A064")]
			public References()
			{
			}
		}

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Bone mapping. Right-click on the component header and select 'Auto-detect References' of fill in manually if not a Humanoid character. Chest, neck, shoulder and toe bones are optional. VRIK also supports legless characters. If you do not wish to use legs, leave all leg references empty.")]
		[ContextMenuItem("Auto-detect References", "AutoDetectReferences")]
		public References references;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The VRIK solver.")]
		public IKSolverVR solver;

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0xE79070", Offset = "0xE79070", VA = "0xE79070", Slot = "4")]
		public override void SetLOD(int lod)
		{
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0xE7908C", Offset = "0xE7908C", VA = "0xE7908C", Slot = "9")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0xE790D0", Offset = "0xE790D0", VA = "0xE790D0", Slot = "10")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0xE79114", Offset = "0xE79114", VA = "0xE79114")]
		[ContextMenu("TUTORIAL VIDEO (STEAMVR SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0xE79158", Offset = "0xE79158", VA = "0xE79158")]
		[ContextMenu("Auto-detect References")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0xE79610", Offset = "0xE79610", VA = "0xE79610")]
		[ContextMenu("Guess Hand Orientations")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0xE79638", Offset = "0xE79638", VA = "0xE79638", Slot = "8")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0xE79640", Offset = "0xE79640", VA = "0xE79640", Slot = "5")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0xE79E24", Offset = "0xE79E24", VA = "0xE79E24", Slot = "6")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0xE79FB4", Offset = "0xE79FB4", VA = "0xE79FB4")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000590")]
	public class FABRIKChain
	{
		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x6001B02")]
		[Address(RVA = "0xE7A5B0", Offset = "0xE7A5B0", VA = "0xE7A5B0")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0xE7A680", Offset = "0xE7A680", VA = "0xE7A680")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0xE7A6A0", Offset = "0xE7A6A0", VA = "0xE7A6A0")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0xE7A9C8", Offset = "0xE7A9C8", VA = "0xE7A9C8")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0xE7A834", Offset = "0xE7A834", VA = "0xE7A834")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0xE7AB80", Offset = "0xE7AB80", VA = "0xE7AB80")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x2000591")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0xE7ABEC", Offset = "0xE7ABEC", VA = "0xE7ABEC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0xE7B164", Offset = "0xE7B164", VA = "0xE7B164")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0xE7B2F8", Offset = "0xE7B2F8", VA = "0xE7B2F8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0xE7B420", Offset = "0xE7B420", VA = "0xE7B420")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x2000592")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000593")]
		public class BendBone
		{
			[Token(Token = "0x4001B09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("Assign spine and/or neck bones.")]
			public Transform transform;

			[Token(Token = "0x4001B0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The weight of rotating this bone.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x4001B0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6001B1A")]
			[Address(RVA = "0xE7E784", Offset = "0xE7E784", VA = "0xE7E784")]
			public BendBone()
			{
			}

			[Token(Token = "0x6001B1B")]
			[Address(RVA = "0xE7E7E4", Offset = "0xE7E7E4", VA = "0xE7E7E4")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x6001B1C")]
			[Address(RVA = "0xE7BDD8", Offset = "0xE7BDD8", VA = "0xE7BDD8")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6001B1D")]
			[Address(RVA = "0xE7C1A8", Offset = "0xE7C1A8", VA = "0xE7C1A8")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Reference to the FBBIK component.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[LargeHeader("Position")]
		[UnityEngine.Tooltip("Master weight for positioning the head.")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("The weight of moving the body along with the head")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("The weight of moving the thighs along with the head")]
		public float thighWeight;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("If false, hands will not pull the head away if they are too far. Disabling this will improve performance significantly.")]
		public bool handsPullBody;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("The weight of rotating the head bone after solving")]
		[LargeHeader("Rotation")]
		public float rotationWeight;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("Clamping the rotation of the body")]
		[Range(0f, 1f)]
		public float bodyClampWeight;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Clamping the rotation of the head")]
		[Range(0f, 1f)]
		public float headClampWeight;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("The master weight of bending/twisting the spine to the rotation of the head effector. This is similar to CCD, but uses the rotation of the head effector not the position.")]
		public float bendWeight;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The bones to use for bending.")]
		public BendBone[] bendBones;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("Optional. The master weight of the CCD (Cyclic Coordinate Descent) IK effect that bends the spine towards the head effector before FBBIK solves.")]
		[LargeHeader("CCD")]
		public float CCDWeight;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("The weight of rolling the bones in towards the target")]
		public float roll;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1000f)]
		[UnityEngine.Tooltip("Smoothing the CCD effect.")]
		public float damper;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Bones to use for the CCD pass. Assign spine and/or neck bones.")]
		public Transform[] CCDBones;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		[LargeHeader("Stretching")]
		[UnityEngine.Tooltip("Stretching the spine/neck to help reach the target. This is useful for making sure the head stays locked relative to the VR headset. NB! Stretching is done after FBBIK has solved so if you have the hand effectors pinned and spine bones included in the 'Stretch Bones', the hands might become offset from their target positions.")]
		public float postStretchWeight;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[UnityEngine.Tooltip("Stretch magnitude limit.")]
		public float maxStretch;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("If > 0, dampers the stretching effect.")]
		public float stretchDamper;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[UnityEngine.Tooltip("If true, will fix head position to this Transform no matter what. Good for making sure the head will not budge away from the VR headset")]
		public bool fixHead;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("Bones to use for stretching. The more bones you add, the less noticable the effect.")]
		public Transform[] stretchBones;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[LargeHeader("Chest Direction")]
		public Vector3 chestDirection;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float chestDirectionWeight;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0xE7B428", Offset = "0xE7B428", VA = "0xE7B428")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0xE7B928", Offset = "0xE7B928", VA = "0xE7B928")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0xE7BE04", Offset = "0xE7BE04", VA = "0xE7BE04")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0xE7C1D0", Offset = "0xE7C1D0", VA = "0xE7C1D0")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0xE7CACC", Offset = "0xE7CACC", VA = "0xE7CACC")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0xE7CEC4", Offset = "0xE7CEC4", VA = "0xE7CEC4")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0xE7D2D4", Offset = "0xE7D2D4", VA = "0xE7D2D4")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0xE7DC4C", Offset = "0xE7DC4C", VA = "0xE7DC4C")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0xE7C810", Offset = "0xE7C810", VA = "0xE7C810")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0xE7DE88", Offset = "0xE7DE88", VA = "0xE7DE88")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0xE7DB6C", Offset = "0xE7DB6C", VA = "0xE7DB6C")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0xE7DA6C", Offset = "0xE7DA6C", VA = "0xE7DA6C")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0xE7E1E8", Offset = "0xE7E1E8", VA = "0xE7E1E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0xE7E570", Offset = "0xE7E570", VA = "0xE7E570")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000594")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x2000595")]
		public class ChildConstraint
		{
			[Token(Token = "0x4001B23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x4001B24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x4001B25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x4001B26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x4001B29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x4001B2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x4001B2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4001B2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x170000FE")]
			public float nominalDistance
			{
				[Token(Token = "0x6001B32")]
				[Address(RVA = "0xE81920", Offset = "0xE81920", VA = "0xE81920")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001B33")]
				[Address(RVA = "0xE81928", Offset = "0xE81928", VA = "0xE81928")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000FF")]
			public bool isRigid
			{
				[Token(Token = "0x6001B34")]
				[Address(RVA = "0xE81930", Offset = "0xE81930", VA = "0xE81930")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001B35")]
				[Address(RVA = "0xE81938", Offset = "0xE81938", VA = "0xE81938")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001B36")]
			[Address(RVA = "0xE81944", Offset = "0xE81944", VA = "0xE81944")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x6001B37")]
			[Address(RVA = "0xE7F5F4", Offset = "0xE7F5F4", VA = "0xE7F5F4")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6001B38")]
			[Address(RVA = "0xE7FCD8", Offset = "0xE7FCD8", VA = "0xE7FCD8")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6001B39")]
			[Address(RVA = "0xE816E4", Offset = "0xE816E4", VA = "0xE816E4")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000596")]
		public enum Smoothing
		{
			[Token(Token = "0x4001B2E")]
			None,
			[Token(Token = "0x4001B2F")]
			Exponential,
			[Token(Token = "0x4001B30")]
			Cubic
		}

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float push;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(-1f, 1f)]
		public float pushParent;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float reach;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x4001B22")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0xE7E86C", Offset = "0xE7E86C", VA = "0xE7E86C")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0xE7EA04", Offset = "0xE7EA04", VA = "0xE7EA04")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0xE7EB74", Offset = "0xE7EB74", VA = "0xE7EB74")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0xE7ECD8", Offset = "0xE7ECD8", VA = "0xE7ECD8")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0xE7ED94", Offset = "0xE7ED94", VA = "0xE7ED94")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0xE7EEB0", Offset = "0xE7EEB0", VA = "0xE7EEB0")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0xE7F8F4", Offset = "0xE7F8F4", VA = "0xE7F8F4")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0xE7F02C", Offset = "0xE7F02C", VA = "0xE7F02C")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0xE7FEBC", Offset = "0xE7FEBC", VA = "0xE7FEBC")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0xE80150", Offset = "0xE80150", VA = "0xE80150")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0xE80420", Offset = "0xE80420", VA = "0xE80420")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0xE80DE8", Offset = "0xE80DE8", VA = "0xE80DE8")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0xE812E0", Offset = "0xE812E0", VA = "0xE812E0")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0xE814E0", Offset = "0xE814E0", VA = "0xE814E0")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0xE811CC", Offset = "0xE811CC", VA = "0xE811CC")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0xE80C88", Offset = "0xE80C88", VA = "0xE80C88")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0xE81168", Offset = "0xE81168", VA = "0xE81168")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0xE815BC", Offset = "0xE815BC", VA = "0xE815BC")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0xE81094", Offset = "0xE81094", VA = "0xE81094")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0xE813E4", Offset = "0xE813E4", VA = "0xE813E4")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000597")]
	public class IKConstraintBend
	{
		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x17000100")]
		public bool initiated
		{
			[Token(Token = "0x6001B3B")]
			[Address(RVA = "0xE81B78", Offset = "0xE81B78", VA = "0xE81B78")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B3C")]
			[Address(RVA = "0xE81B80", Offset = "0xE81B80", VA = "0xE81B80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0xE819A0", Offset = "0xE819A0", VA = "0xE819A0")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0xE7E998", Offset = "0xE7E998", VA = "0xE7E998")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0xE81B8C", Offset = "0xE81B8C", VA = "0xE81B8C")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0xE7F648", Offset = "0xE7F648", VA = "0xE7F648")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0xE7F68C", Offset = "0xE7F68C", VA = "0xE7F68C")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0xE81D68", Offset = "0xE81D68", VA = "0xE81D68")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0xE820BC", Offset = "0xE820BC", VA = "0xE820BC")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0xE80658", Offset = "0xE80658", VA = "0xE80658")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0xE81C20", Offset = "0xE81C20", VA = "0xE81C20")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0xE81CC4", Offset = "0xE81CC4", VA = "0xE81CC4")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000598")]
	public class IKEffector
	{
		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x17000101")]
		public bool isEndEffector
		{
			[Token(Token = "0x6001B47")]
			[Address(RVA = "0xE82484", Offset = "0xE82484", VA = "0xE82484")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B48")]
			[Address(RVA = "0xE8248C", Offset = "0xE8248C", VA = "0xE8248C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0xE7E18C", Offset = "0xE7E18C", VA = "0xE7E18C")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0xE82498", Offset = "0xE82498", VA = "0xE82498")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0xE8251C", Offset = "0xE8251C", VA = "0xE8251C")]
		public IKEffector()
		{
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0xE826EC", Offset = "0xE826EC", VA = "0xE826EC")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0xE828F8", Offset = "0xE828F8", VA = "0xE828F8")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0xE82C00", Offset = "0xE82C00", VA = "0xE82C00")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0xE82ED8", Offset = "0xE82ED8", VA = "0xE82ED8")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0xE82FF8", Offset = "0xE82FF8", VA = "0xE82FF8")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0xE83094", Offset = "0xE83094", VA = "0xE83094")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0xE83748", Offset = "0xE83748", VA = "0xE83748")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0xE837A0", Offset = "0xE837A0", VA = "0xE837A0")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0xE83974", Offset = "0xE83974", VA = "0xE83974")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0xE83BD0", Offset = "0xE83BD0", VA = "0xE83BD0")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000599")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x200059A")]
		public class BoneMap
		{
			[Token(Token = "0x4001B63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4001B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4001B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4001B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4001B67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4001B68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4001B69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4001B6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4001B6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x4001B6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4001B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4001B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4001B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4001B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4001B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4001B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4001B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4001B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4001B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4001B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4001B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4001B78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x17000102")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x6001B5B")]
				[Address(RVA = "0xE84140", Offset = "0xE84140", VA = "0xE84140")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000103")]
			public bool isNodeBone
			{
				[Token(Token = "0x6001B5E")]
				[Address(RVA = "0xE841F8", Offset = "0xE841F8", VA = "0xE841F8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000104")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x6001B72")]
				[Address(RVA = "0xE845E4", Offset = "0xE845E4", VA = "0xE845E4")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6001B5A")]
			[Address(RVA = "0xE840FC", Offset = "0xE840FC", VA = "0xE840FC")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6001B5C")]
			[Address(RVA = "0xE84170", Offset = "0xE84170", VA = "0xE84170")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6001B5D")]
			[Address(RVA = "0xE841B4", Offset = "0xE841B4", VA = "0xE841B4")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x6001B5F")]
			[Address(RVA = "0xE84208", Offset = "0xE84208", VA = "0xE84208")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x6001B60")]
			[Address(RVA = "0xE842DC", Offset = "0xE842DC", VA = "0xE842DC")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x6001B61")]
			[Address(RVA = "0xE842E4", Offset = "0xE842E4", VA = "0xE842E4")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x6001B62")]
			[Address(RVA = "0xE843B0", Offset = "0xE843B0", VA = "0xE843B0")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x6001B63")]
			[Address(RVA = "0xE8441C", Offset = "0xE8441C", VA = "0xE8441C")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x6001B64")]
			[Address(RVA = "0xE844D4", Offset = "0xE844D4", VA = "0xE844D4")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x6001B65")]
			[Address(RVA = "0xE8474C", Offset = "0xE8474C", VA = "0xE8474C")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x6001B66")]
			[Address(RVA = "0xE84778", Offset = "0xE84778", VA = "0xE84778")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x6001B67")]
			[Address(RVA = "0xE847A4", Offset = "0xE847A4", VA = "0xE847A4")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x6001B68")]
			[Address(RVA = "0xE847CC", Offset = "0xE847CC", VA = "0xE847CC")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x6001B69")]
			[Address(RVA = "0xE84890", Offset = "0xE84890", VA = "0xE84890")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001B6A")]
			[Address(RVA = "0xE84A24", Offset = "0xE84A24", VA = "0xE84A24")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6001B6B")]
			[Address(RVA = "0xE84A48", Offset = "0xE84A48", VA = "0xE84A48")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6001B6C")]
			[Address(RVA = "0xE84B68", Offset = "0xE84B68", VA = "0xE84B68")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x6001B6D")]
			[Address(RVA = "0xE84BCC", Offset = "0xE84BCC", VA = "0xE84BCC")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x6001B6E")]
			[Address(RVA = "0xE84D4C", Offset = "0xE84D4C", VA = "0xE84D4C")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x6001B6F")]
			[Address(RVA = "0xE84ECC", Offset = "0xE84ECC", VA = "0xE84ECC")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x6001B70")]
			[Address(RVA = "0xE84F48", Offset = "0xE84F48", VA = "0xE84F48")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6001B71")]
			[Address(RVA = "0xE84908", Offset = "0xE84908", VA = "0xE84908")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001B73")]
			[Address(RVA = "0xE85070", Offset = "0xE85070", VA = "0xE85070")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0xE83E8C", Offset = "0xE83E8C", VA = "0xE83E8C", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0xE83E94", Offset = "0xE83E94", VA = "0xE83E94", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0xE83E98", Offset = "0xE83E98", VA = "0xE83E98")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0xE83FE0", Offset = "0xE83FE0", VA = "0xE83FE0")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0xE840F4", Offset = "0xE840F4", VA = "0xE840F4")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200059B")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0xE8508C", Offset = "0xE8508C", VA = "0xE8508C", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0xE85134", Offset = "0xE85134", VA = "0xE85134")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0xE851C4", Offset = "0xE851C4", VA = "0xE851C4")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0xE85270", Offset = "0xE85270", VA = "0xE85270")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0xE85288", Offset = "0xE85288", VA = "0xE85288")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0xE852A4", Offset = "0xE852A4", VA = "0xE852A4", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0xE8534C", Offset = "0xE8534C", VA = "0xE8534C")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0xE85364", Offset = "0xE85364", VA = "0xE85364")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200059C")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x200059D")]
		public enum BoneMapType
		{
			[Token(Token = "0x4001B88")]
			Parent,
			[Token(Token = "0x4001B89")]
			Bone1,
			[Token(Token = "0x4001B8A")]
			Bone2,
			[Token(Token = "0x4001B8B")]
			Bone3
		}

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0xE85388", Offset = "0xE85388", VA = "0xE85388", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0xE853FC", Offset = "0xE853FC", VA = "0xE853FC")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0xE854C4", Offset = "0xE854C4", VA = "0xE854C4")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0xE8577C", Offset = "0xE8577C", VA = "0xE8577C")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0xE858C8", Offset = "0xE858C8", VA = "0xE858C8")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0xE85A4C", Offset = "0xE85A4C", VA = "0xE85A4C")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0xE85AAC", Offset = "0xE85AAC", VA = "0xE85AAC")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0xE85B44", Offset = "0xE85B44", VA = "0xE85B44")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0xE85BEC", Offset = "0xE85BEC", VA = "0xE85BEC", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0xE85EA0", Offset = "0xE85EA0", VA = "0xE85EA0")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0xE85F00", Offset = "0xE85F00", VA = "0xE85F00")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200059E")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 3f)]
		public int iterations;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float twistWeight;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0xE86048", Offset = "0xE86048", VA = "0xE86048", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0xE86374", Offset = "0xE86374", VA = "0xE86374")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0xE864EC", Offset = "0xE864EC", VA = "0xE864EC")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0xE866A4", Offset = "0xE866A4", VA = "0xE866A4")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0xE86718", Offset = "0xE86718", VA = "0xE86718")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0xE86774", Offset = "0xE86774", VA = "0xE86774")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0xE867EC", Offset = "0xE867EC", VA = "0xE867EC", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0xE86E64", Offset = "0xE86E64", VA = "0xE86E64")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0xE86E9C", Offset = "0xE86E9C", VA = "0xE86E9C")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0xE87100", Offset = "0xE87100", VA = "0xE87100")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0xE87428", Offset = "0xE87428", VA = "0xE87428")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0xE87508", Offset = "0xE87508", VA = "0xE87508")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0xE875BC", Offset = "0xE875BC", VA = "0xE875BC")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200059F")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x20005A0")]
		public class Point
		{
			[Token(Token = "0x4001BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4001BA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x4001BA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4001BA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x4001BA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4001BA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x6001BAA")]
			[Address(RVA = "0xE87E98", Offset = "0xE87E98", VA = "0xE87E98")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6001BAB")]
			[Address(RVA = "0xE87EDC", Offset = "0xE87EDC", VA = "0xE87EDC")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6001BAC")]
			[Address(RVA = "0xE87FBC", Offset = "0xE87FBC", VA = "0xE87FBC")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x6001BAD")]
			[Address(RVA = "0xE87FE8", Offset = "0xE87FE8", VA = "0xE87FE8")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x6001BAE")]
			[Address(RVA = "0xE88014", Offset = "0xE88014", VA = "0xE88014")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x6001BAF")]
			[Address(RVA = "0xE88058", Offset = "0xE88058", VA = "0xE88058")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x6001BB0")]
			[Address(RVA = "0xE8809C", Offset = "0xE8809C", VA = "0xE8809C")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005A1")]
		public class Bone : Point
		{
			[Token(Token = "0x4001BA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4001BAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x4001BAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x4001BAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x4001BAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x17000106")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x6001BB1")]
				[Address(RVA = "0xE880FC", Offset = "0xE880FC", VA = "0xE880FC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001BB2")]
				[Address(RVA = "0xE881EC", Offset = "0xE881EC", VA = "0xE881EC")]
				set
				{
				}
			}

			[Token(Token = "0x6001BB3")]
			[Address(RVA = "0xE88270", Offset = "0xE88270", VA = "0xE88270")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0xE884DC", Offset = "0xE884DC", VA = "0xE884DC")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6001BB5")]
			[Address(RVA = "0xE88798", Offset = "0xE88798", VA = "0xE88798")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6001BB6")]
			[Address(RVA = "0xE8898C", Offset = "0xE8898C", VA = "0xE8898C")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x6001BB7")]
			[Address(RVA = "0xE889B4", Offset = "0xE889B4", VA = "0xE889B4")]
			public Bone()
			{
			}

			[Token(Token = "0x6001BB8")]
			[Address(RVA = "0xE88A20", Offset = "0xE88A20", VA = "0xE88A20")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x6001BB9")]
			[Address(RVA = "0xE88AA0", Offset = "0xE88AA0", VA = "0xE88AA0")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005A2")]
		public class Node : Point
		{
			[Token(Token = "0x4001BAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4001BAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x4001BB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x4001BB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x6001BBA")]
			[Address(RVA = "0xE88B34", Offset = "0xE88B34", VA = "0xE88B34")]
			public Node()
			{
			}

			[Token(Token = "0x6001BBB")]
			[Address(RVA = "0xE7ECAC", Offset = "0xE7ECAC", VA = "0xE7ECAC")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x6001BBC")]
			[Address(RVA = "0xE88B38", Offset = "0xE88B38", VA = "0xE88B38")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x20005A3")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x20005A4")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("The positional or the master weight of the solver.")]
		[Range(0f, 1f)]
		public float IKPositionWeight;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x17000105")]
		public bool initiated
		{
			[Token(Token = "0x6001B9D")]
			[Address(RVA = "0xE87AA4", Offset = "0xE87AA4", VA = "0xE87AA4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B9E")]
			[Address(RVA = "0xE87AAC", Offset = "0xE87AAC", VA = "0xE87AAC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0xE87800", Offset = "0xE87800", VA = "0xE87800")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B95")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0xE87874", Offset = "0xE87874", VA = "0xE87874")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0xE879F0", Offset = "0xE879F0", VA = "0xE879F0")]
		public void Update()
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0xE87A60", Offset = "0xE87A60", VA = "0xE87A60", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0xE87A6C", Offset = "0xE87A6C", VA = "0xE87A6C")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0xE87A78", Offset = "0xE87A78", VA = "0xE87A78")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0xE87A80", Offset = "0xE87A80", VA = "0xE87A80")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0xE87A9C", Offset = "0xE87A9C", VA = "0xE87A9C")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x6001B9F")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x6001BA0")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x6001BA1")]
		public abstract void FixTransforms();

		[Token(Token = "0x6001BA2")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x6001BA3")]
		protected abstract void OnInitiate();

		[Token(Token = "0x6001BA4")]
		protected abstract void OnUpdate();

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0xE87AB8", Offset = "0xE87AB8", VA = "0xE87AB8")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0xE87AD0", Offset = "0xE87AD0", VA = "0xE87AD0")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0xE87BF4", Offset = "0xE87BF4", VA = "0xE87BF4")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0xE87C8C", Offset = "0xE87C8C", VA = "0xE87C8C")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0xE87E80", Offset = "0xE87E80", VA = "0xE87E80")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005A5")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float poleWeight;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x17000107")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x6001BC6")]
			[Address(RVA = "0xE88D94", Offset = "0xE88D94", VA = "0xE88D94")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000108")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x6001BC7")]
			[Address(RVA = "0xE88DC4", Offset = "0xE88DC4", VA = "0xE88DC4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000109")]
		protected override int minBones
		{
			[Token(Token = "0x6001BCA")]
			[Address(RVA = "0xE89A14", Offset = "0xE89A14", VA = "0xE89A14", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700010A")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x6001BCE")]
			[Address(RVA = "0xE89F54", Offset = "0xE89F54", VA = "0xE89F54", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0xE88C5C", Offset = "0xE88C5C", VA = "0xE88C5C")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0xE88DF4", Offset = "0xE88DF4", VA = "0xE88DF4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0xE89080", Offset = "0xE89080", VA = "0xE89080", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0xE8996C", Offset = "0xE8996C", VA = "0xE8996C")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0xE89608", Offset = "0xE89608", VA = "0xE89608")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0xE89A1C", Offset = "0xE89A1C", VA = "0xE89A1C")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0xE89FB4", Offset = "0xE89FB4", VA = "0xE89FB4")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005A6")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0xE8A058", Offset = "0xE8A058", VA = "0xE8A058", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0xE8A3FC", Offset = "0xE8A3FC", VA = "0xE8A3FC")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0xE8A4AC", Offset = "0xE8A4AC", VA = "0xE8A4AC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0xE8A62C", Offset = "0xE8A62C", VA = "0xE8A62C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0xE8A78C", Offset = "0xE8A78C", VA = "0xE8A78C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0xE8A7CC", Offset = "0xE8A7CC", VA = "0xE8A7CC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xE8A81C", Offset = "0xE8A81C", VA = "0xE8A81C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0xE8AB7C", Offset = "0xE8AB7C", VA = "0xE8AB7C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0xE8AB9C", Offset = "0xE8AB9C", VA = "0xE8AB9C")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0xE8A874", Offset = "0xE8A874", VA = "0xE8A874")]
		private void Read()
		{
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0xE8ABFC", Offset = "0xE8ABFC", VA = "0xE8ABFC")]
		private void Write()
		{
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0xE8AD74", Offset = "0xE8AD74", VA = "0xE8AD74")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005A7")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0xE8AF68", Offset = "0xE8AF68", VA = "0xE8AF68")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0xE8AFD8", Offset = "0xE8AFD8", VA = "0xE8AFD8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0xE8B048", Offset = "0xE8B048", VA = "0xE8B048", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0xE8B2FC", Offset = "0xE8B2FC", VA = "0xE8B2FC")]
		protected void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0xE8B98C", Offset = "0xE8B98C", VA = "0xE8B98C")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005A8")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x1700010B")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x6001BE6")]
			[Address(RVA = "0xE8C7A0", Offset = "0xE8C7A0", VA = "0xE8C7A0", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0xE7A75C", Offset = "0xE7A75C", VA = "0xE7A75C")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0xE7AAA8", Offset = "0xE7AAA8", VA = "0xE7AAA8")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0xE8BEF4", Offset = "0xE8BEF4", VA = "0xE8BEF4", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0xE8BF7C", Offset = "0xE8BF7C", VA = "0xE8BF7C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0xE8C494", Offset = "0xE8C494", VA = "0xE8C494", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0xE8C7A8", Offset = "0xE8C7A8", VA = "0xE8C7A8")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0xE8B994", Offset = "0xE8B994", VA = "0xE8B994")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0xE8BEAC", Offset = "0xE8BEAC", VA = "0xE8BEAC")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0xE8C758", Offset = "0xE8C758", VA = "0xE8C758")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0xE8BD30", Offset = "0xE8BD30", VA = "0xE8BD30")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0xE8CE54", Offset = "0xE8CE54", VA = "0xE8CE54")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0xE8CEBC", Offset = "0xE8CEBC", VA = "0xE8CEBC")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0xE8CF8C", Offset = "0xE8CF8C", VA = "0xE8CF8C")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0xE8D054", Offset = "0xE8D054", VA = "0xE8D054")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0xE8C20C", Offset = "0xE8C20C", VA = "0xE8C20C")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0xE8C350", Offset = "0xE8C350", VA = "0xE8C350")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0xE8D144", Offset = "0xE8D144", VA = "0xE8D144")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0xE8CA44", Offset = "0xE8CA44", VA = "0xE8CA44")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0xE8BE9C", Offset = "0xE8BE9C", VA = "0xE8BE9C")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0xE8D7B4", Offset = "0xE8D7B4", VA = "0xE8D7B4")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0xE8D304", Offset = "0xE8D304", VA = "0xE8D304")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0xE8C8C4", Offset = "0xE8C8C4", VA = "0xE8C8C4")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0xE8C994", Offset = "0xE8C994", VA = "0xE8C994")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0xE8D86C", Offset = "0xE8D86C", VA = "0xE8D86C")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005A9")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float rootPin;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0xE8D908", Offset = "0xE8D908", VA = "0xE8D908", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0xE8DFCC", Offset = "0xE8DFCC", VA = "0xE8DFCC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0xE8E058", Offset = "0xE8E058", VA = "0xE8E058", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0xE8E0EC", Offset = "0xE8E0EC", VA = "0xE8E0EC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0xE8E1E4", Offset = "0xE8E1E4", VA = "0xE8E1E4")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0xE8E274", Offset = "0xE8E274", VA = "0xE8E274", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0xE8E674", Offset = "0xE8E674", VA = "0xE8E674", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0xE8E86C", Offset = "0xE8E86C", VA = "0xE8E86C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0xE8E714", Offset = "0xE8E714", VA = "0xE8E714")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0xE8E44C", Offset = "0xE8E44C", VA = "0xE8E44C")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0xE8E8F0", Offset = "0xE8E8F0", VA = "0xE8E8F0")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005AA")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 10f)]
		public int iterations;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0xE8E95C", Offset = "0xE8E95C", VA = "0xE8E95C")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0xE8EA38", Offset = "0xE8EA38", VA = "0xE8EA38")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0xE8EA80", Offset = "0xE8EA80", VA = "0xE8EA80")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0xE8EB94", Offset = "0xE8EB94", VA = "0xE8EB94")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0xE8EBE4", Offset = "0xE8EBE4", VA = "0xE8EBE4")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0xE8EC58", Offset = "0xE8EC58", VA = "0xE8EC58", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0xE8EDF8", Offset = "0xE8EDF8", VA = "0xE8EDF8", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0xE8EF54", Offset = "0xE8EF54", VA = "0xE8EF54", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0xE8F158", Offset = "0xE8F158", VA = "0xE8F158", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0xE8F22C", Offset = "0xE8F22C", VA = "0xE8F22C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0xE8F314", Offset = "0xE8F314", VA = "0xE8F314", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0xE8F474", Offset = "0xE8F474", VA = "0xE8F474", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0xE8F610", Offset = "0xE8F610", VA = "0xE8F610", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0xE8F848", Offset = "0xE8F848", VA = "0xE8F848", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0xE8FB28", Offset = "0xE8FB28", VA = "0xE8FB28", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0xE8FB60", Offset = "0xE8FB60", VA = "0xE8FB60", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0xE8FC44", Offset = "0xE8FC44", VA = "0xE8FC44")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005AB")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x4001BE4")]
		Body,
		[Token(Token = "0x4001BE5")]
		LeftShoulder,
		[Token(Token = "0x4001BE6")]
		RightShoulder,
		[Token(Token = "0x4001BE7")]
		LeftThigh,
		[Token(Token = "0x4001BE8")]
		RightThigh,
		[Token(Token = "0x4001BE9")]
		LeftHand,
		[Token(Token = "0x4001BEA")]
		RightHand,
		[Token(Token = "0x4001BEB")]
		LeftFoot,
		[Token(Token = "0x4001BEC")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x20005AC")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x4001BEE")]
		LeftArm,
		[Token(Token = "0x4001BEF")]
		RightArm,
		[Token(Token = "0x4001BF0")]
		LeftLeg,
		[Token(Token = "0x4001BF1")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x20005AD")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		public float spineStiffness;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Range(-1f, 1f)]
		public float pullBodyVertical;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(-1f, 1f)]
		public float pullBodyHorizontal;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x1700010C")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x6001C16")]
			[Address(RVA = "0xE8FD90", Offset = "0xE8FD90", VA = "0xE8FD90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010D")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x6001C17")]
			[Address(RVA = "0xE8FED0", Offset = "0xE8FED0", VA = "0xE8FED0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x6001C18")]
			[Address(RVA = "0xE8FED8", Offset = "0xE8FED8", VA = "0xE8FED8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x6001C19")]
			[Address(RVA = "0xE8FEE0", Offset = "0xE8FEE0", VA = "0xE8FEE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x6001C1A")]
			[Address(RVA = "0xE8FEE8", Offset = "0xE8FEE8", VA = "0xE8FEE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x6001C1B")]
			[Address(RVA = "0xE8FEF0", Offset = "0xE8FEF0", VA = "0xE8FEF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x6001C1C")]
			[Address(RVA = "0xE8FEF8", Offset = "0xE8FEF8", VA = "0xE8FEF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000113")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x6001C1D")]
			[Address(RVA = "0xE8FF00", Offset = "0xE8FF00", VA = "0xE8FF00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x6001C1E")]
			[Address(RVA = "0xE8FF08", Offset = "0xE8FF08", VA = "0xE8FF08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000115")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x6001C1F")]
			[Address(RVA = "0xE8FF10", Offset = "0xE8FF10", VA = "0xE8FF10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000116")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x6001C20")]
			[Address(RVA = "0xE8FF3C", Offset = "0xE8FF3C", VA = "0xE8FF3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x6001C21")]
			[Address(RVA = "0xE8FF68", Offset = "0xE8FF68", VA = "0xE8FF68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x6001C22")]
			[Address(RVA = "0xE8FF94", Offset = "0xE8FF94", VA = "0xE8FF94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000119")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x6001C23")]
			[Address(RVA = "0xE8FFC0", Offset = "0xE8FFC0", VA = "0xE8FFC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x6001C24")]
			[Address(RVA = "0xE8FFE8", Offset = "0xE8FFE8", VA = "0xE8FFE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x6001C25")]
			[Address(RVA = "0xE90014", Offset = "0xE90014", VA = "0xE90014")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x6001C26")]
			[Address(RVA = "0xE90040", Offset = "0xE90040", VA = "0xE90040")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x6001C27")]
			[Address(RVA = "0xE9006C", Offset = "0xE9006C", VA = "0xE9006C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x6001C37")]
			[Address(RVA = "0xE922A8", Offset = "0xE922A8", VA = "0xE922A8")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001C38")]
			[Address(RVA = "0xE922B4", Offset = "0xE922B4", VA = "0xE922B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0xE90094", Offset = "0xE90094", VA = "0xE90094")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0xE90194", Offset = "0xE90194", VA = "0xE90194")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0xE900E4", Offset = "0xE900E4", VA = "0xE900E4")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0xE9020C", Offset = "0xE9020C", VA = "0xE9020C")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0xE8FD98", Offset = "0xE8FD98", VA = "0xE8FD98")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0xE902D4", Offset = "0xE902D4", VA = "0xE902D4")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0xE90384", Offset = "0xE90384", VA = "0xE90384")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0xE90430", Offset = "0xE90430", VA = "0xE90430")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0xE904DC", Offset = "0xE904DC", VA = "0xE904DC")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0xE904E4", Offset = "0xE904E4", VA = "0xE904E4")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0xE9050C", Offset = "0xE9050C", VA = "0xE9050C")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0xE905CC", Offset = "0xE905CC", VA = "0xE905CC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0xE90760", Offset = "0xE90760", VA = "0xE90760")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0xE91BA0", Offset = "0xE91BA0", VA = "0xE91BA0")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0xE92150", Offset = "0xE92150", VA = "0xE92150")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0xE921AC", Offset = "0xE921AC", VA = "0xE921AC")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0xE91FF0", Offset = "0xE91FF0", VA = "0xE91FF0")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0xE920A0", Offset = "0xE920A0", VA = "0xE920A0")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0xE922C0", Offset = "0xE922C0", VA = "0xE922C0")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0xE92384", Offset = "0xE92384", VA = "0xE92384", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0xE92454", Offset = "0xE92454", VA = "0xE92454")]
		private void PullBody()
		{
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0xE92570", Offset = "0xE92570", VA = "0xE92570")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0xE92700", Offset = "0xE92700", VA = "0xE92700")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0xE92878", Offset = "0xE92878", VA = "0xE92878", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0xE92AD8", Offset = "0xE92AD8", VA = "0xE92AD8", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0xE92B50", Offset = "0xE92B50", VA = "0xE92B50")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005AE")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x1700011F")]
		protected virtual int minBones
		{
			[Token(Token = "0x6001C4B")]
			[Address(RVA = "0xE933F0", Offset = "0xE933F0", VA = "0xE933F0", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000120")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x6001C4C")]
			[Address(RVA = "0xE933F8", Offset = "0xE933F8", VA = "0xE933F8", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000121")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x6001C4D")]
			[Address(RVA = "0xE93400", Offset = "0xE93400", VA = "0xE93400", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000122")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x6001C51")]
			[Address(RVA = "0xE938A4", Offset = "0xE938A4", VA = "0xE938A4", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000123")]
		protected float positionOffset
		{
			[Token(Token = "0x6001C52")]
			[Address(RVA = "0xE93960", Offset = "0xE93960", VA = "0xE93960")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0xE92B5C", Offset = "0xE92B5C", VA = "0xE92B5C")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0xE92D0C", Offset = "0xE92D0C", VA = "0xE92D0C")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0xE92E58", Offset = "0xE92E58", VA = "0xE92E58", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0xE92EB8", Offset = "0xE92EB8", VA = "0xE92EB8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0xE92F2C", Offset = "0xE92F2C", VA = "0xE92F2C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0xE9330C", Offset = "0xE9330C", VA = "0xE9330C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0xE93314", Offset = "0xE93314", VA = "0xE93314", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0xE93408", Offset = "0xE93408", VA = "0xE93408", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0xE9340C", Offset = "0xE9340C", VA = "0xE9340C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0xE93410", Offset = "0xE93410", VA = "0xE93410")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0xE939A8", Offset = "0xE939A8", VA = "0xE939A8")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0xE93D60", Offset = "0xE93D60", VA = "0xE93D60")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0xE93FF4", Offset = "0xE93FF4", VA = "0xE93FF4")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005AF")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0xE94068", Offset = "0xE94068", VA = "0xE94068", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0xE9440C", Offset = "0xE9440C", VA = "0xE9440C")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0xE944C0", Offset = "0xE944C0", VA = "0xE944C0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001C59")]
		[Address(RVA = "0xE94640", Offset = "0xE94640", VA = "0xE94640", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0xE947A0", Offset = "0xE947A0", VA = "0xE947A0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0xE947F0", Offset = "0xE947F0", VA = "0xE947F0", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0xE94850", Offset = "0xE94850", VA = "0xE94850", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0xE94BB0", Offset = "0xE94BB0", VA = "0xE94BB0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0xE94BD0", Offset = "0xE94BD0", VA = "0xE94BD0")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0xE948A8", Offset = "0xE948A8", VA = "0xE948A8")]
		private void Read()
		{
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0xE94C58", Offset = "0xE94C58", VA = "0xE94C58")]
		private void Write()
		{
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0xE94DD0", Offset = "0xE94DD0", VA = "0xE94DD0")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005B0")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x20005B1")]
		public enum BendModifier
		{
			[Token(Token = "0x4001C1C")]
			Animation,
			[Token(Token = "0x4001C1D")]
			Target,
			[Token(Token = "0x4001C1E")]
			Parent,
			[Token(Token = "0x4001C1F")]
			Arm,
			[Token(Token = "0x4001C20")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x20005B2")]
		public struct AxisDirection
		{
			[Token(Token = "0x4001C21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x4001C22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x4001C23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x6001C6C")]
			[Address(RVA = "0xE96408", Offset = "0xE96408", VA = "0xE96408")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float bendModifierWeight;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x17000124")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x6001C69")]
			[Address(RVA = "0xE963EC", Offset = "0xE963EC", VA = "0xE963EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0xE94FC8", Offset = "0xE94FC8", VA = "0xE94FC8")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0xE9500C", Offset = "0xE9500C", VA = "0xE9500C")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0xE95078", Offset = "0xE95078", VA = "0xE95078", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0xE955C0", Offset = "0xE955C0", VA = "0xE955C0", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0xE960DC", Offset = "0xE960DC", VA = "0xE960DC", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0xE96184", Offset = "0xE96184", VA = "0xE96184")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0xE96354", Offset = "0xE96354", VA = "0xE96354")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0xE953D4", Offset = "0xE953D4", VA = "0xE953D4")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0xE9567C", Offset = "0xE9567C", VA = "0xE9567C")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20005B3")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20005B4")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x4001C34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x1700012B")]
			public Vector3 forward
			{
				[Token(Token = "0x6001C8B")]
				[Address(RVA = "0xE9829C", Offset = "0xE9829C", VA = "0xE9829C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001C87")]
			[Address(RVA = "0xE9894C", Offset = "0xE9894C", VA = "0xE9894C")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x6001C88")]
			[Address(RVA = "0xE973B8", Offset = "0xE973B8", VA = "0xE973B8")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x6001C89")]
			[Address(RVA = "0xE976AC", Offset = "0xE976AC", VA = "0xE976AC")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x6001C8A")]
			[Address(RVA = "0xE985E4", Offset = "0xE985E4", VA = "0xE985E4")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		public float headWeight;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float eyesWeight;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Range(0f, 1f)]
		public float clampWeightHead;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float clampWeightEyes;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3[] spineForwards;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3[] headForwards;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3[] eyeForward;

		[Token(Token = "0x17000125")]
		protected bool spineIsValid
		{
			[Token(Token = "0x6001C7B")]
			[Address(RVA = "0xE96B3C", Offset = "0xE96B3C", VA = "0xE96B3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000126")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x6001C7C")]
			[Address(RVA = "0xE96CE4", Offset = "0xE96CE4", VA = "0xE96CE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000127")]
		protected bool headIsValid
		{
			[Token(Token = "0x6001C7E")]
			[Address(RVA = "0xE96C08", Offset = "0xE96C08", VA = "0xE96C08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000128")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x6001C7F")]
			[Address(RVA = "0xE96D08", Offset = "0xE96D08", VA = "0xE96D08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000129")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x6001C81")]
			[Address(RVA = "0xE96C18", Offset = "0xE96C18", VA = "0xE96C18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012A")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x6001C82")]
			[Address(RVA = "0xE96D74", Offset = "0xE96D74", VA = "0xE96D74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0xE965A4", Offset = "0xE965A4", VA = "0xE965A4")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0xE965C0", Offset = "0xE965C0", VA = "0xE965C0")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0xE965EC", Offset = "0xE965EC", VA = "0xE965EC")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0xE96624", Offset = "0xE96624", VA = "0xE96624")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0xE9666C", Offset = "0xE9666C", VA = "0xE9666C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0xE966C4", Offset = "0xE966C4", VA = "0xE966C4")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0xE96734", Offset = "0xE96734", VA = "0xE96734", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0xE9684C", Offset = "0xE9684C", VA = "0xE9684C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0xE96978", Offset = "0xE96978", VA = "0xE96978", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0xE96D98", Offset = "0xE96D98", VA = "0xE96D98", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0xE96FEC", Offset = "0xE96FEC", VA = "0xE96FEC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0xE9714C", Offset = "0xE9714C", VA = "0xE9714C")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0xE973E8", Offset = "0xE973E8", VA = "0xE973E8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0xE97798", Offset = "0xE97798", VA = "0xE97798", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0xE9785C", Offset = "0xE9785C", VA = "0xE9785C")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0xE97A78", Offset = "0xE97A78", VA = "0xE97A78")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0xE97DC0", Offset = "0xE97DC0", VA = "0xE97DC0")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0xE982CC", Offset = "0xE982CC", VA = "0xE982CC")]
		protected Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0xE97214", Offset = "0xE97214", VA = "0xE97214")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0xE986EC", Offset = "0xE986EC", VA = "0xE986EC")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005B5")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20005B6")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x4001C3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x4001C3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x6001CA3")]
			[Address(RVA = "0xE99C74", Offset = "0xE99C74", VA = "0xE99C74")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x6001CA4")]
			[Address(RVA = "0xE9A51C", Offset = "0xE9A51C", VA = "0xE9A51C")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001CA5")]
			[Address(RVA = "0xE95048", Offset = "0xE95048", VA = "0xE95048")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001CA6")]
			[Address(RVA = "0xE9A5B8", Offset = "0xE9A5B8", VA = "0xE9A5B8")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x4001C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x4001C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0xE98954", Offset = "0xE98954", VA = "0xE98954")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0xE98AE8", Offset = "0xE98AE8", VA = "0xE98AE8")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0xE98C68", Offset = "0xE98C68", VA = "0xE98C68")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0xE98C74", Offset = "0xE98C74", VA = "0xE98C74")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0xE98C90", Offset = "0xE98C90", VA = "0xE98C90")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0xE98C9C", Offset = "0xE98C9C", VA = "0xE98C9C")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0xE98CA4", Offset = "0xE98CA4", VA = "0xE98CA4", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0xE98DB4", Offset = "0xE98DB4", VA = "0xE98DB4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0xE98EAC", Offset = "0xE98EAC", VA = "0xE98EAC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0xE98EEC", Offset = "0xE98EEC", VA = "0xE98EEC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0xE98F3C", Offset = "0xE98F3C", VA = "0xE98F3C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0xE99310", Offset = "0xE99310", VA = "0xE99310")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0xE9938C", Offset = "0xE9938C", VA = "0xE9938C")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0xE99880", Offset = "0xE99880", VA = "0xE99880")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0xE999D8", Offset = "0xE999D8", VA = "0xE999D8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0xE99B84", Offset = "0xE99B84", VA = "0xE99B84")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0xE99B04", Offset = "0xE99B04", VA = "0xE99B04")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0xE99D64", Offset = "0xE99D64", VA = "0xE99D64", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0xE9A5AC", Offset = "0xE9A5AC", VA = "0xE9A5AC", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0xE9A5B0", Offset = "0xE9A5B0", VA = "0xE9A5B0", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0xE9A5B4", Offset = "0xE9A5B4", VA = "0xE9A5B4", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0xE9A35C", Offset = "0xE9A35C", VA = "0xE9A35C")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0xE96208", Offset = "0xE96208", VA = "0xE96208")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005B7")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20005B8")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20005B9")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4001C82")]
				YawPitch,
				[Token(Token = "0x4001C83")]
				FromTo
			}

			[Token(Token = "0x4001C64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[UnityEngine.Tooltip("The hand target. This should not be the hand controller itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the hand bone. The best practice for setup would be to move the hand controller to the avatar's hand as it it was held by the avatar, duplicate the avatar's hand bone and parent it to the hand controller. Then assign the duplicate to this slot.")]
			public Transform target;

			[Token(Token = "0x4001C65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[UnityEngine.Tooltip("The elbow will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x4001C66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[UnityEngine.Tooltip("Positional weight of the hand target. Note that if you have nulled the target, the hand will still be pulled to the last position of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x4001C67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[UnityEngine.Tooltip("Rotational weight of the hand target. Note that if you have nulled the target, the hand will still be rotated to the last rotation of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4001C68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[UnityEngine.Tooltip("Different techniques for shoulder bone rotation.")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4001C69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(0f, 1f)]
			[UnityEngine.Tooltip("The weight of shoulder rotation")]
			public float shoulderRotationWeight;

			[Token(Token = "0x4001C6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[UnityEngine.Tooltip("The weight of twisting the shoulders backwards when arms are lifted up.")]
			[Range(0f, 1f)]
			public float shoulderTwistWeight;

			[Token(Token = "0x4001C6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[UnityEngine.Tooltip("If greater than 0, will bend the elbow towards the 'Bend Goal' Transform.")]
			[Range(0f, 1f)]
			public float bendGoalWeight;

			[Token(Token = "0x4001C6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Range(-180f, 180f)]
			[UnityEngine.Tooltip("Angular offset of the elbow bending direction.")]
			public float swivelOffset;

			[Token(Token = "0x4001C6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[UnityEngine.Tooltip("Local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4001C6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[UnityEngine.Tooltip("Local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4001C6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Range(0.01f, 2f)]
			[UnityEngine.Tooltip("Use this to make the arm shorter/longer. Works by displacement of hand and forearm localPosition.")]
			public float armLengthMlp;

			[Token(Token = "0x4001C70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[UnityEngine.Tooltip("Evaluates stretching of the arm by target distance relative to arm length. Value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4001C71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4001C72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4001C73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x4001C74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x4001C77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private bool hasShoulder;

			[Token(Token = "0x4001C78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4001C79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4001C7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion chestRotation;

			[Token(Token = "0x4001C7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Vector3 chestForward;

			[Token(Token = "0x4001C7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private Vector3 chestUp;

			[Token(Token = "0x4001C7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4001C7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private Vector3 upperArmBendAxis;

			[Token(Token = "0x4001C7F")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x4001C80")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x1700012D")]
			public Vector3 position
			{
				[Token(Token = "0x6001CC5")]
				[Address(RVA = "0xEA028C", Offset = "0xEA028C", VA = "0xEA028C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001CC6")]
				[Address(RVA = "0xEA0298", Offset = "0xEA0298", VA = "0xEA0298")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700012E")]
			public Quaternion rotation
			{
				[Token(Token = "0x6001CC7")]
				[Address(RVA = "0xEA02A4", Offset = "0xEA02A4", VA = "0xEA02A4")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001CC8")]
				[Address(RVA = "0xEA02B0", Offset = "0xEA02B0", VA = "0xEA02B0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700012F")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x6001CC9")]
				[Address(RVA = "0xEA02BC", Offset = "0xEA02BC", VA = "0xEA02BC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000130")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6001CCA")]
				[Address(RVA = "0xEA02E4", Offset = "0xEA02E4", VA = "0xEA02E4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000131")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6001CCB")]
				[Address(RVA = "0xEA0318", Offset = "0xEA0318", VA = "0xEA0318")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000132")]
			private VirtualBone hand
			{
				[Token(Token = "0x6001CCC")]
				[Address(RVA = "0xEA0358", Offset = "0xEA0358", VA = "0xEA0358")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CCD")]
			[Address(RVA = "0xEA0398", Offset = "0xEA0398", VA = "0xEA0398", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001CCE")]
			[Address(RVA = "0xEA0C38", Offset = "0xEA0C38", VA = "0xEA0C38", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6001CCF")]
			[Address(RVA = "0xEA0EE4", Offset = "0xEA0EE4", VA = "0xEA0EE4", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6001CD0")]
			[Address(RVA = "0xEA0F08", Offset = "0xEA0F08", VA = "0xEA0F08")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6001CD1")]
			[Address(RVA = "0xE9E120", Offset = "0xE9E120", VA = "0xE9E120")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x6001CD2")]
			[Address(RVA = "0xEA17D4", Offset = "0xEA17D4", VA = "0xEA17D4", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001CD3")]
			[Address(RVA = "0xEA182C", Offset = "0xEA182C", VA = "0xEA182C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001CD4")]
			[Address(RVA = "0xEA1258", Offset = "0xEA1258", VA = "0xEA1258")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x6001CD5")]
			[Address(RVA = "0xEA12D8", Offset = "0xEA12D8", VA = "0xEA12D8")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001CD6")]
			[Address(RVA = "0xEA1A38", Offset = "0xEA1A38", VA = "0xEA1A38")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x6001CD7")]
			[Address(RVA = "0xEA00F0", Offset = "0xEA00F0", VA = "0xEA00F0")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005BA")]
		public abstract class BodyPart
		{
			[Token(Token = "0x4001C86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x4001C87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x4001C88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x4001C89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x4001C8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x4001C8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x17000133")]
			public float sqrMag
			{
				[Token(Token = "0x6001CDD")]
				[Address(RVA = "0xEA1B50", Offset = "0xEA1B50", VA = "0xEA1B50")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001CDE")]
				[Address(RVA = "0xEA1B58", Offset = "0xEA1B58", VA = "0xEA1B58")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000134")]
			public float mag
			{
				[Token(Token = "0x6001CDF")]
				[Address(RVA = "0xEA1B60", Offset = "0xEA1B60", VA = "0xEA1B60")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001CE0")]
				[Address(RVA = "0xEA1B68", Offset = "0xEA1B68", VA = "0xEA1B68")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001CD8")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x6001CD9")]
			public abstract void PreSolve();

			[Token(Token = "0x6001CDA")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6001CDB")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x6001CDC")]
			public abstract void ResetOffsets();

			[Token(Token = "0x6001CE1")]
			[Address(RVA = "0xEA1B70", Offset = "0xEA1B70", VA = "0xEA1B70")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x6001CE2")]
			[Address(RVA = "0xEA1B78", Offset = "0xEA1B78", VA = "0xEA1B78")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001CE3")]
			[Address(RVA = "0xEA1D94", Offset = "0xEA1D94", VA = "0xEA1D94")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x6001CE4")]
			[Address(RVA = "0xEA1E1C", Offset = "0xEA1E1C", VA = "0xEA1E1C")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x6001CE5")]
			[Address(RVA = "0xEA2020", Offset = "0xEA2020", VA = "0xEA2020")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001CE6")]
			[Address(RVA = "0xEA2068", Offset = "0xEA2068", VA = "0xEA2068")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x6001CE7")]
			[Address(RVA = "0xEA218C", Offset = "0xEA218C", VA = "0xEA218C")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x6001CE8")]
			[Address(RVA = "0xEA22F0", Offset = "0xEA22F0", VA = "0xEA22F0")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x6001CE9")]
			[Address(RVA = "0xEA2414", Offset = "0xEA2414", VA = "0xEA2414")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6001CEA")]
			[Address(RVA = "0xEA2428", Offset = "0xEA2428", VA = "0xEA2428")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005BB")]
		public class Footstep
		{
			[Token(Token = "0x4001C8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x4001C8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4001C8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4001C8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4001C90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4001C91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x4001C93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x4001C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x4001C95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x4001C96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x4001C97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x4001C98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x4001C99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x17000135")]
			public bool isStepping
			{
				[Token(Token = "0x6001CEB")]
				[Address(RVA = "0xEA24CC", Offset = "0xEA24CC", VA = "0xEA24CC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000136")]
			public float stepProgress
			{
				[Token(Token = "0x6001CEC")]
				[Address(RVA = "0xEA24E0", Offset = "0xEA24E0", VA = "0xEA24E0")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001CED")]
				[Address(RVA = "0xEA24E8", Offset = "0xEA24E8", VA = "0xEA24E8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001CEE")]
			[Address(RVA = "0xEA24F0", Offset = "0xEA24F0", VA = "0xEA24F0")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x6001CEF")]
			[Address(RVA = "0xEA26B4", Offset = "0xEA26B4", VA = "0xEA26B4")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x6001CF0")]
			[Address(RVA = "0xEA26FC", Offset = "0xEA26FC", VA = "0xEA26FC")]
			public void StepTo(Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x6001CF1")]
			[Address(RVA = "0xEA2920", Offset = "0xEA2920", VA = "0xEA2920")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x6001CF2")]
			[Address(RVA = "0xEA2B28", Offset = "0xEA2B28", VA = "0xEA2B28")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x6001CF3")]
			[Address(RVA = "0xEA2D0C", Offset = "0xEA2D0C", VA = "0xEA2D0C")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005BC")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x4001C9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[UnityEngine.Tooltip("The foot/toe target. This should not be the foot tracker itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the foot/toe bone. If a toe bone is assigned in the References, the solver will match the toe bone to this target. If no toe bone assigned, foot bone will be used instead.")]
			public Transform target;

			[Token(Token = "0x4001C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[UnityEngine.Tooltip("The knee will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x4001C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[UnityEngine.Tooltip("Positional weight of the toe/foot target. Note that if you have nulled the target, the foot will still be pulled to the last position of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x4001C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[UnityEngine.Tooltip("Rotational weight of the toe/foot target. Note that if you have nulled the target, the foot will still be rotated to the last rotation of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4001C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[UnityEngine.Tooltip("If greater than 0, will bend the knee towards the 'Bend Goal' Transform.")]
			[Range(0f, 1f)]
			public float bendGoalWeight;

			[Token(Token = "0x4001C9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[UnityEngine.Tooltip("Angular offset of knee bending direction.")]
			[Range(-180f, 180f)]
			public float swivelOffset;

			[Token(Token = "0x4001CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[UnityEngine.Tooltip("If 0, the bend plane will be locked to the rotation of the pelvis and rotating the foot will have no effect on the knee direction. If 1, to the target rotation of the leg so that the knee will bend towards the forward axis of the foot. Values in between will be slerped between the two.")]
			[Range(0f, 1f)]
			public float bendToTargetWeight;

			[Token(Token = "0x4001CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[UnityEngine.Tooltip("Use this to make the leg shorter/longer. Works by displacement of foot and calf localPosition.")]
			[Range(0.01f, 2f)]
			public float legLengthMlp;

			[Token(Token = "0x4001CA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[UnityEngine.Tooltip("Evaluates stretching of the leg by target distance relative to leg length. Value at time 1 represents stretching amount at the point where distance to the target is equal to leg length. Value at time 1 represents stretching amount at the point where distance to the target is double the leg length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce knee snapping (start stretching the arm slightly before target distance reaches leg length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4001CA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4001CA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4001CA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001CA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001CA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001CA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x4001CA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x4001CAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 footPosition;

			[Token(Token = "0x4001CAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x4001CB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private Vector3 bendNormal;

			[Token(Token = "0x4001CB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x4001CB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x4001CB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private Vector3 bendNormalRelToPelvis;

			[Token(Token = "0x4001CB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			private Vector3 bendNormalRelToTarget;

			[Token(Token = "0x17000137")]
			public Vector3 position
			{
				[Token(Token = "0x6001CF4")]
				[Address(RVA = "0xEA2E80", Offset = "0xEA2E80", VA = "0xEA2E80")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001CF5")]
				[Address(RVA = "0xEA2E8C", Offset = "0xEA2E8C", VA = "0xEA2E8C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000138")]
			public Quaternion rotation
			{
				[Token(Token = "0x6001CF6")]
				[Address(RVA = "0xEA2E98", Offset = "0xEA2E98", VA = "0xEA2E98")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001CF7")]
				[Address(RVA = "0xEA2EA4", Offset = "0xEA2EA4", VA = "0xEA2EA4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000139")]
			public bool hasToes
			{
				[Token(Token = "0x6001CF8")]
				[Address(RVA = "0xEA2EB0", Offset = "0xEA2EB0", VA = "0xEA2EB0")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001CF9")]
				[Address(RVA = "0xEA2EB8", Offset = "0xEA2EB8", VA = "0xEA2EB8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700013A")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6001CFA")]
				[Address(RVA = "0xEA2EC4", Offset = "0xEA2EC4", VA = "0xEA2EC4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013B")]
			private VirtualBone calf
			{
				[Token(Token = "0x6001CFB")]
				[Address(RVA = "0xEA2EEC", Offset = "0xEA2EEC", VA = "0xEA2EEC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013C")]
			private VirtualBone foot
			{
				[Token(Token = "0x6001CFC")]
				[Address(RVA = "0xEA2F18", Offset = "0xEA2F18", VA = "0xEA2F18")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013D")]
			private VirtualBone toes
			{
				[Token(Token = "0x6001CFD")]
				[Address(RVA = "0xEA2F44", Offset = "0xEA2F44", VA = "0xEA2F44")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013E")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6001CFE")]
				[Address(RVA = "0xEA2F70", Offset = "0xEA2F70", VA = "0xEA2F70")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013F")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6001CFF")]
				[Address(RVA = "0xEA2FA4", Offset = "0xEA2FA4", VA = "0xEA2FA4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001D00")]
				[Address(RVA = "0xEA2FB0", Offset = "0xEA2FB0", VA = "0xEA2FB0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001D01")]
			[Address(RVA = "0xEA2FBC", Offset = "0xEA2FBC", VA = "0xEA2FBC", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001D02")]
			[Address(RVA = "0xEA35BC", Offset = "0xEA35BC", VA = "0xEA35BC", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6001D03")]
			[Address(RVA = "0xEA3D2C", Offset = "0xEA3D2C", VA = "0xEA3D2C", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6001D04")]
			[Address(RVA = "0xEA3CDC", Offset = "0xEA3CDC", VA = "0xEA3CDC")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x6001D05")]
			[Address(RVA = "0xEA3A90", Offset = "0xEA3A90", VA = "0xEA3A90")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x6001D06")]
			[Address(RVA = "0xEA4208", Offset = "0xEA4208", VA = "0xEA4208")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x6001D07")]
			[Address(RVA = "0xEA4B68", Offset = "0xEA4B68", VA = "0xEA4B68")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x6001D08")]
			[Address(RVA = "0xEA43A8", Offset = "0xEA43A8", VA = "0xEA43A8")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6001D09")]
			[Address(RVA = "0xEA4FC0", Offset = "0xEA4FC0", VA = "0xEA4FC0", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001D0A")]
			[Address(RVA = "0xEA51C8", Offset = "0xEA51C8", VA = "0xEA51C8", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001D0B")]
			[Address(RVA = "0xEA52A8", Offset = "0xEA52A8", VA = "0xEA52A8")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005BD")]
		public class Locomotion
		{
			[Token(Token = "0x4001CB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(0f, 1f)]
			[UnityEngine.Tooltip("Used for blending in/out of procedural locomotion.")]
			public float weight;

			[Token(Token = "0x4001CB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[UnityEngine.Tooltip("Tries to maintain this distance between the legs.")]
			public float footDistance;

			[Token(Token = "0x4001CB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("Makes a step only if step target position is at least this far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past the 'Angle Threshold'.")]
			public float stepThreshold;

			[Token(Token = "0x4001CB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[UnityEngine.Tooltip("Makes a step only if step target position is at least 'Step Threshold' far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past this value.")]
			public float angleThreshold;

			[Token(Token = "0x4001CB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("Multiplies angle of the center of mass - center of pressure vector. Larger value makes the character step sooner if losing balance.")]
			public float comAngleMlp;

			[Token(Token = "0x4001CBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[UnityEngine.Tooltip("Maximum magnitude of head/hand target velocity used in prediction.")]
			public float maxVelocity;

			[Token(Token = "0x4001CBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("The amount of head/hand target velocity prediction.")]
			public float velocityFactor;

			[Token(Token = "0x4001CBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[UnityEngine.Tooltip("How much can a leg be extended before it is forced to step to another position? 1 means fully stretched.")]
			[Range(0.9f, 1f)]
			public float maxLegStretch;

			[Token(Token = "0x4001CBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[UnityEngine.Tooltip("The speed of lerping the root of the character towards the horizontal mid-point of the footsteps.")]
			public float rootSpeed;

			[Token(Token = "0x4001CBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[UnityEngine.Tooltip("The speed of moving a foot to the next position.")]
			public float stepSpeed;

			[Token(Token = "0x4001CBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[UnityEngine.Tooltip("The height of the foot by normalized step progress (0 - 1).")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4001CC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[UnityEngine.Tooltip("The height offset of the heel by normalized step progress (0 - 1).")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4001CC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[UnityEngine.Tooltip("Rotates the foot while the leg is not stepping to relax the twist rotation of the leg if ideal rotation is past this angle.")]
			[Range(0f, 180f)]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x4001CC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[UnityEngine.Tooltip("The speed of rotating the foot while the leg is not stepping to relax the twist rotation of the leg.")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x4001CC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[UnityEngine.Tooltip("Interpolation mode of the step.")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4001CC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[UnityEngine.Tooltip("Offset for the approximated center of mass.")]
			public Vector3 offset;

			[Token(Token = "0x4001CC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x4001CC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x4001CC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x4001CC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x4001CC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[UnityEngine.Tooltip("Called when the left foot has finished a step.")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x4001CCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[UnityEngine.Tooltip("Called when the right foot has finished a step")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x4001CCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Footstep[] footsteps;

			[Token(Token = "0x4001CCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Vector3 lastComPosition;

			[Token(Token = "0x4001CCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private Vector3 comVelocity;

			[Token(Token = "0x4001CCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private int leftFootIndex;

			[Token(Token = "0x4001CD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private int rightFootIndex;

			[Token(Token = "0x17000140")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6001D0C")]
				[Address(RVA = "0xEA5390", Offset = "0xEA5390", VA = "0xEA5390")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001D0D")]
				[Address(RVA = "0xEA539C", Offset = "0xEA539C", VA = "0xEA539C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000141")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6001D13")]
				[Address(RVA = "0xEA7500", Offset = "0xEA7500", VA = "0xEA7500")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000142")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6001D14")]
				[Address(RVA = "0xEA7534", Offset = "0xEA7534", VA = "0xEA7534")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000143")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x6001D15")]
				[Address(RVA = "0xEA756C", Offset = "0xEA756C", VA = "0xEA756C")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x17000144")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6001D16")]
				[Address(RVA = "0xEA75A0", Offset = "0xEA75A0", VA = "0xEA75A0")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6001D0E")]
			[Address(RVA = "0xEA53A8", Offset = "0xEA53A8", VA = "0xEA53A8")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x6001D0F")]
			[Address(RVA = "0xEA56BC", Offset = "0xEA56BC", VA = "0xEA56BC")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6001D10")]
			[Address(RVA = "0xEA58A0", Offset = "0xEA58A0", VA = "0xEA58A0")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6001D11")]
			[Address(RVA = "0xEA5C68", Offset = "0xEA5C68", VA = "0xEA5C68")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x6001D12")]
			[Address(RVA = "0xEA5D20", Offset = "0xEA5D20", VA = "0xEA5D20")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x6001D17")]
			[Address(RVA = "0xEA7130", Offset = "0xEA7130", VA = "0xEA7130")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6001D18")]
			[Address(RVA = "0xEA72E4", Offset = "0xEA72E4", VA = "0xEA72E4")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D19")]
			[Address(RVA = "0xEA7350", Offset = "0xEA7350", VA = "0xEA7350")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6001D1A")]
			[Address(RVA = "0xEA75D8", Offset = "0xEA75D8", VA = "0xEA75D8")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005BE")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4001CD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[UnityEngine.Tooltip("The head target. This should not be the camera Transform itself, but a child GameObject parented to it so you could adjust it's position/rotation  to match the orientation of the head bone. The best practice for setup would be to move the camera to the avatar's eyes, duplicate the avatar's head bone and parent it to the camera. Then assign the duplicate to this slot.")]
			public Transform headTarget;

			[Token(Token = "0x4001CD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[UnityEngine.Tooltip("The pelvis target (optional), useful for seated rigs or if you had an additional tracker on the backpack or belt are. The best practice for setup would be to duplicate the avatar's pelvis bone and parenting it to the pelvis tracker. Then assign the duplicate to this slot.")]
			public Transform pelvisTarget;

			[Token(Token = "0x4001CD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 1f)]
			[UnityEngine.Tooltip("Positional weight of the head target. Note that if you have nulled the headTarget, the head will still be pulled to the last position of the headTarget until you set this value to 0.")]
			public float positionWeight;

			[Token(Token = "0x4001CD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[UnityEngine.Tooltip("Rotational weight of the head target. Note that if you have nulled the headTarget, the head will still be rotated to the last rotation of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4001CD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[UnityEngine.Tooltip("Positional weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be pulled to the last position of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x4001CD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[UnityEngine.Tooltip("Rotational weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be rotated to the last rotation of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x4001CD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[UnityEngine.Tooltip("If 'Chest Goal Weight' is greater than 0, the chest will be turned towards this Transform.")]
			public Transform chestGoal;

			[Token(Token = "0x4001CD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[UnityEngine.Tooltip("Weight of turning the chest towards the 'Chest Goal'.")]
			[Range(0f, 1f)]
			public float chestGoalWeight;

			[Token(Token = "0x4001CD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[UnityEngine.Tooltip("Minimum height of the head from the root of the character.")]
			public float minHeadHeight;

			[Token(Token = "0x4001CDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[UnityEngine.Tooltip("Determines how much the body will follow the position of the head.")]
			[Range(0f, 1f)]
			public float bodyPosStiffness;

			[Token(Token = "0x4001CDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Range(0f, 1f)]
			[UnityEngine.Tooltip("Determines how much the body will follow the rotation of the head.")]
			public float bodyRotStiffness;

			[Token(Token = "0x4001CDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Range(0f, 1f)]
			[FormerlySerializedAs("chestRotationWeight")]
			[UnityEngine.Tooltip("Determines how much the chest will rotate to the rotation of the head.")]
			public float neckStiffness;

			[Token(Token = "0x4001CDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[UnityEngine.Tooltip("The amount of rotation applied to the chest based on hand positions.")]
			[Range(0f, 1f)]
			public float rotateChestByHands;

			[Token(Token = "0x4001CDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Range(0f, 1f)]
			[UnityEngine.Tooltip("Clamps chest rotation. Value of 0.5 allows 90 degrees of rotation for the chest relative to the head. Value of 0 allows 180 degrees and value of 1 means the chest will be locked relative to the head.")]
			public float chestClampWeight;

			[Token(Token = "0x4001CDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Range(0f, 1f)]
			[UnityEngine.Tooltip("Clamps head rotation. Value of 0.5 allows 90 degrees of rotation for the head relative to the headTarget. Value of 0 allows 180 degrees and value of 1 means head rotation will be locked to the target.")]
			public float headClampWeight;

			[Token(Token = "0x4001CE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[UnityEngine.Tooltip("Moves the body horizontally along -character.forward axis by that value when the player is crouching.")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x4001CE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[UnityEngine.Tooltip("How much will the pelvis maintain it's animated position?")]
			[Range(0f, 1f)]
			public float maintainPelvisPosition;

			[Token(Token = "0x4001CE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[UnityEngine.Tooltip("Will automatically rotate the root of the character if the head target has turned past this angle.")]
			[Range(0f, 180f)]
			public float maxRootAngle;

			[Token(Token = "0x4001CE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[Range(-180f, 180f)]
			[UnityEngine.Tooltip("Angular offset for root heading. Adjust this value to turn the root relative to the HMD around the vertical axis. Usefulf for fighting or shooting games where you would sometimes want the avatar to stand at an angled stance.")]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x4001CE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x4001CE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x4001CE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x4001CE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x4001CE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x4001CE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001CEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001CEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001CEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001CED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001CEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001CEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x4001CF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			[HideInInspector]
			public Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001CF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			[HideInInspector]
			public Vector3 headPosition;

			[Token(Token = "0x4001CF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private Quaternion headRotation;

			[Token(Token = "0x4001CF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x4001CF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x4001CF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x4001CF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x4001CF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x4001CFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x4001CFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x4001CFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private int pelvisIndex;

			[Token(Token = "0x4001CFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
			private int spineIndex;

			[Token(Token = "0x4001CFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int chestIndex;

			[Token(Token = "0x4001CFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int neckIndex;

			[Token(Token = "0x4001D00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int headIndex;

			[Token(Token = "0x4001D01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private float length;

			[Token(Token = "0x4001D02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private bool hasChest;

			[Token(Token = "0x4001D03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
			private bool hasNeck;

			[Token(Token = "0x4001D04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x212")]
			private bool hasLegs;

			[Token(Token = "0x4001D05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float headHeight;

			[Token(Token = "0x4001D06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private float sizeMlp;

			[Token(Token = "0x4001D07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private Vector3 chestForward;

			[Token(Token = "0x17000145")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6001D1B")]
				[Address(RVA = "0xEA70C8", Offset = "0xEA70C8", VA = "0xEA70C8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000146")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6001D1C")]
				[Address(RVA = "0xEA76E8", Offset = "0xEA76E8", VA = "0xEA76E8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000147")]
			public VirtualBone chest
			{
				[Token(Token = "0x6001D1D")]
				[Address(RVA = "0xEA771C", Offset = "0xEA771C", VA = "0xEA771C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000148")]
			private VirtualBone neck
			{
				[Token(Token = "0x6001D1E")]
				[Address(RVA = "0xEA7764", Offset = "0xEA7764", VA = "0xEA7764")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000149")]
			public VirtualBone head
			{
				[Token(Token = "0x6001D1F")]
				[Address(RVA = "0xEA70FC", Offset = "0xEA70FC", VA = "0xEA70FC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014A")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x6001D20")]
				[Address(RVA = "0xEA7798", Offset = "0xEA7798", VA = "0xEA7798")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001D21")]
				[Address(RVA = "0xEA77AC", Offset = "0xEA77AC", VA = "0xEA77AC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700014B")]
			public Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x6001D22")]
				[Address(RVA = "0xEA77C0", Offset = "0xEA77C0", VA = "0xEA77C0")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001D23")]
				[Address(RVA = "0xEA77D4", Offset = "0xEA77D4", VA = "0xEA77D4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001D24")]
			[Address(RVA = "0xEA77E8", Offset = "0xEA77E8", VA = "0xEA77E8", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001D25")]
			[Address(RVA = "0xEA8488", Offset = "0xEA8488", VA = "0xEA8488", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6001D26")]
			[Address(RVA = "0xEA8670", Offset = "0xEA8670", VA = "0xEA8670", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6001D27")]
			[Address(RVA = "0xEA8E04", Offset = "0xEA8E04", VA = "0xEA8E04")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x6001D28")]
			[Address(RVA = "0xEA9440", Offset = "0xEA9440", VA = "0xEA9440")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x6001D29")]
			[Address(RVA = "0xEA9D88", Offset = "0xEA9D88", VA = "0xEA9D88")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x6001D2A")]
			[Address(RVA = "0xEAA52C", Offset = "0xEAA52C", VA = "0xEAA52C")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x6001D2B")]
			[Address(RVA = "0xEAAB88", Offset = "0xEAAB88", VA = "0xEAAB88", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001D2C")]
			[Address(RVA = "0xEAAD58", Offset = "0xEAAD58", VA = "0xEAAD58", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001D2D")]
			[Address(RVA = "0xEA9048", Offset = "0xEA9048", VA = "0xEA9048")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x6001D2E")]
			[Address(RVA = "0xEAA258", Offset = "0xEAA258", VA = "0xEAA258")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x6001D2F")]
			[Address(RVA = "0xEA997C", Offset = "0xEA997C", VA = "0xEA997C")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation)
			{
			}

			[Token(Token = "0x6001D30")]
			[Address(RVA = "0xEAAE2C", Offset = "0xEAAE2C", VA = "0xEAAE2C")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001D31")]
			[Address(RVA = "0xEAA330", Offset = "0xEAA330", VA = "0xEAA330")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6001D32")]
			[Address(RVA = "0xEA9FE8", Offset = "0xEA9FE8", VA = "0xEA9FE8")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6001D33")]
			[Address(RVA = "0xEAB0C8", Offset = "0xEAB0C8", VA = "0xEAB0C8")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005BF")]
		public enum PositionOffset
		{
			[Token(Token = "0x4001D09")]
			Pelvis,
			[Token(Token = "0x4001D0A")]
			Chest,
			[Token(Token = "0x4001D0B")]
			Head,
			[Token(Token = "0x4001D0C")]
			LeftHand,
			[Token(Token = "0x4001D0D")]
			RightHand,
			[Token(Token = "0x4001D0E")]
			LeftFoot,
			[Token(Token = "0x4001D0F")]
			RightFoot,
			[Token(Token = "0x4001D10")]
			LeftHeel,
			[Token(Token = "0x4001D11")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20005C0")]
		public enum RotationOffset
		{
			[Token(Token = "0x4001D13")]
			Pelvis,
			[Token(Token = "0x4001D14")]
			Chest,
			[Token(Token = "0x4001D15")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20005C1")]
		public class VirtualBone
		{
			[Token(Token = "0x4001D16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x4001D17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x4001D18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4001D19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x4001D1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x4001D1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x4001D1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x6001D34")]
			[Address(RVA = "0xEA352C", Offset = "0xEA352C", VA = "0xEA352C")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001D35")]
			[Address(RVA = "0xEA359C", Offset = "0xEA359C", VA = "0xEA359C")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001D36")]
			[Address(RVA = "0xEAB1E0", Offset = "0xEAB1E0", VA = "0xEAB1E0")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6001D37")]
			[Address(RVA = "0xEA1C34", Offset = "0xEA1C34", VA = "0xEA1C34")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x6001D38")]
			[Address(RVA = "0xEA1EB0", Offset = "0xEA1EB0", VA = "0xEA1EB0")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001D39")]
			[Address(RVA = "0xEAB3E0", Offset = "0xEAB3E0", VA = "0xEAB3E0")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001D3A")]
			[Address(RVA = "0xEAB588", Offset = "0xEAB588", VA = "0xEAB588")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001D3B")]
			[Address(RVA = "0xEAB710", Offset = "0xEAB710", VA = "0xEAB710")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001D3C")]
			[Address(RVA = "0xEA4784", Offset = "0xEA4784", VA = "0xEA4784")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x6001D3D")]
			[Address(RVA = "0xEAB7B4", Offset = "0xEAB7B4", VA = "0xEAB7B4")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001D3E")]
			[Address(RVA = "0xEAA7BC", Offset = "0xEAA7BC", VA = "0xEAA7BC")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x6001D3F")]
			[Address(RVA = "0xEAB90C", Offset = "0xEAB90C", VA = "0xEAB90C")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001D40")]
			[Address(RVA = "0xEABA20", Offset = "0xEABA20", VA = "0xEABA20")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool hasLegs;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rootV;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int supportLegIndex;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int lastLOD;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		[UnityEngine.Tooltip("LOD 0: Full quality solving. LOD 1: Shoulder solving, stretching plant feet disabled, spine solving quality reduced. This provides about 30% of performance gain. LOD 2: Culled, but updating root position and rotation if locomotion is enabled.")]
		public int LOD;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UnityEngine.Tooltip("If true, will keep the toes planted even if head target is out of reach, so this can cause the camera to exit the head if it is too high for the model to reach. Enabling this increases the cost of the solver as the legs will have to be solved multiple times.")]
		public bool plantFeet;

		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UnityEngine.Tooltip("The spine solver.")]
		public Spine spine;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[UnityEngine.Tooltip("The left arm solver.")]
		public Arm leftArm;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[UnityEngine.Tooltip("The right arm solver.")]
		public Arm rightArm;

		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[UnityEngine.Tooltip("The left leg solver.")]
		public Leg leftLeg;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[UnityEngine.Tooltip("The right leg solver.")]
		public Leg rightLeg;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[UnityEngine.Tooltip("Procedural leg shuffling for stationary VR games. Not designed for roomscale and thumbstick locomotion. For those it would be better to use a strafing locomotion blend tree to make the character follow the horizontal direction towards the HMD by root motion or script.")]
		public Locomotion locomotion;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Leg[] legs;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Arm[] arms;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 headPosition;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 lastOffset;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 debugPos1;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 debugPos2;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 debugPos3;

		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Vector3 debugPos4;

		[Token(Token = "0x1700012C")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6001CC0")]
			[Address(RVA = "0xE9FDF4", Offset = "0xE9FDF4", VA = "0xE9FDF4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CC1")]
			[Address(RVA = "0xE9FDFC", Offset = "0xE9FDFC", VA = "0xE9FDFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0xE9A5C0", Offset = "0xE9A5C0", VA = "0xE9A5C0")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0xE9AA2C", Offset = "0xE9AA2C", VA = "0xE9AA2C")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0xE9A8C0", Offset = "0xE9A8C0", VA = "0xE9A8C0")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0xE9B25C", Offset = "0xE9B25C", VA = "0xE9B25C")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0xE9B3A0", Offset = "0xE9B3A0", VA = "0xE9B3A0")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0xE9B3E0", Offset = "0xE9B3E0", VA = "0xE9B3E0")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0xE9B504", Offset = "0xE9B504", VA = "0xE9B504")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0xE9B5E0", Offset = "0xE9B5E0", VA = "0xE9B5E0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0xE9BDC0", Offset = "0xE9BDC0", VA = "0xE9BDC0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0xE9BF14", Offset = "0xE9BF14", VA = "0xE9BF14", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0xE9C100", Offset = "0xE9C100", VA = "0xE9C100", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0xE9C170", Offset = "0xE9C170", VA = "0xE9C170", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0xE9C1E0", Offset = "0xE9C1E0", VA = "0xE9C1E0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0xE9C3E8", Offset = "0xE9C3E8", VA = "0xE9C3E8")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0xE9AD1C", Offset = "0xE9AD1C", VA = "0xE9AD1C")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0xE9AE00", Offset = "0xE9AE00", VA = "0xE9AE00")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0xE9B148", Offset = "0xE9B148", VA = "0xE9B148")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0xE9B6F4", Offset = "0xE9B6F4", VA = "0xE9B6F4")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0xE9C658", Offset = "0xE9C658", VA = "0xE9C658", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0xE9C694", Offset = "0xE9C694", VA = "0xE9C694", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0xE9DC58", Offset = "0xE9DC58", VA = "0xE9DC58")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0xE9B844", Offset = "0xE9B844", VA = "0xE9B844")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs)
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0xE9CAA0", Offset = "0xE9CAA0", VA = "0xE9CAA0")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0xE9E0AC", Offset = "0xE9E0AC", VA = "0xE9E0AC")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0xE9E0E8", Offset = "0xE9E0E8", VA = "0xE9E0E8")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0xE9DB1C", Offset = "0xE9DB1C", VA = "0xE9DB1C")]
		private void Write()
		{
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0xE9F708", Offset = "0xE9F708", VA = "0xE9F708")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0xE9FE04", Offset = "0xE9FE04", VA = "0xE9FE04")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x20005C2")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("If this is the forearm roll bone, the parent should be the forearm bone. If null, will be found automatically.")]
		public Transform parent;

		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("If this is the forearm roll bone, the child should be the hand bone. If null, will attempt to find automatically. Assign the hand manually if the hand bone is not a child of the roll bone.")]
		public Transform child;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The weight of relaxing the twist of this Transform")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("If 0.5, this Transform will be twisted half way from parent to child. If 1, the twist angle will be locked to the child and will rotate with along with it.")]
		[Range(0f, 1f)]
		public float parentChildCrossfade;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Rotation offset around the twist axis.")]
		[Range(-180f, 180f)]
		public float twistAngleOffset;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 twistAxis;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 axis;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0xEABBD4", Offset = "0xEABBD4", VA = "0xEABBD4")]
		public void Relax()
		{
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0xEAC018", Offset = "0xEAC018", VA = "0xEAC018")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0xEAC408", Offset = "0xEAC408", VA = "0xEAC408")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0xEAC480", Offset = "0xEAC480", VA = "0xEAC480")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0xEAC4F8", Offset = "0xEAC4F8", VA = "0xEAC4F8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0xEAC630", Offset = "0xEAC630", VA = "0xEAC630")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005C3")]
	public class InteractionEffector
	{
		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x4001D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x4001D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x4001D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x4001D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x4001D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x4001D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4001D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x4001D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x4001D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x4001D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x4001D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x4001D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x4001D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x4001D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x1700014C")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x6001D47")]
			[Address(RVA = "0xEAC6D0", Offset = "0xEAC6D0", VA = "0xEAC6D0")]
			[CompilerGenerated]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x6001D48")]
			[Address(RVA = "0xEAC6D8", Offset = "0xEAC6D8", VA = "0xEAC6D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public bool isPaused
		{
			[Token(Token = "0x6001D49")]
			[Address(RVA = "0xEAC6E0", Offset = "0xEAC6E0", VA = "0xEAC6E0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D4A")]
			[Address(RVA = "0xEAC6E8", Offset = "0xEAC6E8", VA = "0xEAC6E8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x6001D4B")]
			[Address(RVA = "0xEAC6F4", Offset = "0xEAC6F4", VA = "0xEAC6F4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D4C")]
			[Address(RVA = "0xEAC6FC", Offset = "0xEAC6FC", VA = "0xEAC6FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public bool inInteraction
		{
			[Token(Token = "0x6001D4D")]
			[Address(RVA = "0xEAC704", Offset = "0xEAC704", VA = "0xEAC704")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000150")]
		public float progress
		{
			[Token(Token = "0x6001D56")]
			[Address(RVA = "0xEAE8A8", Offset = "0xEAE8A8", VA = "0xEAE8A8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0xEAC764", Offset = "0xEAC764", VA = "0xEAC764")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0xEAC800", Offset = "0xEAC800", VA = "0xEAC800")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0xEAC8C0", Offset = "0xEAC8C0", VA = "0xEAC8C0")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0xEACA2C", Offset = "0xEACA2C", VA = "0xEACA2C")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0xEACE08", Offset = "0xEACE08", VA = "0xEACE08")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0xEACF28", Offset = "0xEACF28", VA = "0xEACF28")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0xEACF7C", Offset = "0xEACF7C", VA = "0xEACF7C")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0xEAD634", Offset = "0xEAD634", VA = "0xEAD634")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0xEAE0F4", Offset = "0xEAE0F4", VA = "0xEAE0F4")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0xEAE314", Offset = "0xEAE314", VA = "0xEAE314")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0xEAE740", Offset = "0xEAE740", VA = "0xEAE740")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0xEAEA1C", Offset = "0xEAEA1C", VA = "0xEAEA1C")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005C4")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("(Optional) reference to the LookAtIK component that will be used to make the character look at the objects that it is interacting with.")]
		public LookAtIK ik;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Interpolation speed of the LookAtIK target.")]
		public float lerpSpeed;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Interpolation speed of the LookAtIK weight.")]
		public float weightSpeed;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0xEAEC58", Offset = "0xEAEC58", VA = "0xEAEC58")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0xEAED74", Offset = "0xEAED74", VA = "0xEAED74")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0xEAEE0C", Offset = "0xEAEE0C", VA = "0xEAEE0C")]
		public void Update()
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0xEAF014", Offset = "0xEAF014", VA = "0xEAF014")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0xEAF0BC", Offset = "0xEAF0BC", VA = "0xEAF0BC")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0xEAF168", Offset = "0xEAF168", VA = "0xEAF168")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x20005C5")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Object")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005C6")]
		public class InteractionEvent
		{
			[Token(Token = "0x4001D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The time of the event since interaction start.")]
			public float time;

			[Token(Token = "0x4001D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[UnityEngine.Tooltip("If true, the interaction will be paused on this event. The interaction can be resumed by InteractionSystem.ResumeInteraction() or InteractionSystem.ResumeAll;")]
			public bool pause;

			[Token(Token = "0x4001D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[UnityEngine.Tooltip("If true, the object will be parented to the effector bone on this event. Note that picking up like this can be done by only a single effector at a time. If you wish to pick up an object with both hands, see the Interaction PickUp2Handed demo scene.")]
			public bool pickUp;

			[Token(Token = "0x4001D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The animations called on this event.")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4001D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("The messages sent on this event using GameObject.SendMessage().")]
			public Message[] messages;

			[Token(Token = "0x4001D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("The UnityEvent to invoke on this event.")]
			public UnityEvent unityEvent;

			[Token(Token = "0x6001D7D")]
			[Address(RVA = "0xEAE8D8", Offset = "0xEAE8D8", VA = "0xEAE8D8")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x6001D7E")]
			[Address(RVA = "0xEB00A8", Offset = "0xEB00A8", VA = "0xEB00A8")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005C7")]
		public class Message
		{
			[Token(Token = "0x4001D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The name of the function called.")]
			public string function;

			[Token(Token = "0x4001D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The recipient game object.")]
			public GameObject recipient;

			[Token(Token = "0x4001D64")]
			private const string empty = "";

			[Token(Token = "0x6001D7F")]
			[Address(RVA = "0xEAFFB0", Offset = "0xEAFFB0", VA = "0xEAFFB0")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x6001D80")]
			[Address(RVA = "0xEB00B0", Offset = "0xEB00B0", VA = "0xEB00B0")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005C8")]
		public class AnimatorEvent
		{
			[Token(Token = "0x4001D65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The Animator component that will receive the AnimatorEvents.")]
			public Animator animator;

			[Token(Token = "0x4001D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The Animation component that will receive the AnimatorEvents (Legacy).")]
			public Animation animation;

			[Token(Token = "0x4001D67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("The name of the animation state.")]
			public string animationState;

			[Token(Token = "0x4001D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("The crossfading time.")]
			public float crossfadeTime;

			[Token(Token = "0x4001D69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[UnityEngine.Tooltip("The layer of the animation state (if using Legacy, the animation state will be forced to this layer).")]
			public int layer;

			[Token(Token = "0x4001D6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[UnityEngine.Tooltip("Should the animation always start from 0 normalized time?")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4001D6B")]
			private const string empty = "";

			[Token(Token = "0x6001D81")]
			[Address(RVA = "0xEAFED4", Offset = "0xEAFED4", VA = "0xEAFED4")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6001D82")]
			[Address(RVA = "0xEB00B8", Offset = "0xEB00B8", VA = "0xEB00B8")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x6001D83")]
			[Address(RVA = "0xEB0168", Offset = "0xEB0168", VA = "0xEB0168")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6001D84")]
			[Address(RVA = "0xEB0240", Offset = "0xEB0240", VA = "0xEB0240")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005C9")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20005CA")]
			public enum Type
			{
				[Token(Token = "0x4001D6F")]
				PositionWeight,
				[Token(Token = "0x4001D70")]
				RotationWeight,
				[Token(Token = "0x4001D71")]
				PositionOffsetX,
				[Token(Token = "0x4001D72")]
				PositionOffsetY,
				[Token(Token = "0x4001D73")]
				PositionOffsetZ,
				[Token(Token = "0x4001D74")]
				Pull,
				[Token(Token = "0x4001D75")]
				Reach,
				[Token(Token = "0x4001D76")]
				RotateBoneWeight,
				[Token(Token = "0x4001D77")]
				Push,
				[Token(Token = "0x4001D78")]
				PushParent,
				[Token(Token = "0x4001D79")]
				PoserWeight,
				[Token(Token = "0x4001D7A")]
				BendGoalWeight
			}

			[Token(Token = "0x4001D6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The type of the curve (InteractionObject.WeightCurve.Type).")]
			public Type type;

			[Token(Token = "0x4001D6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The weight curve.")]
			public AnimationCurve curve;

			[Token(Token = "0x6001D85")]
			[Address(RVA = "0xEAF7D8", Offset = "0xEAF7D8", VA = "0xEAF7D8")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6001D86")]
			[Address(RVA = "0xEB0254", Offset = "0xEB0254", VA = "0xEB0254")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005CB")]
		public class Multiplier
		{
			[Token(Token = "0x4001D7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The curve type to multiply.")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4001D7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[UnityEngine.Tooltip("The multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x4001D7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The resulting value will be applied to this channel.")]
			public WeightCurve.Type result;

			[Token(Token = "0x6001D87")]
			[Address(RVA = "0xEAFDE0", Offset = "0xEAFDE0", VA = "0xEAFDE0")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6001D88")]
			[Address(RVA = "0xEB025C", Offset = "0xEB025C", VA = "0xEB025C")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("If the Interaction System has a 'Look At' LookAtIK component assigned, will use it to make the character look at the specified Transform. If unassigned, will look at this GameObject.")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The root Transform of the InteractionTargets. If null, will use this GameObject. GetComponentsInChildren<InteractionTarget>() will be used at initiation to find all InteractionTargets associated with this InteractionObject.")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("If assigned, all PositionOffset channels will be applied in the rotation space of this Transform. If not, they will be in the rotation space of the character.")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x17000151")]
		public float length
		{
			[Token(Token = "0x6001D69")]
			[Address(RVA = "0xEAF39C", Offset = "0xEAF39C", VA = "0xEAF39C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D6A")]
			[Address(RVA = "0xEAF3A4", Offset = "0xEAF3A4", VA = "0xEAF3A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x6001D6B")]
			[Address(RVA = "0xEAF3AC", Offset = "0xEAF3AC", VA = "0xEAF3AC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D6C")]
			[Address(RVA = "0xEAF3B4", Offset = "0xEAF3B4", VA = "0xEAF3B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x6001D6E")]
			[Address(RVA = "0xEAF574", Offset = "0xEAF574", VA = "0xEAF574")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		public Transform targetsRoot
		{
			[Token(Token = "0x6001D76")]
			[Address(RVA = "0xEAE99C", Offset = "0xEAE99C", VA = "0xEAE99C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0xEAF17C", Offset = "0xEAF17C", VA = "0xEAF17C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0xEAF1C0", Offset = "0xEAF1C0", VA = "0xEAF1C0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0xEAF204", Offset = "0xEAF204", VA = "0xEAF204")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0xEAF248", Offset = "0xEAF248", VA = "0xEAF248")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0xEAF28C", Offset = "0xEAF28C", VA = "0xEAF28C")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0xEAF2D0", Offset = "0xEAF2D0", VA = "0xEAF2D0")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0xEAF314", Offset = "0xEAF314", VA = "0xEAF314")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0xEAF358", Offset = "0xEAF358", VA = "0xEAF358")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0xEAF3BC", Offset = "0xEAF3BC", VA = "0xEAF3BC")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0xEAF5F4", Offset = "0xEAF5F4", VA = "0xEAF5F4")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0xEAD5A0", Offset = "0xEAD5A0", VA = "0xEAD5A0")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0xEAF76C", Offset = "0xEAF76C", VA = "0xEAF76C")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0xEAD45C", Offset = "0xEAD45C", VA = "0xEAD45C")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0xEAD598", Offset = "0xEAD598", VA = "0xEAD598")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0xEADCE4", Offset = "0xEADCE4", VA = "0xEADCE4")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0xEAE52C", Offset = "0xEAE52C", VA = "0xEAE52C")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0xEAFE10", Offset = "0xEAFE10", VA = "0xEAFE10")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0xEAF7F4", Offset = "0xEAF7F4", VA = "0xEAF7F4")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0xEAF774", Offset = "0xEAF774", VA = "0xEAF774")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0xEAFD84", Offset = "0xEAFD84", VA = "0xEAFD84")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0xEAFE14", Offset = "0xEAFE14", VA = "0xEAFE14")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0xEAFE70", Offset = "0xEAFE70", VA = "0xEAFE70")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x20005CC")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction System")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20005CD")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20005CE")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("If not empty, only the targets with the specified tag will be used by this Interaction System.")]
		public string targetTag;

		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The fade in time of the interaction.")]
		public float fadeInTime;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("The master speed for all interactions.")]
		public float speed;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("If > 0, lerps all the FBBIK channels used by the Interaction System back to their default or initial values when not in interaction.")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Triggering")]
		[UnityEngine.Tooltip("The collider that registers OnTriggerEnter and OnTriggerExit events with InteractionTriggers.")]
		[FormerlySerializedAs("collider")]
		public Collider characterCollider;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FormerlySerializedAs("camera")]
		[UnityEngine.Tooltip("Will be used by Interaction Triggers that need the camera's position. Assign the first person view character camera.")]
		public Transform FPSCamera;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The layers that will be raycasted from the camera (along camera.forward). All InteractionTrigger look at target colliders should be included.")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("Max distance of raycasting from the camera.")]
		public float camRaycastDistance;

		[Token(Token = "0x4001D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x4001D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x4001D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x4001D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[Space(10f)]
		[UnityEngine.Tooltip("Reference to the FBBIK component.")]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x4001D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UnityEngine.Tooltip("Handles looking at the interactions.")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x4001D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool initiated;

		[Token(Token = "0x4001D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x4001D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x17000155")]
		public bool inInteraction
		{
			[Token(Token = "0x6001D91")]
			[Address(RVA = "0xEB048C", Offset = "0xEB048C", VA = "0xEB048C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000156")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x6001DAB")]
			[Address(RVA = "0xEB1F34", Offset = "0xEB1F34", VA = "0xEB1F34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DAC")]
			[Address(RVA = "0xEB1F3C", Offset = "0xEB1F3C", VA = "0xEB1F3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x6001DAD")]
			[Address(RVA = "0xEB1F44", Offset = "0xEB1F44", VA = "0xEB1F44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DAE")]
			[Address(RVA = "0xEB1F4C", Offset = "0xEB1F4C", VA = "0xEB1F4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0xEB026C", Offset = "0xEB026C", VA = "0xEB026C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0xEB02B0", Offset = "0xEB02B0", VA = "0xEB02B0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0xEB02F4", Offset = "0xEB02F4", VA = "0xEB02F4")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0xEB0338", Offset = "0xEB0338", VA = "0xEB0338")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0xEB037C", Offset = "0xEB037C", VA = "0xEB037C")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0xEB03C0", Offset = "0xEB03C0", VA = "0xEB03C0")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0xEB0404", Offset = "0xEB0404", VA = "0xEB0404")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0xEB0448", Offset = "0xEB0448", VA = "0xEB0448")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0xEB0604", Offset = "0xEB0604", VA = "0xEB0604")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0xEB06BC", Offset = "0xEB06BC", VA = "0xEB06BC")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D94")]
		[Address(RVA = "0xEB0774", Offset = "0xEB0774", VA = "0xEB0774")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D95")]
		[Address(RVA = "0xEB080C", Offset = "0xEB080C", VA = "0xEB080C")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0xEB08F0", Offset = "0xEB08F0", VA = "0xEB08F0")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0xEB09E8", Offset = "0xEB09E8", VA = "0xEB09E8")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0xEB0A6C", Offset = "0xEB0A6C", VA = "0xEB0A6C")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0xEB0AF0", Offset = "0xEB0AF0", VA = "0xEB0AF0")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0xEB0B74", Offset = "0xEB0B74", VA = "0xEB0B74")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0xEB0BDC", Offset = "0xEB0BDC", VA = "0xEB0BDC")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0xEB0C44", Offset = "0xEB0C44", VA = "0xEB0C44")]
		public void StopAll()
		{
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0xEB0CA0", Offset = "0xEB0CA0", VA = "0xEB0CA0")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0xEB0D20", Offset = "0xEB0D20", VA = "0xEB0D20")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0xEB0DC8", Offset = "0xEB0DC8", VA = "0xEB0DC8")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0xEB0E98", Offset = "0xEB0E98", VA = "0xEB0E98")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0xEB1128", Offset = "0xEB1128", VA = "0xEB1128")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0xEB12FC", Offset = "0xEB12FC", VA = "0xEB12FC")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0xEB156C", Offset = "0xEB156C", VA = "0xEB156C")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0xEB17F8", Offset = "0xEB17F8", VA = "0xEB17F8")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0xEB1830", Offset = "0xEB1830", VA = "0xEB1830")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0xEB1890", Offset = "0xEB1890", VA = "0xEB1890")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0xEB19BC", Offset = "0xEB19BC", VA = "0xEB19BC")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0xEB1BA0", Offset = "0xEB1BA0", VA = "0xEB1BA0")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0xEB1E14", Offset = "0xEB1E14", VA = "0xEB1E14")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0xEB1654", Offset = "0xEB1654", VA = "0xEB1654")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0xEB1F54", Offset = "0xEB1F54", VA = "0xEB1F54")]
		public void Start()
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0xEB27B4", Offset = "0xEB27B4", VA = "0xEB27B4")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0xEB27D4", Offset = "0xEB27D4", VA = "0xEB27D4")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0xEB27F0", Offset = "0xEB27F0", VA = "0xEB27F0")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0xEB280C", Offset = "0xEB280C", VA = "0xEB280C")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0xEB2860", Offset = "0xEB2860", VA = "0xEB2860")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0xEB29E4", Offset = "0xEB29E4", VA = "0xEB29E4")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0xEB2AE0", Offset = "0xEB2AE0", VA = "0xEB2AE0")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0xEB2C8C", Offset = "0xEB2C8C", VA = "0xEB2C8C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0xEB2DA4", Offset = "0xEB2DA4", VA = "0xEB2DA4")]
		public void Update()
		{
		}

		[Token(Token = "0x6001DB9")]
		[Address(RVA = "0xEB308C", Offset = "0xEB308C", VA = "0xEB308C")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0xEB2554", Offset = "0xEB2554", VA = "0xEB2554")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0xEB31BC", Offset = "0xEB31BC", VA = "0xEB31BC")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0xEB32C8", Offset = "0xEB32C8", VA = "0xEB32C8")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x6001DBD")]
		[Address(RVA = "0xEB3350", Offset = "0xEB3350", VA = "0xEB3350")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6001DBE")]
		[Address(RVA = "0xEB3410", Offset = "0xEB3410", VA = "0xEB3410")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6001DBF")]
		[Address(RVA = "0xEB3428", Offset = "0xEB3428", VA = "0xEB3428")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0xEB0524", Offset = "0xEB0524", VA = "0xEB0524")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0xEB1014", Offset = "0xEB1014", VA = "0xEB1014")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0xEB38B0", Offset = "0xEB38B0", VA = "0xEB38B0")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x20005CF")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Target")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005D0")]
		public class Multiplier
		{
			[Token(Token = "0x4001DA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The curve type (InteractionObject.WeightCurve.Type).")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x4001DA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[UnityEngine.Tooltip("Multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x6001DD7")]
			[Address(RVA = "0xEB4838", Offset = "0xEB4838", VA = "0xEB4838")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4001D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The type of the FBBIK effector.")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x4001D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("InteractionObject weight curve multipliers for this effector target.")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4001D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("The interaction speed multiplier for this effector. This can be used to make interactions faster/slower for specific effectors.")]
		public float interactionSpeedMlp;

		[Token(Token = "0x4001D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The pivot to twist/swing this interaction target about. For symmetric objects that can be interacted with from a certain angular range.")]
		public Transform pivot;

		[Token(Token = "0x4001D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("The axis of twisting the interaction target (blue line).")]
		public Vector3 twistAxis;

		[Token(Token = "0x4001D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("The weight of twisting the interaction target towards the effector bone in the start of the interaction.")]
		public float twistWeight;

		[Token(Token = "0x4001D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("The weight of swinging the interaction target towards the effector bone in the start of the interaction. Swing is defined as a 3-DOF rotation around any axis, while twist is only around the twist axis.")]
		public float swingWeight;

		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("If true, will twist/swing around the pivot only once at the start of the interaction. If false, will continue rotating throuout the whole interaction.")]
		public bool rotateOnce;

		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform lastPivot;

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0xEB400C", Offset = "0xEB400C", VA = "0xEB400C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0xEB4050", Offset = "0xEB4050", VA = "0xEB4050")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0xEB4094", Offset = "0xEB4094", VA = "0xEB4094")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0xEB40D8", Offset = "0xEB40D8", VA = "0xEB40D8")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0xEB411C", Offset = "0xEB411C", VA = "0xEB411C")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0xEB4160", Offset = "0xEB4160", VA = "0xEB4160")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0xEB41A4", Offset = "0xEB41A4", VA = "0xEB41A4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0xEB41E8", Offset = "0xEB41E8", VA = "0xEB41E8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0xEB422C", Offset = "0xEB422C", VA = "0xEB422C")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0xEB4290", Offset = "0xEB4290", VA = "0xEB4290")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0xEB431C", Offset = "0xEB431C", VA = "0xEB431C")]
		public void RotateTo(Vector3 position)
		{
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0xEB47C8", Offset = "0xEB47C8", VA = "0xEB47C8")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x20005D1")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Trigger")]
	[HelpURL("https://www.youtube.com/watch?v=-TDZpNjt2mk&index=15&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005D2")]
		public class CharacterPosition
		{
			[Token(Token = "0x4001DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("If false, will not care where the character stands, as long as it is in contact with the trigger collider.")]
			public bool use;

			[Token(Token = "0x4001DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[UnityEngine.Tooltip("The offset of the character's position relative to the trigger in XZ plane. Y position of the character is unlimited as long as it is contact with the collider.")]
			public Vector2 offset;

			[Token(Token = "0x4001DA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[UnityEngine.Tooltip("Angle offset from the default forward direction.")]
			[Range(-180f, 180f)]
			public float angleOffset;

			[Token(Token = "0x4001DA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("Max angular offset of the character's forward from the direction of this trigger.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x4001DA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[UnityEngine.Tooltip("Max offset of the character's position from this range's center.")]
			public float radius;

			[Token(Token = "0x4001DA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("If true, will rotate the trigger around it's Y axis relative to the position of the character, so the object can be interacted with from all sides.")]
			public bool orbit;

			[Token(Token = "0x4001DA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[UnityEngine.Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object. For example a gun will be able to be picked up from the same direction relative to the barrel no matter which side the gun is resting on.")]
			public bool fixYAxis;

			[Token(Token = "0x17000158")]
			public Vector3 offset3D
			{
				[Token(Token = "0x6001DE0")]
				[Address(RVA = "0xEB4C60", Offset = "0xEB4C60", VA = "0xEB4C60")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000159")]
			public Vector3 direction3D
			{
				[Token(Token = "0x6001DE1")]
				[Address(RVA = "0xEB4C6C", Offset = "0xEB4C6C", VA = "0xEB4C6C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001DE2")]
			[Address(RVA = "0xEB4D2C", Offset = "0xEB4D2C", VA = "0xEB4D2C")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6001DE3")]
			[Address(RVA = "0xEB5490", Offset = "0xEB5490", VA = "0xEB5490")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005D3")]
		public class CameraPosition
		{
			[Token(Token = "0x4001DAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("What the camera should be looking at to trigger the interaction? If null, this camera position will not be used.")]
			public Collider lookAtTarget;

			[Token(Token = "0x4001DAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The direction from the lookAtTarget towards the camera (in lookAtTarget's space).")]
			public Vector3 direction;

			[Token(Token = "0x4001DAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[UnityEngine.Tooltip("Max distance from the lookAtTarget to the camera.")]
			public float maxDistance;

			[Token(Token = "0x4001DAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("Max angle between the direction and the direction towards the camera.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x4001DAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[UnityEngine.Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object.")]
			public bool fixYAxis;

			[Token(Token = "0x6001DE4")]
			[Address(RVA = "0xEB54A4", Offset = "0xEB54A4", VA = "0xEB54A4")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001DE5")]
			[Address(RVA = "0xEB561C", Offset = "0xEB561C", VA = "0xEB561C")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6001DE6")]
			[Address(RVA = "0xEB5924", Offset = "0xEB5924", VA = "0xEB5924")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005D4")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x20005D5")]
			public class Interaction
			{
				[Token(Token = "0x4001DB4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[UnityEngine.Tooltip("The InteractionObject to interact with.")]
				public InteractionObject interactionObject;

				[Token(Token = "0x4001DB5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[UnityEngine.Tooltip("The effectors to interact with.")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x6001DE9")]
				[Address(RVA = "0xEB59A8", Offset = "0xEB59A8", VA = "0xEB59A8")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4001DAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			[HideInInspector]
			public string name;

			[Token(Token = "0x4001DB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			[SerializeField]
			public bool show;

			[Token(Token = "0x4001DB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("The range for the character's position and rotation.")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4001DB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("The range for the character camera's position and rotation.")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x4001DB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[UnityEngine.Tooltip("Definitions of the interactions associated with this range.")]
			public Interaction[] interactions;

			[Token(Token = "0x6001DE7")]
			[Address(RVA = "0xEB4B4C", Offset = "0xEB4B4C", VA = "0xEB4B4C")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x6001DE8")]
			[Address(RVA = "0xEB5998", Offset = "0xEB5998", VA = "0xEB5998")]
			public Range()
			{
			}
		}

		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The valid ranges of the character's and/or it's camera's position for triggering interaction when the character is in contact with the collider of this trigger.")]
		public Range[] ranges;

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0xEB4840", Offset = "0xEB4840", VA = "0xEB4840")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0xEB4884", Offset = "0xEB4884", VA = "0xEB4884")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0xEB48C8", Offset = "0xEB48C8", VA = "0xEB48C8")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0xEB490C", Offset = "0xEB490C", VA = "0xEB490C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001DDC")]
		[Address(RVA = "0xEB4950", Offset = "0xEB4950", VA = "0xEB4950")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0xEB4994", Offset = "0xEB4994", VA = "0xEB4994")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0xEB4998", Offset = "0xEB4998", VA = "0xEB4998")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0xEB4BFC", Offset = "0xEB4BFC", VA = "0xEB4BFC")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x20005D6")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20005D7")]
		public class Map
		{
			[Token(Token = "0x4001DB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4001DB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4001DB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4001DBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6001DF1")]
			[Address(RVA = "0xEB5CA8", Offset = "0xEB5CA8", VA = "0xEB5CA8")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x6001DF2")]
			[Address(RVA = "0xEB6000", Offset = "0xEB6000", VA = "0xEB6000")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x6001DF3")]
			[Address(RVA = "0xEB5FC0", Offset = "0xEB5FC0", VA = "0xEB5FC0")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6001DF4")]
			[Address(RVA = "0xEB5E44", Offset = "0xEB5E44", VA = "0xEB5E44")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x4001DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0xEB59B0", Offset = "0xEB59B0", VA = "0xEB59B0", Slot = "8")]
		[ContextMenu("Auto-Mapping")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0xEB5D50", Offset = "0xEB5D50", VA = "0xEB5D50", Slot = "9")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0xEB5D54", Offset = "0xEB5D54", VA = "0xEB5D54", Slot = "10")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0xEB5F64", Offset = "0xEB5F64", VA = "0xEB5F64", Slot = "11")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0xEB5CF4", Offset = "0xEB5CF4", VA = "0xEB5CF4")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0xEB5C14", Offset = "0xEB5C14", VA = "0xEB5C14")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0xEB6044", Offset = "0xEB6044", VA = "0xEB6044")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x20005D8")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x4001DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x4001DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0xEB6064", Offset = "0xEB6064", VA = "0xEB6064", Slot = "8")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0xEB6134", Offset = "0xEB6134", VA = "0xEB6134", Slot = "9")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0xEB630C", Offset = "0xEB630C", VA = "0xEB630C", Slot = "11")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0xEB63F4", Offset = "0xEB63F4", VA = "0xEB63F4", Slot = "10")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0xEB6194", Offset = "0xEB6194", VA = "0xEB6194")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0xEB6724", Offset = "0xEB6724", VA = "0xEB6724")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x20005D9")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float localRotationWeight;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float localPositionWeight;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x6001DFB")]
		public abstract void AutoMapping();

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0xEB6734", Offset = "0xEB6734", VA = "0xEB6734")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x6001DFD")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x6001DFE")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x6001DFF")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0xEB6740", Offset = "0xEB6740", VA = "0xEB6740", Slot = "6")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6001E01")]
		[Address(RVA = "0xEB6784", Offset = "0xEB6784", VA = "0xEB6784", Slot = "5")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0xEB67B0", Offset = "0xEB67B0", VA = "0xEB67B0", Slot = "7")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0xEB6054", Offset = "0xEB6054", VA = "0xEB6054")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x20005DA")]
	[RequireComponent(typeof(Animator))]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20005DB")]
		public class Rigidbone
		{
			[Token(Token = "0x4001DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4001DD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4001DD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4001DD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4001DD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4001DDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4001DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x4001DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4001DDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x4001DDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x4001DDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6001E16")]
			[Address(RVA = "0xEB6E20", Offset = "0xEB6E20", VA = "0xEB6E20")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6001E17")]
			[Address(RVA = "0xEB79CC", Offset = "0xEB79CC", VA = "0xEB79CC")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6001E18")]
			[Address(RVA = "0xEB778C", Offset = "0xEB778C", VA = "0xEB778C")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20005DC")]
		public class Child
		{
			[Token(Token = "0x4001DE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4001DE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4001DE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6001E19")]
			[Address(RVA = "0xEB6FC8", Offset = "0xEB6FC8", VA = "0xEB6FC8")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6001E1A")]
			[Address(RVA = "0xEB7AE4", Offset = "0xEB7AE4", VA = "0xEB7AE4")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6001E1B")]
			[Address(RVA = "0xEB7AA0", Offset = "0xEB7AA0", VA = "0xEB7AA0")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20005DD")]
		[CompilerGenerated]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x1700015C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E1F")]
				[Address(RVA = "0xEB8050", Offset = "0xEB8050", VA = "0xEB8050", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E21")]
				[Address(RVA = "0xEB8098", Offset = "0xEB8098", VA = "0xEB8098", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E1C")]
			[Address(RVA = "0xEB7034", Offset = "0xEB7034", VA = "0xEB7034")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6001E1D")]
			[Address(RVA = "0xEB7E60", Offset = "0xEB7E60", VA = "0xEB7E60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E1E")]
			[Address(RVA = "0xEB7E64", Offset = "0xEB7E64", VA = "0xEB7E64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E20")]
			[Address(RVA = "0xEB8058", Offset = "0xEB8058", VA = "0xEB8058", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("If you have multiple IK components, then this should be the one that solves last each frame.")]
		public IK ik;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("How long does it take to blend from ragdoll to animation?")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("If true, IK can be used on top of physical ragdoll simulation.")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("How much velocity transfer from animation to ragdoll?")]
		public float applyVelocity;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("How much angular velocity to transfer from animation to ragdoll?")]
		public float applyAngularVelocity;

		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x1700015A")]
		private bool isRagdoll
		{
			[Token(Token = "0x6001E0F")]
			[Address(RVA = "0xEB67F4", Offset = "0xEB67F4", VA = "0xEB67F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015B")]
		private bool ikUsed
		{
			[Token(Token = "0x6001E11")]
			[Address(RVA = "0xEB73C0", Offset = "0xEB73C0", VA = "0xEB73C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0xEB67C8", Offset = "0xEB67C8", VA = "0xEB67C8")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0xEB6858", Offset = "0xEB6858", VA = "0xEB6858")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0xEB6970", Offset = "0xEB6970", VA = "0xEB6970")]
		public void Start()
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0xEB68FC", Offset = "0xEB68FC", VA = "0xEB68FC")]
		[IteratorStateMachine(typeof(<DisableRagdollSmooth>d__21))]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0xEB705C", Offset = "0xEB705C", VA = "0xEB705C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0xEB7284", Offset = "0xEB7284", VA = "0xEB7284")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0xEB7324", Offset = "0xEB7324", VA = "0xEB7324")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0xEB7514", Offset = "0xEB7514", VA = "0xEB7514")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0xEB7394", Offset = "0xEB7394", VA = "0xEB7394")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0xEB74E0", Offset = "0xEB74E0", VA = "0xEB74E0")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0xEB7594", Offset = "0xEB7594", VA = "0xEB7594")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0xEB7538", Offset = "0xEB7538", VA = "0xEB7538")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0xEB68A0", Offset = "0xEB68A0", VA = "0xEB68A0")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0xEB72B8", Offset = "0xEB72B8", VA = "0xEB72B8")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0xEB7BF4", Offset = "0xEB7BF4", VA = "0xEB7BF4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0xEB7D2C", Offset = "0xEB7D2C", VA = "0xEB7D2C")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x20005DE")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4001DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4001DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4001DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x4001DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x1700015E")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x6001E27")]
			[Address(RVA = "0xEB8504", Offset = "0xEB8504", VA = "0xEB8504")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700015F")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x6001E28")]
			[Address(RVA = "0xEB8510", Offset = "0xEB8510", VA = "0xEB8510")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000160")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x6001E29")]
			[Address(RVA = "0xEB8540", Offset = "0xEB8540", VA = "0xEB8540")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E2A")]
			[Address(RVA = "0xEB8548", Offset = "0xEB8548", VA = "0xEB8548")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0xEB80A0", Offset = "0xEB80A0", VA = "0xEB80A0")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0xEB80DC", Offset = "0xEB80DC", VA = "0xEB80DC")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0xEB80F4", Offset = "0xEB80F4", VA = "0xEB80F4")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0xEB8474", Offset = "0xEB8474", VA = "0xEB8474")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0xEB84D8", Offset = "0xEB84D8", VA = "0xEB84D8")]
		public void Disable()
		{
		}

		[Token(Token = "0x6001E2B")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0xEB8378", Offset = "0xEB8378", VA = "0xEB8378")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0xEB8554", Offset = "0xEB8554", VA = "0xEB8554")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0xEB8558", Offset = "0xEB8558", VA = "0xEB8558")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0xEB8580", Offset = "0xEB8580", VA = "0xEB8580")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0xEB8654", Offset = "0xEB8654", VA = "0xEB8654")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0xEB88AC", Offset = "0xEB88AC", VA = "0xEB88AC")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0xEB8A00", Offset = "0xEB8A00", VA = "0xEB8A00")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x20005DF")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Angle")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float limit;

		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0xEB8A60", Offset = "0xEB8A60", VA = "0xEB8A60")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0xEB8AA4", Offset = "0xEB8AA4", VA = "0xEB8AA4")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0xEB8AE8", Offset = "0xEB8AE8", VA = "0xEB8AE8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0xEB8B2C", Offset = "0xEB8B2C", VA = "0xEB8B2C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0xEB8B70", Offset = "0xEB8B70", VA = "0xEB8B70", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0xEB8BA8", Offset = "0xEB8BA8", VA = "0xEB8BA8")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0xEB8ECC", Offset = "0xEB8ECC", VA = "0xEB8ECC")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x20005E0")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Hinge")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x4001DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion lastRotation;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastAngle;

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0xEB8EDC", Offset = "0xEB8EDC", VA = "0xEB8EDC")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0xEB8F20", Offset = "0xEB8F20", VA = "0xEB8F20")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0xEB8F64", Offset = "0xEB8F64", VA = "0xEB8F64")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0xEB8FA8", Offset = "0xEB8FA8", VA = "0xEB8FA8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0xEB8FEC", Offset = "0xEB8FEC", VA = "0xEB8FEC", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0xEB9008", Offset = "0xEB9008", VA = "0xEB9008")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0xEB9250", Offset = "0xEB9250", VA = "0xEB9250")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x20005E1")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Polygonal")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20005E2")]
		public class ReachCone
		{
			[Token(Token = "0x4001DF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x4001DFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4001DFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x4001DFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x17000161")]
			public Vector3 o
			{
				[Token(Token = "0x6001E51")]
				[Address(RVA = "0xEBB148", Offset = "0xEBB148", VA = "0xEBB148")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000162")]
			public Vector3 a
			{
				[Token(Token = "0x6001E52")]
				[Address(RVA = "0xEBB174", Offset = "0xEBB174", VA = "0xEBB174")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000163")]
			public Vector3 b
			{
				[Token(Token = "0x6001E53")]
				[Address(RVA = "0xEBB1A4", Offset = "0xEBB1A4", VA = "0xEBB1A4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000164")]
			public Vector3 c
			{
				[Token(Token = "0x6001E54")]
				[Address(RVA = "0xEBB1D4", Offset = "0xEBB1D4", VA = "0xEBB1D4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000165")]
			public bool isValid
			{
				[Token(Token = "0x6001E56")]
				[Address(RVA = "0xEBA670", Offset = "0xEBA670", VA = "0xEBA670")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001E55")]
			[Address(RVA = "0xEBAB14", Offset = "0xEBAB14", VA = "0xEBAB14")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x6001E57")]
			[Address(RVA = "0xEBAC8C", Offset = "0xEBAC8C", VA = "0xEBAC8C")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005E3")]
		public class LimitPoint
		{
			[Token(Token = "0x4001DFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4001DFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6001E58")]
			[Address(RVA = "0xEBA680", Offset = "0xEBA680", VA = "0xEBA680")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 3f)]
		public int smoothIterations;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		public LimitPoint[] points;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		public ReachCone[] reachCones;

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0xEB92B4", Offset = "0xEB92B4", VA = "0xEB92B4")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0xEB92F8", Offset = "0xEB92F8", VA = "0xEB92F8")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0xEB933C", Offset = "0xEB933C", VA = "0xEB933C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0xEB9380", Offset = "0xEB9380", VA = "0xEB9380")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0xEB93C4", Offset = "0xEB93C4", VA = "0xEB93C4")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0xEB9AA8", Offset = "0xEB9AA8", VA = "0xEB9AA8", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0xEB9B30", Offset = "0xEB9B30", VA = "0xEB9B30")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0xEBA17C", Offset = "0xEBA17C", VA = "0xEBA17C")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0xEB945C", Offset = "0xEB945C", VA = "0xEB945C")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0xEBA6E4", Offset = "0xEBA6E4", VA = "0xEBA6E4")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0xEBAF00", Offset = "0xEBAF00", VA = "0xEBAF00")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0xEBAF48", Offset = "0xEBAF48", VA = "0xEBAF48")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0xEBAFA8", Offset = "0xEBAFA8", VA = "0xEBAFA8")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0xEB9ED8", Offset = "0xEB9ED8", VA = "0xEB9ED8")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0xEBB014", Offset = "0xEBB014", VA = "0xEBB014")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0xEBB0E0", Offset = "0xEBB0E0", VA = "0xEBB0E0")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x20005E4")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Spline")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0xEBB204", Offset = "0xEBB204", VA = "0xEBB204")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0xEBB248", Offset = "0xEBB248", VA = "0xEBB248")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0xEBB28C", Offset = "0xEBB28C", VA = "0xEBB28C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0xEBB2D0", Offset = "0xEBB2D0", VA = "0xEBB2D0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0xEBB314", Offset = "0xEBB314", VA = "0xEBB314")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0xEBB330", Offset = "0xEBB330", VA = "0xEBB330", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0xEBB368", Offset = "0xEBB368", VA = "0xEBB368")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0xEBB714", Offset = "0xEBB714", VA = "0xEBB714")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x20005E5")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x20005E6")]
		[CompilerGenerated]
		private sealed class <TurnToTarget>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x17000167")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E6B")]
				[Address(RVA = "0xEBC3F8", Offset = "0xEBC3F8", VA = "0xEBC3F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000168")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E6D")]
				[Address(RVA = "0xEBC440", Offset = "0xEBC440", VA = "0xEBC440", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E68")]
			[Address(RVA = "0xEBC1F8", Offset = "0xEBC1F8", VA = "0xEBC1F8")]
			[DebuggerHidden]
			public <TurnToTarget>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6001E69")]
			[Address(RVA = "0xEBC304", Offset = "0xEBC304", VA = "0xEBC304", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E6A")]
			[Address(RVA = "0xEBC308", Offset = "0xEBC308", VA = "0xEBC308", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E6C")]
			[Address(RVA = "0xEBC400", Offset = "0xEBC400", VA = "0xEBC400", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Reference to the AimIK component.")]
		public AimIK ik;

		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Master weight of the IK solver.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Target Smoothing")]
		[UnityEngine.Tooltip("The target to aim at. Do not use the Target transform that is assigned to AimIK. Set to null if you wish to stop aiming.")]
		public Transform target;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("The time it takes to blend in/out of AimIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Turning Towards The Target")]
		[UnityEngine.Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("The position of the pivot that the aim target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("Minimum distance of aiming from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Offset applied to the target in world space. Convenient for scripting aiming inaccuracy.")]
		public Vector3 offset;

		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[UnityEngine.Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.")]
		[Header("RootRotation")]
		[Range(0f, 180f)]
		public float maxRootAngle;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("If enabled, aligns the root forward to target direction after 'Max Root Angle' has been exceeded.")]
		public bool turnToTarget;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[UnityEngine.Tooltip("The time of turning towards the target direction if 'Max Root Angle has been exceeded and 'Turn To Target' is enabled.")]
		public float turnToTargetTime;

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("If true, AimIK will consider whatever the current direction of the weapon to be the forward aiming direction and work additively on top of that. This enables you to use recoil and reloading animations seamlessly with AimIK. Adjust the Vector3 value below if the weapon is not aiming perfectly forward in the aiming animation clip.")]
		[Header("Mode")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[UnityEngine.Tooltip("The direction of the animated weapon aiming in character space. Tweak this value to adjust the aiming. 'Use Animated Aim Direction' must be enabled for this property to work.")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lastTarget;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float switchWeight;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float switchWeightV;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float weightV;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 lastPosition;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 dir;

		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool turningToTarget;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float turnToTargetMlp;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float turnToTargetMlpV;

		[Token(Token = "0x17000166")]
		private Vector3 pivot
		{
			[Token(Token = "0x6001E63")]
			[Address(RVA = "0xEBB7A0", Offset = "0xEBB7A0", VA = "0xEBB7A0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0xEBB720", Offset = "0xEBB720", VA = "0xEBB720")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0xEBB824", Offset = "0xEBB824", VA = "0xEBB824")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0xEBBD5C", Offset = "0xEBBD5C", VA = "0xEBBD5C")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0xEBBEE0", Offset = "0xEBBEE0", VA = "0xEBBEE0")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0xEBC184", Offset = "0xEBC184", VA = "0xEBC184")]
		[IteratorStateMachine(typeof(<TurnToTarget>d__33))]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0xEBC220", Offset = "0xEBC220", VA = "0xEBC220")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x20005E7")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005E8")]
		public class Pose
		{
			[Token(Token = "0x4001E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x4001E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4001E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x4001E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4001E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4001E26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x6001E71")]
			[Address(RVA = "0xEBC518", Offset = "0xEBC518", VA = "0xEBC518")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x6001E72")]
			[Address(RVA = "0xEBCA94", Offset = "0xEBCA94", VA = "0xEBCA94")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x6001E73")]
			[Address(RVA = "0xEBCA9C", Offset = "0xEBCA9C", VA = "0xEBCA9C")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x4001E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0xEBC448", Offset = "0xEBC448", VA = "0xEBC448")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0xEBC9C8", Offset = "0xEBC9C8", VA = "0xEBC9C8")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0xEBCA28", Offset = "0xEBCA28", VA = "0xEBCA28")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x20005E9")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20005EA")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20005EB")]
			public class EffectorLink
			{
				[Token(Token = "0x4001E31")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[UnityEngine.Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001E32")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[UnityEngine.Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6001E79")]
				[Address(RVA = "0xEBCF60", Offset = "0xEBCF60", VA = "0xEBCF60")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The Transform that's motion we are reading.")]
			public Transform transform;

			[Token(Token = "0x4001E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("Amplify the 'transform's' position relative to this Transform.")]
			public Transform relativeTo;

			[Token(Token = "0x4001E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4001E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("Amplification magnitude along the up axis of the character.")]
			public float verticalWeight;

			[Token(Token = "0x4001E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[UnityEngine.Tooltip("Amplification magnitude along the horizontal axes of the character.")]
			public float horizontalWeight;

			[Token(Token = "0x4001E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[UnityEngine.Tooltip("Speed of the amplifier. 0 means instant.")]
			public float speed;

			[Token(Token = "0x4001E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4001E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4001E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x6001E76")]
			[Address(RVA = "0xEBCC08", Offset = "0xEBCC08", VA = "0xEBCC08")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x6001E77")]
			[Address(RVA = "0xEBCF38", Offset = "0xEBCF38", VA = "0xEBCF38")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001E78")]
			[Address(RVA = "0xEBCF48", Offset = "0xEBCF48", VA = "0xEBCF48")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4001E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The amplified bodies.")]
		public Body[] bodies;

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0xEBCAB8", Offset = "0xEBCAB8", VA = "0xEBCAB8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0xEBCF18", Offset = "0xEBCF18", VA = "0xEBCF18")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20005EC")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x4001E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("Speed of tilting")]
		public float tiltSpeed;

		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Sensitivity of tilting")]
		public float tiltSensitivity;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("The OffsetPose components")]
		public OffsetPose poseLeft;

		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The OffsetPose components")]
		public OffsetPose poseRight;

		[Token(Token = "0x4001E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x4001E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0xEBCF68", Offset = "0xEBCF68", VA = "0xEBCF68", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0xEBCFD0", Offset = "0xEBCFD0", VA = "0xEBCFD0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0xEBD270", Offset = "0xEBD270", VA = "0xEBD270")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20005ED")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x4001E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IK ik;

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0xEBD28C", Offset = "0xEBD28C", VA = "0xEBD28C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0xEBD328", Offset = "0xEBD328", VA = "0xEBD328")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0xEBD3E8", Offset = "0xEBD3E8", VA = "0xEBD3E8")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x20005EE")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20005EF")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4001E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4001E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4001E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("Only used if this hit point gets hit when already processing another hit")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4001E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4001E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4001E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x1700016A")]
			public bool inProgress
			{
				[Token(Token = "0x6001E84")]
				[Address(RVA = "0xEBD48C", Offset = "0xEBD48C", VA = "0xEBD48C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700016B")]
			protected float crossFader
			{
				[Token(Token = "0x6001E85")]
				[Address(RVA = "0xEBD98C", Offset = "0xEBD98C", VA = "0xEBD98C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001E86")]
				[Address(RVA = "0xEBD994", Offset = "0xEBD994", VA = "0xEBD994")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700016C")]
			protected float timer
			{
				[Token(Token = "0x6001E87")]
				[Address(RVA = "0xEBD99C", Offset = "0xEBD99C", VA = "0xEBD99C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001E88")]
				[Address(RVA = "0xEBD9A4", Offset = "0xEBD9A4", VA = "0xEBD9A4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700016D")]
			protected Vector3 force
			{
				[Token(Token = "0x6001E89")]
				[Address(RVA = "0xEBD9AC", Offset = "0xEBD9AC", VA = "0xEBD9AC")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001E8A")]
				[Address(RVA = "0xEBD9B8", Offset = "0xEBD9B8", VA = "0xEBD9B8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700016E")]
			protected Vector3 point
			{
				[Token(Token = "0x6001E8B")]
				[Address(RVA = "0xEBD9C4", Offset = "0xEBD9C4", VA = "0xEBD9C4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001E8C")]
				[Address(RVA = "0xEBD9D0", Offset = "0xEBD9D0", VA = "0xEBD9D0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001E8D")]
			[Address(RVA = "0xEBD854", Offset = "0xEBD854", VA = "0xEBD854")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x6001E8E")]
			[Address(RVA = "0xEBD560", Offset = "0xEBD560", VA = "0xEBD560")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6001E8F")]
			protected abstract float GetLength();

			[Token(Token = "0x6001E90")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6001E91")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x6001E92")]
			[Address(RVA = "0xEBD9DC", Offset = "0xEBD9DC", VA = "0xEBD9DC")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005F0")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20005F1")]
			public class EffectorLink
			{
				[Token(Token = "0x4001E49")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[UnityEngine.Tooltip("The FBBIK effector type")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001E4A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[UnityEngine.Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4001E4B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4001E4C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6001E97")]
				[Address(RVA = "0xEBDD10", Offset = "0xEBDD10", VA = "0xEBDD10")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6001E98")]
				[Address(RVA = "0xEBDB6C", Offset = "0xEBDB6C", VA = "0xEBDB6C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001E99")]
				[Address(RVA = "0xEBDDC0", Offset = "0xEBDDC0", VA = "0xEBDDC0")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[UnityEngine.Tooltip("Offset magnitude in the direction of the hit force")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x4001E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[UnityEngine.Tooltip("Offset magnitude in the direction of character.up")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4001E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[UnityEngine.Tooltip("Linking this offset to the FBBIK effectors")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x6001E93")]
			[Address(RVA = "0xEBD9F0", Offset = "0xEBD9F0", VA = "0xEBD9F0", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6001E94")]
			[Address(RVA = "0xEBDB0C", Offset = "0xEBDB0C", VA = "0xEBDB0C", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6001E95")]
			[Address(RVA = "0xEBDB80", Offset = "0xEBDB80", VA = "0xEBDB80", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6001E96")]
			[Address(RVA = "0xEBDDAC", Offset = "0xEBDDAC", VA = "0xEBDDAC")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005F2")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20005F3")]
			public class BoneLink
			{
				[Token(Token = "0x4001E50")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[UnityEngine.Tooltip("Reference to the bone that this hit point rotates")]
				public Transform bone;

				[Token(Token = "0x4001E51")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Range(0f, 1f)]
				[UnityEngine.Tooltip("Weight of rotating the bone")]
				public float weight;

				[Token(Token = "0x4001E52")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x4001E53")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6001E9E")]
				[Address(RVA = "0xEBE090", Offset = "0xEBE090", VA = "0xEBE090")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6001E9F")]
				[Address(RVA = "0xEBDEAC", Offset = "0xEBDEAC", VA = "0xEBDEAC")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001EA0")]
				[Address(RVA = "0xEBE230", Offset = "0xEBE230", VA = "0xEBE230")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4001E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[UnityEngine.Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4001E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[UnityEngine.Tooltip("Linking this hit point to bone(s)")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4001E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6001E9A")]
			[Address(RVA = "0xEBDDC8", Offset = "0xEBDDC8", VA = "0xEBDDC8", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6001E9B")]
			[Address(RVA = "0xEBDE54", Offset = "0xEBDE54", VA = "0xEBDE54", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6001E9C")]
			[Address(RVA = "0xEBDEB8", Offset = "0xEBDEB8", VA = "0xEBDEB8", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6001E9D")]
			[Address(RVA = "0xEBE21C", Offset = "0xEBE21C", VA = "0xEBE21C")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4001E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Hit points for the FBBIK effectors")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4001E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip(" Hit points for bones without an effector, such as the head")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x17000169")]
		public bool inProgress
		{
			[Token(Token = "0x6001E80")]
			[Address(RVA = "0xEBD3F0", Offset = "0xEBD3F0", VA = "0xEBD3F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0xEBD4A0", Offset = "0xEBD4A0", VA = "0xEBD4A0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0xEBD638", Offset = "0xEBD638", VA = "0xEBD638")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0xEBD97C", Offset = "0xEBD97C", VA = "0xEBD97C")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x20005F4")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20005F5")]
		public abstract class Offset
		{
			[Token(Token = "0x4001E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4001E58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4001E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("Only used if this hit point gets hit when already processing another hit")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4001E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4001E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4001E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x1700016F")]
			protected float crossFader
			{
				[Token(Token = "0x6001EA4")]
				[Address(RVA = "0xEBE7A0", Offset = "0xEBE7A0", VA = "0xEBE7A0")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001EA5")]
				[Address(RVA = "0xEBE7A8", Offset = "0xEBE7A8", VA = "0xEBE7A8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000170")]
			protected float timer
			{
				[Token(Token = "0x6001EA6")]
				[Address(RVA = "0xEBE7B0", Offset = "0xEBE7B0", VA = "0xEBE7B0")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001EA7")]
				[Address(RVA = "0xEBE7B8", Offset = "0xEBE7B8", VA = "0xEBE7B8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000171")]
			protected Vector3 force
			{
				[Token(Token = "0x6001EA8")]
				[Address(RVA = "0xEBE7C0", Offset = "0xEBE7C0", VA = "0xEBE7C0")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001EA9")]
				[Address(RVA = "0xEBE7CC", Offset = "0xEBE7CC", VA = "0xEBE7CC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000172")]
			protected Vector3 point
			{
				[Token(Token = "0x6001EAA")]
				[Address(RVA = "0xEBE7D8", Offset = "0xEBE7D8", VA = "0xEBE7D8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001EAB")]
				[Address(RVA = "0xEBE7E4", Offset = "0xEBE7E4", VA = "0xEBE7E4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001EAC")]
			[Address(RVA = "0xEBE650", Offset = "0xEBE650", VA = "0xEBE650")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x6001EAD")]
			[Address(RVA = "0xEBE34C", Offset = "0xEBE34C", VA = "0xEBE34C")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6001EAE")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x6001EAF")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6001EB0")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x6001EB1")]
			[Address(RVA = "0xEBE7F0", Offset = "0xEBE7F0", VA = "0xEBE7F0")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005F6")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20005F7")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x4001E64")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[UnityEngine.Tooltip("The FBBIK effector type")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x4001E65")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[UnityEngine.Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4001E66")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4001E67")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6001EB6")]
				[Address(RVA = "0xEBEBD4", Offset = "0xEBEBD4", VA = "0xEBEBD4")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6001EB7")]
				[Address(RVA = "0xEBE9F8", Offset = "0xEBE9F8", VA = "0xEBE9F8")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001EB8")]
				[Address(RVA = "0xEBEC68", Offset = "0xEBEC68", VA = "0xEBEC68")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4001E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[UnityEngine.Tooltip("Offset magnitude in the direction of the hit force")]
			public int forceDirCurveIndex;

			[Token(Token = "0x4001E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[UnityEngine.Tooltip("Offset magnitude in the direction of character.up")]
			public int upDirCurveIndex;

			[Token(Token = "0x4001E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[UnityEngine.Tooltip("Linking this offset to the VRIK position offsets")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x6001EB2")]
			[Address(RVA = "0xEBE804", Offset = "0xEBE804", VA = "0xEBE804", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6001EB3")]
			[Address(RVA = "0xEBE998", Offset = "0xEBE998", VA = "0xEBE998", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6001EB4")]
			[Address(RVA = "0xEBEA0C", Offset = "0xEBEA0C", VA = "0xEBEA0C", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6001EB5")]
			[Address(RVA = "0xEBEC4C", Offset = "0xEBEC4C", VA = "0xEBEC4C")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005F8")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20005F9")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4001E6B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[UnityEngine.Tooltip("Reference to the bone that this hit point rotates")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4001E6C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[UnityEngine.Tooltip("Weight of rotating the bone")]
				[Range(0f, 1f)]
				public float weight;

				[Token(Token = "0x4001E6D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4001E6E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6001EBD")]
				[Address(RVA = "0xEBF03C", Offset = "0xEBF03C", VA = "0xEBF03C")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6001EBE")]
				[Address(RVA = "0xEBEDA0", Offset = "0xEBEDA0", VA = "0xEBEDA0")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001EBF")]
				[Address(RVA = "0xEBF158", Offset = "0xEBF158", VA = "0xEBF158")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x4001E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[UnityEngine.Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public int curveIndex;

			[Token(Token = "0x4001E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[UnityEngine.Tooltip("Linking this hit point to bone(s)")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4001E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6001EB9")]
			[Address(RVA = "0xEBEC70", Offset = "0xEBEC70", VA = "0xEBEC70", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6001EBA")]
			[Address(RVA = "0xEBED48", Offset = "0xEBED48", VA = "0xEBED48", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6001EBB")]
			[Address(RVA = "0xEBEDAC", Offset = "0xEBEDAC", VA = "0xEBEDAC", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6001EBC")]
			[Address(RVA = "0xEBF144", Offset = "0xEBF144", VA = "0xEBF144")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x4001E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x4001E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Hit points for the FBBIK effectors")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x4001E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip(" Hit points for bones without an effector, such as the head")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0xEBE294", Offset = "0xEBE294", VA = "0xEBE294", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0xEBE42C", Offset = "0xEBE42C", VA = "0xEBE42C")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0xEBE780", Offset = "0xEBE780", VA = "0xEBE780")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x20005FA")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20005FB")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20005FC")]
			public class EffectorLink
			{
				[Token(Token = "0x4001E7C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[UnityEngine.Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001E7D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[UnityEngine.Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6001EC6")]
				[Address(RVA = "0xEBF720", Offset = "0xEBF720", VA = "0xEBF720")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The Transform to follow, can be any bone of the character")]
			public Transform transform;

			[Token(Token = "0x4001E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4001E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("The speed to follow the Transform")]
			public float speed;

			[Token(Token = "0x4001E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[UnityEngine.Tooltip("The acceleration, smaller values means lazyer following")]
			public float acceleration;

			[Token(Token = "0x4001E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("Matching target velocity")]
			[Range(0f, 1f)]
			public float matchVelocity;

			[Token(Token = "0x4001E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[UnityEngine.Tooltip("gravity applied to the Body")]
			public float gravity;

			[Token(Token = "0x4001E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x4001E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x4001E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4001E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4001E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x6001EC3")]
			[Address(RVA = "0xEBF228", Offset = "0xEBF228", VA = "0xEBF228")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001EC4")]
			[Address(RVA = "0xEBF3A8", Offset = "0xEBF3A8", VA = "0xEBF3A8")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x6001EC5")]
			[Address(RVA = "0xEBF704", Offset = "0xEBF704", VA = "0xEBF704")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4001E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The array of Bodies")]
		public Body[] bodies;

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("The array of OffsetLimits")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0xEBF1BC", Offset = "0xEBF1BC", VA = "0xEBF1BC")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0xEBF304", Offset = "0xEBF304", VA = "0xEBF304", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0xEBF6F4", Offset = "0xEBF6F4", VA = "0xEBF6F4")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x20005FD")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x4001E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x4001E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The target to look at. Do not use the Target transform that is assigned to LookAtIK. Set to null if you wish to stop looking.")]
		[Header("Target Smoothing")]
		public Transform target;

		[Token(Token = "0x4001E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4001E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x4001E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4001E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("The time it takes to blend in/out of LookAtIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x4001E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Turning Towards The Target")]
		[UnityEngine.Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4001E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x4001E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4001E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x4001E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("The position of the pivot that the look at target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4001E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("Minimum distance of looking from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x4001E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("RootRotation")]
		[UnityEngine.Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the look direction.")]
		[Range(0f, 180f)]
		public float maxRootAngle;

		[Token(Token = "0x4001E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x4001E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x4001E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x4001E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x17000173")]
		private Vector3 pivot
		{
			[Token(Token = "0x6001EC9")]
			[Address(RVA = "0xEBF790", Offset = "0xEBF790", VA = "0xEBF790")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0xEBF728", Offset = "0xEBF728", VA = "0xEBF728")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0xEBF814", Offset = "0xEBF814", VA = "0xEBF814")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0xEBFD08", Offset = "0xEBFD08", VA = "0xEBFD08")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0xEBFE8C", Offset = "0xEBFE8C", VA = "0xEBFE8C")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0xEC00D8", Offset = "0xEC00D8", VA = "0xEC00D8")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x20005FE")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005FF")]
		public class OffsetLimits
		{
			[Token(Token = "0x4001E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("The effector type (this is just an enum)")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4001E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[UnityEngine.Tooltip("Spring force, if zero then this is a hard limit, if not, offset can exceed the limit.")]
			public float spring;

			[Token(Token = "0x4001E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("Which axes to limit the offset on?")]
			public bool x;

			[Token(Token = "0x4001E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[UnityEngine.Tooltip("Which axes to limit the offset on?")]
			public bool y;

			[Token(Token = "0x4001E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[UnityEngine.Tooltip("Which axes to limit the offset on?")]
			public bool z;

			[Token(Token = "0x4001E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[UnityEngine.Tooltip("The limits")]
			public float minX;

			[Token(Token = "0x4001E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("The limits")]
			public float maxX;

			[Token(Token = "0x4001E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[UnityEngine.Tooltip("The limits")]
			public float minY;

			[Token(Token = "0x4001E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("The limits")]
			public float maxY;

			[Token(Token = "0x4001E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[UnityEngine.Tooltip("The limits")]
			public float minZ;

			[Token(Token = "0x4001E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[UnityEngine.Tooltip("The limits")]
			public float maxZ;

			[Token(Token = "0x6001ED5")]
			[Address(RVA = "0xEC02E0", Offset = "0xEC02E0", VA = "0xEC02E0")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6001ED6")]
			[Address(RVA = "0xEC0570", Offset = "0xEC0570", VA = "0xEC0570")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x6001ED7")]
			[Address(RVA = "0xEC05E0", Offset = "0xEC05E0", VA = "0xEC05E0")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x6001ED8")]
			[Address(RVA = "0xEC0628", Offset = "0xEC0628", VA = "0xEC0628")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x2000600")]
		[CompilerGenerated]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x17000175")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001EDC")]
				[Address(RVA = "0xEC07A4", Offset = "0xEC07A4", VA = "0xEC07A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000176")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001EDE")]
				[Address(RVA = "0xEC07EC", Offset = "0xEC07EC", VA = "0xEC07EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001ED9")]
			[Address(RVA = "0xEC01E4", Offset = "0xEC01E4", VA = "0xEC01E4")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001EDA")]
			[Address(RVA = "0xEC0630", Offset = "0xEC0630", VA = "0xEC0630", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001EDB")]
			[Address(RVA = "0xEC0634", Offset = "0xEC0634", VA = "0xEC0634", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001EDD")]
			[Address(RVA = "0xEC07AC", Offset = "0xEC07AC", VA = "0xEC07AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Reference to the FBBIK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4001E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x17000174")]
		protected float deltaTime
		{
			[Token(Token = "0x6001ECD")]
			[Address(RVA = "0xEBCBE8", Offset = "0xEBCBE8", VA = "0xEBCBE8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001ECE")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0xEBCFB0", Offset = "0xEBCFB0", VA = "0xEBCFB0", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0xEC0170", Offset = "0xEC0170", VA = "0xEC0170")]
		[IteratorStateMachine(typeof(<Initiate>d__8))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0xEC020C", Offset = "0xEC020C", VA = "0xEC020C")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0xEBF64C", Offset = "0xEBF64C", VA = "0xEBF64C")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0xEC0444", Offset = "0xEC0444", VA = "0xEC0444", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0xEBCF28", Offset = "0xEBCF28", VA = "0xEBCF28")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x2000601")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x2000602")]
		[CompilerGenerated]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001EA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x17000178")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001EE9")]
				[Address(RVA = "0xEC0C44", Offset = "0xEC0C44", VA = "0xEC0C44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000179")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001EEB")]
				[Address(RVA = "0xEC0C8C", Offset = "0xEC0C8C", VA = "0xEC0C8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001EE6")]
			[Address(RVA = "0xEC08A8", Offset = "0xEC08A8", VA = "0xEC08A8")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001EE7")]
			[Address(RVA = "0xEC0AD0", Offset = "0xEC0AD0", VA = "0xEC0AD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001EE8")]
			[Address(RVA = "0xEC0AD4", Offset = "0xEC0AD4", VA = "0xEC0AD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001EEA")]
			[Address(RVA = "0xEC0C4C", Offset = "0xEC0C4C", VA = "0xEC0C4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4001EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Reference to the VRIK component")]
		public VRIK ik;

		[Token(Token = "0x4001EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x17000177")]
		protected float deltaTime
		{
			[Token(Token = "0x6001EDF")]
			[Address(RVA = "0xEC07F4", Offset = "0xEC07F4", VA = "0xEC07F4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001EE0")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0xEC0814", Offset = "0xEC0814", VA = "0xEC0814", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0xEC0834", Offset = "0xEC0834", VA = "0xEC0834")]
		[IteratorStateMachine(typeof(<Initiate>d__7))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0xEC08D0", Offset = "0xEC08D0", VA = "0xEC08D0")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0xEC09A4", Offset = "0xEC09A4", VA = "0xEC09A4", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0xEBE790", Offset = "0xEBE790", VA = "0xEBE790")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x2000603")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000604")]
		public class EffectorLink
		{
			[Token(Token = "0x4001EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4001EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4001EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4001EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x6001EEF")]
			[Address(RVA = "0xEC0C94", Offset = "0xEC0C94", VA = "0xEC0C94")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001EF0")]
			[Address(RVA = "0xEC0FEC", Offset = "0xEC0FEC", VA = "0xEC0FEC")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4001EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0xEBD1BC", Offset = "0xEBD1BC", VA = "0xEBD1BC")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0xEC0EE4", Offset = "0xEC0EE4", VA = "0xEC0EE4")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0xEC0F88", Offset = "0xEC0F88", VA = "0xEC0F88")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x2000605")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000606")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x2000607")]
			public class EffectorLink
			{
				[Token(Token = "0x4001EB9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[UnityEngine.Tooltip("Effector to apply the offset to.")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001EBA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[UnityEngine.Tooltip("Multiplier of the offset value, can be negative.")]
				public float weight;

				[Token(Token = "0x6001EF7")]
				[Address(RVA = "0xEC1640", Offset = "0xEC1640", VA = "0xEC1640")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001EAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("Bones to start the raycast from. Multiple raycasts can be used by assigning more than 1 bone.")]
			public Transform[] raycastFrom;

			[Token(Token = "0x4001EB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The Transform to raycast towards. Usually the body part that you want to keep from penetrating.")]
			public Transform raycastTo;

			[Token(Token = "0x4001EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("If 0, will use simple raycasting, if > 0, will use sphere casting (better, but slower).")]
			[Range(0f, 1f)]
			public float raycastRadius;

			[Token(Token = "0x4001EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("Linking this to FBBIK effectors.")]
			public EffectorLink[] effectors;

			[Token(Token = "0x4001EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[UnityEngine.Tooltip("The time of smooth interpolation of the offset value to avoid penetration.")]
			public float smoothTimeIn;

			[Token(Token = "0x4001EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[UnityEngine.Tooltip("The time of smooth interpolation of the offset value blending out of penetration avoidance.")]
			public float smoothTimeOut;

			[Token(Token = "0x4001EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[UnityEngine.Tooltip("Layers to keep penetrating from.")]
			public LayerMask layers;

			[Token(Token = "0x4001EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x4001EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x4001EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x6001EF3")]
			[Address(RVA = "0xEC1064", Offset = "0xEC1064", VA = "0xEC1064")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6001EF4")]
			[Address(RVA = "0xEC1204", Offset = "0xEC1204", VA = "0xEC1204")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001EF5")]
			[Address(RVA = "0xEC130C", Offset = "0xEC130C", VA = "0xEC130C")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001EF6")]
			[Address(RVA = "0xEC162C", Offset = "0xEC162C", VA = "0xEC162C")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x4001EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Definitions of penetration avoidances.")]
		public Avoider[] avoiders;

		[Token(Token = "0x6001EF1")]
		[Address(RVA = "0xEC0FF4", Offset = "0xEC0FF4", VA = "0xEC0FF4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0xEC11F4", Offset = "0xEC11F4", VA = "0xEC11F4")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x2000608")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000609")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x200060A")]
			public class EffectorLink
			{
				[Token(Token = "0x4001ED8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[UnityEngine.Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001ED9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[UnityEngine.Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6001F07")]
				[Address(RVA = "0xEC29EC", Offset = "0xEC29EC", VA = "0xEC29EC")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("Offset vector for the associated effector when doing recoil.")]
			public Vector3 offset;

			[Token(Token = "0x4001ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(0f, 1f)]
			[UnityEngine.Tooltip("When firing before the last recoil has faded, how much of the current recoil offset will be maintained?")]
			public float additivity;

			[Token(Token = "0x4001ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("Max additive recoil for automatic fire.")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4001ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[UnityEngine.Tooltip("Linking this recoil offset to FBBIK effectors.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4001ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4001ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x6001F04")]
			[Address(RVA = "0xEC17E4", Offset = "0xEC17E4", VA = "0xEC17E4")]
			public void Start()
			{
			}

			[Token(Token = "0x6001F05")]
			[Address(RVA = "0xEC2364", Offset = "0xEC2364", VA = "0xEC2364")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x6001F06")]
			[Address(RVA = "0xEC29D8", Offset = "0xEC29D8", VA = "0xEC29D8")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200060B")]
		public enum Handedness
		{
			[Token(Token = "0x4001EDB")]
			Right,
			[Token(Token = "0x4001EDC")]
			Left
		}

		[Token(Token = "0x4001EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Reference to the AimIK component. Optional, only used to getting the aiming direction.")]
		public AimIK aimIK;

		[Token(Token = "0x4001EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Set this true if you are using IKExecutionOrder.cs or a custom script to force AimIK solve after FBBIK.")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4001EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("Which hand is holding the weapon?")]
		public Handedness handedness;

		[Token(Token = "0x4001EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Check for 2-handed weapons.")]
		public bool twoHanded;

		[Token(Token = "0x4001EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Weight curve for the recoil offsets. Recoil procedure is as long as this curve.")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x4001EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("How much is the magnitude randomized each time Recoil is called?")]
		public float magnitudeRandom;

		[Token(Token = "0x4001EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("How much is the rotation randomized each time Recoil is called?")]
		public Vector3 rotationRandom;

		[Token(Token = "0x4001EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Rotating the primary hand bone for the recoil (in local space).")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x4001EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[UnityEngine.Tooltip("Time of blending in another recoil when doing automatic fire.")]
		public float blendTime;

		[Token(Token = "0x4001EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("FBBIK effector position offsets for the recoil (in aiming direction space).")]
		[Space(10f)]
		public RecoilOffset[] offsets;

		[Token(Token = "0x4001EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x4001EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x4001EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x4001EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x4001EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x4001ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x4001ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x4001ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x4001ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x4001ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x4001ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4001ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x1700017A")]
		public bool isFinished
		{
			[Token(Token = "0x6001EF8")]
			[Address(RVA = "0xEC1648", Offset = "0xEC1648", VA = "0xEC1648")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017B")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x6001EFE")]
			[Address(RVA = "0xEC2568", Offset = "0xEC2568", VA = "0xEC2568")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017C")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x6001EFF")]
			[Address(RVA = "0xEC25A4", Offset = "0xEC25A4", VA = "0xEC25A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017D")]
		private Transform primaryHand
		{
			[Token(Token = "0x6001F00")]
			[Address(RVA = "0xEC2530", Offset = "0xEC2530", VA = "0xEC2530")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017E")]
		private Transform secondaryHand
		{
			[Token(Token = "0x6001F01")]
			[Address(RVA = "0xEC254C", Offset = "0xEC254C", VA = "0xEC254C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0xEC166C", Offset = "0xEC166C", VA = "0xEC166C")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0xEC1698", Offset = "0xEC1698", VA = "0xEC1698")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0xEC18B8", Offset = "0xEC18B8", VA = "0xEC18B8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0xEC25E0", Offset = "0xEC25E0", VA = "0xEC25E0")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0xEC26F8", Offset = "0xEC26F8", VA = "0xEC26F8")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0xEC2748", Offset = "0xEC2748", VA = "0xEC2748", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0xEC294C", Offset = "0xEC294C", VA = "0xEC294C")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x200060C")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Weight of shoulder rotation")]
		public float weight;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("The greater the offset, the sooner the shoulder will start rotating")]
		public float offset;

		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0xEC29F4", Offset = "0xEC29F4", VA = "0xEC29F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F09")]
		[Address(RVA = "0xEC2B08", Offset = "0xEC2B08", VA = "0xEC2B08")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0xEC2BE4", Offset = "0xEC2BE4", VA = "0xEC2BE4")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0xEC2FE8", Offset = "0xEC2FE8", VA = "0xEC2FE8")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0xEC301C", Offset = "0xEC301C", VA = "0xEC301C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0xEC3148", Offset = "0xEC3148", VA = "0xEC3148")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x200060D")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x200060E")]
		public class Settings
		{
			[Token(Token = "0x4001EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("Multiplies character scale")]
			public float scaleMlp;

			[Token(Token = "0x4001EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[UnityEngine.Tooltip("Local axis of the HMD facing forward.")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x4001EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("Local axis of the HMD facing up.")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x4001EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[UnityEngine.Tooltip("Local axis of the body tracker towards the player's forward direction.")]
			public Vector3 bodyTrackerForward;

			[Token(Token = "0x4001EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[UnityEngine.Tooltip("Local axis of the body tracker towards the up direction.")]
			public Vector3 bodyTrackerUp;

			[Token(Token = "0x4001EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[UnityEngine.Tooltip("Local axis of the hand trackers pointing from the wrist towards the palm.")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x4001EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[UnityEngine.Tooltip("Local axis of the hand trackers pointing in the direction of the surface normal of the back of the hand.")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x4001EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[UnityEngine.Tooltip("Local axis of the foot trackers towards the player's forward direction.")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x4001EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[UnityEngine.Tooltip("Local axis of the foot tracker towards the up direction.")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x4001EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[UnityEngine.Tooltip("Offset of the head bone from the HMD in (headTrackerForward, headTrackerUp) space relative to the head tracker.")]
			[Space(10f)]
			public Vector3 headOffset;

			[Token(Token = "0x4001EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[UnityEngine.Tooltip("Offset of the hand bones from the hand trackers in (handTrackerForward, handTrackerUp) space relative to the hand trackers.")]
			public Vector3 handOffset;

			[Token(Token = "0x4001EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[UnityEngine.Tooltip("Forward offset of the foot bones from the foot trackers.")]
			public float footForwardOffset;

			[Token(Token = "0x4001EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[UnityEngine.Tooltip("Inward offset of the foot bones from the foot trackers.")]
			public float footInwardOffset;

			[Token(Token = "0x4001EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Range(-180f, 180f)]
			[UnityEngine.Tooltip("Used for adjusting foot heading relative to the foot trackers.")]
			public float footHeadingOffset;

			[Token(Token = "0x4001EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x4001EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x6001F13")]
			[Address(RVA = "0xEC5D00", Offset = "0xEC5D00", VA = "0xEC5D00")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200060F")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x2000610")]
			public class Target
			{
				[Token(Token = "0x4001EFD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x4001EFE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x4001EFF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x6001F15")]
				[Address(RVA = "0xEC4E38", Offset = "0xEC4E38", VA = "0xEC4E38")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x6001F16")]
				[Address(RVA = "0xEC5890", Offset = "0xEC5890", VA = "0xEC5890")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x4001EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x4001EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x4001EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x4001EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x4001EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x4001EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x4001EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x4001EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x4001EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x4001EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x4001EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4001EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6001F14")]
			[Address(RVA = "0xEC453C", Offset = "0xEC453C", VA = "0xEC453C")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0xEC315C", Offset = "0xEC315C", VA = "0xEC315C")]
		public static void RecalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0xEC3250", Offset = "0xEC3250", VA = "0xEC3250")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0xEC4544", Offset = "0xEC4544", VA = "0xEC4544")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0xEC4EEC", Offset = "0xEC4EEC", VA = "0xEC4EEC")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0xEC58EC", Offset = "0xEC58EC", VA = "0xEC58EC")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}
	}
	[Token(Token = "0x2000611")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x6001F17")]
		[Address(RVA = "0xEC5F04", Offset = "0xEC5F04", VA = "0xEC5F04")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F18")]
		[Address(RVA = "0xEC5F5C", Offset = "0xEC5F5C", VA = "0xEC5F5C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0xEC5F84", Offset = "0xEC5F84", VA = "0xEC5F84")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0xEC60A4", Offset = "0xEC60A4", VA = "0xEC60A4")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x2000612")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x4001F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x4001F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x4001F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x1700017F")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x6001F1B")]
			[Address(RVA = "0xEC60BC", Offset = "0xEC60BC", VA = "0xEC60BC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001F1C")]
			[Address(RVA = "0xEC60C8", Offset = "0xEC60C8", VA = "0xEC60C8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0xEC60D4", Offset = "0xEC60D4", VA = "0xEC60D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0xEC4C24", Offset = "0xEC4C24", VA = "0xEC4C24")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0xEC5B60", Offset = "0xEC5B60", VA = "0xEC5B60")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0xEC61F0", Offset = "0xEC61F0", VA = "0xEC61F0")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0xEC65B8", Offset = "0xEC65B8", VA = "0xEC65B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0xEC66E4", Offset = "0xEC66E4", VA = "0xEC66E4")]
		public VRIKRootController()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x2000613")]
	public class FKOffset : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000614")]
		public class Offset
		{
			[Token(Token = "0x4001F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x4001F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HumanBodyBones bone;

			[Token(Token = "0x4001F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 rotationOffset;

			[Token(Token = "0x4001F0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform t;

			[Token(Token = "0x6001F27")]
			[Address(RVA = "0xEC67A8", Offset = "0xEC67A8", VA = "0xEC67A8")]
			public void Apply(Animator animator)
			{
			}

			[Token(Token = "0x6001F28")]
			[Address(RVA = "0xEC6A24", Offset = "0xEC6A24", VA = "0xEC6A24")]
			public Offset()
			{
			}
		}

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Offset[] offsets;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0xEC66EC", Offset = "0xEC66EC", VA = "0xEC66EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0xEC6744", Offset = "0xEC6744", VA = "0xEC6744")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0xEC6958", Offset = "0xEC6958", VA = "0xEC6958")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001F26")]
		[Address(RVA = "0xEC6A1C", Offset = "0xEC6A1C", VA = "0xEC6A1C")]
		public FKOffset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000615")]
	public class Navigator
	{
		[Token(Token = "0x2000616")]
		public enum State
		{
			[Token(Token = "0x4001F1E")]
			Idle,
			[Token(Token = "0x4001F1F")]
			Seeking,
			[Token(Token = "0x4001F20")]
			OnPath
		}

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("Should this Navigator be actively seeking a path.")]
		public bool activeTargetSeeking;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[UnityEngine.Tooltip("Increase this value if the character starts running in a circle, not able to reach the corner because of a too large turning radius.")]
		public float cornerRadius;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Recalculate path if target position has moved by this distance from the position it was at when the path was originally calculated")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Sample within this distance from sourcePosition.")]
		public float maxSampleDistance;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Interval of updating the path")]
		public float nextPathInterval;

		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x4001F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x4001F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x17000180")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x6001F29")]
			[Address(RVA = "0xEC6A2C", Offset = "0xEC6A2C", VA = "0xEC6A2C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001F2A")]
			[Address(RVA = "0xEC6A38", Offset = "0xEC6A38", VA = "0xEC6A38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public State state
		{
			[Token(Token = "0x6001F2B")]
			[Address(RVA = "0xEC6A44", Offset = "0xEC6A44", VA = "0xEC6A44")]
			[CompilerGenerated]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6001F2C")]
			[Address(RVA = "0xEC6A4C", Offset = "0xEC6A4C", VA = "0xEC6A4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0xEC6A54", Offset = "0xEC6A54", VA = "0xEC6A54")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0xEC6B2C", Offset = "0xEC6B2C", VA = "0xEC6B2C")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0xEC705C", Offset = "0xEC705C", VA = "0xEC705C")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0xEC70C0", Offset = "0xEC70C0", VA = "0xEC70C0")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0xEC6F84", Offset = "0xEC6F84", VA = "0xEC6F84")]
		private void Stop()
		{
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0xEC6FE0", Offset = "0xEC6FE0", VA = "0xEC6FE0")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0xEC71F4", Offset = "0xEC71F4", VA = "0xEC71F4")]
		public void Visualize()
		{
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0xEC73B8", Offset = "0xEC73B8", VA = "0xEC73B8")]
		public Navigator()
		{
		}
	}
}
namespace GVR.Tools
{
	[Token(Token = "0x2000617")]
	public class LockLinePoint : MonoBehaviour
	{
		[Token(Token = "0x6001F35")]
		[Address(RVA = "0xEC7428", Offset = "0xEC7428", VA = "0xEC7428")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0xEC7490", Offset = "0xEC7490", VA = "0xEC7490")]
		public LockLinePoint()
		{
		}
	}
}
namespace NWH
{
	[Token(Token = "0x2000618")]
	[RequireComponent(typeof(Text))]
	public class FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x4001F21")]
		private const float fpsMeasurePeriod = 0.5f;

		[Token(Token = "0x4001F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_FpsAccumulator;

		[Token(Token = "0x4001F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_FpsNextPeriod;

		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_CurrentFps;

		[Token(Token = "0x4001F25")]
		private const string display = "{0} FPS";

		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text m_Text;

		[Token(Token = "0x6001F37")]
		[Address(RVA = "0xEC7498", Offset = "0xEC7498", VA = "0xEC7498")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0xEC7504", Offset = "0xEC7504", VA = "0xEC7504")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0xEC75F8", Offset = "0xEC75F8", VA = "0xEC75F8")]
		public FPSCounter()
		{
		}
	}
}
namespace GData
{
	[Token(Token = "0x2000619")]
	public class PicoUserMgr : Singleton<PicoUserMgr>
	{
		[StructLayout(3)]
		[Token(Token = "0x200061A")]
		[CompilerGenerated]
		private struct <GetHead>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x4001F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PicoUserMgr <>4__this;

			[Token(Token = "0x4001F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string url;

			[Token(Token = "0x4001F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private RawImage <head>5__2;

			[Token(Token = "0x4001F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<Texture2D> <>u__1;

			[Token(Token = "0x6001F4A")]
			[Address(RVA = "0xEC81A0", Offset = "0xEC81A0", VA = "0xEC81A0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001F4B")]
			[Address(RVA = "0xEC8488", Offset = "0xEC8488", VA = "0xEC8488", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action whenFinish;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GClick click;

		[Token(Token = "0x4001F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool issucc;

		[Token(Token = "0x4001F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject enterscene;

		[Token(Token = "0x4001F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject NoLoginMsg;

		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject UserInfoMenu;

		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float loginTimeout;

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0xEC7600", Offset = "0xEC7600", VA = "0xEC7600")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0xEC7690", Offset = "0xEC7690", VA = "0xEC7690")]
		public void InitServiceAsync()
		{
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0xEC7764", Offset = "0xEC7764", VA = "0xEC7764")]
		public void GetLoginInfo()
		{
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0xEC7810", Offset = "0xEC7810", VA = "0xEC7810")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0xEC7884", Offset = "0xEC7884", VA = "0xEC7884")]
		public void LoginFied(string logincode, bool isquit = true)
		{
		}

		[Token(Token = "0x6001F3F")]
		[Address(RVA = "0xEC7AB8", Offset = "0xEC7AB8", VA = "0xEC7AB8")]
		public void ReLoginFied(string logincode)
		{
		}

		[Token(Token = "0x6001F40")]
		[Address(RVA = "0xEC7BA4", Offset = "0xEC7BA4", VA = "0xEC7BA4")]
		public void LoginCallBack(bool issuc)
		{
		}

		[Token(Token = "0x6001F41")]
		[Address(RVA = "0xEC7BF8", Offset = "0xEC7BF8", VA = "0xEC7BF8")]
		public void GetUserInfoCallBack(User msg)
		{
		}

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0xEC7CF4", Offset = "0xEC7CF4", VA = "0xEC7CF4")]
		[AsyncStateMachine(typeof(<GetHead>d__15))]
		private void GetHead(string url)
		{
		}

		[Token(Token = "0x6001F43")]
		[Address(RVA = "0xEC7DCC", Offset = "0xEC7DCC", VA = "0xEC7DCC")]
		public void StartEnterScene()
		{
		}

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0xEC7E04", Offset = "0xEC7E04", VA = "0xEC7E04")]
		public void QuitApplation()
		{
		}

		[Token(Token = "0x6001F45")]
		[Address(RVA = "0xEC7E0C", Offset = "0xEC7E0C", VA = "0xEC7E0C")]
		public PicoUserMgr()
		{
		}
	}
	[Token(Token = "0x200061B")]
	[ActionCategory("GVR")]
	public class Action_picoSimulate : FsmStateAction
	{
		[Token(Token = "0x17000182")]
		public bool simulateHand
		{
			[Token(Token = "0x6001F4C")]
			[Address(RVA = "0xEC8494", Offset = "0xEC8494", VA = "0xEC8494")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000183")]
		public Transform inputRoot
		{
			[Token(Token = "0x6001F4D")]
			[Address(RVA = "0xEC84F4", Offset = "0xEC84F4", VA = "0xEC84F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000184")]
		public Transform inputHead
		{
			[Token(Token = "0x6001F4E")]
			[Address(RVA = "0xEC8560", Offset = "0xEC8560", VA = "0xEC8560")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000185")]
		public Transform inputHand
		{
			[Token(Token = "0x6001F4F")]
			[Address(RVA = "0xEC85CC", Offset = "0xEC85CC", VA = "0xEC85CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000186")]
		public Transform headBase
		{
			[Token(Token = "0x6001F50")]
			[Address(RVA = "0xEC8638", Offset = "0xEC8638", VA = "0xEC8638")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000187")]
		public Transform outputHand
		{
			[Token(Token = "0x6001F51")]
			[Address(RVA = "0xEC86A4", Offset = "0xEC86A4", VA = "0xEC86A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000188")]
		public Vector3 neckPosition
		{
			[Token(Token = "0x6001F52")]
			[Address(RVA = "0xEC8710", Offset = "0xEC8710", VA = "0xEC8710")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000189")]
		public float headHeight
		{
			[Token(Token = "0x6001F53")]
			[Address(RVA = "0xEC8770", Offset = "0xEC8770", VA = "0xEC8770")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700018A")]
		public float headForward
		{
			[Token(Token = "0x6001F54")]
			[Address(RVA = "0xEC87D0", Offset = "0xEC87D0", VA = "0xEC87D0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700018B")]
		public Vector3 rightArmOffset
		{
			[Token(Token = "0x6001F55")]
			[Address(RVA = "0xEC8830", Offset = "0xEC8830", VA = "0xEC8830")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700018C")]
		public float armLength
		{
			[Token(Token = "0x6001F56")]
			[Address(RVA = "0xEC8890", Offset = "0xEC8890", VA = "0xEC8890")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700018D")]
		public GameObject Neck
		{
			[Token(Token = "0x6001F58")]
			[Address(RVA = "0xEC88F4", Offset = "0xEC88F4", VA = "0xEC88F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F57")]
		[Address(RVA = "0xEC88F0", Offset = "0xEC88F0", VA = "0xEC88F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0xEC8954", Offset = "0xEC8954", VA = "0xEC8954", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0xEC8D80", Offset = "0xEC8D80", VA = "0xEC8D80")]
		public Action_picoSimulate()
		{
		}
	}
	[Token(Token = "0x200061C")]
	public class Axis_MoveObj : MonoBehaviour
	{
		[Token(Token = "0x200061D")]
		[CompilerGenerated]
		private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Axis_MoveObj <>4__this;

			[Token(Token = "0x4001F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x1700018E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F61")]
				[Address(RVA = "0xEC91E4", Offset = "0xEC91E4", VA = "0xEC91E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F63")]
				[Address(RVA = "0xEC922C", Offset = "0xEC922C", VA = "0xEC922C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F5E")]
			[Address(RVA = "0xEC8DFC", Offset = "0xEC8DFC", VA = "0xEC8DFC")]
			[DebuggerHidden]
			public <Start>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001F5F")]
			[Address(RVA = "0xEC9038", Offset = "0xEC9038", VA = "0xEC9038", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F60")]
			[Address(RVA = "0xEC903C", Offset = "0xEC903C", VA = "0xEC903C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F62")]
			[Address(RVA = "0xEC91EC", Offset = "0xEC91EC", VA = "0xEC91EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4001F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform moveTarget;

		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ENormalInput input;

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0xEC8D88", Offset = "0xEC8D88", VA = "0xEC8D88")]
		[IteratorStateMachine(typeof(<Start>d__3))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0xEC8E24", Offset = "0xEC8E24", VA = "0xEC8E24")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F5D")]
		[Address(RVA = "0xEC9028", Offset = "0xEC9028", VA = "0xEC9028")]
		public Axis_MoveObj()
		{
		}
	}
	[Token(Token = "0x200061E")]
	public class DrawRay : ExecutorBehaviour
	{
		[Token(Token = "0x200061F")]
		public enum RaySourceType
		{
			[Token(Token = "0x4001F52")]
			Auto,
			[Token(Token = "0x4001F53")]
			RightHand,
			[Token(Token = "0x4001F54")]
			LeftHand,
			[Token(Token = "0x4001F55")]
			Head
		}

		[StructLayout(3)]
		[Token(Token = "0x2000620")]
		[CompilerGenerated]
		private struct <waitAndSave>d__32 : IAsyncStateMachine
		{
			[Token(Token = "0x4001F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DrawRay <>4__this;

			[Token(Token = "0x4001F59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private object <>u__1;

			[Token(Token = "0x6001F73")]
			[Address(RVA = "0xECA858", Offset = "0xECA858", VA = "0xECA858", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001F74")]
			[Address(RVA = "0xECAAE8", Offset = "0xECAAE8", VA = "0xECAAE8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000621")]
		[CompilerGenerated]
		private struct <waitAndInit>d__37 : IAsyncStateMachine
		{
			[Token(Token = "0x4001F5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001F5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DrawRay <>4__this;

			[Token(Token = "0x4001F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<bool> <>u__1;

			[Token(Token = "0x4001F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private object <>u__2;

			[Token(Token = "0x6001F75")]
			[Address(RVA = "0xECAAF4", Offset = "0xECAAF4", VA = "0xECAAF4", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001F76")]
			[Address(RVA = "0xECAE58", Offset = "0xECAE58", VA = "0xECAE58", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public RaySourceType raySourceType;

		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("线起始宽度")]
		public float line_width_start;

		[Token(Token = "0x4001F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("线颜色")]
		public Color line_color;

		[Token(Token = "0x4001F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("射线未射中时的默认长度(米)")]
		public float ray_default_length;

		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("射线材质")]
		public Material lineMaterial;

		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject linePoint;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform rayTransform;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastHit hit;

		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float MaxLength;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ulong downTimeMs;

		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int currentRayCast;

		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int rayCastPer;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool rayEnabled;

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool inited;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float lastLineWidth;

		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float default_line_width_start;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float default_RayWidth;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Color default_Color;

		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool default_rayEnabled;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float default_ray_default_length;

		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private RaySourceType defaultRaySourceType;

		[Token(Token = "0x17000190")]
		private GameObject hand
		{
			[Token(Token = "0x6001F65")]
			[Address(RVA = "0xEC9278", Offset = "0xEC9278", VA = "0xEC9278")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0xEC9234", Offset = "0xEC9234", VA = "0xEC9234")]
		private void EnableLine(bool isEnable)
		{
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0xEC93D8", Offset = "0xEC93D8", VA = "0xEC93D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0xEC9704", Offset = "0xEC9704", VA = "0xEC9704")]
		private void SetHitObj(GameObject hitObj, Vector3 pos)
		{
		}

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0xEC9968", Offset = "0xEC9968", VA = "0xEC9968")]
		public void SetLineWidth(float v)
		{
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0xEC9A1C", Offset = "0xEC9A1C", VA = "0xEC9A1C")]
		private void InitRayline()
		{
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0xEC9EF0", Offset = "0xEC9EF0", VA = "0xEC9EF0")]
		private void RefreshLineParameter()
		{
		}

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0xECA148", Offset = "0xECA148", VA = "0xECA148", Slot = "6")]
		public override bool onCommand(string str)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0xECA5C0", Offset = "0xECA5C0", VA = "0xECA5C0")]
		[AsyncStateMachine(typeof(<waitAndSave>d__32))]
		private void waitAndSave()
		{
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0xECA678", Offset = "0xECA678", VA = "0xECA678")]
		private void doReset()
		{
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0xECA59C", Offset = "0xECA59C", VA = "0xECA59C")]
		private void ResetRay()
		{
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0xECA718", Offset = "0xECA718", VA = "0xECA718")]
		private void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0xECA724", Offset = "0xECA724", VA = "0xECA724")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0xECA740", Offset = "0xECA740", VA = "0xECA740")]
		[AsyncStateMachine(typeof(<waitAndInit>d__37))]
		private void waitAndInit()
		{
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0xECA7F4", Offset = "0xECA7F4", VA = "0xECA7F4")]
		public DrawRay()
		{
		}
	}
	[Token(Token = "0x2000622")]
	public class DrawRayLayerSet : MonoBehaviour
	{
		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int newLayer;

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0xECAE64", Offset = "0xECAE64", VA = "0xECAE64")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F78")]
		[Address(RVA = "0xECAEC4", Offset = "0xECAEC4", VA = "0xECAEC4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001F79")]
		[Address(RVA = "0xECAF14", Offset = "0xECAF14", VA = "0xECAF14")]
		public DrawRayLayerSet()
		{
		}
	}
	[Token(Token = "0x2000623")]
	public class FixByGround : MonoBehaviour
	{
		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minHeight;

		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxHeight;

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float checkInterval;

		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isDebug;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float BigMoveThreshold;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject lastHead;

		[Token(Token = "0x4001F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool headPositionInited;

		[Token(Token = "0x4001F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 lastHeadPosition;

		[Token(Token = "0x4001F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float timeout;

		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0xECAF24", Offset = "0xECAF24", VA = "0xECAF24")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0xECB738", Offset = "0xECB738", VA = "0xECB738")]
		public FixByGround()
		{
		}
	}
	[Token(Token = "0x2000624")]
	public class RayFix : MonoBehaviour
	{
		[Token(Token = "0x4001F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("是否高优先级")]
		public bool isP0;

		[Token(Token = "0x4001F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[UnityEngine.Tooltip("是否需要显示射线")]
		public bool needRay;

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0xECB754", Offset = "0xECB754", VA = "0xECB754")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F7D")]
		[Address(RVA = "0xECB818", Offset = "0xECB818", VA = "0xECB818")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0xECB8DC", Offset = "0xECB8DC", VA = "0xECB8DC")]
		public RayFix()
		{
		}
	}
	[Token(Token = "0x2000625")]
	public class rayTest : MonoBehaviour
	{
		[Token(Token = "0x4001F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] testCommands;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int currentIndex;

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0xECB8EC", Offset = "0xECB8EC", VA = "0xECB8EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0xECBA08", Offset = "0xECBA08", VA = "0xECBA08")]
		public rayTest()
		{
		}
	}
	[Token(Token = "0x2000626")]
	public class UpdateDefaultPosition : MonoBehaviour
	{
		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("脚底的地面，数据输入")]
		public Transform MyRoot;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("头部位置，数据输出")]
		public Transform MyHead;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Neck;

		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float neckHeight;

		[Token(Token = "0x17000191")]
		private float EyeHeight
		{
			[Token(Token = "0x6001F81")]
			[Address(RVA = "0xECBED0", Offset = "0xECBED0", VA = "0xECBED0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0xECBF20", Offset = "0xECBF20", VA = "0xECBF20")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F83")]
		[Address(RVA = "0xECBF44", Offset = "0xECBF44", VA = "0xECBF44")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0xECC0E8", Offset = "0xECC0E8", VA = "0xECC0E8")]
		public UpdateDefaultPosition()
		{
		}
	}
	[Token(Token = "0x2000627")]
	public class Switcher : MonoBehaviour
	{
		[Token(Token = "0x2000628")]
		public enum PlatformType
		{
			[Token(Token = "0x4001F78")]
			NA = 0,
			[Token(Token = "0x4001F79")]
			AllInOne_Huawei = 1,
			[Token(Token = "0x4001F7A")]
			AllInOne_Pico = 2,
			[Token(Token = "0x4001F7B")]
			AllInOne_Xiaomi = 3,
			[Token(Token = "0x4001F7C")]
			AR = 4,
			[Token(Token = "0x4001F7D")]
			Android = 5,
			[Token(Token = "0x4001F7E")]
			iOS = 6,
			[Token(Token = "0x4001F7F")]
			Mac = 7,
			[Token(Token = "0x4001F80")]
			Windows = 8,
			[Token(Token = "0x4001F81")]
			Editor = 9,
			[Token(Token = "0x4001F82")]
			AR_able = 10,
			[Token(Token = "0x4001F83")]
			PC_Mac = 11,
			[Token(Token = "0x4001F84")]
			DATA_STRING = 128,
			[Token(Token = "0x4001F85")]
			DATA_JSON = 129,
			[Token(Token = "0x4001F86")]
			DATA_OBJ = 130,
			[Token(Token = "0x4001F87")]
			HasExecutor = 131
		}

		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float CHECK_INTERVAL;

		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlatformType platform;

		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string dataName;

		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool setEnable;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool executed;

		[Token(Token = "0x4001F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float checkTimeout;

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0xECC0F0", Offset = "0xECC0F0", VA = "0xECC0F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0xECC134", Offset = "0xECC134", VA = "0xECC134")]
		private bool CheckData()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0xECC3C0", Offset = "0xECC3C0", VA = "0xECC3C0")]
		private bool MeetPlatform()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F88")]
		[Address(RVA = "0xECC540", Offset = "0xECC540", VA = "0xECC540")]
		private void SetChildren(bool enable)
		{
		}

		[Token(Token = "0x6001F89")]
		[Address(RVA = "0xECC5C8", Offset = "0xECC5C8", VA = "0xECC5C8")]
		public Switcher()
		{
		}
	}
	[Token(Token = "0x2000629")]
	public class Plane_BindSuc : MonoBehaviour
	{
		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0xECC624", Offset = "0xECC624", VA = "0xECC624")]
		public void CloseUI()
		{
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0xECC648", Offset = "0xECC648", VA = "0xECC648")]
		public Plane_BindSuc()
		{
		}
	}
	[Token(Token = "0x200062A")]
	public class UserMgr : MonoBehaviour
	{
		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static UserMgr Instance;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsCheckBind;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool IsCheckYS;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ScenesData;

		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0xECC650", Offset = "0xECC650", VA = "0xECC650")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0xECC6A8", Offset = "0xECC6A8", VA = "0xECC6A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0xECC75C", Offset = "0xECC75C", VA = "0xECC75C")]
		public void CheckAgree()
		{
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0xECC76C", Offset = "0xECC76C", VA = "0xECC76C")]
		public void GoScenes()
		{
		}

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0xECC810", Offset = "0xECC810", VA = "0xECC810")]
		public string GetSystemLanguage()
		{
			return null;
		}

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0xECC878", Offset = "0xECC878", VA = "0xECC878")]
		public UserMgr()
		{
		}
	}
	[Token(Token = "0x200062B")]
	public class AvatarParameters : MonoBehaviour
	{
		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("脚下蹲旋转修正")]
		public float footRotate;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("眼睛高度，默认1.5米")]
		public float eyeHeight;

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0xECC880", Offset = "0xECC880", VA = "0xECC880")]
		public AvatarParameters()
		{
		}
	}
	[Token(Token = "0x200062C")]
	public class avatar2018 : EventReceiver
	{
		[StructLayout(3)]
		[Token(Token = "0x200062D")]
		[CompilerGenerated]
		private struct <InitRoleModel>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x4001F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001F98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public avatar2018 <>4__this;

			[Token(Token = "0x4001F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform head;

			[Token(Token = "0x4001F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform root;

			[Token(Token = "0x4001F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<GameObject> <>u__1;

			[Token(Token = "0x4001F9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private object <>u__2;

			[Token(Token = "0x6001FA0")]
			[Address(RVA = "0xECD8FC", Offset = "0xECD8FC", VA = "0xECD8FC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001FA1")]
			[Address(RVA = "0xECDFB4", Offset = "0xECDFB4", VA = "0xECDFB4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("修正人物高度")]
		public float heightFix;

		[Token(Token = "0x4001F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("修正人物大小")]
		public float scaleFix;

		[Token(Token = "0x4001F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("旧人物角色")]
		public string abName;

		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("人物的头部俯仰角修正")]
		public float upDownFix;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool isRemote;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SyncItem _syncItem;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform linker;

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0xECC890", Offset = "0xECC890", VA = "0xECC890")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001F95")]
		[Address(RVA = "0xECC9B0", Offset = "0xECC9B0", VA = "0xECC9B0", Slot = "6")]
		public override void OnEvent(bool isLocal, string newEvent = "Ready")
		{
		}

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0xECCE34", Offset = "0xECCE34", VA = "0xECCE34")]
		private static Transform FindAndAssert(string path, Transform root, bool assertTrue = true)
		{
			return null;
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0xECCA24", Offset = "0xECCA24", VA = "0xECCA24")]
		private void doFix()
		{
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0xECCF44", Offset = "0xECCF44", VA = "0xECCF44")]
		[AsyncStateMachine(typeof(<InitRoleModel>d__11))]
		private void InitRoleModel(Transform head, Transform root)
		{
		}

		[Token(Token = "0x6001F99")]
		[Address(RVA = "0xECD030", Offset = "0xECD030", VA = "0xECD030")]
		private void InitRemote()
		{
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0xECD13C", Offset = "0xECD13C", VA = "0xECD13C")]
		private void InitLocal()
		{
		}

		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0xECD258", Offset = "0xECD258", VA = "0xECD258")]
		private void ModelLoaded(Transform head, Transform root)
		{
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0xECD320", Offset = "0xECD320", VA = "0xECD320")]
		private void SetLinkToSyncItem(Transform head, Transform root)
		{
		}

		[Token(Token = "0x6001F9D")]
		[Address(RVA = "0xECD6A8", Offset = "0xECD6A8", VA = "0xECD6A8")]
		private Quaternion GetHeadOffsetRotation(Transform head)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001F9E")]
		[Address(RVA = "0xECD6C0", Offset = "0xECD6C0", VA = "0xECD6C0")]
		private Quaternion GetOffsetRotation(Transform hand)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001F9F")]
		[Address(RVA = "0xECD890", Offset = "0xECD890", VA = "0xECD890")]
		public avatar2018()
		{
		}
	}
	[Token(Token = "0x200062E")]
	public class LoadRoleModel : CommonBehaviour
	{
		[StructLayout(3)]
		[Token(Token = "0x200062F")]
		[CompilerGenerated]
		private struct <GetDefaultModel>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x4001FA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001FAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001FAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LoadRoleModel <>4__this;

			[Token(Token = "0x4001FAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<JToken> <>u__1;

			[Token(Token = "0x6001FB2")]
			[Address(RVA = "0xECFA48", Offset = "0xECFA48", VA = "0xECFA48", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001FB3")]
			[Address(RVA = "0xED00B8", Offset = "0xED00B8", VA = "0xED00B8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000630")]
		[CompilerGenerated]
		private struct <InitRoleModel>d__17 : IAsyncStateMachine
		{
			[Token(Token = "0x4001FAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001FAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001FAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LoadRoleModel <>4__this;

			[Token(Token = "0x4001FB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private GameObject <newRoot>5__2;

			[Token(Token = "0x4001FB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<GameObject> <>u__1;

			[Token(Token = "0x6001FB4")]
			[Address(RVA = "0xED00C4", Offset = "0xED00C4", VA = "0xED00C4", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001FB5")]
			[Address(RVA = "0xED05D4", Offset = "0xED05D4", VA = "0xED05D4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string AVATAR2018_PREFIX;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string DEFAULT_AVATAR;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static float FOOT_DISTANCE;

		[Token(Token = "0x4001FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static float STEP_DISTANCE;

		[Token(Token = "0x4001FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("用于调试刷新")]
		public bool inited;

		[Token(Token = "0x4001FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string roleModel;

		[Token(Token = "0x4001FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool isRemote;

		[Token(Token = "0x4001FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AvatarParameters parameters;

		[Token(Token = "0x4001FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator _animator;

		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRIK ik;

		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SyncItem _syncItem;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform linker;

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0xECDFC0", Offset = "0xECDFC0", VA = "0xECDFC0")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0xECE200", Offset = "0xECE200", VA = "0xECE200")]
		private void InitRemote()
		{
		}

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0xECE32C", Offset = "0xECE32C", VA = "0xECE32C")]
		private void InitLocal()
		{
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0xECE148", Offset = "0xECE148", VA = "0xECE148")]
		[AsyncStateMachine(typeof(<GetDefaultModel>d__14))]
		private void GetDefaultModel()
		{
		}

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0xECE44C", Offset = "0xECE44C", VA = "0xECE44C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0xECE488", Offset = "0xECE488", VA = "0xECE488")]
		[AsyncStateMachine(typeof(<InitRoleModel>d__17))]
		private void InitRoleModel()
		{
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0xECE53C", Offset = "0xECE53C", VA = "0xECE53C")]
		private void StopAnimator()
		{
		}

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0xECE5C0", Offset = "0xECE5C0", VA = "0xECE5C0")]
		private void ModelLoaded(GameObject obj)
		{
		}

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0xECEDF8", Offset = "0xECEDF8", VA = "0xECEDF8")]
		private void SetLinkToSyncItem(Transform head, Transform rhand, Transform lhand)
		{
		}

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0xECF1AC", Offset = "0xECF1AC", VA = "0xECF1AC")]
		private Quaternion GetHeadOffsetRotation(Transform head)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0xECF060", Offset = "0xECF060", VA = "0xECF060")]
		private Quaternion GetOffsetRotation(Transform hand)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0xECF1C4", Offset = "0xECF1C4", VA = "0xECF1C4")]
		private Transform FindEye()
		{
			return null;
		}

		[Token(Token = "0x6001FAE")]
		[Address(RVA = "0xECE840", Offset = "0xECE840", VA = "0xECE840")]
		private void VRIKInit(Transform avatarRoot, out Transform head, out Transform rhand, out Transform lhand, float eyeHeight)
		{
		}

		[Token(Token = "0x6001FAF")]
		[Address(RVA = "0xECF3C0", Offset = "0xECF3C0", VA = "0xECF3C0")]
		private void InitGroundVRIK()
		{
		}

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0xECF93C", Offset = "0xECF93C", VA = "0xECF93C")]
		public LoadRoleModel()
		{
		}
	}
	[Token(Token = "0x2000631")]
	public static class UserAvatars
	{
		[StructLayout(3)]
		[Token(Token = "0x2000632")]
		[CompilerGenerated]
		private struct <GetAvatar>d__2 : IAsyncStateMachine
		{
			[Token(Token = "0x4001FB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001FB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<JToken> <>t__builder;

			[Token(Token = "0x4001FB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string user;

			[Token(Token = "0x4001FB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool buffer;

			[Token(Token = "0x4001FB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<JToken> <>u__1;

			[Token(Token = "0x6001FB9")]
			[Address(RVA = "0xED0B84", Offset = "0xED0B84", VA = "0xED0B84", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001FBA")]
			[Address(RVA = "0xED0F34", Offset = "0xED0F34", VA = "0xED0F34", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, JToken> ALL;

		[Token(Token = "0x6001FB6")]
		[Address(RVA = "0xED05E0", Offset = "0xED05E0", VA = "0xED05E0")]
		public static string[] GetMyImages()
		{
			return null;
		}

		[Token(Token = "0x6001FB7")]
		[Address(RVA = "0xECFF98", Offset = "0xECFF98", VA = "0xECFF98")]
		[AsyncStateMachine(typeof(<GetAvatar>d__2))]
		public static Task<JToken> GetAvatar(string user, bool buffer = true)
		{
			return null;
		}
	}
	[Token(Token = "0x2000633")]
	public class fixMipBias : GBehaviour
	{
		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float mipBias;

		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float lastMipBias;

		[Token(Token = "0x6001FBB")]
		[Address(RVA = "0xED0F8C", Offset = "0xED0F8C", VA = "0xED0F8C")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001FBC")]
		[Address(RVA = "0xED10B4", Offset = "0xED10B4", VA = "0xED10B4", Slot = "6")]
		public override void Run()
		{
		}

		[Token(Token = "0x6001FBD")]
		[Address(RVA = "0xED11F0", Offset = "0xED11F0", VA = "0xED11F0")]
		private void FixImg()
		{
		}

		[Token(Token = "0x6001FBE")]
		[Address(RVA = "0xED1344", Offset = "0xED1344", VA = "0xED1344")]
		private void FixTexture(Texture texture)
		{
		}

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0xED13D4", Offset = "0xED13D4", VA = "0xED13D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0xED13D8", Offset = "0xED13D8", VA = "0xED13D8")]
		public fixMipBias()
		{
		}
	}
	[Token(Token = "0x2000634")]
	public class testmipmap : Singleton<testmipmap>
	{
		[StructLayout(3)]
		[Token(Token = "0x2000635")]
		[CompilerGenerated]
		private struct <Start>d__2 : IAsyncStateMachine
		{
			[Token(Token = "0x4001FBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001FBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001FBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private object <>u__1;

			[Token(Token = "0x6001FC3")]
			[Address(RVA = "0xED14CC", Offset = "0xED14CC", VA = "0xED14CC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001FC4")]
			[Address(RVA = "0xED1A1C", Offset = "0xED1A1C", VA = "0xED1A1C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture tex;

		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material mat;

		[Token(Token = "0x6001FC1")]
		[Address(RVA = "0xED13EC", Offset = "0xED13EC", VA = "0xED13EC")]
		[AsyncStateMachine(typeof(<Start>d__2))]
		private void Start()
		{
		}

		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0xED1484", Offset = "0xED1484", VA = "0xED1484")]
		public testmipmap()
		{
		}
	}
	[Token(Token = "0x2000636")]
	public class voiceMgr : Singleton<voiceMgr>
	{
		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, AudioSource> mainUIaudioDic;

		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0xED1A28", Offset = "0xED1A28", VA = "0xED1A28")]
		private new void Awake()
		{
		}

		[Token(Token = "0x6001FC6")]
		[Address(RVA = "0xED1B9C", Offset = "0xED1B9C", VA = "0xED1B9C")]
		public voiceMgr()
		{
		}
	}
}
namespace AkilliMum.Standard.Mirror
{
	[Token(Token = "0x2000637")]
	[ExecuteInEditMode]
	[ImageEffectAllowedInSceneView]
	public class CameraShade : EffectBase
	{
		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[UnityEngine.Tooltip("Please use this to enable/disable the script. DO NOT USE script's enable/disable check box!")]
		public bool IsEnabled;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[UnityEngine.Tooltip("Please use this to enable/disable the mirror in mirror effect. Use careful for performance reasons!")]
		public bool IsMirrorInMirror;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Please use this to give unique id's to mirrors which will be drawn together. So if you want to see a mirror inside another mirror, their id must be same!")]
		public string MirrorInMirrorId;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Check this if you suffer reflection glitches. Because camera may occlude some objects according to unity settings!")]
		public bool TurnOffOcclusion;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Device Type (AR, VR, XR)")]
		[UnityEngine.Tooltip("Please select the correct Device Type (Normal for stand alone, AR for augmented reality, Correct VR device for virtual reality device etc.!")]
		public DeviceType DeviceType;

		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Common")]
		[UnityEngine.Tooltip("'Reflect' (mirror, reflective surface, transparent glass etc.) and 'Transparent' (transparent AR surface) is supported only right now.")]
		public WorkType WorkType;

		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("'Work Type->Transparent->Clear Color' clear color for AR mode transparency")]
		public Color TClearColor;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("The mirror object's normal direction. Most of the time default 'GreenY' works perfectly. But try others if you get strange behavior.")]
		public FollowVector UpVector;

		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("Reflection intensity. 0 none to 1 perfect.")]
		public float Intensity;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("Disables the GI, if you want perfect reflections check this (like mirrors)")]
		public bool DisableGBuffer;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[UnityEngine.Tooltip("Disables the reflection probes. Specially for deferred rendering, because probes may blend strange with refletion texture!")]
		public bool DisableRProbes;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Runs the script for every Xth frame; you may gain the fps, but you will lose the reality (realtime) of reflection!")]
		[Range(1f, 20f)]
		public int RunForEveryXthFrame;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("Starts to drawing at this level of LOD. So if you do not creating perfect mirrors, you can use lower lods for surface and gain fps.")]
		[Range(0f, 10f)]
		public int CameraLODLevel;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Creates the mipmaps of the texture and uses the Xth value, you can use it specially for blur effects.")]
		[Range(0f, 10f)]
		public int TextureLODLevel;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int _oldTextureLODLevel;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Enables the HDR, so post effects will be visible (like bloom) on the reflection.")]
		[Header("Camera")]
		public bool HDR;

		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool _oldHDR;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		[UnityEngine.Tooltip("Enables the anti aliasing (if only enabled in the project settings) for reflection.")]
		public bool MSAA;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[UnityEngine.Tooltip("Disables the point and spot lights for the reflection. You may gain the fps, but you will lose the reality of reflection.")]
		public bool DisablePixelLights;

		[Token(Token = "0x4001FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[UnityEngine.Tooltip("By default (false) reflection renders the shadows. If you want to disable them, check this box (true) and put 0 to 'Shadow Distance'.")]
		public bool Shadow;

		[Token(Token = "0x4001FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("Max shadow distance to draw. You may gain fps for lower values but you will lose the reality of reflection.")]
		public float ShadowDistance;

		[Token(Token = "0x4001FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[UnityEngine.Tooltip("Enables the culling distance calculations.")]
		public bool Cull;

		[Token(Token = "0x4001FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("Cull circle distance, so it just draws the objects in the distance. You may gain the fps, but you will lose the reality of reflection.")]
		public float CullDistance;

		[Token(Token = "0x4001FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[UnityEngine.Tooltip("Easy selection for reflection quality. Select 'Full' for perfect reflections! VR can render half; so select x2 etc. and try to find the best visual!")]
		public TextureSizeType TextureSize;

		[Token(Token = "0x4001FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("The size (quality) of the reflection if manual is selected above! It should be set to width of the screen for perfect reflection! But try lower values to gain fps.")]
		public int ManualSize;

		[Token(Token = "0x4001FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int _oldTextureSize;

		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("Does not works right now, will be used on next releases.")]
		public bool UseCameraClipPlane;

		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[UnityEngine.Tooltip("Clipping distance to draw the reflection X units from the surface.")]
		public float ClipPlaneOffset;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("Only these layers will be reflected by the reflection. So you can select what to be reflected with the reflection by putting them on certain layers.")]
		public LayerMask ReflectLayers;

		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[UnityEngine.Tooltip("Use this option if you use CULL-ing or Reflect-Layers != Everything. So, not reflected surfaces blend with texture nicely.")]
		public bool MixBlackColor;

		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		[Header("Depth Blur")]
		[UnityEngine.Tooltip("Enables the advanced depth blur calculations.")]
		public bool EnableDepthBlur;

		[Token(Token = "0x4001FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		private bool _oldEnableDepthBlur;

		[Token(Token = "0x4001FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UnityEngine.Tooltip("Depth blur shader to run on reflection texture.")]
		public Shader DepthBlurShader;

		[Token(Token = "0x4001FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material _depthBlurMaterial;

		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 30f)]
		[UnityEngine.Tooltip("Changes the depth distance, so the objects near to the reflective surface becomes more visible or not.")]
		public float DepthBlurCutoff;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Range(1f, 20f)]
		[UnityEngine.Tooltip("Runs the depth blur shader on reflection texture X times. Larger iterations make more blurry images (but may decrease the fps)!")]
		public int DepthBlurIterations;

		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UnityEngine.Tooltip("This option makes the less blur on the pixels which are closer to surface. So you can make the far away pixels (on depth) more blurry!")]
		[Range(1f, 20f)]
		public float DepthBlurSurfacePower;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[UnityEngine.Tooltip("Normally depth blur makes a circle blur. You can change this value if you want more horizontal blur!")]
		[Range(1f, 50f)]
		public int DepthBlurHorizontalMultiplier;

		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UnityEngine.Tooltip("Normally depth blur makes a circle blur. You can change this value if you want more vertical blur!")]
		[Range(1f, 50f)]
		public int DepthBlurVerticalMultiplier;

		[Token(Token = "0x4001FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[UnityEngine.Tooltip("Enables the simple depth calculations.")]
		[Header("Simple Depth")]
		public bool EnableSimpleDepth;

		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		private bool _oldEnableSimpleDepth;

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 10f)]
		[UnityEngine.Tooltip("Changes the depth distance, so the objects near to the reflective surface becomes more visible or not.")]
		public float SimpleDepthCutoff;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Effected Objects and Materials")]
		[UnityEngine.Tooltip("Reflective surfaces (gameObjects) must be put here with their's shader! Script calculates the reflection according to their position etc.")]
		public Shade[] Shades;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<Renderer> _renderers;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Shader to Run on Final Texture")]
		[UnityEngine.Tooltip("Enables the some effects on reflection, like blur etc.")]
		public bool EnableFinalShader;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[UnityEngine.Tooltip("Effect shader (like blur) must be put here to run on reflection texture.")]
		public Shader FinalShader;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material _finalMaterial;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[UnityEngine.Tooltip("(Deprecated, please use T Clear Color if blur is needed) In full transparent AR, blur may mix with black color. This option may reduce the artifacts.")]
		public bool EnableARMode;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Range(1f, 20f)]
		[UnityEngine.Tooltip("Runs the effect shader on reflection texture X times. For example if it is a blur, larger iterations makes more blury images (but may decrease the fps)!")]
		public int Iterations;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[UnityEngine.Tooltip("Takes the Xth neighbour pixel on blur calculations. Change it until you get desired effect.")]
		public float NeighbourPixels;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[UnityEngine.Tooltip("Does not works right now. Will be used on next releases.")]
		public float BlockSize;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Header("Refraction")]
		[UnityEngine.Tooltip("You can give refractions to the reflection. Use a refraction normal map here.")]
		public Texture2D RefractionTexture;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[UnityEngine.Tooltip("Refraction intensity according to the 'Refraction Texture'. Bigger values creates more refraction!")]
		public float Refraction;

		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[UnityEngine.Tooltip("Enables a simple wave simulation on the surface.")]
		[Header("Waves")]
		public bool EnableWaves;

		[Token(Token = "0x4001FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[UnityEngine.Tooltip("Noise texture to create the wave effect.")]
		public Texture2D WaveNoiseTexture;

		[Token(Token = "0x4001FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[UnityEngine.Tooltip("Wave size. Just adapt it according to your needs.")]
		public float WaveSize;

		[Token(Token = "0x4001FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[UnityEngine.Tooltip("Refraction distortion size. Just adapt it according to your needs.")]
		public float WaveDistortion;

		[Token(Token = "0x4001FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[UnityEngine.Tooltip("Speed of the wave simulation. Just adapt it according to your needs.")]
		public float WaveSpeed;

		[Token(Token = "0x4001FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[Header("Ripples")]
		[UnityEngine.Tooltip("Enables a simple ripple simulation on the surface.")]
		public bool EnableRipples;

		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[UnityEngine.Tooltip("Ripple normal map to create the ripple effect.")]
		public Texture2D RippleTexture;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[UnityEngine.Tooltip("Ripple size. Just adapt it according to your needs.")]
		public float RippleSize;

		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[UnityEngine.Tooltip("Refraction distortion size. Just adapt it according to your needs.")]
		public float RippleRefraction;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[UnityEngine.Tooltip("Ripple density size. Just adapt it according to your needs.")]
		public float RippleDensity;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[UnityEngine.Tooltip("Speed of the ripple simulation. Just adapt it according to your needs.")]
		public float RippleSpeed;

		[Token(Token = "0x4002000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Header("Masking")]
		[UnityEngine.Tooltip("Enables masking on the surface. So you can create wetness, semi reflective surfaces, ices etc.")]
		public bool EnableMask;

		[Token(Token = "0x4002001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[UnityEngine.Tooltip("Alpha based masking texture.")]
		public Texture2D MaskTexture;

		[Token(Token = "0x4002002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[UnityEngine.Tooltip("Tiling for the texture if you want to replicate the masking along the surface.")]
		public Vector2 MaskTiling;

		[Token(Token = "0x4002003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[UnityEngine.Tooltip("Mask cutoff to change the alpha based calculations.")]
		[Range(0f, 1f)]
		public float MaskCutoff;

		[Token(Token = "0x4002004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[Range(1f, 50f)]
		[UnityEngine.Tooltip("Gives a little darkness to the edges of the alpha base texture. So you can simulate a fake depth (like water) on masking.")]
		public float MaskEdgeDarkness;

		[Token(Token = "0x4002005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int _stereoEye;

		[Token(Token = "0x4002006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private bool _isObjectVisible;

		[Token(Token = "0x4002007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private long _frameCount;

		[Token(Token = "0x4002008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool _usePreviousTexture;

		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private GameObject ReflectionCameraPrefab;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject _reflectionCameraPrefabInstance;

		[Token(Token = "0x400200B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Hashtable _reflectionCameras;

		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private RenderTexture _reflectionTexture1;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private RenderTexture _reflectionTexture1Other;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private RenderTexture _reflectionTexture2;

		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private RenderTexture _reflectionTexture2Other;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private RenderTexture _reflectionTexture3;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private RenderTexture _reflectionTexture3Other;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private RenderTexture _reflectionTextureDepth;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private RenderTexture _reflectionTextureOtherDepth;

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private List<XRNodeState> nodeStates;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private RenderTexture _reflectionTexture1_copy;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private RenderTexture _reflectionTexture1Other_copy;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private RenderTexture _reflectionTexture2_copy;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private RenderTexture _reflectionTexture2Other_copy;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private RenderTexture _reflectionTexture3_copy;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private RenderTexture _reflectionTexture3Other_copy;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private RenderTexture _reflectionTextureDepth_copy;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private RenderTexture _reflectionTextureOtherDepth_copy;

		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0xED1BE4", Offset = "0xED1BE4", VA = "0xED1BE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0xED1DD8", Offset = "0xED1DD8", VA = "0xED1DD8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0xED1BE8", Offset = "0xED1BE8", VA = "0xED1BE8")]
		public void InitializeProperties()
		{
		}

		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0xED1DDC", Offset = "0xED1DDC", VA = "0xED1DDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FCB")]
		[Address(RVA = "0xED1DEC", Offset = "0xED1DEC", VA = "0xED1DEC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001FCC")]
		[Address(RVA = "0xED1DF0", Offset = "0xED1DF0", VA = "0xED1DF0")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0xED1E0C", Offset = "0xED1E0C", VA = "0xED1E0C")]
		public IList<Camera> RenderReflective([Optional] Camera sentCamera, bool invert = true, bool renderCam = true)
		{
			return null;
		}

		[Token(Token = "0x6001FCE")]
		[Address(RVA = "0xED3B4C", Offset = "0xED3B4C", VA = "0xED3B4C")]
		private Camera GetCamera(Camera sentCamera)
		{
			return null;
		}

		[Token(Token = "0x6001FCF")]
		[Address(RVA = "0xED1FC0", Offset = "0xED1FC0", VA = "0xED1FC0")]
		private Camera RenderMe(Camera sentCamera, bool invert = true, bool renderCam = true)
		{
			return null;
		}

		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0xED5844", Offset = "0xED5844", VA = "0xED5844")]
		public bool checkFrustum(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0xED3BEC", Offset = "0xED3BEC", VA = "0xED3BEC")]
		public bool IsObjectVisible(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0xED5B60", Offset = "0xED5B60", VA = "0xED5B60")]
		public void UpdateMaterialProperties(Camera sentCamera)
		{
		}

		[Token(Token = "0x6001FD3")]
		[Address(RVA = "0xED6798", Offset = "0xED6798", VA = "0xED6798")]
		public IList<RenderTexture> CopyTextures()
		{
			return null;
		}

		[Token(Token = "0x6001FD4")]
		[Address(RVA = "0xED7224", Offset = "0xED7224", VA = "0xED7224")]
		public void PasteTextures(IList<RenderTexture> textures)
		{
		}

		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0xED5588", Offset = "0xED5588", VA = "0xED5588")]
		private Vector4 CameraSpacePlane(Matrix4x4 worldToCameraMatrix, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0xED7648", Offset = "0xED7648", VA = "0xED7648")]
		private static float sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0xED56EC", Offset = "0xED56EC", VA = "0xED56EC")]
		private static void MakeProjectionMatrixOblique(ref Matrix4x4 matrix, Vector4 clipPlane)
		{
		}

		[Token(Token = "0x6001FD8")]
		[Address(RVA = "0xED7668", Offset = "0xED7668", VA = "0xED7668")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0xED5074", Offset = "0xED5074", VA = "0xED5074")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0xED7C98", Offset = "0xED7C98", VA = "0xED7C98")]
		public int[] GetTextureSizes()
		{
			return null;
		}

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0xED3D90", Offset = "0xED3D90", VA = "0xED3D90")]
		private void CreateMirrorObjects(Camera currentCamera, out Camera reflectionCamera)
		{
		}

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0xED59B0", Offset = "0xED59B0", VA = "0xED59B0")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0xED54F4", Offset = "0xED54F4", VA = "0xED54F4")]
		private void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x6001FDE")]
		private T CopyComponent<T>(T original, GameObject destination) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0xED7E0C", Offset = "0xED7E0C", VA = "0xED7E0C")]
		public CameraShade()
		{
		}
	}
	[Token(Token = "0x2000639")]
	public enum FollowVector
	{
		[Token(Token = "0x4002023")]
		None = 0,
		[Token(Token = "0x4002024")]
		RedX = 1,
		[Token(Token = "0x4002025")]
		RedX_Negative = 4,
		[Token(Token = "0x4002026")]
		GreenY = 2,
		[Token(Token = "0x4002027")]
		GreenY_Negative = 5,
		[Token(Token = "0x4002028")]
		BlueZ = 3,
		[Token(Token = "0x4002029")]
		BlueZ_Negative = 6
	}
	[Token(Token = "0x200063A")]
	public enum WorkType
	{
		[Token(Token = "0x400202B")]
		Reflect = 1,
		[Token(Token = "0x400202C")]
		Direct,
		[Token(Token = "0x400202D")]
		Transparent,
		[Token(Token = "0x400202E")]
		WaterTop,
		[Token(Token = "0x400202F")]
		WaterBottom
	}
	[Token(Token = "0x200063B")]
	public enum TextureSizeType
	{
		[Token(Token = "0x4002031")]
		Manual = 0,
		[Token(Token = "0x4002032")]
		x4 = 6,
		[Token(Token = "0x4002033")]
		x2 = 5,
		[Token(Token = "0x4002034")]
		Full = 1,
		[Token(Token = "0x4002035")]
		Half = 2,
		[Token(Token = "0x4002036")]
		Quarter = 4
	}
	[Token(Token = "0x200063C")]
	public enum DeviceType
	{
		[Token(Token = "0x4002038")]
		Normal = 0,
		[Token(Token = "0x4002039")]
		GeneralVR = 1,
		[Token(Token = "0x400203A")]
		OculusVR_RiftS = 2,
		[Token(Token = "0x400203B")]
		OculusVR_Quest = 3,
		[Token(Token = "0x400203C")]
		AR = 30
	}
	[Serializable]
	[Token(Token = "0x200063D")]
	public class Shade
	{
		[Token(Token = "0x400203D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject ObjectToShade;

		[Token(Token = "0x400203E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material MaterialToChange;

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0xED8084", Offset = "0xED8084", VA = "0xED8084")]
		public Shade()
		{
		}
	}
	[Token(Token = "0x200063E")]
	public class CameraShadeMultiManager : EffectBase
	{
		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IList<CameraShade> _originalCameraShades;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CameraShade[,] _copyCameraShades;

		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IList<RenderTexture>[,] _copyTextures;

		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera _attachedCam;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(1f, 10f)]
		[UnityEngine.Tooltip("Mirror in mirror recursive count")]
		public int Depth;

		[Token(Token = "0x4002044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Please use this to give unique id's to mirrors which will be drawn together. So if you want to see a mirror inside another mirror, their id must be same!")]
		public string MirrorInMirrorId;

		[Token(Token = "0x4002045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Decreases the size of the reflection 2 over X times for each depth, so you may gain performance but may lose reality!")]
		[Range(0f, 10f)]
		public float DecreaseSize2OverXTimes;

		[Token(Token = "0x4002046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("Draws shadows only for first X depth (if applicable on real mirror, if it is not; if will disable it anyway)!")]
		[Range(1f, 10f)]
		public int ShadowDepth;

		[Token(Token = "0x4002047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Disables the MSAA after Xth depth (if applicable on real mirror, if it is not; if will disable it anyway)!")]
		[Range(1f, 10f)]
		public int DisableMSAAAfterXthDepth;

		[Token(Token = "0x4002048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(1f, 10f)]
		[UnityEngine.Tooltip("Disables the pixel lights after Xth depth (if applicable on real mirror, if it is not; if will disable it anyway)!")]
		public int DisablePixelLightsAfterXthDepth;

		[Token(Token = "0x4002049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Camera[] cameraList;

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0xED808C", Offset = "0xED808C", VA = "0xED808C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0xED8090", Offset = "0xED8090", VA = "0xED8090")]
		public void InitializeProperties()
		{
		}

		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0xED8774", Offset = "0xED8774", VA = "0xED8774")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0xED9890", Offset = "0xED9890", VA = "0xED9890")]
		private int GetNextCamIndex(int camIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0xED8778", Offset = "0xED8778", VA = "0xED8778")]
		public void RenderReflective()
		{
		}

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0xED9944", Offset = "0xED9944", VA = "0xED9944")]
		public CameraShadeMultiManager()
		{
		}
	}
	[Token(Token = "0x200063F")]
	public class Container
	{
		[Token(Token = "0x17000192")]
		public Camera Camera
		{
			[Token(Token = "0x6001FEE")]
			[Address(RVA = "0xED9A24", Offset = "0xED9A24", VA = "0xED9A24")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FEF")]
			[Address(RVA = "0xED9A2C", Offset = "0xED9A2C", VA = "0xED9A2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000193")]
		public CameraShade CameraShade
		{
			[Token(Token = "0x6001FF0")]
			[Address(RVA = "0xED9A34", Offset = "0xED9A34", VA = "0xED9A34")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FF1")]
			[Address(RVA = "0xED9A3C", Offset = "0xED9A3C", VA = "0xED9A3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0xED9A44", Offset = "0xED9A44", VA = "0xED9A44")]
		public Container()
		{
		}
	}
	[Token(Token = "0x2000640")]
	public class EffectBase : MonoBehaviour
	{
		[Token(Token = "0x400204C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, RenderTexture> AlreadyRendered;

		[Token(Token = "0x400204D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _insiderendering;

		[Token(Token = "0x17000194")]
		public bool InsideRendering
		{
			[Token(Token = "0x6001FF3")]
			[Address(RVA = "0xED9A4C", Offset = "0xED9A4C", VA = "0xED9A4C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001FF4")]
			[Address(RVA = "0xED9A54", Offset = "0xED9A54", VA = "0xED9A54")]
			set
			{
			}
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0xED9A60", Offset = "0xED9A60", VA = "0xED9A60")]
		public EffectBase()
		{
		}
	}
	[Token(Token = "0x2000641")]
	public static class Extensions
	{
		[Token(Token = "0x6001FF6")]
		public static void CopyTo<T>(this Component comp, T target) where T : Component, new()
		{
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0xED9AE8", Offset = "0xED9AE8", VA = "0xED9AE8")]
		public static bool IsVisibleFrom(this Renderer renderer, Camera camera)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000642")]
	[ImageEffectAllowedInSceneView]
	[ExecuteInEditMode]
	public class MirrorManager : MonoBehaviour
	{
		[Token(Token = "0x400204E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Please use this to enable/disable the script. DO NOT USE script's enable/disable check box!")]
		public bool IsEnabled;

		[Token(Token = "0x400204F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("You can name your script for to understand what is it for. Because if you use a lot of reflection scripts, you can forget which one is which :)")]
		public string Name;

		[Token(Token = "0x4002050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Please use this to enable/disable the mirror in mirror effect. Use careful for performance reasons!")]
		public bool IsMirrorInMirror;

		[Token(Token = "0x4002051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Please use this to give unique id's to mirrors which will be drawn together. So if you want to see a mirror inside another mirror, their id must be same!")]
		public string MirrorInMirrorId;

		[Token(Token = "0x4002052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Check this if you suffer reflection glitches. Because camera may occlude some objects according to unity settings!")]
		public bool TurnOffOcclusion;

		[Token(Token = "0x4002053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("Please select the correct platform, Normal for stand alone like desktop or mobile etc., VR for virtual reality, AR for augmented reality!")]
		public Platform Platform;

		[Token(Token = "0x4002054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("'Reflect' (mirror, reflective surface, transparent glass etc.) and 'Transparent' (transparent AR surface) is supported only right now.")]
		public WorkingType WorkingType;

		[Token(Token = "0x4002055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("Clear color for transparency. It may create good visuals if you wanna blur a transparent object with that color!")]
		public Color TransparencyClearColor;

		[Token(Token = "0x4002056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("The mirror object's normal direction. Most of the time default 'GreenY' works perfectly. But try others if you get strange behavior.")]
		public UpVector UpVector;

		[Token(Token = "0x4002057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Starts to drawing at this level of LOD. So if you do not creating perfect mirrors, you can use lower lod for surface and gain fps.")]
		[Range(0f, 10f)]
		public int CameraLODLevel;

		[Token(Token = "0x4002058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("Enables the HDR, so post effects will be visible (like bloom) on the reflection.")]
		public bool HDR;

		[Token(Token = "0x4002059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Enables the anti aliasing (if only enabled in the project settings) for reflection. May decrease the performance, use with caution!")]
		public MSAALevel MSAALevel;

		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[UnityEngine.Tooltip("Filter mode to render texture (transparent render should render to Point!).")]
		public FilterMode FilterMode;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Disables the point and spot lights for the reflection. You may gain the fps, but you will lose the reality of reflection.")]
		public bool DisablePixelLights;

		[Token(Token = "0x400205C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[UnityEngine.Tooltip("Enables the shadow on reflection. If you disable it; you may gain the fps, but you will lose the reality of reflection.")]
		public bool Shadow;

		[Token(Token = "0x400205D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		[UnityEngine.Tooltip("Enables the culling distance calculations.")]
		public bool Cull;

		[Token(Token = "0x400205E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[UnityEngine.Tooltip("Cull circle distance, so it just draws the objects in the distance. You may gain the fps, but you will lose the reality of reflection.")]
		public float CullDistance;

		[Token(Token = "0x400205F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("Easy selection for reflection quality. Select 'Full' for perfect reflections! VR can render half; so select x2 etc. and try to find the best visual!")]
		public RenderTextureSize RenderTextureSize;

		[Token(Token = "0x4002060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("The size (quality) of the reflection if manual is selected above! It should be set to width of the screen for perfect reflection! But try lower values to gain fps.")]
		public double ManualSize;

		[Token(Token = "0x4002061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("Clipping distance to draw the reflection X units from the surface.")]
		public float ClipPlaneOffset;

		[Token(Token = "0x4002062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[UnityEngine.Tooltip("Only these layers will be rendered by the reflection. So you can select what to be reflected with the reflection by putting them on certain layers.")]
		public LayerMask ReflectLayers;

		[Token(Token = "0x4002063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("Reflective surfaces (gameObjects) must be put here! Script calculates the reflection according to their position etc. and uses their material.")]
		public GameObject[] ReflectiveObjects;

		[Token(Token = "0x4002064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("You can add your custom shader paths here (like 'Shader Graphs/MyShader') and use mirror texture on your own shader!")]
		public string[] CustomShaders;

		[NonSerialized]
		[Token(Token = "0x4002065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Camera _camera;

		[Token(Token = "0x4002066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public CameraManager _cameraManager;

		[Token(Token = "0x4002067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public RendererManager _rendererManager;

		[Token(Token = "0x4002068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public RenderTextureManager _renderTextureManager;

		[Token(Token = "0x4002069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public OptionManager _optionManager;

		[Token(Token = "0x400206A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool _insideRendering;

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0xED9B54", Offset = "0xED9B54", VA = "0xED9B54", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0xED9B58", Offset = "0xED9B58", VA = "0xED9B58")]
		public void InitializeMirror()
		{
		}

		[Token(Token = "0x6001FFA")]
		[Address(RVA = "0xED9FA4", Offset = "0xED9FA4", VA = "0xED9FA4")]
		private RenderTextureManager.RenderTextureSettings GetRenderTextureSettings()
		{
			return default(RenderTextureManager.RenderTextureSettings);
		}

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0xED9EC8", Offset = "0xED9EC8", VA = "0xED9EC8")]
		private RendererManager.RendererSettings GetRendererSettings()
		{
			return default(RendererManager.RendererSettings);
		}

		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0xED9E34", Offset = "0xED9E34", VA = "0xED9E34")]
		private CameraManager.CameraSettings GetCameraSettings()
		{
			return default(CameraManager.CameraSettings);
		}

		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0xEDA014", Offset = "0xEDA014", VA = "0xEDA014")]
		private OptionManager.OptionSettings GetOptionSettings()
		{
			return default(OptionManager.OptionSettings);
		}

		[Token(Token = "0x6001FFE")]
		[Address(RVA = "0xEDA060", Offset = "0xEDA060", VA = "0xEDA060")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FFF")]
		[Address(RVA = "0xEDA064", Offset = "0xEDA064", VA = "0xEDA064")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0xEDA068", Offset = "0xEDA068", VA = "0xEDA068")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6002001")]
		[Address(RVA = "0xEDA090", Offset = "0xEDA090", VA = "0xEDA090", Slot = "5")]
		public virtual IList<Camera> RenderReflective(CameraShadeMultiManager manager, [Optional] Camera sentCamera, bool invert = true, bool renderCam = true)
		{
			return null;
		}

		[Token(Token = "0x6002002")]
		[Address(RVA = "0xEDA4D8", Offset = "0xEDA4D8", VA = "0xEDA4D8")]
		private Camera GetCamera(Camera sentCamera)
		{
			return null;
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0xEDA570", Offset = "0xEDA570", VA = "0xEDA570", Slot = "6")]
		public virtual void CommonRender()
		{
		}

		[Token(Token = "0x6002004")]
		[Address(RVA = "0xEDA258", Offset = "0xEDA258", VA = "0xEDA258")]
		private Camera RenderMe(CameraShadeMultiManager manager, StereoTargetEyeMask stereoTargetEyeMask, Camera sentCamera, bool invert = true, bool renderCam = true)
		{
			return null;
		}

		[Token(Token = "0x6002005")]
		[Address(RVA = "0xEDB524", Offset = "0xEDB524", VA = "0xEDB524", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0xEDB560", Offset = "0xEDB560", VA = "0xEDB560")]
		public MirrorManager()
		{
		}
	}
	[Token(Token = "0x2000643")]
	public enum UpVector
	{
		[Token(Token = "0x400206C")]
		None = 0,
		[Token(Token = "0x400206D")]
		RedX = 1,
		[Token(Token = "0x400206E")]
		RedX_Negative = 4,
		[Token(Token = "0x400206F")]
		GreenY = 2,
		[Token(Token = "0x4002070")]
		GreenY_Negative = 5,
		[Token(Token = "0x4002071")]
		BlueZ = 3,
		[Token(Token = "0x4002072")]
		BlueZ_Negative = 6
	}
	[Token(Token = "0x2000644")]
	public enum MSAALevel
	{
		[Token(Token = "0x4002074")]
		None = 0,
		[Token(Token = "0x4002075")]
		X2 = 2,
		[Token(Token = "0x4002076")]
		X4 = 4,
		[Token(Token = "0x4002077")]
		X8 = 8
	}
	[Token(Token = "0x2000645")]
	public enum WorkingType
	{
		[Token(Token = "0x4002079")]
		Reflect = 1,
		[Token(Token = "0x400207A")]
		Transparent = 30
	}
	[Token(Token = "0x2000646")]
	public enum RenderTextureSize
	{
		[Token(Token = "0x400207C")]
		Manual = 0,
		[Token(Token = "0x400207D")]
		x4 = 6,
		[Token(Token = "0x400207E")]
		x2 = 5,
		[Token(Token = "0x400207F")]
		Full = 1,
		[Token(Token = "0x4002080")]
		Half = 2,
		[Token(Token = "0x4002081")]
		Quarter = 4
	}
	[Token(Token = "0x2000647")]
	public enum Platform
	{
		[Token(Token = "0x4002083")]
		StandAlone = 0,
		[Token(Token = "0x4002084")]
		VR = 10,
		[Token(Token = "0x4002085")]
		AR = 100
	}
	[Token(Token = "0x2000648")]
	public class RendererManager : ManagerBase
	{
		[Token(Token = "0x2000649")]
		public struct RendererSettings
		{
			[Token(Token = "0x17000195")]
			public UpVector UpVector
			{
				[Token(Token = "0x600200F")]
				[Address(RVA = "0xEDBF08", Offset = "0xEDBF08", VA = "0xEDBF08")]
				[CompilerGenerated]
				readonly get
				{
					return default(UpVector);
				}
				[Token(Token = "0x6002010")]
				[Address(RVA = "0xEDBF10", Offset = "0xEDBF10", VA = "0xEDBF10")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000196")]
			public IList<string> CustomShaders
			{
				[Token(Token = "0x6002011")]
				[Address(RVA = "0xEDBF18", Offset = "0xEDBF18", VA = "0xEDBF18")]
				[CompilerGenerated]
				readonly get
				{
					return null;
				}
				[Token(Token = "0x6002012")]
				[Address(RVA = "0xEDBF20", Offset = "0xEDBF20", VA = "0xEDBF20")]
				[CompilerGenerated]
				set
				{
				}
			}
		}

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Renderer> _renderers;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Material> _materials;

		[Token(Token = "0x4002088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RendererSettings _settings;

		[Token(Token = "0x6002007")]
		[Address(RVA = "0xED9F4C", Offset = "0xED9F4C", VA = "0xED9F4C")]
		public RendererManager(GameObject[] reflectiveObjects, RendererSettings renderSettings)
		{
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0xEDBCB4", Offset = "0xEDBCB4", VA = "0xEDBCB4")]
		public void SetSettings(RendererSettings renderSettings)
		{
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0xEDB5CC", Offset = "0xEDB5CC", VA = "0xEDB5CC")]
		public void SetReflectiveObjects(GameObject[] reflectiveObjects)
		{
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0xEDA574", Offset = "0xEDA574", VA = "0xEDA574")]
		public bool IsObjectVisible(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0xEDBCC4", Offset = "0xEDBCC4", VA = "0xEDBCC4")]
		public Vector3 GetPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0xEDBD3C", Offset = "0xEDBD3C", VA = "0xEDBD3C")]
		public Vector3 GetNormal(bool invert)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600200D")]
		[Address(RVA = "0xEDB2E0", Offset = "0xEDB2E0", VA = "0xEDB2E0")]
		public void UpdateMaterials(RenderTextureManager renderTextureManager)
		{
		}

		[Token(Token = "0x600200E")]
		[Address(RVA = "0xEDBF04", Offset = "0xEDBF04", VA = "0xEDBF04", Slot = "4")]
		public override void Destroy()
		{
		}
	}
	[Token(Token = "0x200064A")]
	public abstract class ManagerBase
	{
		[Token(Token = "0x400208B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _isDirty;

		[Token(Token = "0x17000197")]
		public bool IsDirty
		{
			[Token(Token = "0x6002013")]
			[Address(RVA = "0xEDBF28", Offset = "0xEDBF28", VA = "0xEDBF28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002014")]
			[Address(RVA = "0xEDBF30", Offset = "0xEDBF30", VA = "0xEDBF30")]
			set
			{
			}
		}

		[Token(Token = "0x6002015")]
		public abstract void Destroy();

		[Token(Token = "0x6002016")]
		[Address(RVA = "0xEDBF3C", Offset = "0xEDBF3C", VA = "0xEDBF3C")]
		public void DestroyObject(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x6002017")]
		[Address(RVA = "0xEDB5BC", Offset = "0xEDB5BC", VA = "0xEDB5BC")]
		protected ManagerBase()
		{
		}
	}
	[Token(Token = "0x200064B")]
	public class RenderTextureManager : ManagerBase
	{
		[Token(Token = "0x200064C")]
		public struct RenderTextureSettings
		{
			[Token(Token = "0x17000198")]
			public bool HDR
			{
				[Token(Token = "0x6002023")]
				[Address(RVA = "0xEDC48C", Offset = "0xEDC48C", VA = "0xEDC48C")]
				[CompilerGenerated]
				readonly get
				{
					return default(bool);
				}
				[Token(Token = "0x6002024")]
				[Address(RVA = "0xEDC494", Offset = "0xEDC494", VA = "0xEDC494")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000199")]
			public RenderTextureSize Size
			{
				[Token(Token = "0x6002025")]
				[Address(RVA = "0xEDC4A0", Offset = "0xEDC4A0", VA = "0xEDC4A0")]
				[CompilerGenerated]
				readonly get
				{
					return default(RenderTextureSize);
				}
				[Token(Token = "0x6002026")]
				[Address(RVA = "0xEDC4A8", Offset = "0xEDC4A8", VA = "0xEDC4A8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700019A")]
			public double ManualSize
			{
				[Token(Token = "0x6002027")]
				[Address(RVA = "0xEDC4B0", Offset = "0xEDC4B0", VA = "0xEDC4B0")]
				[CompilerGenerated]
				readonly get
				{
					return default(double);
				}
				[Token(Token = "0x6002028")]
				[Address(RVA = "0xEDC4B8", Offset = "0xEDC4B8", VA = "0xEDC4B8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700019B")]
			public WorkingType WorkingType
			{
				[Token(Token = "0x6002029")]
				[Address(RVA = "0xEDC4C0", Offset = "0xEDC4C0", VA = "0xEDC4C0")]
				[CompilerGenerated]
				readonly get
				{
					return default(WorkingType);
				}
				[Token(Token = "0x600202A")]
				[Address(RVA = "0xEDC4C8", Offset = "0xEDC4C8", VA = "0xEDC4C8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700019C")]
			public MSAALevel MSAALevel
			{
				[Token(Token = "0x600202B")]
				[Address(RVA = "0xEDC4D0", Offset = "0xEDC4D0", VA = "0xEDC4D0")]
				[CompilerGenerated]
				readonly get
				{
					return default(MSAALevel);
				}
				[Token(Token = "0x600202C")]
				[Address(RVA = "0xEDC4D8", Offset = "0xEDC4D8", VA = "0xEDC4D8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700019D")]
			public FilterMode FilterMode
			{
				[Token(Token = "0x600202D")]
				[Address(RVA = "0xEDC4E0", Offset = "0xEDC4E0", VA = "0xEDC4E0")]
				[CompilerGenerated]
				readonly get
				{
					return default(FilterMode);
				}
				[Token(Token = "0x600202E")]
				[Address(RVA = "0xEDC4E8", Offset = "0xEDC4E8", VA = "0xEDC4E8")]
				[CompilerGenerated]
				set
				{
				}
			}
		}

		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RenderTexture _leftOrCenterRT;

		[Token(Token = "0x400208D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RenderTexture _rightRT;

		[Token(Token = "0x400208E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture _leftOrCenterDepthRT;

		[Token(Token = "0x400208F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture _rightDepthRT;

		[Token(Token = "0x4002090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RenderTextureSettings _settings;

		[Token(Token = "0x6002018")]
		[Address(RVA = "0xED9FDC", Offset = "0xED9FDC", VA = "0xED9FDC")]
		public RenderTextureManager(RenderTextureSettings settings)
		{
		}

		[Token(Token = "0x6002019")]
		[Address(RVA = "0xEDBFB4", Offset = "0xEDBFB4", VA = "0xEDBFB4")]
		public void SetSettings(RenderTextureSettings settings)
		{
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0xEDBFC4", Offset = "0xEDBFC4", VA = "0xEDBFC4")]
		public RenderTexture GetLeftOrCenterRenderTexture()
		{
			return null;
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0xEDBFCC", Offset = "0xEDBFCC", VA = "0xEDBFCC")]
		public RenderTexture GetRightRenderTexture()
		{
			return null;
		}

		[Token(Token = "0x600201C")]
		[Address(RVA = "0xEDBFD4", Offset = "0xEDBFD4", VA = "0xEDBFD4")]
		public RenderTexture GetLeftOrCenterDepthTexture()
		{
			return null;
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0xEDBFDC", Offset = "0xEDBFDC", VA = "0xEDBFDC")]
		public RenderTexture GetRightDepthTexture()
		{
			return null;
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0xEDABB0", Offset = "0xEDABB0", VA = "0xEDABB0")]
		public void CreateRenderTextures()
		{
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0xEDC214", Offset = "0xEDC214", VA = "0xEDC214")]
		private RenderTexture Create(int width, int height, int depth, RenderTextureFormat textureFormat, RenderTextureFormat textureFormatHDR)
		{
			return null;
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0xEDC334", Offset = "0xEDC334", VA = "0xEDC334")]
		private RenderTexture CreateDepth(int width, int height, int depth)
		{
			return null;
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0xEDBFE4", Offset = "0xEDBFE4", VA = "0xEDBFE4")]
		private int[] GetTextureSizes()
		{
			return null;
		}

		[Token(Token = "0x6002022")]
		[Address(RVA = "0xEDC40C", Offset = "0xEDC40C", VA = "0xEDC40C", Slot = "4")]
		public override void Destroy()
		{
		}
	}
	[Token(Token = "0x200064D")]
	public class CameraManager : ManagerBase
	{
		[Token(Token = "0x200064E")]
		public struct CameraSettings
		{
			[Token(Token = "0x1700019E")]
			public WorkingType WorkingType
			{
				[Token(Token = "0x600203B")]
				[Address(RVA = "0xEDCDD8", Offset = "0xEDCDD8", VA = "0xEDCDD8")]
				[CompilerGenerated]
				readonly get
				{
					return default(WorkingType);
				}
				[Token(Token = "0x600203C")]
				[Address(RVA = "0xEDCDE0", Offset = "0xEDCDE0", VA = "0xEDCDE0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700019F")]
			public Color TransparencyClearColor
			{
				[Token(Token = "0x600203D")]
				[Address(RVA = "0xEDCDE8", Offset = "0xEDCDE8", VA = "0xEDCDE8")]
				[CompilerGenerated]
				readonly get
				{
					return default(Color);
				}
				[Token(Token = "0x600203E")]
				[Address(RVA = "0xEDCDF4", Offset = "0xEDCDF4", VA = "0xEDCDF4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001A0")]
			public Platform Platform
			{
				[Token(Token = "0x600203F")]
				[Address(RVA = "0xEDCE00", Offset = "0xEDCE00", VA = "0xEDCE00")]
				[CompilerGenerated]
				readonly get
				{
					return default(Platform);
				}
				[Token(Token = "0x6002040")]
				[Address(RVA = "0xEDCE08", Offset = "0xEDCE08", VA = "0xEDCE08")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001A1")]
			public bool HDR
			{
				[Token(Token = "0x6002041")]
				[Address(RVA = "0xEDCE10", Offset = "0xEDCE10", VA = "0xEDCE10")]
				[CompilerGenerated]
				readonly get
				{
					return default(bool);
				}
				[Token(Token = "0x6002042")]
				[Address(RVA = "0xEDCE18", Offset = "0xEDCE18", VA = "0xEDCE18")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001A2")]
			public bool TurnOffOcclusion
			{
				[Token(Token = "0x6002043")]
				[Address(RVA = "0xEDCE24", Offset = "0xEDCE24", VA = "0xEDCE24")]
				[CompilerGenerated]
				readonly get
				{
					return default(bool);
				}
				[Token(Token = "0x6002044")]
				[Address(RVA = "0xEDCE2C", Offset = "0xEDCE2C", VA = "0xEDCE2C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001A3")]
			public MSAALevel MSAALevel
			{
				[Token(Token = "0x6002045")]
				[Address(RVA = "0xEDCE38", Offset = "0xEDCE38", VA = "0xEDCE38")]
				[CompilerGenerated]
				readonly get
				{
					return default(MSAALevel);
				}
				[Token(Token = "0x6002046")]
				[Address(RVA = "0xEDCE40", Offset = "0xEDCE40", VA = "0xEDCE40")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001A4")]
			public bool Cull
			{
				[Token(Token = "0x6002047")]
				[Address(RVA = "0xEDCE48", Offset = "0xEDCE48", VA = "0xEDCE48")]
				[CompilerGenerated]
				readonly get
				{
					return default(bool);
				}
				[Token(Token = "0x6002048")]
				[Address(RVA = "0xEDCE50", Offset = "0xEDCE50", VA = "0xEDCE50")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001A5")]
			public float CullDistance
			{
				[Token(Token = "0x6002049")]
				[Address(RVA = "0xEDCE5C", Offset = "0xEDCE5C", VA = "0xEDCE5C")]
				[CompilerGenerated]
				readonly get
				{
					return default(float);
				}
				[Token(Token = "0x600204A")]
				[Address(RVA = "0xEDCE64", Offset = "0xEDCE64", VA = "0xEDCE64")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001A6")]
			public LayerMask ReflectLayers
			{
				[Token(Token = "0x600204B")]
				[Address(RVA = "0xEDCE6C", Offset = "0xEDCE6C", VA = "0xEDCE6C")]
				[CompilerGenerated]
				readonly get
				{
					return default(LayerMask);
				}
				[Token(Token = "0x600204C")]
				[Address(RVA = "0xEDCE74", Offset = "0xEDCE74", VA = "0xEDCE74")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001A7")]
			public float ClipPlaneOffset
			{
				[Token(Token = "0x600204D")]
				[Address(RVA = "0xEDCE7C", Offset = "0xEDCE7C", VA = "0xEDCE7C")]
				[CompilerGenerated]
				readonly get
				{
					return default(float);
				}
				[Token(Token = "0x600204E")]
				[Address(RVA = "0xEDCE84", Offset = "0xEDCE84", VA = "0xEDCE84")]
				[CompilerGenerated]
				set
				{
				}
			}
		}

		[Token(Token = "0x4002097")]
		private const string CameraNameStart = "Mirror camera for ";

		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera _mainCamera;

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject _mirrorCameraContainer;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera _mirrorCamera;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CameraSettings _settings;

		[Token(Token = "0x600202F")]
		[Address(RVA = "0xED9E8C", Offset = "0xED9E8C", VA = "0xED9E8C")]
		public CameraManager(CameraSettings settings)
		{
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0xEDC4F0", Offset = "0xEDC4F0", VA = "0xEDC4F0")]
		public void SetSettings(CameraSettings settings)
		{
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0xEDA7A0", Offset = "0xEDA7A0", VA = "0xEDA7A0")]
		public void SetReferenceCamera(Camera camera)
		{
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0xEDC504", Offset = "0xEDC504", VA = "0xEDC504")]
		public Camera GetMirrorCamera()
		{
			return null;
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0xEDA87C", Offset = "0xEDA87C", VA = "0xEDA87C")]
		public void CreateMirrorCamera()
		{
		}

		[Token(Token = "0x6002034")]
		[Address(RVA = "0xEDC50C", Offset = "0xEDC50C", VA = "0xEDC50C")]
		private void UpdateCameraModes()
		{
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0xEDCA3C", Offset = "0xEDCA3C", VA = "0xEDCA3C")]
		private void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0xEDCAD0", Offset = "0xEDCAD0", VA = "0xEDCAD0")]
		private Vector4 CameraSpacePlane(Matrix4x4 worldToCameraMatrix, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0xEDCC34", Offset = "0xEDCC34", VA = "0xEDCC34")]
		private void MakeProjectionMatrixOblique(ref Matrix4x4 matrix, Vector4 clipPlane)
		{
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0xEDCD90", Offset = "0xEDCD90", VA = "0xEDCD90")]
		private float sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0xEDAE1C", Offset = "0xEDAE1C", VA = "0xEDAE1C")]
		public void Draw(RendererManager rendererManager, RenderTextureManager renderTextureManager, CameraShadeMultiManager manager, StereoTargetEyeMask stereoTargetEyeMask, bool invert, bool renderCam)
		{
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0xEDCDB0", Offset = "0xEDCDB0", VA = "0xEDCDB0", Slot = "4")]
		public override void Destroy()
		{
		}
	}
	[Token(Token = "0x200064F")]
	public class OptionManager : ManagerBase
	{
		[Token(Token = "0x2000650")]
		public struct OptionSettings
		{
			[Token(Token = "0x170001A8")]
			public int LODLevel
			{
				[Token(Token = "0x6002054")]
				[Address(RVA = "0xEDCEDC", Offset = "0xEDCEDC", VA = "0xEDCEDC")]
				[CompilerGenerated]
				readonly get
				{
					return default(int);
				}
				[Token(Token = "0x6002055")]
				[Address(RVA = "0xEDCEE4", Offset = "0xEDCEE4", VA = "0xEDCEE4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001A9")]
			public bool DisablePixelLights
			{
				[Token(Token = "0x6002056")]
				[Address(RVA = "0xEDCEEC", Offset = "0xEDCEEC", VA = "0xEDCEEC")]
				[CompilerGenerated]
				readonly get
				{
					return default(bool);
				}
				[Token(Token = "0x6002057")]
				[Address(RVA = "0xEDCEF4", Offset = "0xEDCEF4", VA = "0xEDCEF4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001AA")]
			public bool Shadow
			{
				[Token(Token = "0x6002058")]
				[Address(RVA = "0xEDCF00", Offset = "0xEDCF00", VA = "0xEDCF00")]
				[CompilerGenerated]
				readonly get
				{
					return default(bool);
				}
				[Token(Token = "0x6002059")]
				[Address(RVA = "0xEDCF08", Offset = "0xEDCF08", VA = "0xEDCF08")]
				[CompilerGenerated]
				set
				{
				}
			}
		}

		[Token(Token = "0x40020A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool _previousFog;

		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int _previousLODLevel;

		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _previousMaxAdditionalLightsCount;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _previousShadowDistance;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OptionSettings _settings;

		[Token(Token = "0x600204F")]
		[Address(RVA = "0xEDA030", Offset = "0xEDA030", VA = "0xEDA030")]
		public OptionManager(OptionSettings settings)
		{
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0xEDCE8C", Offset = "0xEDCE8C", VA = "0xEDCE8C")]
		private void SetSettings(OptionSettings settings)
		{
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0xEDA714", Offset = "0xEDA714", VA = "0xEDA714")]
		public void Start()
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0xEDCE94", Offset = "0xEDCE94", VA = "0xEDCE94")]
		public void End()
		{
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0xEDCED8", Offset = "0xEDCED8", VA = "0xEDCED8", Slot = "4")]
		public override void Destroy()
		{
		}
	}
}
